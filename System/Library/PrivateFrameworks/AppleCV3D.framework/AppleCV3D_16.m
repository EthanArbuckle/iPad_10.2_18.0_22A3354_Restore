uint64_t sub_20EE6DFE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngine27SetReinitializationCallbackEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine27SetReinitializationCallbackEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngine27SetReinitializationCallbackEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine27SetReinitializationCallbackEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE6E04C()
{
  return &unk_24C9EE5A0;
}

void sub_20EE6E05C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE6E070(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE5C0;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE6E0A4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE5C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EE6E0C0(uint64_t result, uint64_t a2)
{
  int64x2_t *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  void **v8;
  int64x2_t v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void **v25;
  void **v26;
  unint64_t v27;
  void **v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int64_t v48;
  char *v49;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  unint64_t v54;
  char *v55;
  void *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  BOOL v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  int64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  size_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  __int128 *v120;
  _OWORD *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  unint64_t v133;
  void **v134;
  int64x2_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  int64_t v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  __int128 *v150;
  _OWORD *v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  unint64_t v155;
  void **v156;
  char **v157;
  unint64_t v158;
  char **v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int64_t v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  _BYTE *v182;
  _BYTE *v183;
  uint64_t v184;
  uint64_t v185;
  _BYTE *v186;
  _BYTE *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  BOOL v197;
  unint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  int64_t v207;
  char *v208;
  char *v209;
  char *v210;
  void *v211;
  void *v212;
  unint64_t v213;
  char *v214;
  void *v215;
  char *v216;
  char *v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  int64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  unint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  void *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  unint64_t v237;
  int64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  __int128 *v245;
  char *v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  unint64_t v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  unint64_t v257;
  uint64_t v258;
  __int128 *v259;
  _OWORD *v260;
  uint64_t v261;
  __int128 v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  int64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  __int128 *v277;
  _OWORD *v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void **v286;
  void **v287;
  unint64_t v288;
  void **v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  void **v294;
  char **v295;
  unint64_t v296;
  char **v297;
  unint64_t v298;
  uint64_t v299;
  char *v300;
  char *v301;
  std::__shared_weak_count *v302;
  unint64_t *p_shared_owners;
  unint64_t v304;
  unint64_t v305;
  char *v306;
  char *v307;
  int64_t v308;
  unint64_t v309;
  char *v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  __int128 *v315;
  _OWORD *v316;
  uint64_t v317;
  __int128 v318;
  uint64_t v319;
  uint64_t *v320;
  char **v321;
  __int128 __p;
  uint64_t v323;
  __int128 v324;
  __int128 v325;
  int v326;
  _OWORD v327[2];
  int v328;
  _BYTE v329[64];
  __int128 v330;
  _BYTE v331[32];
  _OWORD v332[4];

  v2 = *(int64x2_t **)(result + 8);
  if (v2[3].i8[1])
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2->i64[1] + 432))(v2->i64[1]);
  if (*(int *)(result + 4904) < 1)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2->i64[1] + 432))(v2->i64[1]);
  v4 = *(_QWORD *)(result + 4864);
  v5 = *(_QWORD *)(v4 + 5184);
  v6 = *(_BYTE **)(v4 + 5176);
  if ((unint64_t)(v5 - (_QWORD)v6) < 0xF
    || !*v6
    || !v6[1]
    || !v6[2]
    || !v6[3]
    || !v6[4]
    || !v6[5]
    || !v6[6]
    || !v6[7]
    || !v6[8]
    || !v6[9]
    || !v6[10]
    || !v6[11]
    || !v6[12]
    || !v6[13]
    || !v6[14])
  {
    return result;
  }
  v321 = (char **)&v2[723].i64[1];
  if (!v2[3].i8[1]
    && *(int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2->i64[1] + 432))(v2->i64[1]) + 4904) >= 1)
  {
    v22 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2->i64[1] + 432))(v2->i64[1]) + 4864);
    v23 = *(_QWORD *)(v22 + 5184);
    v24 = *(_BYTE **)(v22 + 5176);
    if ((unint64_t)(v23 - (_QWORD)v24) >= 0xF
      && *v24
      && v24[1]
      && v24[2]
      && v24[3]
      && v24[4]
      && v24[5]
      && v24[6]
      && v24[7]
      && v24[8]
      && v24[9]
      && v24[10]
      && v24[11]
      && v24[12]
      && v24[13]
      && v24[14])
    {
      memset(v327, 0, sizeof(v327));
      v328 = 733220944;
      kdebug_trace();
      v324 = 0u;
      v325 = 0u;
      v326 = 733223608;
      kdebug_trace();
      v25 = (void **)v2[726].i64[1];
      v26 = (void **)v2[727].i64[0];
      if (v26 == v25)
      {
        v320 = &v2[728].i64[1];
        v26 = (void **)v2[726].i64[1];
      }
      else
      {
        v27 = v2[728].u64[0];
        v28 = &v25[v27 / 0x1E];
        v29 = (unint64_t)*v28 + 136 * (v27 % 0x1E);
        v30 = (unint64_t)v25[(v2[728].i64[1] + v27) / 0x1E] + 136 * ((v2[728].i64[1] + v27) % 0x1E);
        if (v29 != v30)
        {
          do
          {
            sub_20F093958(v2->u64[1], (int8x8_t **)(v29 + 24), (_QWORD *)v29);
            v29 += 136;
            if (v29 - (_QWORD)*v28 == 4080)
            {
              v145 = (unint64_t)v28[1];
              ++v28;
              v29 = v145;
            }
          }
          while (v29 != v30);
          v25 = (void **)v2[726].i64[1];
          v26 = (void **)v2[727].i64[0];
        }
        v320 = &v2[728].i64[1];
        if (v26 == v25)
        {
          v25 = v26;
        }
        else
        {
          v155 = v2[728].u64[0];
          v156 = &v25[v155 / 0x1E];
          v157 = (char **)((char *)*v156 + 136 * (v155 % 0x1E));
          v158 = (unint64_t)v25[(v2[728].i64[1] + v155) / 0x1E] + 136 * ((v2[728].i64[1] + v155) % 0x1E);
          if (v157 != (char **)v158)
          {
            do
            {
              v157 = sub_20EE630A8(v157) + 17;
              if ((char *)v157 - (_BYTE *)*v156 == 4080)
              {
                v159 = (char **)v156[1];
                ++v156;
                v157 = v159;
              }
            }
            while (v157 != (char **)v158);
            v26 = (void **)v2[727].i64[0];
            v25 = (void **)v2[726].i64[1];
          }
        }
      }
      *v320 = 0;
      v160 = (char *)v26 - (char *)v25;
      if (v160 >= 0x11)
      {
        do
        {
          operator delete(*v25);
          v25 = (void **)(v2[726].i64[1] + 8);
          v2[726].i64[1] = (uint64_t)v25;
          v160 = v2[727].i64[0] - (_QWORD)v25;
        }
        while (v160 > 0x10);
      }
      if (v160 >> 3 == 1)
      {
        v161 = 15;
      }
      else
      {
        if (v160 >> 3 != 2)
        {
LABEL_194:
          if (v2[19].i8[5] && (!v2[19].i8[6] || !*(_BYTE *)(a2 + 97)))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2->i64[1] + 56))(v2->i64[1], a2);
          if (v2[546].i8[2] && !*(_BYTE *)(a2 + 97))
            goto LABEL_356;
          v162 = v2[717].i64[0];
          if (*(_BYTE *)(v162 + 2321))
            goto LABEL_356;
          sub_20F3257D0(*(_QWORD *)(v162 + 80), a2, (char **)&__p);
          v163 = (char *)__p;
          if ((_QWORD)__p == *((_QWORD *)&__p + 1))
          {
LABEL_345:
            if (v163)
            {
              v300 = (char *)*((_QWORD *)&__p + 1);
              v301 = v163;
              if (*((char **)&__p + 1) != v163)
              {
                do
                {
                  v302 = (std::__shared_weak_count *)*((_QWORD *)v300 - 1);
                  if (v302)
                  {
                    p_shared_owners = (unint64_t *)&v302->__shared_owners_;
                    do
                      v304 = __ldaxr(p_shared_owners);
                    while (__stlxr(v304 - 1, p_shared_owners));
                    if (!v304)
                    {
                      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                      std::__shared_weak_count::__release_weak(v302);
                    }
                  }
                  v300 -= 16;
                }
                while (v300 != v163);
                v301 = (char *)__p;
              }
              *((_QWORD *)&__p + 1) = v163;
              operator delete(v301);
            }
LABEL_356:
            kdebug_trace();
            kdebug_trace();
            goto LABEL_21;
          }
          *(_OWORD *)v329 = __p;
          v164 = v323;
          v323 = 0;
          __p = 0uLL;
          v166 = *(_QWORD *)a2;
          v165 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)&v329[16] = v164;
          *(_QWORD *)&v329[24] = v166;
          *(_QWORD *)&v329[32] = v165;
          if (v165)
          {
            v167 = (unint64_t *)(v165 + 8);
            do
              v168 = __ldxr(v167);
            while (__stxr(v168 + 1, v167));
          }
          memset(&v329[40], 0, 24);
          v169 = *(_QWORD *)(a2 + 16);
          v170 = *(_QWORD *)(a2 + 24);
          v171 = v170 - v169;
          if (v170 != v169)
          {
            v172 = 0xEEEEEEEEEEEEEEEFLL * (v171 >> 3);
            if (v172 >= 0x222222222222223)
              sub_20E867F44();
            v173 = (char *)operator new(v171);
            v174 = 0;
            *(_QWORD *)&v329[40] = v173;
            *(_QWORD *)&v329[48] = v173;
            *(_QWORD *)&v329[56] = &v173[120 * v172];
            do
            {
              v175 = v169 + v174;
              v176 = &v173[v174];
              v177 = *(_OWORD *)(v169 + v174);
              *((_QWORD *)v176 + 2) = *(_QWORD *)(v169 + v174 + 16);
              *(_OWORD *)v176 = v177;
              v178 = *(_OWORD *)(v169 + v174 + 56);
              v179 = *(_OWORD *)(v169 + v174 + 72);
              v180 = *(_QWORD *)(v169 + v174 + 88);
              *(_OWORD *)(v176 + 40) = *(_OWORD *)(v169 + v174 + 40);
              *((_QWORD *)v176 + 11) = v180;
              *(_OWORD *)(v176 + 72) = v179;
              *(_OWORD *)(v176 + 56) = v178;
              *(_OWORD *)(v176 + 24) = *(_OWORD *)(v169 + v174 + 24);
              v181 = *(_OWORD *)(v169 + v174 + 96);
              *((_QWORD *)v176 + 14) = *(_QWORD *)(v169 + v174 + 112);
              *((_OWORD *)v176 + 6) = v181;
              v174 += 120;
            }
            while (v175 + 120 != v170);
            *(_QWORD *)&v329[48] = &v173[v174];
          }
          v330 = 0uLL;
          *(_QWORD *)v331 = 0;
          v183 = *(_BYTE **)(a2 + 40);
          v182 = *(_BYTE **)(a2 + 48);
          v184 = v182 - v183;
          if (v182 != v183)
          {
            if (v184 < 0)
              sub_20E867F44();
            *(_QWORD *)&v330 = operator new(v182 - v183);
            *((_QWORD *)&v330 + 1) = v330;
            v185 = v330 + 16 * (v184 >> 4);
            *(_QWORD *)v331 = v185;
            memcpy((void *)v330, v183, v184 - 4);
            *((_QWORD *)&v330 + 1) = v185;
          }
          v331[8] = 0;
          LOBYTE(v332[0]) = 0;
          if (*(_BYTE *)(a2 + 88))
          {
            memset(&v331[8], 0, 24);
            v187 = *(_BYTE **)(a2 + 64);
            v186 = *(_BYTE **)(a2 + 72);
            v188 = v186 - v187;
            if (v186 != v187)
            {
              if (v188 < 0)
                sub_20E867F44();
              *(_QWORD *)&v331[8] = operator new(v186 - v187);
              *(_QWORD *)&v331[16] = *(_QWORD *)&v331[8];
              v189 = *(_QWORD *)&v331[8] + 16 * (v188 >> 4);
              *(_QWORD *)&v331[24] = v189;
              memcpy(*(void **)&v331[8], v187, v188 - 4);
              *(_QWORD *)&v331[16] = v189;
            }
            LOBYTE(v332[0]) = 1;
          }
          *(_OWORD *)((char *)v332 + 8) = *(_OWORD *)(a2 + 96);
          v190 = (char *)v2[727].i64[0];
          v191 = (char *)v2[726].i64[1];
          v192 = (v190 - v191) >> 3;
          v193 = v190 - v191;
          if (v190 == v191)
            v194 = 0;
          else
            v194 = 30 * v192 - 1;
          v195 = v2[728].u64[0];
          v196 = v2[728].i64[1] + v195;
          if (v194 != v196)
          {
LABEL_318:
            v282 = *(_QWORD *)&v191[8 * (v196 / 0x1E)];
            v283 = v196 % 0x1E;
            v284 = v282 + 136 * v283;
            *(_QWORD *)v284 = 0;
            *(_QWORD *)(v284 + 8) = 0;
            *(_QWORD *)(v284 + 16) = 0;
            *(_OWORD *)v284 = *(_OWORD *)v329;
            *(_QWORD *)(v284 + 16) = *(_QWORD *)&v329[16];
            memset(v329, 0, 24);
            *(_OWORD *)(v284 + 24) = *(_OWORD *)&v329[24];
            *(_QWORD *)&v329[24] = 0;
            *(_QWORD *)&v329[32] = 0;
            *(_QWORD *)(v284 + 40) = 0;
            *(_QWORD *)(v284 + 48) = 0;
            *(_QWORD *)(v284 + 56) = 0;
            *(_OWORD *)(v284 + 40) = *(_OWORD *)&v329[40];
            *(_QWORD *)(v284 + 56) = *(_QWORD *)&v329[56];
            memset(&v329[40], 0, 24);
            *(_QWORD *)(v284 + 64) = 0;
            *(_QWORD *)(v284 + 72) = 0;
            *(_QWORD *)(v284 + 80) = 0;
            *(_OWORD *)(v284 + 64) = v330;
            *(_QWORD *)(v284 + 80) = *(_QWORD *)v331;
            v330 = 0uLL;
            *(_QWORD *)v331 = 0;
            *(_BYTE *)(v284 + 88) = 0;
            v285 = v284 + 88;
            *(_BYTE *)(v285 + 24) = 0;
            if (LOBYTE(v332[0]))
            {
              *(_QWORD *)v285 = 0;
              *(_QWORD *)(v285 + 8) = 0;
              *(_QWORD *)(v285 + 16) = 0;
              *(_OWORD *)v285 = *(_OWORD *)&v331[8];
              *(_QWORD *)(v282 + 136 * v283 + 104) = *(_QWORD *)&v331[24];
              memset(&v331[8], 0, 24);
              *(_BYTE *)(v285 + 24) = 1;
            }
            *(_OWORD *)(v282 + 136 * v283 + 120) = *(_OWORD *)((char *)v332 + 8);
            ++v2[728].i64[1];
            sub_20EE630A8((char **)v329);
            if (!v2[546].i8[0])
              goto LABEL_344;
            v286 = (void **)v2[726].i64[1];
            v287 = (void **)v2[727].i64[0];
            if (v287 == v286)
            {
              v287 = (void **)v2[726].i64[1];
            }
            else
            {
              v288 = v2[728].u64[0];
              v289 = &v286[v288 / 0x1E];
              v290 = (unint64_t)*v289 + 136 * (v288 % 0x1E);
              v291 = (unint64_t)v286[(v2[728].i64[1] + v288) / 0x1E] + 136 * ((v2[728].i64[1] + v288) % 0x1E);
              if (v290 != v291)
              {
                do
                {
                  sub_20F093958(v2->u64[1], (int8x8_t **)(v290 + 24), (_QWORD *)v290);
                  v290 += 136;
                  if (v290 - (_QWORD)*v289 == 4080)
                  {
                    v292 = (unint64_t)v289[1];
                    ++v289;
                    v290 = v292;
                  }
                }
                while (v290 != v291);
                v286 = (void **)v2[726].i64[1];
                v287 = (void **)v2[727].i64[0];
              }
              if (v287 == v286)
              {
                v286 = v287;
              }
              else
              {
                v293 = v2[728].u64[0];
                v294 = &v286[v293 / 0x1E];
                v295 = (char **)((char *)*v294 + 136 * (v293 % 0x1E));
                v296 = (unint64_t)v286[(v2[728].i64[1] + v293) / 0x1E] + 136 * ((v2[728].i64[1] + v293) % 0x1E);
                if (v295 != (char **)v296)
                {
                  do
                  {
                    v295 = sub_20EE630A8(v295) + 17;
                    if ((char *)v295 - (_BYTE *)*v294 == 4080)
                    {
                      v297 = (char **)v294[1];
                      ++v294;
                      v295 = v297;
                    }
                  }
                  while (v295 != (char **)v296);
                  v287 = (void **)v2[727].i64[0];
                  v286 = (void **)v2[726].i64[1];
                }
              }
            }
            *v320 = 0;
            v298 = (char *)v287 - (char *)v286;
            if (v298 >= 0x11)
            {
              do
              {
                operator delete(*v286);
                v286 = (void **)(v2[726].i64[1] + 8);
                v2[726].i64[1] = (uint64_t)v286;
                v298 = v2[727].i64[0] - (_QWORD)v286;
              }
              while (v298 > 0x10);
            }
            if (v298 >> 3 == 1)
            {
              v299 = 15;
            }
            else
            {
              if (v298 >> 3 != 2)
              {
LABEL_344:
                v163 = (char *)__p;
                goto LABEL_345;
              }
              v299 = 30;
            }
            v2[728].i64[0] = v299;
            goto LABEL_344;
          }
          v197 = v195 >= 0x1E;
          v198 = v195 - 30;
          if (!v197)
          {
            v209 = (char *)v2[727].i64[1];
            v210 = (char *)v2[726].i64[0];
            if (v192 >= (unint64_t)((v209 - v210) >> 3))
            {
              if (v209 == v210)
                v213 = 1;
              else
                v213 = (v209 - v210) >> 2;
              if (!(v213 >> 61))
              {
                v214 = (char *)operator new(8 * v213);
                v215 = operator new(0xFF0uLL);
                v216 = &v214[8 * v192];
                v217 = &v214[8 * v213];
                if (v192 == v213)
                {
                  if (v193 < 1)
                  {
                    if (v190 == v191)
                      v226 = 1;
                    else
                      v226 = v193 >> 2;
                    if (v226 >> 61)
                      sub_20E877A38();
                    v216 = (char *)operator new(8 * v226);
                    v217 = &v216[8 * v226];
                    operator delete(v214);
                    v190 = (char *)v2[727].i64[0];
                    v191 = (char *)v2[726].i64[1];
                    v214 = v216;
                  }
                  else
                  {
                    v218 = v192 + 2;
                    if (v192 >= -1)
                      v218 = v192 + 1;
                    v216 -= 8 * (v218 >> 1);
                  }
                }
                *(_QWORD *)v216 = v215;
                v227 = v216 + 8;
                if (v190 == v191)
                {
                  v228 = v216;
                  v229 = v216 + 8;
                }
                else
                {
                  do
                  {
                    if (v216 == v214)
                    {
                      if (v227 >= v217)
                      {
                        if (v217 == v216)
                          v235 = 1;
                        else
                          v235 = (v217 - v216) >> 2;
                        if (v235 >> 61)
                          sub_20E877A38();
                        v236 = (char *)operator new(8 * v235);
                        v214 = v236;
                        v237 = (v235 + 3) >> 2;
                        v231 = &v236[8 * v237];
                        v229 = v231;
                        v238 = v227 - v216;
                        if (v227 != v216)
                        {
                          v229 = &v231[v238 & 0xFFFFFFFFFFFFFFF8];
                          v239 = v238 - 8;
                          v240 = &v236[8 * v237];
                          v241 = v216;
                          if (v239 < 0x38)
                            goto LABEL_381;
                          v242 = 8 * v237;
                          v240 = &v236[8 * v237];
                          v241 = v216;
                          if ((unint64_t)(v240 - v216) < 0x20)
                            goto LABEL_381;
                          v243 = (v239 >> 3) + 1;
                          v244 = 8 * (v243 & 0x3FFFFFFFFFFFFFFCLL);
                          v240 = &v231[v244];
                          v241 = &v216[v244];
                          v245 = (__int128 *)(v216 + 16);
                          v246 = &v236[v242 + 16];
                          v247 = v243 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v248 = *v245;
                            *((_OWORD *)v246 - 1) = *(v245 - 1);
                            *(_OWORD *)v246 = v248;
                            v245 += 2;
                            v246 += 32;
                            v247 -= 4;
                          }
                          while (v247);
                          if (v243 != (v243 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_381:
                            do
                            {
                              v249 = *(_QWORD *)v241;
                              v241 += 8;
                              *(_QWORD *)v240 = v249;
                              v240 += 8;
                            }
                            while (v240 != v229);
                          }
                        }
                        v217 = &v236[8 * v235];
                        operator delete(v216);
                      }
                      else
                      {
                        v233 = (v217 - v227) >> 3;
                        if (v233 >= -1)
                          v234 = v233 + 1;
                        else
                          v234 = v233 + 2;
                        v229 = &v227[8 * (v234 >> 1)];
                        v231 = &v216[8 * (v234 >> 1)];
                        if (v227 == v216)
                        {
                          v214 = v227;
                        }
                        else
                        {
                          memmove(&v216[8 * (v234 >> 1)], v216, v227 - v216);
                          v214 = v216;
                        }
                      }
                    }
                    else
                    {
                      v231 = v216;
                      v229 = v227;
                    }
                    v232 = *((_QWORD *)v190 - 1);
                    v190 -= 8;
                    *((_QWORD *)v231 - 1) = v232;
                    v228 = v231 - 8;
                    v227 = v229;
                    v216 = v228;
                  }
                  while (v190 != (char *)v2[726].i64[1]);
                }
                v230 = (void *)v2[726].i64[0];
                v2[726].i64[0] = (uint64_t)v214;
                v2[726].i64[1] = (uint64_t)v228;
                v2[727].i64[0] = (uint64_t)v229;
                v2[727].i64[1] = (uint64_t)v217;
                if (v230)
                  operator delete(v230);
                goto LABEL_317;
              }
            }
            else
            {
              v211 = operator new(0xFF0uLL);
              v212 = v211;
              if (v209 != v190)
              {
                *(_QWORD *)v190 = v211;
LABEL_316:
                v2[727].i64[0] += 8;
LABEL_317:
                v191 = (char *)v2[726].i64[1];
                v196 = v2[728].i64[1] + v2[728].i64[0];
                goto LABEL_318;
              }
              if (v191 == v210)
              {
                if (v190 == v191)
                  v250 = 1;
                else
                  v250 = (v209 - v191) >> 2;
                if (v250 >> 61)
                  goto LABEL_377;
                v251 = (char *)operator new(8 * v250);
                v252 = (v250 + 3) >> 2;
                v225 = &v251[8 * v252];
                v253 = v225;
                if (v190 != v191)
                {
                  v253 = &v225[8 * v192];
                  v254 = &v251[8 * v252];
                  v255 = v191;
                  if ((unint64_t)(v193 - 8) < 0x38)
                    goto LABEL_382;
                  v256 = &v251[8 * v252];
                  v254 = v256;
                  v255 = v191;
                  if ((unint64_t)(v256 - v191) < 0x20)
                    goto LABEL_382;
                  v257 = ((unint64_t)(v193 - 8) >> 3) + 1;
                  v258 = 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
                  v254 = &v225[v258];
                  v255 = &v191[v258];
                  v259 = (__int128 *)(v191 + 16);
                  v260 = v256 + 16;
                  v261 = v257 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v262 = *v259;
                    *(v260 - 1) = *(v259 - 1);
                    *v260 = v262;
                    v259 += 2;
                    v260 += 2;
                    v261 -= 4;
                  }
                  while (v261);
                  if (v257 != (v257 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_382:
                    do
                    {
                      v263 = *(_QWORD *)v255;
                      v255 += 8;
                      *(_QWORD *)v254 = v263;
                      v254 += 8;
                    }
                    while (v254 != v253);
                  }
                }
                v2[726].i64[0] = (uint64_t)v251;
                v2[726].i64[1] = (uint64_t)v225;
                v2[727].i64[0] = (uint64_t)v253;
                v2[727].i64[1] = (uint64_t)&v251[8 * v250];
                if (v191)
                {
                  operator delete(v191);
                  v225 = (char *)v2[726].i64[1];
                }
              }
              else
              {
                v225 = v191;
              }
              *((_QWORD *)v225 - 1) = v212;
              v264 = (char *)v2[726].i64[1];
              v2[726].i64[1] = (uint64_t)(v264 - 8);
              v265 = *((_QWORD *)v264 - 1);
              v2[726].i64[1] = (uint64_t)v264;
              v266 = (char *)v2[727].i64[0];
              if (v266 != (char *)v2[727].i64[1])
              {
LABEL_299:
                *(_QWORD *)v266 = v265;
                goto LABEL_316;
              }
              v267 = (char *)v2[726].i64[0];
              if (v264 > v267)
              {
                v268 = (v264 - v267) >> 3;
                if (v268 >= -1)
                  v269 = v268 + 1;
                else
                  v269 = v268 + 2;
                v270 = v269 >> 1;
                v271 = -v270;
                v272 = &v264[-8 * v270];
                v273 = v266 - v264;
                if (v266 != v264)
                {
                  memmove(&v264[-8 * v270], v264, v266 - v264);
                  v264 = (char *)v2[726].i64[1];
                }
                v2[727].i64[0] = (uint64_t)&v272[v273];
                v2[726].i64[1] = (uint64_t)&v264[8 * v271];
                *(_QWORD *)&v272[v273] = v265;
                goto LABEL_316;
              }
              if (v266 == v267)
                v305 = 1;
              else
                v305 = (v266 - v267) >> 2;
              if (!(v305 >> 61))
              {
                v306 = (char *)operator new(8 * v305);
                v307 = &v306[8 * (v305 >> 2)];
                v308 = v266 - v264;
                v63 = v266 == v264;
                v266 = v307;
                if (v63)
                  goto LABEL_370;
                v266 = &v307[v308 & 0xFFFFFFFFFFFFFFF8];
                v309 = v308 - 8;
                if (v309 >= 0x38)
                {
                  v311 = &v306[8 * (v305 >> 2)];
                  v310 = v311;
                  if ((unint64_t)(v311 - v264) >= 0x20)
                  {
                    v312 = (v309 >> 3) + 1;
                    v313 = 8 * (v312 & 0x3FFFFFFFFFFFFFFCLL);
                    v310 = &v307[v313];
                    v314 = &v264[v313];
                    v315 = (__int128 *)(v264 + 16);
                    v316 = v311 + 16;
                    v317 = v312 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v318 = *v315;
                      *(v316 - 1) = *(v315 - 1);
                      *v316 = v318;
                      v315 += 2;
                      v316 += 2;
                      v317 -= 4;
                    }
                    while (v317);
                    v264 = v314;
                    if (v312 == (v312 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_370:
                      v2[726].i64[0] = (uint64_t)v306;
                      v2[726].i64[1] = (uint64_t)v307;
                      v2[727].i64[0] = (uint64_t)v266;
                      v2[727].i64[1] = (uint64_t)&v306[8 * v305];
                      if (v267)
                      {
                        operator delete(v267);
                        v266 = (char *)v2[727].i64[0];
                      }
                      goto LABEL_299;
                    }
                  }
                }
                else
                {
                  v310 = &v306[8 * (v305 >> 2)];
                }
                do
                {
                  v319 = *(_QWORD *)v264;
                  v264 += 8;
                  *(_QWORD *)v310 = v319;
                  v310 += 8;
                }
                while (v310 != v266);
                goto LABEL_370;
              }
            }
LABEL_377:
            sub_20E877A38();
          }
          v2[728].i64[0] = v198;
          v200 = v191 + 8;
          v199 = *(_QWORD *)v191;
          v2[726].i64[1] = (uint64_t)(v191 + 8);
          if (v190 != (char *)v2[727].i64[1])
          {
LABEL_315:
            *(_QWORD *)v190 = v199;
            goto LABEL_316;
          }
          v201 = (char *)v2[726].i64[0];
          if (v200 > v201)
          {
            v202 = (v200 - v201) >> 3;
            if (v202 >= -1)
              v203 = v202 + 1;
            else
              v203 = v202 + 2;
            v204 = v203 >> 1;
            v205 = -v204;
            v206 = &v200[-8 * v204];
            v207 = v190 - v200;
            if (v190 != v200)
            {
              memmove(&v200[-8 * v204], v200, v190 - v200);
              v190 = (char *)v2[726].i64[1];
            }
            v208 = &v190[8 * v205];
            v190 = &v206[v207];
            v2[727].i64[0] = (uint64_t)&v206[v207];
            v2[726].i64[1] = (uint64_t)v208;
            goto LABEL_315;
          }
          if (v190 == v201)
            v219 = 1;
          else
            v219 = (v190 - v201) >> 2;
          if (v219 >> 61)
            goto LABEL_377;
          v220 = (char *)operator new(8 * v219);
          v221 = &v220[8 * (v219 >> 2)];
          v222 = v190 - v200;
          v63 = v190 == v200;
          v190 = v221;
          if (!v63)
          {
            v190 = &v221[v222 & 0xFFFFFFFFFFFFFFF8];
            v223 = v222 - 8;
            if (v223 < 0x38)
            {
              v224 = &v220[8 * (v219 >> 2)];
              do
              {
LABEL_312:
                v281 = *(_QWORD *)v200;
                v200 += 8;
                *(_QWORD *)v224 = v281;
                v224 += 8;
              }
              while (v224 != v190);
              goto LABEL_313;
            }
            v274 = &v220[8 * (v219 >> 2)];
            v224 = v274;
            if ((unint64_t)(v274 - v200) < 0x20)
              goto LABEL_312;
            v275 = (v223 >> 3) + 1;
            v276 = 8 * (v275 & 0x3FFFFFFFFFFFFFFCLL);
            v224 = &v221[v276];
            v200 += v276;
            v277 = (__int128 *)(v191 + 24);
            v278 = v274 + 16;
            v279 = v275 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v280 = *v277;
              *(v278 - 1) = *(v277 - 1);
              *v278 = v280;
              v277 += 2;
              v278 += 2;
              v279 -= 4;
            }
            while (v279);
            if (v275 != (v275 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_312;
          }
LABEL_313:
          v2[726].i64[0] = (uint64_t)v220;
          v2[726].i64[1] = (uint64_t)v221;
          v2[727].i64[0] = (uint64_t)v190;
          v2[727].i64[1] = (uint64_t)&v220[8 * v219];
          if (v201)
          {
            operator delete(v201);
            v190 = (char *)v2[727].i64[0];
          }
          goto LABEL_315;
        }
        v161 = 30;
      }
      v2[728].i64[0] = v161;
      goto LABEL_194;
    }
  }
LABEL_21:
  if (v2[725].i64[1])
  {
    v7 = *(_QWORD *)(v2[723].i64[1] + 8 * (v2[725].i64[0] / 0x19uLL)) + 160 * (v2[725].i64[0] % 0x19uLL);
    (*(void (**)(uint64_t, unint64_t, unint64_t, unint64_t))(*(_QWORD *)v2->i64[1] + 168))(v2->i64[1], v7, v7 + 16, v7 + 32);
    v8 = (void **)v2[723].i64[1];
    v9 = vaddq_s64(v2[725], (int64x2_t)xmmword_2102E3FB0);
    v2[725] = v9;
    if (v9.i64[0] >= 0x32uLL)
    {
      operator delete(*v8);
      v2[723].i64[1] += 8;
      v2[725].i64[0] -= 25;
    }
  }
  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)v2->i64[1] + 120))(v327);
  if (*(_QWORD *)&v327[0])
  {
    v18 = v2[717].i64[0];
    if (*(_BYTE *)(v18 + 2321))
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v31 = sub_20F320EC0(*(_QWORD *)(v18 + 80), *(uint64_t *)&v327[0], v10, v11, v12, v13, v14, v15, v16, v17);
      v19 = v31;
      v20 = v31 >> 8;
      v21 = BYTE2(v31);
      if ((v31 & 0x10000) != 0)
      {
        *(_QWORD *)v329 = *(_QWORD *)(*(_QWORD *)(v18 + 80) + 2808);
        sub_20F2F19AC(v18, (uint64_t *)v329, 1);
      }
    }
    BYTE2(v324) = v21;
    LOWORD(v324) = v19 | (v20 << 8);
    if (!v19)
      goto LABEL_154;
    sub_20F2F74F8(v2[717].i64[0]);
    v32 = v2[725].i64[1];
    if (v32)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 1519, (uint64_t)"mapping_add_new_kf_output_queue_.empty()", 40, (uint64_t)"The mapping_add_new_kf_output_queue_ needs to be empty when pushing new result", 78, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v32 = v2[725].i64[1];
    }
    v33 = (char *)v2[724].i64[0];
    v34 = *v321;
    v35 = (v33 - *v321) >> 3;
    v36 = v33 - *v321;
    if (v33 == *v321)
      v37 = 0;
    else
      v37 = 25 * v35 - 1;
    v38 = v2[725].u64[0];
    v39 = v38 + v32;
    if (v37 != v38 + v32)
      goto LABEL_151;
    if (v38 >= 0x19)
    {
      v2[725].i64[0] = v38 - 25;
      v40 = v34 + 8;
      v41 = *(_QWORD *)v34;
      v2[723].i64[1] = (uint64_t)(v34 + 8);
      if (v33 != (char *)v2[724].i64[1])
      {
LABEL_148:
        *(_QWORD *)v33 = v41;
        goto LABEL_149;
      }
      v42 = (char *)v2[723].i64[0];
      if (v40 > v42)
      {
        v43 = (v40 - v42) >> 3;
        if (v43 >= -1)
          v44 = v43 + 1;
        else
          v44 = v43 + 2;
        v45 = v44 >> 1;
        v46 = -v45;
        v47 = &v40[-8 * v45];
        v48 = v33 - v40;
        if (v33 != v40)
        {
          memmove(&v40[-8 * v45], v40, v33 - v40);
          v33 = *v321;
        }
        v49 = &v33[8 * v46];
        v33 = &v47[v48];
        v2[724].i64[0] = (uint64_t)&v47[v48];
        v2[723].i64[1] = (uint64_t)v49;
        goto LABEL_148;
      }
      if (v33 == v42)
        v60 = 1;
      else
        v60 = (v33 - v42) >> 2;
      if (!(v60 >> 61))
      {
        v61 = (char *)operator new(8 * v60);
        v62 = &v61[8 * (v60 >> 2)];
        v64 = v33 - v40;
        v63 = v33 == v40;
        v33 = v62;
        if (v63)
          goto LABEL_146;
        v33 = &v62[v64 & 0xFFFFFFFFFFFFFFF8];
        v65 = v64 - 8;
        if (v65 >= 0x38)
        {
          v117 = &v61[8 * (v60 >> 2)];
          v66 = v117;
          if ((unint64_t)(v117 - v40) >= 0x20)
          {
            v118 = (v65 >> 3) + 1;
            v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
            v66 = &v62[v119];
            v40 += v119;
            v120 = (__int128 *)(v34 + 24);
            v121 = v117 + 16;
            v122 = v118 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v123 = *v120;
              *(v121 - 1) = *(v120 - 1);
              *v121 = v123;
              v120 += 2;
              v121 += 2;
              v122 -= 4;
            }
            while (v122);
            if (v118 == (v118 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_146:
              v2[723].i64[0] = (uint64_t)v61;
              v2[723].i64[1] = (uint64_t)v62;
              v2[724].i64[0] = (uint64_t)v33;
              v2[724].i64[1] = (uint64_t)&v61[8 * v60];
              if (v42)
              {
                operator delete(v42);
                v33 = (char *)v2[724].i64[0];
              }
              goto LABEL_148;
            }
          }
        }
        else
        {
          v66 = &v61[8 * (v60 >> 2)];
        }
        do
        {
          v124 = *(_QWORD *)v40;
          v40 += 8;
          *(_QWORD *)v66 = v124;
          v66 += 8;
        }
        while (v66 != v33);
        goto LABEL_146;
      }
LABEL_364:
      sub_20E877A38();
    }
    v50 = (char *)v2[724].i64[1];
    v51 = (char *)v2[723].i64[0];
    if (v35 >= (unint64_t)((v50 - v51) >> 3))
    {
      if (v50 == v51)
        v54 = 1;
      else
        v54 = (v50 - v51) >> 2;
      if (!(v54 >> 61))
      {
        v55 = (char *)operator new(8 * v54);
        v56 = operator new(0xFA0uLL);
        v57 = &v55[8 * v35];
        v58 = &v55[8 * v54];
        if (v35 == v54)
        {
          if (v36 < 1)
          {
            if (v33 == v34)
              v68 = 1;
            else
              v68 = v36 >> 2;
            if (v68 >> 61)
              sub_20E877A38();
            v57 = (char *)operator new(8 * v68);
            v58 = &v57[8 * v68];
            operator delete(v55);
            v33 = (char *)v2[724].i64[0];
            v34 = (char *)v2[723].i64[1];
            v55 = v57;
          }
          else
          {
            v59 = v35 + 2;
            if (v35 >= -1)
              v59 = v35 + 1;
            v57 -= 8 * (v59 >> 1);
          }
        }
        *(_QWORD *)v57 = v56;
        v69 = v57 + 8;
        if (v33 == v34)
        {
          v70 = v57;
          v71 = v57 + 8;
        }
        else
        {
          do
          {
            if (v57 == v55)
            {
              if (v69 >= v58)
              {
                if (v58 == v57)
                  v77 = 1;
                else
                  v77 = (v58 - v57) >> 2;
                if (v77 >> 61)
                  sub_20E877A38();
                v78 = (char *)operator new(8 * v77);
                v55 = v78;
                v79 = (v77 + 3) >> 2;
                v73 = &v78[8 * v79];
                v71 = v73;
                v80 = v69 - v57;
                if (v69 != v57)
                {
                  v71 = &v73[v80 & 0xFFFFFFFFFFFFFFF8];
                  v81 = v80 - 8;
                  v82 = &v78[8 * v79];
                  v83 = v57;
                  if (v81 < 0x38)
                    goto LABEL_383;
                  v84 = 8 * v79;
                  v82 = &v78[8 * v79];
                  v83 = v57;
                  if ((unint64_t)(v82 - v57) < 0x20)
                    goto LABEL_383;
                  v85 = (v81 >> 3) + 1;
                  v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
                  v82 = &v73[v86];
                  v83 = &v57[v86];
                  v87 = (__int128 *)(v57 + 16);
                  v88 = &v78[v84 + 16];
                  v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v90 = *v87;
                    *((_OWORD *)v88 - 1) = *(v87 - 1);
                    *(_OWORD *)v88 = v90;
                    v87 += 2;
                    v88 += 32;
                    v89 -= 4;
                  }
                  while (v89);
                  if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_383:
                    do
                    {
                      v91 = *(_QWORD *)v83;
                      v83 += 8;
                      *(_QWORD *)v82 = v91;
                      v82 += 8;
                    }
                    while (v82 != v71);
                  }
                }
                v58 = &v78[8 * v77];
                operator delete(v57);
              }
              else
              {
                v75 = (v58 - v69) >> 3;
                if (v75 >= -1)
                  v76 = v75 + 1;
                else
                  v76 = v75 + 2;
                v71 = &v69[8 * (v76 >> 1)];
                v73 = &v57[8 * (v76 >> 1)];
                if (v69 == v57)
                {
                  v55 = v69;
                }
                else
                {
                  memmove(&v57[8 * (v76 >> 1)], v57, v69 - v57);
                  v55 = v57;
                }
              }
            }
            else
            {
              v73 = v57;
              v71 = v69;
            }
            v74 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v73 - 1) = v74;
            v70 = v73 - 8;
            v69 = v71;
            v57 = v70;
          }
          while (v33 != *v321);
        }
        v72 = (void *)v2[723].i64[0];
        v2[723].i64[0] = (uint64_t)v55;
        v2[723].i64[1] = (uint64_t)v70;
        v2[724].i64[0] = (uint64_t)v71;
        v2[724].i64[1] = (uint64_t)v58;
        if (v72)
          operator delete(v72);
        goto LABEL_150;
      }
      goto LABEL_364;
    }
    v52 = operator new(0xFA0uLL);
    v53 = v52;
    if (v50 != v33)
    {
      *(_QWORD *)v33 = v52;
LABEL_149:
      v2[724].i64[0] += 8;
LABEL_150:
      v34 = (char *)v2[723].i64[1];
      v39 = v2[725].i64[1] + v2[725].i64[0];
LABEL_151:
      v125 = (_OWORD *)(*(_QWORD *)&v34[8 * (v39 / 0x19)] + 160 * (v39 % 0x19));
      v126 = *(_OWORD *)v329;
      *(_OWORD *)((char *)v125 + 12) = *(_OWORD *)&v329[12];
      *v125 = v126;
      v127 = v332[2];
      v129 = *(_OWORD *)&v331[16];
      v128 = v332[0];
      v125[8] = v332[1];
      v125[9] = v127;
      v125[6] = v129;
      v125[7] = v128;
      v130 = *(_OWORD *)&v329[32];
      v131 = *(_OWORD *)&v329[48];
      v132 = *(_OWORD *)v331;
      v125[4] = v330;
      v125[5] = v132;
      v125[2] = v130;
      v125[3] = v131;
      ++v2[725].i64[1];
      if (v2[545].i8[15])
      {
        v133 = *(_QWORD *)(v2[723].i64[1] + 8 * (v2[725].i64[0] / 0x19uLL)) + 160 * (v2[725].i64[0] % 0x19uLL);
        (*(void (**)(uint64_t, unint64_t, unint64_t, unint64_t))(*(_QWORD *)v2->i64[1]
                                                                                              + 168))(v2->i64[1], v133, v133 + 16, v133 + 32);
        v134 = (void **)v2[723].i64[1];
        v135 = vaddq_s64(v2[725], (int64x2_t)xmmword_2102E3FB0);
        v2[725] = v135;
        if (v135.i64[0] >= 0x32uLL)
        {
          operator delete(*v134);
          v2[723].i64[1] += 8;
          v2[725].i64[0] -= 25;
        }
      }
      goto LABEL_154;
    }
    if (v34 == v51)
    {
      if (v33 == v34)
        v92 = 1;
      else
        v92 = (v50 - v34) >> 2;
      if (v92 >> 61)
        goto LABEL_364;
      v93 = (char *)operator new(8 * v92);
      v94 = (v92 + 3) >> 2;
      v67 = &v93[8 * v94];
      v95 = v67;
      if (v33 != v34)
      {
        v95 = &v67[8 * v35];
        v96 = &v93[8 * v94];
        v97 = v34;
        if ((unint64_t)(v36 - 8) < 0x38)
          goto LABEL_384;
        v98 = &v93[8 * v94];
        v96 = v98;
        v97 = v34;
        if ((unint64_t)(v98 - v34) < 0x20)
          goto LABEL_384;
        v99 = ((unint64_t)(v36 - 8) >> 3) + 1;
        v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
        v96 = &v67[v100];
        v97 = &v34[v100];
        v101 = (__int128 *)(v34 + 16);
        v102 = v98 + 16;
        v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v104 = *v101;
          *(v102 - 1) = *(v101 - 1);
          *v102 = v104;
          v101 += 2;
          v102 += 2;
          v103 -= 4;
        }
        while (v103);
        if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_384:
          do
          {
            v105 = *(_QWORD *)v97;
            v97 += 8;
            *(_QWORD *)v96 = v105;
            v96 += 8;
          }
          while (v96 != v95);
        }
      }
      v2[723].i64[0] = (uint64_t)v93;
      v2[723].i64[1] = (uint64_t)v67;
      v2[724].i64[0] = (uint64_t)v95;
      v2[724].i64[1] = (uint64_t)&v93[8 * v92];
      if (v34)
      {
        operator delete(v34);
        v67 = *v321;
      }
    }
    else
    {
      v67 = v34;
    }
    *((_QWORD *)v67 - 1) = v53;
    v106 = (char *)v2[723].i64[1];
    v2[723].i64[1] = (uint64_t)(v106 - 8);
    v107 = *((_QWORD *)v106 - 1);
    v2[723].i64[1] = (uint64_t)v106;
    v108 = (char *)v2[724].i64[0];
    if (v108 != (char *)v2[724].i64[1])
    {
LABEL_133:
      *(_QWORD *)v108 = v107;
      goto LABEL_149;
    }
    v109 = (char *)v2[723].i64[0];
    if (v106 > v109)
    {
      v110 = (v106 - v109) >> 3;
      if (v110 >= -1)
        v111 = v110 + 1;
      else
        v111 = v110 + 2;
      v112 = v111 >> 1;
      v113 = -v112;
      v114 = &v106[-8 * v112];
      v115 = v108 - v106;
      if (v115)
      {
        memmove(&v106[-8 * v112], v106, v115);
        v106 = *v321;
      }
      v116 = &v114[v115];
      v2[724].i64[0] = (uint64_t)v116;
      v2[723].i64[1] = (uint64_t)&v106[8 * v113];
      *(_QWORD *)v116 = v107;
      goto LABEL_149;
    }
    if (v108 == v109)
      v139 = 1;
    else
      v139 = (v108 - v109) >> 2;
    if (v139 >> 61)
      goto LABEL_364;
    v140 = (char *)operator new(8 * v139);
    v141 = &v140[8 * (v139 >> 2)];
    v142 = v108 - v106;
    v63 = v108 == v106;
    v108 = v141;
    if (!v63)
    {
      v108 = &v141[v142 & 0xFFFFFFFFFFFFFFF8];
      v143 = v142 - 8;
      if (v143 < 0x38)
      {
        v144 = &v140[8 * (v139 >> 2)];
        do
        {
LABEL_174:
          v154 = *(_QWORD *)v106;
          v106 += 8;
          *(_QWORD *)v144 = v154;
          v144 += 8;
        }
        while (v144 != v108);
        goto LABEL_175;
      }
      v146 = &v140[8 * (v139 >> 2)];
      v144 = v146;
      if ((unint64_t)(v146 - v106) < 0x20)
        goto LABEL_174;
      v147 = (v143 >> 3) + 1;
      v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
      v144 = &v141[v148];
      v149 = &v106[v148];
      v150 = (__int128 *)(v106 + 16);
      v151 = v146 + 16;
      v152 = v147 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v153 = *v150;
        *(v151 - 1) = *(v150 - 1);
        *v151 = v153;
        v150 += 2;
        v151 += 2;
        v152 -= 4;
      }
      while (v152);
      v106 = v149;
      if (v147 != (v147 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_174;
    }
LABEL_175:
    v2[723].i64[0] = (uint64_t)v140;
    v2[723].i64[1] = (uint64_t)v141;
    v2[724].i64[0] = (uint64_t)v108;
    v2[724].i64[1] = (uint64_t)&v140[8 * v139];
    if (v109)
    {
      operator delete(v109);
      v108 = (char *)v2[724].i64[0];
    }
    goto LABEL_133;
  }
  LOWORD(v324) = 0;
  BYTE2(v324) = 0;
LABEL_154:
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v327[0] + 1);
  if (*((_QWORD *)&v327[0] + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v327[0] + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v329[2] = BYTE2(v324);
  *(_WORD *)v329 = v324;
  return sub_20F2E8CA4((_QWORD *)v2[717].i64[0], v329);
}

void sub_20EE6FA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;
  void *v46;

  operator delete(v45);
  operator delete(v46);
  sub_20EE630A8(&a31);
  sub_20E8C3144(&a16);
  sub_20E8E69C4((uint64_t)&a19);
  sub_20E8E69C4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_20EE6FB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;

  operator delete(v26);
  operator delete(v25);
  sub_20E86665C((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_20EE6FBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE6FBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE6FBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE6FBE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngine37SetAddedNewCameraMeasurementsCallbackEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine37SetAddedNewCameraMeasurementsCallbackEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngine37SetAddedNewCameraMeasurementsCallbackEvE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine37SetAddedNewCameraMeasurementsCallbackEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE6FC4C()
{
  return &unk_24C9EE630;
}

void sub_20EE6FC5C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE6FC70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE650;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE6FCA4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE650;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EE6FCC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v34;
  double *v35;
  uint64_t v36;
  int8x8_t **v37;
  int8x8_t *v38;
  int8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v85;
  double *v86;
  uint64_t v87;
  int8x8_t **v88;
  int8x8_t *v89;
  int8x8_t v90;
  unint64_t v91;
  uint8x8_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 4);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 432))(*(_QWORD *)(v3 + 8));
  if (v4 != (uint64_t)(*(_QWORD *)(v5 + 4832) - *(_QWORD *)(v5 + 4824)) >> 5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 1923, (uint64_t)"camera_descriptor_stores.size() == front_end_interface_->vfusion().GetCameraModelsWithDefaultIntrinsics().size()", 112, (uint64_t)"Camera descriptor size not match Vfusion camera size", 52, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_154;
  }
  v6 = (_QWORD *)*a2;
  v100 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v100)
  {
    v102 = v3;
    do
    {
      v7 = *(unsigned int *)v6;
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 432))(*(_QWORD *)(v3 + 8));
      v9 = (_QWORD *)(*(_QWORD *)(v8 + 4824) + 32 * v7);
      if (v6[15] == v6[16])
      {
        sub_20EB8217C((_QWORD *)(*(_QWORD *)(v8 + 4824) + 32 * v7), &v105);
        v10 = (void *)v6[15];
        if (v10)
        {
          v6[16] = v10;
          operator delete(v10);
        }
        *(_OWORD *)(v6 + 15) = v105;
        v6[17] = v106;
        sub_20EB8217C(v9, &v105);
        v11 = (void *)v6[18];
        if (v11)
        {
          v6[19] = v11;
          operator delete(v11);
        }
        *((_OWORD *)v6 + 9) = v105;
        v6[20] = v106;
      }
      v12 = v6[4] - v6[3];
      if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v9[2] - v9[1]) >> 7) != v12 >> 4)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 1936, (uint64_t)"camera_descriptor_store.NumStreams() == camera_model.NumStreams()", 65, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_154;
        }
        v12 = v6[4] - v6[3];
      }
      if ((v12 & 0xFFFFFFFF0) != 0)
      {
        v101 = (_DWORD)v7 << 16;
        v104 = ((unint64_t)v12 >> 4);
        if (v7 >= 0x10000)
        {
          v47 = 0;
          while (1)
          {
            v55 = v6[18];
            v103 = v6[15];
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v56 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v57 = qword_254A6DE40;
              v58 = qword_254A6DE48;
              while (v57 != v58)
              {
                v60 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v57;
                v59 = *(_QWORD *)(v57 + 8);
                v57 += 16;
                v60(v59, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
            }
            v61 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              break;
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            if (v47 >= 0x10000)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v68 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v69 = qword_254A6DE40;
                v70 = qword_254A6DE48;
                while (v69 != v70)
                {
                  v72 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v69;
                  v71 = *(_QWORD *)(v69 + 8);
                  v69 += 16;
                  v72(v71, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                }
              }
              v73 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                break;
              qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v74 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v3 = v102;
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v75 = qword_254A6DE40;
                v76 = qword_254A6DE48;
                while (v75 != v76)
                {
                  v78 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v75;
                  v77 = *(_QWORD *)(v75 + 8);
                  v75 += 16;
                  v78(v77, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                }
              }
              v79 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                break;
              qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v80 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v81 = qword_254A6DE40;
                v82 = qword_254A6DE48;
                while (v81 != v82)
                {
                  v84 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v81;
                  v83 = *(_QWORD *)(v81 + 8);
                  v81 += 16;
                  v84(v83, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                }
              }
              v85 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                break;
              qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            else
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v62 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v63 = qword_254A6DE40;
                v64 = qword_254A6DE48;
                while (v63 != v64)
                {
                  v66 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v63;
                  v65 = *(_QWORD *)(v63 + 8);
                  v63 += 16;
                  v66(v65, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                }
              }
              v67 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                break;
              qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            v86 = (double *)(v55 + 72 * v47);
            v87 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 432))(*(_QWORD *)(v3 + 8))
                            + 4864);
            if (v87 && (v88 = *(int8x8_t ***)(v87 + 7952)) != 0)
            {
              v89 = *v88;
              v90 = (*v88)[41];
              if (v90)
              {
                v91 = (unsigned __int16)v47 | v101;
                v92 = (uint8x8_t)vcnt_s8(v90);
                v92.i16[0] = vaddlv_u8(v92);
                if (v92.u32[0] > 1uLL)
                {
                  v93 = (unsigned __int16)v47 | v101;
                  if (*(_QWORD *)&v90 <= v91)
                    v93 = v91 % *(_QWORD *)&v90;
                }
                else
                {
                  v93 = (v90.i32[0] - 1) & v91;
                }
                v94 = *(uint64_t **)(*(_QWORD *)&v89[40] + 8 * v93);
                if (v94)
                {
                  v94 = (uint64_t *)*v94;
                  if (v94)
                  {
                    if (v92.u32[0] < 2uLL)
                    {
                      v95 = *(_QWORD *)&v90 - 1;
                      while (1)
                      {
                        v97 = v94[1];
                        if (v97 == v91)
                        {
                          if (*((_DWORD *)v94 + 4) == (_DWORD)v91)
                            goto LABEL_132;
                        }
                        else if ((v97 & v95) != v93)
                        {
                          goto LABEL_131;
                        }
                        v94 = (uint64_t *)*v94;
                        if (!v94)
                          goto LABEL_132;
                      }
                    }
                    do
                    {
                      v96 = v94[1];
                      if (v96 == v91)
                      {
                        if (*((_DWORD *)v94 + 4) == (_DWORD)v91)
                          break;
                      }
                      else
                      {
                        if (v96 >= *(_QWORD *)&v90)
                          v96 %= *(_QWORD *)&v90;
                        if (v96 != v93)
                          goto LABEL_131;
                      }
                      v94 = (uint64_t *)*v94;
                    }
                    while (v94);
                  }
                }
              }
              else
              {
LABEL_131:
                v94 = 0;
              }
LABEL_132:
              sub_20F13B958((uint64_t)(v94 + 3), v86, (uint64_t)&v105);
            }
            else
            {
              v105 = *(_OWORD *)v86;
              v48 = *((_OWORD *)v86 + 1);
              v49 = *((_OWORD *)v86 + 2);
              v50 = *((_OWORD *)v86 + 3);
              v109 = *((_QWORD *)v86 + 8);
              v107 = v49;
              v108 = v50;
              v106 = v48;
            }
            v51 = v103 + 72 * v47;
            *(_OWORD *)v51 = v105;
            v52 = v106;
            v53 = v107;
            v54 = v108;
            *(_QWORD *)(v51 + 64) = v109;
            *(_OWORD *)(v51 + 32) = v53;
            *(_OWORD *)(v51 + 48) = v54;
            *(_OWORD *)(v51 + 16) = v52;
            if (++v47 == v104)
              goto LABEL_5;
          }
LABEL_154:
          abort();
        }
        v13 = 0;
        do
        {
          v21 = v6[18];
          v22 = v6[15];
          if (v13 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v23 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v25 = qword_254A6DE40;
              v24 = qword_254A6DE48;
              while (v25 != v24)
              {
                v27 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v25;
                v26 = *(_QWORD *)(v25 + 8);
                v25 += 16;
                v27(v26, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
            }
            v28 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_154;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v29 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v31 = qword_254A6DE40;
              v30 = qword_254A6DE48;
              while (v31 != v30)
              {
                v33 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v31;
                v32 = *(_QWORD *)(v31 + 8);
                v31 += 16;
                v33(v32, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
            }
            v34 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v3 = v102;
            if (!byte_254A6DE68)
              goto LABEL_154;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v35 = (double *)(v21 + 72 * v13);
          v36 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 432))(*(_QWORD *)(v3 + 8))
                          + 4864);
          if (v36 && (v37 = *(int8x8_t ***)(v36 + 7952)) != 0)
          {
            v38 = *v37;
            v39 = (*v37)[41];
            if (v39)
            {
              v40 = (unsigned __int16)v13 | v101;
              v41 = (uint8x8_t)vcnt_s8(v39);
              v41.i16[0] = vaddlv_u8(v41);
              if (v41.u32[0] > 1uLL)
              {
                v42 = (unsigned __int16)v13 | v101;
                if (*(_QWORD *)&v39 <= v40)
                  v42 = v40 % *(_QWORD *)&v39;
              }
              else
              {
                v42 = (v39.i32[0] - 1) & v40;
              }
              v43 = *(uint64_t **)(*(_QWORD *)&v38[40] + 8 * v42);
              if (v43)
              {
                v43 = (uint64_t *)*v43;
                if (v43)
                {
                  if (v41.u32[0] < 2uLL)
                  {
                    v44 = *(_QWORD *)&v39 - 1;
                    while (1)
                    {
                      v46 = v43[1];
                      if (v46 == v40)
                      {
                        if (*((_DWORD *)v43 + 4) == (_DWORD)v40)
                          goto LABEL_59;
                      }
                      else if ((v46 & v44) != v42)
                      {
                        goto LABEL_58;
                      }
                      v43 = (uint64_t *)*v43;
                      if (!v43)
                        goto LABEL_59;
                    }
                  }
                  do
                  {
                    v45 = v43[1];
                    if (v45 == v40)
                    {
                      if (*((_DWORD *)v43 + 4) == (_DWORD)v40)
                        break;
                    }
                    else
                    {
                      if (v45 >= *(_QWORD *)&v39)
                        v45 %= *(_QWORD *)&v39;
                      if (v45 != v42)
                        goto LABEL_58;
                    }
                    v43 = (uint64_t *)*v43;
                  }
                  while (v43);
                }
              }
            }
            else
            {
LABEL_58:
              v43 = 0;
            }
LABEL_59:
            sub_20F13B958((uint64_t)(v43 + 3), v35, (uint64_t)&v105);
          }
          else
          {
            v105 = *(_OWORD *)v35;
            v14 = *((_OWORD *)v35 + 1);
            v15 = *((_OWORD *)v35 + 2);
            v16 = *((_OWORD *)v35 + 3);
            v109 = *((_QWORD *)v35 + 8);
            v107 = v15;
            v108 = v16;
            v106 = v14;
          }
          v17 = v22 + 72 * v13;
          *(_OWORD *)v17 = v105;
          v18 = v106;
          v19 = v107;
          v20 = v108;
          *(_QWORD *)(v17 + 64) = v109;
          *(_OWORD *)(v17 + 32) = v19;
          *(_OWORD *)(v17 + 48) = v20;
          *(_OWORD *)(v17 + 16) = v18;
          ++v13;
        }
        while (v13 != v104);
      }
LABEL_5:
      v6 += 30;
    }
    while (v6 != v100);
  }
  v98 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 432))(*(_QWORD *)(v3 + 8));
  return sub_20EE79FE4((_QWORD *)(v98 + 4824), a2);
}

uint64_t sub_20EE70AD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE70B3C()
{
  return &unk_24C9EE6C0;
}

void sub_20EE70B4C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE70B60(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE6E0;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE70B94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE6E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EE70BB0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t result;
  __int128 v43;
  int v44;
  void *__p;
  std::__shared_weak_count *v46;
  char *v47;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = a4[1];
  if (*a4 != v8)
  {
    v9 = *(double *)(v8 - 8);
    v43 = *(_OWORD *)(v8 - 24);
    sub_20E896804(&__p);
    _V2.D[1] = *((_QWORD *)&v43 + 1);
    _D1 = *((_QWORD *)&v43 + 1);
    __asm { FMLA            D0, D1, V2.D[1] }
    *(float *)&_D0 = sqrt(_D0 + v9 * v9);
    v44 = LODWORD(_D0);
    (*(void (**)(void *, int *))(*(_QWORD *)__p + 48))(__p, &v44);
    v17 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  *(_BYTE *)(v7 + 24) = 1;
  v20 = *(_QWORD *)(v7 + 8);
  v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 11464) + 88))(*(_QWORD *)(v7 + 11464));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 176))(v20, v21);
  v22 = *(_QWORD *)(v7 + 8);
  v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 11464) + 64))(*(_QWORD *)(v7 + 11464));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 184))(v22, v23);
  v24 = *(_QWORD *)(v7 + 8);
  v25 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 11464) + 96))(*(_QWORD *)(v7 + 11464));
  v26 = **v25;
  v27 = (*v25)[1];
  __p = 0;
  v46 = 0;
  v47 = 0;
  if (v27 == v26)
  {
LABEL_36:
    v40 = 0;
    v41 = __p;
    if (__p)
LABEL_30:
      operator delete(v41);
  }
  else
  {
    if ((0xEEEEEEEEEEEEEEEFLL * ((v27 - v26) >> 4)) >> 59)
      sub_20EABADD4();
    __p = operator new(0xDDDDDDDDDDDDDDE0 * ((v27 - v26) >> 4));
    v46 = (std::__shared_weak_count *)__p;
    v47 = (char *)__p - 0x2222222222222220 * ((v27 - v26) >> 4);
    while (1)
    {
      v28 = *(_QWORD *)(v26 + 32) - *(_QWORD *)(v26 + 24);
      if (v28)
        break;
LABEL_10:
      v26 += 240;
      if (v26 == v27)
        goto LABEL_36;
    }
    v29 = 0;
    v30 = v28 >> 4;
    while (1)
    {
      v31 = (uint64_t *)(*(_QWORD *)(v26 + 24) + 16 * v29);
      v32 = *v31;
      v33 = (std::__shared_weak_count *)v31[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (*(_BYTE *)(v32 + 129) && *(_BYTE *)(v32 + 128))
        break;
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (++v29 == v30)
        goto LABEL_10;
    }
    if (v33)
    {
      v38 = (unint64_t *)&v33->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v40 = 1;
    v41 = __p;
    if (__p)
      goto LABEL_30;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 192))(v24, v40);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t))(**(_QWORD **)(v7 + 8) + 472))(*(_QWORD *)(v7 + 8), a2, a3, a4, *(_QWORD *)(*(_QWORD *)(v7 + 8) + 7344), v7 + 11928);
  if (*(_BYTE *)(v7 + 12104))
    *(_BYTE *)(v7 + 12104) = 0;
  if ((result & 1) == 0)
    return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(v7 + 11464) + 80))(*(_QWORD *)(v7 + 11464), *(double *)(*(_QWORD *)a3 + 8));
  return result;
}

void sub_20EE70EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, std::__shared_weak_count *a13)
{
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE70F14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE70F80()
{
  return &unk_24C9EE750;
}

void sub_20EE70F90()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE70FA4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE770;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE70FD8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE770;
  a2[1] = v2;
  return result;
}

void sub_20EE70FF4(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[17];
  uint64_t v23;
  char v24;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 432))(*(_QWORD *)(v4 + 8)) + 4864);
  v7 = *(uint64_t **)(v6 + 2504);
  if (v7 == *(uint64_t **)(v6 + 2512))
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    v8 = *v7;
    v9 = 1;
  }
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 432))(*(_QWORD *)(v4 + 8));
  sub_20F135EB4(v10, (uint64_t)v22, v5);
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 280) = 0;
  if (v24)
  {
    v11 = v22[5];
    *(_OWORD *)(a3 + 64) = v22[4];
    *(_OWORD *)(a3 + 80) = v11;
    v12 = v22[7];
    *(_OWORD *)(a3 + 96) = v22[6];
    *(_OWORD *)(a3 + 112) = v12;
    v13 = v22[1];
    *(_OWORD *)a3 = v22[0];
    *(_OWORD *)(a3 + 16) = v13;
    v14 = v22[3];
    *(_OWORD *)(a3 + 32) = v22[2];
    *(_OWORD *)(a3 + 48) = v14;
    v15 = v22[8];
    v16 = v22[9];
    v17 = v22[11];
    *(_OWORD *)(a3 + 160) = v22[10];
    *(_OWORD *)(a3 + 176) = v17;
    *(_OWORD *)(a3 + 128) = v15;
    *(_OWORD *)(a3 + 144) = v16;
    v18 = v22[12];
    v19 = v22[13];
    v20 = v22[15];
    *(_OWORD *)(a3 + 224) = v22[14];
    *(_OWORD *)(a3 + 240) = v20;
    *(_OWORD *)(a3 + 192) = v18;
    *(_OWORD *)(a3 + 208) = v19;
    v21 = v22[16];
    *(_QWORD *)(a3 + 272) = v23;
    *(_OWORD *)(a3 + 256) = v21;
    *(_BYTE *)(a3 + 280) = 1;
  }
  *(_QWORD *)(a3 + 288) = v8;
  *(_BYTE *)(a3 + 296) = v9;
}

uint64_t sub_20EE710F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE71160()
{
  return &unk_24C9EE7E0;
}

void sub_20EE71170()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE71184(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE800;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE711B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE800;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EE711D4(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a3;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 432))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  *(_BYTE *)(v5 + 2) = 1;
  return sub_20F8865B4(*(_QWORD *)(v5 + 4864), a2, 0, v4);
}

uint64_t sub_20EE71220(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_3"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine29SetFeatureProcessingCallbacksEvE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE7128C()
{
  return &unk_24C9EE870;
}

void sub_20EE71298(int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  int *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  std::logic_error *exception;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  _QWORD *v58;
  void *__p;
  std::__shared_weak_count *v60;
  uint64_t v61;
  int v62;
  void **p_p;

  *(_BYTE *)(a2 + 5512) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v56 = a4 + 16;
  sub_20EE7D5CC(a4 + 16);
  *(_DWORD *)(a4 + 11440) = 0;
  v54 = a4;
  v55 = (_BYTE *)(a4 + 11444);
  *(_BYTE *)(a4 + 11444) = 0;
  __p = 0;
  v60 = 0;
  v61 = 0;
  v8 = *a1;
  v9 = a1[1];
  p_p = &__p;
  if (v8 == v9)
  {
    v39 = v54;
    goto LABEL_54;
  }
  do
  {
    v62 = *v8;
    sub_20EA9AB98((uint64_t *)&p_p, &v62);
    v8 += 272;
  }
  while (v8 != v9);
  v53 = a3;
  v11 = (std::__shared_weak_count *)__p;
  v10 = v60;
  if (__p == v60)
    goto LABEL_51;
  v57 = v60;
  v58 = (_QWORD *)(a2 + 5488);
  do
  {
    v14 = *a1;
    v13 = a1[1];
    if (*a1 != v13)
    {
      while (*v14 != LODWORD(v11->__vftable))
      {
        v14 += 272;
        if (v14 == v13)
          goto LABEL_75;
      }
    }
    if (v14 == v13)
    {
LABEL_75:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Requested camera id not found.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    v15 = v14[2];
    v16 = v14[3];
    v17 = *(_QWORD **)(a2 + 5496);
    v18 = *(_QWORD *)(a2 + 5504);
    if ((unint64_t)v17 < v18)
    {
      *v17 = v15;
      v17[1] = v16;
      v19 = v17 + 2;
      *(_QWORD *)(a2 + 5496) = v17 + 2;
      if (v14[1] == 2)
        goto LABEL_28;
      goto LABEL_7;
    }
    v20 = (_QWORD *)*v58;
    v21 = ((uint64_t)v17 - *v58) >> 4;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60)
      sub_20E867F44();
    v23 = v18 - (_QWORD)v20;
    if (v23 >> 3 > v22)
      v22 = v23 >> 3;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v24 = 0xFFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 60)
        sub_20E877A38();
      v25 = (char *)operator new(16 * v24);
      v26 = &v25[16 * v21];
      *(_QWORD *)v26 = v15;
      *((_QWORD *)v26 + 1) = v16;
      v27 = (uint64_t)v26;
      if (v17 == v20)
      {
LABEL_25:
        *(_QWORD *)(a2 + 5488) = v27;
        v19 = v26 + 16;
        *(_QWORD *)(a2 + 5496) = v26 + 16;
        *(_QWORD *)(a2 + 5504) = &v25[16 * v24];
        if (!v17)
          goto LABEL_27;
LABEL_26:
        operator delete(v17);
        goto LABEL_27;
      }
    }
    else
    {
      v25 = 0;
      v26 = (char *)(16 * v21);
      *(_QWORD *)v26 = v15;
      *((_QWORD *)v26 + 1) = v16;
      v27 = 16 * v21;
      if (v17 == v20)
        goto LABEL_25;
    }
    do
    {
      *(_OWORD *)(v27 - 16) = *((_OWORD *)v17 - 1);
      v27 -= 16;
      v17 -= 2;
    }
    while (v17 != v20);
    v17 = (_QWORD *)*v58;
    *(_QWORD *)(a2 + 5488) = v27;
    v19 = v26 + 16;
    *(_QWORD *)(a2 + 5496) = v26 + 16;
    *(_QWORD *)(a2 + 5504) = &v25[16 * v24];
    if (v17)
      goto LABEL_26;
LABEL_27:
    v10 = v57;
    *(_QWORD *)(a2 + 5496) = v19;
    if (v14[1] == 2)
    {
LABEL_28:
      v28 = v14[134];
      v29 = v14[135];
      v30 = *(_QWORD *)(a2 + 5504);
      if ((unint64_t)v19 < v30)
      {
        *v19 = v28;
        v19[1] = v29;
        v12 = (uint64_t)(v19 + 2);
      }
      else
      {
        v31 = (_QWORD *)*v58;
        v32 = ((uint64_t)v19 - *v58) >> 4;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 60)
          sub_20E867F44();
        v34 = v30 - (_QWORD)v31;
        if (v34 >> 3 > v33)
          v33 = v34 >> 3;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v35 = 0xFFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 >> 60)
            sub_20E877A38();
          v36 = (char *)operator new(16 * v35);
          v37 = &v36[16 * v32];
          v38 = &v36[16 * v35];
          *(_QWORD *)v37 = v28;
          *((_QWORD *)v37 + 1) = v29;
          v12 = (uint64_t)(v37 + 16);
          if (v19 == v31)
          {
LABEL_47:
            *(_QWORD *)(a2 + 5488) = v37;
            *(_QWORD *)(a2 + 5496) = v12;
            *(_QWORD *)(a2 + 5504) = v38;
            goto LABEL_48;
          }
        }
        else
        {
          v37 = (char *)(16 * v32);
          v38 = 0;
          *(_QWORD *)v37 = v28;
          *((_QWORD *)v37 + 1) = v29;
          v12 = 16 * v32 + 16;
          if (v19 == v31)
            goto LABEL_47;
        }
        do
        {
          *((_OWORD *)v37 - 1) = *((_OWORD *)v19 - 1);
          v37 -= 16;
          v19 -= 2;
        }
        while (v19 != v31);
        v19 = *(_QWORD **)(a2 + 5488);
        *(_QWORD *)(a2 + 5488) = v37;
        *(_QWORD *)(a2 + 5496) = v12;
        *(_QWORD *)(a2 + 5504) = v38;
        if (v19)
LABEL_48:
          operator delete(v19);
        v10 = v57;
      }
      *(_QWORD *)(a2 + 5496) = v12;
    }
LABEL_7:
    v11 = (std::__shared_weak_count *)((char *)v11 + 4);
  }
  while (v11 != v10);
  v10 = (std::__shared_weak_count *)__p;
LABEL_51:
  a3 = v53;
  v39 = v54;
  if (v10)
  {
    v60 = v10;
    operator delete(v10);
  }
LABEL_54:
  sub_20E9107DC(v56, a2);
  v40 = operator new();
  v41 = v40;
  v42 = *(std::__shared_weak_count **)(a3 + 8);
  __p = *(void **)a3;
  v60 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(p_shared_owners);
    while (__stxr(v44 + 1, p_shared_owners));
  }
  sub_20EE496DC(v40, (uint64_t)a1, v56, &__p, v55, 1);
  if (v42)
  {
    v45 = (unint64_t *)&v42->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v47 = (_QWORD *)operator new();
  *v47 = &off_24C9EE940;
  v47[1] = 0;
  v47[2] = 0;
  v47[3] = v41;
  v48 = *(std::__shared_weak_count **)(v39 + 8);
  *(_QWORD *)v39 = v41;
  *(_QWORD *)(v39 + 8) = v47;
  if (!v48)
    goto LABEL_66;
  v49 = (unint64_t *)&v48->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    v51 = *v55;
    if (v51 == 2)
      goto LABEL_71;
LABEL_67:
    if (v51 == 4)
    {
      v51 = 1;
      goto LABEL_71;
    }
    if (v51 == 3)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngineUtil.cpp", 89, (uint64_t)"", 0, (uint64_t)"should have thrown", 18, (void (*)(void **))sub_21023DDB0);
      abort();
    }
  }
  else
  {
LABEL_66:
    v51 = *v55;
    if (v51 != 2)
      goto LABEL_67;
LABEL_71:
    *(_DWORD *)(v39 + 11440) = v51;
  }
}

void sub_20EE717BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  __cxa_begin_catch(a1);
  *(_DWORD *)(a11 + 11440) = 1;
  __cxa_end_catch();
  JUMPOUT(0x20EE71704);
}

void sub_20EE71884(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9AAA14(v1);
  _Unwind_Resume(a1);
}

void sub_20EE718A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE718E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  sub_20E9AAA14(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE71968(double ***a1, double **a2, uint64_t *a3, uint64_t a4, double a5)
{
  double **v5;
  double *i;
  double **v12;
  double *v13;
  double *v14;
  uint64_t v15;
  __int128 v16;
  double **v17;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = *a1;
  if (*a1 != a2)
  {
    for (i = (double *)*a3; ; i = v13)
    {
      v14 = v5[1];
      if (i == v14)
      {
LABEL_3:
        v12 = v5 + 3;
        *a1 = v12;
        if (v12 == a2)
          return 0;
        v13 = *v12;
        *a3 = (uint64_t)*v12;
      }
      else
      {
        v15 = (uint64_t)i;
        while (1)
        {
          v22 = *(_QWORD *)v15;
          v19 = v22;
          v23 = *(_OWORD *)(v15 + 32);
          v24 = *(_QWORD *)(v15 + 48);
          v16 = *(_OWORD *)(v15 + 8);
          v21 = *(_QWORD *)(v15 + 24);
          v20 = v16;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a4 + 24))(a4, &v22);
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a4 + 16))(a4, &v19);
          v15 = *a3 + 56;
          if (*(double *)*a3 > a5)
            break;
          *a3 = v15;
          if ((double *)v15 == v14)
          {
            v5 = *a1;
            goto LABEL_3;
          }
        }
        *a3 = v15;
        if ((double *)v15 != v14)
          return 1;
        v17 = *a1 + 3;
        *a1 = v17;
        if (v17 == a2)
          return 0;
        v13 = *v17;
        *a3 = (uint64_t)*v17;
        if (i != v14)
          return 1;
      }
      v5 = *a1;
    }
  }
  return 0;
}

_QWORD *sub_20EE71AC4(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  *a1 = &off_24C9FA2B0;
  v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20EE71B18(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *p_p;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  std::chrono::steady_clock::time_point v71;
  uint64_t v72;
  size_t v73;
  const char *v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  const char *v77;
  size_t v78;
  _BYTE *v79;
  unint64_t v80;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v91;
  size_t v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  std::chrono::steady_clock::time_point v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t *v135;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v137;
  int v138;
  const char *v139;
  int v140;
  const char *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE object[24];
  __int128 v148;
  void *__p;
  size_t v150;
  unint64_t v151;
  char v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  sub_20EE74410(&v144);
  if (**(int **)(v144 + 56) > 3)
    goto LABEL_91;
  v6 = *(unsigned __int8 *)(v144 + 72);
  v7 = sub_20E8C31DC(v144, "OSLogSurrogateAppender", 1, 0);
  v8 = v7;
  if (!v6 && v7 == 0)
    goto LABEL_91;
  v135 = &v144;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v137 = std::chrono::system_clock::now().__d_.__rep_;
  v138 = 3;
  v139 = "unknown file";
  v140 = 757;
  v142 = 0;
  v143 = 0;
  v141 = "unknown function";
  v131 = v144;
  if (*(char *)(v144 + 39) < 0)
  {
    v11 = *(const char **)(v144 + 16);
    v10 = *(_QWORD *)(v144 + 24);
    v129 = v144 + 16;
    v133 = v6;
    v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v144 + 39);
    v11 = (const char *)(v144 + 16);
    v129 = v144 + 16;
    v133 = v6;
    v12 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v148 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v14 = byte_254A4A4F8;
  else
    v14 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v15 = byte_254A4A4F8[23];
  else
    v15 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v14, v11);
  v16 = &object[8];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v17 = v8;
    v18 = v11;
    v19 = a2;
    v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v20 = v15 | 7;
    v21 = v20 + 1;
    v16 = operator new(v20 + 1);
    *(_QWORD *)&object[16] = v15;
    *(_QWORD *)&v148 = v21 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v16;
    a2 = v19;
    v11 = v18;
    v8 = v17;
    goto LABEL_23;
  }
  BYTE7(v148) = v15;
  if (v15)
LABEL_23:
    memmove(v16, v14, v15);
  v16[v15] = 0;
  BYTE8(v148) = 1;
  p_p = &__p;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v10 >= 0x17)
  {
    v24 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v24 = v10 | 7;
    v25 = v24 + 1;
    p_p = operator new(v24 + 1);
    v150 = v10;
    v151 = v25 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v151) = v10;
    if (!v10)
    {
      LOBYTE(__p) = 0;
      v152 = 1;
      v23 = *(NSObject **)object;
      if ((SHIBYTE(v151) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(p_p, v11, v10);
  *((_BYTE *)p_p + v10) = 0;
  v152 = 1;
  v23 = *(NSObject **)object;
  if ((SHIBYTE(v151) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v148))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v148) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p);
  if (BYTE8(v148))
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v8 && *(_QWORD *)(v8 + 24))
  {
    v26 = _os_log_pack_size();
    v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
    v28 = (std::__shared_weak_count *)operator new();
    v29 = v28;
    v28->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v28->__shared_weak_owners_ = 0;
    v28[1].__vftable = v27;
    *(_QWORD *)object = v27;
    *(_QWORD *)&object[8] = v27;
    *(_QWORD *)&object[16] = v28;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    v148 = 0uLL;
    __p = 0;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v29);
    }
    v33 = *(_QWORD *)object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v34 = operator new();
    v35 = *(unsigned __int8 *)(v131 + 39);
    v36 = v129;
    if ((v35 & 0x80u) != 0)
    {
      v36 = *(_QWORD *)(v131 + 16);
      v35 = *(_QWORD *)(v131 + 24);
    }
    *(_QWORD *)v34 = v33;
    *(_OWORD *)(v34 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v34 + 24) = v148;
    v148 = 0uLL;
    *(_QWORD *)(v34 + 40) = v36;
    *(_QWORD *)(v34 + 48) = v35;
    *(_BYTE *)(v34 + 56) = 1;
    v145 = 0;
    v146 = v34;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v146);
    v37 = v146;
    v146 = 0;
    v38 = v133;
    if (v37)
    {
      v39 = *(std::__shared_weak_count **)(v37 + 32);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)(v37 + 16);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      MEMORY[0x212BC6398](v37, 0x10F0C40B62ED6C6);
      v45 = v145;
      v145 = 0;
      if (v45)
      {
        v46 = *(std::__shared_weak_count **)(v45 + 32);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = *(std::__shared_weak_count **)(v45 + 16);
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        MEMORY[0x212BC6398](v45, 0x10F0C40B62ED6C6);
      }
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
    if (*((_QWORD *)&v148 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v56 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  else
  {
    os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
    *(_WORD *)object = 0;
    v58 = (void *)_os_log_send_and_compose_impl();
    v38 = v133;
    if (v58)
      free(v58);
  }
  if (v38)
  {
    sub_20E8C003C((uint64_t)&v135, "Creating IMU sample buffer");
    sub_20E863570((uint64_t)&v135);
  }
  sub_20E863570((uint64_t)&v135);
  v59 = v143;
  if (v143)
  {
    v60 = (unint64_t *)&v143->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_91:
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_20FD33090((void **)a3, -1431655765 * ((a1[1] - *a1) >> 3));
  v62 = a1[1] - *a1;
  if (v62)
  {
    v63 = 0;
    v64 = 0;
    v65 = v62 / 24;
    if (v65 <= 1)
      v66 = 1;
    else
      v66 = v65;
    do
    {
      sub_20FD32E5C(a3, (uint64_t *)(*a1 + v63), v64++);
      v63 += 24;
    }
    while (v66 != v64);
  }
  sub_20EE74410(&v144);
  if (**(int **)(v144 + 56) <= 3)
  {
    v67 = *(unsigned __int8 *)(v144 + 72);
    v68 = sub_20E8C31DC(v144, "OSLogSurrogateAppender", 1, 0);
    v69 = v68;
    if (v67 || v68 != 0)
    {
      v135 = &v144;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v137 = std::chrono::system_clock::now().__d_.__rep_;
      v138 = 3;
      v139 = "unknown file";
      v140 = 765;
      v142 = 0;
      v143 = 0;
      v141 = "unknown function";
      v71.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v72 = *v135;
      v134 = *v135;
      if (*(char *)(*v135 + 39) < 0)
      {
        v74 = *(const char **)(v72 + 16);
        v73 = *(_QWORD *)(v72 + 24);
        v132 = *v135 + 16;
        v76 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v76 & 1) != 0)
          goto LABEL_105;
      }
      else
      {
        v73 = *(unsigned __int8 *)(*v135 + 39);
        v74 = (const char *)(*v135 + 16);
        v132 = (uint64_t)v74;
        v75 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v75 & 1) != 0)
          goto LABEL_105;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v148 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_105:
      if (byte_254A4A4F8[23] >= 0)
        v77 = byte_254A4A4F8;
      else
        v77 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v78 = byte_254A4A4F8[23];
      else
        v78 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v77, v74);
      v79 = &object[8];
      if (v78 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v78 >= 0x17)
      {
        v130 = v74;
        v80 = v69;
        v81 = v71.__d_.__rep_;
        v82 = v67;
        v83 = a2;
        v84 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v78 | 7) != 0x17)
          v84 = v78 | 7;
        v85 = v84 + 1;
        v79 = operator new(v84 + 1);
        *(_QWORD *)&object[16] = v78;
        *(_QWORD *)&v148 = v85 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v79;
        a2 = v83;
        v67 = v82;
        v71.__d_.__rep_ = v81;
        v69 = v80;
        v74 = v130;
      }
      else
      {
        BYTE7(v148) = v78;
        if (!v78)
        {
LABEL_119:
          v79[v78] = 0;
          BYTE8(v148) = 1;
          v86 = &__p;
          if (v73 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v73 >= 0x17)
          {
            v88 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v73 | 7) != 0x17)
              v88 = v73 | 7;
            v89 = v88 + 1;
            v86 = operator new(v88 + 1);
            v150 = v73;
            v151 = v89 | 0x8000000000000000;
            __p = v86;
          }
          else
          {
            HIBYTE(v151) = v73;
            if (!v73)
            {
              LOBYTE(__p) = 0;
              v152 = 1;
              v87 = *(NSObject **)object;
              if ((SHIBYTE(v151) & 0x80000000) == 0)
                goto LABEL_123;
              goto LABEL_129;
            }
          }
          memmove(v86, v74, v73);
          *((_BYTE *)v86 + v73) = 0;
          v152 = 1;
          v87 = *(NSObject **)object;
          if ((SHIBYTE(v151) & 0x80000000) == 0)
          {
LABEL_123:
            if (!BYTE8(v148))
              goto LABEL_132;
            goto LABEL_130;
          }
LABEL_129:
          operator delete(__p);
          if (!BYTE8(v148))
          {
LABEL_132:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            v90 = (double)(v71.__d_.__rep_ - a2) / 1000000000.0;
            if (v69 && *(_QWORD *)(v69 + 24))
            {
              v91 = v71.__d_.__rep_;
              v92 = _os_log_pack_size();
              v93 = (std::__shared_weak_count_vtbl *)operator new(v92, (std::align_val_t)8uLL);
              v94 = (std::__shared_weak_count *)operator new();
              v95 = v94;
              v94->__shared_owners_ = 0;
              v96 = (unint64_t *)&v94->__shared_owners_;
              v94->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v94->__shared_weak_owners_ = 0;
              v94[1].__vftable = v93;
              *(_QWORD *)object = v93;
              *(_QWORD *)&object[8] = v93;
              *(_QWORD *)&object[16] = v94;
              do
                v97 = __ldxr(v96);
              while (__stxr(v97 + 1, v96));
              v148 = 0uLL;
              __p = 0;
              do
                v98 = __ldaxr(v96);
              while (__stlxr(v98 - 1, v96));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v95);
              }
              v99 = *(_QWORD *)object;
              v100 = _os_log_pack_fill();
              *(_DWORD *)v100 = 134217984;
              *(double *)(v100 + 4) = v90;
              v101 = operator new();
              v102 = *(unsigned __int8 *)(v134 + 39);
              v103 = v132;
              if ((v102 & 0x80u) != 0)
              {
                v103 = *(_QWORD *)(v134 + 16);
                v102 = *(_QWORD *)(v134 + 24);
              }
              *(_QWORD *)v101 = v99;
              *(_OWORD *)(v101 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v101 + 24) = v148;
              v148 = 0uLL;
              *(_QWORD *)(v101 + 40) = v103;
              *(_QWORD *)(v101 + 48) = v102;
              *(_BYTE *)(v101 + 56) = 1;
              v145 = 0;
              v146 = v101;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v69 + 24) + 40))(*(_QWORD *)(v69 + 24), &v146);
              v104 = v146;
              v146 = 0;
              v71.__d_.__rep_ = v91;
              if (v104)
              {
                v105 = *(std::__shared_weak_count **)(v104 + 32);
                if (v105)
                {
                  v106 = (unint64_t *)&v105->__shared_owners_;
                  do
                    v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                    std::__shared_weak_count::__release_weak(v105);
                  }
                }
                v108 = *(std::__shared_weak_count **)(v104 + 16);
                if (v108)
                {
                  v109 = (unint64_t *)&v108->__shared_owners_;
                  do
                    v110 = __ldaxr(v109);
                  while (__stlxr(v110 - 1, v109));
                  if (!v110)
                  {
                    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                    std::__shared_weak_count::__release_weak(v108);
                  }
                }
                MEMORY[0x212BC6398](v104, 0x10F0C40B62ED6C6);
                v111 = v145;
                v145 = 0;
                if (v111)
                {
                  v112 = *(std::__shared_weak_count **)(v111 + 32);
                  if (v112)
                  {
                    v113 = (unint64_t *)&v112->__shared_owners_;
                    do
                      v114 = __ldaxr(v113);
                    while (__stlxr(v114 - 1, v113));
                    if (!v114)
                    {
                      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                      std::__shared_weak_count::__release_weak(v112);
                    }
                  }
                  v115 = *(std::__shared_weak_count **)(v111 + 16);
                  if (v115)
                  {
                    v116 = (unint64_t *)&v115->__shared_owners_;
                    do
                      v117 = __ldaxr(v116);
                    while (__stlxr(v117 - 1, v116));
                    if (!v117)
                    {
                      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                      std::__shared_weak_count::__release_weak(v115);
                    }
                  }
                  MEMORY[0x212BC6398](v111, 0x10F0C40B62ED6C6);
                }
              }
              v118 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
              if (*((_QWORD *)&v148 + 1))
              {
                v119 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                do
                  v120 = __ldaxr(v119);
                while (__stlxr(v120 - 1, v119));
                if (!v120)
                {
                  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                  std::__shared_weak_count::__release_weak(v118);
                }
              }
              v121 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v122 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v123 = __ldaxr(v122);
                while (__stlxr(v123 - 1, v122));
                if (!v123)
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                }
              }
            }
            else
            {
              os_log_type_enabled(v87, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 134217984;
              *(double *)&object[4] = (double)(v71.__d_.__rep_ - a2) / 1000000000.0;
              v124 = (void *)_os_log_send_and_compose_impl();
              if (v124)
                free(v124);
            }
            if (v67)
            {
              v125.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
              sub_20E8C003C((uint64_t)&v135, "  Done, it took %f", (double)(v125.__d_.__rep_ - v71.__d_.__rep_) / 1000000000.0);
              sub_20E863570((uint64_t)&v135);
            }
            sub_20E863570((uint64_t)&v135);
            v126 = v143;
            if (v143)
            {
              v127 = (unint64_t *)&v143->__shared_owners_;
              do
                v128 = __ldaxr(v127);
              while (__stlxr(v128 - 1, v127));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
            }
            return;
          }
LABEL_130:
          if (SBYTE7(v148) < 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_132;
        }
      }
      memmove(v79, v77, v78);
      goto LABEL_119;
    }
  }
}

void sub_20EE729EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,int a26,__int16 a27,char a28,char a29,void *__p,void *a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a36)
  {
    if (a35 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  sub_20EBCBAD8(v40);
  _Unwind_Resume(a1);
}

void sub_20EE72B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a34 && a33 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20EE72BDC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EE72BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EBCBAD8(v1);
  _Unwind_Resume(a1);
}

void sub_20EE72C00()
{
  JUMPOUT(0x20EE72C30);
}

void sub_20EE72C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EBCBAD8(v1);
  _Unwind_Resume(a1);
}

void sub_20EE72C4C(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  const char *v25;
  size_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  const char *v29;
  size_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  void *p_p;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  size_t prime;
  unint64_t v78;
  int8x8_t v79;
  unint64_t v80;
  uint8x8_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64x2_t v87;
  _OWORD *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  std::chrono::steady_clock::time_point v100;
  uint64_t v101;
  const char *v102;
  size_t v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  const char *v106;
  size_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  NSObject *v112;
  uint64_t v113;
  uint64_t v114;
  size_t v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  int v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  std::chrono::steady_clock::time_point v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t *v157;
  int8x16_t v160;
  uint64_t v162;
  float64x2_t v163;
  float64x2_t v164;
  double v165;
  float64x2_t v166;
  uint64_t v167;
  double v168;
  double v171;
  float64x2_t v173;
  int8x16_t v174;
  float64x2_t v176;
  int8x16_t v177;
  int64x2_t v178;
  float64x2_t *v179;
  double v180;
  float64x2_t v182;
  float64x2_t *v183;
  float64_t v184;
  float64x2_t v185;
  uint64_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  int v199;
  int v200;
  uint64_t v201;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v202;
  uint64_t v203;
  uint64_t v204;
  float64_t v205;
  uint64_t *v206;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v208;
  int v209;
  const char *v210;
  int v211;
  const char *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _BYTE object[24];
  __int128 v219;
  void *__p;
  size_t v221;
  unint64_t v222;
  uint64_t v223;
  _OWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;

  v228 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a4[53] + 64);
  v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a3;
  *(_OWORD *)(v9 + 16) = v10;
  v11 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 56) = *(_QWORD *)(a3 + 56);
  v12 = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(v9 + 80) = *(_QWORD *)(a3 + 80);
  *(_OWORD *)(v9 + 64) = v12;
  v13 = *(_OWORD *)(a3 + 88);
  *(_QWORD *)(v9 + 104) = *(_QWORD *)(a3 + 104);
  *(_OWORD *)(v9 + 88) = v13;
  v14 = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(v9 + 128) = *(_QWORD *)(a3 + 128);
  *(_OWORD *)(v9 + 112) = v14;
  v15 = *(_OWORD *)(a3 + 136);
  *(_QWORD *)(v9 + 152) = *(_QWORD *)(a3 + 152);
  *(_OWORD *)(v9 + 136) = v15;
  v17 = *(_OWORD *)(a3 + 192);
  v16 = *(_OWORD *)(a3 + 208);
  v18 = *(_OWORD *)(a3 + 176);
  *(_QWORD *)(v9 + 224) = *(_QWORD *)(a3 + 224);
  *(_OWORD *)(v9 + 192) = v17;
  *(_OWORD *)(v9 + 208) = v16;
  *(_OWORD *)(v9 + 176) = v18;
  *(_OWORD *)(v9 + 160) = *(_OWORD *)(a3 + 160);
  v19 = *(_OWORD *)(a3 + 264);
  v20 = *(_OWORD *)(a3 + 280);
  v21 = *(_QWORD *)(a3 + 296);
  *(_OWORD *)(v9 + 248) = *(_OWORD *)(a3 + 248);
  *(_QWORD *)(v9 + 296) = v21;
  *(_OWORD *)(v9 + 264) = v19;
  *(_OWORD *)(v9 + 280) = v20;
  *(_OWORD *)(v9 + 232) = *(_OWORD *)(a3 + 232);
  sub_20EE74410(&v215);
  if (**(int **)(v215 + 56) > 3)
    goto LABEL_89;
  v22 = *(unsigned __int8 *)(v215 + 72);
  v23 = sub_20E8C31DC(v215, "OSLogSurrogateAppender", 1, 0);
  v24 = v23;
  if (!v22 && !v23)
    goto LABEL_89;
  v199 = v22;
  v206 = &v215;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v208 = std::chrono::system_clock::now().__d_.__rep_;
  v209 = 3;
  v210 = "unknown file";
  v211 = 778;
  v213 = 0;
  v214 = 0;
  v212 = "unknown function";
  v25 = (const char *)(v215 + 16);
  v196 = v215 + 16;
  v197 = v215;
  if (*(char *)(v215 + 39) < 0)
  {
    v25 = *(const char **)(v215 + 16);
    v26 = *(_QWORD *)(v215 + 24);
    v201 = a2;
    v203 = a5;
    v28 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v28 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    v26 = *(unsigned __int8 *)(v215 + 39);
    v201 = a2;
    v203 = a5;
    v27 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v27 & 1) != 0)
      goto LABEL_8;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v219 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_8:
  if (byte_254A4A4F8[23] >= 0)
    v29 = byte_254A4A4F8;
  else
    v29 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v30 = byte_254A4A4F8[23];
  else
    v30 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v29, v25);
  v31 = &object[8];
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v30 >= 0x17)
  {
    v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v32 = v30 | 7;
    v33 = v32 + 1;
    v31 = operator new(v32 + 1);
    *(_QWORD *)&object[16] = v30;
    *(_QWORD *)&v219 = v33 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v31;
    goto LABEL_21;
  }
  BYTE7(v219) = v30;
  if (v30)
LABEL_21:
    memmove(v31, v29, v30);
  v31[v30] = 0;
  BYTE8(v219) = 1;
  p_p = &__p;
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  a2 = v201;
  a5 = v203;
  if (v26 >= 0x17)
  {
    v36 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v36 = v26 | 7;
    v37 = v36 + 1;
    p_p = operator new(v36 + 1);
    v221 = v26;
    v222 = v37 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v222) = v26;
    if (!v26)
    {
      LOBYTE(__p) = 0;
      LOBYTE(v223) = 1;
      v35 = *(NSObject **)object;
      if ((SHIBYTE(v222) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_32;
    }
  }
  memmove(p_p, v25, v26);
  *((_BYTE *)p_p + v26) = 0;
  LOBYTE(v223) = 1;
  v35 = *(NSObject **)object;
  if ((SHIBYTE(v222) & 0x80000000) == 0)
  {
LABEL_26:
    if (!BYTE8(v219))
      goto LABEL_35;
LABEL_33:
    if (SBYTE7(v219) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_35;
  }
LABEL_32:
  operator delete(__p);
  if (BYTE8(v219))
    goto LABEL_33;
LABEL_35:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v24 && *(_QWORD *)(v24 + 24))
  {
    v38 = _os_log_pack_size();
    v39 = (std::__shared_weak_count_vtbl *)operator new(v38, (std::align_val_t)8uLL);
    v40 = (std::__shared_weak_count *)operator new();
    v41 = v40;
    v40->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v40->__shared_weak_owners_ = 0;
    v40[1].__vftable = v39;
    *(_QWORD *)object = v39;
    *(_QWORD *)&object[8] = v39;
    *(_QWORD *)&object[16] = v40;
    do
      v43 = __ldxr(p_shared_owners);
    while (__stxr(v43 + 1, p_shared_owners));
    v219 = 0uLL;
    __p = 0;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v41);
    }
    v45 = *(_QWORD *)object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v46 = operator new();
    v47 = *(unsigned __int8 *)(v197 + 39);
    v48 = v196;
    if ((v47 & 0x80u) != 0)
    {
      v48 = *(_QWORD *)(v197 + 16);
      v47 = *(_QWORD *)(v197 + 24);
    }
    *(_QWORD *)v46 = v45;
    *(_OWORD *)(v46 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v46 + 24) = v219;
    v219 = 0uLL;
    *(_QWORD *)(v46 + 40) = v48;
    *(_QWORD *)(v46 + 48) = v47;
    *(_BYTE *)(v46 + 56) = 1;
    v216 = 0;
    v217 = v46;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v24 + 24) + 40))(*(_QWORD *)(v24 + 24), &v217);
    v49 = v217;
    v217 = 0;
    if (v49)
    {
      v50 = *(std::__shared_weak_count **)(v49 + 32);
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = *(std::__shared_weak_count **)(v49 + 16);
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      MEMORY[0x212BC6398](v49, 0x10F0C40B62ED6C6);
      v56 = v216;
      v216 = 0;
      if (v56)
      {
        v57 = *(std::__shared_weak_count **)(v56 + 32);
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = *(std::__shared_weak_count **)(v56 + 16);
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        MEMORY[0x212BC6398](v56, 0x10F0C40B62ED6C6);
      }
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
    v64 = v199;
    if (*((_QWORD *)&v219 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v67 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v68 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
  }
  else
  {
    os_log_type_enabled(v35, OS_LOG_TYPE_INFO);
    *(_WORD *)object = 0;
    v70 = (void *)_os_log_send_and_compose_impl();
    v64 = v199;
    if (v70)
      free(v70);
  }
  if (v64)
  {
    sub_20E8C003C((uint64_t)&v206, "Starting map optimization");
    sub_20E863570((uint64_t)&v206);
  }
  sub_20E863570((uint64_t)&v206);
  v71 = v214;
  if (v214)
  {
    v72 = (unint64_t *)&v214->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
LABEL_89:
  if (a1[165] || a1[166] || a1[168])
  {
    v75 = operator new();
    bzero((void *)v75, 0x720uLL);
    *(_QWORD *)(v75 + 24) = v75 + 32;
    *(_QWORD *)(v75 + 56) = 0;
    *(_QWORD *)(v75 + 64) = 0;
    *(_QWORD *)(v75 + 48) = v75 + 56;
    *(_OWORD *)(v75 + 112) = 0u;
    *(_OWORD *)(v75 + 128) = 0u;
    *(_OWORD *)(v75 + 144) = 0u;
    *(_OWORD *)(v75 + 88) = 0u;
    *(_OWORD *)(v75 + 72) = 0u;
    *(_QWORD *)(v75 + 104) = 0x3FF0000000000000;
    *(_QWORD *)(v75 + 136) = 0x3FF0000000000000;
    *(_QWORD *)(v75 + 160) = 0;
    *(_QWORD *)(v75 + 168) = 0x3FF0000000000000;
    *(_QWORD *)(v75 + 176) = 0;
    *(_QWORD *)(v75 + 184) = 0;
    *(_OWORD *)(v75 + 208) = 0u;
    *(_OWORD *)(v75 + 224) = 0u;
    *(_OWORD *)(v75 + 240) = 0u;
    *(_QWORD *)(v75 + 192) = 0;
    *(_QWORD *)(v75 + 200) = 0x3FF0000000000000;
    *(_QWORD *)(v75 + 232) = 0x3FF0000000000000;
    *(_QWORD *)(v75 + 256) = 0;
    *(_QWORD *)(v75 + 264) = 0x3FF0000000000000;
    *(_QWORD *)(v75 + 272) = 0;
    *(_QWORD *)(v75 + 280) = 0;
    *(_QWORD *)(v75 + 304) = 0;
    *(_QWORD *)(v75 + 312) = 0;
    *(_QWORD *)(v75 + 288) = 0;
    *(_QWORD *)(v75 + 296) = v75 + 304;
    *(_OWORD *)(v75 + 320) = 0u;
    *(_OWORD *)(v75 + 336) = 0u;
    *(_DWORD *)(v75 + 352) = 1065353216;
    *(_OWORD *)(v75 + 360) = 0u;
    *(_OWORD *)(v75 + 376) = 0u;
    *(_DWORD *)(v75 + 392) = 1065353216;
    *(_OWORD *)(v75 + 400) = 0u;
    *(_OWORD *)(v75 + 416) = 0u;
    *(_DWORD *)(v75 + 432) = 1065353216;
    *(_QWORD *)(v75 + 792) = 0;
    *(_QWORD *)(v75 + 784) = 0;
    *(_BYTE *)(v75 + 808) = 0;
    *(_QWORD *)(v75 + 800) = 0;
    *(_OWORD *)(v75 + 1680) = 0u;
    *(_QWORD *)(v75 + 1712) = 0;
    *(_OWORD *)(v75 + 1696) = 0u;
    *(_OWORD *)(v75 + 1664) = 0u;
    *(_QWORD *)(v75 + 1656) = 0x3FF0000000000000;
    *(_QWORD *)(v75 + 1688) = 0x3FF0000000000000;
    *(_QWORD *)(v75 + 1720) = 0x3FF0000000000000;
    *(_BYTE *)(v75 + 1752) = 0;
    *(_QWORD *)(v75 + 1744) = 0;
    *(_QWORD *)(v75 + 1728) = 0;
    *(_QWORD *)(v75 + 1736) = 0;
    *(_QWORD *)(v75 + 1776) = 0;
    *(_QWORD *)(v75 + 1768) = 0;
    *(_QWORD *)(v75 + 1760) = v75 + 1768;
    *(_OWORD *)(v75 + 1784) = 0u;
    *(_OWORD *)(v75 + 1800) = 0u;
    *(_DWORD *)(v75 + 1816) = 1065353216;
    *(_QWORD *)object = v75;
    v76 = operator new();
    *(_QWORD *)(v76 + 16) = 0;
    *(_QWORD *)(v76 + 8) = 0;
    *(_QWORD *)v76 = v76 + 8;
    *(_OWORD *)(v76 + 24) = 0u;
    *(_OWORD *)(v76 + 40) = 0u;
    *(_DWORD *)(v76 + 56) = 1065353216;
    *(_QWORD *)(v76 + 64) = 1000;
    prime = std::__next_prime(0x3E8uLL);
    v78 = prime;
    v79 = *(int8x8_t *)(v76 + 32);
    if (prime > *(_QWORD *)&v79)
      goto LABEL_94;
    if (prime < *(_QWORD *)&v79)
    {
      v80 = vcvtps_u32_f32((float)*(unint64_t *)(v76 + 48) / *(float *)(v76 + 56));
      if (*(_QWORD *)&v79 < 3uLL || (v81 = (uint8x8_t)vcnt_s8(v79), v81.i16[0] = vaddlv_u8(v81), v81.u32[0] > 1uLL))
      {
        v80 = std::__next_prime(v80);
      }
      else
      {
        v82 = 1 << -(char)__clz(v80 - 1);
        if (v80 >= 2)
          v80 = v82;
      }
      if (v78 <= v80)
        v78 = v80;
      if (v78 < *(_QWORD *)&v79)
LABEL_94:
        sub_20E8D2B3C(v76 + 24, v78);
    }
    *(_QWORD *)(v76 + 72) = 0;
    *(_QWORD *)(v76 + 80) = 0;
    *(_QWORD *)(v76 + 64) = 1000;
    *(_QWORD *)&object[8] = v76;
    v83 = operator new();
    *(_QWORD *)v83 = &unk_2102DAFF0;
    *(_OWORD *)(v83 + 8) = 0u;
    *(_OWORD *)(v83 + 24) = 0u;
    *(_QWORD *)&object[16] = v83;
    v84 = operator new();
    *(_QWORD *)v84 = &unk_2102DAFF0;
    *(_OWORD *)(v84 + 8) = 0u;
    *(_OWORD *)(v84 + 24) = 0u;
    *(_QWORD *)&v219 = v84;
    v85 = operator new();
    *(_QWORD *)v85 = &unk_2102DAFF0;
    *(_OWORD *)(v85 + 8) = 0u;
    *(_OWORD *)(v85 + 24) = 0u;
    *((_QWORD *)&v219 + 1) = v85;
    __p = 0;
    v221 = 0;
    v222 = 0;
    v86 = operator new();
    v87 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)v86 = v87;
    *(int64x2_t *)(v86 + 16) = v87;
    *(int64x2_t *)(v86 + 32) = v87;
    *(_OWORD *)(v86 + 48) = xmmword_2102DB700;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v86 + 64) = _Q0;
    *(_QWORD *)(v86 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(v86 + 88) = 0;
    *(_QWORD *)(v86 + 96) = 0;
    *(_QWORD *)(v86 + 104) = 0;
    *(_OWORD *)(v86 + 112) = _Q0;
    *(_QWORD *)(v86 + 128) = 0x3FF0000000000000;
    *(_OWORD *)(v86 + 152) = 0u;
    *(_OWORD *)(v86 + 184) = 0u;
    *(_OWORD *)(v86 + 136) = 0u;
    *(_OWORD *)(v86 + 168) = 0u;
    *(_OWORD *)(v86 + 200) = 0u;
    *(_QWORD *)(v86 + 216) = 0;
    *(_QWORD *)(v86 + 160) = 0x3FF0000000000000;
    *(_QWORD *)(v86 + 192) = 0x3FF0000000000000;
    *(_OWORD *)(v86 + 256) = 0u;
    *(_OWORD *)(v86 + 272) = 0u;
    *(_OWORD *)(v86 + 224) = _Q0;
    *(_OWORD *)(v86 + 240) = 0u;
    *(_QWORD *)(v86 + 264) = 0x3FF0000000000000;
    *(_QWORD *)(v86 + 288) = 0;
    *(_QWORD *)(v86 + 296) = 0x3FF0000000000000;
    v223 = v86;
    v93 = (_OWORD *)operator new();
    v93[5] = 0u;
    v93[6] = 0u;
    v93[3] = 0u;
    v93[4] = 0u;
    v93[1] = 0u;
    v93[2] = 0u;
    *v93 = 0u;
    v224 = v93;
    v225 = 0;
    v226 = 0;
    v227 = 0;
    sub_20FCE404C(a4[53], 0, 0, (uint64_t *)object);
    v206 = a4 + 21;
    LOBYTE(rep) = 1;
    sub_20F34F644(a2, object, (uint64_t)&v206, a4[20], (uint64_t)a1);
    v94 = (uint64_t *)operator new();
    sub_20E8E8A78(v94);
    v95 = (uint64_t *)a4[53];
    a4[53] = (uint64_t)v94;
    if (v95)
    {
      v96 = sub_20E8E95B0(v95);
      MEMORY[0x212BC6398](v96, 0x20C40313AD07FLL);
      v94 = (uint64_t *)a4[53];
    }
    sub_20FCE24D4((uint64_t)object, 0, 0, v94);
    sub_20EE7D128((uint64_t *)object);
  }
  else
  {
    v74 = a4[53];
    *(_QWORD *)object = a4 + 21;
    object[8] = 1;
    sub_20F368C38(a2, v74, object, a4[20], a1, 1);
  }
  sub_20EE74410(&v215);
  if (**(int **)(v215 + 56) > 3)
    goto LABEL_195;
  v97 = *(unsigned __int8 *)(v215 + 72);
  v98 = sub_20E8C31DC(v215, "OSLogSurrogateAppender", 1, 0);
  v99 = v98;
  if (!v97 && !v98)
    goto LABEL_195;
  v200 = v97;
  v206 = &v215;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v208 = std::chrono::system_clock::now().__d_.__rep_;
  v209 = 3;
  v210 = "unknown file";
  v211 = 805;
  v213 = 0;
  v214 = 0;
  v212 = "unknown function";
  v100.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v101 = *v206;
  v102 = (const char *)(*v206 + 16);
  v198 = v102;
  if (*(char *)(*v206 + 39) < 0)
  {
    v102 = *(const char **)(v101 + 16);
    v103 = *(_QWORD *)(v101 + 24);
    v202 = v100.__d_.__rep_;
    v204 = a5;
    v105 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v105 & 1) != 0)
      goto LABEL_115;
  }
  else
  {
    v103 = *(unsigned __int8 *)(*v206 + 39);
    v202 = v100.__d_.__rep_;
    v204 = a5;
    v104 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v104 & 1) != 0)
      goto LABEL_115;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v219 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_115:
  if (byte_254A4A4F8[23] >= 0)
    v106 = byte_254A4A4F8;
  else
    v106 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v107 = byte_254A4A4F8[23];
  else
    v107 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v106, v102);
  v108 = &object[8];
  if (v107 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v107 >= 0x17)
  {
    v109 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v107 | 7) != 0x17)
      v109 = v107 | 7;
    v110 = v109 + 1;
    v108 = operator new(v109 + 1);
    *(_QWORD *)&object[16] = v107;
    *(_QWORD *)&v219 = v110 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v108;
    goto LABEL_128;
  }
  BYTE7(v219) = v107;
  if (v107)
LABEL_128:
    memmove(v108, v106, v107);
  v108[v107] = 0;
  BYTE8(v219) = 1;
  v111 = &__p;
  if (v103 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v103 >= 0x17)
  {
    v113 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v103 | 7) != 0x17)
      v113 = v103 | 7;
    v114 = v113 + 1;
    v111 = operator new(v113 + 1);
    v221 = v103;
    v222 = v114 | 0x8000000000000000;
    __p = v111;
  }
  else
  {
    HIBYTE(v222) = v103;
    if (!v103)
    {
      LOBYTE(__p) = 0;
      LOBYTE(v223) = 1;
      v112 = *(NSObject **)object;
      if ((SHIBYTE(v222) & 0x80000000) == 0)
        goto LABEL_133;
      goto LABEL_139;
    }
  }
  memmove(v111, v102, v103);
  *((_BYTE *)v111 + v103) = 0;
  LOBYTE(v223) = 1;
  v112 = *(NSObject **)object;
  if ((SHIBYTE(v222) & 0x80000000) == 0)
  {
LABEL_133:
    if (!BYTE8(v219))
      goto LABEL_142;
    goto LABEL_140;
  }
LABEL_139:
  operator delete(__p);
  if (!BYTE8(v219))
    goto LABEL_142;
LABEL_140:
  if (SBYTE7(v219) < 0)
    operator delete(*(void **)&object[8]);
LABEL_142:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v99 && *(_QWORD *)(v99 + 24))
  {
    v115 = _os_log_pack_size();
    v116 = (std::__shared_weak_count_vtbl *)operator new(v115, (std::align_val_t)8uLL);
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v117;
    v117->__shared_owners_ = 0;
    v119 = (unint64_t *)&v117->__shared_owners_;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v116;
    *(_QWORD *)object = v116;
    *(_QWORD *)&object[8] = v116;
    *(_QWORD *)&object[16] = v117;
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
    v219 = 0uLL;
    __p = 0;
    do
      v121 = __ldaxr(v119);
    while (__stlxr(v121 - 1, v119));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v118);
    }
    v122 = *(_QWORD *)object;
    v123 = _os_log_pack_fill();
    *(_DWORD *)v123 = 134217984;
    *(double *)(v123 + 4) = (double)(v202 - v204) / 1000000000.0;
    v124 = operator new();
    v125 = *(unsigned __int8 *)(v101 + 39);
    v126 = v198;
    if ((v125 & 0x80u) != 0)
    {
      v126 = *(const char **)(v101 + 16);
      v125 = *(_QWORD *)(v101 + 24);
    }
    *(_QWORD *)v124 = v122;
    *(_OWORD *)(v124 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v124 + 24) = v219;
    v219 = 0uLL;
    *(_QWORD *)(v124 + 40) = v126;
    *(_QWORD *)(v124 + 48) = v125;
    *(_BYTE *)(v124 + 56) = 1;
    v216 = 0;
    v217 = v124;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v99 + 24) + 40))(*(_QWORD *)(v99 + 24), &v217);
    v127 = v217;
    v217 = 0;
    v128 = v200;
    if (v127)
    {
      v129 = *(std::__shared_weak_count **)(v127 + 32);
      if (v129)
      {
        v130 = (unint64_t *)&v129->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      v132 = *(std::__shared_weak_count **)(v127 + 16);
      if (v132)
      {
        v133 = (unint64_t *)&v132->__shared_owners_;
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      MEMORY[0x212BC6398](v127, 0x10F0C40B62ED6C6);
      v135 = v216;
      v216 = 0;
      if (v135)
      {
        v136 = *(std::__shared_weak_count **)(v135 + 32);
        if (v136)
        {
          v137 = (unint64_t *)&v136->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        v139 = *(std::__shared_weak_count **)(v135 + 16);
        if (v139)
        {
          v140 = (unint64_t *)&v139->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
          }
        }
        MEMORY[0x212BC6398](v135, 0x10F0C40B62ED6C6);
      }
    }
    v142 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
    if (*((_QWORD *)&v219 + 1))
    {
      v143 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    v145 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v146 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
  }
  else
  {
    os_log_type_enabled(v112, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134217984;
    *(double *)&object[4] = (double)(v202 - v204) / 1000000000.0;
    v148 = (void *)_os_log_send_and_compose_impl();
    v128 = v200;
    if (v148)
      free(v148);
  }
  if (v128)
  {
    v149.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    sub_20E8C003C((uint64_t)&v206, "  Done, it took %f", (double)(v149.__d_.__rep_ - v202) / 1000000000.0);
    sub_20E863570((uint64_t)&v206);
  }
  sub_20E863570((uint64_t)&v206);
  v150 = v214;
  if (v214)
  {
    v151 = (unint64_t *)&v214->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
      v153 = *(_QWORD *)a4[53];
      v154 = a4[2];
      if (*(_QWORD *)(v153 + 64))
        goto LABEL_196;
      goto LABEL_203;
    }
  }
LABEL_195:
  v153 = *(_QWORD *)a4[53];
  v154 = a4[2];
  if (*(_QWORD *)(v153 + 64))
  {
LABEL_196:
    if (v154)
    {
      v155 = (_QWORD *)(v153 + 1784);
      __asm { FMOV            V0.2D, #1.0 }
      v205 = *((double *)&_Q0 + 1);
      do
      {
        v157 = sub_20E9DF85C(v155, (uint64_t *)(v154 + 40));
        if (v157)
        {
          v162 = v157[5];
          v163 = *(float64x2_t *)v162;
          _Q5.f64[0] = *(float64_t *)(v162 + 40);
          v164 = *(float64x2_t *)(v162 + 24);
          v165 = *(double *)(v162 + 64);
          v166 = *(float64x2_t *)(v162 + 48);
          v167 = v157[9];
          v168 = *(double *)(v167 + 16);
          _Q2 = *(_OWORD *)v167;
          v160.i64[0] = *(_QWORD *)(v167 + 40);
          _Q18 = *(float64x2_t *)(v167 + 24);
          v171 = *(double *)(v167 + 64);
          _Q20 = *(float64x2_t *)(v167 + 48);
          v173 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, *(double *)v167), v164, *(float64x2_t *)v167, 1), v166, v168);
          __asm { FMLA            D21, D5, V2.D[1] }
          *(double *)_Q21.i64 = *(double *)_Q21.i64 + v165 * v168;
          v174 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, _Q18.f64[0]), v164, _Q18, 1), v166, *(double *)v160.i64);
          __asm { FMLA            D1, D5, V18.D[1] }
          *(double *)v160.i64 = _D1 + v165 * *(double *)v160.i64;
          v176 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, _Q20.f64[0]), v164, _Q20, 1), v166, v171);
          __asm { FMLA            D2, D5, V20.D[1] }
          *(double *)&_Q2 = *(double *)&_Q2 + v165 * v171;
          v177 = vextq_s8(v174, v160, 8uLL);
          v178 = vzip1q_s64(_Q21, (int64x2_t)v174);
          v179 = (float64x2_t *)v157[11];
          v180 = v179[1].f64[0];
          _Q20 = *v179;
          v182 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, v179->f64[0]), v164, *v179, 1), v166, v180);
          __asm { FMLA            D3, D5, V20.D[1] }
          _Q3.f64[0] = _Q3.f64[0] + v165 * v180;
          v183 = (float64x2_t *)v157[7];
          _Q5.f64[0] = v183[1].f64[0];
          *(_QWORD *)&v184 = *(_OWORD *)&vaddq_f64(_Q3, _Q5);
          *(_QWORD *)&v166.f64[0] = vdupq_laneq_s64(v178, 1).u64[0];
          *(_QWORD *)&v166.f64[1] = v177.i64[0];
          v185 = vaddq_f64(v182, *v183);
          v186 = v177.i64[1];
          *(_QWORD *)&v164.f64[0] = v178.i64[0];
          v187.f64[1] = v205;
          v187.f64[0] = v184;
          v189 = *(float64x2_t *)(v154 + 64);
          v188 = *(float64x2_t *)(v154 + 80);
          v191 = *(float64x2_t *)(v154 + 96);
          v190 = *(float64x2_t *)(v154 + 112);
          v193 = *(float64x2_t *)(v154 + 128);
          v192 = *(float64x2_t *)(v154 + 144);
          v195 = *(float64x2_t *)(v154 + 160);
          v194 = *(float64x2_t *)(v154 + 176);
          *(float64x2_t *)(v154 + 192) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v173, v189.f64[0]), v166, v189, 1), v176, v188.f64[0]), v185, v188, 1);
          *(float64x2_t *)(v154 + 208) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v164.f64[0], v189.f64[0]), (float64x2_t)(unint64_t)v186, v189, 1), (float64x2_t)(unint64_t)_Q2, v188.f64[0]), v187, v188, 1);
          *(float64x2_t *)(v154 + 224) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v173, v191.f64[0]), v166, v191, 1), v176, v190.f64[0]), v185, v190, 1);
          *(float64x2_t *)(v154 + 240) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v164.f64[0], v191.f64[0]), (float64x2_t)(unint64_t)v186, v191, 1), (float64x2_t)(unint64_t)_Q2, v190.f64[0]), v187, v190, 1);
          *(float64x2_t *)(v154 + 256) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v173, v193.f64[0]), v166, v193, 1), v176, v192.f64[0]), v185, v192, 1);
          *(float64x2_t *)(v154 + 272) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v164.f64[0], v193.f64[0]), (float64x2_t)(unint64_t)v186, v193, 1), (float64x2_t)(unint64_t)_Q2, v192.f64[0]), v187, v192, 1);
          *(float64x2_t *)(v154 + 288) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v173, v195.f64[0]), v166, v195, 1), v176, v194.f64[0]), v185, v194, 1);
          *(float64x2_t *)(v154 + 304) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v164.f64[0], v195.f64[0]), (float64x2_t)(unint64_t)v186, v195, 1), (float64x2_t)(unint64_t)_Q2, v194.f64[0]), v187, v194, 1);
        }
        v154 = *(_QWORD *)v154;
      }
      while (v154);
    }
    sub_20FCC8FF4(a4);
    return;
  }
LABEL_203:
  while (v154)
  {
    sub_20FCC8E38(a4, v154 + 16, (__int128 *)(v154 + 40));
    v154 = *(_QWORD *)v154;
  }
}

void sub_20EE74124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20EE7416C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E86E8C4(&a28);
  sub_20E86E8C4(&a27);
  sub_20E86E658((uint64_t)&a29);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20EE741DC()
{
  JUMPOUT(0x20EE741E4);
}

void sub_20EE74208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE7421C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EE74410(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5FA38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FA38))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.slam_engine");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5FA30);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5FA38);
  }
  *a1 = qword_254A5FA30;
}

void sub_20EE744AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5FA38);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5FA38);
  _Unwind_Resume(a1);
}

void sub_20EE74504(uint64_t a1)
{
  float64x2_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double ***v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  float64_t v21;
  size_t v22;
  const char *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  const char *v26;
  size_t v27;
  __int128 *v28;
  unint64_t v29;
  const char *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *p_p;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  float64x2_t *v74;
  float64_t v80;
  int64x2_t v81;
  int64x2_t v82;
  double v84;
  float64_t v85;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  int8x16_t v90;
  int64x2_t v91;
  float64x2_t v92;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t *v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  float64x2_t *v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  _QWORD *v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  float64x2_t v119;
  double v120;
  float64x2_t v122;
  float64x2_t v123;
  int8x16_t v124;
  float64x2_t v125;
  float64x2_t v128;
  __int128 v129;
  float64x2_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD *v134;
  char *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _QWORD *v148;
  _QWORD *v149;
  int v150;
  int v151;
  uint64_t v152;
  _OWORD *v153;
  void *v154;
  _QWORD *v155;
  char *v156;
  void **v157;
  void *v158;
  _OWORD *v159;
  uint64_t v160;
  unint64_t v161;
  _OWORD *v162;
  _BYTE *v163;
  char *v164;
  float64x2_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _OWORD *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  _OWORD *v175;
  char *v176;
  float64x2_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  unsigned __int8 *v184;
  double **v185;
  uint64_t v186;
  double *v187;
  double v188;
  double v189;
  unint64_t v190;
  double **v191;
  double *v192;
  unsigned __int8 v193;
  unsigned __int8 *v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int8 v197;
  double **v198;
  double **v199;
  double **v200;
  double *v201;
  double *v202;
  char *v203;
  unint64_t v204;
  unint64_t v205;
  double *v206;
  double v207;
  char *v208;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  double **v218;
  double *v219;
  double *v220;
  double *v221;
  double *v222;
  __int128 v223;
  __int128 v224;
  float64x2_t v225;
  float64x2_t v226;
  int8x16_t v228;
  int64x2_t v229;
  float64x2_t v232;
  int64x2_t v234;
  uint64_t v237;
  uint64_t v238;
  float64x2_t v239;
  double v240;
  __int128 *v241;
  __int128 *v242;
  __int128 *v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v262;
  _OWORD *v263;
  void *v264;
  _OWORD *v265;
  void *v266;
  char *v267;
  float64x2_t *v268;
  int64_t v269;
  unint64_t v270;
  _QWORD *v271;
  int64_t v272;
  char *v273;
  char *v274;
  _OWORD *v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  char *v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  void **v288;
  void *v289;
  _BYTE *v290;
  float64x2_t *v291;
  double v292;
  double v293;
  double *v294;
  double *v295;
  double *v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  _BYTE *v300;
  double *v301;
  uint64_t v302;
  int64_t v303;
  unint64_t v304;
  double *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _OWORD *v310;
  double *v311;
  uint64_t v312;
  __int128 v313;
  void *v314;
  double *v315;
  unint64_t v316;
  unint64_t v317;
  char *v318;
  char *v319;
  char *v320;
  char *v321;
  char *v322;
  char *v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  double v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  char *v346;
  double v347;
  unint64_t v348;
  float64x2_t *v349;
  unint64_t v350;
  float64x2_t *v351;
  double v352;
  float64x2_t *v353;
  double *f64;
  _OWORD *v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  char *v362;
  double **v363;
  uint64_t v364;
  double v365;
  unint64_t v366;
  double *v367;
  double **v368;
  _OWORD *v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  char *v373;
  double **v374;
  double **v375;
  double *v376;
  double *v377;
  char *v378;
  unint64_t v379;
  unint64_t v380;
  double *v381;
  double v382;
  char *v383;
  int64x2_t v385;
  float64x2_t v388;
  uint64_t v391;
  __int128 v392;
  __int128 v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  double **v397;
  double **v398;
  double **v399;
  float64x2_t *v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t *v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  char *v414;
  unint64_t v415;
  unint64_t v416;
  double *v417;
  double v418;
  char *v419;
  char *v420;
  char *v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  char *v425;
  char *v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  char *v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  double *v446;
  double *v447;
  double *v448;
  double *v449;
  __int128 v450;
  __int128 v451;
  int v452;
  int64x2_t v453;
  int64x2_t v454;
  int64x2_t v456;
  float64x2_t v457;
  _BOOL4 v460;
  int64x2_t v461;
  int64x2_t v462;
  int64x2_t v463;
  int64x2_t v464;
  int64x2_t v466;
  double **v469;
  double v470;
  int v471;
  int64x2_t v472;
  float64x2_t v473;
  int8x16_t v475;
  int64x2_t v476;
  float64x2_t v479;
  __int128 v480;
  float64x2_t v484;
  int8x16_t v486;
  int64x2_t v487;
  double v490;
  double v491;
  double v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v502;
  int8x16_t v503;
  int64x2_t v504;
  float64x2_t v505;
  float64x2_t v507;
  uint64_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  double v517;
  double v518;
  double v519;
  __double2 v520;
  double v521;
  double v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  double v537;
  double v538;
  double cosval;
  double v540;
  __double2 v541;
  float64x2_t v542;
  double v543;
  float64_t v544;
  float64_t v545;
  float64_t v546;
  float64_t v547;
  float64_t v548;
  double v549;
  double v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  double v561;
  double v562;
  float64_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  double v569;
  double v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  double v574;
  char *v575;
  __int128 v576;
  __int128 v577;
  char *v578;
  char *v579;
  unint64_t v580;
  unint64_t v581;
  unint64_t v582;
  char *v583;
  __int128 v584;
  char *v585;
  __int128 v586;
  __int128 v587;
  char *v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  float64x2_t *v598;
  char *v599;
  float64x2_t *v600;
  unint64_t v601;
  unint64_t v602;
  unint64_t v603;
  char *v604;
  float64x2_t *v605;
  float64x2_t *v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v619;
  _OWORD *v620;
  void *v621;
  char *v622;
  unint64_t v623;
  char *v624;
  unint64_t v625;
  uint64_t *v626;
  uint64_t v627;
  uint64_t v628;
  _QWORD *v629;
  char *v630;
  void **v631;
  void *v632;
  uint64_t v633;
  _QWORD *v634;
  uint64_t v635;
  double v636;
  float64x2_t v637;
  float64x2_t v638;
  float64_t v639;
  uint64_t v640;
  float64x2_t v641;
  float64_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  int64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  int64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  double v653;
  float64x2_t v654;
  int64x2_t v655;
  float64x2_t v656;
  double v657;
  float64x2_t v658;
  uint64_t v659;
  float64x2_t v660;
  double **v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  int64x2_t v667;
  float64x2_t v668;
  unint64_t v669;
  int64x2_t v670;
  int64x2_t v671;
  __int128 v672;
  double v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  int v677;
  int64x2_t v678;
  int64x2_t v679;
  int64x2_t v680;
  __int128 v681;
  __int128 v682;
  int64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  double **v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  double ***v690;
  __int128 v691;
  __int128 v692;
  float64x2_t v693;
  __int128 v694;
  float64x2_t v695;
  __int128 v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  uint64_t i;
  uint64_t v704;
  float64x2_t v705;
  __int128 v706;
  int v707;
  float64x2_t v708;
  float64x2_t v709;
  uint64_t v710;
  void *v711;
  void *v712;
  char *v713;
  void *v714;
  float64x2_t *v715;
  char *v716;
  void *v717;
  char *v718;
  char *v719;
  _QWORD v720[2];
  void *v721;
  uint64_t v722;
  double *v723;
  void *v724;
  char *v725;
  char *v726;
  void *v727;
  char *v728;
  char *v729;
  void *v730;
  int v731[2];
  char *v732;
  uint64_t v733;
  _QWORD v734[2];
  _BYTE v735[64];
  uint64_t v736;
  float64x2_t v737;
  _QWORD v738[4];
  __int128 v739;
  _QWORD v740[4];
  void *object;
  __int128 v742;
  __int128 v743;
  void *__p;
  int64x2_t v745;
  _QWORD v746[4];
  int64x2_t v747;
  _QWORD v748[4];
  __int128 v749;
  _QWORD v750[4];
  _OWORD v751[2];
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  char v763;
  char v764;
  __int16 v765;
  char v766;
  char v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  __int16 v771;
  __int128 v772;
  __int128 v773;
  uint64_t v774;
  int v775;
  char v776;
  __int128 v777;
  __int128 v778;
  int v779;
  __int128 v780;
  __int128 v781;
  int v782;
  char v783;
  char v784;
  char v785;
  char v786;
  char v787;
  char v788;
  char v789;
  int v790;
  __int16 v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  char v795;
  char v796;
  char v797;
  char v798;
  char v799;
  char v800;
  __int16 v801;
  uint64_t v802;
  uint64_t v803;
  __int128 v804;
  __int128 v805;
  int v806;
  int v807;
  char v808;
  unint64_t v809;
  char v810;
  char v811;
  char v812;
  char v813;
  char v814;
  char v815;
  __int128 v816;
  __int128 v817;
  char v818;
  __int128 v819;
  __int128 v820;
  int v821;
  uint64_t v822;
  char v823;
  int v824;
  uint64_t v825;
  char v826;
  int v827;
  uint64_t v828;
  char v829;
  int v830;
  uint64_t v831;
  char v832;
  int v833;
  uint64_t v834;
  char v835;
  int v836;
  uint64_t v837;
  char v838;
  int v839;
  uint64_t v840;
  char v841;
  int v842;
  uint64_t v843;
  char v844;
  __int16 v845;
  __int16 v846;
  char v847;
  __int128 v848;
  __int128 v849;
  _BYTE v850[25];
  char v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  __int128 v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  char v864;
  char v865;
  __int16 v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  int v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  char v874;
  char v875;
  int v876;
  char v877;
  unint64_t v878;
  __int16 v879;
  char v880;
  char v881;
  __int16 v882;
  char v883;
  char v884;
  char v885;
  char v886;
  uint64_t v887;
  int64x2_t v888;
  int64x2_t v889;
  int64x2_t v890;
  __int128 v891;
  float64x2_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  float64x2_t v897;
  __int128 v898;
  uint64_t v899;
  uint64_t v900;
  __int128 v901;
  uint64_t v902;
  uint64_t v903;
  __int128 v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  __int128 v908;
  uint64_t v909;
  uint64_t v910;
  __int128 v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  void *v915;
  void *v916;
  uint64_t v917;
  void *v918[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v920;
  const char *v921;
  int v922;
  const char *v923;
  uint64_t v924;
  std::__shared_weak_count *v925;
  void *v926;
  void *v927;
  double *v928;
  double **v929;
  _QWORD v930[3];
  _QWORD *v931;
  __int128 v932;
  uint64_t v933;
  __int128 v934;
  uint64_t v935;
  __int128 v936;
  uint64_t v937;
  float64x2_t v938[3];
  _BYTE v939[64];
  _BYTE v940[104];
  uint64_t v941;

  v2 = MEMORY[0x24BDAC7A8](a1);
  v4 = v3;
  v687 = v5;
  v690 = v6;
  v7 = v2;
  v688 = v8;
  v941 = *MEMORY[0x24BDAC8D0];
  v720[0] = v9;
  v720[1] = v10;
  v12 = *(const void **)v11;
  v13 = 0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3);
  v14 = *(_QWORD *)(v2 + 152);
  v719 = 0;
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v717 = 0;
  v718 = 0;
  if (v15)
  {
    if (v15 > 0x147AE147AE147AELL)
      sub_20E867F44();
    v16 = (char *)operator new(200 * v15);
    v17 = &v16[200 * v15];
    v717 = v16;
    v719 = v17;
    memmove(v16, v12, 200 * v15);
    v718 = v17;
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  sub_20EE74410(v938);
  if (**(int **)(*(_QWORD *)&v938[0].f64[0] + 56) <= 3)
  {
    v18 = *(unsigned __int8 *)(*(_QWORD *)&v938[0].f64[0] + 72);
    v19 = sub_20E8C31DC(*(uint64_t *)&v938[0].f64[0], "OSLogSurrogateAppender", 1, 0);
    v20 = v19;
    if (v18 || v19)
    {
      v918[0] = v938;
      v918[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v920 = 3;
      v921 = "unknown file";
      v922 = 732;
      v925 = 0;
      v923 = "unknown function";
      v924 = 0;
      v21 = v938[0].f64[0];
      if (*(char *)(*(_QWORD *)&v938[0].f64[0] + 39) < 0)
      {
        v23 = *(const char **)(*(_QWORD *)&v938[0].f64[0] + 16);
        v22 = *(_QWORD *)(*(_QWORD *)&v938[0].f64[0] + 24);
        v704 = *(_QWORD *)v918[0] + 16;
        v707 = v18;
        v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v25 & 1) != 0)
          goto LABEL_15;
      }
      else
      {
        v22 = *(unsigned __int8 *)(*(_QWORD *)&v938[0].f64[0] + 39);
        v23 = (const char *)(*(_QWORD *)v918[0] + 16);
        v704 = (uint64_t)v23;
        v707 = v18;
        v24 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v24 & 1) != 0)
          goto LABEL_15;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v743 && SHIBYTE(v742) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_15:
      if (byte_254A4A4F8[23] >= 0)
        v26 = byte_254A4A4F8;
      else
        v26 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v27 = byte_254A4A4F8[23];
      else
        v27 = *(_QWORD *)&byte_254A4A4F8[8];
      object = os_log_create(v26, v23);
      v28 = &v742;
      if (v27 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v27 >= 0x17)
      {
        v29 = v20;
        v30 = v23;
        v31 = v21;
        v32 = v7;
        v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v27 | 7) != 0x17)
          v33 = v27 | 7;
        v34 = v33 + 1;
        v28 = (__int128 *)operator new(v33 + 1);
        *(_QWORD *)&v743 = v34 | 0x8000000000000000;
        *(_QWORD *)&v742 = v28;
        *((_QWORD *)&v742 + 1) = v27;
        v7 = v32;
        v21 = v31;
        v23 = v30;
        v20 = v29;
      }
      else
      {
        BYTE7(v743) = v27;
        if (!v27)
        {
LABEL_29:
          *((_BYTE *)v28 + v27) = 0;
          BYTE8(v743) = 1;
          p_p = &__p;
          if (v22 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v22 >= 0x17)
          {
            v37 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v37 = v22 | 7;
            v38 = v37 + 1;
            p_p = operator new(v37 + 1);
            v745.i64[1] = v38 | 0x8000000000000000;
            __p = p_p;
            v745.i64[0] = v22;
          }
          else
          {
            v745.i8[15] = v22;
            if (!v22)
            {
              LOBYTE(__p) = 0;
              LOBYTE(v746[0]) = 1;
              v36 = object;
              if ((v745.i8[15] & 0x80000000) == 0)
                goto LABEL_33;
              goto LABEL_39;
            }
          }
          memmove(p_p, v23, v22);
          *((_BYTE *)p_p + v22) = 0;
          LOBYTE(v746[0]) = 1;
          v36 = object;
          if ((v745.i8[15] & 0x80000000) == 0)
          {
LABEL_33:
            if (!BYTE8(v743))
              goto LABEL_42;
            goto LABEL_40;
          }
LABEL_39:
          operator delete(__p);
          if (!BYTE8(v743))
          {
LABEL_42:
            if (object)
              os_release(object);
            if (v20 && *(_QWORD *)(v20 + 24))
            {
              v39 = _os_log_pack_size();
              v40 = (std::__shared_weak_count_vtbl *)operator new(v39, (std::align_val_t)8uLL);
              v41 = (std::__shared_weak_count *)operator new();
              v42 = v41;
              v41->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v41->__shared_owners_;
              v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v41->__shared_weak_owners_ = 0;
              v41[1].__vftable = v40;
              object = v40;
              *(_QWORD *)&v742 = v40;
              *((_QWORD *)&v742 + 1) = v41;
              do
                v44 = __ldxr(p_shared_owners);
              while (__stxr(v44 + 1, p_shared_owners));
              v743 = 0uLL;
              __p = 0;
              do
                v45 = __ldaxr(p_shared_owners);
              while (__stlxr(v45 - 1, p_shared_owners));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v42);
              }
              v46 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v47 = operator new();
              v48 = *(unsigned __int8 *)(*(_QWORD *)&v21 + 39);
              v49 = v704;
              if ((v48 & 0x80u) != 0)
              {
                v49 = *(_QWORD *)(*(_QWORD *)&v21 + 16);
                v48 = *(_QWORD *)(*(_QWORD *)&v21 + 24);
              }
              *(_QWORD *)v47 = v46;
              *(_OWORD *)(v47 + 8) = v742;
              v742 = 0uLL;
              *(_OWORD *)(v47 + 24) = v743;
              v743 = 0uLL;
              *(_QWORD *)(v47 + 40) = v49;
              *(_QWORD *)(v47 + 48) = v48;
              *(_BYTE *)(v47 + 56) = 1;
              *(_QWORD *)v939 = 0;
              *(_QWORD *)v735 = v47;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v20 + 24) + 40))(*(_QWORD *)(v20 + 24), v735);
              v50 = *(_QWORD *)v735;
              *(_QWORD *)v735 = 0;
              if (v50)
              {
                v51 = *(std::__shared_weak_count **)(v50 + 32);
                if (v51)
                {
                  v52 = (unint64_t *)&v51->__shared_owners_;
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                v54 = *(std::__shared_weak_count **)(v50 + 16);
                if (v54)
                {
                  v55 = (unint64_t *)&v54->__shared_owners_;
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                    std::__shared_weak_count::__release_weak(v54);
                  }
                }
                MEMORY[0x212BC6398](v50, 0x10F0C40B62ED6C6);
                v57 = *(_QWORD *)v939;
                *(_QWORD *)v939 = 0;
                if (v57)
                {
                  v58 = *(std::__shared_weak_count **)(v57 + 32);
                  if (v58)
                  {
                    v59 = (unint64_t *)&v58->__shared_owners_;
                    do
                      v60 = __ldaxr(v59);
                    while (__stlxr(v60 - 1, v59));
                    if (!v60)
                    {
                      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                      std::__shared_weak_count::__release_weak(v58);
                    }
                  }
                  v61 = *(std::__shared_weak_count **)(v57 + 16);
                  if (v61)
                  {
                    v62 = (unint64_t *)&v61->__shared_owners_;
                    do
                      v63 = __ldaxr(v62);
                    while (__stlxr(v63 - 1, v62));
                    if (!v63)
                    {
                      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                      std::__shared_weak_count::__release_weak(v61);
                    }
                  }
                  MEMORY[0x212BC6398](v57, 0x10F0C40B62ED6C6);
                }
              }
              v64 = (std::__shared_weak_count *)*((_QWORD *)&v743 + 1);
              if (*((_QWORD *)&v743 + 1))
              {
                v65 = (unint64_t *)(*((_QWORD *)&v743 + 1) + 8);
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              v67 = (std::__shared_weak_count *)*((_QWORD *)&v742 + 1);
              if (*((_QWORD *)&v742 + 1))
              {
                v68 = (unint64_t *)(*((_QWORD *)&v742 + 1) + 8);
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
            }
            else
            {
              os_log_type_enabled(v36, OS_LOG_TYPE_INFO);
              LOWORD(object) = 0;
              v70 = (void *)_os_log_send_and_compose_impl();
              if (v70)
                free(v70);
            }
            if (v707)
            {
              sub_20E8C003C((uint64_t)v918, "Trajectory optimization");
              sub_20E863570((uint64_t)v918);
            }
            sub_20E863570((uint64_t)v918);
            v71 = v925;
            if (v925)
            {
              v72 = (unint64_t *)&v925->__shared_owners_;
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            v17 = v718;
            v16 = (char *)v717;
            goto LABEL_97;
          }
LABEL_40:
          if (SBYTE7(v743) < 0)
            operator delete((void *)v742);
          goto LABEL_42;
        }
      }
      memmove(v28, v26, v27);
      goto LABEL_29;
    }
  }
LABEL_97:
  v930[0] = &off_24C9EE990;
  v930[1] = v720;
  v930[2] = 0;
  v931 = v930;
  v715 = 0;
  v714 = 0;
  v716 = 0;
  if (v17 != v16)
  {
    if (0x8F5C28F5C28F5C29 * ((v17 - v16) >> 3) > 0x1C71C71C71C71C7)
      sub_20E867F44();
    v74 = (float64x2_t *)operator new(0xA3D70A3D70A3D710 * ((v17 - v16) >> 3));
    v714 = v74;
    v715 = v74;
    v716 = (char *)&v74[0xFA3D70A3D70A3D71 * ((v17 - v16) >> 3)];
    __asm { FMOV            V16.2D, #1.0 }
    v689 = *((_QWORD *)&_Q16 + 1);
    do
    {
      while (1)
      {
        while (1)
        {
          v80 = *((double *)v16 + 1);
          v88.f64[0] = *((float64_t *)v16 + 5);
          v81 = *(int64x2_t *)(v16 + 24);
          v82 = *((int64x2_t *)v16 + 3);
          _Q3 = *(float64x2_t *)(v16 + 72);
          v84 = *((double *)v16 + 23);
          v85 = *((double *)v16 + 24);
          _Q5 = *(float64x2_t *)(v16 + 168);
          v87 = (float64x2_t)vzip1q_s64(v81, v82);
          v88.f64[1] = *((float64_t *)v16 + 8);
          v89 = (float64x2_t)vzip2q_s64(v81, v82);
          v90 = vextq_s8((int8x16_t)v89, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1), 8uLL);
          v91 = vzip1q_s64((int64x2_t)_Q3, (int64x2_t)v89);
          v92 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87, _Q5.f64[0]), v89, _Q5, 1), v88, v84);
          _Q0 = vmulq_f64(_Q3, _Q5);
          _Q5.f64[0] = *((float64_t *)v16 + 22);
          __asm { FMLA            D0, D5, V3.D[1] }
          _Q0.f64[0] = _Q0.f64[0] + *((double *)v16 + 11) * v84;
          *(_QWORD *)&v95.f64[0] = vdupq_laneq_s64(v91, 1).u64[0];
          v94 = vnegq_f64(v92);
          *(_QWORD *)&v95.f64[1] = v90.i64[0];
          v96 = (float64x2_t)*(unint64_t *)&v84;
          v96.f64[0] = *((float64_t *)v16 + 11);
          v97 = (float64x2_t)v90.u64[1];
          v98.f64[1] = *((float64_t *)&_Q16 + 1);
          *(_QWORD *)&v98.f64[0] = *(_OWORD *)&vnegq_f64(_Q0);
          if (v74 >= (float64x2_t *)v716)
            break;
          *v74 = v87;
          v74[1] = (float64x2_t)v91.u64[0];
          v74[2] = v95;
          v74[3] = v97;
          v74[4] = v88;
          v74[5] = v96;
          v74[6] = v94;
          v74[7] = v98;
          v74[8].f64[0] = v80;
          v74[8].f64[1] = v85;
          v715 = v74 + 9;
          v16 += 200;
          v74 += 9;
          if (v16 == v17)
            goto LABEL_116;
        }
        v99 = (float64x2_t *)v714;
        v100 = 0x8E38E38E38E38E39 * (((char *)v74 - (_BYTE *)v714) >> 4) + 1;
        if (v100 > 0x1C71C71C71C71C7)
          sub_20E867F44();
        v691 = v91.u64[0];
        v693 = v97;
        v695 = v95;
        v697 = v98;
        v699 = v96;
        v701 = v94;
        v705 = v87;
        v708 = v88;
        if (0x1C71C71C71C71C72 * ((v716 - (_BYTE *)v714) >> 4) > v100)
          v100 = 0x1C71C71C71C71C72 * ((v716 - (_BYTE *)v714) >> 4);
        if (0x8E38E38E38E38E39 * ((v716 - (_BYTE *)v714) >> 4) >= 0xE38E38E38E38E3)
          v101 = 0x1C71C71C71C71C7;
        else
          v101 = v100;
        if (v101 > 0x1C71C71C71C71C7)
          sub_20E877A38();
        v102 = (char *)operator new(144 * v101);
        v103 = &v102[16 * (((char *)v74 - (_BYTE *)v714) >> 4)];
        *((float64x2_t *)v103 + 2) = v695;
        *((float64x2_t *)v103 + 3) = v693;
        *(float64x2_t *)v103 = v705;
        *((_OWORD *)v103 + 1) = v691;
        *((float64x2_t *)v103 + 4) = v708;
        *((float64x2_t *)v103 + 5) = v699;
        *((float64x2_t *)v103 + 6) = v701;
        *((float64x2_t *)v103 + 7) = v697;
        *((float64_t *)v103 + 16) = v80;
        *((float64_t *)v103 + 17) = v85;
        v104 = (float64x2_t *)(v103 + 144);
        if (v74 != v99)
          break;
        v714 = v103;
        v715 = (float64x2_t *)(v103 + 144);
        v99 = v74;
        v716 = &v102[144 * v101];
LABEL_115:
        operator delete(v99);
        *((_QWORD *)&_Q16 + 1) = v689;
        v715 = v104;
        v16 += 200;
        v74 = v104;
        if (v16 == v17)
          goto LABEL_116;
      }
      do
      {
        v105 = v74[-9];
        v106 = v74[-8];
        v107 = v74[-6];
        *((float64x2_t *)v103 - 7) = v74[-7];
        *((float64x2_t *)v103 - 6) = v107;
        *((float64x2_t *)v103 - 9) = v105;
        *((float64x2_t *)v103 - 8) = v106;
        v108 = v74[-5];
        v109 = v74[-4];
        v110 = v74[-2];
        *((float64x2_t *)v103 - 3) = v74[-3];
        *((float64x2_t *)v103 - 2) = v110;
        *((float64x2_t *)v103 - 5) = v108;
        *((float64x2_t *)v103 - 4) = v109;
        *((float64x2_t *)v103 - 1) = v74[-1];
        v103 -= 144;
        v74 -= 9;
      }
      while (v74 != v99);
      v714 = v103;
      v715 = v104;
      v716 = &v102[144 * v101];
      if (v99)
        goto LABEL_115;
      *((_QWORD *)&_Q16 + 1) = v689;
      v715 = v104;
      v16 += 200;
      v74 = v104;
    }
    while (v16 != v17);
  }
LABEL_116:
  v712 = 0;
  v711 = 0;
  v713 = 0;
  v111 = *(uint64_t **)(v4 + 424);
  v112 = *v111;
  v113 = *(_QWORD *)(*v111 + 64);
  if (!v113)
  {
    v114 = 0;
    v115 = *(_QWORD **)(v112 + 48);
    v116 = v112 + 56;
    if (v115 == (_QWORD *)(v112 + 56))
      goto LABEL_146;
    goto LABEL_121;
  }
  if (v113 > 0x1C71C71C71C71C7)
    sub_20E867F44();
  v114 = (char *)operator new(144 * v113);
  v711 = v114;
  v712 = v114;
  v713 = &v114[144 * v113];
  v115 = *(_QWORD **)(*v111 + 48);
  v116 = *v111 + 56;
  if (v115 != (_QWORD *)v116)
  {
LABEL_121:
    v117 = 1.0;
    do
    {
      if (v115[4] == *(_QWORD *)(v4 + 160))
      {
        v118 = v115[6];
        v123.f64[0] = *(float64_t *)(v118 + 16);
        v119 = *(float64x2_t *)(v118 + 24);
        v120 = *(double *)(v118 + 64);
        _Q2 = *(int64x2_t *)(v118 + 48);
        v122 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v118, (int64x2_t)v119);
        v130 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v118, (int64x2_t)v119);
        v123.f64[1] = *(float64_t *)(v118 + 40);
        v124 = vextq_s8((int8x16_t)v130, (int8x16_t)vdupq_laneq_s64(_Q2, 1), 8uLL);
        v119.f64[0] = *(float64_t *)(v118 + 88);
        v125 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v122, *(double *)(v118 + 72)), v130, *(float64x2_t *)(v118 + 72), 1), v123, v119.f64[0]);
        _D3 = *(_QWORD *)(v118 + 80);
        __asm { FMLA            D5, D3, V2.D[1] }
        v119.f64[0] = _D5 + v120 * v119.f64[0];
        v128 = vnegq_f64(v125);
        v129 = *(unint64_t *)(v118 + 48);
        *(_QWORD *)&v130.f64[1] = v124.i64[0];
        *(_QWORD *)&v131 = *(_OWORD *)&vnegq_f64(v119);
        *((double *)&v131 + 1) = v117;
        v132 = *(_QWORD *)(v118 + 816);
        v133 = *(_QWORD *)(v118 + 824);
        if (v114 >= v713)
        {
          v135 = (char *)v711;
          v136 = 0x8E38E38E38E38E39 * ((v114 - (_BYTE *)v711) >> 4);
          v137 = v136 + 1;
          if (v136 + 1 > 0x1C71C71C71C71C7)
            sub_20E867F44();
          v692 = v124.u64[1];
          v694 = *(unint64_t *)(v118 + 48);
          v696 = v131;
          v698 = v128;
          v700 = v130;
          v702 = v122;
          v706 = *(unint64_t *)&v120;
          v709 = v123;
          if (0x1C71C71C71C71C72 * ((v713 - (_BYTE *)v711) >> 4) > v137)
            v137 = 0x1C71C71C71C71C72 * ((v713 - (_BYTE *)v711) >> 4);
          if (0x8E38E38E38E38E39 * ((v713 - (_BYTE *)v711) >> 4) >= 0xE38E38E38E38E3)
            v138 = 0x1C71C71C71C71C7;
          else
            v138 = v137;
          if (v138 > 0x1C71C71C71C71C7)
            sub_20E877A38();
          v139 = (char *)operator new(144 * v138);
          v140 = &v139[16 * ((v114 - (_BYTE *)v711) >> 4)];
          *((float64x2_t *)v140 + 2) = v700;
          *((_OWORD *)v140 + 3) = v692;
          *(float64x2_t *)v140 = v702;
          *((_OWORD *)v140 + 1) = v694;
          *((float64x2_t *)v140 + 4) = v709;
          *((_OWORD *)v140 + 5) = v706;
          *((float64x2_t *)v140 + 6) = v698;
          *((_OWORD *)v140 + 7) = v696;
          *((_QWORD *)v140 + 16) = v132;
          *((_QWORD *)v140 + 17) = v133;
          v141 = &v139[144 * v136];
          if (v114 != v135)
          {
            do
            {
              v142 = *((_OWORD *)v114 - 9);
              v143 = *((_OWORD *)v114 - 8);
              v144 = *((_OWORD *)v114 - 6);
              *((_OWORD *)v141 - 7) = *((_OWORD *)v114 - 7);
              *((_OWORD *)v141 - 6) = v144;
              *((_OWORD *)v141 - 9) = v142;
              *((_OWORD *)v141 - 8) = v143;
              v145 = *((_OWORD *)v114 - 5);
              v146 = *((_OWORD *)v114 - 4);
              v147 = *((_OWORD *)v114 - 2);
              *((_OWORD *)v141 - 3) = *((_OWORD *)v114 - 3);
              *((_OWORD *)v141 - 2) = v147;
              *((_OWORD *)v141 - 5) = v145;
              *((_OWORD *)v141 - 4) = v146;
              *((_OWORD *)v141 - 1) = *((_OWORD *)v114 - 1);
              v141 -= 144;
              v114 -= 144;
            }
            while (v114 != v135);
            v114 = v135;
          }
          v134 = v140 + 144;
          v711 = v141;
          v712 = v140 + 144;
          v713 = &v139[144 * v138];
          if (v114)
            operator delete(v114);
          v117 = 1.0;
        }
        else
        {
          *(float64x2_t *)v114 = v122;
          *((_OWORD *)v114 + 1) = v129;
          *((float64x2_t *)v114 + 2) = v130;
          *((_OWORD *)v114 + 3) = v124.u64[1];
          *((float64x2_t *)v114 + 4) = v123;
          *((_OWORD *)v114 + 5) = *(unint64_t *)&v120;
          *((float64x2_t *)v114 + 6) = v128;
          *((_OWORD *)v114 + 7) = v131;
          v134 = v114 + 144;
          *((_QWORD *)v114 + 16) = v132;
          *((_QWORD *)v114 + 17) = v133;
        }
        v712 = v134;
        v114 = (char *)v134;
      }
      v148 = (_QWORD *)v115[1];
      if (v148)
      {
        do
        {
          v149 = v148;
          v148 = (_QWORD *)*v148;
        }
        while (v148);
      }
      else
      {
        do
        {
          v149 = (_QWORD *)v115[2];
          _ZF = *v149 == (_QWORD)v115;
          v115 = v149;
        }
        while (!_ZF);
      }
      v115 = v149;
    }
    while (v149 != (_QWORD *)v116);
  }
LABEL_146:
  v150 = *(unsigned __int8 *)(v7 + 136);
  v151 = *(unsigned __int8 *)(v7 + 137);
  v152 = v688;
  *(_OWORD *)v688 = 0u;
  *(_OWORD *)(v688 + 16) = 0u;
  *(_DWORD *)(v688 + 32) = 1065353216;
  sub_210212820((float64x2_t **)&v714, v918);
  v153 = operator new(0x40uLL);
  object = v153;
  *(_QWORD *)&v742 = v688 + 16;
  *((_BYTE *)v153 + 39) = 8;
  strcpy((char *)v153 + 16, "original");
  *(_OWORD *)((char *)v153 + 40) = *(_OWORD *)v918;
  *((_QWORD *)v153 + 7) = rep;
  v918[0] = 0;
  v918[1] = 0;
  rep = 0;
  BYTE8(v742) = 1;
  *v153 = xmmword_210384540;
  if ((sub_20EE7C318(v688, (uint64_t)v153) & 1) == 0)
  {
    v154 = (void *)*((_QWORD *)v153 + 5);
    if (v154)
    {
      *((_QWORD *)v153 + 6) = v154;
      operator delete(v154);
    }
    if (*((char *)v153 + 39) < 0)
      operator delete(*((void **)v153 + 2));
    operator delete(v153);
  }
  if (v918[0])
  {
    v918[1] = v918[0];
    operator delete(v918[0]);
  }
  sub_210212820((float64x2_t **)&v711, v918);
  v155 = operator new(0x40uLL);
  object = v155;
  *(_QWORD *)&v742 = v688 + 16;
  BYTE8(v742) = 0;
  *v155 = 0;
  v155[1] = 0;
  v156 = (char *)operator new(0x20uLL);
  *(_OWORD *)(v155 + 3) = xmmword_2102DB470;
  strcpy(v156, "optimized_map_keyframes.traj");
  *(_OWORD *)(v155 + 5) = *(_OWORD *)v918;
  v155[7] = rep;
  v918[0] = 0;
  v918[1] = 0;
  rep = 0;
  BYTE8(v742) = 1;
  v155[1] = 0x82FA800610BAF41ALL;
  v155[2] = v156;
  if ((sub_20EE7C318(v688, (uint64_t)v155) & 1) == 0)
  {
    v157 = (void **)object;
    if (object)
    {
      if (BYTE8(v742))
      {
        v158 = (void *)*((_QWORD *)object + 5);
        if (v158)
        {
          *((_QWORD *)object + 6) = v158;
          operator delete(v158);
        }
        if (*((char *)v157 + 39) < 0)
          operator delete(v157[2]);
      }
      operator delete(v157);
    }
  }
  if (v918[0])
  {
    v918[1] = v918[0];
    operator delete(v918[0]);
  }
  *(_QWORD *)v731 = 0;
  v730 = 0;
  v732 = 0;
  if (!v150)
    goto LABEL_284;
  v159 = v714;
  *(_QWORD *)v731 = 0;
  v160 = v718 - (_BYTE *)v717;
  v161 = 0x8F5C28F5C28F5C29 * ((v718 - (_BYTE *)v717) >> 3);
  v677 = v151;
  if (v718 == v717)
  {
    v163 = 0;
    v164 = 0;
LABEL_170:
    v172 = 0x8E38E38E38E38E39 * ((v164 - v163) >> 4);
    v173 = 2 * v172;
    if (2 * v172 <= 1)
      v173 = 1;
    if (v172 >= 0xE38E38E38E38E3)
      v174 = 0x1C71C71C71C71C7;
    else
      v174 = v173;
    if (v174 > 0x1C71C71C71C71C7)
      sub_20E877A38();
    v175 = operator new(144 * v174);
    v176 = (char *)&v175[9 * v174];
    v177 = *(float64x2_t *)v159;
    v178 = v159[1];
    v179 = v159[3];
    v175[2] = v159[2];
    v175[3] = v179;
    *v175 = v177;
    v175[1] = v178;
    v180 = v159[4];
    v181 = v159[5];
    v182 = v159[7];
    v175[6] = v159[6];
    v175[7] = v182;
    v175[4] = v180;
    v175[5] = v181;
    v175[8] = v159[8];
    v171 = v175 + 9;
    v730 = v175;
    *(_QWORD *)v731 = v175 + 9;
    v732 = v176;
    if (v163)
      operator delete(v163);
    goto LABEL_178;
  }
  if (v161 > 0x1C71C71C71C71C7)
    sub_20E867F44();
  v162 = operator new(0xA3D70A3D70A3D710 * ((v718 - (_BYTE *)v717) >> 3));
  v163 = v162;
  v164 = (char *)&v162[9 * v161];
  v730 = v162;
  *(_QWORD *)v731 = v162;
  v732 = v164;
  if (v160 < 1)
    goto LABEL_170;
  v165 = *(float64x2_t *)v159;
  v166 = v159[1];
  v167 = v159[3];
  v162[2] = v159[2];
  v162[3] = v167;
  *v162 = v165;
  v162[1] = v166;
  v168 = v159[4];
  v169 = v159[5];
  v170 = v159[7];
  v162[6] = v159[6];
  v162[7] = v170;
  v162[4] = v168;
  v162[5] = v169;
  v162[8] = v159[8];
  v171 = v162 + 9;
LABEL_178:
  *(_QWORD *)v731 = v171;
  if (v161 >= 2 && v690[1] != *v690)
  {
    v681 = v159[5];
    v682 = v159[7];
    v684 = *((float64x2_t *)v159 + 6);
    v685 = *((float64x2_t *)v159 + 4);
    v679 = *((int64x2_t *)v159 + 3);
    v680 = *((int64x2_t *)v159 + 2);
    v678 = *((int64x2_t *)v159 + 1);
    v683 = *(int64x2_t *)v159;
    v667 = vdupq_n_s64(0x7FF8000000000000uLL);
    __asm { FMOV            V0.2D, #1.0 }
    v665 = _Q0;
    v184 = (unsigned __int8 *)&qword_254A6DE78;
    for (i = 1; i != v161; ++i)
    {
      v185 = *v690;
      v186 = (char *)v690[1] - (char *)*v690;
      if (v186)
      {
        v187 = (double *)((char *)v717 + 200 * i);
        v188 = *(v187 - 24);
        v189 = v187[1];
        v190 = 0xAAAAAAAAAAAAAAABLL * (v186 >> 3);
        do
        {
          v191 = &v185[3 * (v190 >> 1)];
          v192 = *v191;
          if (*v191 == v191[1])
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngineUtil.cpp", 116, (uint64_t)"!state_imus.empty()", 19, (uint64_t)"Unable to handle no measurements.", 33, (void (*)(void **))sub_21023DDB0);
            v193 = atomic_load(v184);
            if ((v193 & 1) == 0 && __cxa_guard_acquire((__guard *)v184))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release((__guard *)v184);
            }
            v194 = v184;
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v195 = qword_254A6DE40;
              v196 = qword_254A6DE48;
              while (v195 != v196)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v195)(*(_QWORD *)(v195 + 8), "!state_imus.empty()", 19, "Unable to handle no measurements.", 33);
                v195 += 16;
              }
            }
            v184 = v194;
            v197 = atomic_load(v194);
            if ((v197 & 1) == 0 && __cxa_guard_acquire((__guard *)v194))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release((__guard *)v194);
            }
            if (!byte_254A6DE68)
LABEL_595:
              abort();
            qword_254A6DE58(unk_254A6DE60, "!state_imus.empty()", 19, "Unable to handle no measurements.", 33);
            v192 = *v191;
          }
          if (*v192 >= v188)
            v190 >>= 1;
          else
            v190 += ~(v190 >> 1);
          if (*v192 < v188)
            v185 = v191 + 3;
        }
        while (v190);
        v198 = v690[1];
        if (v185 != v198)
        {
          v199 = v185 - 3;
          if (v185 == *v690)
            v199 = v690[1];
          v200 = **v185 >= v188 ? v199 : v185;
          if (v200 != v198)
          {
            v201 = *v200;
            if (**v200 >= v188)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngineUtil.cpp", 425, (uint64_t)"(*first_state).front().timestamp < base_t", 41, (uint64_t)"Not a lower bound.", 18, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_595;
              }
              v201 = *v200;
            }
            v202 = v200[1];
            if (v201 != v202)
            {
              do
              {
                if (*v201 >= v188)
                  goto LABEL_218;
                v201 += 7;
              }
              while (v201 != v202);
              v201 = v200[1];
            }
LABEL_218:
            v203 = (char *)v717;
            if (v718 != v717)
            {
              v204 = 0x8F5C28F5C28F5C29 * ((v718 - (_BYTE *)v717) >> 3);
              do
              {
                v205 = v204 >> 1;
                v206 = (double *)&v203[200 * (v204 >> 1)];
                v207 = v206[1];
                v208 = (char *)(v206 + 25);
                v204 += ~(v204 >> 1);
                if (v207 < v188)
                  v203 = v208;
                else
                  v204 = v205;
              }
              while (v204);
            }
            if (v203 != v718)
            {
              sub_20F1AFA8C((uint64_t)v918, v687);
              v753 = 0;
              v754 = 0;
              v752 = 0;
              v746[2] = 0;
              memset(v748, 0, sizeof(v748));
              v749 = 0u;
              memset(v750, 0, sizeof(v750));
              memset(v751, 0, 25);
              v759 = 0x3FF0000000000000;
              v755 = xmmword_210384600;
              v756 = *(_OWORD *)algn_210384610;
              v757 = xmmword_210384620;
              v758 = unk_210384630;
              v764 = 0;
              v765 = 0;
              v766 = 0;
              v761 = 0;
              v762 = 0;
              v760 = 0;
              v763 = 0;
              v767 = 2;
              v768 = 0;
              v769 = 0;
              v770 = 0;
              v771 = 0;
              v774 = 0;
              v772 = 0u;
              v773 = 0u;
              v775 = 1065353216;
              v776 = 0;
              v777 = 0u;
              v778 = 0u;
              v779 = 1065353216;
              v780 = 0u;
              v781 = 0u;
              v782 = 1065353216;
              v783 = 0;
              v784 = 0;
              v785 = 0;
              v786 = 0;
              v787 = 0;
              v788 = 0;
              v789 = 0;
              v790 = 0;
              v791 = 0;
              v796 = 0;
              v797 = 0;
              v798 = 0;
              v799 = 0;
              v800 = 0;
              v801 = 0;
              v792 = 0;
              v793 = 0;
              v795 = 0;
              v794 = 0;
              v802 = -1;
              v803 = -1;
              v804 = 0u;
              v805 = 0u;
              v806 = 1065353216;
              v807 = 0;
              v808 = 1;
              v809 = 0xBFF0000000000000;
              v810 = 0;
              v811 = 0;
              v812 = 0;
              v813 = 0;
              v814 = 0;
              v815 = 0;
              v845 = 0;
              v819 = 0u;
              v820 = 0u;
              v818 = 0;
              v816 = 0u;
              v817 = 0u;
              v821 = -1;
              v822 = 0;
              v823 = 0;
              v824 = -1;
              v825 = 0;
              v826 = 0;
              v827 = -1;
              v828 = 0;
              v829 = 0;
              v830 = -1;
              v831 = 0;
              v832 = 0;
              v833 = -1;
              v834 = 0;
              v835 = 0;
              v836 = -1;
              v837 = 0;
              v838 = 0;
              v839 = -1;
              v840 = 0;
              v841 = 0;
              v842 = -1;
              v843 = 0;
              v844 = 0;
              v846 = 0;
              v847 = 0;
              v851 = 0;
              v865 = 0;
              v866 = 0;
              v875 = 0;
              v848 = 0u;
              v849 = 0u;
              memset(v850, 0, sizeof(v850));
              v852 = 0u;
              v853 = 0u;
              v854 = 0u;
              v855 = 0u;
              v856 = 0u;
              v857 = 0u;
              v858 = 0u;
              v859 = 0u;
              v860 = 0u;
              v861 = 0u;
              v862 = 0u;
              v863 = 0u;
              v864 = 0;
              v867 = 0;
              v868 = 0;
              v870 = 0;
              v869 = 0;
              v874 = 0;
              v871 = 0;
              v872 = 0;
              v873 = 0;
              v876 = 65792;
              v877 = 1;
              v878 = 0xBFF0000000000000;
              v879 = 1;
              v880 = 0;
              v881 = 0;
              v882 = 0;
              v883 = 0;
              v884 = 0;
              v885 = 0;
              v886 = 0;
              v887 = 0x7FF8000000000000;
              v888 = v667;
              v889 = v667;
              v890 = v667;
              v891 = xmmword_2102DD520;
              v892 = v665;
              v894 = 0;
              v895 = 0;
              v893 = 0;
              v896 = 0x3FF0000000000000;
              v897 = v665;
              v905 = 0;
              v902 = 0;
              v904 = 0u;
              v899 = 0;
              v901 = 0u;
              v898 = 0u;
              v900 = 0x3FF0000000000000;
              v903 = 0x3FF0000000000000;
              v906 = 0x3FF0000000000000;
              v912 = 0;
              v909 = 0;
              v911 = 0u;
              v908 = 0u;
              v907 = 0x3FF0000000000000;
              v910 = 0x3FF0000000000000;
              v913 = 0x3FF0000000000000;
              v914 = -1;
              v915 = 0;
              v916 = 0;
              v917 = 0;
              v746[3] = *(_QWORD *)&v685.f64[1];
              _D17 = v681;
              v748[0] = v681;
              v747 = vzip1q_s64(v678, v679);
              v210 = *((_OWORD *)v203 + 6);
              v748[3] = *((_QWORD *)v203 + 14);
              *(_OWORD *)&v748[1] = v210;
              v211 = *(_OWORD *)(v203 + 120);
              v750[0] = *((_QWORD *)v203 + 17);
              v749 = v211;
              v212 = *((_OWORD *)v203 + 9);
              v750[3] = *((_QWORD *)v203 + 20);
              *(_QWORD *)&v742 = 0;
              LODWORD(object) = 0;
              WORD4(v742) = 0;
              LODWORD(v743) = 0;
              HIDWORD(v742) = 0;
              *((double *)&v743 + 1) = v188;
              __p = *(void **)&v188;
              _V7.D[1] = v684.f64[1];
              _D16 = v682;
              _D4 = v685.f64[1];
              __asm
              {
                FMLS            D0, D4, V7.D[1]
                FMLS            D0, D17, V16.D[0]
              }
              v746[0] = *(_QWORD *)&v685.f64[0];
              v745 = vzip1q_s64(v683, v680);
              *(int64x2_t *)&v746[1] = vzip2q_s64(v683, v680);
              *(_OWORD *)&v750[1] = v212;
              *(_QWORD *)&v751[1] = _D0;
              v751[0] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v745, vnegq_f64(v684).f64[0]), *(float64x2_t *)&v746[1], v684, 1), (float64x2_t)v747, *(double *)&v682, 0);
              v938[0] = 0uLL;
              sub_20F3E82C0((uint64_t)v735, (uint64_t)&object, (uint64_t)v938);
              sub_20F1AFD9C((uint64_t)v918, (uint64_t)v735);
              v218 = v690[1];
              if (v200 == v218)
                goto LABEL_257;
              v219 = v201 - 7;
              v686 = v690[1];
              v220 = v200[1];
              if (v219 == v220)
              {
                do
                {
                  v200 += 3;
                  if (v200 == v218)
                    goto LABEL_257;
LABEL_233:
                  v219 = *v200;
                  v220 = v200[1];
                }
                while (*v200 == v220);
              }
              v221 = v219 + 7;
              while (1)
              {
                v222 = v221 - 7;
                *(double *)v735 = *(v221 - 7);
                *(_QWORD *)v939 = *(_QWORD *)v735;
                v223 = *(_OWORD *)(v221 - 3);
                *(double *)&v735[24] = *(v221 - 1);
                *(_OWORD *)&v735[8] = v223;
                v224 = *((_OWORD *)v221 - 3);
                *(double *)&v939[24] = *(v221 - 4);
                *(_OWORD *)&v939[8] = v224;
                (*((void (**)(void **, _BYTE *))v918[0] + 3))(v918, v735);
                (*((void (**)(void **, _BYTE *))v918[0] + 2))(v918, v939);
                if (*(v221 - 7) > v189)
                  break;
                v221 += 7;
                if (v222 + 7 == v220)
                {
                  v200 += 3;
                  v218 = v686;
                  if (v200 == v686)
                    goto LABEL_257;
                  goto LABEL_233;
                }
              }
              if (v221 != v220 || v200 + 3 != v686)
              {
                *(_QWORD *)v939 = 0;
                memset(v740, 0, sizeof(v740));
                v739 = 0u;
                v737 = 0u;
                memset(v738, 0, sizeof(v738));
                memset(&v735[40], 0, 24);
                memset(&v735[8], 0, 24);
                *(_QWORD *)v735 = 0x3FF0000000000000;
                *(_QWORD *)&v735[32] = 0x3FF0000000000000;
                v736 = 0x3FF0000000000000;
                if (!sub_20F1AFFE8((uint64_t)v918, (uint64_t)v735, v939, 0, v189))
                {
                  v226.f64[0] = *(float64_t *)&v735[16];
                  v225 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v735, *(int64x2_t *)&v735[24]);
                  v226.f64[1] = *(float64_t *)&v735[40];
                  _Q0 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v735, *(int64x2_t *)&v735[24]);
                  v228 = vextq_s8((int8x16_t)_Q0, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)&v735[48], 1), 8uLL);
                  v229 = vzip1q_s64(*(int64x2_t *)&v735[48], (int64x2_t)_Q0);
                  _D5 = v740[3];
                  _V6.D[1] = v740[2];
                  v232 = vmlsq_laneq_f64(vmulq_n_f64(v225, vnegq_f64(*(float64x2_t *)&v740[1]).f64[0]), _Q0, *(float64x2_t *)&v740[1], 1);
                  _Q0.f64[0] = *(float64_t *)&v735[56];
                  v234.i64[0] = vdupq_laneq_s64(v229, 1).u64[0];
                  __asm { FMLS            D7, D0, V6.D[1] }
                  v234.i64[1] = v228.i64[0];
                  _Q3 = (unint64_t)v736;
                  __asm { FMLS            D7, D2, V5.D[0] }
                  *((_QWORD *)&_Q7 + 1) = 1.0;
                  v237 = 208;
                  if (v203 + 200 == v718)
                    v237 = 8;
                  v238 = 392;
                  if (v203 + 200 == v718)
                    v238 = 192;
                  v239 = vmlsq_lane_f64(v232, v226, *(double *)&v740[3], 0);
                  v240 = *(double *)&v203[v238] + v189 - *(double *)&v203[v237];
                  v241 = *(__int128 **)v731;
                  v684 = v239;
                  v685 = v226;
                  v682 = _Q7;
                  v683 = (int64x2_t)v225;
                  v680 = v234;
                  v681 = (unint64_t)v736;
                  v678 = (int64x2_t)v229.u64[0];
                  v679 = (int64x2_t)v228.u64[1];
                  if (*(_QWORD *)v731 >= (unint64_t)v732)
                  {
                    v243 = (__int128 *)v730;
                    v244 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)v731 - (_QWORD)v730) >> 4);
                    v245 = v244 + 1;
                    if (v244 + 1 > 0x1C71C71C71C71C7)
                      sub_20E867F44();
                    if (0x1C71C71C71C71C72 * ((v732 - (_BYTE *)v730) >> 4) > v245)
                      v245 = 0x1C71C71C71C71C72 * ((v732 - (_BYTE *)v730) >> 4);
                    if (0x8E38E38E38E38E39 * ((v732 - (_BYTE *)v730) >> 4) >= 0xE38E38E38E38E3)
                      v246 = 0x1C71C71C71C71C7;
                    else
                      v246 = v245;
                    if (v246 > 0x1C71C71C71C71C7)
                      sub_20E877A38();
                    v247 = (char *)operator new(144 * v246);
                    v248 = &v247[144 * v244];
                    *((int64x2_t *)v248 + 2) = v680;
                    *((int64x2_t *)v248 + 3) = v679;
                    *(int64x2_t *)v248 = v683;
                    *((int64x2_t *)v248 + 1) = v678;
                    *((float64x2_t *)v248 + 4) = v685;
                    *((_OWORD *)v248 + 5) = v681;
                    *((float64x2_t *)v248 + 6) = v684;
                    *((_OWORD *)v248 + 7) = v682;
                    *((double *)v248 + 16) = v189;
                    *((double *)v248 + 17) = v240;
                    v249 = v248;
                    if (v241 != v243)
                    {
                      do
                      {
                        v250 = *(v241 - 9);
                        v251 = *(v241 - 8);
                        v252 = *(v241 - 6);
                        *((_OWORD *)v249 - 7) = *(v241 - 7);
                        *((_OWORD *)v249 - 6) = v252;
                        *((_OWORD *)v249 - 9) = v250;
                        *((_OWORD *)v249 - 8) = v251;
                        v253 = *(v241 - 5);
                        v254 = *(v241 - 4);
                        v255 = *(v241 - 2);
                        *((_OWORD *)v249 - 3) = *(v241 - 3);
                        *((_OWORD *)v249 - 2) = v255;
                        *((_OWORD *)v249 - 5) = v253;
                        *((_OWORD *)v249 - 4) = v254;
                        *((_OWORD *)v249 - 1) = *(v241 - 1);
                        v249 -= 144;
                        v241 -= 9;
                      }
                      while (v241 != v243);
                      v241 = v243;
                    }
                    v242 = (__int128 *)(v248 + 144);
                    v730 = v249;
                    *(_QWORD *)v731 = v248 + 144;
                    v732 = &v247[144 * v246];
                    if (v241)
                      operator delete(v241);
                  }
                  else
                  {
                    **(_OWORD **)v731 = v225;
                    v241[1] = v229.u64[0];
                    v241[2] = (__int128)v234;
                    v241[3] = v228.u64[1];
                    v241[4] = (__int128)v226;
                    v241[5] = _Q3;
                    v241[6] = (__int128)v239;
                    v241[7] = _Q7;
                    v242 = v241 + 9;
                    *((double *)v241 + 16) = v189;
                    *((double *)v241 + 17) = v240;
                  }
                  *(_QWORD *)v731 = v242;
                }
              }
LABEL_257:
              if (v915)
              {
                v916 = v915;
                operator delete(v915);
              }
              sub_20E91E818((uint64_t)&v848);
              v256 = (std::__shared_weak_count *)*((_QWORD *)&v820 + 1);
              if (*((_QWORD *)&v820 + 1))
              {
                v257 = (unint64_t *)(*((_QWORD *)&v820 + 1) + 8);
                do
                  v258 = __ldaxr(v257);
                while (__stlxr(v258 - 1, v257));
                if (!v258)
                {
                  ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                  std::__shared_weak_count::__release_weak(v256);
                }
              }
              v259 = (std::__shared_weak_count *)*((_QWORD *)&v819 + 1);
              if (*((_QWORD *)&v819 + 1))
              {
                v260 = (unint64_t *)(*((_QWORD *)&v819 + 1) + 8);
                do
                  v261 = __ldaxr(v260);
                while (__stlxr(v261 - 1, v260));
                if (!v261)
                {
                  ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                  std::__shared_weak_count::__release_weak(v259);
                }
              }
              if ((_QWORD)v816)
              {
                *((_QWORD *)&v816 + 1) = v816;
                operator delete((void *)v816);
              }
              sub_20E91EA40((uint64_t)&v743 + 8);
              v918[0] = &off_24C9FA2B0;
              if (v926)
              {
                v927 = v926;
                operator delete(v926);
              }
              v262 = rep;
              rep = 0;
              if (v262)
                (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep))(*(_QWORD *)v262 + 8))(v262);
            }
          }
        }
      }
    }
  }
  sub_210212820((float64x2_t **)&v730, v918);
  v152 = v688;
  v263 = operator new(0x40uLL);
  strcpy((char *)v263 + 16, "odometry.traj");
  object = v263;
  *(_QWORD *)&v742 = v688 + 16;
  *((_BYTE *)v263 + 39) = 13;
  *(_OWORD *)((char *)v263 + 40) = *(_OWORD *)v918;
  *((_QWORD *)v263 + 7) = rep;
  v918[0] = 0;
  v918[1] = 0;
  rep = 0;
  BYTE8(v742) = 1;
  *v263 = xmmword_210384550;
  v151 = v677;
  if ((sub_20EE7C318(v688, (uint64_t)v263) & 1) == 0)
  {
    v264 = (void *)*((_QWORD *)v263 + 5);
    if (v264)
    {
      *((_QWORD *)v263 + 6) = v264;
      operator delete(v264);
    }
    if (*((char *)v263 + 39) < 0)
      operator delete(*((void **)v263 + 2));
    operator delete(v263);
  }
  if (v918[0])
  {
    v918[1] = v918[0];
    operator delete(v918[0]);
  }
  sub_20EE7BA48((uint64_t)&v714, (__int128 *)v730, *(__int128 **)v731, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)v731 - (_QWORD)v730) >> 4));
LABEL_284:
  sub_20F8168A0((float64x2_t **)&v714, (float64x2_t **)&v711);
  sub_210212820((float64x2_t **)&v714, v918);
  v265 = operator new(0x40uLL);
  strcpy((char *)v265 + 16, "optimized.traj");
  object = v265;
  *(_QWORD *)&v742 = v688 + 16;
  *((_BYTE *)v265 + 39) = 14;
  *(_OWORD *)((char *)v265 + 40) = *(_OWORD *)v918;
  *((_QWORD *)v265 + 7) = rep;
  v918[0] = 0;
  v918[1] = 0;
  rep = 0;
  BYTE8(v742) = 1;
  *v265 = xmmword_210384560;
  if ((sub_20EE7C318(v152, (uint64_t)v265) & 1) == 0)
  {
    v266 = (void *)*((_QWORD *)v265 + 5);
    if (v266)
    {
      *((_QWORD *)v265 + 6) = v266;
      operator delete(v266);
    }
    if (*((char *)v265 + 39) < 0)
      operator delete(*((void **)v265 + 2));
    operator delete(v265);
  }
  if (v918[0])
  {
    v918[1] = v918[0];
    operator delete(v918[0]);
  }
  v918[1] = 0;
  v918[0] = 0;
  rep = 0;
  v267 = (char *)v714;
  v268 = v715;
  v269 = (char *)v715 - (_BYTE *)v714;
  if (v715 != v714)
  {
    v270 = 0x8E38E38E38E38E39 * (v269 >> 4);
    if (v270 > 0x1C71C71C71C71C7)
      sub_20E867F44();
    v271 = operator new(v269);
    v272 = 0;
    v273 = (char *)v271;
    v918[0] = v271;
    rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)&v271[18 * v270];
    do
    {
      v274 = &v267[v272];
      v275 = &v271[(unint64_t)v272 / 8];
      v276 = *(_OWORD *)&v267[v272];
      v277 = *(_OWORD *)&v267[v272 + 16];
      v278 = *(_OWORD *)&v267[v272 + 48];
      v275[2] = *(_OWORD *)&v267[v272 + 32];
      v275[3] = v278;
      *v275 = v276;
      v275[1] = v277;
      v279 = *(_OWORD *)&v267[v272 + 64];
      v280 = *(_OWORD *)&v267[v272 + 80];
      v281 = *(_OWORD *)&v267[v272 + 112];
      v275[6] = *(_OWORD *)&v267[v272 + 96];
      v275[7] = v281;
      v275[4] = v279;
      v275[5] = v280;
      v275[8] = *(_OWORD *)&v267[v272 + 128];
      v272 += 144;
    }
    while (v274 + 144 != (char *)v268);
    v282 = (char *)&v271[18 * (v272 / 144)];
    v918[1] = v282;
    if (v272)
    {
      v283 = 144 * (v272 / 144) - 144;
      if (v283 < 0x90)
        goto LABEL_628;
      v284 = v283 / 0x90 + 1;
      v273 = (char *)&v271[18 * (v284 & 0x3FFFFFFFFFFFFFELL)];
      v285 = v271 + 35;
      v286 = v284 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v287 = *v285;
        *(v285 - 19) = *(v285 - 18);
        *(v285 - 1) = v287;
        v285 += 36;
        v286 -= 2;
      }
      while (v286);
      if (v284 != (v284 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_628:
        do
        {
          *((_QWORD *)v273 + 16) = *((_QWORD *)v273 + 17);
          v273 += 144;
        }
        while (v273 != v282);
      }
    }
  }
  sub_210212820((float64x2_t **)v918, v735);
  v288 = (void **)operator new(0x40uLL);
  *(_OWORD *)v288 = xmmword_210384570;
  strcpy((char *)v288 + 16, "optimized_hwtime.traj");
  *(_OWORD *)(v288 + 5) = *(_OWORD *)v735;
  *((_BYTE *)v288 + 39) = 21;
  object = v288;
  *(_QWORD *)&v742 = v688 + 16;
  v288[7] = *(void **)&v735[16];
  memset(v735, 0, 24);
  BYTE8(v742) = 1;
  if ((sub_20EE7C318(v152, (uint64_t)v288) & 1) == 0)
  {
    v289 = v288[5];
    if (v289)
    {
      v288[6] = v289;
      operator delete(v289);
    }
    if (*((char *)v288 + 39) < 0)
      operator delete(v288[2]);
    operator delete(v288);
  }
  if (*(_QWORD *)v735)
  {
    *(_QWORD *)&v735[8] = *(_QWORD *)v735;
    operator delete(*(void **)v735);
  }
  if (v918[0])
  {
    v918[1] = v918[0];
    operator delete(v918[0]);
  }
  if (!v151)
    goto LABEL_580;
  v728 = 0;
  v727 = 0;
  v729 = 0;
  v725 = 0;
  v724 = 0;
  v726 = 0;
  v722 = 0;
  v721 = 0;
  v723 = 0;
  v290 = v714;
  v291 = v715;
  v292 = *((double *)v714 + 16);
  v293 = v715[-1].f64[0];
  if (v292 <= v293)
  {
    v295 = 0;
    v296 = 0;
    v294 = 0;
    while (1)
    {
      while (v294 < v296)
      {
        *v294++ = v292;
        v722 = (uint64_t)v294;
        v292 = v292 + 0.001;
        if (v292 > v293)
          goto LABEL_346;
      }
      v297 = v294 - v295;
      v298 = v297 + 1;
      if ((unint64_t)(v297 + 1) >> 61)
        sub_20E867F44();
      if (((char *)v296 - (char *)v295) >> 2 > v298)
        v298 = ((char *)v296 - (char *)v295) >> 2;
      if ((unint64_t)((char *)v296 - (char *)v295) >= 0x7FFFFFFFFFFFFFF8)
        v299 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v299 = v298;
      if (v299)
      {
        if (v299 >> 61)
          sub_20E877A38();
        v300 = operator new(8 * v299);
        v301 = (double *)&v300[8 * v297];
        *v301 = v292;
        v302 = (uint64_t)(v301 + 1);
        v303 = (char *)v294 - (char *)v295;
        if (v294 == v295)
          goto LABEL_332;
      }
      else
      {
        v300 = 0;
        v301 = (double *)(8 * v297);
        *(double *)(8 * v297) = v292;
        v302 = 8 * v297 + 8;
        v303 = (char *)v294 - (char *)v295;
        if (v294 == v295)
          goto LABEL_332;
      }
      v304 = v303 - 8;
      if (v304 >= 0x168)
      {
        v307 = ((char *)(v294 - 1) - (char *)v295) & 0xFFFFFFFFFFFFFFF8;
        if (&v300[(char *)v294 - (char *)v295 - 8 - v307] > &v300[(char *)v294 - (char *)v295 - 8])
        {
          v305 = v294;
        }
        else if ((double *)((char *)v294 - v307 - 8) > v294 - 1)
        {
          v305 = v294;
        }
        else if ((unint64_t)((char *)v295 - v300) >= 0x20)
        {
          v308 = (v304 >> 3) + 1;
          v309 = 8 * (v308 & 0x3FFFFFFFFFFFFFFCLL);
          v305 = &v294[v309 / 0xFFFFFFFFFFFFFFF8];
          v301 = (double *)((char *)v301 - v309);
          v310 = &v300[8 * v297 - 16];
          v311 = v294 - 2;
          v312 = v308 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v313 = *(_OWORD *)v311;
            *(v310 - 1) = *((_OWORD *)v311 - 1);
            *v310 = v313;
            v310 -= 2;
            v311 -= 4;
            v312 -= 4;
          }
          while (v312);
          if (v308 == (v308 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_332;
        }
        else
        {
          v305 = v294;
        }
      }
      else
      {
        v305 = v294;
      }
      do
      {
        v306 = *((_QWORD *)v305-- - 1);
        *((_QWORD *)v301-- - 1) = v306;
      }
      while (v305 != v295);
LABEL_332:
      v296 = (double *)&v300[8 * v299];
      v721 = v301;
      v722 = v302;
      v723 = v296;
      if (v295)
        operator delete(v295);
      v295 = v301;
      v294 = (double *)v302;
      v722 = v302;
      v292 = v292 + 0.001;
      if (v292 > v293)
      {
LABEL_346:
        v291 = v715;
        v290 = v714;
        goto LABEL_347;
      }
    }
  }
  v294 = 0;
LABEL_347:
  if (0x8E38E38E38E38E39 * (((char *)v291 - v290) >> 4) > 0x8F5C28F5C28F5C29 * ((v718 - (_BYTE *)v717) >> 3)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngineUtil.cpp", 201, (uint64_t)"optimized_trajectory.size() <= inertial_trajectory.size()", 57, (uint64_t)"The inertial states trajectory must have a pose for each optimized trajectory pose.", 83, (void (*)(void **))sub_21023DDB0))
  {
LABEL_596:
    abort();
  }
  v314 = v727;
  v728 = (char *)v727;
  v315 = (double *)v721;
  v316 = (char *)v294 - (_BYTE *)v721;
  v317 = ((char *)v294 - (_BYTE *)v721) >> 3;
  if (0x8E38E38E38E38E39 * ((v729 - (_BYTE *)v727) >> 4) < v317)
  {
    if (v316 > 0xE38E38E38E38E38)
LABEL_604:
      sub_20E867F44();
    v727 = operator new(144 * v317);
    v728 = (char *)v727;
    v729 = (char *)v727 + 144 * v317;
    if (v314)
      operator delete(v314);
  }
  v318 = (char *)v724;
  if (0x8F5C28F5C28F5C29 * ((v726 - (_BYTE *)v724) >> 3) < v317)
  {
    if (v316 > 0xA3D70A3D70A3D70)
LABEL_605:
      sub_20E867F44();
    v319 = v725;
    v320 = (char *)operator new(200 * v317);
    v321 = &v320[200 * ((v319 - v318) / 200)];
    v322 = v321;
    if (v319 != v318)
    {
      v323 = &v320[200 * ((v319 - v318) / 200)];
      do
      {
        *(_OWORD *)(v323 - 200) = *(_OWORD *)(v319 - 200);
        v324 = *(_OWORD *)(v319 - 184);
        v325 = *(_OWORD *)(v319 - 168);
        v326 = *(_OWORD *)(v319 - 152);
        *(_OWORD *)(v323 - 136) = *(_OWORD *)(v319 - 136);
        *(_OWORD *)(v323 - 152) = v326;
        *(_OWORD *)(v323 - 168) = v325;
        *(_OWORD *)(v323 - 184) = v324;
        v327 = *(_OWORD *)(v319 - 120);
        v328 = *(_OWORD *)(v319 - 104);
        v329 = *(_OWORD *)(v319 - 88);
        *(_OWORD *)(v323 - 72) = *(_OWORD *)(v319 - 72);
        *(_OWORD *)(v323 - 88) = v329;
        *(_OWORD *)(v323 - 104) = v328;
        *(_OWORD *)(v323 - 120) = v327;
        v330 = *(_OWORD *)(v319 - 56);
        v331 = *(_OWORD *)(v319 - 40);
        v332 = *(_OWORD *)(v319 - 24);
        v322 = v323 - 200;
        *((_QWORD *)v323 - 1) = *((_QWORD *)v319 - 1);
        *(_OWORD *)(v323 - 24) = v332;
        *(_OWORD *)(v323 - 40) = v331;
        *(_OWORD *)(v323 - 56) = v330;
        v319 -= 200;
        v323 -= 200;
      }
      while (v319 != v318);
    }
    v724 = v322;
    v725 = v321;
    v726 = &v320[200 * v317];
    if (v318)
      operator delete(v318);
  }
  v333 = v688;
  if (v294 != v315)
  {
    v334 = 0;
    if (v317 <= 1)
      v335 = 1;
    else
      v335 = v317;
    v710 = v335;
    v666 = (float64x2_t)vdupq_laneq_s64(xmmword_2103846B0, 1);
    v668 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)algn_210384690, 1);
    v663 = (float64x2_t)vdupq_laneq_s64(xmmword_2103846F0[0], 1);
    v664 = (float64x2_t)vdupq_laneq_s64(xmmword_2103846D0, 1);
    v336 = -1.0;
    v675 = xmmword_210384680;
    v676 = xmmword_2103846C0;
    v671 = *(int64x2_t *)algn_210384690;
    v672 = xmmword_2103846A0;
    v669 = xmmword_2103846D0.i64[0];
    v670 = xmmword_2103846B0;
    v673 = *(double *)xmmword_2103846F0[0].i64;
    v674 = xmmword_2103846E0;
    do
    {
      v347 = *((double *)v721 + v334);
      if (v715 == v714)
        break;
      v348 = 0x8E38E38E38E38E39 * (((char *)v715 - (_BYTE *)v714) >> 4);
      v349 = (float64x2_t *)v714;
      do
      {
        v350 = v348 >> 1;
        v351 = &v349[9 * (v348 >> 1)];
        v352 = v351[8].f64[0];
        v353 = v351 + 9;
        v348 += ~(v348 >> 1);
        if (v352 < v347)
          v349 = v353;
        else
          v348 = v350;
      }
      while (v348);
      if (v349 == v715)
        break;
      f64 = v349[8].f64;
      if (vabdd_f64(v349[8].f64[0], v347) >= 0.000001)
      {
        if (v349 != v714)
        {
          v363 = *v690;
          v364 = (char *)v690[1] - (char *)*v690;
          if (v364)
          {
            v365 = v349[-1].f64[0];
            v366 = 0xAAAAAAAAAAAAAAABLL * (v364 >> 3);
            do
            {
              v368 = &v363[3 * (v366 >> 1)];
              v367 = *v368;
              if (*v368 == v368[1])
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngineUtil.cpp", 116, (uint64_t)"!state_imus.empty()", 19, (uint64_t)"Unable to handle no measurements.", 33, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_596;
                }
                v367 = *v368;
              }
              if (*v367 >= v365)
                v366 >>= 1;
              else
                v366 += ~(v366 >> 1);
              if (*v367 < v365)
                v363 = v368 + 3;
            }
            while (v366);
            v374 = v690[1];
            v333 = v688;
            if (v363 != v374)
            {
              v375 = v363 - 3;
              if (v363 == *v690)
                v375 = v690[1];
              if (**v363 >= v365)
                v363 = v375;
              v929 = v363;
              if (v363 != v374)
              {
                v376 = *v363;
                if (**v363 >= v365)
                {
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngineUtil.cpp", 273, (uint64_t)"(*first_state).front().timestamp < base_t", 41, (uint64_t)"Not a lower bound.", 18, (void (*)(void **))sub_21023DDB0))
                  {
                    goto LABEL_596;
                  }
                  v376 = *v363;
                  v333 = v688;
                }
                v377 = v363[1];
                if (v376 != v377)
                {
                  while (*v376 < v365)
                  {
                    v376 += 7;
                    if (v376 == v377)
                    {
                      v376 = v363[1];
                      break;
                    }
                  }
                }
                v928 = v376 - 7;
                v378 = (char *)v717;
                if (v718 != v717)
                {
                  v379 = 0x8F5C28F5C28F5C29 * ((v718 - (_BYTE *)v717) >> 3);
                  do
                  {
                    v380 = v379 >> 1;
                    v381 = (double *)&v378[200 * (v379 >> 1)];
                    v382 = v381[1];
                    v383 = (char *)(v381 + 25);
                    v379 += ~(v379 >> 1);
                    if (v382 < v365)
                      v378 = v383;
                    else
                      v379 = v380;
                  }
                  while (v379);
                }
                if (v378 != v718 && *((double *)v378 + 1) == v365)
                {
                  sub_20F1AFA8C((uint64_t)v918, v687);
                  *(_QWORD *)&v742 = 0;
                  LODWORD(object) = 0;
                  WORD4(v742) = 0;
                  LODWORD(v743) = 0;
                  HIDWORD(v742) = 0;
                  v753 = 0;
                  v754 = 0;
                  v752 = 0;
                  v745 = 0u;
                  memset(v746, 0, sizeof(v746));
                  v747 = 0u;
                  memset(v748, 0, sizeof(v748));
                  v749 = 0u;
                  memset(v750, 0, sizeof(v750));
                  memset(v751, 0, 25);
                  v759 = 0x3FF0000000000000;
                  v755 = xmmword_210384600;
                  v756 = *(_OWORD *)algn_210384610;
                  v757 = xmmword_210384620;
                  v758 = unk_210384630;
                  v764 = 0;
                  v765 = 0;
                  v766 = 0;
                  v761 = 0;
                  v762 = 0;
                  v760 = 0;
                  v763 = 0;
                  v767 = 2;
                  v768 = 0;
                  v769 = 0;
                  v770 = 0;
                  v771 = 0;
                  v774 = 0;
                  v772 = 0u;
                  v773 = 0u;
                  v775 = 1065353216;
                  v776 = 0;
                  v777 = 0u;
                  v778 = 0u;
                  v779 = 1065353216;
                  v780 = 0u;
                  v781 = 0u;
                  v782 = 1065353216;
                  v783 = 0;
                  v784 = 0;
                  v785 = 0;
                  v786 = 0;
                  v787 = 0;
                  v788 = 0;
                  v789 = 0;
                  v790 = 0;
                  v791 = 0;
                  v796 = 0;
                  v797 = 0;
                  v798 = 0;
                  v799 = 0;
                  v800 = 0;
                  v801 = 0;
                  v792 = 0;
                  v793 = 0;
                  v795 = 0;
                  v794 = 0;
                  v802 = -1;
                  v803 = -1;
                  v804 = 0u;
                  v805 = 0u;
                  v806 = 1065353216;
                  v807 = 0;
                  v808 = 1;
                  v809 = 0xBFF0000000000000;
                  v810 = 0;
                  v811 = 0;
                  v812 = 0;
                  v813 = 0;
                  v814 = 0;
                  v815 = 0;
                  v845 = 0;
                  v819 = 0u;
                  v820 = 0u;
                  v818 = 0;
                  v816 = 0u;
                  v817 = 0u;
                  v821 = -1;
                  v822 = 0;
                  v823 = 0;
                  v824 = -1;
                  v825 = 0;
                  v826 = 0;
                  v827 = -1;
                  v828 = 0;
                  v829 = 0;
                  v830 = -1;
                  v831 = 0;
                  v832 = 0;
                  v833 = -1;
                  v834 = 0;
                  v835 = 0;
                  v836 = -1;
                  v837 = 0;
                  v838 = 0;
                  v839 = -1;
                  v840 = 0;
                  v841 = 0;
                  v842 = -1;
                  v843 = 0;
                  v844 = 0;
                  v846 = 0;
                  v847 = 0;
                  v851 = 0;
                  v865 = 0;
                  v866 = 0;
                  v875 = 0;
                  v848 = 0u;
                  v849 = 0u;
                  memset(v850, 0, sizeof(v850));
                  v852 = 0u;
                  v853 = 0u;
                  v854 = 0u;
                  v855 = 0u;
                  v856 = 0u;
                  v857 = 0u;
                  v858 = 0u;
                  v859 = 0u;
                  v860 = 0u;
                  v861 = 0u;
                  v862 = 0u;
                  v863 = 0u;
                  v864 = 0;
                  v867 = 0;
                  v868 = 0;
                  v870 = 0;
                  v869 = 0;
                  v874 = 0;
                  v871 = 0;
                  v872 = 0;
                  v873 = 0;
                  v876 = 65792;
                  v877 = 1;
                  v878 = 0xBFF0000000000000;
                  v879 = 1;
                  v880 = 0;
                  v881 = 0;
                  v882 = 0;
                  v883 = 0;
                  v884 = 0;
                  v885 = 0;
                  v886 = 0;
                  v887 = 0x7FF8000000000000;
                  v888 = vdupq_n_s64(0x7FF8000000000000uLL);
                  v889 = v888;
                  v890 = v888;
                  v891 = xmmword_2102DD520;
                  __asm { FMOV            V0.2D, #1.0 }
                  v892 = _Q0;
                  v894 = 0;
                  v895 = 0;
                  v893 = 0;
                  v896 = 0x3FF0000000000000;
                  v897 = _Q0;
                  v905 = 0;
                  v902 = 0;
                  v904 = 0u;
                  v899 = 0;
                  v901 = 0u;
                  v898 = 0u;
                  v900 = 0x3FF0000000000000;
                  v903 = 0x3FF0000000000000;
                  v906 = 0x3FF0000000000000;
                  v912 = 0;
                  v909 = 0;
                  v911 = 0u;
                  v908 = 0u;
                  v907 = 0x3FF0000000000000;
                  v910 = 0x3FF0000000000000;
                  v913 = 0x3FF0000000000000;
                  v914 = -1;
                  v915 = 0;
                  v916 = 0;
                  v917 = 0;
                  *((double *)&v743 + 1) = v365;
                  __p = *(void **)&v365;
                  _Q0.f64[0] = v349[-8].f64[0];
                  v385 = (int64x2_t)v349[-9];
                  _Q2 = (int64x2_t)v349[-7];
                  _D3 = v349[-4].f64[0];
                  v388 = v349[-5];
                  _Q0.f64[1] = v349[-6].f64[0];
                  _D5 = v349[-2].f64[0];
                  _Q6 = v349[-3];
                  v746[3] = *(_QWORD *)&v349[-5].f64[1];
                  v747 = (int64x2_t)_Q0;
                  *(float64_t *)v748 = _D3;
                  v391 = *((_QWORD *)v378 + 14);
                  *(_OWORD *)&v748[1] = *((_OWORD *)v378 + 6);
                  v748[3] = v391;
                  v392 = *(_OWORD *)(v378 + 120);
                  v750[0] = *((_QWORD *)v378 + 17);
                  v749 = v392;
                  v393 = *((_OWORD *)v378 + 9);
                  v750[3] = *((_QWORD *)v378 + 20);
                  v394 = (float64x2_t)vzip1q_s64(v385, _Q2);
                  v395 = (float64x2_t)vzip2q_s64(v385, _Q2);
                  v396 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v394, vnegq_f64(_Q6).f64[0]), v395, _Q6, 1), _Q0, _D5, 0);
                  _Q2.i64[0] = *(_QWORD *)&v388.f64[1];
                  __asm
                  {
                    FMLS            D0, D2, V6.D[1]
                    FMLS            D0, D3, V5.D[0]
                  }
                  v745 = (int64x2_t)v394;
                  v746[0] = *(_QWORD *)&v388.f64[0];
                  *(float64x2_t *)&v746[1] = v395;
                  *(_OWORD *)&v750[1] = v393;
                  *(float64_t *)&v751[1] = _Q0.f64[0];
                  v751[0] = v396;
                  v734[1] = 0;
                  v734[0] = 0;
                  sub_20F3E82C0((uint64_t)v735, (uint64_t)&object, (uint64_t)v734);
                  sub_20F1AFD9C((uint64_t)v918, (uint64_t)v735);
                  v397 = v690[1];
                  v398 = v929;
                  if (v929 == v397)
                  {
                    v452 = 8;
                    v333 = v688;
                  }
                  else
                  {
                    v399 = &v928;
                    v333 = v688;
                    v661 = v690[1];
                    do
                    {
LABEL_457:
                      v446 = *v399;
                      v447 = v398[1];
                      if (*v399 != v447)
                      {
                        v448 = v446 + 7;
                        while (1)
                        {
                          v449 = v448 - 7;
                          *(double *)v735 = *(v448 - 7);
                          *(_QWORD *)v939 = *(_QWORD *)v735;
                          v450 = *(_OWORD *)(v448 - 3);
                          *(double *)&v735[24] = *(v448 - 1);
                          *(_OWORD *)&v735[8] = v450;
                          v451 = *((_OWORD *)v448 - 3);
                          *(double *)&v939[24] = *(v448 - 4);
                          *(_OWORD *)&v939[8] = v451;
                          (*((void (**)(void **, _BYTE *))v918[0] + 3))(v918, v735);
                          (*((void (**)(void **, _BYTE *))v918[0] + 2))(v918, v939);
                          if (*(v448 - 7) > v347)
                            break;
                          v448 += 7;
                          if (v449 + 7 == v447)
                          {
                            v398 += 3;
                            v399 = v398;
                            v397 = v661;
                            v333 = v688;
                            if (v398 != v661)
                              goto LABEL_457;
                            goto LABEL_479;
                          }
                        }
                        v928 = v448;
                        if (v448 == v447)
                        {
                          v398 += 3;
                          v397 = v661;
                          v333 = v688;
                          if (v398 == v661)
                            goto LABEL_480;
                          v928 = *v398;
                        }
                        else
                        {
                          v333 = v688;
                        }
                        v929 = v398;
                        v733 = 0;
                        memset(v740, 0, sizeof(v740));
                        v739 = 0u;
                        v737 = 0u;
                        memset(v738, 0, sizeof(v738));
                        memset(&v735[40], 0, 24);
                        memset(&v735[8], 0, 24);
                        *(_QWORD *)v735 = 0x3FF0000000000000;
                        *(_QWORD *)&v735[32] = 0x3FF0000000000000;
                        v736 = 0x3FF0000000000000;
                        if (sub_20F1AFFE8((uint64_t)v918, (uint64_t)v735, &v733, 0, v347))
                        {
                          v452 = 8;
                        }
                        else
                        {
                          v457.f64[0] = *(float64_t *)&v735[16];
                          v453 = *(int64x2_t *)v735;
                          v454 = *(int64x2_t *)&v735[24];
                          _D24 = v736;
                          v456 = *(int64x2_t *)&v735[48];
                          v457.f64[1] = *(float64_t *)&v735[40];
                          _D25 = *(double *)&v740[3];
                          _Q26 = *(float64x2_t *)&v740[1];
                          v662 = v457;
                          if (v336 == v365)
                          {
                            v460 = 1;
                            v461 = (int64x2_t)v675;
                            v462 = (int64x2_t)v676;
                            v463 = v671;
                            v464 = (int64x2_t)v672;
                            _D2 = v669;
                            v466 = v670;
                            _D4 = v673;
                            _Q7 = (float64x2_t)v674;
                          }
                          else if (v349 == v715 || (v469 = v690[1], v398 == v469))
                          {
                            v460 = 0;
                            v463 = *(int64x2_t *)algn_210384690;
                            v461 = (int64x2_t)xmmword_210384680;
                            v466 = xmmword_2103846B0;
                            v464 = (int64x2_t)xmmword_2103846A0;
                            _D2 = xmmword_2103846D0.i64[0];
                            v462 = (int64x2_t)xmmword_2103846C0;
                            _D4 = *(double *)xmmword_2103846F0[0].i64;
                            _Q7 = (float64x2_t)xmmword_2103846E0;
                          }
                          else
                          {
                            v646 = *(int64x2_t *)&v735[24];
                            v649 = *(int64x2_t *)v735;
                            v652 = *(float64x2_t *)&v740[1];
                            v655 = *(int64x2_t *)&v735[48];
                            v657 = *(double *)&v740[3];
                            v659 = v736;
                            v470 = *f64;
                            if (sub_20EE71968(&v929, v469, (uint64_t *)&v928, (uint64_t)v918, *f64))
                            {
                              v938[0].f64[0] = 0.0;
                              memset(&v940[8], 0, 96);
                              memset(&v939[40], 0, 24);
                              memset(&v939[8], 0, 24);
                              *(_QWORD *)v939 = 0x3FF0000000000000;
                              *(_QWORD *)&v939[32] = 0x3FF0000000000000;
                              *(_QWORD *)v940 = 0x3FF0000000000000;
                              v471 = sub_20F1AFFE8((uint64_t)v918, (uint64_t)v939, v938, 0, v470);
                              v460 = v471 == 0;
                              v463 = *(int64x2_t *)algn_210384690;
                              v461 = (int64x2_t)xmmword_210384680;
                              v466 = xmmword_2103846B0;
                              v464 = (int64x2_t)xmmword_2103846A0;
                              _D2 = xmmword_2103846D0.i64[0];
                              v462 = (int64x2_t)xmmword_2103846C0;
                              _D4 = *(double *)xmmword_2103846F0[0].i64;
                              _Q7 = (float64x2_t)xmmword_2103846E0;
                              _D24 = v659;
                              v457 = v662;
                              v456 = v655;
                              _D25 = v657;
                              v453 = v649;
                              _Q26 = v652;
                              v454 = v646;
                              if (!v471)
                              {
                                v472.i64[0] = *(_QWORD *)&v939[16];
                                v473 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v939, *(int64x2_t *)&v939[24]);
                                _Q0 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v939, *(int64x2_t *)&v939[24]);
                                v472.i64[1] = *(_QWORD *)&v939[40];
                                v475 = vextq_s8((int8x16_t)_Q0, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)&v939[48], 1), 8uLL);
                                v476 = vzip1q_s64(*(int64x2_t *)&v939[48], (int64x2_t)_Q0);
                                _D5 = *(_QWORD *)&v940[96];
                                _V6.D[1] = *(_QWORD *)&v940[88];
                                v479 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v473, vnegq_f64(*(float64x2_t *)&v940[80]).f64[0]), _Q0, *(float64x2_t *)&v940[80], 1), (float64x2_t)v472, *(double *)&v940[96], 0);
                                _Q0.f64[0] = *(float64_t *)&v939[56];
                                *(_QWORD *)&v480 = vdupq_laneq_s64(v476, 1).u64[0];
                                __asm { FMLS            D19, D0, V6.D[1] }
                                *((_QWORD *)&v480 + 1) = v475.i64[0];
                                _D7 = *(_QWORD *)v940;
                                v466 = (int64x2_t)v475.u64[1];
                                v463 = (int64x2_t)v476.u64[0];
                                __asm { FMLS            D19, D2, V5.D[0] }
                                v675 = (__int128)v473;
                                v676 = (__int128)v472;
                                v461 = (int64x2_t)v473;
                                v671 = (int64x2_t)v476.u64[0];
                                v672 = v480;
                                v464 = (int64x2_t)v480;
                                v669 = *(_QWORD *)v940;
                                v670 = (int64x2_t)v466.u64[0];
                                v462 = v472;
                                _D2 = *(_QWORD *)v940;
                                v673 = _D19;
                                v674 = (__int128)v479;
                                _Q7 = v479;
                                _D4 = _D19;
                                v336 = v365;
                              }
                            }
                            else
                            {
                              v460 = 0;
                              v463 = *(int64x2_t *)algn_210384690;
                              v461 = (int64x2_t)xmmword_210384680;
                              v466 = xmmword_2103846B0;
                              v464 = (int64x2_t)xmmword_2103846A0;
                              _D2 = xmmword_2103846D0.i64[0];
                              v462 = (int64x2_t)xmmword_2103846C0;
                              _D4 = *(double *)xmmword_2103846F0[0].i64;
                              _Q7 = (float64x2_t)xmmword_2103846E0;
                              _D24 = v659;
                              v457 = v662;
                              v456 = v655;
                              _D25 = v657;
                              v453 = v649;
                              _Q26 = v652;
                              v454 = v646;
                            }
                          }
                          v484 = (float64x2_t)vzip1q_s64(v453, v454);
                          _Q16 = (float64x2_t)vzip2q_s64(v453, v454);
                          v486 = vextq_s8((int8x16_t)_Q16, (int8x16_t)vdupq_laneq_s64(v456, 1), 8uLL);
                          v487 = vzip1q_s64(v456, (int64x2_t)_Q16);
                          v660 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v484, vnegq_f64(_Q26).f64[0]), _Q16, _Q26, 1), v457, _D25, 0);
                          *(_QWORD *)&_Q16.f64[0] = v456.i64[1];
                          __asm { FMLS            D19, D16, V26.D[1] }
                          *(_QWORD *)&_Q16.f64[0] = vdupq_laneq_s64(v487, 1).u64[0];
                          *(_QWORD *)&_Q16.f64[1] = v486.i64[0];
                          __asm { FMLS            D19, D24, V25.D[0] }
                          _Q19.f64[1] = 1.0;
                          v656 = _Q16;
                          v658 = _Q19;
                          v490 = v349[8].f64[1];
                          v491 = (v347 - v365) / (v349[8].f64[0] - v365);
                          v492 = v349[-1].f64[1];
                          if (v460)
                          {
                            v643 = (float64x2_t)v487.u64[0];
                            v644 = (float64x2_t)v486.u64[1];
                            v647 = (float64x2_t)(unint64_t)_D24;
                            v650 = v484;
                            v653 = v491;
                            v493 = v349[1];
                            v495 = v349[2];
                            v494 = v349[3];
                            v497 = v349[4];
                            v496 = v349[5];
                            v499 = v349[6];
                            v498 = v349[7];
                            v500 = (float64x2_t)vzip1q_s64(v461, v464);
                            _Q0 = (float64x2_t)vzip2q_s64(v461, v464);
                            v502 = (float64x2_t)vzip1q_s64(v463, v466);
                            v503 = vextq_s8((int8x16_t)_Q0, (int8x16_t)vdupq_laneq_s64(v462, 1), 8uLL);
                            v504 = vzip1q_s64(v462, (int64x2_t)_Q0);
                            v505 = vmlsq_laneq_f64(vmulq_n_f64(v500, vnegq_f64(_Q7).f64[0]), _Q0, _Q7, 1);
                            _D3 = v462.i64[1];
                            __asm { FMLS            D0, D3, V7.D[1] }
                            *(_QWORD *)&v507.f64[0] = vdupq_laneq_s64(v504, 1).u64[0];
                            v508 = v503.i64[1];
                            *(_QWORD *)&v507.f64[1] = v503.i64[0];
                            __asm { FMLS            D0, D2, V4.D[0] }
                            _Q0.f64[1] = 1.0;
                            v509 = vmlsq_lane_f64(v505, v502, _D4, 0);
                            v510 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v504.u64[0], v349->f64[0]), (float64x2_t)v503.u64[1], *v349, 1), (float64x2_t)_D2, v493.f64[0]), _Q0, v493, 1);
                            *(float64x2_t *)v939 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v500, v349->f64[0]), v507, *v349, 1), v502, v493.f64[0]), v509, v493, 1);
                            *(float64x2_t *)&v939[16] = v510;
                            *(float64x2_t *)&v939[32] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v500, v495.f64[0]), v507, v495, 1), v502, v494.f64[0]), v509, v494, 1);
                            *(float64x2_t *)&v939[48] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v504.u64[0], v495.f64[0]), (float64x2_t)(unint64_t)v508, v495, 1), (float64x2_t)_D2, v494.f64[0]), _Q0, v494, 1);
                            *(float64x2_t *)v940 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v500, v497.f64[0]), v507, v497, 1), v502, v496.f64[0]), v509, v496, 1);
                            *(float64x2_t *)&v940[16] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v504.u64[0], v497.f64[0]), (float64x2_t)(unint64_t)v508, v497, 1), (float64x2_t)_D2, v496.f64[0]), _Q0, v496, 1);
                            *(float64x2_t *)&v940[32] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v500, v499.f64[0]), v507, v499, 1), v502, v498.f64[0]), v509, v498, 1);
                            *(float64x2_t *)&v940[48] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v504.u64[0], v499.f64[0]), (float64x2_t)(unint64_t)v508, v499, 1), (float64x2_t)_D2, v498.f64[0]), _Q0, v498, 1);
                            memset(v938, 0, sizeof(v938));
                            *(_QWORD *)&v936 = v939;
                            *((_QWORD *)&v936 + 1) = 0;
                            *(_QWORD *)&v934 = v938;
                            *((_QWORD *)&v934 + 1) = 0;
                            sub_20E95B988((float64x2_t **)&v936, (double **)&v934);
                            v513.f64[0] = v938[1].f64[0];
                            _Q19 = v938[0];
                            _Q0 = vmulq_f64(_Q19, _Q19);
                            _D1 = v938[0].f64[1];
                            __asm { FMLA            D0, D1, V19.D[1] }
                            v517 = _Q0.f64[0] + v513.f64[0] * v513.f64[0];
                            if (v517 >= 0.0000002635)
                            {
                              v519 = sqrt(v517);
                              v641 = v938[0];
                              v642 = v938[1].f64[0];
                              v520 = __sincos_stret(v519);
                              _Q19 = v641;
                              v513.f64[0] = v642;
                              v511.f64[0] = v520.__sinval / v519;
                              _Q0.f64[0] = 1.0 / v517 * (1.0 - v520.__cosval);
                              v518 = 1.0 / v517 * (1.0 - v520.__sinval / v519);
                            }
                            else
                            {
                              _Q0.f64[0] = 0.5 - v517 * (v517 / -720.0 + 0.0416666667);
                              v518 = 0.166666667 - v517 * (v517 / -5040.0 + 0.00833333333);
                              v511.f64[0] = 1.0 - v517 * v518;
                            }
                            v491 = v653;
                            if (v517 >= 2.775e-15)
                            {
                              v521 = 0.5;
                              v522 = (_Q0.f64[0] * 0.5 - v518) / v511.f64[0];
                              _Q0.f64[0] = (_Q0.f64[0] + v511.f64[0] * -0.5) / (v517 * _Q0.f64[0]);
                              if (v517 <= 9.0)
                                _Q0.f64[0] = v522;
                            }
                            else
                            {
                              _Q0.f64[0] = v517 * 0.0000330687831 + v517 * 0.00138888889 + 0.0833333333;
                              v521 = 0.5;
                            }
                            v523 = (float64x2_t)vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL);
                            v511.f64[0] = *(float64_t *)&v940[48];
                            v524.f64[0] = v523.f64[0];
                            v524.f64[1] = v513.f64[0];
                            v525 = (float64x2_t)vextq_s8(*(int8x16_t *)&v940[32], (int8x16_t)v511, 8uLL);
                            v526 = vsubq_f64(vmulq_laneq_f64(_Q19, *(float64x2_t *)&v940[32], 1), vmulq_f64(v523, *(float64x2_t *)&v940[32]));
                            __asm { FMOV            V7.2D, #-0.5 }
                            v528 = vaddq_f64(v511, vmulq_f64(v526, _Q7));
                            v511.f64[1] = *(float64_t *)&v940[32];
                            v513.f64[1] = _Q19.f64[0];
                            v529 = vsubq_f64(vmulq_f64(v524, v511), vmulq_f64(v513, v525));
                            v530 = (float64x2_t)vextq_s8((int8x16_t)v529, (int8x16_t)v526, 8uLL);
                            v526.f64[1] = v529.f64[0];
                            *(float64x2_t *)((char *)&v938[1] + 8) = vaddq_f64(vaddq_f64(*(float64x2_t *)&v940[32], vmulq_f64(v529, _Q7)), vmulq_n_f64(vsubq_f64(vmulq_f64(v524, v526), vmulq_f64(v513, v530)), _Q0.f64[0]));
                            *(_QWORD *)&v938[2].f64[1] = *(_OWORD *)&vaddq_f64(v528, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q19, v529, 1), vmulq_f64(v523, v529))));
                            _Q0.f64[1] = v938[2].f64[1];
                            _Q25 = (int8x16_t)vmulq_n_f64(v938[0], v653);
                            v532 = (float64x2_t)vextq_s8(_Q25, _Q25, 8uLL);
                            v533 = vmulq_n_f64(v938[2], v653);
                            v534 = vmulq_n_f64(v938[1], v653);
                            v1.f64[0] = v533.f64[1];
                            v512.f64[0] = v534.f64[1];
                            *(_QWORD *)&_Q0.f64[0] = _Q25.i64[1];
                            __asm { FMLA            D3, D0, V25.D[1] }
                            v537 = vmlad_n_f64(_D3, v534.f64[0], v534.f64[0]);
                            if (v537 >= 0.0000002635)
                            {
                              v540 = sqrt(v537);
                              v639 = v534.f64[0];
                              v640 = _Q25.i64[0];
                              v637 = v512;
                              v638 = v533;
                              v636 = v537;
                              v541 = __sincos_stret(v540);
                              cosval = v541.__cosval;
                              v512 = v637;
                              v533 = v638;
                              v534.f64[0] = v639;
                              _Q25.i64[0] = v640;
                              v491 = v653;
                              v538 = v541.__sinval / v540;
                              v528.f64[0] = 1.0 / v636 * (1.0 - v541.__cosval);
                              _Q0.f64[0] = 1.0 / v636 * (1.0 - v541.__sinval / v540);
                            }
                            else
                            {
                              v528.f64[0] = v521 - v537 * (v537 / -720.0 + 0.0416666667);
                              _Q0.f64[0] = 0.166666667 - v537 * (v537 / -5040.0 + 0.00833333333);
                              v538 = 1.0 - v537 * _Q0.f64[0];
                              cosval = 1.0 - v537 * v528.f64[0];
                            }
                            *(_QWORD *)&v542.f64[0] = _Q25.i64[0];
                            v542.f64[1] = v532.f64[0];
                            v543 = *(double *)_Q25.i64 * v528.f64[0];
                            v544 = v532.f64[0] * v528.f64[0];
                            v545 = v534.f64[0] * (v534.f64[0] * v528.f64[0]);
                            v546 = v532.f64[0] * (*(double *)_Q25.i64 * v528.f64[0]);
                            v547 = v534.f64[0] * (*(double *)_Q25.i64 * v528.f64[0]);
                            v548 = v534.f64[0] * (v532.f64[0] * v528.f64[0]);
                            v549 = v546 - v534.f64[0] * v538;
                            v550 = v546 + v534.f64[0] * v538;
                            v551.f64[0] = v532.f64[0];
                            v551.f64[1] = v534.f64[0];
                            v552.f64[0] = v1.f64[0];
                            v552.f64[1] = v512.f64[0];
                            *(_QWORD *)&v534.f64[1] = _Q25.i64[0];
                            v553.f64[0] = v533.f64[0];
                            v553.f64[1] = v1.f64[0];
                            v554 = vsubq_f64(vmulq_f64(v551, v552), vmulq_f64(v534, v553));
                            v553.f64[0] = v512.f64[0];
                            v553.f64[1] = v533.f64[0];
                            v555 = vsubq_f64(vmulq_f64(v542, v533), vmulq_f64(v532, v512));
                            v556 = vmulq_n_f64(v554, v528.f64[0]);
                            v557 = vmulq_f64(v555, v528);
                            v558 = vaddq_f64(v553, v556);
                            v559 = (float64x2_t)vextq_s8((int8x16_t)v554, (int8x16_t)v555, 8uLL);
                            v555.f64[1] = v554.f64[0];
                            v560 = vmulq_f64(v551, v555);
                            v555.f64[0] = *(double *)_Q25.i64 * v543 + cosval;
                            v561 = v532.f64[0] * v544 + cosval;
                            v562 = *(double *)_Q25.i64 * v538;
                            v563 = v532.f64[0] * v538;
                            v564 = vaddq_f64(v558, vmulq_n_f64(vsubq_f64(v560, vmulq_f64(v534, v559)), _Q0.f64[0]));
                            v565 = vmlaq_n_f64(vmulq_n_f64(v650, v555.f64[0]), v656, v550);
                            v566 = vmlaq_n_f64(vmulq_n_f64(v643, v555.f64[0]), v644, v550);
                            v567 = vmlaq_n_f64(vmulq_n_f64(v650, v549), v656, v561);
                            v568 = vmlaq_n_f64(vmulq_n_f64(v643, v549), v644, v561);
                            v569 = v545 + cosval;
                            *(_QWORD *)&v570 = *(_OWORD *)&vaddq_f64(vaddq_f64(v1, v557), vmulq_f64(vsubq_f64(vmulq_laneq_f64(v542, v554, 1), vmulq_f64(v532, v554)), _Q0));
                            v571 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v650, v564.f64[0]), v656, v564, 1), v662, v570);
                            v572 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v643, v564.f64[0]), v644, v564, 1), v647, v570);
                            v573 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v650, v547 + v563), v656, v548 - v562), v662, v569), v664, v660);
                            v651 = vmlaq_f64(vmlaq_n_f64(v566, v647, v547 - v563), v668, v658);
                            v654 = vmlaq_f64(vmlaq_n_f64(v565, v662, v547 - v563), v668, v660);
                            v645 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v643, v547 + v563), v644, v548 - v562), v647, v569), v664, v658);
                            v648 = vmlaq_f64(vmlaq_n_f64(v568, v647, v548 + v562), v666, v658);
                            v656 = vmlaq_f64(vmlaq_n_f64(v567, v662, v548 + v562), v666, v660);
                            v658 = vmlaq_f64(v572, v663, v658);
                            v660 = vmlaq_f64(v571, v663, v660);
                            v662 = v573;
                          }
                          else
                          {
                            v651 = (float64x2_t)v487.u64[0];
                            v654 = v484;
                            v645 = (float64x2_t)(unint64_t)_D24;
                            v648 = (float64x2_t)v486.u64[1];
                          }
                          v574 = v492 + v491 * (v490 - v492);
                          *(_OWORD *)&v939[32] = *(_OWORD *)&v735[32];
                          *(_OWORD *)&v939[48] = *(_OWORD *)&v735[48];
                          *(_QWORD *)v940 = v736;
                          *(_OWORD *)&v939[16] = *(_OWORD *)&v735[16];
                          *(_OWORD *)v939 = *(_OWORD *)v735;
                          v938[0] = v737;
                          *(_QWORD *)&v938[1].f64[0] = v738[0];
                          v937 = v738[3];
                          v936 = *(_OWORD *)&v738[1];
                          v935 = v740[0];
                          v934 = v739;
                          v933 = v740[3];
                          v932 = *(_OWORD *)&v740[1];
                          v575 = v725;
                          if (v725 >= v726)
                          {
                            v579 = (char *)v724;
                            v580 = 0x8F5C28F5C28F5C29 * ((v725 - (_BYTE *)v724) >> 3);
                            v581 = v580 + 1;
                            if (v580 + 1 > 0x147AE147AE147AELL)
                              sub_20E867F44();
                            if (0x1EB851EB851EB852 * ((v726 - (_BYTE *)v724) >> 3) > v581)
                              v581 = 0x1EB851EB851EB852 * ((v726 - (_BYTE *)v724) >> 3);
                            if (0x8F5C28F5C28F5C29 * ((v726 - (_BYTE *)v724) >> 3) >= 0xA3D70A3D70A3D7)
                              v582 = 0x147AE147AE147AELL;
                            else
                              v582 = v581;
                            if (v582)
                            {
                              if (v582 > 0x147AE147AE147AELL)
                                sub_20E877A38();
                              v583 = (char *)operator new(200 * v582);
                            }
                            else
                            {
                              v583 = 0;
                            }
                            v584 = *(_OWORD *)v735;
                            v585 = &v583[200 * v580];
                            *(_OWORD *)(v585 + 40) = *(_OWORD *)&v735[16];
                            v586 = *(_OWORD *)&v735[48];
                            *(_OWORD *)(v585 + 56) = *(_OWORD *)&v735[32];
                            *(_OWORD *)(v585 + 72) = v586;
                            *(_QWORD *)v585 = 0;
                            *((double *)v585 + 1) = v347;
                            *((_QWORD *)v585 + 2) = 0;
                            *((_QWORD *)v585 + 11) = v736;
                            *(_OWORD *)(v585 + 24) = v584;
                            *((float64x2_t *)v585 + 6) = v737;
                            *((_QWORD *)v585 + 14) = v738[0];
                            v587 = *(_OWORD *)&v738[1];
                            *((_QWORD *)v585 + 17) = v738[3];
                            *(_OWORD *)(v585 + 120) = v587;
                            *((_QWORD *)v585 + 20) = v740[0];
                            *((_OWORD *)v585 + 9) = v739;
                            *((_QWORD *)v585 + 23) = v740[3];
                            *(_OWORD *)(v585 + 168) = *(_OWORD *)&v740[1];
                            *((double *)v585 + 24) = v574;
                            v588 = v585;
                            if (v575 == v579)
                            {
                              v333 = v688;
                            }
                            else
                            {
                              v333 = v688;
                              do
                              {
                                *(_OWORD *)(v588 - 200) = *(_OWORD *)(v575 - 200);
                                v589 = *(_OWORD *)(v575 - 184);
                                v590 = *(_OWORD *)(v575 - 168);
                                v591 = *(_OWORD *)(v575 - 152);
                                *(_OWORD *)(v588 - 136) = *(_OWORD *)(v575 - 136);
                                *(_OWORD *)(v588 - 152) = v591;
                                *(_OWORD *)(v588 - 168) = v590;
                                *(_OWORD *)(v588 - 184) = v589;
                                v592 = *(_OWORD *)(v575 - 120);
                                v593 = *(_OWORD *)(v575 - 104);
                                v594 = *(_OWORD *)(v575 - 88);
                                *(_OWORD *)(v588 - 72) = *(_OWORD *)(v575 - 72);
                                *(_OWORD *)(v588 - 88) = v594;
                                *(_OWORD *)(v588 - 104) = v593;
                                *(_OWORD *)(v588 - 120) = v592;
                                v595 = *(_OWORD *)(v575 - 56);
                                v596 = *(_OWORD *)(v575 - 40);
                                v597 = *(_OWORD *)(v575 - 24);
                                *((_QWORD *)v588 - 1) = *((_QWORD *)v575 - 1);
                                *(_OWORD *)(v588 - 24) = v597;
                                *(_OWORD *)(v588 - 40) = v596;
                                *(_OWORD *)(v588 - 56) = v595;
                                v588 -= 200;
                                v575 -= 200;
                              }
                              while (v575 != v579);
                              v575 = v579;
                            }
                            v578 = v585 + 200;
                            v724 = v588;
                            v725 = v585 + 200;
                            v726 = &v583[200 * v582];
                            if (v575)
                              operator delete(v575);
                          }
                          else
                          {
                            *(_QWORD *)v725 = 0;
                            *((double *)v575 + 1) = v347;
                            *((_QWORD *)v575 + 2) = 0;
                            v576 = *(_OWORD *)v939;
                            *(_OWORD *)(v575 + 40) = *(_OWORD *)&v939[16];
                            *(_OWORD *)(v575 + 56) = *(_OWORD *)&v939[32];
                            *(_OWORD *)(v575 + 72) = *(_OWORD *)&v939[48];
                            *((_QWORD *)v575 + 11) = *(_QWORD *)v940;
                            *(_OWORD *)(v575 + 24) = v576;
                            *((float64x2_t *)v575 + 6) = v938[0];
                            *((_QWORD *)v575 + 14) = *(_QWORD *)&v938[1].f64[0];
                            v577 = v936;
                            *((_QWORD *)v575 + 17) = v937;
                            *(_OWORD *)(v575 + 120) = v577;
                            *((_QWORD *)v575 + 20) = v935;
                            *((_OWORD *)v575 + 9) = v934;
                            *((_QWORD *)v575 + 23) = v933;
                            *(_OWORD *)(v575 + 168) = v932;
                            *((double *)v575 + 24) = v574;
                            v578 = v575 + 200;
                          }
                          v725 = v578;
                          v598 = (float64x2_t *)v728;
                          if (v728 >= v729)
                          {
                            v600 = (float64x2_t *)v727;
                            v601 = 0x8E38E38E38E38E39 * ((v728 - (_BYTE *)v727) >> 4);
                            v602 = v601 + 1;
                            if (v601 + 1 > 0x1C71C71C71C71C7)
                              sub_20E867F44();
                            if (0x1C71C71C71C71C72 * ((v729 - (_BYTE *)v727) >> 4) > v602)
                              v602 = 0x1C71C71C71C71C72 * ((v729 - (_BYTE *)v727) >> 4);
                            if (0x8E38E38E38E38E39 * ((v729 - (_BYTE *)v727) >> 4) >= 0xE38E38E38E38E3)
                              v603 = 0x1C71C71C71C71C7;
                            else
                              v603 = v602;
                            if (v603 > 0x1C71C71C71C71C7)
                              sub_20E877A38();
                            v604 = (char *)operator new(144 * v603);
                            v605 = (float64x2_t *)&v604[144 * v601];
                            v605[2] = v656;
                            v605[3] = v648;
                            *v605 = v654;
                            v605[1] = v651;
                            v605[4] = v662;
                            v605[5] = v645;
                            v605[6] = v660;
                            v605[7] = v658;
                            v605[8].f64[0] = v347;
                            v605[8].f64[1] = v574;
                            v606 = v605;
                            if (v598 == v600)
                            {
                              v333 = v688;
                            }
                            else
                            {
                              v333 = v688;
                              do
                              {
                                v607 = v598[-9];
                                v608 = v598[-8];
                                v609 = v598[-6];
                                v606[-7] = v598[-7];
                                v606[-6] = v609;
                                v606[-9] = v607;
                                v606[-8] = v608;
                                v610 = v598[-5];
                                v611 = v598[-4];
                                v612 = v598[-2];
                                v606[-3] = v598[-3];
                                v606[-2] = v612;
                                v606[-5] = v610;
                                v606[-4] = v611;
                                v606[-1] = v598[-1];
                                v606 -= 9;
                                v598 -= 9;
                              }
                              while (v598 != v600);
                              v598 = v600;
                            }
                            v599 = (char *)&v605[9];
                            v727 = v606;
                            v728 = (char *)&v605[9];
                            v729 = &v604[144 * v603];
                            if (v598)
                              operator delete(v598);
                          }
                          else
                          {
                            *(float64x2_t *)v728 = v654;
                            v598[1] = v651;
                            v598[2] = v656;
                            v598[3] = v648;
                            v598[4] = v662;
                            v598[5] = v645;
                            v598[6] = v660;
                            v598[7] = v658;
                            v599 = (char *)&v598[9];
                            v598[8].f64[0] = v347;
                            v598[8].f64[1] = v574;
                          }
                          v452 = 0;
                          v728 = v599;
                        }
                        goto LABEL_531;
                      }
                      v398 += 3;
                      v399 = v398;
                    }
                    while (v398 != v397);
                    v447 = v446;
LABEL_479:
                    v928 = v447;
LABEL_480:
                    v929 = v397;
                    v452 = 8;
                  }
LABEL_531:
                  if (v915)
                  {
                    v916 = v915;
                    operator delete(v915);
                  }
                  sub_20E91E818((uint64_t)&v848);
                  v613 = (std::__shared_weak_count *)*((_QWORD *)&v820 + 1);
                  if (*((_QWORD *)&v820 + 1))
                  {
                    v614 = (unint64_t *)(*((_QWORD *)&v820 + 1) + 8);
                    do
                      v615 = __ldaxr(v614);
                    while (__stlxr(v615 - 1, v614));
                    if (!v615)
                    {
                      ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
                      std::__shared_weak_count::__release_weak(v613);
                    }
                  }
                  v616 = (std::__shared_weak_count *)*((_QWORD *)&v819 + 1);
                  if (*((_QWORD *)&v819 + 1))
                  {
                    v617 = (unint64_t *)(*((_QWORD *)&v819 + 1) + 8);
                    do
                      v618 = __ldaxr(v617);
                    while (__stlxr(v618 - 1, v617));
                    if (!v618)
                    {
                      ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
                      std::__shared_weak_count::__release_weak(v616);
                    }
                  }
                  if ((_QWORD)v816)
                  {
                    *((_QWORD *)&v816 + 1) = v816;
                    operator delete((void *)v816);
                  }
                  sub_20E91EA40((uint64_t)&v743 + 8);
                  v918[0] = &off_24C9FA2B0;
                  if (v926)
                  {
                    v927 = v926;
                    operator delete(v926);
                  }
                  v619 = rep;
                  rep = 0;
                  if (v619)
                    (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep))(*(_QWORD *)v619 + 8))(v619);
                  if ((v452 | 8) != 8)
                    break;
                }
              }
            }
          }
        }
      }
      else
      {
        v355 = v728;
        if (v728 >= v729)
        {
          v369 = v727;
          v370 = 0x8E38E38E38E38E39 * ((v728 - (_BYTE *)v727) >> 4);
          v371 = v370 + 1;
          if (v370 + 1 > 0x1C71C71C71C71C7)
            goto LABEL_604;
          if (0x1C71C71C71C71C72 * ((v729 - (_BYTE *)v727) >> 4) > v371)
            v371 = 0x1C71C71C71C71C72 * ((v729 - (_BYTE *)v727) >> 4);
          if (0x8E38E38E38E38E39 * ((v729 - (_BYTE *)v727) >> 4) >= 0xE38E38E38E38E3)
            v372 = 0x1C71C71C71C71C7;
          else
            v372 = v371;
          if (v372)
          {
            if (v372 > 0x1C71C71C71C71C7)
              goto LABEL_603;
            v373 = (char *)operator new(144 * v372);
          }
          else
          {
            v373 = 0;
          }
          v400 = (float64x2_t *)&v373[144 * v370];
          v401 = *v349;
          v402 = v349[1];
          v403 = v349[3];
          v400[2] = v349[2];
          v400[3] = v403;
          *v400 = v401;
          v400[1] = v402;
          v404 = v349[4];
          v405 = v349[5];
          v406 = v349[7];
          v400[6] = v349[6];
          v400[7] = v406;
          v400[4] = v404;
          v400[5] = v405;
          v400[8] = *(float64x2_t *)f64;
          v407 = v400;
          if (v355 != v369)
          {
            do
            {
              v408 = *((float64x2_t *)v355 - 9);
              v409 = *((float64x2_t *)v355 - 8);
              v410 = *((float64x2_t *)v355 - 6);
              v407[-7] = *((float64x2_t *)v355 - 7);
              v407[-6] = v410;
              v407[-9] = v408;
              v407[-8] = v409;
              v411 = *((float64x2_t *)v355 - 5);
              v412 = *((float64x2_t *)v355 - 4);
              v413 = *((float64x2_t *)v355 - 2);
              v407[-3] = *((float64x2_t *)v355 - 3);
              v407[-2] = v413;
              v407[-5] = v411;
              v407[-4] = v412;
              v407[-1] = *((float64x2_t *)v355 - 1);
              v407 -= 9;
              v355 -= 9;
            }
            while (v355 != v369);
            v355 = v727;
          }
          v362 = (char *)&v400[9];
          v727 = v407;
          v728 = (char *)&v400[9];
          v729 = &v373[144 * v372];
          if (v355)
            operator delete(v355);
        }
        else
        {
          v356 = *v349;
          v357 = v349[1];
          v358 = v349[3];
          *((float64x2_t *)v728 + 2) = v349[2];
          v355[3] = v358;
          *v355 = v356;
          v355[1] = v357;
          v359 = v349[4];
          v360 = v349[5];
          v361 = v349[7];
          v355[6] = v349[6];
          v355[7] = v361;
          v355[4] = v359;
          v355[5] = v360;
          v355[8] = *(_OWORD *)f64;
          v362 = (char *)(v355 + 9);
        }
        v728 = v362;
        v414 = (char *)v717;
        if (v718 != v717)
        {
          v415 = 0x8F5C28F5C28F5C29 * ((v718 - (_BYTE *)v717) >> 3);
          do
          {
            v416 = v415 >> 1;
            v417 = (double *)&v414[200 * (v415 >> 1)];
            v418 = v417[1];
            v419 = (char *)(v417 + 25);
            v415 += ~(v415 >> 1);
            if (v418 < *f64)
              v414 = v419;
            else
              v415 = v416;
          }
          while (v415);
        }
        if (v414 == v718
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngineUtil.cpp", 253, (uint64_t)"pose_with_inertial_state != inertial_trajectory.end()", 53, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_596;
        }
        v420 = v725;
        if (v725 < v726)
        {
          *(_OWORD *)v725 = *(_OWORD *)v414;
          v337 = *((_OWORD *)v414 + 1);
          v338 = *((_OWORD *)v414 + 2);
          v339 = *((_OWORD *)v414 + 4);
          *((_OWORD *)v420 + 3) = *((_OWORD *)v414 + 3);
          *((_OWORD *)v420 + 4) = v339;
          *((_OWORD *)v420 + 1) = v337;
          *((_OWORD *)v420 + 2) = v338;
          v340 = *((_OWORD *)v414 + 5);
          v341 = *((_OWORD *)v414 + 6);
          v342 = *((_OWORD *)v414 + 8);
          *((_OWORD *)v420 + 7) = *((_OWORD *)v414 + 7);
          *((_OWORD *)v420 + 8) = v342;
          *((_OWORD *)v420 + 5) = v340;
          *((_OWORD *)v420 + 6) = v341;
          v343 = *((_OWORD *)v414 + 9);
          v344 = *((_OWORD *)v414 + 10);
          v345 = *((_OWORD *)v414 + 11);
          *((_QWORD *)v420 + 24) = *((_QWORD *)v414 + 24);
          *((_OWORD *)v420 + 10) = v344;
          *((_OWORD *)v420 + 11) = v345;
          *((_OWORD *)v420 + 9) = v343;
          v346 = v420 + 200;
          v333 = v688;
        }
        else
        {
          v421 = (char *)v724;
          v422 = 0x8F5C28F5C28F5C29 * ((v725 - (_BYTE *)v724) >> 3);
          v423 = v422 + 1;
          if (v422 + 1 > 0x147AE147AE147AELL)
            goto LABEL_605;
          if (0x1EB851EB851EB852 * ((v726 - (_BYTE *)v724) >> 3) > v423)
            v423 = 0x1EB851EB851EB852 * ((v726 - (_BYTE *)v724) >> 3);
          if (0x8F5C28F5C28F5C29 * ((v726 - (_BYTE *)v724) >> 3) >= 0xA3D70A3D70A3D7)
            v424 = 0x147AE147AE147AELL;
          else
            v424 = v423;
          if (v424)
          {
            if (v424 > 0x147AE147AE147AELL)
LABEL_603:
              sub_20E877A38();
            v425 = (char *)operator new(200 * v424);
          }
          else
          {
            v425 = 0;
          }
          v426 = &v425[200 * v422];
          *(_OWORD *)v426 = *(_OWORD *)v414;
          v427 = *((_OWORD *)v414 + 1);
          v428 = *((_OWORD *)v414 + 2);
          v429 = *((_OWORD *)v414 + 4);
          *((_OWORD *)v426 + 3) = *((_OWORD *)v414 + 3);
          *((_OWORD *)v426 + 4) = v429;
          *((_OWORD *)v426 + 1) = v427;
          *((_OWORD *)v426 + 2) = v428;
          v430 = *((_OWORD *)v414 + 5);
          v431 = *((_OWORD *)v414 + 6);
          v432 = *((_OWORD *)v414 + 8);
          *((_OWORD *)v426 + 7) = *((_OWORD *)v414 + 7);
          *((_OWORD *)v426 + 8) = v432;
          *((_OWORD *)v426 + 5) = v430;
          *((_OWORD *)v426 + 6) = v431;
          v433 = *((_OWORD *)v414 + 9);
          v434 = *((_OWORD *)v414 + 10);
          v435 = *((_OWORD *)v414 + 11);
          *((_QWORD *)v426 + 24) = *((_QWORD *)v414 + 24);
          *((_OWORD *)v426 + 10) = v434;
          *((_OWORD *)v426 + 11) = v435;
          *((_OWORD *)v426 + 9) = v433;
          v436 = v426;
          if (v420 != v421)
          {
            do
            {
              *(_OWORD *)(v436 - 200) = *(_OWORD *)(v420 - 200);
              v437 = *(_OWORD *)(v420 - 184);
              v438 = *(_OWORD *)(v420 - 168);
              v439 = *(_OWORD *)(v420 - 152);
              *(_OWORD *)(v436 - 136) = *(_OWORD *)(v420 - 136);
              *(_OWORD *)(v436 - 152) = v439;
              *(_OWORD *)(v436 - 168) = v438;
              *(_OWORD *)(v436 - 184) = v437;
              v440 = *(_OWORD *)(v420 - 120);
              v441 = *(_OWORD *)(v420 - 104);
              v442 = *(_OWORD *)(v420 - 88);
              *(_OWORD *)(v436 - 72) = *(_OWORD *)(v420 - 72);
              *(_OWORD *)(v436 - 88) = v442;
              *(_OWORD *)(v436 - 104) = v441;
              *(_OWORD *)(v436 - 120) = v440;
              v443 = *(_OWORD *)(v420 - 56);
              v444 = *(_OWORD *)(v420 - 40);
              v445 = *(_OWORD *)(v420 - 24);
              *((_QWORD *)v436 - 1) = *((_QWORD *)v420 - 1);
              *(_OWORD *)(v436 - 24) = v445;
              *(_OWORD *)(v436 - 40) = v444;
              *(_OWORD *)(v436 - 56) = v443;
              v436 -= 200;
              v420 -= 200;
            }
            while (v420 != v421);
            v420 = v421;
          }
          v346 = v426 + 200;
          v724 = v436;
          v725 = v426 + 200;
          v726 = &v425[200 * v424];
          if (v420)
            operator delete(v420);
          v333 = v688;
        }
        v725 = v346;
      }
      ++v334;
    }
    while (v334 != v710);
  }
  sub_210212820((float64x2_t **)&v727, v918);
  v620 = operator new(0x40uLL);
  object = v620;
  *(_QWORD *)&v742 = v688 + 16;
  *((_BYTE *)v620 + 39) = 19;
  *(_OWORD *)((char *)v620 + 40) = *(_OWORD *)v918;
  *((_QWORD *)v620 + 7) = rep;
  v918[0] = 0;
  v918[1] = 0;
  rep = 0;
  BYTE8(v742) = 1;
  *v620 = xmmword_210384580;
  strcpy((char *)v620 + 16, "optimized_fine.traj");
  if ((sub_20EE7C318(v333, (uint64_t)v620) & 1) == 0)
  {
    v621 = (void *)*((_QWORD *)v620 + 5);
    if (v621)
    {
      *((_QWORD *)v620 + 6) = v621;
      operator delete(v621);
    }
    if (*((char *)v620 + 39) < 0)
      operator delete(*((void **)v620 + 2));
    operator delete(v620);
  }
  if (v918[0])
  {
    v918[1] = v918[0];
    operator delete(v918[0]);
  }
  v622 = v728;
  if (v727 != v728)
  {
    v623 = v728 - (_BYTE *)v727 - 144;
    v624 = (char *)v727;
    if (v623 < 0x90)
      goto LABEL_629;
    v625 = v623 / 0x90 + 1;
    v624 = (char *)v727 + 144 * (v625 & 0x3FFFFFFFFFFFFFELL);
    v626 = (uint64_t *)((char *)v727 + 280);
    v627 = v625 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      v628 = *v626;
      *(v626 - 19) = *(v626 - 18);
      *(v626 - 1) = v628;
      v626 += 36;
      v627 -= 2;
    }
    while (v627);
    if (v625 != (v625 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_629:
      do
      {
        *((_QWORD *)v624 + 16) = *((_QWORD *)v624 + 17);
        v624 += 144;
      }
      while (v624 != v622);
    }
  }
  sub_210212820((float64x2_t **)&v727, v918);
  v629 = operator new(0x40uLL);
  object = v629;
  *(_QWORD *)&v742 = v688 + 16;
  BYTE8(v742) = 0;
  *v629 = 0;
  v629[1] = 0;
  v630 = (char *)operator new(0x20uLL);
  *(_OWORD *)(v629 + 3) = xmmword_2102DB480;
  strcpy(v630, "optimized_fine_hwtime.traj");
  *(_OWORD *)(v629 + 5) = *(_OWORD *)v918;
  v629[7] = rep;
  v918[0] = 0;
  v918[1] = 0;
  rep = 0;
  BYTE8(v742) = 1;
  v629[1] = 0x5FE5D7B61D2833B6;
  v629[2] = v630;
  if ((sub_20EE7C318(v333, (uint64_t)v629) & 1) == 0)
  {
    v631 = (void **)object;
    if (object)
    {
      if (BYTE8(v742))
      {
        v632 = (void *)*((_QWORD *)object + 5);
        if (v632)
        {
          *((_QWORD *)object + 6) = v632;
          operator delete(v632);
        }
        if (*((char *)v631 + 39) < 0)
          operator delete(v631[2]);
      }
      operator delete(v631);
    }
  }
  if (v918[0])
  {
    v918[1] = v918[0];
    operator delete(v918[0]);
  }
  if (v721)
    operator delete(v721);
  if (v724)
  {
    v725 = (char *)v724;
    operator delete(v724);
  }
  if (v727)
  {
    v728 = (char *)v727;
    operator delete(v727);
  }
LABEL_580:
  if (v730)
  {
    *(_QWORD *)v731 = v730;
    operator delete(v730);
  }
  if (v711)
  {
    v712 = v711;
    operator delete(v711);
  }
  if (v714)
  {
    v715 = (float64x2_t *)v714;
    operator delete(v714);
  }
  if (!v931)
    sub_20E86D37C();
  (*(void (**)(_QWORD *))(*v931 + 48))(v931);
  v634 = v931;
  if (v931 == v930)
  {
    v635 = 4;
    v634 = v930;
  }
  else
  {
    if (!v931)
      goto LABEL_592;
    v635 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v634 + 8 * v635))(v634, v633);
LABEL_592:
  if (v717)
    operator delete(v717);
}

void sub_20EE78A1C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x938]) && SLOBYTE(STACK[0x937]) < 0)
    operator delete((void *)STACK[0x920]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x1E90]);
  if (STACK[0x440])
    operator delete((void *)STACK[0x440]);
  _Unwind_Resume(a1);
}

void sub_20EE78E04(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  size_t v20;
  const char *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  void *v26;
  unint64_t v27;
  const char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  size_t v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[3];
  int v78;
  const char *v79;
  int v80;
  const char *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  void *object;
  void *v86[2];
  __int128 v87;
  void *__p[2];
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;

  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v4)
  {
    v6 = *(_QWORD **)a2;
    goto LABEL_22;
  }
  v6 = *(_QWORD **)(a2 + 8);
  while (1)
  {
    if (*v3)
    {
      object = *(void **)(*v3 + 160);
      v7 = *(_QWORD *)(a1 + 24);
      if (!v7)
LABEL_126:
        sub_20E86D37C();
      if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v7 + 48))(v7, &object) & 1) != 0)
        break;
    }
    v3 += 2;
    if (v3 == v4)
      goto LABEL_22;
  }
  if (v3 == v4)
  {
LABEL_22:
    if (v6 == *(_QWORD **)(a2 + 8))
      return;
LABEL_23:
    sub_20EE74410(&v84);
    if (**(int **)(v84 + 56) > 5
      || ((v16 = *(unsigned __int8 *)(v84 + 72), v17 = sub_20E8C31DC(v84, "OSLogSurrogateAppender", 1, 0), !v16)
        ? (v18 = v17 == 0)
        : (v18 = 0),
          v18))
    {
LABEL_113:
      v71 = *(_QWORD **)(a2 + 8);
      if (v6 != v71)
      {
        while (v71 != v6)
        {
          v72 = (std::__shared_weak_count *)*(v71 - 1);
          if (v72)
          {
            p_shared_owners = (unint64_t *)&v72->__shared_owners_;
            do
              v74 = __ldaxr(p_shared_owners);
            while (__stlxr(v74 - 1, p_shared_owners));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v71 -= 2;
        }
        *(_QWORD *)(a2 + 8) = v6;
      }
      return;
    }
    v19 = v17;
    v77[0] = &v84;
    v77[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v77[2] = std::chrono::system_clock::now().__d_.__rep_;
    v78 = 5;
    v79 = "unknown file";
    v80 = 862;
    v82 = 0;
    v83 = 0;
    v81 = "unknown function";
    v76 = v84;
    if (*(char *)(v84 + 39) < 0)
    {
      v21 = *(const char **)(v84 + 16);
      v20 = *(_QWORD *)(v84 + 24);
      v75 = v84 + 16;
      v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v23 & 1) != 0)
        goto LABEL_32;
    }
    else
    {
      v20 = *(unsigned __int8 *)(v84 + 39);
      v21 = (const char *)(v84 + 16);
      v75 = v84 + 16;
      v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v22 & 1) != 0)
        goto LABEL_32;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v87 && SHIBYTE(v86[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_32:
    if (byte_254A4A4F8[23] >= 0)
      v24 = byte_254A4A4F8;
    else
      v24 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v25 = byte_254A4A4F8[23];
    else
      v25 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v24, v21);
    v26 = v86;
    if (v25 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v25 >= 0x17)
    {
      v27 = v19;
      v28 = v21;
      v29 = v16;
      v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v30 = v25 | 7;
      v31 = v30 + 1;
      v26 = operator new(v30 + 1);
      v86[1] = (void *)v25;
      *(_QWORD *)&v87 = v31 | 0x8000000000000000;
      v86[0] = v26;
      v16 = v29;
      v21 = v28;
      v19 = v27;
    }
    else
    {
      BYTE7(v87) = v25;
      if (!v25)
      {
LABEL_46:
        *((_BYTE *)v26 + v25) = 0;
        BYTE8(v87) = 1;
        v32 = __p;
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v20 >= 0x17)
        {
          v33 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v33 = v20 | 7;
          v34 = v33 + 1;
          v32 = operator new(v33 + 1);
          __p[1] = (void *)v20;
          v89 = v34 | 0x8000000000000000;
          __p[0] = v32;
        }
        else
        {
          HIBYTE(v89) = v20;
          if (!v20)
            goto LABEL_54;
        }
        memmove(v32, v21, v20);
LABEL_54:
        *((_BYTE *)v32 + v20) = 0;
        v90 = 1;
        v35 = object;
        if (SHIBYTE(v89) < 0)
          operator delete(__p[0]);
        if (BYTE8(v87) && SBYTE7(v87) < 0)
          operator delete(v86[0]);
        if (object)
          os_release(object);
        if (v19 && *(_QWORD *)(v19 + 24))
        {
          v36 = _os_log_pack_size();
          v37 = (std::__shared_weak_count_vtbl *)operator new(v36, (std::align_val_t)8uLL);
          v38 = (std::__shared_weak_count *)operator new();
          v39 = v38;
          v38->__shared_owners_ = 0;
          v40 = (unint64_t *)&v38->__shared_owners_;
          v38->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v38->__shared_weak_owners_ = 0;
          v38[1].__vftable = v37;
          object = v37;
          v86[0] = v37;
          v86[1] = v38;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
          v87 = 0uLL;
          __p[0] = 0;
          do
            v42 = __ldaxr(v40);
          while (__stlxr(v42 - 1, v40));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v39);
          }
          v43 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v44 = operator new();
          v45 = *(unsigned __int8 *)(v76 + 39);
          v46 = v75;
          if ((v45 & 0x80u) != 0)
          {
            v46 = *(_QWORD *)(v76 + 16);
            v45 = *(_QWORD *)(v76 + 24);
          }
          *(_QWORD *)v44 = v43;
          *(_OWORD *)(v44 + 8) = *(_OWORD *)v86;
          v86[0] = 0;
          v86[1] = 0;
          *(_OWORD *)(v44 + 24) = v87;
          v87 = 0uLL;
          *(_QWORD *)(v44 + 40) = v46;
          *(_QWORD *)(v44 + 48) = v45;
          *(_BYTE *)(v44 + 56) = 16;
          v91 = 0;
          v92 = v44;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), &v92);
          v47 = v92;
          v92 = 0;
          if (v47)
          {
            v48 = *(std::__shared_weak_count **)(v47 + 32);
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = *(std::__shared_weak_count **)(v47 + 16);
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
            v54 = v91;
            v91 = 0;
            if (v54)
            {
              v55 = *(std::__shared_weak_count **)(v54 + 32);
              if (v55)
              {
                v56 = (unint64_t *)&v55->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              v58 = *(std::__shared_weak_count **)(v54 + 16);
              if (v58)
              {
                v59 = (unint64_t *)&v58->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              MEMORY[0x212BC6398](v54, 0x10F0C40B62ED6C6);
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
          if (*((_QWORD *)&v87 + 1))
          {
            v62 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v64 = (std::__shared_weak_count *)v86[1];
          if (v86[1])
          {
            v65 = (unint64_t *)((char *)v86[1] + 8);
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
        }
        else
        {
          os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v67 = (void *)_os_log_send_and_compose_impl();
          if (v67)
            free(v67);
        }
        if (v16)
        {
          sub_20E8C003C((uint64_t)v77, "Loaded map have the same session as the new session in mapping,                        are you running with fixed session mode ? ");
          sub_20E863570((uint64_t)v77);
        }
        sub_20E863570((uint64_t)v77);
        v68 = v83;
        if (v83)
        {
          v69 = (unint64_t *)&v83->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        goto LABEL_113;
      }
    }
    memmove(v26, v24, v25);
    goto LABEL_46;
  }
  v8 = v3 + 2;
  if (v3 + 2 != v4)
  {
    v6 = v3;
    while (1)
    {
      v9 = v8;
      v10 = *v8;
      if (!v10)
        goto LABEL_16;
      object = *(void **)(v10 + 160);
      v11 = *(_QWORD *)(a1 + 24);
      if (!v11)
        goto LABEL_126;
      if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, &object) & 1) == 0)
        break;
LABEL_11:
      v8 = v9 + 2;
      v3 = v9;
      if (v9 + 2 == v4)
        goto LABEL_22;
    }
    v10 = *v9;
LABEL_16:
    v12 = v3[3];
    *v9 = 0;
    v9[1] = 0;
    v13 = (std::__shared_weak_count *)v6[1];
    *v6 = v10;
    v6[1] = v12;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v6 += 2;
    goto LABEL_11;
  }
  v6 = v3;
  if (v3 != *(_QWORD **)(a2 + 8))
    goto LABEL_23;
}

void sub_20EE796BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EE796FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v5 - 96));
  sub_20E86E8C4((uint64_t *)(v5 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE79730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v5, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE7975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE79778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE7978C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE797D0@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  sub_20F44D624(a1, (uint64_t **)&v9);
  v5 = operator new();
  *(_OWORD *)v5 = v9;
  *(_QWORD *)(v5 + 16) = v10;
  *a3 = v5;
  v6 = *a2;
  v11[0] = &off_24C9EEA10;
  v11[1] = v6;
  v12 = v11;
  sub_20EE78E04((uint64_t)v11, v5);
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_20EE798A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  void ***v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == &a12)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  sub_20EE56630(v15);
  _Unwind_Resume(a1);
}

void sub_20EE798EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E8C3144(&a9);
  _Unwind_Resume(a1);
}

void sub_20EE79904(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  float64x2_t v16[6];

  v5 = *a1;
  v4 = a1[1];
  v6 = (v4 - *a1) >> 6;
  LODWORD(v16[0].f64[0]) = 0;
  v8 = a1[9];
  v9 = a1[10];
  v7 = (uint64_t)(a1 + 9);
  v10 = (v9 - v8) >> 2;
  if (v6 <= v10)
  {
    if (v6 < v10)
      a1[10] = v8 + 4 * v6;
  }
  else
  {
    sub_20EDB9D10(v7, v6 - v10, (const float *)v16);
  }
  if (v4 != v5)
  {
    v11 = 0;
    v12 = 1;
    do
    {
      v13 = HIWORD(*(_DWORD *)(*a1 + (v11 << 6) + 16));
      v14 = (unsigned __int16)*(_DWORD *)(*a1 + (v11 << 6) + 16);
      memset(v16, 0, sizeof(v16));
      sub_20F3E7B6C(a2, v13, v14, v16);
      v15 = atan2(v16[3].f64[0], v16[1].f64[0]) + 1.57079633;
      *(float *)(a1[9] + 4 * v11) = v15;
      v11 = v12++;
    }
    while (v6 > v11);
  }
}

uint64_t sub_20EE799F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, _OWORD *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v23;
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t result;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int16 v63;
  char v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  __int128 v69;

  sub_20E91E37C(a9);
  sub_20EB0E7E8(a9 + 32, a1);
  v23 = *(void **)(a9 + 3840);
  if (v23)
  {
    *(_QWORD *)(a9 + 3848) = v23;
    operator delete(v23);
    *(_QWORD *)(a9 + 3840) = 0;
    *(_QWORD *)(a9 + 3848) = 0;
    *(_QWORD *)(a9 + 3856) = 0;
  }
  v24 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a9 + 3856) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a9 + 3840) = *(_OWORD *)a3;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a9 + 3864) = v24;
  *(_BYTE *)(a9 + 3872) = *(_BYTE *)(a3 + 32);
  v25 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  v26 = *(std::__shared_weak_count **)(a9 + 3888);
  *(_OWORD *)(a9 + 3880) = v25;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v30 = *(std::__shared_weak_count **)(a9 + 3904);
  *(_OWORD *)(a9 + 3896) = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_OWORD *)(a9 + 4099) = *(_OWORD *)(a3 + 259);
  *(_OWORD *)(a9 + 4056) = *(_OWORD *)(a3 + 216);
  *(_OWORD *)(a9 + 4072) = *(_OWORD *)(a3 + 232);
  *(_OWORD *)(a9 + 4088) = *(_OWORD *)(a3 + 248);
  *(_OWORD *)(a9 + 3992) = *(_OWORD *)(a3 + 152);
  *(_OWORD *)(a9 + 4008) = *(_OWORD *)(a3 + 168);
  *(_OWORD *)(a9 + 4024) = *(_OWORD *)(a3 + 184);
  *(_OWORD *)(a9 + 4040) = *(_OWORD *)(a3 + 200);
  *(_OWORD *)(a9 + 3928) = *(_OWORD *)(a3 + 88);
  *(_OWORD *)(a9 + 3944) = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(a9 + 3960) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(a9 + 3976) = *(_OWORD *)(a3 + 136);
  *(_OWORD *)(a9 + 3912) = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a9 + 3864) = *(_QWORD *)a12;
  *(_BYTE *)(a9 + 3872) = *(_BYTE *)(a12 + 8);
  v34 = *(_QWORD *)(a12 + 16);
  v33 = *(_QWORD *)(a12 + 24);
  if (v33)
  {
    v35 = (unint64_t *)(v33 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  *(_QWORD *)(a9 + 3880) = v34;
  v37 = *(std::__shared_weak_count **)(a9 + 3888);
  *(_QWORD *)(a9 + 3888) = v33;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v41 = *(_QWORD *)(a12 + 32);
  v40 = *(_QWORD *)(a12 + 40);
  if (v40)
  {
    v42 = (unint64_t *)(v40 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  *(_QWORD *)(a9 + 3896) = v41;
  v44 = *(std::__shared_weak_count **)(a9 + 3904);
  *(_QWORD *)(a9 + 3904) = v40;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = *(_OWORD *)(a12 + 224);
  *(_OWORD *)(a9 + 4072) = *(_OWORD *)(a12 + 208);
  *(_OWORD *)(a9 + 4088) = v47;
  *(_OWORD *)(a9 + 4099) = *(_OWORD *)(a12 + 235);
  v48 = *(_OWORD *)(a12 + 160);
  *(_OWORD *)(a9 + 4008) = *(_OWORD *)(a12 + 144);
  *(_OWORD *)(a9 + 4024) = v48;
  v49 = *(_OWORD *)(a12 + 192);
  *(_OWORD *)(a9 + 4040) = *(_OWORD *)(a12 + 176);
  *(_OWORD *)(a9 + 4056) = v49;
  v50 = *(_OWORD *)(a12 + 96);
  *(_OWORD *)(a9 + 3944) = *(_OWORD *)(a12 + 80);
  *(_OWORD *)(a9 + 3960) = v50;
  v51 = *(_OWORD *)(a12 + 128);
  *(_OWORD *)(a9 + 3976) = *(_OWORD *)(a12 + 112);
  *(_OWORD *)(a9 + 3992) = v51;
  v52 = *(_OWORD *)(a12 + 64);
  *(_OWORD *)(a9 + 3912) = *(_OWORD *)(a12 + 48);
  *(_OWORD *)(a9 + 3928) = v52;
  result = sub_20EB0E45C(a9 + 4120, a2);
  *(_BYTE *)(a9 + 16) = *(_BYTE *)(a4 + 88);
  *(_BYTE *)(a9 + 17) = *(_BYTE *)(a4 + 90);
  *(_QWORD *)(a9 + 20) = *(_QWORD *)(a4 + 80);
  v54 = *(_OWORD *)(a14 + 16);
  *(_OWORD *)(a9 + 5144) = *(_OWORD *)a14;
  *(_OWORD *)(a9 + 5160) = v54;
  *(_OWORD *)(a9 + 5176) = *(_OWORD *)(a14 + 32);
  *(_QWORD *)(a9 + 5192) = *(_QWORD *)(a14 + 48);
  *(_QWORD *)(a9 + 5200) = *(_QWORD *)(a14 + 56);
  v55 = *(_OWORD *)(a14 + 64);
  *(_QWORD *)(a9 + 5224) = *(_QWORD *)(a14 + 80);
  *(_OWORD *)(a9 + 5208) = v55;
  *(_OWORD *)(a9 + 5232) = *(_OWORD *)(a14 + 88);
  *(_QWORD *)(a9 + 5248) = *(_QWORD *)(a14 + 104);
  *(_OWORD *)(a9 + 5256) = *(_OWORD *)(a14 + 112);
  *(_QWORD *)(a9 + 5272) = *(_QWORD *)(a14 + 128);
  *(_OWORD *)(a9 + 5280) = *(_OWORD *)(a14 + 136);
  *(_QWORD *)(a9 + 5296) = *(_QWORD *)(a14 + 152);
  v56 = *(_OWORD *)(a14 + 160);
  v57 = *(_OWORD *)(a14 + 176);
  v58 = *(_OWORD *)(a14 + 192);
  v59 = *(_OWORD *)(a14 + 208);
  *(_QWORD *)(a9 + 5368) = *(_QWORD *)(a14 + 224);
  *(_OWORD *)(a9 + 5336) = v58;
  *(_OWORD *)(a9 + 5352) = v59;
  *(_OWORD *)(a9 + 5304) = v56;
  *(_OWORD *)(a9 + 5320) = v57;
  *(_OWORD *)(a9 + 5376) = *(_OWORD *)(a14 + 232);
  v60 = *(_OWORD *)(a14 + 248);
  v61 = *(_OWORD *)(a14 + 264);
  v62 = *(_OWORD *)(a14 + 280);
  *(_QWORD *)(a9 + 5440) = *(_QWORD *)(a14 + 296);
  *(_OWORD *)(a9 + 5424) = v62;
  *(_OWORD *)(a9 + 5408) = v61;
  *(_OWORD *)(a9 + 5392) = v60;
  *(_OWORD *)a9 = *a8;
  v63 = *(_WORD *)(a6 + 16);
  *(_OWORD *)(a9 + 5032) = *(_OWORD *)a6;
  *(_WORD *)(a9 + 5048) = v63;
  if (*(_BYTE *)(a9 + 4489))
  {
    v64 = 1;
    v65 = 1;
    v66 = (uint64_t *)(a9 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a5 + 16))
      goto LABEL_35;
    v64 = 0;
    v66 = (uint64_t *)(a5 + 8);
    v65 = *(_BYTE *)(a5 + 25);
  }
  v67 = *v66;
  v68 = *(unsigned __int8 *)(a9 + 3832);
  *(_QWORD *)(a9 + 3808) = v67;
  *(_BYTE *)(a9 + 3816) = v64;
  *(_BYTE *)(a9 + 3817) = v65;
  *(_QWORD *)(a9 + 3820) = *(_QWORD *)(a9 + 4120);
  *(_BYTE *)(a9 + 3828) = 0;
  if (!v68)
    *(_BYTE *)(a9 + 3832) = 1;
LABEL_35:
  v69 = a7[1];
  *(_OWORD *)(a9 + 5056) = *a7;
  *(_OWORD *)(a9 + 5072) = v69;
  *(_OWORD *)(a9 + 5081) = *(_OWORD *)((char *)a7 + 25);
  if (*(_BYTE *)(a10 + 16))
  {
    *(_QWORD *)(a9 + 5112) = *(_QWORD *)a10;
    *(_BYTE *)(a9 + 5120) = 1;
  }
  if (*(_BYTE *)(a11 + 16))
  {
    *(_QWORD *)(a9 + 5128) = *(_QWORD *)a11;
    *(_BYTE *)(a9 + 5136) = 1;
  }
  *(_QWORD *)(a9 + 5448) = a13;
  return result;
}

void sub_20EE79E74(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20EE581EC(v1);
  _Unwind_Resume(a1);
}

void sub_20EE79E88(_QWORD *a1, int a2, char a3, uint64_t *a4, char **a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t i;
  char *v11;
  char *j;

  if (!a2 || (a3 & 1) != 0)
  {
    v9 = *a4;
    for (i = a4[1]; i != v9; i -= 48)
    {
      if (*(_BYTE *)(i - 8) && *(char *)(i - 9) < 0)
        operator delete(*(void **)(i - 32));
    }
    a4[1] = v9;
    v11 = *a5;
    for (j = a5[1]; j != v11; j -= 416)
    {
      if (*(j - 8) && *(j - 9) < 0)
        operator delete(*((void **)j - 4));
    }
    a5[1] = v11;
  }
  else
  {
    v8 = a1 + 28;
    sub_20EE1D9E0((char **)a1 + 28, a1[29], *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4));
    sub_20EE7BCD4(a1 + 25, a1[26], *a5, a5[1], 0x4EC4EC4EC4EC4EC5 * ((a5[1] - *a5) >> 5));
    if (v8 != a4)
      sub_20EE63900((uint64_t)a4, a1[28], a1[29], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[29] - a1[28]) >> 4));
    if (a1 + 25 != a5)
      sub_20EE6368C(a5, (char *)a1[25], (char *)a1[26], 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[26] - a1[25]) >> 5));
  }
}

uint64_t sub_20EE79FE4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t i;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::ios_base *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  void **v32;
  unint64_t v33;
  const void **v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  NSObject *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count *v57;
  size_t v58;
  size_t v59;
  _QWORD *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  char *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const char *v108;
  uint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v112;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v113;
  int v114;
  const char *v115;
  int v116;
  const char *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  void *v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  int v150;
  char *__s;
  _QWORD *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v157;
  int v158;
  const char *v159;
  int v160;
  const char *v161;
  __int128 v162;
  void *__dst[2];
  int64_t v164;
  void *v165[2];
  uint64_t v166;
  uint64_t v167;
  _QWORD v168[3];
  uint64_t v169;
  unint64_t v170;
  __int128 __p;
  __int128 v172;
  int v173;
  uint64_t v174[19];
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  int v178;
  __int128 v179;
  std::__shared_weak_count *v180;
  char *v181;
  std::__shared_weak_count *v182;
  _QWORD *v183;
  __int128 v184;
  _QWORD v185[2];
  _BYTE v186[24];
  __int128 v187;
  char *v188;
  size_t v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;

  v192 = *MEMORY[0x24BDAC8D0];
  v176 = 0u;
  v177 = 0u;
  v178 = 733221156;
  kdebug_trace();
  v3 = *a2;
  v136 = a2[1];
  if (*a2 != v136)
  {
    v4 = 0;
    v146 = *(void **)(MEMORY[0x24BEDB7F0] + 16);
    v145 = *(void **)(MEMORY[0x24BEDB7F0] + 24);
    v144 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 32);
    v143 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 40);
    v142 = *(void **)(MEMORY[0x24BEDB7F0] + 48);
    v141 = *(void **)(MEMORY[0x24BEDB7F0] + 8);
    v138 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v139 = (void *)*MEMORY[0x24BEDB7F0];
    v137 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v140 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      v149 = v4;
      if (v4 != *(_DWORD *)v3
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngineUtil.cpp", 1017, (uint64_t)"camera_id == camera_descriptor_store.camera_id", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = *(_QWORD *)(v3 + 32) - *(_QWORD *)(v3 + 24);
      if ((v5 & 0xFFFFFFFF0) != 0)
        break;
LABEL_3:
      v3 += 240;
      v4 = v149 + 1;
      if (v3 == v136)
        return kdebug_trace();
    }
    v6 = 0;
    v7 = (_QWORD *)(*a1 + 32 * v149 + 8);
    v154 = (v5 >> 4);
    v152 = v7;
    v147 = v3;
    while (1)
    {
      v8 = *(_QWORD *)(*v7 + 1664 * v6 + 1568);
      if (v8)
        break;
LABEL_9:
      if (++v6 == v154)
        goto LABEL_3;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16 * v6);
    if (*(_BYTE *)(v9 + 184))
    {
      v10 = *(_QWORD *)(v9 + 88) - *(_QWORD *)(v9 + 80);
      if (v10)
        v11 = v10 == *(_QWORD *)(v9 + 168) - *(_QWORD *)(v9 + 160);
      else
        v11 = 0;
      if (!v11)
        goto LABEL_22;
      v12 = (uint64_t)(*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56)) >> 5;
      if (v12 != v10 >> 6)
        goto LABEL_22;
    }
    else if (*(_QWORD *)(v9 + 160) != *(_QWORD *)(v9 + 168)
           || (v12 = (uint64_t)(*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56)) >> 5,
               v12 != (uint64_t)(*(_QWORD *)(v9 + 88) - *(_QWORD *)(v9 + 80)) >> 6))
    {
LABEL_22:
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0);
      v13 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v14 = qword_254A6DE40;
        for (i = qword_254A6DE48; v14 != i; v14 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v14)(*(_QWORD *)(v14 + 8), "HasValidSize()", 14, "Descriptor size mis-match", 25);
      }
      v16 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      v7 = v152;
      if (!byte_254A6DE68)
        abort();
      qword_254A6DE58(unk_254A6DE60, "HasValidSize()", 14, "Descriptor size mis-match", 25);
      v8 = *(_QWORD *)(*v152 + 1664 * v6 + 1568);
LABEL_30:
      sub_20FD893C4(v8, *(_QWORD *)(v3 + 120) + 72 * v6, v9);
      v17 = atomic_load((unsigned __int8 *)&qword_254A5FA38);
      if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FA38))
      {
        sub_21021D3D8(v186);
        sub_20E8610C0(v165, "cv3d.vio.slam_engine");
        sub_20E8C4068((uint64_t **)v186, (uint64_t)v165, &qword_254A5FA30);
        if (SHIBYTE(v166) < 0)
          operator delete(v165[0]);
        __cxa_guard_release(&qword_254A5FA38);
      }
      v175 = qword_254A5FA30;
      if (**(int **)(qword_254A5FA30 + 56) > 3)
        goto LABEL_9;
      v18 = *(unsigned __int8 *)(qword_254A5FA30 + 72);
      v153 = sub_20E8C31DC(qword_254A5FA30, "OSLogSurrogateAppender", 1, 0);
      if (!v18 && !v153)
        goto LABEL_9;
      v150 = v18;
      v19 = MEMORY[0x24BEDB858];
      v20 = MEMORY[0x24BEDB858] + 104;
      v174[0] = MEMORY[0x24BEDB858] + 104;
      v21 = MEMORY[0x24BEDB858] + 64;
      v166 = MEMORY[0x24BEDB858] + 64;
      v165[0] = v146;
      *(void **)((char *)v165 + *((_QWORD *)v146 - 3)) = v145;
      v165[1] = 0;
      v22 = (std::ios_base *)((char *)v165 + *((_QWORD *)v165[0] - 3));
      std::ios_base::init(v22, &v167);
      v22[1].__vftable = 0;
      v22[1].__fmtflags_ = -1;
      v166 = v144;
      *(uint64_t *)((char *)&v166 + *(_QWORD *)(v144 - 24)) = v143;
      v165[0] = v141;
      *(void **)((char *)v165 + *((_QWORD *)v141 - 3)) = v142;
      v174[0] = v20;
      v165[0] = (void *)(v19 + 24);
      v166 = v21;
      std::streambuf::basic_streambuf();
      v167 = v140;
      __p = 0u;
      v172 = 0u;
      v173 = 24;
      sub_20E86A980(&v166, (uint64_t)"ApplyExternalLensUndistortion: id[", 34);
      v23 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v23, (uint64_t)":", 1);
      v24 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v24, (uint64_t)"] frame_to_frame=", 17);
      if (*(_BYTE *)(v9 + 184))
      {
        v25 = *(_QWORD *)(v9 + 88) - *(_QWORD *)(v9 + 80);
        if (!v25)
          goto LABEL_42;
        if (v25 != *(_QWORD *)(v9 + 168) - *(_QWORD *)(v9 + 160))
          goto LABEL_42;
        v26 = (uint64_t)(*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56)) >> 5;
        if (v26 != v25 >> 6)
          goto LABEL_42;
      }
      else if (*(_QWORD *)(v9 + 160) != *(_QWORD *)(v9 + 168)
             || (v26 = (uint64_t)(*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56)) >> 5,
                 v26 != (uint64_t)(*(_QWORD *)(v9 + 88) - *(_QWORD *)(v9 + 80)) >> 6))
      {
LABEL_42:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_230;
        }
LABEL_43:
        v27 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v27, (uint64_t)", reloc_only=", 13);
        v28 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v28, (uint64_t)", dropped=", 10);
        if (*(_BYTE *)(v9 + 184))
        {
          v29 = *(_QWORD *)(v9 + 88) - *(_QWORD *)(v9 + 80);
          if (!v29)
            goto LABEL_51;
          if (v29 != *(_QWORD *)(v9 + 168) - *(_QWORD *)(v9 + 160))
            goto LABEL_51;
          v30 = (uint64_t)(*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56)) >> 5;
          if (v30 != v29 >> 6)
            goto LABEL_51;
        }
        else if (*(_QWORD *)(v9 + 160) != *(_QWORD *)(v9 + 168)
               || (v30 = (uint64_t)(*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56)) >> 5,
                   v30 != (uint64_t)(*(_QWORD *)(v9 + 88) - *(_QWORD *)(v9 + 80)) >> 6))
        {
LABEL_51:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
          {
LABEL_230:
            abort();
          }
LABEL_52:
          std::ostream::operator<<();
          if ((v173 & 0x10) != 0)
          {
            v33 = *((_QWORD *)&v172 + 1);
            v34 = (const void **)&v169;
            if (*((_QWORD *)&v172 + 1) < v170)
            {
              *((_QWORD *)&v172 + 1) = v170;
              v33 = v170;
              v34 = (const void **)&v169;
            }
          }
          else
          {
            if ((v173 & 8) == 0)
            {
              v31 = 0;
              HIBYTE(v164) = 0;
              v32 = __dst;
              goto LABEL_66;
            }
            v33 = v168[2];
            v34 = (const void **)v168;
          }
          v35 = *v34;
          v31 = v33 - (_QWORD)*v34;
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v31 >= 0x17)
          {
            v36 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v36 = v31 | 7;
            v37 = v36 + 1;
            v32 = (void **)operator new(v36 + 1);
            __dst[1] = (void *)v31;
            v164 = v37 | 0x8000000000000000;
            __dst[0] = v32;
          }
          else
          {
            HIBYTE(v164) = v33 - *(_BYTE *)v34;
            v32 = __dst;
            if (!v31)
            {
LABEL_66:
              *((_BYTE *)v32 + v31) = 0;
              v155 = &v175;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v157 = std::chrono::system_clock::now().__d_.__rep_;
              v158 = 3;
              v159 = "unknown file";
              v160 = 1034;
              v161 = "unknown function";
              v162 = 0uLL;
              v38 = __dst;
              if (v164 < 0)
                v38 = (void **)__dst[0];
              __s = (char *)v38;
              v39 = *v155;
              v40 = (const char *)(*v155 + 16);
              v148 = v40;
              if (*(char *)(*v155 + 39) < 0)
              {
                v40 = *(const char **)(v39 + 16);
                v41 = *(_QWORD *)(v39 + 24);
                v43 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v43 & 1) != 0)
                  goto LABEL_72;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*v155 + 39);
                v42 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v42 & 1) != 0)
                  goto LABEL_72;
              }
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)&v179);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v179);
                if ((_BYTE)v181 && SHIBYTE(v180) < 0)
                  operator delete((void *)v179);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
LABEL_72:
              if (byte_254A4A4F8[23] >= 0)
                v44 = byte_254A4A4F8;
              else
                v44 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v45 = byte_254A4A4F8[23];
              else
                v45 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)v186 = os_log_create(v44, v40);
              if (v45 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v45 >= 0x17)
              {
                v47 = v39;
                v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v45 | 7) != 0x17)
                  v48 = v45 | 7;
                v49 = v48 + 1;
                v46 = operator new(v48 + 1);
                *(_QWORD *)&v186[16] = v45;
                *(_QWORD *)&v187 = v49 | 0x8000000000000000;
                *(_QWORD *)&v186[8] = v46;
                v39 = v47;
              }
              else
              {
                BYTE7(v187) = v45;
                v46 = &v186[8];
                if (!v45)
                {
LABEL_86:
                  v46[v45] = 0;
                  BYTE8(v187) = 1;
                  if (v41 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v3 = v147;
                  if (v41 >= 0x17)
                  {
                    v53 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v41 | 7) != 0x17)
                      v53 = v41 | 7;
                    v54 = v53 + 1;
                    v50 = (char *)operator new(v53 + 1);
                    v189 = v41;
                    v190 = v54 | 0x8000000000000000;
                    v188 = v50;
                  }
                  else
                  {
                    HIBYTE(v190) = v41;
                    v50 = (char *)&v188;
                    if (!v41)
                    {
                      LOBYTE(v188) = 0;
                      LOBYTE(v191) = 1;
                      v51 = *(NSObject **)v186;
                      if ((SHIBYTE(v190) & 0x80000000) == 0)
                        goto LABEL_90;
                      goto LABEL_96;
                    }
                  }
                  memmove(v50, v40, v41);
                  v50[v41] = 0;
                  LOBYTE(v191) = 1;
                  v51 = *(NSObject **)v186;
                  if ((SHIBYTE(v190) & 0x80000000) == 0)
                  {
LABEL_90:
                    v52 = v153;
                    if (!BYTE8(v187))
                      goto LABEL_99;
                    goto LABEL_97;
                  }
LABEL_96:
                  operator delete(v188);
                  v52 = v153;
                  if (!BYTE8(v187))
                    goto LABEL_99;
LABEL_97:
                  if (SBYTE7(v187) < 0)
                    operator delete(*(void **)&v186[8]);
LABEL_99:
                  if (*(_QWORD *)v186)
                    os_release(*(void **)v186);
                  if (!v52 || !*(_QWORD *)(v52 + 24))
                  {
                    os_log_type_enabled(v51, OS_LOG_TYPE_INFO);
                    *(_DWORD *)v186 = 136315138;
                    *(_QWORD *)&v186[4] = __s;
                    v61 = (void *)_os_log_send_and_compose_impl();
                    if (v61)
                      free(v61);
                    goto LABEL_173;
                  }
                  v55 = _os_log_pack_size();
                  v56 = (std::__shared_weak_count_vtbl *)operator new(v55, (std::align_val_t)8uLL);
                  v57 = (std::__shared_weak_count *)operator new();
                  v57->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v57->__shared_owners_ = 0;
                  v57->__shared_weak_owners_ = 0;
                  v57[1].__vftable = v56;
                  *(_QWORD *)&v179 = v56;
                  *((_QWORD *)&v179 + 1) = v56;
                  v180 = v57;
                  v181 = 0;
                  v182 = 0;
                  v58 = strlen(__s);
                  if (v58 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v59 = v58;
                  if (v58 >= 0x17)
                  {
                    v62 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v58 | 7) != 0x17)
                      v62 = v58 | 7;
                    v63 = v62 + 1;
                    v60 = operator new(v62 + 1);
                    *(_QWORD *)&v184 = v59;
                    *((_QWORD *)&v184 + 1) = v63 | 0x8000000000000000;
                    v183 = v60;
                  }
                  else
                  {
                    HIBYTE(v184) = v58;
                    v60 = &v183;
                    if (!v58)
                      goto LABEL_113;
                  }
                  memcpy(v60, __s, v59);
LABEL_113:
                  *((_BYTE *)v60 + v59) = 0;
                  v64 = v183;
                  v185[0] = v184;
                  *(_QWORD *)((char *)v185 + 7) = *(_QWORD *)((char *)&v184 + 7);
                  v65 = HIBYTE(v184);
                  v66 = operator new(0x38uLL);
                  v66[1] = 0;
                  v66[2] = 0;
                  v66[3] = off_24C9ABC20;
                  *v66 = &off_24C9ABBD0;
                  v67 = v185[0];
                  v66[4] = v64;
                  v66[5] = v67;
                  *(_QWORD *)((char *)v66 + 47) = *(_QWORD *)((char *)v185 + 7);
                  *((_BYTE *)v66 + 55) = v65;
                  v185[0] = 0;
                  *(_QWORD *)((char *)v185 + 7) = 0;
                  v68 = v182;
                  v181 = (char *)(v66 + 3);
                  v182 = (std::__shared_weak_count *)v66;
                  if (!v68)
                    goto LABEL_117;
                  p_shared_owners = (unint64_t *)&v68->__shared_owners_;
                  do
                    v70 = __ldaxr(p_shared_owners);
                  while (__stlxr(v70 - 1, p_shared_owners));
                  if (!v70)
                  {
                    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                    std::__shared_weak_count::__release_weak(v68);
                    *(_OWORD *)v186 = v179;
                    v72 = v180;
                    v71 = v181;
                    *(_QWORD *)&v186[16] = v180;
                    if (!v180)
                      goto LABEL_120;
                  }
                  else
                  {
LABEL_117:
                    *(_OWORD *)v186 = v179;
                    v72 = v180;
                    v71 = v181;
                    *(_QWORD *)&v186[16] = v180;
                    if (!v180)
                      goto LABEL_120;
                  }
                  v73 = (unint64_t *)&v72->__shared_owners_;
                  do
                    v74 = __ldxr(v73);
                  while (__stxr(v74 + 1, v73));
LABEL_120:
                  v75 = v182;
                  *(_QWORD *)&v187 = v71;
                  *((_QWORD *)&v187 + 1) = v182;
                  if (v182)
                  {
                    v76 = (unint64_t *)&v182->__shared_owners_;
                    do
                      v77 = __ldxr(v76);
                    while (__stxr(v77 + 1, v76));
                    v188 = v71;
                    do
                      v78 = __ldaxr(v76);
                    while (__stlxr(v78 - 1, v76));
                    if (!v78)
                    {
                      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                      std::__shared_weak_count::__release_weak(v75);
                    }
                  }
                  else
                  {
                    v188 = v71;
                  }
                  v79 = v180;
                  if (v180)
                  {
                    v80 = (unint64_t *)&v180->__shared_owners_;
                    do
                      v81 = __ldaxr(v80);
                    while (__stlxr(v81 - 1, v80));
                    if (!v81)
                    {
                      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                      std::__shared_weak_count::__release_weak(v79);
                    }
                  }
                  v82 = *(_QWORD *)v186;
                  if (v188[31] >= 0)
                    v83 = v188 + 8;
                  else
                    v83 = (char *)*((_QWORD *)v188 + 1);
                  v84 = _os_log_pack_fill();
                  *(_DWORD *)v84 = 136315138;
                  *(_QWORD *)(v84 + 4) = v83;
                  v85 = operator new();
                  v86 = *(unsigned __int8 *)(v39 + 39);
                  v87 = v148;
                  if ((v86 & 0x80u) != 0)
                  {
                    v87 = *(const char **)(v39 + 16);
                    v86 = *(_QWORD *)(v39 + 24);
                  }
                  *(_QWORD *)v85 = v82;
                  *(_OWORD *)(v85 + 8) = *(_OWORD *)&v186[8];
                  *(_QWORD *)&v186[8] = 0;
                  *(_QWORD *)&v186[16] = 0;
                  *(_OWORD *)(v85 + 24) = v187;
                  v187 = 0uLL;
                  *(_QWORD *)(v85 + 40) = v87;
                  *(_QWORD *)(v85 + 48) = v86;
                  *(_BYTE *)(v85 + 56) = 1;
                  v183 = 0;
                  *(_QWORD *)&v179 = v85;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v153 + 24) + 40))(*(_QWORD *)(v153 + 24), &v179);
                  v88 = v179;
                  *(_QWORD *)&v179 = 0;
                  if (!v88)
                    goto LABEL_163;
                  v89 = *(std::__shared_weak_count **)(v88 + 32);
                  if (!v89)
                    goto LABEL_143;
                  v90 = (unint64_t *)&v89->__shared_owners_;
                  do
                    v91 = __ldaxr(v90);
                  while (__stlxr(v91 - 1, v90));
                  if (!v91)
                  {
                    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                    std::__shared_weak_count::__release_weak(v89);
                    v92 = *(std::__shared_weak_count **)(v88 + 16);
                    if (!v92)
                      goto LABEL_151;
                  }
                  else
                  {
LABEL_143:
                    v92 = *(std::__shared_weak_count **)(v88 + 16);
                    if (!v92)
                      goto LABEL_151;
                  }
                  v93 = (unint64_t *)&v92->__shared_owners_;
                  do
                    v94 = __ldaxr(v93);
                  while (__stlxr(v94 - 1, v93));
                  if (!v94)
                  {
                    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                    std::__shared_weak_count::__release_weak(v92);
                  }
LABEL_151:
                  MEMORY[0x212BC6398](v88, 0x10F0C40B62ED6C6);
                  v95 = v183;
                  v183 = 0;
                  if (!v95)
                    goto LABEL_163;
                  v96 = (std::__shared_weak_count *)v95[4];
                  if (!v96)
                    goto LABEL_156;
                  v97 = (unint64_t *)&v96->__shared_owners_;
                  do
                    v98 = __ldaxr(v97);
                  while (__stlxr(v98 - 1, v97));
                  if (!v98)
                  {
                    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                    std::__shared_weak_count::__release_weak(v96);
                    v99 = (std::__shared_weak_count *)v95[2];
                    if (v99)
                      goto LABEL_157;
                  }
                  else
                  {
LABEL_156:
                    v99 = (std::__shared_weak_count *)v95[2];
                    if (v99)
                    {
LABEL_157:
                      v100 = (unint64_t *)&v99->__shared_owners_;
                      do
                        v101 = __ldaxr(v100);
                      while (__stlxr(v101 - 1, v100));
                      if (!v101)
                      {
                        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                        std::__shared_weak_count::__release_weak(v99);
                      }
                    }
                  }
                  MEMORY[0x212BC6398](v95, 0x10F0C40B62ED6C6);
LABEL_163:
                  v102 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
                  if (!*((_QWORD *)&v187 + 1))
                    goto LABEL_167;
                  v103 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
                  do
                    v104 = __ldaxr(v103);
                  while (__stlxr(v104 - 1, v103));
                  if (!v104)
                  {
                    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                    std::__shared_weak_count::__release_weak(v102);
                    v105 = *(std::__shared_weak_count **)&v186[16];
                    if (!*(_QWORD *)&v186[16])
                      goto LABEL_173;
                  }
                  else
                  {
LABEL_167:
                    v105 = *(std::__shared_weak_count **)&v186[16];
                    if (!*(_QWORD *)&v186[16])
                      goto LABEL_173;
                  }
                  v106 = (unint64_t *)&v105->__shared_owners_;
                  do
                    v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                    std::__shared_weak_count::__release_weak(v105);
                  }
LABEL_173:
                  if (v150)
                  {
                    v108 = (const char *)__dst;
                    if (v164 < 0)
                      v108 = (const char *)__dst[0];
                    sub_20E8C003C((uint64_t)&v155, "%s", v108);
                    sub_20E863570((uint64_t)&v155);
                  }
                  v109 = v155;
                  if (!v155)
                    goto LABEL_204;
                  v110 = v162;
                  if (!(_QWORD)v162)
                    goto LABEL_204;
                  v111 = (_QWORD *)(*v155 + 16);
                  if (*(char *)(*v155 + 39) < 0)
                    v111 = (_QWORD *)*v111;
                  v113 = rep;
                  v112 = v157;
                  v114 = v158;
                  v115 = v159;
                  v116 = v160;
                  v117 = v161;
                  v118 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
                  v179 = v162;
                  if (*((_QWORD *)&v162 + 1))
                  {
                    v119 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
                    do
                      v120 = __ldxr(v119);
                    while (__stxr(v120 + 1, v119));
                    *(_QWORD *)&v186[8] = v113;
                    *(_QWORD *)&v186[16] = v112;
                    LODWORD(v187) = v114;
                    *((_QWORD *)&v187 + 1) = v115;
                    LODWORD(v188) = v116;
                    v189 = (size_t)v117;
                    v190 = v110;
                    v191 = v118;
                    do
                      v121 = __ldxr(v119);
                    while (__stxr(v121 + 1, v119));
                    *(_QWORD *)v186 = v111;
                    v122 = *v109;
                    if (v114 < **(_DWORD **)(*v109 + 56))
                    {
LABEL_187:
                      if (!v118)
                        goto LABEL_194;
                      goto LABEL_191;
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v186[8] = rep;
                    *(_QWORD *)&v186[16] = v157;
                    LODWORD(v187) = v158;
                    *((_QWORD *)&v187 + 1) = v159;
                    LODWORD(v188) = v160;
                    v189 = (size_t)v161;
                    v190 = v162;
                    v191 = 0;
                    *(_QWORD *)v186 = v111;
                    v122 = *v155;
                    if (v158 < **(_DWORD **)(*v155 + 56))
                      goto LABEL_187;
                  }
                  sub_20E8C3FC4(v122, (uint64_t)v186);
                  v118 = v191;
                  if (!v191)
                    goto LABEL_194;
LABEL_191:
                  v123 = (unint64_t *)&v118->__shared_owners_;
                  do
                    v124 = __ldaxr(v123);
                  while (__stlxr(v124 - 1, v123));
                  if (!v124)
                  {
                    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                    std::__shared_weak_count::__release_weak(v118);
                    v125 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
                    if (!*((_QWORD *)&v179 + 1))
                      goto LABEL_200;
                    goto LABEL_195;
                  }
LABEL_194:
                  v125 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
                  if (!*((_QWORD *)&v179 + 1))
                    goto LABEL_200;
LABEL_195:
                  v126 = (unint64_t *)&v125->__shared_owners_;
                  do
                    v127 = __ldaxr(v126);
                  while (__stlxr(v127 - 1, v126));
                  if (!v127)
                  {
                    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                    std::__shared_weak_count::__release_weak(v125);
                  }
LABEL_200:
                  v128 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
                  v162 = 0uLL;
                  if (!v128)
                    goto LABEL_209;
                  v129 = (unint64_t *)&v128->__shared_owners_;
                  do
                    v130 = __ldaxr(v129);
                  while (__stlxr(v130 - 1, v129));
                  if (!v130)
                  {
                    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                    std::__shared_weak_count::__release_weak(v128);
                    v131 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
                    if (*((_QWORD *)&v162 + 1))
                      goto LABEL_205;
                    goto LABEL_209;
                  }
LABEL_204:
                  v131 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
                  if (*((_QWORD *)&v162 + 1))
                  {
LABEL_205:
                    v132 = (unint64_t *)&v131->__shared_owners_;
                    do
                      v133 = __ldaxr(v132);
                    while (__stlxr(v133 - 1, v132));
                    if (!v133)
                    {
                      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                      std::__shared_weak_count::__release_weak(v131);
                    }
                  }
LABEL_209:
                  if (SHIBYTE(v164) < 0)
                    operator delete(__dst[0]);
                  v165[0] = v139;
                  *(void **)((char *)v165 + *((_QWORD *)v139 - 3)) = v138;
                  v166 = v137;
                  v167 = MEMORY[0x24BEDB848] + 16;
                  v7 = v152;
                  if (SBYTE7(v172) < 0)
                    operator delete((void *)__p);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](v174);
                  goto LABEL_9;
                }
              }
              memmove(v46, v44, v45);
              goto LABEL_86;
            }
          }
          memmove(v32, v35, v31);
          goto LABEL_66;
        }
        if (*(_QWORD *)(v9 + 16) <= v30)
          goto LABEL_52;
        goto LABEL_51;
      }
      if (*(_QWORD *)(v9 + 16) <= v26)
        goto LABEL_43;
      goto LABEL_42;
    }
    if (*(_QWORD *)(v9 + 16) <= v12)
      goto LABEL_30;
    goto LABEL_22;
  }
  return kdebug_trace();
}

void sub_20EE7B354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62)
{
  uint64_t v62;

  if (*(_BYTE *)(v62 - 232) && *(char *)(v62 - 233) < 0)
    operator delete(*(void **)(v62 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a47);
  if (a61 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a62);
  sub_20E8E69C4((uint64_t)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void sub_20EE7B54C(int **a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  int *v3;
  int *v4;
  char **v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int *v29;
  uint64_t v30;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
    return;
  v5 = a3;
  v6 = (_BYTE *)(a2 + 6904);
  if (!*(_BYTE *)(a2 + 8556))
    return;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v29 = a1[1];
  v30 = a2;
LABEL_4:
  v10 = *v4;
  if (*v6)
    v11 = *(_DWORD *)(a2 + 6908) == v10;
  else
    v11 = 1;
  if (v11)
  {
    if (v9 < v8)
    {
      *(_DWORD *)v9 = v10;
      v12 = (uint64_t)(v9 + 4);
LABEL_26:
      v5[1] = (char *)v12;
      v9 = (char *)v12;
      goto LABEL_27;
    }
    v13 = (v9 - v7) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      sub_20E867F44();
    if ((v8 - v7) >> 1 > v14)
      v14 = (v8 - v7) >> 1;
    if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 62)
        sub_20E877A38();
      v16 = operator new(4 * v15);
      v17 = &v16[4 * v13];
      *(_DWORD *)v17 = v10;
      v12 = (uint64_t)(v17 + 4);
      v18 = v9 - v7;
      if (v9 != v7)
      {
LABEL_20:
        v19 = v18 - 4;
        if (v19 < 0xBC
          || (v22 = (v9 - 4 - v7) & 0xFFFFFFFFFFFFFFFCLL, &v16[v9 - v7 - 4 - v22] > &v16[v9 - v7 - 4])
          || &v9[-v22 - 4] > v9 - 4
          || (unint64_t)(v7 - v16) < 0x20)
        {
          v20 = v9;
          v5 = a3;
        }
        else
        {
          v23 = (v19 >> 2) + 1;
          v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
          v20 = &v9[-v24];
          v17 -= v24;
          v25 = &v16[4 * v13 - 16];
          v26 = v9 - 16;
          v27 = v23 & 0x7FFFFFFFFFFFFFF8;
          v5 = a3;
          do
          {
            v28 = *(_OWORD *)v26;
            *(v25 - 1) = *((_OWORD *)v26 - 1);
            *v25 = v28;
            v25 -= 2;
            v26 -= 32;
            v27 -= 8;
          }
          while (v27);
          if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_23:
            v8 = &v16[4 * v15];
            *v5 = v17;
            v5[1] = (char *)v12;
            v5[2] = v8;
            if (!v7)
            {
LABEL_25:
              v7 = v17;
              v3 = v29;
              a2 = v30;
              goto LABEL_26;
            }
LABEL_24:
            operator delete(v7);
            goto LABEL_25;
          }
        }
        do
        {
          v21 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          *((_DWORD *)v17 - 1) = v21;
          v17 -= 4;
        }
        while (v20 != v7);
        goto LABEL_23;
      }
    }
    else
    {
      v16 = 0;
      v17 = (char *)(4 * v13);
      *(_DWORD *)(4 * v13) = v10;
      v12 = 4 * v13 + 4;
      v18 = v9 - v7;
      if (v9 != v7)
        goto LABEL_20;
    }
    v5 = a3;
    v8 = &v16[4 * v15];
    *a3 = v17;
    a3[1] = (char *)v12;
    a3[2] = v8;
    if (!v7)
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_27:
  while (++v4 != v3)
  {
    if (v6[1652])
      goto LABEL_4;
  }
}

void sub_20EE7B78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;

  v13 = *(void **)a12;
  if (*(_QWORD *)a12)
  {
    *(_QWORD *)(a12 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE7B7B4(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int v3;
  BOOL v4;
  uint64_t i;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      for (i = *v1; i != v1[1]; i += 712)
      {
        if (*(_BYTE *)(i + 704))
        {
          v4 = v3 && v4 || *(_DWORD *)(i + 700) * *(_DWORD *)(i + 696) != 0;
          v3 = 1;
        }
      }
      v1 += 3;
    }
    while (v1 != v2);
    if (v3)
    {
      sub_20E896804(&v10);
      v9 = 1065353216;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 40))(v10, &v9);
      v6 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_20EE7B8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E896984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE7B8C4(uint64_t a1, _QWORD *a2, double a3)
{
  float v4;
  void *__p[2];
  char v6;

  if ((byte_254A6D960 & 1) == 0)
  {
    qword_254A51328 = *(_QWORD *)&a3;
    byte_254A6D960 = 1;
  }
  if (*(_BYTE *)(a1 + 90))
  {
    if ((byte_254A6D961 & 1) == 0)
    {
      v4 = a3 - *(double *)&qword_254A51328;
      *(float *)__p = v4;
      if ((byte_254A6D963 & 1) != 0)
      {
        (*(void (**)(_QWORD, void **))(*(_QWORD *)*a2 + 112))(*a2, __p);
      }
      else
      {
        (*(void (**)(_QWORD, void **))(*(_QWORD *)*a2 + 120))(*a2, __p);
        byte_254A6D963 = 1;
      }
      byte_254A6D961 = 1;
      byte_254A6D962 = 1;
    }
  }
  else if (byte_254A6D962 == 1)
  {
    qword_254A51328 = *(_QWORD *)&a3;
    v6 = 0;
    LOBYTE(__p[0]) = 0;
    if (*(_BYTE *)(a1 + 99))
      sub_20FCCCE84((std::string *)(*(unsigned int *)(a1 + 93) | ((unint64_t)*(unsigned __int16 *)(a1 + 97) << 32)), (uint64_t)__p);
    (*(void (**)(_QWORD, void **))(*(_QWORD *)*a2 + 96))(*a2, __p);
    byte_254A6D962 = 0;
    byte_254A6D961 = 0;
    if (v6 < 0)
      operator delete(__p[0]);
  }
}

void sub_20EE7BA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_20EE7BA48(uint64_t a1, __int128 *a2, __int128 *a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v8;
  _OWORD *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  _QWORD *v20;
  _OWORD *v21;
  unint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD *v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(_OWORD **)a1;
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)result) >> 4) >= __sz)
  {
    v21 = *(_OWORD **)(a1 + 8);
    v20 = (_QWORD *)(a1 + 8);
    v19 = v21;
    v22 = 0x8E38E38E38E38E39 * (v21 - result);
    if (v22 >= __sz)
    {
      v38 = result;
      if (a2 != a3)
      {
        v39 = result;
        do
        {
          v40 = *v6;
          v41 = v6[1];
          v42 = v6[3];
          v39[2] = v6[2];
          v39[3] = v42;
          *v39 = v40;
          v39[1] = v41;
          v43 = v6[4];
          v44 = v6[5];
          v45 = v6[7];
          v39[6] = v6[6];
          v39[7] = v45;
          v39[4] = v43;
          v39[5] = v44;
          v39[8] = v6[8];
          v38 += 9;
          v6 += 9;
          v39 += 9;
        }
        while (v6 != a3);
      }
      *v20 = v38;
    }
    else
    {
      v23 = &a2[9 * v22];
      if (v19 != result)
      {
        do
        {
          v24 = *v6;
          v25 = v6[1];
          v26 = v6[3];
          result[2] = v6[2];
          result[3] = v26;
          *result = v24;
          result[1] = v25;
          v27 = v6[4];
          v28 = v6[5];
          v29 = v6[7];
          result[6] = v6[6];
          result[7] = v29;
          result[4] = v27;
          result[5] = v28;
          result[8] = v6[8];
          v6 += 9;
          result += 9;
        }
        while (v6 != v23);
        result = (_OWORD *)*v20;
      }
      v30 = result;
      if (v23 != a3)
      {
        v30 = result;
        v31 = result;
        do
        {
          v32 = *v23;
          v33 = v23[1];
          v34 = v23[3];
          v31[2] = v23[2];
          v31[3] = v34;
          *v31 = v32;
          v31[1] = v33;
          v35 = v23[4];
          v36 = v23[5];
          v37 = v23[7];
          v31[6] = v23[6];
          v31[7] = v37;
          v31[4] = v35;
          v31[5] = v36;
          v31[8] = v23[8];
          v30 += 9;
          v23 += 9;
          v31 += 9;
        }
        while (v23 != a3);
      }
      *v20 = v30;
    }
  }
  else
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0x1C71C71C71C71C7)
      goto LABEL_27;
    v10 = 0x8E38E38E38E38E39 * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v11;
    if (v12 > 0x1C71C71C71C71C7)
LABEL_27:
      sub_20E867F44();
    v13 = 9 * v12;
    result = operator new(144 * v12);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        v15 = v6[5];
        v14[4] = v6[4];
        v14[5] = v15;
        v16 = v6[7];
        v14[6] = v6[6];
        v14[7] = v16;
        v17 = v6[1];
        *v14 = *v6;
        v14[1] = v17;
        v18 = v6[3];
        v14[2] = v6[2];
        v14[3] = v18;
        v14[8] = v6[8];
        v14 += 9;
        v6 += 9;
      }
      while (v6 != a3);
    }
    *(_QWORD *)(a1 + 8) = v14;
  }
  return result;
}

char *sub_20EE7BCD4(_QWORD *a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void **v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  void **v42;
  void *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  void *v56;
  char *v58;
  char *v59;
  void **v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;

  v5 = (char *)*a1;
  v6 = (a2 - *a1) / 416;
  v7 = *a1 + 416 * v6;
  if (a5 < 1)
    return (char *)v7;
  v9 = a3;
  v13 = a1[2];
  v11 = a1 + 2;
  v12 = v13;
  v14 = *(v11 - 1);
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v13 - v14) >> 5) >= a5)
  {
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v14 - v7) >> 5) >= a5)
    {
      v61 = &a3[416 * a5];
      v20 = (char *)*(v11 - 1);
      goto LABEL_16;
    }
    v19 = &a3[32 * ((uint64_t)(v14 - v7) >> 5)];
    v20 = sub_20EAAA060((int)v11, v19, a4, (char *)*(v11 - 1));
    a1[1] = v20;
    if ((uint64_t)(v14 - v7) >= 1)
    {
      v61 = v19;
LABEL_16:
      v21 = (char *)(v7 + 416 * a5);
      v22 = &v20[-416 * a5];
      v23 = v20;
      if ((unint64_t)v22 < v14)
      {
        v24 = v22;
        v23 = v20;
        do
        {
          memcpy(v23, v24, 0x179uLL);
          v23[384] = 0;
          v23[408] = 0;
          if (v24[408])
          {
            v25 = *((_OWORD *)v24 + 24);
            *((_QWORD *)v23 + 50) = *((_QWORD *)v24 + 50);
            *((_OWORD *)v23 + 24) = v25;
            *((_QWORD *)v24 + 49) = 0;
            *((_QWORD *)v24 + 50) = 0;
            *((_QWORD *)v24 + 48) = 0;
            v23[408] = 1;
          }
          v23 += 416;
          v24 += 416;
        }
        while ((unint64_t)v24 < v14);
      }
      a1[1] = v23;
      if (v20 != v21)
      {
        v26 = 0;
        v27 = -32 * ((v20 - v21) >> 5);
        do
        {
          v28 = &v22[v26];
          v29 = &v20[v26];
          memcpy(&v20[v26 - 416], &v22[v26 - 416], 0x179uLL);
          v30 = (void **)&v20[v26 - 32];
          v31 = &v22[v26 - 32];
          if (v20[v26 - 8] == v22[v26 - 8])
          {
            if (v20[v26 - 8])
            {
              if (v20[v26 - 9] < 0)
                operator delete(*v30);
              v32 = *(_OWORD *)v31;
              *((_QWORD *)v29 - 2) = *((_QWORD *)v28 - 2);
              *(_OWORD *)v30 = v32;
              v22[v26 - 9] = 0;
              *v31 = 0;
            }
          }
          else if (v20[v26 - 8])
          {
            if (v20[v26 - 9] < 0)
              operator delete(*v30);
            *(v29 - 8) = 0;
          }
          else
          {
            v33 = *(_OWORD *)v31;
            *((_QWORD *)v29 - 2) = *((_QWORD *)v28 - 2);
            *(_OWORD *)v30 = v33;
            *((_QWORD *)v28 - 3) = 0;
            *((_QWORD *)v28 - 2) = 0;
            *(_QWORD *)v31 = 0;
            *(v29 - 8) = 1;
          }
          v26 -= 416;
        }
        while (v27 != v26);
      }
      if (v61 != v9)
      {
        v34 = (char *)v7;
        do
        {
          memcpy(v34, v9, 0x179uLL);
          sub_20E869118((uint64_t)(v34 + 384), (_QWORD *)v9 + 48);
          v9 += 416;
          v34 += 416;
        }
        while (v9 != v61);
      }
    }
    return (char *)v7;
  }
  v15 = a5 + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v14 - (_QWORD)v5) >> 5);
  if (v15 > 0x9D89D89D89D89DLL)
    sub_20EAA9DC0();
  v16 = 0x4EC4EC4EC4EC4EC5 * ((v12 - (uint64_t)v5) >> 5);
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x4EC4EC4EC4EC4ELL)
    v17 = 0x9D89D89D89D89DLL;
  else
    v17 = v15;
  v60 = (void **)a1;
  if (v17)
  {
    if (v17 > 0x9D89D89D89D89DLL)
      sub_20E877A38();
    v18 = (char *)operator new(416 * v17);
  }
  else
  {
    v18 = 0;
  }
  v36 = 0;
  v62 = v6;
  v37 = &v18[416 * v6];
  v63 = v37;
  v64 = &v18[416 * v17];
  v58 = v18;
  v59 = &v37[416 * a5];
  do
  {
    v39 = &v9[v36];
    v40 = &v37[v36];
    memcpy(&v37[v36], &v9[v36], 0x179uLL);
    v40[384] = 0;
    v40[408] = 0;
    if (v9[v36 + 408])
    {
      v41 = v40 + 384;
      v42 = (void **)(v39 + 384);
      if (v39[407] < 0)
      {
        sub_20E860C04(v41, *v42, *(_QWORD *)&v9[v36 + 392]);
      }
      else
      {
        v38 = *(_OWORD *)v42;
        *((_QWORD *)v40 + 50) = *((_QWORD *)v39 + 50);
        *(_OWORD *)v41 = v38;
      }
      v40[408] = 1;
    }
    v36 += 416;
  }
  while (416 * a5 != v36);
  v35 = v37;
  v43 = *v60;
  v44 = v37;
  if (*v60 != (void *)v7)
  {
    v45 = 0;
    do
    {
      v46 = &v63[v45];
      v47 = v7 + v45;
      memcpy(&v63[v45 - 416], (const void *)(v7 + v45 - 416), 0x179uLL);
      *(v46 - 32) = 0;
      *(v46 - 8) = 0;
      if (*(_BYTE *)(v7 + v45 - 8))
      {
        v48 = *(_OWORD *)(v47 - 32);
        *((_QWORD *)v46 - 2) = *(_QWORD *)(v47 - 16);
        *((_OWORD *)v46 - 2) = v48;
        *(_QWORD *)(v47 - 24) = 0;
        *(_QWORD *)(v47 - 16) = 0;
        *(_QWORD *)(v47 - 32) = 0;
        *(v46 - 8) = 1;
      }
      v45 -= 416;
    }
    while ((void *)(v7 + v45) != v43);
    v44 = &v63[v45];
  }
  v49 = (char *)v60[1];
  v50 = v59;
  if (v49 != (char *)v7)
  {
    v51 = 416 * v62;
    v52 = &v58[416 * a5];
    do
    {
      v53 = &v52[v51];
      v54 = &v5[v51];
      memcpy(&v52[v51], &v5[v51], 0x179uLL);
      v53[384] = 0;
      v53[408] = 0;
      if (v5[v51 + 408])
      {
        v55 = *((_OWORD *)v54 + 24);
        *((_QWORD *)v53 + 50) = *((_QWORD *)v54 + 50);
        *((_OWORD *)v53 + 24) = v55;
        *((_QWORD *)v54 + 49) = 0;
        *((_QWORD *)v54 + 50) = 0;
        *((_QWORD *)v54 + 48) = 0;
        v53[408] = 1;
      }
      v52 += 416;
      v5 += 416;
    }
    while (v54 + 416 != v49);
    v7 = (uint64_t)v60[1];
    v50 = &v52[416 * v62];
  }
  v56 = *v60;
  *v60 = v44;
  v60[1] = v50;
  v60[2] = v64;
  while ((void *)v7 != v56)
  {
    if (*(_BYTE *)(v7 - 8))
    {
      if (*(char *)(v7 - 9) < 0)
        operator delete(*(void **)(v7 - 32));
    }
    v7 -= 416;
  }
  if (v56)
    operator delete(v56);
  return v35;
}

void sub_20EE7C22C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EE7C234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v19 = v16 + v17;
  if (*(_BYTE *)(v16 + v17 + 408))
  {
    if (*(char *)(v19 + 407) < 0)
      operator delete(*(void **)(v19 + 384));
  }
  a16 = v16 + v17;
  sub_20EAAA764((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20EE7C26C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE7C290(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE7C2A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3vio11slam_engine15LocalSlamEngineEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3vio11slam_engine15LocalSlamEngineEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3vio11slam_engine15LocalSlamEngineEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3vio11slam_engine15LocalSlamEngineEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EE7C318(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  size_t v32;
  uint8x8_t v33;
  uint64_t v34;
  size_t v36;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  _QWORD *v40;
  unint64_t v41;
  char v42;

  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = sub_20E8D177C((uint64_t)&v42, v7, v8);
  v10 = v9;
  *(_QWORD *)(a2 + 8) = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = v9;
      if (v11 <= v9)
        v13 = v9 % v11;
    }
    else
    {
      v13 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = *(_BYTE *)(a2 + 39);
        if (v16 >= 0)
          v17 = *(unsigned __int8 *)(a2 + 39);
        else
          v17 = *(_QWORD *)(a2 + 24);
        if (v16 < 0)
          v4 = *(unsigned __int8 **)(a2 + 16);
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v4, v15[3]))
                    return 0;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return 0;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v4[v25])
                  {
                    if (v23 == ++v25)
                      goto LABEL_75;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v13)
            {
              goto LABEL_53;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_53;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v10)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v4, v15[3]))
                  return 0;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return 0;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v4[v21])
                {
                  if (v19 == ++v21)
                  {
LABEL_75:
                    if (!v15)
                      goto LABEL_80;
                    return 0;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v11)
              v18 %= v11;
            if (v18 != v13)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_53:
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v28 = 1;
    if (v11 >= 3)
      v28 = (v11 & (v11 - 1)) != 0;
    v29 = v28 | (2 * v11);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_65;
    if (prime < v11)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 >= 3)
      {
        v33 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v33.i16[0] = vaddlv_u8(v33);
        if (v33.u32[0] <= 1uLL)
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
          if (prime <= v32)
            prime = v32;
          if (prime >= v11)
            goto LABEL_80;
LABEL_65:
          sub_20E8D2B3C(a1, prime);
          goto LABEL_80;
        }
      }
      v36 = std::__next_prime(v32);
      if (prime <= v36)
        prime = v36;
      if (prime < v11)
        goto LABEL_65;
    }
  }
LABEL_80:
  v37 = *(int8x8_t *)(a1 + 8);
  v38 = *(_QWORD *)(a2 + 8);
  v39 = (uint8x8_t)vcnt_s8(v37);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    if (v38 >= *(_QWORD *)&v37)
      v38 %= *(_QWORD *)&v37;
  }
  else
  {
    v38 &= *(_QWORD *)&v37 - 1;
  }
  v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v38);
  if (v40)
  {
    *(_QWORD *)a2 = *v40;
LABEL_92:
    *v40 = a2;
    goto LABEL_93;
  }
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a1 + 16;
  if (*(_QWORD *)a2)
  {
    v41 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v39.u32[0] > 1uLL)
    {
      if (v41 >= *(_QWORD *)&v37)
        v41 %= *(_QWORD *)&v37;
    }
    else
    {
      v41 &= *(_QWORD *)&v37 - 1;
    }
    v40 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
    goto LABEL_92;
  }
LABEL_93:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_20EE7C6F8()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EE7C70C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9EE990;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EE7C744(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9EE990;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EE7C764(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  std::chrono::steady_clock::time_point v7;
  double v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  void **v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  const char *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  std::chrono::steady_clock::time_point v48;
  double v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  const char *v53;
  _QWORD v54[3];
  int v55;
  const char *v56;
  int v57;
  const char *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  void *object[2];
  size_t v63;
  unint64_t v64;
  char v65;
  void *__p[2];
  unint64_t v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  sub_20EE74410(&v61);
  if (**(int **)(v61 + 56) > 3)
    return;
  v2 = *(unsigned __int8 *)(v61 + 72);
  v3 = sub_20E8C31DC(v61, "OSLogSurrogateAppender", 1, 0);
  if (!v2 && v3 == 0)
    return;
  v5 = v3;
  v54[0] = &v61;
  v54[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v54[2] = std::chrono::system_clock::now().__d_.__rep_;
  v55 = 3;
  v56 = "unknown file";
  v57 = 733;
  v59 = 0;
  v60 = 0;
  v58 = "unknown function";
  v6 = *(_QWORD *)(a1 + 8);
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = (double)(v7.__d_.__rep_ - *(_QWORD *)v6) / 1000000000.0;
  *(std::chrono::steady_clock::time_point *)v6 = v7;
  *(double *)(v6 + 8) = *(double *)(v6 + 8) + v8;
  v9 = *(_QWORD *)v54[0];
  v10 = (const char *)(*(_QWORD *)v54[0] + 16);
  v53 = v10;
  if (*(char *)(*(_QWORD *)v54[0] + 39) < 0)
  {
    v10 = *(const char **)(v9 + 16);
    v11 = *(_QWORD *)(v9 + 24);
    v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v11 = *(unsigned __int8 *)(*(_QWORD *)v54[0] + 39);
    v12 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v64)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = v63;
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v14 = byte_254A4A4F8;
  else
    v14 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v15 = byte_254A4A4F8[23];
  else
    v15 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v14, v10);
  v16 = &object[1];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v17 = v5;
    v18 = v10;
    v19 = v9;
    v20 = a1;
    v21 = v2;
    v22 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v22 = v15 | 7;
    v23 = v22 + 1;
    v16 = (void **)operator new(v22 + 1);
    v63 = v15;
    v64 = v23 | 0x8000000000000000;
    object[1] = v16;
    v2 = v21;
    a1 = v20;
    v9 = v19;
    v10 = v18;
    v5 = v17;
    goto LABEL_23;
  }
  HIBYTE(v64) = v15;
  if (v15)
LABEL_23:
    memmove(v16, v14, v15);
  *((_BYTE *)v16 + v15) = 0;
  v65 = 1;
  v24 = __p;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v11 >= 0x17)
  {
    v26 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v26 = v11 | 7;
    v27 = v26 + 1;
    v24 = operator new(v26 + 1);
    __p[1] = (void *)v11;
    v67 = v27 | 0x8000000000000000;
    __p[0] = v24;
  }
  else
  {
    HIBYTE(v67) = v11;
    if (!v11)
    {
      LOBYTE(__p[0]) = 0;
      v68 = 1;
      v25 = object[0];
      if ((SHIBYTE(v67) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v24, v10, v11);
  *((_BYTE *)v24 + v11) = 0;
  v68 = 1;
  v25 = object[0];
  if ((SHIBYTE(v67) & 0x80000000) == 0)
  {
LABEL_28:
    if (!v65)
      goto LABEL_37;
LABEL_35:
    if (SHIBYTE(v64) < 0)
      operator delete(object[1]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p[0]);
  if (v65)
    goto LABEL_35;
LABEL_37:
  if (object[0])
    os_release(object[0]);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v28 = _os_log_pack_size();
    v29 = (std::__shared_weak_count_vtbl *)operator new(v28, (std::align_val_t)8uLL);
    v30 = (std::__shared_weak_count *)operator new();
    v31 = v30;
    v30->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v30->__shared_weak_owners_ = 0;
    v30[1].__vftable = v29;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v31);
    }
    v35 = _os_log_pack_fill();
    *(_DWORD *)v35 = 134217984;
    *(double *)(v35 + 4) = v8;
    v36 = (_QWORD *)operator new();
    v37 = *(unsigned __int8 *)(v9 + 39);
    v38 = v53;
    if ((v37 & 0x80u) != 0)
    {
      v38 = *(const char **)(v9 + 16);
      v37 = *(_QWORD *)(v9 + 24);
    }
    *v36 = v29;
    v36[1] = v29;
    v36[2] = v31;
    v36[3] = 0;
    v36[4] = 0;
    v36[5] = v38;
    v36[6] = v37;
    *((_BYTE *)v36 + 56) = 1;
    object[0] = v36;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), object);
    v39 = object[0];
    object[0] = 0;
    if (v39)
    {
      v40 = (std::__shared_weak_count *)*((_QWORD *)v39 + 4);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = (std::__shared_weak_count *)*((_QWORD *)v39 + 2);
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      MEMORY[0x212BC6398](v39, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v25, OS_LOG_TYPE_INFO);
    LODWORD(object[0]) = 134217984;
    *(void **)((char *)object + 4) = *(void **)&v8;
    v46 = (void *)_os_log_send_and_compose_impl();
    if (v46)
      free(v46);
  }
  if (v2)
  {
    v47 = *(_QWORD *)(a1 + 8);
    v48.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v49 = (double)(v48.__d_.__rep_ - *(_QWORD *)v47) / 1000000000.0;
    *(std::chrono::steady_clock::time_point *)v47 = v48;
    *(double *)(v47 + 8) = *(double *)(v47 + 8) + v49;
    sub_20E8C003C((uint64_t)v54, "  Done, it took %f", v49);
    sub_20E863570((uint64_t)v54);
  }
  sub_20E863570((uint64_t)v54);
  v50 = v60;
  if (v60)
  {
    v51 = (unint64_t *)&v60->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_20EE7CDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a13);
  v31 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EE7CF9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio11slam_engine25OfflineOptimizeTrajectoryERKNS"
                     "5_16map_optimization28OfflineMapOptimizationConfigERKNS3_6vectorINS5_8odometry46VFusionTrajectoryKe"
                     "yframeWithOriginalTimestampENS3_9allocatorISD_EEEERKNSB_INSB_INS5_8cv_types14IMUMeasurementENSE_ISK"
                     "_EEEENSE_ISM_EEEERKNS5_8geometry19InertialSensorModelERNS5_13mapping_types7MapDataENS5_4util12Runni"
                     "ngTimerEE3$_1JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio11slam_engine25OfflineOptimizeTraj"
                                "ectoryERKNS5_16map_optimization28OfflineMapOptimizationConfigERKNS3_6vectorINS5_8odometr"
                                "y46VFusionTrajectoryKeyframeWithOriginalTimestampENS3_9allocatorISD_EEEERKNSB_INSB_INS5_"
                                "8cv_types14IMUMeasurementENSE_ISK_EEEENSE_ISM_EEEERKNS5_8geometry19InertialSensorModelER"
                                "NS5_13mapping_types7MapDataENS5_4util12RunningTimerEE3$_1JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio11slam_engine25OfflineOptimizeTrajectoryERKNS5_16map_optimization28OfflineMapOptimizationConfigERKNS3_6vectorINS5_8odometry46VFusionTrajectoryKeyframeWithOriginalTimestampENS3_9allocatorISD_EEEERKNSB_INSB_INS5_8cv_types14IMUMeasurementENSE_ISK_EEEENSE_ISM_EEEERKNS5_8geometry19InertialSensorModelERNS5_13mapping_types7MapDataENS5_4util12RunningTimerEE3$_1JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio11slam_engine25OfflineOptimizeTrajectoryERKNS5_16map_optimization28OfflineMapOptimizationConfigERKNS3_6vectorINS5_8odometry46VFusionTrajectoryKeyframeWithOriginalTimestampENS3_9allocatorISD_EEEERKNSB_INSB_INS5_8cv_types14IMUMeasurementENSE_ISK_EEEENSE_ISM_EEEERKNS5_8geometry19InertialSensorModelERNS5_13mapping_types7MapDataENS5_4util12RunningTimerEE3$_1JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE7D008()
{
  return &unk_24C9EE9F0;
}

uint64_t *sub_20EE7D014(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 80);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    sub_20E8E90DC(v2 + 24);
    sub_20EE7D0A8(*(_QWORD **)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10A0C40F3FF88D7);
  }
  return a1;
}

void sub_20EE7D0A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_20EE7D0A8(*a1);
    sub_20EE7D0A8(a1[1]);
    v2 = (std::__shared_weak_count *)a1[7];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_6:
      operator delete(a1);
    }
  }
}

uint64_t *sub_20EE7D128(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;

  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = (uint64_t)v2;
    operator delete(v2);
  }
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
  {
    v4 = *(void **)(v3 + 48);
    if (v4)
    {
      *(_QWORD *)(v3 + 56) = v4;
      operator delete(v4);
    }
    v5 = *(void **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(v3 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v3, 0x1030C40F7208886);
  }
  v6 = a1[8];
  a1[8] = 0;
  if (v6)
    MEMORY[0x212BC6398](v6, 0x1000C40FDACBBE0);
  v7 = a1[5];
  if (v7)
  {
    v8 = a1[6];
    v9 = (void *)a1[5];
    if (v8 != v7)
    {
      do
      {
        v10 = *(std::__shared_weak_count **)(v8 - 8);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v8 -= 16;
      }
      while (v8 != v7);
      v9 = (void *)a1[5];
    }
    a1[6] = v7;
    operator delete(v9);
  }
  v13 = a1[4];
  a1[4] = 0;
  if (v13)
  {
    if (*(_QWORD *)(v13 + 24))
    {
      v14 = 0;
      v15 = (_QWORD *)(v13 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v13 + v14) & 0x80000000) == 0)
        {
          v16 = *(std::__shared_weak_count **)(*v15 + 32 * v14 + 24);
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        ++v14;
      }
      while (v14 != *(_QWORD *)(v13 + 24));
      operator delete(*(void **)v13);
      *(_QWORD *)v13 = &unk_2102DAFF0;
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v13, 0x10A0C40EE0660CCLL);
  }
  v19 = a1[3];
  a1[3] = 0;
  if (v19)
  {
    if (*(_QWORD *)(v19 + 24))
    {
      v20 = 0;
      v21 = (_QWORD *)(v19 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v19 + v20) & 0x80000000) == 0)
        {
          v22 = *(std::__shared_weak_count **)(*v21 + 32 * v20 + 24);
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
        ++v20;
      }
      while (v20 != *(_QWORD *)(v19 + 24));
      operator delete(*(void **)v19);
      *(_QWORD *)v19 = &unk_2102DAFF0;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(v19 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v19, 0x10A0C40EE0660CCLL);
  }
  v25 = a1[2];
  a1[2] = 0;
  if (v25)
  {
    if (*(_QWORD *)(v25 + 24))
    {
      v26 = 0;
      v27 = (_QWORD *)(v25 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v25 + v26) & 0x80000000) == 0)
        {
          v28 = *(std::__shared_weak_count **)(*v27 + 32 * v26 + 24);
          if (v28)
          {
            v29 = (unint64_t *)&v28->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        ++v26;
      }
      while (v26 != *(_QWORD *)(v25 + 24));
      operator delete(*(void **)v25);
      *(_QWORD *)v25 = &unk_2102DAFF0;
      *(_OWORD *)v27 = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v25, 0x10A0C40EE0660CCLL);
  }
  v31 = a1[1];
  a1[1] = 0;
  if (v31)
  {
    v32 = *(std::__shared_weak_count **)(v31 + 80);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    sub_20E8E90DC(v31 + 24);
    sub_20EE7D0A8(*(_QWORD **)(v31 + 8));
    MEMORY[0x212BC6398](v31, 0x10A0C40F3FF88D7);
  }
  v35 = *a1;
  *a1 = 0;
  if (v35)
    sub_20E8E922C((uint64_t)a1, v35);
  return a1;
}

void sub_20EE7D4DC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE7D4F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EEA10;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE7D524(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EEA10;
  a2[1] = v2;
  return result;
}

BOOL sub_20EE7D540(uint64_t a1, _QWORD *a2)
{
  return *(_QWORD *)(a1 + 8) == *a2;
}

uint64_t sub_20EE7D554(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine38CreateExternalSubmapsFromMergedMapDataEONSt3__110unique_ptrINS0_13mapping"
                     "_types7MapDataENS2_14default_deleteIS5_EEEERKyE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine38CreateExternalSubmapsFromMergedMapDataEONSt3__110unique_ptrINS"
                                "0_13mapping_types7MapDataENS2_14default_deleteIS5_EEEERKyE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine38CreateExternalSubmapsFromMergedMapDataEONSt3__110unique_ptrINS0_13mapping_types7MapDataENS2_14default_deleteIS5_EEEERKyE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine38CreateExternalSubmapsFromMergedMapDataEONSt3__110unique_ptrINS0_13mapping_types7MapDataENS2_14default_deleteIS5_EEEERKyE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE7D5C0()
{
  return &unk_24C9EEA70;
}

uint64_t sub_20EE7D5CC(uint64_t a1)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD **v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD *v25;
  _QWORD *v27;
  int64x2_t v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t *v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  *(int64x2_t *)a1 = vdupq_n_s64(0x12CuLL);
  *(_DWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 21) = 0;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 32) = xmmword_210384C80;
  *(_OWORD *)(a1 + 48) = _Q1;
  v30 = _Q1;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 72) = xmmword_2103857C8;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 96) = xmmword_2103857C8;
  *(_QWORD *)(a1 + 112) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 136) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 120) = xmmword_2103857C8;
  *(_QWORD *)(a1 + 160) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 144) = xmmword_2103857C8;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0xFFEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 248) = 1;
  *(_DWORD *)(a1 + 249) = 0;
  *(_QWORD *)(a1 + 256) = -1;
  *(_WORD *)(a1 + 264) = 1;
  *(_WORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 274) = 1;
  *(_DWORD *)(a1 + 275) = 0;
  *(_BYTE *)(a1 + 279) = 0;
  *(_QWORD *)(a1 + 280) = 0x4014000000000000;
  *(_OWORD *)(a1 + 288) = xmmword_210384C90;
  *(_OWORD *)(a1 + 304) = xmmword_210384CA0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 320) = xmmword_210385890;
  *(_OWORD *)(a1 + 336) = unk_2103858A0;
  *(_QWORD *)(a1 + 392) = 0x3FD0000000000000;
  *(_OWORD *)(a1 + 376) = unk_2103858C8;
  *(_OWORD *)(a1 + 360) = xmmword_2103858B8;
  *(_OWORD *)(a1 + 400) = xmmword_210384CB0;
  *(_DWORD *)(a1 + 416) = 40;
  *(_WORD *)(a1 + 424) = 0;
  __asm { FMOV            V0.2D, #2.5 }
  *(_OWORD *)(a1 + 432) = _Q0;
  *(_QWORD *)(a1 + 448) = 0x4008000000000000;
  *(_WORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_210378C40;
  *(_QWORD *)(a1 + 480) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = xmmword_210384CC0;
  *(_QWORD *)(a1 + 512) = 0x4024000000000000;
  *(_DWORD *)(a1 + 520) = 100;
  *(_BYTE *)(a1 + 524) = 0;
  *(_WORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = 0x3F947AE147AE14A3;
  *(_OWORD *)(a1 + 544) = xmmword_210384CD0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  v8 = operator new(0x18uLL);
  *(_QWORD *)(a1 + 560) = v8;
  *(_QWORD *)(a1 + 576) = v8 + 3;
  *(_OWORD *)v8 = xmmword_2103858E0;
  v8[2] = 0x3FB999999999999CLL;
  *(_QWORD *)(a1 + 568) = v8 + 3;
  *(_WORD *)(a1 + 607) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 631) = 0;
  *(_DWORD *)(a1 + 632) = 2;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  v9 = operator new(8uLL);
  *(_QWORD *)(a1 + 640) = v9;
  *v9++ = 0x100000000;
  *(_QWORD *)(a1 + 656) = v9;
  *(_QWORD *)(a1 + 648) = v9;
  *(_DWORD *)(a1 + 664) = 5;
  *(_QWORD *)(a1 + 672) = 0x3F40624DD2F1A9FCLL;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 685) = 0;
  *(_QWORD *)(a1 + 696) = 0x3F50624DD2F1A9FCLL;
  *(_OWORD *)(a1 + 704) = xmmword_210384CE0;
  *(_OWORD *)(a1 + 720) = xmmword_210384CF0;
  *(_BYTE *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 744) = 0x3F947AE147AE14A3;
  *(_OWORD *)(a1 + 752) = xmmword_210384CD0;
  *(_OWORD *)(a1 + 768) = xmmword_210384D00;
  *(_QWORD *)(a1 + 784) = 0x40239D013A92A305;
  *(_QWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  v10 = operator new(0x18uLL);
  *(_QWORD *)(a1 + 840) = v10;
  *(_QWORD *)(a1 + 856) = v10 + 3;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  *(_QWORD *)(a1 + 848) = v10 + 3;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  v11 = operator new(0x18uLL);
  *(_QWORD *)(a1 + 864) = v11;
  *(_QWORD *)(a1 + 880) = v11 + 3;
  *(_OWORD *)v11 = xmmword_2103858E0;
  v11[2] = 0x3FB999999999999CLL;
  *(_QWORD *)(a1 + 872) = v11 + 3;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  v12 = operator new(0x18uLL);
  *(_QWORD *)(a1 + 888) = v12;
  *(_QWORD *)(a1 + 904) = v12 + 3;
  v12[1] = 0;
  v12[2] = 0;
  *v12 = 0;
  *(_QWORD *)(a1 + 896) = v12 + 3;
  *(_QWORD *)(a1 + 920) = 0x3F1A36E2EB1C432DLL;
  *(_OWORD *)(a1 + 928) = xmmword_210384D10;
  *(_OWORD *)(a1 + 944) = xmmword_210384D20;
  *(_OWORD *)(a1 + 960) = xmmword_210384D30;
  *(_QWORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 984) = 0;
  *(_DWORD *)(a1 + 1004) = 5;
  *(_WORD *)(a1 + 1000) = 0;
  sub_20EE81B20(a1 + 1008);
  __asm { FMOV            V0.2D, #3.0 }
  *(_OWORD *)(a1 + 1744) = _Q0;
  *(_OWORD *)(a1 + 1760) = xmmword_210384D40;
  __asm { FMOV            V0.2D, #6.0 }
  *(_OWORD *)(a1 + 1776) = _Q0;
  *(_OWORD *)(a1 + 1792) = xmmword_210384D50;
  *(_OWORD *)(a1 + 1808) = xmmword_210384D60;
  *(int64x2_t *)(a1 + 1824) = vdupq_n_s64(0x3FB999999999999AuLL);
  v29 = vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
  *(int64x2_t *)(a1 + 1840) = v29;
  *(_OWORD *)(a1 + 1856) = v30;
  *(_OWORD *)(a1 + 1872) = xmmword_210384D70;
  *(_QWORD *)(a1 + 1888) = 0;
  *(_BYTE *)(a1 + 1912) = 0;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_QWORD *)(a1 + 1920) = 0x3EB0C6F7A0B5ED8DLL;
  *(_OWORD *)(a1 + 1928) = xmmword_2103858F8;
  *(_QWORD *)(a1 + 1944) = 0x3FC5554FBDAD7519;
  *(_QWORD *)(a1 + 1968) = 0x3FE0000000000000;
  *(_OWORD *)(a1 + 1952) = xmmword_2103859D0;
  *(_BYTE *)(a1 + 1976) = 1;
  *(_OWORD *)(a1 + 1980) = xmmword_210384D80;
  *(_DWORD *)(a1 + 1996) = 1;
  *(_QWORD *)(a1 + 2000) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 2008) = 0;
  sub_20EE81D98(a1 + 2016);
  *(_QWORD *)(a1 + 2856) = 10;
  *(_QWORD *)(a1 + 2864) = 5;
  *(_QWORD *)(a1 + 2872) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 2880) = 0;
  *(_QWORD *)(a1 + 2888) = 0x3F1A36E2EB1C432DLL;
  *(_OWORD *)(a1 + 2896) = xmmword_210384D90;
  *(_OWORD *)(a1 + 2912) = xmmword_210384DA0;
  *(_OWORD *)(a1 + 2928) = xmmword_210384DB0;
  *(_OWORD *)(a1 + 2944) = xmmword_210384DC0;
  *(_QWORD *)(a1 + 2960) = 0xA00000002;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_WORD *)(a1 + 3016) = 0;
  *(_OWORD *)(a1 + 3024) = xmmword_2102E0CB0;
  *(_OWORD *)(a1 + 3040) = xmmword_210384DD0;
  *(_QWORD *)(a1 + 3056) = 4;
  *(_QWORD *)(a1 + 3064) = 0;
  *(_OWORD *)(a1 + 3072) = 0u;
  *(int64x2_t *)(a1 + 3088) = v29;
  *(int64x2_t *)(a1 + 3104) = v29;
  *(int64x2_t *)(a1 + 3120) = v29;
  *(_OWORD *)(a1 + 3136) = xmmword_210384DE0;
  *(_OWORD *)(a1 + 3152) = xmmword_2102E6730;
  *(_QWORD *)(a1 + 3168) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 3176) = 0;
  *(_WORD *)(a1 + 3180) = 0;
  *(_BYTE *)(a1 + 3182) = 1;
  *(_QWORD *)(a1 + 3184) = 0x10000000ALL;
  *(_WORD *)(a1 + 3192) = 0;
  *(_DWORD *)(a1 + 3196) = -1;
  *(_QWORD *)(a1 + 3216) = 0;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_WORD *)(a1 + 3224) = 1;
  *(_BYTE *)(a1 + 3226) = 0;
  *(_DWORD *)(a1 + 3228) = 100;
  *(_WORD *)(a1 + 3232) = 0;
  *(_DWORD *)(a1 + 3236) = 0;
  *(_QWORD *)(a1 + 3240) = 0x1000001010100;
  *(_BYTE *)(a1 + 3248) = 0;
  *(_QWORD *)(a1 + 3264) = -1;
  *(_QWORD *)(a1 + 3256) = -1;
  *(_QWORD *)(a1 + 3272) = 3;
  *(_QWORD *)(a1 + 3280) = 0x1E00000001;
  *(_BYTE *)(a1 + 3288) = 0;
  *(_OWORD *)(a1 + 3296) = xmmword_210384DF0;
  *(_OWORD *)(a1 + 3312) = xmmword_210384E00;
  *(_QWORD *)(a1 + 3328) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 3336) = 130;
  *(_QWORD *)(a1 + 3344) = 0x3FF8000000000000;
  *(_BYTE *)(a1 + 3352) = 0;
  *(_OWORD *)(a1 + 3360) = xmmword_210384E10;
  *(_OWORD *)(a1 + 3376) = xmmword_210384E20;
  *(_OWORD *)(a1 + 3392) = xmmword_210384E30;
  *(_OWORD *)(a1 + 3408) = xmmword_210384E40;
  *(_OWORD *)(a1 + 3424) = xmmword_210384E50;
  *(int64x2_t *)(a1 + 3440) = vdupq_n_s64(0x3FC999999999999AuLL);
  *(_OWORD *)(a1 + 3456) = xmmword_210384E60;
  *(_BYTE *)(a1 + 3472) = 0;
  *(_QWORD *)(a1 + 3480) = 0x3FE6666666666666;
  *(_QWORD *)(a1 + 3488) = 100;
  *(_QWORD *)(a1 + 3496) = 0x4000000000000000;
  *(_OWORD *)(a1 + 3504) = xmmword_210384E70;
  *(_DWORD *)(a1 + 3520) = 200;
  *(_BYTE *)(a1 + 3524) = 1;
  *(_QWORD *)(a1 + 3528) = 30;
  *(_DWORD *)(a1 + 3536) = 20;
  *(_QWORD *)(a1 + 3544) = 0x3F8EB851EB851EB8;
  *(_QWORD *)(a1 + 3552) = 0x3FC893011F31982ELL;
  *(_QWORD *)(a1 + 3560) = 0xF0000001ELL;
  *(_DWORD *)(a1 + 3568) = 3;
  *(_QWORD *)(a1 + 3576) = 0;
  *(_QWORD *)(a1 + 3584) = 0x4004000000000000;
  *(_QWORD *)(a1 + 3592) = 12;
  *(_OWORD *)(a1 + 3600) = xmmword_210384E80;
  *(_QWORD *)(a1 + 3616) = 10;
  *(_QWORD *)(a1 + 3624) = 0x500000014;
  *(_OWORD *)(a1 + 3632) = xmmword_2102E6720;
  *(_OWORD *)(a1 + 3648) = xmmword_210384E90;
  *(_QWORD *)(a1 + 3664) = 0xA00000014;
  *(_DWORD *)(a1 + 3672) = 30;
  *(_OWORD *)(a1 + 3680) = xmmword_210384EA0;
  *(_OWORD *)(a1 + 3696) = xmmword_210384EB0;
  *(_OWORD *)(a1 + 3712) = xmmword_2102E6730;
  *(_QWORD *)(a1 + 3728) = 5;
  *(_QWORD *)(a1 + 3736) = 0x3FB999999999999ALL;
  *(int64x2_t *)(a1 + 3744) = vdupq_n_s64(0x3FCCCCCCCCCCCCCDuLL);
  *(_OWORD *)(a1 + 3760) = xmmword_210384EC0;
  *(_OWORD *)(a1 + 3776) = v30;
  *(_OWORD *)(a1 + 3792) = xmmword_210384ED0;
  *(_QWORD *)(a1 + 3808) = 10;
  *(_QWORD *)(a1 + 3816) = 0xF00000005;
  *(_OWORD *)(a1 + 3824) = xmmword_210384EE0;
  *(_OWORD *)(a1 + 3840) = xmmword_210384EF0;
  *(_OWORD *)(a1 + 3856) = xmmword_210384F00;
  *(_QWORD *)(a1 + 3872) = 0x3FE3333333333333;
  *(_QWORD *)(a1 + 3880) = 0x1E00000000;
  *(_QWORD *)(a1 + 3888) = 0;
  *(_BYTE *)(a1 + 3896) = 1;
  *(_OWORD *)(a1 + 3904) = xmmword_210384F10;
  *(_OWORD *)(a1 + 3920) = xmmword_210384F20;
  *(_QWORD *)(a1 + 3936) = 0x3F947AE147AE147BLL;
  *(_DWORD *)(a1 + 3944) = 3;
  *(_OWORD *)(a1 + 3952) = xmmword_210384F30;
  *(_QWORD *)(a1 + 3968) = 0x3FF4CCCCCCCCCCCDLL;
  *(_DWORD *)(a1 + 3976) = 20;
  *(_QWORD *)(a1 + 3992) = 0;
  *(_QWORD *)(a1 + 3984) = 0;
  *(_QWORD *)(a1 + 4000) = 0x280000000ALL;
  *(_QWORD *)(a1 + 4008) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 4016) = 0x400000002;
  *(_QWORD *)(a1 + 4024) = 0x3FD3333333333333;
  *(_DWORD *)(a1 + 4032) = 4;
  *(_QWORD *)(a1 + 4040) = 0x4000C152382D7365;
  *(_WORD *)(a1 + 4048) = 0;
  *(_QWORD *)(a1 + 4056) = 0x3FAACEE9F37BEBD5;
  *(_BYTE *)(a1 + 4064) = 0;
  *(_QWORD *)(a1 + 4072) = 0;
  *(_OWORD *)(a1 + 4080) = xmmword_2102E6700;
  *(_OWORD *)(a1 + 4096) = xmmword_210384F40;
  *(_QWORD *)(a1 + 4112) = 0x300000002;
  *(_BYTE *)(a1 + 4120) = 1;
  *(_QWORD *)(a1 + 4128) = 20;
  *(_WORD *)(a1 + 4136) = 0;
  *(_BYTE *)(a1 + 4138) = 0;
  *(_OWORD *)(a1 + 4144) = xmmword_210384F50;
  *(_QWORD *)(a1 + 4160) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 4168) = 0;
  *(_DWORD *)(a1 + 4172) = 0;
  *(_QWORD *)(a1 + 4176) = 0x3F847AE147AE147BLL;
  *(_DWORD *)(a1 + 4184) = 0;
  *(_BYTE *)(a1 + 4188) = 0;
  *(_OWORD *)(a1 + 4192) = v30;
  *(_OWORD *)(a1 + 4208) = v30;
  *(int64x2_t *)(a1 + 4224) = vdupq_n_s64(0x40C3880000000000uLL);
  *(_WORD *)(a1 + 4240) = 257;
  *(_QWORD *)(a1 + 4248) = 0;
  *(_OWORD *)(a1 + 4256) = xmmword_210384F60;
  *(_QWORD *)(a1 + 4272) = 0x3FD3333333333333;
  *(_QWORD *)(a1 + 4280) = 2;
  *(_OWORD *)(a1 + 4288) = xmmword_210384F70;
  *(_OWORD *)(a1 + 4304) = xmmword_210378C50;
  *(_QWORD *)(a1 + 4320) = 50;
  *(_QWORD *)(a1 + 4336) = 0;
  *(_QWORD *)(a1 + 4328) = 0;
  *(_QWORD *)(a1 + 4344) = 0;
  v15 = operator new(8uLL);
  *v15 = 20;
  *(_QWORD *)(a1 + 4328) = v15;
  *(_QWORD *)(a1 + 4344) = v15 + 1;
  *(_QWORD *)(a1 + 4336) = v15 + 1;
  *(_QWORD *)(a1 + 4352) = 0;
  *(_QWORD *)(a1 + 4368) = 0;
  *(_QWORD *)(a1 + 4360) = 0;
  v16 = operator new(8uLL);
  *(_QWORD *)(a1 + 4352) = v16;
  *v16++ = 0x3FD999999999999ALL;
  *(_QWORD *)(a1 + 4368) = v16;
  *(_QWORD *)(a1 + 4360) = v16;
  *(_QWORD *)(a1 + 4376) = 0x3FECCCCCCCCCCCCDLL;
  *(_OWORD *)(a1 + 4384) = xmmword_210384F80;
  *(_OWORD *)(a1 + 4400) = xmmword_210384F90;
  *(_QWORD *)(a1 + 4416) = 0;
  *(_WORD *)(a1 + 4424) = 256;
  *(_OWORD *)(a1 + 4432) = xmmword_210385978;
  *(_QWORD *)(a1 + 4448) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 4456) = 0;
  *(_QWORD *)(a1 + 4464) = 0x3FEBB645A1CAC083;
  *(_QWORD *)(a1 + 4472) = 50;
  *(_BYTE *)(a1 + 4480) = 0;
  *(_BYTE *)(a1 + 4488) = 0;
  *(_DWORD *)(a1 + 4492) = 20;
  *(_QWORD *)(a1 + 4496) = 0xA0000000ALL;
  *(_QWORD *)(a1 + 4504) = 0;
  *(_BYTE *)(a1 + 4512) = 0;
  *(_DWORD *)(a1 + 4520) = 0;
  *(_QWORD *)(a1 + 4528) = 0;
  *(_BYTE *)(a1 + 4536) = 1;
  *(_OWORD *)(a1 + 4544) = xmmword_210384FA0;
  *(_QWORD *)(a1 + 4560) = 0x3FB70A3D70A3D70ALL;
  *(_DWORD *)(a1 + 4568) = 1;
  *(_QWORD *)(a1 + 4576) = 0x3F847AE147AE147BLL;
  *(_BYTE *)(a1 + 4584) = 1;
  *(_DWORD *)(a1 + 4588) = 15;
  *(_OWORD *)(a1 + 4592) = xmmword_210384FB0;
  *(_BYTE *)(a1 + 4608) = 1;
  *(_DWORD *)(a1 + 4616) = 100;
  *(_QWORD *)(a1 + 4624) = 0x4010000000000000;
  *(_QWORD *)(a1 + 4632) = 0xA00000032;
  *(_QWORD *)(a1 + 4640) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 4680) = xmmword_2103859B0;
  *(_OWORD *)(a1 + 4696) = unk_2103859C0;
  *(_OWORD *)(a1 + 4648) = xmmword_210385990;
  *(_OWORD *)(a1 + 4664) = unk_2103859A0;
  *(_QWORD *)(a1 + 4712) = 0x4059000000000000;
  *(int64x2_t *)(a1 + 4720) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 4736) = xmmword_210384FC0;
  *(_QWORD *)(a1 + 4752) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 4760) = 0x3E80000001ELL;
  *(_OWORD *)(a1 + 4768) = xmmword_210384FD0;
  *(_QWORD *)(a1 + 4784) = 0x3FE0000000000000;
  *(_WORD *)(a1 + 4792) = 256;
  *(_DWORD *)(a1 + 4796) = 60;
  *(_QWORD *)(a1 + 4800) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 4808) = 16777217;
  *(_QWORD *)(a1 + 4812) = 0x200000001;
  *(_QWORD *)(a1 + 4824) = 0x4024000000000000;
  *(_QWORD *)(a1 + 4832) = 0x401C000000000000;
  *(_DWORD *)(a1 + 4840) = 100;
  *(_BYTE *)(a1 + 4844) = 0;
  *(_DWORD *)(a1 + 4848) = 1;
  *(_QWORD *)(a1 + 4856) = 0x4074F00000000000;
  *(_OWORD *)(a1 + 4864) = xmmword_210384FE0;
  *(_BYTE *)(a1 + 4880) = 0;
  *(_QWORD *)(a1 + 4888) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 4896) = 65537;
  *(_WORD *)(a1 + 4900) = 257;
  *(_BYTE *)(a1 + 4902) = 0;
  v17 = (_QWORD **)(a1 + 4904);
  v33 = xmmword_210384FF0;
  *(_QWORD *)(a1 + 4920) = 0;
  *(_QWORD *)(a1 + 4912) = 0;
  *(_QWORD *)(a1 + 4904) = a1 + 4912;
  v18 = sub_20E86BEBC((uint64_t **)(a1 + 4904), (uint64_t *)(a1 + 4912), &v32, &v31, (unsigned int *)&v33);
  if (!*v18)
  {
    v19 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v19 + 28) = v33;
    v20 = v32;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = (uint64_t)v20;
    *v18 = (uint64_t)v19;
    v21 = (_QWORD *)**v17;
    if (v21)
    {
      *v17 = v21;
      v19 = (uint64_t *)*v18;
    }
    sub_20E868578(*(uint64_t **)(a1 + 4912), v19);
    ++*(_QWORD *)(a1 + 4920);
  }
  v22 = sub_20E86BEBC((uint64_t **)(a1 + 4904), (uint64_t *)(a1 + 4912), &v32, &v31, (unsigned int *)&v33 + 2);
  if (!*v22)
  {
    v23 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v23 + 28) = *((_QWORD *)&v33 + 1);
    v24 = v32;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = (uint64_t)v24;
    *v22 = (uint64_t)v23;
    v25 = (_QWORD *)**v17;
    if (v25)
    {
      *v17 = v25;
      v23 = (uint64_t *)*v22;
    }
    sub_20E868578(*(uint64_t **)(a1 + 4912), v23);
    ++*(_QWORD *)(a1 + 4920);
  }
  *(_DWORD *)(a1 + 4928) = 320;
  *(_BYTE *)(a1 + 4932) = 1;
  *(_OWORD *)(a1 + 4936) = xmmword_210385000;
  *(_OWORD *)(a1 + 4952) = xmmword_210385010;
  *(_DWORD *)(a1 + 4968) = 1065353216;
  *(_BYTE *)(a1 + 4972) = 1;
  *(_QWORD *)(a1 + 4976) = 0x32000003E8;
  *(_QWORD *)(a1 + 4984) = 0x3DB2B8C23D0EFA35;
  *(_DWORD *)(a1 + 4992) = 0;
  *(_BYTE *)(a1 + 4996) = 1;
  *(_QWORD *)(a1 + 5000) = 0x3D0EFA3500000000;
  *(_DWORD *)(a1 + 5008) = 16843008;
  *(_BYTE *)(a1 + 5012) = 0;
  sub_20EE82058(a1 + 5016);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 5984) = _Q0;
  *(_OWORD *)(a1 + 6016) = _Q0;
  *(_OWORD *)(a1 + 6032) = xmmword_2102E6750;
  *(_OWORD *)(a1 + 5968) = xmmword_2102E6760;
  *(_OWORD *)(a1 + 6000) = xmmword_2102E6770;
  *(_WORD *)(a1 + 6048) = 0;
  sub_20EE824AC(a1 + 6056);
  *(_OWORD *)(a1 + 8896) = 0u;
  *(_OWORD *)(a1 + 8880) = 0u;
  *(_OWORD *)(a1 + 8864) = 0u;
  *(_BYTE *)(a1 + 8912) = 0;
  *(_QWORD *)(a1 + 8920) = 0x403E000000000000;
  *(_QWORD *)(a1 + 8928) = 0x4060400000000000;
  *(_BYTE *)(a1 + 8936) = 0;
  *(_QWORD *)(a1 + 8976) = 0;
  *(_QWORD *)(a1 + 8992) = 0;
  *(_QWORD *)(a1 + 8984) = 0;
  *(_QWORD *)(a1 + 8944) = 0;
  *(_QWORD *)(a1 + 8960) = 0;
  *(_QWORD *)(a1 + 8952) = 0;
  *(_BYTE *)(a1 + 8968) = 0;
  sub_20E8A9678((std::string *)(a1 + 8976), (std::string *)"/var/mobile/Library/Logs/com.apple.AppleCV3D/mapping_io.log", (std::string *)"");
  *(_QWORD *)(a1 + 9000) = 2516580;
  *(_DWORD *)(a1 + 9008) = 1;
  *(_QWORD *)(a1 + 9016) = 400000000;
  *(_OWORD *)(a1 + 9024) = xmmword_210385020;
  *(_BYTE *)(a1 + 9040) = 0;
  *(_QWORD *)(a1 + 9048) = -1;
  *(_BYTE *)(a1 + 9056) = 0;
  *(_QWORD *)(a1 + 9064) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 9072) = xmmword_210382640;
  *(_QWORD *)(a1 + 9088) = 0x4014000000000000;
  *(_BYTE *)(a1 + 9096) = 0;
  *(_DWORD *)(a1 + 9100) = 2;
  *(_WORD *)(a1 + 9127) = 256;
  *(_BYTE *)(a1 + 9104) = 0;
  *(_QWORD *)(a1 + 9136) = 0x4026000000000000;
  *(_DWORD *)(a1 + 9144) = 10;
  *(_QWORD *)(a1 + 9152) = 0;
  *(_QWORD *)(a1 + 9168) = 0;
  *(_QWORD *)(a1 + 9160) = 0;
  v27 = operator new(0x18uLL);
  *(_QWORD *)(a1 + 9152) = v27;
  *(_QWORD *)(a1 + 9168) = v27 + 3;
  *(_OWORD *)v27 = xmmword_210385A50;
  v27[2] = 0x3FD70A3D70A3D70ALL;
  *(_QWORD *)(a1 + 9160) = v27 + 3;
  *(_QWORD *)(a1 + 9176) = 0x3FF8000000000000;
  *(_OWORD *)(a1 + 9184) = xmmword_210385030;
  *(_BYTE *)(a1 + 9200) = 0;
  *(_QWORD *)(a1 + 9208) = 0x100000100000100;
  *(_BYTE *)(a1 + 9216) = 1;
  *(_DWORD *)(a1 + 9217) = 0;
  *(_BYTE *)(a1 + 9221) = 0;
  *(_QWORD *)(a1 + 9224) = 30;
  *(_OWORD *)(a1 + 9232) = xmmword_2102DBC60;
  *(_QWORD *)(a1 + 9248) = 2;
  *(_QWORD *)(a1 + 9256) = 0x3FD8E38EB0318B93;
  *(_OWORD *)(a1 + 9264) = xmmword_210385040;
  *(_OWORD *)(a1 + 9280) = xmmword_210385050;
  *(_QWORD *)(a1 + 9296) = 0;
  *(_QWORD *)(a1 + 9304) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 9312) = 5;
  *(_QWORD *)(a1 + 9320) = 0x404E000000000000;
  *(_OWORD *)(a1 + 9328) = xmmword_210385060;
  *(_WORD *)(a1 + 9344) = 1;
  *(_QWORD *)(a1 + 9352) = 0;
  *(_QWORD *)(a1 + 9360) = 3000;
  *(_WORD *)(a1 + 9368) = 0;
  *(_BYTE *)(a1 + 9370) = 1;
  *(_DWORD *)(a1 + 9371) = 0;
  *(_WORD *)(a1 + 9375) = 0;
  *(_QWORD *)(a1 + 9400) = 0;
  *(_OWORD *)(a1 + 9384) = 0u;
  *(_QWORD *)(a1 + 9408) = 0x4024000000000000;
  *(_WORD *)(a1 + 9416) = 0;
  *(_BYTE *)(a1 + 9447) = 0;
  *(_BYTE *)(a1 + 9424) = 0;
  *(_QWORD *)(a1 + 9448) = 0x50000012CLL;
  *(_DWORD *)(a1 + 9456) = 3;
  *(_BYTE *)(a1 + 9472) = 1;
  *(_QWORD *)(a1 + 9464) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 9480) = 0x3FB999999999999ALL;
  *(_BYTE *)(a1 + 9488) = 0;
  sub_20EE82058(a1 + 9496);
  *(_QWORD *)(a1 + 10448) = 0x4000000000000000;
  *(_OWORD *)(a1 + 10456) = xmmword_210385070;
  *(_BYTE *)(a1 + 10472) = 0;
  *(_DWORD *)(a1 + 10476) = 1;
  *(_OWORD *)(a1 + 10480) = xmmword_210385080;
  *(_QWORD *)(a1 + 10496) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 10504) = 0;
  *(_OWORD *)(a1 + 10512) = xmmword_210315730;
  *(_BYTE *)(a1 + 10528) = 0;
  *(_QWORD *)(a1 + 10536) = 0x3FB70A3D70A3D70ALL;
  *(_QWORD *)(a1 + 10544) = 0x4051800000000000;
  *(_BYTE *)(a1 + 10552) = 0;
  *(_OWORD *)(a1 + 10560) = xmmword_210385090;
  *(_OWORD *)(a1 + 10576) = xmmword_2103850A0;
  *(_QWORD *)(a1 + 10592) = 0x3FF199999999999ALL;
  *(_DWORD *)(a1 + 10600) = 30;
  *(_QWORD *)(a1 + 10608) = 0x3FC999999999999ALL;
  *(_WORD *)(a1 + 10616) = 0;
  *(_BYTE *)(a1 + 10618) = 0;
  *(_WORD *)(a1 + 10624) = 256;
  *(_QWORD *)(a1 + 10632) = 0x409C200000000000;
  *(_OWORD *)(a1 + 10640) = xmmword_2103850B0;
  *(_BYTE *)(a1 + 10656) = 0;
  *(_BYTE *)(a1 + 10680) = 0;
  *(_WORD *)(a1 + 10688) = 0;
  *(_OWORD *)(a1 + 10696) = 0u;
  *(_OWORD *)(a1 + 10712) = 0u;
  *(_OWORD *)(a1 + 10728) = 0u;
  *(_OWORD *)(a1 + 10741) = 0u;
  *(_QWORD *)(a1 + 10760) = 0x3F847AE147AE147BLL;
  *(_DWORD *)(a1 + 10768) = 256;
  *(_QWORD *)(a1 + 10776) = 0x3F60624DD2F1A9FCLL;
  *(_OWORD *)(a1 + 10784) = xmmword_2103850C0;
  *(_OWORD *)(a1 + 10800) = xmmword_2103850D0;
  *(_OWORD *)(a1 + 10816) = xmmword_2103850E0;
  *(_OWORD *)(a1 + 10832) = xmmword_2103850F0;
  *(_OWORD *)(a1 + 10848) = xmmword_210385100;
  *(_OWORD *)(a1 + 10864) = xmmword_210385110;
  *(_OWORD *)(a1 + 10880) = xmmword_210385120;
  *(_QWORD *)(a1 + 10896) = 0x3FC999999999999ALL;
  *(_QWORD *)(a1 + 10904) = 30;
  *(_QWORD *)(a1 + 10912) = 100;
  *(_QWORD *)(a1 + 10920) = 0x3FF8000000000000;
  *(_OWORD *)(a1 + 10928) = xmmword_210385130;
  *(_QWORD *)(a1 + 10944) = 0x409F400000000000;
  *(_QWORD *)(a1 + 10952) = 30000;
  *(_QWORD *)(a1 + 10960) = 0x4056800000000000;
  *(_QWORD *)(a1 + 10968) = 6000;
  *(_OWORD *)(a1 + 10976) = xmmword_210385140;
  *(_QWORD *)(a1 + 10992) = 0x3F1A36E2EB1C432DLL;
  *(_QWORD *)(a1 + 11016) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 11000) = xmmword_210385A68;
  *(_QWORD *)(a1 + 11024) = 0x401F3D70A3D70A3DLL;
  *(_BYTE *)(a1 + 11032) = 0;
  *(_OWORD *)(a1 + 11040) = xmmword_210385150;
  *(_OWORD *)(a1 + 11056) = xmmword_210385160;
  *(_OWORD *)(a1 + 11072) = xmmword_210385170;
  *(_QWORD *)(a1 + 11088) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 11096) = 0;
  *(_BYTE *)(a1 + 11127) = 13;
  strcpy((char *)(a1 + 11104), "ngv2.mlmodelc");
  *(_QWORD *)(a1 + 11128) = 6;
  *(_OWORD *)(a1 + 11136) = xmmword_210385180;
  *(_BYTE *)(a1 + 11152) = 0;
  *(_QWORD *)(a1 + 11160) = 0x40A7700000000000;
  *(_QWORD *)(a1 + 11168) = 0x3F847AE147AE147BLL;
  *(_WORD *)(a1 + 11176) = 0;
  *(_BYTE *)(a1 + 11178) = 0;
  *(_OWORD *)(a1 + 11184) = xmmword_210385190;
  *(_WORD *)(a1 + 11200) = 0;
  *(_BYTE *)(a1 + 11202) = 0;
  *(_QWORD *)(a1 + 11208) = 0x4014000000000000;
  *(_QWORD *)(a1 + 11216) = 0x4082C00000000000;
  *(_BYTE *)(a1 + 11224) = 0;
  *(_QWORD *)(a1 + 11232) = 0x4014000000000000;
  *(_QWORD *)(a1 + 11240) = 0;
  *(_WORD *)(a1 + 11248) = 256;
  *(_QWORD *)(a1 + 11256) = 40;
  *(_BYTE *)(a1 + 11264) = 0;
  *(_QWORD *)(a1 + 11272) = 40;
  *(_DWORD *)(a1 + 11280) = 1150681088;
  *(_QWORD *)(a1 + 11288) = 0x3FB0000000000000;
  *(_OWORD *)(a1 + 11296) = xmmword_2103851A0;
  *(_QWORD *)(a1 + 11312) = 0x4014000000000000;
  *(_OWORD *)(a1 + 11346) = *(_OWORD *)&algn_210385A90[10];
  *(_OWORD *)(a1 + 11336) = *(_OWORD *)algn_210385A90;
  *(_OWORD *)(a1 + 11320) = xmmword_210385A80;
  *(_BYTE *)(a1 + 11362) = 0;
  *(_BYTE *)(a1 + 11388) = 0;
  *(_DWORD *)(a1 + 11392) = 1064514355;
  *(_QWORD *)(a1 + 11400) = 0x4034000000000000;
  *(_OWORD *)(a1 + 11408) = xmmword_2103851B0;
  sub_20EE7EBDC(a1);
  return a1;
}

void sub_20EE7E9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _QWORD *v15;
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  void *v25;
  uint64_t v26;

  if (*(char *)(v16 + 31) < 0)
  {
    operator delete(*v17);
    v24 = (void *)v15[1340];
    if (!v24)
    {
LABEL_3:
      v25 = *v18;
      if (!*v18)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v24 = (void *)v15[1340];
    if (!v24)
      goto LABEL_3;
  }
  v15[1341] = v24;
  operator delete(v24);
  v25 = *v18;
  if (!*v18)
  {
LABEL_4:
    if (!*(_BYTE *)(v20 + 128))
      goto LABEL_11;
    goto LABEL_9;
  }
LABEL_8:
  v15[1338] = v25;
  operator delete(v25);
  if (!*(_BYTE *)(v20 + 128))
    goto LABEL_11;
LABEL_9:
  if (*(char *)(v20 + 127) < 0)
    operator delete(*(void **)(v20 + 104));
LABEL_11:
  sub_20E8696AC(v19);
  v26 = (uint64_t)(v15 + 1135);
  if (*(char *)(v22 + 31) < 0)
    operator delete(*(void **)(v22 + 8));
  if (*(char *)(v21 + 471) < 0)
    operator delete(*a9);
  sub_20E869744(v26);
  sub_20E869794(a11);
  sub_20E869924(a13);
  sub_20E869804(a15);
  sub_20E86989C(a10);
  _Unwind_Resume(a1);
}

void sub_20EE7EA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;

  if (*(char *)(v13 + 63) < 0)
  {
    operator delete(*v12);
    if ((*(char *)(v14 + 4031) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v14 + 4007) & 0x80000000) == 0)
        goto LABEL_8;
LABEL_7:
      operator delete(*a11);
LABEL_8:
      JUMPOUT(0x20EE7EA64);
    }
  }
  else if ((*(char *)(v14 + 4031) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v11 + 8888));
  if ((*(char *)(v14 + 4007) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20EE7EAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_20E869804(a15);
  sub_20E86989C(a10);
  _Unwind_Resume(a1);
}

void sub_20EE7EAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_20E86989C(a10);
  _Unwind_Resume(a1);
}

void sub_20EE7EB04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  *(_QWORD *)(v1 + 4336) = v3;
  operator delete(v3);
  sub_20EE81A64(v2);
  _Unwind_Resume(a1);
}

void sub_20EE7EB24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EE81A64(v1);
  _Unwind_Resume(a1);
}

void sub_20EE7EB38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869EA0(v1);
  _Unwind_Resume(a1);
}

void sub_20EE7EB4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v4;

  v1[109] = v2;
  operator delete(v2);
  v4 = (void *)v1[105];
  if (v4)
  {
    v1[106] = v4;
    operator delete(v4);
    sub_20EE81AAC((uint64_t)(v1 + 67));
    _Unwind_Resume(a1);
  }
  sub_20EE81AAC((uint64_t)(v1 + 67));
  _Unwind_Resume(a1);
}

void sub_20EE7EB9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 568) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_20EE7EBB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD **v4;

  sub_20E86872C(v3, *v4);
  sub_20EE81A24(v2);
  sub_20EE81A64(v1);
  _Unwind_Resume(a1);
}

void sub_20EE7EBDC(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v13;
  std::string *v14;
  size_t size;
  void **v16;
  std::string *v17;
  size_t v18;
  void *v19[4];
  std::string v20;
  char v21;
  char __p[23];
  char v23;
  std::string v24;
  char v25;

  *(_BYTE *)(a1 + 17) = 0;
  v2 = a1 + 6616;
  *(_QWORD *)(a1 + 5016) = 0;
  *(_BYTE *)(a1 + 2432) = 1;
  v3 = (_BYTE *)(a1 + 4136);
  *(_BYTE *)(a1 + 2500) = 0;
  *(_QWORD *)(a1 + 1040) = 10;
  *(_QWORD *)(a1 + 5048) = 0x3FC999999999999ALL;
  *(_QWORD *)(a1 + 6160) = 7;
  *(_QWORD *)(a1 + 6320) = 0x3FFC000000000000;
  *(_QWORD *)(a1 + 288) = 0x4000000000000000;
  *(_BYTE *)(a1 + 6781) = 0;
  *(_OWORD *)(a1 + 6336) = xmmword_2103851C0;
  *(_DWORD *)(a1 + 1996) = 10;
  *(_BYTE *)(a1 + 736) = 1;
  *(_WORD *)(a1 + 274) = 1;
  *(_OWORD *)(a1 + 432) = xmmword_2103851D0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 4400) = 20;
  v4 = *(_QWORD **)(a1 + 4344);
  v5 = *(_QWORD **)(a1 + 4328);
  if (v4 == v5)
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 4336) = v4;
      operator delete(v4);
      *(_QWORD *)(a1 + 4328) = 0;
      *(_QWORD *)(a1 + 4336) = 0;
      *(_QWORD *)(a1 + 4344) = 0;
    }
    v5 = operator new(8uLL);
    *(_QWORD *)(a1 + 4328) = v5;
    *(_QWORD *)(a1 + 4336) = v5;
    *(_QWORD *)(a1 + 4344) = v5 + 1;
  }
  *v5 = 15;
  *(_QWORD *)(a1 + 4336) = v5 + 1;
  v6 = *(_QWORD **)(a1 + 4368);
  v7 = *(_QWORD **)(a1 + 4352);
  if (v6 == v7)
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 4360) = v6;
      operator delete(v6);
      *(_QWORD *)(a1 + 4352) = 0;
      *(_QWORD *)(a1 + 4360) = 0;
      *(_QWORD *)(a1 + 4368) = 0;
    }
    v7 = operator new(8uLL);
    *(_QWORD *)(a1 + 4352) = v7;
    *(_QWORD *)(a1 + 4360) = v7;
    *(_QWORD *)(a1 + 4368) = v7 + 1;
  }
  *v7 = 0x3FC999999999999ALL;
  *(_QWORD *)(a1 + 4360) = v7 + 1;
  *(int64x2_t *)(a1 + 5072) = vdupq_n_s64(0x3FC999999999999AuLL);
  *(_QWORD *)(a1 + 5288) = 0xC83F800000;
  *(_QWORD *)(a1 + 5276) = 0x3E99999A3E99999ALL;
  v3[1148] = 0;
  v3[1200] = 0;
  *(_QWORD *)(a1 + 5368) = 0x403E000000000000;
  *(_QWORD *)(a1 + 5376) = 0x4034000000000000;
  __asm { FMOV            V0.2D, #3.0 }
  *(_OWORD *)(a1 + 1744) = _Q0;
  *(_QWORD *)(a1 + 1808) = 0x4018000000000000;
  *(_QWORD *)(a1 + 6328) = 0x4004000000000000;
  *(_DWORD *)(a1 + 1992) = 1;
  *(_QWORD *)(a1 + 3696) = 0x4004000000000000;
  *(_QWORD *)(a1 + 2544) = 10;
  *(_QWORD *)(a1 + 6520) = 0x4010000000000000;
  *(_QWORD *)(a1 + 6568) = 0x4010000000000000;
  *(_QWORD *)(a1 + 2520) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 2528) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 6296) = 20;
  *(_QWORD *)(a1 + 6312) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 6480) = 0x4020000000000000;
  v3[2352] = 1;
  *(_QWORD *)(a1 + 6592) = 0x4004000000000000;
  *(_BYTE *)v2 = 1;
  *v3 = 1;
  if (*(char *)(v2 + 567) < 0)
    operator delete(*(void **)(a1 + 7160));
  qmemcpy((void *)(a1 + 7160), "image_retr", 10);
  *(_BYTE *)(v2 + 554) = 105;
  *(_WORD *)(v2 + 555) = 30309;
  *(_BYTE *)(v2 + 557) = 97;
  *(_DWORD *)(a1 + 7174) = 1819697004;
  *(_BYTE *)(a1 + 7178) = 97;
  *(_WORD *)(v2 + 563) = 100;
  *(_BYTE *)(v2 + 567) = 20;
  if (*(char *)(v2 + 591) < 0)
    operator delete(*(void **)(a1 + 7184));
  qmemcpy((void *)(a1 + 7184), "covisible_keyframes", 19);
  *(_WORD *)(v2 + 587) = 0;
  *(_BYTE *)(v2 + 591) = 19;
  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&v20, "com.apple.AppleCV3D");
  strcpy(__p, "AppleCV3D-Teon.msgpack");
  v23 = 22;
  sub_20E9F7D8C((uint64_t)&v20, (std::string::size_type)__p, 0, 0, &v24);
  if (v23 < 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
LABEL_15:
  v23 = 19;
  strcpy(__p, "com.apple.AppleCV3D");
  HIBYTE(v19[2]) = 21;
  strcpy((char *)v19, "AppleCV3D-PCA.msgpack");
  sub_20E9F7D8C((uint64_t)__p, (std::string::size_type)v19, 0, 0, &v20);
  if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_22:
    operator delete(*(void **)__p);
    if (!v25)
      goto LABEL_48;
    goto LABEL_23;
  }
  operator delete(v19[0]);
  if (v23 < 0)
    goto LABEL_22;
LABEL_17:
  if (!v25)
    goto LABEL_48;
LABEL_23:
  if (v21)
  {
    v13 = (void **)(a1 + 7232);
    if ((std::string *)(a1 + 7232) != &v24)
    {
      if (*(char *)(v2 + 639) < 0)
      {
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v24;
        else
          v14 = (std::string *)v24.__r_.__value_.__r.__words[0];
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
        else
          size = v24.__r_.__value_.__l.__size_;
        sub_20E867CBC(v13, v14, size);
      }
      else if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        sub_20E867BF8(v13, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 7248) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
      }
    }
    v16 = (void **)(a1 + 7256);
    if ((std::string *)(a1 + 7256) != &v20)
    {
      if (*(char *)(v2 + 663) < 0)
      {
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v20;
        else
          v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
        else
          v18 = v20.__r_.__value_.__l.__size_;
        sub_20E867CBC(v16, v17, v18);
      }
      else if ((*((_BYTE *)&v20.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        sub_20E867BF8(v16, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v16 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 7272) = *((_QWORD *)&v20.__r_.__value_.__l + 2);
      }
    }
  }
LABEL_48:
  if (v21 && SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v25)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_20EE7F0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a24 && a23 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v30 - 40))
  {
    if (*(char *)(v30 - 41) < 0)
      operator delete(*(void **)(v30 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE7F158(uint64_t a1)
{
  _BYTE *v2;
  void **v3;
  __int128 *p_src;
  size_t v5;
  void **v6;
  __int128 *v7;
  size_t v8;
  _BYTE v10[128];
  uint64_t v11;
  char v12;
  __int128 __src;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;

  v2 = (_BYTE *)(a1 + 7281);
  sub_20EE824AC((uint64_t)v10);
  v2[1275] = v17;
  *(_DWORD *)(a1 + 8640) = v18;
  *(_QWORD *)(a1 + 6184) = v11;
  v2[1376] = v19;
  if ((_BYTE *)(a1 + 6056) != v10)
  {
    v3 = (void **)(a1 + 7288);
    if ((char)v2[30] < 0)
    {
      if (v14 >= 0)
        p_src = &__src;
      else
        p_src = (__int128 *)__src;
      if (v14 >= 0)
        v5 = HIBYTE(v14);
      else
        v5 = *((_QWORD *)&__src + 1);
      sub_20E867CBC(v3, p_src, v5);
    }
    else if (v14 < 0)
    {
      sub_20E867BF8(v3, (void *)__src, *((size_t *)&__src + 1));
    }
    else
    {
      *(_OWORD *)v3 = __src;
      *(_QWORD *)(a1 + 7304) = v14;
    }
  }
  if ((_BYTE *)(a1 + 6056) != v10)
  {
    v6 = (void **)(a1 + 7312);
    if ((char)v2[54] < 0)
    {
      if (v16 >= 0)
        v7 = &v15;
      else
        v7 = (__int128 *)v15;
      if (v16 >= 0)
        v8 = HIBYTE(v16);
      else
        v8 = *((_QWORD *)&v15 + 1);
      sub_20E867CBC(v6, v7, v8);
    }
    else if (v16 < 0)
    {
      sub_20E867BF8(v6, (void *)v15, *((size_t *)&v15 + 1));
    }
    else
    {
      *(_OWORD *)v6 = v15;
      *(_QWORD *)(a1 + 7328) = v16;
    }
  }
  *v2 = v12;
  return sub_20E869924((uint64_t)v10);
}

void sub_20EE7F2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E869924((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE7F2B4(int64x2_t *a1)
{
  __int8 *v2;
  int64x2_t *v3;
  _QWORD *result;
  _QWORD *v5;

  v2 = &a1[441].i8[8];
  v3 = a1 + 313;
  sub_20EE7EBDC((uint64_t)a1);
  a1[259].i64[1] = 0x4014000000000000;
  a1[124].i32[2] = 4;
  a1[393].i64[1] = 40;
  a1[394].i64[1] = 0x3FE6666666666666;
  a1[152].i8[1] = 1;
  a1[193] = vdupq_n_s64(0x3F1A36E2EB1C432DuLL);
  a1[194].i64[0] = 0x3F1A36E2EB1C432DLL;
  v3[110].i8[13] = 1;
  a1[274].i64[0] = 12;
  *v2 = 0;
  v2[1490] = 1;
  v2[1848] = 1;
  a1[394].i64[0] = 20;
  a1[399].i64[1] = 20;
  v3[128].i8[0] = 1;
  v2[1610] = 1;
  v2[1613] = 1;
  v2[48] = 1;
  a1[541].i32[1] = 5;
  a1[460].i16[0] = 257;
  v3[65].i8[9] = 1;
  v3[98].i8[8] = 1;
  a1[409].i64[0] = 2;
  a1[409].i64[1] = 0x3A83126F40400000;
  a1[410].i32[0] = 0x40000000;
  v3[95].i8[6] = 1;
  a1[423].i16[7] = 0;
  v3[113].i8[8] = 1;
  v2[389] = 1;
  a1[379].i64[1] = 3;
  a1[447].i32[0] = 1060320051;
  a1[466].i32[1] = 1060320051;
  v2[2147] = 1;
  result = (_QWORD *)a1[273].i64[0];
  v5 = (_QWORD *)a1[272].i64[0];
  if (result == v5)
  {
    if (result)
    {
      a1[272].i64[1] = (uint64_t)result;
      operator delete(result);
      a1[272].i64[0] = 0;
      a1[272].i64[1] = 0;
      a1[273].i64[0] = 0;
    }
    result = operator new(8uLL);
    v5 = result;
    a1[272].i64[0] = (uint64_t)result;
    a1[273].i64[0] = (uint64_t)(result + 1);
  }
  *v5 = 0x3FD3333333333333;
  a1[272].i64[1] = (uint64_t)(v5 + 1);
  v3->i8[0] = 1;
  return result;
}

char *sub_20EE7F420@<X0>(uint64_t a1@<X8>)
{
  char *result;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;

  sub_20EE7D5CC(a1);
  result = (char *)sub_20EE7F2B4((int64x2_t *)a1);
  *(_OWORD *)(a1 + 2144) = xmmword_210385830;
  *(_OWORD *)(a1 + 2160) = unk_210385840;
  *(_OWORD *)(a1 + 2176) = xmmword_210385910;
  *(_BYTE *)(a1 + 2433) = 1;
  *(_BYTE *)(a1 + 2442) = 1;
  *(_WORD *)(a1 + 2444) = 1;
  *(_OWORD *)(a1 + 2192) = unk_210385920;
  *(_BYTE *)(a1 + 2439) = 1;
  *(_BYTE *)(a1 + 2376) = 1;
  *(_QWORD *)(a1 + 7032) = 50;
  *(_QWORD *)(a1 + 7040) = 0x4000000000000000;
  *(_BYTE *)(a1 + 8555) = 1;
  *(_QWORD *)(a1 + 6656) = 0x3EB0C6F7A0B5ED8DLL;
  *(_QWORD *)(a1 + 6600) = 0x3F947AE147AE147BLL;
  *(_BYTE *)(a1 + 8669) = 1;
  *(_BYTE *)(a1 + 8676) = 1;
  *(_QWORD *)(a1 + 6096) = 200;
  *(_QWORD *)(a1 + 6120) = 200;
  *(_BYTE *)(a1 + 8678) = 1;
  *(_BYTE *)(a1 + 8673) = 0;
  *(_WORD *)(a1 + 8703) = 257;
  *(_BYTE *)(a1 + 8705) = 1;
  *(_QWORD *)(a1 + 8689) = 0x101010101010101;
  *(_DWORD *)(a1 + 8697) = 16843009;
  *(_BYTE *)(a1 + 7648) = 0;
  *(_QWORD *)(a1 + 7912) = 0;
  *(_DWORD *)(a1 + 7920) = 0;
  *(_BYTE *)(a1 + 265) = 1;
  *(_BYTE *)(a1 + 8708) = 0;
  *(_BYTE *)(a1 + 8804) = 0;
  *(_BYTE *)(a1 + 4424) = 1;
  *(_QWORD *)(a1 + 4408) = -1;
  *(_QWORD *)(a1 + 4416) = 0;
  v3 = *(_QWORD *)(a1 + 4368);
  v4 = *(char **)(a1 + 4352);
  *(_BYTE *)(a1 + 276) = 1;
  if ((unint64_t)(v3 - (_QWORD)v4) < 0x18)
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 4360) = v4;
      operator delete(v4);
      v3 = 0;
      *(_QWORD *)(a1 + 4352) = 0;
      *(_QWORD *)(a1 + 4360) = 0;
      *(_QWORD *)(a1 + 4368) = 0;
    }
    v5 = v3 >> 2;
    if ((unint64_t)(v3 >> 2) <= 3)
      v5 = 3;
    if ((unint64_t)v3 >= 0x7FFFFFFFFFFFFFF8)
      v6 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v6 = v5;
    if (v6 >> 61)
      sub_20E867F44();
    result = (char *)operator new(8 * v6);
    v4 = result;
    *(_QWORD *)(a1 + 4352) = result;
    *(_QWORD *)(a1 + 4360) = result;
    *(_QWORD *)(a1 + 4368) = &result[8 * v6];
    *(_OWORD *)result = xmmword_210385800;
    goto LABEL_16;
  }
  v7 = *(char **)(a1 + 4360);
  v8 = v7 - v4;
  if ((unint64_t)(v7 - v4) > 0x17)
  {
    *(_OWORD *)v4 = xmmword_210385800;
LABEL_16:
    *((_QWORD *)v4 + 2) = 0x3FD3333333333333;
    v11 = 3;
    goto LABEL_17;
  }
  v9 = (char *)&xmmword_210385800 + v8;
  if (v7 != v4)
  {
    memcpy(v4, &xmmword_210385800, v7 - v4);
    v4 = *(char **)(a1 + 4360);
  }
  v10 = 24 - v8;
  result = (char *)memcpy(v4, v9, v10);
  v11 = v10 >> 3;
LABEL_17:
  *(_QWORD *)(a1 + 4360) = &v4[8 * v11];
  v12 = *(_QWORD *)(a1 + 4344);
  v13 = *(char **)(a1 + 4328);
  if ((unint64_t)(v12 - (_QWORD)v13) < 0x18)
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 4336) = v13;
      operator delete(v13);
      v12 = 0;
      *(_QWORD *)(a1 + 4328) = 0;
      *(_QWORD *)(a1 + 4336) = 0;
      *(_QWORD *)(a1 + 4344) = 0;
    }
    v14 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 3)
      v14 = 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15 >> 61)
      sub_20E867F44();
    result = (char *)operator new(8 * v15);
    v13 = result;
    *(_QWORD *)(a1 + 4328) = result;
    *(_QWORD *)(a1 + 4336) = result;
    *(_QWORD *)(a1 + 4344) = &result[8 * v15];
    *((_QWORD *)result + 2) = 15;
    *(_OWORD *)result = xmmword_210385818;
    goto LABEL_32;
  }
  v16 = *(char **)(a1 + 4336);
  v17 = v16 - v13;
  if ((unint64_t)(v16 - v13) > 0x17)
  {
    *(_OWORD *)v13 = xmmword_210385818;
    *((_QWORD *)v13 + 2) = 15;
LABEL_32:
    v20 = 3;
    goto LABEL_33;
  }
  v18 = (char *)&xmmword_210385818 + v17;
  if (v16 != v13)
  {
    memcpy(*(void **)(a1 + 4328), &xmmword_210385818, v16 - v13);
    v13 = *(char **)(a1 + 4336);
  }
  v19 = 24 - v17;
  result = (char *)memcpy(v13, v18, v19);
  v20 = v19 >> 3;
LABEL_33:
  *(_QWORD *)(a1 + 4336) = &v13[8 * v20];
  *(_BYTE *)(a1 + 2554) = 1;
  *(_DWORD *)(a1 + 2928) = 70;
  *(_BYTE *)(a1 + 5009) = 0;
  *(_BYTE *)(a1 + 1001) = 0;
  *(_BYTE *)(a1 + 736) = 1;
  *(_BYTE *)(a1 + 529) = 1;
  *(_QWORD *)(a1 + 712) = 0x4000000000000000;
  *(_BYTE *)(a1 + 5400) = 1;
  return result;
}

void sub_20EE7F7C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

void sub_20EE7F7D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

void sub_20EE7F7E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

int32x2_t sub_20EE7F7FC@<D0>(uint64_t a1@<X8>)
{
  int32x2_t result;

  sub_20EE7D5CC(a1);
  sub_20EE7F2B4((int64x2_t *)a1);
  *(_BYTE *)(a1 + 8679) = 1;
  *(_QWORD *)(a1 + 5072) = 0x3FD999999999999ALL;
  *(_DWORD *)(a1 + 6136) = 200;
  *(_BYTE *)(a1 + 8700) = 1;
  *(_WORD *)(a1 + 8848) = 257;
  *(_WORD *)(a1 + 6782) = 0;
  *(_BYTE *)(a1 + 8556) = 1;
  *(_BYTE *)(a1 + 8657) = 0;
  *(_DWORD *)(a1 + 8640) = 4;
  *(_QWORD *)(a1 + 6184) = 0x4000000000000000;
  *(_BYTE *)(a1 + 7281) = 1;
  *(_WORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 1592) = 0;
  *(_BYTE *)(a1 + 5556) = 1;
  *(_QWORD *)(a1 + 9072) = 500;
  *(_BYTE *)(a1 + 10618) = 1;
  *(_BYTE *)(a1 + 4120) = 0;
  *(_OWORD *)(a1 + 5984) = xmmword_2102DCDE0;
  *(_OWORD *)(a1 + 6016) = xmmword_2102DCDF0;
  *(_OWORD *)(a1 + 5968) = xmmword_2102DCE00;
  *(_OWORD *)(a1 + 6000) = xmmword_2102DCE80;
  *(_WORD *)(a1 + 6048) = 0;
  *(_BYTE *)(a1 + 6489) = 1;
  *(_QWORD *)(a1 + 6096) = 1000;
  *(_QWORD *)(a1 + 6104) = *(_QWORD *)(a1 + 9352);
  *(_BYTE *)(a1 + 9212) = 0;
  *(_WORD *)(a1 + 9218) = 257;
  *(_QWORD *)(a1 + 9232) = 10;
  *(_WORD *)(a1 + 9208) = 257;
  result = vdup_n_s32(0x3E8u);
  *(int32x2_t *)(a1 + 2632) = result;
  return result;
}

void sub_20EE7F90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

double sub_20EE7F920@<D0>(uint64_t a1@<X8>)
{
  double result;

  sub_20EE7D5CC(a1);
  sub_20EE7F2B4((int64x2_t *)a1);
  *(_BYTE *)(a1 + 8679) = 1;
  *(_QWORD *)(a1 + 5072) = 0x3FD999999999999ALL;
  *(_DWORD *)(a1 + 6136) = 200;
  *(_BYTE *)(a1 + 8700) = 1;
  *(_WORD *)(a1 + 8848) = 257;
  *(_WORD *)(a1 + 6782) = 0;
  *(_BYTE *)(a1 + 8556) = 1;
  *(_BYTE *)(a1 + 8657) = 0;
  *(_DWORD *)(a1 + 8640) = 4;
  *(_QWORD *)(a1 + 6184) = 0x4000000000000000;
  *(_BYTE *)(a1 + 7281) = 1;
  *(_WORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 1592) = 0;
  *(_BYTE *)(a1 + 5556) = 1;
  *(_QWORD *)(a1 + 9072) = 500;
  *(_BYTE *)(a1 + 10618) = 1;
  *(_BYTE *)(a1 + 4120) = 0;
  *(_OWORD *)(a1 + 5984) = xmmword_2102DCDE0;
  *(_OWORD *)(a1 + 6016) = xmmword_2102DCDF0;
  *(_OWORD *)(a1 + 5968) = xmmword_2102DCE00;
  *(_OWORD *)(a1 + 6000) = xmmword_2102DCE80;
  *(_WORD *)(a1 + 6048) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 6096) = xmmword_2102DCE70;
  *(_QWORD *)(a1 + 6328) = 0x47EFFFFFE0000000;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 6616) = 0;
  *(_WORD *)(a1 + 22) = 257;
  return result;
}

void sub_20EE7FA1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

double sub_20EE7FA30@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  int64_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  double result;

  sub_20EE7D5CC(a1);
  sub_20EE7F2B4((int64x2_t *)a1);
  *(_OWORD *)(a1 + 5984) = xmmword_2102DCDE0;
  *(_OWORD *)(a1 + 6016) = xmmword_2102DCDF0;
  *(_OWORD *)(a1 + 5968) = xmmword_2102DCE00;
  *(_OWORD *)(a1 + 6000) = xmmword_2102DCE80;
  *(_OWORD *)(a1 + 2160) = unk_2103857F0;
  *(_BYTE *)(a1 + 8679) = 1;
  *(_QWORD *)(a1 + 5072) = 0x3FD999999999999ALL;
  *(_BYTE *)(a1 + 8700) = 1;
  *(_WORD *)(a1 + 8848) = 257;
  *(_BYTE *)(a1 + 8556) = 1;
  *(_BYTE *)(a1 + 8657) = 0;
  *(_DWORD *)(a1 + 8640) = 4;
  *(_QWORD *)(a1 + 6184) = 0x4000000000000000;
  *(_BYTE *)(a1 + 7281) = 1;
  *(_BYTE *)(a1 + 5556) = 1;
  *(_QWORD *)(a1 + 9072) = 500;
  *(_BYTE *)(a1 + 10618) = 1;
  *(_BYTE *)(a1 + 4120) = 0;
  *(_WORD *)(a1 + 6048) = 0;
  *(_BYTE *)(a1 + 2433) = 1;
  *(_DWORD *)(a1 + 2442) = 16843009;
  *(_OWORD *)(a1 + 2144) = xmmword_2103857E0;
  *(_OWORD *)(a1 + 2176) = xmmword_2103851E0;
  *(int64x2_t *)(a1 + 2192) = vdupq_n_s64(0x407F400000000000uLL);
  *(_BYTE *)(a1 + 4424) = 1;
  *(_QWORD *)(a1 + 312) = 0x3FE8000000000000;
  *(_WORD *)(a1 + 6782) = 1;
  *(_BYTE *)(a1 + 8850) = 1;
  *(_DWORD *)(a1 + 6136) = 100;
  *(_BYTE *)(a1 + 2556) = 0;
  *(_BYTE *)(a1 + 736) = 1;
  *(_BYTE *)(a1 + 528) = 1;
  *(_BYTE *)(a1 + 264) = 1;
  *(_WORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 1592) = 0;
  *(_BYTE *)(a1 + 1456) = 1;
  *(_DWORD *)(a1 + 275) = 16843009;
  *(_BYTE *)(a1 + 8706) = 1;
  *(_BYTE *)(a1 + 3226) = 1;
  *(_DWORD *)(a1 + 3196) = 300;
  *(_BYTE *)(a1 + 456) = 1;
  *(_BYTE *)(a1 + 424) = 1;
  *(_BYTE *)(a1 + 488) = 1;
  *(_BYTE *)(a1 + 2554) = 1;
  *(_DWORD *)(a1 + 2928) = 70;
  *(_QWORD *)(a1 + 1896) = 0x3F847AE147AE147CLL;
  *(_OWORD *)(a1 + 2400) = xmmword_2103851F0;
  *(_BYTE *)(a1 + 3179) = 1;
  *(_QWORD *)(a1 + 1816) = 0;
  *(_BYTE *)(a1 + 2880) = 1;
  *(_QWORD *)(a1 + 6096) = 500;
  *(_QWORD *)(a1 + 6120) = 500;
  *(_QWORD *)(a1 + 7032) = 50;
  *(_QWORD *)(a1 + 7040) = 0x4000000000000000;
  *(_BYTE *)(a1 + 8555) = 1;
  *(_QWORD *)(a1 + 6656) = 0x3EB0C6F7A0B5ED8DLL;
  *(_QWORD *)(a1 + 6600) = 0x3F947AE147AE147BLL;
  *(_BYTE *)(a1 + 8669) = 1;
  *(_BYTE *)(a1 + 8701) = 1;
  *(_WORD *)(a1 + 8384) = 257;
  *(_BYTE *)(a1 + 8386) = 1;
  *(_QWORD *)(a1 + 8376) = 0x4008000000000000;
  *(_BYTE *)(a1 + 8805) = 1;
  *(_BYTE *)(a1 + 5528) = 1;
  v2 = *(_QWORD *)(a1 + 4368);
  v3 = *(char **)(a1 + 4352);
  *(_DWORD *)(a1 + 3536) = 50;
  if ((unint64_t)(v2 - (_QWORD)v3) < 0x18)
  {
    if (v3)
    {
      *(_QWORD *)(a1 + 4360) = v3;
      operator delete(v3);
      v2 = 0;
      *(_QWORD *)(a1 + 4352) = 0;
      *(_QWORD *)(a1 + 4360) = 0;
      *(_QWORD *)(a1 + 4368) = 0;
    }
    v4 = v2 >> 2;
    if ((unint64_t)(v2 >> 2) <= 3)
      v4 = 3;
    if ((unint64_t)v2 >= 0x7FFFFFFFFFFFFFF8)
      v5 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v5 = v4;
    if (v5 >> 61)
      sub_20E867F44();
    v3 = (char *)operator new(8 * v5);
    *(_QWORD *)(a1 + 4352) = v3;
    *(_QWORD *)(a1 + 4360) = v3;
    *(_QWORD *)(a1 + 4368) = &v3[8 * v5];
    *(_OWORD *)v3 = xmmword_210385800;
    goto LABEL_16;
  }
  v6 = *(char **)(a1 + 4360);
  v7 = v6 - v3;
  if ((unint64_t)(v6 - v3) > 0x17)
  {
    *(_OWORD *)v3 = xmmword_210385800;
LABEL_16:
    *((_QWORD *)v3 + 2) = 0x3FD3333333333333;
    v10 = 3;
    goto LABEL_17;
  }
  v8 = (char *)&xmmword_210385800 + v7;
  if (v6 != v3)
  {
    memcpy(v3, &xmmword_210385800, v6 - v3);
    v3 = *(char **)(a1 + 4360);
  }
  v9 = 24 - v7;
  memcpy(v3, v8, v9);
  v10 = v9 >> 3;
LABEL_17:
  *(_QWORD *)(a1 + 4360) = &v3[8 * v10];
  v11 = *(_QWORD *)(a1 + 4344);
  v12 = *(char **)(a1 + 4328);
  if ((unint64_t)(v11 - (_QWORD)v12) < 0x18)
  {
    if (v12)
    {
      *(_QWORD *)(a1 + 4336) = v12;
      operator delete(v12);
      v11 = 0;
      *(_QWORD *)(a1 + 4328) = 0;
      *(_QWORD *)(a1 + 4336) = 0;
      *(_QWORD *)(a1 + 4344) = 0;
    }
    v13 = v11 >> 2;
    if ((unint64_t)(v11 >> 2) <= 3)
      v13 = 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14 >> 61)
      sub_20E867F44();
    v12 = (char *)operator new(8 * v14);
    *(_QWORD *)(a1 + 4328) = v12;
    *(_QWORD *)(a1 + 4336) = v12;
    *(_QWORD *)(a1 + 4344) = &v12[8 * v14];
    *((_QWORD *)v12 + 2) = 15;
    *(_OWORD *)v12 = xmmword_210385818;
    goto LABEL_32;
  }
  v15 = *(char **)(a1 + 4336);
  v16 = v15 - v12;
  if ((unint64_t)(v15 - v12) > 0x17)
  {
    *(_OWORD *)v12 = xmmword_210385818;
    *((_QWORD *)v12 + 2) = 15;
LABEL_32:
    v19 = 3;
    goto LABEL_33;
  }
  v17 = (char *)&xmmword_210385818 + v16;
  if (v15 != v12)
  {
    memcpy(*(void **)(a1 + 4328), &xmmword_210385818, v15 - v12);
    v12 = *(char **)(a1 + 4336);
  }
  v18 = 24 - v16;
  memcpy(v12, v17, v18);
  v19 = v18 >> 3;
LABEL_33:
  *(_QWORD *)(a1 + 4336) = &v12[8 * v19];
  *(_QWORD *)(a1 + 4296) = 0x4000000000000000;
  *(_BYTE *)(a1 + 6904) = 1;
  *(_BYTE *)(a1 + 3233) = 1;
  *(_QWORD *)(a1 + 8632) = 0x40000000003;
  *(_BYTE *)(a1 + 8557) = 1;
  *(_DWORD *)(a1 + 8560) = 250;
  *(_BYTE *)(a1 + 8675) = 1;
  *(_BYTE *)(a1 + 8656) = 1;
  *(_BYTE *)(a1 + 7864) = 1;
  *(_BYTE *)(a1 + 7888) = 1;
  *(_DWORD *)(a1 + 7152) = 1061158912;
  *(_QWORD *)(a1 + 7696) = 0x4000000000000000;
  *(_DWORD *)(a1 + 8660) = 15;
  *(_DWORD *)(a1 + 4520) = 2;
  *(_QWORD *)(a1 + 4528) = 0x404E000000000000;
  *(_QWORD *)(a1 + 4576) = 0x3F847AE147AE147BLL;
  *(_QWORD *)(a1 + 4600) = 0x4054000000000000;
  *(int64x2_t *)(a1 + 4720) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 4736) = xmmword_210385200;
  *(_QWORD *)(a1 + 4752) = 0x4056800000000000;
  *(_BYTE *)(a1 + 4792) = 0;
  *(_DWORD *)(a1 + 3820) = 20;
  *(_DWORD *)(a1 + 3880) = 500;
  *(_QWORD *)(a1 + 3888) = 0x407F400000000000;
  *(_QWORD *)(a1 + 3960) = 0x4034000000000000;
  *(_QWORD *)(a1 + 4800) = 0x4034000000000000;
  *(_OWORD *)(a1 + 3840) = xmmword_210385210;
  *(_QWORD *)(a1 + 3824) = 0x3FB999999999999ALL;
  *(_QWORD *)(a1 + 3968) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 3984) = xmmword_210385220;
  *(_DWORD *)(a1 + 3976) = 40;
  *(_DWORD *)(a1 + 1716) = 20;
  *(_QWORD *)(a1 + 4832) = 0x404E000000000000;
  *(_DWORD *)(a1 + 4848) = 60;
  *(_OWORD *)(a1 + 3856) = xmmword_210385230;
  *(_QWORD *)(a1 + 3872) = 0x3FEB333333333333;
  *(_BYTE *)(a1 + 5776) = 1;
  *(_BYTE *)(a1 + 5832) = 1;
  *(_DWORD *)(a1 + 2640) = 20;
  *(_BYTE *)(a1 + 2089) = 0;
  *(_QWORD *)(a1 + 1040) = 5;
  *(_DWORD *)(a1 + 3184) = 5;
  *(_BYTE *)(a1 + 5741) = 1;
  *(_QWORD *)(a1 + 5064) = 0x4030000000000000;
  *(_QWORD *)(a1 + 7912) = 0x3FF4000000000000;
  *(_BYTE *)(a1 + 2439) = 1;
  *(_DWORD *)(a1 + 2936) = 300;
  *(_QWORD *)(a1 + 3160) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 3168) = 0x4018000000000000;
  *(_DWORD *)(a1 + 6916) = 15;
  *(_QWORD *)(a1 + 2536) = 0x3F75CA6CA03C4B0ALL;
  *(_QWORD *)(a1 + 3264) = 150;
  *(_BYTE *)(a1 + 2816) = 1;
  *(_QWORD *)(a1 + 8824) = 0x3F8EB851EB851EB8;
  result = 0.03;
  *(_OWORD *)(a1 + 8832) = xmmword_210385240;
  *(_BYTE *)(a1 + 5011) = 0;
  *(_BYTE *)(a1 + 8677) = 0;
  *(_QWORD *)(a1 + 5624) = 0x4000000000000000;
  *(_QWORD *)(a1 + 5632) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 5664) = 50;
  *(_QWORD *)(a1 + 4152) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 8800) = 100;
  *(_QWORD *)(a1 + 8784) = 0x3F4D7DBF487FCB92;
  *(_BYTE *)(a1 + 8658) = 1;
  *(_BYTE *)(a1 + 3288) = 1;
  *(_BYTE *)(a1 + 5728) = 1;
  *(_BYTE *)(a1 + 11177) = 1;
  *(_BYTE *)(a1 + 11176) = 0;
  *(_QWORD *)(a1 + 10920) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 11178) = 1;
  *(_BYTE *)(a1 + 11096) = 0;
  *(_BYTE *)(a1 + 10768) = 1;
  *(_QWORD *)(a1 + 10984) = 0x4051800000000000;
  *(_QWORD *)(a1 + 10992) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 11200) = 278;
  *(_BYTE *)(a1 + 11202) = 0;
  *(_BYTE *)(a1 + 11224) = 1;
  *(_QWORD *)(a1 + 11216) = 0x4082C00000000000;
  *(_BYTE *)(a1 + 11248) = 1;
  *(_DWORD *)(a1 + 11280) = 1145569280;
  *(_BYTE *)(a1 + 4808) = 1;
  *(_BYTE *)(a1 + 4064) = 1;
  return result;
}

void sub_20EE800F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

void sub_20EE80104(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

void sub_20EE80118(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

void sub_20EE8012C(uint64_t a1@<X8>)
{
  _BYTE *v2;

  sub_20EE7D5CC(a1);
  sub_20EE7EBDC(a1);
  *(_QWORD *)(a1 + 4152) = 0x4014000000000000;
  *(_BYTE *)(a1 + 2433) = 1;
  *(_DWORD *)(a1 + 1992) = 4;
  *(_QWORD *)(a1 + 6296) = 40;
  *(_QWORD *)(a1 + 6312) = 0x3FE6666666666666;
  *(int64x2_t *)(a1 + 3088) = vdupq_n_s64(0x3F1A36E2EB1C432DuLL);
  *(_QWORD *)(a1 + 3104) = 0x3F1A36E2EB1C432DLL;
  *(_BYTE *)(a1 + 6781) = 1;
  *(_QWORD *)(a1 + 4384) = 12;
  *(_BYTE *)(a1 + 6616) = 0;
  *(_BYTE *)(a1 + 4136) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 17) = 1;
  *(_QWORD *)(a1 + 6104) = 0;
  *(_QWORD *)(a1 + 6096) = 0;
  *(_OWORD *)a1 = xmmword_2102DCDC0;
  if (*(char *)(a1 + 9407) < 0)
  {
    *(_QWORD *)(a1 + 9392) = 0;
    **(_BYTE **)(a1 + 9384) = 0;
    if ((*(char *)(a1 + 7231) & 0x80000000) == 0)
    {
LABEL_3:
      *(_BYTE *)(a1 + 7231) = 0;
      *(_BYTE *)(a1 + 7208) = 0;
      if ((*(char *)(a1 + 7255) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      *(_QWORD *)(a1 + 7240) = 0;
      **(_BYTE **)(a1 + 7232) = 0;
      if ((*(char *)(a1 + 7279) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      *(_QWORD *)(a1 + 7264) = 0;
      v2 = *(_BYTE **)(a1 + 7256);
      goto LABEL_10;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 9407) = 0;
    *(_BYTE *)(a1 + 9384) = 0;
    if ((*(char *)(a1 + 7231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  *(_QWORD *)(a1 + 7216) = 0;
  **(_BYTE **)(a1 + 7208) = 0;
  if (*(char *)(a1 + 7255) < 0)
    goto LABEL_8;
LABEL_4:
  *(_BYTE *)(a1 + 7255) = 0;
  *(_BYTE *)(a1 + 7232) = 0;
  if (*(char *)(a1 + 7279) < 0)
    goto LABEL_9;
LABEL_5:
  v2 = (_BYTE *)(a1 + 7256);
  *(_BYTE *)(a1 + 7279) = 0;
LABEL_10:
  *v2 = 0;
  *(_QWORD *)(a1 + 432) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 275) = 0;
  *(_QWORD *)(a1 + 3688) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 3696) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 2432) = 257;
  *(_BYTE *)(a1 + 2500) = 0;
  *(_BYTE *)(a1 + 2442) = 1;
  *(_BYTE *)(a1 + 4480) = 1;
  *(_BYTE *)(a1 + 736) = 1;
  *(_BYTE *)(a1 + 529) = 1;
  *(_QWORD *)(a1 + 712) = 0x4000000000000000;
}

void sub_20EE802C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

double sub_20EE802D8@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  double result;

  sub_20EE7D5CC(a1);
  sub_20EE7F2B4((int64x2_t *)a1);
  *(_OWORD *)(a1 + 5984) = xmmword_2102DCDE0;
  *(_OWORD *)(a1 + 6016) = xmmword_2102DCDF0;
  *(_OWORD *)(a1 + 5968) = xmmword_2102DCE00;
  *(_OWORD *)(a1 + 6000) = xmmword_2102DCE80;
  *(_OWORD *)(a1 + 360) = xmmword_210385850;
  *(_BYTE *)(a1 + 8679) = 1;
  *(_QWORD *)(a1 + 5072) = 0x3FD999999999999ALL;
  *(_DWORD *)(a1 + 6136) = 200;
  *(_BYTE *)(a1 + 8700) = 1;
  *(_WORD *)(a1 + 8848) = 257;
  *(_WORD *)(a1 + 6782) = 0;
  *(_BYTE *)(a1 + 8556) = 1;
  *(_BYTE *)(a1 + 8657) = 0;
  *(_DWORD *)(a1 + 8640) = 4;
  *(_QWORD *)(a1 + 6184) = 0x4000000000000000;
  *(_BYTE *)(a1 + 7281) = 1;
  *(_QWORD *)(a1 + 9072) = 500;
  *(_BYTE *)(a1 + 10618) = 1;
  *(_BYTE *)(a1 + 4120) = 0;
  *(_WORD *)(a1 + 6048) = 0;
  *(_BYTE *)(a1 + 272) = 1;
  *(_QWORD *)(a1 + 392) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 376) = unk_210385860;
  *(_BYTE *)(a1 + 10689) = 0;
  *(_BYTE *)(a1 + 5123) = 1;
  *(_DWORD *)(a1 + 5036) = 2000;
  *(_BYTE *)(a1 + 5741) = 1;
  *(_QWORD *)(a1 + 5048) = 0x3FB999999999999ALL;
  *(_BYTE *)(a1 + 5513) = 1;
  *(_WORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 1592) = 0;
  *(_BYTE *)(a1 + 250) = 0;
  *(_BYTE *)(a1 + 5743) = 1;
  *(_BYTE *)(a1 + 5556) = 0;
  *(_QWORD *)(a1 + 5720) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5064) = 0x4030000000000000;
  *(_QWORD *)(a1 + 5540) = 0x19000000000;
  *(_QWORD *)(a1 + 1040) = 8;
  *(_BYTE *)(a1 + 3226) = 1;
  *(_DWORD *)(a1 + 3228) = 100;
  *(_BYTE *)(a1 + 3232) = 1;
  *(_QWORD *)(a1 + 3264) = 300;
  *(_QWORD *)(a1 + 2632) = 0x3200000032;
  *(_BYTE *)(a1 + 1560) = 1;
  *(_BYTE *)(a1 + 1528) = 1;
  *(_QWORD *)(a1 + 1496) = 0x3FB999999999999ALL;
  *(_DWORD *)(a1 + 1464) = 80;
  *(_BYTE *)(a1 + 1456) = 1;
  *(_OWORD *)(a1 + 1536) = xmmword_210385250;
  *(_QWORD *)(a1 + 2040) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 2020) = 1;
  *(_BYTE *)(a1 + 1000) = 1;
  *(_QWORD *)(a1 + 928) = 0x3FE0000000000000;
  *(_BYTE *)(a1 + 1001) = 0;
  *(_DWORD *)(a1 + 1116) = 1;
  *(_BYTE *)(a1 + 1112) = 1;
  *(_QWORD *)(a1 + 1088) = 0x4000000000000000;
  *(_BYTE *)(a1 + 1144) = 0;
  *(_BYTE *)(a1 + 1604) = 1;
  *(_DWORD *)(a1 + 1096) = 4;
  *(_OWORD *)(a1 + 1152) = xmmword_210385260;
  *(_QWORD *)(a1 + 1792) = 0x4018000000000000;
  v2 = *(_QWORD **)(a1 + 4344);
  v3 = *(_QWORD **)(a1 + 4328);
  if (v2 == v3)
  {
    if (v2)
    {
      *(_QWORD *)(a1 + 4336) = v2;
      operator delete(v2);
      *(_QWORD *)(a1 + 4328) = 0;
      *(_QWORD *)(a1 + 4336) = 0;
      *(_QWORD *)(a1 + 4344) = 0;
    }
    v3 = operator new(8uLL);
    *(_QWORD *)(a1 + 4328) = v3;
    *(_QWORD *)(a1 + 4336) = v3;
    *(_QWORD *)(a1 + 4344) = v3 + 1;
  }
  *v3 = 8;
  *(_QWORD *)(a1 + 4336) = v3 + 1;
  v4 = *(_QWORD **)(a1 + 4368);
  v5 = *(_QWORD **)(a1 + 4352);
  if (v4 == v5)
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 4360) = v4;
      operator delete(v4);
      *(_QWORD *)(a1 + 4352) = 0;
      *(_QWORD *)(a1 + 4360) = 0;
      *(_QWORD *)(a1 + 4368) = 0;
    }
    v5 = operator new(8uLL);
    *(_QWORD *)(a1 + 4352) = v5;
    *(_QWORD *)(a1 + 4360) = v5;
    *(_QWORD *)(a1 + 4368) = v5 + 1;
  }
  *v5 = 0x3FC999999999999ALL;
  *(_QWORD *)(a1 + 4360) = v5 + 1;
  *(_QWORD *)(a1 + 4280) = 3;
  *(_QWORD *)(a1 + 4320) = 50;
  *(_BYTE *)(a1 + 4424) = 1;
  *(_BYTE *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 312) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 4456) = 257;
  *(_BYTE *)(a1 + 3240) = 1;
  *(_QWORD *)(a1 + 2544) = -1;
  *(_WORD *)(a1 + 2555) = 1;
  *(_QWORD *)(a1 + 2536) = 0x3F75CA6CA03C4B0ALL;
  *(_BYTE *)(a1 + 3192) = 1;
  *(_DWORD *)(a1 + 2640) = 20;
  *(_BYTE *)(a1 + 2089) = 0;
  *(_QWORD *)(a1 + 1896) = 0x3F647AE147AE147CLL;
  *(_QWORD *)(a1 + 1904) = 0;
  *(_BYTE *)(a1 + 1976) = 0;
  *(_BYTE *)(a1 + 279) = 0;
  *(_QWORD *)(a1 + 1944) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1928) = xmmword_210385878;
  *(_BYTE *)(a1 + 3241) = 0;
  *(_BYTE *)(a1 + 3243) = 0;
  *(_BYTE *)(a1 + 3246) = 0;
  *(_BYTE *)(a1 + 1712) = 1;
  *(_BYTE *)(a1 + 3288) = 0;
  *(_BYTE *)(a1 + 5728) = 1;
  *(_BYTE *)(a1 + 1736) = 0;
  *(_DWORD *)(a1 + 5960) = 5;
  *(_BYTE *)(a1 + 7140) = 0;
  *(_DWORD *)(a1 + 7144) = 10;
  *(_BYTE *)(a1 + 6172) = 0;
  *(_BYTE *)(a1 + 6781) = 1;
  *(_BYTE *)(a1 + 6612) = 0;
  *(_QWORD *)(a1 + 6280) = 0x3FB999999999999ALL;
  *(_QWORD *)(a1 + 6368) = 0x3F9EB851EB851EB8;
  *(_DWORD *)(a1 + 6356) = 30;
  *(_DWORD *)(a1 + 6444) = 30;
  *(_BYTE *)(a1 + 8674) = 0;
  *(_BYTE *)(a1 + 8677) = 0;
  *(_QWORD *)(a1 + 6328) = 0x4014000000000000;
  *(_QWORD *)(a1 + 6416) = 0x4014000000000000;
  *(_DWORD *)(a1 + 6136) = 30;
  *(_QWORD *)(a1 + 6480) = 0x4018000000000000;
  *(_WORD *)(a1 + 8704) = 257;
  *(_BYTE *)(a1 + 8703) = 1;
  *(_BYTE *)(a1 + 8555) = 1;
  *(_BYTE *)(a1 + 8701) = 1;
  *(_WORD *)(a1 + 8384) = 257;
  *(_QWORD *)(a1 + 6096) = 7;
  *(_QWORD *)(a1 + 6120) = 20;
  *(_QWORD *)(a1 + 7032) = 3;
  *(_QWORD *)(a1 + 7040) = 0x4000000000000000;
  *(_WORD *)(a1 + 8668) = 0;
  *(_QWORD *)(a1 + 6600) = 0x3F947AE147AE147BLL;
  *(_BYTE *)(a1 + 6912) = 0;
  *(_BYTE *)(a1 + 8850) = 1;
  *(_BYTE *)(a1 + 2432) = 1;
  *(_BYTE *)(a1 + 2500) = 0;
  *(_BYTE *)(a1 + 2433) = 1;
  *(_BYTE *)(a1 + 2442) = 1;
  *(_WORD *)(a1 + 2448) = 0;
  *(_WORD *)(a1 + 2444) = 257;
  *(_BYTE *)(a1 + 4488) = 0;
  *(_QWORD *)(a1 + 4504) = 0x4000000000000000;
  *(_DWORD *)(a1 + 4492) = 30;
  *(_QWORD *)(a1 + 4496) = 0xA00000005;
  *(_QWORD *)(a1 + 1048) = 5;
  *(_QWORD *)(a1 + 4176) = 0x3F847AE147AE147BLL;
  *(_BYTE *)(a1 + 4188) = 1;
  *(_QWORD *)(a1 + 4216) = 0x4069000000000000;
  *(_BYTE *)(a1 + 4241) = 1;
  *(_BYTE *)(a1 + 4240) = 0;
  *(_OWORD *)(a1 + 4224) = xmmword_210385270;
  *(_BYTE *)(a1 + 4512) = 2;
  *(_BYTE *)(a1 + 456) = 1;
  *(_BYTE *)(a1 + 275) = 1;
  *(_WORD *)(a1 + 424) = 257;
  *(_BYTE *)(a1 + 457) = 1;
  *(_OWORD *)(a1 + 432) = xmmword_210385280;
  *(_BYTE *)(a1 + 4880) = 1;
  *(_QWORD *)(a1 + 4888) = 0x4000000000000000;
  *(_QWORD *)(a1 + 472) = 0x3FA47AE147AE147BLL;
  *(_QWORD *)(a1 + 480) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 3648) = 0xA0000000ALL;
  *(_DWORD *)(a1 + 3656) = 0;
  *(_QWORD *)(a1 + 3680) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 4049) = 1;
  *(_BYTE *)(a1 + 4048) = 1;
  *(_BYTE *)(a1 + 5776) = 0;
  *(_BYTE *)(a1 + 5832) = 1;
  *(_BYTE *)(a1 + 1192) = 1;
  *(_OWORD *)(a1 + 1200) = xmmword_210385290;
  *(_OWORD *)(a1 + 1216) = xmmword_2103852A0;
  *(_QWORD *)(a1 + 1232) = 0x3FF199999999999ALL;
  *(_QWORD *)(a1 + 1608) = 0x3FB999999999999ALL;
  *(_QWORD *)(a1 + 1596) = 0;
  *(_QWORD *)(a1 + 1616) = 0x4014000000000000;
  *(_BYTE *)(a1 + 1624) = 1;
  *(_BYTE *)(a1 + 1440) = 1;
  *(_QWORD *)(a1 + 1444) = 0xA0000000FLL;
  *(_BYTE *)(a1 + 5528) = 1;
  *(_QWORD *)(a1 + 5640) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5656) = 0x1E00000001;
  *(_BYTE *)(a1 + 5679) = 1;
  *(_QWORD *)(a1 + 5576) = 0x3F847AE147AE147BLL;
  *(_BYTE *)(a1 + 11248) = 1;
  result = 7.29112202e-304;
  *(_OWORD *)(a1 + 11346) = unk_210385AC4;
  *(_OWORD *)(a1 + 11336) = unk_210385ABA;
  *(_OWORD *)(a1 + 11320) = xmmword_210385AAA;
  *(_QWORD *)(a1 + 11304) = 0x407F400000000000;
  *(_BYTE *)(a1 + 1168) = 1;
  *(_QWORD *)(a1 + 5984) = 0x3F40624DD2F1A9FCLL;
  *(_QWORD *)(a1 + 5992) = 0x3F9999999999999ALL;
  *(_QWORD *)(a1 + 6016) = 0x3FA999999999999ALL;
  *(_QWORD *)(a1 + 6024) = 0x3FB999999999999ALL;
  *(_QWORD *)(a1 + 5976) = 0x3F54BD3EDDA68FE1;
  *(_QWORD *)(a1 + 5968) = 0x3F543A2730ABEE4DLL;
  *(_QWORD *)(a1 + 6008) = 0x3FA3B13B13B13B14;
  *(_QWORD *)(a1 + 6000) = 0x3F9E1E1E1E1E1E1ELL;
  *(_WORD *)(a1 + 6048) = 0;
  return result;
}

void sub_20EE808F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

void sub_20EE8090C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

void sub_20EE80920(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

void sub_20EE80934(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  uint64_t v61;
  void *v62;
  char *v63;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  char *v68;
  uint64_t v71;
  void *v72;
  char *v73;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void *v80;
  char *v81;
  uint64_t v84;
  void *v85;
  char *v86;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  char *v92;
  uint64_t v95;
  void *v96;
  char *v97;
  unint64_t v100;
  void *v101;
  char *v102;
  uint64_t v105;
  void *v106;
  char *v107;
  uint64_t v110;
  void *v111;
  char *v112;
  uint64_t v114;
  void *v115;
  char *v116;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  char *v121;
  uint64_t v125;
  void *v126;
  char *v127;
  uint64_t v132;
  void *v133;
  char *v134;
  uint64_t v136;
  void *v137;
  char *v138;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v144;
  void *v145;
  char *v146;
  unint64_t v148;
  char **v149;
  char v150;
  char *v151;
  int __c[2];
  char v153;

  sub_20EE7D5CC(a2);
  sub_20EE7EBDC(a2);
  *(_QWORD *)(a2 + 4152) = 0x4014000000000000;
  *(_BYTE *)(a2 + 2433) = 1;
  *(_DWORD *)(a2 + 1992) = 4;
  *(_QWORD *)(a2 + 6296) = 40;
  *(_QWORD *)(a2 + 6312) = 0x3FE6666666666666;
  *(int64x2_t *)(a2 + 3088) = vdupq_n_s64(0x3F1A36E2EB1C432DuLL);
  *(_QWORD *)(a2 + 3104) = 0x3F1A36E2EB1C432DLL;
  *(_BYTE *)(a2 + 6781) = 1;
  *(_QWORD *)(a2 + 4384) = 12;
  *(_BYTE *)(a2 + 264) = 1;
  v4 = a1[23];
  v150 = v4;
  v5 = *((_QWORD *)a1 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  v151 = *(char **)a1;
  if ((v4 & 0x80u) == 0)
    v7 = a1;
  else
    v7 = *(char **)a1;
  v8 = &v7[v6];
  if (v6 >= 13)
  {
    v9 = v6;
    v10 = v7;
    do
    {
      v11 = (char *)memchr(v10, 95, v9 - 12);
      if (!v11)
        break;
      if (*(_QWORD *)v11 == 0x656C62617369645FLL && *(_QWORD *)(v11 + 5) == 0x656E696C5F656C62)
      {
        if (v11 != v8 && v11 - v7 != -1)
        {
          *(_WORD *)(a2 + 248) = 0;
          *(_BYTE *)(a2 + 1592) = 0;
        }
        break;
      }
      v10 = v11 + 1;
      v9 = v8 - (_BYTE *)v10;
    }
    while (v8 - (_BYTE *)v10 >= 13);
  }
  if (v6 < 4)
    goto LABEL_58;
  v13 = v6;
  v14 = v7;
  do
  {
    v15 = (char *)memchr(v14, 95, v13 - 3);
    if (!v15)
      break;
    if (*(_DWORD *)v15 == 1953510751)
    {
      if (v15 != v8 && v15 - v7 != -1)
        *(_BYTE *)(a2 + 7080) = 0;
      break;
    }
    v14 = v15 + 1;
    v13 = v8 - (_BYTE *)v14;
  }
  while (v8 - (_BYTE *)v14 >= 4);
  if (v6 >= 15)
  {
    v16 = v6;
    v17 = v7;
    do
    {
      v18 = (char *)memchr(v17, 95, v16 - 14);
      if (!v18)
        break;
      if (*(_QWORD *)v18 == 0x6361727470616D5FLL && *(_QWORD *)(v18 + 7) == 0x747035676E696B63)
      {
        if (v18 != v8 && v18 - v7 != -1)
          *(_BYTE *)(a2 + 6172) = 0;
        break;
      }
      v17 = v18 + 1;
      v16 = v8 - (_BYTE *)v17;
    }
    while (v8 - (_BYTE *)v17 >= 15);
  }
  if (v6 >= 8)
  {
    v20 = v6;
    v21 = v7;
    do
    {
      v22 = (char *)memchr(v21, 95, v20 - 7);
      if (!v22)
        break;
      if (*(_QWORD *)v22 == 0x745F62696C61635FLL)
      {
        if (v22 != v8 && v22 - v7 != -1)
          *(_BYTE *)(a2 + 2433) = 1;
        break;
      }
      v21 = v22 + 1;
      v20 = v8 - (_BYTE *)v21;
    }
    while (v8 - (_BYTE *)v21 >= 8);
    v23 = v6;
    v24 = v7;
    do
    {
      v25 = (char *)memchr(v24, 95, v23 - 7);
      if (!v25)
        break;
      if (*(_QWORD *)v25 == 0x4B5F62696C61635FLL)
      {
        if (v25 != v8 && v25 - v7 != -1)
          *(_BYTE *)(a2 + 2442) = 1;
        break;
      }
      v24 = v25 + 1;
      v23 = v8 - (_BYTE *)v24;
    }
    while (v8 - (_BYTE *)v24 >= 8);
  }
  if (v6 < 6)
  {
LABEL_58:
    v153 = 7;
    strcpy((char *)__c, "_sigma_");
    goto LABEL_59;
  }
  v37 = v6;
  v38 = v7;
  do
  {
    v39 = (char *)memchr(v38, 95, v37 - 5);
    if (!v39)
      break;
    if (*(_DWORD *)v39 == 1601138271 && *((_WORD *)v39 + 2) == 18256)
    {
      if (v39 != v8 && v39 - v7 != -1)
        *(_BYTE *)(a2 + 6616) = 0;
      break;
    }
    v38 = v39 + 1;
    v37 = v8 - (_BYTE *)v38;
  }
  while (v8 - (_BYTE *)v38 >= 6);
  if (v6 >= 17)
  {
    v51 = v6;
    v52 = v7;
    do
    {
      v53 = (char *)memchr(v52, 95, v51 - 16);
      if (!v53)
        break;
      if (*(_QWORD *)v53 == 0x6F69746F4D6F4E5FLL && *((_QWORD *)v53 + 1) == 0x657A796C616E416ELL && v53[16] == 114)
      {
        if (v53 != v8 && v53 - v7 != -1)
          *(_BYTE *)(a2 + 9128) = 0;
        break;
      }
      v52 = v53 + 1;
      v51 = v8 - (_BYTE *)v52;
    }
    while (v8 - (_BYTE *)v52 >= 17);
    if (v6 >= 19)
    {
      v105 = v6;
      v106 = v7;
      while (1)
      {
        v107 = (char *)memchr(v106, 95, v105 - 18);
        if (!v107)
          break;
        if (*(_QWORD *)v107 == 0x766974706164415FLL
          && *((_QWORD *)v107 + 1) == 0x6D61726679654B65
          && *(_QWORD *)(v107 + 11) == 0x676E696D61726679)
        {
          if (v107 != v8 && v107 - v7 != -1)
          {
            *(_BYTE *)(a2 + 1456) = 1;
            *(_DWORD *)(a2 + 1460) = 1;
            *(_QWORD *)(a2 + 1496) = 0x3FC851EB851EB852;
            *(_QWORD *)(a2 + 1512) = 0x3F4D7DBF487FCB92;
          }
          goto LABEL_289;
        }
        v106 = v107 + 1;
        v105 = v8 - (_BYTE *)v106;
        if (v8 - (_BYTE *)v106 < 19)
          goto LABEL_289;
      }
    }
    goto LABEL_289;
  }
  if (v6 > 14)
  {
LABEL_289:
    v110 = v6;
    v111 = v7;
    do
    {
      v112 = (char *)memchr(v111, 95, v110 - 14);
      if (!v112)
        break;
      if (*(_QWORD *)v112 == 0x62697369766F635FLL && *(_QWORD *)(v112 + 7) == 0x5F666B775F656C62)
      {
        if (v112 != v8 && v112 - v7 != -1)
        {
          v114 = v6;
          v115 = v7;
          do
          {
            if (v114 == 14)
              break;
            v116 = (char *)memchr(v115, 95, v114 - 14);
            if (!v116)
              break;
            if (*(_QWORD *)v116 == 0x62697369766F635FLL && *(_QWORD *)(v116 + 7) == 0x5F666B775F656C62)
              goto LABEL_308;
            v115 = v116 + 1;
            v114 = v8 - (_BYTE *)v115;
          }
          while (v8 - (_BYTE *)v115 > 14);
          v116 = &v7[v6];
LABEL_308:
          v118 = v116 - v7 + 15;
          if (v116 == v8)
            v118 = 14;
          if (v6 <= v118)
            sub_20E89FD0C();
          *(_DWORD *)(a2 + 7004) = atoi(&v7[v118]);
        }
        break;
      }
      v111 = v112 + 1;
      v110 = v8 - (_BYTE *)v111;
    }
    while (v8 - (_BYTE *)v111 >= 15);
    if (v6 >= 28)
    {
      v119 = v6;
      v120 = v7;
      do
      {
        v121 = (char *)memchr(v120, 95, v119 - 27);
        if (!v121)
          break;
        if (*(_QWORD *)v121 == 0x6E6172745F6F6E5FLL
          && *((_QWORD *)v121 + 1) == 0x5F666B5F74696D73
          && *((_QWORD *)v121 + 2) == 0x6D65766F72706D69
          && *((_DWORD *)v121 + 6) == 1601465957)
        {
          if (v121 != v8 && v121 - v7 != -1)
          {
            *(_DWORD *)(a2 + 7004) = -1;
            *(_BYTE *)(a2 + 7020) = 0;
          }
          break;
        }
        v120 = v121 + 1;
        v119 = v8 - (_BYTE *)v120;
      }
      while (v8 - (_BYTE *)v120 >= 28);
      if (v6 >= 34)
      {
        v125 = v6;
        v126 = v7;
        do
        {
          v127 = (char *)memchr(v126, 95, v125 - 33);
          if (!v127)
            break;
          if (*(_QWORD *)v127 == 0x6172745F6E61635FLL
            && *((_QWORD *)v127 + 1) == 0x616D5F74696D736ELL
            && *((_QWORD *)v127 + 2) == 0x625F617461645F70
            && *((_QWORD *)v127 + 3) == 0x6E695F65726F6665
            && *((_WORD *)v127 + 16) == 29801)
          {
            if (v127 != v8 && v127 - v7 != -1)
              *(_BYTE *)(a2 + 7022) = 0;
            break;
          }
          v126 = v127 + 1;
          v125 = v8 - (_BYTE *)v126;
        }
        while (v8 - (_BYTE *)v126 >= 34);
      }
    }
  }
  if (v6 > 13)
  {
    v132 = v6;
    v133 = v7;
    do
    {
      v134 = (char *)memchr(v133, 95, v132 - 13);
      if (!v134)
        break;
      if (*(_QWORD *)v134 == 0x436F74495F6F6E5FLL && *(_QWORD *)(v134 + 6) == 0x62696C61635F436FLL)
      {
        if (v134 != v8 && v134 - v7 != -1)
          *(_BYTE *)(a2 + 2432) = 0;
        break;
      }
      v133 = v134 + 1;
      v132 = v8 - (_BYTE *)v133;
    }
    while (v8 - (_BYTE *)v133 > 13);
  }
  if (v6 >= 13)
  {
    v136 = v6;
    v137 = v7;
    do
    {
      v138 = (char *)memchr(v137, 95, v136 - 12);
      if (!v138)
        break;
      if (*(_QWORD *)v138 == 0x656C65645F6F6E5FLL && *(_QWORD *)(v138 + 5) == 0x666B5F6574656C65)
      {
        if (v138 != v8 && v138 - v7 != -1)
        {
          *(_QWORD *)(a2 + 6096) = 10000;
          *(_BYTE *)(a2 + 22) = 1;
        }
        break;
      }
      v137 = v138 + 1;
      v136 = v8 - (_BYTE *)v137;
    }
    while (v8 - (_BYTE *)v137 >= 13);
  }
  v153 = 7;
  strcpy((char *)__c, "_sigma_");
  if (v6 >= 7)
  {
    v140 = v6;
    v141 = v7;
    do
    {
      v142 = (char *)memchr(v141, SLOBYTE(__c[0]), v140 - 6);
      if (!v142)
        break;
      if (*(_DWORD *)v142 == __c[0] && *(_DWORD *)(v142 + 3) == *(int *)((char *)__c + 3))
      {
        if (v142 != v8 && v142 - v7 != -1)
        {
          v144 = v6;
          v145 = v7;
          do
          {
            v146 = (char *)memchr(v145, SLOBYTE(__c[0]), v144 - 6);
            if (!v146)
              break;
            if (*(_DWORD *)v146 == __c[0] && *(_DWORD *)(v146 + 3) == *(int *)((char *)__c + 3))
              goto LABEL_394;
            v145 = v146 + 1;
            v144 = v8 - (_BYTE *)v145;
          }
          while (v8 - (_BYTE *)v145 > 6);
          v146 = &v7[v6];
LABEL_394:
          v148 = v146 - v7 + 7;
          if (v146 == v8)
            v148 = 6;
          if (v6 <= v148)
            sub_20E89FD0C();
          *(double *)(a2 + 6920) = strtof(&v7[v148], 0);
          v4 = a1[23];
          v5 = *((_QWORD *)a1 + 1);
          v151 = *(char **)a1;
          v150 = a1[23];
        }
        break;
      }
      v141 = v142 + 1;
      v140 = v8 - (_BYTE *)v141;
    }
    while (v8 - (_BYTE *)v141 >= 7);
  }
LABEL_59:
  v26 = (char **)a1;
  v27 = v5;
  if (v150 >= 0)
    v28 = v4;
  else
    v28 = v5;
  v149 = v26;
  if (v150 >= 0)
    v29 = (char *)v26;
  else
    v29 = v151;
  v30 = &v29[v28];
  if (v28 >= 25)
  {
    v31 = v28;
    v32 = v29;
    do
    {
      v33 = (char *)memchr(v32, 95, v31 - 24);
      if (!v33)
        break;
      if (*(_QWORD *)v33 == 0x6D6F72705F6F6E5FLL
        && *((_QWORD *)v33 + 1) == 0x6B6165775F65746FLL
        && *((_QWORD *)v33 + 2) == 0x6D61726679656B5FLL
        && v33[24] == 101)
      {
        if (v33 != v30 && v33 - v29 != -1)
          *(_BYTE *)(a2 + 6986) = 0;
        break;
      }
      v32 = v33 + 1;
      v31 = v30 - (_BYTE *)v32;
    }
    while (v30 - (_BYTE *)v32 >= 25);
  }
  if (v28 >= 17)
  {
    v41 = v28;
    v42 = v29;
    do
    {
      v43 = (char *)memchr(v42, 95, v41 - 16);
      if (!v43)
        break;
      if (*(_QWORD *)v43 == 0x5F666B5F6573755FLL && *((_QWORD *)v43 + 1) == 0x6F635F666B5F6F74 && v43[16] == 118)
      {
        if (v43 != v30 && v43 - v29 != -1)
          *(_BYTE *)(a2 + 6987) = 1;
        break;
      }
      v42 = v43 + 1;
      v41 = v30 - (_BYTE *)v42;
    }
    while (v30 - (_BYTE *)v42 >= 17);
    if (v28 >= 20)
    {
      v46 = v28;
      v47 = v29;
      do
      {
        v48 = (char *)memchr(v47, 95, v46 - 19);
        if (!v48)
          break;
        if (*(_QWORD *)v48 == 0x5F7463657465645FLL
          && *((_QWORD *)v48 + 1) == 0x6F6C635F706F6F6CLL
          && *((_DWORD *)v48 + 4) == 1701999987)
        {
          if (v48 != v30 && v48 - v29 != -1)
            *(_BYTE *)(a2 + 6988) = 1;
          break;
        }
        v47 = v48 + 1;
        v46 = v30 - (_BYTE *)v47;
      }
      while (v30 - (_BYTE *)v47 >= 20);
    }
  }
  if (v28 >= 13)
  {
    v57 = v28;
    v58 = v29;
    do
    {
      v59 = memchr(v58, 95, v57 - 12);
      if (!v59)
        break;
      if (*v59 == 0x6C6E695F6D756E5FLL && *(_QWORD *)((char *)v59 + 5) == 0x5F737265696C6E69)
      {
        if (v59 != (_QWORD *)v30 && (char *)v59 - v29 != -1)
        {
          v61 = v28;
          v62 = v29;
          do
          {
            if (v61 == 12)
              break;
            v63 = (char *)memchr(v62, 95, v61 - 12);
            if (!v63)
              break;
            if (*(_QWORD *)v63 == 0x6C6E695F6D756E5FLL && *(_QWORD *)(v63 + 5) == 0x5F737265696C6E69)
              goto LABEL_159;
            v62 = v63 + 1;
            v61 = v30 - (_BYTE *)v62;
          }
          while (v30 - (_BYTE *)v62 > 12);
          v63 = &v29[v28];
LABEL_159:
          v65 = v63 - v29 + 13;
          if (v63 == v30)
            v65 = 12;
          if (v28 <= v65)
            sub_20E89FD0C();
          *(_DWORD *)(a2 + 6944) = atoi(&v29[v65]);
        }
        break;
      }
      v58 = (char *)v59 + 1;
      v57 = v30 - (_BYTE *)v58;
    }
    while (v30 - (_BYTE *)v58 >= 13);
    v56 = v4;
    if (v28 >= 24)
    {
      v66 = v28;
      v67 = v29;
      do
      {
        v68 = (char *)memchr(v67, 95, v66 - 23);
        if (!v68)
          break;
        if (*(_QWORD *)v68 == 0x7465725F78616D5FLL
          && *((_QWORD *)v68 + 1) == 0x645F6C6176656972
          && *((_QWORD *)v68 + 2) == 0x5F65636E61747369)
        {
          if (v68 != v30 && v68 - v29 != -1)
          {
            v71 = v28;
            v72 = v29;
            do
            {
              if (v71 == 23)
                break;
              v73 = (char *)memchr(v72, 95, v71 - 23);
              if (!v73)
                break;
              if (*(_QWORD *)v73 == 0x7465725F78616D5FLL
                && *((_QWORD *)v73 + 1) == 0x645F6C6176656972
                && *((_QWORD *)v73 + 2) == 0x5F65636E61747369)
              {
                goto LABEL_189;
              }
              v72 = v73 + 1;
              v71 = v30 - (_BYTE *)v72;
            }
            while (v30 - (_BYTE *)v72 > 23);
            v73 = &v29[v28];
LABEL_189:
            v76 = v73 - v29 + 24;
            if (v73 == v30)
              v76 = 23;
            if (v28 <= v76)
              sub_20E89FD0C();
            *(double *)(a2 + 6960) = strtof(&v29[v76], 0);
            v56 = *((unsigned __int8 *)v149 + 23);
            v27 = (uint64_t)v149[1];
            v151 = *v149;
            v150 = *((_BYTE *)v149 + 23);
          }
          break;
        }
        v67 = v68 + 1;
        v66 = v30 - (_BYTE *)v67;
      }
      while (v30 - (_BYTE *)v67 >= 24);
    }
  }
  else
  {
    v56 = v4;
  }
  if (v150 >= 0)
  {
    v77 = (char *)v149;
  }
  else
  {
    v56 = v27;
    v77 = v151;
  }
  if (v56 >= 17)
  {
    v78 = &v77[v56];
    v79 = v56;
    v80 = v77;
    do
    {
      v81 = (char *)memchr(v80, 95, v79 - 16);
      if (!v81)
        break;
      if (*(_QWORD *)v81 == 0x5F726F68636E615FLL && *((_QWORD *)v81 + 1) == 0x7967657461727473 && v81[16] == 95)
      {
        if (v81 != v78 && v81 - v77 != -1)
        {
          v84 = v56;
          v85 = v77;
          do
          {
            if (v84 == 16)
              break;
            v86 = (char *)memchr(v85, 95, v84 - 16);
            if (!v86)
              break;
            if (*(_QWORD *)v86 == 0x5F726F68636E615FLL && *((_QWORD *)v86 + 1) == 0x7967657461727473 && v86[16] == 95)
              goto LABEL_222;
            v85 = v86 + 1;
            v84 = v78 - (_BYTE *)v85;
          }
          while (v78 - (_BYTE *)v85 > 16);
          v86 = &v77[v56];
LABEL_222:
          v89 = v86 - v77 + 17;
          if (v86 == v78)
            v89 = 16;
          if (v56 <= v89)
            sub_20E89FD0C();
          *(_DWORD *)(a2 + 7024) = atoi(&v77[v89]);
        }
        break;
      }
      v80 = v81 + 1;
      v79 = v78 - (_BYTE *)v80;
    }
    while (v78 - (_BYTE *)v80 >= 17);
    v90 = v56;
    v91 = v77;
    do
    {
      v92 = (char *)memchr(v91, 95, v90 - 16);
      if (!v92)
        break;
      if (*(_QWORD *)v92 == 0x5F6E696769726F5FLL && *((_QWORD *)v92 + 1) == 0x7967657461727473 && v92[16] == 95)
      {
        if (v92 != v78 && v92 - v77 != -1)
        {
          v95 = v56;
          v96 = v77;
          do
          {
            if (v95 == 16)
              break;
            v97 = (char *)memchr(v96, 95, v95 - 16);
            if (!v97)
              break;
            if (*(_QWORD *)v97 == 0x5F6E696769726F5FLL && *((_QWORD *)v97 + 1) == 0x7967657461727473 && v97[16] == 95)
              goto LABEL_251;
            v96 = v97 + 1;
            v95 = v78 - (_BYTE *)v96;
          }
          while (v78 - (_BYTE *)v96 > 16);
          v97 = &v77[v56];
LABEL_251:
          v100 = v97 - v77 + 17;
          if (v97 == v78)
            v100 = 16;
          if (v56 <= v100)
            sub_20E89FD0C();
          *(_DWORD *)(a2 + 7028) = atoi(&v77[v100]);
        }
        break;
      }
      v91 = v92 + 1;
      v90 = v78 - (_BYTE *)v91;
    }
    while (v78 - (_BYTE *)v91 >= 17);
    v101 = v77;
    do
    {
      v102 = (char *)memchr(v101, 95, v56 - 16);
      if (!v102)
        break;
      if (*(_QWORD *)v102 == 0x616C6F706970655FLL && *((_QWORD *)v102 + 1) == 0x656B636172745F72 && v102[16] == 114)
      {
        if (v102 != v78 && v102 - v77 != -1)
          *(_BYTE *)(a2 + 6781) = 0;
        break;
      }
      v101 = v102 + 1;
      v56 = v78 - (_BYTE *)v101;
    }
    while (v78 - (_BYTE *)v101 >= 17);
  }
  if (v153 < 0)
    operator delete(*(void **)__c);
}

void sub_20EE819C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869418(v1);
  _Unwind_Resume(a1);
}

void sub_20EE819DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E869418(v19);
    _Unwind_Resume(a1);
  }
  sub_20E869418(v19);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE81A24(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20EE81A64(uint64_t a1)
{
  sub_20E869D64(a1 + 1216);
  if (*(char *)(a1 + 1063) < 0)
    operator delete(*(void **)(a1 + 1040));
  return sub_20E869EA0(a1);
}

uint64_t sub_20EE81AAC(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_9:
    operator delete(*(void **)(a1 + 48));
    v3 = *(void **)(a1 + 24);
    if (!v3)
      return a1;
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_9;
LABEL_5:
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
LABEL_6:
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  return a1;
}

double sub_20EE81B20(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = xmmword_2103852B0;
  *(_OWORD *)(a1 + 16) = xmmword_2103852C0;
  *(_OWORD *)(a1 + 32) = xmmword_2103852D0;
  *(_DWORD *)(a1 + 48) = 256;
  *(_OWORD *)(a1 + 56) = xmmword_2103852E0;
  *(_OWORD *)(a1 + 72) = xmmword_2103852F0;
  *(_OWORD *)(a1 + 88) = xmmword_210385070;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 108) = 1;
  *(_OWORD *)(a1 + 112) = xmmword_210385080;
  *(_QWORD *)(a1 + 128) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = xmmword_210315730;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = xmmword_210384E70;
  *(_BYTE *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = xmmword_210385090;
  *(_OWORD *)(a1 + 208) = xmmword_2103850A0;
  *(_QWORD *)(a1 + 224) = 0x3FF199999999999ALL;
  *(_OWORD *)(a1 + 248) = xmmword_2102E3FA0;
  *(_QWORD *)(a1 + 280) = 0x4000000000000000;
  *(_OWORD *)(a1 + 288) = xmmword_210385070;
  *(_BYTE *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 308) = 1;
  *(_QWORD *)(a1 + 312) = 0x4018000000000000;
  *(_OWORD *)(a1 + 320) = xmmword_210384F70;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 352) = 0xFFEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 368) = xmmword_210384E70;
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0x3F80624DD2F1A9FCLL;
  *(int64x2_t *)(a1 + 400) = vdupq_n_s64(0x3FE6666666666666uLL);
  *(_OWORD *)(a1 + 416) = xmmword_210385310;
  *(_BYTE *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 464) = 0x3FB70A3D70A3D70ALL;
  *(_DWORD *)(a1 + 472) = 11;
  *(_OWORD *)(a1 + 480) = xmmword_210385320;
  *(_OWORD *)(a1 + 496) = xmmword_210385330;
  *(_QWORD *)(a1 + 512) = 0x4024000000000000;
  *(_BYTE *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = xmmword_210385340;
  *(_DWORD *)(a1 + 544) = 35;
  *(_DWORD *)(a1 + 552) = 16843008;
  *(_DWORD *)(a1 + 580) = 0;
  *(_BYTE *)(a1 + 584) = 1;
  *(_BYTE *)(a1 + 596) = 0;
  *(_QWORD *)(a1 + 600) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 608) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_WORD *)(a1 + 632) = 1;
  *(_OWORD *)(a1 + 640) = xmmword_210385350;
  *(_OWORD *)(a1 + 656) = xmmword_210385360;
  *(_OWORD *)(a1 + 672) = xmmword_210385370;
  *(_QWORD *)(a1 + 688) = 0x400000003F4CCCCDLL;
  *(_QWORD *)(a1 + 696) = 0x3FCAE147AE147AE1;
  *(_BYTE *)(a1 + 704) = 0;
  *(_DWORD *)(a1 + 708) = 200;
  *(_QWORD *)(a1 + 712) = 0x3FB999999999999ALL;
  *(_QWORD *)(a1 + 720) = 0x3FE8000000000000;
  *(_BYTE *)(a1 + 728) = 1;
  *(_OWORD *)(a1 + 232) = xmmword_210384FF0;
  *(_QWORD *)(a1 + 436) = 0xF0000000ALL;
  *(_OWORD *)(a1 + 264) = xmmword_210385300;
  *(_QWORD *)(a1 + 452) = 0x6400000001;
  *(_QWORD *)(a1 + 572) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 556) = 0u;
  *(_QWORD *)(a1 + 588) = 0xF0000001ELL;
  return result;
}

double sub_20EE81D98(uint64_t a1)
{
  int64x2_t v1;
  int64x2_t v2;
  double result;

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = 1;
  *(_DWORD *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = xmmword_210385380;
  *(_DWORD *)(a1 + 32) = 20;
  *(_OWORD *)(a1 + 36) = xmmword_210385390;
  *(_OWORD *)(a1 + 52) = xmmword_2103853A0;
  *(_DWORD *)(a1 + 68) = 1041865114;
  *(_WORD *)(a1 + 72) = 0;
  v1 = vdupq_n_s64(0x3F847AE147AE147BuLL);
  *(int64x2_t *)(a1 + 80) = v1;
  *(int64x2_t *)(a1 + 96) = v1;
  *(int64x2_t *)(a1 + 112) = vdupq_n_s64(0x3F1A36E2EB1C432DuLL);
  *(_OWORD *)(a1 + 128) = xmmword_210385830;
  *(_OWORD *)(a1 + 144) = unk_210385840;
  *(_OWORD *)(a1 + 160) = xmmword_210385910;
  *(_OWORD *)(a1 + 176) = unk_210385920;
  *(_OWORD *)(a1 + 192) = xmmword_210384D30;
  *(_OWORD *)(a1 + 208) = xmmword_210385930;
  *(_OWORD *)(a1 + 224) = unk_210385940;
  *(_OWORD *)(a1 + 240) = xmmword_210385950;
  *(_OWORD *)(a1 + 256) = xmmword_2103853B0;
  *(int64x2_t *)(a1 + 272) = vdupq_n_s64(0x3FB999999999999AuLL);
  *(_OWORD *)(a1 + 288) = xmmword_2103853C0;
  v2 = vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  *(int64x2_t *)(a1 + 304) = v2;
  *(int64x2_t *)(a1 + 320) = v2;
  *(_QWORD *)(a1 + 352) = 0x40E86A0000000000;
  *(_OWORD *)(a1 + 336) = xmmword_210385960;
  *(_WORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 1;
  *(_DWORD *)(a1 + 376) = 5;
  *(_OWORD *)(a1 + 384) = xmmword_2102DCC90;
  *(_OWORD *)(a1 + 400) = xmmword_2103853D0;
  *(_DWORD *)(a1 + 416) = 0x1000000;
  *(_WORD *)(a1 + 428) = 0;
  *(_QWORD *)(a1 + 420) = 0;
  *(_BYTE *)(a1 + 430) = 1;
  *(_WORD *)(a1 + 435) = 0;
  *(_DWORD *)(a1 + 431) = 0;
  *(_QWORD *)(a1 + 440) = 0x3FA1DF46A2529D39;
  *(_OWORD *)(a1 + 448) = xmmword_2103853E0;
  *(_OWORD *)(a1 + 464) = xmmword_2103853F0;
  *(_DWORD *)(a1 + 480) = 10;
  *(_WORD *)(a1 + 484) = 1;
  *(_BYTE *)(a1 + 486) = 1;
  *(_QWORD *)(a1 + 488) = 0x3FE0000000000000;
  *(_OWORD *)(a1 + 496) = xmmword_210384F10;
  *(_OWORD *)(a1 + 512) = xmmword_21030D320;
  *(_QWORD *)(a1 + 528) = 11;
  *(_DWORD *)(a1 + 536) = 256;
  *(_BYTE *)(a1 + 540) = 1;
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 616) = xmmword_210385400;
  *(_DWORD *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 636) = 1;
  *(_QWORD *)(a1 + 640) = 0x4000000000000000;
  *(_DWORD *)(a1 + 648) = 16777472;
  *(_QWORD *)(a1 + 656) = 0x4024000000000000;
  *(_BYTE *)(a1 + 664) = 1;
  *(_QWORD *)(a1 + 672) = 0x4034000000000000;
  *(_DWORD *)(a1 + 680) = 10;
  *(_OWORD *)(a1 + 688) = xmmword_2103787C0;
  *(_QWORD *)(a1 + 704) = 0x3FDB4395810624DDLL;
  *(_QWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 736) = xmmword_210385410;
  *(_OWORD *)(a1 + 752) = xmmword_210385420;
  *(_DWORD *)(a1 + 768) = 2;
  *(_QWORD *)(a1 + 776) = 0x430C6BF526340000;
  *(_BYTE *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 784) = 0;
  *(_WORD *)(a1 + 793) = 1;
  *(_DWORD *)(a1 + 796) = 8;
  *(_BYTE *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 804) = 0xA00000005;
  *(_WORD *)(a1 + 812) = 0;
  *(_QWORD *)(a1 + 816) = 0x3FE0000000000000;
  result = 0.0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 832) = 0x3FFF333333333333;
  return result;
}

uint64_t sub_20EE82058(uint64_t a1)
{
  _QWORD *v2;
  _DWORD *v8;

  *(_OWORD *)a1 = xmmword_210385430;
  *(_WORD *)(a1 + 16) = 257;
  *(_QWORD *)(a1 + 20) = 0x1000007D0;
  *(_QWORD *)(a1 + 32) = 0x3FD3333333333333;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 88) = 0x3FE0000000000000;
  *(_OWORD *)(a1 + 48) = xmmword_210385440;
  *(_OWORD *)(a1 + 72) = xmmword_2103859D0;
  *(_DWORD *)(a1 + 96) = 640;
  *(_BYTE *)(a1 + 100) = 1;
  *(_DWORD *)(a1 + 101) = 0;
  *(_BYTE *)(a1 + 105) = 0;
  *(_WORD *)(a1 + 106) = 257;
  *(_QWORD *)(a1 + 108) = 0x3F96E9DD3F5425F2;
  *(_DWORD *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  v2 = operator new(0x38uLL);
  *(_QWORD *)(a1 + 136) = v2 + 7;
  *(_QWORD *)(a1 + 144) = v2 + 7;
  v2[6] = 0x20368192CLL;
  *(_OWORD *)v2 = xmmword_2103859E8;
  *((_OWORD *)v2 + 1) = unk_2103859F8;
  *((_OWORD *)v2 + 2) = xmmword_210385A08;
  *(_QWORD *)(a1 + 128) = v2;
  *(_DWORD *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(int64x2_t *)(a1 + 184) = vdupq_n_s64(0xAuLL);
  *(_QWORD *)(a1 + 200) = 0x100000001;
  *(_DWORD *)(a1 + 208) = 5;
  *(_DWORD *)(a1 + 212) = 16843008;
  *(_QWORD *)(a1 + 216) = 0xDC00000200;
  *(_DWORD *)(a1 + 252) = 20;
  *(_DWORD *)(a1 + 268) = 1;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 256) = 0x3E99999AC7C35000;
  *(_DWORD *)(a1 + 264) = 1050253722;
  *(_DWORD *)(a1 + 272) = 2139095040;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 280) = 0x3FD6666666666666;
  *(_OWORD *)(a1 + 288) = xmmword_210385450;
  *(_OWORD *)(a1 + 304) = xmmword_210385030;
  *(_BYTE *)(a1 + 320) = 1;
  *(_QWORD *)(a1 + 328) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 336) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 368) = 0x64000003E8;
  *(_DWORD *)(a1 + 376) = 7200;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 1;
  *(_QWORD *)(a1 + 400) = 0x4004000000000000;
  *(_QWORD *)(a1 + 408) = 12;
  *(_OWORD *)(a1 + 416) = xmmword_210384E80;
  *(_QWORD *)(a1 + 432) = 10;
  *(_QWORD *)(a1 + 440) = 0x500000014;
  *(_OWORD *)(a1 + 448) = xmmword_2102E6720;
  *(_QWORD *)(a1 + 464) = 0x100000001;
  *(_QWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 496) = 65793;
  *(_BYTE *)(a1 + 500) = 1;
  *(_QWORD *)(a1 + 504) = 0x4076800000000000;
  *(_BYTE *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 516) = 0xBF8000000000001ELL;
  *(_OWORD *)(a1 + 524) = xmmword_210385460;
  *(_BYTE *)(a1 + 540) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = xmmword_210385470;
  *(_OWORD *)(a1 + 576) = xmmword_210385480;
  *(int64x2_t *)(a1 + 592) = vdupq_n_s64(0x3FB999999999999AuLL);
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 608) = _Q0;
  *(_OWORD *)(a1 + 624) = xmmword_210385490;
  *(_OWORD *)(a1 + 640) = xmmword_2103854A0;
  *(_DWORD *)(a1 + 656) = 10;
  *(_DWORD *)(a1 + 660) = 65537;
  *(_DWORD *)(a1 + 664) = 15;
  *(_OWORD *)(a1 + 672) = xmmword_2102DBCF0;
  *(_DWORD *)(a1 + 688) = 1500;
  *(_QWORD *)(a1 + 696) = 0x3FF8000000000000;
  *(_QWORD *)(a1 + 704) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 716) = 0x3F80000000000005;
  *(_QWORD *)(a1 + 724) = 0;
  *(_OWORD *)(a1 + 736) = xmmword_2103854B0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 756) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 768) = xmmword_2103854C0;
  *(_OWORD *)(a1 + 784) = xmmword_2103854D0;
  *(_QWORD *)(a1 + 800) = 0xBF847AE147AE147BLL;
  *(_BYTE *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 816) = 65792;
  *(_QWORD *)(a1 + 824) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 832) = 100;
  *(_QWORD *)(a1 + 840) = 0x4008000000000000;
  *(_QWORD *)(a1 + 848) = 0x780000000ALL;
  *(_DWORD *)(a1 + 856) = 1;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  v8 = operator new(4uLL);
  *(_QWORD *)(a1 + 864) = v8;
  *v8++ = 0;
  *(_QWORD *)(a1 + 880) = v8;
  *(_QWORD *)(a1 + 872) = v8;
  *(_QWORD *)(a1 + 888) = 0x3FB47AE147AE147BLL;
  *(_DWORD *)(a1 + 896) = 20;
  *(_QWORD *)(a1 + 904) = 0x3FC3D70A3D70A3D7;
  *(_WORD *)(a1 + 935) = 0;
  *(_BYTE *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 944) = 0;
  return a1;
}

void sub_20EE82488(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 480) = v4;
    operator delete(v4);
  }
  sub_20E869D08(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE824AC(uint64_t a1)
{
  uint64_t v2;
  __int128 v10;

  *(_WORD *)a1 = 0;
  v2 = a1 + 2647;
  *(_BYTE *)(a1 + 2) = 0;
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(5uLL);
  *(_OWORD *)(a1 + 24) = xmmword_2103854E0;
  *(_OWORD *)(a1 + 40) = xmmword_2103854F0;
  *(_OWORD *)(a1 + 56) = xmmword_210385500;
  *(_QWORD *)(a1 + 72) = 3;
  *(_QWORD *)(a1 + 80) = 0x200000096;
  *(_OWORD *)(a1 + 88) = xmmword_210385510;
  *(_QWORD *)(a1 + 104) = 10;
  *(_DWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 116) = 1;
  *(_OWORD *)(a1 + 120) = xmmword_2102E6720;
  *(_OWORD *)(a1 + 136) = xmmword_210385520;
  *(_QWORD *)(a1 + 152) = 0x4000000000000000;
  *(_BYTE *)(a1 + 160) = 1;
  *(_OWORD *)(a1 + 168) = xmmword_210385530;
  *(_OWORD *)(a1 + 184) = xmmword_210385540;
  *(_OWORD *)(a1 + 200) = xmmword_210385550;
  *(_OWORD *)(a1 + 216) = xmmword_210385560;
  *(_QWORD *)(a1 + 232) = 0x4038000000000000;
  *(_OWORD *)(a1 + 240) = xmmword_210385570;
  *(_OWORD *)(a1 + 256) = xmmword_210385580;
  *(_OWORD *)(a1 + 272) = xmmword_210385590;
  *(_QWORD *)(a1 + 288) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 300) = 0;
  *(_OWORD *)(a1 + 352) = xmmword_210385150;
  *(int64x2_t *)(a1 + 368) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_BYTE *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 388) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 304) = xmmword_2103855A0;
  *(_QWORD *)(a1 + 320) = 0x4014000000000000;
  *(_QWORD *)(a1 + 328) = 100;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0x3FE0000000000000;
  __asm { FMOV            V1.2D, #0.5 }
  *(_OWORD *)(a1 + 400) = _Q1;
  *(_OWORD *)(a1 + 416) = xmmword_2103855B0;
  v10 = _Q1;
  *(_WORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 2;
  *(_QWORD *)(a1 + 448) = 0x3A83126F40400000;
  *(_DWORD *)(a1 + 456) = 0x40000000;
  *(_QWORD *)(a1 + 464) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 472) = 1017370378;
  *(_BYTE *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 512) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 520) = 0x1003CA3D70ALL;
  *(_BYTE *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 496) = 2139095040;
  *(_DWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 488) = 2;
  *(_QWORD *)(a1 + 536) = 0x4008000000000000;
  *(_QWORD *)(a1 + 544) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 552) = 15;
  *(_BYTE *)(a1 + 556) = 1;
  *(_BYTE *)(a1 + 560) = 1;
  *(_QWORD *)(a1 + 564) = 0xA00000000;
  *(_BYTE *)(a1 + 572) = 0;
  *(_OWORD *)(a1 + 576) = xmmword_2103855C0;
  *(int64x2_t *)(a1 + 592) = vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
  *(_OWORD *)(a1 + 608) = xmmword_2103855D0;
  *(_OWORD *)(a1 + 624) = xmmword_2103855E0;
  *(_OWORD *)(a1 + 640) = xmmword_2103855F0;
  *(_OWORD *)(a1 + 656) = xmmword_210385600;
  *(_QWORD *)(a1 + 672) = 0x4008000000000000;
  *(_QWORD *)(a1 + 680) = 1;
  *(_QWORD *)(a1 + 688) = 0x3F0A36E2EB1C432DLL;
  *(_QWORD *)(a1 + 696) = 7;
  *(_OWORD *)(a1 + 704) = xmmword_2102DD520;
  *(_DWORD *)(a1 + 720) = 1;
  *(_DWORD *)(a1 + 724) = 16843009;
  *(_BYTE *)(a1 + 728) = 0;
  *(_DWORD *)(a1 + 732) = 50;
  *(_QWORD *)(a1 + 736) = 0x3FF4000000000000;
  *(_DWORD *)(a1 + 744) = 1;
  *(_OWORD *)(a1 + 752) = xmmword_210385610;
  *(_BYTE *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 776) = 0x3F689374BC6A7EFALL;
  *(_OWORD *)(a1 + 784) = xmmword_210385620;
  *(_QWORD *)(a1 + 800) = 200;
  *(_QWORD *)(a1 + 808) = 0x3F747AE147AE147BLL;
  *(_OWORD *)(a1 + 816) = xmmword_210315A80;
  *(_OWORD *)(a1 + 832) = xmmword_210315A90;
  *(_BYTE *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 852) = 0;
  *(_BYTE *)(a1 + 856) = 1;
  *(_DWORD *)(a1 + 860) = 0;
  *(_OWORD *)(a1 + 864) = xmmword_210385630;
  *(_QWORD *)(a1 + 880) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 888) = 30;
  *(_OWORD *)(a1 + 896) = _Q1;
  *(_OWORD *)(a1 + 912) = xmmword_210385640;
  *(_DWORD *)(a1 + 928) = 65792;
  *(_BYTE *)(a1 + 932) = 0;
  *(_DWORD *)(a1 + 936) = 2;
  *(_BYTE *)(a1 + 940) = 1;
  *(_OWORD *)(a1 + 944) = xmmword_210385650;
  *(_DWORD *)(a1 + 960) = 50;
  *(_WORD *)(a1 + 964) = 257;
  *(_BYTE *)(a1 + 966) = 1;
  *(_QWORD *)(a1 + 968) = 0x110000001111;
  *(_QWORD *)(a1 + 976) = -1;
  *(_QWORD *)(a1 + 984) = 0x4004000000000000;
  *(_QWORD *)(a1 + 992) = 0x4008000000000000;
  *(_BYTE *)(a1 + 1000) = 0;
  sub_20EE82A14(a1 + 1008);
  *(_BYTE *)(a1 + 1872) = 0;
  *(_BYTE *)(a1 + 2056) = 0;
  *(_QWORD *)(a1 + 2064) = 10;
  *(_BYTE *)(a1 + 2072) = 0;
  *(_BYTE *)(a1 + 2248) = 0;
  *(_OWORD *)(a1 + 2256) = xmmword_210385660;
  *(_DWORD *)(a1 + 2272) = 100;
  *(_QWORD *)(a1 + 2280) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2288) = xmmword_2102DBCF0;
  *(_OWORD *)(a1 + 2304) = v10;
  *(_QWORD *)(a1 + 2320) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 2328) = 0;
  *(_BYTE *)(a1 + 2330) = 0;
  *(_QWORD *)(a1 + 2336) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 2344) = 1;
  *(_BYTE *)(a1 + 2464) = 0;
  *(_BYTE *)(a1 + 2472) = 0;
  *(_BYTE *)(a1 + 2488) = 0;
  *(_BYTE *)(a1 + 2448) = 0;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_DWORD *)(a1 + 2496) = 0;
  *(_DWORD *)(a1 + 2499) = 0;
  *(_DWORD *)(a1 + 2504) = 250;
  *(_WORD *)(a1 + 2512) = 0;
  *(_WORD *)(a1 + 2543) = 4;
  strcpy((char *)(a1 + 2520), "none");
  *(_QWORD *)(a1 + 2568) = 0;
  *(_DWORD *)(a1 + 2576) = 0;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_QWORD *)(a1 + 2580) = 0x100000200;
  *(_BYTE *)(a1 + 2588) = 0;
  __asm { FMOV            V1.2S, #10.0 }
  *(_QWORD *)(a1 + 2592) = _D1;
  *(_WORD *)(a1 + 2600) = 0;
  *(_BYTE *)(a1 + 2602) = 0;
  *(_QWORD *)(a1 + 2604) = 0x100000001;
  *(_DWORD *)(a1 + 2612) = 1;
  *(_WORD *)(a1 + 2616) = 257;
  *(_WORD *)(a1 + 2622) = 0;
  *(_DWORD *)(a1 + 2618) = 0;
  *(_QWORD *)(a1 + 2624) = -1;
  *(_QWORD *)(a1 + 2638) = 0;
  *(_QWORD *)(a1 + 2632) = 0;
  *(_BYTE *)(a1 + 2646) = 1;
  *(_DWORD *)v2 = 0;
  *(_WORD *)(a1 + 2651) = 257;
  *(_OWORD *)(a1 + 2656) = xmmword_210385670;
  *(_QWORD *)(a1 + 2672) = 0x3F59999A3EB33333;
  *(_DWORD *)(a1 + 2680) = 1077936128;
  *(_QWORD *)(a1 + 2688) = 2;
  *(_OWORD *)(v2 + 49) = xmmword_210385680;
  *(_QWORD *)(a1 + 2712) = -1;
  *(_DWORD *)(a1 + 2720) = 80;
  *(_QWORD *)(a1 + 2728) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2736) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2744) = 0;
  *(_WORD *)(a1 + 2748) = 1;
  *(_QWORD *)(a1 + 2752) = 0;
  *(_QWORD *)(a1 + 2760) = 0x3E1A6B5100000000;
  *(_DWORD *)(a1 + 2791) = 0;
  *(_QWORD *)(a1 + 2784) = 0;
  *(_OWORD *)(a1 + 2768) = 0u;
  *(_DWORD *)(a1 + 2796) = 40;
  *(_QWORD *)(a1 + 2800) = 0x4010000000000000;
  return a1;
}

uint64_t sub_20EE82A14(uint64_t a1)
{
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 10;
  *(_BYTE *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = 1050253722;
  *(_QWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0x4000000000000000;
  *(_QWORD *)(a1 + 40) = 5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 60) = 0x41A000007F7FFFFFLL;
  *(_WORD *)(a1 + 68) = 257;
  *(_DWORD *)(a1 + 72) = 10;
  *(_BYTE *)(a1 + 76) = 1;
  *(_QWORD *)(a1 + 80) = 0x200000003;
  *(_DWORD *)(a1 + 88) = 1062836634;
  *(_BYTE *)(a1 + 119) = 20;
  *(_OWORD *)(a1 + 224) = 0u;
  strcpy((char *)(a1 + 96), "image_retrieval_vlad");
  *(_BYTE *)(a1 + 143) = 19;
  strcpy((char *)(a1 + 120), "covisible_keyframes");
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 216) = 1;
  *(_BYTE *)(a1 + 218) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  sub_20EE82C8C(a1 + 304);
  *(_BYTE *)(a1 + 584) = 1;
  *(_DWORD *)(a1 + 588) = 20;
  *(_OWORD *)(a1 + 592) = xmmword_210385690;
  *(_QWORD *)(a1 + 608) = 0x3FB999999999999ALL;
  sub_20EE82E7C(a1 + 616);
  *(_BYTE *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 804) = 6;
  *(_QWORD *)(a1 + 816) = 6;
  *(_BYTE *)(a1 + 824) = 0;
  *(_DWORD *)(a1 + 832) = 1;
  *(_QWORD *)(a1 + 840) = 6;
  *(_QWORD *)(a1 + 848) = 0x3FD0000000000000;
  *(_DWORD *)(a1 + 856) = 3;
  return a1;
}

void sub_20EE82BA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;

  v5 = v2;
  sub_20E869CA8(v5);
  if (*(char *)(v1 + 295) < 0)
  {
    operator delete(*(void **)(v1 + 272));
    if ((*(char *)(v1 + 271) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 247) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(v1 + 271) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 248));
  if ((*(char *)(v1 + 247) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 215) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*v3);
  if ((*(char *)(v1 + 215) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 191) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(v1 + 192));
  if ((*(char *)(v1 + 191) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 167) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(v1 + 168));
  if ((*(char *)(v1 + 167) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v1 + 143) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*v4);
  if ((*(char *)(v1 + 143) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(v1 + 119) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(v3 - 13));
  if ((*(char *)(v1 + 119) & 0x80000000) == 0)
LABEL_9:
    _Unwind_Resume(a1);
LABEL_17:
  operator delete(*(v3 - 16));
  _Unwind_Resume(a1);
}

uint64_t sub_20EE82C8C(uint64_t a1)
{
  _QWORD *v2;
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = operator new(0x18uLL);
  v2[2] = 5;
  *(_OWORD *)v2 = xmmword_210385A20;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2 + 3;
  *(_QWORD *)(a1 + 16) = v2 + 3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v3 = operator new(0xCuLL);
  *(_QWORD *)(a1 + 32) = v3 + 3;
  *(_QWORD *)(a1 + 40) = v3 + 3;
  *(_QWORD *)v3 = 0x3E19999A3DCCCCCDLL;
  v3[2] = 1045220557;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 48) = 0x400000003;
  *(_DWORD *)(a1 + 56) = 6;
  *(_OWORD *)(a1 + 64) = xmmword_2103856A0;
  *(_DWORD *)(a1 + 80) = 10;
  *(_WORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 88) = 0x3F59999A0000000FLL;
  *(_QWORD *)(a1 + 96) = 2;
  *(_OWORD *)(a1 + 104) = xmmword_210384F70;
  *(_OWORD *)(a1 + 120) = xmmword_210378C50;
  *(_QWORD *)(a1 + 136) = 50;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v4 = operator new(8uLL);
  *v4 = 20;
  *(_QWORD *)(a1 + 144) = v4;
  *(_QWORD *)(a1 + 152) = v4 + 1;
  *(_QWORD *)(a1 + 160) = v4 + 1;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v5 = operator new(8uLL);
  *(_QWORD *)(a1 + 168) = v5;
  *v5++ = 0;
  *(_QWORD *)(a1 + 184) = v5;
  *(_QWORD *)(a1 + 192) = 0x3FECCCCCCCCCCCCDLL;
  *(_OWORD *)(a1 + 200) = xmmword_210384F80;
  *(_OWORD *)(a1 + 216) = xmmword_210384F90;
  *(_QWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 240) = 256;
  *(_OWORD *)(a1 + 248) = xmmword_210385978;
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 272) = 0;
  *v4 = 4;
  *(_QWORD *)(a1 + 152) = v4 + 1;
  *(_QWORD *)(a1 + 176) = v5;
  *(_QWORD *)(a1 + 96) = 3;
  return a1;
}

void sub_20EE82E1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;
  void *v5;

  *(_QWORD *)(v1 + 152) = v2;
  operator delete(v2);
  v4 = *(void **)(v1 + 24);
  if (v4)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    v5 = *(void **)v1;
    if (!*(_QWORD *)v1)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v5 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 8) = v5;
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE82E7C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  int64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = 2;
  *(_OWORD *)(a1 + 8) = xmmword_210384F70;
  *(_OWORD *)(a1 + 24) = xmmword_210378C50;
  *(_QWORD *)(a1 + 40) = 50;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v3 = operator new(8uLL);
  *v2 = v3;
  *v3 = 20;
  *(_QWORD *)(a1 + 56) = v3 + 1;
  *(_QWORD *)(a1 + 64) = v3 + 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v4 = operator new(8uLL);
  *(_QWORD *)(a1 + 72) = v4;
  *v4++ = 0x3FD999999999999ALL;
  *(_QWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 88) = v4;
  *(_QWORD *)(a1 + 96) = 0x3FECCCCCCCCCCCCDLL;
  *(_OWORD *)(a1 + 104) = xmmword_210384F80;
  *(_OWORD *)(a1 + 120) = xmmword_210384F90;
  *(_QWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 144) = 256;
  *(_OWORD *)(a1 + 152) = xmmword_210385978;
  *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 56) = v3;
  operator delete(v3);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v5 = operator new(0x18uLL);
  *(_QWORD *)(a1 + 56) = v5 + 3;
  *(_QWORD *)(a1 + 64) = v5 + 3;
  v5[2] = 5;
  *(_OWORD *)v5 = xmmword_210385A20;
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(char **)(a1 + 72);
  *(_QWORD *)(a1 + 48) = v5;
  if ((unint64_t)(v6 - (_QWORD)v7) < 0x18)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 80) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
    }
    v8 = v6 >> 2;
    if ((unint64_t)(v6 >> 2) <= 3)
      v8 = 3;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9 >> 61)
      sub_20E867F44();
    v7 = (char *)operator new(8 * v9);
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = v7;
    *(_QWORD *)(a1 + 88) = &v7[8 * v9];
    *(_OWORD *)v7 = xmmword_210385A38;
    goto LABEL_16;
  }
  v10 = *(char **)(a1 + 80);
  v11 = v10 - v7;
  if ((unint64_t)(v10 - v7) > 0x17)
  {
    *(_OWORD *)v7 = xmmword_210385A38;
LABEL_16:
    *((_QWORD *)v7 + 2) = 0x3FC999999999999ALL;
    v14 = 3;
    goto LABEL_17;
  }
  v12 = (char *)&xmmword_210385A38 + v11;
  if (v10 != v7)
  {
    memcpy(v7, &xmmword_210385A38, v10 - v7);
    v7 = *(char **)(a1 + 80);
  }
  v13 = 24 - v11;
  memcpy(v7, v12, v13);
  v14 = v13 >> 3;
LABEL_17:
  *(_QWORD *)(a1 + 80) = &v7[8 * v14];
  *(_BYTE *)(a1 + 145) = 0;
  *(_QWORD *)a1 = 6;
  *(_OWORD *)(a1 + 24) = xmmword_210378C50;
  *(_QWORD *)(a1 + 40) = 50;
  return a1;
}

void sub_20EE830F0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20EE81A24(v1);
  _Unwind_Resume(a1);
}

void sub_20EE83104(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20EE81A24(v1);
  _Unwind_Resume(a1);
}

void sub_20EE83118(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 56) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE83130(uint64_t *a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  char *v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::logic_error *exception;
  __int128 *v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  size_t v44;
  void **p_dst;
  size_t v46;
  void **v47;
  unint64_t v48;
  const void *v49;
  unint64_t v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  size_t v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  const char *v60;
  size_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  size_t v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  size_t v72;
  size_t v73;
  _QWORD *v74;
  void *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  size_t v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  const char *v85;
  size_t v86;
  _BYTE *v87;
  const char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  size_t v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  size_t v99;
  size_t v100;
  _QWORD *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char v106;
  _QWORD *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *p_shared_owners;
  unint64_t v111;
  char *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char v122;
  _QWORD *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  const char *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  _QWORD *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  const char *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  const char *v209;
  int v210;
  uint64_t v211;
  uint64_t *v212;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v214;
  int v215;
  const char *v216;
  int v217;
  const char *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  void **__dst;
  size_t v222;
  int64_t v223;
  _QWORD v224[2];
  uint64_t v225;
  uint64_t v226;
  const void *v227;
  uint64_t v228;
  const void *v229;
  unint64_t v230;
  void *__p;
  char v232;
  unint64_t v233;
  int v234;
  _BYTE v235[152];
  uint64_t v236;
  __int128 v237;
  std::__shared_weak_count *v238;
  char *v239;
  std::__shared_weak_count *v240;
  _QWORD *v241;
  __int128 v242;
  _BYTE v243[24];
  __int128 v244;
  char *v245;
  size_t v246;
  unint64_t v247;
  char v248;
  _QWORD v249[5];

  v249[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 *)(a2 + 249);
  if (*(_BYTE *)(a2 + 248))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/LineTrackingEnablerConfig.h", 65, (uint64_t)"", 0, (uint64_t)"Cannot enable lines both 'always' and 'when needed'.", 52, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v6 = (char *)(a2 + 5408);
  v7 = 2 * (v2 != 0);
  if (*(_BYTE *)(a2 + 248))
    v8 = 1;
  else
    v8 = v7;
  v9 = *(_QWORD *)(a2 + 432);
  *v6 = v8;
  *(_QWORD *)(a2 + 5416) = v9;
  *(_QWORD *)(a2 + 5456) = 0x500000014;
  *(_QWORD *)(a2 + 5464) = 0x4014000000000000;
  *(_QWORD *)(a2 + 5472) = 0x3FE0000000000000;
  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    while (*(_DWORD *)v10)
    {
      v10 += 1088;
      if (v10 == v11)
        goto LABEL_22;
    }
  }
  if (v10 == v11)
    goto LABEL_22;
  *(double *)(a2 + 4288) = (double)*(unint64_t *)(a2 + 4280)
                         / ((*(double *)(v10 + 120) + *(double *)(v10 + 152))
                          * 0.5);
  v12 = *(_OWORD *)(a1 + 7);
  *(_QWORD *)(a2 + 4448) = a1[9];
  *(_OWORD *)(a2 + 4432) = v12;
  v14 = *a1;
  v13 = a1[1];
  if (*a1 != v13)
  {
    while (*(_DWORD *)v14)
    {
      v14 += 1088;
      if (v14 == v13)
        goto LABEL_22;
    }
  }
  if (v14 == v13)
    goto LABEL_22;
  *(double *)(a2 + 7688) = (double)*(unint64_t *)(a2 + 7680)
                         / ((*(double *)(v14 + 120) + *(double *)(v14 + 152))
                          * 0.5);
  v15 = a1[9];
  *(_OWORD *)(a2 + 7832) = *(_OWORD *)(a1 + 7);
  *(_QWORD *)(a2 + 7848) = v15;
  v16 = *(_QWORD *)(a2 + 7464);
  v17 = *a1;
  v18 = a1[1];
  if (*a1 != v18)
  {
    while (*(_DWORD *)v17)
    {
      v17 += 1088;
      if (v17 == v18)
        goto LABEL_22;
    }
  }
  if (v17 == v18)
  {
LABEL_22:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E92751C(exception, "Requested camera id not found.");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v20 = (__int128 *)(a2 + 4280);
  *(double *)(a2 + 7472) = (double)v16 / ((*(double *)(v17 + 120) + *(double *)(v17 + 152)) * 0.5);
  v21 = *(_OWORD *)(a1 + 7);
  *(_QWORD *)(a2 + 7632) = a1[9];
  *(_OWORD *)(a2 + 7616) = v21;
  v22 = (__int128 *)(a2 + 7928);
  if (v6[2704])
  {
    v23 = *(_OWORD *)(a2 + 4296);
    *v22 = *v20;
    *(_OWORD *)(a2 + 7944) = v23;
    *(_OWORD *)(a2 + 7960) = *(_OWORD *)(a2 + 4312);
    sub_20E86811C((_QWORD *)(a2 + 7976), *(char **)(a2 + 4328), *(char **)(a2 + 4336), (uint64_t)(*(_QWORD *)(a2 + 4336) - *(_QWORD *)(a2 + 4328)) >> 3);
    result = (uint64_t)sub_20E86811C((_QWORD *)(a2 + 8000), *(char **)(a2 + 4352), *(char **)(a2 + 4360), (uint64_t)(*(_QWORD *)(a2 + 4360) - *(_QWORD *)(a2 + 4352)) >> 3);
    v25 = *(_OWORD *)(a2 + 4424);
    *(_OWORD *)(a2 + 8056) = *(_OWORD *)(a2 + 4408);
    *(_OWORD *)(a2 + 8072) = v25;
    *(_OWORD *)(a2 + 8088) = *(_OWORD *)(a2 + 4440);
    *(_WORD *)(a2 + 8104) = *(_WORD *)(a2 + 4456);
    v26 = *(_OWORD *)(a2 + 4392);
    *(_OWORD *)(a2 + 8024) = *(_OWORD *)(a2 + 4376);
    *(_OWORD *)(a2 + 8040) = v26;
  }
  else
  {
    result = sub_20E868FE0((uint64_t)v22, v20);
    v6[2704] = 1;
  }
  v6[1372] = v6[764];
  v27 = (_OWORD *)(a2 + 9208);
  v28 = (_OWORD *)(a2 + 8128);
  if (v6[2896])
  {
    v29 = *(_OWORD *)(a2 + 9352);
    *(_OWORD *)(a2 + 8256) = *(_OWORD *)(a2 + 9336);
    *(_OWORD *)(a2 + 8272) = v29;
    *(_OWORD *)(a2 + 8281) = *(_OWORD *)(a2 + 9361);
    v30 = *(_OWORD *)(a2 + 9288);
    *(_OWORD *)(a2 + 0x2000) = *(_OWORD *)(a2 + 9272);
    *(_OWORD *)(a2 + 8208) = v30;
    v31 = *(_OWORD *)(a2 + 9320);
    *(_OWORD *)(a2 + 8224) = *(_OWORD *)(a2 + 9304);
    *(_OWORD *)(a2 + 8240) = v31;
    v32 = *(_OWORD *)(a2 + 9224);
    *v28 = *v27;
    *(_OWORD *)(a2 + 8144) = v32;
    v33 = *(_OWORD *)(a2 + 9256);
    *(_OWORD *)(a2 + 8160) = *(_OWORD *)(a2 + 9240);
    *(_OWORD *)(a2 + 8176) = v33;
    v34 = *((double *)a1 + 12) * *((double *)a1 + 12);
    if (v34 >= *(double *)(a2 + 2128))
      goto LABEL_34;
  }
  else
  {
    v35 = *(_OWORD *)(a2 + 9352);
    *(_OWORD *)(a2 + 8256) = *(_OWORD *)(a2 + 9336);
    *(_OWORD *)(a2 + 8272) = v35;
    *(_OWORD *)(a2 + 8288) = *(_OWORD *)(a2 + 9368);
    v36 = *(_OWORD *)(a2 + 9288);
    *(_OWORD *)(a2 + 0x2000) = *(_OWORD *)(a2 + 9272);
    *(_OWORD *)(a2 + 8208) = v36;
    v37 = *(_OWORD *)(a2 + 9320);
    *(_OWORD *)(a2 + 8224) = *(_OWORD *)(a2 + 9304);
    *(_OWORD *)(a2 + 8240) = v37;
    v38 = *(_OWORD *)(a2 + 9224);
    *v28 = *v27;
    *(_OWORD *)(a2 + 8144) = v38;
    v39 = *(_OWORD *)(a2 + 9256);
    *(_OWORD *)(a2 + 8160) = *(_OWORD *)(a2 + 9240);
    *(_OWORD *)(a2 + 8176) = v39;
    v6[2896] = 1;
    v34 = *((double *)a1 + 12) * *((double *)a1 + 12);
    if (v34 >= *(double *)(a2 + 2128))
      goto LABEL_34;
  }
  *(double *)(a2 + 2128) = v34;
  sub_20EE84AFC(&v236);
  result = v236;
  if (**(int **)(v236 + 56) > 3
    || (v40 = *(unsigned __int8 *)(v236 + 72),
        result = sub_20E8C31DC(v236, "OSLogSurrogateAppender", 1, 0),
        v41 = result,
        !v40)
    && !result)
  {
LABEL_34:
    if (!*((_BYTE *)a1 + 112))
      return result;
LABEL_35:
    *(_QWORD *)(a2 + 2320) = a1[13];
    sub_20EE84AFC(&v236);
    result = v236;
    if (**(int **)(v236 + 56) > 3)
      return result;
    v42 = *(unsigned __int8 *)(v236 + 72);
    result = sub_20E8C31DC(v236, "OSLogSurrogateAppender", 1, 0);
    v43 = result;
    if (!v42 && !result)
      return result;
    sub_20E863438((uint64_t)v224);
    sub_20E86A980(&v225, (uint64_t)"Update VisualInertialBundleAdjusterConfig.initial_gyro_scale_variance: ", 71);
    std::ostream::operator<<();
    v210 = v42;
    if ((v234 & 0x10) != 0)
    {
      v48 = v233;
      if (v233 < v230)
      {
        v233 = v230;
        v48 = v230;
      }
      v49 = v229;
      v44 = v48 - (_QWORD)v229;
      if (v48 - (unint64_t)v229 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_153;
    }
    else
    {
      if ((v234 & 8) == 0)
      {
        v44 = 0;
        HIBYTE(v223) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_60;
      }
      v49 = v227;
      v44 = v228 - (_QWORD)v227;
      if ((unint64_t)(v228 - (_QWORD)v227) > 0x7FFFFFFFFFFFFFF7)
LABEL_153:
        sub_20E860B7C();
    }
    if (v44 >= 0x17)
    {
      v52 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17)
        v52 = v44 | 7;
      v53 = v52 + 1;
      p_dst = (void **)operator new(v52 + 1);
      v222 = v44;
      v223 = v53 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v223) = v44;
      p_dst = (void **)&__dst;
      if (!v44)
      {
LABEL_60:
        *((_BYTE *)p_dst + v44) = 0;
        v212 = &v236;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v214 = std::chrono::system_clock::now().__d_.__rep_;
        v215 = 3;
        v216 = "unknown file";
        v217 = 181;
        v219 = 0;
        v220 = 0;
        v218 = "unknown function";
        if (v223 >= 0)
          v54 = (const char *)&__dst;
        else
          v54 = (const char *)__dst;
        v55 = *v212;
        v56 = (const char *)(*v212 + 16);
        v208 = v56;
        if (*(char *)(*v212 + 39) < 0)
        {
          v56 = *(const char **)(v55 + 16);
          v57 = *(_QWORD *)(v55 + 24);
          v59 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v59 & 1) != 0)
            goto LABEL_67;
        }
        else
        {
          v57 = *(unsigned __int8 *)(*v212 + 39);
          v58 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v58 & 1) != 0)
            goto LABEL_67;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v243);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v243);
          if ((_BYTE)v244 && (v243[23] & 0x80000000) != 0)
            operator delete(*(void **)v243);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_67:
        if (byte_254A4A4F8[23] >= 0)
          v60 = byte_254A4A4F8;
        else
          v60 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v61 = byte_254A4A4F8[23];
        else
          v61 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v243 = os_log_create(v60, v56);
        v62 = &v243[8];
        if (v61 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v61 >= 0x17)
        {
          v63 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v61 | 7) != 0x17)
            v63 = v61 | 7;
          v64 = v63 + 1;
          v62 = operator new(v63 + 1);
          *(_QWORD *)&v243[16] = v61;
          *(_QWORD *)&v244 = v64 | 0x8000000000000000;
          *(_QWORD *)&v243[8] = v62;
        }
        else
        {
          BYTE7(v244) = v61;
          if (!v61)
          {
LABEL_81:
            v62[v61] = 0;
            BYTE8(v244) = 1;
            v65 = (char *)&v245;
            if (v57 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v57 >= 0x17)
            {
              v66 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v57 | 7) != 0x17)
                v66 = v57 | 7;
              v67 = v66 + 1;
              v65 = (char *)operator new(v66 + 1);
              v246 = v57;
              v247 = v67 | 0x8000000000000000;
              v245 = v65;
            }
            else
            {
              HIBYTE(v247) = v57;
              if (!v57)
              {
LABEL_89:
                v65[v57] = 0;
                v248 = 1;
                v68 = *(NSObject **)v243;
                if (SHIBYTE(v247) < 0)
                  operator delete(v245);
                if (BYTE8(v244) && SBYTE7(v244) < 0)
                  operator delete(*(void **)&v243[8]);
                if (*(_QWORD *)v243)
                  os_release(*(void **)v243);
                if (!v43 || !*(_QWORD *)(v43 + 24))
                {
                  os_log_type_enabled(v68, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v243 = 136315138;
                  *(_QWORD *)&v243[4] = v54;
                  v75 = (void *)_os_log_send_and_compose_impl();
                  v76 = v210;
                  if (v75)
                    free(v75);
                  goto LABEL_239;
                }
                v69 = _os_log_pack_size();
                v70 = (std::__shared_weak_count_vtbl *)operator new(v69, (std::align_val_t)8uLL);
                v71 = (std::__shared_weak_count *)operator new();
                v71->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v71->__shared_owners_ = 0;
                v71->__shared_weak_owners_ = 0;
                v71[1].__vftable = v70;
                *(_QWORD *)&v237 = v70;
                *((_QWORD *)&v237 + 1) = v70;
                v239 = 0;
                v240 = 0;
                v238 = v71;
                v72 = strlen(v54);
                if (v72 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v73 = v72;
                if (v72 >= 0x17)
                {
                  v103 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v72 | 7) != 0x17)
                    v103 = v72 | 7;
                  v104 = v103 + 1;
                  v74 = operator new(v103 + 1);
                  *(_QWORD *)&v242 = v73;
                  *((_QWORD *)&v242 + 1) = v104 | 0x8000000000000000;
                  v241 = v74;
                }
                else
                {
                  HIBYTE(v242) = v72;
                  v74 = &v241;
                  if (!v72)
                  {
LABEL_160:
                    *((_BYTE *)v74 + v73) = 0;
                    v105 = v241;
                    v249[0] = v242;
                    *(_QWORD *)((char *)v249 + 7) = *(_QWORD *)((char *)&v242 + 7);
                    v106 = HIBYTE(v242);
                    v107 = operator new(0x38uLL);
                    v107[1] = 0;
                    v107[2] = 0;
                    v107[3] = off_24C9ABC20;
                    *v107 = &off_24C9ABBD0;
                    v108 = v249[0];
                    v107[4] = v105;
                    v107[5] = v108;
                    *(_QWORD *)((char *)v107 + 47) = *(_QWORD *)((char *)v249 + 7);
                    *((_BYTE *)v107 + 55) = v106;
                    v249[0] = 0;
                    *(_QWORD *)((char *)v249 + 7) = 0;
                    v109 = v240;
                    v239 = (char *)(v107 + 3);
                    v240 = (std::__shared_weak_count *)v107;
                    if (v109)
                    {
                      p_shared_owners = (unint64_t *)&v109->__shared_owners_;
                      do
                        v111 = __ldaxr(p_shared_owners);
                      while (__stlxr(v111 - 1, p_shared_owners));
                      if (!v111)
                      {
                        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                        std::__shared_weak_count::__release_weak(v109);
                      }
                    }
                    *(_OWORD *)v243 = v237;
                    v112 = v239;
                    *(_QWORD *)&v243[16] = v238;
                    if (v238)
                    {
                      v113 = (unint64_t *)&v238->__shared_owners_;
                      do
                        v114 = __ldxr(v113);
                      while (__stxr(v114 + 1, v113));
                    }
                    v115 = v240;
                    *(_QWORD *)&v244 = v112;
                    *((_QWORD *)&v244 + 1) = v240;
                    if (v240)
                    {
                      v116 = (unint64_t *)&v240->__shared_owners_;
                      do
                        v117 = __ldxr(v116);
                      while (__stxr(v117 + 1, v116));
                      v245 = v112;
                      do
                        v118 = __ldaxr(v116);
                      while (__stlxr(v118 - 1, v116));
                      if (!v118)
                      {
                        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                        std::__shared_weak_count::__release_weak(v115);
                      }
                    }
                    else
                    {
                      v245 = v112;
                    }
                    v135 = v238;
                    if (v238)
                    {
                      v136 = (unint64_t *)&v238->__shared_owners_;
                      do
                        v137 = __ldaxr(v136);
                      while (__stlxr(v137 - 1, v136));
                      if (!v137)
                      {
                        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                        std::__shared_weak_count::__release_weak(v135);
                      }
                    }
                    v138 = *(_QWORD *)v243;
                    if (v245[31] >= 0)
                      v139 = v245 + 8;
                    else
                      v139 = (char *)*((_QWORD *)v245 + 1);
                    v140 = _os_log_pack_fill();
                    *(_DWORD *)v140 = 136315138;
                    *(_QWORD *)(v140 + 4) = v139;
                    v141 = operator new();
                    v142 = *(unsigned __int8 *)(v55 + 39);
                    v143 = *(const char **)(v55 + 16);
                    v144 = *(_QWORD *)(v55 + 24);
                    v145 = v244;
                    *(_OWORD *)(v141 + 8) = *(_OWORD *)&v243[8];
                    if ((v142 & 0x80u) != 0)
                      v142 = v144;
                    else
                      v143 = v208;
                    *(_QWORD *)v141 = v138;
                    *(_QWORD *)&v243[8] = 0;
                    *(_QWORD *)&v243[16] = 0;
                    *(_OWORD *)(v141 + 24) = v145;
                    v244 = 0uLL;
                    *(_QWORD *)(v141 + 40) = v143;
                    *(_QWORD *)(v141 + 48) = v142;
                    *(_BYTE *)(v141 + 56) = 1;
                    v241 = 0;
                    *(_QWORD *)&v237 = v141;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v43 + 24) + 40))(*(_QWORD *)(v43 + 24), &v237);
                    v146 = v237;
                    *(_QWORD *)&v237 = 0;
                    v76 = v210;
                    if (v146)
                    {
                      v147 = *(std::__shared_weak_count **)(v146 + 32);
                      if (v147)
                      {
                        v148 = (unint64_t *)&v147->__shared_owners_;
                        do
                          v149 = __ldaxr(v148);
                        while (__stlxr(v149 - 1, v148));
                        if (!v149)
                        {
                          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                          std::__shared_weak_count::__release_weak(v147);
                        }
                      }
                      v150 = *(std::__shared_weak_count **)(v146 + 16);
                      if (v150)
                      {
                        v151 = (unint64_t *)&v150->__shared_owners_;
                        do
                          v152 = __ldaxr(v151);
                        while (__stlxr(v152 - 1, v151));
                        if (!v152)
                        {
                          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                          std::__shared_weak_count::__release_weak(v150);
                        }
                      }
                      MEMORY[0x212BC6398](v146, 0x10F0C40B62ED6C6);
                      v153 = v241;
                      v241 = 0;
                      if (v153)
                      {
                        v154 = (std::__shared_weak_count *)v153[4];
                        if (v154)
                        {
                          v155 = (unint64_t *)&v154->__shared_owners_;
                          do
                            v156 = __ldaxr(v155);
                          while (__stlxr(v156 - 1, v155));
                          if (!v156)
                          {
                            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                            std::__shared_weak_count::__release_weak(v154);
                          }
                        }
                        v157 = (std::__shared_weak_count *)v153[2];
                        if (v157)
                        {
                          v158 = (unint64_t *)&v157->__shared_owners_;
                          do
                            v159 = __ldaxr(v158);
                          while (__stlxr(v159 - 1, v158));
                          if (!v159)
                          {
                            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                            std::__shared_weak_count::__release_weak(v157);
                          }
                        }
                        MEMORY[0x212BC6398](v153, 0x10F0C40B62ED6C6);
                      }
                    }
                    v160 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
                    if (*((_QWORD *)&v244 + 1))
                    {
                      v161 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
                      do
                        v162 = __ldaxr(v161);
                      while (__stlxr(v162 - 1, v161));
                      if (!v162)
                      {
                        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                        std::__shared_weak_count::__release_weak(v160);
                      }
                    }
                    v163 = *(std::__shared_weak_count **)&v243[16];
                    if (*(_QWORD *)&v243[16])
                    {
                      v164 = (unint64_t *)(*(_QWORD *)&v243[16] + 8);
                      do
                        v165 = __ldaxr(v164);
                      while (__stlxr(v165 - 1, v164));
                      if (!v165)
                      {
                        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                        std::__shared_weak_count::__release_weak(v163);
                      }
                    }
LABEL_239:
                    if (v76)
                    {
                      v166 = (const char *)&__dst;
                      if (v223 < 0)
                        v166 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v212, "%s", v166);
                      sub_20E863570((uint64_t)&v212);
                    }
                    sub_20E863570((uint64_t)&v212);
                    v167 = v220;
                    if (v220)
                    {
                      v168 = (unint64_t *)&v220->__shared_owners_;
                      do
                        v169 = __ldaxr(v168);
                      while (__stlxr(v169 - 1, v168));
                      if (!v169)
                      {
                        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                        std::__shared_weak_count::__release_weak(v167);
                      }
                    }
                    if (SHIBYTE(v223) < 0)
                      operator delete(__dst);
                    v224[0] = *MEMORY[0x24BEDB7F0];
                    v170 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v224 + *(_QWORD *)(v224[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v225 = v170;
                    v226 = MEMORY[0x24BEDB848] + 16;
                    if (v232 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    return MEMORY[0x212BC6290](v235);
                  }
                }
                memcpy(v74, v54, v73);
                goto LABEL_160;
              }
            }
            memmove(v65, v56, v57);
            goto LABEL_89;
          }
        }
        memmove(v62, v60, v61);
        goto LABEL_81;
      }
    }
    memmove(p_dst, v49, v44);
    goto LABEL_60;
  }
  sub_20E863438((uint64_t)v224);
  sub_20E86A980(&v225, (uint64_t)"Update VisualInertialBundleAdjusterConfig.initial_time_offset_variance: ", 72);
  std::ostream::operator<<();
  if ((v234 & 0x10) != 0)
  {
    v50 = v233;
    if (v233 < v230)
    {
      v233 = v230;
      v50 = v230;
    }
    v51 = v229;
    v46 = v50 - (_QWORD)v229;
    if (v50 - (unint64_t)v229 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_155;
  }
  else
  {
    if ((v234 & 8) == 0)
    {
      v46 = 0;
      HIBYTE(v223) = 0;
      v47 = (void **)&__dst;
      goto LABEL_108;
    }
    v51 = v227;
    v46 = v228 - (_QWORD)v227;
    if ((unint64_t)(v228 - (_QWORD)v227) > 0x7FFFFFFFFFFFFFF7)
LABEL_155:
      sub_20E860B7C();
  }
  if (v46 >= 0x17)
  {
    v77 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v77 = v46 | 7;
    v78 = v77 + 1;
    v47 = (void **)operator new(v77 + 1);
    v222 = v46;
    v223 = v78 | 0x8000000000000000;
    __dst = v47;
    goto LABEL_107;
  }
  HIBYTE(v223) = v46;
  v47 = (void **)&__dst;
  if (v46)
LABEL_107:
    memmove(v47, v51, v46);
LABEL_108:
  *((_BYTE *)v47 + v46) = 0;
  v212 = &v236;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v214 = std::chrono::system_clock::now().__d_.__rep_;
  v215 = 3;
  v216 = "unknown file";
  v217 = 172;
  v219 = 0;
  v220 = 0;
  v218 = "unknown function";
  if (v223 >= 0)
    v79 = (const char *)&__dst;
  else
    v79 = (const char *)__dst;
  v80 = *v212;
  v81 = (const char *)(*v212 + 16);
  v207 = *v212;
  v209 = v81;
  if (*(char *)(*v212 + 39) < 0)
  {
    v81 = *(const char **)(v80 + 16);
    v82 = *(_QWORD *)(v80 + 24);
    v211 = v41;
    v84 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v84 & 1) != 0)
      goto LABEL_115;
  }
  else
  {
    v82 = *(unsigned __int8 *)(*v212 + 39);
    v211 = v41;
    v83 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v83 & 1) != 0)
      goto LABEL_115;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v243);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v243);
    if ((_BYTE)v244 && (v243[23] & 0x80000000) != 0)
      operator delete(*(void **)v243);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_115:
  if (byte_254A4A4F8[23] >= 0)
    v85 = byte_254A4A4F8;
  else
    v85 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v86 = byte_254A4A4F8[23];
  else
    v86 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v243 = os_log_create(v85, v81);
  v87 = &v243[8];
  if (v86 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v86 >= 0x17)
  {
    v88 = v79;
    v89 = v40;
    v90 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v86 | 7) != 0x17)
      v90 = v86 | 7;
    v91 = v90 + 1;
    v87 = operator new(v90 + 1);
    *(_QWORD *)&v243[16] = v86;
    *(_QWORD *)&v244 = v91 | 0x8000000000000000;
    *(_QWORD *)&v243[8] = v87;
    v40 = v89;
    v79 = v88;
    goto LABEL_128;
  }
  BYTE7(v244) = v86;
  if (v86)
LABEL_128:
    memmove(v87, v85, v86);
  v87[v86] = 0;
  BYTE8(v244) = 1;
  v92 = (char *)&v245;
  if (v82 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v82 >= 0x17)
  {
    v93 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v82 | 7) != 0x17)
      v93 = v82 | 7;
    v94 = v93 + 1;
    v92 = (char *)operator new(v93 + 1);
    v246 = v82;
    v247 = v94 | 0x8000000000000000;
    v245 = v92;
    goto LABEL_136;
  }
  HIBYTE(v247) = v82;
  if (v82)
LABEL_136:
    memmove(v92, v81, v82);
  v92[v82] = 0;
  v248 = 1;
  v95 = *(NSObject **)v243;
  if (SHIBYTE(v247) < 0)
    operator delete(v245);
  if (BYTE8(v244) && SBYTE7(v244) < 0)
    operator delete(*(void **)&v243[8]);
  if (*(_QWORD *)v243)
    os_release(*(void **)v243);
  if (v211 && *(_QWORD *)(v211 + 24))
  {
    v96 = _os_log_pack_size();
    v97 = (std::__shared_weak_count_vtbl *)operator new(v96, (std::align_val_t)8uLL);
    v98 = (std::__shared_weak_count *)operator new();
    v98->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v97;
    *(_QWORD *)&v237 = v97;
    *((_QWORD *)&v237 + 1) = v97;
    v239 = 0;
    v240 = 0;
    v238 = v98;
    v99 = strlen(v79);
    if (v99 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v100 = v99;
    if (v99 >= 0x17)
    {
      v119 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v99 | 7) != 0x17)
        v119 = v99 | 7;
      v120 = v119 + 1;
      v101 = operator new(v119 + 1);
      *(_QWORD *)&v242 = v100;
      *((_QWORD *)&v242 + 1) = v120 | 0x8000000000000000;
      v241 = v101;
    }
    else
    {
      HIBYTE(v242) = v99;
      v101 = &v241;
      if (!v99)
      {
LABEL_179:
        *((_BYTE *)v101 + v100) = 0;
        v121 = v241;
        v249[0] = v242;
        *(_QWORD *)((char *)v249 + 7) = *(_QWORD *)((char *)&v242 + 7);
        v122 = HIBYTE(v242);
        v123 = operator new(0x38uLL);
        v123[1] = 0;
        v123[2] = 0;
        v123[3] = off_24C9ABC20;
        *v123 = &off_24C9ABBD0;
        v124 = v249[0];
        v123[4] = v121;
        v123[5] = v124;
        *(_QWORD *)((char *)v123 + 47) = *(_QWORD *)((char *)v249 + 7);
        *((_BYTE *)v123 + 55) = v122;
        v249[0] = 0;
        *(_QWORD *)((char *)v249 + 7) = 0;
        v125 = v240;
        v239 = (char *)(v123 + 3);
        v240 = (std::__shared_weak_count *)v123;
        if (v125)
        {
          v126 = (unint64_t *)&v125->__shared_owners_;
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        *(_OWORD *)v243 = v237;
        v128 = v239;
        *(_QWORD *)&v243[16] = v238;
        if (v238)
        {
          v129 = (unint64_t *)&v238->__shared_owners_;
          do
            v130 = __ldxr(v129);
          while (__stxr(v130 + 1, v129));
        }
        v131 = v240;
        *(_QWORD *)&v244 = v128;
        *((_QWORD *)&v244 + 1) = v240;
        if (v240)
        {
          v132 = (unint64_t *)&v240->__shared_owners_;
          do
            v133 = __ldxr(v132);
          while (__stxr(v133 + 1, v132));
          v245 = v128;
          do
            v134 = __ldaxr(v132);
          while (__stlxr(v134 - 1, v132));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        else
        {
          v245 = v128;
        }
        v171 = v238;
        if (v238)
        {
          v172 = (unint64_t *)&v238->__shared_owners_;
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        v174 = *(_QWORD *)v243;
        if (v245[31] >= 0)
          v175 = v245 + 8;
        else
          v175 = (char *)*((_QWORD *)v245 + 1);
        v176 = _os_log_pack_fill();
        *(_DWORD *)v176 = 136315138;
        *(_QWORD *)(v176 + 4) = v175;
        v177 = operator new();
        v178 = *(unsigned __int8 *)(v207 + 39);
        v179 = *(const char **)(v207 + 16);
        v180 = *(_QWORD *)(v207 + 24);
        v181 = v244;
        *(_OWORD *)(v177 + 8) = *(_OWORD *)&v243[8];
        if ((v178 & 0x80u) != 0)
          v178 = v180;
        else
          v179 = v209;
        *(_QWORD *)v177 = v174;
        *(_QWORD *)&v243[8] = 0;
        *(_QWORD *)&v243[16] = 0;
        *(_OWORD *)(v177 + 24) = v181;
        v244 = 0uLL;
        *(_QWORD *)(v177 + 40) = v179;
        *(_QWORD *)(v177 + 48) = v178;
        *(_BYTE *)(v177 + 56) = 1;
        v241 = 0;
        *(_QWORD *)&v237 = v177;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v211 + 24) + 40))(*(_QWORD *)(v211 + 24), &v237);
        v182 = v237;
        *(_QWORD *)&v237 = 0;
        if (v182)
        {
          v183 = *(std::__shared_weak_count **)(v182 + 32);
          if (v183)
          {
            v184 = (unint64_t *)&v183->__shared_owners_;
            do
              v185 = __ldaxr(v184);
            while (__stlxr(v185 - 1, v184));
            if (!v185)
            {
              ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
              std::__shared_weak_count::__release_weak(v183);
            }
          }
          v186 = *(std::__shared_weak_count **)(v182 + 16);
          if (v186)
          {
            v187 = (unint64_t *)&v186->__shared_owners_;
            do
              v188 = __ldaxr(v187);
            while (__stlxr(v188 - 1, v187));
            if (!v188)
            {
              ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
              std::__shared_weak_count::__release_weak(v186);
            }
          }
          MEMORY[0x212BC6398](v182, 0x10F0C40B62ED6C6);
          v189 = v241;
          v241 = 0;
          if (v189)
          {
            v190 = (std::__shared_weak_count *)v189[4];
            if (v190)
            {
              v191 = (unint64_t *)&v190->__shared_owners_;
              do
                v192 = __ldaxr(v191);
              while (__stlxr(v192 - 1, v191));
              if (!v192)
              {
                ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                std::__shared_weak_count::__release_weak(v190);
              }
            }
            v193 = (std::__shared_weak_count *)v189[2];
            if (v193)
            {
              v194 = (unint64_t *)&v193->__shared_owners_;
              do
                v195 = __ldaxr(v194);
              while (__stlxr(v195 - 1, v194));
              if (!v195)
              {
                ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                std::__shared_weak_count::__release_weak(v193);
              }
            }
            MEMORY[0x212BC6398](v189, 0x10F0C40B62ED6C6);
          }
        }
        v196 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
        if (*((_QWORD *)&v244 + 1))
        {
          v197 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
          do
            v198 = __ldaxr(v197);
          while (__stlxr(v198 - 1, v197));
          if (!v198)
          {
            ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
            std::__shared_weak_count::__release_weak(v196);
          }
        }
        v199 = *(std::__shared_weak_count **)&v243[16];
        if (*(_QWORD *)&v243[16])
        {
          v200 = (unint64_t *)(*(_QWORD *)&v243[16] + 8);
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
        goto LABEL_298;
      }
    }
    memcpy(v101, v79, v100);
    goto LABEL_179;
  }
  os_log_type_enabled(v95, OS_LOG_TYPE_INFO);
  *(_DWORD *)v243 = 136315138;
  *(_QWORD *)&v243[4] = v79;
  v102 = (void *)_os_log_send_and_compose_impl();
  if (v102)
    free(v102);
LABEL_298:
  if (v40)
  {
    v202 = (const char *)&__dst;
    if (v223 < 0)
      v202 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&v212, "%s", v202);
    sub_20E863570((uint64_t)&v212);
  }
  sub_20E863570((uint64_t)&v212);
  v203 = v220;
  if (v220)
  {
    v204 = (unint64_t *)&v220->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  if (SHIBYTE(v223) < 0)
    operator delete(__dst);
  v224[0] = *MEMORY[0x24BEDB7F0];
  v206 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v224 + *(_QWORD *)(v224[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v225 = v206;
  v226 = MEMORY[0x24BEDB848] + 16;
  if (v232 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  result = MEMORY[0x212BC6290](v235);
  if (*((_BYTE *)a1 + 112))
    goto LABEL_35;
  return result;
}

void sub_20EE848B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  uint64_t v30;

  if (*(_BYTE *)(v30 - 168) && *(char *)(v30 - 169) < 0)
    operator delete(*(void **)(v30 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  if (a29 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a30);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_20EE84AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20EE84AC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EE84AD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EE84AE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EE84AFC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5FA48);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FA48))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.slam_engine");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5FA40);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5FA48);
  }
  *a1 = qword_254A5FA40;
}

void sub_20EE84B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5FA48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5FA48);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE84BF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void **, void **, uint64_t);
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *__p[14];
  uint64_t v55;
  void *v56;
  void *v57;
  char *v58;

  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "MapEngine parameters");
  sub_20E8B30B4(a2, (__int128 *)__p, 180, 160);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)__p, "execute_sequential", v4, "Run the mapping sequential");
  __p[0] = (void *)nullsub_1(a2);
  v5 = sub_20EAA1CB0((unint64_t *)a1);
  sub_20E8B2F9C((uint64_t *)__p, "num_frames_odometry_only", v5, "Number of frames during which only visual odometry will be be constructed. After this number is reached the mapping phase will start.");
  __p[0] = (void *)nullsub_1(a2);
  v6 = sub_20EAA1CB0((unint64_t *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)__p, "num_frames_to_map", v6, "Number of frames during which the map will be constructed. After this number isreached only relocalization is performed.");
  __p[0] = (void *)nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 17));
  sub_20E8B2F9C((uint64_t *)__p, "use_odometry_only", v7, "Toggle odometry only mode in Local Slam Engine.");
  __p[0] = (void *)nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 18));
  sub_20E8B2F9C((uint64_t *)__p, "reset_mapping_module_in_reinitialization", v8, "A flag indicating whether to reset mapping module in reinitialization.");
  __p[0] = (void *)nullsub_1(a2);
  v9 = sub_20EAA14D8((_BYTE *)(a1 + 21));
  sub_20E8B2F9C((uint64_t *)__p, "use_continuous_filtering", v9, "Indicator if we use continuous filter of structure or not");
  __p[0] = (void *)nullsub_1(a2);
  v10 = sub_20EAA14D8((_BYTE *)(a1 + 20));
  sub_20E8B2F9C((uint64_t *)__p, "use_per_frame_camera_intrinsics", v10, "Enable varying intrinsics from the sensor to the pipeline");
  __p[0] = (void *)nullsub_1(a2);
  v11 = sub_20EAA14D8((_BYTE *)(a1 + 248));
  sub_20E8B2F9C((uint64_t *)__p, "enable_line_tracking_when_needed", v11, "Switch on/off the adaptive line tracking");
  __p[0] = (void *)nullsub_1(a2);
  v12 = sub_20EAA14D8((_BYTE *)(a1 + 249));
  sub_20E8B2F9C((uint64_t *)__p, "enable_line_tracking_always", v12, "Switch on/off the line tracking");
  __p[0] = (void *)nullsub_1(a2);
  v13 = sub_20EAA14D8((_BYTE *)(a1 + 250));
  sub_20E8B2F9C((uint64_t *)__p, "enable_plane_tracking", v13, "Switch on/off the plane tracking. Default: false");
  __p[0] = (void *)nullsub_1(a2);
  v14 = sub_20EAA14D8((_BYTE *)(a1 + 251));
  sub_20E8B2F9C((uint64_t *)__p, "use_lens_model_during_detection", v14, "Switch on/off lens model during detection (e.g., for undistorted line detection).");
  __p[0] = (void *)nullsub_1(a2);
  v15 = sub_20EAA14D8((_BYTE *)(a1 + 22));
  sub_20E8B2F9C((uint64_t *)__p, "disable_keyframe_removal_from_map_tracking_result", v15, "Optionally to disable keyframe-removal from the map-tracking result");
  __p[0] = (void *)nullsub_1(a2);
  v16 = sub_20EAA14D8((_BYTE *)(a1 + 23));
  sub_20E8B2F9C((uint64_t *)__p, "disable_keyframe_removal_from_state_correction_result", v16, "Optionally to disable keyframe-removal from the state correction result");
  __p[0] = (void *)nullsub_1(a2);
  v17 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)__p, "min_health_for_valid_extrinsics", v17, "Minimum health value above which we consider returning currently estimated extrinsics.This is conservative to prevent using extrinsics from a bad state.");
  __p[0] = (void *)nullsub_1(a2);
  v18 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)__p, "imu_noise_sigma_scale_accel", v18, "The scale of accel noise standard deviation.");
  __p[0] = (void *)nullsub_1(a2);
  v19 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)__p, "imu_noise_sigma_scale_accel_bias", v19, "The scale of accel bias noise standard deviation.");
  __p[0] = (void *)nullsub_1(a2);
  v20 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)__p, "imu_noise_sigma_scale_gyro", v20, "The scale of gyro noise standard deviation.");
  __p[0] = (void *)nullsub_1(a2);
  v21 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)__p, "imu_noise_sigma_scale_gyro_bias", v21, "The scale of gyro bias noise standard deviation.");
  __p[0] = (void *)nullsub_1(a2);
  v22 = sub_20EAA1770(a1 + 72);
  sub_20E8B2F9C((uint64_t *)__p, "MapEngineConfig.overrided_gyro_scale_estimate", v22, "Overrided initial gyro scale estimate.");
  __p[0] = (void *)nullsub_1(a2);
  v23 = sub_20EAA1770(a1 + 96);
  sub_20E8B2F9C((uint64_t *)__p, "MapEngineConfig.overrided_accel_scale_estimate", v23, "Overrided initial accel scale estimate.");
  __p[0] = (void *)nullsub_1(a2);
  v24 = sub_20EAA1770(a1 + 120);
  sub_20E8B2F9C((uint64_t *)__p, "MapEngineConfig.overrided_gyro_skewness_estimate", v24, "Overrided initial gyro skewness estimate.");
  __p[0] = (void *)nullsub_1(a2);
  v25 = sub_20EAA1770(a1 + 144);
  sub_20E8B2F9C((uint64_t *)__p, "MapEngineConfig.overrided_accel_skewness_estimate", v25, "Overrided initial accel skewness estimate.");
  v55 = nullsub_1(a2);
  v26 = operator new();
  *(_QWORD *)(v26 + 120) = 0;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 64) = 0u;
  *(_OWORD *)(v26 + 80) = 0u;
  *(_OWORD *)(v26 + 96) = 0u;
  *(_QWORD *)(v26 + 109) = 0;
  *(_QWORD *)v26 = &off_24C9C2E20;
  *(_QWORD *)(v26 + 8) = &unk_24C9C2E98;
  *(_QWORD *)(v26 + 152) = &unk_24C9C2EC0;
  *(_OWORD *)(v26 + 160) = 0u;
  *(_OWORD *)(v26 + 176) = 0u;
  __p[0] = (char *)off_24C9EEAC8 + 1;
  __p[1] = (void *)(a1 + 168);
  sub_20EAA459C((uint64_t *)(v26 + 120), (uint64_t *)__p);
  if (__p[0])
  {
    if (((uint64_t)__p[0] & 1) == 0)
    {
      v27 = *(void (**)(void **, void **, uint64_t))((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFFELL);
      if (v27)
        v27(&__p[1], &__p[1], 2);
    }
    __p[0] = 0;
  }
  v28 = operator new(0x48uLL);
  v57 = (char *)v28 + 72;
  v58 = (char *)v28 + 72;
  v56 = v28;
  v29 = *(_OWORD *)(a1 + 216);
  v28[2] = *(_OWORD *)(a1 + 200);
  v28[3] = v29;
  *((_QWORD *)v28 + 8) = *(_QWORD *)(a1 + 232);
  v30 = *(_OWORD *)(a1 + 184);
  *v28 = *(_OWORD *)(a1 + 168);
  v28[1] = v30;
  v31 = sub_20EAA2D64(v26, (uint64_t)&v56);
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  sub_20E8B2F9C(&v55, "MapEngineConfig.overrided_grxn", v31, "Overrided GRXN matrix in row major, by default disabled (no override).");
  __p[0] = (void *)nullsub_1(a2);
  v32 = sub_20EA9DB90((double *)(a1 + 240));
  sub_20E8B2F9C((uint64_t *)__p, "mach_absolute_to_utc_time_offset", v32, "Always positive value to convert from mach_absolute to utc timestamp.");
  __p[0] = (void *)nullsub_1(a2);
  v33 = sub_20EAA14D8((_BYTE *)(a1 + 19));
  sub_20E8B2F9C((uint64_t *)__p, "use_fixed_map", v33, "use_fixed_map");
  sub_20F00C78C(a1 + 5016, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20EAF7C44(a1 + 5968, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  v56 = (void *)nullsub_1(a2);
  v34 = operator new();
  *(_QWORD *)(v34 + 109) = 0;
  *(_OWORD *)(v34 + 80) = 0u;
  *(_OWORD *)(v34 + 96) = 0u;
  *(_OWORD *)(v34 + 48) = 0u;
  *(_OWORD *)(v34 + 64) = 0u;
  *(_OWORD *)(v34 + 16) = 0u;
  *(_OWORD *)(v34 + 32) = 0u;
  *(_QWORD *)v34 = &off_24C9EEAF8;
  *(_QWORD *)(v34 + 8) = &unk_24C9EEB70;
  *(_QWORD *)(v34 + 152) = &unk_24C9EEB98;
  *(_QWORD *)(v34 + 120) = (char *)off_24C9EEC90 + 1;
  *(_QWORD *)(v34 + 128) = a1 + 256;
  v35 = (_QWORD *)operator new();
  v36 = *(_QWORD *)(a1 + 256);
  *v35 = &off_24C9EEC58;
  v35[1] = v36;
  *(_QWORD *)(v34 + 160) = v35;
  sub_20E9F6CBC((unint64_t *)(a1 + 256));
  *(_OWORD *)(v34 + 168) = *(_OWORD *)__p;
  *(void **)(v34 + 184) = __p[2];
  sub_20E8B2F9C((uint64_t *)&v56, "session_override", v34, "Optional session to override");
  __p[0] = (void *)nullsub_1(a2);
  v37 = sub_20EAA14D8((_BYTE *)(a1 + 6173));
  __p[0] = (void *)nullsub_1(a2);
  v38 = sub_20EAA14D8((_BYTE *)(a1 + 264));
  sub_20E8B2F9C((uint64_t *)__p, "relocalization_enabled", v38, "Turn on/off relocalization.");
  __p[0] = (void *)nullsub_1(a2);
  v39 = sub_20EAA14D8((_BYTE *)(a1 + 10688));
  sub_20E8B2F9C((uint64_t *)__p, "save_frame_bundle_to_metadata", v39, "Save frame bundle data (synced imu measurements, feature_sample, etc) to vio pose metadata for area_mapping::Map and vio problem reconstruction. Default: false");
  __p[0] = (void *)nullsub_1(a2);
  v40 = sub_20EAA14D8((_BYTE *)(a1 + 252));
  sub_20E8B2F9C((uint64_t *)__p, "enable_collaborative_mapping", v40, "Enable/Disable collaborative mapping for SLAM interface. By default it is disabled.");
  __p[0] = (void *)nullsub_1(a2);
  v41 = sub_20EAA14D8((_BYTE *)(a1 + 10689));
  sub_20E8B2F9C((uint64_t *)__p, "is_vision_propagator_enabled", v41, "Enable/Disable vision-only pose-tracker for Moving Platform SLAM");
  __p[0] = (void *)nullsub_1(a2);
  v42 = sub_20EE859FC(a1 + 10696);
  *(_BYTE *)(v42 + 114) = 1;
  __p[0] = (void *)nullsub_1(a2);
  v43 = sub_20EE859FC(a1 + 10720);
  *(_BYTE *)(v43 + 114) = 1;
  __p[0] = (void *)nullsub_1(a2);
  v44 = sub_20EA9DB90((double *)(a1 + 10608));
  sub_20E8B2F9C((uint64_t *)__p, "width_height_expansion_factor", v44, "Width and height expansion factor.");
  __p[0] = (void *)nullsub_1(a2);
  v45 = sub_20EAA14D8((_BYTE *)(a1 + 10616));
  sub_20E8B2F9C((uint64_t *)__p, "pass_all_frames", v45, "Use frames from all camera streams in system for SLAM");
  __p[0] = (void *)nullsub_1(a2);
  v46 = sub_20EAA14D8((_BYTE *)(a1 + 10617));
  sub_20E8B2F9C((uint64_t *)__p, "enable_periodic_calibration", v46, "Enable/Disable periodic calibration attempts for non-default cameras");
  __p[0] = (void *)nullsub_1(a2);
  v47 = sub_20EAA14D8((_BYTE *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)__p, "exclude_map_point_cloud_in_slam_debug", v47, "Option to skip map point cloud in SLAM debug to speed up visualization.");
  __p[0] = (void *)nullsub_1(a2);
  v48 = sub_20EAA14D8((_BYTE *)(a1 + 10744));
  sub_20E8B2F9C((uint64_t *)__p, "round_input_floats", v48, "Rounds various input floating-point values so that there is parity between ARKitCTL and CVPlayer replays.");
  __p[0] = (void *)nullsub_1(a2);
  v49 = sub_20EE85AE4(a1 + 10745);
  sub_20E8B2F9C((uint64_t *)__p, "enable_additional_dependencies", v49, "Enable extra Polaris dependencies (e.g. SI, Person Pet Detection, etc) for SLAM.");
  __p[0] = (void *)nullsub_1(a2);
  v50 = sub_20EE85AE4(a1 + 10747);
  __p[0] = (void *)nullsub_1(a2);
  v51 = sub_20EE85AE4(a1 + 10749);
  __p[0] = (void *)nullsub_1(a2);
  v52 = sub_20EE85AE4(a1 + 10751);
  sub_20FD3D974(a1 + 9384, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20FDBE7F4(a1 + 9416, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F348B34(a1 + 6056, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20EF4B744(a1 + 8864, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F7C1300(a1 + 9208, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F0274B8(a1 + 272, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20EEBC828(a1 + 9080, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20EE88E60((_BYTE *)(a1 + 10753), __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20EFFD95C(a1 + 10624, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20EAF60CC(a1 + 10760, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20FDB359C(a1 + 11248, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  return sub_20E869298((uint64_t)__p);
}

void sub_20EE857E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE859FC(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v5;
  _QWORD v6[3];

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C2E20;
  *(_QWORD *)(v2 + 8) = &unk_24C9C2E98;
  *(_QWORD *)(v2 + 152) = &unk_24C9C2EC0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  v5 = (uint64_t)off_24C9EECB0 + 1;
  v6[0] = a1;
  sub_20EAA459C((uint64_t *)(v2 + 120), &v5);
  if (v5)
  {
    if ((v5 & 1) == 0)
    {
      v3 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(v6, v6, 2);
    }
    v5 = 0;
  }
  return sub_20EAA2D64(v2, a1);
}

void sub_20EE85AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EAA2D14(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE85AE4(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _BYTE v20[24];
  int v21;
  void *__dst[2];
  unint64_t v23;
  __int128 v24;
  _BYTE *v25;
  void **v26;
  void **v27;
  __int128 *v28;

  v2 = operator new();
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9EECE0;
  *(_QWORD *)(v2 + 8) = &unk_24C9EED58;
  *(_QWORD *)(v2 + 152) = &unk_24C9EED80;
  *(_QWORD *)(v2 + 168) = 0;
  v3 = (void **)(v2 + 168);
  *(_QWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 120) = (char *)off_24C9EEEF8 + 1;
  *(_QWORD *)(v2 + 128) = a1;
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C9EEEC0;
  *(_WORD *)(v4 + 8) = *(_WORD *)a1;
  *(_QWORD *)(v2 + 160) = v4;
  v21 = 0;
  v5 = operator new();
  *(_QWORD *)(v5 + 272) = 0;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)v5 = 0u;
  sub_20E863438(v5);
  *(_QWORD *)&v24 = v5;
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  if (*(_BYTE *)(a1 + 1))
    std::ostream::operator<<();
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"}", 1);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v23) = 0;
      v8 = __dst;
      goto LABEL_16;
    }
    v19 = *(_QWORD *)(v5 + 56);
    v11 = *(const void **)(v5 + 40);
    v7 = v19 - (_QWORD)v11;
    if ((unint64_t)(v19 - (_QWORD)v11) >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v23 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_15;
  }
  HIBYTE(v23) = v7;
  v8 = __dst;
  if (v7)
LABEL_15:
    memmove(v8, v11, v7);
LABEL_16:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v24;
  if ((_QWORD)v24)
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24 = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  *(_QWORD *)&v24 = v20;
  *((_QWORD *)&v24 + 1) = __dst;
  v25 = v20;
  v26 = __dst;
  v27 = __dst;
  if (v21 == -1)
    sub_20E877AB8();
  v28 = &v24;
  ((void (*)(__int128 **, _BYTE *))off_24C9EEAB0[v21])(&v28, v20);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
  if (v21 == -1)
    sub_20E877AB8();
  __dst[0] = &v28;
  ((void (*)(__int128 *__return_ptr, void **, _BYTE *))off_24C9EEA98[v21])(&v24, __dst, v20);
  if (v21 != -1)
    ((void (*)(void **, _BYTE *))off_24C9EEA80[v21])(__dst, v20);
  if (*(char *)(v2 + 191) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = v24;
  *(_QWORD *)(v2 + 184) = v25;
  return v2;
}

void sub_20EE85E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x212BC6398](v2, 0x10B2C40EED050F3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE85E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE85EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE85EF0(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9EEAD8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm9EEPN5boost15program_options"
                                      "11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlR"
                                      "KNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm9EEPN5boost15program_options11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlRKNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

void **sub_20EE85F9C(void **result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD **)a2;
  v4 = (uint64_t)(*(_QWORD *)(a2 + 8) - (_QWORD)v2) >> 3;
  if (v4 == 9)
    return (void **)memmove(*result, v2, 0x48uLL);
  if (v4 != 1)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/ProgramOptions/include/Kit/ProgramOptions/ProgramOptionsParserUtil.h", 161, (uint64_t)"", 0, (uint64_t)"invalid size of array parameter", 31, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v5 = *result;
  *v5 = *v2;
  v5[1] = *v2;
  v5[2] = *v2;
  v5[3] = *v2;
  v5[4] = *v2;
  v5[5] = *v2;
  v5[6] = *v2;
  v5[7] = *v2;
  v5[8] = *v2;
  return result;
}

void sub_20EE86058(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EE86568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EE8666C(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EE8668C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EE866AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EE866B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EE866BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20EE86714(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)();
  std::runtime_error v11;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  v6 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7D8] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if ((const char *)result == v6 || (result = strcmp((const char *)result, v6), !(_DWORD)result))
  {
    v7 = (_QWORD *)(*a2 + 8);
    v8 = *(_QWORD **)(a1 + 16);
    if (!v8)
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
LABEL_9:
    *v8 = *v7;
LABEL_10:
  v9 = *(_QWORD *)(a1 + 120);
  v10 = nullsub_529;
  if (!v9)
    v10 = 0;
  if (v10)
  {
    if (!v9)
    {
      std::runtime_error::runtime_error(&v11, "call to empty boost::function");
      v11.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v11);
    }
    return (*(uint64_t (**)(uint64_t, _QWORD *))((v9 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v7);
  }
  return result;
}

void sub_20EE86810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE86824(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9EEAF8;
  *(_QWORD *)(a1 + 8) = &unk_24C9EEB70;
  *(_QWORD *)(a1 + 152) = &unk_24C9EEB98;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EE86DB8(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EE86DB8(a1);
}

void sub_20EE8688C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9EEAF8;
  *(_QWORD *)(a1 + 8) = &unk_24C9EEB70;
  *(_QWORD *)(a1 + 152) = &unk_24C9EEB98;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EE86DB8(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20EE86908(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *p_dst;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  __int128 *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::bad_cast v19[16];
  __int128 __dst;
  uint64_t v21;
  uint64_t v22;
  char v23[8];
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(&__dst, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v21 = *((_QWORD *)v5 + 2);
    __dst = v6;
  }
  v22 = 0;
  p_dst = (unsigned __int8 *)&__dst;
  v11 = *((_QWORD *)&__dst + 1);
  if (v21 >= 0)
    v11 = HIBYTE(v21);
  else
    p_dst = (unsigned __int8 *)__dst;
  if (!v11)
  {
LABEL_27:
    std::bad_cast::bad_cast(v19);
    v19[0].__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v19[1].__vftable = (std::bad_cast_vtbl *)&unk_24C9AB9F0;
    v19[2].__vftable = (std::bad_cast_vtbl *)MEMORY[0x24BEDB7D8];
    sub_20EA9F254((uint64_t)v19);
  }
  v12 = &p_dst[v11];
  v13 = *p_dst;
  if (v13 == 45 || v13 == 43)
  {
    v14 = &__dst;
    if (v21 < 0)
      v14 = (__int128 *)__dst;
    p_dst = (unsigned __int8 *)v14 + 1;
  }
  v23[0] = 0;
  v24 = 1;
  v25 = &v22;
  v26 = p_dst;
  v27 = v12;
  v15 = sub_20EE86E84((uint64_t)v23);
  if (v13 == 45)
  {
    v16 = -v22;
    v22 = -v22;
    if ((v15 & 1) == 0)
      goto LABEL_27;
  }
  else
  {
    if (!v15)
      goto LABEL_27;
    v16 = v22;
  }
  v17 = (_QWORD *)operator new();
  *v17 = &off_24C9EEC58;
  v17[1] = v16;
  v18 = *a2;
  *a2 = (uint64_t)v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__dst);
}

void sub_20EE86AD4()
{
  __break(1u);
}

void sub_20EE86B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8B9BA0((uint64_t)&a9);
  __cxa_end_catch();
  JUMPOUT(0x20EE86B34);
}

uint64_t sub_20EE86B50()
{
  return MEMORY[0x24BEDB7D8];
}

uint64_t sub_20EE86B5C(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_20EE86B64()
{
  return MEMORY[0x24BEDB7D8];
}

uint64_t sub_20EE86B70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9EEAF8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9EEB70;
  *(_QWORD *)(a1 + 144) = &unk_24C9EEB98;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EE86DB8(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EE86DB8(v2);
}

void sub_20EE86BE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9EEAF8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9EEB70;
  *(_QWORD *)(a1 + 144) = &unk_24C9EEB98;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EE86DB8(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EE86C64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9EEAF8;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9EEB70;
  *(_QWORD *)a1 = &unk_24C9EEB98;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EE86DB8(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EE86DB8(v2);
}

void sub_20EE86CD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9EEAF8;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9EEB70;
  *(_QWORD *)a1 = &unk_24C9EEB98;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EE86DB8(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EE86D58(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EE86D64(uint64_t a1)
{
  sub_20EE86DB8(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE86D88(uint64_t a1)
{
  return sub_20EE86DB8(a1 - 8);
}

void sub_20EE86D90(uint64_t a1)
{
  sub_20EE86DB8(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE86DB8(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9EEBC0;
  *(_QWORD *)(a1 + 8) = &unk_24C9EEC30;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_20EE86E84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  const std::locale *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  const std::locale::facet *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  char *v21;
  char *v22;
  unsigned __int8 v23;
  _BYTE *p_p;
  char v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *__p;
  uint64_t v47;
  unsigned __int8 v48;
  std::locale v49;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v1 - 1;
  v2 = *(_QWORD **)(a1 + 16);
  *v2 = 0;
  if (*(_QWORD *)(a1 + 24) > (unint64_t)(v1 - 1))
    return 0;
  v3 = *(unsigned __int8 *)(v1 - 1);
  if ((v3 - 58) < 0xFFFFFFF6)
    return 0;
  *v2 = (v3 - 48);
  *(_QWORD *)(a1 + 32) = v1 - 2;
  MEMORY[0x212BC61AC](&v49);
  v6 = std::locale::classic();
  if (std::locale::operator==(&v49, v6))
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(char **)(a1 + 32);
    if ((unint64_t)v8 >= v7)
    {
      v12 = *(_BYTE *)a1 != 0;
      while (1)
      {
        v15 = *(_QWORD *)(a1 + 8);
        v12 |= v15 > 0x1999999999999999;
        *(_BYTE *)a1 = v12 & 1;
        v16 = 10 * v15;
        *(_QWORD *)(a1 + 8) = 10 * v15;
        v17 = *v8;
        if ((v17 - 58) < 0xF6u)
          break;
        v18 = v17 - 48;
        v19 = v16 * (v17 - 48);
        if ((_DWORD)v18)
        {
          if ((v12 & 1) != 0)
            break;
          if (!is_mul_ok(v18, v16))
            break;
          v13 = *(_QWORD **)(a1 + 16);
          v14 = *v13;
          if (__CFADD__(v19, *v13))
            break;
        }
        else
        {
          v13 = *(_QWORD **)(a1 + 16);
          v14 = *v13;
        }
        *v13 = v14 + v19;
        *(_QWORD *)(a1 + 32) = --v8;
        if ((unint64_t)v8 < v7)
          goto LABEL_6;
      }
      v9 = 0;
    }
    else
    {
LABEL_6:
      v9 = 1;
    }
    goto LABEL_66;
  }
  v10 = std::locale::use_facet(&v49, MEMORY[0x24BEDB588]);
  ((void (*)(void **__return_ptr))v10->__vftable[1].__on_zero_shared)(&__p);
  if ((char)v48 < 0)
  {
    v11 = v47;
    if (!v47 || *(char *)__p <= 0)
    {
LABEL_27:
      v26 = *(_QWORD *)(a1 + 24);
      v27 = *(char **)(a1 + 32);
      if ((unint64_t)v27 >= v26)
      {
        v38 = *(_BYTE *)a1 != 0;
        while (1)
        {
          v41 = *(_QWORD *)(a1 + 8);
          v38 |= v41 > 0x1999999999999999;
          *(_BYTE *)a1 = v38 & 1;
          v42 = 10 * v41;
          *(_QWORD *)(a1 + 8) = 10 * v41;
          v43 = *v27;
          if ((v43 - 58) < 0xF6u)
            break;
          v44 = v43 - 48;
          v45 = v42 * (v43 - 48);
          if ((_DWORD)v44)
          {
            if ((v38 & 1) != 0)
              break;
            if (!is_mul_ok(v44, v42))
              break;
            v39 = *(_QWORD **)(a1 + 16);
            v40 = *v39;
            if (__CFADD__(v45, *v39))
              break;
          }
          else
          {
            v39 = *(_QWORD **)(a1 + 16);
            v40 = *v39;
          }
          *v39 = v40 + v45;
          *(_QWORD *)(a1 + 32) = --v27;
          if ((unint64_t)v27 < v26)
            goto LABEL_28;
        }
LABEL_64:
        v9 = 0;
        if (((char)v48 & 0x80000000) == 0)
          goto LABEL_66;
        goto LABEL_65;
      }
      goto LABEL_28;
    }
  }
  else
  {
    v11 = v48;
    if (!v48 || (char)__p <= 0)
      goto LABEL_27;
  }
  v20 = ((uint64_t (*)(const std::locale::facet *))v10->__vftable[1].~facet_0)(v10);
  v21 = *(char **)(a1 + 24);
  v22 = *(char **)(a1 + 32);
  if (v22 >= v21)
  {
    v23 = 0;
    p_p = __p;
    if ((v48 & 0x80u) == 0)
      p_p = &__p;
    v25 = *p_p - 1;
    while (1)
    {
      while (v25)
      {
        v30 = *(_QWORD *)(a1 + 8);
        if (*(_BYTE *)a1)
          v31 = 1;
        else
          v31 = v30 > 0x1999999999999999;
        v32 = v31;
        *(_BYTE *)a1 = v32;
        v33 = 10 * v30;
        *(_QWORD *)(a1 + 8) = 10 * v30;
        v34 = *v22;
        if ((v34 - 58) < 0xF6u)
          goto LABEL_64;
        v35 = v34 - 48;
        v36 = v33 * (v34 - 48);
        if ((_DWORD)v35)
        {
          if ((v32 & 1) != 0)
            goto LABEL_64;
          if (!is_mul_ok(v35, v33))
            goto LABEL_64;
          v28 = *(_QWORD **)(a1 + 16);
          v29 = *v28;
          if (__CFADD__(v36, *v28))
            goto LABEL_64;
        }
        else
        {
          v28 = *(_QWORD **)(a1 + 16);
          v29 = *v28;
        }
        *v28 = v29 + v36;
        --v25;
        *(_QWORD *)(a1 + 32) = --v22;
        if (v22 < v21)
          goto LABEL_28;
      }
      if (*v22 != v20)
        break;
      if (v22 == v21)
        goto LABEL_64;
      if (v11 - 1 > (unint64_t)v23)
        ++v23;
      if ((v48 & 0x80u) == 0)
        v37 = &__p;
      else
        v37 = __p;
      v25 = v37[v23];
      *(_QWORD *)(a1 + 32) = --v22;
      if (v22 < v21)
        goto LABEL_28;
    }
    v9 = sub_20EAA6624(a1);
    if (((char)v48 & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_65;
  }
LABEL_28:
  v9 = 1;
  if ((char)v48 < 0)
LABEL_65:
    operator delete(__p);
LABEL_66:
  std::locale::~locale(&v49);
  return v9;
}

void sub_20EE87258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::locale::~locale(&a15);
    _Unwind_Resume(a1);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

void sub_20EE8729C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE872B0()
{
  return MEMORY[0x24BEDB7D8];
}

_QWORD *sub_20EE872BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EEC58;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE87300(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9EECA0;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIyEPN5boost15program_options11typed_val"
                                      "ueIT_cEERS3_EUlRKyE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIyEPN5boost15program_options11typed_valueIT_cEERS3_EUlRKyE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_QWORD **sub_20EE873AC(_QWORD **result, _QWORD *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20EE873BC(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9EECC0;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__16vectorIdNS0_9allocatorIdEEEEEP"
                                      "N5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__16vectorIdNS0_9allocatorIdEEEEEPN5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

char **sub_20EE87468(char ***a1, char **a2)
{
  char **result;

  result = *a1;
  if (result != a2)
    return (char **)sub_20E86811C(result, *a2, a2[1], (a2[1] - *a2) >> 3);
  return result;
}

void sub_20EE8748C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EE8799C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EE87AA0(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EE87AC0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EE87AE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EE87AE8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EE87AF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20EE87B48(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3kit2po8OptionalIbEE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3kit2po8OptionalIbEE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_WORD *)(*a2 + 8);
    v7 = *(_WORD **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_WORD **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_531;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _WORD *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20EE87C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE87C54(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9EECE0;
  *(_QWORD *)(a1 + 8) = &unk_24C9EED58;
  *(_QWORD *)(a1 + 152) = &unk_24C9EED80;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EE882F4(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EE882F4(a1);
}

void sub_20EE87CBC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9EECE0;
  *(_QWORD *)(a1 + 8) = &unk_24C9EED58;
  *(_QWORD *)(a1 + 152) = &unk_24C9EED80;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EE882F4(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20EE87D38(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void **v25;
  char *v26;
  void **v27;
  char *v28;
  std::ios_base *v29;
  std::bad_cast_vtbl *v30;
  _QWORD *v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  __int16 v38;
  std::bad_cast v39;
  void *v40;
  std::ios_base v41;
  uint64_t v42;
  int v43;
  _QWORD __sb[8];

  if (*a3 == a3[1])
  {
    v21 = *(_QWORD *)(a1 + 80);
    if (v21)
    {
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v23 = *a2;
      *a2 = v22;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v19 = (char *)sub_20E8B850C(a3, 0);
  if (v19[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v19, *((_QWORD *)v19 + 1));
  }
  else
  {
    v20 = *(_OWORD *)v19;
    v37 = *((_QWORD *)v19 + 2);
    *(_OWORD *)__p = v20;
  }
  v38 = 0;
  v24 = (char *)HIBYTE(v37);
  v25 = (void **)__p[0];
  v26 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v27 = __p;
  if ((char)v24 >= 0)
  {
    v28 = v24;
  }
  else
  {
    v27 = v25;
    v28 = v26;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v27;
  __sb[3] = v27;
  __sb[4] = &v28[(_QWORD)v27];
  v40 = 0;
  v41.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v39.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v41, __sb);
  v42 = 0;
  v43 = -1;
  v29 = (std::ios_base *)((char *)&v39 + (unint64_t)v39.__vftable[-1].~bad_cast);
  v29->__exceptions_ = 1;
  std::ios_base::clear(v29, v29->__rdstate_);
  v30 = v39.__vftable;
  *(_DWORD *)((char *)&v39 + (unint64_t)v39.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v41.__vftable + (unint64_t)v30[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  v31 = sub_2101021AC(&v39, &v38);
  if ((*((_BYTE *)v31 + *(_QWORD *)(*v31 - 24) + 32) & 5) != 0)
  {
    std::istream::~istream();
    std::streambuf::~streambuf();
LABEL_19:
    std::bad_cast::bad_cast(&v39);
    v39.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v40 = &unk_24C9AB9F0;
    v41.__vftable = (std::ios_base_vtbl *)&unk_24C9EEEA0;
    sub_20EA9F254((uint64_t)&v39);
  }
  v32 = std::istream::get();
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (v32 != -1)
    goto LABEL_19;
  v33 = v38;
  v34 = operator new();
  *(_QWORD *)v34 = &off_24C9EEEC0;
  *(_WORD *)(v34 + 8) = v33;
  v35 = *a2;
  *a2 = v34;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
}

void sub_20EE88014(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C(&a14, &a9);
    sub_20EA9ED20(&a14);
  }
  JUMPOUT(0x20EE88070);
}

void sub_20EE88020(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
  std::exception::~exception(&a14);
  JUMPOUT(0x20EE88030);
}

void sub_20EE88058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20EE88070);
}

void *sub_20EE8808C()
{
  return &unk_24C9EEEA0;
}

uint64_t sub_20EE88098(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20EE880A0()
{
  return &unk_24C9EEEA0;
}

uint64_t sub_20EE880AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9EECE0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9EED58;
  *(_QWORD *)(a1 + 144) = &unk_24C9EED80;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EE882F4(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EE882F4(v2);
}

void sub_20EE8811C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9EECE0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9EED58;
  *(_QWORD *)(a1 + 144) = &unk_24C9EED80;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EE882F4(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EE881A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9EECE0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9EED58;
  *(_QWORD *)a1 = &unk_24C9EED80;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EE882F4(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EE882F4(v2);
}

void sub_20EE88210(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9EECE0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9EED58;
  *(_QWORD *)a1 = &unk_24C9EED80;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EE882F4(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EE88294(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EE882A0(uint64_t a1)
{
  sub_20EE882F4(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE882C4(uint64_t a1)
{
  return sub_20EE882F4(a1 - 8);
}

void sub_20EE882CC(uint64_t a1)
{
  sub_20EE882F4(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE882F4(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9EEE18;
  *(_QWORD *)(a1 + 8) = &unk_24C9EEE88;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20EE883C4()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20EE883D8()
{
  return &unk_24C9EEEA0;
}

uint64_t sub_20EE883E4(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9EEEC0;
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_20EE8842C(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9EEF08;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3kit2po8OptionalIbEEEPN5boost15p"
                                      "rogram_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3kit2po8OptionalIbEEEPN5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_WORD **sub_20EE884D8(_WORD **result, _WORD *a2)
{
  **result = *a2;
  return result;
}

unsigned int *sub_20EE884E8(unsigned int *a1, uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5)
{
  void **v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  void *v16;
  _QWORD *v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  _QWORD *v34;
  _QWORD *v35;
  void *__p;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD v42[3];

  v42[2] = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)a1 + 1) = 0u;
  *(_QWORD *)a1 = -1;
  *((_QWORD *)a1 + 1) = -1;
  v9 = (void **)(a1 + 10);
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_QWORD *)a1 + 8) = 0;
  a1[18] = 1065353216;
  sub_20E8A1408((uint64_t)(a1 + 20), a2);
  *((_QWORD *)a1 + 316) = 0;
  *((_OWORD *)a1 + 157) = 0u;
  sub_20EE88C3C((uint64_t)(a1 + 628), *a3, a3[1], (a3[1] - *a3) >> 5);
  v10 = *(_BYTE *)(a4 + 8);
  if (v10)
  {
    sub_20EB81E74((uint64_t)(a1 + 634), *(_QWORD *)a4);
    v10 = 1;
  }
  else
  {
    *((_BYTE *)a1 + 2536) = 0;
  }
  *((_BYTE *)a1 + 4200) = v10;
  *((_QWORD *)a1 + 526) = 850045863;
  *((_QWORD *)a1 + 533) = 0;
  *(_OWORD *)(a1 + 1054) = 0u;
  *(_OWORD *)(a1 + 1058) = 0u;
  *(_OWORD *)(a1 + 1062) = 0u;
  sub_20E8965F4();
  if (a5 == -1)
  {
    v41 = *((_QWORD *)a1 + 534);
    sub_20E893368((unsigned int *)&__p, &v41);
    v42[0] = (__p | ((unint64_t)BYTE4(__p) << 32) | ((unint64_t)BYTE5(__p) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(__p) << 56) | ((unint64_t)(HIWORD(HIDWORD(__p)) & 0xF | 0x40u) << 48);
    v42[1] = ((unint64_t)BYTE4(v37) << 32) | ((unint64_t)BYTE5(v37) << 40) | v37 & 0xFFFFFF00 | ((unint64_t)HIDWORD(v37) << 32) & 0xFF00000000000000 | ((unint64_t)BYTE6(v37) << 48) | v37 & 0x3F | 0x80;
    v23 = sub_2102322B4((unsigned __int8 *)v42);
    *(_QWORD *)a1 = v23;
    sub_20EE88940(a1, v23);
    sub_20F2CDE04((unsigned int **)a1 + 314, 0, (uint64_t)&__p);
    if (*((_QWORD *)a1 + 8))
    {
      v24 = (_QWORD *)*((_QWORD *)a1 + 7);
      if (v24)
      {
        do
        {
          v25 = (_QWORD *)*v24;
          operator delete(v24);
          v24 = v25;
        }
        while (v25);
      }
      *((_QWORD *)a1 + 7) = 0;
      v26 = *((_QWORD *)a1 + 6);
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *((_QWORD *)*v9 + i) = 0;
      }
      *((_QWORD *)a1 + 8) = 0;
    }
    v28 = __p;
    __p = 0;
    v29 = *v9;
    *v9 = v28;
    if (v29)
      operator delete(v29);
    v18 = v37;
    v30 = v38;
    *((_QWORD *)a1 + 7) = v38;
    v19 = a1 + 14;
    *((_QWORD *)a1 + 6) = v18;
    v37 = 0;
    v31 = v39;
    *((_QWORD *)a1 + 8) = v39;
    a1[18] = v40;
    if (v31)
    {
      v21 = v30[1];
      v22 = v18 - 1;
      if ((v18 & (v18 - 1)) == 0)
        goto LABEL_16;
      goto LABEL_28;
    }
    if (v30)
    {
      do
      {
        v35 = (_QWORD *)*v30;
        operator delete(v30);
        v30 = v35;
      }
      while (v35);
    }
  }
  else
  {
    *(_QWORD *)a1 = a5;
    sub_20EE88940(a1, a5);
    sub_20F2CDE04((unsigned int **)a1 + 314, *a1 | 0x100000000, (uint64_t)&__p);
    if (*((_QWORD *)a1 + 8))
    {
      v11 = (_QWORD *)*((_QWORD *)a1 + 7);
      if (v11)
      {
        do
        {
          v12 = (_QWORD *)*v11;
          operator delete(v11);
          v11 = v12;
        }
        while (v12);
      }
      *((_QWORD *)a1 + 7) = 0;
      v13 = *((_QWORD *)a1 + 6);
      if (v13)
      {
        for (j = 0; j != v13; ++j)
          *((_QWORD *)*v9 + j) = 0;
      }
      *((_QWORD *)a1 + 8) = 0;
    }
    v15 = __p;
    __p = 0;
    v16 = *v9;
    *v9 = v15;
    if (v16)
      operator delete(v16);
    v18 = v37;
    v17 = v38;
    *((_QWORD *)a1 + 7) = v38;
    v19 = a1 + 14;
    *((_QWORD *)a1 + 6) = v18;
    v37 = 0;
    v20 = v39;
    *((_QWORD *)a1 + 8) = v39;
    a1[18] = v40;
    if (v20)
    {
      v21 = v17[1];
      v22 = v18 - 1;
      if ((v18 & (v18 - 1)) == 0)
      {
LABEL_16:
        v21 &= v22;
LABEL_30:
        *((_QWORD *)*v9 + v21) = v19;
        v38 = 0;
        v39 = 0;
        goto LABEL_31;
      }
LABEL_28:
      if (v21 >= v18)
        v21 %= v18;
      goto LABEL_30;
    }
    if (v17)
    {
      do
      {
        v34 = (_QWORD *)*v17;
        operator delete(v17);
        v17 = v34;
      }
      while (v34);
    }
  }
LABEL_31:
  v32 = __p;
  __p = 0;
  if (v32)
    operator delete(v32);
  return a1;
}

void sub_20EE88898(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  std::mutex *v6;
  uint64_t v7;
  void **v8;
  _BYTE *v9;
  void *v11;

  sub_20E896798(v7);
  std::mutex::~mutex(v6);
  if (*v9)
    sub_20EB8188C(v5);
  sub_20EA896D4(v4);
  sub_20E86A810(v3);
  sub_20E8C25A8(v2);
  v11 = *v8;
  if (*v8)
  {
    *(_QWORD *)(v1 + 24) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void sub_20EE88908()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_20E86A810(v1);
  sub_20E8C25A8(v0);
  if (*v2)
    JUMPOUT(0x20EE888F8);
  JUMPOUT(0x20EE88900);
}

void sub_20EE88928()
{
  uint64_t v0;
  _QWORD *v1;

  sub_20E8C25A8(v0);
  if (!*v1)
    JUMPOUT(0x20EE88900);
  JUMPOUT(0x20EE888F8);
}

uint64_t sub_20EE88940(_QWORD *a1, unint64_t a2)
{
  int64x2_t *v4;
  void **v5;
  int64x2_t *v6;
  unint64_t *v7;
  unint64_t v9;
  int64x2_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  int64x2_t *v17;

  v4 = (int64x2_t *)a1[2];
  v6 = (int64x2_t *)a1[3];
  v5 = (void **)(a1 + 2);
  if (v4 == v6)
  {
LABEL_8:
    a1[1] = a2;
    v9 = a1[4];
    if ((unint64_t)v6 >= v9)
    {
      v11 = v6 - v4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        sub_20E867F44();
      v13 = v9 - (_QWORD)v4;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 60)
          sub_20E877A38();
        v15 = (char *)operator new(16 * v14);
      }
      else
      {
        v15 = 0;
      }
      v17 = (int64x2_t *)&v15[16 * v11];
      *v17 = vdupq_n_s64(a2);
      v10 = v17 + 1;
      if (v4 != v6)
      {
        do
        {
          v17[-1] = v6[-1];
          --v17;
          --v6;
        }
        while (v6 != v4);
        v4 = (int64x2_t *)*v5;
      }
      a1[2] = v17;
      a1[3] = v10;
      a1[4] = &v15[16 * v14];
      if (v4)
        operator delete(v4);
    }
    else
    {
      v6->i64[0] = a2;
      v6->i64[1] = a2;
      v10 = v6 + 1;
    }
    a1[3] = v10;
    return 1;
  }
  else
  {
    v7 = (unint64_t *)a1[2];
    while (*v7 > a2 || v7[1] < a2)
    {
      v7 += 2;
      if (v7 == (unint64_t *)v6)
        goto LABEL_8;
    }
    return 0;
  }
}

uint64_t sub_20EE88A94(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v4 = (std::mutex *)(a1 + 4208);
  std::mutex::lock((std::mutex *)(a1 + 4208));
  v5 = *(_QWORD *)(a1 + 8) + 1;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v12 = v5;
    if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v12) & 1) == 0)
    {
      do
      {
        do
        {
          v11 = *(_QWORD *)(a1 + 4272);
          sub_20E893368((unsigned int *)&v12, &v11);
          v15[0] = (v12 | ((unint64_t)BYTE4(v12) << 32) | ((unint64_t)BYTE5(v12) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v12) << 56) | ((unint64_t)(HIWORD(HIDWORD(v12)) & 0xF | 0x40u) << 48);
          v15[1] = ((unint64_t)v14 << 32) | ((unint64_t)BYTE1(v14) << 40) | v13 & 0xFFFFFF00 | ((unint64_t)v14 << 32) & 0xFF00000000000000 | ((unint64_t)BYTE2(v14) << 48) | v13 & 0x3F | 0x80;
          v7 = sub_2102322B4((unsigned __int8 *)v15);
        }
        while (!sub_20EE88940((_QWORD *)a1, v7));
        v12 = *(_QWORD *)(a1 + 8);
        v8 = *(_QWORD *)(a2 + 24);
        if (!v8)
          sub_20E86D37C();
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v12) & 1) == 0);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  std::mutex::unlock(v4);
  return v9;
}

void sub_20EE88C00(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE88C14(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE88C28(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE88C3C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >> 59)
      sub_20E867F44();
    result = (uint64_t)operator new(32 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 32 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = v8 + v9;
        v11 = a2 + v9;
        *(_DWORD *)v10 = *(_DWORD *)(a2 + v9);
        *(_QWORD *)(v8 + v9 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)(v10 + 24) = 0;
        result = sub_20EA89974(v8 + v9 + 8, *(_QWORD *)(a2 + v9 + 8), *(_QWORD *)(a2 + v9 + 16), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a2 + v9 + 16) - *(_QWORD *)(a2 + v9 + 8)) >> 7));
        v9 += 32;
      }
      while (v11 + 32 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EE88D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EE88D98(&a9);
  _Unwind_Resume(a1);
}

void sub_20EE88D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  if (v12)
  {
    do
    {
      v14 = *(_QWORD *)(v11 - 24);
      if (v14)
      {
        v15 = *(_QWORD *)(v11 - 16);
        v16 = *(void **)(v11 - 24);
        if (v15 != v14)
        {
          do
            v15 = sub_20EB8188C(v15 - 1664);
          while (v15 != v14);
          v16 = *(void **)(v11 - 24);
        }
        *(_QWORD *)(v11 - 16) = v14;
        operator delete(v16);
      }
      v11 -= 32;
    }
    while (v11 != v10);
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EE88D98(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20EE88D98(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = *((_QWORD *)v4 - 3);
          if (v6)
          {
            v7 = *((_QWORD *)v4 - 2);
            v8 = (void *)*((_QWORD *)v4 - 3);
            if (v7 != v6)
            {
              do
                v7 = sub_20EB8188C(v7 - 1664);
              while (v7 != v6);
              v8 = (void *)*((_QWORD *)v4 - 3);
            }
            *((_QWORD *)v4 - 2) = v6;
            operator delete(v8);
          }
          v4 -= 32;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20EE88E60@<X0>(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  __int128 v10;

  __p = operator new(0x28uLL);
  v10 = xmmword_2102DC910;
  strcpy((char *)__p, "VIOPoseMetadataDebugConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8(a1);
  sub_20E8B2F9C((uint64_t *)&__p, "VIOPoseMetadataDebugConfig.enable_front_end_debug", v4, "Attach vfusion debug information to VIOPoseMetadata.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8(a1 + 1);
  sub_20E8B2F9C((uint64_t *)&__p, "VIOPoseMetadataDebugConfig.enable_map_debug", v5, "Attach map debug information to VIOPoseMetadata.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8(a1 + 2);
  sub_20E8B2F9C((uint64_t *)&__p, "VIOPoseMetadataDebugConfig.exclude_map_data_from_debug", v6, "Attach map debug information to VIOPoseMetadata.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA14D8(a1 + 3);
  return sub_20E8B2F9C((uint64_t *)&__p, "VIOPoseMetadataDebugConfig.enable_plane_debug", v7, "Attach 3D plane debug information to VIOPoseMetadata.");
}

void sub_20EE88FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE88FEC(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24C9EF8C0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = xmmword_210385DE0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = operator new(0x68uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C9EEF68;
  v4[3] = 850045863;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  v4[10] = 0;
  v4[11] = a1 + 8;
  *(_QWORD *)(a1 + 120) = v4 + 3;
  *(_QWORD *)(a1 + 128) = v4;
  *(_QWORD *)a1 = &off_24C9EEF28;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 136) = v5;
  if (!v5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/DoGFeatureDetector.cpp", 33, (uint64_t)"detector_", 9, (uint64_t)&unk_210265AF5, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20EE890E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = v1[17];
  v1[17] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *v1 = v3;
  sub_20EEB2EA0(v2);
  _Unwind_Resume(a1);
}

void sub_20EE89110(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD *v4;

  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v4 = *(_QWORD **)(v1 + 16);
  if (v4)
  {
    sub_20EE89664((uint64_t)v2, v4);
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_20EE8913C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double *exception;
  _QWORD v16[12];
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void *__p;
  void *v20;

  if (!*(_QWORD *)(a2 + 80)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/DoGFeatureDetector.cpp", 38, (uint64_t)"sample.frame.image.data", 23, (uint64_t)&unk_210265AF5, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EEB2C28(a1 + 8, a3);
  v6 = *a3;
  if (!*a3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/DoGFeatureDetector.cpp", 40, (uint64_t)"feature_points_ptr && \"Feature point ptr from pool is NULL.\"", 60, (uint64_t)&unk_210265AF5, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a3;
  }
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(v6 + 56);
  *(_QWORD *)(v6 + 88) = *(_QWORD *)(v6 + 80);
  *(_QWORD *)(v6 + 168) = *(_QWORD *)(v6 + 160);
  *(_BYTE *)(v6 + 184) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  if (*(_BYTE *)(v6 + 48))
    *(_BYTE *)(v6 + 48) = 0;
  v8 = *(_QWORD *)(a1 + 136);
  sub_20EDB9988((uint64_t)v16, (_QWORD *)a2);
  (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, v16, *(_QWORD *)(a2 + 392), v6);
  v16[0] = &off_24C9AFD78;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v9 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v17;
  if (!v17)
    goto LABEL_19;
  v13 = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!*(_BYTE *)(a2 + 72))
      return;
  }
  else
  {
LABEL_19:
    if (!*(_BYTE *)(a2 + 72))
      return;
  }
  if (sub_210215748((double *)(a2 + 64)))
  {
    exception = (double *)__cxa_allocate_exception(0x28uLL);
    *(_DWORD *)exception = 1;
    sub_20EE893E8((uint64_t)(exception + 1), (uint64_t *)(a2 + 64));
    exception[4] = *(double *)(a2 + 112) + *(double *)(a2 + 120);
    __cxa_throw(exception, (struct type_info *)&unk_24C9B3140, (void (*)(void *))sub_20EE89530);
  }
}

void sub_20EE89360(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EE89374(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EE89390(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EE893A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EE893B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E8E481C(&a9);
  sub_20E86665C(v9);
  _Unwind_Resume(a1);
}

void sub_20EE893D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE893E8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string __p;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_20EB13C68(v4, "Frame expired during feature detection at time ");
  sub_20EC4149C(a2, &__p);
  v7[0] = v4;
  v7[1] = &__p;
  v7[2] = v4;
  v7[3] = &__p;
  v7[4] = &__p;
  if (v5 == -1)
    sub_20E877AB8();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C9EEFC0[v5])(&v8, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_20E877AB8();
  v7[0] = &__p;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9EEFD8[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9EEFA8[v5])(v7, v4);
  return result;
}

void sub_20EE894F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE8950C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EE894FCLL);
}

uint64_t sub_20EE89530(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

_QWORD *sub_20EE89570(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[17];
  a1[17] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_24C9EF8C0;
  sub_20EEB2EA0((uint64_t)(a1 + 1));
  return a1;
}

void sub_20EE895BC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[17];
  a1[17] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_24C9EF8C0;
  sub_20EEB2EA0((uint64_t)(a1 + 1));
  JUMPOUT(0x212BC6398);
}

void sub_20EE89618(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EEF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE89628(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EEF68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE89658(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t sub_20EE89664(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v6 = (_QWORD *)*--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
    {
      v7 = (void *)v5[20];
      if (v7)
      {
        v5[21] = v7;
        operator delete(v7);
      }
      v8 = (void *)v5[13];
      if (v8)
      {
        v5[14] = v8;
        operator delete(v8);
      }
      v9 = (void *)v5[10];
      if (v9)
      {
        v5[11] = v9;
        operator delete(v9);
      }
      v10 = (void *)v5[7];
      if (v10)
      {
        v5[8] = v10;
        operator delete(v10);
      }
      result = MEMORY[0x212BC6398](v5, 0x1020C4069399AA6);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_20EE8970C(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 288) + 24))(*(_QWORD *)(a1 + 288), *a2);
}

void sub_20EE89720(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  unsigned __int8 v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;

  *(_QWORD *)a3 = *(_QWORD *)(a2 + 392);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 24) = 0u;
  v7 = a3 + 24;
  *(_OWORD *)(a3 + 8) = v6;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a3 + 184) = *(_OWORD *)(a2 + 312);
  *(_BYTE *)(a3 + 248) = 0;
  *(_BYTE *)(a3 + 256) = 0;
  *(_BYTE *)(a3 + 656) = 0;
  *(_BYTE *)(a3 + 664) = 0;
  *(_BYTE *)(a3 + 688) = 0;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_BYTE *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_QWORD *)(a3 + 696) = *(_QWORD *)(a2 + 344);
  *(_DWORD *)(a3 + 704) = *(_DWORD *)(a2 + 352);
  if (*(_BYTE *)(a2 + 272))
  {
    v8 = *(_OWORD *)(a2 + 216);
    v9 = *(_OWORD *)(a2 + 232);
    v10 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a3 + 128) = v9;
    *(_OWORD *)(a3 + 144) = v10;
    v11 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a3 + 160) = v11;
    v12 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a3 + 96) = v12;
    *(_OWORD *)(a3 + 112) = v8;
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = v10;
    *(_QWORD *)(v7 + 64) = v11;
    *(_OWORD *)v7 = v12;
    *(_OWORD *)(v7 + 16) = v8;
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 280) + 16))(&v59, *(_QWORD *)(a1 + 280), a2);
  v56 = v59;
  v57 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v58 = a2;
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 272) + 24))(&v54, *(_QWORD *)(a1 + 272), &v56);
  *(_OWORD *)(a3 + 200) = v54;
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 272) + 32))(&v54);
  *(_OWORD *)(a3 + 664) = v54;
  *(_QWORD *)(a3 + 680) = v55;
  *(_BYTE *)(a3 + 688) = 1;
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 288) + 16))(&v54, *(_QWORD *)(a1 + 288), a2);
  *(_OWORD *)(a3 + 216) = v54;
  if (*(_BYTE *)(a1 + 297))
  {
    v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a3 + 288) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a3 + 304) = v15;
    *(_OWORD *)(a3 + 313) = *(_OWORD *)(a2 + 57);
    v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a3 + 256) = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 272) = v16;
    v17 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a3 + 336) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a3 + 344) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a3 + 352) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a3 + 360) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    memcpy((void *)(a3 + 368), (const void *)(a2 + 112), 0x120uLL);
    *(_BYTE *)(a3 + 656) = 1;
  }
  if (*(_BYTE *)(a1 + 296))
  {
    v23 = *(_QWORD *)(a2 + 400);
    v24 = *(std::__shared_weak_count **)(a2 + 408);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    *(_QWORD *)&v54 = &off_24CA1A9A0;
    if (v23)
    {
      v28 = *(_QWORD *)(v23 + 8);
      v27 = *(std::__shared_weak_count **)(v23 + 16);
      *((_QWORD *)&v54 + 1) = v28;
      v55 = v27;
      if (v27)
      {
        v29 = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      if (!v24)
      {
LABEL_29:
        sub_20EEB9674((uint64_t)&v54, &v52);
        if (*(unsigned __int8 *)(a3 + 248) == v53)
        {
          if (!*(_BYTE *)(a3 + 248))
            goto LABEL_51;
          v33 = v52;
          v52 = 0uLL;
          v34 = *(std::__shared_weak_count **)(a3 + 240);
          *(_OWORD *)(a3 + 232) = v33;
          if (v34)
          {
            v35 = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
              if (!v53)
                goto LABEL_51;
LABEL_45:
              v40 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
              if (*((_QWORD *)&v52 + 1))
              {
                v41 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
                do
                  v42 = __ldaxr(v41);
                while (__stlxr(v42 - 1, v41));
                if (!v42)
                {
                  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                  std::__shared_weak_count::__release_weak(v40);
                }
              }
              goto LABEL_51;
            }
          }
        }
        else
        {
          if (!*(_BYTE *)(a3 + 248))
          {
            *(_OWORD *)(a3 + 232) = v52;
            v52 = 0uLL;
            *(_BYTE *)(a3 + 248) = 1;
            if (v53)
              goto LABEL_45;
            goto LABEL_51;
          }
          v37 = *(std::__shared_weak_count **)(a3 + 240);
          if (v37)
          {
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          *(_BYTE *)(a3 + 248) = 0;
        }
        if (v53)
          goto LABEL_45;
LABEL_51:
        *(_QWORD *)&v54 = &off_24CA1A9A0;
        v43 = v55;
        if (v55)
        {
          v44 = (unint64_t *)&v55->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        goto LABEL_56;
      }
    }
    else
    {
      *((_QWORD *)&v54 + 1) = 0;
      v55 = 0;
      if (!v24)
        goto LABEL_29;
    }
    v31 = (unint64_t *)&v24->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_29;
  }
LABEL_56:
  v46 = v57;
  if (v57)
  {
    v47 = (unint64_t *)&v57->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v60;
  if (v60)
  {
    v50 = (unint64_t *)&v60->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_20EE89BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_21015D41C((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C(v6 - 48);
  sub_20E9AE6A0(v5);
  _Unwind_Resume(a1);
}

void sub_20EE89BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9AE6A0(v1);
  _Unwind_Resume(a1);
}

void sub_20EE89BF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20EE89720(a1 - 56, a2, a3);
}

uint64_t sub_20EE89BF8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 16))(*(_QWORD *)(a1 + 272));
}

uint64_t sub_20EE89C08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160));
}

uint64_t sub_20EE89C18(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 40))(*(_QWORD *)(a1 + 272));
}

uint64_t sub_20EE89C28(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104));
}

void sub_20EE89C38(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, int64x2_t *a4@<X3>, int a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X8>)
{
  _BYTE v16[28];
  int32x2_t v17;
  _BYTE v18[232];
  void *__p;
  void *v20;

  sub_20FD66938(*(unsigned __int8 *)(a3 + 100), a4->i64[0], a4->u64[1], *(_QWORD *)(a3 + 8), *(_DWORD *)(a3 + 200), *(_DWORD *)(a3 + 204), *(_DWORD *)(a3 + 208), *(_QWORD *)(a3 + 184), (uint64_t)v18, *(float *)(a3 + 108), *(float *)(a3 + 112), *(float *)(a3 + 116), *(_QWORD *)(a3 + 192), *(int *)(a3 + 20), *(_WORD *)(a3 + 213), HIBYTE(*(_WORD *)(a3 + 213)), *(_WORD *)(a3 + 101), HIBYTE(*(_WORD *)(a3 + 101)), *(_DWORD *)(a3 + 103),
    BYTE1(*(_DWORD *)(a3 + 103)),
    BYTE2(*(_DWORD *)(a3 + 103)),
    HIBYTE(*(_DWORD *)(a3 + 103)),
    *(_BYTE *)(a3 + 215),
    *(_BYTE *)(a3 + 212),
    a3 + 224);
  v17 = vmovn_s64(a4[1]);
  *(_OWORD *)v16 = *(_OWORD *)(a3 + 252);
  *(_OWORD *)&v16[12] = *(_OWORD *)(a3 + 264);
  sub_20EE89D6C(a1, a2, a3, (uint64_t)v18, (uint64_t)v16, a5, a6, a7, a8);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20EE89D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE89D6C(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  float v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void **v29;
  void **v30;
  char v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void **v36;
  char *v37;
  void **v38;
  char *v39;
  char *v40;
  void **v41;
  char *v42;
  char *v43;
  void **v44;
  void **v45;
  uint64_t *v46;
  uint64_t *v47;
  __int128 __dst;
  _BYTE v49[12];
  int v50;
  __int16 v51;
  __int128 v52;
  int v53;
  __int128 v54;
  int64x2_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v18 = operator new();
  sub_20EE8B3B0(v18, a1, a2, a6);
  if (a6)
  {
    v19 = operator new();
    *(_OWORD *)v19 = 0u;
    *(_QWORD *)(v19 + 128) = 0;
    *(_OWORD *)(v19 + 96) = 0u;
    *(_OWORD *)(v19 + 112) = 0u;
    *(_OWORD *)(v19 + 64) = 0u;
    *(_OWORD *)(v19 + 80) = 0u;
    *(_QWORD *)v19 = off_24C9EF8C0;
    *(_OWORD *)(v19 + 32) = 0u;
    *(_OWORD *)(v19 + 48) = xmmword_210385DE0;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_QWORD *)(v19 + 112) = 0;
    v20 = operator new(0x68uLL);
    v20[1] = 0;
    v20[2] = 0;
    *v20 = &off_24C9EEF68;
    v20[3] = 850045863;
    *((_OWORD *)v20 + 2) = 0u;
    *((_OWORD *)v20 + 3) = 0u;
    *((_OWORD *)v20 + 4) = 0u;
    v20[10] = 0;
    v20[11] = v19 + 8;
    *(_QWORD *)(v19 + 120) = v20 + 3;
    *(_QWORD *)(v19 + 128) = v20;
    *(_QWORD *)v19 = &off_24C9EF880;
  }
  else
  {
    v21 = operator new();
    *(_QWORD *)v21 = &off_24CA06CB8;
    *(_OWORD *)(v21 + 8) = 0u;
    *(_OWORD *)(v21 + 24) = 0u;
    *(_OWORD *)(v21 + 40) = 0u;
    *(_QWORD *)(v21 + 56) = 0;
    *(_DWORD *)(v21 + 72) = 1;
    *(_BYTE *)(v21 + 76) = 1;
    *(_OWORD *)(v21 + 80) = xmmword_2102DB6B0;
    *(_OWORD *)(v21 + 96) = xmmword_2102DB6C0;
    *(_QWORD *)(v21 + 112) = 1000;
    *(_BYTE *)(v21 + 120) = 1;
    *(_OWORD *)(v21 + 124) = xmmword_2102DB6D0;
    *(_QWORD *)(v21 + 140) = 0x410000004141999ALL;
    *(_QWORD *)(v21 + 152) = 5;
    *(_QWORD *)(v21 + 160) = 0x41F0000041200000;
    v22 = vdupq_n_s64(1uLL);
    *(int64x2_t *)(v21 + 168) = v22;
    *(_OWORD *)(v21 + 184) = xmmword_2102DB6E0;
    *(_WORD *)(v21 + 200) = 0;
    *(_DWORD *)(v21 + 204) = 1;
    *(_WORD *)(v21 + 208) = 1;
    *(_QWORD *)(v21 + 216) = 36;
    *(_DWORD *)(v21 + 224) = 5;
    *(_QWORD *)(v21 + 228) = 0x404000003F4CCCCDLL;
    *(_DWORD *)(v21 + 236) = 1069547520;
    *(_QWORD *)(v21 + 240) = 20000;
    *(_WORD *)(v21 + 252) = 256;
    *(_DWORD *)(v21 + 248) = 0;
    *(_OWORD *)(v21 + 256) = xmmword_2102DB6F0;
    *(_QWORD *)(v21 + 272) = 0x3F96E9DD3F5425F2;
    *(_DWORD *)(v21 + 280) = 0;
    *(int64x2_t *)(v21 + 288) = vdupq_n_s64(0xAuLL);
    *(_QWORD *)(v21 + 312) = 0;
    *(_QWORD *)(v21 + 320) = 0;
    *(_QWORD *)(v21 + 304) = 0;
    LODWORD(__dst) = 0;
    BYTE4(__dst) = 1;
    *((_QWORD *)&__dst + 1) = 0x4120000041A00000;
    *(_DWORD *)v49 = 5;
    *(_QWORD *)&v49[4] = 0x3F96E9DD3F5425F2;
    v50 = 0;
    v51 = 1;
    v52 = xmmword_210378520;
    v53 = 100;
    v54 = xmmword_210378530;
    v55 = v22;
    sub_20FD40C08(v21, (__int128 *)a4, (uint64_t)&__dst);
    v19 = operator new();
    *(_QWORD *)&__dst = v21;
    sub_20EE88FEC(v19, (uint64_t *)&__dst);
    if ((_QWORD)__dst)
      (*(void (**)(_QWORD))(*(_QWORD *)__dst + 8))(__dst);
  }
  v23 = operator new();
  *(_QWORD *)v23 = &off_24CA06F30;
  *(_OWORD *)(v23 + 8) = *(_OWORD *)a5;
  *(_OWORD *)(v23 + 20) = *(_OWORD *)(a5 + 12);
  *(_OWORD *)(v23 + 40) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_OWORD *)(v23 + 104) = 0u;
  *(_OWORD *)(v23 + 120) = 0u;
  *(_OWORD *)(v23 + 136) = 0u;
  *(_OWORD *)(v23 + 152) = 0u;
  *(_OWORD *)(v23 + 168) = 0u;
  v46 = 0;
  v24 = (float)*(unint64_t *)(a4 + 8) / (float)*(int *)(a5 + 28);
  if (v24 != 1.0)
  {
    v25 = (uint64_t *)operator new();
    sub_20F41C71C(v25, *(unsigned int *)(a5 + 28) | 0x100000000, *(unsigned int *)(a5 + 32) | 0x100000000, 0, 0, 1);
    v46 = v25;
  }
  v26 = operator new();
  v47 = v46;
  *(_QWORD *)&__dst = v23;
  sub_20EEB34F4(v26, (uint64_t *)&__dst, a7, (uint64_t *)&v47, v24);
  v27 = v47;
  if (v47)
  {
    v28 = *v47;
    *v47 = 0;
    if (v28)
      ((void (*)(void))v27[1])();
    MEMORY[0x212BC6398](v27, 0xA0C40AFF93C70);
  }
  if ((_QWORD)__dst)
    (*(void (**)(_QWORD))(*(_QWORD *)__dst + 8))(__dst);
  *(_OWORD *)(a9 + 8) = 0u;
  v29 = (void **)(a9 + 8);
  *(_OWORD *)(a9 + 120) = 0u;
  v30 = (void **)(a9 + 120);
  v31 = *(_BYTE *)(a3 + 384);
  *(_OWORD *)(a9 + 24) = 0u;
  *(_OWORD *)(a9 + 40) = 0u;
  *(_OWORD *)(a9 + 56) = 0u;
  *(_OWORD *)(a9 + 72) = 0u;
  *(_OWORD *)(a9 + 88) = 0u;
  *(_OWORD *)(a9 + 104) = 0u;
  *(_OWORD *)(a9 + 136) = 0u;
  *(_OWORD *)(a9 + 152) = 0u;
  *(_OWORD *)(a9 + 168) = 0u;
  *(_OWORD *)(a9 + 184) = 0u;
  *(_OWORD *)(a9 + 200) = 0u;
  *(_OWORD *)(a9 + 216) = 0u;
  *(_OWORD *)(a9 + 232) = 0u;
  *(_OWORD *)(a9 + 248) = 0u;
  *(_QWORD *)a9 = &off_24C9EF000;
  *(_QWORD *)(a9 + 56) = &unk_24C9EF040;
  *(_QWORD *)(a9 + 112) = &unk_24C9EF068;
  *(_QWORD *)(a9 + 168) = &unk_24C9EF090;
  *(_QWORD *)(a9 + 264) = 0;
  *(_QWORD *)(a9 + 272) = v18;
  *(_QWORD *)(a9 + 280) = v19;
  *(_QWORD *)(a9 + 288) = v26;
  *(_BYTE *)(a9 + 296) = v31;
  *(_BYTE *)(a9 + 297) = a8;
  *(_DWORD *)((char *)&__dst + 7) = 1701080910;
  *(_QWORD *)&__dst = *(_QWORD *)"etectorNode";
  v32 = (char *)operator new(0x20uLL);
  strcpy(v32, "Instance to detect features");
  v33 = __dst;
  *(_QWORD *)(a9 + 224) = 0x4465727574616546;
  *(_QWORD *)(a9 + 232) = v33;
  *(_DWORD *)(a9 + 239) = *(_DWORD *)((char *)&__dst + 7);
  *(_WORD *)(a9 + 244) = (_WORD)v47;
  *(_BYTE *)(a9 + 246) = BYTE2(v47);
  *(_BYTE *)(a9 + 247) = 19;
  *(_BYTE *)(a9 + 243) = 0;
  sub_20E867BF8((_QWORD *)(a9 + 248), v32, 0x1BuLL);
  operator delete(v32);
  v34 = (char *)operator new(0x19uLL);
  strcpy(v34, "Line Detection Enabling");
  v35 = (char *)operator new(0x20uLL);
  strcpy(v35, "Enable/Disable line detection");
  sub_20E860C04(&__dst, v34, 0x17uLL);
  if (*(char *)(a9 + 31) < 0)
    operator delete(*v29);
  *(_OWORD *)v29 = __dst;
  *(_QWORD *)(a9 + 24) = *(_QWORD *)v49;
  sub_20E860C04(&__dst, v35, 0x1DuLL);
  v36 = (void **)(a9 + 32);
  if (*(char *)(a9 + 55) < 0)
    operator delete(*v36);
  *(_OWORD *)v36 = __dst;
  *(_QWORD *)(a9 + 48) = *(_QWORD *)v49;
  operator delete(v35);
  operator delete(v34);
  v37 = (char *)operator new(0x40uLL);
  strcpy(v37, "Process input frame sample and detect features (points, lines)");
  if (*(char *)(a9 + 87) < 0)
    operator delete(*(void **)(a9 + 64));
  strcpy((char *)(a9 + 64), "Feature Detection");
  *(_BYTE *)(a9 + 87) = 17;
  sub_20E860C04(&__dst, v37, 0x3EuLL);
  v38 = (void **)(a9 + 88);
  if (*(char *)(a9 + 111) < 0)
    operator delete(*v38);
  *(_OWORD *)v38 = __dst;
  *(_QWORD *)(a9 + 104) = *(_QWORD *)v49;
  operator delete(v37);
  v39 = (char *)operator new(0x20uLL);
  strcpy(v39, "Feature Filtering Inputs");
  v40 = (char *)operator new(0x30uLL);
  strcpy(v40, "SLAM status update used in feature filtering");
  sub_20E860C04(&__dst, v39, 0x18uLL);
  if (*(char *)(a9 + 143) < 0)
    operator delete(*v30);
  *(_OWORD *)v30 = __dst;
  *(_QWORD *)(a9 + 136) = *(_QWORD *)v49;
  sub_20E860C04(&__dst, v40, 0x2CuLL);
  v41 = (void **)(a9 + 144);
  if (*(char *)(a9 + 167) < 0)
    operator delete(*v41);
  *(_OWORD *)v41 = __dst;
  *(_QWORD *)(a9 + 160) = *(_QWORD *)v49;
  operator delete(v40);
  operator delete(v39);
  v42 = (char *)operator new(0x20uLL);
  strcpy(v42, "Static Feature Filtering Inputs");
  v43 = (char *)operator new(0x38uLL);
  strcpy(v43, "Gyro status update used in static feature filtering");
  sub_20E860C04(&__dst, v42, 0x1FuLL);
  v44 = (void **)(a9 + 176);
  if (*(char *)(a9 + 199) < 0)
    operator delete(*v44);
  *(_OWORD *)v44 = __dst;
  *(_QWORD *)(a9 + 192) = *(_QWORD *)v49;
  sub_20E860C04(&__dst, v43, 0x33uLL);
  v45 = (void **)(a9 + 200);
  if (*(char *)(a9 + 223) < 0)
    operator delete(*v45);
  *(_OWORD *)v45 = __dst;
  *(_QWORD *)(a9 + 216) = *(_QWORD *)v49;
  operator delete(v43);
  operator delete(v42);
}

void sub_20EE8A658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EE8A810(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10F3C40357C1EAFLL);
  _Unwind_Resume(a1);
}

void sub_20EE8A834()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x20EE8A848);
}

uint64_t **sub_20EE8A8E0(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x212BC6398](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t sub_20EE8A93C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24C9EF000;
  a1[7] = &unk_24C9EF040;
  a1[14] = &unk_24C9EF068;
  a1[21] = &unk_24C9EF090;
  v2 = a1[36];
  a1[36] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[35];
  a1[35] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[34];
  a1[34] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return sub_20ED62854((uint64_t)a1);
}

void sub_20EE8A9C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24C9EF000;
  a1[7] = &unk_24C9EF040;
  a1[14] = &unk_24C9EF068;
  a1[21] = &unk_24C9EF090;
  v2 = a1[36];
  a1[36] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[35];
  a1[35] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[34];
  a1[34] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_20ED62854((uint64_t)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE8AA68(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(a1 - 7) = &off_24C9EF000;
  v2 = (uint64_t)(a1 - 7);
  *a1 = &unk_24C9EF040;
  a1[7] = &unk_24C9EF068;
  a1[14] = &unk_24C9EF090;
  v3 = a1[29];
  a1[29] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[28];
  a1[28] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[27];
  a1[27] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return sub_20ED62854(v2);
}

void sub_20EE8AAF8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(a1 - 7) = &off_24C9EF000;
  v2 = (uint64_t)(a1 - 7);
  *a1 = &unk_24C9EF040;
  a1[7] = &unk_24C9EF068;
  a1[14] = &unk_24C9EF090;
  v3 = a1[29];
  a1[29] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[28];
  a1[28] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[27];
  a1[27] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_20ED62854(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE8AB9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(a1 - 14) = &off_24C9EF000;
  v2 = (uint64_t)(a1 - 14);
  *(a1 - 7) = &unk_24C9EF040;
  *a1 = &unk_24C9EF068;
  a1[7] = &unk_24C9EF090;
  v3 = a1[22];
  a1[22] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[21];
  a1[21] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[20];
  a1[20] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return sub_20ED62854(v2);
}

void sub_20EE8AC2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(a1 - 14) = &off_24C9EF000;
  v2 = (uint64_t)(a1 - 14);
  *(a1 - 7) = &unk_24C9EF040;
  *a1 = &unk_24C9EF068;
  a1[7] = &unk_24C9EF090;
  v3 = a1[22];
  a1[22] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[21];
  a1[21] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[20];
  a1[20] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_20ED62854(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE8ACD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(a1 - 21) = &off_24C9EF000;
  v2 = (uint64_t)(a1 - 21);
  *(a1 - 14) = &unk_24C9EF040;
  *(a1 - 7) = &unk_24C9EF068;
  *a1 = &unk_24C9EF090;
  v3 = a1[15];
  a1[15] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[14];
  a1[14] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[13];
  a1[13] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return sub_20ED62854(v2);
}

void sub_20EE8AD60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(a1 - 21) = &off_24C9EF000;
  v2 = (uint64_t)(a1 - 21);
  *(a1 - 14) = &unk_24C9EF040;
  *(a1 - 7) = &unk_24C9EF068;
  *a1 = &unk_24C9EF090;
  v3 = a1[15];
  a1[15] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[14];
  a1[14] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[13];
  a1[13] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_20ED62854(v2);
  JUMPOUT(0x212BC6398);
}

unint64_t sub_20EE8AE04(void **a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  char *i;
  uint64_t v46;
  void *v47;

  v4 = (char *)*a1;
  v5 = (a2 - (uint64_t)*a1) / 12;
  v6 = (unint64_t)*a1 + 12 * v5;
  if (!a3)
    return v6;
  v7 = a4;
  v11 = (unint64_t)a1[1];
  v10 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v10[-v11] >> 2) >= a3)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v6) >> 2);
    v18 = (char *)a1[1];
    v19 = a3;
    if (a3 <= v17)
    {
LABEL_17:
      v23 = v6 + 12 * a3;
      v24 = &v18[-12 * a3];
      v25 = v18;
      if ((unint64_t)v24 < v11)
      {
        v25 = v18;
        do
        {
          v26 = *(_QWORD *)v24;
          *((_DWORD *)v25 + 2) = *((_DWORD *)v24 + 2);
          *(_QWORD *)v25 = v26;
          v25 += 12;
          v24 += 12;
        }
        while ((unint64_t)v24 < v11);
      }
      a1[1] = v25;
      if (v18 != (char *)v23)
      {
        v27 = 0;
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v18[-v23] >> 2);
        v29 = &v4[12 * v5 + 4 * ((uint64_t)&v18[-v23] >> 2)];
        v30 = -12 * v28;
        do
        {
          v31 = &v29[v27];
          v32 = &v18[v27];
          if (v18[v27 - 4] == v29[v27 - 4])
          {
            if (v18[v27 - 4])
            {
              *((_DWORD *)v32 - 3) = *((_DWORD *)v31 - 3);
              *(_DWORD *)&v18[v27 - 8] = *(_DWORD *)&v29[v27 - 8];
            }
          }
          else if (v18[v27 - 4])
          {
            *(v32 - 4) = 0;
          }
          else
          {
            *(_QWORD *)(v32 - 12) = *(_QWORD *)(v31 - 12);
            *(v32 - 4) = 1;
          }
          v27 -= 12;
        }
        while (v30 != v27);
      }
      if (v6 <= a4)
      {
        if ((unint64_t)a1[1] <= a4)
          v33 = 0;
        else
          v33 = a3;
        v7 = a4 + 12 * v33;
      }
      v34 = &v4[12 * v5 + 8];
      do
      {
        if (*v34 == *(_BYTE *)(v7 + 8))
        {
          if (*v34)
            *((_QWORD *)v34 - 1) = *(_QWORD *)v7;
        }
        else if (*v34)
        {
          *v34 = 0;
        }
        else
        {
          *((_QWORD *)v34 - 1) = *(_QWORD *)v7;
          *v34 = 1;
        }
        v34 += 12;
        --v19;
      }
      while (v19);
      return v6;
    }
    v20 = 0;
    v18 = (char *)(v11 + 12 * (a3 - v17));
    do
    {
      v21 = v11 + v20;
      v22 = *(_QWORD *)a4;
      *(_DWORD *)(v21 + 8) = *(_DWORD *)(a4 + 8);
      *(_QWORD *)v21 = v22;
      v20 += 12;
    }
    while (12 * a3 - 4 * ((uint64_t)(v11 - v6) >> 2) != v20);
    a1[1] = v18;
    if (v11 != v6)
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v6) >> 2);
      goto LABEL_17;
    }
    return v6;
  }
  v12 = a3 - 0x5555555555555555 * ((uint64_t)(v11 - (_QWORD)v4) >> 2);
  if (v12 > 0x1555555555555555)
    sub_20E867F44();
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v4) >> 2);
  v14 = 2 * v13;
  if (2 * v13 <= v12)
    v14 = v12;
  if (v13 >= 0xAAAAAAAAAAAAAAALL)
    v15 = 0x1555555555555555;
  else
    v15 = v14;
  if (v15)
  {
    if (v15 > 0x1555555555555555)
      sub_20E877A38();
    v16 = (char *)operator new(12 * v15);
  }
  else
  {
    v16 = 0;
  }
  v35 = &v16[12 * v5];
  v36 = 12 * a3;
  v37 = &v35[12 * a3];
  v38 = v35;
  do
  {
    v39 = *(_QWORD *)v7;
    *((_DWORD *)v38 + 2) = *(_DWORD *)(v7 + 8);
    *(_QWORD *)v38 = v39;
    v38 += 12;
    v36 -= 12;
  }
  while (v36);
  v40 = (char *)*a1;
  v41 = v35;
  if (*a1 != (void *)v6)
  {
    v42 = v6;
    v41 = v35;
    do
    {
      v43 = *(_QWORD *)(v42 - 12);
      v42 -= 12;
      v44 = *(_DWORD *)(v42 + 8);
      *(_QWORD *)(v41 - 12) = v43;
      v41 -= 12;
      *((_DWORD *)v41 + 2) = v44;
    }
    while ((char *)v42 != v40);
    v11 = (unint64_t)a1[1];
  }
  for (i = &v16[12 * v15]; v6 != v11; v6 += 12)
  {
    v46 = *(_QWORD *)v6;
    *((_DWORD *)v37 + 2) = *(_DWORD *)(v6 + 8);
    *(_QWORD *)v37 = v46;
    v37 += 12;
  }
  v47 = *a1;
  *a1 = v41;
  a1[1] = v37;
  a1[2] = i;
  if (v47)
    operator delete(v47);
  return (unint64_t)v35;
}

void sub_20EE8B16C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 12 * a2 - 12;
      if (v12 < 0xC)
        goto LABEL_35;
      v13 = v12 / 0xC + 1;
      v6 = &v5[12 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
      v14 = v5 + 12;
      v15 = v13 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *(v14 - 12) = 0;
        *v14 = 0;
        *(v14 - 4) = 0;
        v14[8] = 0;
        v14 += 24;
        v15 -= 2;
      }
      while (v15);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_35:
        do
        {
          *v6 = 0;
          v6[8] = 0;
          v6 += 12;
        }
        while (v6 != &v5[12 * a2]);
      }
      v6 = &v5[12 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*a1] >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        sub_20E877A38();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v16 = &v11[12 * v7];
    v17 = &v16[12 * a2];
    v18 = 12 * a2 - 12;
    v19 = v16;
    if (v18 < 0xC)
      goto LABEL_36;
    v20 = v18 / 0xC + 1;
    v19 = &v16[12 * (v20 & 0x3FFFFFFFFFFFFFFELL)];
    v21 = &v11[12 * v7 + 12];
    v22 = v20 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(v21 - 12) = 0;
      *v21 = 0;
      *(v21 - 4) = 0;
      v21[8] = 0;
      v21 += 24;
      v22 -= 2;
    }
    while (v22);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_36:
      do
      {
        *v19 = 0;
        v19[8] = 0;
        v19 += 12;
      }
      while (v19 != v17);
    }
    v23 = (_BYTE *)*a1;
    if (v5 != (_BYTE *)*a1)
    {
      do
      {
        v24 = *(_QWORD *)(v6 - 12);
        v6 -= 12;
        v25 = *((_DWORD *)v6 + 2);
        *(_QWORD *)(v16 - 12) = v24;
        v16 -= 12;
        *((_DWORD *)v16 + 2) = v25;
      }
      while (v6 != v23);
      v6 = (_BYTE *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = &v11[12 * v10];
    if (v6)
      operator delete(v6);
  }
}

uint64_t sub_20EE8B3B0(uint64_t a1, _QWORD *a2, __int128 *a3, char a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  _BYTE *v23;
  __int128 v24;
  void **v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double *v32;
  uint64_t *v33;
  char v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v46;
  uint64_t v47;

  *(_QWORD *)a1 = &off_24C9EF0D0;
  v8 = *a3;
  v9 = a3[1];
  v10 = a3[2];
  *(_OWORD *)(a1 + 56) = a3[3];
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 8) = v8;
  v11 = a3[4];
  v12 = a3[5];
  v13 = a3[6];
  *(_OWORD *)(a1 + 120) = a3[7];
  *(_OWORD *)(a1 + 104) = v13;
  *(_OWORD *)(a1 + 88) = v12;
  *(_OWORD *)(a1 + 72) = v11;
  v14 = a3[8];
  v15 = a3[9];
  v16 = *(__int128 *)((char *)a3 + 156);
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 164) = v16;
  *(_OWORD *)(a1 + 136) = v14;
  *(_OWORD *)(a1 + 152) = v15;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v18 = (_BYTE *)*((_QWORD *)a3 + 22);
  v17 = (_BYTE *)*((_QWORD *)a3 + 23);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      sub_20E867F44();
    v20 = (char *)operator new(v17 - v18);
    *(_QWORD *)(a1 + 184) = v20;
    *(_QWORD *)(a1 + 192) = v20;
    v21 = &v20[4 * (v19 >> 2)];
    *(_QWORD *)(a1 + 200) = v21;
    memcpy(v20, v18, v19);
    *(_QWORD *)(a1 + 192) = v21;
  }
  v22 = *(__int128 *)((char *)a3 + 200);
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a3 + 27);
  *(_OWORD *)(a1 + 208) = v22;
  v23 = (_BYTE *)(a1 + 232);
  if (*((char *)a3 + 247) < 0)
  {
    sub_20E860C04(v23, *((void **)a3 + 28), *((_QWORD *)a3 + 29));
  }
  else
  {
    v24 = a3[14];
    *(_QWORD *)(a1 + 248) = *((_QWORD *)a3 + 30);
    *(_OWORD *)v23 = v24;
  }
  *(_BYTE *)(a1 + 256) = *((_BYTE *)a3 + 248);
  *(_BYTE *)(a1 + 264) = a4;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_BYTE *)(a1 + 332) = 1;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_WORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = -1;
  *(_QWORD *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = -1;
  *(_QWORD *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 432) = -1;
  *(_QWORD *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = -1;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 480) = -1;
  *(_QWORD *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = -1;
  *(_QWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = -1;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 552) = -1;
  *(_QWORD *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_WORD *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 586) = 0;
  v25 = (void **)(a1 + 592);
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  v26 = *((_QWORD *)a3 + 8);
  v27 = a3[3];
  v28 = a3[1];
  *(_OWORD *)(a1 + 632) = a3[2];
  *(_OWORD *)(a1 + 648) = v27;
  *(_QWORD *)(a1 + 664) = v26;
  *(_OWORD *)(a1 + 616) = v28;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  v29 = *(_QWORD *)(a1 + 632);
  v30 = *(double *)(a1 + 640);
  v31 = *(_QWORD *)(a1 + 648);
  v32 = (double *)operator new(0x30uLL);
  *(_QWORD *)(a1 + 672) = v32;
  *(_QWORD *)(a1 + 688) = v32 + 6;
  *(_QWORD *)v32 = v29;
  v32[1] = -v30;
  *((_QWORD *)v32 + 2) = v31;
  *((_QWORD *)v32 + 3) = v29;
  v32[4] = v30;
  *((_QWORD *)v32 + 5) = v31;
  *(_QWORD *)(a1 + 680) = v32 + 6;
  v33 = (uint64_t *)(a1 + 720);
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  v34 = *((_BYTE *)a3 + 128);
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_DWORD *)(a1 + 760) = 1065353216;
  *(_QWORD *)(a1 + 768) = 5;
  *(_DWORD *)(a1 + 776) = 40;
  *(_BYTE *)(a1 + 780) = a4;
  *(_BYTE *)(a1 + 781) = v34;
  sub_20EA89240(a2, 0, (uint64_t)&v46, *((double *)a3 + 1));
  v35 = a3 + 8;
  v36 = *(_QWORD *)(a1 + 592);
  if (v36)
  {
    v37 = *(_QWORD *)(a1 + 600);
    v38 = *v25;
    if (v37 != v36)
    {
      do
      {
        v39 = *(_QWORD *)(v37 - 24);
        if (v39)
        {
          v40 = *(_QWORD *)(v37 - 16);
          v41 = *(void **)(v37 - 24);
          if (v40 != v39)
          {
            do
              v40 = sub_20EB8188C(v40 - 1664);
            while (v40 != v39);
            v41 = *(void **)(v37 - 24);
          }
          *(_QWORD *)(v37 - 16) = v39;
          operator delete(v41);
        }
        v37 -= 32;
      }
      while (v37 != v36);
      v38 = *v25;
    }
    *(_QWORD *)(a1 + 600) = v36;
    operator delete(v38);
    *v25 = 0;
    *(_QWORD *)(a1 + 600) = 0;
    *(_QWORD *)(a1 + 608) = 0;
  }
  *(_OWORD *)(a1 + 592) = v46;
  *(_QWORD *)(a1 + 608) = v47;
  if (*(_BYTE *)v35)
  {
    v42 = operator new();
    sub_20FD89A84(v42, v35);
    v43 = *v33;
    *v33 = v42;
    if (v43)
    {
      v44 = sub_20EE9FB20(v43);
      MEMORY[0x212BC6398](v44, 0x10B2C401F5AFF5CLL);
    }
  }
  return a1;
}

void sub_20EE8B724(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (!*v2)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 + 192) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EE8B7E0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20EE9FB20(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C401F5AFF5CLL);
  }
  return a1;
}

uint64_t sub_20EE8B824(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20EE9FBEC(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20EE8B880(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
    operator delete(v2);
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20EE8B8BC(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>, double a12@<D3>, double a13@<D4>, double a14@<D5>, double a15@<D6>, double a16@<D7>, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,BOOL a26,char a27,unsigned int a28,unsigned int a29,unsigned int a30,unsigned int a31,uint64_t (**a32)(),uint64_t a33,std::__shared_weak_count *a34,uint64_t (**a35)(),uint64_t a36,std::__shared_weak_count *a37,uint64_t (**a38)(),uint64_t a39,std::__shared_weak_count *a40,uint64_t (**a41)(),uint64_t a42,std::__shared_weak_count *a43,uint64_t (**a44)(),uint64_t a45,std::__shared_weak_count *a46,uint64_t (**a47)(),uint64_t a48,std::__shared_weak_count *a49,uint64_t (**a50)(),uint64_t a51,std::__shared_weak_count *a52,uint64_t (**a53)(),uint64_t a54,std::__shared_weak_count *a55,uint64_t (**a56)(),uint64_t a57,std::__shared_weak_count *a58,uint64_t (**a59)(),uint64_t a60,std::__shared_weak_count *a61,uint64_t (**a62)(),uint64_t a63)
{
  if (*(_BYTE *)(a1 + 264))
    sub_20EE8B8D8(a8, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55,
      a56,
      a57,
      a58,
      a59,
      a60,
      a61,
      a62,
      a63);
  else
    sub_20EE91CF8(a8, a1, a2);
}

void sub_20EE8B8D8(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,BOOL a26,char a27,unsigned int a28,unsigned int a29,unsigned int a30,unsigned int a31,uint64_t (**a32)(),uint64_t a33,std::__shared_weak_count *a34,uint64_t (**a35)(),uint64_t a36,std::__shared_weak_count *a37,uint64_t (**a38)(),uint64_t a39,std::__shared_weak_count *a40,uint64_t (**a41)(),uint64_t a42,std::__shared_weak_count *a43,uint64_t (**a44)(),uint64_t a45,std::__shared_weak_count *a46,uint64_t (**a47)(),uint64_t a48,std::__shared_weak_count *a49,uint64_t (**a50)(),uint64_t a51,std::__shared_weak_count *a52,uint64_t (**a53)(),uint64_t a54,std::__shared_weak_count *a55,uint64_t (**a56)(),uint64_t a57,std::__shared_weak_count *a58,uint64_t (**a59)(),uint64_t a60,std::__shared_weak_count *a61,uint64_t (**a62)(),uint64_t a63)
{
  std::__shared_weak_count *a64;
  uint64_t (**a65)();
  std::__shared_weak_count *a67;
  uint64_t a68;
  uint64_t a69;
  unint64_t a70;
  int a71;
  uint64_t (**a72)();
  uint64_t a73;
  std::__shared_weak_count *a74;
  float64x2_t a75;
  unint64_t a76;
  __int128 a77;
  double a78;
  __int128 a79;
  double a80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  BOOL v93;
  _BOOL4 v94;
  unsigned int v95;
  unint64_t v96;
  int v97;
  uint64_t *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  int32x2_t v106;
  _OWORD *v107;
  uint64_t v108;
  int32x2_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int32 *v113;
  __int32 *v114;
  __int32 *v115;
  uint64_t v116;
  double v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  double v127;
  unsigned int *v128;
  unsigned int *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  float v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  float v140;
  void *v141;
  char v142;
  _QWORD *v143;
  _QWORD *v144;
  double v145;
  _QWORD *v146;
  double v147;
  unint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  _BYTE *v151;
  int64_t v152;
  void *v153;
  unint64_t v154;
  int8x16_t v155;
  float64x2_t v156;
  float64x2_t v158;
  unint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  float *v167;
  float v168;
  float v169;
  uint64_t v170;
  unsigned int v171;
  double v172;
  double v173;
  double v174;
  unint64_t v175;
  _OWORD *v176;
  _QWORD *v177;
  unint64_t v178;
  float64x2_t *v179;
  float64x2_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  double *v184;
  uint64_t v185;
  float64x2_t *v186;
  float64x2_t *v187;
  uint64_t v188;
  char v189;
  double *v190;
  double *v191;
  uint64_t v192;
  _QWORD *v193;
  unint64_t v194;
  float64x2_t *v195;
  unint64_t v196;
  uint64_t v197;
  double *v198;
  double v199;
  double v200;
  float64x2_t v201;
  float64x2_t v202;
  double *v206;
  double v207;
  double v208;
  float64x2_t v209;
  __int128 v210;
  int64x2_t v211;
  _OWORD *v212;
  _QWORD *v213;
  unint64_t v214;
  double v215;
  double v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v224;
  uint64_t v225;
  const char *v226;
  size_t v227;
  unsigned __int8 v228;
  const char *v229;
  size_t v230;
  unint64_t *v231;
  unint64_t v232;
  const char *v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  NSObject *v241;
  unint64_t v242;
  size_t v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  void *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  double v279;
  uint64_t v280;
  void *v281;
  void *v282;
  unint64_t v283;
  unint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  double v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  double v309;
  unsigned int v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  int v314;
  unsigned int v315;
  unint64_t v316;
  unsigned int v317;
  unsigned int v318;
  _DWORD *v319;
  unint64_t v320;
  float v321;
  unsigned int v322;
  unsigned int v323;
  double v324;
  void *v325;
  __int128 v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  unsigned int v332;
  int v333;
  int v334;
  unsigned int v335;
  unint64_t v336;
  unsigned int v337;
  uint64_t v338;
  char v340;
  unint64_t v341;
  double v342;
  double v343;
  unint64_t v344;
  unint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t *v350;
  uint64_t *v351;
  uint64_t v352;
  unint64_t v353;
  unsigned int v354;
  int v355;
  int v356;
  unsigned int v357;
  unint64_t v358;
  uint64_t v359;
  char v361;
  unint64_t v362;
  uint64_t *v363;
  uint64_t *v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t *v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  int v374;
  int v375;
  unint64_t v376;
  int v377;
  int v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _DWORD *v386;
  int v387;
  uint64_t v388;
  unsigned __int8 v389;
  unsigned __int8 v390;
  int v391;
  std::string *v392;
  uint64_t v393;
  unsigned __int8 v394;
  uint64_t *v395;
  uint64_t *v396;
  unint64_t v397;
  uint64_t *v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  float v403;
  float v404;
  float v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  float v409;
  float v410;
  uint64_t *v411;
  uint64_t *v412;
  uint64_t *v413;
  float v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  float v421;
  float v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t *v425;
  float v426;
  float v427;
  float v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  int v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  int v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  unint64_t v446;
  unint64_t v447;
  int v448;
  int v449;
  int v450;
  unint64_t v451;
  uint64_t *v452;
  unint64_t v453;
  uint64_t *v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  float v459;
  float v460;
  float v461;
  uint64_t v462;
  int v463;
  uint64_t v464;
  float v465;
  float v466;
  uint64_t *v467;
  uint64_t *v468;
  uint64_t *v469;
  float v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  float v477;
  float v478;
  uint64_t *v479;
  uint64_t v480;
  uint64_t *v481;
  float v482;
  float v483;
  float v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unint64_t v491;
  int v492;
  unint64_t v493;
  int v494;
  int v495;
  unint64_t v496;
  unint64_t v497;
  int v498;
  unint64_t v499;
  int v500;
  int v501;
  void *v502;
  uint64_t v503;
  unint64_t v504;
  unint64_t v505;
  int v506;
  int v507;
  unint64_t v508;
  int v509;
  int v510;
  int v511;
  int v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  int v517;
  int v518;
  uint64_t v519;
  int v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  uint64_t v524;
  size_t v525;
  const char *v526;
  unsigned __int8 v527;
  const char *v528;
  size_t v529;
  unint64_t *v530;
  const char *v531;
  __int16 v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  unint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  NSObject *v539;
  int v540;
  uint64_t v541;
  size_t v542;
  std::__shared_weak_count_vtbl *v543;
  std::__shared_weak_count *v544;
  std::__shared_weak_count *v545;
  unint64_t *v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  std::__shared_weak_count *v555;
  unint64_t *v556;
  unint64_t v557;
  std::__shared_weak_count *v558;
  unint64_t *v559;
  unint64_t v560;
  uint64_t v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  void *v574;
  unsigned int v575;
  uint64_t v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  int v582;
  __int128 v583;
  uint64_t v584;
  uint64_t *v585;
  unint64_t v586;
  unint64_t v587;
  uint64_t v588;
  _QWORD *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  _QWORD *v593;
  uint64_t v594;
  uint64_t v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  _OWORD *v602;
  __int128 *v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  uint64_t v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v610;
  unint64_t *v611;
  unint64_t v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  std::__shared_weak_count *v622;
  unint64_t *v623;
  unint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  std::__shared_weak_count *v631;
  unint64_t *v632;
  unint64_t v633;
  std::__shared_weak_count *v634;
  unint64_t *v635;
  unint64_t v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  std::__shared_weak_count *v640;
  unint64_t *v641;
  unint64_t v642;
  std::__shared_weak_count *v643;
  unint64_t *v644;
  unint64_t v645;
  std::__shared_weak_count *v646;
  unint64_t *v647;
  unint64_t v648;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  std::__fs::filesystem::path::__string_view v652;
  unint64_t *v653;
  std::basic_string_view<_CharT, _Traits>::size_type v654;
  std::basic_string_view<_CharT, _Traits>::size_type v655;
  unsigned __int8 v656;
  BOOL v657;
  unsigned __int8 v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  _QWORD *v662;
  const char *v663;
  const char *v664;
  size_t v665;
  size_t v666;
  unint64_t *v667;
  uint64_t v668;
  uint64_t v669;
  __int128 v670;
  _QWORD *v671;
  _QWORD *v672;
  _QWORD *v673;
  _QWORD *v674;
  _QWORD *v675;
  _QWORD *v676;
  uint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t *v681;
  unint64_t v682;
  unint64_t v683;
  std::ios_base *v684;
  std::__fs::filesystem::path::__string_view v685;
  unint64_t *v686;
  std::basic_string_view<_CharT, _Traits>::size_type v687;
  std::basic_string_view<_CharT, _Traits>::size_type v688;
  unsigned __int8 v689;
  BOOL v690;
  unsigned __int8 v691;
  uint64_t v692;
  uint64_t v693;
  unint64_t v694;
  _QWORD *v695;
  int32x4_t *v696;
  uint64_t v697;
  int32x4_t v698;
  unint64_t v699;
  uint64_t v700;
  float64x2_t v701;
  unsigned int *v702;
  unsigned int *v703;
  unsigned int *v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v707;
  unint64_t v708;
  unint64_t v709;
  _BYTE *v710;
  int64_t v711;
  unint64_t v712;
  unsigned int *v713;
  unsigned int v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  _OWORD *v718;
  unsigned int *v719;
  uint64_t v720;
  __int128 v721;
  double v722;
  void *v723;
  int64_t v724;
  _QWORD *v725;
  _QWORD *v726;
  uint64_t v727;
  uint64_t i;
  unint64_t v729;
  double v730;
  float v731;
  unsigned int *v732;
  unsigned int *v733;
  unsigned int *v734;
  uint64_t j;
  float *v736;
  float v737;
  float v738;
  float v739;
  unsigned __int8 v740;
  int v741;
  unint64_t v742;
  uint64_t v743;
  char v744;
  uint64_t v745;
  unint64_t v746;
  unint64_t v747;
  _BYTE *v748;
  int64_t v749;
  unint64_t v750;
  unsigned int *v751;
  unsigned int v752;
  unint64_t v753;
  uint64_t v754;
  uint64_t v755;
  _OWORD *v756;
  unsigned int *v757;
  uint64_t v758;
  __int128 v759;
  unint64_t v760;
  double v761;
  float v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  float v768;
  float v769;
  uint64_t v770;
  float v771;
  unint64_t v772;
  uint64_t *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t *v776;
  uint64_t *v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  float v784;
  float v785;
  uint64_t v786;
  float v787;
  unint64_t v788;
  uint64_t *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t *v792;
  uint64_t *v793;
  uint64_t v794;
  uint64_t v795;
  double v796;
  _BOOL4 v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  double *exception;
  double *v806;
  double *v807;
  double *v808;
  uint64_t v809;
  int v810;
  uint64_t v811;
  unsigned int v812;
  int v813;
  double v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t *v817;
  int v818;
  int v819;
  uint64_t v820;
  unint64_t v822;
  int8x16_t v823;
  unsigned int v824;
  unsigned int v825;
  uint64_t v826;
  uint64_t v827;
  unint64_t v828;
  double v829;
  _BYTE *v830;
  uint64_t v831;
  int v832;
  __int32 v833;
  unint64_t v834;
  uint64_t vars8;
  uint64_t vars8a;
  uint64_t vars8b;
  unsigned int vars8c;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  _QWORD *v843;
  __int32 *v844;
  _QWORD *v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;

  STACK[0x1318] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v81 = a3[2];
  v843 = a3;
  if (!*a3)
  {
    v804 = a3[2];
    exception = (double *)__cxa_allocate_exception(0x28uLL);
    *(_DWORD *)exception = 3;
    sub_20EE9BC6C();
    exception[4] = *(double *)(v804 + 112) + *(double *)(v804 + 120);
    __cxa_throw(exception, (struct type_info *)&unk_24C9B3140, (void (*)(void *))sub_20EE89530);
  }
  if (!*(_QWORD *)(v81 + 400)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilter.cpp", 177, (uint64_t)"sample.packed_hwfp", 18, (uint64_t)"Must contain feature points.", 28, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EE9BD2C(v81);
  v82 = *(_QWORD *)(v81 + 400);
  v83 = *(std::__shared_weak_count **)(v81 + 408);
  v848 = v81;
  if (v83)
  {
    p_shared_owners = (unint64_t *)&v83->__shared_owners_;
    do
      v85 = __ldxr(p_shared_owners);
    while (__stxr(v85 + 1, p_shared_owners));
  }
  a72 = &off_24CA1A9A0;
  if (!v82)
  {
    a73 = 0;
    a74 = 0;
    if (!v83)
      goto LABEL_18;
    goto LABEL_14;
  }
  v87 = *(_QWORD *)(v82 + 8);
  v86 = *(std::__shared_weak_count **)(v82 + 16);
  a73 = v87;
  a74 = v86;
  if (v86)
  {
    v88 = (unint64_t *)&v86->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  if (v83)
  {
LABEL_14:
    v90 = (unint64_t *)&v83->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
LABEL_18:
  a70 = sub_20EEB92A8((uint64_t)&a72);
  a71 = v92;
  sub_20EE9BD2C(v81);
  if (!(_BYTE)a71)
  {
    v806 = (double *)__cxa_allocate_exception(0x28uLL);
    *(_DWORD *)v806 = 2;
    sub_20EE9BDEC();
    v806[4] = *(double *)(v848 + 112) + *(double *)(v848 + 120);
    __cxa_throw(v806, (struct type_info *)&unk_24C9B3140, (void (*)(void *))sub_20EE89530);
  }
  sub_20EEB9484((uint64_t)&a72, (uint64_t *)&a70, (uint64_t)&STACK[0xCE0]);
  sub_20EE9BD2C(v81);
  if (!LOBYTE(STACK[0xFA0]))
  {
    v807 = (double *)__cxa_allocate_exception(0x28uLL);
    *(_DWORD *)v807 = 2;
    sub_20EE9BEAC();
    v807[4] = *(double *)(v848 + 112) + *(double *)(v848 + 120);
    __cxa_throw(v807, (struct type_info *)&unk_24C9B3140, (void (*)(void *))sub_20EE89530);
  }
  sub_20EEBBDD0((uint64_t)&STACK[0xCE0], (uint64_t)&a27);
  sub_20EE9BD2C(v81);
  v93 = a68 == 0;
  v94 = a69 == 0;
  if (!a28)
    v93 = 0;
  a26 = v93;
  if (!a28)
    v94 = 0;
  a25 = v94;
  if (v93 || v94)
  {
    v808 = (double *)__cxa_allocate_exception(0x28uLL);
    *(_DWORD *)v808 = 2;
    sub_20EE9BF6C((uint64_t)(v808 + 1), &a26, &a25);
    v808[4] = *(double *)(v848 + 112) + *(double *)(v848 + 120);
    __cxa_throw(v808, (struct type_info *)&unk_24C9B3140, (void (*)(void *))sub_20EE89530);
  }
  v95 = *(_DWORD *)(a2 + 8);
  if (v95 >= a28)
    v96 = a28;
  else
    v96 = v95;
  if (a29 >= a28 - v96)
    v97 = a29 - (a28 - v96);
  else
    v97 = 0;
  v98 = (uint64_t *)(a2 + 272);
  v100 = *(_QWORD *)(a2 + 272);
  v99 = *(_QWORD **)(a2 + 280);
  v101 = ((uint64_t)v99 - v100) >> 3;
  if (v96 <= v101)
  {
    if (v96 < v101)
    {
      v99 = (_QWORD *)(v100 + 8 * v96);
      *(_QWORD *)(a2 + 280) = v99;
    }
  }
  else
  {
    sub_20EAC9ECC(a2 + 272, v96 - v101);
    v100 = *(_QWORD *)(a2 + 272);
    v99 = *(_QWORD **)(a2 + 280);
  }
  if ((_QWORD *)v100 != v99)
  {
    v102 = (unint64_t)v99 - v100 - 8;
    if (v102 < 0x18)
    {
      LODWORD(v103) = 0;
      v104 = (_QWORD *)v100;
      do
      {
LABEL_42:
        *v104++ = v103;
        LODWORD(v103) = v103 + 1;
      }
      while (v104 != v99);
      goto LABEL_43;
    }
    v105 = (v102 >> 3) + 1;
    v103 = v105 & 0x3FFFFFFFFFFFFFFCLL;
    v104 = (_QWORD *)(v100 + 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL));
    v106 = (int32x2_t)0x100000000;
    v107 = (_OWORD *)(v100 + 16);
    v108 = v105 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v109 = vadd_s32(v106, (int32x2_t)0x200000002);
      *(_QWORD *)&v110 = v106.u32[0];
      *((_QWORD *)&v110 + 1) = v106.u32[1];
      v111 = v110;
      *(_QWORD *)&v110 = v109.u32[0];
      *((_QWORD *)&v110 + 1) = v109.u32[1];
      *(v107 - 1) = v111;
      *v107 = v110;
      v106 = vadd_s32(v106, (int32x2_t)0x400000004);
      v107 += 2;
      v108 -= 4;
    }
    while (v108);
    if (v105 != v103)
      goto LABEL_42;
  }
LABEL_43:
  LOBYTE(STACK[0x10D0]) = 1;
  v845 = (_QWORD *)(a2 + 296);
  sub_20EDCA4D0(a2 + 296, v96, &STACK[0x10D0]);
  *(_DWORD *)(a2 + 320) = v96 - v97;
  *(_DWORD *)(a2 + 328) = 0;
  *(_DWORD *)(a2 + 324) = 0;
  *(_BYTE *)(a2 + 332) = 1;
  v822 = a28;
  if (*(_QWORD *)(a2 + 720))
    *(_WORD *)(*v843 + 128) = 256;
  v844 = (__int32 *)(v81 + 392);
  if (!(_DWORD)v96)
    goto LABEL_305;
  v112 = *(_QWORD *)(a2 + 720);
  v819 = v96;
  if (!v112)
    goto LABEL_70;
  v113 = *(__int32 **)(v112 + 56);
  v114 = wmemchr(*(__int32 **)(v112 + 48), *v844, ((uint64_t)v113 - *(_QWORD *)(v112 + 48)) >> 2);
  v115 = v114 ? v114 : v113;
  if (v115 == *(__int32 **)(v112 + 56))
    goto LABEL_70;
  v116 = *(_QWORD *)(a2 + 720);
  vars8 = a68;
  v839 = a28;
  v117 = *(double *)(v848 + 112) + *(double *)(v848 + 120);
  v118 = *(_DWORD *)(v848 + 24);
  v119 = *(_DWORD *)(v848 + 40);
  v120 = *(_DWORD *)(v848 + 344);
  v121 = *(_DWORD *)(v848 + 348);
  v122 = *(_DWORD *)(v848 + 352);
  *(double *)(v116 + 312) = v117;
  if (*(_BYTE *)(v116 + 1) && (!(_BYTE)v122 || !(v121 * v120)))
  {
    v128 = 0;
    v129 = 0;
    v130 = 3;
    goto LABEL_64;
  }
  v123 = *(_QWORD *)(v116 + 168);
  if (v123 - 1 < 0)
  {
LABEL_58:
    v128 = 0;
    v129 = 0;
    v130 = 4;
LABEL_64:
    LODWORD(STACK[0xC58]) = v130;
    STACK[0xC68] = 0;
    STACK[0xC70] = 0;
    STACK[0xC60] = 0;
    LODWORD(STACK[0xC78]) = 0;
    LODWORD(v96) = v819;
    goto LABEL_65;
  }
  v124 = *(_QWORD *)(v116 + 152);
  v125 = *(_QWORD *)(v116 + 128);
  v126 = (*(_QWORD *)(v116 + 136) - v125) >> 5;
  while (1)
  {
    v127 = *(double *)(v125 + 32 * (v124 % v126));
    if (vabdd_f64(v127, v117) <= *(double *)(v116 + 88))
      break;
    ++v124;
    if (!--v123)
      goto LABEL_58;
  }
  if (!(_DWORD)v839)
  {
    v128 = 0;
    v129 = 0;
    v130 = 5;
    goto LABEL_64;
  }
  v131 = v125 + 32 * (v124 % v126);
  v823 = *(int8x16_t *)(v131 + 8);
  v829 = *(double *)(v131 + 24);
  *(_QWORD *)&v814 = vextq_s8(v823, v823, 8uLL).u64[0];
  if (*(char *)(v116 + 119) < 0)
    v132 = *(_QWORD *)(v116 + 104);
  else
    v132 = *(unsigned __int8 *)(v116 + 119);
  if (!v132)
    goto LABEL_932;
  v389 = atomic_load((unsigned __int8 *)&qword_254A5FAA0);
  if ((v389 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FAA0))
    __cxa_guard_release(&qword_254A5FAA0);
  v810 = v119;
  v812 = v118;
  v390 = atomic_load((unsigned __int8 *)&qword_254A5FAA8);
  if ((v390 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FAA8))
  {
    sub_20EE9FFDC(qword_254A5FDD8);
    __cxa_atexit((void (*)(void *))sub_20EEA00A4, qword_254A5FDD8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5FAA8);
  }
  ++qword_254A5FA98;
  a79 = 0uLL;
  a80 = 0.0;
  v391 = *(char *)(v116 + 119);
  if (v391 >= 0)
    v392 = (std::string *)(v116 + 96);
  else
    v392 = *(std::string **)(v116 + 96);
  v393 = *(_QWORD *)(v116 + 104);
  if (v391 >= 0)
    v393 = *(unsigned __int8 *)(v116 + 119);
  sub_20E8A9678((std::string *)&a79, v392, (std::string *)((char *)v392 + v393));
  v394 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v394 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  sub_210212AD8((uint64_t)&a79, (uint64_t)&off_254A5A4B8, (uint64_t)&STACK[0xCC8]);
  if (SLOBYTE(STACK[0xCDF]) < 0)
    operator delete((void *)STACK[0xCC8]);
  if (!byte_254A5FB98)
  {
    STACK[0x10D0] = 0;
    STACK[0x10D8] = 0;
    STACK[0x10E0] = 0;
    sub_20E8A9678((std::string *)&STACK[0x10D0], (std::string *)"detect_metadata.csv", (std::string *)"");
    if (SHIBYTE(a80) < 0)
    {
      sub_20E860C04(&STACK[0xFF0], (void *)a79, *((unint64_t *)&a79 + 1));
    }
    else
    {
      *(_OWORD *)&STACK[0xFF0] = a79;
      *(double *)&STACK[0x1000] = a80;
    }
    sub_20E8A944C((uint64_t)&STACK[0xFF0], (std::__fs::filesystem::path *)&STACK[0x10D0]);
    if (SLOBYTE(STACK[0x10E7]) < 0)
      operator delete((void *)STACK[0x10D0]);
    v652 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)&STACK[0xFF0]);
    if (v652.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v652.__size_ >= 0x17)
    {
      v654 = (v652.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v652.__size_ | 7) != 0x17)
        v654 = v652.__size_ | 7;
      v655 = v654 + 1;
      v653 = (unint64_t *)operator new(v654 + 1);
      STACK[0x10D8] = v652.__size_;
      STACK[0x10E0] = v655 | 0x8000000000000000;
      STACK[0x10D0] = (unint64_t)v653;
    }
    else
    {
      LOBYTE(STACK[0x10E7]) = v652.__size_;
      v653 = &STACK[0x10D0];
      if (!v652.__size_)
        goto LABEL_856;
    }
    memmove(v653, v652.__data_, v652.__size_);
LABEL_856:
    *((_BYTE *)v653 + v652.__size_) = 0;
    *(_OWORD *)&STACK[0xC80] = *(_OWORD *)&STACK[0x10D0];
    STACK[0xC90] = STACK[0x10E0];
    v656 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
    if ((v656 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
    {
      __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE08);
    }
    v657 = ((BOOL (*)(int, std::__fs::filesystem::path *))off_254A5A4B8[22])((int)&off_254A5A4B8, (std::__fs::filesystem::path *)&STACK[0xC80]);
    if (SLOBYTE(STACK[0xC97]) < 0)
      operator delete((void *)STACK[0xC80]);
    if (!v657
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/StaticFeatureDetector.hpp", 200, (uint64_t)"fs::exists(metadata_file_path.parent_path())", 44, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    std::ofstream::open();
    if (byte_254A5FB98)
      byte_254A5FB98 = 0;
    STACK[0x10D0] = 0x400000002;
    sub_20E9E9588((uint64_t)&qword_254A5FB60, (uint64_t *)&STACK[0x10D0], (uint64_t)qword_254A5FDD8, 0, 0, 0);
    qword_254A5FB60 = (uint64_t)&off_24C9EF688;
    qword_254A5FB70 = (uint64_t)&unk_24C9EF7D8;
    byte_254A5FB98 = 1;
    v658 = atomic_load((unsigned __int8 *)&qword_254A5FAB0);
    if ((v658 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5FAB0))
      goto LABEL_864;
    sub_20E8610C0(&STACK[0x10D0], "output_id");
    sub_20E8610C0(&STACK[0x10E8], "gyro_timestamp");
    sub_20E8610C0(&STACK[0x1100], "curr_timestamp");
    sub_20E8610C0(&STACK[0x1118], "gyro_x");
    sub_20E8610C0(&STACK[0x1130], "gyro_y");
    sub_20E8610C0(&STACK[0x1148], "gyro_z");
    sub_20E8610C0(&STACK[0x1160], "illuminator_status");
    sub_20E877C80(&qword_254A5FAF0, (uint64_t)&STACK[0x10D0], 7uLL);
    if (SLOBYTE(STACK[0x1177]) < 0)
    {
      operator delete((void *)STACK[0x1160]);
      if ((SLOBYTE(STACK[0x115F]) & 0x80000000) == 0)
      {
LABEL_1161:
        if ((SLOBYTE(STACK[0x1147]) & 0x80000000) == 0)
          goto LABEL_1162;
        goto LABEL_1179;
      }
    }
    else if ((SLOBYTE(STACK[0x115F]) & 0x80000000) == 0)
    {
      goto LABEL_1161;
    }
    operator delete((void *)STACK[0x1148]);
    if ((SLOBYTE(STACK[0x1147]) & 0x80000000) == 0)
    {
LABEL_1162:
      if ((SLOBYTE(STACK[0x112F]) & 0x80000000) == 0)
        goto LABEL_1163;
      goto LABEL_1180;
    }
LABEL_1179:
    operator delete((void *)STACK[0x1130]);
    if ((SLOBYTE(STACK[0x112F]) & 0x80000000) == 0)
    {
LABEL_1163:
      if ((SLOBYTE(STACK[0x1117]) & 0x80000000) == 0)
        goto LABEL_1164;
      goto LABEL_1181;
    }
LABEL_1180:
    operator delete((void *)STACK[0x1118]);
    if ((SLOBYTE(STACK[0x1117]) & 0x80000000) == 0)
    {
LABEL_1164:
      if ((SLOBYTE(STACK[0x10FF]) & 0x80000000) == 0)
        goto LABEL_1165;
      goto LABEL_1182;
    }
LABEL_1181:
    operator delete((void *)STACK[0x1100]);
    if ((SLOBYTE(STACK[0x10FF]) & 0x80000000) == 0)
    {
LABEL_1165:
      if ((SLOBYTE(STACK[0x10E7]) & 0x80000000) == 0)
      {
LABEL_1166:
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A5FAF0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5FAB0);
LABEL_864:
        v659 = qword_254A5FAF0;
        if (unk_254A5FAF8 != qword_254A5FAF0)
        {
          v660 = 24 * ((unk_254A5FAF8 - qword_254A5FAF0) / 24);
          do
          {
            sub_20E9E713C((uint64_t)&qword_254A5FB60, v659);
            v659 += 24;
            v660 -= 24;
          }
          while (v660);
        }
        v661 = qword_254A5FB88;
        qword_254A5FB88 = 0;
        unk_254A5FB90 = v661;
        v662 = (_QWORD *)qword_254A5FB78;
        LOBYTE(STACK[0x10D0]) = byte_254A5FB81;
        sub_20E86A980(v662, (uint64_t)&STACK[0x10D0], 1);
        if (SLOBYTE(STACK[0x1007]) < 0)
          operator delete((void *)STACK[0xFF0]);
        goto LABEL_869;
      }
LABEL_1183:
      operator delete((void *)STACK[0x10D0]);
      goto LABEL_1166;
    }
LABEL_1182:
    operator delete((void *)STACK[0x10E8]);
    if ((SLOBYTE(STACK[0x10E7]) & 0x80000000) == 0)
      goto LABEL_1166;
    goto LABEL_1183;
  }
LABEL_869:
  if (v121 * v120)
    v663 = "on";
  else
    v663 = "off";
  if ((_BYTE)v122)
    v664 = v663;
  else
    v664 = "n/a";
  v665 = strlen(v664);
  if (v665 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v666 = v665;
  if (v665 >= 0x17)
  {
    v668 = (v665 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v665 | 7) != 0x17)
      v668 = v665 | 7;
    v669 = v668 + 1;
    v667 = (unint64_t *)operator new(v668 + 1);
    STACK[0xC48] = v666;
    STACK[0xC50] = v669 | 0x8000000000000000;
    STACK[0xC40] = (unint64_t)v667;
    goto LABEL_882;
  }
  LOBYTE(STACK[0xC57]) = v665;
  v667 = &STACK[0xC40];
  if (v665)
LABEL_882:
    memcpy(v667, v664, v666);
  *((_BYTE *)v667 + v666) = 0;
  STACK[0x10D0] = qword_254A5FA98;
  *(_QWORD *)&v670 = v823.i64[0];
  *((double *)&v670 + 1) = v814;
  *(double *)&STACK[0x10D8] = v127;
  *(double *)&STACK[0x10E0] = v117;
  *(_OWORD *)&STACK[0x10E8] = v670;
  *(double *)&STACK[0x10F8] = v829;
  if (SLOBYTE(STACK[0xC57]) < 0)
  {
    sub_20E860C04(&STACK[0x1100], (void *)STACK[0xC40], STACK[0xC48]);
  }
  else
  {
    *(_OWORD *)&STACK[0x1100] = *(_OWORD *)&STACK[0xC40];
    STACK[0x1110] = STACK[0xC50];
  }
  if (qword_254A5FB88)
  {
    v671 = (_QWORD *)qword_254A5FB78;
    LOBYTE(STACK[0xFF0]) = byte_254A5FB80;
    sub_20E86A980(v671, (uint64_t)&STACK[0xFF0], 1);
  }
  std::ostream::operator<<();
  _CF = __CFADD__(qword_254A5FB88++, 1);
  if (!_CF)
  {
    v672 = (_QWORD *)qword_254A5FB78;
    LOBYTE(STACK[0xFF0]) = byte_254A5FB80;
    sub_20E86A980(v672, (uint64_t)&STACK[0xFF0], 1);
  }
  *(_QWORD *)(qword_254A5FB78 + *(_QWORD *)(*(_QWORD *)qword_254A5FB78 - 24) + 16) = 17;
  std::ostream::operator<<();
  _CF = __CFADD__(qword_254A5FB88++, 1);
  if (!_CF)
  {
    v673 = (_QWORD *)qword_254A5FB78;
    LOBYTE(STACK[0xFF0]) = byte_254A5FB80;
    sub_20E86A980(v673, (uint64_t)&STACK[0xFF0], 1);
  }
  *(_QWORD *)(qword_254A5FB78 + *(_QWORD *)(*(_QWORD *)qword_254A5FB78 - 24) + 16) = 17;
  std::ostream::operator<<();
  _CF = __CFADD__(qword_254A5FB88++, 1);
  if (!_CF)
  {
    v674 = (_QWORD *)qword_254A5FB78;
    LOBYTE(STACK[0xFF0]) = byte_254A5FB80;
    sub_20E86A980(v674, (uint64_t)&STACK[0xFF0], 1);
  }
  *(_QWORD *)(qword_254A5FB78 + *(_QWORD *)(*(_QWORD *)qword_254A5FB78 - 24) + 16) = 17;
  std::ostream::operator<<();
  _CF = __CFADD__(qword_254A5FB88++, 1);
  if (!_CF)
  {
    v675 = (_QWORD *)qword_254A5FB78;
    LOBYTE(STACK[0xFF0]) = byte_254A5FB80;
    sub_20E86A980(v675, (uint64_t)&STACK[0xFF0], 1);
  }
  *(_QWORD *)(qword_254A5FB78 + *(_QWORD *)(*(_QWORD *)qword_254A5FB78 - 24) + 16) = 17;
  std::ostream::operator<<();
  _CF = __CFADD__(qword_254A5FB88++, 1);
  if (!_CF)
  {
    v676 = (_QWORD *)qword_254A5FB78;
    LOBYTE(STACK[0xFF0]) = byte_254A5FB80;
    sub_20E86A980(v676, (uint64_t)&STACK[0xFF0], 1);
  }
  *(_QWORD *)(qword_254A5FB78 + *(_QWORD *)(*(_QWORD *)qword_254A5FB78 - 24) + 16) = 17;
  std::ostream::operator<<();
  ++qword_254A5FB88;
  sub_20E9E713C((uint64_t)&qword_254A5FB60, (uint64_t)&STACK[0x1100]);
  v677 = qword_254A5FB88;
  qword_254A5FB88 = 0;
  unk_254A5FB90 = v677;
  v678 = (_QWORD *)qword_254A5FB78;
  LOBYTE(STACK[0xFF0]) = byte_254A5FB81;
  sub_20E86A980(v678, (uint64_t)&STACK[0xFF0], 1);
  if (SLOBYTE(STACK[0x1117]) < 0)
    operator delete((void *)STACK[0x1100]);
  sub_20EEA064C((char **)&STACK[0x10D0]);
  STACK[0xFF0] = (unint64_t)&qword_254A5FA98;
  STACK[0xFF8] = (unint64_t)nullsub_536;
  STACK[0x1000] = (unint64_t)sub_20EEA4AD0;
  sub_20EEA3208((uint64_t *)&STACK[0x10D0], &STACK[0xFF0]);
  sub_20EEA00FC((std::string *)&a75, (uint64_t *)&STACK[0x10D0]);
  *(float64x2_t *)&STACK[0xC80] = a75;
  STACK[0xC90] = a76;
  a76 = 0;
  a75 = 0uLL;
  if (SHIBYTE(a80) < 0)
  {
    sub_20E860C04(&a77, (void *)a79, *((unint64_t *)&a79 + 1));
  }
  else
  {
    a77 = a79;
    a78 = a80;
  }
  sub_20E8A944C((uint64_t)&a77, (std::__fs::filesystem::path *)&STACK[0xC80]);
  if (SLOBYTE(STACK[0xC97]) < 0)
    operator delete((void *)STACK[0xC80]);
  if (SHIBYTE(a76) < 0)
    operator delete(*(void **)&a75.f64[0]);
  sub_20EEA4FD8((uint64_t)&STACK[0x10D0]);
  v679 = MEMORY[0x24BEDB840];
  v680 = MEMORY[0x24BEDB840] + 64;
  STACK[0x1270] = MEMORY[0x24BEDB840] + 64;
  v681 = (unint64_t *)MEMORY[0x24BEDB7E8];
  v682 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v683 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  STACK[0x10D0] = v682;
  *(unint64_t *)((char *)&STACK[0x10D0] + *(_QWORD *)(v682 - 24)) = v683;
  v684 = (std::ios_base *)((char *)&STACK[0x10D0] + *(_QWORD *)(STACK[0x10D0] - 24));
  std::ios_base::init(v684, &STACK[0x10D8]);
  v684[1].__vftable = 0;
  v684[1].__fmtflags_ = -1;
  STACK[0x10D0] = v679 + 24;
  STACK[0x1270] = v680;
  MEMORY[0x212BC5B40](&STACK[0x10D8]);
  v685 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)&a77);
  if (v685.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v685.__size_ >= 0x17)
  {
    v687 = (v685.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v685.__size_ | 7) != 0x17)
      v687 = v685.__size_ | 7;
    v688 = v687 + 1;
    v686 = (unint64_t *)operator new(v687 + 1);
    STACK[0xFF0] = (unint64_t)v686;
    STACK[0x1000] = v688 | 0x8000000000000000;
    STACK[0xFF8] = v685.__size_;
  }
  else
  {
    LOBYTE(STACK[0x1007]) = v685.__size_;
    v686 = &STACK[0xFF0];
    if (!v685.__size_)
      goto LABEL_915;
  }
  memmove(v686, v685.__data_, v685.__size_);
LABEL_915:
  *((_BYTE *)v686 + v685.__size_) = 0;
  *(_OWORD *)&STACK[0xC80] = *(_OWORD *)&STACK[0xFF0];
  STACK[0xC90] = STACK[0x1000];
  v689 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v689 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  v690 = ((BOOL (*)(int, std::__fs::filesystem::path *))off_254A5A4B8[22])((int)&off_254A5A4B8, (std::__fs::filesystem::path *)&STACK[0xC80]);
  if (SLOBYTE(STACK[0xC97]) < 0)
    operator delete((void *)STACK[0xC80]);
  if (!v690
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/StaticFeatureDetector.hpp", 222, (uint64_t)"fs::exists(filename.parent_path())", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  std::ofstream::open();
  STACK[0xFF0] = 0x400000002;
  sub_20E9E9588((uint64_t)&STACK[0xC80], (uint64_t *)&STACK[0xFF0], (uint64_t)&STACK[0x10D0], 0, 0, 0);
  STACK[0xC80] = (unint64_t)&off_24C9EF688;
  STACK[0xC90] = (unint64_t)&unk_24C9EF7D8;
  v691 = atomic_load((unsigned __int8 *)&qword_254A5FAB8);
  if ((v691 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FAB8))
  {
    sub_20E8610C0(&STACK[0xFF0], "output_id");
    sub_20E8610C0(&STACK[0x1008], "timestamp");
    sub_20E8610C0(&STACK[0x1020], "camera_id");
    sub_20E8610C0(&STACK[0x1038], "camera_stream");
    sub_20E8610C0(&STACK[0x1050], "x_orig");
    sub_20E8610C0(&STACK[0x1068], "y_orig");
    sub_20E8610C0(&STACK[0x1080], "scale");
    sub_20E8610C0(&STACK[0x1098], "orientation");
    sub_20E8610C0(&STACK[0x10B0], "laplacian_score");
    sub_20E877C80(&qword_254A5FB08, (uint64_t)&STACK[0xFF0], 9uLL);
    if (SLOBYTE(STACK[0x10C7]) < 0)
    {
      operator delete((void *)STACK[0x10B0]);
      if ((SLOBYTE(STACK[0x10AF]) & 0x80000000) == 0)
      {
LABEL_1146:
        if ((SLOBYTE(STACK[0x1097]) & 0x80000000) == 0)
          goto LABEL_1147;
        goto LABEL_1169;
      }
    }
    else if ((SLOBYTE(STACK[0x10AF]) & 0x80000000) == 0)
    {
      goto LABEL_1146;
    }
    operator delete((void *)STACK[0x1098]);
    if ((SLOBYTE(STACK[0x1097]) & 0x80000000) == 0)
    {
LABEL_1147:
      if ((SLOBYTE(STACK[0x107F]) & 0x80000000) == 0)
        goto LABEL_1148;
      goto LABEL_1170;
    }
LABEL_1169:
    operator delete((void *)STACK[0x1080]);
    if ((SLOBYTE(STACK[0x107F]) & 0x80000000) == 0)
    {
LABEL_1148:
      if ((SLOBYTE(STACK[0x1067]) & 0x80000000) == 0)
        goto LABEL_1149;
      goto LABEL_1171;
    }
LABEL_1170:
    operator delete((void *)STACK[0x1068]);
    if ((SLOBYTE(STACK[0x1067]) & 0x80000000) == 0)
    {
LABEL_1149:
      if ((SLOBYTE(STACK[0x104F]) & 0x80000000) == 0)
        goto LABEL_1150;
      goto LABEL_1172;
    }
LABEL_1171:
    operator delete((void *)STACK[0x1050]);
    if ((SLOBYTE(STACK[0x104F]) & 0x80000000) == 0)
    {
LABEL_1150:
      if ((SLOBYTE(STACK[0x1037]) & 0x80000000) == 0)
        goto LABEL_1151;
      goto LABEL_1173;
    }
LABEL_1172:
    operator delete((void *)STACK[0x1038]);
    if ((SLOBYTE(STACK[0x1037]) & 0x80000000) == 0)
    {
LABEL_1151:
      if ((SLOBYTE(STACK[0x101F]) & 0x80000000) == 0)
        goto LABEL_1152;
      goto LABEL_1174;
    }
LABEL_1173:
    operator delete((void *)STACK[0x1020]);
    if ((SLOBYTE(STACK[0x101F]) & 0x80000000) == 0)
    {
LABEL_1152:
      if ((SLOBYTE(STACK[0x1007]) & 0x80000000) == 0)
      {
LABEL_1153:
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A5FB08, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5FAB8);
        goto LABEL_921;
      }
LABEL_1175:
      operator delete((void *)STACK[0xFF0]);
      goto LABEL_1153;
    }
LABEL_1174:
    operator delete((void *)STACK[0x1008]);
    if ((SLOBYTE(STACK[0x1007]) & 0x80000000) == 0)
      goto LABEL_1153;
    goto LABEL_1175;
  }
LABEL_921:
  v692 = qword_254A5FB08;
  if (*(_QWORD *)algn_254A5FB10 != qword_254A5FB08)
  {
    v693 = 24 * ((*(_QWORD *)algn_254A5FB10 - qword_254A5FB08) / 24);
    do
    {
      sub_20E9E713C((uint64_t)&STACK[0xC80], v692);
      v692 += 24;
      v693 -= 24;
    }
    while (v693);
  }
  v694 = STACK[0xCA8];
  STACK[0xCA8] = 0;
  STACK[0xCB0] = v694;
  v695 = (_QWORD *)STACK[0xC98];
  LOBYTE(STACK[0xFF0]) = STACK[0xCA1];
  sub_20E86A980(v695, (uint64_t)&STACK[0xFF0], 1);
  v696 = (int32x4_t *)vars8;
  v697 = v839;
  do
  {
    STACK[0xFF0] = qword_254A5FA98;
    *(double *)&STACK[0xFF8] = v117;
    STACK[0x1000] = *(_QWORD *)v844;
    v698 = vrev64q_s32(*v696);
    v698.i64[0] = v696->i64[0];
    *(int32x4_t *)&STACK[0x1008] = v698;
    LODWORD(STACK[0x1018]) = v696[1].i32[1];
    sub_20EEA03B8((uint64_t)&STACK[0xC80]);
    v696 = (int32x4_t *)((char *)v696 + 24);
    --v697;
  }
  while (v697);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&STACK[0x10D0] + *(_QWORD *)(STACK[0x10D0] - 24)), *(_DWORD *)((char *)&STACK[0x10D0] + *(_QWORD *)(STACK[0x10D0] - 24) + 32) | 4);
  v699 = *v681;
  STACK[0x10D0] = *v681;
  *(unint64_t *)((char *)&STACK[0x10D0] + *(_QWORD *)(v699 - 24)) = v681[3];
  MEMORY[0x212BC5B4C](&STACK[0x10D8]);
  std::ostream::~ostream();
  MEMORY[0x212BC6290](&STACK[0x1270]);
  if ((SHIBYTE(a78) & 0x80000000) == 0)
  {
    if ((SLOBYTE(STACK[0xC57]) & 0x80000000) == 0)
      goto LABEL_930;
LABEL_988:
    operator delete((void *)STACK[0xC40]);
    if ((SHIBYTE(a80) & 0x80000000) == 0)
      goto LABEL_931;
LABEL_989:
    operator delete((void *)a79);
    goto LABEL_931;
  }
  operator delete((void *)a77);
  if (SLOBYTE(STACK[0xC57]) < 0)
    goto LABEL_988;
LABEL_930:
  if (SHIBYTE(a80) < 0)
    goto LABEL_989;
LABEL_931:
  v118 = v812;
  v119 = v810;
LABEL_932:
  sub_20FD8AAF4((_QWORD *)v116, v118, v119);
  LODWORD(v96) = v819;
  v700 = vars8;
  *(_QWORD *)&v701.f64[0] = v823.i64[0];
  v701.f64[1] = v814;
  if (vmulq_f64(v701, v701).f64[0] + v814 * v814 + v829 * v829 < *(double *)(v116 + 184))
  {
    if (!*(_BYTE *)(v116 + 2))
    {
      v128 = 0;
      v129 = 0;
      LODWORD(STACK[0xC58]) = 2;
      STACK[0xC68] = 0;
      STACK[0xC70] = 0;
      STACK[0xC60] = 0;
      LODWORD(STACK[0xC78]) = 0;
      goto LABEL_65;
    }
    v129 = 0;
    v128 = 0;
    v702 = 0;
    v703 = 0;
    v704 = 0;
    v705 = 0;
    LODWORD(STACK[0xC58]) = 0;
    v816 = 0;
    STACK[0xC68] = 0;
    STACK[0xC70] = 0;
    STACK[0xC60] = 0;
    LODWORD(STACK[0xC78]) = 0;
    v834 = *(_QWORD *)(v116 + 200) - *(_QWORD *)(v116 + 192);
    v827 = *(_QWORD *)(v116 + 296);
    while (1)
    {
      v706 = (unint64_t)(float)(*(float *)(v700 + 24 * v705) * *(float *)(v116 + 176))
           + v827 * (unint64_t)(float)(*(float *)(v116 + 176) * *(float *)(v700 + 24 * v705 + 4));
      if (v706 >= v834
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/StaticFeatureDetector.hpp", 157, (uint64_t)"lut_idx < lut_size", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        STACK[0xC60] = (unint64_t)v128;
        STACK[0xC70] = v816;
        abort();
      }
      if (!sub_20EEA511C((_QWORD *)v116, v706))
        goto LABEL_936;
      if (v704 >= v703)
        break;
      *v704++ = v705;
      v129 = v704;
LABEL_936:
      if (++v705 == v839)
      {
        STACK[0xC60] = (unint64_t)v128;
        STACK[0xC68] = (unint64_t)v129;
        STACK[0xC70] = v816;
        v729 = *(_QWORD *)(v116 + 240);
        if (v729 <= *(_QWORD *)(v116 + 280))
          v729 = *(_QWORD *)(v116 + 280);
        v730 = (double)v729 / (double)(2 * *(_DWORD *)(v116 + 36));
        if (v730 > 1.0)
          v730 = 1.0;
        v731 = v730;
        *(float *)&STACK[0xC78] = v731;
        LODWORD(STACK[0xC58]) = v731 >= 0.5;
        goto LABEL_65;
      }
    }
    v707 = v704 - v702;
    v708 = v707 + 1;
    if ((unint64_t)(v707 + 1) >> 62)
    {
      STACK[0xC60] = (unint64_t)v128;
      STACK[0xC68] = (unint64_t)v129;
      STACK[0xC70] = v816;
      sub_20E867F44();
    }
    if (((char *)v703 - (char *)v702) >> 1 > v708)
      v708 = ((char *)v703 - (char *)v702) >> 1;
    if ((unint64_t)((char *)v703 - (char *)v702) >= 0x7FFFFFFFFFFFFFFCLL)
      v709 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v709 = v708;
    if (v709)
    {
      if (v709 >> 62)
      {
        STACK[0xC60] = (unint64_t)v128;
        STACK[0xC70] = v816;
        sub_20E877A38();
      }
      v710 = operator new(4 * v709);
      v128 = (unsigned int *)&v710[4 * v707];
      *v128 = v705;
      v129 = v128 + 1;
      v711 = (char *)v704 - (char *)v702;
      if (v704 != v702)
      {
LABEL_950:
        v712 = v711 - 4;
        if (v712 < 0xBC
          || (v715 = ((char *)(v704 - 1) - (char *)v702) & 0xFFFFFFFFFFFFFFFCLL,
              &v710[(char *)v704 - (char *)v702 - 4 - v715] > &v710[(char *)v704 - (char *)v702 - 4])
          || (unsigned int *)((char *)v704 - v715 - 4) > v704 - 1
          || (unint64_t)((char *)v702 - v710) < 0x20)
        {
          v713 = v704;
          LODWORD(v96) = v819;
          v700 = vars8;
        }
        else
        {
          v716 = (v712 >> 2) + 1;
          v717 = 4 * (v716 & 0x7FFFFFFFFFFFFFF8);
          v713 = &v704[v717 / 0xFFFFFFFFFFFFFFFCLL];
          v128 = (unsigned int *)((char *)v128 - v717);
          v718 = &v710[4 * v707 - 16];
          v719 = v704 - 4;
          v720 = v716 & 0x7FFFFFFFFFFFFFF8;
          v700 = vars8;
          do
          {
            v721 = *(_OWORD *)v719;
            *(v718 - 1) = *((_OWORD *)v719 - 1);
            *v718 = v721;
            v718 -= 2;
            v719 -= 8;
            v720 -= 8;
          }
          while (v720);
          LODWORD(v96) = v819;
          if (v716 == (v716 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_953:
            v703 = (unsigned int *)&v710[4 * v709];
            v816 = (unint64_t)v703;
            if (!v702)
            {
LABEL_955:
              v702 = v128;
              v704 = v129;
              goto LABEL_936;
            }
LABEL_954:
            operator delete(v702);
            goto LABEL_955;
          }
        }
        do
        {
          v714 = *--v713;
          *--v128 = v714;
        }
        while (v713 != v702);
        goto LABEL_953;
      }
    }
    else
    {
      v710 = 0;
      v128 = (unsigned int *)(4 * v707);
      *(_DWORD *)(4 * v707) = v705;
      v129 = (unsigned int *)(4 * v707 + 4);
      v711 = (char *)v704 - (char *)v702;
      if (v704 != v702)
        goto LABEL_950;
    }
    LODWORD(v96) = v819;
    v700 = vars8;
    v703 = (unsigned int *)&v710[4 * v709];
    v816 = (unint64_t)v703;
    if (!v702)
      goto LABEL_955;
    goto LABEL_954;
  }
  LODWORD(STACK[0xC58]) = 0;
  STACK[0xC68] = 0;
  STACK[0xC70] = 0;
  STACK[0xC60] = 0;
  LODWORD(STACK[0xC78]) = 0;
  v722 = *(double *)(v116 + 320);
  if (v722 < 0.0)
  {
    *(double *)(v116 + 320) = v117;
    v722 = v117;
  }
  if (*(_QWORD *)(v116 + 304) <= (unint64_t)*(unsigned int *)(v116 + 16) && v117 - v722 <= *(double *)(v116 + 8))
  {
    v828 = 0;
    v129 = 0;
    v128 = 0;
  }
  else
  {
    if (*(_BYTE *)(v116 + 120))
      sub_20FD8A7EC(v116);
    v723 = *(void **)(v116 + 192);
    v724 = *(_QWORD *)(v116 + 200) - (_QWORD)v723;
    if (v724 >= 1)
      bzero(v723, v724);
    sub_20FD8ABE8(v116 + 256, v116 + 216);
    if (*(_QWORD *)(v116 + 280))
    {
      v725 = *(_QWORD **)(v116 + 272);
      if (v725)
      {
        do
        {
          v726 = (_QWORD *)*v725;
          operator delete(v725);
          v725 = v726;
        }
        while (v726);
      }
      *(_QWORD *)(v116 + 272) = 0;
      v727 = *(_QWORD *)(v116 + 264);
      if (v727)
      {
        for (i = 0; i != v727; ++i)
          *(_QWORD *)(*(_QWORD *)(v116 + 256) + 8 * i) = 0;
      }
      *(_QWORD *)(v116 + 280) = 0;
    }
    *(_QWORD *)(v116 + 304) = 0;
    *(double *)(v116 + 320) = v117;
    v128 = (unsigned int *)STACK[0xC60];
    v129 = (unsigned int *)STACK[0xC68];
    v828 = STACK[0xC70];
  }
  v732 = 0;
  v733 = 0;
  v734 = 0;
  for (j = 0; j != v839; ++j)
  {
    v736 = (float *)(v700 + 24 * j);
    v737 = *(float *)(v116 + 176);
    v738 = *v736 * v737;
    v739 = v737 * v736[1];
    if (*(_BYTE *)(v116 + 3))
    {
      v740 = sub_20FD89C84(v116, llroundf(v738), llroundf(v739));
      LODWORD(v742) = v741;
      if (*(_DWORD *)(v116 + 32) <= v740)
        goto LABEL_1002;
    }
    else
    {
      v742 = (unint64_t)v738 + *(_QWORD *)(v116 + 296) * (unint64_t)v739;
      v743 = *(_QWORD *)(v116 + 192);
      if (v742 >= *(_QWORD *)(v116 + 200) - v743)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/StaticFeatureDetector.cpp", 57, (uint64_t)"lut_idx < occurance_count_lut_.size()", 37, (uint64_t)&unk_2102C52DE, 0, (void (*)(void **))sub_21023DDB0))
        {
          STACK[0xC60] = (unint64_t)v128;
          STACK[0xC70] = v828;
          abort();
        }
        v743 = *(_QWORD *)(v116 + 192);
      }
      v744 = *(_BYTE *)(v743 + v742);
      *(_BYTE *)(v743 + v742) = v744 + 1;
      if (*(_DWORD *)(v116 + 32) <= (v744 + 1))
      {
LABEL_1002:
        LODWORD(STACK[0x10D0]) = v742;
        sub_20EEA52F4(v116 + 256, (unsigned int *)&STACK[0x10D0], &STACK[0x10D0]);
      }
    }
    if (!sub_20EEA511C((_QWORD *)v116, v742))
      continue;
    if (v734 < v733)
    {
      *v734++ = j;
      v129 = v734;
      continue;
    }
    v745 = v734 - v732;
    v746 = v745 + 1;
    if ((unint64_t)(v745 + 1) >> 62)
    {
      STACK[0xC60] = (unint64_t)v128;
      STACK[0xC68] = (unint64_t)v129;
      STACK[0xC70] = v828;
      sub_20E867F44();
    }
    if (((char *)v733 - (char *)v732) >> 1 > v746)
      v746 = ((char *)v733 - (char *)v732) >> 1;
    if ((unint64_t)((char *)v733 - (char *)v732) >= 0x7FFFFFFFFFFFFFFCLL)
      v747 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v747 = v746;
    if (v747)
    {
      if (v747 >> 62)
      {
        STACK[0xC60] = (unint64_t)v128;
        STACK[0xC68] = (unint64_t)v129;
        STACK[0xC70] = v828;
        sub_20E877A38();
      }
      v748 = operator new(4 * v747);
      v128 = (unsigned int *)&v748[4 * v745];
      *v128 = j;
      v129 = v128 + 1;
      v749 = (char *)v734 - (char *)v732;
      if (v734 == v732)
      {
LABEL_1021:
        LODWORD(v96) = v819;
        v700 = vars8;
        v733 = (unsigned int *)&v748[4 * v747];
        v828 = (unint64_t)v733;
        if (!v732)
          goto LABEL_1019;
LABEL_1018:
        operator delete(v732);
        goto LABEL_1019;
      }
    }
    else
    {
      v748 = 0;
      v128 = (unsigned int *)(4 * v745);
      *(_DWORD *)(4 * v745) = j;
      v129 = (unsigned int *)(4 * v745 + 4);
      v749 = (char *)v734 - (char *)v732;
      if (v734 == v732)
        goto LABEL_1021;
    }
    v750 = v749 - 4;
    if (v750 < 0xBC
      || (v753 = ((char *)(v734 - 1) - (char *)v732) & 0xFFFFFFFFFFFFFFFCLL,
          &v748[(char *)v734 - (char *)v732 - 4 - v753] > &v748[(char *)v734 - (char *)v732 - 4])
      || (unsigned int *)((char *)v734 - v753 - 4) > v734 - 1
      || (unint64_t)((char *)v732 - v748) < 0x20)
    {
      v751 = v734;
      LODWORD(v96) = v819;
      v700 = vars8;
      do
      {
LABEL_1016:
        v752 = *--v751;
        *--v128 = v752;
      }
      while (v751 != v732);
      goto LABEL_1017;
    }
    v754 = (v750 >> 2) + 1;
    v755 = 4 * (v754 & 0x7FFFFFFFFFFFFFF8);
    v751 = &v734[v755 / 0xFFFFFFFFFFFFFFFCLL];
    v128 = (unsigned int *)((char *)v128 - v755);
    v756 = &v748[4 * v745 - 16];
    v757 = v734 - 4;
    v758 = v754 & 0x7FFFFFFFFFFFFFF8;
    LODWORD(v96) = v819;
    do
    {
      v759 = *(_OWORD *)v757;
      *(v756 - 1) = *((_OWORD *)v757 - 1);
      *v756 = v759;
      v756 -= 2;
      v757 -= 8;
      v758 -= 8;
    }
    while (v758);
    v700 = vars8;
    if (v754 != (v754 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_1016;
LABEL_1017:
    v733 = (unsigned int *)&v748[4 * v747];
    v828 = (unint64_t)v733;
    if (v732)
      goto LABEL_1018;
LABEL_1019:
    v732 = v128;
    v734 = v129;
  }
  v760 = *(_QWORD *)(v116 + 240);
  if (v760 <= *(_QWORD *)(v116 + 280))
    v760 = *(_QWORD *)(v116 + 280);
  STACK[0xC60] = (unint64_t)v128;
  STACK[0xC68] = (unint64_t)v129;
  STACK[0xC70] = v828;
  v761 = (double)v760 / (double)(2 * *(_DWORD *)(v116 + 36));
  if (v761 > 1.0)
    v761 = 1.0;
  v762 = v761;
  *(float *)&STACK[0xC78] = v762;
  LODWORD(STACK[0xC58]) = v762 >= 0.5;
  ++*(_QWORD *)(v116 + 304);
LABEL_65:
  sub_20EE97EA0(v128, v129, (uint64_t *)(a2 + 272));
  v133 = *v843;
  v134 = *(float *)&STACK[0xC78];
  *(double *)(v133 + 136) = *(float *)&STACK[0xC78];
  *(_QWORD *)(v133 + 152) = *(_QWORD *)(*(_QWORD *)(a2 + 720) + 312);
  v135 = STACK[0xC58];
  *(_WORD *)(v133 + 128) = (LODWORD(STACK[0xC58]) == 1) | 0x100;
  v136 = *v843;
  v137 = (uint64_t)(STACK[0xC68] - STACK[0xC60]) >> 2;
  *(_QWORD *)(v136 + 24) = v137;
  v138 = (float)((float)(unint64_t)v137 / (float)v822);
  *(double *)(v136 + 144) = v138;
  v139 = *(_QWORD *)(a2 + 720);
  if (v136 + 104 != v139 + 328)
  {
    sub_20EAFA238((_QWORD *)(v136 + 104), *(char **)(v139 + 328), *(char **)(v139 + 336), (uint64_t)(*(_QWORD *)(v139 + 336) - *(_QWORD *)(v139 + 328)) >> 3);
    v135 = STACK[0xC58];
    v134 = *(float *)&STACK[0xC78];
    v138 = *(double *)(*v843 + 144);
  }
  v140 = v138;
  sub_20EEB09F4(a2 + 728, v844, (unint64_t)((char *)v129 - (char *)v128) >> 2, v135, v134, v140);
  v141 = (void *)STACK[0xC60];
  if (STACK[0xC60])
  {
    STACK[0xC68] = (unint64_t)v141;
    operator delete(v141);
  }
  v98 = (uint64_t *)(a2 + 272);
LABEL_70:
  v142 = *(_BYTE *)(a2 + 72);
  if (v142)
    v142 = *(_BYTE *)(a2 + 344) == 0;
  if ((v142 & 1) == 0)
  {
    if (*(_BYTE *)(a2 + 24))
    {
      v143 = *(_QWORD **)(a2 + 352);
      if (v143)
      {
        if (v143[3] >= 2uLL)
        {
          if (sub_20EB8DE00(v143, v844))
          {
            v144 = *(_QWORD **)(a2 + 368);
            if (v144)
            {
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v144[1] - *v144) >> 3) > *v844)
                sub_20EE9C17C(a2 + 616, a2 + 336, (_QWORD *)(a2 + 592), v844, a30, a31, a68, v98, (void **)(a2 + 696));
            }
          }
        }
      }
    }
  }
  v145 = *(double *)(a2 + 80);
  if (v145 <= 180.0 && v145 >= 0.0)
  {
    v146 = *(_QWORD **)(a2 + 368);
    if (v146)
    {
      v840 = a68;
      v147 = tan(v145 * 0.5 * 0.0174532925);
      v148 = *v844;
      if (v148 >= (uint64_t)(*(_QWORD *)(a2 + 600) - *(_QWORD *)(a2 + 592)) >> 5)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/FeatureFilterTransforms.hpp", 90, (uint64_t)"cam_strm_id.camera_id < camera_set_models.size()", 48, (uint64_t)"Size of camera models should be same as that of descriptors.", 60, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v148 = *v844;
      }
      v149 = *v146 + 24 * v148;
      STACK[0xC40] = 0;
      STACK[0xC48] = 0;
      STACK[0xC50] = 0;
      v151 = *(_BYTE **)v149;
      v150 = *(_BYTE **)(v149 + 8);
      v152 = v150 - v151;
      if (v150 != v151)
      {
        if (0x8E38E38E38E38E39 * (v152 >> 3) >= 0x38E38E38E38E38FLL)
          sub_20EB849AC();
        v153 = operator new(v152);
        STACK[0xC40] = (unint64_t)v153;
        v154 = (unint64_t)v153 + 8 * (v152 >> 3);
        STACK[0xC50] = v154;
        memcpy(v153, v151, v152);
        STACK[0xC48] = v154;
      }
      sub_20EA84218(*(_QWORD *)(a2 + 592) + 32 * v148, (uint64_t *)&STACK[0xC40], (uint64_t)&a79);
      v817 = v98;
      if (*(_QWORD *)(a2 + 280) != *(_QWORD *)(a2 + 272))
      {
        v161 = 0;
        v824 = 0;
        v162 = *((_QWORD *)&a79 + 1) + 1664 * *(unsigned int *)(v848 + 396);
        vars8a = v162 + 96;
        v830 = (_BYTE *)(v162 + 1536);
        v163 = 1;
        v164 = a2;
        while (1)
        {
          if (!*(_BYTE *)(v164 + 332)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 151, (uint64_t)"ordered", 7, (uint64_t)"Not supported with reordered indices.", 37, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v165 = v161 >> 6;
          v166 = 1 << v161;
          if ((*(_QWORD *)(*v845 + 8 * (v161 >> 6)) & (1 << v161)) == 0)
            goto LABEL_92;
          v167 = (float *)(v840 + 24 * v161);
          v168 = *v167;
          v169 = v167[1];
          if (*v830)
            v170 = vars8a;
          else
            v170 = 0;
          v171 = *(_DWORD *)(v170 + 992);
          if (v171 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1099;
            }
            v171 = *(_DWORD *)(v170 + 992);
            v172 = v168;
            v173 = v169;
            if (v171 <= 7)
            {
LABEL_101:
              if (!v171)
                goto LABEL_1098;
              _Q3.f64[0] = *(float64_t *)(v170 + 80);
              *(double *)&STACK[0x1308] = *(double *)(v170 + 88) + *(double *)(v170 + 72) * v172 + _Q3.f64[0] * v173;
              v174 = *(double *)(v170 + 104);
              v156.f64[0] = *(float64_t *)(v170 + 112);
              *(double *)v155.i64 = v174 * v173 + v156.f64[0];
LABEL_106:
              STACK[0x1310] = v155.i64[0];
LABEL_107:
              STACK[0xC58] = (unint64_t)&a77;
              STACK[0xC60] = (unint64_t)&STACK[0x1308];
              STACK[0xC70] = 0;
              STACK[0xC78] = 0;
              STACK[0xC68] = 0;
              if (v171 <= 7)
                goto LABEL_108;
              goto LABEL_149;
            }
          }
          else
          {
            v172 = v168;
            v173 = v169;
            if (v171 <= 7)
              goto LABEL_101;
          }
          _Q3.f64[0] = *(float64_t *)(v170 + 80);
          *(double *)&STACK[0x1308] = *(double *)(v170 + 88) + *(double *)(v170 + 72) * v172 + _Q3.f64[0] * v173;
          v174 = *(double *)(v170 + 104);
          v156.f64[0] = *(float64_t *)(v170 + 112);
          *(double *)v155.i64 = v174 * v173 + v156.f64[0];
          if (v171 < 0xE)
            goto LABEL_106;
          STACK[0x1310] = v155.i64[0];
          if (v171 == 14)
            goto LABEL_107;
          v179 = (float64x2_t *)&a77;
          v180 = (float64x2_t *)&STACK[0x1308];
          STACK[0xC58] = (unint64_t)&a77;
          STACK[0xC60] = (unint64_t)&STACK[0x1308];
          STACK[0xC70] = 0;
          STACK[0xC78] = 0;
          STACK[0xC68] = 0;
          if (v171 != -1)
          {
            v181 = 0;
            v182 = 0;
            v183 = 0;
LABEL_176:
            v189 = sub_20EB3CED8(v170, (uint64_t)v179, v180, (float64x2_t *)v183, (float64x2_t *)v182, v181);
LABEL_198:
            if ((v189 & 1) != 0)
              goto LABEL_199;
            goto LABEL_92;
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1099;
          }
          v171 = *(_DWORD *)(v170 + 992);
          if (v171 <= 7)
          {
LABEL_108:
            if (v171 > 3)
            {
              v185 = STACK[0xC58];
              v184 = (double *)STACK[0xC60];
              v186 = (float64x2_t *)STACK[0xC68];
              v187 = (float64x2_t *)STACK[0xC70];
              v188 = STACK[0xC78];
              if (v171 > 5)
              {
                if (v171 == 6)
                  v189 = sub_20EB41C58((double *)v170, STACK[0xC58], (double *)STACK[0xC60], v186, STACK[0xC70], v188);
                else
                  v189 = sub_20EB306CC(v170, STACK[0xC58], (float64x2_t *)STACK[0xC60], v186, STACK[0xC70], v188, *(double *)v155.i64, v174, (int8x16_t)v156, (int8x16_t)_Q3, v158.f64[0], _Q5.f64[0], _Q6);
              }
              else if (v171 == 5)
              {
                if (v186)
                {
                  v186->f64[0] = 0.0;
                  v186->f64[1] = 0.0;
                  v186[1].f64[0] = 0.0;
                }
                if (v188)
                {
                  *(_QWORD *)(v188 + 64) = 0;
                  *(_OWORD *)(v188 + 32) = 0u;
                  *(_OWORD *)(v188 + 48) = 0u;
                  *(_OWORD *)v188 = 0u;
                  *(_OWORD *)(v188 + 16) = 0u;
                }
                if (v187)
                  v189 = sub_20EB28F10(v185, (uint64_t)v187, v184, v170 + 168, 5);
                else
                  v189 = sub_20EB2886C(v185, v184, v170 + 168, 5);
              }
              else
              {
                if (v186)
                {
                  v186->f64[0] = 0.0;
                  v186->f64[1] = 0.0;
                  v186[1].f64[0] = 0.0;
                }
                if (v188)
                {
                  *(_QWORD *)(v188 + 64) = 0;
                  v155 = 0uLL;
                  *(_OWORD *)(v188 + 32) = 0u;
                  *(_OWORD *)(v188 + 48) = 0u;
                  *(_OWORD *)v188 = 0u;
                  *(_OWORD *)(v188 + 16) = 0u;
                }
                if (v187)
                {
                  if (!*(_BYTE *)(v170 + 468))
                  {
                    v155.i64[0] = sub_20EB27C0C(v170 + 204, (double *)(v170 + 168), 0x32uLL, v155, v174, (int8x16_t)v156, (int8x16_t)_Q3).u64[0];
                    *(_BYTE *)(v170 + 468) = 1;
                  }
                  v189 = sub_20EA8D684(v185, (uint64_t)v184, (int64x2_t *)(v170 + 168), (float *)(v170 + 204), v187, 5, *(double *)v155.i64, v174, v156.f64[0], _Q3.f64[0], v158.f64[0], _Q5.f64[0], _Q6);
                }
                else
                {
                  if (!*(_BYTE *)(v170 + 468))
                  {
                    v155.i64[0] = sub_20EB27C0C(v170 + 204, (double *)(v170 + 168), 0x32uLL, v155, v174, (int8x16_t)v156, (int8x16_t)_Q3).u64[0];
                    *(_BYTE *)(v170 + 468) = 1;
                  }
                  v189 = sub_20EA8D684(v185, (uint64_t)v184, (int64x2_t *)(v170 + 168), (float *)(v170 + 204), 0, 5, *(double *)v155.i64, v174, v156.f64[0], _Q3.f64[0], v158.f64[0], _Q5.f64[0], _Q6);
                }
              }
            }
            else
            {
              if (v171 <= 1)
              {
                if (!v171)
                {
LABEL_1098:
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_1099:
                  abort();
                }
                v175 = STACK[0xC58];
                v177 = (_QWORD *)STACK[0xC68];
                v176 = (_OWORD *)STACK[0xC70];
                v178 = STACK[0xC78];
                v155 = *(int8x16_t *)STACK[0xC60];
                *(int8x16_t *)v175 = v155;
                *(_QWORD *)(v175 + 16) = 0x3FF0000000000000;
                if (v177)
                {
                  *v177 = 0;
                  v177[1] = 0;
                  v177[2] = 0;
                }
                if (v176)
                {
                  *v176 = xmmword_210312EC0;
                  v176[1] = unk_210312ED0;
                  v155.i64[1] = 0;
                  v176[2] = xmmword_210312EE0;
                }
                if (v178)
                {
                  *(_QWORD *)(v178 + 64) = 0;
                  v155.i64[1] = 0;
                  *(_OWORD *)(v178 + 32) = 0u;
                  *(_OWORD *)(v178 + 48) = 0u;
                  *(_OWORD *)v178 = 0u;
                  *(_OWORD *)(v178 + 16) = 0u;
                }
                goto LABEL_199;
              }
              if (v171 == 2)
              {
                v189 = sub_20EA8D22C((uint64_t)&STACK[0xC58], v170);
              }
              else
              {
                v190 = (double *)STACK[0xC58];
                v191 = (double *)STACK[0xC60];
                v193 = (_QWORD *)STACK[0xC68];
                v192 = STACK[0xC70];
                v194 = STACK[0xC78];
                if (STACK[0xC68])
                {
                  *v193 = 0;
                  v193[1] = 0;
                  v193[2] = 0;
                }
                if (v194)
                {
                  *(_QWORD *)(v194 + 64) = 0;
                  v155.i64[0] = 0;
                  *(_OWORD *)(v194 + 32) = 0u;
                  *(_OWORD *)(v194 + 48) = 0u;
                  *(_OWORD *)v194 = 0u;
                  *(_OWORD *)(v194 + 16) = 0u;
                }
                if (v192)
                  v189 = sub_20EB27398(v190, v192, v191, (int64x2_t *)(v170 + 168), 20, *(double *)v155.i64, v174, v156.f64[0], _Q3.f64[0], (int64x2_t)v158);
                else
                  v189 = sub_20EB23DF0((uint64_t)v190, v191, (int64x2_t *)(v170 + 168), 20, *(double *)v155.i64, v174, v156.f64[0], _Q3.f64[0], (int64x2_t)v158, _Q5);
              }
            }
            goto LABEL_198;
          }
LABEL_149:
          v179 = (float64x2_t *)STACK[0xC58];
          if (v171 > 0xB)
          {
            if (v171 <= 0xD)
            {
              if (v171 != 13)
              {
                v213 = (_QWORD *)STACK[0xC68];
                v212 = (_OWORD *)STACK[0xC70];
                v214 = STACK[0xC78];
                if (STACK[0xC68])
                {
                  *v213 = 0;
                  v213[1] = 0;
                  v213[2] = 0;
                }
                if (v214)
                {
                  *(_QWORD *)(v214 + 64) = 0;
                  v155.i64[1] = 0;
                  *(_OWORD *)(v214 + 32) = 0u;
                  *(_OWORD *)(v214 + 48) = 0u;
                  *(_OWORD *)v214 = 0u;
                  *(_OWORD *)(v214 + 16) = 0u;
                }
                v179->f64[0] = 0.0;
                v179->f64[1] = 0.0;
                v179[1].f64[0] = 0.0;
                if (v212)
                {
                  v155.i64[1] = 0;
                  v212[1] = 0u;
                  v212[2] = 0u;
                  *v212 = 0u;
                }
                goto LABEL_92;
              }
              v189 = sub_20EB43734((double *)v170, STACK[0xC58], STACK[0xC60], (_QWORD *)STACK[0xC68], STACK[0xC70], STACK[0xC78]);
              goto LABEL_198;
            }
            v180 = (float64x2_t *)STACK[0xC60];
            v183 = STACK[0xC68];
            v182 = STACK[0xC70];
            v181 = STACK[0xC78];
            if (v171 != 14)
              goto LABEL_176;
            if (v183)
            {
              *(_QWORD *)v183 = 0;
              *(_QWORD *)(v183 + 8) = 0;
              *(_QWORD *)(v183 + 16) = 0;
            }
            if (v181)
            {
              *(_QWORD *)(v181 + 64) = 0;
              *(_OWORD *)(v181 + 32) = 0u;
              *(_OWORD *)(v181 + 48) = 0u;
              *(_OWORD *)v181 = 0u;
              *(_OWORD *)(v181 + 16) = 0u;
            }
            v206 = (double *)(v170 + 392);
            v207 = *(double *)v170 + *(double *)(v170 + 32);
            v208 = v207 * 0.5;
            if (!v182)
            {
              v189 = sub_20EB253A0((uint64_t)v179, (uint64_t)v180, (double *)(v170 + 168), v206, 0x14u, v207 * 0.5);
              goto LABEL_198;
            }
            if (sub_20EB253A0((uint64_t)v179, (uint64_t)v180, (double *)(v170 + 168), v206, 0x14u, v207 * 0.5))
            {
              if (sub_20EB2498C(&a75, (uint64_t)&STACK[0xFF0], (float64x2_t *)&STACK[0xCC8], (uint64_t)v179, (double *)(v170 + 168), v208))
              {
                v155.i64[0] = *(_QWORD *)&v179[1].f64[0];
                v156 = *v179;
                v201 = *(float64x2_t *)&STACK[0x1000];
                v158 = *(float64x2_t *)&STACK[0x1010];
                _Q3 = *(float64x2_t *)&STACK[0xFF0];
                *(float64x2_t *)&STACK[0x1020] = *v179;
                STACK[0x1030] = v155.i64[0];
                STACK[0xCD8] = 0;
                *(_QWORD *)&v209.f64[0] = v155.i64[0];
                v209.f64[1] = v156.f64[0];
                _Q5 = vmlsq_f64(vmulq_f64(v158, v209), (float64x2_t)vzip2q_s64((int64x2_t)v158, (int64x2_t)v201), (float64x2_t)vextq_s8((int8x16_t)v156, v155, 8uLL));
                _Q6 = vmulq_f64(_Q3, _Q5);
                _Q5.f64[0] = _Q5.f64[1];
                __asm { FMLA            D6, D5, V3.D[1] }
                _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(v201, v156), 1), v158, v156).f64[0], v201.f64[0]);
                _Q5.f64[0] = fabs(_Q6.f64[0]);
                if (_Q5.f64[0] >= 0.00000001)
                {
LABEL_175:
                  *(_QWORD *)&v210 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
                  *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u64[0];
                  *((_QWORD *)&v210 + 1) = *(_QWORD *)&v158.f64[0];
                  *(_QWORD *)&v201.f64[1] = vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL).u64[0];
                  STACK[0x10E0] = *(_QWORD *)&v156.f64[0];
                  *(float64x2_t *)&STACK[0x10D0] = _Q3;
                  STACK[0x10F8] = vextq_s8((int8x16_t)v156, (int8x16_t)v156, 8uLL).u64[0];
                  *(_OWORD *)&STACK[0x10E8] = v210;
                  STACK[0x1110] = v155.i64[0];
                  *(float64x2_t *)&STACK[0x1100] = v201;
                  sub_20E8BE424((uint64_t)&STACK[0xC80]);
                  v155.i64[0] = STACK[0xC90];
                  v156 = *(float64x2_t *)&STACK[0xC98];
                  _Q3 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&STACK[0xC80], *(int64x2_t *)&STACK[0xC98]);
                  v211 = vzip2q_s64(*(int64x2_t *)&STACK[0xC80], *(int64x2_t *)&STACK[0xC98]);
                  v155.i64[1] = STACK[0xCA8];
                  *(float64x2_t *)v182 = _Q3;
                  *(int64x2_t *)(v182 + 16) = v211;
                  *(int8x16_t *)(v182 + 32) = v155;
LABEL_199:
                  v216 = sqrt(*(double *)&a77 * *(double *)&a77 + *((double *)&a77 + 1) * *((double *)&a77 + 1));
                  v217 = a78;
                  if (a78 == 0.0)
                    v217 = 1.0;
                  if (v216 / v217 >= v147)
                  {
                    if (!*(_BYTE *)(a2 + 332)
                      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 69, (uint64_t)"ordered", 7, (uint64_t)"Not supported with reordered indices.", 37, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                    v218 = *(_QWORD *)(*v845 + 8 * v165);
                    if ((v218 & v166) != 0)
                    {
                      *(_QWORD *)(*v845 + 8 * v165) = v218 ^ v166;
                      ++*(_DWORD *)(a2 + 324);
                      if (v161 >= *(unsigned int *)(a2 + 320))
                        ++*(_DWORD *)(a2 + 328);
                    }
                    ++v824;
                  }
                }
              }
            }
          }
          else
          {
            v195 = (float64x2_t *)STACK[0xC60];
            v196 = STACK[0xC68];
            v182 = STACK[0xC70];
            v197 = STACK[0xC78];
            if (v171 <= 9)
            {
              if (v171 == 9)
              {
                v189 = sub_20EB35004(v170, STACK[0xC58], v195, (float64x2_t *)v196, STACK[0xC70], v197, *(double *)v155.i64, v174, v156.f64[0], (int32x4_t)_Q3, (int32x4_t)v158);
              }
              else
              {
                if (v196)
                {
                  *(_QWORD *)v196 = 0;
                  *(_QWORD *)(v196 + 8) = 0;
                  *(_QWORD *)(v196 + 16) = 0;
                }
                if (v197)
                {
                  *(_QWORD *)(v197 + 64) = 0;
                  v155.i64[0] = 0;
                  *(_OWORD *)(v197 + 32) = 0u;
                  *(_OWORD *)(v197 + 48) = 0u;
                  *(_OWORD *)v197 = 0u;
                  *(_OWORD *)(v197 + 16) = 0u;
                }
                if (v182)
                {
                  v189 = sub_20EB277C4((uint64_t)v179, v182, v195->f64, v170 + 168, 20, *(double *)v155.i64, v174, v156.f64[0], (int32x4_t)_Q3, (int32x4_t)v158);
                }
                else
                {
                  v215 = sqrt(v195->f64[0] * v195->f64[0] + v195->f64[1] * v195->f64[1]);
                  v189 = sub_20EB24018((uint64_t)v179, v195->f64, (double *)(v170 + 168), 20, v215, v215, v156.f64[0], (int32x4_t)_Q3, (int32x4_t)v158);
                }
              }
              goto LABEL_198;
            }
            if (v171 != 10)
            {
              v189 = sub_20EB38E20(v170, STACK[0xC58], v195, (float64x2_t *)v196, (float64x2_t *)STACK[0xC70], v197);
              goto LABEL_198;
            }
            if (v196)
            {
              *(_QWORD *)v196 = 0;
              *(_QWORD *)(v196 + 8) = 0;
              *(_QWORD *)(v196 + 16) = 0;
            }
            if (v197)
            {
              *(_QWORD *)(v197 + 64) = 0;
              *(_OWORD *)(v197 + 32) = 0u;
              *(_OWORD *)(v197 + 48) = 0u;
              *(_OWORD *)v197 = 0u;
              *(_OWORD *)(v197 + 16) = 0u;
            }
            v198 = (double *)(v170 + 280);
            v199 = *(double *)v170 + *(double *)(v170 + 32);
            v200 = v199 * 0.5;
            if (!v182)
            {
              v189 = sub_20EB24F38((uint64_t)v179, (uint64_t)v195, v170 + 168, v198, 0x14u, v199 * 0.5);
              goto LABEL_198;
            }
            if (sub_20EB24F38((uint64_t)v179, (uint64_t)v195, v170 + 168, v198, 0x14u, v199 * 0.5))
            {
              if (sub_20EB2450C(&a75, (uint64_t)&STACK[0xFF0], (float64x2_t *)&STACK[0xCC8], (uint64_t)v179, (double *)(v170 + 168), v200))
              {
                v155.i64[0] = *(_QWORD *)&v179[1].f64[0];
                v156 = *v179;
                v201 = *(float64x2_t *)&STACK[0x1000];
                v158 = *(float64x2_t *)&STACK[0x1010];
                _Q3 = *(float64x2_t *)&STACK[0xFF0];
                *(float64x2_t *)&STACK[0x1020] = *v179;
                STACK[0x1030] = v155.i64[0];
                STACK[0xCD8] = 0;
                *(_QWORD *)&v202.f64[0] = v155.i64[0];
                v202.f64[1] = v156.f64[0];
                _Q5 = vmlsq_f64(vmulq_f64(v158, v202), (float64x2_t)vzip2q_s64((int64x2_t)v158, (int64x2_t)v201), (float64x2_t)vextq_s8((int8x16_t)v156, v155, 8uLL));
                _Q6 = vmulq_f64(_Q3, _Q5);
                _Q5.f64[0] = _Q5.f64[1];
                __asm { FMLA            D6, D5, V3.D[1] }
                _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(v201, v156), 1), v158, v156).f64[0], v201.f64[0]);
                _Q5.f64[0] = fabs(_Q6.f64[0]);
                if (_Q5.f64[0] >= 0.00000001)
                  goto LABEL_175;
              }
            }
          }
LABEL_92:
          v161 = v163;
          v164 = a2;
          ++v163;
          if (v161 >= (uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3)
            goto LABEL_208;
        }
      }
      v824 = 0;
LABEL_208:
      sub_20EEA55F4(&STACK[0xCC8]);
      LODWORD(v96) = v819;
      v219 = STACK[0xCC8];
      v98 = v817;
      if (**(int **)(STACK[0xCC8] + 56) <= 3)
      {
        v220 = *(unsigned __int8 *)(v219 + 72);
        v221 = sub_20E8C31DC(v219, "OSLogSurrogateAppender", 1, 0);
        v222 = v221;
        _ZF = !v220 && v221 == 0;
        if (!_ZF)
        {
          STACK[0xFF0] = (unint64_t)&STACK[0xCC8];
          STACK[0xFF8] = std::chrono::steady_clock::now().__d_.__rep_;
          STACK[0x1000] = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(STACK[0x1008]) = 3;
          STACK[0x1010] = (unint64_t)"unknown file";
          LODWORD(STACK[0x1018]) = 123;
          STACK[0x1028] = 0;
          STACK[0x1030] = 0;
          STACK[0x1020] = (unint64_t)"unknown function";
          v224 = *(_QWORD *)(a2 + 280);
          v846 = *(unsigned int *)(a2 + 324);
          v225 = *(_QWORD *)STACK[0xFF0];
          v226 = (const char *)(v225 + 16);
          vars8b = v225;
          v841 = *(_QWORD *)(a2 + 272);
          v831 = v225 + 16;
          if (*(char *)(v225 + 39) < 0)
          {
            v226 = *(const char **)(v225 + 16);
            v227 = *(_QWORD *)(v225 + 24);
          }
          else
          {
            v227 = *(unsigned __int8 *)(v225 + 39);
          }
          v228 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v228 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&STACK[0x10D0]);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&STACK[0x10D0]);
            if (LOBYTE(STACK[0x10E8]) && SLOBYTE(STACK[0x10E7]) < 0)
              operator delete((void *)STACK[0x10D0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v229 = byte_254A4A4F8;
          else
            v229 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v230 = byte_254A4A4F8[23];
          else
            v230 = *(_QWORD *)&byte_254A4A4F8[8];
          STACK[0x10D0] = (unint64_t)os_log_create(v229, v226);
          v231 = &STACK[0x10D8];
          if (v230 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v230 >= 0x17)
          {
            v232 = v222;
            v233 = v226;
            v234 = v224;
            v235 = v220;
            v236 = (v230 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v230 | 7) != 0x17)
              v236 = v230 | 7;
            v237 = v236 + 1;
            v231 = (unint64_t *)operator new(v236 + 1);
            STACK[0x10E0] = v230;
            STACK[0x10E8] = v237 | 0x8000000000000000;
            STACK[0x10D8] = (unint64_t)v231;
            v220 = v235;
            v224 = v234;
            v226 = v233;
            v222 = v232;
          }
          else
          {
            LOBYTE(STACK[0x10EF]) = v230;
            if (!v230)
            {
LABEL_231:
              *((_BYTE *)v231 + v230) = 0;
              LOBYTE(STACK[0x10F0]) = 1;
              v238 = &STACK[0x10F8];
              if (v227 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v227 >= 0x17)
              {
                v239 = (v227 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v227 | 7) != 0x17)
                  v239 = v227 | 7;
                v240 = v239 + 1;
                v238 = (unint64_t *)operator new(v239 + 1);
                STACK[0x1100] = v227;
                STACK[0x1108] = v240 | 0x8000000000000000;
                STACK[0x10F8] = (unint64_t)v238;
              }
              else
              {
                LOBYTE(STACK[0x110F]) = v227;
                if (!v227)
                {
LABEL_239:
                  *((_BYTE *)v238 + v227) = 0;
                  LOBYTE(STACK[0x1110]) = 1;
                  v241 = STACK[0x10D0];
                  if (SLOBYTE(STACK[0x110F]) < 0)
                    operator delete((void *)STACK[0x10F8]);
                  if (LOBYTE(STACK[0x10F0]) && SLOBYTE(STACK[0x10EF]) < 0)
                    operator delete((void *)STACK[0x10D8]);
                  if (STACK[0x10D0])
                    os_release((void *)STACK[0x10D0]);
                  v242 = ((v224 - v841) >> 3) - v846;
                  v96 = v242 + v824;
                  if (v222 && *(_QWORD *)(v222 + 24))
                  {
                    v243 = _os_log_pack_size();
                    v244 = (std::__shared_weak_count_vtbl *)operator new(v243, (std::align_val_t)8uLL);
                    v245 = (std::__shared_weak_count *)operator new();
                    v246 = v245;
                    v245->__shared_owners_ = 0;
                    v247 = (unint64_t *)&v245->__shared_owners_;
                    v245->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v245->__shared_weak_owners_ = 0;
                    v245[1].__vftable = v244;
                    STACK[0x10D0] = (unint64_t)v244;
                    STACK[0x10D8] = (unint64_t)v244;
                    STACK[0x10E0] = (unint64_t)v245;
                    do
                      v248 = __ldxr(v247);
                    while (__stxr(v248 + 1, v247));
                    STACK[0x10E8] = 0;
                    STACK[0x10F0] = 0;
                    STACK[0x10F8] = 0;
                    do
                      v249 = __ldaxr(v247);
                    while (__stlxr(v249 - 1, v247));
                    if (!v249)
                    {
                      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                      std::__shared_weak_count::__release_weak(v246);
                    }
                    v250 = STACK[0x10D0];
                    v251 = _os_log_pack_fill();
                    *(_DWORD *)v251 = 134218496;
                    *(double *)(v251 + 4) = v145;
                    *(_WORD *)(v251 + 12) = 2048;
                    *(_QWORD *)(v251 + 14) = v96;
                    *(_WORD *)(v251 + 22) = 2048;
                    *(_QWORD *)(v251 + 24) = v242;
                    v252 = operator new();
                    v253 = *(unsigned __int8 *)(vars8b + 39);
                    v254 = v831;
                    if ((v253 & 0x80u) != 0)
                    {
                      v254 = *(_QWORD *)(vars8b + 16);
                      v253 = *(_QWORD *)(vars8b + 24);
                    }
                    *(_QWORD *)v252 = v250;
                    *(_OWORD *)(v252 + 8) = *(_OWORD *)&STACK[0x10D8];
                    STACK[0x10D8] = 0;
                    STACK[0x10E0] = 0;
                    *(_OWORD *)(v252 + 24) = *(_OWORD *)&STACK[0x10E8];
                    STACK[0x10E8] = 0;
                    STACK[0x10F0] = 0;
                    *(_QWORD *)(v252 + 40) = v254;
                    *(_QWORD *)(v252 + 48) = v253;
                    *(_BYTE *)(v252 + 56) = 1;
                    STACK[0xC58] = 0;
                    STACK[0xC80] = v252;
                    (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(v222 + 24) + 40))(*(_QWORD *)(v222 + 24), &STACK[0xC80]);
                    LODWORD(v96) = v819;
                    v255 = STACK[0xC80];
                    STACK[0xC80] = 0;
                    v98 = v817;
                    if (v255)
                    {
                      v256 = *(std::__shared_weak_count **)(v255 + 32);
                      if (v256)
                      {
                        v257 = (unint64_t *)&v256->__shared_owners_;
                        do
                          v258 = __ldaxr(v257);
                        while (__stlxr(v258 - 1, v257));
                        if (!v258)
                        {
                          ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                          std::__shared_weak_count::__release_weak(v256);
                        }
                      }
                      v259 = *(std::__shared_weak_count **)(v255 + 16);
                      if (v259)
                      {
                        v260 = (unint64_t *)&v259->__shared_owners_;
                        do
                          v261 = __ldaxr(v260);
                        while (__stlxr(v261 - 1, v260));
                        if (!v261)
                        {
                          ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                          std::__shared_weak_count::__release_weak(v259);
                        }
                      }
                      MEMORY[0x212BC6398](v255, 0x10F0C40B62ED6C6);
                      v262 = STACK[0xC58];
                      STACK[0xC58] = 0;
                      if (v262)
                      {
                        v263 = *(std::__shared_weak_count **)(v262 + 32);
                        if (v263)
                        {
                          v264 = (unint64_t *)&v263->__shared_owners_;
                          do
                            v265 = __ldaxr(v264);
                          while (__stlxr(v265 - 1, v264));
                          if (!v265)
                          {
                            ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                            std::__shared_weak_count::__release_weak(v263);
                          }
                        }
                        v266 = *(std::__shared_weak_count **)(v262 + 16);
                        if (v266)
                        {
                          v267 = (unint64_t *)&v266->__shared_owners_;
                          do
                            v268 = __ldaxr(v267);
                          while (__stlxr(v268 - 1, v267));
                          if (!v268)
                          {
                            ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                            std::__shared_weak_count::__release_weak(v266);
                          }
                        }
                        MEMORY[0x212BC6398](v262, 0x10F0C40B62ED6C6);
                      }
                    }
                    v269 = (std::__shared_weak_count *)STACK[0x10F0];
                    if (STACK[0x10F0])
                    {
                      v270 = (unint64_t *)&v269->__shared_owners_;
                      do
                        v271 = __ldaxr(v270);
                      while (__stlxr(v271 - 1, v270));
                      if (!v271)
                      {
                        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                        std::__shared_weak_count::__release_weak(v269);
                      }
                    }
                    v272 = (std::__shared_weak_count *)STACK[0x10E0];
                    if (STACK[0x10E0])
                    {
                      v273 = (unint64_t *)&v272->__shared_owners_;
                      do
                        v274 = __ldaxr(v273);
                      while (__stlxr(v274 - 1, v273));
                      if (!v274)
                      {
                        ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                        std::__shared_weak_count::__release_weak(v272);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v241, OS_LOG_TYPE_INFO);
                    LODWORD(STACK[0x10D0]) = 134218496;
                    *(double *)&STACK[0x10D4] = v145;
                    LOWORD(STACK[0x10DC]) = 2048;
                    STACK[0x10DE] = v96;
                    LOWORD(STACK[0x10E6]) = 2048;
                    STACK[0x10E8] = v242;
                    v275 = (void *)_os_log_send_and_compose_impl();
                    v98 = v817;
                    LODWORD(v96) = v819;
                    if (v275)
                      free(v275);
                  }
                  if (v220)
                  {
                    sub_20E8C003C((uint64_t)&STACK[0xFF0], "Number of point features cropping to %f FOV ([before, after]): ([%lu, %lu]).", v145, ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3)- *(unsigned int *)(a2 + 324)+ v824, ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3) - *(unsigned int *)(a2 + 324));
                    sub_20E863570((uint64_t)&STACK[0xFF0]);
                  }
                  sub_20E863570((uint64_t)&STACK[0xFF0]);
                  v276 = (std::__shared_weak_count *)STACK[0x1030];
                  if (STACK[0x1030])
                  {
                    v277 = (unint64_t *)&v276->__shared_owners_;
                    do
                      v278 = __ldaxr(v277);
                    while (__stlxr(v278 - 1, v277));
                    if (!v278)
                    {
                      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                      std::__shared_weak_count::__release_weak(v276);
                    }
                  }
                  goto LABEL_298;
                }
              }
              memmove(v238, v226, v227);
              goto LABEL_239;
            }
          }
          memmove(v231, v229, v230);
          goto LABEL_231;
        }
      }
LABEL_298:
      v279 = *((double *)&a79 + 1);
      if (*((_QWORD *)&a79 + 1))
      {
        v280 = *(_QWORD *)&a80;
        v281 = (void *)*((_QWORD *)&a79 + 1);
        if (*(_QWORD *)&a80 != *((_QWORD *)&a79 + 1))
        {
          do
            v280 = sub_20EB8188C(v280 - 1664);
          while (v280 != *(_QWORD *)&v279);
          v281 = (void *)*((_QWORD *)&a79 + 1);
        }
        a80 = v279;
        operator delete(v281);
      }
      v282 = (void *)STACK[0xC40];
      if (STACK[0xC40])
      {
        STACK[0xC48] = (unint64_t)v282;
        operator delete(v282);
      }
    }
  }
LABEL_305:
  v283 = *(_QWORD *)(a2 + 272);
  v284 = *(unint64_t **)(a2 + 280);
  v285 = (uint64_t)((uint64_t)v284 - v283) >> 3;
  v286 = *(unsigned int *)(a2 + 324);
  if (*(_BYTE *)(a2 + 332))
  {
    v287 = (uint64_t)((uint64_t)v284 - v283) >> 3;
    v288 = a2;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 54, (uint64_t)"ordered", 7, (uint64_t)"Indices can only be reordered once.", 35, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v288 = a2;
    v283 = *(_QWORD *)(a2 + 272);
    v284 = *(unint64_t **)(a2 + 280);
    v287 = (uint64_t)((uint64_t)v284 - v283) >> 3;
  }
  STACK[0x10D0] = (unint64_t)v98;
  v289 = 126 - 2 * __clz(v287);
  if (v284 == (unint64_t *)v283)
    v290 = 0;
  else
    v290 = v289;
  sub_20EEB1560(v283, v284, (uint64_t)&STACK[0x10D0], v290, 1);
  *(_BYTE *)(v288 + 332) = 0;
  kdebug_trace();
  v842 = v286;
  v847 = v285;
  if (!(_DWORD)v96)
  {
    v304 = 0;
    v305 = 0;
    goto LABEL_739;
  }
  v292 = a30;
  v291 = a31;
  v293 = a68;
  *(_OWORD *)&STACK[0xC80] = 0u;
  *(_OWORD *)&STACK[0xC90] = 0u;
  LODWORD(STACK[0xCA0]) = 733226600;
  kdebug_trace();
  if (*(_DWORD *)(a2 + 88) == -1)
  {
    v306 = 0;
    v305 = 0;
    v307 = 0;
    goto LABEL_738;
  }
  v295 = *v844;
  v296 = *(_QWORD *)(a2 + 592);
  v297 = *(_QWORD *)(a2 + 600) - v296;
  if (v295 >= v297 >> 5
    || 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v296 + 32 * v295 + 16) - *(_QWORD *)(v296 + 32 * v295 + 8)) >> 7) <= (unint64_t)*(unsigned int *)(v848 + 396))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/FeatureFilterTransforms.hpp", 155, (uint64_t)"cam_strm_id.camera_id < cam_list.size() && cam_strm_id.stream_id < cam_list[cam_strm_id.camera_id].NumStreams()", 111, (uint64_t)"Stream input does not match system configuration.", 49, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v296 = *(_QWORD *)(a2 + 592);
    v297 = *(_QWORD *)(a2 + 600) - v296;
  }
  if ((unint64_t)v297 <= 0x20)
  {
    v308 = a2;
    v298 = *(_DWORD *)(a2 + 88);
    v299 = *(_DWORD *)(a2 + 92);
    v300 = v299 + v298;
    v832 = 1;
    if (!*(_BYTE *)(a2 + 584))
      goto LABEL_335;
    goto LABEL_333;
  }
  v298 = *(_DWORD *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 96)
    || (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v296 + 16) - *(_QWORD *)(v296 + 8)) >> 7)) <= 1)
  {
    v308 = a2;
    v299 = *(_DWORD *)(a2 + 92);
    v300 = v299 + v298;
    v832 = 1;
    if (!*(_BYTE *)(a2 + 584))
      goto LABEL_335;
    goto LABEL_333;
  }
  v299 = *(_DWORD *)(a2 + 92);
  v300 = v299 + v298;
  if (!*(_BYTE *)(a2 + 344))
  {
    v832 = 1;
    v308 = a2;
    if (!*(_BYTE *)(a2 + 584))
      goto LABEL_335;
    goto LABEL_333;
  }
  if (*v844 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_1129;
  }
  v301 = *(_DWORD *)(v848 + 396);
  if (v301 < 0x10000)
    goto LABEL_327;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_1129:
    abort();
  }
  LOWORD(v301) = *(_WORD *)(v848 + 396);
LABEL_327:
  v302 = (unsigned __int16)v301 | ((unsigned __int16)*v844 << 16);
  v303 = a2 + 384;
  if (*(_DWORD *)(a2 + 384) != (_DWORD)v302)
  {
    if (*(_DWORD *)(a2 + 408) == (_DWORD)v302)
    {
      v303 = a2 + 408;
    }
    else if (*(_DWORD *)(a2 + 432) == (_DWORD)v302)
    {
      v303 = a2 + 432;
    }
    else if (*(_DWORD *)(a2 + 456) == (_DWORD)v302)
    {
      v303 = a2 + 456;
    }
    else if (*(_DWORD *)(a2 + 480) == (_DWORD)v302)
    {
      v303 = a2 + 480;
    }
    else if (*(_DWORD *)(a2 + 504) == (_DWORD)v302)
    {
      v303 = a2 + 504;
    }
    else if (*(_DWORD *)(a2 + 528) == (_DWORD)v302)
    {
      v303 = a2 + 528;
    }
    else if (*(_DWORD *)(a2 + 552) == (_DWORD)v302)
    {
      v303 = a2 + 552;
    }
    else
    {
      v303 = a2 + 576;
    }
  }
  sub_20EEA57DC(a2 + 384, v302, v303);
  v796 = *(double *)(v303 + 8);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 592) + 32 * *v844 + 16)
                                   - *(_QWORD *)(*(_QWORD *)(a2 + 592) + 32 * *v844 + 8)) >> 7)) < 2)
  {
    v797 = *(_BYTE *)(a2 + 97) != 0;
  }
  else
  {
    if (*(_DWORD *)(a2 + 88) >= ((*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3)
                               - *(_DWORD *)(a2 + 324))
      v298 = ((*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3) - *(_DWORD *)(a2 + 324);
    else
      v298 = *(_DWORD *)(a2 + 88);
    v797 = 1;
  }
  v832 = v797;
  v299 = (v796 * (double)v299);
  v298 = (v796 * (double)v298);
  v308 = a2;
  if (*(_BYTE *)(a2 + 584))
  {
LABEL_333:
    v309 = *(double *)(v308 + 104);
    goto LABEL_337;
  }
LABEL_335:
  if (!*(_BYTE *)(v308 + 585))
  {
    vars8c = v300;
    v310 = v299 + v298;
    if (v299 + v298 < *(_DWORD *)(v308 + 132))
      goto LABEL_338;
    goto LABEL_347;
  }
  v309 = *(double *)(v308 + 112);
LABEL_337:
  v298 = (v309 * (double)v298);
  v299 = (v309 * (double)v299);
  vars8c = (v309 * (double)v300);
  v310 = v299 + v298;
  if (v299 + v298 >= *(_DWORD *)(v308 + 132))
  {
LABEL_347:
    if (*(_BYTE *)(v308 + 120))
    {
      v320 = *(unsigned int *)(v308 + 124);
      v321 = *(float *)(v308 + 128);
      LODWORD(STACK[0x10D0]) = v320;
      STACK[0x10E8] = 0;
      STACK[0x10F0] = 0;
      STACK[0x10E0] = 0;
      if ((v320 & 1) == 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/AreaBinningFeatureFilter.hpp", 37, (uint64_t)"area_binning_num_bins_1d % 2 == 1", 33, (uint64_t)"Number of bins must be odd for AreaBinning", 42, (void (*)(void **))sub_21023DDB0)|| (!(_DWORD)v320 || v321 <= 0.0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/AreaBinningFeatureFilter.hpp", 39, (uint64_t)"(area_binning_num_bins_1d > 0 && gaussian_kernel_sigma > 0)", 59, (uint64_t)"Incorrect bin configuration in AreaBinning FeatureFilter", 56, (void (*)(void **))sub_21023DDB0)|| (!v292 || !v291)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/AreaBinningFeatureFilter.hpp", 42, (uint64_t)"image_width > 0u && image_height > 0u", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| ((v322 = v320 - 1 + v292, v323 = v320 - 1 + v291, LODWORD(STACK[0x10D4]) = v322 / v320, LODWORD(STACK[0x10D8]) = v323 / v320, v322 < v320)|| v323 < v320)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/AreaBinningFeatureFilter.hpp", 48, (uint64_t)"(pixels_per_bin_u_ != 0 && pixels_per_bin_v_ != 0)",
             50,
             (uint64_t)"invalid image size for AreaBinning FeatureFilter",
             48,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      sub_210122538(v320, &STACK[0xFF0], v321, v294);
      v325 = (void *)STACK[0x10E0];
      if (STACK[0x10E0])
      {
        STACK[0x10E8] = (unint64_t)v325;
        operator delete(v325);
      }
      v326 = *(_OWORD *)&STACK[0xFF0];
      *(_OWORD *)&STACK[0x10E0] = *(_OWORD *)&STACK[0xFF0];
      STACK[0x10F0] = STACK[0x1000];
      if (v298 == -1)
        goto LABEL_615;
      v327 = *(unsigned int *)(a2 + 100);
      v329 = *(_QWORD *)(a2 + 272);
      v328 = *(_QWORD *)(a2 + 280);
      v330 = v328 - v329;
      v331 = (v328 - v329) >> 3;
      v332 = *(_DWORD *)(a2 + 324);
      v333 = *(_DWORD *)(a2 + 320);
      v334 = *(_DWORD *)(a2 + 328);
      v335 = v331 - (v333 + v334);
      v336 = v333 + v334 - v332;
      v337 = v336 - v310;
      if (v336 > v310)
      {
        if (*(_BYTE *)(a2 + 332))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 163, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1107;
          }
          v329 = *(_QWORD *)(a2 + 272);
          v328 = *(_QWORD *)(a2 + 280);
          v332 = *(_DWORD *)(a2 + 324);
          v330 = v328 - v329;
        }
        _ZF = v329 == v328;
        v338 = v330 >> 3;
        v340 = !_ZF && v329 != 0;
        v341 = v338 - v332;
        if ((v338 == v332
           || (v340 & 1) != 0
           || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (v341 >= v336|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 474, (uint64_t)"offset + count <= size()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
        {
          if ((v340 & 1) == 0)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1107;
            }
            v329 = 0;
          }
          STACK[0xFF0] = v336;
          STACK[0xFF8] = v329;
          sub_20EEAA3D8((uint64_t)&STACK[0x10D0], v293, v298, 1, &STACK[0xFF0], *(double *)&v326, v324);
          v344 = v336 - v298;
          if (v344 + v298 <= v336
            || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 474, (uint64_t)"offset + count <= size()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            v345 = v329 + 8 * v298;
            if ((_DWORD)v336 != v298 && !v329)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_1107;
              }
              v345 = 0;
            }
            STACK[0xC58] = v344;
            STACK[0xC60] = v345;
            sub_20EEAA3D8((uint64_t)&STACK[0x10D0], v293, v299, 0, &STACK[0xC58], v342, v343);
            if (v832)
            {
              v346 = *(_DWORD *)(a2 + 320);
              LODWORD(v347) = *(_DWORD *)(a2 + 324);
              if (v346 - (int)v347 + *(_DWORD *)(a2 + 328) >= v337)
              {
                v348 = a2;
              }
              else
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 170, (uint64_t)"amt <= active_reg_idx", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_1107;
                }
                v348 = a2;
                v346 = *(_DWORD *)(a2 + 320);
                LODWORD(v347) = *(_DWORD *)(a2 + 324);
              }
              v438 = v346 - v337;
              *(_DWORD *)(v348 + 320) = v346 - v337;
              v439 = v348 + 272;
              v382 = *(_QWORD *)(v348 + 272);
              v381 = *(_QWORD *)(v439 + 8);
              v440 = ((v381 - v382) >> 3) - v347;
              if (v440 <= v327)
                goto LABEL_615;
              v441 = v440 - v327;
            }
            else
            {
              v382 = *(_QWORD *)(a2 + 272);
              v381 = *(_QWORD *)(a2 + 280);
              v383 = v381 - v382;
              v384 = (v381 - v382) >> 3;
              v385 = *(unsigned int *)(a2 + 324);
              if (*(_BYTE *)(a2 + 332))
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_1107;
                }
                v386 = (_DWORD *)a2;
                v382 = *(_QWORD *)(a2 + 272);
                v381 = *(_QWORD *)(a2 + 280);
                v387 = *(_DWORD *)(a2 + 324);
                v383 = v381 - v382;
                v388 = (v381 - v382) >> 3;
              }
              else
              {
                v388 = (v381 - v382) >> 3;
                v387 = *(_DWORD *)(a2 + 324);
                v386 = (_DWORD *)a2;
              }
              v490 = v384 - (v385 + v310);
              v491 = v383 >> 3;
              v438 = v386[80];
              v492 = v386[82];
              v493 = (v491 - (v438 + v492));
              v494 = v492 + v490;
              v495 = v491 - v438;
              if (v493 >= v490)
                v495 = v494;
              v386[82] = v495;
              v347 = (v387 + v490);
              v386[81] = v347;
              v496 = v388 - v347;
              v441 = v496 - v327;
              if (v496 <= v327)
                goto LABEL_615;
            }
            v445 = a2;
            if (!*(_BYTE *)(a2 + 332))
            {
LABEL_611:
              v497 = (unint64_t)(v381 - v382) >> 3;
              v498 = *(_DWORD *)(v445 + 328);
              v499 = (v497 - v498 - v438);
              v500 = v498 + v441;
              v501 = v497 - v438;
              if (v499 >= v441)
                v501 = v500;
              *(_DWORD *)(v445 + 328) = v501;
              v450 = v347 + v441;
LABEL_614:
              *(_DWORD *)(v445 + 324) = v450;
LABEL_615:
              v502 = (void *)STACK[0x10E0];
              if (STACK[0x10E0])
              {
                STACK[0x10E8] = (unint64_t)v502;
                operator delete(v502);
              }
              goto LABEL_638;
            }
            if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
            {
              v445 = a2;
              v382 = *(_QWORD *)(a2 + 272);
              v381 = *(_QWORD *)(a2 + 280);
              v438 = *(_DWORD *)(a2 + 320);
              LODWORD(v347) = *(_DWORD *)(a2 + 324);
              goto LABEL_611;
            }
          }
        }
LABEL_1107:
        abort();
      }
      if ((v832 & 1) == 0)
      {
        if (*(_BYTE *)(a2 + 332))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1107;
          }
          v371 = a2;
          v329 = *(_QWORD *)(a2 + 272);
          v328 = *(_QWORD *)(a2 + 280);
          v333 = *(_DWORD *)(a2 + 320);
          v334 = *(_DWORD *)(a2 + 328);
          v330 = v328 - v329;
          v331 = (v328 - v329) >> 3;
          v372 = (v331 - (v334 + v333));
          v332 = *(_DWORD *)(a2 + 324) + v335;
        }
        else
        {
          v332 += v335;
          v372 = (v331 - (v333 + v334));
          v371 = a2;
        }
        v334 += v335;
        v442 = v331 - v333;
        if (v372 < v335)
          v334 = v442;
        *(_DWORD *)(v371 + 328) = v334;
        *(_DWORD *)(v371 + 324) = v332;
      }
      v443 = (v330 >> 3) - v332;
      v444 = v443 - v327;
      if (v443 <= v327)
        goto LABEL_615;
      v445 = a2;
      if (*(_BYTE *)(a2 + 332))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1107;
        }
        v445 = a2;
        v329 = *(_QWORD *)(a2 + 272);
        v328 = *(_QWORD *)(a2 + 280);
        v333 = *(_DWORD *)(a2 + 320);
        v334 = *(_DWORD *)(a2 + 328);
        v332 = *(_DWORD *)(a2 + 324);
      }
      v446 = (v328 - v329) >> 3;
      v447 = (v446 - (v333 + v334));
      v448 = v334 + v444;
      v449 = v446 - v333;
      if (v447 >= v444)
        v449 = v448;
      *(_DWORD *)(v445 + 328) = v449;
      v450 = v332 + v444;
      goto LABEL_614;
    }
    v349 = *(unsigned int *)(v308 + 100);
    STACK[0xFF0] = v293;
    if (v298 == -1)
      goto LABEL_638;
    v351 = *(uint64_t **)(a2 + 272);
    v350 = *(uint64_t **)(a2 + 280);
    v352 = (char *)v350 - (char *)v351;
    v353 = (unint64_t)((char *)v350 - (char *)v351) >> 3;
    v354 = *(_DWORD *)(a2 + 324);
    v355 = *(_DWORD *)(a2 + 320);
    v356 = *(_DWORD *)(a2 + 328);
    v357 = v353 - (v355 + v356);
    v358 = v355 + v356 - v354;
    v825 = v358 - v310;
    if (v358 <= v310)
    {
      if ((v832 & 1) == 0)
      {
        if (*(_BYTE *)(a2 + 332))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1105;
          }
          v379 = a2;
          v351 = *(uint64_t **)(a2 + 272);
          v350 = *(uint64_t **)(a2 + 280);
          v355 = *(_DWORD *)(a2 + 320);
          v356 = *(_DWORD *)(a2 + 328);
          v352 = (char *)v350 - (char *)v351;
          v353 = (unint64_t)((char *)v350 - (char *)v351) >> 3;
          v380 = (v353 - (v356 + v355));
          v354 = *(_DWORD *)(a2 + 324) + v357;
        }
        else
        {
          v354 += v357;
          v380 = (v353 - (v355 + v356));
          v379 = a2;
        }
        v356 += v357;
        v512 = v353 - v355;
        if (v380 < v357)
          v356 = v512;
        *(_DWORD *)(v379 + 328) = v356;
        *(_DWORD *)(v379 + 324) = v354;
      }
      v513 = (v352 >> 3) - v354;
      v514 = v513 - v349;
      if (v513 > v349)
      {
        v434 = a2;
        if (*(_BYTE *)(a2 + 332))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1105;
          }
          v434 = a2;
          v351 = *(uint64_t **)(a2 + 272);
          v350 = *(uint64_t **)(a2 + 280);
          v355 = *(_DWORD *)(a2 + 320);
          v356 = *(_DWORD *)(a2 + 328);
          v354 = *(_DWORD *)(a2 + 324);
        }
        v515 = (unint64_t)((char *)v350 - (char *)v351) >> 3;
        v516 = (v515 - (v355 + v356));
        v517 = v356 + v514;
        v518 = v515 - v355;
        if (v516 >= v514)
          v518 = v517;
        *(_DWORD *)(v434 + 328) = v518;
        v511 = v354 + v514;
        goto LABEL_637;
      }
      goto LABEL_638;
    }
    if (*(_BYTE *)(a2 + 332))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 163, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1105;
      }
      v351 = *(uint64_t **)(a2 + 272);
      v350 = *(uint64_t **)(a2 + 280);
      v354 = *(_DWORD *)(a2 + 324);
      v352 = (char *)v350 - (char *)v351;
    }
    _ZF = v351 == v350;
    v359 = v352 >> 3;
    v361 = !_ZF && v351 != 0;
    v362 = v359 - v354;
    if (v359 != v354
      && (v361 & 1) == 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| v362 < v358&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 474, (uint64_t)"offset + count <= size()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1105;
    }
    if ((v361 & 1) == 0)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1105;
      }
      v351 = 0;
    }
    LOBYTE(STACK[0xC58]) = 0;
    if (v358 < v298
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/FeatureFilterTransforms.hpp", 276, (uint64_t)"max_num_point_feature_large_scale <= valid_feature_size", 55, (uint64_t)"max_num_point_feature_large_scale size invalid", 46, (void (*)(void **))sub_21023DDB0))
    {
LABEL_1105:
      abort();
    }
    v363 = &v351[v298];
    v364 = &v351[v358];
    if ((_DWORD)v358 == v298)
    {
LABEL_412:
      STACK[0x10D0] = (unint64_t)&STACK[0xC58];
      STACK[0x10D8] = (unint64_t)&STACK[0xFF0];
      v365 = 126 - 2 * __clz(v298);
      if (v298)
        v366 = v365;
      else
        v366 = 0;
      sub_20EEACE78(v351, &v351[v298], (uint64_t)&STACK[0x10D0], v366, 1);
      if (!v299)
        goto LABEL_418;
      LOBYTE(a79) = 0;
      v367 = &v351[v310];
      if ((_DWORD)v358 == v310)
      {
LABEL_417:
        STACK[0x10D0] = (unint64_t)&a79;
        STACK[0x10D8] = (unint64_t)&STACK[0xFF0];
        sub_20EEADF18(&v351[v298], v367, (uint64_t)&STACK[0x10D0], 126 - 2 * __clz(v367 - v363), 1);
LABEL_418:
        if (!v832)
        {
          v434 = a2;
          v436 = *(_QWORD *)(a2 + 272);
          v435 = *(_QWORD *)(a2 + 280);
          v369 = *(unsigned int *)(a2 + 324);
          v437 = ((v435 - v436) >> 3) - (v369 + v310);
LABEL_620:
          if (*(_BYTE *)(v434 + 332))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1105;
            }
            v434 = a2;
            v436 = *(_QWORD *)(a2 + 272);
            v435 = *(_QWORD *)(a2 + 280);
            LODWORD(v369) = *(_DWORD *)(a2 + 324);
          }
          v505 = (unint64_t)(v435 - v436) >> 3;
          v506 = *(_DWORD *)(v434 + 320);
          v507 = *(_DWORD *)(v434 + 328);
          v508 = (v505 - (v507 + v506));
          v509 = v507 + v437;
          v510 = v505 - v506;
          if (v508 >= v437)
            v510 = v509;
          *(_DWORD *)(v434 + 328) = v510;
          v511 = v369 + v437;
LABEL_637:
          *(_DWORD *)(v434 + 324) = v511;
          goto LABEL_638;
        }
        v368 = *(_DWORD *)(a2 + 320);
        LODWORD(v369) = *(_DWORD *)(a2 + 324);
        if (v368 - (int)v369 + *(_DWORD *)(a2 + 328) >= v825)
        {
          v370 = a2;
        }
        else
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 170, (uint64_t)"amt <= active_reg_idx", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1105;
          }
          v370 = a2;
          v368 = *(_DWORD *)(a2 + 320);
          LODWORD(v369) = *(_DWORD *)(a2 + 324);
        }
        *(_DWORD *)(v370 + 320) = v368 - v825;
        v503 = v370 + 272;
        v436 = *(_QWORD *)(v370 + 272);
        v435 = *(_QWORD *)(v503 + 8);
        v504 = ((v435 - v436) >> 3) - v369;
        v437 = v504 - v349;
        if (v504 > v349)
        {
          v434 = a2;
          goto LABEL_620;
        }
LABEL_638:
        v317 = vars8c;
        goto LABEL_639;
      }
      v451 = STACK[0xFF0];
      v452 = &v351[v298];
      while (1)
      {
        v453 = v364 - v452;
        if (v453 < 2)
          goto LABEL_417;
        if (v453 == 3)
        {
          v782 = *v452;
          v783 = v452[1];
          v784 = *(float *)(v451 + 24 * v783 + 20);
          v785 = *(float *)(v451 + 24 * *v452 + 20);
          v786 = *(v364 - 1);
          v787 = *(float *)(v451 + 24 * v786 + 20);
          if (v784 <= v785)
          {
            if (v787 > v784)
            {
              v452[1] = v786;
              *(v364 - 1) = v783;
              v801 = *v452;
              v800 = v452[1];
              if (*(float *)(v451 + 24 * v800 + 20) > *(float *)(v451 + 24 * *v452 + 20))
              {
                *v452 = v800;
                v452[1] = v801;
              }
            }
          }
          else if (v787 <= v784)
          {
            *v452 = v783;
            v452[1] = v782;
            v803 = *(v364 - 1);
            if (*(float *)(v451 + 24 * v803 + 20) > v785)
            {
              v452[1] = v803;
              *(v364 - 1) = v782;
            }
          }
          else
          {
            *v452 = v786;
            *(v364 - 1) = v782;
          }
          goto LABEL_417;
        }
        if (v453 == 2)
        {
          v780 = *(v364 - 1);
          v781 = *v452;
          if (*(float *)(v451 + 24 * v780 + 20) > *(float *)(v451 + 24 * *v452 + 20))
          {
            *v452 = v780;
            *(v364 - 1) = v781;
          }
          goto LABEL_417;
        }
        if ((char *)v364 - (char *)v452 <= 63)
        {
          if (v364 - 1 != v452)
          {
            v788 = STACK[0xFF0];
            do
            {
              if (v452 != v364)
              {
                v789 = v452 + 1;
                if (v452 + 1 != v364)
                {
                  v790 = *v452;
                  v791 = *v452;
                  v792 = v452;
                  v793 = v452 + 1;
                  do
                  {
                    v795 = *v793++;
                    v794 = v795;
                    if (*(float *)(v788 + 24 * v795 + 20) > *(float *)(v788 + 24 * v791 + 20))
                    {
                      v791 = v794;
                      v792 = v789;
                    }
                    v789 = v793;
                  }
                  while (v793 != v364);
                  if (v792 != v452)
                  {
                    *v452 = *v792;
                    *v792 = v790;
                  }
                }
              }
              ++v452;
            }
            while (v452 != v364 - 1);
          }
          goto LABEL_417;
        }
        v454 = &v452[v453 >> 1];
        v455 = v364 - 1;
        v456 = *(v364 - 1);
        v457 = *v454;
        v458 = *v452;
        v459 = *(float *)(v451 + 24 * *v454 + 20);
        v460 = *(float *)(v451 + 24 * *v452 + 20);
        v461 = *(float *)(v451 + 24 * v456 + 20);
        if (v459 > v460)
          break;
        if (v461 > v459)
        {
          *v454 = v456;
          *v455 = v457;
          v462 = *v452;
          if (*(float *)(v451 + 24 * *v454 + 20) > *(float *)(v451 + 24 * *v452 + 20))
          {
            *v452 = *v454;
            *v454 = v462;
LABEL_551:
            v463 = 2;
            goto LABEL_554;
          }
          goto LABEL_552;
        }
        v463 = 0;
LABEL_554:
        v464 = *v452;
        v465 = *(float *)(v451 + 24 * *v452 + 20);
        v466 = *(float *)(v451 + 24 * *v454 + 20);
        if (v465 <= v466)
        {
          v467 = v364 - 1;
          while (--v467 != v452)
          {
            if (*(float *)(v451 + 24 * *v467 + 20) > v466)
            {
              *v452 = *v467;
              *v467 = v464;
              ++v463;
              goto LABEL_560;
            }
          }
          v479 = v452 + 1;
          if (v465 <= *(float *)(v451 + 24 * *v455 + 20))
          {
            if (v479 == v455)
              goto LABEL_417;
            while (1)
            {
              v480 = *v479;
              if (v465 > *(float *)(v451 + 24 * *v479 + 20))
                break;
              if (++v479 == v455)
                goto LABEL_417;
            }
            *v479++ = *v455;
            *v455 = v480;
          }
          if (v479 == v455)
            goto LABEL_417;
          while (1)
          {
            v484 = *(float *)(v451 + 24 * *v452 + 20);
            do
            {
              v486 = *v479++;
              v485 = v486;
            }
            while (v484 <= *(float *)(v451 + 24 * v486 + 20));
            v487 = v479 - 1;
            do
            {
              v489 = *--v455;
              v488 = v489;
            }
            while (v484 > *(float *)(v451 + 24 * v489 + 20));
            if (v487 >= v455)
              break;
            *v487 = v488;
            *v455 = v485;
          }
          v452 = v479 - 1;
          if (v487 > v367)
            goto LABEL_417;
        }
        else
        {
          v467 = v364 - 1;
LABEL_560:
          v468 = v452 + 1;
          if (v452 + 1 >= v467)
          {
            v473 = v452 + 1;
          }
          else
          {
            v469 = v452 + 1;
            while (1)
            {
              v470 = *(float *)(v451 + 24 * *v454 + 20);
              do
              {
                v472 = *v469++;
                v471 = v472;
              }
              while (*(float *)(v451 + 24 * v472 + 20) > v470);
              v473 = v469 - 1;
              do
              {
                v475 = *--v467;
                v474 = v475;
              }
              while (*(float *)(v451 + 24 * v475 + 20) <= v470);
              if (v473 >= v467)
                break;
              *v473 = v474;
              *v467 = v471;
              ++v463;
              if (v473 == v454)
                v454 = v467;
            }
          }
          if (v473 != v454)
          {
            v476 = *v473;
            if (*(float *)(v451 + 24 * *v454 + 20) > *(float *)(v451 + 24 * *v473 + 20))
            {
              *v473 = *v454;
              *v454 = v476;
              ++v463;
            }
          }
          if (v473 == v367)
            goto LABEL_417;
          if (!v463)
          {
            if (v473 <= v367)
            {
              v481 = v473 + 1;
              while (v481 != v364)
              {
                v482 = *(float *)(v451 + 24 * *v481 + 20);
                v483 = *(float *)(v451 + 24 * *(v481++ - 1) + 20);
                if (v482 > v483)
                  goto LABEL_576;
              }
            }
            else
            {
              while (v468 != v473)
              {
                v477 = *(float *)(v451 + 24 * *v468 + 20);
                v478 = *(float *)(v451 + 24 * *(v468++ - 1) + 20);
                if (v477 > v478)
                  goto LABEL_576;
              }
            }
            goto LABEL_417;
          }
LABEL_576:
          if (v473 > v367)
            v364 = v473;
          else
            v452 = v473 + 1;
        }
        if (v364 == v367)
          goto LABEL_417;
      }
      if (v461 <= v459)
      {
        *v452 = v457;
        *v454 = v458;
        if (*(float *)(v451 + 24 * *v455 + 20) > v460)
        {
          *v454 = *v455;
          *v455 = v458;
          goto LABEL_551;
        }
      }
      else
      {
        *v452 = v456;
        *v455 = v458;
      }
LABEL_552:
      v463 = 1;
      goto LABEL_554;
    }
    v395 = &v351[v358];
    v396 = v351;
    while (1)
    {
      v397 = v395 - v396;
      if (v397 < 2)
        goto LABEL_412;
      if (v397 == 3)
      {
        v765 = *v396;
        v766 = v396[1];
        v767 = STACK[0xFF0];
        v768 = *(float *)(STACK[0xFF0] + 24 * v766 + 12);
        v769 = *(float *)(STACK[0xFF0] + 24 * *v396 + 12);
        v770 = *(v395 - 1);
        v771 = *(float *)(STACK[0xFF0] + 24 * v770 + 12);
        if (v768 <= v769)
        {
          if (v771 > v768)
          {
            v396[1] = v770;
            *(v395 - 1) = v766;
            v799 = *v396;
            v798 = v396[1];
            if (*(float *)(v767 + 24 * v798 + 12) > *(float *)(v767 + 24 * *v396 + 12))
            {
              *v396 = v798;
              v396[1] = v799;
            }
          }
        }
        else if (v771 <= v768)
        {
          *v396 = v766;
          v396[1] = v765;
          v802 = *(v395 - 1);
          if (*(float *)(v767 + 24 * v802 + 12) > v769)
          {
            v396[1] = v802;
            *(v395 - 1) = v765;
          }
        }
        else
        {
          *v396 = v770;
          *(v395 - 1) = v765;
        }
        goto LABEL_412;
      }
      if (v397 == 2)
      {
        v763 = *(v395 - 1);
        v764 = *v396;
        if (*(float *)(STACK[0xFF0] + 24 * v763 + 12) > *(float *)(STACK[0xFF0] + 24 * *v396 + 12))
        {
          *v396 = v763;
          *(v395 - 1) = v764;
        }
        goto LABEL_412;
      }
      if ((char *)v395 - (char *)v396 <= 63)
      {
        if (v395 - 1 != v396)
        {
          v772 = STACK[0xFF0];
          do
          {
            if (v396 != v395)
            {
              v773 = v396 + 1;
              if (v396 + 1 != v395)
              {
                v774 = *v396;
                v775 = *v396;
                v776 = v396;
                v777 = v396 + 1;
                do
                {
                  v779 = *v777++;
                  v778 = v779;
                  if (*(float *)(v772 + 24 * v779 + 12) > *(float *)(v772 + 24 * v775 + 12))
                  {
                    v775 = v778;
                    v776 = v773;
                  }
                  v773 = v777;
                }
                while (v777 != v395);
                if (v776 != v396)
                {
                  *v396 = *v776;
                  *v776 = v774;
                }
              }
            }
            ++v396;
          }
          while (v396 != v395 - 1);
        }
        goto LABEL_412;
      }
      v398 = &v396[v397 >> 1];
      v399 = v395 - 1;
      v400 = *(v395 - 1);
      v401 = *v398;
      v402 = *v396;
      v403 = *(float *)(v293 + 24 * *v398 + 12);
      v404 = *(float *)(v293 + 24 * *v396 + 12);
      v405 = *(float *)(v293 + 24 * v400 + 12);
      if (v403 > v404)
        break;
      if (v405 > v403)
      {
        *v398 = v400;
        *v399 = v401;
        v406 = *v396;
        if (*(float *)(v293 + 24 * *v398 + 12) > *(float *)(v293 + 24 * *v396 + 12))
        {
          *v396 = *v398;
          *v398 = v406;
LABEL_469:
          v407 = 2;
          goto LABEL_472;
        }
        goto LABEL_470;
      }
      v407 = 0;
LABEL_472:
      v408 = *v396;
      v409 = *(float *)(v293 + 24 * *v396 + 12);
      v410 = *(float *)(v293 + 24 * *v398 + 12);
      if (v409 <= v410)
      {
        v411 = v395 - 1;
        while (--v411 != v396)
        {
          if (*(float *)(v293 + 24 * *v411 + 12) > v410)
          {
            *v396 = *v411;
            *v411 = v408;
            ++v407;
            goto LABEL_478;
          }
        }
        v423 = v396 + 1;
        if (v409 <= *(float *)(v293 + 24 * *v399 + 12))
        {
          if (v423 == v399)
            goto LABEL_412;
          while (1)
          {
            v424 = *v423;
            if (v409 > *(float *)(v293 + 24 * *v423 + 12))
              break;
            if (++v423 == v399)
              goto LABEL_412;
          }
          *v423++ = *v399;
          *v399 = v424;
        }
        if (v423 == v399)
          goto LABEL_412;
        while (1)
        {
          v428 = *(float *)(v293 + 24 * *v396 + 12);
          do
          {
            v430 = *v423++;
            v429 = v430;
          }
          while (v428 <= *(float *)(v293 + 24 * v430 + 12));
          v431 = v423 - 1;
          do
          {
            v433 = *--v399;
            v432 = v433;
          }
          while (v428 > *(float *)(v293 + 24 * v433 + 12));
          if (v431 >= v399)
            break;
          *v431 = v432;
          *v399 = v429;
        }
        v396 = v423 - 1;
        if (v431 > v363)
          goto LABEL_412;
      }
      else
      {
        v411 = v395 - 1;
LABEL_478:
        v412 = v396 + 1;
        if (v396 + 1 >= v411)
        {
          v417 = v396 + 1;
        }
        else
        {
          v413 = v396 + 1;
          while (1)
          {
            v414 = *(float *)(v293 + 24 * *v398 + 12);
            do
            {
              v416 = *v413++;
              v415 = v416;
            }
            while (*(float *)(v293 + 24 * v416 + 12) > v414);
            v417 = v413 - 1;
            do
            {
              v419 = *--v411;
              v418 = v419;
            }
            while (*(float *)(v293 + 24 * v419 + 12) <= v414);
            if (v417 >= v411)
              break;
            *v417 = v418;
            *v411 = v415;
            ++v407;
            if (v417 == v398)
              v398 = v411;
          }
        }
        if (v417 != v398)
        {
          v420 = *v417;
          if (*(float *)(v293 + 24 * *v398 + 12) > *(float *)(v293 + 24 * *v417 + 12))
          {
            *v417 = *v398;
            *v398 = v420;
            ++v407;
          }
        }
        if (v417 == v363)
          goto LABEL_412;
        if (!v407)
        {
          if (v417 <= v363)
          {
            v425 = v417 + 1;
            while (v425 != v395)
            {
              v426 = *(float *)(v293 + 24 * *v425 + 12);
              v427 = *(float *)(v293 + 24 * *(v425++ - 1) + 12);
              if (v426 > v427)
                goto LABEL_494;
            }
          }
          else
          {
            while (v412 != v417)
            {
              v421 = *(float *)(v293 + 24 * *v412 + 12);
              v422 = *(float *)(v293 + 24 * *(v412++ - 1) + 12);
              if (v421 > v422)
                goto LABEL_494;
            }
          }
          goto LABEL_412;
        }
LABEL_494:
        if (v417 > v363)
          v395 = v417;
        else
          v396 = v417 + 1;
      }
      if (v395 == v363)
        goto LABEL_412;
    }
    if (v405 <= v403)
    {
      *v396 = v401;
      *v398 = v402;
      if (*(float *)(v293 + 24 * *v399 + 12) > v404)
      {
        *v398 = *v399;
        *v399 = v402;
        goto LABEL_469;
      }
    }
    else
    {
      *v396 = v400;
      *v399 = v402;
    }
LABEL_470:
    v407 = 1;
    goto LABEL_472;
  }
LABEL_338:
  v312 = *(_QWORD *)(v308 + 272);
  v311 = *(_QWORD *)(v308 + 280);
  v313 = (unint64_t)(v311 - v312) >> 3;
  if ((_DWORD)v313 == *(_DWORD *)(v308 + 328) + *(_DWORD *)(v308 + 320))
  {
    v314 = *(_DWORD *)(a2 + 324);
    v318 = v313 - v314;
    v316 = v318 - v310;
    v317 = vars8c;
    if (v318 > v310)
      goto LABEL_343;
    goto LABEL_639;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/FeatureFilterTransforms.hpp", 208, (uint64_t)"indices.get_num_reloc() == 0u", 29, (uint64_t)"Camera streams used for reloc should have sufficient num target features.", 73, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_1105;
  }
  v312 = *(_QWORD *)(a2 + 272);
  v311 = *(_QWORD *)(a2 + 280);
  v314 = *(_DWORD *)(a2 + 324);
  v315 = ((unint64_t)(v311 - v312) >> 3) - v314;
  v316 = v315 - v310;
  v317 = vars8c;
  if (v315 <= v310)
    goto LABEL_639;
LABEL_343:
  if (*(_BYTE *)(a2 + 332))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v319 = (_DWORD *)a2;
    v312 = *(_QWORD *)(a2 + 272);
    v311 = *(_QWORD *)(a2 + 280);
    v314 = *(_DWORD *)(a2 + 324);
  }
  else
  {
    v319 = (_DWORD *)a2;
  }
  v373 = (unint64_t)(v311 - v312) >> 3;
  v374 = v319[80];
  v375 = v319[82];
  v376 = (v373 - (v375 + v374));
  v377 = v375 + v316;
  v378 = v373 - v374;
  if (v376 >= v316)
    v378 = v377;
  v319[82] = v378;
  v319[81] = v314 + v316;
LABEL_639:
  sub_20EEA55F4(&STACK[0xCC8]);
  v519 = STACK[0xCC8];
  if (**(int **)(STACK[0xCC8] + 56) > 3)
    goto LABEL_737;
  v520 = *(unsigned __int8 *)(v519 + 72);
  v521 = sub_20E8C31DC(v519, "OSLogSurrogateAppender", 1, 0);
  v522 = v521;
  if (!v520 && !v521)
    goto LABEL_737;
  STACK[0xFF0] = (unint64_t)&STACK[0xCC8];
  STACK[0xFF8] = std::chrono::steady_clock::now().__d_.__rep_;
  STACK[0x1000] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(STACK[0x1008]) = 3;
  STACK[0x1010] = (unint64_t)"unknown file";
  LODWORD(STACK[0x1018]) = 229;
  STACK[0x1028] = 0;
  STACK[0x1030] = 0;
  STACK[0x1020] = (unint64_t)"unknown function";
  if (*v844 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_1112;
  }
  LODWORD(v523) = *(_DWORD *)(v848 + 396);
  if (v523 < 0x10000)
    goto LABEL_647;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_1112:
    abort();
  }
  LOWORD(v523) = *(_WORD *)(v848 + 396);
LABEL_647:
  v524 = *(_QWORD *)STACK[0xFF0];
  v811 = v524;
  if (*(char *)(v524 + 39) < 0)
  {
    v526 = *(const char **)(v524 + 16);
    v525 = *(_QWORD *)(v524 + 24);
  }
  else
  {
    v525 = *(unsigned __int8 *)(v524 + 39);
    v526 = (const char *)(v524 + 16);
  }
  v809 = v524 + 16;
  v820 = *(_QWORD *)(a2 + 280);
  v815 = *(_QWORD *)(a2 + 272);
  v818 = *(_DWORD *)(a2 + 320);
  v813 = *(_DWORD *)(a2 + 328);
  v826 = *(unsigned int *)(a2 + 324);
  v833 = *v844;
  v527 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v527 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&STACK[0x10D0]);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&STACK[0x10D0]);
    if (LOBYTE(STACK[0x10E8]) && SLOBYTE(STACK[0x10E7]) < 0)
      operator delete((void *)STACK[0x10D0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v528 = byte_254A4A4F8;
  else
    v528 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v529 = byte_254A4A4F8[23];
  else
    v529 = *(_QWORD *)&byte_254A4A4F8[8];
  STACK[0x10D0] = (unint64_t)os_log_create(v528, v526);
  v530 = &STACK[0x10D8];
  if (v529 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v529 >= 0x17)
  {
    v531 = v526;
    v532 = v523;
    v523 = v522;
    v533 = v520;
    v534 = (v529 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v529 | 7) != 0x17)
      v534 = v529 | 7;
    v535 = v534 + 1;
    v530 = (unint64_t *)operator new(v534 + 1);
    STACK[0x10E0] = v529;
    STACK[0x10E8] = v535 | 0x8000000000000000;
    STACK[0x10D8] = (unint64_t)v530;
    v520 = v533;
    v522 = v523;
    LOWORD(v523) = v532;
    v526 = v531;
    goto LABEL_664;
  }
  LOBYTE(STACK[0x10EF]) = v529;
  if (v529)
LABEL_664:
    memmove(v530, v528, v529);
  *((_BYTE *)v530 + v529) = 0;
  LOBYTE(STACK[0x10F0]) = 1;
  v536 = &STACK[0x10F8];
  if (v525 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v525 >= 0x17)
  {
    v537 = (v525 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v525 | 7) != 0x17)
      v537 = v525 | 7;
    v538 = v537 + 1;
    v536 = (unint64_t *)operator new(v537 + 1);
    STACK[0x1100] = v525;
    STACK[0x1108] = v538 | 0x8000000000000000;
    STACK[0x10F8] = (unint64_t)v536;
    goto LABEL_672;
  }
  LOBYTE(STACK[0x110F]) = v525;
  if (v525)
LABEL_672:
    memmove(v536, v526, v525);
  *((_BYTE *)v536 + v525) = 0;
  LOBYTE(STACK[0x1110]) = 1;
  v539 = STACK[0x10D0];
  if (SLOBYTE(STACK[0x110F]) < 0)
    operator delete((void *)STACK[0x10F8]);
  v317 = vars8c;
  if (LOBYTE(STACK[0x10F0]) && SLOBYTE(STACK[0x10EF]) < 0)
    operator delete((void *)STACK[0x10D8]);
  if (STACK[0x10D0])
    os_release((void *)STACK[0x10D0]);
  v540 = (unsigned __int16)v523 | ((unsigned __int16)v833 << 16);
  v541 = ((v820 - v815) >> 3) - v826 - (((unint64_t)(v820 - v815) >> 3) - (v818 + v813));
  if (v522 && *(_QWORD *)(v522 + 24))
  {
    v542 = _os_log_pack_size();
    v543 = (std::__shared_weak_count_vtbl *)operator new(v542, (std::align_val_t)8uLL);
    v544 = (std::__shared_weak_count *)operator new();
    v545 = v544;
    v544->__shared_owners_ = 0;
    v546 = (unint64_t *)&v544->__shared_owners_;
    v544->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v544->__shared_weak_owners_ = 0;
    v544[1].__vftable = v543;
    STACK[0x10D0] = (unint64_t)v543;
    STACK[0x10D8] = (unint64_t)v543;
    STACK[0x10E0] = (unint64_t)v544;
    do
      v547 = __ldxr(v546);
    while (__stxr(v547 + 1, v546));
    STACK[0x10E8] = 0;
    STACK[0x10F0] = 0;
    STACK[0x10F8] = 0;
    do
      v548 = __ldaxr(v546);
    while (__stlxr(v548 - 1, v546));
    if (!v548)
    {
      ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
      std::__shared_weak_count::__release_weak(v545);
    }
    v549 = STACK[0x10D0];
    v550 = _os_log_pack_fill();
    *(_DWORD *)v550 = 67109376;
    *(_DWORD *)(v550 + 4) = v540;
    *(_WORD *)(v550 + 8) = 2048;
    *(_QWORD *)(v550 + 10) = v541;
    v551 = operator new();
    v552 = *(unsigned __int8 *)(v811 + 39);
    v553 = v809;
    if ((v552 & 0x80u) != 0)
    {
      v553 = *(_QWORD *)(v811 + 16);
      v552 = *(_QWORD *)(v811 + 24);
    }
    *(_QWORD *)v551 = v549;
    *(_OWORD *)(v551 + 8) = *(_OWORD *)&STACK[0x10D8];
    STACK[0x10D8] = 0;
    STACK[0x10E0] = 0;
    *(_OWORD *)(v551 + 24) = *(_OWORD *)&STACK[0x10E8];
    STACK[0x10E8] = 0;
    STACK[0x10F0] = 0;
    *(_QWORD *)(v551 + 40) = v553;
    *(_QWORD *)(v551 + 48) = v552;
    *(_BYTE *)(v551 + 56) = 1;
    *(_QWORD *)&a79 = 0;
    STACK[0xC58] = v551;
    (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(v522 + 24) + 40))(*(_QWORD *)(v522 + 24), &STACK[0xC58]);
    v554 = STACK[0xC58];
    STACK[0xC58] = 0;
    v317 = vars8c;
    if (v554)
    {
      v555 = *(std::__shared_weak_count **)(v554 + 32);
      if (v555)
      {
        v556 = (unint64_t *)&v555->__shared_owners_;
        do
          v557 = __ldaxr(v556);
        while (__stlxr(v557 - 1, v556));
        if (!v557)
        {
          ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
          std::__shared_weak_count::__release_weak(v555);
        }
      }
      v558 = *(std::__shared_weak_count **)(v554 + 16);
      if (v558)
      {
        v559 = (unint64_t *)&v558->__shared_owners_;
        do
          v560 = __ldaxr(v559);
        while (__stlxr(v560 - 1, v559));
        if (!v560)
        {
          ((void (*)(std::__shared_weak_count *))v558->__on_zero_shared)(v558);
          std::__shared_weak_count::__release_weak(v558);
        }
      }
      MEMORY[0x212BC6398](v554, 0x10F0C40B62ED6C6);
      v561 = a79;
      *(_QWORD *)&a79 = 0;
      if (v561)
      {
        v562 = *(std::__shared_weak_count **)(v561 + 32);
        if (v562)
        {
          v563 = (unint64_t *)&v562->__shared_owners_;
          do
            v564 = __ldaxr(v563);
          while (__stlxr(v564 - 1, v563));
          if (!v564)
          {
            ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
            std::__shared_weak_count::__release_weak(v562);
          }
        }
        v565 = *(std::__shared_weak_count **)(v561 + 16);
        if (v565)
        {
          v566 = (unint64_t *)&v565->__shared_owners_;
          do
            v567 = __ldaxr(v566);
          while (__stlxr(v567 - 1, v566));
          if (!v567)
          {
            ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
            std::__shared_weak_count::__release_weak(v565);
          }
        }
        MEMORY[0x212BC6398](v561, 0x10F0C40B62ED6C6);
      }
    }
    v568 = (std::__shared_weak_count *)STACK[0x10F0];
    if (STACK[0x10F0])
    {
      v569 = (unint64_t *)&v568->__shared_owners_;
      do
        v570 = __ldaxr(v569);
      while (__stlxr(v570 - 1, v569));
      if (!v570)
      {
        ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
        std::__shared_weak_count::__release_weak(v568);
      }
    }
    v571 = (std::__shared_weak_count *)STACK[0x10E0];
    if (STACK[0x10E0])
    {
      v572 = (unint64_t *)&v571->__shared_owners_;
      do
        v573 = __ldaxr(v572);
      while (__stlxr(v573 - 1, v572));
      if (!v573)
      {
        ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
        std::__shared_weak_count::__release_weak(v571);
      }
    }
  }
  else
  {
    os_log_type_enabled(v539, OS_LOG_TYPE_INFO);
    LODWORD(STACK[0x10D0]) = 67109376;
    LODWORD(STACK[0x10D4]) = v540;
    LOWORD(STACK[0x10D8]) = 2048;
    STACK[0x10DA] = v541;
    v574 = (void *)_os_log_send_and_compose_impl();
    if (v574)
      free(v574);
  }
  if (v520)
  {
    if (*v844 >= 0x10000
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1131;
    }
    v575 = *(_DWORD *)(v848 + 396);
    if (v575 < 0x10000)
      goto LABEL_731;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
LABEL_1131:
      abort();
    }
    LOWORD(v575) = *(_WORD *)(v848 + 396);
LABEL_731:
    v576 = *(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272);
    sub_20E8C003C((uint64_t)&STACK[0xFF0], "[FeatureFilterTransform] Camera %u: Num features after pruning: %lu", (unsigned __int16)v575 | ((unsigned __int16)*v844 << 16), (v576 >> 3)- *(unsigned int *)(a2 + 324)- (((unint64_t)v576 >> 3)- (*(_DWORD *)(a2 + 320)+ *(_DWORD *)(a2 + 328))));
    sub_20E863570((uint64_t)&STACK[0xFF0]);
  }
  sub_20E863570((uint64_t)&STACK[0xFF0]);
  v577 = (std::__shared_weak_count *)STACK[0x1030];
  if (STACK[0x1030])
  {
    v578 = (unint64_t *)&v577->__shared_owners_;
    do
      v579 = __ldaxr(v578);
    while (__stlxr(v579 - 1, v578));
    if (!v579)
    {
      ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
      std::__shared_weak_count::__release_weak(v577);
    }
  }
LABEL_737:
  kdebug_trace();
  v307 = v317 & 0xFFFFFF00;
  v306 = v317;
  v305 = 1;
LABEL_738:
  kdebug_trace();
  v304 = v307 | v306;
LABEL_739:
  kdebug_trace();
  sub_20EE9BD2C(v848);
  v580 = *v843;
  v581 = *(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272);
  v582 = *(_DWORD *)(a2 + 324);
  *(_QWORD *)&v583 = a30;
  *((_QWORD *)&v583 + 1) = a31;
  v585 = (uint64_t *)(*v843 + 56);
  v584 = *v585;
  *(_OWORD *)v580 = v583;
  *(_QWORD *)(v580 + 64) = v584;
  *(_QWORD *)(v580 + 88) = *(_QWORD *)(v580 + 80);
  *(_QWORD *)(v580 + 168) = *(_QWORD *)(v580 + 160);
  *(_BYTE *)(v580 + 184) = 0;
  *(_QWORD *)(v580 + 16) = 0;
  *(_QWORD *)(v580 + 32) = 0;
  if (*(_BYTE *)(v580 + 48))
    *(_BYTE *)(v580 + 48) = 0;
  v586 = v581 >> 3;
  v587 = (v586 - v582);
  if ((_DWORD)v586 != v582)
  {
    sub_20EDD53A4((_QWORD *)v580, (v586 - v582));
    if (!*(_BYTE *)(a2 + 332)
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 157, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
    {
      v588 = *(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272);
      v589 = v588 ? *(_QWORD **)(a2 + 272) : 0;
      v590 = v588 >> 3;
      v591 = *(unsigned int *)(a2 + 324);
      if (v589
        || v590 == v591
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        if (v590 != v591)
        {
          v592 = 8 * v590 - 8 * v591;
          v593 = v589;
          do
          {
            v594 = a68 + 24 * *v593;
            sub_20EDBB704((uint64_t)v585, (__int32 *)v594, (__int32 *)(v594 + 4), (__int32 *)(v594 + 8), (__int32 *)(v594 + 12), (__int8 *)(v594 + 16), (__int32 *)(v594 + 20));
            ++v593;
            v592 -= 8;
          }
          while (v592);
        }
        v595 = *(_QWORD *)(v580 + 80);
        v596 = (*(_QWORD *)(v580 + 88) - v595) >> 6;
        if (v587 <= v596)
        {
          if (v587 < v596)
            *(_QWORD *)(v580 + 88) = v595 + (v587 << 6);
        }
        else
        {
          sub_20ED406CC((char **)(v580 + 80), v587 - v596);
        }
        v597 = a2;
        v598 = *(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272);
        v599 = *(unsigned int *)(a2 + 324);
        v600 = (v598 >> 3) - v599;
        if (v598 >> 3 != v599)
        {
          v601 = 0;
          do
          {
            v602 = (_OWORD *)(*(_QWORD *)(v580 + 80) + 1 * v601);
            v603 = (__int128 *)(a69 + (v589[v601] << 6));
            v604 = *v603;
            v605 = v603[1];
            v606 = v603[3];
            v602[2] = v603[2];
            v602[3] = v606;
            *v602 = v604;
            v602[1] = v605;
            ++v601;
            --v600;
          }
          while (v600);
          v597 = a2;
          v598 = *(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272);
        }
        *(_QWORD *)(v580 + 16) = ((unint64_t)v598 >> 3)
                               - (*(_DWORD *)(v597 + 320)
                                + *(_DWORD *)(v597 + 328));
        goto LABEL_762;
      }
    }
LABEL_1093:
    abort();
  }
LABEL_762:
  kdebug_trace();
  sub_20EE9BD2C(v848);
  v607 = *v843;
  *(_QWORD *)(*v843 + 32) = v847 - v842;
  if (v305)
  {
    *(_QWORD *)(v607 + 40) = v304;
    *(_BYTE *)(v607 + 48) = 1;
    v607 = *v843;
  }
  if (*(_BYTE *)(v607 + 184))
  {
    v608 = *(_QWORD *)(v607 + 88) - *(_QWORD *)(v607 + 80);
    if (!v608)
      goto LABEL_772;
    if (v608 != *(_QWORD *)(v607 + 168) - *(_QWORD *)(v607 + 160))
      goto LABEL_772;
    v609 = (uint64_t)(*(_QWORD *)(v607 + 64) - *(_QWORD *)(v607 + 56)) >> 5;
    if (v609 != v608 >> 6)
      goto LABEL_772;
LABEL_771:
    if (*(_QWORD *)(v607 + 16) > v609)
      goto LABEL_772;
  }
  else
  {
    if (*(_QWORD *)(v607 + 160) == *(_QWORD *)(v607 + 168))
    {
      v609 = (uint64_t)(*(_QWORD *)(v607 + 64) - *(_QWORD *)(v607 + 56)) >> 5;
      if (v609 == (uint64_t)(*(_QWORD *)(v607 + 88) - *(_QWORD *)(v607 + 80)) >> 6)
        goto LABEL_771;
    }
LABEL_772:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1093;
    }
    v609 = (uint64_t)(*(_QWORD *)(v607 + 64) - *(_QWORD *)(v607 + 56)) >> 5;
  }
  sub_20EEB04B4(a2 + 728, v844, v822, v609);
  sub_20EEB0C64((_QWORD *)(a2 + 728), v844);
  v610 = v843[1];
  *a1 = *v843;
  a1[1] = v610;
  if (v610)
  {
    v611 = (unint64_t *)(v610 + 8);
    do
      v612 = __ldxr(v611);
    while (__stxr(v612 + 1, v611));
  }
  a65 = &off_24CA1A9A0;
  v613 = a67;
  if (a67)
  {
    v614 = (unint64_t *)&a67->__shared_owners_;
    do
      v615 = __ldaxr(v614);
    while (__stlxr(v615 - 1, v614));
    if (!v615)
    {
      ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
      std::__shared_weak_count::__release_weak(v613);
    }
  }
  a62 = &off_24CA1A9A0;
  v616 = a64;
  if (a64)
  {
    v617 = (unint64_t *)&a64->__shared_owners_;
    do
      v618 = __ldaxr(v617);
    while (__stlxr(v618 - 1, v617));
    if (!v618)
    {
      ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
      std::__shared_weak_count::__release_weak(v616);
    }
  }
  a59 = &off_24CA1A9A0;
  v619 = a61;
  if (a61)
  {
    v620 = (unint64_t *)&a61->__shared_owners_;
    do
      v621 = __ldaxr(v620);
    while (__stlxr(v621 - 1, v620));
    if (!v621)
    {
      ((void (*)(std::__shared_weak_count *))v619->__on_zero_shared)(v619);
      std::__shared_weak_count::__release_weak(v619);
    }
  }
  a56 = &off_24CA1A9A0;
  v622 = a58;
  if (a58)
  {
    v623 = (unint64_t *)&a58->__shared_owners_;
    do
      v624 = __ldaxr(v623);
    while (__stlxr(v624 - 1, v623));
    if (!v624)
    {
      ((void (*)(std::__shared_weak_count *))v622->__on_zero_shared)(v622);
      std::__shared_weak_count::__release_weak(v622);
    }
  }
  a53 = &off_24CA1A9A0;
  v625 = a55;
  if (a55)
  {
    v626 = (unint64_t *)&a55->__shared_owners_;
    do
      v627 = __ldaxr(v626);
    while (__stlxr(v627 - 1, v626));
    if (!v627)
    {
      ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
      std::__shared_weak_count::__release_weak(v625);
    }
  }
  a50 = &off_24CA1A9A0;
  v628 = a52;
  if (a52)
  {
    v629 = (unint64_t *)&a52->__shared_owners_;
    do
      v630 = __ldaxr(v629);
    while (__stlxr(v630 - 1, v629));
    if (!v630)
    {
      ((void (*)(std::__shared_weak_count *))v628->__on_zero_shared)(v628);
      std::__shared_weak_count::__release_weak(v628);
    }
  }
  a47 = &off_24CA1A9A0;
  v631 = a49;
  if (a49)
  {
    v632 = (unint64_t *)&a49->__shared_owners_;
    do
      v633 = __ldaxr(v632);
    while (__stlxr(v633 - 1, v632));
    if (!v633)
    {
      ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
      std::__shared_weak_count::__release_weak(v631);
    }
  }
  a44 = &off_24CA1A9A0;
  v634 = a46;
  if (a46)
  {
    v635 = (unint64_t *)&a46->__shared_owners_;
    do
      v636 = __ldaxr(v635);
    while (__stlxr(v636 - 1, v635));
    if (!v636)
    {
      ((void (*)(std::__shared_weak_count *))v634->__on_zero_shared)(v634);
      std::__shared_weak_count::__release_weak(v634);
    }
  }
  a41 = &off_24CA1A9A0;
  v637 = a43;
  if (a43)
  {
    v638 = (unint64_t *)&a43->__shared_owners_;
    do
      v639 = __ldaxr(v638);
    while (__stlxr(v639 - 1, v638));
    if (!v639)
    {
      ((void (*)(std::__shared_weak_count *))v637->__on_zero_shared)(v637);
      std::__shared_weak_count::__release_weak(v637);
    }
  }
  a38 = &off_24CA1A9A0;
  v640 = a40;
  if (a40)
  {
    v641 = (unint64_t *)&a40->__shared_owners_;
    do
      v642 = __ldaxr(v641);
    while (__stlxr(v642 - 1, v641));
    if (!v642)
    {
      ((void (*)(std::__shared_weak_count *))v640->__on_zero_shared)(v640);
      std::__shared_weak_count::__release_weak(v640);
    }
  }
  a35 = &off_24CA1A9A0;
  v643 = a37;
  if (a37)
  {
    v644 = (unint64_t *)&a37->__shared_owners_;
    do
      v645 = __ldaxr(v644);
    while (__stlxr(v645 - 1, v644));
    if (!v645)
    {
      ((void (*)(std::__shared_weak_count *))v643->__on_zero_shared)(v643);
      std::__shared_weak_count::__release_weak(v643);
    }
  }
  a32 = &off_24CA1A9A0;
  v646 = a34;
  if (a34)
  {
    v647 = (unint64_t *)&a34->__shared_owners_;
    do
      v648 = __ldaxr(v647);
    while (__stlxr(v648 - 1, v647));
    if (!v648)
    {
      ((void (*)(std::__shared_weak_count *))v646->__on_zero_shared)(v646);
      std::__shared_weak_count::__release_weak(v646);
    }
  }
  a72 = &off_24CA1A9A0;
  v649 = a74;
  if (a74)
  {
    v650 = (unint64_t *)&a74->__shared_owners_;
    do
      v651 = __ldaxr(v650);
    while (__stlxr(v651 - 1, v650));
    if (!v651)
    {
      ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
      std::__shared_weak_count::__release_weak(v649);
    }
  }
}

void sub_20EE9156C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  void **v37;

  if (SLOBYTE(STACK[0x7D7]) < 0)
  {
    operator delete(v37[46]);
    if ((SLOBYTE(STACK[0x7BF]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x7BF]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x7A7]) < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(v37[43]);
  if (SLOBYTE(STACK[0x7A7]) < 0)
  {
LABEL_4:
    operator delete(v37[40]);
    if ((SLOBYTE(STACK[0x78F]) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((SLOBYTE(STACK[0x78F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x777]) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37[37]);
  if (SLOBYTE(STACK[0x777]) < 0)
  {
LABEL_6:
    operator delete(v37[34]);
    if ((SLOBYTE(STACK[0x75F]) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((SLOBYTE(STACK[0x75F]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SLOBYTE(STACK[0x747]) & 0x80000000) == 0)
    {
LABEL_16:
      __cxa_guard_abort(&qword_254A5FAB0);
      if (SLOBYTE(STACK[0x667]) < 0)
        operator delete(*(void **)(v36 + 1008));
      if (SLOBYTE(STACK[0x297]) < 0)
        operator delete(*(void **)(v36 + 32));
      sub_20EE9F5B0(&a36);
      sub_21015D41C(&STACK[0x230]);
      _Unwind_Resume(a1);
    }
LABEL_15:
    operator delete(v37[28]);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(v37[31]);
  if ((SLOBYTE(STACK[0x747]) & 0x80000000) == 0)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_20EE91CF8(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int32x2_t v17;
  _OWORD *v18;
  uint64_t v19;
  int32x2_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  int32x2_t *v25;
  int32x2_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int32 *v29;
  __int32 *v30;
  __int32 *v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  double v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  int v52;
  std::string *v53;
  uint64_t v54;
  unsigned __int8 v55;
  std::__fs::filesystem::path::__string_view v56;
  _BYTE *v57;
  char *v58;
  std::basic_string_view<_CharT, _Traits>::size_type v59;
  std::basic_string_view<_CharT, _Traits>::size_type v60;
  unsigned __int8 v61;
  BOOL v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  const char *v68;
  size_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  std::ios_base *v82;
  std::__fs::filesystem::path::__string_view v83;
  _BYTE *v84;
  std::basic_string_view<_CharT, _Traits>::size_type v85;
  std::basic_string_view<_CharT, _Traits>::size_type v86;
  unsigned __int8 v87;
  BOOL v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int32x2_t *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  float64x2_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  int64_t v109;
  unint64_t v110;
  char *v111;
  int v112;
  float64x2_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  double v121;
  void *v122;
  int64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t i;
  char *v128;
  float64x2_t *v129;
  char *v130;
  uint64_t v131;
  uint64_t *v132;
  float *v133;
  float v134;
  float v135;
  float v136;
  unsigned __int8 v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _BYTE *v145;
  int64_t v146;
  unint64_t v147;
  char *v148;
  int v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  char *v154;
  uint64_t v155;
  __int128 v156;
  unint64_t v157;
  double v158;
  float v159;
  unint64_t v160;
  double v161;
  float v162;
  int v163;
  double v164;
  float v165;
  uint64_t v166;
  float v167;
  char v168;
  _QWORD *v169;
  _QWORD *v170;
  double v171;
  _QWORD *v172;
  double v173;
  unint64_t v174;
  uint64_t v175;
  _BYTE *v176;
  _BYTE *v177;
  int64_t v178;
  char *v179;
  char *v180;
  int8x16_t v181;
  int8x16_t v182;
  int32x4_t v184;
  unint64_t v187;
  std::string::size_type v188;
  unsigned int v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  float *v193;
  float v194;
  float v195;
  uint64_t v196;
  unsigned int v197;
  double v198;
  double v199;
  double v200;
  uint64_t v201;
  float64x2_t *v202;
  char *v203;
  uint64_t v204;
  std::__fs::filesystem::path *v205;
  float64x2_t *v206;
  uint64_t v207;
  float64x2_t *v208;
  char *v209;
  double *v210;
  uint64_t v211;
  char *v212;
  float64x2_t *v213;
  uint64_t v214;
  char v215;
  double *v216;
  double *v217;
  float64x2_t *v218;
  char *v219;
  uint64_t v220;
  double *v221;
  char *v222;
  uint64_t v223;
  double *v224;
  double v225;
  double v226;
  __int128 v227;
  float64x2_t v228;
  double *v231;
  double v232;
  double v233;
  float64x2_t v234;
  __int128 v235;
  int64x2_t v236;
  float64x2_t *v237;
  char *v238;
  uint64_t v239;
  double v240;
  double v241;
  double v242;
  uint64_t v243;
  int v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v248;
  uint64_t v249;
  const char *v250;
  size_t v251;
  unsigned __int8 v252;
  const char *v253;
  size_t v254;
  _BYTE *v255;
  unint64_t v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  NSObject *v266;
  uint64_t v267;
  size_t v268;
  std::__shared_weak_count_vtbl *v269;
  std::__shared_weak_count *v270;
  std::__shared_weak_count *v271;
  unint64_t *p_shared_owners;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  const char *v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  void *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::string::size_type size;
  uint64_t v305;
  void *v306;
  unint64_t v307;
  unint64_t *v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  double v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  double v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  int v341;
  unsigned int v342;
  unint64_t v343;
  unint64_t v344;
  float v345;
  unsigned int v346;
  unsigned int v347;
  double v348;
  unsigned int v349;
  double v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unsigned int v355;
  int v356;
  int v357;
  unsigned int v358;
  unint64_t v359;
  unsigned int v360;
  uint64_t v361;
  char v363;
  unint64_t v364;
  double v365;
  double v366;
  void *v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  unsigned int v371;
  _DWORD *v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unsigned int v378;
  int v379;
  int v380;
  unsigned int v381;
  unint64_t v382;
  uint64_t v383;
  char v385;
  unint64_t v386;
  char *v387;
  uint64_t *v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t *v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  int v398;
  int v399;
  unint64_t v400;
  int v401;
  int v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  _DWORD *v410;
  int v411;
  uint64_t v412;
  char *v413;
  char *v414;
  unint64_t v415;
  char *v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  float v421;
  float v422;
  float v423;
  uint64_t v424;
  int v425;
  uint64_t v426;
  float v427;
  float v428;
  char *v429;
  char *v430;
  uint64_t *v431;
  float v432;
  uint64_t v433;
  uint64_t v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  float v439;
  float v440;
  uint64_t *v441;
  uint64_t v442;
  char *v443;
  float v444;
  float v445;
  float v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  int v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  int v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t v464;
  unint64_t v465;
  int v466;
  int v467;
  int v468;
  uint64_t v469;
  uint64_t *v470;
  unint64_t v471;
  uint64_t *v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  float v477;
  float v478;
  float v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  float v483;
  float v484;
  uint64_t *v485;
  uint64_t *v486;
  uint64_t *v487;
  float v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  float v495;
  float v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t *v499;
  float v500;
  float v501;
  float v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  unint64_t v509;
  int v510;
  unint64_t v511;
  int v512;
  int v513;
  unint64_t v514;
  unint64_t v515;
  int v516;
  unint64_t v517;
  int v518;
  int v519;
  int v520;
  unint64_t v521;
  unint64_t v522;
  unsigned int v523;
  uint64_t v524;
  size_t v525;
  const char *v526;
  uint64_t v527;
  __int32 v528;
  unsigned __int8 v529;
  const char *v530;
  size_t v531;
  _BYTE *v532;
  uint64_t v533;
  uint64_t v534;
  void *v535;
  uint64_t v536;
  uint64_t v537;
  NSObject *v538;
  int v539;
  size_t v540;
  std::__shared_weak_count_vtbl *v541;
  std::__shared_weak_count *v542;
  std::__shared_weak_count *v543;
  unint64_t *v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  std::string::size_type v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  void *v572;
  unsigned int v573;
  uint64_t v574;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  unint64_t v578;
  uint64_t *v579;
  uint64_t *v580;
  uint64_t v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t *v584;
  char *v585;
  char *v586;
  char *v587;
  char *v588;
  char *v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  uint64_t v593;
  int32x2_t *v594;
  __int128 v595;
  uint64_t v596;
  unint64_t v597;
  unint64_t v598;
  char *v599;
  __int128 v600;
  char *v601;
  char *v602;
  __int128 v603;
  char *v604;
  __int128 *v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  char *v610;
  __int128 v611;
  char *v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  char *v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  char *v620;
  _QWORD *v621;
  int32x2_t *v622;
  void *v623;
  uint64_t v624;
  __int128 v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  unint64_t *v630;
  unint64_t v631;
  uint64_t v632;
  unint64_t v633;
  unint64_t v634;
  int v635;
  int v636;
  unint64_t v637;
  int v638;
  int v639;
  int v640;
  unint64_t v641;
  unint64_t v642;
  uint64_t v643;
  unint64_t v644;
  unint64_t v645;
  int v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  float v651;
  float v652;
  uint64_t v653;
  float v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  char *v658;
  uint64_t v659;
  uint64_t v660;
  char *v661;
  char *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  float v667;
  float v668;
  uint64_t v669;
  float v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t *v677;
  uint64_t *v678;
  uint64_t v679;
  uint64_t v680;
  double v681;
  _BOOL4 v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  unsigned int v692;
  int v693;
  double v694;
  int v695;
  __int128 v696;
  unint64_t v697;
  uint64_t v698;
  float64x2_t *v699;
  uint64_t *v700;
  int v701;
  _QWORD *v702;
  unint64_t v703;
  double v704;
  unint64_t v705;
  float64x2_t *v706;
  unsigned int v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  int32x2_t *v712;
  uint64_t v713;
  _BYTE *v714;
  unint64_t v715;
  unsigned int v716;
  unsigned int v717;
  int v718;
  uint64_t v719;
  uint64_t v720;
  const char *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  __int32 *v727;
  _QWORD *__src;
  void *__srca;
  int __srcb;
  const char *__srcc;
  uint64_t *__srcd;
  int32x2_t **v733;
  _QWORD *v734;
  std::string v736;
  std::__fs::filesystem::path v737;
  std::string v738;
  void *v739[2];
  unint64_t v740;
  uint64_t v741;
  void *v742;
  char *v743;
  float64x2_t *v744;
  uint64_t v745;
  int64x2_t v746;
  std::__fs::filesystem::path v747;
  uint64_t v748;
  uint64_t v749;
  float64x2_t __p;
  uint64_t v751;
  _BYTE v752[48];
  int8x16_t v753;
  std::__shared_weak_count *v754;
  void *v755;
  char v756;
  void *v757;
  char v758;
  void *v759;
  char v760;
  void *v761;
  char v762;
  void *v763;
  char v764;
  void *v765;
  char v766;
  _BYTE __dst[40];
  void *v768;
  __int128 v769;
  unint64_t v770;
  void *v771;
  char v772;
  void *v773;
  char v774;
  void *v775;
  char v776;
  void *v777;
  char v778;
  uint64_t v779[19];
  double v780;
  uint64_t v781;
  uint64_t v782;

  v782 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a3;
  v734 = (_QWORD *)*a3;
  if (*(_BYTE *)(*a3 + 184))
  {
    v5 = v4[11] - v4[10];
    if (v5)
      _ZF = v5 == v4[21] - v4[20];
    else
      _ZF = 0;
    if (!_ZF)
      goto LABEL_12;
    v7 = (uint64_t)(v4[8] - v4[7]) >> 5;
    if (v7 != v5 >> 6)
      goto LABEL_12;
LABEL_11:
    v8 = v4[2];
    if (v8 <= v7)
      goto LABEL_14;
    goto LABEL_12;
  }
  if (v4[20] == v4[21])
  {
    v7 = (uint64_t)(v4[8] - v4[7]) >> 5;
    if (v7 == (uint64_t)(v4[11] - v4[10]) >> 6)
      goto LABEL_11;
  }
LABEL_12:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_1078;
  }
  v7 = (uint64_t)(v734[8] - v734[7]) >> 5;
  v8 = v734[2];
LABEL_14:
  v9 = (uint64_t *)(a2 + 272);
  v11 = *(_QWORD *)(a2 + 272);
  v10 = *(_QWORD **)(a2 + 280);
  v12 = ((uint64_t)v10 - v11) >> 3;
  if (v7 <= v12)
  {
    if (v7 < v12)
    {
      v10 = (_QWORD *)(v11 + 8 * v7);
      *(_QWORD *)(a2 + 280) = v10;
    }
  }
  else
  {
    sub_20EAC9ECC(a2 + 272, v7 - v12);
    v11 = *(_QWORD *)(a2 + 272);
    v10 = *(_QWORD **)(a2 + 280);
  }
  v702 = a1;
  if ((_QWORD *)v11 != v10)
  {
    v13 = (unint64_t)v10 - v11 - 8;
    if (v13 < 0x18)
    {
      LODWORD(v14) = 0;
      v15 = (_QWORD *)v11;
      do
      {
LABEL_24:
        *v15++ = v14;
        LODWORD(v14) = v14 + 1;
      }
      while (v15 != v10);
      goto LABEL_25;
    }
    v16 = (v13 >> 3) + 1;
    v14 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    v15 = (_QWORD *)(v11 + 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL));
    v17 = (int32x2_t)0x100000000;
    v18 = (_OWORD *)(v11 + 16);
    v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v20 = vadd_s32(v17, (int32x2_t)0x200000002);
      *(_QWORD *)&v21 = v17.u32[0];
      *((_QWORD *)&v21 + 1) = v17.u32[1];
      v22 = v21;
      *(_QWORD *)&v21 = v20.u32[0];
      *((_QWORD *)&v21 + 1) = v20.u32[1];
      *(v18 - 1) = v22;
      *v18 = v21;
      v17 = vadd_s32(v17, (int32x2_t)0x400000004);
      v18 += 2;
      v19 -= 4;
    }
    while (v19);
    if (v16 != v14)
      goto LABEL_24;
  }
LABEL_25:
  __dst[0] = 1;
  __src = (_QWORD *)(a2 + 296);
  sub_20EDCA4D0(a2 + 296, v7, __dst);
  v23 = v734;
  *(_DWORD *)(a2 + 320) = v7 - v8;
  *(_DWORD *)(a2 + 328) = 0;
  *(_DWORD *)(a2 + 324) = 0;
  *(_BYTE *)(a2 + 332) = 1;
  v709 = a3[2];
  if (*((_BYTE *)v734 + 184))
  {
    v24 = v734[11] - v734[10];
    if (!v24)
      goto LABEL_33;
    if (v24 != v734[21] - v734[20])
      goto LABEL_33;
    v25 = (int32x2_t *)v734[7];
    v26 = (int32x2_t *)v734[8];
    v27 = ((char *)v26 - (char *)v25) >> 5;
    if (v27 != v24 >> 6)
      goto LABEL_33;
  }
  else
  {
    if (v734[20] != v734[21])
      goto LABEL_33;
    v25 = (int32x2_t *)v734[7];
    v26 = (int32x2_t *)v734[8];
    v27 = ((char *)v26 - (char *)v25) >> 5;
    if (v27 != (uint64_t)(v734[11] - v734[10]) >> 6)
      goto LABEL_33;
  }
  if (v734[2] <= v27)
  {
    v703 = v27;
    goto LABEL_35;
  }
LABEL_33:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_1078;
  }
  v23 = v734;
  v25 = (int32x2_t *)v734[7];
  v26 = (int32x2_t *)v734[8];
  v703 = ((char *)v26 - (char *)v25) >> 5;
LABEL_35:
  v727 = (__int32 *)(v709 + 392);
  v733 = (int32x2_t **)(v23 + 7);
  if (v25 == v26)
    goto LABEL_275;
  v28 = *(_QWORD *)(a2 + 720);
  v26 = v25;
  if (!v28)
    goto LABEL_275;
  v29 = *(__int32 **)(v28 + 56);
  v30 = wmemchr(*(__int32 **)(v28 + 48), *v727, ((uint64_t)v29 - *(_QWORD *)(v28 + 48)) >> 2);
  v31 = v30 ? v30 : v29;
  v26 = *v733;
  if (v31 == *(__int32 **)(v28 + 56))
    goto LABEL_275;
  v723 = *(_QWORD *)(a2 + 720);
  if (*((_BYTE *)v734 + 184))
  {
    v32 = v734[11] - v734[10];
    if (!v32)
      goto LABEL_50;
    if (v32 != v734[21] - v734[20])
      goto LABEL_50;
    v33 = (uint64_t)(v734[8] - (_QWORD)v26) >> 5;
    if (v33 != v32 >> 6)
      goto LABEL_50;
  }
  else if (v734[20] != v734[21]
         || (v33 = (uint64_t)(v734[8] - (_QWORD)v26) >> 5, v33 != (uint64_t)(v734[11] - v734[10]) >> 6))
  {
LABEL_50:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
      v33 = (uint64_t)(v734[8] - v734[7]) >> 5;
      goto LABEL_52;
    }
LABEL_1078:
    abort();
  }
  if (v734[2] > v33)
    goto LABEL_50;
LABEL_52:
  v34 = *(double *)(v709 + 112) + *(double *)(v709 + 120);
  v35 = *(_DWORD *)(v709 + 24);
  v36 = *(_DWORD *)(v709 + 40);
  v37 = *(_DWORD *)(v709 + 344);
  v38 = *(_DWORD *)(v709 + 348);
  v39 = *(_DWORD *)(v709 + 352);
  *(double *)(v723 + 312) = v34;
  if (*(_BYTE *)(v723 + 1) && (!(_BYTE)v39 || !(v38 * v37)))
  {
    v45 = 0;
    v46 = 0;
    v47 = 3;
    goto LABEL_269;
  }
  v40 = *(_QWORD *)(v723 + 168);
  if (v40 - 1 < 0)
  {
LABEL_59:
    v45 = 0;
    v46 = 0;
    v47 = 4;
    goto LABEL_269;
  }
  v41 = *(_QWORD *)(v723 + 152);
  v42 = *(_QWORD *)(v723 + 128);
  v43 = (*(_QWORD *)(v723 + 136) - v42) >> 5;
  while (1)
  {
    v44 = *(double *)(v42 + 32 * (v41 % v43));
    if (vabdd_f64(v44, v34) <= *(double *)(v723 + 88))
      break;
    ++v41;
    if (!--v40)
      goto LABEL_59;
  }
  v719 = v33;
  if (!(_DWORD)v33)
  {
    v45 = 0;
    v46 = 0;
    v47 = 5;
    goto LABEL_269;
  }
  v48 = v42 + 32 * (v41 % v43);
  v704 = *(double *)(v48 + 24);
  *(_QWORD *)&v694 = vextq_s8(*(int8x16_t *)(v48 + 8), *(int8x16_t *)(v48 + 8), 8uLL).u64[0];
  v696 = *(_OWORD *)(v48 + 8);
  if (*(char *)(v723 + 119) < 0)
    v49 = *(_QWORD *)(v723 + 104);
  else
    v49 = *(unsigned __int8 *)(v723 + 119);
  v690 = v36;
  v692 = v35;
  v712 = v26;
  if (!v49)
    goto LABEL_166;
  v50 = atomic_load((unsigned __int8 *)&qword_254A5FA58);
  if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FA58))
    __cxa_guard_release(&qword_254A5FA58);
  v51 = atomic_load((unsigned __int8 *)&qword_254A5FA60);
  if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FA60))
  {
    sub_20EE9FFDC(qword_254A5FBA0);
    __cxa_atexit((void (*)(void *))sub_20EEA00A4, qword_254A5FBA0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5FA60);
  }
  ++qword_254A5FA50;
  memset(&v738, 0, sizeof(v738));
  v52 = *(char *)(v723 + 119);
  if (v52 >= 0)
    v53 = (std::string *)(v723 + 96);
  else
    v53 = *(std::string **)(v723 + 96);
  v54 = *(_QWORD *)(v723 + 104);
  if (v52 >= 0)
    v54 = *(unsigned __int8 *)(v723 + 119);
  sub_20E8A9678(&v738, v53, (std::string *)((char *)v53 + v54));
  v55 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  sub_210212AD8((uint64_t)&v738, (uint64_t)&off_254A5A4B8, (uint64_t)&__p);
  if (SHIBYTE(v751) < 0)
    operator delete(*(void **)&__p.f64[0]);
  if (!byte_254A5FB58)
  {
    memset(__dst, 0, 24);
    sub_20E8A9678((std::string *)__dst, (std::string *)"detect_metadata.csv", (std::string *)"");
    if (SHIBYTE(v738.__r_.__value_.__r.__words[2]) < 0)
      sub_20E860C04(v752, v738.__r_.__value_.__l.__data_, v738.__r_.__value_.__l.__size_);
    else
      *(std::string *)v752 = v738;
    sub_20E8A944C((uint64_t)v752, (std::__fs::filesystem::path *)__dst);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    v56 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)v752);
    if (v56.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v56.__size_ >= 0x17)
    {
      v59 = (v56.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v56.__size_ | 7) != 0x17)
        v59 = v56.__size_ | 7;
      v60 = v59 + 1;
      v57 = operator new(v59 + 1);
      *(_QWORD *)&__dst[16] = v60 | 0x8000000000000000;
      *(_QWORD *)__dst = v57;
      *(_QWORD *)&__dst[8] = v56.__size_;
      v58 = (char *)&xmmword_254A5EFF8 + 8;
    }
    else
    {
      __dst[23] = v56.__size_;
      v57 = __dst;
      v58 = (_BYTE *)(&xmmword_254A5EFF8 + 8);
      if (!v56.__size_)
        goto LABEL_91;
    }
    memmove(v57, v56.__data_, v56.__size_);
LABEL_91:
    v57[v56.__size_] = 0;
    v746 = *(int64x2_t *)__dst;
    v747.__pn_.__r_.__value_.__r.__words[0] = *(_QWORD *)&__dst[16];
    v61 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
    if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
    {
      __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE08);
    }
    v62 = ((BOOL (*)(int, std::__fs::filesystem::path *))off_254A5A4B8[22])((int)&off_254A5A4B8, (std::__fs::filesystem::path *)&v746);
    if (v747.__pn_.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v746.i64[0]);
    if (!v62
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/StaticFeatureDetector.hpp", 200, (uint64_t)"fs::exists(metadata_file_path.parent_path())", 44, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    std::ofstream::open();
    if (v58[2904])
      v58[2904] = 0;
    *(_QWORD *)__dst = 0x400000002;
    sub_20E9E9588((uint64_t)&qword_254A5FB20, (uint64_t *)__dst, (uint64_t)qword_254A5FBA0, 0, 0, 0);
    qword_254A5FB20 = (uint64_t)&off_24C9EF688;
    qword_254A5FB30 = (uint64_t)&unk_24C9EF7D8;
    byte_254A5FB58 = 1;
    v63 = atomic_load((unsigned __int8 *)&qword_254A5FA68);
    if ((v63 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5FA68))
      goto LABEL_99;
    sub_20E8610C0(__dst, "output_id");
    sub_20E8610C0(&__dst[24], "gyro_timestamp");
    sub_20E8610C0(&v769, "curr_timestamp");
    sub_20E8610C0(&v771, "gyro_x");
    sub_20E8610C0(&v773, "gyro_y");
    sub_20E8610C0(&v775, "gyro_z");
    sub_20E8610C0(&v777, "illuminator_status");
    sub_20E877C80(&qword_254A5FAC0, (uint64_t)__dst, 7uLL);
    if (v778 < 0)
    {
      operator delete(v777);
      if ((v776 & 0x80000000) == 0)
      {
LABEL_1147:
        if ((v774 & 0x80000000) == 0)
          goto LABEL_1148;
        goto LABEL_1165;
      }
    }
    else if ((v776 & 0x80000000) == 0)
    {
      goto LABEL_1147;
    }
    operator delete(v775);
    if ((v774 & 0x80000000) == 0)
    {
LABEL_1148:
      if ((v772 & 0x80000000) == 0)
        goto LABEL_1149;
      goto LABEL_1166;
    }
LABEL_1165:
    operator delete(v773);
    if ((v772 & 0x80000000) == 0)
    {
LABEL_1149:
      if ((SHIBYTE(v770) & 0x80000000) == 0)
        goto LABEL_1150;
      goto LABEL_1167;
    }
LABEL_1166:
    operator delete(v771);
    if ((SHIBYTE(v770) & 0x80000000) == 0)
    {
LABEL_1150:
      if ((SHIBYTE(v768) & 0x80000000) == 0)
        goto LABEL_1151;
      goto LABEL_1168;
    }
LABEL_1167:
    operator delete((void *)v769);
    if ((SHIBYTE(v768) & 0x80000000) == 0)
    {
LABEL_1151:
      if ((__dst[23] & 0x80000000) == 0)
      {
LABEL_1152:
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A5FAC0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5FA68);
LABEL_99:
        v64 = qword_254A5FAC0;
        if (unk_254A5FAC8 != qword_254A5FAC0)
        {
          v65 = 24 * ((unk_254A5FAC8 - qword_254A5FAC0) / 24);
          do
          {
            sub_20E9E713C((uint64_t)&qword_254A5FB20, v64);
            v64 += 24;
            v65 -= 24;
          }
          while (v65);
        }
        v66 = qword_254A5FB48;
        qword_254A5FB48 = 0;
        unk_254A5FB50 = v66;
        __dst[0] = byte_254A5FB41;
        sub_20E86A980((_QWORD *)qword_254A5FB38, (uint64_t)__dst, 1);
        if ((v752[23] & 0x80000000) != 0)
          operator delete(*(void **)v752);
        goto LABEL_104;
      }
LABEL_1169:
      operator delete(*(void **)__dst);
      goto LABEL_1152;
    }
LABEL_1168:
    operator delete(*(void **)&__dst[24]);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_1152;
    goto LABEL_1169;
  }
LABEL_104:
  if (v38 * v37)
    v67 = "on";
  else
    v67 = "off";
  if ((_BYTE)v39)
    v68 = v67;
  else
    v68 = "n/a";
  v69 = strlen(v68);
  if (v69 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v70 = (void *)v69;
  if (v69 >= 0x17)
  {
    v72 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v69 | 7) != 0x17)
      v72 = v69 | 7;
    v73 = v72 + 1;
    v71 = operator new(v72 + 1);
    v739[1] = v70;
    v740 = v73 | 0x8000000000000000;
    v739[0] = v71;
    goto LABEL_117;
  }
  HIBYTE(v740) = v69;
  v71 = v739;
  if (v69)
LABEL_117:
    memcpy(v71, v68, (size_t)v70);
  *((_BYTE *)v70 + (_QWORD)v71) = 0;
  *(_QWORD *)__dst = qword_254A5FA50;
  *(_QWORD *)&v74 = v696;
  *((double *)&v74 + 1) = v694;
  *(double *)&__dst[8] = v44;
  *(double *)&__dst[16] = v34;
  *(_OWORD *)&__dst[24] = v74;
  v768 = *(void **)&v704;
  if (SHIBYTE(v740) < 0)
  {
    sub_20E860C04(&v769, v739[0], (unint64_t)v739[1]);
  }
  else
  {
    v769 = *(_OWORD *)v739;
    v770 = v740;
  }
  if (qword_254A5FB48)
  {
    v752[0] = byte_254A5FB40;
    sub_20E86A980((_QWORD *)qword_254A5FB38, (uint64_t)v752, 1);
  }
  std::ostream::operator<<();
  _CF = __CFADD__(qword_254A5FB48++, 1);
  if (!_CF)
  {
    v752[0] = byte_254A5FB40;
    sub_20E86A980((_QWORD *)qword_254A5FB38, (uint64_t)v752, 1);
  }
  *(_QWORD *)(qword_254A5FB38 + *(_QWORD *)(*(_QWORD *)qword_254A5FB38 - 24) + 16) = 17;
  std::ostream::operator<<();
  _CF = __CFADD__(qword_254A5FB48++, 1);
  if (!_CF)
  {
    v752[0] = byte_254A5FB40;
    sub_20E86A980((_QWORD *)qword_254A5FB38, (uint64_t)v752, 1);
  }
  *(_QWORD *)(qword_254A5FB38 + *(_QWORD *)(*(_QWORD *)qword_254A5FB38 - 24) + 16) = 17;
  std::ostream::operator<<();
  _CF = __CFADD__(qword_254A5FB48++, 1);
  if (!_CF)
  {
    v752[0] = byte_254A5FB40;
    sub_20E86A980((_QWORD *)qword_254A5FB38, (uint64_t)v752, 1);
  }
  *(_QWORD *)(qword_254A5FB38 + *(_QWORD *)(*(_QWORD *)qword_254A5FB38 - 24) + 16) = 17;
  std::ostream::operator<<();
  _CF = __CFADD__(qword_254A5FB48++, 1);
  if (!_CF)
  {
    v752[0] = byte_254A5FB40;
    sub_20E86A980((_QWORD *)qword_254A5FB38, (uint64_t)v752, 1);
  }
  *(_QWORD *)(qword_254A5FB38 + *(_QWORD *)(*(_QWORD *)qword_254A5FB38 - 24) + 16) = 17;
  std::ostream::operator<<();
  _CF = __CFADD__(qword_254A5FB48++, 1);
  if (!_CF)
  {
    v752[0] = byte_254A5FB40;
    sub_20E86A980((_QWORD *)qword_254A5FB38, (uint64_t)v752, 1);
  }
  *(_QWORD *)(qword_254A5FB38 + *(_QWORD *)(*(_QWORD *)qword_254A5FB38 - 24) + 16) = 17;
  std::ostream::operator<<();
  ++qword_254A5FB48;
  sub_20E9E713C((uint64_t)&qword_254A5FB20, (uint64_t)&v769);
  v76 = qword_254A5FB48;
  qword_254A5FB48 = 0;
  unk_254A5FB50 = v76;
  v752[0] = byte_254A5FB41;
  sub_20E86A980((_QWORD *)qword_254A5FB38, (uint64_t)v752, 1);
  if (SHIBYTE(v770) < 0)
    operator delete((void *)v769);
  sub_20EEA064C((char **)__dst);
  *(_QWORD *)v752 = &qword_254A5FA50;
  *(_QWORD *)&v752[8] = nullsub_536;
  *(_QWORD *)&v752[16] = sub_20EEA4AD0;
  sub_20EEA3208((uint64_t *)__dst, v752);
  sub_20EEA00FC(&v736, (uint64_t *)__dst);
  v746 = *(int64x2_t *)&v736.__r_.__value_.__l.__data_;
  v747.__pn_.__r_.__value_.__r.__words[0] = v736.__r_.__value_.__r.__words[2];
  memset(&v736, 0, sizeof(v736));
  if (SHIBYTE(v738.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v737, v738.__r_.__value_.__l.__data_, v738.__r_.__value_.__l.__size_);
  else
    v737.__pn_ = v738;
  sub_20E8A944C((uint64_t)&v737, (std::__fs::filesystem::path *)&v746);
  if (v747.__pn_.__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)v746.i64[0]);
  if (SHIBYTE(v736.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v736.__r_.__value_.__l.__data_);
  sub_20EEA4FD8((uint64_t)__dst);
  v77 = MEMORY[0x24BEDB840];
  v78 = MEMORY[0x24BEDB840] + 64;
  v79 = (_QWORD *)MEMORY[0x24BEDB7E8];
  v80 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v81 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  v779[0] = MEMORY[0x24BEDB840] + 64;
  *(_QWORD *)__dst = v80;
  *(_QWORD *)&__dst[*(_QWORD *)(v80 - 24)] = v81;
  v82 = (std::ios_base *)&__dst[*(_QWORD *)(*(_QWORD *)__dst - 24)];
  std::ios_base::init(v82, &__dst[8]);
  v82[1].__vftable = 0;
  v82[1].__fmtflags_ = -1;
  *(_QWORD *)__dst = v77 + 24;
  v779[0] = v78;
  MEMORY[0x212BC5B40](&__dst[8]);
  v83 = std::__fs::filesystem::path::__parent_path(&v737);
  if (v83.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v83.__size_ >= 0x17)
  {
    v85 = (v83.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v83.__size_ | 7) != 0x17)
      v85 = v83.__size_ | 7;
    v86 = v85 + 1;
    v84 = operator new(v85 + 1);
    *(_QWORD *)&v752[8] = v83.__size_;
    *(_QWORD *)&v752[16] = v86 | 0x8000000000000000;
    *(_QWORD *)v752 = v84;
  }
  else
  {
    v752[23] = v83.__size_;
    v84 = v752;
    if (!v83.__size_)
      goto LABEL_150;
  }
  memmove(v84, v83.__data_, v83.__size_);
LABEL_150:
  v84[v83.__size_] = 0;
  v746 = *(int64x2_t *)v752;
  v747.__pn_.__r_.__value_.__r.__words[0] = *(_QWORD *)&v752[16];
  v87 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v87 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  v88 = ((BOOL (*)(int, std::__fs::filesystem::path *))off_254A5A4B8[22])((int)&off_254A5A4B8, (std::__fs::filesystem::path *)&v746);
  if (v747.__pn_.__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)v746.i64[0]);
  if (!v88
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/StaticFeatureDetector.hpp", 222, (uint64_t)"fs::exists(filename.parent_path())", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  std::ofstream::open();
  *(_QWORD *)v752 = 0x400000002;
  sub_20E9E9588((uint64_t)&v746, (uint64_t *)v752, (uint64_t)__dst, 0, 0, 0);
  v746.i64[0] = (uint64_t)&off_24C9EF688;
  v747.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C9EF7D8;
  v89 = atomic_load((unsigned __int8 *)&qword_254A5FA70);
  if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FA70))
  {
    sub_20E8610C0(v752, "output_id");
    sub_20E8610C0(&v752[24], "timestamp");
    sub_20E8610C0(&v753, "camera_id");
    sub_20E8610C0(&v755, "camera_stream");
    sub_20E8610C0(&v757, "x_orig");
    sub_20E8610C0(&v759, "y_orig");
    sub_20E8610C0(&v761, "scale");
    sub_20E8610C0(&v763, "orientation");
    sub_20E8610C0(&v765, "laplacian_score");
    sub_20E877C80(&qword_254A5FAD8, (uint64_t)v752, 9uLL);
    if (v766 < 0)
    {
      operator delete(v765);
      if ((v764 & 0x80000000) == 0)
      {
LABEL_1132:
        if ((v762 & 0x80000000) == 0)
          goto LABEL_1133;
        goto LABEL_1155;
      }
    }
    else if ((v764 & 0x80000000) == 0)
    {
      goto LABEL_1132;
    }
    operator delete(v763);
    if ((v762 & 0x80000000) == 0)
    {
LABEL_1133:
      if ((v760 & 0x80000000) == 0)
        goto LABEL_1134;
      goto LABEL_1156;
    }
LABEL_1155:
    operator delete(v761);
    if ((v760 & 0x80000000) == 0)
    {
LABEL_1134:
      if ((v758 & 0x80000000) == 0)
        goto LABEL_1135;
      goto LABEL_1157;
    }
LABEL_1156:
    operator delete(v759);
    if ((v758 & 0x80000000) == 0)
    {
LABEL_1135:
      if ((v756 & 0x80000000) == 0)
        goto LABEL_1136;
      goto LABEL_1158;
    }
LABEL_1157:
    operator delete(v757);
    if ((v756 & 0x80000000) == 0)
    {
LABEL_1136:
      if ((SHIBYTE(v754) & 0x80000000) == 0)
        goto LABEL_1137;
      goto LABEL_1159;
    }
LABEL_1158:
    operator delete(v755);
    if ((SHIBYTE(v754) & 0x80000000) == 0)
    {
LABEL_1137:
      if ((v752[47] & 0x80000000) == 0)
        goto LABEL_1138;
      goto LABEL_1160;
    }
LABEL_1159:
    operator delete((void *)v753.i64[0]);
    if ((v752[47] & 0x80000000) == 0)
    {
LABEL_1138:
      if ((v752[23] & 0x80000000) == 0)
      {
LABEL_1139:
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A5FAD8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5FA70);
        goto LABEL_156;
      }
LABEL_1161:
      operator delete(*(void **)v752);
      goto LABEL_1139;
    }
LABEL_1160:
    operator delete(*(void **)&v752[24]);
    if ((v752[23] & 0x80000000) == 0)
      goto LABEL_1139;
    goto LABEL_1161;
  }
LABEL_156:
  v90 = qword_254A5FAD8;
  if (unk_254A5FAE0 != qword_254A5FAD8)
  {
    v91 = 24 * ((unk_254A5FAE0 - qword_254A5FAD8) / 24);
    do
    {
      sub_20E9E713C((uint64_t)&v746, v90);
      v90 += 24;
      v91 -= 24;
    }
    while (v91);
  }
  v92 = v748;
  v748 = 0;
  v749 = v92;
  v752[0] = v747.__pn_.__r_.__value_.__s.__data_[17];
  sub_20E86A980((_QWORD *)v747.__pn_.__r_.__value_.__l.__size_, (uint64_t)v752, 1);
  v93 = v26 + 2;
  v94 = v719;
  do
  {
    *(_QWORD *)v752 = qword_254A5FA50;
    v95 = *(_QWORD *)v727;
    *(double *)&v752[8] = v34;
    *(_QWORD *)&v752[16] = v95;
    *(int32x2_t *)&v96 = v93[-2];
    *((int32x2_t *)&v96 + 1) = vrev64_s32(*v93);
    *(_OWORD *)&v752[24] = v96;
    *(_DWORD *)&v752[40] = v93[1].i32[1];
    sub_20EEA03B8((uint64_t)&v746);
    v93 += 4;
    --v94;
  }
  while (v94);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&__dst[*(_QWORD *)(*(_QWORD *)__dst - 24)], *(_DWORD *)&__dst[*(_QWORD *)(*(_QWORD *)__dst - 24) + 32] | 4);
  *(_QWORD *)__dst = *v79;
  *(_QWORD *)&__dst[*(_QWORD *)(*(_QWORD *)__dst - 24)] = v79[3];
  MEMORY[0x212BC5B4C](&__dst[8]);
  std::ostream::~ostream();
  MEMORY[0x212BC6290](v779);
  if ((SHIBYTE(v737.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v740) & 0x80000000) == 0)
      goto LABEL_165;
LABEL_266:
    operator delete(v739[0]);
    if ((SHIBYTE(v738.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_166;
LABEL_267:
    operator delete(v738.__r_.__value_.__l.__data_);
    goto LABEL_166;
  }
  operator delete(v737.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v740) < 0)
    goto LABEL_266;
LABEL_165:
  if (SHIBYTE(v738.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_267;
LABEL_166:
  v97 = v723;
  sub_20FD8AAF4((_QWORD *)v723, v692, v690);
  *(_QWORD *)&v98.f64[0] = v696;
  v98.f64[1] = v694;
  if (vmulq_f64(v98, v98).f64[0] + v694 * v694 + v704 * v704 < *(double *)(v723 + 184))
  {
    if (*(_BYTE *)(v723 + 2))
    {
      v699 = 0;
      v46 = 0;
      v45 = 0;
      v99 = 0;
      v705 = 0;
      v100 = 0;
      v101 = 0;
      LODWORD(v741) = 0;
      v743 = 0;
      v744 = 0;
      v742 = 0;
      LODWORD(v745) = 0;
      v102 = *(_QWORD *)(v723 + 200) - *(_QWORD *)(v723 + 192);
      v713 = *(_QWORD *)(v723 + 296);
      v697 = v102;
      while (1)
      {
        v103 = (unint64_t)(float)(*(float *)v26[4 * v101].i32 * *(float *)(v97 + 176))
             + v713 * (unint64_t)(float)(*(float *)(v97 + 176) * *(float *)&v26[4 * v101].i32[1]);
        if (v103 >= v102
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/StaticFeatureDetector.hpp", 157, (uint64_t)"lut_idx < lut_size", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v742 = v45;
          v744 = v699;
          abort();
        }
        if (!sub_20EEA511C((_QWORD *)v97, v103))
          goto LABEL_170;
        if ((unint64_t)v100 >= v705)
          break;
        *(_DWORD *)v100 = v101;
        v100 += 4;
        v46 = v100;
LABEL_170:
        if (++v101 == v719)
        {
          v742 = v45;
          v743 = v46;
          v744 = v699;
          v160 = *(_QWORD *)(v97 + 240);
          if (v160 <= *(_QWORD *)(v97 + 280))
            v160 = *(_QWORD *)(v97 + 280);
          v161 = (double)v160 / (double)(2 * *(_DWORD *)(v97 + 36));
          if (v161 > 1.0)
            v161 = 1.0;
          v162 = v161;
          *(float *)&v745 = v162;
          LODWORD(v741) = v162 >= 0.5;
          goto LABEL_270;
        }
      }
      v104 = v9;
      v105 = (v100 - v99) >> 2;
      v106 = v105 + 1;
      if ((unint64_t)(v105 + 1) >> 62)
      {
        v742 = v45;
        v743 = v46;
        v744 = v699;
        sub_20E867F44();
      }
      if ((uint64_t)(v705 - (_QWORD)v99) >> 1 > v106)
        v106 = (uint64_t)(v705 - (_QWORD)v99) >> 1;
      if (v705 - (unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
        v107 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v107 = v106;
      if (v107)
      {
        if (v107 >> 62)
        {
          v742 = v45;
          v744 = v699;
          sub_20E877A38();
        }
        v108 = operator new(4 * v107);
        v45 = &v108[4 * v105];
        *(_DWORD *)v45 = v101;
        v46 = v45 + 4;
        v109 = v100 - v99;
        if (v100 != v99)
        {
LABEL_184:
          v110 = v109 - 4;
          if (v110 < 0xBC
            || (v114 = (v100 - 4 - v99) & 0xFFFFFFFFFFFFFFFCLL, &v108[v100 - v99 - 4 - v114] > &v108[v100 - v99 - 4])
            || &v100[-v114 - 4] > v100 - 4
            || (unint64_t)(v99 - v108) < 0x20)
          {
            v111 = v100;
            v9 = v104;
            v97 = v723;
          }
          else
          {
            v115 = (v110 >> 2) + 1;
            v116 = 4 * (v115 & 0x7FFFFFFFFFFFFFF8);
            v111 = &v100[-v116];
            v45 -= v116;
            v117 = &v108[4 * v105 - 16];
            v118 = v100 - 16;
            v119 = v115 & 0x7FFFFFFFFFFFFFF8;
            v97 = v723;
            do
            {
              v120 = *(_OWORD *)v118;
              *(v117 - 1) = *((_OWORD *)v118 - 1);
              *v117 = v120;
              v117 -= 2;
              v118 -= 32;
              v119 -= 8;
            }
            while (v119);
            v9 = v104;
            if (v115 == (v115 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_187:
              v113 = (float64x2_t *)&v108[4 * v107];
              v102 = v697;
              v699 = v113;
              if (!v99)
              {
LABEL_189:
                v99 = v45;
                v705 = (unint64_t)v113;
                v100 = v46;
                goto LABEL_170;
              }
LABEL_188:
              operator delete(v99);
              goto LABEL_189;
            }
          }
          do
          {
            v112 = *((_DWORD *)v111 - 1);
            v111 -= 4;
            *((_DWORD *)v45 - 1) = v112;
            v45 -= 4;
          }
          while (v111 != v99);
          goto LABEL_187;
        }
      }
      else
      {
        v108 = 0;
        v45 = (char *)(4 * v105);
        *(_DWORD *)(4 * v105) = v101;
        v46 = (char *)(4 * v105 + 4);
        v109 = v100 - v99;
        if (v100 != v99)
          goto LABEL_184;
      }
      v9 = v104;
      v97 = v723;
      v113 = (float64x2_t *)&v108[4 * v107];
      v102 = v697;
      v699 = v113;
      if (!v99)
        goto LABEL_189;
      goto LABEL_188;
    }
    v45 = 0;
    v46 = 0;
    v47 = 2;
LABEL_269:
    LODWORD(v741) = v47;
    v743 = 0;
    v744 = 0;
    v742 = 0;
    LODWORD(v745) = 0;
    goto LABEL_270;
  }
  LODWORD(v741) = 0;
  v743 = 0;
  v744 = 0;
  v742 = 0;
  LODWORD(v745) = 0;
  v121 = *(double *)(v723 + 320);
  if (v121 < 0.0)
  {
    *(double *)(v723 + 320) = v34;
    v121 = v34;
  }
  if (*(_QWORD *)(v723 + 304) > (unint64_t)*(unsigned int *)(v723 + 16) || v34 - v121 > *(double *)(v723 + 8))
  {
    if (*(_BYTE *)(v723 + 120))
      sub_20FD8A7EC(v723);
    v122 = *(void **)(v723 + 192);
    v123 = *(_QWORD *)(v723 + 200) - (_QWORD)v122;
    if (v123 >= 1)
      bzero(v122, v123);
    sub_20FD8ABE8(v723 + 256, v723 + 216);
    if (*(_QWORD *)(v723 + 280))
    {
      v124 = *(_QWORD **)(v723 + 272);
      if (v124)
      {
        do
        {
          v125 = (_QWORD *)*v124;
          operator delete(v124);
          v124 = v125;
        }
        while (v125);
      }
      *(_QWORD *)(v723 + 272) = 0;
      v126 = *(_QWORD *)(v723 + 264);
      if (v126)
      {
        for (i = 0; i != v126; ++i)
          *(_QWORD *)(*(_QWORD *)(v723 + 256) + 8 * i) = 0;
      }
      *(_QWORD *)(v723 + 280) = 0;
    }
    *(_QWORD *)(v723 + 304) = 0;
    *(double *)(v723 + 320) = v34;
  }
  v706 = 0;
  v46 = 0;
  v45 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  do
  {
    while (1)
    {
      v132 = v9;
      v133 = (float *)&v26[4 * v131];
      v134 = *(float *)(v723 + 176);
      v135 = *v133 * v134;
      v136 = v134 * v133[1];
      if (*(_BYTE *)(v723 + 3))
      {
        v137 = sub_20FD89C84(v723, llroundf(v135), llroundf(v136));
        LODWORD(v139) = v138;
        if (*(_DWORD *)(v723 + 32) <= v137)
          goto LABEL_226;
      }
      else
      {
        v139 = (unint64_t)v135 + *(_QWORD *)(v723 + 296) * (unint64_t)v136;
        v140 = *(_QWORD *)(v723 + 192);
        if (v139 >= *(_QWORD *)(v723 + 200) - v140)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/StaticFeatureDetector.cpp", 57, (uint64_t)"lut_idx < occurance_count_lut_.size()", 37, (uint64_t)&unk_2102C52DE, 0, (void (*)(void **))sub_21023DDB0))
          {
            v742 = v45;
            v744 = v706;
            abort();
          }
          v140 = *(_QWORD *)(v723 + 192);
        }
        v141 = *(_BYTE *)(v140 + v139);
        *(_BYTE *)(v140 + v139) = v141 + 1;
        if (*(_DWORD *)(v723 + 32) <= (v141 + 1))
        {
LABEL_226:
          *(_DWORD *)__dst = v139;
          sub_20EEA52F4(v723 + 256, (unsigned int *)__dst, __dst);
        }
      }
      if (!sub_20EEA511C((_QWORD *)v723, v139))
        goto LABEL_218;
      if (v130 >= (char *)v129)
        break;
      *(_DWORD *)v130 = v131;
      v130 += 4;
      v46 = v130;
LABEL_218:
      v9 = v132;
      if (++v131 == v719)
        goto LABEL_255;
    }
    v142 = (v130 - v128) >> 2;
    v143 = v142 + 1;
    if ((unint64_t)(v142 + 1) >> 62)
    {
      v742 = v45;
      v743 = v46;
      v744 = v706;
      sub_20E867F44();
    }
    if (((char *)v129 - v128) >> 1 > v143)
      v143 = ((char *)v129 - v128) >> 1;
    if ((unint64_t)((char *)v129 - v128) >= 0x7FFFFFFFFFFFFFFCLL)
      v144 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v144 = v143;
    if (v144)
    {
      if (v144 >> 62)
      {
        v742 = v45;
        v743 = v46;
        v744 = v706;
        sub_20E877A38();
      }
      v145 = operator new(4 * v144);
      v45 = &v145[4 * v142];
      *(_DWORD *)v45 = v131;
      v46 = v45 + 4;
      v146 = v130 - v128;
      if (v130 != v128)
      {
LABEL_238:
        v147 = v146 - 4;
        if (v147 < 0xBC
          || (v150 = (v130 - 4 - v128) & 0xFFFFFFFFFFFFFFFCLL, &v145[v130 - v128 - 4 - v150] > &v145[v130 - v128 - 4])
          || &v130[-v150 - 4] > v130 - 4
          || (unint64_t)(v128 - v145) < 0x20)
        {
          v148 = v130;
          v9 = v132;
          v26 = v712;
        }
        else
        {
          v151 = (v147 >> 2) + 1;
          v152 = 4 * (v151 & 0x7FFFFFFFFFFFFFF8);
          v148 = &v130[-v152];
          v45 -= v152;
          v153 = &v145[4 * v142 - 16];
          v154 = v130 - 16;
          v155 = v151 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v156 = *(_OWORD *)v154;
            *(v153 - 1) = *((_OWORD *)v154 - 1);
            *v153 = v156;
            v153 -= 2;
            v154 -= 32;
            v155 -= 8;
          }
          while (v155);
          v9 = v132;
          v26 = v712;
          if (v151 == (v151 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_241:
            v129 = (float64x2_t *)&v145[4 * v144];
            v706 = v129;
            if (!v128)
              goto LABEL_243;
LABEL_242:
            operator delete(v128);
            goto LABEL_243;
          }
        }
        do
        {
          v149 = *((_DWORD *)v148 - 1);
          v148 -= 4;
          *((_DWORD *)v45 - 1) = v149;
          v45 -= 4;
        }
        while (v148 != v128);
        goto LABEL_241;
      }
    }
    else
    {
      v145 = 0;
      v45 = (char *)(4 * v142);
      *(_DWORD *)(4 * v142) = v131;
      v46 = (char *)(4 * v142 + 4);
      v146 = v130 - v128;
      if (v130 != v128)
        goto LABEL_238;
    }
    v9 = v132;
    v26 = v712;
    v129 = (float64x2_t *)&v145[4 * v144];
    v706 = v129;
    if (v128)
      goto LABEL_242;
LABEL_243:
    v128 = v45;
    v130 = v46;
    ++v131;
  }
  while (v131 != v719);
LABEL_255:
  v157 = *(_QWORD *)(v723 + 240);
  if (v157 <= *(_QWORD *)(v723 + 280))
    v157 = *(_QWORD *)(v723 + 280);
  v742 = v45;
  v743 = v46;
  v744 = v706;
  v158 = (double)v157 / (double)(2 * *(_DWORD *)(v723 + 36));
  if (v158 > 1.0)
    v158 = 1.0;
  v159 = v158;
  *(float *)&v745 = v159;
  LODWORD(v741) = v159 >= 0.5;
  ++*(_QWORD *)(v723 + 304);
LABEL_270:
  sub_20EE97EA0((unsigned int *)v45, (unsigned int *)v46, v9);
  v163 = v741;
  *((_WORD *)v734 + 64) = ((_DWORD)v741 == 1) | 0x100;
  v734[3] = (v46 - v45) >> 2;
  v164 = (float)((float)(unint64_t)((v743 - (_BYTE *)v742) >> 2) / (float)v703);
  v165 = *(float *)&v745;
  *((double *)v734 + 17) = *(float *)&v745;
  *((double *)v734 + 18) = v164;
  v166 = *(_QWORD *)(a2 + 720);
  v734[19] = *(_QWORD *)(v166 + 312);
  if (v734 + 13 != (_QWORD *)(v166 + 328))
  {
    sub_20EAFA238(v734 + 13, *(char **)(v166 + 328), *(char **)(v166 + 336), (uint64_t)(*(_QWORD *)(v166 + 336) - *(_QWORD *)(v166 + 328)) >> 3);
    v163 = v741;
    v165 = *(float *)&v745;
    v164 = *((double *)v734 + 18);
  }
  v167 = v164;
  sub_20EEB09F4(a2 + 728, v727, (unint64_t)(v46 - v45) >> 2, v163, v165, v167);
  if (v742)
  {
    v743 = (char *)v742;
    operator delete(v742);
  }
  v26 = *v733;
LABEL_275:
  if (v26 != (int32x2_t *)v734[8])
  {
    v168 = *(_BYTE *)(a2 + 72);
    if (v168)
      v168 = *(_BYTE *)(a2 + 344) == 0;
    if ((v168 & 1) == 0)
    {
      if (*(_BYTE *)(a2 + 24))
      {
        v169 = *(_QWORD **)(a2 + 352);
        if (v169)
        {
          if (v169[3] >= 2uLL)
          {
            if (sub_20EB8DE00(v169, v727))
            {
              v170 = *(_QWORD **)(a2 + 368);
              if (v170)
              {
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v170[1] - *v170) >> 3) > *v727)
                  sub_20EE9883C(a2 + 616, a2 + 336, (_QWORD *)(a2 + 592), v727, *(_DWORD *)v734, *((_DWORD *)v734 + 2), v734[7], v9, (void **)(a2 + 696));
              }
            }
          }
        }
      }
    }
  }
  v724 = v734[7];
  if (v724 != v734[8])
  {
    v171 = *(double *)(a2 + 80);
    if (v171 <= 180.0 && v171 >= 0.0)
    {
      v172 = *(_QWORD **)(a2 + 368);
      if (v172)
      {
        v173 = tan(v171 * 0.5 * 0.0174532925);
        v174 = *v727;
        if (v174 >= (uint64_t)(*(_QWORD *)(a2 + 600) - *(_QWORD *)(a2 + 592)) >> 5)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/FeatureFilterTransforms.hpp", 90, (uint64_t)"cam_strm_id.camera_id < camera_set_models.size()", 48, (uint64_t)"Size of camera models should be same as that of descriptors.", 60, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v174 = *v727;
        }
        v175 = *v172 + 24 * v174;
        v739[0] = 0;
        v739[1] = 0;
        v740 = 0;
        v177 = *(_BYTE **)v175;
        v176 = *(_BYTE **)(v175 + 8);
        v178 = v176 - v177;
        if (v176 != v177)
        {
          if (0x8E38E38E38E38E39 * (v178 >> 3) >= 0x38E38E38E38E38FLL)
            sub_20EB849AC();
          v179 = (char *)operator new(v178);
          v180 = &v179[8 * (v178 >> 3)];
          v739[0] = v179;
          v740 = (unint64_t)v180;
          memcpy(v179, v177, v178);
          v739[1] = v180;
        }
        sub_20EA84218(*(_QWORD *)(a2 + 592) + 32 * v174, (uint64_t *)v739, (uint64_t)&v738);
        v700 = v9;
        if (*(_QWORD *)(a2 + 280) != *(_QWORD *)(a2 + 272))
        {
          v187 = 0;
          v707 = 0;
          v188 = v738.__r_.__value_.__l.__size_ + 1664 * *(unsigned int *)(v709 + 396);
          v714 = (_BYTE *)(v188 + 1536);
          v720 = v188 + 96;
          v189 = 1;
          v190 = a2;
          while (1)
          {
            if (!*(_BYTE *)(v190 + 332)
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 151, (uint64_t)"ordered", 7, (uint64_t)"Not supported with reordered indices.", 37, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v191 = v187 >> 6;
            v192 = 1 << v187;
            if ((*(_QWORD *)(*__src + 8 * (v187 >> 6)) & (1 << v187)) == 0)
              goto LABEL_299;
            v193 = (float *)(v724 + 32 * v187);
            v194 = *v193;
            v195 = v193[1];
            if (*v714)
              v196 = v720;
            else
              v196 = 0;
            v197 = *(_DWORD *)(v196 + 992);
            if (v197 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_1081;
              }
              v197 = *(_DWORD *)(v196 + 992);
              v198 = v194;
              v199 = v195;
              if (v197 <= 7)
              {
LABEL_308:
                if (!v197)
                  goto LABEL_1080;
                _Q3.i64[0] = *(_QWORD *)(v196 + 80);
                v780 = *(double *)(v196 + 88) + *(double *)(v196 + 72) * v198 + *(double *)_Q3.i64 * v199;
                v200 = *(double *)(v196 + 104);
                v182.i64[0] = *(_QWORD *)(v196 + 112);
                *(double *)v181.i64 = v200 * v199 + *(double *)v182.i64;
LABEL_313:
                v781 = v181.i64[0];
LABEL_314:
                v741 = (uint64_t)&v737;
                v742 = &v780;
                v744 = 0;
                v745 = 0;
                v743 = 0;
                if (v197 <= 7)
                  goto LABEL_315;
                goto LABEL_356;
              }
            }
            else
            {
              v198 = v194;
              v199 = v195;
              if (v197 <= 7)
                goto LABEL_308;
            }
            _Q3.i64[0] = *(_QWORD *)(v196 + 80);
            v780 = *(double *)(v196 + 88) + *(double *)(v196 + 72) * v198 + *(double *)_Q3.i64 * v199;
            v200 = *(double *)(v196 + 104);
            v182.i64[0] = *(_QWORD *)(v196 + 112);
            *(double *)v181.i64 = v200 * v199 + *(double *)v182.i64;
            if (v197 < 0xE)
              goto LABEL_313;
            v781 = v181.i64[0];
            if (v197 == 14)
              goto LABEL_314;
            v205 = &v737;
            v206 = (float64x2_t *)&v780;
            v741 = (uint64_t)&v737;
            v742 = &v780;
            v744 = 0;
            v745 = 0;
            v743 = 0;
            if (v197 != -1)
            {
              v207 = 0;
              v208 = 0;
              v209 = 0;
LABEL_383:
              v215 = sub_20EB3CED8(v196, (uint64_t)v205, v206, (float64x2_t *)v209, v208, v207);
LABEL_405:
              if ((v215 & 1) != 0)
                goto LABEL_406;
              goto LABEL_299;
            }
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1081;
            }
            v197 = *(_DWORD *)(v196 + 992);
            if (v197 <= 7)
            {
LABEL_315:
              if (v197 > 3)
              {
                v211 = v741;
                v210 = (double *)v742;
                v212 = v743;
                v213 = v744;
                v214 = v745;
                if (v197 > 5)
                {
                  if (v197 == 6)
                    v215 = sub_20EB41C58((double *)v196, v741, (double *)v742, v743, (uint64_t)v744, v745);
                  else
                    v215 = sub_20EB306CC(v196, v741, (float64x2_t *)v742, (float64x2_t *)v743, (unint64_t)v744, v745, *(double *)v181.i64, v200, v182, (int8x16_t)_Q3, *(double *)v184.i64, _Q5.f64[0], _Q6);
                }
                else if (v197 == 5)
                {
                  if (v743)
                  {
                    *(_QWORD *)v743 = 0;
                    *((_QWORD *)v212 + 1) = 0;
                    *((_QWORD *)v212 + 2) = 0;
                  }
                  if (v214)
                  {
                    *(_QWORD *)(v214 + 64) = 0;
                    *(_OWORD *)(v214 + 32) = 0u;
                    *(_OWORD *)(v214 + 48) = 0u;
                    *(_OWORD *)v214 = 0u;
                    *(_OWORD *)(v214 + 16) = 0u;
                  }
                  if (v213)
                    v215 = sub_20EB28F10(v211, (uint64_t)v213, v210, v196 + 168, 5);
                  else
                    v215 = sub_20EB2886C(v211, v210, v196 + 168, 5);
                }
                else
                {
                  if (v743)
                  {
                    *(_QWORD *)v743 = 0;
                    *((_QWORD *)v212 + 1) = 0;
                    *((_QWORD *)v212 + 2) = 0;
                  }
                  if (v214)
                  {
                    *(_QWORD *)(v214 + 64) = 0;
                    v181 = 0uLL;
                    *(_OWORD *)(v214 + 32) = 0u;
                    *(_OWORD *)(v214 + 48) = 0u;
                    *(_OWORD *)v214 = 0u;
                    *(_OWORD *)(v214 + 16) = 0u;
                  }
                  if (v213)
                  {
                    if (!*(_BYTE *)(v196 + 468))
                    {
                      v181.i64[0] = sub_20EB27C0C(v196 + 204, (double *)(v196 + 168), 0x32uLL, v181, v200, v182, (int8x16_t)_Q3).u64[0];
                      *(_BYTE *)(v196 + 468) = 1;
                    }
                    v215 = sub_20EA8D684(v211, (uint64_t)v210, (int64x2_t *)(v196 + 168), (float *)(v196 + 204), v213, 5, *(double *)v181.i64, v200, *(double *)v182.i64, *(double *)_Q3.i64, *(double *)v184.i64, _Q5.f64[0], _Q6);
                  }
                  else
                  {
                    if (!*(_BYTE *)(v196 + 468))
                    {
                      v181.i64[0] = sub_20EB27C0C(v196 + 204, (double *)(v196 + 168), 0x32uLL, v181, v200, v182, (int8x16_t)_Q3).u64[0];
                      *(_BYTE *)(v196 + 468) = 1;
                    }
                    v215 = sub_20EA8D684(v211, (uint64_t)v210, (int64x2_t *)(v196 + 168), (float *)(v196 + 204), 0, 5, *(double *)v181.i64, v200, *(double *)v182.i64, *(double *)_Q3.i64, *(double *)v184.i64, _Q5.f64[0], _Q6);
                  }
                }
              }
              else
              {
                if (v197 <= 1)
                {
                  if (!v197)
                  {
LABEL_1080:
                    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_1081:
                    abort();
                  }
                  v201 = v741;
                  v203 = v743;
                  v202 = v744;
                  v204 = v745;
                  v181 = *(int8x16_t *)v742;
                  *(_OWORD *)v741 = *(_OWORD *)v742;
                  *(_QWORD *)(v201 + 16) = 0x3FF0000000000000;
                  if (v203)
                  {
                    *(_QWORD *)v203 = 0;
                    *((_QWORD *)v203 + 1) = 0;
                    *((_QWORD *)v203 + 2) = 0;
                  }
                  if (v202)
                  {
                    *v202 = (float64x2_t)xmmword_210312EC0;
                    v202[1] = (float64x2_t)unk_210312ED0;
                    v181.i64[1] = 0;
                    v202[2] = (float64x2_t)xmmword_210312EE0;
                  }
                  if (v204)
                  {
                    *(_QWORD *)(v204 + 64) = 0;
                    v181.i64[1] = 0;
                    *(_OWORD *)(v204 + 32) = 0u;
                    *(_OWORD *)(v204 + 48) = 0u;
                    *(_OWORD *)v204 = 0u;
                    *(_OWORD *)(v204 + 16) = 0u;
                  }
                  goto LABEL_406;
                }
                if (v197 == 2)
                {
                  v215 = sub_20EA8D22C((uint64_t)&v741, v196);
                }
                else
                {
                  v216 = (double *)v741;
                  v217 = (double *)v742;
                  v219 = v743;
                  v218 = v744;
                  v220 = v745;
                  if (v743)
                  {
                    *(_QWORD *)v743 = 0;
                    *((_QWORD *)v219 + 1) = 0;
                    *((_QWORD *)v219 + 2) = 0;
                  }
                  if (v220)
                  {
                    *(_QWORD *)(v220 + 64) = 0;
                    v181.i64[0] = 0;
                    *(_OWORD *)(v220 + 32) = 0u;
                    *(_OWORD *)(v220 + 48) = 0u;
                    *(_OWORD *)v220 = 0u;
                    *(_OWORD *)(v220 + 16) = 0u;
                  }
                  if (v218)
                    v215 = sub_20EB27398(v216, (uint64_t)v218, v217, (int64x2_t *)(v196 + 168), 20, *(double *)v181.i64, v200, *(double *)v182.i64, *(double *)_Q3.i64, (int64x2_t)v184);
                  else
                    v215 = sub_20EB23DF0((uint64_t)v216, v217, (int64x2_t *)(v196 + 168), 20, *(double *)v181.i64, v200, *(double *)v182.i64, *(double *)_Q3.i64, (int64x2_t)v184, _Q5);
                }
              }
              goto LABEL_405;
            }
LABEL_356:
            v205 = (std::__fs::filesystem::path *)v741;
            if (v197 > 0xB)
            {
              if (v197 <= 0xD)
              {
                if (v197 != 13)
                {
                  v238 = v743;
                  v237 = v744;
                  v239 = v745;
                  if (v743)
                  {
                    *(_QWORD *)v743 = 0;
                    *((_QWORD *)v238 + 1) = 0;
                    *((_QWORD *)v238 + 2) = 0;
                  }
                  if (v239)
                  {
                    *(_QWORD *)(v239 + 64) = 0;
                    v181.i64[1] = 0;
                    *(_OWORD *)(v239 + 32) = 0u;
                    *(_OWORD *)(v239 + 48) = 0u;
                    *(_OWORD *)v239 = 0u;
                    *(_OWORD *)(v239 + 16) = 0u;
                  }
                  v205->__pn_.__r_.__value_.__r.__words[0] = 0;
                  v205->__pn_.__r_.__value_.__l.__size_ = 0;
                  v205->__pn_.__r_.__value_.__r.__words[2] = 0;
                  if (v237)
                  {
                    v181.i64[1] = 0;
                    v237[1] = 0u;
                    v237[2] = 0u;
                    *v237 = 0u;
                  }
                  goto LABEL_299;
                }
                v215 = sub_20EB43734((double *)v196, v741, (uint64_t)v742, v743, (uint64_t)v744, v745);
                goto LABEL_405;
              }
              v206 = (float64x2_t *)v742;
              v209 = v743;
              v208 = v744;
              v207 = v745;
              if (v197 != 14)
                goto LABEL_383;
              if (v743)
              {
                *(_QWORD *)v743 = 0;
                *((_QWORD *)v209 + 1) = 0;
                *((_QWORD *)v209 + 2) = 0;
              }
              if (v207)
              {
                *(_QWORD *)(v207 + 64) = 0;
                *(_OWORD *)(v207 + 32) = 0u;
                *(_OWORD *)(v207 + 48) = 0u;
                *(_OWORD *)v207 = 0u;
                *(_OWORD *)(v207 + 16) = 0u;
              }
              v231 = (double *)(v196 + 392);
              v232 = *(double *)v196 + *(double *)(v196 + 32);
              v233 = v232 * 0.5;
              if (!v208)
              {
                v215 = sub_20EB253A0((uint64_t)v205, (uint64_t)v206, (double *)(v196 + 168), v231, 0x14u, v232 * 0.5);
                goto LABEL_405;
              }
              if (sub_20EB253A0((uint64_t)v205, (uint64_t)v206, (double *)(v196 + 168), v231, 0x14u, v232 * 0.5))
              {
                if (sub_20EB2498C((float64x2_t *)&v736, (uint64_t)v752, &__p, (uint64_t)v205, (double *)(v196 + 168), v233))
                {
                  v181.i64[0] = v205->__pn_.__r_.__value_.__r.__words[2];
                  *(_QWORD *)&v227 = *(_QWORD *)&v752[16];
                  v184 = *(int32x4_t *)&v752[32];
                  _Q3 = *(int32x4_t *)v752;
                  v753 = *(int8x16_t *)&v205->__pn_.__r_.__value_.__l.__data_;
                  v182.i64[1] = v753.i64[1];
                  v754 = (std::__shared_weak_count *)v181.i64[0];
                  v751 = 0;
                  *(_QWORD *)&v234.f64[0] = v181.i64[0];
                  *(_QWORD *)&v234.f64[1] = v753.i64[0];
                  _Q5 = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v752[32], v234), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v752[32], *(int64x2_t *)&v752[16]), (float64x2_t)vextq_s8(v753, v181, 8uLL));
                  _Q6 = vmulq_f64(*(float64x2_t *)v752, _Q5);
                  _Q5.f64[0] = _Q5.f64[1];
                  __asm { FMLA            D6, D5, V3.D[1] }
                  _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(*(float64x2_t *)&v752[16], (float64x2_t)v753), 1), *(float64x2_t *)&v752[32], (float64x2_t)v753).f64[0], *(double *)&v752[16]);
                  _Q5.f64[0] = fabs(_Q6.f64[0]);
                  if (_Q5.f64[0] >= 0.00000001)
                  {
LABEL_382:
                    *(_QWORD *)&v235 = vextq_s8(*(int8x16_t *)v752, *(int8x16_t *)v752, 8uLL).u64[0];
                    _Q3.i64[1] = vextq_s8(*(int8x16_t *)&v752[16], *(int8x16_t *)&v752[16], 8uLL).u64[0];
                    *((_QWORD *)&v235 + 1) = *(_QWORD *)&v752[32];
                    *((_QWORD *)&v227 + 1) = vextq_s8(*(int8x16_t *)&v752[32], *(int8x16_t *)&v752[32], 8uLL).u64[0];
                    *(int32x4_t *)__dst = _Q3;
                    *(_QWORD *)&__dst[16] = v753.i64[0];
                    v768 = (void *)vextq_s8(v753, v753, 8uLL).u64[0];
                    *(_OWORD *)&__dst[24] = v235;
                    v770 = v181.i64[0];
                    v769 = v227;
                    sub_20E8BE424((uint64_t)&v746);
                    v181.i64[0] = v747.__pn_.__r_.__value_.__r.__words[0];
                    v182.i64[1] = v747.__pn_.__r_.__value_.__r.__words[2];
                    _Q3 = (int32x4_t)vzip1q_s64(v746, *(int64x2_t *)&v747.__pn_.__r_.__value_.__r.__words[1]);
                    v236 = vzip2q_s64(v746, *(int64x2_t *)&v747.__pn_.__r_.__value_.__r.__words[1]);
                    v181.i64[1] = v748;
                    *v208 = (float64x2_t)_Q3;
                    v208[1] = (float64x2_t)v236;
                    v208[2] = (float64x2_t)v181;
LABEL_406:
                    v241 = sqrt(*(double *)&v737.__pn_.__r_.__value_.__l.__data_* *(double *)&v737.__pn_.__r_.__value_.__l.__data_+ *(double *)&v737.__pn_.__r_.__value_.__l.__size_* *(double *)&v737.__pn_.__r_.__value_.__l.__size_);
                    v242 = *(double *)&v737.__pn_.__r_.__value_.__r.__words[2];
                    if (*(double *)&v737.__pn_.__r_.__value_.__r.__words[2] == 0.0)
                      v242 = 1.0;
                    if (v241 / v242 >= v173)
                    {
                      if (!*(_BYTE *)(a2 + 332)
                        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 69, (uint64_t)"ordered", 7, (uint64_t)"Not supported with reordered indices.", 37, (void (*)(void **))sub_21023DDB0))
                      {
                        abort();
                      }
                      v243 = *(_QWORD *)(*__src + 8 * v191);
                      if ((v243 & v192) != 0)
                      {
                        *(_QWORD *)(*__src + 8 * v191) = v243 ^ v192;
                        ++*(_DWORD *)(a2 + 324);
                        if (v187 >= *(unsigned int *)(a2 + 320))
                          ++*(_DWORD *)(a2 + 328);
                      }
                      ++v707;
                    }
                  }
                }
              }
            }
            else
            {
              v221 = (double *)v742;
              v222 = v743;
              v208 = v744;
              v223 = v745;
              if (v197 <= 9)
              {
                if (v197 == 9)
                {
                  v215 = sub_20EB35004(v196, v741, (float64x2_t *)v742, (float64x2_t *)v743, (unint64_t)v744, v745, *(double *)v181.i64, v200, *(double *)v182.i64, _Q3, v184);
                }
                else
                {
                  if (v743)
                  {
                    *(_QWORD *)v743 = 0;
                    *((_QWORD *)v222 + 1) = 0;
                    *((_QWORD *)v222 + 2) = 0;
                  }
                  if (v223)
                  {
                    *(_QWORD *)(v223 + 64) = 0;
                    v181.i64[0] = 0;
                    *(_OWORD *)(v223 + 32) = 0u;
                    *(_OWORD *)(v223 + 48) = 0u;
                    *(_OWORD *)v223 = 0u;
                    *(_OWORD *)(v223 + 16) = 0u;
                  }
                  if (v208)
                  {
                    v215 = sub_20EB277C4((uint64_t)v205, (uint64_t)v208, v221, v196 + 168, 20, *(double *)v181.i64, v200, *(double *)v182.i64, _Q3, v184);
                  }
                  else
                  {
                    v240 = sqrt(*v221 * *v221 + v221[1] * v221[1]);
                    v215 = sub_20EB24018((uint64_t)v205, v221, (double *)(v196 + 168), 20, v240, v240, *(double *)v182.i64, _Q3, v184);
                  }
                }
                goto LABEL_405;
              }
              if (v197 != 10)
              {
                v215 = sub_20EB38E20(v196, v741, (float64x2_t *)v742, (float64x2_t *)v743, v744, v745);
                goto LABEL_405;
              }
              if (v743)
              {
                *(_QWORD *)v743 = 0;
                *((_QWORD *)v222 + 1) = 0;
                *((_QWORD *)v222 + 2) = 0;
              }
              if (v223)
              {
                *(_QWORD *)(v223 + 64) = 0;
                *(_OWORD *)(v223 + 32) = 0u;
                *(_OWORD *)(v223 + 48) = 0u;
                *(_OWORD *)v223 = 0u;
                *(_OWORD *)(v223 + 16) = 0u;
              }
              v224 = (double *)(v196 + 280);
              v225 = *(double *)v196 + *(double *)(v196 + 32);
              v226 = v225 * 0.5;
              if (!v208)
              {
                v215 = sub_20EB24F38((uint64_t)v205, (uint64_t)v221, v196 + 168, v224, 0x14u, v225 * 0.5);
                goto LABEL_405;
              }
              if (sub_20EB24F38((uint64_t)v205, (uint64_t)v221, v196 + 168, v224, 0x14u, v225 * 0.5))
              {
                if (sub_20EB2450C((float64x2_t *)&v736, (uint64_t)v752, &__p, (uint64_t)v205, (double *)(v196 + 168), v226))
                {
                  v181.i64[0] = v205->__pn_.__r_.__value_.__r.__words[2];
                  *(_QWORD *)&v227 = *(_QWORD *)&v752[16];
                  v184 = *(int32x4_t *)&v752[32];
                  _Q3 = *(int32x4_t *)v752;
                  v753 = *(int8x16_t *)&v205->__pn_.__r_.__value_.__l.__data_;
                  v182.i64[1] = v753.i64[1];
                  v754 = (std::__shared_weak_count *)v181.i64[0];
                  v751 = 0;
                  *(_QWORD *)&v228.f64[0] = v181.i64[0];
                  *(_QWORD *)&v228.f64[1] = v753.i64[0];
                  _Q5 = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v752[32], v228), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v752[32], *(int64x2_t *)&v752[16]), (float64x2_t)vextq_s8(v753, v181, 8uLL));
                  _Q6 = vmulq_f64(*(float64x2_t *)v752, _Q5);
                  _Q5.f64[0] = _Q5.f64[1];
                  __asm { FMLA            D6, D5, V3.D[1] }
                  _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(*(float64x2_t *)&v752[16], (float64x2_t)v753), 1), *(float64x2_t *)&v752[32], (float64x2_t)v753).f64[0], *(double *)&v752[16]);
                  _Q5.f64[0] = fabs(_Q6.f64[0]);
                  if (_Q5.f64[0] >= 0.00000001)
                    goto LABEL_382;
                }
              }
            }
LABEL_299:
            v187 = v189;
            v190 = a2;
            ++v189;
            if (v187 >= (uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3)
              goto LABEL_415;
          }
        }
        v707 = 0;
LABEL_415:
        sub_20EEA55F4(&__p);
        if (**(int **)(*(_QWORD *)&__p.f64[0] + 56) <= 3)
        {
          v244 = *(unsigned __int8 *)(*(_QWORD *)&__p.f64[0] + 72);
          v245 = sub_20E8C31DC(*(uint64_t *)&__p.f64[0], "OSLogSurrogateAppender", 1, 0);
          v246 = v245;
          if (v244 || v245 != 0)
          {
            *(_QWORD *)v752 = &__p;
            *(std::chrono::steady_clock::time_point *)&v752[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v752[16] = std::chrono::system_clock::now();
            *(_DWORD *)&v752[24] = 3;
            *(_QWORD *)&v752[32] = "unknown file";
            *(_DWORD *)&v752[40] = 123;
            v754 = 0;
            v753.i64[0] = (uint64_t)"unknown function";
            v753.i64[1] = 0;
            __srca = *(void **)(a2 + 280);
            v248 = *(unsigned int *)(a2 + 324);
            v249 = **(_QWORD **)v752;
            v250 = (const char *)(**(_QWORD **)v752 + 16);
            v721 = v250;
            v725 = *(_QWORD *)(a2 + 272);
            if (*(char *)(**(_QWORD **)v752 + 39) < 0)
            {
              v250 = *(const char **)(v249 + 16);
              v251 = *(_QWORD *)(v249 + 24);
            }
            else
            {
              v251 = *(unsigned __int8 *)(**(_QWORD **)v752 + 39);
            }
            v252 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v252 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)__dst);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
              if (__dst[24] && (__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v253 = byte_254A4A4F8;
            else
              v253 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v254 = byte_254A4A4F8[23];
            else
              v254 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)__dst = os_log_create(v253, v250);
            v255 = &__dst[8];
            if (v254 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v254 >= 0x17)
            {
              v256 = v246;
              v257 = v250;
              v258 = v249;
              v259 = v248;
              v260 = v244;
              v261 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v254 | 7) != 0x17)
                v261 = v254 | 7;
              v262 = v261 + 1;
              v255 = operator new(v261 + 1);
              *(_QWORD *)&__dst[24] = v262 | 0x8000000000000000;
              *(_QWORD *)&__dst[8] = v255;
              *(_QWORD *)&__dst[16] = v254;
              v244 = v260;
              v248 = v259;
              v249 = v258;
              v250 = v257;
              v246 = v256;
            }
            else
            {
              __dst[31] = v254;
              if (!v254)
              {
LABEL_438:
                v255[v254] = 0;
                __dst[32] = 1;
                v263 = &v768;
                if (v251 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v251 >= 0x17)
                {
                  v264 = (v251 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v251 | 7) != 0x17)
                    v264 = v251 | 7;
                  v265 = v264 + 1;
                  v263 = operator new(v264 + 1);
                  *((_QWORD *)&v769 + 1) = v265 | 0x8000000000000000;
                  v768 = v263;
                  *(_QWORD *)&v769 = v251;
                }
                else
                {
                  HIBYTE(v769) = v251;
                  if (!v251)
                  {
LABEL_446:
                    *((_BYTE *)v263 + v251) = 0;
                    LOBYTE(v770) = 1;
                    v266 = *(NSObject **)__dst;
                    if (SHIBYTE(v769) < 0)
                      operator delete(v768);
                    if (__dst[32] && (__dst[31] & 0x80000000) != 0)
                      operator delete(*(void **)&__dst[8]);
                    if (*(_QWORD *)__dst)
                      os_release(*(void **)__dst);
                    v267 = (((uint64_t)__srca - v725) >> 3) - v248;
                    if (v246 && *(_QWORD *)(v246 + 24))
                    {
                      v268 = _os_log_pack_size();
                      v9 = v700;
                      v269 = (std::__shared_weak_count_vtbl *)operator new(v268, (std::align_val_t)8uLL);
                      v270 = (std::__shared_weak_count *)operator new();
                      v271 = v270;
                      v270->__shared_owners_ = 0;
                      p_shared_owners = (unint64_t *)&v270->__shared_owners_;
                      v270->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v270->__shared_weak_owners_ = 0;
                      v270[1].__vftable = v269;
                      *(_QWORD *)__dst = v269;
                      *(_QWORD *)&__dst[8] = v269;
                      *(_QWORD *)&__dst[16] = v270;
                      do
                        v273 = __ldxr(p_shared_owners);
                      while (__stxr(v273 + 1, p_shared_owners));
                      *(_QWORD *)&__dst[32] = 0;
                      *(_QWORD *)&__dst[24] = 0;
                      v768 = 0;
                      do
                        v274 = __ldaxr(p_shared_owners);
                      while (__stlxr(v274 - 1, p_shared_owners));
                      if (!v274)
                      {
                        ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                        std::__shared_weak_count::__release_weak(v271);
                      }
                      v275 = *(_QWORD *)__dst;
                      v276 = _os_log_pack_fill();
                      *(_DWORD *)v276 = 134218496;
                      *(double *)(v276 + 4) = v171;
                      *(_WORD *)(v276 + 12) = 2048;
                      *(_QWORD *)(v276 + 14) = v267 + v707;
                      *(_WORD *)(v276 + 22) = 2048;
                      *(_QWORD *)(v276 + 24) = v267;
                      v277 = operator new();
                      v278 = *(unsigned __int8 *)(v249 + 39);
                      v279 = v721;
                      if ((v278 & 0x80u) != 0)
                      {
                        v279 = *(const char **)(v249 + 16);
                        v278 = *(_QWORD *)(v249 + 24);
                      }
                      *(_QWORD *)v277 = v275;
                      *(_OWORD *)(v277 + 8) = *(_OWORD *)&__dst[8];
                      *(_QWORD *)&__dst[8] = 0;
                      *(_QWORD *)&__dst[16] = 0;
                      *(_OWORD *)(v277 + 24) = *(_OWORD *)&__dst[24];
                      *(_QWORD *)&__dst[24] = 0;
                      *(_QWORD *)&__dst[32] = 0;
                      *(_QWORD *)(v277 + 40) = v279;
                      *(_QWORD *)(v277 + 48) = v278;
                      *(_BYTE *)(v277 + 56) = 1;
                      v741 = 0;
                      v746.i64[0] = v277;
                      (*(void (**)(_QWORD, int64x2_t *))(**(_QWORD **)(v246 + 24) + 40))(*(_QWORD *)(v246 + 24), &v746);
                      v280 = v746.i64[0];
                      v746.i64[0] = 0;
                      if (v280)
                      {
                        v281 = *(std::__shared_weak_count **)(v280 + 32);
                        if (v281)
                        {
                          v282 = (unint64_t *)&v281->__shared_owners_;
                          do
                            v283 = __ldaxr(v282);
                          while (__stlxr(v283 - 1, v282));
                          if (!v283)
                          {
                            ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                            std::__shared_weak_count::__release_weak(v281);
                          }
                        }
                        v284 = *(std::__shared_weak_count **)(v280 + 16);
                        if (v284)
                        {
                          v285 = (unint64_t *)&v284->__shared_owners_;
                          do
                            v286 = __ldaxr(v285);
                          while (__stlxr(v286 - 1, v285));
                          if (!v286)
                          {
                            ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                            std::__shared_weak_count::__release_weak(v284);
                          }
                        }
                        MEMORY[0x212BC6398](v280, 0x10F0C40B62ED6C6);
                        v287 = v741;
                        v741 = 0;
                        if (v287)
                        {
                          v288 = *(std::__shared_weak_count **)(v287 + 32);
                          if (v288)
                          {
                            v289 = (unint64_t *)&v288->__shared_owners_;
                            do
                              v290 = __ldaxr(v289);
                            while (__stlxr(v290 - 1, v289));
                            if (!v290)
                            {
                              ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                              std::__shared_weak_count::__release_weak(v288);
                            }
                          }
                          v291 = *(std::__shared_weak_count **)(v287 + 16);
                          if (v291)
                          {
                            v292 = (unint64_t *)&v291->__shared_owners_;
                            do
                              v293 = __ldaxr(v292);
                            while (__stlxr(v293 - 1, v292));
                            if (!v293)
                            {
                              ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                              std::__shared_weak_count::__release_weak(v291);
                            }
                          }
                          MEMORY[0x212BC6398](v287, 0x10F0C40B62ED6C6);
                        }
                      }
                      v294 = *(std::__shared_weak_count **)&__dst[32];
                      if (*(_QWORD *)&__dst[32])
                      {
                        v295 = (unint64_t *)(*(_QWORD *)&__dst[32] + 8);
                        do
                          v296 = __ldaxr(v295);
                        while (__stlxr(v296 - 1, v295));
                        if (!v296)
                        {
                          ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                          std::__shared_weak_count::__release_weak(v294);
                        }
                      }
                      v297 = *(std::__shared_weak_count **)&__dst[16];
                      if (*(_QWORD *)&__dst[16])
                      {
                        v298 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                        do
                          v299 = __ldaxr(v298);
                        while (__stlxr(v299 - 1, v298));
                        if (!v299)
                        {
                          ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                          std::__shared_weak_count::__release_weak(v297);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v266, OS_LOG_TYPE_INFO);
                      *(_DWORD *)__dst = 134218496;
                      *(double *)&__dst[4] = v171;
                      *(_WORD *)&__dst[12] = 2048;
                      *(_QWORD *)&__dst[14] = v267 + v707;
                      *(_WORD *)&__dst[22] = 2048;
                      *(_QWORD *)&__dst[24] = (((uint64_t)__srca - v725) >> 3) - v248;
                      v300 = (void *)_os_log_send_and_compose_impl();
                      v9 = v700;
                      if (v300)
                        free(v300);
                    }
                    if (v244)
                    {
                      sub_20E8C003C((uint64_t)v752, "Number of point features cropping to %f FOV ([before, after]): ([%lu, %lu]).", v171, ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3)- *(unsigned int *)(a2 + 324)+ v707, ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3) - *(unsigned int *)(a2 + 324));
                      sub_20E863570((uint64_t)v752);
                    }
                    sub_20E863570((uint64_t)v752);
                    v301 = v754;
                    if (v754)
                    {
                      v302 = (unint64_t *)&v754->__shared_owners_;
                      do
                        v303 = __ldaxr(v302);
                      while (__stlxr(v303 - 1, v302));
                      if (!v303)
                      {
                        ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                        std::__shared_weak_count::__release_weak(v301);
                      }
                    }
                    goto LABEL_505;
                  }
                }
                memmove(v263, v250, v251);
                goto LABEL_446;
              }
            }
            memmove(v255, v253, v254);
            goto LABEL_438;
          }
        }
LABEL_505:
        size = v738.__r_.__value_.__l.__size_;
        if (v738.__r_.__value_.__l.__size_)
        {
          v305 = v738.__r_.__value_.__r.__words[2];
          v306 = (void *)v738.__r_.__value_.__l.__size_;
          if (v738.__r_.__value_.__r.__words[2] != v738.__r_.__value_.__l.__size_)
          {
            do
              v305 = sub_20EB8188C(v305 - 1664);
            while (v305 != size);
            v306 = (void *)v738.__r_.__value_.__l.__size_;
          }
          v738.__r_.__value_.__r.__words[2] = size;
          operator delete(v306);
        }
        if (v739[0])
        {
          v739[1] = v739[0];
          operator delete(v739[0]);
        }
      }
    }
  }
  v307 = *(_QWORD *)(a2 + 272);
  v308 = *(unint64_t **)(a2 + 280);
  v309 = (uint64_t)((uint64_t)v308 - v307) >> 3;
  v726 = *(unsigned int *)(a2 + 324);
  if (*(_BYTE *)(a2 + 332))
  {
    v310 = (uint64_t)((uint64_t)v308 - v307) >> 3;
    v311 = a2;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 54, (uint64_t)"ordered", 7, (uint64_t)"Indices can only be reordered once.", 35, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v311 = a2;
    v307 = *(_QWORD *)(a2 + 272);
    v308 = *(unint64_t **)(a2 + 280);
    v310 = (uint64_t)((uint64_t)v308 - v307) >> 3;
  }
  *(_QWORD *)__dst = v9;
  v312 = 126 - 2 * __clz(v310);
  if (v308 == (unint64_t *)v307)
    v313 = 0;
  else
    v313 = v312;
  sub_20EEB1560(v307, v308, (uint64_t)__dst, v313, 1);
  *(_BYTE *)(v311 + 332) = 0;
  v314 = v734[7];
  v722 = v309;
  if (v314 == v734[8])
  {
    v327 = 0;
    v328 = 0;
    v329 = v734;
    v331 = *(_QWORD *)(a2 + 272);
    v330 = *(_QWORD *)(a2 + 280);
    if (*((_BYTE *)v734 + 184))
      goto LABEL_911;
LABEL_538:
    if (v329[20] == v329[21])
    {
      v332 = v329[11] - v329[10];
      goto LABEL_913;
    }
LABEL_917:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if ((v330 - v331) >> 3 != (uint64_t)(v734[8] - v734[7]) >> 5)
      goto LABEL_919;
    goto LABEL_920;
  }
  v316 = *v734;
  v315 = v734[1];
  v746 = 0u;
  *(_OWORD *)&v747.__pn_.__r_.__value_.__l.__data_ = 0u;
  LODWORD(v747.__pn_.__r_.__value_.__r.__words[2]) = 733226600;
  kdebug_trace();
  if (*(_DWORD *)(a2 + 88) == -1)
  {
    v333 = 0;
    v327 = 0;
    v334 = 0;
    goto LABEL_910;
  }
  v318 = *v727;
  v319 = *(_QWORD *)(a2 + 592);
  v320 = *(_QWORD *)(a2 + 600) - v319;
  if (v318 >= v320 >> 5
    || 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v319 + 32 * v318 + 16) - *(_QWORD *)(v319 + 32 * v318 + 8)) >> 7) <= (unint64_t)*(unsigned int *)(v709 + 396))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/FeatureFilterTransforms.hpp", 155, (uint64_t)"cam_strm_id.camera_id < cam_list.size() && cam_strm_id.stream_id < cam_list[cam_strm_id.camera_id].NumStreams()", 111, (uint64_t)"Stream input does not match system configuration.", 49, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v319 = *(_QWORD *)(a2 + 592);
    v320 = *(_QWORD *)(a2 + 600) - v319;
  }
  if ((unint64_t)v320 <= 0x20)
  {
    v335 = a2;
    v321 = *(_DWORD *)(a2 + 88);
    v322 = *(_DWORD *)(a2 + 92);
    v323 = v322 + v321;
    __srcb = 1;
    if (!*(_BYTE *)(a2 + 584))
      goto LABEL_544;
    goto LABEL_542;
  }
  v321 = *(_DWORD *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 96)
    || (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v319 + 16) - *(_QWORD *)(v319 + 8)) >> 7)) <= 1)
  {
    v335 = a2;
    v322 = *(_DWORD *)(a2 + 92);
    v323 = v322 + v321;
    __srcb = 1;
    if (!*(_BYTE *)(a2 + 584))
      goto LABEL_544;
    goto LABEL_542;
  }
  v322 = *(_DWORD *)(a2 + 92);
  v323 = v322 + v321;
  if (!*(_BYTE *)(a2 + 344))
  {
    __srcb = 1;
    v335 = a2;
    if (!*(_BYTE *)(a2 + 584))
      goto LABEL_544;
    goto LABEL_542;
  }
  if (*v727 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_1115;
  }
  v324 = *(_DWORD *)(v709 + 396);
  if (v324 < 0x10000)
    goto LABEL_534;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_1115:
    abort();
  }
  LOWORD(v324) = *(_WORD *)(v709 + 396);
LABEL_534:
  v325 = (unsigned __int16)v324 | ((unsigned __int16)*v727 << 16);
  v326 = a2 + 384;
  if (*(_DWORD *)(a2 + 384) != (_DWORD)v325)
  {
    if (*(_DWORD *)(a2 + 408) == (_DWORD)v325)
    {
      v326 = a2 + 408;
    }
    else if (*(_DWORD *)(a2 + 432) == (_DWORD)v325)
    {
      v326 = a2 + 432;
    }
    else if (*(_DWORD *)(a2 + 456) == (_DWORD)v325)
    {
      v326 = a2 + 456;
    }
    else if (*(_DWORD *)(a2 + 480) == (_DWORD)v325)
    {
      v326 = a2 + 480;
    }
    else if (*(_DWORD *)(a2 + 504) == (_DWORD)v325)
    {
      v326 = a2 + 504;
    }
    else if (*(_DWORD *)(a2 + 528) == (_DWORD)v325)
    {
      v326 = a2 + 528;
    }
    else if (*(_DWORD *)(a2 + 552) == (_DWORD)v325)
    {
      v326 = a2 + 552;
    }
    else
    {
      v326 = a2 + 576;
    }
  }
  sub_20EEA57DC(a2 + 384, v325, v326);
  v681 = *(double *)(v326 + 8);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 592) + 32 * *v727 + 16)
                                   - *(_QWORD *)(*(_QWORD *)(a2 + 592) + 32 * *v727 + 8)) >> 7)) < 2)
  {
    v682 = *(_BYTE *)(a2 + 97) != 0;
  }
  else
  {
    if (*(_DWORD *)(a2 + 88) >= ((*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3)
                               - *(_DWORD *)(a2 + 324))
      v321 = ((*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3) - *(_DWORD *)(a2 + 324);
    else
      v321 = *(_DWORD *)(a2 + 88);
    v682 = 1;
  }
  __srcb = v682;
  v322 = (v681 * (double)v322);
  v321 = (v681 * (double)v321);
  v335 = a2;
  if (*(_BYTE *)(a2 + 584))
  {
LABEL_542:
    v336 = *(double *)(v335 + 104);
    goto LABEL_546;
  }
LABEL_544:
  if (*(_BYTE *)(v335 + 585))
  {
    v336 = *(double *)(v335 + 112);
LABEL_546:
    v321 = (v336 * (double)v321);
    v322 = (v336 * (double)v322);
    v323 = (v336 * (double)v323);
  }
  v337 = v322 + v321;
  if (v322 + v321 >= *(_DWORD *)(v335 + 132))
  {
    if (*(_BYTE *)(v335 + 120))
    {
      v344 = *(unsigned int *)(v335 + 124);
      v345 = *(float *)(v335 + 128);
      *(_DWORD *)__dst = v344;
      memset(&__dst[16], 0, 24);
      if ((v344 & 1) == 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/AreaBinningFeatureFilter.hpp", 37, (uint64_t)"area_binning_num_bins_1d % 2 == 1", 33, (uint64_t)"Number of bins must be odd for AreaBinning", 42, (void (*)(void **))sub_21023DDB0)|| (!(_DWORD)v344 || v345 <= 0.0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/AreaBinningFeatureFilter.hpp", 39, (uint64_t)"(area_binning_num_bins_1d > 0 && gaussian_kernel_sigma > 0)", 59, (uint64_t)"Incorrect bin configuration in AreaBinning FeatureFilter", 56, (void (*)(void **))sub_21023DDB0)|| (!(_DWORD)v316 || !(_DWORD)v315)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/AreaBinningFeatureFilter.hpp", 42, (uint64_t)"image_width > 0u && image_height > 0u", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| ((v346 = v344 - 1 + v316, v347 = v344 - 1 + v315, *(_DWORD *)&__dst[4] = v346 / v344, *(_DWORD *)&__dst[8] = v347 / v344, v346 < v344)|| v347 < v344)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/AreaBinningFeatureFilter.hpp", 48, (uint64_t)"(pixels_per_bin_u_ != 0 && pixels_per_bin_v_ != 0)",
             50,
             (uint64_t)"invalid image size for AreaBinning FeatureFilter",
             48,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      sub_210122538(v344, v752, v345, v317);
      v349 = v323;
      if (*(_QWORD *)&__dst[16])
      {
        *(_QWORD *)&__dst[24] = *(_QWORD *)&__dst[16];
        operator delete(*(void **)&__dst[16]);
      }
      v350 = *(double *)v752;
      *(_OWORD *)&__dst[16] = *(_OWORD *)v752;
      *(_QWORD *)&__dst[32] = *(_QWORD *)&v752[16];
      if (v321 == -1)
        goto LABEL_808;
      v715 = *(unsigned int *)(a2 + 100);
      v352 = *(_QWORD *)(a2 + 272);
      v351 = *(_QWORD *)(a2 + 280);
      v353 = v351 - v352;
      v354 = (unint64_t)(v351 - v352) >> 3;
      v355 = *(_DWORD *)(a2 + 324);
      v356 = *(_DWORD *)(a2 + 320);
      v357 = *(_DWORD *)(a2 + 328);
      v358 = v354 - (v356 + v357);
      v359 = v356 + v357 - v355;
      v360 = v359 - v337;
      if (v359 <= v337)
      {
        if ((__srcb & 1) == 0)
        {
          if (*(_BYTE *)(a2 + 332))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1093;
            }
            v395 = a2;
            v352 = *(_QWORD *)(a2 + 272);
            v351 = *(_QWORD *)(a2 + 280);
            v356 = *(_DWORD *)(a2 + 320);
            v357 = *(_DWORD *)(a2 + 328);
            v353 = v351 - v352;
            v354 = (unint64_t)(v351 - v352) >> 3;
            v396 = (v354 - (v357 + v356));
            v355 = *(_DWORD *)(a2 + 324) + v358;
          }
          else
          {
            v355 += v358;
            v396 = (v354 - (v356 + v357));
            v395 = a2;
          }
          v357 += v358;
          v460 = v354 - v356;
          if (v396 < v358)
            v357 = v460;
          *(_DWORD *)(v395 + 328) = v357;
          *(_DWORD *)(v395 + 324) = v355;
        }
        v461 = (v353 >> 3) - v355;
        v462 = v461 - v715;
        if (v461 > v715)
        {
          v463 = a2;
          if (*(_BYTE *)(a2 + 332))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1093;
            }
            v463 = a2;
            v352 = *(_QWORD *)(a2 + 272);
            v351 = *(_QWORD *)(a2 + 280);
            v356 = *(_DWORD *)(a2 + 320);
            v357 = *(_DWORD *)(a2 + 328);
            v355 = *(_DWORD *)(a2 + 324);
          }
          v464 = (unint64_t)(v351 - v352) >> 3;
          v465 = (v464 - (v356 + v357));
          v466 = v357 + v462;
          v467 = v464 - v356;
          if (v465 >= v462)
            v467 = v466;
          *(_DWORD *)(v463 + 328) = v467;
          v468 = v355 + v462;
          goto LABEL_807;
        }
      }
      else
      {
        if (*(_BYTE *)(a2 + 332))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 163, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1093;
          }
          v352 = *(_QWORD *)(a2 + 272);
          v351 = *(_QWORD *)(a2 + 280);
          v355 = *(_DWORD *)(a2 + 324);
          v353 = v351 - v352;
        }
        _ZF = v352 == v351;
        v361 = v353 >> 3;
        v363 = !_ZF && v352 != 0;
        v364 = v361 - v355;
        if (v361 != v355
          && (v363 & 1) == 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| v364 < v359&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 474, (uint64_t)"offset + count <= size()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1093;
        }
        if ((v363 & 1) == 0)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1093;
          }
          v352 = 0;
        }
        *(_QWORD *)v752 = v359;
        *(_QWORD *)&v752[8] = v352;
        sub_20EEA5970((uint64_t)__dst, v314, v321, 1, (unint64_t *)v752, v350, v348);
        if (v359 - v321 + (unint64_t)v321 > v359
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 474, (uint64_t)"offset + count <= size()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_1093:
          abort();
        }
        v367 = (void *)(v352 + 8 * v321);
        if ((_DWORD)v359 != v321 && !v352)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1093;
          }
          v367 = 0;
        }
        v741 = v359 - v321;
        v742 = v367;
        sub_20EEA5970((uint64_t)__dst, v314, v322, 0, (unint64_t *)&v741, v365, v366);
        if (!__srcb)
        {
          v406 = *(_QWORD *)(a2 + 272);
          v405 = *(_QWORD *)(a2 + 280);
          v407 = v405 - v406;
          v408 = (v405 - v406) >> 3;
          v409 = *(unsigned int *)(a2 + 324);
          if (*(_BYTE *)(a2 + 332))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1093;
            }
            v410 = (_DWORD *)a2;
            v406 = *(_QWORD *)(a2 + 272);
            v405 = *(_QWORD *)(a2 + 280);
            v411 = *(_DWORD *)(a2 + 324);
            v407 = v405 - v406;
            v412 = (v405 - v406) >> 3;
          }
          else
          {
            v412 = (v405 - v406) >> 3;
            v411 = *(_DWORD *)(a2 + 324);
            v410 = (_DWORD *)a2;
          }
          v508 = v408 - (v409 + v337);
          v509 = v407 >> 3;
          v456 = v410[80];
          v510 = v410[82];
          v511 = (v509 - (v456 + v510));
          v512 = v510 + v508;
          v513 = v509 - v456;
          if (v511 >= v508)
            v513 = v512;
          v410[82] = v513;
          v369 = (v411 + v508);
          v410[81] = v369;
          v514 = v412 - v369;
          v459 = v514 - v715;
          if (v514 <= v715)
            goto LABEL_808;
          goto LABEL_801;
        }
        v368 = *(_DWORD *)(a2 + 320);
        LODWORD(v369) = *(_DWORD *)(a2 + 324);
        if (v368 - (int)v369 + *(_DWORD *)(a2 + 328) >= v360)
        {
          v370 = a2;
        }
        else
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 170, (uint64_t)"amt <= active_reg_idx", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1093;
          }
          v370 = a2;
          v368 = *(_DWORD *)(a2 + 320);
          LODWORD(v369) = *(_DWORD *)(a2 + 324);
        }
        v456 = v368 - v360;
        *(_DWORD *)(v370 + 320) = v368 - v360;
        v457 = v370 + 272;
        v406 = *(_QWORD *)(v370 + 272);
        v405 = *(_QWORD *)(v457 + 8);
        v458 = ((v405 - v406) >> 3) - v369;
        if (v458 > v715)
        {
          v459 = v458 - v715;
LABEL_801:
          v463 = a2;
          if (!*(_BYTE *)(a2 + 332))
          {
LABEL_804:
            v515 = (unint64_t)(v405 - v406) >> 3;
            v516 = *(_DWORD *)(v463 + 328);
            v517 = (v515 - v516 - v456);
            v518 = v516 + v459;
            v519 = v515 - v456;
            if (v517 >= v459)
              v519 = v518;
            *(_DWORD *)(v463 + 328) = v519;
            v468 = v369 + v459;
LABEL_807:
            *(_DWORD *)(v463 + 324) = v468;
            goto LABEL_808;
          }
          if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
          {
            v463 = a2;
            v406 = *(_QWORD *)(a2 + 272);
            v405 = *(_QWORD *)(a2 + 280);
            v456 = *(_DWORD *)(a2 + 320);
            LODWORD(v369) = *(_DWORD *)(a2 + 324);
            goto LABEL_804;
          }
          goto LABEL_1093;
        }
      }
LABEL_808:
      if (*(_QWORD *)&__dst[16])
      {
        *(_QWORD *)&__dst[24] = *(_QWORD *)&__dst[16];
        operator delete(*(void **)&__dst[16]);
      }
      v323 = v349;
      goto LABEL_811;
    }
    v373 = *(unsigned int *)(v335 + 100);
    *(_QWORD *)v752 = v314;
    if (v321 == -1)
      goto LABEL_811;
    v375 = *(_QWORD *)(a2 + 272);
    v374 = *(_QWORD *)(a2 + 280);
    v376 = v374 - v375;
    v377 = (unint64_t)(v374 - v375) >> 3;
    v378 = *(_DWORD *)(a2 + 324);
    v379 = *(_DWORD *)(a2 + 320);
    v380 = *(_DWORD *)(a2 + 328);
    v381 = v377 - (v379 + v380);
    v382 = v379 + v380 - v378;
    v716 = v382 - v337;
    if (v382 <= v337)
    {
      if ((__srcb & 1) == 0)
      {
        if (*(_BYTE *)(a2 + 332))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1091;
          }
          v403 = a2;
          v375 = *(_QWORD *)(a2 + 272);
          v374 = *(_QWORD *)(a2 + 280);
          v379 = *(_DWORD *)(a2 + 320);
          v380 = *(_DWORD *)(a2 + 328);
          v376 = v374 - v375;
          v377 = (unint64_t)(v374 - v375) >> 3;
          v404 = (v377 - (v380 + v379));
          v378 = *(_DWORD *)(a2 + 324) + v381;
        }
        else
        {
          v378 += v381;
          v404 = (v377 - (v379 + v380));
          v403 = a2;
        }
        v380 += v381;
        v640 = v377 - v379;
        if (v404 < v381)
          v380 = v640;
        *(_DWORD *)(v403 + 328) = v380;
        *(_DWORD *)(v403 + 324) = v378;
      }
      v641 = (v376 >> 3) - v378;
      v642 = v641 - v373;
      if (v641 <= v373)
        goto LABEL_811;
      v643 = a2;
      if (*(_BYTE *)(a2 + 332))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1091;
        }
        v643 = a2;
        v375 = *(_QWORD *)(a2 + 272);
        v374 = *(_QWORD *)(a2 + 280);
        v379 = *(_DWORD *)(a2 + 320);
        v380 = *(_DWORD *)(a2 + 328);
        v378 = *(_DWORD *)(a2 + 324);
      }
      v644 = (unint64_t)(v374 - v375) >> 3;
      v645 = (v644 - (v379 + v380));
      v646 = v380 + v642;
      v647 = v644 - v379;
      if (v645 >= v642)
        v647 = v646;
      *(_DWORD *)(v643 + 328) = v647;
      *(_DWORD *)(v643 + 324) = v378 + v642;
      goto LABEL_811;
    }
    if (*(_BYTE *)(a2 + 332))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 163, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1091;
      }
      v375 = *(_QWORD *)(a2 + 272);
      v374 = *(_QWORD *)(a2 + 280);
      v378 = *(_DWORD *)(a2 + 324);
      v376 = v374 - v375;
    }
    _ZF = v375 == v374;
    v383 = v376 >> 3;
    v385 = !_ZF && v375 != 0;
    v386 = v383 - v378;
    if (v383 != v378
      && (v385 & 1) == 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| v386 < v382&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 474, (uint64_t)"offset + count <= size()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1091;
    }
    if ((v385 & 1) == 0)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1091;
      }
      v375 = 0;
    }
    LOBYTE(v741) = 0;
    if (v382 < v321
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/FeatureFilterTransforms.hpp", 276, (uint64_t)"max_num_point_feature_large_scale <= valid_feature_size", 55, (uint64_t)"max_num_point_feature_large_scale size invalid", 46, (void (*)(void **))sub_21023DDB0))
    {
LABEL_1091:
      abort();
    }
    v387 = (char *)(v375 + 8 * v321);
    v388 = (uint64_t *)(v375 + 8 * v382);
    if ((_DWORD)v382 == v321)
    {
LABEL_621:
      *(_QWORD *)__dst = &v741;
      *(_QWORD *)&__dst[8] = v752;
      v389 = 126 - 2 * __clz(v321);
      if (v321)
        v390 = v389;
      else
        v390 = 0;
      sub_20EEA82E0(v375, (uint64_t *)(v375 + 8 * v321), (uint64_t)__dst, v390, 1);
      if (!v322)
      {
LABEL_627:
        if (__srcb)
        {
          v392 = *(_DWORD *)(a2 + 320);
          LODWORD(v393) = *(_DWORD *)(a2 + 324);
          if (v392 - (int)v393 + *(_DWORD *)(a2 + 328) >= v716)
          {
            v394 = a2;
          }
          else
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 170, (uint64_t)"amt <= active_reg_idx", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1091;
            }
            v394 = a2;
            v392 = *(_DWORD *)(a2 + 320);
            LODWORD(v393) = *(_DWORD *)(a2 + 324);
          }
          *(_DWORD *)(v394 + 320) = v392 - v716;
          v632 = v394 + 272;
          v454 = *(_QWORD *)(v394 + 272);
          v453 = *(_QWORD *)(v632 + 8);
          v633 = ((v453 - v454) >> 3) - v393;
          v455 = v633 - v373;
          if (v633 <= v373)
            goto LABEL_811;
          v452 = a2;
        }
        else
        {
          v452 = a2;
          v454 = *(_QWORD *)(a2 + 272);
          v453 = *(_QWORD *)(a2 + 280);
          v393 = *(unsigned int *)(a2 + 324);
          v455 = ((v453 - v454) >> 3) - (v393 + v337);
        }
        if (*(_BYTE *)(v452 + 332))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1091;
          }
          v452 = a2;
          v454 = *(_QWORD *)(a2 + 272);
          v453 = *(_QWORD *)(a2 + 280);
          LODWORD(v393) = *(_DWORD *)(a2 + 324);
        }
        v634 = (unint64_t)(v453 - v454) >> 3;
        v635 = *(_DWORD *)(v452 + 320);
        v636 = *(_DWORD *)(v452 + 328);
        v637 = (v634 - (v636 + v635));
        v638 = v636 + v455;
        v639 = v634 - v635;
        if (v637 >= v455)
          v639 = v638;
        *(_DWORD *)(v452 + 328) = v639;
        *(_DWORD *)(v452 + 324) = v393 + v455;
        goto LABEL_811;
      }
      v738.__r_.__value_.__s.__data_[0] = 0;
      v391 = (uint64_t *)(v375 + 8 * v337);
      if ((_DWORD)v382 == v337)
      {
LABEL_626:
        *(_QWORD *)__dst = &v738;
        *(_QWORD *)&__dst[8] = v752;
        sub_20EEA935C(v375 + 8 * v321, v391, (uint64_t)__dst, 126 - 2 * __clz(((char *)v391 - v387) >> 3), 1);
        goto LABEL_627;
      }
      v469 = *(_QWORD *)v752;
      v470 = (uint64_t *)(v375 + 8 * v321);
      while (1)
      {
        v471 = v388 - v470;
        if (v471 < 2)
          goto LABEL_626;
        if (v471 == 3)
        {
          v665 = *v470;
          v666 = v470[1];
          v667 = *(float *)(v469 + 32 * v666 + 28);
          v668 = *(float *)(v469 + 32 * *v470 + 28);
          v669 = *(v388 - 1);
          v670 = *(float *)(v469 + 32 * v669 + 28);
          if (v667 <= v668)
          {
            if (v670 > v667)
            {
              v470[1] = v669;
              *(v388 - 1) = v666;
              v686 = *v470;
              v685 = v470[1];
              if (*(float *)(v469 + 32 * v685 + 28) > *(float *)(v469 + 32 * *v470 + 28))
              {
                *v470 = v685;
                v470[1] = v686;
              }
            }
          }
          else if (v670 <= v667)
          {
            *v470 = v666;
            v470[1] = v665;
            v688 = *(v388 - 1);
            if (*(float *)(v469 + 32 * v688 + 28) > v668)
            {
              v470[1] = v688;
              *(v388 - 1) = v665;
            }
          }
          else
          {
            *v470 = v669;
            *(v388 - 1) = v665;
          }
          goto LABEL_626;
        }
        if (v471 == 2)
        {
          v671 = *(v388 - 1);
          v672 = *v470;
          if (*(float *)(v469 + 32 * v671 + 28) > *(float *)(v469 + 32 * *v470 + 28))
          {
            *v470 = v671;
            *(v388 - 1) = v672;
          }
          goto LABEL_626;
        }
        if ((char *)v388 - (char *)v470 <= 63)
        {
          if (v388 - 1 != v470)
          {
            v673 = *(_QWORD *)v752;
            do
            {
              if (v470 != v388)
              {
                v674 = v470 + 1;
                if (v470 + 1 != v388)
                {
                  v675 = *v470;
                  v676 = *v470;
                  v677 = v470;
                  v678 = v470 + 1;
                  do
                  {
                    v680 = *v678++;
                    v679 = v680;
                    if (*(float *)(v673 + 32 * v680 + 28) > *(float *)(v673 + 32 * v676 + 28))
                    {
                      v676 = v679;
                      v677 = v674;
                    }
                    v674 = v678;
                  }
                  while (v678 != v388);
                  if (v677 != v470)
                  {
                    *v470 = *v677;
                    *v677 = v675;
                  }
                }
              }
              ++v470;
            }
            while (v470 != v388 - 1);
          }
          goto LABEL_626;
        }
        v472 = &v470[v471 >> 1];
        v473 = v388 - 1;
        v474 = *(v388 - 1);
        v475 = *v472;
        v476 = *v470;
        v477 = *(float *)(v469 + 32 * *v472 + 28);
        v478 = *(float *)(v469 + 32 * *v470 + 28);
        v479 = *(float *)(v469 + 32 * v474 + 28);
        if (v477 > v478)
          break;
        if (v479 > v477)
        {
          *v472 = v474;
          *v473 = v475;
          v480 = *v470;
          if (*(float *)(v469 + 32 * *v472 + 28) > *(float *)(v469 + 32 * *v470 + 28))
          {
            *v470 = *v472;
            *v472 = v480;
LABEL_745:
            v481 = 2;
            goto LABEL_748;
          }
          goto LABEL_746;
        }
        v481 = 0;
LABEL_748:
        v482 = *v470;
        v483 = *(float *)(v469 + 32 * *v470 + 28);
        v484 = *(float *)(v469 + 32 * *v472 + 28);
        if (v483 <= v484)
        {
          v485 = v388 - 1;
          while (--v485 != v470)
          {
            if (*(float *)(v469 + 32 * *v485 + 28) > v484)
            {
              *v470 = *v485;
              *v485 = v482;
              ++v481;
              goto LABEL_754;
            }
          }
          v497 = v470 + 1;
          if (v483 <= *(float *)(v469 + 32 * *v473 + 28))
          {
            if (v497 == v473)
              goto LABEL_626;
            while (1)
            {
              v498 = *v497;
              if (v483 > *(float *)(v469 + 32 * *v497 + 28))
                break;
              if (++v497 == v473)
                goto LABEL_626;
            }
            *v497++ = *v473;
            *v473 = v498;
          }
          if (v497 == v473)
            goto LABEL_626;
          while (1)
          {
            v502 = *(float *)(v469 + 32 * *v470 + 28);
            do
            {
              v504 = *v497++;
              v503 = v504;
            }
            while (v502 <= *(float *)(v469 + 32 * v504 + 28));
            v505 = v497 - 1;
            do
            {
              v507 = *--v473;
              v506 = v507;
            }
            while (v502 > *(float *)(v469 + 32 * v507 + 28));
            if (v505 >= v473)
              break;
            *v505 = v506;
            *v473 = v503;
          }
          v470 = v497 - 1;
          if (v505 > v391)
            goto LABEL_626;
        }
        else
        {
          v485 = v388 - 1;
LABEL_754:
          v486 = v470 + 1;
          if (v470 + 1 >= v485)
          {
            v491 = v470 + 1;
          }
          else
          {
            v487 = v470 + 1;
            while (1)
            {
              v488 = *(float *)(v469 + 32 * *v472 + 28);
              do
              {
                v490 = *v487++;
                v489 = v490;
              }
              while (*(float *)(v469 + 32 * v490 + 28) > v488);
              v491 = v487 - 1;
              do
              {
                v493 = *--v485;
                v492 = v493;
              }
              while (*(float *)(v469 + 32 * v493 + 28) <= v488);
              if (v491 >= v485)
                break;
              *v491 = v492;
              *v485 = v489;
              ++v481;
              if (v491 == v472)
                v472 = v485;
            }
          }
          if (v491 != v472)
          {
            v494 = *v491;
            if (*(float *)(v469 + 32 * *v472 + 28) > *(float *)(v469 + 32 * *v491 + 28))
            {
              *v491 = *v472;
              *v472 = v494;
              ++v481;
            }
          }
          if (v491 == v391)
            goto LABEL_626;
          if (!v481)
          {
            if (v491 <= v391)
            {
              v499 = v491 + 1;
              while (v499 != v388)
              {
                v500 = *(float *)(v469 + 32 * *v499 + 28);
                v501 = *(float *)(v469 + 32 * *(v499++ - 1) + 28);
                if (v500 > v501)
                  goto LABEL_770;
              }
            }
            else
            {
              while (v486 != v491)
              {
                v495 = *(float *)(v469 + 32 * *v486 + 28);
                v496 = *(float *)(v469 + 32 * *(v486++ - 1) + 28);
                if (v495 > v496)
                  goto LABEL_770;
              }
            }
            goto LABEL_626;
          }
LABEL_770:
          if (v491 > v391)
            v388 = v491;
          else
            v470 = v491 + 1;
        }
        if (v388 == v391)
          goto LABEL_626;
      }
      if (v479 <= v477)
      {
        *v470 = v475;
        *v472 = v476;
        if (*(float *)(v469 + 32 * *v473 + 28) > v478)
        {
          *v472 = *v473;
          *v473 = v476;
          goto LABEL_745;
        }
      }
      else
      {
        *v470 = v474;
        *v473 = v476;
      }
LABEL_746:
      v481 = 1;
      goto LABEL_748;
    }
    v413 = (char *)(v375 + 8 * v382);
    v414 = (char *)v375;
    while (1)
    {
      v415 = (v413 - v414) >> 3;
      if (v415 < 2)
        goto LABEL_621;
      if (v415 == 3)
      {
        v648 = *(_QWORD *)v414;
        v649 = *((_QWORD *)v414 + 1);
        v650 = *(_QWORD *)v752;
        v651 = *(float *)(*(_QWORD *)v752 + 32 * v649 + 20);
        v652 = *(float *)(*(_QWORD *)v752 + 32 * *(_QWORD *)v414 + 20);
        v653 = *((_QWORD *)v413 - 1);
        v654 = *(float *)(*(_QWORD *)v752 + 32 * v653 + 20);
        if (v651 <= v652)
        {
          if (v654 > v651)
          {
            *((_QWORD *)v414 + 1) = v653;
            *((_QWORD *)v413 - 1) = v649;
            v684 = *(_QWORD *)v414;
            v683 = *((_QWORD *)v414 + 1);
            if (*(float *)(v650 + 32 * v683 + 20) > *(float *)(v650 + 32 * *(_QWORD *)v414 + 20))
            {
              *(_QWORD *)v414 = v683;
              *((_QWORD *)v414 + 1) = v684;
            }
          }
        }
        else if (v654 <= v651)
        {
          *(_QWORD *)v414 = v649;
          *((_QWORD *)v414 + 1) = v648;
          v687 = *((_QWORD *)v413 - 1);
          if (*(float *)(v650 + 32 * v687 + 20) > v652)
          {
            *((_QWORD *)v414 + 1) = v687;
            *((_QWORD *)v413 - 1) = v648;
          }
        }
        else
        {
          *(_QWORD *)v414 = v653;
          *((_QWORD *)v413 - 1) = v648;
        }
        goto LABEL_621;
      }
      if (v415 == 2)
      {
        v655 = *((_QWORD *)v413 - 1);
        v656 = *(_QWORD *)v414;
        if (*(float *)(*(_QWORD *)v752 + 32 * v655 + 20) > *(float *)(*(_QWORD *)v752 + 32 * *(_QWORD *)v414 + 20))
        {
          *(_QWORD *)v414 = v655;
          *((_QWORD *)v413 - 1) = v656;
        }
        goto LABEL_621;
      }
      if (v413 - v414 <= 63)
      {
        if (v413 - 8 != v414)
        {
          v657 = *(_QWORD *)v752;
          do
          {
            if (v414 != v413)
            {
              v658 = v414 + 8;
              if (v414 + 8 != v413)
              {
                v659 = *(_QWORD *)v414;
                v660 = *(_QWORD *)v414;
                v661 = v414;
                v662 = v414 + 8;
                do
                {
                  v664 = *(_QWORD *)v662;
                  v662 += 8;
                  v663 = v664;
                  if (*(float *)(v657 + 32 * v664 + 20) > *(float *)(v657 + 32 * v660 + 20))
                  {
                    v660 = v663;
                    v661 = v658;
                  }
                  v658 = v662;
                }
                while (v662 != v413);
                if (v661 != v414)
                {
                  *(_QWORD *)v414 = *(_QWORD *)v661;
                  *(_QWORD *)v661 = v659;
                }
              }
            }
            v414 += 8;
          }
          while (v414 != v413 - 8);
        }
        goto LABEL_621;
      }
      v416 = &v414[8 * (v415 >> 1)];
      v417 = v413 - 8;
      v418 = *((_QWORD *)v413 - 1);
      v419 = *(_QWORD *)v416;
      v420 = *(_QWORD *)v414;
      v421 = *(float *)(v314 + 32 * *(_QWORD *)v416 + 20);
      v422 = *(float *)(v314 + 32 * *(_QWORD *)v414 + 20);
      v423 = *(float *)(v314 + 32 * v418 + 20);
      if (v421 > v422)
        break;
      if (v423 > v421)
      {
        *(_QWORD *)v416 = v418;
        *(_QWORD *)v417 = v419;
        v424 = *(_QWORD *)v414;
        if (*(float *)(v314 + 32 * *(_QWORD *)v416 + 20) > *(float *)(v314 + 32 * *(_QWORD *)v414 + 20))
        {
          *(_QWORD *)v414 = *(_QWORD *)v416;
          *(_QWORD *)v416 = v424;
LABEL_663:
          v425 = 2;
          goto LABEL_666;
        }
        goto LABEL_664;
      }
      v425 = 0;
LABEL_666:
      v426 = *(_QWORD *)v414;
      v427 = *(float *)(v314 + 32 * *(_QWORD *)v414 + 20);
      v428 = *(float *)(v314 + 32 * *(_QWORD *)v416 + 20);
      if (v427 <= v428)
      {
        v429 = v413 - 8;
        while (1)
        {
          v429 -= 8;
          if (v429 == v414)
            break;
          if (*(float *)(v314 + 32 * *(_QWORD *)v429 + 20) > v428)
          {
            *(_QWORD *)v414 = *(_QWORD *)v429;
            *(_QWORD *)v429 = v426;
            ++v425;
            goto LABEL_672;
          }
        }
        v441 = (uint64_t *)(v414 + 8);
        if (v427 <= *(float *)(v314 + 32 * *(_QWORD *)v417 + 20))
        {
          if (v441 == (uint64_t *)v417)
            goto LABEL_621;
          while (1)
          {
            v442 = *v441;
            if (v427 > *(float *)(v314 + 32 * *v441 + 20))
              break;
            if (++v441 == (uint64_t *)v417)
              goto LABEL_621;
          }
          *v441++ = *(_QWORD *)v417;
          *(_QWORD *)v417 = v442;
        }
        if (v441 == (uint64_t *)v417)
          goto LABEL_621;
        while (1)
        {
          v446 = *(float *)(v314 + 32 * *(_QWORD *)v414 + 20);
          do
          {
            v448 = *v441++;
            v447 = v448;
          }
          while (v446 <= *(float *)(v314 + 32 * v448 + 20));
          v449 = (char *)(v441 - 1);
          do
          {
            v451 = *((_QWORD *)v417 - 1);
            v417 -= 8;
            v450 = v451;
          }
          while (v446 > *(float *)(v314 + 32 * v451 + 20));
          if (v449 >= v417)
            break;
          *(_QWORD *)v449 = v450;
          *(_QWORD *)v417 = v447;
        }
        v414 = (char *)(v441 - 1);
        if (v449 > v387)
          goto LABEL_621;
      }
      else
      {
        v429 = v413 - 8;
LABEL_672:
        v430 = v414 + 8;
        if (v414 + 8 >= v429)
        {
          v435 = v414 + 8;
        }
        else
        {
          v431 = (uint64_t *)(v414 + 8);
          while (1)
          {
            v432 = *(float *)(v314 + 32 * *(_QWORD *)v416 + 20);
            do
            {
              v434 = *v431++;
              v433 = v434;
            }
            while (*(float *)(v314 + 32 * v434 + 20) > v432);
            v435 = (char *)(v431 - 1);
            do
            {
              v437 = *((_QWORD *)v429 - 1);
              v429 -= 8;
              v436 = v437;
            }
            while (*(float *)(v314 + 32 * v437 + 20) <= v432);
            if (v435 >= v429)
              break;
            *(_QWORD *)v435 = v436;
            *(_QWORD *)v429 = v433;
            ++v425;
            if (v435 == v416)
              v416 = v429;
          }
        }
        if (v435 != v416)
        {
          v438 = *(_QWORD *)v435;
          if (*(float *)(v314 + 32 * *(_QWORD *)v416 + 20) > *(float *)(v314 + 32 * *(_QWORD *)v435 + 20))
          {
            *(_QWORD *)v435 = *(_QWORD *)v416;
            *(_QWORD *)v416 = v438;
            ++v425;
          }
        }
        if (v435 == v387)
          goto LABEL_621;
        if (!v425)
        {
          if (v435 <= v387)
          {
            v443 = v435 + 8;
            while (v443 != v413)
            {
              v444 = *(float *)(v314 + 32 * *(_QWORD *)v443 + 20);
              v445 = *(float *)(v314 + 32 * *((_QWORD *)v443 - 1) + 20);
              v443 += 8;
              if (v444 > v445)
                goto LABEL_688;
            }
          }
          else
          {
            while (v430 != v435)
            {
              v439 = *(float *)(v314 + 32 * *(_QWORD *)v430 + 20);
              v440 = *(float *)(v314 + 32 * *((_QWORD *)v430 - 1) + 20);
              v430 += 8;
              if (v439 > v440)
                goto LABEL_688;
            }
          }
          goto LABEL_621;
        }
LABEL_688:
        if (v435 > v387)
          v413 = v435;
        else
          v414 = v435 + 8;
      }
      if (v413 == v387)
        goto LABEL_621;
    }
    if (v423 <= v421)
    {
      *(_QWORD *)v414 = v419;
      *(_QWORD *)v416 = v420;
      if (*(float *)(v314 + 32 * *(_QWORD *)v417 + 20) > v422)
      {
        *(_QWORD *)v416 = *(_QWORD *)v417;
        *(_QWORD *)v417 = v420;
        goto LABEL_663;
      }
    }
    else
    {
      *(_QWORD *)v414 = v418;
      *(_QWORD *)v417 = v420;
    }
LABEL_664:
    v425 = 1;
    goto LABEL_666;
  }
  v339 = *(_QWORD *)(v335 + 272);
  v338 = *(_QWORD *)(v335 + 280);
  v340 = (unint64_t)(v338 - v339) >> 3;
  if ((_DWORD)v340 == *(_DWORD *)(v335 + 328) + *(_DWORD *)(v335 + 320))
  {
    v341 = *(_DWORD *)(a2 + 324);
    v371 = v340 - v341;
    v343 = v371 - v337;
    if (v371 > v337)
      goto LABEL_596;
    goto LABEL_811;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/FeatureFilterTransforms.hpp", 208, (uint64_t)"indices.get_num_reloc() == 0u", 29, (uint64_t)"Camera streams used for reloc should have sufficient num target features.", 73, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_1091;
  }
  v339 = *(_QWORD *)(a2 + 272);
  v338 = *(_QWORD *)(a2 + 280);
  v341 = *(_DWORD *)(a2 + 324);
  v342 = ((unint64_t)(v338 - v339) >> 3) - v341;
  v343 = v342 - v337;
  if (v342 <= v337)
    goto LABEL_811;
LABEL_596:
  if (*(_BYTE *)(a2 + 332))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 82, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v372 = (_DWORD *)a2;
    v339 = *(_QWORD *)(a2 + 272);
    v338 = *(_QWORD *)(a2 + 280);
    v341 = *(_DWORD *)(a2 + 324);
  }
  else
  {
    v372 = (_DWORD *)a2;
  }
  v397 = (unint64_t)(v338 - v339) >> 3;
  v398 = v372[80];
  v399 = v372[82];
  v400 = (v397 - (v399 + v398));
  v401 = v399 + v343;
  v402 = v397 - v398;
  if (v400 >= v343)
    v402 = v401;
  v372[82] = v402;
  v372[81] = v341 + v343;
LABEL_811:
  sub_20EEA55F4(&__p);
  if (**(int **)(*(_QWORD *)&__p.f64[0] + 56) > 3)
    goto LABEL_909;
  v520 = *(unsigned __int8 *)(*(_QWORD *)&__p.f64[0] + 72);
  v521 = sub_20E8C31DC(*(uint64_t *)&__p.f64[0], "OSLogSurrogateAppender", 1, 0);
  v522 = v521;
  if (!v520 && !v521)
    goto LABEL_909;
  *(_QWORD *)v752 = &__p;
  *(std::chrono::steady_clock::time_point *)&v752[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v752[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v752[24] = 3;
  *(_QWORD *)&v752[32] = "unknown file";
  *(_DWORD *)&v752[40] = 229;
  v754 = 0;
  v753.i64[0] = (uint64_t)"unknown function";
  v753.i64[1] = 0;
  if (*v727 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_1098;
  }
  v717 = v323;
  v523 = *(_DWORD *)(v709 + 396);
  if (v523 < 0x10000)
    goto LABEL_819;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_1098:
    abort();
  }
  LOWORD(v523) = *(_WORD *)(v709 + 396);
LABEL_819:
  v693 = v520;
  v524 = **(_QWORD **)v752;
  if (*(char *)(**(_QWORD **)v752 + 39) < 0)
  {
    v526 = *(const char **)(v524 + 16);
    v525 = *(_QWORD *)(v524 + 24);
  }
  else
  {
    v525 = *(unsigned __int8 *)(**(_QWORD **)v752 + 39);
    v526 = (const char *)(**(_QWORD **)v752 + 16);
  }
  v691 = **(_QWORD **)v752 + 16;
  v708 = *(_QWORD *)(a2 + 280);
  v698 = *(_QWORD *)(a2 + 272);
  v701 = *(_DWORD *)(a2 + 320);
  v695 = *(_DWORD *)(a2 + 328);
  v527 = *(unsigned int *)(a2 + 324);
  v528 = *v727;
  v529 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v529 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__dst);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
    if (__dst[24] && (__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v530 = byte_254A4A4F8;
  else
    v530 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v531 = byte_254A4A4F8[23];
  else
    v531 = *(_QWORD *)&byte_254A4A4F8[8];
  __srcc = v526;
  *(_QWORD *)__dst = os_log_create(v530, v526);
  v532 = &__dst[8];
  if (v531 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v531 >= 0x17)
  {
    v689 = v527;
    v533 = (v531 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v531 | 7) != 0x17)
      v533 = v531 | 7;
    v534 = v533 + 1;
    v532 = operator new(v533 + 1);
    *(_QWORD *)&__dst[24] = v534 | 0x8000000000000000;
    *(_QWORD *)&__dst[8] = v532;
    *(_QWORD *)&__dst[16] = v531;
    v527 = v689;
    goto LABEL_836;
  }
  __dst[31] = v531;
  if (v531)
LABEL_836:
    memmove(v532, v530, v531);
  v532[v531] = 0;
  __dst[32] = 1;
  v535 = &v768;
  if (v525 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v525 >= 0x17)
  {
    v536 = (v525 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v525 | 7) != 0x17)
      v536 = v525 | 7;
    v537 = v536 + 1;
    v535 = operator new(v536 + 1);
    *((_QWORD *)&v769 + 1) = v537 | 0x8000000000000000;
    v768 = v535;
    *(_QWORD *)&v769 = v525;
    goto LABEL_844;
  }
  HIBYTE(v769) = v525;
  if (v525)
LABEL_844:
    memmove(v535, __srcc, v525);
  *((_BYTE *)v535 + v525) = 0;
  LOBYTE(v770) = 1;
  v538 = *(NSObject **)__dst;
  if (SHIBYTE(v769) < 0)
    operator delete(v768);
  if (__dst[32] && (__dst[31] & 0x80000000) != 0)
    operator delete(*(void **)&__dst[8]);
  if (*(_QWORD *)__dst)
    os_release(*(void **)__dst);
  v539 = (unsigned __int16)v523 | ((unsigned __int16)v528 << 16);
  if (v522 && *(_QWORD *)(v522 + 24))
  {
    v540 = _os_log_pack_size();
    v541 = (std::__shared_weak_count_vtbl *)operator new(v540, (std::align_val_t)8uLL);
    v542 = (std::__shared_weak_count *)operator new();
    v543 = v542;
    v542->__shared_owners_ = 0;
    v544 = (unint64_t *)&v542->__shared_owners_;
    v542->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v542->__shared_weak_owners_ = 0;
    v542[1].__vftable = v541;
    *(_QWORD *)__dst = v541;
    *(_QWORD *)&__dst[8] = v541;
    *(_QWORD *)&__dst[16] = v542;
    do
      v545 = __ldxr(v544);
    while (__stxr(v545 + 1, v544));
    *(_QWORD *)&__dst[32] = 0;
    *(_QWORD *)&__dst[24] = 0;
    v768 = 0;
    do
      v546 = __ldaxr(v544);
    while (__stlxr(v546 - 1, v544));
    if (!v546)
    {
      ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
      std::__shared_weak_count::__release_weak(v543);
    }
    v547 = *(_QWORD *)__dst;
    v548 = _os_log_pack_fill();
    *(_DWORD *)v548 = 67109376;
    *(_DWORD *)(v548 + 4) = v539;
    *(_WORD *)(v548 + 8) = 2048;
    *(_QWORD *)(v548 + 10) = ((v708 - v698) >> 3)
                           - v527
                           - (((unint64_t)(v708 - v698) >> 3)
                            - (v701
                             + v695));
    v549 = operator new();
    v550 = *(unsigned __int8 *)(v524 + 39);
    v551 = v691;
    if ((v550 & 0x80u) != 0)
    {
      v551 = *(_QWORD *)(v524 + 16);
      v550 = *(_QWORD *)(v524 + 24);
    }
    *(_QWORD *)v549 = v547;
    *(_OWORD *)(v549 + 8) = *(_OWORD *)&__dst[8];
    *(_QWORD *)&__dst[8] = 0;
    *(_QWORD *)&__dst[16] = 0;
    *(_OWORD *)(v549 + 24) = *(_OWORD *)&__dst[24];
    *(_QWORD *)&__dst[24] = 0;
    *(_QWORD *)&__dst[32] = 0;
    *(_QWORD *)(v549 + 40) = v551;
    *(_QWORD *)(v549 + 48) = v550;
    *(_BYTE *)(v549 + 56) = 1;
    v738.__r_.__value_.__r.__words[0] = 0;
    v741 = v549;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v522 + 24) + 40))(*(_QWORD *)(v522 + 24), &v741);
    v323 = v717;
    v552 = v741;
    v741 = 0;
    if (v552)
    {
      v553 = *(std::__shared_weak_count **)(v552 + 32);
      if (v553)
      {
        v554 = (unint64_t *)&v553->__shared_owners_;
        do
          v555 = __ldaxr(v554);
        while (__stlxr(v555 - 1, v554));
        if (!v555)
        {
          ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
          std::__shared_weak_count::__release_weak(v553);
        }
      }
      v556 = *(std::__shared_weak_count **)(v552 + 16);
      if (v556)
      {
        v557 = (unint64_t *)&v556->__shared_owners_;
        do
          v558 = __ldaxr(v557);
        while (__stlxr(v558 - 1, v557));
        if (!v558)
        {
          ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
          std::__shared_weak_count::__release_weak(v556);
        }
      }
      MEMORY[0x212BC6398](v552, 0x10F0C40B62ED6C6);
      v559 = v738.__r_.__value_.__r.__words[0];
      v738.__r_.__value_.__r.__words[0] = 0;
      if (v559)
      {
        v560 = *(std::__shared_weak_count **)(v559 + 32);
        if (v560)
        {
          v561 = (unint64_t *)&v560->__shared_owners_;
          do
            v562 = __ldaxr(v561);
          while (__stlxr(v562 - 1, v561));
          if (!v562)
          {
            ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
            std::__shared_weak_count::__release_weak(v560);
          }
        }
        v563 = *(std::__shared_weak_count **)(v559 + 16);
        if (v563)
        {
          v564 = (unint64_t *)&v563->__shared_owners_;
          do
            v565 = __ldaxr(v564);
          while (__stlxr(v565 - 1, v564));
          if (!v565)
          {
            ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
            std::__shared_weak_count::__release_weak(v563);
          }
        }
        MEMORY[0x212BC6398](v559, 0x10F0C40B62ED6C6);
      }
    }
    v566 = *(std::__shared_weak_count **)&__dst[32];
    if (*(_QWORD *)&__dst[32])
    {
      v567 = (unint64_t *)(*(_QWORD *)&__dst[32] + 8);
      do
        v568 = __ldaxr(v567);
      while (__stlxr(v568 - 1, v567));
      if (!v568)
      {
        ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
        std::__shared_weak_count::__release_weak(v566);
      }
    }
    v569 = *(std::__shared_weak_count **)&__dst[16];
    if (*(_QWORD *)&__dst[16])
    {
      v570 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
      do
        v571 = __ldaxr(v570);
      while (__stlxr(v571 - 1, v570));
      if (!v571)
      {
        ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
        std::__shared_weak_count::__release_weak(v569);
      }
    }
  }
  else
  {
    os_log_type_enabled(v538, OS_LOG_TYPE_INFO);
    *(_DWORD *)__dst = 67109376;
    *(_DWORD *)&__dst[4] = v539;
    *(_WORD *)&__dst[8] = 2048;
    *(_QWORD *)&__dst[10] = ((v708 - v698) >> 3)
                          - v527
                          - (((unint64_t)(v708 - v698) >> 3)
                           - (v701
                            + v695));
    v572 = (void *)_os_log_send_and_compose_impl();
    v323 = v717;
    if (v572)
      free(v572);
  }
  if (v693)
  {
    if (*v727 >= 0x10000
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1117;
    }
    v573 = *(_DWORD *)(v709 + 396);
    if (v573 < 0x10000)
      goto LABEL_903;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
LABEL_1117:
      abort();
    }
    LOWORD(v573) = *(_WORD *)(v709 + 396);
LABEL_903:
    v574 = *(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272);
    sub_20E8C003C((uint64_t)v752, "[FeatureFilterTransform] Camera %u: Num features after pruning: %lu", (unsigned __int16)v573 | ((unsigned __int16)*v727 << 16), (v574 >> 3)- *(unsigned int *)(a2 + 324)- (((unint64_t)v574 >> 3)- (*(_DWORD *)(a2 + 320)+ *(_DWORD *)(a2 + 328))));
    sub_20E863570((uint64_t)v752);
  }
  sub_20E863570((uint64_t)v752);
  v575 = v754;
  if (v754)
  {
    v576 = (unint64_t *)&v754->__shared_owners_;
    do
      v577 = __ldaxr(v576);
    while (__stlxr(v577 - 1, v576));
    if (!v577)
    {
      ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
      std::__shared_weak_count::__release_weak(v575);
    }
  }
LABEL_909:
  kdebug_trace();
  v334 = v323 & 0xFFFFFF00;
  v333 = v323;
  v327 = 1;
LABEL_910:
  kdebug_trace();
  v328 = v334 | v333;
  v329 = v734;
  v331 = *(_QWORD *)(a2 + 272);
  v330 = *(_QWORD *)(a2 + 280);
  if (!*((_BYTE *)v734 + 184))
    goto LABEL_538;
LABEL_911:
  v332 = v329[11] - v329[10];
  if (!v332 || v332 != v329[21] - v329[20])
    goto LABEL_917;
LABEL_913:
  v578 = (uint64_t)(v329[8] - v329[7]) >> 5;
  if (v578 != v332 >> 6 || v329[2] > v578)
    goto LABEL_917;
  if ((v330 - v331) >> 3 == v578)
    goto LABEL_920;
LABEL_919:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilter.cpp", 44, (uint64_t)"indices.size() == store.Size()", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_920:
  v579 = *(uint64_t **)(a2 + 272);
  v580 = *(uint64_t **)(a2 + 280);
  v581 = v580 - v579;
  v582 = *(unsigned int *)(a2 + 324);
  memset(__dst, 0, 24);
  v583 = v581 - v582;
  if (v581 == v582)
  {
    memset(v752, 0, 24);
    if (!*(_BYTE *)(a2 + 332))
      goto LABEL_928;
LABEL_926:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 157, (uint64_t)"!ordered", 8, (uint64_t)"Not supported without reordered indices.", 40, (void (*)(void **))sub_21023DDB0))
    {
      v579 = *(uint64_t **)(a2 + 272);
      v580 = *(uint64_t **)(a2 + 280);
      v582 = *(unsigned int *)(a2 + 324);
      v581 = v580 - v579;
      goto LABEL_928;
    }
    goto LABEL_1079;
  }
  if (v583 >> 59)
    sub_20E867F44();
  *(_QWORD *)__dst = operator new(32 * v583);
  *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
  *(_QWORD *)&__dst[16] = *(_QWORD *)__dst + 32 * v583;
  memset(v752, 0, 24);
  if (v583 >> 58)
    sub_20ED343A8();
  *(_QWORD *)v752 = operator new(v583 << 6);
  *(_QWORD *)&v752[8] = *(_QWORD *)v752;
  *(_QWORD *)&v752[16] = *(_QWORD *)v752 + (v583 << 6);
  if (*(_BYTE *)(a2 + 332))
    goto LABEL_926;
LABEL_928:
  if (v579 == v580)
    v584 = 0;
  else
    v584 = v579;
  if (v581 != v582
    && !v584
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_1079:
    abort();
  }
  v585 = *(char **)&__dst[16];
  v586 = *(char **)__dst;
  v587 = *(char **)v752;
  if (v581 == v582)
    goto LABEL_975;
  v710 = v328;
  v718 = v327;
  v588 = *(char **)&__dst[8];
  v589 = *(char **)&v752[8];
  __srcd = &v584[v581 - v582];
  while (2)
  {
    v593 = *v584;
    v594 = &(*v733)[4 * *v584];
    if (v588 < v585)
    {
      v595 = *(_OWORD *)v594[2].i8;
      *(_OWORD *)v588 = *(_OWORD *)v594->i8;
      *((_OWORD *)v588 + 1) = v595;
      v588 += 32;
      goto LABEL_953;
    }
    v596 = (v588 - v586) >> 5;
    v597 = v596 + 1;
    if ((unint64_t)(v596 + 1) >> 59)
    {
      *(_QWORD *)&__dst[16] = v585;
      *(_QWORD *)&__dst[8] = v588;
      *(_QWORD *)__dst = v586;
      *(_QWORD *)v752 = v587;
      *(_QWORD *)&v752[8] = v589;
      sub_20E867F44();
    }
    if ((v585 - v586) >> 4 > v597)
      v597 = (v585 - v586) >> 4;
    if ((unint64_t)(v585 - v586) >= 0x7FFFFFFFFFFFFFE0)
      v598 = 0x7FFFFFFFFFFFFFFLL;
    else
      v598 = v597;
    if (!v598)
    {
      v599 = 0;
      v611 = *(_OWORD *)v594[2].i8;
      v601 = (char *)(32 * v596);
      *(_OWORD *)v601 = *(_OWORD *)v594->i8;
      *((_OWORD *)v601 + 1) = v611;
      if (v588 != v586)
        goto LABEL_949;
LABEL_964:
      v604 = v588;
      v586 = v601;
      v585 = &v599[32 * v598];
      v588 = v601 + 32;
      if (v604)
        goto LABEL_952;
      goto LABEL_953;
    }
    if (v598 >> 59)
      goto LABEL_1074;
    v599 = (char *)operator new(32 * v598);
    v600 = *(_OWORD *)v594[2].i8;
    v601 = &v599[32 * v596];
    *(_OWORD *)v601 = *(_OWORD *)v594->i8;
    *((_OWORD *)v601 + 1) = v600;
    if (v588 == v586)
      goto LABEL_964;
LABEL_949:
    v602 = v601;
    do
    {
      v603 = *((_OWORD *)v588 - 1);
      *((_OWORD *)v602 - 2) = *((_OWORD *)v588 - 2);
      *((_OWORD *)v602 - 1) = v603;
      v602 -= 32;
      v588 -= 32;
    }
    while (v588 != v586);
    v604 = v586;
    v586 = v602;
    v585 = &v599[32 * v598];
    v588 = v601 + 32;
    if (v604)
LABEL_952:
      operator delete(v604);
LABEL_953:
    v605 = (__int128 *)(v734[10] + (v593 << 6));
    if ((unint64_t)v589 < *(_QWORD *)&v752[16])
    {
      v590 = *v605;
      v591 = v605[1];
      v592 = v605[3];
      *((_OWORD *)v589 + 2) = v605[2];
      *((_OWORD *)v589 + 3) = v592;
      *(_OWORD *)v589 = v590;
      *((_OWORD *)v589 + 1) = v591;
      v589 += 64;
      goto LABEL_937;
    }
    v606 = (v589 - v587) >> 6;
    v607 = v606 + 1;
    if ((unint64_t)(v606 + 1) >> 58)
    {
      *(_QWORD *)&__dst[16] = v585;
      *(_QWORD *)&__dst[8] = v588;
      *(_QWORD *)__dst = v586;
      *(_QWORD *)v752 = v587;
      *(_QWORD *)&v752[8] = v589;
      sub_20ED343A8();
    }
    v608 = *(_QWORD *)&v752[16] - (_QWORD)v587;
    if ((uint64_t)(*(_QWORD *)&v752[16] - (_QWORD)v587) >> 5 > v607)
      v607 = v608 >> 5;
    if ((unint64_t)v608 >= 0x7FFFFFFFFFFFFFC0)
      v609 = 0x3FFFFFFFFFFFFFFLL;
    else
      v609 = v607;
    if (v609)
    {
      if (v609 >> 58)
      {
LABEL_1074:
        *(_QWORD *)&__dst[16] = v585;
        *(_QWORD *)&__dst[8] = v588;
        *(_QWORD *)__dst = v586;
        *(_QWORD *)v752 = v587;
        *(_QWORD *)&v752[8] = v589;
        sub_20E877A38();
      }
      v610 = (char *)operator new(v609 << 6);
    }
    else
    {
      v610 = 0;
    }
    v612 = &v610[64 * v606];
    v613 = *v605;
    v614 = v605[1];
    v615 = v605[3];
    *((_OWORD *)v612 + 2) = v605[2];
    *((_OWORD *)v612 + 3) = v615;
    *(_OWORD *)v612 = v613;
    *((_OWORD *)v612 + 1) = v614;
    if (v589 == v587)
    {
      v620 = v589;
      v587 = &v610[64 * v606];
      v589 = v612 + 64;
      *(_QWORD *)&v752[16] = &v610[64 * v609];
      if (!v620)
        goto LABEL_937;
      goto LABEL_973;
    }
    v616 = &v610[64 * v606];
    do
    {
      v617 = *((_OWORD *)v589 - 4);
      v618 = *((_OWORD *)v589 - 3);
      v619 = *((_OWORD *)v589 - 1);
      *((_OWORD *)v616 - 2) = *((_OWORD *)v589 - 2);
      *((_OWORD *)v616 - 1) = v619;
      *((_OWORD *)v616 - 4) = v617;
      *((_OWORD *)v616 - 3) = v618;
      v616 -= 64;
      v589 -= 64;
    }
    while (v589 != v587);
    v620 = v587;
    v587 = v616;
    v589 = v612 + 64;
    *(_QWORD *)&v752[16] = &v610[64 * v609];
    if (v620)
LABEL_973:
      operator delete(v620);
LABEL_937:
    if (++v584 != __srcd)
      continue;
    break;
  }
  *(_QWORD *)&__dst[8] = v588;
  *(_QWORD *)&v752[8] = v589;
  v327 = v718;
  v328 = v710;
LABEL_975:
  v621 = v734;
  v622 = *v733;
  if (*v733)
  {
    v734[8] = v622;
    operator delete(v622);
    v621 = v734;
    *v733 = 0;
    v733[1] = 0;
    v733[2] = 0;
  }
  v623 = (void *)v621[10];
  v624 = *(_QWORD *)&__dst[8];
  v621[7] = v586;
  v621[8] = v624;
  v621[9] = v585;
  if (v623)
  {
    v621[11] = v623;
    operator delete(v623);
    v621[10] = 0;
    v621[11] = 0;
    v621[12] = 0;
  }
  v625 = *(_OWORD *)&v752[8];
  v621[10] = v587;
  *(_OWORD *)(v621 + 11) = v625;
  v621[2] = ((*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3)
          - (*(_DWORD *)(a2 + 328)
           + *(_DWORD *)(a2 + 320));
  v626 = *a3;
  *(_QWORD *)(*a3 + 32) = v722 - v726;
  if (v327)
  {
    *(_QWORD *)(v626 + 40) = v328;
    *(_BYTE *)(v626 + 48) = 1;
    v626 = *a3;
  }
  if (*(_BYTE *)(v626 + 184))
  {
    v627 = *(_QWORD *)(v626 + 88) - *(_QWORD *)(v626 + 80);
    if (!v627)
      goto LABEL_989;
    if (v627 != *(_QWORD *)(v626 + 168) - *(_QWORD *)(v626 + 160))
      goto LABEL_989;
    v628 = (uint64_t)(*(_QWORD *)(v626 + 64) - *(_QWORD *)(v626 + 56)) >> 5;
    if (v628 != v627 >> 6)
      goto LABEL_989;
LABEL_988:
    if (*(_QWORD *)(v626 + 16) > v628)
      goto LABEL_989;
  }
  else
  {
    if (*(_QWORD *)(v626 + 160) == *(_QWORD *)(v626 + 168))
    {
      v628 = (uint64_t)(*(_QWORD *)(v626 + 64) - *(_QWORD *)(v626 + 56)) >> 5;
      if (v628 == (uint64_t)(*(_QWORD *)(v626 + 88) - *(_QWORD *)(v626 + 80)) >> 6)
        goto LABEL_988;
    }
LABEL_989:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v628 = (uint64_t)(*(_QWORD *)(v626 + 64) - *(_QWORD *)(v626 + 56)) >> 5;
  }
  sub_20EEB04B4(a2 + 728, v727, v703, v628);
  sub_20EEB0C64((_QWORD *)(a2 + 728), v727);
  v629 = a3[1];
  *v702 = *a3;
  v702[1] = v629;
  if (v629)
  {
    v630 = (unint64_t *)(v629 + 8);
    do
      v631 = __ldxr(v630);
    while (__stxr(v631 + 1, v630));
  }
}

void sub_20EE9764C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  char a73;

  if (SLOBYTE(STACK[0x367]) < 0)
  {
    operator delete((void *)STACK[0x350]);
    if ((SLOBYTE(STACK[0x34F]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x34F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x337]) < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete((void *)STACK[0x338]);
  if (SLOBYTE(STACK[0x337]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x320]);
    if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x307]) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete((void *)STACK[0x308]);
  if (SLOBYTE(STACK[0x307]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x2F0]);
    if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
    {
LABEL_16:
      __cxa_guard_abort(&qword_254A5FA68);
      if (a73 < 0)
        operator delete(a72);
      if (a50 < 0)
      {
        operator delete(a45);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
LABEL_15:
    operator delete((void *)STACK[0x2C0]);
    goto LABEL_16;
  }
LABEL_14:
  operator delete((void *)STACK[0x2D8]);
  if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
    goto LABEL_16;
  goto LABEL_15;
}

uint64_t sub_20EE97DE4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(result + 720);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 168))
    {
      v3 = *(_QWORD *)(v2 + 152);
      v4 = *(_QWORD *)(v2 + 128);
      if (*(double *)a2 - *(double *)(v4 + 32 * v3) < *(double *)(v2 + 72))
        return result;
    }
    else
    {
      v3 = *(_QWORD *)(v2 + 152);
      v4 = *(_QWORD *)(v2 + 128);
    }
    if (!v3)
      v3 = (*(_QWORD *)(v2 + 136) - v4) >> 5;
    v5 = v3 - 1;
    *(_QWORD *)(v2 + 152) = v5;
    v6 = v4 + 32 * v5;
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)v6 = *(_QWORD *)a2;
    *(_OWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v6 + 24) = v7;
    v9 = *(_QWORD *)(v2 + 168);
    if (v9 == (uint64_t)(*(_QWORD *)(v2 + 136) - *(_QWORD *)(v2 + 128)) >> 5)
    {
      if (*(_QWORD *)(v2 + 160))
        v9 = *(_QWORD *)(v2 + 160);
      *(_QWORD *)(v2 + 160) = v9 - 1;
    }
    else
    {
      *(_QWORD *)(v2 + 168) = v9 + 1;
    }
  }
  return result;
}

void sub_20EE97EA0(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unint64_t v15;
  const char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  int v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  const char *__src;
  _QWORD v78[3];
  int v79;
  const char *v80;
  int v81;
  const char *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE object[24];
  __int128 v89;
  void *__p[2];
  unint64_t v91;
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  if (a1 == a2)
  {
    v6 = 0;
  }
  else
  {
    v5 = a1;
    v6 = 0;
    v7 = (a3[1] - *a3) >> 3;
    do
    {
      v8 = *v5;
      if (v7 > v8)
      {
        if (!*((_BYTE *)a3 + 60)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 69, (uint64_t)"ordered", 7, (uint64_t)"Not supported with reordered indices.", 37, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v9 = a3[3];
        v10 = *(_QWORD *)(v9 + 8 * (v8 >> 6));
        if ((v10 & (1 << v8)) != 0)
        {
          *(_QWORD *)(v9 + 8 * (v8 >> 6)) = v10 ^ (1 << v8);
          v11 = *((_DWORD *)a3 + 12);
          ++*((_DWORD *)a3 + 13);
          if (v11 <= v8)
            ++*((_DWORD *)a3 + 14);
        }
        ++v6;
      }
      ++v5;
    }
    while (v5 != a2);
  }
  sub_20EEA55F4(&v85);
  if (**(int **)(v85 + 56) <= 3)
  {
    v12 = *(unsigned __int8 *)(v85 + 72);
    v13 = sub_20E8C31DC(v85, "OSLogSurrogateAppender", 1, 0);
    if (v12 || v13 != 0)
    {
      v15 = v13;
      v76 = v12;
      v78[0] = &v85;
      v78[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v78[2] = std::chrono::system_clock::now().__d_.__rep_;
      v79 = 3;
      v80 = "unknown file";
      v81 = 138;
      v83 = 0;
      v84 = 0;
      v82 = "unknown function";
      v16 = (const char *)(v85 + 16);
      v74 = v85 + 16;
      v75 = v85;
      if (*(char *)(v85 + 39) < 0)
      {
        v16 = *(const char **)(v85 + 16);
        v17 = *(_QWORD *)(v85 + 24);
        v19 = *a3;
        v18 = a3[1];
        v20 = *((unsigned int *)a3 + 13);
        v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v22 & 1) != 0)
          goto LABEL_21;
      }
      else
      {
        v17 = *(unsigned __int8 *)(v85 + 39);
        v19 = *a3;
        v18 = a3[1];
        v20 = *((unsigned int *)a3 + 13);
        v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v21 & 1) != 0)
          goto LABEL_21;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v89 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_21:
      if (byte_254A4A4F8[23] >= 0)
        v23 = byte_254A4A4F8;
      else
        v23 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v24 = byte_254A4A4F8[23];
      else
        v24 = *(_QWORD *)&byte_254A4A4F8[8];
      __src = v16;
      *(_QWORD *)object = os_log_create(v23, v16);
      v25 = &object[8];
      if (v24 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v24 >= 0x17)
      {
        v73 = v19;
        v26 = v15;
        v27 = v18;
        v28 = v20;
        v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17)
          v29 = v24 | 7;
        v30 = v29 + 1;
        v25 = operator new(v29 + 1);
        *(_QWORD *)&object[16] = v24;
        *(_QWORD *)&v89 = v30 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v25;
        v20 = v28;
        v18 = v27;
        v15 = v26;
        v19 = v73;
      }
      else
      {
        BYTE7(v89) = v24;
        if (!v24)
        {
LABEL_35:
          v25[v24] = 0;
          BYTE8(v89) = 1;
          v31 = __p;
          if (v17 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v17 >= 0x17)
          {
            v33 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17)
              v33 = v17 | 7;
            v34 = v33 + 1;
            v31 = operator new(v33 + 1);
            __p[1] = (void *)v17;
            v91 = v34 | 0x8000000000000000;
            __p[0] = v31;
          }
          else
          {
            HIBYTE(v91) = v17;
            if (!v17)
            {
              LOBYTE(__p[0]) = 0;
              v92 = 1;
              v32 = *(NSObject **)object;
              if ((SHIBYTE(v91) & 0x80000000) == 0)
                goto LABEL_39;
              goto LABEL_45;
            }
          }
          memmove(v31, __src, v17);
          *((_BYTE *)v31 + v17) = 0;
          v92 = 1;
          v32 = *(NSObject **)object;
          if ((SHIBYTE(v91) & 0x80000000) == 0)
          {
LABEL_39:
            if (!BYTE8(v89))
              goto LABEL_48;
            goto LABEL_46;
          }
LABEL_45:
          operator delete(__p[0]);
          if (!BYTE8(v89))
          {
LABEL_48:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            v35 = ((v18 - v19) >> 3) - v20;
            if (v15 && *(_QWORD *)(v15 + 24))
            {
              v36 = _os_log_pack_size();
              v37 = (std::__shared_weak_count_vtbl *)operator new(v36, (std::align_val_t)8uLL);
              v38 = (std::__shared_weak_count *)operator new();
              v39 = v38;
              v38->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v38->__shared_owners_;
              v38->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v38->__shared_weak_owners_ = 0;
              v38[1].__vftable = v37;
              *(_QWORD *)object = v37;
              *(_QWORD *)&object[8] = v37;
              *(_QWORD *)&object[16] = v38;
              do
                v41 = __ldxr(p_shared_owners);
              while (__stxr(v41 + 1, p_shared_owners));
              v89 = 0uLL;
              __p[0] = 0;
              do
                v42 = __ldaxr(p_shared_owners);
              while (__stlxr(v42 - 1, p_shared_owners));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v39);
              }
              v43 = *(_QWORD *)object;
              v44 = _os_log_pack_fill();
              *(_DWORD *)v44 = 134218240;
              *(_QWORD *)(v44 + 4) = v35 + v6;
              *(_WORD *)(v44 + 12) = 2048;
              *(_QWORD *)(v44 + 14) = v35;
              v45 = operator new();
              v46 = *(unsigned __int8 *)(v75 + 39);
              v47 = v74;
              if ((v46 & 0x80u) != 0)
              {
                v47 = *(_QWORD *)(v75 + 16);
                v46 = *(_QWORD *)(v75 + 24);
              }
              *(_QWORD *)v45 = v43;
              *(_OWORD *)(v45 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v45 + 24) = v89;
              v89 = 0uLL;
              *(_QWORD *)(v45 + 40) = v47;
              *(_QWORD *)(v45 + 48) = v46;
              *(_BYTE *)(v45 + 56) = 1;
              v86 = 0;
              v87 = v45;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), &v87);
              v48 = v87;
              v87 = 0;
              if (v48)
              {
                v49 = *(std::__shared_weak_count **)(v48 + 32);
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                v52 = *(std::__shared_weak_count **)(v48 + 16);
                if (v52)
                {
                  v53 = (unint64_t *)&v52->__shared_owners_;
                  do
                    v54 = __ldaxr(v53);
                  while (__stlxr(v54 - 1, v53));
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
                }
                MEMORY[0x212BC6398](v48, 0x10F0C40B62ED6C6);
                v55 = v86;
                v86 = 0;
                if (v55)
                {
                  v56 = *(std::__shared_weak_count **)(v55 + 32);
                  if (v56)
                  {
                    v57 = (unint64_t *)&v56->__shared_owners_;
                    do
                      v58 = __ldaxr(v57);
                    while (__stlxr(v58 - 1, v57));
                    if (!v58)
                    {
                      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                      std::__shared_weak_count::__release_weak(v56);
                    }
                  }
                  v59 = *(std::__shared_weak_count **)(v55 + 16);
                  if (v59)
                  {
                    v60 = (unint64_t *)&v59->__shared_owners_;
                    do
                      v61 = __ldaxr(v60);
                    while (__stlxr(v61 - 1, v60));
                    if (!v61)
                    {
                      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                      std::__shared_weak_count::__release_weak(v59);
                    }
                  }
                  MEMORY[0x212BC6398](v55, 0x10F0C40B62ED6C6);
                }
              }
              v62 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
              v63 = v76;
              if (*((_QWORD *)&v89 + 1))
              {
                v64 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
                do
                  v65 = __ldaxr(v64);
                while (__stlxr(v65 - 1, v64));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
              v66 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v67 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
            }
            else
            {
              os_log_type_enabled(v32, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 134218240;
              *(_QWORD *)&object[4] = v35 + v6;
              *(_WORD *)&object[12] = 2048;
              *(_QWORD *)&object[14] = ((v18 - v19) >> 3) - v20;
              v69 = (void *)_os_log_send_and_compose_impl();
              v63 = v76;
              if (v69)
                free(v69);
            }
            if (v63)
            {
              sub_20E8C003C((uint64_t)v78, "Number of features removed given indices([before, after]): ([%lu, %lu]).", ((a3[1] - *a3) >> 3) - *((unsigned int *)a3 + 13) + v6, ((a3[1] - *a3) >> 3) - *((unsigned int *)a3 + 13));
              sub_20E863570((uint64_t)v78);
            }
            sub_20E863570((uint64_t)v78);
            v70 = v84;
            if (v84)
            {
              v71 = (unint64_t *)&v84->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            return;
          }
LABEL_46:
          if (SBYTE7(v89) < 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_48;
        }
      }
      memmove(v25, v23, v24);
      goto LABEL_35;
    }
  }
}

void sub_20EE98710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20EE98750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E86E8C4(&a28);
  sub_20E86E8C4(&a27);
  sub_20E86E658((uint64_t)&a29);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20EE98784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x212BC6398](v9, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE987B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE987C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EE9883C(uint64_t a1, uint64_t a2, _QWORD *a3, int *a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t *a8, void **a9)
{
  double *v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  unsigned int v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  size_t v31;
  const char *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  const char *v35;
  size_t v36;
  _BYTE *v37;
  const char *v38;
  double *v39;
  int v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  void *p_p;
  NSObject *v46;
  unint64_t v47;
  uint64_t v48;
  const char *v49;
  double *v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  unsigned int v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  float64x2_t *v98;
  float64x2_t *v99;
  uint64_t v100;
  unint64_t v101;
  double v104;
  double *v105;
  double v106;
  int v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v115;
  const char *v116;
  size_t v117;
  unsigned __int8 v118;
  unsigned int v119;
  int v120;
  double v121;
  double v122;
  double v124;
  double v127;
  double v128;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  unsigned __int8 v138;
  const char *v139;
  size_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  NSObject *v145;
  uint64_t v146;
  uint64_t v147;
  size_t v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  const char *v158;
  void *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  void *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  int v190;
  int v191;
  BOOL v192;
  float64x2_t v193;
  double v194;
  double v196;
  double v197;
  double v198;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  int v206;
  int v207;
  BOOL v208;
  float64x2_t v209;
  double v210;
  double v212;
  double v213;
  float64x2_t v214;
  double v215;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  int v224;
  int v225;
  BOOL v226;
  float64x2_t v227;
  double v228;
  double v230;
  double v231;
  float64x2_t v232;
  unsigned int v233;
  float64x2_t v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v250;
  double v251;
  double v252;
  double v253;
  double v259;
  float64x2_t v260;
  double *v263;
  double *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char *v269;
  double *v270;
  float64x2_t *v271;
  double *v272;
  float64x2_t *v273;
  uint64_t v274;
  double v275;
  double *v276;
  double v277;
  double *v278;
  double *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  double *v285;
  double *v286;
  double *v287;
  double *v288;
  double *v289;
  void **v290;
  void *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  double *v297;
  double *v298;
  float64x2_t v299;
  float64x2_t *v300;
  float64x2_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  int8x16_t v307;
  float64x2_t v308;
  double v309;
  BOOL v310;
  double v311;
  uint64_t v312;
  unint64_t v313;
  float64x2_t v314;
  float64x2_t v315;
  int8x16_t v316;
  float64x2_t v317;
  double v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unsigned int v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  float32x2_t v327;
  unint64_t v328;
  uint64_t v329;
  float64x2_t v330;
  unsigned int v331;
  uint64_t v332;
  int8x16_t v333;
  float64x2_t v334;
  double v335;
  uint64_t *v336;
  _BOOL4 v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  int v341;
  int v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  const char *v346;
  size_t v347;
  uint64_t v348;
  unsigned __int8 v349;
  const char *v350;
  size_t v351;
  _BYTE *v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  NSObject *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  size_t v360;
  std::__shared_weak_count_vtbl *v361;
  std::__shared_weak_count *v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  uint64_t v370;
  const char *v371;
  void *v372;
  uint64_t *v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  void *v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  void *v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  void *v397;
  uint64_t v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  int v402;
  unint64_t v403;
  double v404;
  double v405;
  uint64_t v406;
  double v407;
  unsigned __int16 v408;
  int v409;
  double v410;
  double v411;
  double v414;
  uint64_t v415;
  void *__dst;
  int8x16_t v417;
  const char *v418;
  int8x16_t v419;
  int8x16_t v420;
  int v421;
  const char *v422;
  int v424;
  int *v425;
  int8x16_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v430;
  float64x2_t *v431;
  uint64_t v432;
  char v433[8];
  void *v434;
  void *v435;
  void *v436;
  void *v437;
  char *v438;
  double *v439;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v441;
  int v442;
  const char *v443;
  int v444;
  const char *v445;
  uint64_t v446;
  std::__shared_weak_count *v447;
  uint64_t v448;
  float64x2_t v449;
  double v450;
  void *v451;
  double *v452;
  double *v453;
  void *v454[2];
  char v455;
  char v456;
  uint64_t v457;
  _BYTE object[40];
  void *__p;
  _BYTE v460[20];
  __int16 v461;
  double v462;
  __int16 v463;
  uint64_t v464;
  __int16 v465;
  double v466;
  __int16 v467;
  double v468;
  __int16 v469;
  uint64_t v470;
  __int16 v471;
  double v472;
  __int16 v473;
  double v474;
  uint64_t v475;

  v11 = (double *)a2;
  v475 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD **)(a2 + 32);
  if ((*(_BYTE *)(v13 + 24) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/FeatureFilterTransforms.hpp", 44, (uint64_t)"transform_map.size() % 2 == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a4;
  v16 = *v14 + 24 * v15;
  v437 = 0;
  v438 = 0;
  v436 = 0;
  v18 = *(_BYTE **)v16;
  v17 = *(_BYTE **)(v16 + 8);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (0x8E38E38E38E38E39 * (v19 >> 3) >= 0x38E38E38E38E38FLL)
      sub_20EB849AC();
    v20 = (char *)operator new(v19);
    v21 = &v20[8 * (v19 >> 3)];
    v436 = v20;
    v438 = v21;
    memcpy(v20, v18, v19);
    v437 = v21;
  }
  sub_20EA84218(*a3 + 32 * v15, (uint64_t *)&v436, (uint64_t)v433);
  v22 = a4[1];
  v23 = (char *)v434;
  v24 = sub_20EB8DE00((_QWORD *)v13, a4);
  if (!v24)
    sub_20E89FD20("unordered_map::at: key not found");
  __dst = (void *)v24[5];
  v426 = *(int8x16_t *)(v24 + 3);
  v414 = *((double *)v24 + 9);
  v411 = *((double *)v24 + 13);
  v419 = *(int8x16_t *)(v24 + 11);
  v420 = *(int8x16_t *)(v24 + 7);
  v25 = sub_20EB8DE00((_QWORD *)v13, a4);
  if (!v25)
    sub_20E89FD20("unordered_map::at: key not found");
  v430 = a1;
  v410 = *((double *)v25 + 17);
  v417 = *(int8x16_t *)(v25 + 15);
  sub_20EEA55F4(&v449);
  v425 = a4;
  if (**(int **)(*(_QWORD *)&v449.f64[0] + 56) > 3)
    goto LABEL_106;
  v26 = *(unsigned __int8 *)(*(_QWORD *)&v449.f64[0] + 72);
  v27 = sub_20E8C31DC(*(uint64_t *)&v449.f64[0], "OSLogSurrogateAppender", 1, 0);
  v28 = v27;
  if (!v26 && !v27)
    goto LABEL_106;
  v439 = (double *)&v449;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v441 = std::chrono::system_clock::now().__d_.__rep_;
  v442 = 3;
  v443 = "unknown file";
  v444 = 59;
  v447 = 0;
  v445 = "unknown function";
  v446 = 0;
  if (*a4 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_615;
  }
  v29 = a4[1];
  if (v29 < 0x10000)
    goto LABEL_16;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_615:
    abort();
  }
  LOWORD(v29) = *((_WORD *)a4 + 2);
LABEL_16:
  v408 = v29;
  v402 = *a4;
  v30 = *(_QWORD *)v439;
  v401 = *(_QWORD *)v439;
  if (*(char *)(*(_QWORD *)v439 + 39) < 0)
  {
    v32 = *(const char **)(v30 + 16);
    v31 = *(_QWORD *)(v30 + 24);
    v400 = *(_QWORD *)v439 + 16;
    v403 = v28;
    v34 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v34 & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v31 = *(unsigned __int8 *)(*(_QWORD *)v439 + 39);
    v32 = (const char *)(*(_QWORD *)v439 + 16);
    v400 = (uint64_t)v32;
    v403 = v28;
    v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v33 & 1) != 0)
      goto LABEL_20;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_20:
  if (byte_254A4A4F8[23] >= 0)
    v35 = byte_254A4A4F8;
  else
    v35 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v36 = byte_254A4A4F8[23];
  else
    v36 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v35, v32);
  v37 = &object[8];
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v36 >= 0x17)
  {
    v406 = v13;
    v38 = v32;
    v39 = v11;
    v40 = v26;
    v41 = v23;
    v42 = v22;
    v43 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v43 = v36 | 7;
    v44 = v43 + 1;
    v37 = operator new(v43 + 1);
    *(_QWORD *)&object[24] = v44 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v37;
    *(_QWORD *)&object[16] = v36;
    v22 = v42;
    v23 = v41;
    v26 = v40;
    v11 = v39;
    v32 = v38;
    v13 = v406;
    goto LABEL_33;
  }
  object[31] = v36;
  if (v36)
LABEL_33:
    memmove(v37, v35, v36);
  v37[v36] = 0;
  object[32] = 1;
  p_p = &__p;
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  a4 = v425;
  if (v31 >= 0x17)
  {
    v48 = v13;
    v49 = v32;
    v50 = v11;
    v51 = v26;
    v52 = v23;
    v53 = v22;
    v54 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v54 = v31 | 7;
    v55 = v54 + 1;
    p_p = operator new(v54 + 1);
    *(_QWORD *)&v460[8] = v55 | 0x8000000000000000;
    __p = p_p;
    *(_QWORD *)v460 = v31;
    v22 = v53;
    v23 = v52;
    v26 = v51;
    v11 = v50;
    v32 = v49;
    v13 = v48;
    a4 = v425;
  }
  else
  {
    v460[15] = v31;
    if (!v31)
    {
      LOBYTE(__p) = 0;
      v460[16] = 1;
      v46 = *(NSObject **)object;
      if ((v460[15] & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_44;
    }
  }
  memmove(p_p, v32, v31);
  *((_BYTE *)p_p + v31) = 0;
  v460[16] = 1;
  v46 = *(NSObject **)object;
  if ((v460[15] & 0x80000000) == 0)
  {
LABEL_38:
    v47 = v403;
    if (!object[32])
      goto LABEL_47;
    goto LABEL_45;
  }
LABEL_44:
  operator delete(__p);
  v47 = v403;
  if (!object[32])
    goto LABEL_47;
LABEL_45:
  if ((object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
LABEL_47:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  *(_QWORD *)&v405 = vextq_s8(v419, v419, 8uLL).u64[0];
  *(_QWORD *)&v407 = vextq_s8(v426, v426, 8uLL).u64[0];
  *(_QWORD *)&v404 = vextq_s8(v417, v417, 8uLL).u64[0];
  v409 = v408 | ((unsigned __int16)v402 << 16);
  if (v47 && *(_QWORD *)(v47 + 24))
  {
    v56 = _os_log_pack_size();
    v57 = (std::__shared_weak_count_vtbl *)operator new(v56, (std::align_val_t)8uLL);
    v58 = (std::__shared_weak_count *)operator new();
    v59 = v58;
    v58->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    v58->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v58->__shared_weak_owners_ = 0;
    v58[1].__vftable = v57;
    *(_QWORD *)object = v57;
    *(_QWORD *)&object[8] = v57;
    *(_QWORD *)&object[16] = v58;
    do
      v61 = __ldxr(p_shared_owners);
    while (__stxr(v61 + 1, p_shared_owners));
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)&object[24] = 0;
    __p = 0;
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v59);
    }
    v63 = _os_log_pack_fill();
    v64 = *(_QWORD *)v11;
    *(_DWORD *)v63 = 67112448;
    *(_DWORD *)(v63 + 4) = v409;
    *(_WORD *)(v63 + 8) = 2048;
    *(_QWORD *)(v63 + 10) = v64;
    *(_WORD *)(v63 + 18) = 2048;
    *(_QWORD *)(v63 + 20) = v426.i64[0];
    *(_WORD *)(v63 + 28) = 2048;
    *(double *)(v63 + 30) = v407;
    *(_WORD *)(v63 + 38) = 2048;
    *(_QWORD *)(v63 + 40) = __dst;
    *(_WORD *)(v63 + 48) = 2048;
    *(_QWORD *)(v63 + 50) = v420.i64[0];
    *(_WORD *)(v63 + 58) = 2048;
    *(_QWORD *)(v63 + 60) = v420.i64[1];
    *(_WORD *)(v63 + 68) = 2048;
    *(double *)(v63 + 70) = v414;
    *(_WORD *)(v63 + 78) = 2048;
    *(_QWORD *)(v63 + 80) = v419.i64[0];
    *(_WORD *)(v63 + 88) = 2048;
    *(double *)(v63 + 90) = v405;
    *(_WORD *)(v63 + 98) = 2048;
    *(double *)(v63 + 100) = v411;
    *(_WORD *)(v63 + 108) = 2048;
    *(_QWORD *)(v63 + 110) = v417.i64[0];
    *(_WORD *)(v63 + 118) = 2048;
    *(double *)(v63 + 120) = v404;
    *(_WORD *)(v63 + 128) = 2048;
    *(double *)(v63 + 130) = v410;
    v65 = (char *)operator new();
    v66 = *(unsigned __int8 *)(v401 + 39);
    v67 = v400;
    if ((v66 & 0x80u) != 0)
    {
      v67 = *(_QWORD *)(v401 + 16);
      v66 = *(_QWORD *)(v401 + 24);
    }
    *(_OWORD *)v65 = *(_OWORD *)object;
    *((_QWORD *)v65 + 2) = *(_QWORD *)&object[16];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v65 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *((_QWORD *)v65 + 5) = v67;
    *((_QWORD *)v65 + 6) = v66;
    v65[56] = 1;
    v451 = 0;
    v454[0] = v65;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v403 + 24) + 40))(*(_QWORD *)(v403 + 24), v454);
    v68 = v454[0];
    v454[0] = 0;
    if (v68)
    {
      v69 = (std::__shared_weak_count *)*((_QWORD *)v68 + 4);
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = (std::__shared_weak_count *)*((_QWORD *)v68 + 2);
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      MEMORY[0x212BC6398](v68, 0x10F0C40B62ED6C6);
      v75 = v451;
      v451 = 0;
      if (v75)
      {
        v76 = (std::__shared_weak_count *)*((_QWORD *)v75 + 4);
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        v79 = (std::__shared_weak_count *)*((_QWORD *)v75 + 2);
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        MEMORY[0x212BC6398](v75, 0x10F0C40B62ED6C6);
      }
    }
    v82 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v83 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v86 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
  else
  {
    os_log_type_enabled(v46, OS_LOG_TYPE_INFO);
    v88 = *(_QWORD *)v11;
    *(_DWORD *)object = 67112448;
    *(_DWORD *)&object[4] = v409;
    *(_WORD *)&object[8] = 2048;
    *(_QWORD *)&object[10] = v88;
    *(_WORD *)&object[18] = 2048;
    *(_QWORD *)&object[20] = v426.i64[0];
    *(_WORD *)&object[28] = 2048;
    *(double *)&object[30] = v407;
    *(_WORD *)&object[38] = 2048;
    __p = __dst;
    *(_WORD *)v460 = 2048;
    *(_QWORD *)&v460[2] = v420.i64[0];
    *(_WORD *)&v460[10] = 2048;
    *(_QWORD *)&v460[12] = v420.i64[1];
    v461 = 2048;
    v462 = v414;
    v463 = 2048;
    v464 = v419.i64[0];
    v465 = 2048;
    v466 = v405;
    v467 = 2048;
    v468 = v411;
    v469 = 2048;
    v470 = v417.i64[0];
    v471 = 2048;
    v472 = v404;
    v473 = 2048;
    v474 = v410;
    v89 = (void *)_os_log_send_and_compose_impl();
    if (v89)
      free(v89);
  }
  if (!v26)
    goto LABEL_101;
  if (*a4 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_632;
  }
  v90 = a4[1];
  if (v90 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      LOWORD(v90) = *((_WORD *)a4 + 2);
      goto LABEL_100;
    }
LABEL_632:
    abort();
  }
LABEL_100:
  sub_20E8C003C((uint64_t)&v439, "[FeatureFilterTransform] T_Gcrop_to_C -- Camera %u @ Timestamp %f \nRotation {%f,%f,%f,%f,%f,%f,%f,%f,%f} \nTranslation: {%f,%f,%f}", (unsigned __int16)v90 | ((unsigned __int16)*a4 << 16), *v11, *(double *)v426.i64, v407, *(double *)&__dst, *(double *)v420.i64, *(double *)vextq_s8(v420, v420, 8uLL).i64, v414, *(double *)v419.i64, v405, v411, *(double *)v417.i64, v404, v410);
  sub_20E863570((uint64_t)&v439);
LABEL_101:
  sub_20E863570((uint64_t)&v439);
  v91 = v447;
  if (v447)
  {
    v92 = (unint64_t *)&v447->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
LABEL_106:
  v94 = &v23[1664 * v22];
  if (v94[1536])
    v95 = (uint64_t)(v94 + 96);
  else
    v95 = 0;
  v96 = sub_20EB8DE00((_QWORD *)v13, a4);
  v97 = a8;
  if (!v96)
    sub_20E89FD20("unordered_map::at: key not found");
  v99 = *(float64x2_t **)(v430 + 56);
  v98 = *(float64x2_t **)(v430 + 64);
  v452 = 0;
  v451 = 0;
  v453 = 0;
  v431 = v98;
  v100 = (char *)v98 - (char *)v99;
  if (!v100)
  {
    v273 = 0;
LABEL_410:
    if (v273)
    {
LABEL_493:
      v452 = (double *)v273;
      operator delete(v273);
      v288 = 0;
      v289 = 0;
      v273 = 0;
      v290 = a9;
      v291 = *a9;
      if (!*a9)
        goto LABEL_495;
    }
    else
    {
LABEL_429:
      v288 = 0;
      v289 = 0;
      v290 = a9;
      v291 = *a9;
      if (!*a9)
        goto LABEL_495;
    }
LABEL_494:
    v290[1] = v291;
    operator delete(v291);
    *v290 = 0;
    v290[1] = 0;
    v290[2] = 0;
    goto LABEL_495;
  }
  v101 = 0xAAAAAAAAAAAAAAABLL * (v100 >> 3);
  if (v101 >> 60)
    sub_20E867F44();
  v415 = v95 + 168;
  v451 = operator new(0xAAAAAAAAAAAAAAB0 * (v100 >> 3));
  v452 = (double *)v451;
  v453 = (double *)((char *)v451 + 16 * v101);
  v104 = (double)a5;
  v427 = v95;
  do
  {
    *(_QWORD *)&_Q2.f64[0] = v96[9];
    v106 = v99[1].f64[0];
    _Q7 = *v99;
    __asm { FMLA            D0, D2, V7.D[1] }
    _Q0.f64[0] = _Q0.f64[0] + *((double *)v96 + 13) * v106;
    *(_QWORD *)&_Q2.f64[0] = v96[17];
    _Q0 = vaddq_f64(_Q0, _Q2);
    v449 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v96 + 3), v99->f64[0]), *(float64x2_t *)(v96 + 7), *v99, 1), *(float64x2_t *)(v96 + 11), v106), *(float64x2_t *)(v96 + 15));
    v450 = _Q0.f64[0];
    if (_Q0.f64[0] < 0.0)
    {
      sub_20EEA56E8(&v448);
      if (**(int **)(v448 + 56) > 2)
        goto LABEL_115;
      v111 = *(unsigned __int8 *)(v448 + 72);
      v112 = sub_20E8C31DC(v448, "OSLogSurrogateAppender", 1, 0);
      v113 = v112;
      if (!v111 && v112 == 0)
        goto LABEL_115;
      v439 = (double *)&v448;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v441 = std::chrono::system_clock::now().__d_.__rep_;
      v442 = 2;
      v443 = "unknown file";
      v444 = 43;
      v445 = "unknown function";
      v446 = 0;
      v447 = 0;
      v115 = *(_QWORD *)v439;
      v116 = (const char *)(*(_QWORD *)v439 + 16);
      v418 = v116;
      if (*(char *)(*(_QWORD *)v439 + 39) < 0)
      {
        v116 = *(const char **)(v115 + 16);
        v117 = *(_QWORD *)(v115 + 24);
        v138 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v138 & 1) != 0)
          goto LABEL_158;
      }
      else
      {
        v117 = *(unsigned __int8 *)(*(_QWORD *)v439 + 39);
        v118 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v118 & 1) != 0)
          goto LABEL_158;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v454);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v454);
        if (v456 && v455 < 0)
          operator delete(v454[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_158:
      if (byte_254A4A4F8[23] >= 0)
        v139 = byte_254A4A4F8;
      else
        v139 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v140 = byte_254A4A4F8[23];
      else
        v140 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v139, v116);
      if (v140 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v421 = v111;
      if (v140 >= 0x17)
      {
        v142 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v140 | 7) != 0x17)
          v142 = v140 | 7;
        v143 = v142 + 1;
        v141 = operator new(v142 + 1);
        *(_QWORD *)&object[24] = v143 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v141;
        *(_QWORD *)&object[16] = v140;
      }
      else
      {
        object[31] = v140;
        v141 = &object[8];
        if (!v140)
        {
LABEL_172:
          v141[v140] = 0;
          object[32] = 1;
          if (v117 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v117 >= 0x17)
          {
            v146 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v117 | 7) != 0x17)
              v146 = v117 | 7;
            v147 = v146 + 1;
            v144 = operator new(v146 + 1);
            *(_QWORD *)&v460[8] = v147 | 0x8000000000000000;
            __p = v144;
            *(_QWORD *)v460 = v117;
          }
          else
          {
            v460[15] = v117;
            v144 = &__p;
            if (!v117)
            {
              LOBYTE(__p) = 0;
              v460[16] = 1;
              v145 = *(NSObject **)object;
              if ((v460[15] & 0x80000000) == 0)
                goto LABEL_176;
              goto LABEL_182;
            }
          }
          memmove(v144, v116, v117);
          *((_BYTE *)v144 + v117) = 0;
          v460[16] = 1;
          v145 = *(NSObject **)object;
          if ((v460[15] & 0x80000000) == 0)
          {
LABEL_176:
            a4 = v425;
            if (!object[32])
              goto LABEL_185;
            goto LABEL_183;
          }
LABEL_182:
          operator delete(__p);
          a4 = v425;
          if (!object[32])
          {
LABEL_185:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v113 && *(_QWORD *)(v113 + 24))
            {
              v148 = _os_log_pack_size();
              v149 = (std::__shared_weak_count_vtbl *)operator new(v148, (std::align_val_t)8uLL);
              v150 = (std::__shared_weak_count *)operator new();
              v151 = v150;
              v150->__shared_owners_ = 0;
              v152 = (unint64_t *)&v150->__shared_owners_;
              v150->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v150->__shared_weak_owners_ = 0;
              v150[1].__vftable = v149;
              *(_QWORD *)object = v149;
              *(_QWORD *)&object[8] = v149;
              *(_QWORD *)&object[16] = v150;
              do
                v153 = __ldxr(v152);
              while (__stxr(v153 + 1, v152));
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              __p = 0;
              do
                v154 = __ldaxr(v152);
              while (__stlxr(v154 - 1, v152));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v151);
              }
              v155 = *(_QWORD *)object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v156 = (char *)operator new();
              v157 = *(unsigned __int8 *)(v115 + 39);
              v158 = v418;
              if ((v157 & 0x80u) != 0)
              {
                v158 = *(const char **)(v115 + 16);
                v157 = *(_QWORD *)(v115 + 24);
              }
              *(_QWORD *)v156 = v155;
              *(_OWORD *)(v156 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v156 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *((_QWORD *)v156 + 5) = v158;
              *((_QWORD *)v156 + 6) = v157;
              v156[56] = 2;
              v457 = 0;
              v454[0] = v156;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v113 + 24) + 40))(*(_QWORD *)(v113 + 24), v454);
              v95 = v427;
              v159 = v454[0];
              v454[0] = 0;
              v97 = a8;
              if (v159)
              {
                v160 = (std::__shared_weak_count *)*((_QWORD *)v159 + 4);
                if (v160)
                {
                  v161 = (unint64_t *)&v160->__shared_owners_;
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (!v162)
                  {
                    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                    std::__shared_weak_count::__release_weak(v160);
                  }
                }
                v163 = (std::__shared_weak_count *)*((_QWORD *)v159 + 2);
                if (v163)
                {
                  v164 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v165 = __ldaxr(v164);
                  while (__stlxr(v165 - 1, v164));
                  if (!v165)
                  {
                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                    std::__shared_weak_count::__release_weak(v163);
                  }
                }
                MEMORY[0x212BC6398](v159, 0x10F0C40B62ED6C6);
                v166 = v457;
                v457 = 0;
                if (v166)
                {
                  v167 = *(std::__shared_weak_count **)(v166 + 32);
                  if (v167)
                  {
                    v168 = (unint64_t *)&v167->__shared_owners_;
                    do
                      v169 = __ldaxr(v168);
                    while (__stlxr(v169 - 1, v168));
                    if (!v169)
                    {
                      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                      std::__shared_weak_count::__release_weak(v167);
                    }
                  }
                  v170 = *(std::__shared_weak_count **)(v166 + 16);
                  if (v170)
                  {
                    v171 = (unint64_t *)&v170->__shared_owners_;
                    do
                      v172 = __ldaxr(v171);
                    while (__stlxr(v172 - 1, v171));
                    if (!v172)
                    {
                      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                      std::__shared_weak_count::__release_weak(v170);
                    }
                  }
                  MEMORY[0x212BC6398](v166, 0x10F0C40B62ED6C6);
                }
              }
              v173 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v174 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v175 = __ldaxr(v174);
                while (__stlxr(v175 - 1, v174));
                if (!v175)
                {
                  ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                  std::__shared_weak_count::__release_weak(v173);
                }
              }
              v176 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v177 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v178 = __ldaxr(v177);
                while (__stlxr(v178 - 1, v177));
                if (!v178)
                {
                  ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                  std::__shared_weak_count::__release_weak(v176);
                }
              }
            }
            else
            {
              os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG);
              *(_WORD *)object = 0;
              v179 = (void *)_os_log_send_and_compose_impl();
              v97 = a8;
              v95 = v427;
              if (v179)
                free(v179);
            }
            if (v421)
            {
              sub_20E8C003C((uint64_t)&v439, "Body crop boundary vertex is behind the camera.");
              sub_20E863570((uint64_t)&v439);
            }
            sub_20E863570((uint64_t)&v439);
            v180 = v447;
            if (v447)
            {
              v181 = (unint64_t *)&v447->__shared_owners_;
              do
                v182 = __ldaxr(v181);
              while (__stlxr(v182 - 1, v181));
              if (!v182)
              {
                ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                std::__shared_weak_count::__release_weak(v180);
              }
            }
            goto LABEL_115;
          }
LABEL_183:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_185;
        }
      }
      memmove(v141, v139, v140);
      goto LABEL_172;
    }
    v119 = *(_DWORD *)(v95 + 992);
    if (v119 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_610;
      }
      v95 = v427;
      v119 = *(_DWORD *)(v427 + 992);
      if (v119 > 7)
      {
LABEL_134:
        if (v119 > 0xB)
        {
          if (v119 <= 0xD)
          {
            if (v119 == 13 && v450 >= 0.00000001)
            {
              _Q0 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v450, 0);
              _Q1 = vdivq_f64(v449, _Q0);
              _Q0.f64[0] = *(float64_t *)(v95 + 32);
              v124 = (*(double *)v95 + _Q0.f64[0]) * 0.5;
              _D4 = _Q1.f64[1];
              __asm { FMLA            D3, D4, V1.D[1] }
              v127 = v124 * (_D3 * v124);
              _Q2 = vdivq_f64(_Q1, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v127* (*(double *)(v95 + 168)+ v124 * *(double *)(v95 + 224)+ v127* (*(double *)(v95 + 176)+ v124 * *(double *)(v95 + 232)+ v127* (*(double *)(v95 + 184)+ v124 * *(double *)(v95 + 240)+ v127* (*(double *)(v95 + 192)+ v124 * *(double *)(v95 + 248)+ v127* (*(double *)(v95 + 200)+ v124 * *(double *)(v95 + 256)+ v127
                                          * (*(double *)(v95 + 208)
                                           + v124 * *(double *)(v95 + 264)
                                           + v127
                                           * (*(double *)(v95 + 216) + *(double *)(v95 + 272) * v124 + v127 * 0.0)))))))
                                     / 100.0
                                     + 1.0),
                                     0));
              *(float64x2_t *)object = _Q2;
              v128 = _Q2.f64[1];
              goto LABEL_330;
            }
            goto LABEL_115;
          }
          if (v119 == 14)
            v120 = sub_20EB247C0((float64x2_t *)object, (uint64_t)&v449, (double *)v415, (*(double *)v95 + *(double *)(v95 + 32)) * 0.5);
          else
            v120 = sub_20EB3E39C(v95, (float64x2_t *)object, &v449);
        }
        else if (v119 > 9)
        {
          if (v119 == 10)
            v120 = sub_20EB24288((float64x2_t *)object, (uint64_t)&v449, (double *)v415, (*(double *)v95 + *(double *)(v95 + 32)) * 0.5);
          else
            v120 = sub_20EB3A2E4(v95, (float64x2_t *)object, &v449);
        }
        else
        {
          if (v119 != 9)
          {
            _Q0.f64[1] = v449.f64[1];
            _D1 = v449.f64[1];
            __asm { FMLA            D6, D1, V0.D[1] }
            v185 = sqrt(_D6);
            v186 = fabs(v450);
            v187 = fabs(v185);
            v188 = v186 / v187;
            if (v186 >= v187)
              v188 = v187 / v186;
            if (v188 <= 0.414213562)
            {
              v190 = 1;
              v191 = 2;
              v189 = v188;
              if (_D6 >= 0.00000001)
                goto LABEL_245;
            }
            else
            {
              v189 = (v187 - v186) / (v186 + v187);
              if (v186 >= v187)
                v189 = -v189;
              v190 = -1;
              v191 = 1;
              if (_D6 >= 0.00000001)
              {
LABEL_245:
                if (v186 < v187)
                  v190 = -v190;
                else
                  v191 = v188 > 0.414213562;
                v192 = v185 == INFINITY && v186 == INFINITY;
                v193 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v189 * v189), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v189 * v189), (float64x2_t)xmmword_210315370), v189 * v189 * (v189 * v189))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v189 * v189), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v189 * v189), (float64x2_t)xmmword_210315380), v189 * v189 * (v189 * v189))),
                           v189 * v189 * (v189 * v189) * (v189 * v189 * (v189 * v189))));
                v194 = v189 + v189 * vdivq_f64(v193, (float64x2_t)vdupq_laneq_s64((int64x2_t)v193, 1)).f64[0];
                if (v192)
                  v194 = 0.785398163;
                if (v185 == 0.0 && v450 == 0.0)
                  v196 = 0.0;
                else
                  v196 = v194;
                if (v450 < 0.0)
                {
                  v191 = 4 - v191;
                  v190 = -v190;
                }
                if (v185 < 0.0)
                {
                  v191 = -v191;
                  v190 = -v190;
                }
                v197 = (double)v191 * 3.061617e-17 + (double)v191 * 0.785398163 + v196 * (double)v190;
                v198 = 1.0
                     / v185
                     * (v197
                      * (v197
                       * v197
                       * (*(double *)(v95 + 168)
                        + v197
                        * v197
                        * (*(double *)(v95 + 176)
                         + v197
                         * v197
                         * (*(double *)(v95 + 184)
                          + v197
                          * v197
                          * (*(double *)(v95 + 192)
                           + v197
                           * v197
                           * (*(double *)(v95 + 200)
                            + v197 * v197 * (*(double *)(v95 + 208) + v197 * v197 * *(double *)(v95 + 216)))))))
                       + 1.0));
                goto LABEL_345;
              }
            }
            v198 = 1.0 / v450;
LABEL_345:
            _Q2 = vmulq_n_f64(v449, v198);
            *(float64x2_t *)object = _Q2;
            v238 = *(double *)v95;
            v236 = *(double *)(v95 + 8);
            v128 = _Q2.f64[1];
            v235 = *(double *)(v95 + 16);
            _Q0.f64[0] = *(float64_t *)(v95 + 32);
            v237 = *(double *)(v95 + 40);
            goto LABEL_346;
          }
          v120 = sub_20EB3641C(v95, (float64x2_t *)object, &v449);
        }
        goto LABEL_317;
      }
    }
    else if (v119 > 7)
    {
      goto LABEL_134;
    }
    if (v119 > 3)
    {
      if (v119 > 5)
      {
        if (v119 == 6)
        {
          _Q2 = *(float64x2_t *)(v95 + 208);
          v135 = vaddq_f64(vdivq_f64(v449, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v450, 0)), *(float64x2_t *)(v95 + 192));
          v136 = sqrt(vaddvq_f64(vmulq_f64(v135, v135)));
          _Q0 = vmulq_n_f64(v135, v136* (v136* (*(double *)(v95 + 168) + v136 * (*(double *)(v95 + 176) + *(double *)(v95 + 184) * v136)))+ 1.0);
          v137 = vaddq_f64(_Q2, _Q0);
          *(float64x2_t *)object = v137;
          _Q0.f64[0] = v137.f64[1];
          goto LABEL_334;
        }
        v120 = sub_20EB31FFC(v95, (float64x2_t *)object, &v449);
LABEL_317:
        v95 = v427;
        if (v120)
        {
          v233 = *(_DWORD *)(v427 + 992);
          if (v233 != -1)
          {
            if (v233 <= 7)
              goto LABEL_320;
LABEL_327:
            _Q0.f64[0] = *(float64_t *)(v95 + 32);
            _Q2.f64[0] = *(float64_t *)object;
            v128 = *(double *)&object[8];
            if (v233 <= 0xB)
            {
              v236 = *(double *)(v95 + 8);
              v235 = *(double *)(v95 + 16);
              v237 = *(double *)(v95 + 40);
              v238 = *(double *)v95;
              if (v233 > 8)
              {
                v239 = v238 * *(double *)object + v236 * *(double *)&object[8];
LABEL_347:
                v241 = v235 + v239;
                v248 = v237 + _Q0.f64[0] * v128;
                if (v235 + v239 < 0.0 || v241 > v104)
                {
LABEL_428:
                  v273 = (float64x2_t *)v451;
                  if (v451)
                    goto LABEL_493;
                  goto LABEL_429;
                }
LABEL_381:
                if (v248 < 0.0 || v248 > (double)a6)
                  goto LABEL_428;
                v263 = v452;
                if (v452 < v453)
                {
                  *v452 = v241;
                  v263[1] = v248;
                  v105 = v263 + 2;
                }
                else
                {
                  v264 = (double *)v451;
                  v265 = ((char *)v452 - (_BYTE *)v451) >> 4;
                  v266 = v265 + 1;
                  if ((unint64_t)(v265 + 1) >> 60)
                    sub_20E867F44();
                  v267 = (char *)v453 - (_BYTE *)v451;
                  if (((char *)v453 - (_BYTE *)v451) >> 3 > v266)
                    v266 = v267 >> 3;
                  if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFF0)
                    v268 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v268 = v266;
                  if (v268)
                  {
                    if (v268 >> 60)
                      sub_20E877A38();
                    v269 = (char *)operator new(16 * v268);
                    v270 = (double *)&v269[16 * v265];
                    *v270 = v241;
                    v270[1] = v248;
                    v271 = (float64x2_t *)v270;
                    if (v263 == v264)
                    {
LABEL_401:
                      v105 = v270 + 2;
                      v451 = v271;
                      v452 = v270 + 2;
                      v453 = (double *)&v269[16 * v268];
                      if (v263)
                        goto LABEL_402;
                      goto LABEL_403;
                    }
                  }
                  else
                  {
                    v269 = 0;
                    v270 = (double *)(16 * v265);
                    *v270 = v241;
                    v270[1] = v248;
                    v271 = (float64x2_t *)(16 * v265);
                    if (v263 == v264)
                      goto LABEL_401;
                  }
                  do
                  {
                    _Q0 = *(float64x2_t *)(v263 - 2);
                    v271[-1] = _Q0;
                    --v271;
                    v263 -= 2;
                  }
                  while (v263 != v264);
                  v263 = (double *)v451;
                  v105 = v270 + 2;
                  v451 = v271;
                  v452 = v270 + 2;
                  v453 = (double *)&v269[16 * v268];
                  if (v263)
LABEL_402:
                    operator delete(v263);
LABEL_403:
                  v95 = v427;
                }
                v452 = v105;
                goto LABEL_115;
              }
LABEL_346:
              v239 = v128 * v236 + _Q2.f64[0] * v238;
              goto LABEL_347;
            }
LABEL_330:
            v240 = *(double *)(v95 + 40);
            v241 = *(double *)(v95 + 16) + *(double *)v95 * _Q2.f64[0] + *(double *)(v95 + 8) * v128;
            v242 = _Q0.f64[0] * v128;
LABEL_335:
            v248 = v240 + v242;
            if (v241 < 0.0 || v241 > v104)
              goto LABEL_428;
            goto LABEL_381;
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_610;
          }
          v95 = v427;
          v233 = *(_DWORD *)(v427 + 992);
          if (v233 > 7)
            goto LABEL_327;
LABEL_320:
          if (v233 <= 3)
          {
            if (v233 <= 1)
            {
              if (!v233)
              {
LABEL_609:
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_610:
                abort();
              }
              _Q0 = *(float64x2_t *)object;
LABEL_324:
              v234 = vmulq_f64(*(float64x2_t *)v95, _Q0);
              goto LABEL_366;
            }
            _Q0 = *(float64x2_t *)object;
LABEL_365:
            v234 = vmulq_f64(_Q0, *(float64x2_t *)v95);
LABEL_366:
            v241 = *(double *)(v95 + 16) + vaddvq_f64(v234);
            v248 = vmuld_lane_f64(*(double *)(v95 + 32), _Q0, 1) + *(double *)(v95 + 40);
            if (v241 < 0.0 || v241 > v104)
              goto LABEL_428;
            goto LABEL_381;
          }
          v137.f64[0] = *(float64_t *)object;
          _Q0.f64[0] = *(float64_t *)&object[8];
          if (v233 <= 5)
          {
            v243 = *(double *)v95;
            v244 = *(double *)(v95 + 8);
            v245 = *(double *)(v95 + 16);
            v246 = *(double *)(v95 + 32);
            v247 = *(double *)(v95 + 40);
            if (v233 == 5)
            {
LABEL_376:
              v241 = v245 + v243 * v137.f64[0] + v244 * _Q0.f64[0];
              v248 = _Q0.f64[0] * v246 + v247;
              if (v241 < 0.0 || v241 > v104)
                goto LABEL_428;
              goto LABEL_381;
            }
LABEL_355:
            v241 = v245 + _Q0.f64[0] * v244 + v137.f64[0] * v243;
            v248 = v247 + v246 * _Q0.f64[0];
            if (v241 < 0.0 || v241 > v104)
              goto LABEL_428;
            goto LABEL_381;
          }
LABEL_334:
          v240 = *(double *)(v95 + 40);
          v241 = *(double *)(v95 + 16) + *(double *)v95 * v137.f64[0] + *(double *)(v95 + 8) * _Q0.f64[0];
          v242 = *(double *)(v95 + 32) * _Q0.f64[0];
          goto LABEL_335;
        }
        goto LABEL_115;
      }
      if (v119 != 5)
      {
        _Q0.f64[1] = v449.f64[1];
        _D1 = v449.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v201 = sqrt(_D6);
        v202 = fabs(v450);
        v203 = fabs(v201);
        v204 = v202 / v203;
        if (v202 >= v203)
          v204 = v203 / v202;
        if (v204 <= 0.414213562)
        {
          v206 = 1;
          v207 = 2;
          v205 = v204;
          if (_D6 >= 0.00000001)
            goto LABEL_270;
        }
        else
        {
          v205 = (v203 - v202) / (v202 + v203);
          if (v202 >= v203)
            v205 = -v205;
          v206 = -1;
          v207 = 1;
          if (_D6 >= 0.00000001)
          {
LABEL_270:
            if (v202 < v203)
              v206 = -v206;
            else
              v207 = v204 > 0.414213562;
            v208 = v201 == INFINITY && v202 == INFINITY;
            v209 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v205 * v205), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v205 * v205), (float64x2_t)xmmword_210315370), v205 * v205 * (v205 * v205))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v205 * v205), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v205 * v205), (float64x2_t)xmmword_210315380), v205 * v205 * (v205 * v205))),
                       v205 * v205 * (v205 * v205) * (v205 * v205 * (v205 * v205))));
            v210 = v205 + v205 * vdivq_f64(v209, (float64x2_t)vdupq_laneq_s64((int64x2_t)v209, 1)).f64[0];
            if (v208)
              v210 = 0.785398163;
            if (v201 == 0.0 && v450 == 0.0)
              v212 = 0.0;
            else
              v212 = v210;
            if (v450 < 0.0)
            {
              v207 = 4 - v207;
              v206 = -v206;
            }
            if (v201 < 0.0)
            {
              v207 = -v207;
              v206 = -v206;
            }
            v213 = (double)v207 * 3.061617e-17 + (double)v207 * 0.785398163 + v212 * (double)v206;
            v214 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v415, *(int64x2_t *)(v415 + 16)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)v415, *(int64x2_t *)(v415 + 16)), v213 * v213)), v213 * v213);
            v215 = 1.0 / v201 * (v213 + v213 * (v214.f64[0] + vmuld_lane_f64(v213 * v213 * (v213 * v213), v214, 1)));
            goto LABEL_354;
          }
        }
        v215 = 1.0 / v450;
LABEL_354:
        v137 = vmulq_n_f64(v449, v215);
        v243 = *(double *)v95;
        v244 = *(double *)(v95 + 8);
        _Q0.f64[0] = v137.f64[1];
        v245 = *(double *)(v95 + 16);
        v246 = *(double *)(v95 + 32);
        v247 = *(double *)(v95 + 40);
        goto LABEL_355;
      }
      v121 = v449.f64[0] * v449.f64[0] + v449.f64[1] * v449.f64[1];
      if (v121 >= 0.00000001)
      {
        v250 = sqrt(v121);
        if (v250 <= v450)
        {
          v259 = v250 / v450 * 0.785398163
               - v250 / v450 * (v250 / v450 + -1.0) * (v250 / v450 * 0.0663008339 + 0.244711287);
        }
        else
        {
          if (v250 <= -v450)
          {
            v252 = v250 / v450 * 0.785398163
                 - v250 / v450 * (-1.0 - v250 / v450) * (v250 / v450 * -0.0663008339 + 0.244711287);
            v253 = 3.14159265;
          }
          else
          {
            v251 = fabs(v450 / v250);
            v252 = v450 / v250 * (v251 + -1.0) * (v251 * 0.0663008339 + 0.244711287) + v450 / v250 * -0.785398163;
            v253 = 1.57079633;
          }
          v259 = v252 + v253;
        }
        v260 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v415, *(int64x2_t *)(v415 + 16)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)v415, *(int64x2_t *)(v415 + 16)), v259 * v259)), v259 * v259);
        v122 = (v259 + v259 * (v260.f64[0] + vmuld_lane_f64(v259 * v259 * (v259 * v259), v260, 1))) / v250;
        goto LABEL_375;
      }
      if (v450 != 0.0)
      {
        v122 = 1.0 / v450;
LABEL_375:
        v137.f64[0] = v449.f64[0] * v122;
        _Q0.f64[0] = v449.f64[1] * v122;
        *(double *)object = v449.f64[0] * v122;
        *(double *)&object[8] = v449.f64[1] * v122;
        v243 = *(double *)v95;
        v244 = *(double *)(v95 + 8);
        v245 = *(double *)(v95 + 16);
        v246 = *(double *)(v95 + 32);
        v247 = *(double *)(v95 + 40);
        goto LABEL_376;
      }
    }
    else if (v119 > 1)
    {
      if (v119 != 2)
      {
        _V0.D[1] = v449.f64[1];
        _D1 = v449.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v219 = sqrt(_D6);
        v220 = fabs(v450);
        v221 = fabs(v219);
        v222 = v220 / v221;
        if (v220 >= v221)
          v222 = v221 / v220;
        if (v222 <= 0.414213562)
        {
          v224 = 1;
          v225 = 2;
          v223 = v222;
          if (_D6 >= 0.00000001)
          {
LABEL_295:
            if (v220 < v221)
              v224 = -v224;
            else
              v225 = v222 > 0.414213562;
            v226 = v219 == INFINITY && v220 == INFINITY;
            v227 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v223 * v223), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v223 * v223), (float64x2_t)xmmword_210315370), v223 * v223 * (v223 * v223))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v223 * v223), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v223 * v223), (float64x2_t)xmmword_210315380), v223 * v223 * (v223 * v223))),
                       v223 * v223 * (v223 * v223) * (v223 * v223 * (v223 * v223))));
            v228 = v223 + v223 * vdivq_f64(v227, (float64x2_t)vdupq_laneq_s64((int64x2_t)v227, 1)).f64[0];
            if (v226)
              v228 = 0.785398163;
            if (v219 == 0.0 && v450 == 0.0)
              v230 = 0.0;
            else
              v230 = v228;
            if (v450 < 0.0)
            {
              v225 = 4 - v225;
              v224 = -v224;
            }
            if (v219 < 0.0)
            {
              v225 = -v225;
              v224 = -v224;
            }
            v231 = (double)v225 * 3.061617e-17 + (double)v225 * 0.785398163 + v230 * (double)v224;
            v232 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v415, *(int64x2_t *)(v415 + 16)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)v415, *(int64x2_t *)(v415 + 16)), v231 * v231)), v231 * v231);
            _Q0 = vmulq_n_f64(v449, 1.0 / v219 * (v231 + v231 * (v232.f64[0] + vmuld_lane_f64(v231 * v231 * (v231 * v231), v232, 1))));
            goto LABEL_365;
          }
        }
        else
        {
          v223 = (v221 - v220) / (v220 + v221);
          if (v220 >= v221)
            v223 = -v223;
          v224 = -1;
          v225 = 1;
          if (_D6 >= 0.00000001)
            goto LABEL_295;
        }
        _Q0 = vmulq_n_f64(v449, 1.0 / v450);
        goto LABEL_365;
      }
      if (*(_DWORD *)(v95 + 212))
      {
        if (v450 >= 0.00000001)
        {
          _Q2 = vmulq_n_f64(v449, 1.0 / v450);
          _D0 = vmuld_lane_f64(1.0 / v450, v449, 1);
          __asm { FMLA            D1, D0, V2.D[1] }
          v132 = vmulq_n_f64(_Q2, *(double *)(v95 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v95 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v95 + 184) * *(double *)&_D1)));
          v133 = *(float64x2_t *)(v95 + 192);
          v134 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL));
          _Q2 = vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(v133, v133), _Q2.f64[0]), _Q2, 1);
          _Q0 = vaddq_f64(vaddq_f64(v134, _Q2), v132);
          *(float64_t *)object = _Q0.f64[0];
          goto LABEL_365;
        }
      }
      else if (v450 >= 0.00000001)
      {
        _Q2 = vmulq_n_f64(v449, 1.0 / v450);
        _D0 = vmuld_lane_f64(1.0 / v450, v449, 1);
        __asm { FMLA            D1, D0, V2.D[1] }
        _Q0 = vmulq_n_f64(_Q2, *(double *)(v95 + 168) * _D1 + 1.0 + _D1 * _D1 * (*(double *)(v95 + 176) + *(double *)(v95 + 184) * _D1));
        goto LABEL_365;
      }
    }
    else
    {
      if (!v119)
        goto LABEL_609;
      if (v450 >= 0.00000001)
      {
        _Q0 = vmulq_n_f64(v449, 1.0 / v450);
        *(float64x2_t *)object = _Q0;
        goto LABEL_324;
      }
    }
LABEL_115:
    v99 = (float64x2_t *)((char *)v99 + 24);
  }
  while (v99 != v431);
  v272 = v452;
  v273 = (float64x2_t *)v451;
  v274 = (char *)v452 - (_BYTE *)v451;
  if ((unint64_t)((char *)v452 - (_BYTE *)v451) < 0x20)
    goto LABEL_410;
  if (*(double *)v451 <= *((double *)v451 + 2))
    v275 = (double)a6;
  else
    v275 = 0.0;
  if (v452 >= v453)
  {
    v292 = v274 >> 4;
    v293 = (v274 >> 4) + 1;
    if (v293 >> 60)
      sub_20E867F44();
    v294 = (char *)v453 - (_BYTE *)v451;
    if (((char *)v453 - (_BYTE *)v451) >> 3 > v293)
      v293 = v294 >> 3;
    if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF0)
      v295 = 0xFFFFFFFFFFFFFFFLL;
    else
      v295 = v293;
    if (v295)
    {
      if (v295 >> 60)
        sub_20E877A38();
      v296 = (char *)operator new(16 * v295);
    }
    else
    {
      v296 = 0;
    }
    v297 = (double *)&v296[16 * v292];
    v298 = (double *)&v296[16 * v295];
    *v297 = 0.0;
    v297[1] = v275;
    v276 = v297 + 2;
    if (v272 == (double *)v273)
    {
      v451 = &v296[16 * v292];
      v452 = v297 + 2;
      v453 = v298;
    }
    else
    {
      do
      {
        *((_OWORD *)v297 - 1) = *((_OWORD *)v272 - 1);
        v297 -= 2;
        v272 -= 2;
      }
      while (v272 != (double *)v273);
      v273 = (float64x2_t *)v451;
      v451 = v297;
      v452 = v276;
      v453 = v298;
      if (!v273)
      {
        v452 = v276;
        v277 = (double)a5;
        v278 = v453;
        if (v276 < v453)
          goto LABEL_445;
        goto LABEL_418;
      }
    }
    operator delete(v273);
    v452 = v276;
    v277 = (double)a5;
    v278 = v453;
    if (v276 < v453)
      goto LABEL_445;
LABEL_418:
    v279 = (double *)v451;
    v280 = ((char *)v276 - (_BYTE *)v451) >> 4;
    v281 = v280 + 1;
    if ((unint64_t)(v280 + 1) >> 60)
      sub_20E867F44();
    v282 = (char *)v278 - (_BYTE *)v451;
    if (v282 >> 3 > v281)
      v281 = v282 >> 3;
    if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFF0)
      v283 = 0xFFFFFFFFFFFFFFFLL;
    else
      v283 = v281;
    if (v283)
    {
      if (v283 >> 60)
        sub_20E877A38();
      v284 = (char *)operator new(16 * v283);
      v285 = (double *)&v284[16 * v280];
      v286 = (double *)&v284[16 * v283];
      *v285 = v277;
      v285[1] = v275;
      v287 = v285 + 2;
      if (v276 == v279)
        goto LABEL_453;
    }
    else
    {
      v285 = (double *)(16 * v280);
      v286 = 0;
      *v285 = v277;
      v285[1] = v275;
      v287 = (double *)(16 * v280 + 16);
      if (v276 == v279)
      {
LABEL_453:
        v451 = v285;
        v452 = v287;
        v453 = v286;
        goto LABEL_454;
      }
    }
    do
    {
      *((_OWORD *)v285 - 1) = *((_OWORD *)v276 - 1);
      v285 -= 2;
      v276 -= 2;
    }
    while (v276 != v279);
    v276 = (double *)v451;
    v451 = v285;
    v452 = v287;
    v453 = v286;
    if (!v276)
      goto LABEL_455;
LABEL_454:
    operator delete(v276);
    goto LABEL_455;
  }
  *v452 = 0.0;
  v272[1] = v275;
  v276 = v272 + 2;
  v452 = v272 + 2;
  v277 = (double)a5;
  v278 = v453;
  if (v272 + 2 >= v453)
    goto LABEL_418;
LABEL_445:
  *v276 = v277;
  v276[1] = v275;
  v287 = v276 + 2;
LABEL_455:
  v452 = v287;
  v299 = 0uLL;
  if (v451 != v287)
  {
    v300 = (float64x2_t *)v451;
    do
    {
      v301 = *v300++;
      v299 = vaddq_f64(v299, v301);
    }
    while (v300 != (float64x2_t *)v287);
  }
  v302 = ((char *)v287 - (_BYTE *)v451) >> 4;
  v303 = 126 - 2 * __clz(v302);
  *(float64x2_t *)object = vdivq_f64(v299, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v302), 0));
  v439 = (double *)object;
  if (v287 == v451)
    v304 = 0;
  else
    v304 = v303;
  sub_210207FD8((double *)v451, v287, &v439, v304, 1);
  v289 = v452;
  v273 = (float64x2_t *)v451;
  v305 = (unint64_t)((char *)v452 - (_BYTE *)v451) >> 4;
  v306 = (v305 - 1);
  if ((_DWORD)v305 != 1)
  {
    v307 = (int8x16_t)vsubq_f64(*((float64x2_t *)v451 + 2 % v305), *(float64x2_t *)v451);
    v308 = vmulq_f64(vsubq_f64(*((float64x2_t *)v451 + 1), *(float64x2_t *)v451), (float64x2_t)vextq_s8(v307, v307, 8uLL));
    v309 = vsubq_f64(v308, (float64x2_t)vdupq_laneq_s64((int64x2_t)v308, 1)).f64[0];
    if (v309 == 0.0)
      goto LABEL_493;
    v310 = v306 < 2;
    if ((_DWORD)v305 != 2)
    {
      v311 = v309;
      v312 = 1;
      do
      {
        v313 = v312 + 1;
        v314 = *((float64x2_t *)v451 + v312);
        v315 = vsubq_f64(*((float64x2_t *)v451 + ((int)v312 + 1) % v305), v314);
        v316 = (int8x16_t)vsubq_f64(*((float64x2_t *)v451 + ((int)v312 + 2) % v305), v314);
        v317 = vmulq_f64(v315, (float64x2_t)vextq_s8(v316, v316, 8uLL));
        v318 = vsubq_f64(v317, (float64x2_t)vdupq_laneq_s64((int64x2_t)v317, 1)).f64[0];
        if (v318 == 0.0)
          break;
        if (((*(_QWORD *)&v318 ^ *(_QWORD *)&v311) & 0x8000000000000000) != 0)
          break;
        v310 = v313 >= v306;
        ++v312;
      }
      while (v306 != v313);
    }
    if (!v310)
      goto LABEL_493;
  }
  v319 = ((char *)v452 - (_BYTE *)v451) >> 4;
  if (v452 != v451)
  {
    v320 = 0;
    do
    {
      v321 = v320++;
      *(float64x2_t *)&object[v321 * 16] = vsubq_f64(v273[v320 % v319], v273[v321]);
    }
    while (v319 > v320);
  }
  if (v97[1] != *v97)
  {
    v322 = 0;
    v323 = 0;
    do
    {
      if (!*((_BYTE *)v97 + 60)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 151, (uint64_t)"ordered", 7, (uint64_t)"Not supported with reordered indices.", 37, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v324 = v97[3];
      v325 = v322 >> 6;
      v326 = 1 << v322;
      if ((*(_QWORD *)(v324 + 8 * (v322 >> 6)) & (1 << v322)) != 0)
      {
        v327 = *(float32x2_t *)(a7 + 32 * v322);
        if (v319 != ((char *)v452 - (_BYTE *)v451) >> 4
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Math/src/GeometryUtilities.cpp", 31, (uint64_t)"vertices.size() == affine_segments.size()", 41, (uint64_t)&unk_2102D576B, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (v289 != (double *)v273)
        {
          v328 = 0;
          LODWORD(v329) = 0;
          v330 = vcvtq_f64_f32(v327);
          v331 = 1;
          do
          {
            v332 = 16 * v328;
            v333 = (int8x16_t)vsubq_f64(v330, *(float64x2_t *)((char *)v451 + v332));
            v334 = vmulq_f64(*(float64x2_t *)&object[v332], (float64x2_t)vextq_s8(v333, v333, 8uLL));
            v335 = vsubq_f64(v334, (float64x2_t)vdupq_laneq_s64((int64x2_t)v334, 1)).f64[0];
            if (v335 == 0.0)
              break;
            if (v331 == 1)
            {
              v329 = *(_QWORD *)&v335 >> 63;
            }
            else if (((v329 ^ (v335 < 0.0)) & 1) != 0)
            {
              goto LABEL_474;
            }
            v328 = v331++;
          }
          while (v319 > v328);
        }
        v336 = a8;
        if (!*((_BYTE *)a8 + 60))
        {
          v337 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 69, (uint64_t)"ordered", 7, (uint64_t)"Not supported with reordered indices.", 37, (void (*)(void **))sub_21023DDB0);
          v336 = a8;
          if (v337)
            abort();
        }
        v338 = v336[3];
        v339 = *(_QWORD *)(v338 + 8 * v325);
        if ((v339 & v326) != 0)
        {
          *(_QWORD *)(v338 + 8 * v325) = v339 ^ v326;
          v340 = *((unsigned int *)a8 + 12);
          ++*((_DWORD *)a8 + 13);
          if (v322 >= v340)
            ++*((_DWORD *)a8 + 14);
        }
      }
LABEL_474:
      v97 = a8;
      v322 = ++v323;
    }
    while (v323 < (unint64_t)((a8[1] - *a8) >> 3));
    v273 = (float64x2_t *)v451;
    v289 = v452;
  }
  v288 = v453;
  a4 = v425;
  v290 = a9;
  v291 = *a9;
  if (*a9)
    goto LABEL_494;
LABEL_495:
  *v290 = v273;
  v290[1] = v289;
  v290[2] = v288;
  v341 = *((_DWORD *)v97 + 13);
  sub_20EEA55F4(&v449);
  if (**(int **)(*(_QWORD *)&v449.f64[0] + 56) > 2)
    goto LABEL_585;
  v342 = *(unsigned __int8 *)(*(_QWORD *)&v449.f64[0] + 72);
  v343 = sub_20E8C31DC(*(uint64_t *)&v449.f64[0], "OSLogSurrogateAppender", 1, 0);
  v344 = v343;
  if (!v342 && !v343)
    goto LABEL_585;
  v439 = (double *)&v449;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v441 = std::chrono::system_clock::now().__d_.__rep_;
  v442 = 2;
  v443 = "unknown file";
  v444 = 68;
  v447 = 0;
  v445 = "unknown function";
  v446 = 0;
  v345 = *(_QWORD *)v439;
  v346 = (const char *)(*(_QWORD *)v439 + 16);
  v424 = v342;
  v422 = v346;
  if (*(char *)(*(_QWORD *)v439 + 39) < 0)
  {
    v346 = *(const char **)(v345 + 16);
    v347 = *(_QWORD *)(v345 + 24);
  }
  else
  {
    v347 = *(unsigned __int8 *)(*(_QWORD *)v439 + 39);
  }
  v348 = *a8;
  v428 = a8[1];
  v432 = *((unsigned int *)a8 + 13);
  v349 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v349 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v350 = byte_254A4A4F8;
  else
    v350 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v351 = byte_254A4A4F8[23];
  else
    v351 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v350, v346);
  v352 = &object[8];
  if (v351 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v351 >= 0x17)
  {
    v353 = (v351 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v351 | 7) != 0x17)
      v353 = v351 | 7;
    v354 = v353 + 1;
    v352 = operator new(v353 + 1);
    *(_QWORD *)&object[24] = v354 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v352;
    *(_QWORD *)&object[16] = v351;
    goto LABEL_518;
  }
  object[31] = v351;
  if (v351)
LABEL_518:
    memmove(v352, v350, v351);
  v352[v351] = 0;
  object[32] = 1;
  v355 = &__p;
  if (v347 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v347 >= 0x17)
  {
    v357 = (v347 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v347 | 7) != 0x17)
      v357 = v347 | 7;
    v358 = v357 + 1;
    v355 = operator new(v357 + 1);
    *(_QWORD *)&v460[8] = v358 | 0x8000000000000000;
    __p = v355;
    *(_QWORD *)v460 = v347;
  }
  else
  {
    v460[15] = v347;
    if (!v347)
    {
      LOBYTE(__p) = 0;
      v460[16] = 1;
      v356 = *(NSObject **)object;
      if ((v460[15] & 0x80000000) == 0)
        goto LABEL_523;
LABEL_529:
      operator delete(__p);
      if (object[32])
        goto LABEL_530;
      goto LABEL_532;
    }
  }
  memmove(v355, v346, v347);
  *((_BYTE *)v355 + v347) = 0;
  v460[16] = 1;
  v356 = *(NSObject **)object;
  if ((v460[15] & 0x80000000) != 0)
    goto LABEL_529;
LABEL_523:
  if (object[32])
  {
LABEL_530:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
  }
LABEL_532:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v359 = (v428 - v348) >> 3;
  if (v344 && *(_QWORD *)(v344 + 24))
  {
    v360 = _os_log_pack_size();
    v361 = (std::__shared_weak_count_vtbl *)operator new(v360, (std::align_val_t)8uLL);
    v362 = (std::__shared_weak_count *)operator new();
    v363 = v362;
    v362->__shared_owners_ = 0;
    v364 = (unint64_t *)&v362->__shared_owners_;
    v362->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v362->__shared_weak_owners_ = 0;
    v362[1].__vftable = v361;
    *(_QWORD *)object = v361;
    *(_QWORD *)&object[8] = v361;
    *(_QWORD *)&object[16] = v362;
    do
      v365 = __ldxr(v364);
    while (__stxr(v365 + 1, v364));
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)&object[24] = 0;
    __p = 0;
    do
      v366 = __ldaxr(v364);
    while (__stlxr(v366 - 1, v364));
    if (!v366)
    {
      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
      std::__shared_weak_count::__release_weak(v363);
    }
    v367 = *(_QWORD *)object;
    v368 = _os_log_pack_fill();
    *(_DWORD *)v368 = 67109632;
    *(_DWORD *)(v368 + 4) = v341;
    *(_WORD *)(v368 + 8) = 2048;
    *(_QWORD *)(v368 + 10) = v359;
    *(_WORD *)(v368 + 18) = 2048;
    *(_QWORD *)(v368 + 20) = v359 - v432;
    v369 = (char *)operator new();
    v370 = *(unsigned __int8 *)(v345 + 39);
    v371 = v422;
    if ((v370 & 0x80u) != 0)
    {
      v371 = *(const char **)(v345 + 16);
      v370 = *(_QWORD *)(v345 + 24);
    }
    *(_QWORD *)v369 = v367;
    *(_OWORD *)(v369 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v369 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *((_QWORD *)v369 + 5) = v371;
    *((_QWORD *)v369 + 6) = v370;
    v369[56] = 2;
    v451 = 0;
    v454[0] = v369;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v344 + 24) + 40))(*(_QWORD *)(v344 + 24), v454);
    v372 = v454[0];
    v454[0] = 0;
    a4 = v425;
    v373 = a8;
    if (v372)
    {
      v374 = (std::__shared_weak_count *)*((_QWORD *)v372 + 4);
      if (v374)
      {
        v375 = (unint64_t *)&v374->__shared_owners_;
        do
          v376 = __ldaxr(v375);
        while (__stlxr(v376 - 1, v375));
        if (!v376)
        {
          ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
          std::__shared_weak_count::__release_weak(v374);
        }
      }
      v377 = (std::__shared_weak_count *)*((_QWORD *)v372 + 2);
      if (v377)
      {
        v378 = (unint64_t *)&v377->__shared_owners_;
        do
          v379 = __ldaxr(v378);
        while (__stlxr(v379 - 1, v378));
        if (!v379)
        {
          ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
          std::__shared_weak_count::__release_weak(v377);
        }
      }
      MEMORY[0x212BC6398](v372, 0x10F0C40B62ED6C6);
      v380 = v451;
      v451 = 0;
      if (v380)
      {
        v381 = (std::__shared_weak_count *)*((_QWORD *)v380 + 4);
        if (v381)
        {
          v382 = (unint64_t *)&v381->__shared_owners_;
          do
            v383 = __ldaxr(v382);
          while (__stlxr(v383 - 1, v382));
          if (!v383)
          {
            ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
            std::__shared_weak_count::__release_weak(v381);
          }
        }
        v384 = (std::__shared_weak_count *)*((_QWORD *)v380 + 2);
        if (v384)
        {
          v385 = (unint64_t *)&v384->__shared_owners_;
          do
            v386 = __ldaxr(v385);
          while (__stlxr(v386 - 1, v385));
          if (!v386)
          {
            ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
            std::__shared_weak_count::__release_weak(v384);
          }
        }
        MEMORY[0x212BC6398](v380, 0x10F0C40B62ED6C6);
      }
    }
    v387 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v388 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v389 = __ldaxr(v388);
      while (__stlxr(v389 - 1, v388));
      if (!v389)
      {
        ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
        std::__shared_weak_count::__release_weak(v387);
      }
    }
    v390 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v391 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v392 = __ldaxr(v391);
      while (__stlxr(v392 - 1, v391));
      if (!v392)
      {
        ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
        std::__shared_weak_count::__release_weak(v390);
      }
    }
  }
  else
  {
    os_log_type_enabled(v356, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)object = 67109632;
    *(_DWORD *)&object[4] = v341;
    *(_WORD *)&object[8] = 2048;
    *(_QWORD *)&object[10] = (v428 - v348) >> 3;
    *(_WORD *)&object[18] = 2048;
    *(_QWORD *)&object[20] = v359 - v432;
    v393 = (void *)_os_log_send_and_compose_impl();
    a4 = v425;
    v373 = a8;
    if (v393)
      free(v393);
  }
  if (v424)
  {
    sub_20E8C003C((uint64_t)&v439, "Number of cropped body points: %u ([before: %zu, after: %zu])", v341, (v373[1] - *v373) >> 3, ((v373[1] - *v373) >> 3) - *((unsigned int *)v373 + 13));
    sub_20E863570((uint64_t)&v439);
  }
  sub_20E863570((uint64_t)&v439);
  v394 = v447;
  if (!v447)
    goto LABEL_585;
  v395 = (unint64_t *)&v447->__shared_owners_;
  do
    v396 = __ldaxr(v395);
  while (__stlxr(v396 - 1, v395));
  if (v396)
  {
LABEL_585:
    if (*a4 >= 0x10000)
      goto LABEL_586;
    goto LABEL_587;
  }
  ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
  std::__shared_weak_count::__release_weak(v394);
  if (*a4 < 0x10000)
    goto LABEL_587;
LABEL_586:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_608:
    abort();
  }
LABEL_587:
  if (a4[1] >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_608;
  }
  kdebug_trace();
  v397 = v434;
  if (v434)
  {
    v398 = (uint64_t)v435;
    v399 = v434;
    if (v435 != v434)
    {
      do
        v398 = sub_20EB8188C(v398 - 1664);
      while ((void *)v398 != v397);
      v399 = v434;
    }
    v435 = v397;
    operator delete(v399);
  }
  if (v436)
  {
    v437 = v436;
    operator delete(v436);
  }
}

void sub_20EE9B9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  void *a66;
  uint64_t a67;
  char a69;

  if (LOBYTE(STACK[0x2A8]) && SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a69);
  sub_20EA841C0((uint64_t)&a62);
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EE9BC6C()
{
  uint64_t result;
  _DWORD v1[6];
  int v2;
  char v3;
  char *v4;

  v2 = 0;
  sub_20E89FAA8(v1, "Pool allocated invalid point store");
  if (v2 == -1)
    sub_20E877AB8();
  v4 = &v3;
  result = ((uint64_t (*)(char **, _DWORD *))off_24C9EF148[v2])(&v4, v1);
  if (v2 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24C9EF118[v2])(&v4, v1);
  return result;
}

void sub_20EE9BD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE9BD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE9BD2C(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  double *exception;

  if (*(_BYTE *)(result + 424))
  {
    v1 = result;
    v2 = (uint64_t *)(result + 416);
    result = sub_210215748((double *)(result + 416));
    if ((_DWORD)result)
    {
      if (!*(_BYTE *)(v1 + 424))
        sub_20E866B34();
      kdebug_trace();
      exception = (double *)__cxa_allocate_exception(0x28uLL);
      *(_DWORD *)exception = 0;
      sub_20EE9FCB4((uint64_t)(exception + 1), v2);
      exception[4] = *(double *)(v1 + 112) + *(double *)(v1 + 120);
      __cxa_throw(exception, (struct type_info *)&unk_24C9B3140, (void (*)(void *))sub_20EE89530);
    }
  }
  return result;
}

void sub_20EE9BDD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE9BDEC()
{
  uint64_t result;
  _DWORD v1[6];
  int v2;
  char v3;
  char *v4;

  v2 = 0;
  sub_20E9966B8(v1, "HWFPs have improper raw offsets");
  if (v2 == -1)
    sub_20E877AB8();
  v4 = &v3;
  result = ((uint64_t (*)(char **, _DWORD *))off_24C9EF148[v2])(&v4, v1);
  if (v2 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24C9EF118[v2])(&v4, v1);
  return result;
}

void sub_20EE9BE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE9BE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE9BEAC()
{
  uint64_t result;
  _DWORD v1[6];
  int v2;
  char v3;
  char *v4;

  v2 = 0;
  sub_20E9F5D10(v1, "HWFPs have improper raw header");
  if (v2 == -1)
    sub_20E877AB8();
  v4 = &v3;
  result = ((uint64_t (*)(char **, _DWORD *))off_24C9EF148[v2])(&v4, v1);
  if (v2 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24C9EF118[v2])(&v4, v1);
  return result;
}

void sub_20EE9BF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE9BF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE9BF6C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  const char *v5;
  const char *v6;
  uint64_t result;
  _DWORD v8[6];
  int v9;
  const char *v10;
  _QWORD **v11;
  const char *v12;
  _DWORD *v13;
  const char *v14;
  const char *v15;
  _QWORD *v16;

  v9 = 0;
  sub_20E9EBBAC(v8, "HWFPs have NULL keypoints: ");
  if (*a2)
    v5 = "true";
  else
    v5 = "false";
  v10 = v5;
  v11 = (_QWORD **)v8;
  v12 = (const char *)&v10;
  v13 = v8;
  v14 = (const char *)&v10;
  v15 = (const char *)&v10;
  if (v9 == -1)
    sub_20E877AB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C9EF840[v9])(&v16, v8);
  v11 = (_QWORD **)v8;
  v12 = " or NULL descriptors: ";
  v13 = v8;
  v14 = " or NULL descriptors: ";
  v15 = " or NULL descriptors: ";
  if (v9 == -1)
    sub_20E877AB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C9EF858[v9])(&v16, v8);
  if (*a3)
    v6 = "true";
  else
    v6 = "false";
  v10 = v6;
  v11 = (_QWORD **)v8;
  v12 = (const char *)&v10;
  v13 = v8;
  v14 = (const char *)&v10;
  v15 = (const char *)&v10;
  if (v9 == -1)
    sub_20E877AB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C9EF840[v9])(&v16, v8);
  if (v9 == -1)
    sub_20E877AB8();
  v11 = &v16;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9EF148[v9])(&v11, v8);
  if (v9 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9EF118[v9])(&v11, v8);
  return result;
}

void sub_20EE9C118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE9C12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE9C140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE9C154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE9C168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE9C17C(uint64_t a1, uint64_t a2, _QWORD *a3, int *a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t *a8, void **a9)
{
  double *v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  unsigned int v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  size_t v31;
  const char *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  const char *v35;
  size_t v36;
  _BYTE *v37;
  const char *v38;
  double *v39;
  int v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  void *p_p;
  NSObject *v46;
  unint64_t v47;
  uint64_t v48;
  const char *v49;
  double *v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  unsigned int v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  float64x2_t *v98;
  float64x2_t *v99;
  uint64_t v100;
  unint64_t v101;
  double v104;
  double *v105;
  double v106;
  int v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v115;
  const char *v116;
  size_t v117;
  unsigned __int8 v118;
  unsigned int v119;
  int v120;
  double v121;
  double v122;
  double v124;
  double v127;
  double v128;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  unsigned __int8 v138;
  const char *v139;
  size_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  NSObject *v145;
  uint64_t v146;
  uint64_t v147;
  size_t v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  const char *v158;
  void *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  void *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  int v190;
  int v191;
  BOOL v192;
  float64x2_t v193;
  double v194;
  double v196;
  double v197;
  double v198;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  int v206;
  int v207;
  BOOL v208;
  float64x2_t v209;
  double v210;
  double v212;
  double v213;
  float64x2_t v214;
  double v215;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  int v224;
  int v225;
  BOOL v226;
  float64x2_t v227;
  double v228;
  double v230;
  double v231;
  float64x2_t v232;
  unsigned int v233;
  float64x2_t v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v250;
  double v251;
  double v252;
  double v253;
  double v259;
  float64x2_t v260;
  double *v263;
  double *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char *v269;
  double *v270;
  float64x2_t *v271;
  double *v272;
  float64x2_t *v273;
  uint64_t v274;
  double v275;
  double *v276;
  double v277;
  double *v278;
  double *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  double *v285;
  double *v286;
  double *v287;
  double *v288;
  double *v289;
  void **v290;
  void *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  double *v297;
  double *v298;
  float64x2_t v299;
  float64x2_t *v300;
  float64x2_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  int8x16_t v307;
  float64x2_t v308;
  double v309;
  BOOL v310;
  double v311;
  uint64_t v312;
  unint64_t v313;
  float64x2_t v314;
  float64x2_t v315;
  int8x16_t v316;
  float64x2_t v317;
  double v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unsigned int v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  float32x2_t v327;
  unint64_t v328;
  uint64_t v329;
  float64x2_t v330;
  unsigned int v331;
  uint64_t v332;
  int8x16_t v333;
  float64x2_t v334;
  double v335;
  uint64_t *v336;
  _BOOL4 v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  int v341;
  int v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  const char *v346;
  size_t v347;
  uint64_t v348;
  unsigned __int8 v349;
  const char *v350;
  size_t v351;
  _BYTE *v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  NSObject *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  size_t v360;
  std::__shared_weak_count_vtbl *v361;
  std::__shared_weak_count *v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  uint64_t v370;
  const char *v371;
  void *v372;
  uint64_t *v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  void *v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  void *v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  void *v397;
  uint64_t v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  int v402;
  unint64_t v403;
  double v404;
  double v405;
  uint64_t v406;
  double v407;
  unsigned __int16 v408;
  int v409;
  double v410;
  double v411;
  double v414;
  uint64_t v415;
  void *__dst;
  int8x16_t v417;
  const char *v418;
  int8x16_t v419;
  int8x16_t v420;
  int v421;
  const char *v422;
  int v424;
  int *v425;
  int8x16_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v430;
  float64x2_t *v431;
  uint64_t v432;
  char v433[8];
  void *v434;
  void *v435;
  void *v436;
  void *v437;
  char *v438;
  double *v439;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v441;
  int v442;
  const char *v443;
  int v444;
  const char *v445;
  uint64_t v446;
  std::__shared_weak_count *v447;
  uint64_t v448;
  float64x2_t v449;
  double v450;
  void *v451;
  double *v452;
  double *v453;
  void *v454[2];
  char v455;
  char v456;
  uint64_t v457;
  _BYTE object[40];
  void *__p;
  _BYTE v460[20];
  __int16 v461;
  double v462;
  __int16 v463;
  uint64_t v464;
  __int16 v465;
  double v466;
  __int16 v467;
  double v468;
  __int16 v469;
  uint64_t v470;
  __int16 v471;
  double v472;
  __int16 v473;
  double v474;
  uint64_t v475;

  v11 = (double *)a2;
  v475 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD **)(a2 + 32);
  if ((*(_BYTE *)(v13 + 24) & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include_private/VIO/FeatureDetectionNodeGroup/FeatureFilterTransforms.hpp", 44, (uint64_t)"transform_map.size() % 2 == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a4;
  v16 = *v14 + 24 * v15;
  v437 = 0;
  v438 = 0;
  v436 = 0;
  v18 = *(_BYTE **)v16;
  v17 = *(_BYTE **)(v16 + 8);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (0x8E38E38E38E38E39 * (v19 >> 3) >= 0x38E38E38E38E38FLL)
      sub_20EB849AC();
    v20 = (char *)operator new(v19);
    v21 = &v20[8 * (v19 >> 3)];
    v436 = v20;
    v438 = v21;
    memcpy(v20, v18, v19);
    v437 = v21;
  }
  sub_20EA84218(*a3 + 32 * v15, (uint64_t *)&v436, (uint64_t)v433);
  v22 = a4[1];
  v23 = (char *)v434;
  v24 = sub_20EB8DE00((_QWORD *)v13, a4);
  if (!v24)
    sub_20E89FD20("unordered_map::at: key not found");
  __dst = (void *)v24[5];
  v426 = *(int8x16_t *)(v24 + 3);
  v414 = *((double *)v24 + 9);
  v411 = *((double *)v24 + 13);
  v419 = *(int8x16_t *)(v24 + 11);
  v420 = *(int8x16_t *)(v24 + 7);
  v25 = sub_20EB8DE00((_QWORD *)v13, a4);
  if (!v25)
    sub_20E89FD20("unordered_map::at: key not found");
  v430 = a1;
  v410 = *((double *)v25 + 17);
  v417 = *(int8x16_t *)(v25 + 15);
  sub_20EEA55F4(&v449);
  v425 = a4;
  if (**(int **)(*(_QWORD *)&v449.f64[0] + 56) > 3)
    goto LABEL_106;
  v26 = *(unsigned __int8 *)(*(_QWORD *)&v449.f64[0] + 72);
  v27 = sub_20E8C31DC(*(uint64_t *)&v449.f64[0], "OSLogSurrogateAppender", 1, 0);
  v28 = v27;
  if (!v26 && !v27)
    goto LABEL_106;
  v439 = (double *)&v449;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v441 = std::chrono::system_clock::now().__d_.__rep_;
  v442 = 3;
  v443 = "unknown file";
  v444 = 59;
  v447 = 0;
  v445 = "unknown function";
  v446 = 0;
  if (*a4 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_615;
  }
  v29 = a4[1];
  if (v29 < 0x10000)
    goto LABEL_16;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_615:
    abort();
  }
  LOWORD(v29) = *((_WORD *)a4 + 2);
LABEL_16:
  v408 = v29;
  v402 = *a4;
  v30 = *(_QWORD *)v439;
  v401 = *(_QWORD *)v439;
  if (*(char *)(*(_QWORD *)v439 + 39) < 0)
  {
    v32 = *(const char **)(v30 + 16);
    v31 = *(_QWORD *)(v30 + 24);
    v400 = *(_QWORD *)v439 + 16;
    v403 = v28;
    v34 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v34 & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v31 = *(unsigned __int8 *)(*(_QWORD *)v439 + 39);
    v32 = (const char *)(*(_QWORD *)v439 + 16);
    v400 = (uint64_t)v32;
    v403 = v28;
    v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v33 & 1) != 0)
      goto LABEL_20;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_20:
  if (byte_254A4A4F8[23] >= 0)
    v35 = byte_254A4A4F8;
  else
    v35 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v36 = byte_254A4A4F8[23];
  else
    v36 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v35, v32);
  v37 = &object[8];
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v36 >= 0x17)
  {
    v406 = v13;
    v38 = v32;
    v39 = v11;
    v40 = v26;
    v41 = v23;
    v42 = v22;
    v43 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v43 = v36 | 7;
    v44 = v43 + 1;
    v37 = operator new(v43 + 1);
    *(_QWORD *)&object[24] = v44 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v37;
    *(_QWORD *)&object[16] = v36;
    v22 = v42;
    v23 = v41;
    v26 = v40;
    v11 = v39;
    v32 = v38;
    v13 = v406;
    goto LABEL_33;
  }
  object[31] = v36;
  if (v36)
LABEL_33:
    memmove(v37, v35, v36);
  v37[v36] = 0;
  object[32] = 1;
  p_p = &__p;
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  a4 = v425;
  if (v31 >= 0x17)
  {
    v48 = v13;
    v49 = v32;
    v50 = v11;
    v51 = v26;
    v52 = v23;
    v53 = v22;
    v54 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v54 = v31 | 7;
    v55 = v54 + 1;
    p_p = operator new(v54 + 1);
    *(_QWORD *)&v460[8] = v55 | 0x8000000000000000;
    __p = p_p;
    *(_QWORD *)v460 = v31;
    v22 = v53;
    v23 = v52;
    v26 = v51;
    v11 = v50;
    v32 = v49;
    v13 = v48;
    a4 = v425;
  }
  else
  {
    v460[15] = v31;
    if (!v31)
    {
      LOBYTE(__p) = 0;
      v460[16] = 1;
      v46 = *(NSObject **)object;
      if ((v460[15] & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_44;
    }
  }
  memmove(p_p, v32, v31);
  *((_BYTE *)p_p + v31) = 0;
  v460[16] = 1;
  v46 = *(NSObject **)object;
  if ((v460[15] & 0x80000000) == 0)
  {
LABEL_38:
    v47 = v403;
    if (!object[32])
      goto LABEL_47;
    goto LABEL_45;
  }
LABEL_44:
  operator delete(__p);
  v47 = v403;
  if (!object[32])
    goto LABEL_47;
LABEL_45:
  if ((object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
LABEL_47:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  *(_QWORD *)&v405 = vextq_s8(v419, v419, 8uLL).u64[0];
  *(_QWORD *)&v407 = vextq_s8(v426, v426, 8uLL).u64[0];
  *(_QWORD *)&v404 = vextq_s8(v417, v417, 8uLL).u64[0];
  v409 = v408 | ((unsigned __int16)v402 << 16);
  if (v47 && *(_QWORD *)(v47 + 24))
  {
    v56 = _os_log_pack_size();
    v57 = (std::__shared_weak_count_vtbl *)operator new(v56, (std::align_val_t)8uLL);
    v58 = (std::__shared_weak_count *)operator new();
    v59 = v58;
    v58->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    v58->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v58->__shared_weak_owners_ = 0;
    v58[1].__vftable = v57;
    *(_QWORD *)object = v57;
    *(_QWORD *)&object[8] = v57;
    *(_QWORD *)&object[16] = v58;
    do
      v61 = __ldxr(p_shared_owners);
    while (__stxr(v61 + 1, p_shared_owners));
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)&object[24] = 0;
    __p = 0;
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v59);
    }
    v63 = _os_log_pack_fill();
    v64 = *(_QWORD *)v11;
    *(_DWORD *)v63 = 67112448;
    *(_DWORD *)(v63 + 4) = v409;
    *(_WORD *)(v63 + 8) = 2048;
    *(_QWORD *)(v63 + 10) = v64;
    *(_WORD *)(v63 + 18) = 2048;
    *(_QWORD *)(v63 + 20) = v426.i64[0];
    *(_WORD *)(v63 + 28) = 2048;
    *(double *)(v63 + 30) = v407;
    *(_WORD *)(v63 + 38) = 2048;
    *(_QWORD *)(v63 + 40) = __dst;
    *(_WORD *)(v63 + 48) = 2048;
    *(_QWORD *)(v63 + 50) = v420.i64[0];
    *(_WORD *)(v63 + 58) = 2048;
    *(_QWORD *)(v63 + 60) = v420.i64[1];
    *(_WORD *)(v63 + 68) = 2048;
    *(double *)(v63 + 70) = v414;
    *(_WORD *)(v63 + 78) = 2048;
    *(_QWORD *)(v63 + 80) = v419.i64[0];
    *(_WORD *)(v63 + 88) = 2048;
    *(double *)(v63 + 90) = v405;
    *(_WORD *)(v63 + 98) = 2048;
    *(double *)(v63 + 100) = v411;
    *(_WORD *)(v63 + 108) = 2048;
    *(_QWORD *)(v63 + 110) = v417.i64[0];
    *(_WORD *)(v63 + 118) = 2048;
    *(double *)(v63 + 120) = v404;
    *(_WORD *)(v63 + 128) = 2048;
    *(double *)(v63 + 130) = v410;
    v65 = (char *)operator new();
    v66 = *(unsigned __int8 *)(v401 + 39);
    v67 = v400;
    if ((v66 & 0x80u) != 0)
    {
      v67 = *(_QWORD *)(v401 + 16);
      v66 = *(_QWORD *)(v401 + 24);
    }
    *(_OWORD *)v65 = *(_OWORD *)object;
    *((_QWORD *)v65 + 2) = *(_QWORD *)&object[16];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v65 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *((_QWORD *)v65 + 5) = v67;
    *((_QWORD *)v65 + 6) = v66;
    v65[56] = 1;
    v451 = 0;
    v454[0] = v65;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v403 + 24) + 40))(*(_QWORD *)(v403 + 24), v454);
    v68 = v454[0];
    v454[0] = 0;
    if (v68)
    {
      v69 = (std::__shared_weak_count *)*((_QWORD *)v68 + 4);
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = (std::__shared_weak_count *)*((_QWORD *)v68 + 2);
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      MEMORY[0x212BC6398](v68, 0x10F0C40B62ED6C6);
      v75 = v451;
      v451 = 0;
      if (v75)
      {
        v76 = (std::__shared_weak_count *)*((_QWORD *)v75 + 4);
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        v79 = (std::__shared_weak_count *)*((_QWORD *)v75 + 2);
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        MEMORY[0x212BC6398](v75, 0x10F0C40B62ED6C6);
      }
    }
    v82 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v83 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v86 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
  else
  {
    os_log_type_enabled(v46, OS_LOG_TYPE_INFO);
    v88 = *(_QWORD *)v11;
    *(_DWORD *)object = 67112448;
    *(_DWORD *)&object[4] = v409;
    *(_WORD *)&object[8] = 2048;
    *(_QWORD *)&object[10] = v88;
    *(_WORD *)&object[18] = 2048;
    *(_QWORD *)&object[20] = v426.i64[0];
    *(_WORD *)&object[28] = 2048;
    *(double *)&object[30] = v407;
    *(_WORD *)&object[38] = 2048;
    __p = __dst;
    *(_WORD *)v460 = 2048;
    *(_QWORD *)&v460[2] = v420.i64[0];
    *(_WORD *)&v460[10] = 2048;
    *(_QWORD *)&v460[12] = v420.i64[1];
    v461 = 2048;
    v462 = v414;
    v463 = 2048;
    v464 = v419.i64[0];
    v465 = 2048;
    v466 = v405;
    v467 = 2048;
    v468 = v411;
    v469 = 2048;
    v470 = v417.i64[0];
    v471 = 2048;
    v472 = v404;
    v473 = 2048;
    v474 = v410;
    v89 = (void *)_os_log_send_and_compose_impl();
    if (v89)
      free(v89);
  }
  if (!v26)
    goto LABEL_101;
  if (*a4 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_632;
  }
  v90 = a4[1];
  if (v90 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      LOWORD(v90) = *((_WORD *)a4 + 2);
      goto LABEL_100;
    }
LABEL_632:
    abort();
  }
LABEL_100:
  sub_20E8C003C((uint64_t)&v439, "[FeatureFilterTransform] T_Gcrop_to_C -- Camera %u @ Timestamp %f \nRotation {%f,%f,%f,%f,%f,%f,%f,%f,%f} \nTranslation: {%f,%f,%f}", (unsigned __int16)v90 | ((unsigned __int16)*a4 << 16), *v11, *(double *)v426.i64, v407, *(double *)&__dst, *(double *)v420.i64, *(double *)vextq_s8(v420, v420, 8uLL).i64, v414, *(double *)v419.i64, v405, v411, *(double *)v417.i64, v404, v410);
  sub_20E863570((uint64_t)&v439);
LABEL_101:
  sub_20E863570((uint64_t)&v439);
  v91 = v447;
  if (v447)
  {
    v92 = (unint64_t *)&v447->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
LABEL_106:
  v94 = &v23[1664 * v22];
  if (v94[1536])
    v95 = (uint64_t)(v94 + 96);
  else
    v95 = 0;
  v96 = sub_20EB8DE00((_QWORD *)v13, a4);
  v97 = a8;
  if (!v96)
    sub_20E89FD20("unordered_map::at: key not found");
  v99 = *(float64x2_t **)(v430 + 56);
  v98 = *(float64x2_t **)(v430 + 64);
  v452 = 0;
  v451 = 0;
  v453 = 0;
  v431 = v98;
  v100 = (char *)v98 - (char *)v99;
  if (!v100)
  {
    v273 = 0;
LABEL_410:
    if (v273)
    {
LABEL_493:
      v452 = (double *)v273;
      operator delete(v273);
      v288 = 0;
      v289 = 0;
      v273 = 0;
      v290 = a9;
      v291 = *a9;
      if (!*a9)
        goto LABEL_495;
    }
    else
    {
LABEL_429:
      v288 = 0;
      v289 = 0;
      v290 = a9;
      v291 = *a9;
      if (!*a9)
        goto LABEL_495;
    }
LABEL_494:
    v290[1] = v291;
    operator delete(v291);
    *v290 = 0;
    v290[1] = 0;
    v290[2] = 0;
    goto LABEL_495;
  }
  v101 = 0xAAAAAAAAAAAAAAABLL * (v100 >> 3);
  if (v101 >> 60)
    sub_20E867F44();
  v415 = v95 + 168;
  v451 = operator new(0xAAAAAAAAAAAAAAB0 * (v100 >> 3));
  v452 = (double *)v451;
  v453 = (double *)((char *)v451 + 16 * v101);
  v104 = (double)a5;
  v427 = v95;
  do
  {
    *(_QWORD *)&_Q2.f64[0] = v96[9];
    v106 = v99[1].f64[0];
    _Q7 = *v99;
    __asm { FMLA            D0, D2, V7.D[1] }
    _Q0.f64[0] = _Q0.f64[0] + *((double *)v96 + 13) * v106;
    *(_QWORD *)&_Q2.f64[0] = v96[17];
    _Q0 = vaddq_f64(_Q0, _Q2);
    v449 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v96 + 3), v99->f64[0]), *(float64x2_t *)(v96 + 7), *v99, 1), *(float64x2_t *)(v96 + 11), v106), *(float64x2_t *)(v96 + 15));
    v450 = _Q0.f64[0];
    if (_Q0.f64[0] < 0.0)
    {
      sub_20EEA56E8(&v448);
      if (**(int **)(v448 + 56) > 2)
        goto LABEL_115;
      v111 = *(unsigned __int8 *)(v448 + 72);
      v112 = sub_20E8C31DC(v448, "OSLogSurrogateAppender", 1, 0);
      v113 = v112;
      if (!v111 && v112 == 0)
        goto LABEL_115;
      v439 = (double *)&v448;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v441 = std::chrono::system_clock::now().__d_.__rep_;
      v442 = 2;
      v443 = "unknown file";
      v444 = 43;
      v445 = "unknown function";
      v446 = 0;
      v447 = 0;
      v115 = *(_QWORD *)v439;
      v116 = (const char *)(*(_QWORD *)v439 + 16);
      v418 = v116;
      if (*(char *)(*(_QWORD *)v439 + 39) < 0)
      {
        v116 = *(const char **)(v115 + 16);
        v117 = *(_QWORD *)(v115 + 24);
        v138 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v138 & 1) != 0)
          goto LABEL_158;
      }
      else
      {
        v117 = *(unsigned __int8 *)(*(_QWORD *)v439 + 39);
        v118 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v118 & 1) != 0)
          goto LABEL_158;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v454);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v454);
        if (v456 && v455 < 0)
          operator delete(v454[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_158:
      if (byte_254A4A4F8[23] >= 0)
        v139 = byte_254A4A4F8;
      else
        v139 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v140 = byte_254A4A4F8[23];
      else
        v140 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v139, v116);
      if (v140 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v421 = v111;
      if (v140 >= 0x17)
      {
        v142 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v140 | 7) != 0x17)
          v142 = v140 | 7;
        v143 = v142 + 1;
        v141 = operator new(v142 + 1);
        *(_QWORD *)&object[24] = v143 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v141;
        *(_QWORD *)&object[16] = v140;
      }
      else
      {
        object[31] = v140;
        v141 = &object[8];
        if (!v140)
        {
LABEL_172:
          v141[v140] = 0;
          object[32] = 1;
          if (v117 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v117 >= 0x17)
          {
            v146 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v117 | 7) != 0x17)
              v146 = v117 | 7;
            v147 = v146 + 1;
            v144 = operator new(v146 + 1);
            *(_QWORD *)&v460[8] = v147 | 0x8000000000000000;
            __p = v144;
            *(_QWORD *)v460 = v117;
          }
          else
          {
            v460[15] = v117;
            v144 = &__p;
            if (!v117)
            {
              LOBYTE(__p) = 0;
              v460[16] = 1;
              v145 = *(NSObject **)object;
              if ((v460[15] & 0x80000000) == 0)
                goto LABEL_176;
              goto LABEL_182;
            }
          }
          memmove(v144, v116, v117);
          *((_BYTE *)v144 + v117) = 0;
          v460[16] = 1;
          v145 = *(NSObject **)object;
          if ((v460[15] & 0x80000000) == 0)
          {
LABEL_176:
            a4 = v425;
            if (!object[32])
              goto LABEL_185;
            goto LABEL_183;
          }
LABEL_182:
          operator delete(__p);
          a4 = v425;
          if (!object[32])
          {
LABEL_185:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v113 && *(_QWORD *)(v113 + 24))
            {
              v148 = _os_log_pack_size();
              v149 = (std::__shared_weak_count_vtbl *)operator new(v148, (std::align_val_t)8uLL);
              v150 = (std::__shared_weak_count *)operator new();
              v151 = v150;
              v150->__shared_owners_ = 0;
              v152 = (unint64_t *)&v150->__shared_owners_;
              v150->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v150->__shared_weak_owners_ = 0;
              v150[1].__vftable = v149;
              *(_QWORD *)object = v149;
              *(_QWORD *)&object[8] = v149;
              *(_QWORD *)&object[16] = v150;
              do
                v153 = __ldxr(v152);
              while (__stxr(v153 + 1, v152));
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              __p = 0;
              do
                v154 = __ldaxr(v152);
              while (__stlxr(v154 - 1, v152));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v151);
              }
              v155 = *(_QWORD *)object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v156 = (char *)operator new();
              v157 = *(unsigned __int8 *)(v115 + 39);
              v158 = v418;
              if ((v157 & 0x80u) != 0)
              {
                v158 = *(const char **)(v115 + 16);
                v157 = *(_QWORD *)(v115 + 24);
              }
              *(_QWORD *)v156 = v155;
              *(_OWORD *)(v156 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v156 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *((_QWORD *)v156 + 5) = v158;
              *((_QWORD *)v156 + 6) = v157;
              v156[56] = 2;
              v457 = 0;
              v454[0] = v156;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v113 + 24) + 40))(*(_QWORD *)(v113 + 24), v454);
              v95 = v427;
              v159 = v454[0];
              v454[0] = 0;
              v97 = a8;
              if (v159)
              {
                v160 = (std::__shared_weak_count *)*((_QWORD *)v159 + 4);
                if (v160)
                {
                  v161 = (unint64_t *)&v160->__shared_owners_;
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (!v162)
                  {
                    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                    std::__shared_weak_count::__release_weak(v160);
                  }
                }
                v163 = (std::__shared_weak_count *)*((_QWORD *)v159 + 2);
                if (v163)
                {
                  v164 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v165 = __ldaxr(v164);
                  while (__stlxr(v165 - 1, v164));
                  if (!v165)
                  {
                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                    std::__shared_weak_count::__release_weak(v163);
                  }
                }
                MEMORY[0x212BC6398](v159, 0x10F0C40B62ED6C6);
                v166 = v457;
                v457 = 0;
                if (v166)
                {
                  v167 = *(std::__shared_weak_count **)(v166 + 32);
                  if (v167)
                  {
                    v168 = (unint64_t *)&v167->__shared_owners_;
                    do
                      v169 = __ldaxr(v168);
                    while (__stlxr(v169 - 1, v168));
                    if (!v169)
                    {
                      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                      std::__shared_weak_count::__release_weak(v167);
                    }
                  }
                  v170 = *(std::__shared_weak_count **)(v166 + 16);
                  if (v170)
                  {
                    v171 = (unint64_t *)&v170->__shared_owners_;
                    do
                      v172 = __ldaxr(v171);
                    while (__stlxr(v172 - 1, v171));
                    if (!v172)
                    {
                      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                      std::__shared_weak_count::__release_weak(v170);
                    }
                  }
                  MEMORY[0x212BC6398](v166, 0x10F0C40B62ED6C6);
                }
              }
              v173 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v174 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v175 = __ldaxr(v174);
                while (__stlxr(v175 - 1, v174));
                if (!v175)
                {
                  ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                  std::__shared_weak_count::__release_weak(v173);
                }
              }
              v176 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v177 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v178 = __ldaxr(v177);
                while (__stlxr(v178 - 1, v177));
                if (!v178)
                {
                  ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                  std::__shared_weak_count::__release_weak(v176);
                }
              }
            }
            else
            {
              os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG);
              *(_WORD *)object = 0;
              v179 = (void *)_os_log_send_and_compose_impl();
              v97 = a8;
              v95 = v427;
              if (v179)
                free(v179);
            }
            if (v421)
            {
              sub_20E8C003C((uint64_t)&v439, "Body crop boundary vertex is behind the camera.");
              sub_20E863570((uint64_t)&v439);
            }
            sub_20E863570((uint64_t)&v439);
            v180 = v447;
            if (v447)
            {
              v181 = (unint64_t *)&v447->__shared_owners_;
              do
                v182 = __ldaxr(v181);
              while (__stlxr(v182 - 1, v181));
              if (!v182)
              {
                ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                std::__shared_weak_count::__release_weak(v180);
              }
            }
            goto LABEL_115;
          }
LABEL_183:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_185;
        }
      }
      memmove(v141, v139, v140);
      goto LABEL_172;
    }
    v119 = *(_DWORD *)(v95 + 992);
    if (v119 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_610;
      }
      v95 = v427;
      v119 = *(_DWORD *)(v427 + 992);
      if (v119 > 7)
      {
LABEL_134:
        if (v119 > 0xB)
        {
          if (v119 <= 0xD)
          {
            if (v119 == 13 && v450 >= 0.00000001)
            {
              _Q0 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v450, 0);
              _Q1 = vdivq_f64(v449, _Q0);
              _Q0.f64[0] = *(float64_t *)(v95 + 32);
              v124 = (*(double *)v95 + _Q0.f64[0]) * 0.5;
              _D4 = _Q1.f64[1];
              __asm { FMLA            D3, D4, V1.D[1] }
              v127 = v124 * (_D3 * v124);
              _Q2 = vdivq_f64(_Q1, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v127* (*(double *)(v95 + 168)+ v124 * *(double *)(v95 + 224)+ v127* (*(double *)(v95 + 176)+ v124 * *(double *)(v95 + 232)+ v127* (*(double *)(v95 + 184)+ v124 * *(double *)(v95 + 240)+ v127* (*(double *)(v95 + 192)+ v124 * *(double *)(v95 + 248)+ v127* (*(double *)(v95 + 200)+ v124 * *(double *)(v95 + 256)+ v127
                                          * (*(double *)(v95 + 208)
                                           + v124 * *(double *)(v95 + 264)
                                           + v127
                                           * (*(double *)(v95 + 216) + *(double *)(v95 + 272) * v124 + v127 * 0.0)))))))
                                     / 100.0
                                     + 1.0),
                                     0));
              *(float64x2_t *)object = _Q2;
              v128 = _Q2.f64[1];
              goto LABEL_330;
            }
            goto LABEL_115;
          }
          if (v119 == 14)
            v120 = sub_20EB247C0((float64x2_t *)object, (uint64_t)&v449, (double *)v415, (*(double *)v95 + *(double *)(v95 + 32)) * 0.5);
          else
            v120 = sub_20EB3E39C(v95, (float64x2_t *)object, &v449);
        }
        else if (v119 > 9)
        {
          if (v119 == 10)
            v120 = sub_20EB24288((float64x2_t *)object, (uint64_t)&v449, (double *)v415, (*(double *)v95 + *(double *)(v95 + 32)) * 0.5);
          else
            v120 = sub_20EB3A2E4(v95, (float64x2_t *)object, &v449);
        }
        else
        {
          if (v119 != 9)
          {
            _Q0.f64[1] = v449.f64[1];
            _D1 = v449.f64[1];
            __asm { FMLA            D6, D1, V0.D[1] }
            v185 = sqrt(_D6);
            v186 = fabs(v450);
            v187 = fabs(v185);
            v188 = v186 / v187;
            if (v186 >= v187)
              v188 = v187 / v186;
            if (v188 <= 0.414213562)
            {
              v190 = 1;
              v191 = 2;
              v189 = v188;
              if (_D6 >= 0.00000001)
                goto LABEL_245;
            }
            else
            {
              v189 = (v187 - v186) / (v186 + v187);
              if (v186 >= v187)
                v189 = -v189;
              v190 = -1;
              v191 = 1;
              if (_D6 >= 0.00000001)
              {
LABEL_245:
                if (v186 < v187)
                  v190 = -v190;
                else
                  v191 = v188 > 0.414213562;
                v192 = v185 == INFINITY && v186 == INFINITY;
                v193 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v189 * v189), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v189 * v189), (float64x2_t)xmmword_210315370), v189 * v189 * (v189 * v189))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v189 * v189), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v189 * v189), (float64x2_t)xmmword_210315380), v189 * v189 * (v189 * v189))),
                           v189 * v189 * (v189 * v189) * (v189 * v189 * (v189 * v189))));
                v194 = v189 + v189 * vdivq_f64(v193, (float64x2_t)vdupq_laneq_s64((int64x2_t)v193, 1)).f64[0];
                if (v192)
                  v194 = 0.785398163;
                if (v185 == 0.0 && v450 == 0.0)
                  v196 = 0.0;
                else
                  v196 = v194;
                if (v450 < 0.0)
                {
                  v191 = 4 - v191;
                  v190 = -v190;
                }
                if (v185 < 0.0)
                {
                  v191 = -v191;
                  v190 = -v190;
                }
                v197 = (double)v191 * 3.061617e-17 + (double)v191 * 0.785398163 + v196 * (double)v190;
                v198 = 1.0
                     / v185
                     * (v197
                      * (v197
                       * v197
                       * (*(double *)(v95 + 168)
                        + v197
                        * v197
                        * (*(double *)(v95 + 176)
                         + v197
                         * v197
                         * (*(double *)(v95 + 184)
                          + v197
                          * v197
                          * (*(double *)(v95 + 192)
                           + v197
                           * v197
                           * (*(double *)(v95 + 200)
                            + v197 * v197 * (*(double *)(v95 + 208) + v197 * v197 * *(double *)(v95 + 216)))))))
                       + 1.0));
                goto LABEL_345;
              }
            }
            v198 = 1.0 / v450;
LABEL_345:
            _Q2 = vmulq_n_f64(v449, v198);
            *(float64x2_t *)object = _Q2;
            v238 = *(double *)v95;
            v236 = *(double *)(v95 + 8);
            v128 = _Q2.f64[1];
            v235 = *(double *)(v95 + 16);
            _Q0.f64[0] = *(float64_t *)(v95 + 32);
            v237 = *(double *)(v95 + 40);
            goto LABEL_346;
          }
          v120 = sub_20EB3641C(v95, (float64x2_t *)object, &v449);
        }
        goto LABEL_317;
      }
    }
    else if (v119 > 7)
    {
      goto LABEL_134;
    }
    if (v119 > 3)
    {
      if (v119 > 5)
      {
        if (v119 == 6)
        {
          _Q2 = *(float64x2_t *)(v95 + 208);
          v135 = vaddq_f64(vdivq_f64(v449, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v450, 0)), *(float64x2_t *)(v95 + 192));
          v136 = sqrt(vaddvq_f64(vmulq_f64(v135, v135)));
          _Q0 = vmulq_n_f64(v135, v136* (v136* (*(double *)(v95 + 168) + v136 * (*(double *)(v95 + 176) + *(double *)(v95 + 184) * v136)))+ 1.0);
          v137 = vaddq_f64(_Q2, _Q0);
          *(float64x2_t *)object = v137;
          _Q0.f64[0] = v137.f64[1];
          goto LABEL_334;
        }
        v120 = sub_20EB31FFC(v95, (float64x2_t *)object, &v449);
LABEL_317:
        v95 = v427;
        if (v120)
        {
          v233 = *(_DWORD *)(v427 + 992);
          if (v233 != -1)
          {
            if (v233 <= 7)
              goto LABEL_320;
LABEL_327:
            _Q0.f64[0] = *(float64_t *)(v95 + 32);
            _Q2.f64[0] = *(float64_t *)object;
            v128 = *(double *)&object[8];
            if (v233 <= 0xB)
            {
              v236 = *(double *)(v95 + 8);
              v235 = *(double *)(v95 + 16);
              v237 = *(double *)(v95 + 40);
              v238 = *(double *)v95;
              if (v233 > 8)
              {
                v239 = v238 * *(double *)object + v236 * *(double *)&object[8];
LABEL_347:
                v241 = v235 + v239;
                v248 = v237 + _Q0.f64[0] * v128;
                if (v235 + v239 < 0.0 || v241 > v104)
                {
LABEL_428:
                  v273 = (float64x2_t *)v451;
                  if (v451)
                    goto LABEL_493;
                  goto LABEL_429;
                }
LABEL_381:
                if (v248 < 0.0 || v248 > (double)a6)
                  goto LABEL_428;
                v263 = v452;
                if (v452 < v453)
                {
                  *v452 = v241;
                  v263[1] = v248;
                  v105 = v263 + 2;
                }
                else
                {
                  v264 = (double *)v451;
                  v265 = ((char *)v452 - (_BYTE *)v451) >> 4;
                  v266 = v265 + 1;
                  if ((unint64_t)(v265 + 1) >> 60)
                    sub_20E867F44();
                  v267 = (char *)v453 - (_BYTE *)v451;
                  if (((char *)v453 - (_BYTE *)v451) >> 3 > v266)
                    v266 = v267 >> 3;
                  if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFF0)
                    v268 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v268 = v266;
                  if (v268)
                  {
                    if (v268 >> 60)
                      sub_20E877A38();
                    v269 = (char *)operator new(16 * v268);
                    v270 = (double *)&v269[16 * v265];
                    *v270 = v241;
                    v270[1] = v248;
                    v271 = (float64x2_t *)v270;
                    if (v263 == v264)
                    {
LABEL_401:
                      v105 = v270 + 2;
                      v451 = v271;
                      v452 = v270 + 2;
                      v453 = (double *)&v269[16 * v268];
                      if (v263)
                        goto LABEL_402;
                      goto LABEL_403;
                    }
                  }
                  else
                  {
                    v269 = 0;
                    v270 = (double *)(16 * v265);
                    *v270 = v241;
                    v270[1] = v248;
                    v271 = (float64x2_t *)(16 * v265);
                    if (v263 == v264)
                      goto LABEL_401;
                  }
                  do
                  {
                    _Q0 = *(float64x2_t *)(v263 - 2);
                    v271[-1] = _Q0;
                    --v271;
                    v263 -= 2;
                  }
                  while (v263 != v264);
                  v263 = (double *)v451;
                  v105 = v270 + 2;
                  v451 = v271;
                  v452 = v270 + 2;
                  v453 = (double *)&v269[16 * v268];
                  if (v263)
LABEL_402:
                    operator delete(v263);
LABEL_403:
                  v95 = v427;
                }
                v452 = v105;
                goto LABEL_115;
              }
LABEL_346:
              v239 = v128 * v236 + _Q2.f64[0] * v238;
              goto LABEL_347;
            }
LABEL_330:
            v240 = *(double *)(v95 + 40);
            v241 = *(double *)(v95 + 16) + *(double *)v95 * _Q2.f64[0] + *(double *)(v95 + 8) * v128;
            v242 = _Q0.f64[0] * v128;
LABEL_335:
            v248 = v240 + v242;
            if (v241 < 0.0 || v241 > v104)
              goto LABEL_428;
            goto LABEL_381;
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_610;
          }
          v95 = v427;
          v233 = *(_DWORD *)(v427 + 992);
          if (v233 > 7)
            goto LABEL_327;
LABEL_320:
          if (v233 <= 3)
          {
            if (v233 <= 1)
            {
              if (!v233)
              {
LABEL_609:
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_610:
                abort();
              }
              _Q0 = *(float64x2_t *)object;
LABEL_324:
              v234 = vmulq_f64(*(float64x2_t *)v95, _Q0);
              goto LABEL_366;
            }
            _Q0 = *(float64x2_t *)object;
LABEL_365:
            v234 = vmulq_f64(_Q0, *(float64x2_t *)v95);
LABEL_366:
            v241 = *(double *)(v95 + 16) + vaddvq_f64(v234);
            v248 = vmuld_lane_f64(*(double *)(v95 + 32), _Q0, 1) + *(double *)(v95 + 40);
            if (v241 < 0.0 || v241 > v104)
              goto LABEL_428;
            goto LABEL_381;
          }
          v137.f64[0] = *(float64_t *)object;
          _Q0.f64[0] = *(float64_t *)&object[8];
          if (v233 <= 5)
          {
            v243 = *(double *)v95;
            v244 = *(double *)(v95 + 8);
            v245 = *(double *)(v95 + 16);
            v246 = *(double *)(v95 + 32);
            v247 = *(double *)(v95 + 40);
            if (v233 == 5)
            {
LABEL_376:
              v241 = v245 + v243 * v137.f64[0] + v244 * _Q0.f64[0];
              v248 = _Q0.f64[0] * v246 + v247;
              if (v241 < 0.0 || v241 > v104)
                goto LABEL_428;
              goto LABEL_381;
            }
LABEL_355:
            v241 = v245 + _Q0.f64[0] * v244 + v137.f64[0] * v243;
            v248 = v247 + v246 * _Q0.f64[0];
            if (v241 < 0.0 || v241 > v104)
              goto LABEL_428;
            goto LABEL_381;
          }
LABEL_334:
          v240 = *(double *)(v95 + 40);
          v241 = *(double *)(v95 + 16) + *(double *)v95 * v137.f64[0] + *(double *)(v95 + 8) * _Q0.f64[0];
          v242 = *(double *)(v95 + 32) * _Q0.f64[0];
          goto LABEL_335;
        }
        goto LABEL_115;
      }
      if (v119 != 5)
      {
        _Q0.f64[1] = v449.f64[1];
        _D1 = v449.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v201 = sqrt(_D6);
        v202 = fabs(v450);
        v203 = fabs(v201);
        v204 = v202 / v203;
        if (v202 >= v203)
          v204 = v203 / v202;
        if (v204 <= 0.414213562)
        {
          v206 = 1;
          v207 = 2;
          v205 = v204;
          if (_D6 >= 0.00000001)
            goto LABEL_270;
        }
        else
        {
          v205 = (v203 - v202) / (v202 + v203);
          if (v202 >= v203)
            v205 = -v205;
          v206 = -1;
          v207 = 1;
          if (_D6 >= 0.00000001)
          {
LABEL_270:
            if (v202 < v203)
              v206 = -v206;
            else
              v207 = v204 > 0.414213562;
            v208 = v201 == INFINITY && v202 == INFINITY;
            v209 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v205 * v205), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v205 * v205), (float64x2_t)xmmword_210315370), v205 * v205 * (v205 * v205))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v205 * v205), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v205 * v205), (float64x2_t)xmmword_210315380), v205 * v205 * (v205 * v205))),
                       v205 * v205 * (v205 * v205) * (v205 * v205 * (v205 * v205))));
            v210 = v205 + v205 * vdivq_f64(v209, (float64x2_t)vdupq_laneq_s64((int64x2_t)v209, 1)).f64[0];
            if (v208)
              v210 = 0.785398163;
            if (v201 == 0.0 && v450 == 0.0)
              v212 = 0.0;
            else
              v212 = v210;
            if (v450 < 0.0)
            {
              v207 = 4 - v207;
              v206 = -v206;
            }
            if (v201 < 0.0)
            {
              v207 = -v207;
              v206 = -v206;
            }
            v213 = (double)v207 * 3.061617e-17 + (double)v207 * 0.785398163 + v212 * (double)v206;
            v214 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v415, *(int64x2_t *)(v415 + 16)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)v415, *(int64x2_t *)(v415 + 16)), v213 * v213)), v213 * v213);
            v215 = 1.0 / v201 * (v213 + v213 * (v214.f64[0] + vmuld_lane_f64(v213 * v213 * (v213 * v213), v214, 1)));
            goto LABEL_354;
          }
        }
        v215 = 1.0 / v450;
LABEL_354:
        v137 = vmulq_n_f64(v449, v215);
        v243 = *(double *)v95;
        v244 = *(double *)(v95 + 8);
        _Q0.f64[0] = v137.f64[1];
        v245 = *(double *)(v95 + 16);
        v246 = *(double *)(v95 + 32);
        v247 = *(double *)(v95 + 40);
        goto LABEL_355;
      }
      v121 = v449.f64[0] * v449.f64[0] + v449.f64[1] * v449.f64[1];
      if (v121 >= 0.00000001)
      {
        v250 = sqrt(v121);
        if (v250 <= v450)
        {
          v259 = v250 / v450 * 0.785398163
               - v250 / v450 * (v250 / v450 + -1.0) * (v250 / v450 * 0.0663008339 + 0.244711287);
        }
        else
        {
          if (v250 <= -v450)
          {
            v252 = v250 / v450 * 0.785398163
                 - v250 / v450 * (-1.0 - v250 / v450) * (v250 / v450 * -0.0663008339 + 0.244711287);
            v253 = 3.14159265;
          }
          else
          {
            v251 = fabs(v450 / v250);
            v252 = v450 / v250 * (v251 + -1.0) * (v251 * 0.0663008339 + 0.244711287) + v450 / v250 * -0.785398163;
            v253 = 1.57079633;
          }
          v259 = v252 + v253;
        }
        v260 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v415, *(int64x2_t *)(v415 + 16)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)v415, *(int64x2_t *)(v415 + 16)), v259 * v259)), v259 * v259);
        v122 = (v259 + v259 * (v260.f64[0] + vmuld_lane_f64(v259 * v259 * (v259 * v259), v260, 1))) / v250;
        goto LABEL_375;
      }
      if (v450 != 0.0)
      {
        v122 = 1.0 / v450;
LABEL_375:
        v137.f64[0] = v449.f64[0] * v122;
        _Q0.f64[0] = v449.f64[1] * v122;
        *(double *)object = v449.f64[0] * v122;
        *(double *)&object[8] = v449.f64[1] * v122;
        v243 = *(double *)v95;
        v244 = *(double *)(v95 + 8);
        v245 = *(double *)(v95 + 16);
        v246 = *(double *)(v95 + 32);
        v247 = *(double *)(v95 + 40);
        goto LABEL_376;
      }
    }
    else if (v119 > 1)
    {
      if (v119 != 2)
      {
        _V0.D[1] = v449.f64[1];
        _D1 = v449.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v219 = sqrt(_D6);
        v220 = fabs(v450);
        v221 = fabs(v219);
        v222 = v220 / v221;
        if (v220 >= v221)
          v222 = v221 / v220;
        if (v222 <= 0.414213562)
        {
          v224 = 1;
          v225 = 2;
          v223 = v222;
          if (_D6 >= 0.00000001)
          {
LABEL_295:
            if (v220 < v221)
              v224 = -v224;
            else
              v225 = v222 > 0.414213562;
            v226 = v219 == INFINITY && v220 == INFINITY;
            v227 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v223 * v223), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v223 * v223), (float64x2_t)xmmword_210315370), v223 * v223 * (v223 * v223))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v223 * v223), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v223 * v223), (float64x2_t)xmmword_210315380), v223 * v223 * (v223 * v223))),
                       v223 * v223 * (v223 * v223) * (v223 * v223 * (v223 * v223))));
            v228 = v223 + v223 * vdivq_f64(v227, (float64x2_t)vdupq_laneq_s64((int64x2_t)v227, 1)).f64[0];
            if (v226)
              v228 = 0.785398163;
            if (v219 == 0.0 && v450 == 0.0)
              v230 = 0.0;
            else
              v230 = v228;
            if (v450 < 0.0)
            {
              v225 = 4 - v225;
              v224 = -v224;
            }
            if (v219 < 0.0)
            {
              v225 = -v225;
              v224 = -v224;
            }
            v231 = (double)v225 * 3.061617e-17 + (double)v225 * 0.785398163 + v230 * (double)v224;
            v232 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v415, *(int64x2_t *)(v415 + 16)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)v415, *(int64x2_t *)(v415 + 16)), v231 * v231)), v231 * v231);
            _Q0 = vmulq_n_f64(v449, 1.0 / v219 * (v231 + v231 * (v232.f64[0] + vmuld_lane_f64(v231 * v231 * (v231 * v231), v232, 1))));
            goto LABEL_365;
          }
        }
        else
        {
          v223 = (v221 - v220) / (v220 + v221);
          if (v220 >= v221)
            v223 = -v223;
          v224 = -1;
          v225 = 1;
          if (_D6 >= 0.00000001)
            goto LABEL_295;
        }
        _Q0 = vmulq_n_f64(v449, 1.0 / v450);
        goto LABEL_365;
      }
      if (*(_DWORD *)(v95 + 212))
      {
        if (v450 >= 0.00000001)
        {
          _Q2 = vmulq_n_f64(v449, 1.0 / v450);
          _D0 = vmuld_lane_f64(1.0 / v450, v449, 1);
          __asm { FMLA            D1, D0, V2.D[1] }
          v132 = vmulq_n_f64(_Q2, *(double *)(v95 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v95 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v95 + 184) * *(double *)&_D1)));
          v133 = *(float64x2_t *)(v95 + 192);
          v134 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL));
          _Q2 = vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(v133, v133), _Q2.f64[0]), _Q2, 1);
          _Q0 = vaddq_f64(vaddq_f64(v134, _Q2), v132);
          *(float64_t *)object = _Q0.f64[0];
          goto LABEL_365;
        }
      }
      else if (v450 >= 0.00000001)
      {
        _Q2 = vmulq_n_f64(v449, 1.0 / v450);
        _D0 = vmuld_lane_f64(1.0 / v450, v449, 1);
        __asm { FMLA            D1, D0, V2.D[1] }
        _Q0 = vmulq_n_f64(_Q2, *(double *)(v95 + 168) * _D1 + 1.0 + _D1 * _D1 * (*(double *)(v95 + 176) + *(double *)(v95 + 184) * _D1));
        goto LABEL_365;
      }
    }
    else
    {
      if (!v119)
        goto LABEL_609;
      if (v450 >= 0.00000001)
      {
        _Q0 = vmulq_n_f64(v449, 1.0 / v450);
        *(float64x2_t *)object = _Q0;
        goto LABEL_324;
      }
    }
LABEL_115:
    v99 = (float64x2_t *)((char *)v99 + 24);
  }
  while (v99 != v431);
  v272 = v452;
  v273 = (float64x2_t *)v451;
  v274 = (char *)v452 - (_BYTE *)v451;
  if ((unint64_t)((char *)v452 - (_BYTE *)v451) < 0x20)
    goto LABEL_410;
  if (*(double *)v451 <= *((double *)v451 + 2))
    v275 = (double)a6;
  else
    v275 = 0.0;
  if (v452 >= v453)
  {
    v292 = v274 >> 4;
    v293 = (v274 >> 4) + 1;
    if (v293 >> 60)
      sub_20E867F44();
    v294 = (char *)v453 - (_BYTE *)v451;
    if (((char *)v453 - (_BYTE *)v451) >> 3 > v293)
      v293 = v294 >> 3;
    if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF0)
      v295 = 0xFFFFFFFFFFFFFFFLL;
    else
      v295 = v293;
    if (v295)
    {
      if (v295 >> 60)
        sub_20E877A38();
      v296 = (char *)operator new(16 * v295);
    }
    else
    {
      v296 = 0;
    }
    v297 = (double *)&v296[16 * v292];
    v298 = (double *)&v296[16 * v295];
    *v297 = 0.0;
    v297[1] = v275;
    v276 = v297 + 2;
    if (v272 == (double *)v273)
    {
      v451 = &v296[16 * v292];
      v452 = v297 + 2;
      v453 = v298;
    }
    else
    {
      do
      {
        *((_OWORD *)v297 - 1) = *((_OWORD *)v272 - 1);
        v297 -= 2;
        v272 -= 2;
      }
      while (v272 != (double *)v273);
      v273 = (float64x2_t *)v451;
      v451 = v297;
      v452 = v276;
      v453 = v298;
      if (!v273)
      {
        v452 = v276;
        v277 = (double)a5;
        v278 = v453;
        if (v276 < v453)
          goto LABEL_445;
        goto LABEL_418;
      }
    }
    operator delete(v273);
    v452 = v276;
    v277 = (double)a5;
    v278 = v453;
    if (v276 < v453)
      goto LABEL_445;
LABEL_418:
    v279 = (double *)v451;
    v280 = ((char *)v276 - (_BYTE *)v451) >> 4;
    v281 = v280 + 1;
    if ((unint64_t)(v280 + 1) >> 60)
      sub_20E867F44();
    v282 = (char *)v278 - (_BYTE *)v451;
    if (v282 >> 3 > v281)
      v281 = v282 >> 3;
    if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFF0)
      v283 = 0xFFFFFFFFFFFFFFFLL;
    else
      v283 = v281;
    if (v283)
    {
      if (v283 >> 60)
        sub_20E877A38();
      v284 = (char *)operator new(16 * v283);
      v285 = (double *)&v284[16 * v280];
      v286 = (double *)&v284[16 * v283];
      *v285 = v277;
      v285[1] = v275;
      v287 = v285 + 2;
      if (v276 == v279)
        goto LABEL_453;
    }
    else
    {
      v285 = (double *)(16 * v280);
      v286 = 0;
      *v285 = v277;
      v285[1] = v275;
      v287 = (double *)(16 * v280 + 16);
      if (v276 == v279)
      {
LABEL_453:
        v451 = v285;
        v452 = v287;
        v453 = v286;
        goto LABEL_454;
      }
    }
    do
    {
      *((_OWORD *)v285 - 1) = *((_OWORD *)v276 - 1);
      v285 -= 2;
      v276 -= 2;
    }
    while (v276 != v279);
    v276 = (double *)v451;
    v451 = v285;
    v452 = v287;
    v453 = v286;
    if (!v276)
      goto LABEL_455;
LABEL_454:
    operator delete(v276);
    goto LABEL_455;
  }
  *v452 = 0.0;
  v272[1] = v275;
  v276 = v272 + 2;
  v452 = v272 + 2;
  v277 = (double)a5;
  v278 = v453;
  if (v272 + 2 >= v453)
    goto LABEL_418;
LABEL_445:
  *v276 = v277;
  v276[1] = v275;
  v287 = v276 + 2;
LABEL_455:
  v452 = v287;
  v299 = 0uLL;
  if (v451 != v287)
  {
    v300 = (float64x2_t *)v451;
    do
    {
      v301 = *v300++;
      v299 = vaddq_f64(v299, v301);
    }
    while (v300 != (float64x2_t *)v287);
  }
  v302 = ((char *)v287 - (_BYTE *)v451) >> 4;
  v303 = 126 - 2 * __clz(v302);
  *(float64x2_t *)object = vdivq_f64(v299, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v302), 0));
  v439 = (double *)object;
  if (v287 == v451)
    v304 = 0;
  else
    v304 = v303;
  sub_210207FD8((double *)v451, v287, &v439, v304, 1);
  v289 = v452;
  v273 = (float64x2_t *)v451;
  v305 = (unint64_t)((char *)v452 - (_BYTE *)v451) >> 4;
  v306 = (v305 - 1);
  if ((_DWORD)v305 != 1)
  {
    v307 = (int8x16_t)vsubq_f64(*((float64x2_t *)v451 + 2 % v305), *(float64x2_t *)v451);
    v308 = vmulq_f64(vsubq_f64(*((float64x2_t *)v451 + 1), *(float64x2_t *)v451), (float64x2_t)vextq_s8(v307, v307, 8uLL));
    v309 = vsubq_f64(v308, (float64x2_t)vdupq_laneq_s64((int64x2_t)v308, 1)).f64[0];
    if (v309 == 0.0)
      goto LABEL_493;
    v310 = v306 < 2;
    if ((_DWORD)v305 != 2)
    {
      v311 = v309;
      v312 = 1;
      do
      {
        v313 = v312 + 1;
        v314 = *((float64x2_t *)v451 + v312);
        v315 = vsubq_f64(*((float64x2_t *)v451 + ((int)v312 + 1) % v305), v314);
        v316 = (int8x16_t)vsubq_f64(*((float64x2_t *)v451 + ((int)v312 + 2) % v305), v314);
        v317 = vmulq_f64(v315, (float64x2_t)vextq_s8(v316, v316, 8uLL));
        v318 = vsubq_f64(v317, (float64x2_t)vdupq_laneq_s64((int64x2_t)v317, 1)).f64[0];
        if (v318 == 0.0)
          break;
        if (((*(_QWORD *)&v318 ^ *(_QWORD *)&v311) & 0x8000000000000000) != 0)
          break;
        v310 = v313 >= v306;
        ++v312;
      }
      while (v306 != v313);
    }
    if (!v310)
      goto LABEL_493;
  }
  v319 = ((char *)v452 - (_BYTE *)v451) >> 4;
  if (v452 != v451)
  {
    v320 = 0;
    do
    {
      v321 = v320++;
      *(float64x2_t *)&object[v321 * 16] = vsubq_f64(v273[v320 % v319], v273[v321]);
    }
    while (v319 > v320);
  }
  if (v97[1] != *v97)
  {
    v322 = 0;
    v323 = 0;
    do
    {
      if (!*((_BYTE *)v97 + 60)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/include/VIO/FeatureDetectionNodeGroup/FeatureFilterTypes.h", 151, (uint64_t)"ordered", 7, (uint64_t)"Not supported with reordered indices.", 37, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v324 = v97[3];
      v325 = v322 >> 6;
      v326 = 1 << v322;
      if ((*(_QWORD *)(v324 + 8 * (v322 >> 6)) & (1 << v322)) != 0)
      {
        v327 = *(float32x2_t *)(a7 + 24 * v322);
        if (v319 != ((char *)v452 - (_BYTE *)v451) >> 4
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Math/src/GeometryUtilities.cpp", 31, (uint64_t)"vertices.size() == affine_segments.size()", 41, (uint64_t)&unk_2102D576B, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (v289 != (double *)v273)
        {
          v328 = 0;
          LODWORD(v329) = 0;
          v330 = vcvtq_f64_f32(v327);
          v331 = 1;
          do
          {
            v332 = 16 * v328;
            v333 = (int8x16_t)vsubq_f64(v330, *(float64x2_t *)((char *)v451 + v332));
            v334 = vmulq_f64(*(float64x2_t *)&object[v332], (float64x2_t)vextq_s8(v333, v333, 8uLL));
            v335 = vsubq_f64(v334, (float64x2_t)vdupq_laneq_s64((int64x2_t)v334, 1)).f64[0];
            if (v335 == 0.0)
              break;
            if (v331 == 1)
            {
              v329 = *(_QWORD *)&v335 >> 63;
            }
            else if (((v329 ^ (v335 < 0.0)) & 1) != 0)
            {
              goto LABEL_474;
            }
            v328 = v331++;
          }
          while (v319 > v328);
        }
        v336 = a8;
        if (!*((_BYTE *)a8 + 60))
        {
          v337 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/FeatureFilterTypes.cpp", 69, (uint64_t)"ordered", 7, (uint64_t)"Not supported with reordered indices.", 37, (void (*)(void **))sub_21023DDB0);
          v336 = a8;
          if (v337)
            abort();
        }
        v338 = v336[3];
        v339 = *(_QWORD *)(v338 + 8 * v325);
        if ((v339 & v326) != 0)
        {
          *(_QWORD *)(v338 + 8 * v325) = v339 ^ v326;
          v340 = *((unsigned int *)a8 + 12);
          ++*((_DWORD *)a8 + 13);
          if (v322 >= v340)
            ++*((_DWORD *)a8 + 14);
        }
      }
LABEL_474:
      v97 = a8;
      v322 = ++v323;
    }
    while (v323 < (unint64_t)((a8[1] - *a8) >> 3));
    v273 = (float64x2_t *)v451;
    v289 = v452;
  }
  v288 = v453;
  a4 = v425;
  v290 = a9;
  v291 = *a9;
  if (*a9)
    goto LABEL_494;
LABEL_495:
  *v290 = v273;
  v290[1] = v289;
  v290[2] = v288;
  v341 = *((_DWORD *)v97 + 13);
  sub_20EEA55F4(&v449);
  if (**(int **)(*(_QWORD *)&v449.f64[0] + 56) > 2)
    goto LABEL_585;
  v342 = *(unsigned __int8 *)(*(_QWORD *)&v449.f64[0] + 72);
  v343 = sub_20E8C31DC(*(uint64_t *)&v449.f64[0], "OSLogSurrogateAppender", 1, 0);
  v344 = v343;
  if (!v342 && !v343)
    goto LABEL_585;
  v439 = (double *)&v449;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v441 = std::chrono::system_clock::now().__d_.__rep_;
  v442 = 2;
  v443 = "unknown file";
  v444 = 68;
  v447 = 0;
  v445 = "unknown function";
  v446 = 0;
  v345 = *(_QWORD *)v439;
  v346 = (const char *)(*(_QWORD *)v439 + 16);
  v424 = v342;
  v422 = v346;
  if (*(char *)(*(_QWORD *)v439 + 39) < 0)
  {
    v346 = *(const char **)(v345 + 16);
    v347 = *(_QWORD *)(v345 + 24);
  }
  else
  {
    v347 = *(unsigned __int8 *)(*(_QWORD *)v439 + 39);
  }
  v348 = *a8;
  v428 = a8[1];
  v432 = *((unsigned int *)a8 + 13);
  v349 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v349 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v350 = byte_254A4A4F8;
  else
    v350 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v351 = byte_254A4A4F8[23];
  else
    v351 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v350, v346);
  v352 = &object[8];
  if (v351 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v351 >= 0x17)
  {
    v353 = (v351 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v351 | 7) != 0x17)
      v353 = v351 | 7;
    v354 = v353 + 1;
    v352 = operator new(v353 + 1);
    *(_QWORD *)&object[24] = v354 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v352;
    *(_QWORD *)&object[16] = v351;
    goto LABEL_518;
  }
  object[31] = v351;
  if (v351)
LABEL_518:
    memmove(v352, v350, v351);
  v352[v351] = 0;
  object[32] = 1;
  v355 = &__p;
  if (v347 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v347 >= 0x17)
  {
    v357 = (v347 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v347 | 7) != 0x17)
      v357 = v347 | 7;
    v358 = v357 + 1;
    v355 = operator new(v357 + 1);
    *(_QWORD *)&v460[8] = v358 | 0x8000000000000000;
    __p = v355;
    *(_QWORD *)v460 = v347;
  }
  else
  {
    v460[15] = v347;
    if (!v347)
    {
      LOBYTE(__p) = 0;
      v460[16] = 1;
      v356 = *(NSObject **)object;
      if ((v460[15] & 0x80000000) == 0)
        goto LABEL_523;
LABEL_529:
      operator delete(__p);
      if (object[32])
        goto LABEL_530;
      goto LABEL_532;
    }
  }
  memmove(v355, v346, v347);
  *((_BYTE *)v355 + v347) = 0;
  v460[16] = 1;
  v356 = *(NSObject **)object;
  if ((v460[15] & 0x80000000) != 0)
    goto LABEL_529;
LABEL_523:
  if (object[32])
  {
LABEL_530:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
  }
LABEL_532:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v359 = (v428 - v348) >> 3;
  if (v344 && *(_QWORD *)(v344 + 24))
  {
    v360 = _os_log_pack_size();
    v361 = (std::__shared_weak_count_vtbl *)operator new(v360, (std::align_val_t)8uLL);
    v362 = (std::__shared_weak_count *)operator new();
    v363 = v362;
    v362->__shared_owners_ = 0;
    v364 = (unint64_t *)&v362->__shared_owners_;
    v362->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v362->__shared_weak_owners_ = 0;
    v362[1].__vftable = v361;
    *(_QWORD *)object = v361;
    *(_QWORD *)&object[8] = v361;
    *(_QWORD *)&object[16] = v362;
    do
      v365 = __ldxr(v364);
    while (__stxr(v365 + 1, v364));
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)&object[24] = 0;
    __p = 0;
    do
      v366 = __ldaxr(v364);
    while (__stlxr(v366 - 1, v364));
    if (!v366)
    {
      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
      std::__shared_weak_count::__release_weak(v363);
    }
    v367 = *(_QWORD *)object;
    v368 = _os_log_pack_fill();
    *(_DWORD *)v368 = 67109632;
    *(_DWORD *)(v368 + 4) = v341;
    *(_WORD *)(v368 + 8) = 2048;
    *(_QWORD *)(v368 + 10) = v359;
    *(_WORD *)(v368 + 18) = 2048;
    *(_QWORD *)(v368 + 20) = v359 - v432;
    v369 = (char *)operator new();
    v370 = *(unsigned __int8 *)(v345 + 39);
    v371 = v422;
    if ((v370 & 0x80u) != 0)
    {
      v371 = *(const char **)(v345 + 16);
      v370 = *(_QWORD *)(v345 + 24);
    }
    *(_QWORD *)v369 = v367;
    *(_OWORD *)(v369 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v369 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *((_QWORD *)v369 + 5) = v371;
    *((_QWORD *)v369 + 6) = v370;
    v369[56] = 2;
    v451 = 0;
    v454[0] = v369;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v344 + 24) + 40))(*(_QWORD *)(v344 + 24), v454);
    v372 = v454[0];
    v454[0] = 0;
    a4 = v425;
    v373 = a8;
    if (v372)
    {
      v374 = (std::__shared_weak_count *)*((_QWORD *)v372 + 4);
      if (v374)
      {
        v375 = (unint64_t *)&v374->__shared_owners_;
        do
          v376 = __ldaxr(v375);
        while (__stlxr(v376 - 1, v375));
        if (!v376)
        {
          ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
          std::__shared_weak_count::__release_weak(v374);
        }
      }
      v377 = (std::__shared_weak_count *)*((_QWORD *)v372 + 2);
      if (v377)
      {
        v378 = (unint64_t *)&v377->__shared_owners_;
        do
          v379 = __ldaxr(v378);
        while (__stlxr(v379 - 1, v378));
        if (!v379)
        {
          ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
          std::__shared_weak_count::__release_weak(v377);
        }
      }
      MEMORY[0x212BC6398](v372, 0x10F0C40B62ED6C6);
      v380 = v451;
      v451 = 0;
      if (v380)
      {
        v381 = (std::__shared_weak_count *)*((_QWORD *)v380 + 4);
        if (v381)
        {
          v382 = (unint64_t *)&v381->__shared_owners_;
          do
            v383 = __ldaxr(v382);
          while (__stlxr(v383 - 1, v382));
          if (!v383)
          {
            ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
            std::__shared_weak_count::__release_weak(v381);
          }
        }
        v384 = (std::__shared_weak_count *)*((_QWORD *)v380 + 2);
        if (v384)
        {
          v385 = (unint64_t *)&v384->__shared_owners_;
          do
            v386 = __ldaxr(v385);
          while (__stlxr(v386 - 1, v385));
          if (!v386)
          {
            ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
            std::__shared_weak_count::__release_weak(v384);
          }
        }
        MEMORY[0x212BC6398](v380, 0x10F0C40B62ED6C6);
      }
    }
    v387 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v388 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v389 = __ldaxr(v388);
      while (__stlxr(v389 - 1, v388));
      if (!v389)
      {
        ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
        std::__shared_weak_count::__release_weak(v387);
      }
    }
    v390 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v391 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v392 = __ldaxr(v391);
      while (__stlxr(v392 - 1, v391));
      if (!v392)
      {
        ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
        std::__shared_weak_count::__release_weak(v390);
      }
    }
  }
  else
  {
    os_log_type_enabled(v356, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)object = 67109632;
    *(_DWORD *)&object[4] = v341;
    *(_WORD *)&object[8] = 2048;
    *(_QWORD *)&object[10] = (v428 - v348) >> 3;
    *(_WORD *)&object[18] = 2048;
    *(_QWORD *)&object[20] = v359 - v432;
    v393 = (void *)_os_log_send_and_compose_impl();
    a4 = v425;
    v373 = a8;
    if (v393)
      free(v393);
  }
  if (v424)
  {
    sub_20E8C003C((uint64_t)&v439, "Number of cropped body points: %u ([before: %zu, after: %zu])", v341, (v373[1] - *v373) >> 3, ((v373[1] - *v373) >> 3) - *((unsigned int *)v373 + 13));
    sub_20E863570((uint64_t)&v439);
  }
  sub_20E863570((uint64_t)&v439);
  v394 = v447;
  if (!v447)
    goto LABEL_585;
  v395 = (unint64_t *)&v447->__shared_owners_;
  do
    v396 = __ldaxr(v395);
  while (__stlxr(v396 - 1, v395));
  if (v396)
  {
LABEL_585:
    if (*a4 >= 0x10000)
      goto LABEL_586;
    goto LABEL_587;
  }
  ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
  std::__shared_weak_count::__release_weak(v394);
  if (*a4 < 0x10000)
    goto LABEL_587;
LABEL_586:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_608:
    abort();
  }
LABEL_587:
  if (a4[1] >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_608;
  }
  kdebug_trace();
  v397 = v434;
  if (v434)
  {
    v398 = (uint64_t)v435;
    v399 = v434;
    if (v435 != v434)
    {
      do
        v398 = sub_20EB8188C(v398 - 1664);
      while ((void *)v398 != v397);
      v399 = v434;
    }
    v435 = v397;
    operator delete(v399);
  }
  if (v436)
  {
    v437 = v436;
    operator delete(v436);
  }
}

void sub_20EE9F2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  void *a66;
  uint64_t a67;
  char a69;

  if (LOBYTE(STACK[0x2A8]) && SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a69);
  sub_20EA841C0((uint64_t)&a62);
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE9F5B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;

  a1[36] = &off_24CA1A9A0;
  v2 = (std::__shared_weak_count *)a1[38];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[33] = &off_24CA1A9A0;
    v5 = (std::__shared_weak_count *)a1[35];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[33] = &off_24CA1A9A0;
    v5 = (std::__shared_weak_count *)a1[35];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[30] = &off_24CA1A9A0;
  v8 = (std::__shared_weak_count *)a1[32];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[27] = &off_24CA1A9A0;
    v11 = (std::__shared_weak_count *)a1[29];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[27] = &off_24CA1A9A0;
    v11 = (std::__shared_weak_count *)a1[29];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[24] = &off_24CA1A9A0;
  v14 = (std::__shared_weak_count *)a1[26];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    a1[21] = &off_24CA1A9A0;
    v17 = (std::__shared_weak_count *)a1[23];
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    a1[21] = &off_24CA1A9A0;
    v17 = (std::__shared_weak_count *)a1[23];
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  a1[18] = &off_24CA1A9A0;
  v20 = (std::__shared_weak_count *)a1[20];
  if (!v20)
    goto LABEL_35;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    a1[15] = &off_24CA1A9A0;
    v23 = (std::__shared_weak_count *)a1[17];
    if (!v23)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    a1[15] = &off_24CA1A9A0;
    v23 = (std::__shared_weak_count *)a1[17];
    if (!v23)
      goto LABEL_41;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_41:
  a1[12] = &off_24CA1A9A0;
  v26 = (std::__shared_weak_count *)a1[14];
  if (!v26)
    goto LABEL_45;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    a1[9] = &off_24CA1A9A0;
    v29 = (std::__shared_weak_count *)a1[11];
    if (!v29)
      goto LABEL_51;
  }
  else
  {
LABEL_45:
    a1[9] = &off_24CA1A9A0;
    v29 = (std::__shared_weak_count *)a1[11];
    if (!v29)
      goto LABEL_51;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_51:
  a1[6] = &off_24CA1A9A0;
  v32 = (std::__shared_weak_count *)a1[8];
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      a1[3] = &off_24CA1A9A0;
      v35 = (std::__shared_weak_count *)a1[5];
      if (v35)
        goto LABEL_56;
      return a1;
    }
  }
  a1[3] = &off_24CA1A9A0;
  v35 = (std::__shared_weak_count *)a1[5];
  if (!v35)
    return a1;
LABEL_56:
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (v37)
    return a1;
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  return a1;
}

void sub_20EE9F928(uint64_t a1)
{
  sub_20EE9FDFC(a1);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EE9F94C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 result;
  __int128 v26;
  __int128 v27;

  v4 = *a2;
  *(_BYTE *)(a1 + 344) = *((_BYTE *)a2 + 8);
  *(_QWORD *)(a1 + 336) = v4;
  v6 = a2[2];
  v5 = a2[3];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 360);
  *(_QWORD *)(a1 + 352) = v6;
  *(_QWORD *)(a1 + 360) = v5;
  if (!v9)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v13 = a2[4];
    v12 = a2[5];
    if (!v12)
      goto LABEL_11;
  }
  else
  {
LABEL_8:
    v13 = a2[4];
    v12 = a2[5];
    if (!v12)
      goto LABEL_11;
  }
  v14 = (unint64_t *)(v12 + 8);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
LABEL_11:
  v16 = *(std::__shared_weak_count **)(a1 + 376);
  *(_QWORD *)(a1 + 368) = v13;
  *(_QWORD *)(a1 + 376) = v12;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 3);
  v19 = *((_OWORD *)a2 + 4);
  v20 = *((_OWORD *)a2 + 5);
  v21 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 432) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 448) = v21;
  *(_OWORD *)(a1 + 400) = v19;
  *(_OWORD *)(a1 + 416) = v20;
  v22 = *((_OWORD *)a2 + 8);
  v23 = *((_OWORD *)a2 + 9);
  v24 = *((_OWORD *)a2 + 11);
  *(_OWORD *)(a1 + 496) = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 512) = v24;
  *(_OWORD *)(a1 + 464) = v22;
  *(_OWORD *)(a1 + 480) = v23;
  result = *((__n128 *)a2 + 12);
  v26 = *((_OWORD *)a2 + 13);
  v27 = *((_OWORD *)a2 + 14);
  *(_OWORD *)(a1 + 571) = *(_OWORD *)((char *)a2 + 235);
  *(_OWORD *)(a1 + 544) = v26;
  *(_OWORD *)(a1 + 560) = v27;
  *(__n128 *)(a1 + 528) = result;
  return result;
}

_QWORD *sub_20EE9FA84@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  size_t v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (_BYTE *)result[87];
  v4 = (_BYTE *)result[88];
  v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = (char *)operator new(v4 - v3);
    *a2 = v6;
    a2[2] = &v6[16 * (v5 >> 4)];
    v7 = v5 & 0xFFFFFFFFFFFFFFF0;
    result = memcpy(v6, v3, v7);
    a2[1] = &v6[v7];
  }
  return result;
}

void sub_20EE9FB04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE9FB20(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(_QWORD *)(a1 + 336) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(a1 + 272);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(_QWORD **)(a1 + 232);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(void **)(a1 + 192);
  if (v9)
  {
    *(_QWORD *)(a1 + 200) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 128);
  if (v10)
  {
    *(_QWORD *)(a1 + 136) = v10;
    operator delete(v10);
  }
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    v11 = *(void **)(a1 + 48);
    if (!v11)
      return a1;
    goto LABEL_17;
  }
  v11 = *(void **)(a1 + 48);
  if (v11)
  {
LABEL_17:
    *(_QWORD *)(a1 + 56) = v11;
    operator delete(v11);
  }
  return a1;
}

_QWORD *sub_20EE9FBEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (std::__shared_weak_count *)a1[37];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = a1[35];
    a1[35] = 0;
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = a1[35];
  a1[35] = 0;
  if (v5)
LABEL_6:
    MEMORY[0x212BC6398](v5, 0x1000C402C707793);
LABEL_7:
  v6 = (void *)a1[25];
  if (v6)
  {
    a1[26] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[19];
  if (v7)
  {
    a1[20] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[8];
  if (v8)
  {
    a1[9] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[2];
  if (v9)
  {
    a1[3] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_20EE9FCB4(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string __p;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_20E8F6670(v4, "HWFP expired at time ");
  sub_20EC4149C(a2, &__p);
  v7[0] = v4;
  v7[1] = &__p;
  v7[2] = v4;
  v7[3] = &__p;
  v7[4] = &__p;
  if (v5 == -1)
    sub_20E877AB8();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C9EF130[v5])(&v8, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_20E877AB8();
  v7[0] = &__p;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9EF148[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9EF118[v5])(v7, v4);
  return result;
}

void sub_20EE9FDBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE9FDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EE9FDC8);
}

uint64_t sub_20EE9FDFC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;

  *(_QWORD *)a1 = &off_24C9EF0D0;
  v2 = *(_QWORD **)(a1 + 744);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20EE9FBEC(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 728);
  *(_QWORD *)(a1 + 728) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 720) = 0;
  if (v5)
  {
    v6 = sub_20EE9FB20(v5);
    MEMORY[0x212BC6398](v6, 0x10B2C401F5AFF5CLL);
  }
  v7 = *(void **)(a1 + 696);
  if (v7)
  {
    *(_QWORD *)(a1 + 704) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 672);
  if (v8)
  {
    *(_QWORD *)(a1 + 680) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 600);
    v11 = *(void **)(a1 + 592);
    if (v10 != v9)
    {
      do
      {
        v12 = *(_QWORD *)(v10 - 24);
        if (v12)
        {
          v13 = *(_QWORD *)(v10 - 16);
          v14 = *(void **)(v10 - 24);
          if (v13 != v12)
          {
            do
              v13 = sub_20EB8188C(v13 - 1664);
            while (v13 != v12);
            v14 = *(void **)(v10 - 24);
          }
          *(_QWORD *)(v10 - 16) = v12;
          operator delete(v14);
        }
        v10 -= 32;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 592);
    }
    *(_QWORD *)(a1 + 600) = v9;
    operator delete(v11);
  }
  v15 = *(std::__shared_weak_count **)(a1 + 376);
  if (!v15)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = *(std::__shared_weak_count **)(a1 + 360);
    if (!v18)
      goto LABEL_32;
  }
  else
  {
LABEL_26:
    v18 = *(std::__shared_weak_count **)(a1 + 360);
    if (!v18)
      goto LABEL_32;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_32:
  v21 = *(void **)(a1 + 296);
  if (v21)
    operator delete(v21);
  v22 = *(void **)(a1 + 272);
  if (v22)
  {
    *(_QWORD *)(a1 + 280) = v22;
    operator delete(v22);
  }
  if (*(char *)(a1 + 255) < 0)
  {
    operator delete(*(void **)(a1 + 232));
    v23 = *(void **)(a1 + 184);
    if (!v23)
      return a1;
    goto LABEL_38;
  }
  v23 = *(void **)(a1 + 184);
  if (v23)
  {
LABEL_38:
    *(_QWORD *)(a1 + 192) = v23;
    operator delete(v23);
  }
  return a1;
}

_QWORD *sub_20EE9FFDC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x212BC5B40](v4);
  return a1;
}

void sub_20EEA0070(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212BC6290](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EEA00A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x212BC5B4C](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x212BC6290](a1 + 52);
  return a1;
}

std::string *sub_20EEA00FC(std::string *__dst, uint64_t *a2)
{
  std::string *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::string::size_type v10;
  std::string::size_type *v11;
  std::string::size_type v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string::size_type size;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  _QWORD v27[3];

  v3 = __dst;
  v5 = *a2;
  v4 = a2[1];
  v6 = v4 - *a2;
  if (v4 == *a2)
  {
    if (*((char *)a2 + 87) < 0)
      return (std::string *)sub_20E860C04(__dst, (void *)a2[8], a2[9]);
    *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = *((_OWORD *)a2 + 4);
    __dst->__r_.__value_.__r.__words[2] = a2[10];
    return __dst;
  }
  v7 = *((int *)a2 + 13);
  v8 = *((int *)a2 + 14);
  if ((int)v7 < (int)v8 && (a2[11] & 2) != 0)
  {
    v27[0] = &off_24C9EF660;
    v27[1] = v7;
    v27[2] = v8;
    sub_20EEA4AD8((uint64_t)v27);
  }
  v9 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
  __dst->__r_.__value_.__r.__words[0] = 0;
  __dst->__r_.__value_.__l.__size_ = 0;
  __dst->__r_.__value_.__r.__words[2] = 0;
  if (*((char *)a2 + 87) < 0)
    v10 = a2[9];
  else
    v10 = *((unsigned __int8 *)a2 + 87);
  if (v9 <= 1)
    v9 = 1;
  v11 = (std::string::size_type *)(v5 + 56);
  do
  {
    while (1)
    {
      if (*((char *)v11 - 25) < 0)
      {
        v12 = *(v11 - 5) + v10;
        if (*((_DWORD *)v11 - 14) != -2)
          goto LABEL_12;
      }
      else
      {
        v12 = *((unsigned __int8 *)v11 - 25) + v10;
        if (*((_DWORD *)v11 - 14) != -2)
          goto LABEL_12;
      }
      if (v12 <= *v11)
        v12 = *v11;
LABEL_12:
      if (*((char *)v11 - 1) < 0)
        break;
      v10 = *((unsigned __int8 *)v11 - 1) + v12;
      v11 += 15;
      if (!--v9)
        goto LABEL_23;
    }
    v10 = *(v11 - 2) + v12;
    v11 += 15;
    --v9;
  }
  while (v9);
LABEL_23:
  std::string::reserve(__dst, v10);
  v13 = *((char *)a2 + 87);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)(a2 + 8);
  else
    v14 = (const std::string::value_type *)a2[8];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 87);
  else
    v15 = a2[9];
  __dst = std::string::append(v3, v14, v15);
  v16 = *a2;
  if (a2[1] != *a2)
  {
    v17 = 0;
    v18 = 40;
    while (1)
    {
      v19 = *(char *)(v16 + v18 - 9);
      if (v19 >= 0)
        v20 = (const std::string::value_type *)(v16 + v18 - 32);
      else
        v20 = *(const std::string::value_type **)(v16 + v18 - 32);
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(v16 + v18 - 9);
      else
        v21 = *(_QWORD *)(v16 + v18 - 24);
      std::string::append(v3, v20, v21);
      if (*(_DWORD *)(v16 + v18 - 40) != -2)
        goto LABEL_43;
      v22 = *(_QWORD *)(v16 + v18 + 16);
      if ((SHIBYTE(v3->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        break;
      size = v3->__r_.__value_.__l.__size_;
      if (v22 > size)
        goto LABEL_42;
LABEL_43:
      v24 = *(char *)(v16 + v18 + 15);
      if (v24 >= 0)
        v25 = (const std::string::value_type *)(v16 + v18 - 8);
      else
        v25 = *(const std::string::value_type **)(v16 + v18 - 8);
      if (v24 >= 0)
        v26 = *(unsigned __int8 *)(v16 + v18 + 15);
      else
        v26 = *(_QWORD *)(v16 + v18);
      __dst = std::string::append(v3, v25, v26);
      ++v17;
      v16 = *a2;
      v18 += 120;
      if (v17 >= 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3))
        goto LABEL_50;
    }
    size = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    if (v22 <= size)
      goto LABEL_43;
LABEL_42:
    std::string::append(v3, v22 - size, *(_BYTE *)(v16 + v18 + 32));
    goto LABEL_43;
  }
LABEL_50:
  *((_BYTE *)a2 + 60) = 1;
  return __dst;
}

void sub_20EEA0384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void sub_20EEA0398(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EEA03B8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v22 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v2, (uint64_t)&v22, 1);
  }
  std::ostream::operator<<();
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v3 + 1;
  if (v3 != -1)
  {
    v4 = *(_QWORD **)(a1 + 24);
    v23 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v4, (uint64_t)&v23, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
  std::ostream::operator<<();
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5 + 1;
  if (v5 != -1)
  {
    v6 = *(_QWORD **)(a1 + 24);
    v24 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)&v24, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v8, (uint64_t)&v25, 1);
  }
  std::ostream::operator<<();
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v9 + 1;
  if (v9 != -1)
  {
    v10 = *(_QWORD **)(a1 + 24);
    v26 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v10, (uint64_t)&v26, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11 + 1;
  if (v11 != -1)
  {
    v12 = *(_QWORD **)(a1 + 24);
    v27 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v12, (uint64_t)&v27, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v13 + 1;
  if (v13 != -1)
  {
    v14 = *(_QWORD **)(a1 + 24);
    v28 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v14, (uint64_t)&v28, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v15 + 1;
  if (v15 != -1)
  {
    v16 = *(_QWORD **)(a1 + 24);
    v29 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v16, (uint64_t)&v29, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v17 + 1;
  if (v17 != -1)
  {
    v18 = *(_QWORD **)(a1 + 24);
    v30 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v18, (uint64_t)&v30, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v19 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v19;
  v20 = *(_QWORD **)(a1 + 24);
  v31 = *(_BYTE *)(a1 + 33);
  return sub_20E86A980(v20, (uint64_t)&v31, 1);
}

char **sub_20EEA064C(char **a1)
{
  std::locale::facet *v2;
  unint64_t v3;
  uint64_t v4;
  std::locale::facet_vtbl *v5;
  char *v6;
  int64_t v7;
  int64_t v8;
  unsigned __int8 *v9;
  char *v10;
  const std::locale::facet *v11;
  char v12;
  char *v13;
  uint64_t v14;
  __int128 *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _BYTE **v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  void **v35;
  __int128 v36;
  void **v37;
  size_t v38;
  void **v39;
  __int128 v40;
  void **v41;
  size_t v42;
  __int128 v43;
  std::locale *v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  char *v48;
  unsigned int v49;
  size_t v50;
  void **v51;
  void **v52;
  _BYTE *v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  std::string *v58;
  uint64_t v59;
  void **v60;
  size_t v61;
  void **v62;
  unsigned __int8 *v63;
  unint64_t v64;
  char *v65;
  unsigned int v66;
  unsigned __int8 *v67;
  int v68;
  void **v69;
  _BYTE *v70;
  BOOL v71;
  char *v72;
  int *v73;
  _DWORD *v74;
  int v75;
  void **v76;
  _BYTE *v77;
  char *v78;
  unsigned int *v79;
  unsigned int v80;
  int v81;
  char *v82;
  unsigned int *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  char *v88;
  uint64_t v89;
  int v90;
  char v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  int v96;
  char *v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  _BOOL4 v104;
  int v105;
  char *v106;
  char v107;
  char *v108;
  int v109;
  int v110;
  char *v111;
  int v112;
  char *v113;
  int v114;
  char *v115;
  char *v116;
  unsigned int v117;
  unsigned __int8 *v118;
  int v119;
  unsigned int v120;
  char v121;
  std::string *v122;
  void **v123;
  int v124;
  _DWORD *v125;
  uint64_t v126;
  char v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  char *v134;
  char v135;
  int *v136;
  uint64_t v137;
  int v138;
  char *v139;
  char v140;
  char *v141;
  void *v142;
  unsigned int v143;
  unsigned __int8 v144;
  int v145;
  int v146;
  char v147;
  unint64_t v148;
  uint64_t v149;
  std::string *v150;
  int __c;
  void *v152[4];
  char *v153;
  std::locale v154;
  void *v155[2];
  void *__p[4];
  __int128 v157;
  __int128 v158;
  char v159;
  std::locale v160;
  uint64_t v161;
  int v162;
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  a1[8] = 0;
  v150 = (std::string *)(a1 + 8);
  v137 = (uint64_t)(a1 + 3);
  a1[9] = 0;
  a1[10] = 0;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)((char *)a1 + 45) = 0u;
  *((_BYTE *)a1 + 88) = -1;
  std::streambuf::basic_streambuf();
  a1[12] = (char *)&off_24C9EF170;
  a1[20] = 0;
  *((_BYTE *)a1 + 168) = 0;
  *((_DWORD *)a1 + 43) = 24;
  *((_BYTE *)a1 + 184) = 0;
  HIBYTE(v152[2]) = 17;
  strcpy((char *)v152, "%08u_keypoint.csv");
  MEMORY[0x212BC61AC](&v154);
  v2 = (std::locale::facet *)std::locale::use_facet(&v154, MEMORY[0x24BEDB350]);
  std::locale::~locale(&v154);
  __c = ((uint64_t (*)(std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 37);
  v3 = 0;
  LODWORD(v4) = 0;
  v147 = *((_BYTE *)a1 + 88);
  v5 = v2[1].__vftable;
  while (1)
  {
    v6 = (char *)memchr((char *)v152 + v3, __c, 17 - v3);
    if (!v6)
      break;
    v7 = v6 - (char *)v152;
    if (v6 - (char *)v152 == -1)
      break;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >= 0x11)
    {
      if ((v147 & 1) != 0)
      {
        v154.__locale_ = (std::locale::__imp *)&off_24C9EF2F8;
        v155[0] = (void *)(v6 - (char *)v152);
        v155[1] = (void *)17;
        sub_20EEA241C((uint64_t)&v154);
      }
      LODWORD(v4) = v4 + 1;
      if (!*((_BYTE *)a1 + 184))
        goto LABEL_21;
LABEL_18:
      std::locale::locale(&v154, (const std::locale *)a1 + 24);
      goto LABEL_22;
    }
    if (*((unsigned __int8 *)v152 + v8) == *v6)
    {
      v3 = v7 + 2;
      if (v3 >= 0x11)
        break;
    }
    else
    {
      v9 = (unsigned __int8 *)v152 + v8;
      if (v8 != 17)
      {
        v10 = (char *)((char *)&v152[2] - v6);
        while (((char)*v9 & 0x80000000) == 0 && (*((_DWORD *)&v5->~facet + *v9) & 0x400) != 0)
        {
          ++v9;
          if (!--v10)
          {
            v9 = (unsigned __int8 *)&v152[2] + 1;
            break;
          }
        }
      }
      v3 = v9 - (unsigned __int8 *)v152;
      if (v3 < 0x11 && *((unsigned __int8 *)v152 + v3) == __c)
        ++v3;
      LODWORD(v4) = v4 + 1;
      if (v3 >= 0x11)
        break;
    }
  }
  if (*((_BYTE *)a1 + 184))
    goto LABEL_18;
LABEL_21:
  MEMORY[0x212BC61AC](&v154);
LABEL_22:
  v11 = std::locale::use_facet(&v154, MEMORY[0x24BEDB350]);
  v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
  v4 = (int)v4;
  std::locale::~locale(&v154);
  v14 = (uint64_t)*a1;
  v13 = a1[1];
  v15 = &xmmword_210385000;
  v16 = (v13 - *a1) / 120;
  if (v13 == *a1)
  {
    LODWORD(v154.__locale_) = -1;
    v159 = 0;
    *(_OWORD *)v155 = 0u;
    memset(__p, 0, sizeof(__p));
    *(_QWORD *)&v157 = 0;
    *((_QWORD *)&v157 + 1) = 6;
    LOBYTE(v158) = v12;
    HIDWORD(v158) = 0;
    *(_QWORD *)((char *)&v158 + 4) = 4098;
    v161 = 0x7FFFFFFFFFFFFFFFLL;
    v162 = 0;
    v17 = (uint64_t)a1[2];
    if (0xEEEEEEEEEEEEEEEFLL * ((v17 - v14) >> 3) < (int)v4)
    {
      if (v13)
      {
        operator delete(v13);
        v17 = 0;
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      if ((v4 & 0x80000000) != 0)
        goto LABEL_338;
      v18 = 0xEEEEEEEEEEEEEEEFLL * (v17 >> 3);
      v19 = 0xDDDDDDDDDDDDDDDELL * (v17 >> 3);
      if (v19 <= (int)v4)
        v19 = (int)v4;
      v20 = v18 >= 0x111111111111111 ? 0x222222222222222 : v19;
      if (v20 > 0x222222222222222)
LABEL_338:
        sub_20E867F44();
      v21 = (char *)operator new(120 * v20);
      *a1 = v21;
      a1[1] = v21;
      a1[2] = &v21[120 * v20];
      v22 = 120 * (int)v4;
      v23 = (uint64_t)&v21[v22];
      do
      {
        sub_20EEA24C0((uint64_t)v21, (uint64_t)&v154);
        v21 += 120;
        v22 -= 120;
      }
      while (v22);
LABEL_89:
      a1[1] = (char *)v23;
      if (v159)
      {
        std::locale::~locale(&v160);
        v159 = 0;
      }
      if (SHIBYTE(__p[3]) < 0)
      {
        operator delete(__p[1]);
        if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
          goto LABEL_93;
      }
      else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      {
        goto LABEL_93;
      }
      operator delete(v155[0]);
      if ((*((char *)a1 + 87) & 0x80000000) == 0)
        goto LABEL_94;
LABEL_97:
      v47 = (std::string *)a1[8];
      a1[9] = 0;
      goto LABEL_98;
    }
    v148 = v16;
    if (v16 >= (int)v4)
      v32 = (int)v4;
    else
      v32 = v16;
    if (v32)
    {
      v33 = v13 + 104;
      do
      {
        *((_DWORD *)v33 - 26) = v154.__locale_;
        if (v33 - 104 != (char *)&v154)
        {
          v35 = (void **)(v33 - 96);
          if (*(v33 - 73) < 0)
          {
            if (SHIBYTE(__p[0]) >= 0)
              v37 = v155;
            else
              v37 = (void **)v155[0];
            if (SHIBYTE(__p[0]) >= 0)
              v38 = HIBYTE(__p[0]);
            else
              v38 = (size_t)v155[1];
            sub_20E867CBC(v35, v37, v38);
          }
          else if ((HIBYTE(__p[0]) & 0x80) != 0)
          {
            sub_20E867BF8(v35, v155[0], (size_t)v155[1]);
          }
          else
          {
            v36 = *(_OWORD *)v155;
            *((void **)v33 - 10) = __p[0];
            *(_OWORD *)v35 = v36;
          }
          v39 = (void **)(v33 - 72);
          if (*(v33 - 49) < 0)
          {
            if (SHIBYTE(__p[3]) >= 0)
              v41 = &__p[1];
            else
              v41 = (void **)__p[1];
            if (SHIBYTE(__p[3]) >= 0)
              v42 = HIBYTE(__p[3]);
            else
              v42 = (size_t)__p[2];
            sub_20E867CBC(v39, v41, v42);
          }
          else if ((HIBYTE(__p[3]) & 0x80) != 0)
          {
            sub_20E867BF8(v39, __p[1], (size_t)__p[2]);
          }
          else
          {
            v40 = *(_OWORD *)&__p[1];
            *((void **)v33 - 7) = __p[3];
            *(_OWORD *)v39 = v40;
          }
        }
        v43 = v158;
        *((_OWORD *)v33 - 3) = v157;
        *((_OWORD *)v33 - 2) = v43;
        if (*(v33 - 16))
        {
          v44 = (std::locale *)(v33 - 8);
          if (v159)
          {
            std::locale::operator=(v44, &v160);
          }
          else
          {
            std::locale::~locale(v44);
            *(v33 - 16) = 0;
          }
        }
        else if (v159)
        {
          std::locale::locale((std::locale *)v33 - 1, &v160);
          *(v33 - 16) = 1;
        }
        v34 = v161;
        *((_DWORD *)v33 + 2) = v162;
        *(_QWORD *)v33 = v34;
        v33 += 120;
        --v32;
      }
      while (v32);
    }
    if ((int)v4 > v148)
    {
      v45 = (uint64_t)a1[1];
      v23 = v45 + 120 * ((int)v4 - v148);
      v46 = 120 * (int)v4 - 120 * v148;
      do
      {
        sub_20EEA24C0(v45, (uint64_t)&v154);
        v45 += 120;
        v46 -= 120;
      }
      while (v46);
      v15 = &xmmword_210385000;
      goto LABEL_89;
    }
    v134 = a1[1];
    v23 = (uint64_t)&(*a1)[120 * (int)v4];
    v15 = &xmmword_210385000;
    while (1)
    {
      if (v134 == (char *)v23)
        goto LABEL_89;
      if (*(v134 - 32))
      {
        std::locale::~locale((std::locale *)v134 - 3);
        *(v134 - 32) = 0;
      }
      if (*(v134 - 65) < 0)
      {
        operator delete(*((void **)v134 - 11));
        if ((*(v134 - 89) & 0x80000000) == 0)
          goto LABEL_329;
      }
      else if ((*(v134 - 89) & 0x80000000) == 0)
      {
        goto LABEL_329;
      }
      operator delete(*((void **)v134 - 14));
LABEL_329:
      v134 -= 120;
    }
  }
  if ((int)v4 > v16)
  {
    LODWORD(v154.__locale_) = -1;
    v159 = 0;
    *(_OWORD *)v155 = 0u;
    memset(__p, 0, sizeof(__p));
    *(_QWORD *)&v157 = 0;
    *((_QWORD *)&v157 + 1) = 6;
    LOBYTE(v158) = v12;
    HIDWORD(v158) = 0;
    *(_QWORD *)((char *)&v158 + 4) = 4098;
    v161 = 0x7FFFFFFFFFFFFFFFLL;
    v162 = 0;
    sub_20EEA2ECC((void **)a1, (int)v4 - v16, (uint64_t)&v154);
    if (v159)
    {
      std::locale::~locale(&v160);
      v159 = 0;
    }
    if (SHIBYTE(__p[3]) < 0)
    {
      operator delete(__p[1]);
      if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
        goto LABEL_28;
    }
    else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
    {
LABEL_28:
      sub_20EB884A4(v137, 0, 0);
LABEL_43:
      v24 = 56;
      while (1)
      {
        v29 = *a1;
        v30 = (uint64_t)&(*a1)[v24];
        *(_DWORD *)(v30 - 56) = -1;
        *(_QWORD *)(v30 + 48) = 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(v30 + 56) = 0;
        v31 = (_BYTE **)(v30 - 48);
        if (*(char *)(v30 - 25) < 0)
        {
          v25 = *v31;
          *(_QWORD *)(v30 - 40) = 0;
          *v25 = 0;
          v26 = &v29[v24];
          v27 = &v29[v24 - 24];
          if (v29[v24 - 1] < 0)
            goto LABEL_49;
        }
        else
        {
          *(_BYTE *)(v30 - 25) = 0;
          *(_BYTE *)v31 = 0;
          v26 = &v29[v24];
          v27 = &v29[v24 - 24];
          if (v29[v24 - 1] < 0)
          {
LABEL_49:
            v27 = *(char **)v27;
            *((_QWORD *)v26 - 2) = 0;
            goto LABEL_46;
          }
        }
        *(v26 - 1) = 0;
LABEL_46:
        *v27 = 0;
        v28 = &v29[v24];
        *(_OWORD *)v28 = xmmword_210385430;
        v28[16] = v12;
        *((_DWORD *)v28 + 7) = 0;
        v24 += 120;
        *(_QWORD *)(v28 + 20) = 4098;
        if (!--v4)
          goto LABEL_93;
      }
    }
    operator delete(v155[0]);
    goto LABEL_28;
  }
  sub_20EB884A4(v137, 0, 0);
  if ((_DWORD)v4)
    goto LABEL_43;
LABEL_93:
  if (*((char *)a1 + 87) < 0)
    goto LABEL_97;
LABEL_94:
  *((_BYTE *)a1 + 87) = 0;
  v47 = v150;
LABEL_98:
  v47->__r_.__value_.__s.__data_[0] = 0;
  v48 = (char *)HIBYTE(v152[2]);
  v49 = SHIBYTE(v152[2]) >> 31;
  if (SHIBYTE(v152[2]) >= 0)
    v50 = HIBYTE(v152[2]);
  else
    v50 = (size_t)v152[1];
  if (!v50)
  {
    v140 = 0;
    v54 = 0;
    v146 = 0;
    v120 = -1;
    v121 = 1;
    v122 = v150;
    goto LABEL_291;
  }
  v51 = (void **)v152[0];
  if (SHIBYTE(v152[2]) >= 0)
    v52 = v152;
  else
    v52 = (void **)v152[0];
  v53 = memchr(v52, __c, v50);
  v54 = 0;
  if (!v53 || (v55 = v53 - (_BYTE *)v52, v53 - (_BYTE *)v52 == -1))
  {
    v140 = 0;
    v146 = 0;
    v122 = v150;
    v15 = &xmmword_210385000;
    v121 = 1;
    v120 = -1;
    goto LABEL_291;
  }
  v146 = 0;
  v56 = 0;
  v140 = 0;
  v57 = 0;
  v138 = -1;
  v135 = 1;
  do
  {
    v54 = v55;
    v58 = v150;
    if ((_DWORD)v57)
      v58 = (std::string *)&(*a1)[120 * (int)v57 - 88];
    v59 = v55 + 1;
    v60 = v152;
    if ((v49 & 1) != 0)
      v60 = v51;
    if (*((unsigned __int8 *)v60 + v59) == *((unsigned __int8 *)v60 + v54))
    {
      sub_20EEA25B4(v58, (unint64_t)v52 + v56, (char *)v52 + v59);
      v54 += 2;
LABEL_114:
      v61 = v54;
      goto LABEL_130;
    }
    if (v54 != v56)
    {
      sub_20EEA25B4(v58, (unint64_t)v52 + v56, (char *)v52 + v54);
      v48 = (char *)HIBYTE(v152[2]);
    }
    if ((v48 & 0x80) != 0)
    {
      v62 = (void **)v152[0];
      v48 = (char *)v152[1];
    }
    else
    {
      v62 = v152;
    }
    v63 = (unsigned __int8 *)v62 + v59;
    v64 = (unint64_t)&v48[(_QWORD)v62];
    v153 = &v48[(_QWORD)v62];
    v65 = *a1;
    v149 = v57;
    v66 = *((unsigned __int8 *)a1 + 88);
    *(_DWORD *)&(*a1)[120 * (int)v57] = -1;
    v142 = v48;
    if ((uint64_t)v48 <= v59)
    {
      if ((v66 & 1) != 0)
      {
        v154.__locale_ = (std::locale::__imp *)&off_24C9EF2F8;
        v155[0] = (void *)(v54 + 1);
        v155[1] = v48;
        sub_20EEA241C((uint64_t)&v154);
      }
      goto LABEL_127;
    }
    v136 = (int *)&v65[120 * (int)v57];
    v139 = v65;
    v143 = v66;
    v141 = (char *)v62 + v59;
    v145 = *v63;
    v144 = ((uint64_t (*)(std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 124);
    v67 = (unsigned __int8 *)v62 + v59;
    if (v145 == v144)
    {
      v63 = (unsigned __int8 *)(v141 + 1);
      if ((unint64_t)(v141 + 1) >= v64)
      {
        if ((v143 & 1) != 0)
        {
          v154.__locale_ = (std::locale::__imp *)&off_24C9EF2F8;
          v155[0] = (void *)(v54 + 2);
          v155[1] = v142;
          sub_20EEA241C((uint64_t)&v154);
        }
        goto LABEL_127;
      }
      v67 = (unsigned __int8 *)(v141 + 1);
    }
    v68 = *v67;
    if (v68 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 48)
      || (char)*v67 < 0
      || (*((_DWORD *)&v2[1].~facet + *v67) & 0x400) == 0)
    {
      goto LABEL_145;
    }
    if ((unsigned __int8 *)v64 != v67)
    {
      v87 = 0;
      v88 = (char *)(v67 - (unsigned __int8 *)v62 + 1);
      while (1)
      {
        v89 = *v67;
        if ((char)*v67 < 0 || (*((_DWORD *)&v2[1].~facet + v89) & 0x400) == 0)
          break;
        v87 = ((uint64_t (*)(std::locale::facet *, _QWORD, _QWORD))v2->__vftable[3].~facet)(v2, (char)v89, 0)+ 10 * v87- 48;
        ++v67;
        ++v88;
        if (v67 == (unsigned __int8 *)v64)
          goto LABEL_192;
      }
      if ((unint64_t)v67 < v64)
      {
        if ((_DWORD)v89 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 37))
        {
          *v136 = v87 - 1;
          v63 = v67 + 1;
          if (v145 == v144 && (v143 & 1) != 0)
          {
            v154.__locale_ = (std::locale::__imp *)&off_24C9EF2F8;
            v155[0] = v88;
            v155[1] = v142;
            sub_20EEA241C((uint64_t)&v154);
          }
LABEL_158:
          v76 = v152;
          if (SHIBYTE(v152[2]) < 0)
            v76 = (void **)v152[0];
          v77 = *a1;
          v78 = &(*a1)[120 * (int)v149];
          v79 = (unsigned int *)(v78 + 112);
          v80 = *((_DWORD *)v78 + 28);
          v81 = v138;
          v57 = v149;
          if ((v80 & 1) != 0)
          {
            v82 = &v77[120 * (int)v149];
            v85 = *((_DWORD *)v82 + 19);
            v83 = (unsigned int *)(v82 + 76);
            v84 = v85;
            if ((v85 & 0x20) != 0)
            {
              v80 &= ~1u;
              *v79 = v80;
              if ((v80 & 2) != 0)
              {
LABEL_164:
                if ((v77[120 * (int)v149 + 77] & 8) != 0)
                  *v79 = v80 & 0xFFFFFFFD;
              }
LABEL_169:
              v54 = v63 - (unsigned __int8 *)v76;
              v86 = *(_DWORD *)v78;
              if (*(_DWORD *)v78 != -3)
              {
                if (v86 == -1)
                {
                  v135 = 0;
                }
                else if (v86 == -2)
                {
                  v140 = 1;
                }
                else
                {
                  if (v86 > v138)
                    v81 = *(_DWORD *)v78;
                  v138 = v81;
                }
                ++v146;
                v57 = (v149 + 1);
              }
              goto LABEL_114;
            }
            v80 &= ~2u;
            *v79 = v80;
            v77[120 * (int)v149 + 72] = 48;
            *v83 = v84 & 0xFFFFFF4F | 0x10;
          }
          if ((v80 & 2) != 0)
            goto LABEL_164;
          goto LABEL_169;
        }
        v95 = *v67;
        if (v95 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 36))
        {
          *v136 = v87 - 1;
          ++v67;
LABEL_145:
          if (v67 == (unsigned __int8 *)v64)
          {
LABEL_157:
            v63 = (unsigned __int8 *)v64;
            if ((v143 & 1) != 0)
            {
              v154.__locale_ = (std::locale::__imp *)&off_24C9EF2F8;
              v155[0] = (void *)(v64 - (_QWORD)v62);
              v155[1] = v142;
              sub_20EEA241C((uint64_t)&v154);
            }
            goto LABEL_158;
          }
          v72 = &v139[120 * (int)v149];
          v73 = (int *)(v72 + 76);
          v74 = v72 + 112;
          while (2)
          {
            switch(((unsigned int (*)(std::locale::facet *, _QWORD, _QWORD))v2->__vftable[3].~facet)(v2, (char)*v67, 0))
            {
              case ' ':
                *v74 |= 2u;
                goto LABEL_149;
              case '#':
                v75 = *v73 | 0x600;
                goto LABEL_148;
              case '\'':
                goto LABEL_149;
              case '+':
                v75 = *v73 | 0x800;
                goto LABEL_148;
              case '-':
                v75 = *v73 | 0x20;
                goto LABEL_148;
              case '0':
                *v74 |= 1u;
                goto LABEL_149;
              case '=':
                *v74 |= 4u;
                goto LABEL_149;
              case '_':
                v75 = *v73 | 0x10;
LABEL_148:
                *v73 = v75;
LABEL_149:
                if (++v67 != (unsigned __int8 *)v64)
                  continue;
                goto LABEL_157;
              default:
                v90 = *v67;
                if (v90 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 42))
                {
                  ++v67;
                  goto LABEL_205;
                }
                if (v67 == (unsigned __int8 *)v64)
                  goto LABEL_212;
                v91 = v143;
                if (((char)*v67 & 0x80000000) == 0 && (*((_DWORD *)&v2[1].~facet + *v67) & 0x400) != 0)
                {
                  v92 = &v139[120 * (int)v149];
                  *((_QWORD *)v92 + 7) = 0;
                  v93 = v92 + 56;
                  while (((char)*v67 & 0x80000000) == 0)
                  {
                    v94 = *v67;
                    if ((*((_DWORD *)&v2[1].~facet + v94) & 0x400) == 0)
                      break;
                    *v93 = 10 * *v93
                         + ((int (*)(std::locale::facet *, _QWORD, _QWORD))v2->__vftable[3].~facet)(v2, (char)v94, 0)- 48;
                    if (++v67 == (unsigned __int8 *)v64)
                      goto LABEL_213;
                  }
                }
                break;
            }
            break;
          }
        }
        else
        {
          *(_QWORD *)&v139[120 * (int)v149 + 56] = v87;
          *v136 = -1;
        }
LABEL_205:
        if ((unint64_t)v67 >= v64)
        {
          v64 = (unint64_t)v67;
LABEL_212:
          v91 = v143;
LABEL_213:
          if ((v91 & 1) != 0)
          {
            v154.__locale_ = (std::locale::__imp *)&off_24C9EF2F8;
            v155[0] = (void *)(v64 - (_QWORD)v62);
            v155[1] = v142;
            sub_20EEA241C((uint64_t)&v154);
          }
          goto LABEL_248;
        }
        v96 = *v67;
        if (v96 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 46))
        {
          v63 = v67 + 1;
          v97 = v139;
          if (v67 + 1 != (unsigned __int8 *)v64)
          {
            v98 = *v63;
            if (v98 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 42))
            {
              v99 = 0;
              v63 = v67 + 2;
              if (v67 + 2 != (unsigned __int8 *)v64)
                goto LABEL_220;
LABEL_247:
              if ((v143 & 1) != 0)
              {
                v154.__locale_ = (std::locale::__imp *)&off_24C9EF2F8;
                v155[0] = (void *)(v59 - (_QWORD)v141 + v64);
                v155[1] = v142;
                sub_20EEA241C((uint64_t)&v154);
              }
LABEL_248:
              v63 = (unsigned __int8 *)v64;
              goto LABEL_158;
            }
            v97 = v139;
            if (((char)*v63 & 0x80000000) == 0 && (*((_DWORD *)&v2[1].~facet + *v63) & 0x400) != 0)
            {
              v63 = sub_20EEA2960(v67 + 1, &v153, &v139[120 * (int)v149 + 64], v2);
              v99 = 1;
              if (v63 != (unsigned __int8 *)v64)
              {
LABEL_220:
                v100 = v99;
                v101 = 0;
                v102 = v63 - (unsigned __int8 *)v62;
                while (1)
                {
                  switch(((unsigned int (*)(std::locale::facet *, _QWORD, _QWORD))v2->__vftable[3].~facet)(v2, (char)*v63, 0))
                  {
                    case '2':
                      if (v101 == 51)
                        goto LABEL_227;
                      goto LABEL_232;
                    case '3':
                      if (v101 != 73)
                        goto LABEL_232;
                      v101 = 51;
                      goto LABEL_222;
                    case '4':
                      if (v101 != 54)
                        goto LABEL_232;
LABEL_227:
                      v101 = 0;
                      goto LABEL_222;
                    case '6':
                      if (v101 != 73)
                      {
LABEL_232:
                        sub_20EEA290C(v143, v102, (uint64_t)v142);
                        goto LABEL_158;
                      }
                      v101 = 54;
LABEL_222:
                      ++v63;
                      ++v102;
                      if (v63 == (unsigned __int8 *)v64)
                        goto LABEL_247;
                      break;
                    case 'I':
                      v101 = 73;
                      goto LABEL_222;
                    case 'L':
                    case 'h':
                    case 'j':
                    case 'l':
                    case 'w':
                    case 'z':
                      goto LABEL_222;
                    default:
                      v104 = v101 != 73 && v101 != 0;
                      if ((unint64_t)v63 >= v64 || v104)
                      {
                        v64 = (unint64_t)v63;
                        goto LABEL_247;
                      }
                      if (v145 == v144
                        && (v105 = *v63,
                            v105 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 124)))
                      {
                        ++v63;
                      }
                      else
                      {
                        switch(((unsigned int (*)(std::locale::facet *, _QWORD, _QWORD))v2->__vftable[3].~facet)(v2, (char)*v63, 0))
                        {
                          case 'A':
                            v111 = &v139[120 * (int)v149];
                            v112 = *((_DWORD *)v111 + 19) | 0x4000;
                            *((_DWORD *)v111 + 19) = v112;
                            goto LABEL_270;
                          case 'C':
                          case 'c':
                            *(_QWORD *)&v139[120 * (int)v149 + 104] = 1;
                            goto LABEL_276;
                          case 'E':
                            v113 = &v139[120 * (int)v149];
                            v114 = *((_DWORD *)v113 + 19) | 0x4000;
                            *((_DWORD *)v113 + 19) = v114;
                            goto LABEL_274;
                          case 'F':
                            v115 = &v139[120 * (int)v149];
                            v110 = *((_DWORD *)v115 + 19) | 0x4000;
                            *((_DWORD *)v115 + 19) = v110;
                            goto LABEL_267;
                          case 'G':
                            *(_DWORD *)&v139[120 * (int)v149 + 76] |= 0x4000u;
                            goto LABEL_276;
                          case 'S':
                          case 's':
                            if (v100)
                              *(_QWORD *)&v139[120 * (int)v149 + 104] = *(_QWORD *)&v139[120 * (int)v149 + 64];
                            *(_QWORD *)&v139[120 * (int)v149 + 64] = 6;
                            goto LABEL_276;
                          case 'T':
                            if ((unint64_t)++v63 >= v64)
                            {
                              sub_20EEA290C(v143, v102 + 1, (uint64_t)v142);
                              goto LABEL_127;
                            }
                            v106 = &v139[120 * (int)v149];
                            v106[72] = *v63;
                            *((_DWORD *)v106 + 28) |= 8u;
LABEL_258:
                            v109 = -2;
LABEL_272:
                            *v136 = v109;
LABEL_276:
                            v118 = v63 + 1;
                            if (v145 == v144)
                            {
                              if (v118 == (unsigned __int8 *)v64
                                || (v119 = *v118,
                                    v119 != ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 124)))
                              {
                                sub_20EEA290C(v143, (uint64_t)&v118[v59 - (_QWORD)v141], (uint64_t)v142);
                                ++v63;
                              }
                              else
                              {
                                v63 += 2;
                              }
                            }
                            else
                            {
                              ++v63;
                            }
                            break;
                          case 'X':
                            *(_DWORD *)&v139[120 * (int)v149 + 76] |= 0x4000u;
                            goto LABEL_261;
                          case 'a':
                            v112 = *(_DWORD *)&v139[120 * (int)v149 + 76];
LABEL_270:
                            v116 = &v139[120 * (int)v149];
                            v117 = v112 & 0xFFFFFEB1 | 0x104;
                            goto LABEL_275;
                          case 'b':
                            *(_DWORD *)&v139[120 * (int)v149 + 76] |= 1u;
                            goto LABEL_276;
                          case 'd':
                          case 'g':
                          case 'i':
                          case 'u':
                            goto LABEL_276;
                          case 'e':
                            v114 = *(_DWORD *)&v139[120 * (int)v149 + 76];
LABEL_274:
                            v116 = &v139[120 * (int)v149];
                            v117 = v114 | 0x100;
                            goto LABEL_275;
                          case 'f':
                            v110 = *(_DWORD *)&v139[120 * (int)v149 + 76];
LABEL_267:
                            v116 = &v139[120 * (int)v149];
                            v117 = v110 | 4;
LABEL_275:
                            *((_DWORD *)v116 + 19) = v117;
                            goto LABEL_276;
                          case 'n':
                            v109 = -3;
                            goto LABEL_272;
                          case 'o':
                            *(_DWORD *)&v139[120 * (int)v149 + 76] = *(_DWORD *)&v139[120 * (int)v149 + 76] & 0xFFFFFFB5 | 0x40;
                            goto LABEL_276;
                          case 'p':
                          case 'x':
LABEL_261:
                            *(_DWORD *)&v139[120 * (int)v149 + 76] = *(_DWORD *)&v139[120 * (int)v149 + 76] & 0xFFFFFFB5 | 8;
                            goto LABEL_276;
                          case 't':
                            v107 = ((uint64_t (*)(std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 32);
                            v108 = &v139[120 * (int)v149];
                            v108[72] = v107;
                            *((_DWORD *)v108 + 28) |= 8u;
                            goto LABEL_258;
                          default:
                            sub_20EEA290C(v143, v102, (uint64_t)v142);
                            goto LABEL_276;
                        }
                      }
                      goto LABEL_158;
                  }
                }
              }
              goto LABEL_247;
            }
          }
          v99 = 0;
          *(_QWORD *)&v97[120 * (int)v149 + 64] = 0;
          if (v63 != (unsigned __int8 *)v64)
            goto LABEL_220;
          goto LABEL_247;
        }
        v99 = 0;
        v63 = v67;
        if (v67 != (unsigned __int8 *)v64)
          goto LABEL_220;
        goto LABEL_247;
      }
      v64 = (unint64_t)v67;
    }
LABEL_192:
    if ((v143 & 1) != 0)
    {
      v154.__locale_ = (std::locale::__imp *)&off_24C9EF2F8;
      v155[0] = (void *)(v64 - (_QWORD)v62);
      v155[1] = v142;
      sub_20EEA241C((uint64_t)&v154);
    }
    v63 = (unsigned __int8 *)v64;
LABEL_127:
    v69 = v152;
    if (SHIBYTE(v152[2]) < 0)
      v69 = (void **)v152[0];
    v61 = v63 - (unsigned __int8 *)v69;
    v57 = v149;
LABEL_130:
    v48 = (char *)HIBYTE(v152[2]);
    v49 = SHIBYTE(v152[2]) >> 31;
    if (SHIBYTE(v152[2]) >= 0)
      v50 = HIBYTE(v152[2]);
    else
      v50 = (size_t)v152[1];
    if (v50 <= v61)
      break;
    v51 = (void **)v152[0];
    v52 = SHIBYTE(v152[2]) >= 0 ? v152 : (void **)v152[0];
    v70 = memchr((char *)v52 + v61, __c, v50 - v61);
    v55 = v70 - (_BYTE *)v52;
    v71 = !v70 || v55 == -1;
    v56 = v54;
  }
  while (!v71);
  v15 = &xmmword_210385000;
  if ((_DWORD)v57)
    v122 = (std::string *)&(*a1)[120 * (int)v57 - 88];
  else
    v122 = v150;
  v121 = v135;
  v120 = v138;
LABEL_291:
  v123 = (void **)v152[0];
  if (!v49)
    v123 = v152;
  sub_20EEA25B4(v122, (unint64_t)v123 + v54, (char *)v123 + v50);
  if ((v121 & 1) == 0)
  {
    if ((v120 & 0x80000000) == 0 && ((_BYTE)a1[11] & 1) != 0)
    {
      v154.__locale_ = (std::locale::__imp *)&off_24C9EF2F8;
      v155[0] = (void *)v120;
      v155[1] = 0;
      sub_20EEA241C((uint64_t)&v154);
    }
    if (v146 < 1)
    {
      v124 = 0;
    }
    else
    {
      v124 = 0;
      v125 = *a1;
      v126 = v146;
      do
      {
        if (*v125 == -1)
          *v125 = v124++;
        v125 += 30;
        --v126;
      }
      while (v126);
    }
    v120 = v124 - 1;
  }
  v127 = ((uint64_t (*)(std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 32);
  LODWORD(v154.__locale_) = -1;
  v159 = 0;
  *(_OWORD *)v155 = 0u;
  memset(__p, 0, sizeof(__p));
  *(_QWORD *)&v157 = 0;
  *((_QWORD *)&v157 + 1) = 6;
  LOBYTE(v158) = v127;
  HIDWORD(v158) = 0;
  *(_QWORD *)((char *)&v158 + 4) = *((_QWORD *)v15 + 508);
  v161 = 0x7FFFFFFFFFFFFFFFLL;
  v162 = 0;
  v128 = a1[1];
  v129 = 0xEEEEEEEEEEEEEEEFLL * ((v128 - *a1) >> 3);
  if (v146 > v129)
  {
    sub_20EEA2ECC((void **)a1, v146 - v129, (uint64_t)&v154);
    goto LABEL_316;
  }
  if (v146 < v129)
  {
    v130 = (uint64_t)&(*a1)[120 * v146];
    while (1)
    {
      if (v128 == (char *)v130)
      {
        a1[1] = (char *)v130;
        break;
      }
      if (*(v128 - 32))
      {
        std::locale::~locale((std::locale *)v128 - 3);
        *(v128 - 32) = 0;
      }
      if (*(v128 - 65) < 0)
      {
        operator delete(*((void **)v128 - 11));
        if ((*(v128 - 89) & 0x80000000) == 0)
          goto LABEL_308;
      }
      else if ((*(v128 - 89) & 0x80000000) == 0)
      {
        goto LABEL_308;
      }
      operator delete(*((void **)v128 - 14));
LABEL_308:
      v128 -= 120;
    }
  }
LABEL_316:
  if (v159)
  {
    std::locale::~locale(&v160);
    v159 = 0;
  }
  if (SHIBYTE(__p[3]) < 0)
  {
    operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      goto LABEL_324;
LABEL_320:
    v131 = *((_DWORD *)a1 + 12);
    if ((v140 & 1) != 0)
      goto LABEL_321;
LABEL_325:
    *((_DWORD *)a1 + 14) = v120 + 1;
    *((_DWORD *)a1 + 12) = v131 & 0xFFFFFFFE | v121 & 1;
    if (SHIBYTE(v152[2]) < 0)
LABEL_322:
      operator delete(v152[0]);
  }
  else
  {
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_320;
LABEL_324:
    operator delete(v155[0]);
    v131 = *((_DWORD *)a1 + 12);
    if ((v140 & 1) == 0)
      goto LABEL_325;
LABEL_321:
    v132 = v131 | 4;
    *((_DWORD *)a1 + 12) = v132;
    *((_DWORD *)a1 + 14) = v120 + 1;
    *((_DWORD *)a1 + 12) = v132 & 0xFFFFFFFE | v121 & 1;
    if (SHIBYTE(v152[2]) < 0)
      goto LABEL_322;
  }
  return a1;
}

void sub_20EEA1CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,std::exception a33)
{
  uint64_t v33;
  void *v35;

  std::exception::~exception(&a33);
  if (a30 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v33 + 184))
  {
    std::locale::~locale((std::locale *)(v33 + 192));
    *(_BYTE *)(v33 + 184) = 0;
  }
  sub_20EEA1DDC(a10);
  if (*(char *)(v33 + 87) < 0)
  {
    operator delete(*a23);
    v35 = *a12;
    if (*a12)
      goto LABEL_7;
  }
  else
  {
    v35 = *a12;
    if (*a12)
    {
LABEL_7:
      operator delete(v35);
      sub_20EEA1E28((void **)v33);
      _Unwind_Resume(a1);
    }
  }
  sub_20EEA1E28((void **)v33);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEA1DDC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C9EF170;
  if (*(_BYTE *)(a1 + 72))
    operator delete(*(void **)(a1 + 16));
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return std::streambuf::~streambuf();
}

void **sub_20EEA1E28(void **a1)
{
  std::locale *v2;
  std::locale *v3;
  void *v4;

  v2 = (std::locale *)*a1;
  if (*a1)
  {
    v3 = (std::locale *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_13:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (LOBYTE(v3[-4].__locale_))
      {
        std::locale::~locale(v3 - 3);
        LOBYTE(v3[-4].__locale_) = 0;
      }
      if (SHIBYTE(v3[-9].__locale_) < 0)
      {
        operator delete(v3[-11].__locale_);
        if (SHIBYTE(v3[-12].__locale_) < 0)
LABEL_11:
          operator delete(v3[-14].__locale_);
      }
      else if (SHIBYTE(v3[-12].__locale_) < 0)
      {
        goto LABEL_11;
      }
      v3 -= 15;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_13;
      }
    }
  }
  return a1;
}

void sub_20EEA1EC8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C9EF170;
  if (*(_BYTE *)(a1 + 72))
    operator delete(*(void **)(a1 + 16));
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::streambuf::~streambuf();
  JUMPOUT(0x212BC6398);
}

double sub_20EEA1F28@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double result;

  v5 = a1[6];
  if (v5 && a1[8] < v5)
    a1[8] = v5;
  if ((a4 & 8) != 0)
  {
    v6 = a1[3];
    if (v6)
    {
      if (a3)
      {
        if (a3 == 1)
        {
          if ((a4 & 0x10) != 0)
            goto LABEL_29;
          goto LABEL_21;
        }
        if (a3 != 2)
          goto LABEL_29;
        v7 = a1 + 8;
      }
      else
      {
        v7 = a1 + 2;
      }
      a2 = a2 - v6 + *v7;
LABEL_21:
      if (a1[2] <= (unint64_t)(v6 + a2) && (unint64_t)(v6 + a2) <= a1[8])
      {
        v9 = v6 + (int)a2;
        a1[3] = v9;
        if ((a4 & 0x10) == 0 || !v5)
          goto LABEL_27;
        LODWORD(v9) = v9 - v5;
LABEL_26:
        a1[6] = v5 + (int)v9;
LABEL_27:
        v8 = a2;
        goto LABEL_30;
      }
LABEL_29:
      v8 = -1;
      goto LABEL_30;
    }
  }
  v8 = -1;
  if ((a4 & 0x10) != 0 && v5)
  {
    if (!a3)
    {
      v11 = a1[5];
      v9 = v11 - v5 + a2;
      v10 = v11 + a2;
      if (v11 > v11 + a2)
        goto LABEL_29;
      goto LABEL_17;
    }
    if (a3 == 2)
    {
      v9 = a1[8] - v5 + a2;
      v10 = a1[8] + a2;
      if (a1[5] > v10)
        goto LABEL_29;
LABEL_17:
      a2 = v9;
      if (v10 <= a1[8])
        goto LABEL_26;
      goto LABEL_29;
    }
  }
LABEL_30:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v8;
  return result;
}

double sub_20EEA2040@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = *(_QWORD *)(a2 + 128);
  v5 = a1[6];
  if (v5 && a1[8] < v5)
    a1[8] = v5;
  if (v4 == -1)
  {
LABEL_16:
    v10 = -1;
    goto LABEL_17;
  }
  if ((a3 & 8) != 0)
  {
    v6 = a1[3];
    if (v6)
    {
      if ((v4 & 0x8000000000000000) == 0)
      {
        v7 = a1[2];
        if (v4 <= a1[8] - v7)
        {
          v8 = v6 + (int)v4 - (int)v6 + (int)v7;
          a1[3] = v8;
          if ((a3 & 0x10) == 0 || !v5)
            goto LABEL_20;
          v9 = v8 - v5;
LABEL_19:
          a1[6] = v5 + v9;
LABEL_20:
          v10 = v4;
          goto LABEL_17;
        }
      }
      goto LABEL_16;
    }
  }
  v10 = -1;
  if ((a3 & 0x10) != 0 && v5 && (v4 & 0x8000000000000000) == 0)
  {
    v11 = a1[2];
    if (v4 <= a1[8] - v11)
    {
      v9 = v4 - v5 + v11;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
LABEL_17:
  result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 128) = v10;
  return result;
}

uint64_t sub_20EEA2104(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v3;
  unint64_t v4;

  v1 = *(unsigned __int8 **)(a1 + 24);
  if (!v1)
    return 0xFFFFFFFFLL;
  if ((unint64_t)v1 < *(_QWORD *)(a1 + 32))
    return *v1;
  if ((*(_BYTE *)(a1 + 76) & 8) == 0)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    return 0xFFFFFFFFLL;
  v4 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)v1 >= v3 && (unint64_t)v1 >= v4)
    return 0xFFFFFFFFLL;
  if (v4 < v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    v4 = v3;
  }
  *(_QWORD *)(a1 + 32) = v4;
  return *v1;
}

uint64_t sub_20EEA2168(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  int v4;
  _BYTE *v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (!v2 || *(_QWORD *)(a1 + 16) >= v2)
    return 0xFFFFFFFFLL;
  if ((_DWORD)a2 != -1 && (*(_DWORD *)(a1 + 76) & 0x10) == 0)
  {
    v4 = *(unsigned __int8 *)(v2 - 1);
    v3 = (_BYTE *)(v2 - 1);
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = v3;
      *v3 = a2;
      return a2;
    }
    return 0xFFFFFFFFLL;
  }
  v6 = (_BYTE *)(v2 - 1);
  *(_QWORD *)(a1 + 24) = v6;
  if ((_DWORD)a2 == -1)
    return 0;
  *v6 = a2;
  return a2;
}

uint64_t sub_20EEA21D4(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  size_t v7;
  void *v8;
  unint64_t v9;
  BOOL v10;
  _BYTE *v11;
  size_t v12;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;

  if ((_DWORD)a2 == -1)
    return 0;
  v4 = *(_BYTE **)(a1 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v4 < v5)
    {
      *(_QWORD *)(a1 + 48) = v4 + 1;
      *v4 = a2;
      return a2;
    }
    if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v8 = *(void **)(a1 + 16);
    v7 = v5 - (_QWORD)v8;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v7 = 0;
    v8 = *(void **)(a1 + 16);
  }
  v9 = v7 >> 1;
  if (v7 >> 1 <= 0x100)
    v9 = 256;
  while (__CFADD__(v9, v7))
  {
    v10 = v9 >= 2;
    v9 >>= 1;
    if (!v10)
    {
      v11 = 0;
      v12 = v7;
LABEL_18:
      memmove(v11, v8, v7);
      v13 = 0;
      if (!*(_BYTE *)(a1 + 72))
        goto LABEL_20;
LABEL_19:
      operator delete(v8);
      goto LABEL_20;
    }
  }
  v12 = v9 + v7;
  v11 = operator new(v9 + v7);
  if (v7)
    goto LABEL_18;
  v13 = 1;
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_19;
LABEL_20:
  *(_BYTE *)(a1 + 72) = 1;
  if (v13)
  {
    v14 = &v11[v12];
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = &v11[v12];
    *(_QWORD *)(a1 + 64) = v11;
    if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = v11 + 1;
      if (v11 == v14)
        goto LABEL_23;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = v11;
      if (v11 == v14)
      {
LABEL_23:
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, a2);
        return a2;
      }
    }
  }
  else
  {
    v15 = &v11[*(_QWORD *)(a1 + 64) - (_QWORD)v8];
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(_DWORD *)(a1 + 48) - v16;
    v18 = v16 - (_QWORD)v8;
    v20 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 24);
    v21 = &v11[v18];
    v22 = &v11[v12];
    *(_QWORD *)(a1 + 56) = &v11[v12];
    *(_QWORD *)(a1 + 64) = v15;
    v23 = &v21[v17];
    *(_QWORD *)(a1 + 40) = v21;
    *(_QWORD *)(a1 + 48) = v23;
    if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = &v11[(int)v19 - (int)v20];
      v11 = &v21[v17];
      *(_QWORD *)(a1 + 32) = v23 + 1;
      if (v23 == v22)
        goto LABEL_23;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = 0;
      v24 = v11;
      v11 = &v21[v17];
      *(_QWORD *)(a1 + 32) = v24;
      if (v23 == v22)
        goto LABEL_23;
    }
  }
  *(_QWORD *)(a1 + 48) = v11 + 1;
  *v11 = a2;
  return a2;
}

void sub_20EEA241C(uint64_t a1)
{
  __n128 *exception;
  void *v3;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  sub_20EEA2A04(exception, a1);
  __cxa_throw(v3, (struct type_info *)&unk_24C9EF228, (void (*)(void *))sub_20EEA2A4C);
}

uint64_t sub_20EEA2454(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    std::locale::~locale((std::locale *)(a1 + 96));
    *(_BYTE *)(a1 + 88) = 0;
  }
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EEA24C0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v5 = a1 + 32;
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    v5 = a1 + 32;
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20E860C04((_BYTE *)v5, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
LABEL_6:
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    std::locale::locale((std::locale *)(a1 + 96), (const std::locale *)(a2 + 96));
    *(_BYTE *)(a1 + 88) = 1;
  }
  v8 = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v8;
  return a1;
}

void sub_20EEA2598(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *sub_20EEA25B4(std::string *this, unint64_t a2, char *a3)
{
  int v6;
  unint64_t v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  unint64_t v12;
  _OWORD *p_p;
  _BYTE *v14;
  char *v15;
  __int128 *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  size_t v20;
  std::string *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  char v31;
  std::string::size_type v32;
  char v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  unint64_t v37;
  uint64_t v38;
  void *__p;
  std::string::size_type v40;
  int64_t v41;

  v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (unint64_t)&a3[-a2];
  if (v6 < 0)
  {
    if (a3 == (char *)a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v12 = this->__r_.__value_.__r.__words[2];
    v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v11 = (std::string *)this->__r_.__value_.__r.__words[0];
    v10 = HIBYTE(v12);
    if (this->__r_.__value_.__r.__words[0] > a2)
      goto LABEL_17;
  }
  else
  {
    if (a3 == (char *)a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    LOBYTE(v10) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    v11 = this;
    if ((unint64_t)this > a2)
    {
LABEL_17:
      if (v9 - size >= v7)
      {
        v22 = (char *)this;
        if ((v10 & 0x80) != 0)
          v22 = (char *)this->__r_.__value_.__r.__words[0];
LABEL_28:
        v23 = &v22[size];
        if ((char *)a2 != a3)
        {
          if (v7 >= 0x20)
          {
            v24 = (char *)a2;
            if ((unint64_t)&v22[size - a2] >= 0x20)
            {
              v23 += v7 & 0xFFFFFFFFFFFFFFE0;
              v24 = (char *)(a2 + (v7 & 0xFFFFFFFFFFFFFFE0));
              v27 = (__int128 *)(a2 + 16);
              v28 = &v22[size + 16];
              v29 = v7 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v30 = *v27;
                *((_OWORD *)v28 - 1) = *(v27 - 1);
                *(_OWORD *)v28 = v30;
                v27 += 2;
                v28 += 32;
                v29 -= 32;
              }
              while (v29);
              if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
                goto LABEL_40;
            }
          }
          else
          {
            v24 = (char *)a2;
          }
          do
          {
            v31 = *v24++;
            *v23++ = v31;
          }
          while (v24 != a3);
        }
LABEL_40:
        *v23 = 0;
        v32 = size + v7;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          this->__r_.__value_.__l.__size_ = v32;
        else
          *((_BYTE *)&this->__r_.__value_.__s + 23) = v32 & 0x7F;
        return this;
      }
      v20 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - v9 < size + v7 - v9)
        sub_20E860B7C();
      v21 = this;
      if (v6 < 0)
      {
        v21 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v9 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_21:
          v22 = (char *)operator new(0x7FFFFFFFFFFFFFF7uLL);
          if (!size)
          {
LABEL_23:
            if (v9 != 22)
              operator delete(v21);
            this->__r_.__value_.__l.__size_ = size;
            this->__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
            this->__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
            goto LABEL_28;
          }
LABEL_22:
          memmove(v22, v21, size);
          goto LABEL_23;
        }
      }
      else if (v9 > 0x3FFFFFFFFFFFFFF2)
      {
        goto LABEL_21;
      }
      v37 = 2 * v9;
      if (size + v7 > 2 * v9)
        v37 = size + v7;
      v38 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v37 | 7) != 0x17)
        v38 = v37 | 7;
      if (v37 >= 0x17)
        v20 = v38 + 1;
      else
        v20 = 23;
      v22 = (char *)operator new(v20);
      if (!size)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  if ((unint64_t)v11->__r_.__value_.__r.__words + size + 1 <= a2)
    goto LABEL_17;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v7 > 0x16)
  {
    v25 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v25 = v7 | 7;
    v26 = v25 + 1;
    p_p = operator new(v25 + 1);
    v40 = v7;
    v41 = v26 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a2 != a3)
      goto LABEL_11;
LABEL_34:
    v14 = p_p;
    goto LABEL_45;
  }
  HIBYTE(v41) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3)
    goto LABEL_34;
LABEL_11:
  if (v7 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    v14 = p_p;
    v15 = (char *)a2;
  }
  else
  {
    v14 = (char *)p_p + (v7 & 0xFFFFFFFFFFFFFFE0);
    v15 = (char *)(a2 + (v7 & 0xFFFFFFFFFFFFFFE0));
    v16 = (__int128 *)(a2 + 16);
    v17 = p_p + 1;
    v18 = v7 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v19 = *v16;
      *(v17 - 1) = *(v16 - 1);
      *v17 = v19;
      v16 += 2;
      v17 += 2;
      v18 -= 32;
    }
    while (v18);
    if (v7 == (v7 & 0x7FFFFFFFFFFFFFE0))
      goto LABEL_45;
  }
  do
  {
    v33 = *v15++;
    *v14++ = v33;
  }
  while (v15 != a3);
LABEL_45:
  *v14 = 0;
  if (v41 >= 0)
    v34 = (const std::string::value_type *)&__p;
  else
    v34 = (const std::string::value_type *)__p;
  if (v41 >= 0)
    v35 = HIBYTE(v41);
  else
    v35 = v40;
  std::string::append(this, v34, v35);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  return this;
}

void sub_20EEA28F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEA290C(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD v3[3];

  if ((result & 1) != 0)
  {
    v3[0] = &off_24C9EF2F8;
    v3[1] = a2;
    v3[2] = a3;
    sub_20EEA241C((uint64_t)v3);
  }
  return result;
}

void sub_20EEA294C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20EEA2960(unsigned __int8 *a1, char **a2, _QWORD *a3, _QWORD *a4)
{
  unsigned __int8 *v4;
  uint64_t v8;

  v4 = a1;
  for (*a3 = 0; v4 != (unsigned __int8 *)*a2; ++v4)
  {
    if ((char)*v4 < 0)
      break;
    v8 = *v4;
    if ((*(_DWORD *)(a4[2] + 4 * v8) & 0x400) == 0)
      break;
    *a3 = 10 * *a3
        + (*(int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v8, 0)
        - 48;
  }
  return v4;
}

__n128 sub_20EEA2A04(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&unk_24C9ABB08;
  a1->n128_u64[1] = (unint64_t)&off_24C9EF2F8;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&off_24C9EF280;
  a1->n128_u64[1] = (unint64_t)&unk_24C9EF2B0;
  a1[2].n128_u64[0] = (unint64_t)&unk_24C9EF2D8;
  a1[2].n128_u64[1] = 0;
  return result;
}

std::exception *sub_20EEA2A4C(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  return a1;
}

uint64_t sub_20EEA2AA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C9ABB08;
  *(_QWORD *)(v2 + 8) = &off_24C9EF2F8;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &off_24C9EF280;
  *(_QWORD *)(v2 + 8) = &unk_24C9EF2B0;
  *(_QWORD *)(v2 + 32) = &unk_24C9EF2D8;
  sub_20E86E24C(v2 + 32, a1 + 32);
  return v2;
}

void sub_20EEA2B70(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x212BC6398](v1, 0x10F1C40A1B86278);
  _Unwind_Resume(a1);
}

void sub_20EEA2B9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_20EEA2BB8(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_20EEA2E18((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9EF228, (void (*)(void *))sub_20EEA2A4C);
}

void sub_20EEA2BF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EEA2C08(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  JUMPOUT(0x212BC6398);
}

void sub_20EEA2C70(std::exception *this)
{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
}

void sub_20EEA2CC0(std::exception *this)
{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
  JUMPOUT(0x212BC6398);
}

const char *sub_20EEA2D2C()
{
  return "boost::bad_format_string: format-string is ill-formed";
}

void sub_20EEA2D38(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
}

void sub_20EEA2D88(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
  JUMPOUT(0x212BC6398);
}

void sub_20EEA2DF4(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEA2E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  *(_QWORD *)(a1 + 8) = &off_24C9EF2F8;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &off_24C9EF280;
  *(_QWORD *)(a1 + 8) = &unk_24C9EF2B0;
  *(_QWORD *)(a1 + 32) = &unk_24C9EF2D8;
  return a1;
}

void sub_20EEA2EB8(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EEA2ECC(void **a1, unint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::locale *v18;
  char *v19;
  uint64_t v20;
  std::locale::__imp *locale;
  uint64_t v22;
  const std::locale *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::locale *v27;
  uint64_t v28;
  char *v29;

  v6 = a1[2];
  v7 = (uint64_t)a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v6[-v7] >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 120 * a2;
      v14 = 120 * a2;
      do
      {
        sub_20EEA24C0(v7, a3);
        v7 += 120;
        v14 -= 120;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (void *)v7;
  }
  else
  {
    v8 = 0xEEEEEEEEEEEEEEEFLL * ((v7 - (uint64_t)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x222222222222222)
      sub_20E867F44();
    v10 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x111111111111111)
      v11 = 0x222222222222222;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x222222222222222)
        sub_20E877A38();
      v12 = (char *)operator new(120 * v11);
    }
    else
    {
      v12 = 0;
    }
    v15 = (uint64_t)&v12[120 * v8];
    v28 = v15;
    v29 = &v12[120 * v11];
    v16 = 120 * a2;
    v17 = v15 + 120 * a2;
    do
    {
      sub_20EEA24C0(v15, a3);
      v15 += 120;
      v16 -= 120;
    }
    while (v16);
    v19 = (char *)*a1;
    v18 = (std::locale *)a1[1];
    if (v18 != *a1)
    {
      v20 = 0;
      do
      {
        v22 = v28 + v20 * 8;
        v23 = &v18[v20];
        *(_DWORD *)(v22 - 120) = v18[v20 - 15].__locale_;
        v24 = *(_OWORD *)&v18[v20 - 14].__locale_;
        *(std::locale *)(v22 - 96) = v18[v20 - 12];
        *(_OWORD *)(v22 - 112) = v24;
        v23[-13].__locale_ = 0;
        v23[-12].__locale_ = 0;
        v23[-14].__locale_ = 0;
        v25 = *(_OWORD *)&v18[v20 - 11].__locale_;
        *(std::locale *)(v22 - 72) = v18[v20 - 9];
        *(_OWORD *)(v22 - 88) = v25;
        v23[-10].__locale_ = 0;
        v23[-9].__locale_ = 0;
        v23[-11].__locale_ = 0;
        v26 = *(_OWORD *)&v18[v20 - 6].__locale_;
        *(_OWORD *)(v22 - 64) = *(_OWORD *)&v18[v20 - 8].__locale_;
        *(_OWORD *)(v22 - 48) = v26;
        *(_BYTE *)(v22 - 32) = 0;
        if (LOBYTE(v18[v20 - 4].__locale_))
        {
          std::locale::locale((std::locale *)(v22 - 24), v23 - 3);
          *(_BYTE *)(v22 - 32) = 1;
        }
        locale = v23[-2].__locale_;
        *(_DWORD *)(v22 - 8) = v23[-1].__locale_;
        *(_QWORD *)(v22 - 16) = locale;
        v20 -= 15;
      }
      while (&v18[v20] != (std::locale *)v19);
      v18 = (std::locale *)*a1;
      v27 = (std::locale *)a1[1];
      *a1 = (void *)(v28 + v20 * 8);
      a1[1] = (void *)v17;
      a1[2] = v29;
      while (1)
      {
        if (v27 == v18)
          goto LABEL_35;
        if (LOBYTE(v27[-4].__locale_))
        {
          std::locale::~locale(v27 - 3);
          LOBYTE(v27[-4].__locale_) = 0;
        }
        if (SHIBYTE(v27[-9].__locale_) < 0)
        {
          operator delete(v27[-11].__locale_);
          if ((SHIBYTE(v27[-12].__locale_) & 0x80000000) == 0)
            goto LABEL_25;
        }
        else if ((SHIBYTE(v27[-12].__locale_) & 0x80000000) == 0)
        {
          goto LABEL_25;
        }
        operator delete(v27[-14].__locale_);
LABEL_25:
        v27 -= 15;
      }
    }
    *a1 = (void *)v28;
    a1[1] = (void *)v17;
    a1[2] = v29;
LABEL_35:
    if (v18)
      operator delete(v18);
  }
}

void sub_20EEA3154(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EEA315C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EEA3174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEA3174(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    if (*(_BYTE *)(i - 32))
    {
      std::locale::~locale((std::locale *)(i - 24));
      *(_BYTE *)(i - 32) = 0;
    }
    if (*(char *)(i - 65) < 0)
    {
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 89) & 0x80000000) == 0)
        continue;
    }
    else if ((*(char *)(i - 89) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 112));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_20EEA3208(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::locale *v17;
  BOOL v18;
  const std::locale *v19;
  std::ios_base *v20;
  std::locale *rdbuf;
  std::locale *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int64_t v28;
  unsigned __int8 *v29;
  const std::string::value_type *v30;
  const std::string::value_type *v31;
  size_t v32;
  int v33;
  const std::locale::facet *v34;
  unsigned __int8 v35;
  int v36;
  const std::locale::facet *v37;
  unsigned __int8 v38;
  unsigned int v39;
  uint64_t v40;
  int64_t v41;
  size_t *v42;
  int64_t v43;
  std::string::value_type *v44;
  uint64_t v45;
  int *v46;
  char v47;
  int v48;
  const std::locale::facet *v49;
  unsigned __int8 v50;
  int v51;
  const std::locale::facet *v52;
  unsigned __int8 v53;
  int v54;
  const std::locale::facet *v55;
  uint64_t v56;
  uint64_t v57;
  std::string::size_type v58;
  uint64_t v59;
  std::string::size_type v60;
  char *v61;
  int v62;
  int v63;
  const std::locale::facet *v64;
  unsigned __int8 *v65;
  std::string::size_type v66;
  int64_t v67;
  std::string::size_type v68;
  std::string::size_type v69;
  const std::string::value_type *v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  const std::string::value_type *v74;
  const std::string::value_type *v75;
  size_t v76;
  size_t v77;
  size_t v78;
  std::string::size_type v79;
  unint64_t v80;
  size_t v81;
  unsigned __int8 *v82;
  int v83;
  size_t v84;
  const std::ios_base *v85;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v110;
  size_t v111;
  char v112;
  std::string::value_type *__s;
  std::string::value_type *__sa;
  std::locale *__loc;
  uint64_t v116;
  std::locale v118;
  _QWORD v119[2];
  unsigned int *v120;
  _BYTE v121[152];
  std::locale v122[2];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  _QWORD v131[17];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a1 + 60))
  {
    v4 = *a1;
    v3 = a1[1];
    if (v3 != *a1)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        if (!a1[4]
          || (v9 = *(unsigned int *)(v4 + v5), (v9 & 0x80000000) != 0)
          || ((*(_QWORD *)(a1[3] + ((v9 >> 3) & 0x1FFFFFF8)) >> v9) & 1) == 0)
        {
          v7 = v4 + v5;
          v8 = (_QWORD *)(v7 + 8);
          if (*(char *)(v7 + 31) < 0)
          {
            v8 = (_QWORD *)*v8;
            *(_QWORD *)(v7 + 16) = 0;
          }
          else
          {
            *(_BYTE *)(v7 + 31) = 0;
          }
          *(_BYTE *)v8 = 0;
          v4 = *a1;
          v3 = a1[1];
        }
        ++v6;
        v5 += 120;
      }
      while (v6 < 0xEEEEEEEEEEEEEEEFLL * ((v3 - v4) >> 3));
    }
    *((_DWORD *)a1 + 13) = 0;
    *((_BYTE *)a1 + 60) = 0;
    if (!a1[4] || (v10 = *((unsigned int *)a1 + 14), (int)v10 < 1) || (v11 = (_BYTE *)a1[3], (*v11 & 1) == 0))
    {
      LODWORD(v12) = 0;
      v13 = (unsigned int *)*((int *)a1 + 14);
      if ((int)v13 > 0)
        goto LABEL_17;
LABEL_143:
      if ((a1[11] & 4) != 0)
      {
        v119[0] = &off_24C9EF3F8;
        v119[1] = (int)v12;
        v120 = v13;
        sub_20EEA3F54((uint64_t)v119);
      }
      goto LABEL_144;
    }
    v110 = 1;
    do
    {
      v12 = v110;
      if (v10 == v110)
        break;
      ++v110;
    }
    while (((*(_QWORD *)&v11[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v12) & 1) != 0);
    *((_DWORD *)a1 + 13) = v12;
    v13 = (unsigned int *)*((int *)a1 + 14);
    if ((int)v12 >= (int)v13)
      goto LABEL_143;
  }
  else
  {
    LODWORD(v12) = *((_DWORD *)a1 + 13);
    v13 = (unsigned int *)*((int *)a1 + 14);
    if ((int)v12 >= (int)v13)
      goto LABEL_143;
  }
LABEL_17:
  v15 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v16 = 0;
    v17 = (std::locale *)(a1 + 24);
    __loc = (std::locale *)(a1 + 24);
    v116 = (uint64_t)(a1 + 12);
    while (*(_DWORD *)(v15 + 120 * v16) != *((_DWORD *)a1 + 13))
    {
LABEL_20:
      if (++v16 >= 0xEEEEEEEEEEEEEEEFLL * ((v14 - v15) >> 3))
      {
        LODWORD(v12) = *((_DWORD *)a1 + 13);
        LODWORD(v105) = v12 + 1;
        *((_DWORD *)a1 + 13) = v12 + 1;
        if (a1[4])
          goto LABEL_147;
        return a1;
      }
    }
    v18 = *((_BYTE *)a1 + 184) == 0;
    if (*((_BYTE *)a1 + 184))
      v19 = v17;
    else
      v19 = 0;
    sub_20EEA4454((uint64_t)v119, v116);
    if (!v18)
    {
      v20 = (std::ios_base *)((char *)v119 + *(_QWORD *)(v119[0] - 24));
      std::ios_base::getloc(v20);
      std::ios_base::imbue(v20, __loc);
      std::locale::~locale(v122);
      rdbuf = (std::locale *)v20->__rdbuf_;
      if (rdbuf)
      {
        (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, __loc);
        v22 = rdbuf + 1;
        std::locale::locale((std::locale *)&v132, v22);
        std::locale::operator=(v22, __loc);
        std::locale::~locale((std::locale *)&v132);
      }
      std::locale::~locale(&v118);
    }
    v23 = v15 + 120 * v16 + 56;
    sub_20EEA4554(v23, (std::ios_base *)((char *)v119 + *(_QWORD *)(v119[0] - 24)), v19);
    ((void (*)(_QWORD *, _QWORD))a2[1])(v119, *a2);
    v24 = v15 + 120 * v16 + 8;
    v25 = v119[0];
    v26 = (char *)v119 + *(_QWORD *)(v119[0] - 24);
    v27 = *((_DWORD *)v26 + 2);
    v28 = *((_QWORD *)v26 + 3);
    if (*(char *)(v15 + 120 * v16 + 31) < 0)
    {
      v29 = *(unsigned __int8 **)v24;
      *(_QWORD *)(v15 + 120 * v16 + 16) = 0;
      *v29 = 0;
      if ((v27 & 0x10) == 0)
        goto LABEL_41;
    }
    else
    {
      *(_BYTE *)(v15 + 120 * v16 + 31) = 0;
      *(_BYTE *)v24 = 0;
      if ((v27 & 0x10) == 0)
      {
LABEL_41:
        v112 = v27;
        if (v28 >= 1)
          *(_QWORD *)&v121[*(_QWORD *)(v25 - 24)] = 0;
        ((void (*)(_QWORD *, _QWORD))a2[2])(v119, *a2);
        v44 = (std::string::value_type *)a1[17];
        v45 = v15 + 120 * v16;
        v47 = *(_BYTE *)(v45 + 112);
        v46 = (int *)(v45 + 112);
        __sa = v44;
        if ((v47 & 2) == 0)
          goto LABEL_47;
        if ((std::string::value_type *)a1[18] == v44)
          goto LABEL_48;
        v48 = *v44;
        std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(_QWORD *)(v119[0] - 24)));
        v49 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
        v50 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 43);
        std::locale::~locale(v122);
        if (v48 == v50)
          goto LABEL_47;
        v51 = *v44;
        std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(_QWORD *)(v119[0] - 24)));
        v52 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
        v53 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 45);
        std::locale::~locale(v122);
        if (v51 != v53)
        {
LABEL_48:
          std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(_QWORD *)(v119[0] - 24)));
          v55 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
          v54 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 32);
          std::locale::~locale(v122);
        }
        else
        {
LABEL_47:
          v54 = 0;
        }
        v56 = *(_QWORD *)(v15 + 120 * v16 + 104);
        if (v54)
          v57 = -1;
        else
          v57 = 0;
        v58 = v56 - (v54 != 0);
        v59 = a1[17];
        if (a1[18] - v59 >= v58)
          v60 = v58;
        else
          v60 = a1[18] - v59;
        v61 = (char *)v119 + *(_QWORD *)(v119[0] - 24);
        v62 = *((_DWORD *)v61 + 36);
        if (v62 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(_QWORD *)(v119[0] - 24)));
          v64 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
          v62 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 32);
          std::locale::~locale(v122);
          *((_DWORD *)v61 + 36) = v62;
          v63 = *v46;
          if ((*(char *)(v24 + 23) & 0x80000000) == 0)
          {
LABEL_57:
            *(_BYTE *)(v24 + 23) = 0;
            *(_BYTE *)v24 = 0;
            if (v28 < 1)
              goto LABEL_66;
LABEL_61:
            if (v28 > v60)
            {
              std::string::reserve((std::string *)v24, v28);
              v66 = v28 - v60;
              v67 = v28 - v60 + v57;
              if ((v63 & 4) != 0)
              {
                if (v67 >= 0)
                  v95 = v66 + v57;
                else
                  v95 = v67 + 1;
                v68 = v95 >> 1;
                v67 -= v95 >> 1;
                if (!v67)
                  goto LABEL_120;
              }
              else
              {
                if ((v112 & 0x20) != 0)
                {
                  v68 = v66 + v57;
                  if (!v54)
                  {
LABEL_124:
                    if (v60)
                      std::string::append((std::string *)v24, __sa, v60);
                    if (v68)
                      std::string::append((std::string *)v24, v68, v62);
                    goto LABEL_128;
                  }
LABEL_123:
                  std::string::append((std::string *)v24, 1uLL, v54);
                  goto LABEL_124;
                }
                v68 = 0;
                if (!v67)
                {
LABEL_120:
                  if (!v54)
                    goto LABEL_124;
                  goto LABEL_123;
                }
              }
              std::string::append((std::string *)v24, v67, v62);
              goto LABEL_120;
            }
LABEL_66:
            if (v54)
              v69 = v60 + 1;
            else
              v69 = v60;
            std::string::reserve((std::string *)v24, v69);
            if (v54)
              std::string::append((std::string *)v24, 1uLL, v54);
            if (v60)
              std::string::append((std::string *)v24, __sa, v60);
            goto LABEL_128;
          }
        }
        else
        {
          v63 = *v46;
          if ((*(char *)(v24 + 23) & 0x80000000) == 0)
            goto LABEL_57;
        }
        v65 = *(unsigned __int8 **)v24;
        *(_QWORD *)(v24 + 8) = 0;
        *v65 = 0;
        if (v28 < 1)
          goto LABEL_66;
        goto LABEL_61;
      }
    }
    if (!v28)
      goto LABEL_41;
    ((void (*)(_QWORD *, _QWORD))a2[2])(v119, *a2);
    v31 = (const std::string::value_type *)a1[17];
    v30 = (const std::string::value_type *)a1[18];
    v32 = v30 - v31;
    __s = (std::string::value_type *)(v15 + 120 * v16 + 112);
    if ((*__s & 2) == 0)
      goto LABEL_38;
    if (v30 == v31)
      goto LABEL_73;
    v111 = v30 - v31;
    v33 = *(unsigned __int8 *)v31;
    std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(_QWORD *)(v119[0] - 24)));
    v34 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
    v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 43);
    std::locale::~locale(v122);
    v32 = v111;
    if (v33 == v35)
      goto LABEL_38;
    v36 = *(unsigned __int8 *)v31;
    std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(_QWORD *)(v119[0] - 24)));
    v37 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
    v38 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 45);
    std::locale::~locale(v122);
    v32 = v111;
    if (v36 != v38)
    {
LABEL_73:
      v42 = (size_t *)(v15 + 120 * v16 + 104);
      v39 = 1;
    }
    else
    {
LABEL_38:
      v39 = 0;
      v40 = v15 + 120 * v16;
      v43 = *(_QWORD *)(v40 + 104);
      v42 = (size_t *)(v40 + 104);
      v41 = v43;
      if (v32 == v28 && v28 <= v41)
      {
        sub_20E8B43E8((std::string *)v24, v31, v28);
LABEL_128:
        v96 = a1[18];
        if (v96 && v96 != a1[17])
        {
          v130 = 0;
          v128 = 0u;
          v129 = 0u;
          v126 = 0u;
          v127 = 0u;
          v124 = 0u;
          v125 = 0u;
          *(_OWORD *)&v122[0].__locale_ = 0u;
          v123 = 0u;
          (*(void (**)(__int128 *__return_ptr, uint64_t, std::locale *, uint64_t))(*(_QWORD *)v116 + 40))(&v132, v116, v122, 16);
        }
        v97 = a1[15];
        if (v97 && v97 != a1[14])
        {
          v140 = 0;
          v138 = 0u;
          v139 = 0u;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          v132 = 0u;
          v133 = 0u;
          (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v116 + 40))(v131, v116, &v132, 8);
        }
        std::ostream::~ostream();
        v98 = v120;
        if (v120)
        {
          v99 = v120 + 2;
          do
          {
            v100 = __ldaxr(v99);
            v101 = v100 - 1;
          }
          while (__stlxr(v101, v99));
          if (!v101)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 16))(v98);
            v102 = v98 + 3;
            do
            {
              v103 = __ldaxr(v102);
              v104 = v103 - 1;
            }
            while (__stlxr(v104, v102));
            if (!v104)
              (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 24))(v98);
          }
        }
        MEMORY[0x212BC6290](v121);
        v15 = *a1;
        v14 = a1[1];
        v17 = __loc;
        goto LABEL_20;
      }
    }
    v70 = v31;
    v71 = v32;
    sub_20E8B43E8((std::string *)v24, v70, v32);
    v72 = a1[18];
    if (v72 && v72 != a1[17])
    {
      v130 = 0;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      *(_OWORD *)&v122[0].__locale_ = 0u;
      v123 = 0u;
      (*(void (**)(__int128 *__return_ptr, uint64_t, std::locale *, uint64_t))(*(_QWORD *)v116 + 40))(&v132, v116, v122, 16);
    }
    v73 = a1[15];
    if (v73 && v73 != a1[14])
    {
      v140 = 0;
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v116 + 40))(v131, v116, &v132, 8);
    }
    sub_20EEA4454((uint64_t)v122, v116);
    sub_20EEA4554(v23, (std::ios_base *)((char *)v122 + *((_QWORD *)v122[0].__locale_ - 3)), v19);
    ((void (*)(std::locale *, _QWORD))a2[1])(v122, *a2);
    *(_QWORD *)((char *)&v123 + *((_QWORD *)v122[0].__locale_ - 3) + 8) = 0;
    if (v39)
    {
      LOBYTE(v132) = 32;
      sub_20E86A980(v122, (uint64_t)&v132, 1);
    }
    ((void (*)(std::locale *, _QWORD))a2[2])(v122, *a2);
    v75 = (const std::string::value_type *)a1[17];
    v74 = (const std::string::value_type *)a1[18];
    if (v74 == v75)
    {
      v75 = (const std::string::value_type *)a1[18];
      v76 = v71;
      if ((*__s & 2) == 0)
      {
LABEL_86:
        v77 = v74 - v75;
        if (v77 >= *v42)
          v78 = *v42;
        else
          v78 = v77;
        v79 = v28 - v78;
        if (v28 <= v78)
        {
          sub_20E8B43E8((std::string *)v24, v75, v78);
        }
        else
        {
          v80 = v76 + v39;
          if (v78 < v80)
            v80 = v78;
          v81 = v39;
          if (v80 > v39)
          {
            v82 = *(unsigned __int8 **)v24;
            if (*(char *)(v24 + 23) >= 0)
              v82 = (unsigned __int8 *)v24;
            v81 = v39;
            while (1)
            {
              v83 = *v82++;
              if (v75[v81] != v83)
                break;
              if (v80 == ++v81)
              {
                v81 = v80;
                break;
              }
            }
          }
          if (v81 >= v78)
            v84 = v39;
          else
            v84 = v81;
          sub_20E8B43E8((std::string *)v24, v75, v84);
          v85 = (const std::ios_base *)((char *)v122 + *((_QWORD *)v122[0].__locale_ - 3));
          fmtflags = v85[1].__fmtflags_;
          if (fmtflags == -1)
          {
            std::ios_base::getloc(v85);
            v87 = std::locale::use_facet((const std::locale *)&v132, MEMORY[0x24BEDB350]);
            fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v87->__vftable[2].~facet_0)(v87, 32);
            std::locale::~locale((std::locale *)&v132);
            v85[1].__fmtflags_ = fmtflags;
          }
          std::string::append((std::string *)v24, v79, fmtflags);
          std::string::append((std::string *)v24, &v75[v84], v78 - v84);
        }
        std::ostream::~ostream();
        v88 = (unsigned int *)v123;
        if ((_QWORD)v123)
        {
          v89 = (unsigned int *)(v123 + 8);
          do
          {
            v90 = __ldaxr(v89);
            v91 = v90 - 1;
          }
          while (__stlxr(v91, v89));
          if (!v91)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 16))(v88);
            v92 = v88 + 3;
            do
            {
              v93 = __ldaxr(v92);
              v94 = v93 - 1;
            }
            while (__stlxr(v94, v92));
            if (!v94)
              (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 24))(v88);
          }
        }
        MEMORY[0x212BC6290]((char *)&v123 + 8);
        goto LABEL_128;
      }
      LOBYTE(v132) = 32;
      sub_20E86A980(v122, (uint64_t)&v132, 1);
      v75 = (const std::string::value_type *)a1[17];
      v74 = (const std::string::value_type *)a1[18];
      v39 = 1;
    }
    v76 = v71;
    goto LABEL_86;
  }
LABEL_144:
  LODWORD(v105) = v12 + 1;
  *((_DWORD *)a1 + 13) = v12 + 1;
  if (a1[4])
  {
LABEL_147:
    v106 = *((int *)a1 + 14);
    if ((int)v105 < (int)v106)
    {
      v107 = a1[3];
      v105 = (int)v105;
      v108 = v12 + 2;
      do
      {
        if (((*(_QWORD *)(v107 + ((v105 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v105) & 1) == 0)
          break;
        ++v105;
        *((_DWORD *)a1 + 13) = v108++;
      }
      while (v106 != v105);
    }
  }
  return a1;
}

void sub_20EEA3DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception a17)
{
  std::exception::~exception(&a17);
  _Unwind_Resume(a1);
}

void sub_20EEA3DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,unsigned int *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::locale a42,uint64_t a43,unsigned int *a44)
{
  uint64_t v44;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;

  std::locale::~locale((std::locale *)(v44 - 240));
  std::ostream::~ostream();
  if (a44)
  {
    v46 = a44 + 2;
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)a44 + 16))(a44);
      v49 = a44 + 3;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
        (*(void (**)(unsigned int *))(*(_QWORD *)a44 + 24))(a44);
    }
  }
  MEMORY[0x212BC6290](a10);
  std::ostream::~ostream();
  if (a22)
  {
    v52 = a22 + 2;
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)a22 + 16))(a22);
      v55 = a22 + 3;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
        (*(void (**)(unsigned int *))(*(_QWORD *)a22 + 24))(a22);
    }
  }
  MEMORY[0x212BC6290](a12);
  _Unwind_Resume(a1);
}

void sub_20EEA3F54(uint64_t a1)
{
  __n128 *exception;
  void *v3;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  sub_20EEA3F8C(exception, a1);
  __cxa_throw(v3, (struct type_info *)&unk_24C9EF328, (void (*)(void *))sub_20EEA3FD4);
}

__n128 sub_20EEA3F8C(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&unk_24C9ABB08;
  a1->n128_u64[1] = (unint64_t)&off_24C9EF3F8;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&off_24C9EF380;
  a1->n128_u64[1] = (unint64_t)&unk_24C9EF3B0;
  a1[2].n128_u64[0] = (unint64_t)&unk_24C9EF3D8;
  a1[2].n128_u64[1] = 0;
  return result;
}

std::exception *sub_20EEA3FD4(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  return a1;
}

uint64_t sub_20EEA402C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C9ABB08;
  *(_QWORD *)(v2 + 8) = &off_24C9EF3F8;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &off_24C9EF380;
  *(_QWORD *)(v2 + 8) = &unk_24C9EF3B0;
  *(_QWORD *)(v2 + 32) = &unk_24C9EF3D8;
  sub_20E86E24C(v2 + 32, a1 + 32);
  return v2;
}

void sub_20EEA40F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x212BC6398](v1, 0x10F1C40A1B86278);
  _Unwind_Resume(a1);
}

void sub_20EEA4124(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_20EEA4140(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_20EEA43A0((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9EF328, (void (*)(void *))sub_20EEA3FD4);
}

void sub_20EEA417C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EEA4190(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  JUMPOUT(0x212BC6398);
}

void sub_20EEA41F8(std::exception *this)
{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
}

void sub_20EEA4248(std::exception *this)
{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
  JUMPOUT(0x212BC6398);
}

const char *sub_20EEA42B4()
{
  return "boost::too_many_args: format-string referred to fewer arguments than were passed";
}

void sub_20EEA42C0(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
}

void sub_20EEA4310(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
  JUMPOUT(0x212BC6398);
}

void sub_20EEA437C(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEA43A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  *(_QWORD *)(a1 + 8) = &off_24C9EF3F8;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &off_24C9EF380;
  *(_QWORD *)(a1 + 8) = &unk_24C9EF3B0;
  *(_QWORD *)(a1 + 32) = &unk_24C9EF3D8;
  return a1;
}

void sub_20EEA4440(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEA4454(uint64_t a1, uint64_t a2)
{
  std::ios_base *v4;
  _QWORD *v5;
  void *v6;

  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB898] + 16;
  v4 = (std::ios_base *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (_QWORD *)operator new();
  v5[1] = 0x100000001;
  *v5 = &off_24C9EF528;
  v5[2] = a2;
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = &unk_24C9EF498;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = &unk_24C9EF4C0;
  std::ios_base::init(v4, v6);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_QWORD *)a1 = &off_24C9EF428;
  *(_QWORD *)(a1 + 24) = &unk_24C9EF450;
  return a1;
}

void sub_20EEA4510(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20EEA47D8(v2);
  MEMORY[0x212BC6290](v1);
  _Unwind_Resume(a1);
}

void sub_20EEA452C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_20EEA4538(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_end_catch();
  MEMORY[0x212BC6290](v1);
  _Unwind_Resume(a1);
}

void sub_20EEA4554(uint64_t a1, std::ios_base *this, const std::locale *a3)
{
  std::locale *rdbuf;
  std::locale *v6;
  std::locale *v7;
  std::locale *v9;
  std::locale *v10;
  std::streamsize v11;
  std::ios_base::fmtflags v12;
  const std::locale::facet *v13;
  std::ios_base::fmtflags v14;
  uint64_t v15;
  char v16;
  std::locale v17;
  std::locale v18;

  if (*(_BYTE *)(a1 + 32))
  {
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, (const std::locale *)(a1 + 40));
    std::locale::~locale(&v18);
    rdbuf = (std::locale *)this->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(void *, uint64_t))rdbuf->__locale_ + 2))(this->__rdbuf_, a1 + 40);
      v6 = rdbuf + 1;
      std::locale::locale(&v17, v6);
      std::locale::operator=(v6, (const std::locale *)(a1 + 40));
      std::locale::~locale(&v17);
    }
    v7 = (std::locale *)&v16;
  }
  else
  {
    if (!a3)
      goto LABEL_10;
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, a3);
    std::locale::~locale(&v18);
    v9 = (std::locale *)this->__rdbuf_;
    if (v9)
    {
      (*((void (**)(void *, const std::locale *))v9->__locale_ + 2))(this->__rdbuf_, a3);
      v10 = v9 + 1;
      std::locale::locale(&v17, v10);
      std::locale::operator=(v10, a3);
      std::locale::~locale(&v17);
    }
    v7 = (std::locale *)&v15;
  }
  std::locale::~locale(v7);
LABEL_10:
  if (*(_QWORD *)a1 != -1)
    this->__width_ = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11 != -1)
    this->__precision_ = v11;
  v12 = *(char *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (this[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(this);
      v13 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
      v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 32);
      std::locale::~locale(&v18);
      this[1].__fmtflags_ = v14;
    }
    this[1].__fmtflags_ = v12;
  }
  this->__fmtflags_ = *(_DWORD *)(a1 + 20);
  std::ios_base::clear(this, *(_DWORD *)(a1 + 24));
  this->__exceptions_ = *(_DWORD *)(a1 + 28);
  std::ios_base::clear(this, this->__rdstate_);
}

void sub_20EEA470C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void sub_20EEA4720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

void sub_20EEA4734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEA4748(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(std::ostream::~ostream() + 16);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  MEMORY[0x212BC6290](a1 + 24);
  return a1;
}

uint64_t sub_20EEA47D8(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_20EEA4854(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(std::ostream::~ostream() + 16);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  MEMORY[0x212BC6290](a1 + 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EEA48F4(_QWORD *a1)
{
  char *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  v2 = (unsigned int *)*((_QWORD *)v1 + 2);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  JUMPOUT(0x212BC6290);
}

void sub_20EEA4988(_QWORD *a1)
{
  char *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  v2 = (unsigned int *)*((_QWORD *)v1 + 2);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  MEMORY[0x212BC6290](v1 + 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EEA4A38()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEA4A50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N5boost2io22basic_oaltstringstreamIcNSt3__111char_traitsIcEENS2_9allocatorIcEEE5No_OpE")
    return a1 + 24;
  if (((v3 & (unint64_t)"N5boost2io22basic_oaltstringstreamIcNSt3__111char_traitsIcEENS2_9allocatorIcEEE5No_OpE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N5boost2io22basic_oaltstringstreamIcNSt3__111char_traitsIcEENS2_9allocatorIcEEE5No_OpE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N5boost2io22basic_oaltstringstreamIcNSt3__111char_traitsIcEENS2_9allocatorIcEEE5No_OpE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EEA4ABC()
{
  return 0;
}

uint64_t sub_20EEA4AC4(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_20EEA4AD0()
{
  return std::ostream::operator<<();
}

void sub_20EEA4AD8(uint64_t a1)
{
  __n128 *exception;
  void *v3;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  sub_20EEA4B10(exception, a1);
  __cxa_throw(v3, (struct type_info *)&unk_24C9EF590, (void (*)(void *))sub_20EEA4B58);
}

__n128 sub_20EEA4B10(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&unk_24C9ABB08;
  a1->n128_u64[1] = (unint64_t)&off_24C9EF660;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&off_24C9EF5E8;
  a1->n128_u64[1] = (unint64_t)&unk_24C9EF618;
  a1[2].n128_u64[0] = (unint64_t)&unk_24C9EF640;
  a1[2].n128_u64[1] = 0;
  return result;
}

std::exception *sub_20EEA4B58(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  return a1;
}

uint64_t sub_20EEA4BB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C9ABB08;
  *(_QWORD *)(v2 + 8) = &off_24C9EF660;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &off_24C9EF5E8;
  *(_QWORD *)(v2 + 8) = &unk_24C9EF618;
  *(_QWORD *)(v2 + 32) = &unk_24C9EF640;
  sub_20E86E24C(v2 + 32, a1 + 32);
  return v2;
}

void sub_20EEA4C7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x212BC6398](v1, 0x10F1C40A1B86278);
  _Unwind_Resume(a1);
}

void sub_20EEA4CA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_20EEA4CC4(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_20EEA4F24((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9EF590, (void (*)(void *))sub_20EEA4B58);
}

void sub_20EEA4D00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EEA4D14(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  JUMPOUT(0x212BC6398);
}

void sub_20EEA4D7C(std::exception *this)
{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
}

void sub_20EEA4DCC(std::exception *this)
{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
  JUMPOUT(0x212BC6398);
}

const char *sub_20EEA4E38()
{
  return "boost::too_few_args: format-string referred to more arguments than were passed";
}

void sub_20EEA4E44(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
}

void sub_20EEA4E94(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24C9ABB60;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
  JUMPOUT(0x212BC6398);
}

void sub_20EEA4F00(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEA4F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  *(_QWORD *)(a1 + 8) = &off_24C9EF660;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &off_24C9EF5E8;
  *(_QWORD *)(a1 + 8) = &unk_24C9EF618;
  *(_QWORD *)(a1 + 32) = &unk_24C9EF640;
  return a1;
}

void sub_20EEA4FC4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEA4FD8(uint64_t a1)
{
  void *v2;
  std::locale *v3;
  std::locale *v4;
  std::locale *v5;

  if (*(_BYTE *)(a1 + 184))
  {
    std::locale::~locale((std::locale *)(a1 + 192));
    *(_BYTE *)(a1 + 184) = 0;
  }
  *(_QWORD *)(a1 + 96) = &off_24C9EF170;
  if (*(_BYTE *)(a1 + 168))
    operator delete(*(void **)(a1 + 112));
  *(_OWORD *)(a1 + 153) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  std::streambuf::~streambuf();
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 24);
    if (!v2)
      goto LABEL_8;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 64));
  v2 = *(void **)(a1 + 24);
  if (v2)
LABEL_7:
    operator delete(v2);
LABEL_8:
  v3 = *(std::locale **)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(std::locale **)(a1 + 8);
    v5 = *(std::locale **)a1;
    if (v4 == v3)
    {
LABEL_22:
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v5);
      return a1;
    }
    while (1)
    {
      if (LOBYTE(v4[-4].__locale_))
      {
        std::locale::~locale(v4 - 3);
        LOBYTE(v4[-4].__locale_) = 0;
      }
      if (SHIBYTE(v4[-9].__locale_) < 0)
      {
        operator delete(v4[-11].__locale_);
        if (SHIBYTE(v4[-12].__locale_) < 0)
LABEL_18:
          operator delete(v4[-14].__locale_);
      }
      else if (SHIBYTE(v4[-12].__locale_) < 0)
      {
        goto LABEL_18;
      }
      v4 -= 15;
      if (v4 == v3)
      {
        v5 = *(std::locale **)a1;
        goto LABEL_22;
      }
    }
  }
  return a1;
}

void sub_20EEA50EC()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EEA5104()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEA511C(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = a1[28];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v2 <= a2)
        v4 = a2 % v2;
    }
    else
    {
      v4 = ((_DWORD)v2 - 1) & a2;
    }
    v5 = *(uint64_t ***)(a1[27] + 8 * v4);
    if (v5)
    {
      v6 = *v5;
      if (v6)
      {
        if (v3.u32[0] < 2uLL)
        {
          v7 = v2 - 1;
          while (1)
          {
            v9 = v6[1];
            if (v9 == a2)
            {
              if (*((_DWORD *)v6 + 4) == a2)
                return 1;
            }
            else if ((v9 & v7) != v4)
            {
              goto LABEL_22;
            }
            v6 = (uint64_t *)*v6;
            if (!v6)
              goto LABEL_22;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == a2)
          {
            if (*((_DWORD *)v6 + 4) == a2)
              return 1;
          }
          else
          {
            if (v8 >= v2)
              v8 %= v2;
            if (v8 != v4)
              break;
          }
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
    }
  }
LABEL_22:
  v11 = a1[33];
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = a2;
      if (v11 <= a2)
        v13 = a2 % v11;
    }
    else
    {
      v13 = ((_DWORD)v11 - 1) & a2;
    }
    v14 = *(uint64_t **)(a1[32] + 8 * v13);
    if (v14)
    {
      v14 = (uint64_t *)*v14;
      if (v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          v15 = v11 - 1;
          while (1)
          {
            v17 = v14[1];
            if (v17 == a2)
            {
              if (*((_DWORD *)v14 + 4) == a2)
                return v14 != 0;
            }
            else if ((v17 & v15) != v13)
            {
              return 0;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              return v14 != 0;
          }
        }
        do
        {
          v16 = v14[1];
          if (v16 == a2)
          {
            if (*((_DWORD *)v14 + 4) == a2)
              return v14 != 0;
          }
          else
          {
            if (v16 >= v11)
              v16 %= v11;
            if (v16 != v13)
              return 0;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v14 = 0;
  }
  return v14 != 0;
}

uint64_t *sub_20EEA52F4(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20EEA55E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EEA55F4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5FA80);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FA80))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.feature_detection_node_group");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5FA78);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5FA80);
  }
  *a1 = qword_254A5FA78;
}

void sub_20EEA5690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5FA80);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5FA80);
  _Unwind_Resume(a1);
}

void sub_20EEA56E8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5FA90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FA90))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5FA88);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5FA90);
  }
  *a1 = qword_254A5FA88;
}

void sub_20EEA5784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5FA90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5FA90);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEA57DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  const char *v4;
  size_t v5;
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  _DWORD v10[4];
  _QWORD v11[33];

  if (result + 192 == a3)
  {
    v6 = result;
    sub_20E863438((uint64_t)v10);
    sub_20E86A980(v11, (uint64_t)"Query source ID does not exist.\nQuery source ID: ", 49);
    v3 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v3, (uint64_t)".\nAvailable source IDs: ", 24);
    sub_20EEA5904(v6, a3, (uint64_t)v10);
    v4 = (const char *)v8;
    sub_20E923E88(v10, v8);
    if (v9 < 0)
      v4 = (const char *)v8[0];
    v5 = strlen(v4);
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraAllocationInfo.h", 122, (uint64_t)"", 0, (uint64_t)v4, v5, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

void sub_20EEA58B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEA5904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v5 += 24;
      v6 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v6, (uint64_t)" ", 1);
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_20EEA5970(uint64_t a1, uint64_t a2, unint64_t a3, char a4, unint64_t *a5, double a6, double a7)
{
  unint64_t v9;
  float *v11;
  float *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  int v25;
  unsigned int v26;
  float v27;
  uint64_t v28;
  float *v29;
  float v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float *v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  uint64_t v58;
  float *v59;
  float *v60;
  float *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  float *v67;
  float *v68;
  float *v69;
  float v70;
  float v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  float *v76;
  float *v77;
  uint64_t v78;
  float *v79;
  float *v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float *v90;
  uint64_t v91;
  float *v92;
  float *v93;
  float *v94;
  char *v95;
  uint64_t v96;
  float *v97;
  uint64_t v98;
  float *v99;
  float *v100;
  float *v101;
  char *v102;
  uint64_t v103;
  float *v104;
  float *v105;
  uint64_t v106;
  uint64_t v107;
  float *v108;
  float *v109;
  char *v110;
  uint64_t v111;
  float *v112;
  uint64_t v113;
  float *v114;
  float *v115;
  float *v116;
  uint64_t v117;
  float *v118;
  float *v119;
  float v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float *v130;
  uint64_t v131;
  float *v132;
  float *v133;
  float *v134;
  BOOL v135;
  float *v136;
  float *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  float v144;
  float v145;
  float *v146;
  uint64_t v147;
  float *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  float *v174;
  float *v175;
  uint64_t v176[2];
  char v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t *v181;
  unint64_t v182;

  v178 = a2;
  v177 = a4;
  if (!a3)
    return;
  v9 = *a5;
  if (*a5 <= a3)
    return;
  v11 = *(float **)(a1 + 16);
  v12 = *(float **)(a1 + 24);
  v179 = 0;
  v180 = 0;
  v181 = 0;
  v13 = (char *)v12 - (char *)v11;
  if (v12 == v11)
  {
    v14 = 0;
  }
  else
  {
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_20E867F44();
    v179 = (uint64_t *)operator new(2 * v13);
    v180 = v179;
    v181 = &v179[v13 >> 2];
    v176[0] = (uint64_t)&v179;
    do
    {
      v182 = (unint64_t)(float)(*v11 * (float)a3);
      sub_20EDA6C78(v176, &v182);
      ++v11;
    }
    while (v11 != v12);
    v14 = v179;
    v9 = *a5;
  }
  v176[0] = a1;
  v176[1] = (uint64_t)&v177;
  v15 = a5[1];
  v179 = v176;
  v180 = &v178;
  v16 = 126 - 2 * __clz(v9);
  if (v9)
    v17 = v16;
  else
    v17 = 0;
  sub_20EEA62C8(v15, (uint64_t *)(v15 + 8 * v9), (uint64_t *)&v179, v17, 1, a6, a7);
  v18 = a5[1];
  if (*a5)
  {
    LODWORD(v19) = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = v178;
    v24 = (float)*(unsigned int *)(a1 + 4);
    v25 = *(_DWORD *)a1;
    v26 = *(_DWORD *)a1 - 1;
    v27 = (float)*(unsigned int *)(a1 + 8);
    v28 = 8 * *a5;
    do
    {
      v29 = (float *)(v23 + 32 * *(_QWORD *)(v18 + 8 * v22));
      v30 = v29[1];
      v31 = (float)(*v29 / v24);
      if (v26 < v31)
        v31 = v26;
      v32 = (float)(v30 / v27);
      if (v26 < v32)
        v32 = v26;
      v33 = v31 + v32 * v25;
      if (v33 == v20)
        v19 = (v19 + 1);
      else
        v19 = 1;
      if (v14[v33] >= v19)
      {
        if (v22 != v21)
        {
          v34 = 8 * v21;
          v35 = *(_QWORD *)(v18 + v34);
          *(_QWORD *)(v18 + v34) = *(_QWORD *)(v18 + 8 * v22);
          *(_QWORD *)(v18 + 8 * v22) = v35;
        }
        ++v21;
      }
      ++v22;
      v20 = v33;
      v28 -= 8;
    }
    while (v28);
  }
  else
  {
    v21 = 0;
  }
  v36 = v21;
  if (v21 >= a3)
    goto LABEL_174;
  v37 = v18 + 8 * a3 - 8;
  v38 = (char *)(v18 + 8 * *a5);
  if ((char *)v37 == v38)
    goto LABEL_174;
  v39 = (char *)(v18 + 8 * v36);
  v40 = v177;
  v41 = v178;
  while (1)
  {
    v42 = (v38 - v39) >> 3;
    if (v42 < 2)
      goto LABEL_174;
    if (v42 == 3)
    {
      v138 = v178;
      v139 = *(_QWORD *)v39;
      v140 = *((_QWORD *)v39 + 1);
      v141 = *((_QWORD *)v38 - 1);
      v142 = v178 + 32 * v140;
      v143 = v178 + 32 * *(_QWORD *)v39;
      if (v40)
      {
        v144 = *(float *)(v142 + 20);
        v145 = *(float *)(v143 + 20);
        v146 = (float *)(v178 + 32 * v141 + 20);
        if (v144 > v145)
        {
          if (*v146 <= v144)
          {
            *(_QWORD *)v39 = v140;
            *((_QWORD *)v39 + 1) = v139;
            v147 = *((_QWORD *)v38 - 1);
            v148 = (float *)(v138 + 32 * v147 + 20);
LABEL_171:
            if (*v148 <= v145)
              goto LABEL_174;
            *((_QWORD *)v39 + 1) = v147;
            goto LABEL_173;
          }
          goto LABEL_160;
        }
      }
      else
      {
        v144 = *(float *)(v142 + 28);
        v145 = *(float *)(v143 + 28);
        v146 = (float *)(v178 + 32 * v141 + 28);
        if (v144 > v145)
        {
          if (*v146 <= v144)
          {
            *(_QWORD *)v39 = v140;
            *((_QWORD *)v39 + 1) = v139;
            v147 = *((_QWORD *)v38 - 1);
            v148 = (float *)(v138 + 32 * v147 + 28);
            goto LABEL_171;
          }
LABEL_160:
          *(_QWORD *)v39 = v141;
LABEL_173:
          *((_QWORD *)v38 - 1) = v139;
          goto LABEL_174;
        }
      }
      if (*v146 > v144)
      {
        *((_QWORD *)v39 + 1) = v141;
        *((_QWORD *)v38 - 1) = v140;
        v166 = *(_QWORD *)v39;
        v165 = *((_QWORD *)v39 + 1);
        v167 = v138 + 32 * v165;
        v168 = v167 + 28;
        v169 = v138 + 32 * *(_QWORD *)v39;
        v170 = v169 + 28;
        v171 = v167 + 20;
        v172 = v169 + 20;
        v173 = v40 == 0;
        v174 = (float *)(v40 ? v172 : v170);
        v175 = (float *)(v173 ? v168 : v171);
        if (*v175 > *v174)
        {
          *(_QWORD *)v39 = v165;
          *((_QWORD *)v39 + 1) = v166;
        }
      }
      goto LABEL_174;
    }
    if (v42 == 2)
    {
      v127 = *((_QWORD *)v38 - 1);
      v128 = *(_QWORD *)v39;
      v129 = v178 + 32 * v127;
      v130 = (float *)(v129 + 28);
      v131 = v178 + 32 * *(_QWORD *)v39;
      v132 = (float *)(v131 + 28);
      v133 = (float *)(v129 + 20);
      v134 = (float *)(v131 + 20);
      v135 = v40 == 0;
      if (v40)
        v136 = v134;
      else
        v136 = v132;
      if (v135)
        v137 = v130;
      else
        v137 = v133;
      if (*v137 > *v136)
      {
        *(_QWORD *)v39 = v127;
        *((_QWORD *)v38 - 1) = v128;
      }
      goto LABEL_174;
    }
    if (v38 - v39 <= 63)
    {
      v149 = v38 - 8;
      if (v38 - 8 != v39)
      {
        v150 = v178;
        if (v40)
        {
          do
          {
            if (v39 != v38)
            {
              v151 = v39 + 8;
              if (v39 + 8 != v38)
              {
                v152 = *(_QWORD *)v39;
                v153 = *(_QWORD *)v39;
                v154 = v39;
                v155 = v39 + 8;
                do
                {
                  v157 = *(_QWORD *)v155;
                  v155 += 8;
                  v156 = v157;
                  if (*(float *)(v150 + 32 * v157 + 20) > *(float *)(v150 + 32 * v153 + 20))
                  {
                    v153 = v156;
                    v154 = v151;
                  }
                  v151 = v155;
                }
                while (v155 != v38);
                if (v154 != v39)
                {
                  *(_QWORD *)v39 = *(_QWORD *)v154;
                  *(_QWORD *)v154 = v152;
                }
              }
            }
            v39 += 8;
          }
          while (v39 != v149);
        }
        else
        {
          do
          {
            if (v39 != v38)
            {
              v158 = v39 + 8;
              if (v39 + 8 != v38)
              {
                v159 = *(_QWORD *)v39;
                v160 = *(_QWORD *)v39;
                v161 = v39;
                v162 = v39 + 8;
                do
                {
                  v164 = *(_QWORD *)v162;
                  v162 += 8;
                  v163 = v164;
                  if (*(float *)(v150 + 32 * v164 + 28) > *(float *)(v150 + 32 * v160 + 28))
                  {
                    v160 = v163;
                    v161 = v158;
                  }
                  v158 = v162;
                }
                while (v162 != v38);
                if (v161 != v39)
                {
                  *(_QWORD *)v39 = *(_QWORD *)v161;
                  *(_QWORD *)v161 = v159;
                }
              }
            }
            v39 += 8;
          }
          while (v39 != v149);
        }
      }
      goto LABEL_174;
    }
    v43 = &v39[8 * (v42 >> 1)];
    v44 = v38 - 8;
    v45 = *((_QWORD *)v38 - 1);
    v46 = *(_QWORD *)v43;
    v47 = *(_QWORD *)v39;
    v48 = v41 + 32 * *(_QWORD *)v43;
    v49 = v41 + 32 * *(_QWORD *)v39;
    if (!v40)
    {
      v50 = *(float *)(v48 + 28);
      v54 = *(float *)(v49 + 28);
      v52 = (float *)(v41 + 32 * v45 + 28);
      if (v50 <= v54)
      {
LABEL_42:
        if (*v52 <= v50)
        {
          v62 = 0;
          goto LABEL_52;
        }
        *(_QWORD *)v43 = v45;
        *(_QWORD *)v44 = v46;
        v55 = *(_QWORD *)v39;
        v56 = v41 + 32 * *(_QWORD *)v43;
        v57 = (float *)(v56 + 28);
        v58 = v41 + 32 * *(_QWORD *)v39;
        v59 = (float *)(v58 + 28);
        v60 = (float *)(v56 + 20);
        v61 = (float *)(v58 + 20);
        if (!v40)
        {
          v61 = v59;
          v60 = v57;
        }
        if (*v60 <= *v61)
          goto LABEL_51;
        *(_QWORD *)v39 = *(_QWORD *)v43;
        *(_QWORD *)v43 = v55;
      }
      else
      {
        if (*v52 > v50)
        {
LABEL_41:
          *(_QWORD *)v39 = v45;
          *(_QWORD *)v44 = v47;
          goto LABEL_51;
        }
        *(_QWORD *)v39 = v46;
        *(_QWORD *)v43 = v47;
        v53 = *(_QWORD *)v44;
        if (*(float *)(v41 + 32 * *(_QWORD *)v44 + 28) <= v54)
          goto LABEL_51;
LABEL_49:
        *(_QWORD *)v43 = v53;
        *(_QWORD *)v44 = v47;
      }
      v62 = 2;
      goto LABEL_52;
    }
    v50 = *(float *)(v48 + 20);
    v51 = *(float *)(v49 + 20);
    v52 = (float *)(v41 + 32 * v45 + 20);
    if (v50 <= v51)
      goto LABEL_42;
    if (*v52 > v50)
      goto LABEL_41;
    *(_QWORD *)v39 = v46;
    *(_QWORD *)v43 = v47;
    v53 = *(_QWORD *)v44;
    if (*(float *)(v41 + 32 * *(_QWORD *)v44 + 20) > v51)
      goto LABEL_49;
LABEL_51:
    v62 = 1;
LABEL_52:
    v63 = *(_QWORD *)v39;
    v64 = v41 + 32 * *(_QWORD *)v39;
    v65 = (float *)(v64 + 28);
    v66 = v41 + 32 * *(_QWORD *)v43;
    v67 = (float *)(v66 + 28);
    v68 = (float *)(v64 + 20);
    v69 = (float *)(v66 + 20);
    if (!v40)
    {
      v69 = v67;
      v68 = v65;
    }
    v70 = *v68;
    v71 = *v69;
    if (*v68 > *v69)
      break;
    v72 = v38 - 8;
    while (1)
    {
      v72 -= 8;
      if (v72 == v39)
        break;
      v75 = v41 + 32 * *(_QWORD *)v72;
      v76 = (float *)(v75 + 28);
      v77 = (float *)(v75 + 20);
      if (!v40)
        v77 = v76;
      if (*v77 > v71)
      {
        *(_QWORD *)v39 = *(_QWORD *)v72;
        *(_QWORD *)v72 = v63;
        ++v62;
        v73 = v39 + 8;
        v74 = v39 + 8;
        if (v39 + 8 >= v72)
          goto LABEL_77;
        goto LABEL_66;
      }
    }
    v102 = v39 + 8;
    v103 = v41 + 32 * *(_QWORD *)v44;
    v104 = (float *)(v103 + 28);
    v105 = (float *)(v103 + 20);
    if (!v40)
      v105 = v104;
    if (v70 <= *v105)
    {
      if (v102 == v44)
        goto LABEL_174;
      while (1)
      {
        v106 = *(_QWORD *)v102;
        v107 = v41 + 32 * *(_QWORD *)v102;
        v108 = (float *)(v107 + 28);
        v109 = (float *)(v107 + 20);
        if (!v40)
          v109 = v108;
        if (v70 > *v109)
          break;
        v102 += 8;
        if (v102 == v44)
          goto LABEL_174;
      }
      *(_QWORD *)v102 = *(_QWORD *)v44;
      v102 += 8;
      *(_QWORD *)v44 = v106;
    }
    if (v102 == v44)
      goto LABEL_174;
    while (1)
    {
      v117 = v41 + 32 * *(_QWORD *)v39;
      v118 = (float *)(v117 + 28);
      v119 = (float *)(v117 + 20);
      if (!v40)
        v119 = v118;
      v120 = *v119;
      v95 = v102 - 8;
      if (v40)
      {
        do
        {
          v122 = *((_QWORD *)v95 + 1);
          v95 += 8;
          v121 = v122;
        }
        while (v120 <= *(float *)(v41 + 32 * v122 + 20));
      }
      else
      {
        do
        {
          v123 = *((_QWORD *)v95 + 1);
          v95 += 8;
          v121 = v123;
        }
        while (v120 <= *(float *)(v41 + 32 * v123 + 28));
      }
      if (v40)
      {
        do
        {
          v125 = *((_QWORD *)v44 - 1);
          v44 -= 8;
          v124 = v125;
        }
        while (v120 > *(float *)(v41 + 32 * v125 + 20));
      }
      else
      {
        do
        {
          v126 = *((_QWORD *)v44 - 1);
          v44 -= 8;
          v124 = v126;
        }
        while (v120 > *(float *)(v41 + 32 * v126 + 28));
      }
      if (v95 >= v44)
        break;
      *(_QWORD *)v95 = v124;
      v102 = v95 + 8;
      *(_QWORD *)v44 = v121;
    }
    if ((unint64_t)v95 > v37)
      goto LABEL_174;
LABEL_123:
    v39 = v95;
    if (v38 == (char *)v37)
      goto LABEL_174;
  }
  v72 = v38 - 8;
  v73 = v39 + 8;
  v74 = v39 + 8;
  if (v39 + 8 < v38 - 8)
  {
    while (1)
    {
LABEL_66:
      v78 = v41 + 32 * *(_QWORD *)v43;
      v79 = (float *)(v78 + 28);
      v80 = (float *)(v78 + 20);
      if (!v40)
        v80 = v79;
      v81 = *v80;
      v74 -= 8;
      if (v40)
      {
        do
        {
          v83 = *((_QWORD *)v74 + 1);
          v74 += 8;
          v82 = v83;
        }
        while (*(float *)(v41 + 32 * v83 + 20) > v81);
      }
      else
      {
        do
        {
          v84 = *((_QWORD *)v74 + 1);
          v74 += 8;
          v82 = v84;
        }
        while (*(float *)(v41 + 32 * v84 + 28) > v81);
      }
      if (v40)
      {
        do
        {
          v86 = *((_QWORD *)v72 - 1);
          v72 -= 8;
          v85 = v86;
        }
        while (*(float *)(v41 + 32 * v86 + 20) <= v81);
      }
      else
      {
        do
        {
          v87 = *((_QWORD *)v72 - 1);
          v72 -= 8;
          v85 = v87;
        }
        while (*(float *)(v41 + 32 * v87 + 28) <= v81);
      }
      if (v74 >= v72)
        break;
      v135 = v43 == v74;
      *(_QWORD *)v74 = v85;
      v74 += 8;
      *(_QWORD *)v72 = v82;
      ++v62;
      if (v135)
        v43 = v72;
    }
  }
LABEL_77:
  if (v74 != v43)
  {
    v88 = *(_QWORD *)v74;
    v89 = v41 + 32 * *(_QWORD *)v43;
    v90 = (float *)(v89 + 28);
    v91 = v41 + 32 * *(_QWORD *)v74;
    v92 = (float *)(v91 + 28);
    v93 = (float *)(v89 + 20);
    v94 = (float *)(v91 + 20);
    if (!v40)
    {
      v94 = v92;
      v93 = v90;
    }
    if (*v93 > *v94)
    {
      *(_QWORD *)v74 = *(_QWORD *)v43;
      *(_QWORD *)v43 = v88;
      ++v62;
    }
  }
  if (v74 == (char *)v37)
    goto LABEL_174;
  if (v62)
  {
LABEL_84:
    v95 = v74 + 8;
    if ((unint64_t)v74 > v37)
    {
      v95 = v39;
      v38 = v74;
    }
    goto LABEL_123;
  }
  if ((unint64_t)v74 <= v37)
  {
    v110 = v74 + 8;
    while (v110 != v38)
    {
      v111 = v41 + 32 * *(_QWORD *)v110;
      v112 = (float *)(v111 + 28);
      v113 = v41 + 32 * *((_QWORD *)v110 - 1);
      v114 = (float *)(v113 + 28);
      v115 = (float *)(v111 + 20);
      v116 = (float *)(v113 + 20);
      if (!v40)
      {
        v116 = v114;
        v115 = v112;
      }
      v110 += 8;
      if (*v115 > *v116)
        goto LABEL_84;
    }
  }
  else
  {
    while (v73 != v74)
    {
      v96 = v41 + 32 * *(_QWORD *)v73;
      v97 = (float *)(v96 + 28);
      v98 = v41 + 32 * *((_QWORD *)v73 - 1);
      v99 = (float *)(v98 + 28);
      v100 = (float *)(v96 + 20);
      v101 = (float *)(v98 + 20);
      if (!v40)
      {
        v101 = v99;
        v100 = v97;
      }
      v73 += 8;
      if (*v100 > *v101)
        goto LABEL_84;
    }
  }
LABEL_174:
  if (v14)
    operator delete(v14);
}

void sub_20EEA62A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEA62C8(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, double a6, double a7)
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *i;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  __int32 *v33;
  __int32 *v34;
  unsigned int v35;
  unsigned int v36;
  float32x2_t v37;
  float32x2_t v38;
  uint32x2_t v39;
  int32x2_t v40;
  unsigned int v41;
  float *v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  float *v50;
  uint64_t v51;
  float *v52;
  float v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *j;
  uint64_t v60;
  float *v61;
  float v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  float *v69;
  float v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  float *v75;
  float v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  float *v81;
  float v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  float v86;
  float v87;
  BOOL v88;
  double v89;
  double v90;
  uint64_t v91;
  float *v92;
  float v93;
  float v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  float v98;
  float v99;
  uint64_t v100;
  float *v101;
  float *v102;
  uint64_t v103;
  float *v104;
  float v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  float *v109;
  float *v110;
  uint64_t v111;
  float *v112;
  float v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t *v116;
  uint64_t v117;
  float *v118;
  float *v119;
  uint64_t v120;
  float *v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  float *v125;
  float *v126;
  uint64_t v127;
  float *v128;
  float v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  float *v134;
  float v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int32 *v143;
  __int32 *v144;
  _DWORD *v145;
  float32x2_t v146;
  float32x2_t v147;
  uint32x2_t v148;
  uint32x2_t v149;
  int32x2_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  float32x2_t v157;
  int32x2_t v158;
  unsigned int v159;
  uint32x2_t v160;
  float32x2_t v161;
  uint64_t *v162;
  int64_t v163;
  uint64_t v164;
  int64_t v165;
  uint64_t *v166;
  int64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int32 *v173;
  __int32 *v174;
  unsigned int v175;
  unsigned int v176;
  float32x2_t v177;
  float32x2_t v178;
  uint32x2_t v179;
  int32x2_t v180;
  uint64_t v181;
  uint64_t v182;
  __int32 *v183;
  __int32 *v184;
  float32x2_t v185;
  float32x2_t v186;
  float32x2_t v187;
  uint32x2_t v188;
  uint32x2_t v189;
  int32x2_t v190;
  float32x2_t v191;
  uint32x2_t v192;
  int32x2_t v193;
  int32x2_t v194;
  unsigned __int32 v195;
  uint64_t v196;
  float *v197;
  float *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int32 *v204;
  __int32 *v205;
  float32x2_t v206;
  float32x2_t v207;
  int32x2_t v208;
  uint64_t v209;
  float *v210;
  float v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  __int32 *v219;
  __int32 *v220;
  float32x2_t v221;
  float32x2_t v222;
  int32x2_t v223;
  uint64_t v224;
  float *v225;
  float *v226;
  uint64_t v227;
  float *v228;
  float v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __int32 *v248;
  __int32 *v249;
  unsigned int v250;
  float32x2_t v251;
  float32x2_t v252;
  uint32x2_t v253;
  uint32x2_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __int32 *v263;
  __int32 *v264;
  unsigned int *v265;
  unsigned int v266;
  unsigned int v267;
  float32x2_t v268;
  float32x2_t v269;
  uint32x2_t v270;
  int32x2_t v271;
  uint64_t *v272;
  uint64_t v273;
  float *v274;
  float *v275;
  unint64_t v276;
  uint64_t v277;
  float *v278;
  float v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  uint64_t *v283;
  uint64_t v284;
  unsigned int v285;
  unsigned int v286;
  float32x2_t v287;
  int32x2_t v288;
  uint32x2_t v289;
  float32x2_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  __int32 *v294;
  __int32 *v295;
  float32x2_t v296;
  float32x2_t v297;
  int32x2_t v298;
  uint64_t v299;
  float *v300;
  float *v301;
  uint64_t v302;
  uint64_t v303;
  float *v304;
  float v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  uint64_t *v310;
  uint64_t *v311;
  uint64_t *v312;

  v11 = (uint64_t *)result;
LABEL_2:
  v12 = a2 - 1;
  v311 = a2 - 3;
  v312 = a2 - 2;
  i = v11;
  v310 = a2;
  while (2)
  {
    v11 = i;
    v14 = (char *)a2 - (char *)i;
    v15 = a2 - i;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v140 = *(a2 - 1);
        v141 = *i;
        v142 = *(_QWORD *)a3[1];
        v143 = (__int32 *)(v142 + 32 * v140);
        v144 = (__int32 *)(v142 + 32 * *i);
        v145 = *(_DWORD **)*a3;
        LODWORD(a7) = v145[2];
        *(float *)&a6 = (float)v145[1];
        LODWORD(v145) = *v145;
        v146.i32[0] = *v143;
        v147.i32[0] = v143[1];
        *(float *)&a7 = (float)LODWORD(a7);
        v146.i32[1] = *v144;
        v148 = vcvt_u32_f32(vdiv_f32(v146, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0)));
        v149 = (uint32x2_t)vdup_n_s32((int)v145 - 1);
        v147.i32[1] = v144[1];
        v150 = vmla_s32((int32x2_t)vmin_u32(v149, v148), (int32x2_t)vmin_u32(v149, vcvt_u32_f32(vdiv_f32(v147, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0)))), vdup_n_s32(v145));
        if (v150.i32[0] == v150.i32[1])
        {
          if (**(_BYTE **)(*a3 + 8))
          {
            if (*(float *)(v142 + 32 * v140 + 20) <= *(float *)(v142 + 32 * v141 + 20))
              return result;
          }
          else if (*(float *)(v142 + 32 * v140 + 28) <= *(float *)(v142 + 32 * v141 + 28))
          {
            return result;
          }
        }
        else if (v150.i32[0] >= (unsigned __int32)v150.i32[1])
        {
          return result;
        }
        *i = v140;
        *(a2 - 1) = v141;
        return result;
      case 3uLL:
        return (uint64_t)sub_20EEA76FC(i, i + 1, v12, *a3, *(_QWORD *)a3[1], a6, a7);
      case 4uLL:
        return (uint64_t)sub_20EEA7DA8(i, i + 1, i + 2, v12, a3, a6, a7);
      case 5uLL:
        return (uint64_t)sub_20EEA7FF8(i, i + 1, i + 2, i + 3, v12, a3, a6, a7);
      default:
        if (v14 <= 191)
        {
          v151 = *a3;
          v152 = (uint64_t *)a3[1];
          if ((a5 & 1) != 0)
          {
            if (i == a2)
              return result;
            v153 = i + 1;
            if (i + 1 == a2)
              return result;
            v154 = 0;
            v155 = *v152;
            *(float *)&a6 = (float)*(unsigned int *)(*(_QWORD *)v151 + 4);
            v156 = **(_DWORD **)v151;
            *(float *)&a7 = (float)*(unsigned int *)(*(_QWORD *)v151 + 8);
            v157 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
            v158 = vdup_n_s32(v156);
            v159 = v156 - 1;
            v160 = (uint32x2_t)vdup_n_s32(v156 - 1);
            v161 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
            v162 = i;
            while (1)
            {
              v216 = v162;
              v162 = v153;
              v218 = *v216;
              v217 = v216[1];
              v219 = (__int32 *)(v155 + 32 * v217);
              v220 = (__int32 *)(v155 + 32 * *v216);
              v221.i32[0] = *v219;
              v222.i32[0] = v219[1];
              v221.i32[1] = *v220;
              v222.i32[1] = v220[1];
              v223 = vmla_s32((int32x2_t)vmin_u32(v160, vcvt_u32_f32(vdiv_f32(v221, v161))), (int32x2_t)vmin_u32(v160, vcvt_u32_f32(vdiv_f32(v222, v157))), v158);
              result = v223.u32[1];
              if (v223.i32[0] == v223.i32[1])
              {
                if (**(_BYTE **)(v151 + 8))
                {
                  result = v155 + 32 * v218;
                  if (*(float *)(v155 + 32 * v217 + 20) <= *(float *)(result + 20))
                    goto LABEL_237;
                }
                else
                {
                  result = v155 + 32 * v218;
                  if (*(float *)(v155 + 32 * v217 + 28) <= *(float *)(result + 28))
                    goto LABEL_237;
                }
              }
              else if (v223.i32[0] >= (unsigned __int32)v223.i32[1])
              {
                goto LABEL_237;
              }
              v216[1] = v218;
              v215 = i;
              if (v216 == i)
                goto LABEL_236;
              v224 = v155 + 32 * v217;
              v225 = (float *)(v224 + 20);
              v226 = (float *)(v224 + 28);
              result = v154;
              while (1)
              {
                v227 = *(uint64_t *)((char *)i + result - 8);
                v228 = (float *)(v155 + 32 * v227);
                v229 = v228[1];
                v230 = (float)(*v228 / *(float *)&a6);
                if (v159 < v230)
                  v230 = v156 - 1;
                v231 = (float)(v229 / *(float *)&a7);
                if (v159 < v231)
                  v231 = v156 - 1;
                v232 = v230 + v231 * v156;
                if (v223.i32[0] != v232)
                {
                  if (v223.i32[0] >= v232)
                    goto LABEL_259;
                  goto LABEL_248;
                }
                if (**(_BYTE **)(v151 + 8))
                  break;
                if (*v226 <= *(float *)(v155 + 32 * v227 + 28))
                {
                  v215 = (uint64_t *)((char *)i + result);
                  goto LABEL_236;
                }
LABEL_248:
                --v216;
                *(uint64_t *)((char *)i + result) = v227;
                result -= 8;
                if (!result)
                {
                  v215 = i;
                  goto LABEL_236;
                }
              }
              if (*v225 > *(float *)(v155 + 32 * v227 + 20))
                goto LABEL_248;
LABEL_259:
              v215 = v216;
LABEL_236:
              *v215 = v217;
LABEL_237:
              v153 = v162 + 1;
              v154 += 8;
              if (v162 + 1 == a2)
                return result;
            }
          }
          if (i == a2)
            return result;
          v283 = i + 1;
          if (i + 1 == a2)
            return result;
          v284 = *v152;
          *(float *)&a6 = (float)*(unsigned int *)(*(_QWORD *)v151 + 4);
          v285 = **(_DWORD **)v151;
          v286 = v285 - 1;
          *(float *)&a7 = (float)*(unsigned int *)(*(_QWORD *)v151 + 8);
          v287 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
          v288 = vdup_n_s32(v285);
          v289 = (uint32x2_t)vdup_n_s32(v285 - 1);
          v290 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
          while (1)
          {
            v291 = v11;
            v11 = v283;
            v293 = *v291;
            v292 = v291[1];
            v294 = (__int32 *)(v284 + 32 * v292);
            v295 = (__int32 *)(v284 + 32 * *v291);
            v296.i32[0] = *v294;
            v297.i32[0] = v294[1];
            v296.i32[1] = *v295;
            v297.i32[1] = v295[1];
            v298 = vmla_s32((int32x2_t)vmin_u32(v289, vcvt_u32_f32(vdiv_f32(v296, v290))), (int32x2_t)vmin_u32(v289, vcvt_u32_f32(vdiv_f32(v297, v287))), v288);
            if (v298.i32[0] == v298.i32[1])
            {
              if (**(_BYTE **)(v151 + 8))
              {
                if (*(float *)(v284 + 32 * v292 + 20) <= *(float *)(v284 + 32 * v293 + 20))
                  goto LABEL_308;
              }
              else if (*(float *)(v284 + 32 * v292 + 28) <= *(float *)(v284 + 32 * v293 + 28))
              {
                goto LABEL_308;
              }
            }
            else if (v298.i32[0] >= (unsigned __int32)v298.i32[1])
            {
              goto LABEL_308;
            }
            v299 = v284 + 32 * v292;
            v300 = (float *)(v299 + 20);
            v301 = (float *)(v299 + 28);
            do
            {
              while (1)
              {
                while (1)
                {
                  result = (uint64_t)v291;
                  v302 = v293;
                  v303 = *--v291;
                  v293 = v303;
                  v304 = (float *)(v284 + 32 * v303);
                  v305 = v304[1];
                  v306 = (float)(*v304 / *(float *)&a6);
                  v291[2] = v302;
                  if (v286 >= v306)
                    v307 = v306;
                  else
                    v307 = v285 - 1;
                  v308 = (float)(v305 / *(float *)&a7);
                  if (v286 < v308)
                    v308 = v285 - 1;
                  v309 = v307 + v308 * v285;
                  if (v298.i32[0] == v309)
                    break;
                  if (v298.i32[0] >= v309)
                    goto LABEL_307;
                }
                if (!**(_BYTE **)(v151 + 8))
                  break;
                if (*v300 <= *(float *)(v284 + 32 * v293 + 20))
                  goto LABEL_307;
              }
            }
            while (*v301 > *(float *)(v284 + 32 * v293 + 28));
LABEL_307:
            *(_QWORD *)result = v292;
LABEL_308:
            v283 = v11 + 1;
            if (v11 + 1 == a2)
              return result;
          }
        }
        if (!a4)
        {
          if (i == a2)
            return result;
          v163 = (v15 - 2) >> 1;
          v164 = *a3;
          v165 = v163;
          while (1)
          {
            v167 = v165;
            if (v163 < v165)
              goto LABEL_193;
            v168 = (uint64_t *)a3[1];
            v169 = (2 * v165) | 1;
            v166 = &i[v169];
            if (2 * v167 + 2 >= (uint64_t)v15)
            {
              v172 = *v168;
              v175 = **(_DWORD **)v164;
              *(float *)&a6 = (float)*(unsigned int *)(*(_QWORD *)v164 + 4);
              v176 = v175 - 1;
              *(float *)&a7 = (float)*(unsigned int *)(*(_QWORD *)v164 + 8);
              goto LABEL_203;
            }
            v170 = *v166;
            v171 = v166[1];
            v172 = *v168;
            v173 = (__int32 *)(v172 + 32 * *v166);
            v174 = (__int32 *)(v172 + 32 * v171);
            *(float *)&a6 = (float)*(unsigned int *)(*(_QWORD *)v164 + 4);
            v175 = **(_DWORD **)v164;
            v176 = v175 - 1;
            v177.i32[0] = *v173;
            v178.i32[0] = v173[1];
            *(float *)&a7 = (float)*(unsigned int *)(*(_QWORD *)v164 + 8);
            v177.i32[1] = *v174;
            v179 = (uint32x2_t)vdup_n_s32(v175 - 1);
            v178.i32[1] = v174[1];
            v180 = vmla_s32((int32x2_t)vmin_u32(v179, vcvt_u32_f32(vdiv_f32(v177, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0)))), (int32x2_t)vmin_u32(v179, vcvt_u32_f32(vdiv_f32(v178, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0)))), vdup_n_s32(v175));
            if (v180.i32[0] != v180.i32[1])
              break;
            if (**(_BYTE **)(v164 + 8))
            {
              if (*(float *)(v172 + 32 * v170 + 20) > *(float *)(v172 + 32 * v171 + 20))
                goto LABEL_202;
            }
            else if (*(float *)(v172 + 32 * v170 + 28) > *(float *)(v172 + 32 * v171 + 28))
            {
              goto LABEL_202;
            }
LABEL_203:
            v181 = *v166;
            v182 = i[v167];
            v183 = (__int32 *)(v172 + 32 * *v166);
            v184 = (__int32 *)(v172 + 32 * v182);
            v185.i32[0] = *v183;
            v186.i32[0] = v183[1];
            v185.i32[1] = *v184;
            v187 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
            v188 = vcvt_u32_f32(vdiv_f32(v185, v187));
            v189 = (uint32x2_t)vdup_n_s32(v176);
            v190 = (int32x2_t)vmin_u32(v189, v188);
            v186.i32[1] = v184[1];
            v191 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
            v192 = vcvt_u32_f32(vdiv_f32(v186, v191));
            v193 = vdup_n_s32(v175);
            v194 = vmla_s32(v190, (int32x2_t)vmin_u32(v189, v192), v193);
            v195 = v194.u32[1];
            if (v194.i32[0] == v194.i32[1])
            {
              if (**(_BYTE **)(v164 + 8))
              {
                if (*(float *)(v172 + 32 * v181 + 20) <= *(float *)(v172 + 32 * v182 + 20))
                  goto LABEL_210;
              }
              else if (*(float *)(v172 + 32 * v181 + 28) <= *(float *)(v172 + 32 * v182 + 28))
              {
LABEL_210:
                i[v167] = v181;
                if (v163 >= v169)
                {
                  v196 = v172 + 32 * v182;
                  v197 = (float *)(v196 + 20);
                  v198 = (float *)(v196 + 28);
                  while (1)
                  {
                    v199 = v166;
                    v200 = 2 * v169;
                    v169 = (2 * v169) | 1;
                    v166 = &i[v169];
                    v201 = v200 + 2;
                    if (v201 >= (uint64_t)v15)
                      goto LABEL_221;
                    v202 = *v166;
                    v203 = v166[1];
                    v204 = (__int32 *)(v172 + 32 * *v166);
                    v205 = (__int32 *)(v172 + 32 * v203);
                    v206.i32[0] = *v204;
                    v207.i32[0] = v204[1];
                    v206.i32[1] = *v205;
                    v207.i32[1] = v205[1];
                    v208 = vmla_s32((int32x2_t)vmin_u32(v189, vcvt_u32_f32(vdiv_f32(v206, v187))), (int32x2_t)vmin_u32(v189, vcvt_u32_f32(vdiv_f32(v207, v191))), v193);
                    if (v208.i32[0] != v208.i32[1])
                      break;
                    if (**(_BYTE **)(v164 + 8))
                    {
                      if (*(float *)(v172 + 32 * v202 + 20) > *(float *)(v172 + 32 * v203 + 20))
                        goto LABEL_220;
                    }
                    else if (*(float *)(v172 + 32 * v202 + 28) > *(float *)(v172 + 32 * v203 + 28))
                    {
                      goto LABEL_220;
                    }
LABEL_221:
                    v209 = *v166;
                    v210 = (float *)(v172 + 32 * *v166);
                    v211 = v210[1];
                    v212 = (float)(*v210 / *(float *)&a6);
                    if (v176 < v212)
                      v212 = v176;
                    v213 = (float)(v211 / *(float *)&a7);
                    if (v176 < v213)
                      v213 = v176;
                    v214 = v212 + v213 * v175;
                    if (v214 == v195)
                    {
                      if (**(_BYTE **)(v164 + 8))
                      {
                        if (*(float *)(v172 + 32 * v209 + 20) > *v197)
                          goto LABEL_191;
                      }
                      else if (*(float *)(v172 + 32 * v209 + 28) > *v198)
                      {
LABEL_191:
                        v166 = v199;
                        goto LABEL_192;
                      }
                    }
                    else if (v214 < v195)
                    {
                      goto LABEL_191;
                    }
                    *v199 = v209;
                    if (v163 < v169)
                      goto LABEL_192;
                  }
                  if (v208.i32[0] >= (unsigned __int32)v208.i32[1])
                    goto LABEL_221;
LABEL_220:
                  ++v166;
                  v169 = v201;
                  goto LABEL_221;
                }
LABEL_192:
                *v166 = v182;
                v164 = *a3;
              }
            }
            else if (v194.i32[0] >= (unsigned __int32)v194.i32[1])
            {
              goto LABEL_210;
            }
LABEL_193:
            v165 = v167 - 1;
            if (!v167)
            {
              v233 = (unint64_t)v14 >> 3;
              while (1)
              {
                v235 = 0;
                v236 = *i;
                v237 = *a3;
                v238 = (uint64_t *)a3[1];
                v239 = v233 - 2;
                if (v233 < 2)
                  v239 = v233 - 1;
                v240 = v239 >> 1;
                v241 = i;
                do
                {
                  v242 = v241;
                  v241 += v235 + 1;
                  v243 = 2 * v235;
                  result = (2 * v235) | 1;
                  v235 = result;
                  v244 = v243 + 2;
                  if (v244 < v233)
                  {
                    v245 = *v241;
                    result = (uint64_t)(v241 + 1);
                    v246 = v241[1];
                    v247 = *v238;
                    v248 = (__int32 *)(*v238 + 32 * *v241);
                    v249 = (__int32 *)(*v238 + 32 * v246);
                    *(float *)&a6 = (float)*(unsigned int *)(*(_QWORD *)v237 + 4);
                    v250 = **(_DWORD **)v237;
                    v251.i32[0] = *v248;
                    v252.i32[0] = v248[1];
                    *(float *)&a7 = (float)*(unsigned int *)(*(_QWORD *)v237 + 8);
                    v251.i32[1] = *v249;
                    v253 = vcvt_u32_f32(vdiv_f32(v251, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0)));
                    v254 = (uint32x2_t)vdup_n_s32(v250 - 1);
                    v252.i32[1] = v249[1];
                    a7 = COERCE_DOUBLE(vmin_u32(v254, vcvt_u32_f32(vdiv_f32(v252, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0)))));
                    a6 = COERCE_DOUBLE(vmla_s32((int32x2_t)vmin_u32(v254, v253), *(int32x2_t *)&a7, vdup_n_s32(v250)));
                    if (LODWORD(a6) == HIDWORD(a6))
                    {
                      if (**(_BYTE **)(v237 + 8))
                      {
                        if (*(float *)(v247 + 32 * v245 + 20) > *(float *)(v247 + 32 * v246 + 20))
                          goto LABEL_266;
                      }
                      else if (*(float *)(v247 + 32 * v245 + 28) > *(float *)(v247 + 32 * v246 + 28))
                      {
LABEL_266:
                        ++v241;
                        v235 = v244;
                      }
                    }
                    else if (LODWORD(a6) < HIDWORD(a6))
                    {
                      goto LABEL_266;
                    }
                  }
                  *v242 = *v241;
                }
                while (v235 <= v240);
                if (v241 == --a2)
                {
                  *v241 = v236;
                }
                else
                {
                  *v241 = *a2;
                  *a2 = v236;
                  v255 = (char *)v241 - (char *)i + 8;
                  if (v255 >= 9)
                  {
                    v256 = *a3;
                    v257 = ((unint64_t)v255 >> 3) - 2;
                    v258 = v257 >> 1;
                    v259 = &i[v257 >> 1];
                    v260 = *v259;
                    v261 = *v241;
                    v262 = *(_QWORD *)a3[1];
                    v263 = (__int32 *)(v262 + 32 * *v259);
                    v264 = (__int32 *)(v262 + 32 * *v241);
                    v265 = *(unsigned int **)*a3;
                    LODWORD(a7) = v265[2];
                    *(float *)&a6 = (float)v265[1];
                    v266 = *v265;
                    v267 = v266 - 1;
                    v268.i32[0] = *v263;
                    v269.i32[0] = v263[1];
                    *(float *)&a7 = (float)LODWORD(a7);
                    v268.i32[1] = *v264;
                    v270 = (uint32x2_t)vdup_n_s32(v266 - 1);
                    v269.i32[1] = v264[1];
                    v271 = vmla_s32((int32x2_t)vmin_u32(v270, vcvt_u32_f32(vdiv_f32(v268, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0)))), (int32x2_t)vmin_u32(v270, vcvt_u32_f32(vdiv_f32(v269, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0)))), vdup_n_s32(v266));
                    result = v271.u32[1];
                    if (v271.i32[0] == v271.i32[1])
                    {
                      if (**(_BYTE **)(v256 + 8))
                      {
                        if (*(float *)(v262 + 32 * v260 + 20) > *(float *)(v262 + 32 * v261 + 20))
                          goto LABEL_286;
                      }
                      else if (*(float *)(v262 + 32 * v260 + 28) > *(float *)(v262 + 32 * v261 + 28))
                      {
                        goto LABEL_286;
                      }
                    }
                    else if (v271.i32[0] < (unsigned __int32)v271.i32[1])
                    {
LABEL_286:
                      *v241 = v260;
                      if (v257 >= 2)
                      {
                        v273 = v262 + 32 * v261;
                        v274 = (float *)(v273 + 20);
                        v275 = (float *)(v273 + 28);
                        while (1)
                        {
                          v276 = v258 - 1;
                          v258 = (v258 - 1) >> 1;
                          v272 = &i[v258];
                          v277 = *v272;
                          v278 = (float *)(v262 + 32 * *v272);
                          v279 = v278[1];
                          v280 = (float)(*v278 / *(float *)&a6);
                          if (v267 < v280)
                            v280 = v266 - 1;
                          v281 = (float)(v279 / *(float *)&a7);
                          if (v267 < v281)
                            v281 = v266 - 1;
                          v282 = v280 + v281 * v266;
                          if (v282 == v271.i32[1])
                          {
                            if (**(_BYTE **)(v256 + 8))
                            {
                              if (*(float *)(v262 + 32 * v277 + 20) <= *v274)
                                break;
                            }
                            else if (*(float *)(v262 + 32 * v277 + 28) <= *v275)
                            {
                              break;
                            }
                          }
                          else if (v282 >= v271.i32[1])
                          {
                            break;
                          }
                          *v259 = v277;
                          v259 = &i[v258];
                          if (v276 <= 1)
                            goto LABEL_288;
                        }
                      }
                      v272 = v259;
LABEL_288:
                      *v272 = v261;
                    }
                  }
                }
                if (v233-- <= 2)
                  return result;
              }
            }
          }
          if (v180.i32[0] >= (unsigned __int32)v180.i32[1])
            goto LABEL_203;
LABEL_202:
          ++v166;
          v169 = 2 * v167 + 2;
          goto LABEL_203;
        }
        v16 = v15 >> 1;
        v17 = &i[v15 >> 1];
        v18 = *a3;
        v19 = *(_QWORD *)a3[1];
        if ((unint64_t)v14 >= 0x401)
        {
          sub_20EEA76FC(v11, &v11[v15 >> 1], v12, v18, v19, a6, a7);
          v20 = &v11[v16];
          sub_20EEA76FC(v11 + 1, v20 - 1, v312, *a3, *(_QWORD *)a3[1], v21, v22);
          a2 = v310;
          sub_20EEA76FC(v11 + 2, &v11[v16 + 1], v311, *a3, *(_QWORD *)a3[1], v23, v24);
          result = (uint64_t)sub_20EEA76FC(v20 - 1, v17, &v11[v16 + 1], *a3, *(_QWORD *)a3[1], v25, v26);
          v27 = *v11;
          *v11 = *v20;
          *v20 = v27;
          --a4;
          v28 = *a3;
          v29 = *(_QWORD *)a3[1];
          v30 = *v11;
          v31 = *(unsigned int **)*a3;
          if ((a5 & 1) != 0)
            goto LABEL_13;
LABEL_8:
          v32 = *(v11 - 1);
          v33 = (__int32 *)(v29 + 32 * v32);
          v34 = (__int32 *)(v29 + 32 * v30);
          LODWORD(a7) = v31[2];
          *(float *)&a6 = (float)v31[1];
          v35 = *v31;
          v36 = *v31 - 1;
          v37.i32[0] = *v33;
          v38.i32[0] = v33[1];
          *(float *)&a7 = (float)LODWORD(a7);
          v37.i32[1] = *v34;
          v39 = (uint32x2_t)vdup_n_s32(v36);
          v38.i32[1] = v34[1];
          v40 = vmla_s32((int32x2_t)vmin_u32(v39, vcvt_u32_f32(vdiv_f32(v37, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0)))), (int32x2_t)vmin_u32(v39, vcvt_u32_f32(vdiv_f32(v38, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0)))), vdup_n_s32(v35));
          v41 = v40.u32[1];
          if (v40.i32[0] == v40.i32[1])
          {
            if (**(_BYTE **)(v28 + 8))
            {
              if (*(float *)(v29 + 32 * v32 + 20) > *(float *)(v29 + 32 * v30 + 20))
                goto LABEL_19;
            }
            else if (*(float *)(v29 + 32 * v32 + 28) > *(float *)(v29 + 32 * v30 + 28))
            {
              goto LABEL_19;
            }
          }
          else if (v40.i32[0] < (unsigned __int32)v40.i32[1])
          {
            goto LABEL_19;
          }
          v91 = *v12;
          v92 = (float *)(v29 + 32 * *v12);
          v93 = *v92;
          v94 = v92[1];
          v95 = (float)(*v92 / *(float *)&a6);
          if (v36 < v95)
            v95 = v36;
          v96 = (float)(v94 / *(float *)&a7);
          if (v36 < v96)
            v96 = v36;
          v97 = v95 + v96 * v35;
          if (v40.i32[1] == v97)
          {
            if (**(_BYTE **)(v28 + 8))
            {
              v98 = *(float *)(v29 + 32 * v30 + 20);
              v99 = *(float *)(v29 + 32 * v91 + 20);
            }
            else
            {
              v98 = *(float *)(v29 + 32 * v30 + 28);
              v99 = *(float *)(v29 + 32 * v91 + 28);
            }
            if (v98 > v99)
            {
LABEL_103:
              v100 = v29 + 32 * v30;
              v101 = (float *)(v100 + 20);
              v102 = (float *)(v100 + 28);
              for (i = v11 + 1; ; ++i)
              {
                v103 = *i;
                v104 = (float *)(v29 + 32 * *i);
                v105 = v104[1];
                v106 = (float)(*v104 / *(float *)&a6);
                if (v36 < v106)
                  v106 = v36;
                v107 = (float)(v105 / *(float *)&a7);
                if (v36 < v107)
                  v107 = v36;
                result = v106 + v107 * v35;
                if (v40.i32[1] == (_DWORD)result)
                {
                  result = **(unsigned __int8 **)(v28 + 8);
                  if (**(_BYTE **)(v28 + 8))
                  {
                    if (*v101 > *(float *)(v29 + 32 * v103 + 20))
                      goto LABEL_131;
                  }
                  else if (*v102 > *(float *)(v29 + 32 * v103 + 28))
                  {
                    goto LABEL_131;
                  }
                }
                else if (v40.i32[1] < result)
                {
                  goto LABEL_131;
                }
              }
            }
          }
          else if (v40.i32[1] < v97)
          {
            goto LABEL_103;
          }
          i = v11 + 1;
          if (v11 + 1 < a2)
          {
            v108 = v29 + 32 * v30;
            v109 = (float *)(v108 + 20);
            v110 = (float *)(v108 + 28);
            do
            {
              v111 = *i;
              v112 = (float *)(v29 + 32 * *i);
              v113 = v112[1];
              v114 = (float)(*v112 / *(float *)&a6);
              if (v36 < v114)
                v114 = v36;
              v115 = (float)(v113 / *(float *)&a7);
              if (v36 < v115)
                v115 = v36;
              result = v114 + v115 * v35;
              if (v40.i32[1] == (_DWORD)result)
              {
                result = **(unsigned __int8 **)(v28 + 8);
                if (**(_BYTE **)(v28 + 8))
                {
                  if (*v109 > *(float *)(v29 + 32 * v111 + 20))
                    break;
                }
                else if (*v110 > *(float *)(v29 + 32 * v111 + 28))
                {
                  break;
                }
              }
              else if (v40.i32[1] < result)
              {
                break;
              }
              ++i;
            }
            while (i < a2);
          }
LABEL_131:
          v116 = a2;
          if (i < a2)
          {
            v117 = v29 + 32 * v30;
            v118 = (float *)(v117 + 20);
            v119 = (float *)(v117 + 28);
            v116 = v12;
            while (1)
            {
              v122 = (float)(v93 / *(float *)&a6);
              if (v36 < v122)
                v122 = v36;
              v123 = (float)(v94 / *(float *)&a7);
              if (v36 < v123)
                v123 = v36;
              result = v122 + v123 * v35;
              if (v40.i32[1] == (_DWORD)result)
              {
                result = **(unsigned __int8 **)(v28 + 8);
                if (**(_BYTE **)(v28 + 8))
                {
                  if (*v118 <= *(float *)(v29 + 32 * v91 + 20))
                    break;
                }
                else if (*v119 <= *(float *)(v29 + 32 * v91 + 28))
                {
                  break;
                }
              }
              else if (v40.i32[1] >= result)
              {
                break;
              }
              v120 = *--v116;
              v91 = v120;
              v121 = (float *)(v29 + 32 * v120);
              v93 = *v121;
              v94 = v121[1];
            }
          }
          if (i < v116)
          {
            v124 = v29 + 32 * v30;
            v125 = (float *)(v124 + 20);
            v126 = (float *)(v124 + 28);
            v127 = *i;
            result = *v116;
            do
            {
              *i++ = result;
              *v116 = v127;
              while (1)
              {
                v127 = *i;
                v128 = (float *)(v29 + 32 * *i);
                v129 = v128[1];
                v130 = (float)(*v128 / *(float *)&a6);
                if (v36 < v130)
                  v130 = v36;
                v131 = (float)(v129 / *(float *)&a7);
                if (v36 < v131)
                  v131 = v36;
                v132 = v130 + v131 * v35;
                if (v40.i32[1] != v132)
                {
                  if (v40.i32[1] < v132)
                    goto LABEL_161;
                  goto LABEL_149;
                }
                if (!**(_BYTE **)(v28 + 8))
                  break;
                if (*v125 > *(float *)(v29 + 32 * v127 + 20))
                  goto LABEL_161;
LABEL_149:
                ++i;
              }
              if (*v126 <= *(float *)(v29 + 32 * v127 + 28))
                goto LABEL_149;
              do
              {
                while (1)
                {
                  while (1)
                  {
LABEL_161:
                    v133 = *--v116;
                    result = v133;
                    v134 = (float *)(v29 + 32 * v133);
                    v135 = v134[1];
                    v136 = (float)(*v134 / *(float *)&a6);
                    if (v36 < v136)
                      v136 = v36;
                    v137 = (float)(v135 / *(float *)&a7);
                    if (v36 < v137)
                      v137 = v36;
                    v138 = v136 + v137 * v35;
                    if (v40.i32[1] == v138)
                      break;
                    if (v40.i32[1] >= v138)
                      goto LABEL_146;
                  }
                  if (!**(_BYTE **)(v28 + 8))
                    break;
                  if (*v125 <= *(float *)(v29 + 32 * result + 20))
                    goto LABEL_146;
                }
              }
              while (*v126 > *(float *)(v29 + 32 * result + 28));
LABEL_146:
              ;
            }
            while (i < v116);
          }
          v139 = i - 1;
          if (i - 1 != v11)
            *v11 = *v139;
          a5 = 0;
          *v139 = v30;
          continue;
        }
        result = (uint64_t)sub_20EEA76FC(&v11[v15 >> 1], v11, v12, v18, v19, a6, a7);
        --a4;
        v28 = *a3;
        v29 = *(_QWORD *)a3[1];
        v30 = *v11;
        v31 = *(unsigned int **)*a3;
        if ((a5 & 1) == 0)
          goto LABEL_8;
LABEL_13:
        v35 = *v31;
        v42 = (float *)(v29 + 32 * v30);
        v43 = v42[1];
        v44 = v31[2];
        *(float *)&a6 = (float)v31[1];
        v36 = *v31 - 1;
        *(float *)&a7 = (float)v44;
        v45 = (float)(*v42 / *(float *)&a6);
        if (v36 < v45)
          v45 = v36;
        v46 = (float)(v43 / *(float *)&a7);
        if (v36 < v46)
          v46 = v36;
        v41 = v45 + v46 * v35;
LABEL_19:
        v47 = 0;
        v48 = v29 + 32 * v30;
        v49 = (float *)(v48 + 20);
        v50 = (float *)(v48 + 28);
        while (1)
        {
          v51 = v11[v47 + 1];
          v52 = (float *)(v29 + 32 * v51);
          v53 = v52[1];
          v54 = (float)(*v52 / *(float *)&a6);
          if (v36 < v54)
            v54 = v36;
          v55 = (float)(v53 / *(float *)&a7);
          if (v36 < v55)
            v55 = v36;
          v56 = v54 + v55 * v35;
          if (v56 != v41)
          {
            if (v56 >= v41)
              goto LABEL_31;
            goto LABEL_21;
          }
          if (!**(_BYTE **)(v28 + 8))
            break;
          if (*(float *)(v29 + 32 * v51 + 20) <= *v49)
            goto LABEL_31;
LABEL_21:
          ++v47;
        }
        if (*(float *)(v29 + 32 * v51 + 28) > *v50)
          goto LABEL_21;
LABEL_31:
        v57 = &v11[v47];
        v58 = (unint64_t)&v11[v47 + 1];
        j = v12;
        if (v47 * 8)
        {
          while (1)
          {
            v60 = *j;
            v61 = (float *)(v29 + 32 * *j);
            v62 = v61[1];
            v63 = (float)(*v61 / *(float *)&a6);
            if (v36 < v63)
              v63 = v36;
            v64 = (float)(v62 / *(float *)&a7);
            if (v36 < v64)
              v64 = v36;
            v65 = v63 + v64 * v35;
            if (v65 == v41)
            {
              if (**(_BYTE **)(v28 + 8))
              {
                if (*(float *)(v29 + 32 * v60 + 20) > *v49)
                  goto LABEL_45;
              }
              else if (*(float *)(v29 + 32 * v60 + 28) > *v50)
              {
                goto LABEL_45;
              }
            }
            else if (v65 < v41)
            {
              goto LABEL_45;
            }
            --j;
          }
        }
        j = a2;
        if (v58 < (unint64_t)a2)
        {
          for (j = v12; ; --j)
          {
            v80 = *j;
            v81 = (float *)(v29 + 32 * *j);
            v82 = v81[1];
            v83 = (float)(*v81 / *(float *)&a6);
            if (v36 < v83)
              v83 = v36;
            v84 = (float)(v82 / *(float *)&a7);
            if (v36 < v84)
              v84 = v36;
            v85 = v83 + v84 * v35;
            if (v85 == v41)
            {
              if (**(_BYTE **)(v28 + 8))
              {
                if (v58 >= (unint64_t)j)
                  break;
                v86 = *(float *)(v29 + 32 * v80 + 20);
                v87 = *v49;
              }
              else
              {
                if (v58 >= (unint64_t)j)
                  break;
                v86 = *(float *)(v29 + 32 * v80 + 28);
                v87 = *v50;
              }
              if (v86 > v87)
                break;
            }
            else if (v58 >= (unint64_t)j || v85 < v41)
            {
              break;
            }
          }
        }
LABEL_45:
        if (v58 >= (unint64_t)j)
          goto LABEL_88;
        v66 = *j;
        v67 = (uint64_t *)v58;
        v68 = j;
        while (2)
        {
          *v67++ = v66;
          *v68 = v51;
          while (2)
          {
            v51 = *v67;
            v69 = (float *)(v29 + 32 * *v67);
            v70 = v69[1];
            v71 = (float)(*v69 / *(float *)&a6);
            if (v36 < v71)
              v71 = v36;
            v72 = (float)(v70 / *(float *)&a7);
            if (v36 < v72)
              v72 = v36;
            v73 = v71 + v72 * v35;
            if (v73 != v41)
            {
              if (v73 >= v41)
                goto LABEL_62;
LABEL_50:
              ++v67;
              continue;
            }
            break;
          }
          if (**(_BYTE **)(v28 + 8))
          {
            if (*(float *)(v29 + 32 * v51 + 20) <= *v49)
              goto LABEL_62;
            goto LABEL_50;
          }
          if (*(float *)(v29 + 32 * v51 + 28) > *v50)
            goto LABEL_50;
          do
          {
            while (1)
            {
              while (1)
              {
LABEL_62:
                v74 = *--v68;
                v66 = v74;
                v75 = (float *)(v29 + 32 * v74);
                v76 = v75[1];
                v77 = (float)(*v75 / *(float *)&a6);
                if (v36 < v77)
                  v77 = v36;
                v78 = (float)(v76 / *(float *)&a7);
                if (v36 < v78)
                  v78 = v36;
                v79 = v77 + v78 * v35;
                if (v79 == v41)
                  break;
                if (v79 < v41)
                  goto LABEL_47;
              }
              if (!**(_BYTE **)(v28 + 8))
                break;
              if (*(float *)(v29 + 32 * v66 + 20) > *v49)
                goto LABEL_47;
            }
          }
          while (*(float *)(v29 + 32 * v66 + 28) <= *v50);
LABEL_47:
          if (v67 < v68)
            continue;
          break;
        }
        v57 = v67 - 1;
LABEL_88:
        if (v57 != v11)
          *v11 = *v57;
        *v57 = v30;
        if (v58 < (unint64_t)j)
        {
LABEL_93:
          result = sub_20EEA62C8(v11, v57, a3, a4, a5 & 1);
          a5 = 0;
          i = v57 + 1;
          continue;
        }
        v88 = sub_20EEA79F0(v11, v57, a3, a6, a7);
        i = v57 + 1;
        result = sub_20EEA79F0(v57 + 1, a2, a3, v89, v90);
        if (!(_DWORD)result)
        {
          if (v88)
            continue;
          goto LABEL_93;
        }
        a2 = v57;
        if (!v88)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_20EEA76FC(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  __int32 *v9;
  __int32 *v10;
  unsigned int v11;
  unsigned int v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  uint32x2_t v16;
  int32x2_t v17;
  float32x2_t v18;
  uint32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  uint64_t v22;
  float *v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  float *v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  float *v34;
  float v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  __int32 *v40;
  __int32 *v41;
  float32x2_t v42;
  float32x2_t v43;
  int32x2_t v44;

  v7 = *a2;
  v8 = *result;
  v9 = (__int32 *)(a5 + 32 * *a2);
  v10 = (__int32 *)(a5 + 32 * *result);
  *(float *)&a7 = (float)*(unsigned int *)(*(_QWORD *)a4 + 4);
  v11 = **(_DWORD **)a4;
  v12 = v11 - 1;
  v13.i32[0] = *v9;
  v14.i32[0] = v9[1];
  *(float *)&a6 = (float)*(unsigned int *)(*(_QWORD *)a4 + 8);
  v13.i32[1] = *v10;
  v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
  v16 = (uint32x2_t)vdup_n_s32(v11 - 1);
  v17 = (int32x2_t)vmin_u32(v16, vcvt_u32_f32(vdiv_f32(v13, v15)));
  v14.i32[1] = v10[1];
  v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
  v19 = vcvt_u32_f32(vdiv_f32(v14, v18));
  v20 = vdup_n_s32(v11);
  v21 = vmla_s32(v17, (int32x2_t)vmin_u32(v16, v19), v20);
  if (v21.i32[0] != v21.i32[1])
  {
    if (v21.i32[0] >= (unsigned __int32)v21.i32[1])
      goto LABEL_4;
LABEL_13:
    v27 = *a3;
    v28 = (float *)(a5 + 32 * *a3);
    v29 = v28[1];
    v30 = (float)(*v28 / *(float *)&a7);
    if (v12 < v30)
      v30 = v11 - 1;
    v31 = (float)(v29 / *(float *)&a6);
    if (v12 < v31)
      v31 = v11 - 1;
    v32 = v30 + v31 * v11;
    if (v32 == v21.i32[0])
    {
      if (**(_BYTE **)(a4 + 8))
      {
        if (*(float *)(a5 + 32 * v27 + 20) <= *(float *)(a5 + 32 * v7 + 20))
          goto LABEL_20;
LABEL_31:
        *result = v27;
        *a3 = v8;
        return result;
      }
      if (*(float *)(a5 + 32 * v27 + 28) > *(float *)(a5 + 32 * v7 + 28))
        goto LABEL_31;
    }
    else if (v32 < v21.i32[0])
    {
      goto LABEL_31;
    }
LABEL_20:
    *result = v7;
    *a2 = v8;
    v33 = *a3;
    v34 = (float *)(a5 + 32 * *a3);
    v35 = v34[1];
    v36 = (float)(*v34 / *(float *)&a7);
    if (v12 < v36)
      v36 = v11 - 1;
    if (v12 >= (float)(v35 / *(float *)&a6))
      v12 = (float)(v35 / *(float *)&a6);
    v37 = v36 + v12 * v11;
    if (v37 == v21.i32[1])
    {
      if (**(_BYTE **)(a4 + 8))
      {
        if (*(float *)(a5 + 32 * v33 + 20) <= *(float *)(a5 + 32 * v8 + 20))
          return result;
      }
      else if (*(float *)(a5 + 32 * v33 + 28) <= *(float *)(a5 + 32 * v8 + 28))
      {
        return result;
      }
    }
    else if (v37 >= v21.i32[1])
    {
      return result;
    }
    *a2 = v33;
    *a3 = v8;
    return result;
  }
  if (!**(_BYTE **)(a4 + 8))
  {
    if (*(float *)(a5 + 32 * v7 + 28) <= *(float *)(a5 + 32 * v8 + 28))
      goto LABEL_4;
    goto LABEL_13;
  }
  if (*(float *)(a5 + 32 * v7 + 20) > *(float *)(a5 + 32 * v8 + 20))
    goto LABEL_13;
LABEL_4:
  v22 = *a3;
  v23 = (float *)(a5 + 32 * *a3);
  v24 = v23[1];
  v25 = (float)(*v23 / *(float *)&a7);
  if (v12 < v25)
    v25 = v11 - 1;
  if (v12 >= (float)(v24 / *(float *)&a6))
    v12 = (float)(v24 / *(float *)&a6);
  v26 = v25 + v12 * v11;
  if (v26 == v21.i32[0])
  {
    if (**(_BYTE **)(a4 + 8))
    {
      if (*(float *)(a5 + 32 * v22 + 20) <= *(float *)(a5 + 32 * v7 + 20))
        return result;
    }
    else if (*(float *)(a5 + 32 * v22 + 28) <= *(float *)(a5 + 32 * v7 + 28))
    {
      return result;
    }
  }
  else if (v26 >= v21.i32[0])
  {
    return result;
  }
  *a2 = v22;
  *a3 = v7;
  v38 = *a2;
  v39 = *result;
  v40 = (__int32 *)(a5 + 32 * *a2);
  v41 = (__int32 *)(a5 + 32 * *result);
  v42.i32[0] = *v40;
  v43.i32[0] = v40[1];
  v42.i32[1] = *v41;
  v43.i32[1] = v41[1];
  v44 = vmla_s32((int32x2_t)vmin_u32(v16, vcvt_u32_f32(vdiv_f32(v42, v15))), (int32x2_t)vmin_u32(v16, vcvt_u32_f32(vdiv_f32(v43, v18))), v20);
  if (v44.i32[0] == v44.i32[1])
  {
    if (**(_BYTE **)(a4 + 8))
    {
      if (*(float *)(a5 + 32 * v38 + 20) > *(float *)(a5 + 32 * v39 + 20))
        goto LABEL_48;
    }
    else if (*(float *)(a5 + 32 * v38 + 28) > *(float *)(a5 + 32 * v39 + 28))
    {
LABEL_48:
      *result = v38;
      *a2 = v39;
    }
  }
  else if (v44.i32[0] < (unsigned __int32)v44.i32[1])
  {
    goto LABEL_48;
  }
  return result;
}

BOOL sub_20EEA79F0(uint64_t *a1, uint64_t *a2, uint64_t *a3, double a4, double a5)
{
  uint64_t v8;
  _BOOL8 result;
  uint64_t *v10;
  int32x2_t v11;
  int32x2_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  float32x2_t v21;
  int32x2_t v22;
  uint32x2_t v23;
  float32x2_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int32 *v28;
  __int32 *v29;
  float32x2_t v30;
  float32x2_t v31;
  int32x2_t v32;
  uint64_t v33;
  float *v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int32 *v46;
  __int32 *v47;
  _DWORD *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint32x2_t v51;
  uint32x2_t v52;
  int32x2_t v53;

  v8 = a2 - a1;
  result = 1;
  switch(v8)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v43 = *(a2 - 1);
      v44 = *a1;
      v45 = *(_QWORD *)a3[1];
      v46 = (__int32 *)(v45 + 32 * v43);
      v47 = (__int32 *)(v45 + 32 * *a1);
      v48 = *(_DWORD **)*a3;
      LODWORD(a5) = v48[2];
      *(float *)&a4 = (float)v48[1];
      LODWORD(v48) = *v48;
      v49.i32[0] = *v46;
      v50.i32[0] = v46[1];
      *(float *)&a5 = (float)LODWORD(a5);
      v49.i32[1] = *v47;
      v51 = vcvt_u32_f32(vdiv_f32(v49, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0)));
      v52 = (uint32x2_t)vdup_n_s32((int)v48 - 1);
      v50.i32[1] = v47[1];
      v53 = vmla_s32((int32x2_t)vmin_u32(v52, v51), (int32x2_t)vmin_u32(v52, vcvt_u32_f32(vdiv_f32(v50, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0)))), vdup_n_s32(v48));
      if (v53.i32[0] == v53.i32[1])
      {
        if (**(_BYTE **)(*a3 + 8))
        {
          if (*(float *)(v45 + 32 * v43 + 20) <= *(float *)(v45 + 32 * v44 + 20))
            return result;
        }
        else if (*(float *)(v45 + 32 * v43 + 28) <= *(float *)(v45 + 32 * v44 + 28))
        {
          return result;
        }
      }
      else if (v53.i32[0] >= (unsigned __int32)v53.i32[1])
      {
        return result;
      }
      *a1 = v43;
      *(a2 - 1) = v44;
      return result;
    case 3:
      sub_20EEA76FC(a1, a1 + 1, a2 - 1, *a3, *(_QWORD *)a3[1], a4, a5);
      return 1;
    case 4:
      sub_20EEA7DA8(a1, a1 + 1, a1 + 2, a2 - 1, a3, a4, a5);
      return 1;
    case 5:
      sub_20EEA7FF8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3, a4, a5);
      return 1;
    default:
      v10 = a1 + 2;
      sub_20EEA76FC(a1, a1 + 1, a1 + 2, *a3, *(_QWORD *)a3[1], a4, a5);
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      v16 = *a3;
      v17 = *(_QWORD *)a3[1];
      v18 = *(unsigned int **)*a3;
      v12.i32[0] = v18[2];
      *(float *)v11.i32 = (float)v18[1];
      v19 = *v18;
      v20 = v19 - 1;
      *(float *)v12.i32 = (float)v12.u32[0];
      v21 = (float32x2_t)vdup_lane_s32(v12, 0);
      v22 = vdup_n_s32(v19);
      v23 = (uint32x2_t)vdup_n_s32(v19 - 1);
      v24 = (float32x2_t)vdup_lane_s32(v11, 0);
      break;
  }
  while (2)
  {
    v26 = *v13;
    v27 = *v10;
    v28 = (__int32 *)(v17 + 32 * *v13);
    v29 = (__int32 *)(v17 + 32 * *v10);
    v30.i32[0] = *v28;
    v31.i32[0] = v28[1];
    v30.i32[1] = *v29;
    v31.i32[1] = v29[1];
    v32 = vmla_s32((int32x2_t)vmin_u32(v23, vcvt_u32_f32(vdiv_f32(v30, v24))), (int32x2_t)vmin_u32(v23, vcvt_u32_f32(vdiv_f32(v31, v21))), v22);
    if (v32.i32[0] == v32.i32[1])
    {
      if (**(_BYTE **)(v16 + 8))
      {
        if (*(float *)(v17 + 32 * v26 + 20) <= *(float *)(v17 + 32 * v27 + 20))
          goto LABEL_7;
      }
      else if (*(float *)(v17 + 32 * v26 + 28) <= *(float *)(v17 + 32 * v27 + 28))
      {
        goto LABEL_7;
      }
    }
    else if (v32.i32[0] >= (unsigned __int32)v32.i32[1])
    {
      goto LABEL_7;
    }
    *v13 = v27;
    v25 = a1;
    if (v10 == a1)
      goto LABEL_6;
    v33 = v17 + 32 * v26;
    v34 = (float *)(v33 + 20);
    v35 = (float *)(v33 + 28);
    v36 = v14;
    while (1)
    {
      v37 = *(uint64_t *)((char *)a1 + v36 + 8);
      v38 = (float *)(v17 + 32 * v37);
      v39 = v38[1];
      v40 = (float)(*v38 / *(float *)v11.i32);
      if (v20 < v40)
        v40 = v19 - 1;
      v41 = (float)(v39 / *(float *)v12.i32);
      if (v20 < v41)
        v41 = v19 - 1;
      v42 = v40 + v41 * v19;
      if (v32.i32[0] == v42)
        break;
      if (v32.i32[0] >= v42)
        goto LABEL_28;
LABEL_18:
      --v10;
      *(uint64_t *)((char *)a1 + v36 + 16) = v37;
      v36 -= 8;
      if (v36 == -16)
      {
        v25 = a1;
        goto LABEL_6;
      }
    }
    if (**(_BYTE **)(v16 + 8))
    {
      if (*v34 <= *(float *)(v17 + 32 * v37 + 20))
      {
        v25 = (uint64_t *)((char *)a1 + v36 + 16);
        goto LABEL_6;
      }
      goto LABEL_18;
    }
    if (*v35 > *(float *)(v17 + 32 * v37 + 28))
      goto LABEL_18;
LABEL_28:
    v25 = v10;
LABEL_6:
    *v25 = v26;
    if (++v15 == 8)
      return v13 + 1 == a2;
LABEL_7:
    v10 = v13;
    v14 += 8;
    if (++v13 != a2)
      continue;
    return 1;
  }
}

uint64_t *sub_20EEA7DA8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, double a6, double a7)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int32 *v17;
  __int32 *v18;
  _DWORD *v19;
  unsigned int v20;
  int32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  float32x2_t v25;
  uint32x2_t v26;
  int32x2_t v27;
  float32x2_t v28;
  uint32x2_t v29;
  int32x2_t v30;
  int32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  __int32 *v34;
  __int32 *v35;
  float32x2_t v36;
  float32x2_t v37;
  int32x2_t v38;
  uint64_t v39;
  uint64_t v40;
  __int32 *v41;
  __int32 *v42;
  float32x2_t v43;
  float32x2_t v44;
  int32x2_t v45;

  result = sub_20EEA76FC(a1, a2, a3, *a5, *(_QWORD *)a5[1], a6, a7);
  v13 = *a4;
  v14 = *a3;
  v15 = *a5;
  v16 = *(_QWORD *)a5[1];
  v17 = (__int32 *)(v16 + 32 * *a4);
  v18 = (__int32 *)(v16 + 32 * *a3);
  v19 = *(_DWORD **)*a5;
  v20 = v19[2];
  *(float *)v21.i32 = (float)v19[1];
  LODWORD(v19) = *v19;
  v22.i32[0] = *v17;
  v23.i32[0] = v17[1];
  *(float *)v24.i32 = (float)v20;
  v22.i32[1] = *v18;
  v25 = (float32x2_t)vdup_lane_s32(v21, 0);
  v26 = (uint32x2_t)vdup_n_s32((int)v19 - 1);
  v27 = (int32x2_t)vmin_u32(v26, vcvt_u32_f32(vdiv_f32(v22, v25)));
  v23.i32[1] = v18[1];
  v28 = (float32x2_t)vdup_lane_s32(v24, 0);
  v29 = vcvt_u32_f32(vdiv_f32(v23, v28));
  v30 = vdup_n_s32(v19);
  v31 = vmla_s32(v27, (int32x2_t)vmin_u32(v26, v29), v30);
  if (v31.i32[0] == v31.i32[1])
  {
    if (**(_BYTE **)(v15 + 8))
    {
      if (*(float *)(v16 + 32 * v13 + 20) <= *(float *)(v16 + 32 * v14 + 20))
        return result;
    }
    else if (*(float *)(v16 + 32 * v13 + 28) <= *(float *)(v16 + 32 * v14 + 28))
    {
      return result;
    }
  }
  else if (v31.i32[0] >= (unsigned __int32)v31.i32[1])
  {
    return result;
  }
  *a3 = v13;
  *a4 = v14;
  v32 = *a3;
  v33 = *a2;
  v34 = (__int32 *)(v16 + 32 * *a3);
  v35 = (__int32 *)(v16 + 32 * *a2);
  v36.i32[0] = *v34;
  v37.i32[0] = v34[1];
  v36.i32[1] = *v35;
  v37.i32[1] = v35[1];
  v38 = vmla_s32((int32x2_t)vmin_u32(v26, vcvt_u32_f32(vdiv_f32(v36, v25))), (int32x2_t)vmin_u32(v26, vcvt_u32_f32(vdiv_f32(v37, v28))), v30);
  if (v38.i32[0] == v38.i32[1])
  {
    if (**(_BYTE **)(v15 + 8))
    {
      if (*(float *)(v16 + 32 * v32 + 20) <= *(float *)(v16 + 32 * v33 + 20))
        return result;
    }
    else if (*(float *)(v16 + 32 * v32 + 28) <= *(float *)(v16 + 32 * v33 + 28))
    {
      return result;
    }
  }
  else if (v38.i32[0] >= (unsigned __int32)v38.i32[1])
  {
    return result;
  }
  *a2 = v32;
  *a3 = v33;
  v39 = *a2;
  v40 = *a1;
  v41 = (__int32 *)(v16 + 32 * *a2);
  v42 = (__int32 *)(v16 + 32 * *a1);
  v43.i32[0] = *v41;
  v44.i32[0] = v41[1];
  v43.i32[1] = *v42;
  v44.i32[1] = v42[1];
  v45 = vmla_s32((int32x2_t)vmin_u32(v26, vcvt_u32_f32(vdiv_f32(v43, v25))), (int32x2_t)vmin_u32(v26, vcvt_u32_f32(vdiv_f32(v44, v28))), v30);
  if (v45.i32[0] == v45.i32[1])
  {
    if (**(_BYTE **)(v15 + 8))
    {
      if (*(float *)(v16 + 32 * v39 + 20) > *(float *)(v16 + 32 * v40 + 20))
        goto LABEL_22;
    }
    else if (*(float *)(v16 + 32 * v39 + 28) > *(float *)(v16 + 32 * v40 + 28))
    {
LABEL_22:
      *a1 = v39;
      *a2 = v40;
    }
  }
  else if (v45.i32[0] < (unsigned __int32)v45.i32[1])
  {
    goto LABEL_22;
  }
  return result;
}

uint64_t *sub_20EEA7FF8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, double a7, double a8)
{
  uint64_t *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int32 *v19;
  __int32 *v20;
  _DWORD *v21;
  unsigned int v22;
  int32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int32x2_t v26;
  float32x2_t v27;
  uint32x2_t v28;
  int32x2_t v29;
  float32x2_t v30;
  uint32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  uint64_t v34;
  uint64_t v35;
  __int32 *v36;
  __int32 *v37;
  float32x2_t v38;
  float32x2_t v39;
  int32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  __int32 *v43;
  __int32 *v44;
  float32x2_t v45;
  float32x2_t v46;
  int32x2_t v47;
  uint64_t v48;
  uint64_t v49;
  __int32 *v50;
  __int32 *v51;
  float32x2_t v52;
  float32x2_t v53;
  int32x2_t v54;

  result = sub_20EEA7DA8(a1, a2, a3, a4, a6, a7, a8);
  v15 = *a5;
  v16 = *a4;
  v17 = *a6;
  v18 = *(_QWORD *)a6[1];
  v19 = (__int32 *)(v18 + 32 * *a5);
  v20 = (__int32 *)(v18 + 32 * *a4);
  v21 = *(_DWORD **)*a6;
  v22 = v21[2];
  *(float *)v23.i32 = (float)v21[1];
  LODWORD(v21) = *v21;
  v24.i32[0] = *v19;
  v25.i32[0] = v19[1];
  *(float *)v26.i32 = (float)v22;
  v24.i32[1] = *v20;
  v27 = (float32x2_t)vdup_lane_s32(v23, 0);
  v28 = (uint32x2_t)vdup_n_s32((int)v21 - 1);
  v29 = (int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v24, v27)));
  v25.i32[1] = v20[1];
  v30 = (float32x2_t)vdup_lane_s32(v26, 0);
  v31 = vcvt_u32_f32(vdiv_f32(v25, v30));
  v32 = vdup_n_s32(v21);
  v33 = vmla_s32(v29, (int32x2_t)vmin_u32(v28, v31), v32);
  if (v33.i32[0] == v33.i32[1])
  {
    if (**(_BYTE **)(v17 + 8))
    {
      if (*(float *)(v18 + 32 * v15 + 20) <= *(float *)(v18 + 32 * v16 + 20))
        return result;
    }
    else if (*(float *)(v18 + 32 * v15 + 28) <= *(float *)(v18 + 32 * v16 + 28))
    {
      return result;
    }
  }
  else if (v33.i32[0] >= (unsigned __int32)v33.i32[1])
  {
    return result;
  }
  *a4 = v15;
  *a5 = v16;
  v34 = *a4;
  v35 = *a3;
  v36 = (__int32 *)(v18 + 32 * *a4);
  v37 = (__int32 *)(v18 + 32 * *a3);
  v38.i32[0] = *v36;
  v39.i32[0] = v36[1];
  v38.i32[1] = *v37;
  v39.i32[1] = v37[1];
  v40 = vmla_s32((int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v38, v27))), (int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v39, v30))), v32);
  if (v40.i32[0] == v40.i32[1])
  {
    if (**(_BYTE **)(v17 + 8))
    {
      if (*(float *)(v18 + 32 * v34 + 20) <= *(float *)(v18 + 32 * v35 + 20))
        return result;
    }
    else if (*(float *)(v18 + 32 * v34 + 28) <= *(float *)(v18 + 32 * v35 + 28))
    {
      return result;
    }
  }
  else if (v40.i32[0] >= (unsigned __int32)v40.i32[1])
  {
    return result;
  }
  *a3 = v34;
  *a4 = v35;
  v41 = *a3;
  v42 = *a2;
  v43 = (__int32 *)(v18 + 32 * *a3);
  v44 = (__int32 *)(v18 + 32 * *a2);
  v45.i32[0] = *v43;
  v46.i32[0] = v43[1];
  v45.i32[1] = *v44;
  v46.i32[1] = v44[1];
  v47 = vmla_s32((int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v45, v27))), (int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v46, v30))), v32);
  if (v47.i32[0] == v47.i32[1])
  {
    if (**(_BYTE **)(v17 + 8))
    {
      if (*(float *)(v18 + 32 * v41 + 20) <= *(float *)(v18 + 32 * v42 + 20))
        return result;
    }
    else if (*(float *)(v18 + 32 * v41 + 28) <= *(float *)(v18 + 32 * v42 + 28))
    {
      return result;
    }
  }
  else if (v47.i32[0] >= (unsigned __int32)v47.i32[1])
  {
    return result;
  }
  *a2 = v41;
  *a3 = v42;
  v48 = *a2;
  v49 = *a1;
  v50 = (__int32 *)(v18 + 32 * *a2);
  v51 = (__int32 *)(v18 + 32 * *a1);
  v52.i32[0] = *v50;
  v53.i32[0] = v50[1];
  v52.i32[1] = *v51;
  v53.i32[1] = v51[1];
  v54 = vmla_s32((int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v52, v27))), (int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v53, v30))), v32);
  if (v54.i32[0] == v54.i32[1])
  {
    if (**(_BYTE **)(v17 + 8))
    {
      if (*(float *)(v18 + 32 * v48 + 20) > *(float *)(v18 + 32 * v49 + 20))
        goto LABEL_29;
    }
    else if (*(float *)(v18 + 32 * v48 + 28) > *(float *)(v18 + 32 * v49 + 28))
    {
LABEL_29:
      *a1 = v48;
      *a2 = v49;
    }
  }
  else if (v54.i32[0] < (unsigned __int32)v54.i32[1])
  {
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_20EEA82E0(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  uint64_t v92;
  float v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  uint64_t *v116;
  int64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  float v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  float v149;
  uint64_t v150;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v85 = *(a2 - 1);
        v86 = *v10;
        if (*(float *)(**(_QWORD **)(a3 + 8) + 32 * v85 + 20) > *(float *)(**(_QWORD **)(a3 + 8) + 32 * *v10 + 20))
        {
          *v10 = v85;
          *(a2 - 1) = v86;
        }
        return result;
      case 3:
        v87 = *v10;
        v88 = v10[1];
        v89 = **(_QWORD **)(a3 + 8);
        v90 = *(float *)(v89 + 32 * v88 + 20);
        v91 = *(float *)(v89 + 32 * *v10 + 20);
        v92 = *(a2 - 1);
        v93 = *(float *)(v89 + 32 * v92 + 20);
        if (v90 <= v91)
        {
          if (v93 > v90)
          {
            v10[1] = v92;
            *(a2 - 1) = v88;
            v104 = *v10;
            v144 = v10[1];
            if (*(float *)(v89 + 32 * v144 + 20) > *(float *)(v89 + 32 * *v10 + 20))
            {
              *v10 = v144;
              goto LABEL_157;
            }
          }
        }
        else
        {
          if (v93 <= v90)
          {
            *v10 = v88;
            v10[1] = v87;
            v150 = *(a2 - 1);
            if (*(float *)(v89 + 32 * v150 + 20) <= v91)
              return result;
            v10[1] = v150;
          }
          else
          {
            *v10 = v92;
          }
          *(a2 - 1) = v87;
        }
        return result;
      case 4:
        return (uint64_t)sub_20EEA9238(v10, v10 + 1, v10 + 2, a2 - 1, **(_QWORD **)(a3 + 8));
      case 5:
        v94 = v10 + 1;
        v95 = v10 + 2;
        v96 = v10 + 3;
        result = (uint64_t)sub_20EEA9238(v9, v9 + 1, v9 + 2, v9 + 3, **(_QWORD **)(a3 + 8));
        v97 = *(a2 - 1);
        v98 = v9[3];
        v99 = **(_QWORD **)(a3 + 8);
        if (*(float *)(v99 + 32 * v97 + 20) > *(float *)(v99 + 32 * v98 + 20))
        {
          *v96 = v97;
          *(a2 - 1) = v98;
          v100 = *v96;
          v101 = *v95;
          v102 = *(float *)(v99 + 32 * *v96 + 20);
          if (v102 > *(float *)(v99 + 32 * *v95 + 20))
          {
            *v95 = v100;
            *v96 = v101;
            v103 = *v94;
            if (v102 > *(float *)(v99 + 32 * *v94 + 20))
            {
              v9[1] = v100;
              v9[2] = v103;
              v104 = *v9;
              if (v102 > *(float *)(v99 + 32 * *v9 + 20))
              {
                *v9 = v100;
LABEL_157:
                v9[1] = v104;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v115 = (unint64_t)(v12 - 2) >> 1;
              v116 = *(uint64_t **)(a3 + 8);
              v117 = v115;
              do
              {
                if (v115 >= v117)
                {
                  v119 = (2 * v117) | 1;
                  v120 = &v10[v119];
                  if (2 * v117 + 2 >= v12)
                  {
                    v121 = *v116;
                  }
                  else
                  {
                    v121 = *v116;
                    if (*(float *)(*v116 + 32 * *v120 + 20) > *(float *)(*v116 + 32 * v120[1] + 20))
                    {
                      ++v120;
                      v119 = 2 * v117 + 2;
                    }
                  }
                  v122 = &v10[v117];
                  result = *v120;
                  v123 = *v122;
                  v124 = *(float *)(v121 + 32 * *v122 + 20);
                  if (*(float *)(v121 + 32 * *v120 + 20) <= v124)
                  {
                    do
                    {
                      v125 = v120;
                      *v122 = result;
                      if (v115 < v119)
                        break;
                      v126 = 2 * v119;
                      v119 = (2 * v119) | 1;
                      v120 = &v10[v119];
                      v127 = v126 + 2;
                      if (v127 < v12 && *(float *)(v121 + 32 * *v120 + 20) > *(float *)(v121 + 32 * v120[1] + 20))
                      {
                        ++v120;
                        v119 = v127;
                      }
                      result = *v120;
                      v122 = v125;
                    }
                    while (*(float *)(v121 + 32 * *v120 + 20) <= v124);
                    *v125 = v123;
                  }
                }
                v118 = v117-- <= 0;
              }
              while (!v118);
              v128 = (unint64_t)v11 >> 3;
              do
              {
                v129 = 0;
                v130 = *v10;
                v131 = *(uint64_t **)(a3 + 8);
                v132 = v10;
                do
                {
                  v133 = v132;
                  v132 += v129 + 1;
                  v134 = 2 * v129;
                  v129 = (2 * v129) | 1;
                  v135 = v134 + 2;
                  if (v135 < v128)
                  {
                    result = v132[1];
                    if (*(float *)(*v131 + 32 * *v132 + 20) > *(float *)(*v131 + 32 * result + 20))
                    {
                      ++v132;
                      v129 = v135;
                    }
                  }
                  *v133 = *v132;
                }
                while (v129 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
                if (v132 == --a2)
                {
                  *v132 = v130;
                }
                else
                {
                  *v132 = *a2;
                  *a2 = v130;
                  v136 = (char *)v132 - (char *)v10 + 8;
                  if (v136 >= 9)
                  {
                    v137 = (((unint64_t)v136 >> 3) - 2) >> 1;
                    v138 = &v10[v137];
                    v139 = *v138;
                    v140 = *v132;
                    v141 = *v131;
                    v142 = *(float *)(v141 + 32 * *v132 + 20);
                    if (*(float *)(v141 + 32 * *v138 + 20) > v142)
                    {
                      do
                      {
                        v143 = v138;
                        *v132 = v139;
                        if (!v137)
                          break;
                        v137 = (v137 - 1) >> 1;
                        v138 = &v10[v137];
                        v139 = *v138;
                        v132 = v143;
                      }
                      while (*(float *)(v141 + 32 * *v138 + 20) > v142);
                      *v143 = v140;
                    }
                  }
                }
                v118 = v128-- <= 2;
              }
              while (!v118);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **(_QWORD **)(a3 + 8);
          v16 = *(a2 - 1);
          v17 = *(float *)(v15 + 32 * v16 + 20);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(float *)(v15 + 32 * *v10 + 20);
            v25 = *(float *)(v15 + 32 * *v14 + 20);
            if (v24 <= v25)
            {
              if (v17 > v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(float *)(v15 + 32 * *v10 + 20) > *(float *)(v15 + 32 * *v14 + 20))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(float *)(v15 + 32 * v40 + 20) <= v25)
                goto LABEL_32;
              *v10 = v40;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(float *)(v15 + 32 * *v14 + 20);
          v21 = *(float *)(v15 + 32 * *v10 + 20);
          if (v20 <= v21)
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(float *)(v15 + 32 * *v14 + 20) > *(float *)(v15 + 32 * *v10 + 20))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(float *)(v15 + 32 * v29 + 20) <= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(float *)(v15 + 32 * v33 + 20);
          v36 = *(float *)(v15 + 32 * v34 + 20);
          v37 = *(a2 - 2);
          v38 = *(float *)(v15 + 32 * v37 + 20);
          if (v35 <= v36)
          {
            if (v38 > v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(float *)(v15 + 32 * *v31 + 20) > *(float *)(v15 + 32 * v39 + 20))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v42 = *(a2 - 2);
              if (*(float *)(v15 + 32 * v42 + 20) <= v36)
                goto LABEL_37;
              *v31 = v42;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v43 = &v10[v13];
          v46 = v43[1];
          v44 = v43 + 1;
          v45 = v46;
          v47 = v10[2];
          v48 = *(float *)(v15 + 32 * v46 + 20);
          v49 = *(float *)(v15 + 32 * v47 + 20);
          v50 = *(a2 - 3);
          v51 = *(float *)(v15 + 32 * v50 + 20);
          if (v48 <= v49)
          {
            if (v51 > v48)
            {
              *v44 = v50;
              *(a2 - 3) = v45;
              v52 = v10[2];
              if (*(float *)(v15 + 32 * *v44 + 20) > *(float *)(v15 + 32 * v52 + 20))
              {
                v10[2] = *v44;
                *v44 = v52;
              }
            }
          }
          else
          {
            if (v51 <= v48)
            {
              v10[2] = v45;
              *v44 = v47;
              v53 = *(a2 - 3);
              if (*(float *)(v15 + 32 * v53 + 20) <= v49)
                goto LABEL_46;
              *v44 = v53;
            }
            else
            {
              v10[2] = v50;
            }
            *(a2 - 3) = v47;
          }
LABEL_46:
          v54 = *v14;
          v55 = *v31;
          v56 = *(float *)(v15 + 32 * *v14 + 20);
          v57 = *(float *)(v15 + 32 * *v31 + 20);
          v58 = *v44;
          v59 = *(float *)(v15 + 32 * *v44 + 20);
          if (v56 > v57)
          {
            if (v59 <= v56)
            {
              *v31 = v54;
              *v14 = v55;
              v31 = v14;
              v54 = v58;
              if (v59 <= v57)
              {
                v60 = *v10;
                *v10 = v55;
                *v14 = v60;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v59 <= v56)
            goto LABEL_54;
          *v14 = v58;
          *v44 = v54;
          v44 = v14;
          v54 = v55;
          if (v59 > v57)
          {
LABEL_53:
            *v31 = v58;
            *v44 = v55;
LABEL_54:
            v61 = *v10;
            *v10 = v54;
            *v14 = v61;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_55:
            v41 = *(float *)(v15 + 32 * v28 + 20);
            if (*(float *)(v15 + 32 * *(v10 - 1) + 20) > v41)
              goto LABEL_56;
            if (v41 <= *(float *)(v15 + 32 * *(a2 - 1) + 20))
            {
              v77 = v10 + 1;
              do
              {
                v10 = v77;
                if (v77 >= a2)
                  break;
                ++v77;
              }
              while (v41 <= *(float *)(v15 + 32 * *v10 + 20));
            }
            else
            {
              do
              {
                v76 = v10[1];
                ++v10;
              }
              while (v41 <= *(float *)(v15 + 32 * v76 + 20));
            }
            v78 = a2;
            if (v10 < a2)
            {
              v78 = a2;
              do
                v79 = *--v78;
              while (v41 > *(float *)(v15 + 32 * v79 + 20));
            }
            if (v10 < v78)
            {
              v80 = *v10;
              v81 = *v78;
              do
              {
                *v10 = v81;
                *v78 = v80;
                do
                {
                  v82 = v10[1];
                  ++v10;
                  v80 = v82;
                }
                while (v41 <= *(float *)(v15 + 32 * v82 + 20));
                do
                {
                  v83 = *--v78;
                  v81 = v83;
                }
                while (v41 > *(float *)(v15 + 32 * v83 + 20));
              }
              while (v10 < v78);
            }
            v84 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v84;
            a5 = 0;
            *v84 = v28;
            continue;
          }
          v75 = *v10;
          *v10 = v58;
          *v14 = v75;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_33:
          v41 = *(float *)(v15 + 32 * v28 + 20);
LABEL_56:
          v62 = 0;
          do
            v63 = v10[++v62];
          while (*(float *)(v15 + 32 * v63 + 20) > v41);
          v64 = &v10[v62];
          v65 = a2;
          if (v62 == 1)
          {
            v65 = a2;
            do
            {
              if (v64 >= v65)
                break;
              v67 = *--v65;
            }
            while (*(float *)(v15 + 32 * v67 + 20) <= v41);
          }
          else
          {
            do
              v66 = *--v65;
            while (*(float *)(v15 + 32 * v66 + 20) <= v41);
          }
          if (v64 >= v65)
          {
            v73 = v64 - 1;
            if (v64 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v68 = *v65;
            v69 = &v10[v62];
            v70 = v65;
            do
            {
              *v69 = v68;
              *v70 = v63;
              do
              {
                v71 = v69[1];
                ++v69;
                v63 = v71;
              }
              while (*(float *)(v15 + 32 * v71 + 20) > v41);
              do
              {
                v72 = *--v70;
                v68 = v72;
              }
              while (*(float *)(v15 + 32 * v72 + 20) <= v41);
            }
            while (v69 < v70);
            v73 = v69 - 1;
            if (v69 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v73;
          }
LABEL_74:
          *v73 = v28;
          if (v64 < v65)
            goto LABEL_77;
          v74 = sub_20EEA8E74(v10, v73, a3);
          v10 = v73 + 1;
          result = sub_20EEA8E74(v73 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v74)
              continue;
LABEL_77:
            result = sub_20EEA82E0(v9, v73, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v73 + 1;
            continue;
          }
          a2 = v73;
          if (v74)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v105 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v106 = **(_QWORD **)(a3 + 8);
              v107 = 8;
              v108 = v10;
              do
              {
                v111 = *v108;
                v110 = v108[1];
                v108 = v105;
                v112 = *(float *)(v106 + 32 * v110 + 20);
                if (v112 > *(float *)(v106 + 32 * v111 + 20))
                {
                  v113 = v107;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v113) = v111;
                    v114 = v113 - 8;
                    if (v113 == 8)
                    {
                      v109 = v10;
                      goto LABEL_117;
                    }
                    v111 = *(uint64_t *)((char *)v10 + v113 - 16);
                    v113 -= 8;
                  }
                  while (v112 > *(float *)(v106 + 32 * v111 + 20));
                  v109 = (uint64_t *)((char *)v10 + v114);
LABEL_117:
                  *v109 = v110;
                }
                v105 = v108 + 1;
                v107 += 8;
              }
              while (v108 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v145 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v146 = **(_QWORD **)(a3 + 8);
            do
            {
              v148 = *v9;
              v147 = v9[1];
              v9 = v145;
              v149 = *(float *)(v146 + 32 * v147 + 20);
              if (v149 > *(float *)(v146 + 32 * v148 + 20))
              {
                do
                {
                  *v145 = v148;
                  v148 = *(v145 - 2);
                  --v145;
                }
                while (v149 > *(float *)(v146 + 32 * v148 + 20));
                *v145 = v147;
              }
              v145 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_20EEA8E74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**(_QWORD **)(a3 + 8) + 32 * v8 + 20) > *(float *)(**(_QWORD **)(a3 + 8) + 32 * *a1 + 20))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = *a1;
      v11 = a1[1];
      v12 = **(_QWORD **)(a3 + 8);
      v13 = *(float *)(v12 + 32 * v11 + 20);
      v14 = *(float *)(v12 + 32 * *a1 + 20);
      v15 = *(a2 - 1);
      v16 = *(float *)(v12 + 32 * v15 + 20);
      if (v13 <= v14)
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v11;
          v39 = *a1;
          v38 = a1[1];
          if (*(float *)(v12 + 32 * v38 + 20) > *(float *)(v12 + 32 * *a1 + 20))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v11;
        a1[1] = v10;
        v48 = *(a2 - 1);
        if (*(float *)(v12 + 32 * v48 + 20) > v14)
        {
          a1[1] = v48;
          *(a2 - 1) = v10;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v10;
      }
      return result;
    case 4:
      sub_20EEA9238(a1, a1 + 1, a1 + 2, a2 - 1, **(_QWORD **)(a3 + 8));
      return 1;
    case 5:
      v27 = a1 + 1;
      v28 = a1 + 2;
      v29 = a1 + 3;
      sub_20EEA9238(a1, a1 + 1, a1 + 2, a1 + 3, **(_QWORD **)(a3 + 8));
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = **(_QWORD **)(a3 + 8);
      if (*(float *)(v32 + 32 * v30 + 20) <= *(float *)(v32 + 32 * v31 + 20))
        return 1;
      *v29 = v30;
      *(a2 - 1) = v31;
      v33 = *v29;
      v34 = *v28;
      v35 = *(float *)(v32 + 32 * *v29 + 20);
      if (v35 <= *(float *)(v32 + 32 * *v28 + 20))
        return 1;
      *v28 = v33;
      *v29 = v34;
      v36 = *v27;
      if (v35 <= *(float *)(v32 + 32 * *v27 + 20))
        return 1;
      a1[1] = v33;
      a1[2] = v36;
      v37 = *a1;
      if (v35 <= *(float *)(v32 + 32 * *a1 + 20))
        return 1;
      *a1 = v33;
      a1[1] = v37;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = *a1;
      v21 = **(_QWORD **)(a3 + 8);
      v22 = *(float *)(v21 + 32 * v19 + 20);
      v23 = *(float *)(v21 + 32 * *a1 + 20);
      v24 = *(float *)(v21 + 32 * v17 + 20);
      if (v22 > v23)
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 <= v22)
        {
          *a1 = v19;
          a1[1] = v20;
          v25 = a1 + 1;
          v26 = a1 + 2;
          if (v24 <= v23)
            goto LABEL_25;
        }
LABEL_24:
        *v25 = v17;
        *v26 = v20;
        goto LABEL_25;
      }
      if (v24 > v22)
      {
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
        if (v24 > v23)
          goto LABEL_24;
      }
LABEL_25:
      v40 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v41 = 0;
      for (i = 24; ; i += 8)
      {
        v43 = *v40;
        v44 = *v18;
        v45 = *(float *)(v21 + 32 * *v40 + 20);
        if (v45 > *(float *)(v21 + 32 * v44 + 20))
          break;
LABEL_34:
        v18 = v40++;
        if (v40 == a2)
          return 1;
      }
      v46 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v46) = v44;
        v47 = v46 - 8;
        if (v46 == 8)
        {
          *a1 = v43;
          if (++v41 != 8)
            goto LABEL_34;
          return v40 + 1 == a2;
        }
        v44 = *(uint64_t *)((char *)a1 + v46 - 16);
        v46 -= 8;
      }
      while (v45 > *(float *)(v21 + 32 * v44 + 20));
      *(uint64_t *)((char *)a1 + v47) = v43;
      if (++v41 != 8)
        goto LABEL_34;
      return v40 + 1 == a2;
  }
}

uint64_t *sub_20EEA9238(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v6 = *result;
  v7 = *(float *)(a5 + 32 * *a2 + 20);
  v8 = *(float *)(a5 + 32 * *result + 20);
  v9 = *a3;
  v10 = *(float *)(a5 + 32 * *a3 + 20);
  if (v7 <= v8)
  {
    if (v10 <= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(float *)(a5 + 32 * *a2 + 20) > *(float *)(a5 + 32 * *result + 20))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 > v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(float *)(a5 + 32 * *a3 + 20) > v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(float *)(a5 + 32 * *a4 + 20) > *(float *)(a5 + 32 * v5 + 20))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(float *)(a5 + 32 * *a3 + 20) > *(float *)(a5 + 32 * *a2 + 20))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(float *)(a5 + 32 * *a2 + 20) > *(float *)(a5 + 32 * *result + 20))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_20EEA935C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  uint64_t v92;
  float v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  uint64_t *v116;
  int64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  float v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  float v149;
  uint64_t v150;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v85 = *(a2 - 1);
        v86 = *v10;
        if (*(float *)(**(_QWORD **)(a3 + 8) + 32 * v85 + 28) > *(float *)(**(_QWORD **)(a3 + 8) + 32 * *v10 + 28))
        {
          *v10 = v85;
          *(a2 - 1) = v86;
        }
        return result;
      case 3:
        v87 = *v10;
        v88 = v10[1];
        v89 = **(_QWORD **)(a3 + 8);
        v90 = *(float *)(v89 + 32 * v88 + 28);
        v91 = *(float *)(v89 + 32 * *v10 + 28);
        v92 = *(a2 - 1);
        v93 = *(float *)(v89 + 32 * v92 + 28);
        if (v90 <= v91)
        {
          if (v93 > v90)
          {
            v10[1] = v92;
            *(a2 - 1) = v88;
            v104 = *v10;
            v144 = v10[1];
            if (*(float *)(v89 + 32 * v144 + 28) > *(float *)(v89 + 32 * *v10 + 28))
            {
              *v10 = v144;
              goto LABEL_157;
            }
          }
        }
        else
        {
          if (v93 <= v90)
          {
            *v10 = v88;
            v10[1] = v87;
            v150 = *(a2 - 1);
            if (*(float *)(v89 + 32 * v150 + 28) <= v91)
              return result;
            v10[1] = v150;
          }
          else
          {
            *v10 = v92;
          }
          *(a2 - 1) = v87;
        }
        return result;
      case 4:
        return (uint64_t)sub_20EEAA2B4(v10, v10 + 1, v10 + 2, a2 - 1, **(_QWORD **)(a3 + 8));
      case 5:
        v94 = v10 + 1;
        v95 = v10 + 2;
        v96 = v10 + 3;
        result = (uint64_t)sub_20EEAA2B4(v9, v9 + 1, v9 + 2, v9 + 3, **(_QWORD **)(a3 + 8));
        v97 = *(a2 - 1);
        v98 = v9[3];
        v99 = **(_QWORD **)(a3 + 8);
        if (*(float *)(v99 + 32 * v97 + 28) > *(float *)(v99 + 32 * v98 + 28))
        {
          *v96 = v97;
          *(a2 - 1) = v98;
          v100 = *v96;
          v101 = *v95;
          v102 = *(float *)(v99 + 32 * *v96 + 28);
          if (v102 > *(float *)(v99 + 32 * *v95 + 28))
          {
            *v95 = v100;
            *v96 = v101;
            v103 = *v94;
            if (v102 > *(float *)(v99 + 32 * *v94 + 28))
            {
              v9[1] = v100;
              v9[2] = v103;
              v104 = *v9;
              if (v102 > *(float *)(v99 + 32 * *v9 + 28))
              {
                *v9 = v100;
LABEL_157:
                v9[1] = v104;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v115 = (unint64_t)(v12 - 2) >> 1;
              v116 = *(uint64_t **)(a3 + 8);
              v117 = v115;
              do
              {
                if (v115 >= v117)
                {
                  v119 = (2 * v117) | 1;
                  v120 = &v10[v119];
                  if (2 * v117 + 2 >= v12)
                  {
                    v121 = *v116;
                  }
                  else
                  {
                    v121 = *v116;
                    if (*(float *)(*v116 + 32 * *v120 + 28) > *(float *)(*v116 + 32 * v120[1] + 28))
                    {
                      ++v120;
                      v119 = 2 * v117 + 2;
                    }
                  }
                  v122 = &v10[v117];
                  result = *v120;
                  v123 = *v122;
                  v124 = *(float *)(v121 + 32 * *v122 + 28);
                  if (*(float *)(v121 + 32 * *v120 + 28) <= v124)
                  {
                    do
                    {
                      v125 = v120;
                      *v122 = result;
                      if (v115 < v119)
                        break;
                      v126 = 2 * v119;
                      v119 = (2 * v119) | 1;
                      v120 = &v10[v119];
                      v127 = v126 + 2;
                      if (v127 < v12 && *(float *)(v121 + 32 * *v120 + 28) > *(float *)(v121 + 32 * v120[1] + 28))
                      {
                        ++v120;
                        v119 = v127;
                      }
                      result = *v120;
                      v122 = v125;
                    }
                    while (*(float *)(v121 + 32 * *v120 + 28) <= v124);
                    *v125 = v123;
                  }
                }
                v118 = v117-- <= 0;
              }
              while (!v118);
              v128 = (unint64_t)v11 >> 3;
              do
              {
                v129 = 0;
                v130 = *v10;
                v131 = *(uint64_t **)(a3 + 8);
                v132 = v10;
                do
                {
                  v133 = v132;
                  v132 += v129 + 1;
                  v134 = 2 * v129;
                  v129 = (2 * v129) | 1;
                  v135 = v134 + 2;
                  if (v135 < v128)
                  {
                    result = v132[1];
                    if (*(float *)(*v131 + 32 * *v132 + 28) > *(float *)(*v131 + 32 * result + 28))
                    {
                      ++v132;
                      v129 = v135;
                    }
                  }
                  *v133 = *v132;
                }
                while (v129 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
                if (v132 == --a2)
                {
                  *v132 = v130;
                }
                else
                {
                  *v132 = *a2;
                  *a2 = v130;
                  v136 = (char *)v132 - (char *)v10 + 8;
                  if (v136 >= 9)
                  {
                    v137 = (((unint64_t)v136 >> 3) - 2) >> 1;
                    v138 = &v10[v137];
                    v139 = *v138;
                    v140 = *v132;
                    v141 = *v131;
                    v142 = *(float *)(v141 + 32 * *v132 + 28);
                    if (*(float *)(v141 + 32 * *v138 + 28) > v142)
                    {
                      do
                      {
                        v143 = v138;
                        *v132 = v139;
                        if (!v137)
                          break;
                        v137 = (v137 - 1) >> 1;
                        v138 = &v10[v137];
                        v139 = *v138;
                        v132 = v143;
                      }
                      while (*(float *)(v141 + 32 * *v138 + 28) > v142);
                      *v143 = v140;
                    }
                  }
                }
                v118 = v128-- <= 2;
              }
              while (!v118);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **(_QWORD **)(a3 + 8);
          v16 = *(a2 - 1);
          v17 = *(float *)(v15 + 32 * v16 + 28);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(float *)(v15 + 32 * *v10 + 28);
            v25 = *(float *)(v15 + 32 * *v14 + 28);
            if (v24 <= v25)
            {
              if (v17 > v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(float *)(v15 + 32 * *v10 + 28) > *(float *)(v15 + 32 * *v14 + 28))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(float *)(v15 + 32 * v40 + 28) <= v25)
                goto LABEL_32;
              *v10 = v40;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(float *)(v15 + 32 * *v14 + 28);
          v21 = *(float *)(v15 + 32 * *v10 + 28);
          if (v20 <= v21)
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(float *)(v15 + 32 * *v14 + 28) > *(float *)(v15 + 32 * *v10 + 28))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(float *)(v15 + 32 * v29 + 28) <= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(float *)(v15 + 32 * v33 + 28);
          v36 = *(float *)(v15 + 32 * v34 + 28);
          v37 = *(a2 - 2);
          v38 = *(float *)(v15 + 32 * v37 + 28);
          if (v35 <= v36)
          {
            if (v38 > v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(float *)(v15 + 32 * *v31 + 28) > *(float *)(v15 + 32 * v39 + 28))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v42 = *(a2 - 2);
              if (*(float *)(v15 + 32 * v42 + 28) <= v36)
                goto LABEL_37;
              *v31 = v42;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v43 = &v10[v13];
          v46 = v43[1];
          v44 = v43 + 1;
          v45 = v46;
          v47 = v10[2];
          v48 = *(float *)(v15 + 32 * v46 + 28);
          v49 = *(float *)(v15 + 32 * v47 + 28);
          v50 = *(a2 - 3);
          v51 = *(float *)(v15 + 32 * v50 + 28);
          if (v48 <= v49)
          {
            if (v51 > v48)
            {
              *v44 = v50;
              *(a2 - 3) = v45;
              v52 = v10[2];
              if (*(float *)(v15 + 32 * *v44 + 28) > *(float *)(v15 + 32 * v52 + 28))
              {
                v10[2] = *v44;
                *v44 = v52;
              }
            }
          }
          else
          {
            if (v51 <= v48)
            {
              v10[2] = v45;
              *v44 = v47;
              v53 = *(a2 - 3);
              if (*(float *)(v15 + 32 * v53 + 28) <= v49)
                goto LABEL_46;
              *v44 = v53;
            }
            else
            {
              v10[2] = v50;
            }
            *(a2 - 3) = v47;
          }
LABEL_46:
          v54 = *v14;
          v55 = *v31;
          v56 = *(float *)(v15 + 32 * *v14 + 28);
          v57 = *(float *)(v15 + 32 * *v31 + 28);
          v58 = *v44;
          v59 = *(float *)(v15 + 32 * *v44 + 28);
          if (v56 > v57)
          {
            if (v59 <= v56)
            {
              *v31 = v54;
              *v14 = v55;
              v31 = v14;
              v54 = v58;
              if (v59 <= v57)
              {
                v60 = *v10;
                *v10 = v55;
                *v14 = v60;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v59 <= v56)
            goto LABEL_54;
          *v14 = v58;
          *v44 = v54;
          v44 = v14;
          v54 = v55;
          if (v59 > v57)
          {
LABEL_53:
            *v31 = v58;
            *v44 = v55;
LABEL_54:
            v61 = *v10;
            *v10 = v54;
            *v14 = v61;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_55:
            v41 = *(float *)(v15 + 32 * v28 + 28);
            if (*(float *)(v15 + 32 * *(v10 - 1) + 28) > v41)
              goto LABEL_56;
            if (v41 <= *(float *)(v15 + 32 * *(a2 - 1) + 28))
            {
              v77 = v10 + 1;
              do
              {
                v10 = v77;
                if (v77 >= a2)
                  break;
                ++v77;
              }
              while (v41 <= *(float *)(v15 + 32 * *v10 + 28));
            }
            else
            {
              do
              {
                v76 = v10[1];
                ++v10;
              }
              while (v41 <= *(float *)(v15 + 32 * v76 + 28));
            }
            v78 = a2;
            if (v10 < a2)
            {
              v78 = a2;
              do
                v79 = *--v78;
              while (v41 > *(float *)(v15 + 32 * v79 + 28));
            }
            if (v10 < v78)
            {
              v80 = *v10;
              v81 = *v78;
              do
              {
                *v10 = v81;
                *v78 = v80;
                do
                {
                  v82 = v10[1];
                  ++v10;
                  v80 = v82;
                }
                while (v41 <= *(float *)(v15 + 32 * v82 + 28));
                do
                {
                  v83 = *--v78;
                  v81 = v83;
                }
                while (v41 > *(float *)(v15 + 32 * v83 + 28));
              }
              while (v10 < v78);
            }
            v84 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v84;
            a5 = 0;
            *v84 = v28;
            continue;
          }
          v75 = *v10;
          *v10 = v58;
          *v14 = v75;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_33:
          v41 = *(float *)(v15 + 32 * v28 + 28);
LABEL_56:
          v62 = 0;
          do
            v63 = v10[++v62];
          while (*(float *)(v15 + 32 * v63 + 28) > v41);
          v64 = &v10[v62];
          v65 = a2;
          if (v62 == 1)
          {
            v65 = a2;
            do
            {
              if (v64 >= v65)
                break;
              v67 = *--v65;
            }
            while (*(float *)(v15 + 32 * v67 + 28) <= v41);
          }
          else
          {
            do
              v66 = *--v65;
            while (*(float *)(v15 + 32 * v66 + 28) <= v41);
          }
          if (v64 >= v65)
          {
            v73 = v64 - 1;
            if (v64 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v68 = *v65;
            v69 = &v10[v62];
            v70 = v65;
            do
            {
              *v69 = v68;
              *v70 = v63;
              do
              {
                v71 = v69[1];
                ++v69;
                v63 = v71;
              }
              while (*(float *)(v15 + 32 * v71 + 28) > v41);
              do
              {
                v72 = *--v70;
                v68 = v72;
              }
              while (*(float *)(v15 + 32 * v72 + 28) <= v41);
            }
            while (v69 < v70);
            v73 = v69 - 1;
            if (v69 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v73;
          }
LABEL_74:
          *v73 = v28;
          if (v64 < v65)
            goto LABEL_77;
          v74 = sub_20EEA9EF0(v10, v73, a3);
          v10 = v73 + 1;
          result = sub_20EEA9EF0(v73 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v74)
              continue;
LABEL_77:
            result = sub_20EEA935C(v9, v73, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v73 + 1;
            continue;
          }
          a2 = v73;
          if (v74)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v105 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v106 = **(_QWORD **)(a3 + 8);
              v107 = 8;
              v108 = v10;
              do
              {
                v111 = *v108;
                v110 = v108[1];
                v108 = v105;
                v112 = *(float *)(v106 + 32 * v110 + 28);
                if (v112 > *(float *)(v106 + 32 * v111 + 28))
                {
                  v113 = v107;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v113) = v111;
                    v114 = v113 - 8;
                    if (v113 == 8)
                    {
                      v109 = v10;
                      goto LABEL_117;
                    }
                    v111 = *(uint64_t *)((char *)v10 + v113 - 16);
                    v113 -= 8;
                  }
                  while (v112 > *(float *)(v106 + 32 * v111 + 28));
                  v109 = (uint64_t *)((char *)v10 + v114);
LABEL_117:
                  *v109 = v110;
                }
                v105 = v108 + 1;
                v107 += 8;
              }
              while (v108 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v145 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v146 = **(_QWORD **)(a3 + 8);
            do
            {
              v148 = *v9;
              v147 = v9[1];
              v9 = v145;
              v149 = *(float *)(v146 + 32 * v147 + 28);
              if (v149 > *(float *)(v146 + 32 * v148 + 28))
              {
                do
                {
                  *v145 = v148;
                  v148 = *(v145 - 2);
                  --v145;
                }
                while (v149 > *(float *)(v146 + 32 * v148 + 28));
                *v145 = v147;
              }
              v145 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_20EEA9EF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**(_QWORD **)(a3 + 8) + 32 * v8 + 28) > *(float *)(**(_QWORD **)(a3 + 8) + 32 * *a1 + 28))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = *a1;
      v11 = a1[1];
      v12 = **(_QWORD **)(a3 + 8);
      v13 = *(float *)(v12 + 32 * v11 + 28);
      v14 = *(float *)(v12 + 32 * *a1 + 28);
      v15 = *(a2 - 1);
      v16 = *(float *)(v12 + 32 * v15 + 28);
      if (v13 <= v14)
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v11;
          v39 = *a1;
          v38 = a1[1];
          if (*(float *)(v12 + 32 * v38 + 28) > *(float *)(v12 + 32 * *a1 + 28))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v11;
        a1[1] = v10;
        v48 = *(a2 - 1);
        if (*(float *)(v12 + 32 * v48 + 28) > v14)
        {
          a1[1] = v48;
          *(a2 - 1) = v10;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v10;
      }
      return result;
    case 4:
      sub_20EEAA2B4(a1, a1 + 1, a1 + 2, a2 - 1, **(_QWORD **)(a3 + 8));
      return 1;
    case 5:
      v27 = a1 + 1;
      v28 = a1 + 2;
      v29 = a1 + 3;
      sub_20EEAA2B4(a1, a1 + 1, a1 + 2, a1 + 3, **(_QWORD **)(a3 + 8));
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = **(_QWORD **)(a3 + 8);
      if (*(float *)(v32 + 32 * v30 + 28) <= *(float *)(v32 + 32 * v31 + 28))
        return 1;
      *v29 = v30;
      *(a2 - 1) = v31;
      v33 = *v29;
      v34 = *v28;
      v35 = *(float *)(v32 + 32 * *v29 + 28);
      if (v35 <= *(float *)(v32 + 32 * *v28 + 28))
        return 1;
      *v28 = v33;
      *v29 = v34;
      v36 = *v27;
      if (v35 <= *(float *)(v32 + 32 * *v27 + 28))
        return 1;
      a1[1] = v33;
      a1[2] = v36;
      v37 = *a1;
      if (v35 <= *(float *)(v32 + 32 * *a1 + 28))
        return 1;
      *a1 = v33;
      a1[1] = v37;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = *a1;
      v21 = **(_QWORD **)(a3 + 8);
      v22 = *(float *)(v21 + 32 * v19 + 28);
      v23 = *(float *)(v21 + 32 * *a1 + 28);
      v24 = *(float *)(v21 + 32 * v17 + 28);
      if (v22 > v23)
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 <= v22)
        {
          *a1 = v19;
          a1[1] = v20;
          v25 = a1 + 1;
          v26 = a1 + 2;
          if (v24 <= v23)
            goto LABEL_25;
        }
LABEL_24:
        *v25 = v17;
        *v26 = v20;
        goto LABEL_25;
      }
      if (v24 > v22)
      {
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
        if (v24 > v23)
          goto LABEL_24;
      }
LABEL_25:
      v40 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v41 = 0;
      for (i = 24; ; i += 8)
      {
        v43 = *v40;
        v44 = *v18;
        v45 = *(float *)(v21 + 32 * *v40 + 28);
        if (v45 > *(float *)(v21 + 32 * v44 + 28))
          break;
LABEL_34:
        v18 = v40++;
        if (v40 == a2)
          return 1;
      }
      v46 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v46) = v44;
        v47 = v46 - 8;
        if (v46 == 8)
        {
          *a1 = v43;
          if (++v41 != 8)
            goto LABEL_34;
          return v40 + 1 == a2;
        }
        v44 = *(uint64_t *)((char *)a1 + v46 - 16);
        v46 -= 8;
      }
      while (v45 > *(float *)(v21 + 32 * v44 + 28));
      *(uint64_t *)((char *)a1 + v47) = v43;
      if (++v41 != 8)
        goto LABEL_34;
      return v40 + 1 == a2;
  }
}

uint64_t *sub_20EEAA2B4(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v6 = *result;
  v7 = *(float *)(a5 + 32 * *a2 + 28);
  v8 = *(float *)(a5 + 32 * *result + 28);
  v9 = *a3;
  v10 = *(float *)(a5 + 32 * *a3 + 28);
  if (v7 <= v8)
  {
    if (v10 <= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(float *)(a5 + 32 * *a2 + 28) > *(float *)(a5 + 32 * *result + 28))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 > v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(float *)(a5 + 32 * *a3 + 28) > v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(float *)(a5 + 32 * *a4 + 28) > *(float *)(a5 + 32 * v5 + 28))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(float *)(a5 + 32 * *a3 + 28) > *(float *)(a5 + 32 * *a2 + 28))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(float *)(a5 + 32 * *a2 + 28) > *(float *)(a5 + 32 * *result + 28))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

void sub_20EEAA3D8(uint64_t a1, uint64_t a2, unint64_t a3, char a4, unint64_t *a5, double a6, double a7)
{
  unint64_t v9;
  float *v11;
  float *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  int v25;
  unsigned int v26;
  float v27;
  uint64_t v28;
  float *v29;
  float v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float *v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  uint64_t v58;
  float *v59;
  float *v60;
  float *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  float *v67;
  float *v68;
  float *v69;
  float v70;
  float v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  float *v76;
  float *v77;
  uint64_t v78;
  float *v79;
  float *v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float *v90;
  uint64_t v91;
  float *v92;
  float *v93;
  float *v94;
  char *v95;
  uint64_t v96;
  float *v97;
  uint64_t v98;
  float *v99;
  float *v100;
  float *v101;
  char *v102;
  uint64_t v103;
  float *v104;
  float *v105;
  uint64_t v106;
  uint64_t v107;
  float *v108;
  float *v109;
  char *v110;
  uint64_t v111;
  float *v112;
  uint64_t v113;
  float *v114;
  float *v115;
  float *v116;
  uint64_t v117;
  float *v118;
  float *v119;
  float v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float *v130;
  uint64_t v131;
  float *v132;
  float *v133;
  float *v134;
  BOOL v135;
  float *v136;
  float *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float v143;
  float v144;
  float *v145;
  uint64_t v146;
  float *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  float *v166;
  float *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175[2];
  char v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  unint64_t v181;

  v177 = a2;
  v176 = a4;
  if (!a3)
    return;
  v9 = *a5;
  if (*a5 <= a3)
    return;
  v11 = *(float **)(a1 + 16);
  v12 = *(float **)(a1 + 24);
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v13 = (char *)v12 - (char *)v11;
  if (v12 == v11)
  {
    v14 = 0;
  }
  else
  {
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_20E867F44();
    v178 = (uint64_t *)operator new(2 * v13);
    v179 = v178;
    v180 = &v178[v13 >> 2];
    v175[0] = (uint64_t)&v178;
    do
    {
      v181 = (unint64_t)(float)(*v11 * (float)a3);
      sub_20EDA6C78(v175, &v181);
      ++v11;
    }
    while (v11 != v12);
    v14 = v178;
    v9 = *a5;
  }
  v175[0] = a1;
  v175[1] = (uint64_t)&v176;
  v15 = a5[1];
  v178 = v175;
  v179 = &v177;
  v16 = 126 - 2 * __clz(v9);
  if (v9)
    v17 = v16;
  else
    v17 = 0;
  sub_20EEAAD54(v15, (uint64_t *)(v15 + 8 * v9), (uint64_t *)&v178, v17, 1, a6, a7);
  v18 = a5[1];
  if (*a5)
  {
    LODWORD(v19) = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = v177;
    v24 = (float)*(unsigned int *)(a1 + 4);
    v25 = *(_DWORD *)a1;
    v26 = *(_DWORD *)a1 - 1;
    v27 = (float)*(unsigned int *)(a1 + 8);
    v28 = 8 * *a5;
    do
    {
      v29 = (float *)(v23 + 24 * *(_QWORD *)(v18 + 8 * v22));
      v30 = v29[1];
      v31 = (float)(*v29 / v24);
      if (v26 < v31)
        v31 = v26;
      v32 = (float)(v30 / v27);
      if (v26 < v32)
        v32 = v26;
      v33 = v31 + v32 * v25;
      if (v33 == v20)
        v19 = (v19 + 1);
      else
        v19 = 1;
      if (v14[v33] >= v19)
      {
        if (v22 != v21)
        {
          v34 = 8 * v21;
          v35 = *(_QWORD *)(v18 + v34);
          *(_QWORD *)(v18 + v34) = *(_QWORD *)(v18 + 8 * v22);
          *(_QWORD *)(v18 + 8 * v22) = v35;
        }
        ++v21;
      }
      ++v22;
      v20 = v33;
      v28 -= 8;
    }
    while (v28);
  }
  else
  {
    v21 = 0;
  }
  v36 = v21;
  if (v21 >= a3)
    goto LABEL_175;
  v37 = v18 + 8 * a3 - 8;
  v38 = (char *)(v18 + 8 * *a5);
  if ((char *)v37 == v38)
    goto LABEL_175;
  v39 = (char *)(v18 + 8 * v36);
  v40 = v176;
  v41 = v177;
  while (1)
  {
    v42 = (v38 - v39) >> 3;
    if (v42 < 2)
      goto LABEL_175;
    if (v42 == 3)
    {
      v138 = v177;
      v128 = *(_QWORD *)v39;
      v139 = *((_QWORD *)v39 + 1);
      v140 = *((_QWORD *)v38 - 1);
      v141 = v177 + 24 * v139;
      v142 = v177 + 24 * *(_QWORD *)v39;
      if (v40)
      {
        v143 = *(float *)(v141 + 12);
        v144 = *(float *)(v142 + 12);
        v145 = (float *)(v177 + 24 * v140 + 12);
        if (v143 > v144)
        {
          if (*v145 <= v143)
          {
            *(_QWORD *)v39 = v139;
            *((_QWORD *)v39 + 1) = v128;
            v146 = *((_QWORD *)v38 - 1);
            v147 = (float *)(v138 + 24 * v146 + 12);
LABEL_172:
            if (*v147 <= v144)
              goto LABEL_175;
            *((_QWORD *)v39 + 1) = v146;
            goto LABEL_174;
          }
          goto LABEL_151;
        }
      }
      else
      {
        v143 = *(float *)(v141 + 20);
        v144 = *(float *)(v142 + 20);
        v145 = (float *)(v177 + 24 * v140 + 20);
        if (v143 > v144)
        {
          if (*v145 <= v143)
          {
            *(_QWORD *)v39 = v139;
            *((_QWORD *)v39 + 1) = v128;
            v146 = *((_QWORD *)v38 - 1);
            v147 = (float *)(v138 + 24 * v146 + 20);
            goto LABEL_172;
          }
LABEL_151:
          *(_QWORD *)v39 = v140;
          goto LABEL_174;
        }
      }
      if (*v145 > v143)
      {
        *((_QWORD *)v39 + 1) = v140;
        *((_QWORD *)v38 - 1) = v139;
        v158 = *(_QWORD *)v39;
        v157 = *((_QWORD *)v39 + 1);
        v159 = v138 + 24 * v157;
        v160 = v159 + 20;
        v161 = v138 + 24 * *(_QWORD *)v39;
        v162 = v161 + 20;
        v163 = v159 + 12;
        v164 = v161 + 12;
        v165 = v40 == 0;
        v166 = (float *)(v40 ? v164 : v162);
        v167 = (float *)(v165 ? v160 : v163);
        if (*v167 > *v166)
        {
          *(_QWORD *)v39 = v157;
          *((_QWORD *)v39 + 1) = v158;
        }
      }
      goto LABEL_175;
    }
    if (v42 == 2)
    {
      v127 = *((_QWORD *)v38 - 1);
      v128 = *(_QWORD *)v39;
      v129 = v177 + 24 * v127;
      v130 = (float *)(v129 + 20);
      v131 = v177 + 24 * *(_QWORD *)v39;
      v132 = (float *)(v131 + 20);
      v133 = (float *)(v129 + 12);
      v134 = (float *)(v131 + 12);
      v135 = v40 == 0;
      if (v40)
        v136 = v134;
      else
        v136 = v132;
      if (v135)
        v137 = v130;
      else
        v137 = v133;
      if (*v137 <= *v136)
        goto LABEL_175;
      *(_QWORD *)v39 = v127;
LABEL_174:
      *((_QWORD *)v38 - 1) = v128;
      goto LABEL_175;
    }
    if (v38 - v39 <= 63)
    {
      v148 = v38 - 8;
      if (v38 - 8 != v39)
      {
        v149 = v177;
        if (v40)
        {
          do
          {
            if (v39 != v38)
            {
              v150 = v39 + 8;
              if (v39 + 8 != v38)
              {
                v151 = *(_QWORD *)v39;
                v152 = *(_QWORD *)v39;
                v153 = v39;
                v154 = v39 + 8;
                do
                {
                  v156 = *(_QWORD *)v154;
                  v154 += 8;
                  v155 = v156;
                  if (*(float *)(v149 + 24 * v156 + 12) > *(float *)(v149 + 24 * v152 + 12))
                  {
                    v152 = v155;
                    v153 = v150;
                  }
                  v150 = v154;
                }
                while (v154 != v38);
                if (v153 != v39)
                {
                  *(_QWORD *)v39 = *(_QWORD *)v153;
                  *(_QWORD *)v153 = v151;
                }
              }
            }
            v39 += 8;
          }
          while (v39 != v148);
        }
        else
        {
          do
          {
            if (v39 != v38)
            {
              v168 = v39 + 8;
              if (v39 + 8 != v38)
              {
                v169 = *(_QWORD *)v39;
                v170 = *(_QWORD *)v39;
                v171 = v39;
                v172 = v39 + 8;
                do
                {
                  v174 = *(_QWORD *)v172;
                  v172 += 8;
                  v173 = v174;
                  if (*(float *)(v149 + 24 * v174 + 20) > *(float *)(v149 + 24 * v170 + 20))
                  {
                    v170 = v173;
                    v171 = v168;
                  }
                  v168 = v172;
                }
                while (v172 != v38);
                if (v171 != v39)
                {
                  *(_QWORD *)v39 = *(_QWORD *)v171;
                  *(_QWORD *)v171 = v169;
                }
              }
            }
            v39 += 8;
          }
          while (v39 != v148);
        }
      }
      goto LABEL_175;
    }
    v43 = &v39[8 * (v42 >> 1)];
    v45 = v38 - 8;
    v44 = *((_QWORD *)v38 - 1);
    v46 = *(_QWORD *)v43;
    v47 = *(_QWORD *)v39;
    v48 = v41 + 24 * *(_QWORD *)v43;
    v49 = v41 + 24 * *(_QWORD *)v39;
    if (!v40)
    {
      v50 = *(float *)(v48 + 20);
      v54 = *(float *)(v49 + 20);
      v52 = (float *)(v41 + 24 * v44 + 20);
      if (v50 <= v54)
      {
LABEL_42:
        if (*v52 <= v50)
        {
          v62 = 0;
          goto LABEL_52;
        }
        *(_QWORD *)v43 = v44;
        *(_QWORD *)v45 = v46;
        v55 = *(_QWORD *)v39;
        v56 = v41 + 24 * *(_QWORD *)v43;
        v57 = (float *)(v56 + 20);
        v58 = v41 + 24 * *(_QWORD *)v39;
        v59 = (float *)(v58 + 20);
        v60 = (float *)(v56 + 12);
        v61 = (float *)(v58 + 12);
        if (!v40)
        {
          v61 = v59;
          v60 = v57;
        }
        if (*v60 <= *v61)
          goto LABEL_51;
        *(_QWORD *)v39 = *(_QWORD *)v43;
        *(_QWORD *)v43 = v55;
      }
      else
      {
        if (*v52 > v50)
        {
LABEL_41:
          *(_QWORD *)v39 = v44;
          *(_QWORD *)v45 = v47;
          goto LABEL_51;
        }
        *(_QWORD *)v39 = v46;
        *(_QWORD *)v43 = v47;
        v53 = *(_QWORD *)v45;
        if (*(float *)(v41 + 24 * *(_QWORD *)v45 + 20) <= v54)
          goto LABEL_51;
LABEL_49:
        *(_QWORD *)v43 = v53;
        *(_QWORD *)v45 = v47;
      }
      v62 = 2;
      goto LABEL_52;
    }
    v50 = *(float *)(v48 + 12);
    v51 = *(float *)(v49 + 12);
    v52 = (float *)(v41 + 24 * v44 + 12);
    if (v50 <= v51)
      goto LABEL_42;
    if (*v52 > v50)
      goto LABEL_41;
    *(_QWORD *)v39 = v46;
    *(_QWORD *)v43 = v47;
    v53 = *(_QWORD *)v45;
    if (*(float *)(v41 + 24 * *(_QWORD *)v45 + 12) > v51)
      goto LABEL_49;
LABEL_51:
    v62 = 1;
LABEL_52:
    v63 = *(_QWORD *)v39;
    v64 = v41 + 24 * *(_QWORD *)v39;
    v65 = (float *)(v64 + 20);
    v66 = v41 + 24 * *(_QWORD *)v43;
    v67 = (float *)(v66 + 20);
    v68 = (float *)(v64 + 12);
    v69 = (float *)(v66 + 12);
    if (!v40)
    {
      v69 = v67;
      v68 = v65;
    }
    v70 = *v68;
    v71 = *v69;
    if (*v68 > *v69)
      break;
    v72 = v38 - 8;
    while (1)
    {
      v72 -= 8;
      if (v72 == v39)
        break;
      v75 = v41 + 24 * *(_QWORD *)v72;
      v76 = (float *)(v75 + 20);
      v77 = (float *)(v75 + 12);
      if (!v40)
        v77 = v76;
      if (*v77 > v71)
      {
        *(_QWORD *)v39 = *(_QWORD *)v72;
        *(_QWORD *)v72 = v63;
        ++v62;
        v73 = v39 + 8;
        v74 = v39 + 8;
        if (v39 + 8 >= v72)
          goto LABEL_77;
        goto LABEL_66;
      }
    }
    v102 = v39 + 8;
    v103 = v41 + 24 * *(_QWORD *)v45;
    v104 = (float *)(v103 + 20);
    v105 = (float *)(v103 + 12);
    if (!v40)
      v105 = v104;
    if (v70 <= *v105)
    {
      if (v102 == v45)
        goto LABEL_175;
      while (1)
      {
        v106 = *(_QWORD *)v102;
        v107 = v41 + 24 * *(_QWORD *)v102;
        v108 = (float *)(v107 + 20);
        v109 = (float *)(v107 + 12);
        if (!v40)
          v109 = v108;
        if (v70 > *v109)
          break;
        v102 += 8;
        if (v102 == v45)
          goto LABEL_175;
      }
      *(_QWORD *)v102 = *(_QWORD *)v45;
      v102 += 8;
      *(_QWORD *)v45 = v106;
    }
    if (v102 == v45)
      goto LABEL_175;
    while (1)
    {
      v117 = v41 + 24 * *(_QWORD *)v39;
      v118 = (float *)(v117 + 20);
      v119 = (float *)(v117 + 12);
      if (!v40)
        v119 = v118;
      v120 = *v119;
      v95 = v102 - 8;
      if (v40)
      {
        do
        {
          v122 = *((_QWORD *)v95 + 1);
          v95 += 8;
          v121 = v122;
        }
        while (v120 <= *(float *)(v41 + 24 * v122 + 12));
      }
      else
      {
        do
        {
          v123 = *((_QWORD *)v95 + 1);
          v95 += 8;
          v121 = v123;
        }
        while (v120 <= *(float *)(v41 + 24 * v123 + 20));
      }
      if (v40)
      {
        do
        {
          v125 = *((_QWORD *)v45 - 1);
          v45 -= 8;
          v124 = v125;
        }
        while (v120 > *(float *)(v41 + 24 * v125 + 12));
      }
      else
      {
        do
        {
          v126 = *((_QWORD *)v45 - 1);
          v45 -= 8;
          v124 = v126;
        }
        while (v120 > *(float *)(v41 + 24 * v126 + 20));
      }
      if (v95 >= v45)
        break;
      *(_QWORD *)v95 = v124;
      v102 = v95 + 8;
      *(_QWORD *)v45 = v121;
    }
    if ((unint64_t)v95 > v37)
      goto LABEL_175;
LABEL_123:
    v39 = v95;
    if (v38 == (char *)v37)
      goto LABEL_175;
  }
  v72 = v38 - 8;
  v73 = v39 + 8;
  v74 = v39 + 8;
  if (v39 + 8 < v38 - 8)
  {
    while (1)
    {
LABEL_66:
      v78 = v41 + 24 * *(_QWORD *)v43;
      v79 = (float *)(v78 + 20);
      v80 = (float *)(v78 + 12);
      if (!v40)
        v80 = v79;
      v81 = *v80;
      v74 -= 8;
      if (v40)
      {
        do
        {
          v83 = *((_QWORD *)v74 + 1);
          v74 += 8;
          v82 = v83;
        }
        while (*(float *)(v41 + 24 * v83 + 12) > v81);
      }
      else
      {
        do
        {
          v84 = *((_QWORD *)v74 + 1);
          v74 += 8;
          v82 = v84;
        }
        while (*(float *)(v41 + 24 * v84 + 20) > v81);
      }
      if (v40)
      {
        do
        {
          v86 = *((_QWORD *)v72 - 1);
          v72 -= 8;
          v85 = v86;
        }
        while (*(float *)(v41 + 24 * v86 + 12) <= v81);
      }
      else
      {
        do
        {
          v87 = *((_QWORD *)v72 - 1);
          v72 -= 8;
          v85 = v87;
        }
        while (*(float *)(v41 + 24 * v87 + 20) <= v81);
      }
      if (v74 >= v72)
        break;
      v135 = v43 == v74;
      *(_QWORD *)v74 = v85;
      v74 += 8;
      *(_QWORD *)v72 = v82;
      ++v62;
      if (v135)
        v43 = v72;
    }
  }
LABEL_77:
  if (v74 != v43)
  {
    v88 = *(_QWORD *)v74;
    v89 = v41 + 24 * *(_QWORD *)v43;
    v90 = (float *)(v89 + 20);
    v91 = v41 + 24 * *(_QWORD *)v74;
    v92 = (float *)(v91 + 20);
    v93 = (float *)(v89 + 12);
    v94 = (float *)(v91 + 12);
    if (!v40)
    {
      v94 = v92;
      v93 = v90;
    }
    if (*v93 > *v94)
    {
      *(_QWORD *)v74 = *(_QWORD *)v43;
      *(_QWORD *)v43 = v88;
      ++v62;
    }
  }
  if (v74 == (char *)v37)
    goto LABEL_175;
  if (v62)
  {
LABEL_84:
    v95 = v74 + 8;
    if ((unint64_t)v74 > v37)
    {
      v95 = v39;
      v38 = v74;
    }
    goto LABEL_123;
  }
  if ((unint64_t)v74 <= v37)
  {
    v110 = v74 + 8;
    while (v110 != v38)
    {
      v111 = v41 + 24 * *(_QWORD *)v110;
      v112 = (float *)(v111 + 20);
      v113 = v41 + 24 * *((_QWORD *)v110 - 1);
      v114 = (float *)(v113 + 20);
      v115 = (float *)(v111 + 12);
      v116 = (float *)(v113 + 12);
      if (!v40)
      {
        v116 = v114;
        v115 = v112;
      }
      v110 += 8;
      if (*v115 > *v116)
        goto LABEL_84;
    }
  }
  else
  {
    while (v73 != v74)
    {
      v96 = v41 + 24 * *(_QWORD *)v73;
      v97 = (float *)(v96 + 20);
      v98 = v41 + 24 * *((_QWORD *)v73 - 1);
      v99 = (float *)(v98 + 20);
      v100 = (float *)(v96 + 12);
      v101 = (float *)(v98 + 12);
      if (!v40)
      {
        v101 = v99;
        v100 = v97;
      }
      v73 += 8;
      if (*v100 > *v101)
        goto LABEL_84;
    }
  }
LABEL_175:
  if (v14)
    operator delete(v14);
}

void sub_20EEAAD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20EEAAD54(unint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, double a6, double a7)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *i;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  __int32 *v33;
  __int32 *v34;
  unsigned int v35;
  unsigned int v36;
  float32x2_t v37;
  float32x2_t v38;
  uint32x2_t v39;
  int32x2_t v40;
  unsigned int v41;
  float *v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  float *v50;
  uint64_t v51;
  float *v52;
  float v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *j;
  uint64_t v60;
  float *v61;
  float v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  float *v69;
  float v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  float *v75;
  float v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  float *v81;
  float v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  float v86;
  float v87;
  BOOL v88;
  double v89;
  double v90;
  uint64_t v91;
  float *v92;
  float v93;
  float v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  float v98;
  float v99;
  uint64_t v100;
  float *v101;
  float *v102;
  uint64_t v103;
  float *v104;
  float v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  float *v109;
  float *v110;
  uint64_t v111;
  float *v112;
  float v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t **v116;
  uint64_t v117;
  float *v118;
  float *v119;
  uint64_t v120;
  float *v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  float *v125;
  float *v126;
  uint64_t v127;
  float *v128;
  float v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  float *v134;
  float v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int32 *v143;
  __int32 *v144;
  _DWORD *v145;
  float32x2_t v146;
  float32x2_t v147;
  uint32x2_t v148;
  uint32x2_t v149;
  int32x2_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  float32x2_t v158;
  int32x2_t v159;
  uint32x2_t v160;
  float32x2_t v161;
  uint64_t *v162;
  int64_t v163;
  uint64_t v164;
  int64_t v165;
  uint64_t *v166;
  int64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int32 *v173;
  __int32 *v174;
  unsigned int v175;
  unsigned int v176;
  float32x2_t v177;
  float32x2_t v178;
  uint32x2_t v179;
  int32x2_t v180;
  uint64_t v181;
  uint64_t v182;
  __int32 *v183;
  __int32 *v184;
  float32x2_t v185;
  float32x2_t v186;
  float32x2_t v187;
  uint32x2_t v188;
  uint32x2_t v189;
  int32x2_t v190;
  float32x2_t v191;
  uint32x2_t v192;
  int32x2_t v193;
  int32x2_t v194;
  unsigned __int32 v195;
  uint64_t v196;
  float *v197;
  float *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int32 *v204;
  __int32 *v205;
  float32x2_t v206;
  float32x2_t v207;
  int32x2_t v208;
  uint64_t v209;
  float *v210;
  float v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t *v215;
  uint64_t v216;
  __int32 *v217;
  __int32 *v218;
  float32x2_t v219;
  float32x2_t v220;
  int32x2_t v221;
  uint64_t v222;
  float *v223;
  float *v224;
  uint64_t v225;
  uint64_t v226;
  float *v227;
  float v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  __int32 *v247;
  __int32 *v248;
  unsigned int v249;
  float32x2_t v250;
  float32x2_t v251;
  uint32x2_t v252;
  uint32x2_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  __int32 *v262;
  __int32 *v263;
  unsigned int *v264;
  unsigned int v265;
  float32x2_t v266;
  float32x2_t v267;
  uint32x2_t v268;
  int32x2_t v269;
  uint64_t *v270;
  uint64_t v271;
  float *v272;
  float *v273;
  unint64_t v274;
  uint64_t v275;
  float *v276;
  float v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  uint64_t *v281;
  uint64_t v282;
  unsigned int v283;
  float32x2_t v284;
  int32x2_t v285;
  unsigned int v286;
  uint32x2_t v287;
  float32x2_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  __int32 *v292;
  __int32 *v293;
  float32x2_t v294;
  float32x2_t v295;
  int32x2_t v296;
  uint64_t v297;
  float *v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  float *v302;
  float v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  uint64_t v308;

  v10 = (uint64_t *)result;
LABEL_2:
  v11 = a2 - 1;
  i = v10;
  while (2)
  {
    v10 = i;
    v13 = (char *)a2 - (char *)i;
    v14 = a2 - i;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v140 = *(a2 - 1);
        v141 = *i;
        v142 = *(_QWORD *)a3[1];
        v143 = (__int32 *)(v142 + 24 * v140);
        v144 = (__int32 *)(v142 + 24 * *i);
        v145 = *(_DWORD **)*a3;
        LODWORD(a7) = v145[2];
        *(float *)&a6 = (float)v145[1];
        LODWORD(v145) = *v145;
        v146.i32[0] = *v143;
        v147.i32[0] = v143[1];
        *(float *)&a7 = (float)LODWORD(a7);
        v146.i32[1] = *v144;
        v148 = vcvt_u32_f32(vdiv_f32(v146, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0)));
        v149 = (uint32x2_t)vdup_n_s32((int)v145 - 1);
        v147.i32[1] = v144[1];
        v150 = vmla_s32((int32x2_t)vmin_u32(v149, v148), (int32x2_t)vmin_u32(v149, vcvt_u32_f32(vdiv_f32(v147, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0)))), vdup_n_s32(v145));
        if (v150.i32[0] == v150.i32[1])
        {
          if (**(_BYTE **)(*a3 + 8))
          {
            if (*(float *)(v142 + 24 * v140 + 12) <= *(float *)(v142 + 24 * v141 + 12))
              return result;
          }
          else if (*(float *)(v142 + 24 * v140 + 20) <= *(float *)(v142 + 24 * v141 + 20))
          {
            return result;
          }
        }
        else if (v150.i32[0] >= (unsigned __int32)v150.i32[1])
        {
          return result;
        }
        *i = v140;
        *(a2 - 1) = v141;
        return result;
      case 3uLL:
        return (unint64_t)sub_20EEAC1F4(i, i + 1, v11, *a3, *(_QWORD *)a3[1], a6, a7);
      case 4uLL:
        return (unint64_t)sub_20EEAC8EC(i, i + 1, i + 2, v11, a3, a6, a7);
      case 5uLL:
        return (unint64_t)sub_20EEACB60(i, i + 1, i + 2, i + 3, v11, a3, a6, a7);
      default:
        if (v13 <= 191)
        {
          v151 = *a3;
          v152 = (uint64_t *)a3[1];
          if ((a5 & 1) != 0)
          {
            if (i == a2)
              return result;
            v153 = i + 1;
            if (i + 1 == a2)
              return result;
            v154 = 0;
            v155 = *v152;
            *(float *)&a6 = (float)*(unsigned int *)(*(_QWORD *)v151 + 4);
            v156 = **(_DWORD **)v151;
            v157 = v156 - 1;
            *(float *)&a7 = (float)*(unsigned int *)(*(_QWORD *)v151 + 8);
            v158 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
            v159 = vdup_n_s32(v156);
            v160 = (uint32x2_t)vdup_n_s32(v156 - 1);
            v161 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
            v162 = i;
            while (1)
            {
              v215 = v162;
              v162 = v153;
              result = *v215;
              v216 = v215[1];
              v217 = (__int32 *)(v155 + 24 * v216);
              v218 = (__int32 *)(v155 + 24 * *v215);
              v219.i32[0] = *v217;
              v220.i32[0] = v217[1];
              v219.i32[1] = *v218;
              v220.i32[1] = v218[1];
              v221 = vmla_s32((int32x2_t)vmin_u32(v160, vcvt_u32_f32(vdiv_f32(v219, v161))), (int32x2_t)vmin_u32(v160, vcvt_u32_f32(vdiv_f32(v220, v158))), v159);
              if (v221.i32[0] == v221.i32[1])
              {
                if (**(_BYTE **)(v151 + 8))
                {
                  if (*(float *)(v155 + 24 * v216 + 12) <= *(float *)(v155 + 24 * result + 12))
                    goto LABEL_237;
                }
                else if (*(float *)(v155 + 24 * v216 + 20) <= *(float *)(v155 + 24 * result + 20))
                {
                  goto LABEL_237;
                }
              }
              else if (v221.i32[0] >= (unsigned __int32)v221.i32[1])
              {
                goto LABEL_237;
              }
              v215[1] = result;
              result = (unint64_t)i;
              if (v215 == i)
                goto LABEL_236;
              v222 = v155 + 24 * v216;
              v223 = (float *)(v222 + 12);
              v224 = (float *)(v222 + 20);
              v225 = v154;
              while (1)
              {
                v226 = *(uint64_t *)((char *)i + v225 - 8);
                v227 = (float *)(v155 + 24 * v226);
                v228 = v227[1];
                v229 = (float)(*v227 / *(float *)&a6);
                if (v157 < v229)
                  v229 = v156 - 1;
                v230 = (float)(v228 / *(float *)&a7);
                if (v157 < v230)
                  v230 = v156 - 1;
                v231 = v229 + v230 * v156;
                if (v221.i32[0] != v231)
                {
                  if (v221.i32[0] >= v231)
                    goto LABEL_259;
                  goto LABEL_248;
                }
                if (**(_BYTE **)(v151 + 8))
                  break;
                if (*v224 <= *(float *)(v155 + 24 * v226 + 20))
                {
                  result = (unint64_t)i + v225;
                  goto LABEL_236;
                }
LABEL_248:
                --v215;
                *(uint64_t *)((char *)i + v225) = v226;
                v225 -= 8;
                if (!v225)
                {
                  result = (unint64_t)i;
                  goto LABEL_236;
                }
              }
              if (*v223 > *(float *)(v155 + 24 * v226 + 12))
                goto LABEL_248;
LABEL_259:
              result = (unint64_t)v215;
LABEL_236:
              *(_QWORD *)result = v216;
LABEL_237:
              v153 = v162 + 1;
              v154 += 8;
              if (v162 + 1 == a2)
                return result;
            }
          }
          if (i == a2)
            return result;
          v281 = i + 1;
          if (i + 1 == a2)
            return result;
          v282 = *v152;
          *(float *)&a6 = (float)*(unsigned int *)(*(_QWORD *)v151 + 4);
          v283 = **(_DWORD **)v151;
          *(float *)&a7 = (float)*(unsigned int *)(*(_QWORD *)v151 + 8);
          v284 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
          v285 = vdup_n_s32(v283);
          v286 = v283 - 1;
          v287 = (uint32x2_t)vdup_n_s32(v283 - 1);
          v288 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
          while (1)
          {
            v289 = v10;
            v10 = v281;
            v291 = *v289;
            v290 = v289[1];
            v292 = (__int32 *)(v282 + 24 * v290);
            v293 = (__int32 *)(v282 + 24 * *v289);
            v294.i32[0] = *v292;
            v295.i32[0] = v292[1];
            v294.i32[1] = *v293;
            v295.i32[1] = v293[1];
            v296 = vmla_s32((int32x2_t)vmin_u32(v287, vcvt_u32_f32(vdiv_f32(v294, v288))), (int32x2_t)vmin_u32(v287, vcvt_u32_f32(vdiv_f32(v295, v284))), v285);
            if (v296.i32[0] == v296.i32[1])
            {
              if (**(_BYTE **)(v151 + 8))
              {
                if (*(float *)(v282 + 24 * v290 + 12) <= *(float *)(v282 + 24 * v291 + 12))
                  goto LABEL_308;
              }
              else if (*(float *)(v282 + 24 * v290 + 20) <= *(float *)(v282 + 24 * v291 + 20))
              {
                goto LABEL_308;
              }
            }
            else if (v296.i32[0] >= (unsigned __int32)v296.i32[1])
            {
              goto LABEL_308;
            }
            v297 = v282 + 24 * v290;
            v298 = (float *)(v297 + 12);
            result = v297 + 20;
            do
            {
              while (1)
              {
                while (1)
                {
                  v299 = v289;
                  v300 = v291;
                  v301 = *--v289;
                  v291 = v301;
                  v302 = (float *)(v282 + 24 * v301);
                  v303 = v302[1];
                  v304 = (float)(*v302 / *(float *)&a6);
                  v289[2] = v300;
                  if (v286 >= v304)
                    v305 = v304;
                  else
                    v305 = v283 - 1;
                  v306 = (float)(v303 / *(float *)&a7);
                  if (v286 < v306)
                    v306 = v283 - 1;
                  v307 = v305 + v306 * v283;
                  if (v296.i32[0] == v307)
                    break;
                  if (v296.i32[0] >= v307)
                    goto LABEL_307;
                }
                if (!**(_BYTE **)(v151 + 8))
                  break;
                if (*v298 <= *(float *)(v282 + 24 * v291 + 12))
                  goto LABEL_307;
              }
            }
            while (*(float *)result > *(float *)(v282 + 24 * v291 + 20));
LABEL_307:
            *v299 = v290;
LABEL_308:
            v281 = v10 + 1;
            if (v10 + 1 == a2)
              return result;
          }
        }
        if (!a4)
        {
          if (i == a2)
            return result;
          v163 = (v14 - 2) >> 1;
          v164 = *a3;
          v165 = v163;
          while (1)
          {
            v167 = v165;
            if (v163 < v165)
              goto LABEL_193;
            v168 = (uint64_t *)a3[1];
            v169 = (2 * v165) | 1;
            v166 = &i[v169];
            if (2 * v167 + 2 >= (uint64_t)v14)
            {
              v172 = *v168;
              v175 = **(_DWORD **)v164;
              *(float *)&a6 = (float)*(unsigned int *)(*(_QWORD *)v164 + 4);
              v176 = v175 - 1;
              *(float *)&a7 = (float)*(unsigned int *)(*(_QWORD *)v164 + 8);
              goto LABEL_203;
            }
            v170 = *v166;
            v171 = v166[1];
            v172 = *v168;
            v173 = (__int32 *)(v172 + 24 * *v166);
            v174 = (__int32 *)(v172 + 24 * v171);
            *(float *)&a6 = (float)*(unsigned int *)(*(_QWORD *)v164 + 4);
            v175 = **(_DWORD **)v164;
            v176 = v175 - 1;
            v177.i32[0] = *v173;
            v178.i32[0] = v173[1];
            *(float *)&a7 = (float)*(unsigned int *)(*(_QWORD *)v164 + 8);
            v177.i32[1] = *v174;
            v179 = (uint32x2_t)vdup_n_s32(v175 - 1);
            v178.i32[1] = v174[1];
            v180 = vmla_s32((int32x2_t)vmin_u32(v179, vcvt_u32_f32(vdiv_f32(v177, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0)))), (int32x2_t)vmin_u32(v179, vcvt_u32_f32(vdiv_f32(v178, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0)))), vdup_n_s32(v175));
            if (v180.i32[0] != v180.i32[1])
              break;
            if (**(_BYTE **)(v164 + 8))
            {
              if (*(float *)(v172 + 24 * v170 + 12) > *(float *)(v172 + 24 * v171 + 12))
                goto LABEL_202;
            }
            else if (*(float *)(v172 + 24 * v170 + 20) > *(float *)(v172 + 24 * v171 + 20))
            {
              goto LABEL_202;
            }
LABEL_203:
            v181 = *v166;
            v182 = i[v167];
            v183 = (__int32 *)(v172 + 24 * *v166);
            v184 = (__int32 *)(v172 + 24 * v182);
            v185.i32[0] = *v183;
            v186.i32[0] = v183[1];
            v185.i32[1] = *v184;
            v187 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
            v188 = vcvt_u32_f32(vdiv_f32(v185, v187));
            v189 = (uint32x2_t)vdup_n_s32(v176);
            v190 = (int32x2_t)vmin_u32(v189, v188);
            v186.i32[1] = v184[1];
            v191 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
            v192 = vcvt_u32_f32(vdiv_f32(v186, v191));
            v193 = vdup_n_s32(v175);
            v194 = vmla_s32(v190, (int32x2_t)vmin_u32(v189, v192), v193);
            v195 = v194.u32[1];
            if (v194.i32[0] == v194.i32[1])
            {
              if (**(_BYTE **)(v164 + 8))
              {
                if (*(float *)(v172 + 24 * v181 + 12) <= *(float *)(v172 + 24 * v182 + 12))
                  goto LABEL_210;
              }
              else if (*(float *)(v172 + 24 * v181 + 20) <= *(float *)(v172 + 24 * v182 + 20))
              {
LABEL_210:
                i[v167] = v181;
                if (v163 >= v169)
                {
                  v196 = v172 + 24 * v182;
                  v197 = (float *)(v196 + 12);
                  v198 = (float *)(v196 + 20);
                  while (1)
                  {
                    v199 = v166;
                    v200 = 2 * v169;
                    v169 = (2 * v169) | 1;
                    v166 = &i[v169];
                    v201 = v200 + 2;
                    if (v201 >= (uint64_t)v14)
                      goto LABEL_221;
                    v202 = *v166;
                    v203 = v166[1];
                    v204 = (__int32 *)(v172 + 24 * *v166);
                    v205 = (__int32 *)(v172 + 24 * v203);
                    v206.i32[0] = *v204;
                    v207.i32[0] = v204[1];
                    v206.i32[1] = *v205;
                    v207.i32[1] = v205[1];
                    v208 = vmla_s32((int32x2_t)vmin_u32(v189, vcvt_u32_f32(vdiv_f32(v206, v187))), (int32x2_t)vmin_u32(v189, vcvt_u32_f32(vdiv_f32(v207, v191))), v193);
                    if (v208.i32[0] != v208.i32[1])
                      break;
                    if (**(_BYTE **)(v164 + 8))
                    {
                      if (*(float *)(v172 + 24 * v202 + 12) > *(float *)(v172 + 24 * v203 + 12))
                        goto LABEL_220;
                    }
                    else if (*(float *)(v172 + 24 * v202 + 20) > *(float *)(v172 + 24 * v203 + 20))
                    {
                      goto LABEL_220;
                    }
LABEL_221:
                    v209 = *v166;
                    v210 = (float *)(v172 + 24 * *v166);
                    v211 = v210[1];
                    v212 = (float)(*v210 / *(float *)&a6);
                    if (v176 < v212)
                      v212 = v176;
                    v213 = (float)(v211 / *(float *)&a7);
                    if (v176 < v213)
                      v213 = v176;
                    v214 = v212 + v213 * v175;
                    if (v214 == v195)
                    {
                      if (**(_BYTE **)(v164 + 8))
                      {
                        if (*(float *)(v172 + 24 * v209 + 12) > *v197)
                          goto LABEL_191;
                      }
                      else if (*(float *)(v172 + 24 * v209 + 20) > *v198)
                      {
LABEL_191:
                        v166 = v199;
                        goto LABEL_192;
                      }
                    }
                    else if (v214 < v195)
                    {
                      goto LABEL_191;
                    }
                    *v199 = v209;
                    if (v163 < v169)
                      goto LABEL_192;
                  }
                  if (v208.i32[0] >= (unsigned __int32)v208.i32[1])
                    goto LABEL_221;
LABEL_220:
                  ++v166;
                  v169 = v201;
                  goto LABEL_221;
                }
LABEL_192:
                *v166 = v182;
                v164 = *a3;
              }
            }
            else if (v194.i32[0] >= (unsigned __int32)v194.i32[1])
            {
              goto LABEL_210;
            }
LABEL_193:
            v165 = v167 - 1;
            if (!v167)
            {
              v232 = (unint64_t)v13 >> 3;
              while (1)
              {
                v234 = 0;
                v235 = *i;
                v236 = *a3;
                v237 = (uint64_t *)a3[1];
                v238 = v232 - 2;
                if (v232 < 2)
                  v238 = v232 - 1;
                v239 = v238 >> 1;
                v240 = i;
                do
                {
                  v241 = v240;
                  v240 += v234 + 1;
                  v242 = 2 * v234;
                  v234 = (2 * v234) | 1;
                  v243 = v242 + 2;
                  if (v243 < v232)
                  {
                    v244 = *v240;
                    v245 = v240[1];
                    v246 = *v237;
                    v247 = (__int32 *)(*v237 + 24 * *v240);
                    v248 = (__int32 *)(*v237 + 24 * v245);
                    *(float *)&a6 = (float)*(unsigned int *)(*(_QWORD *)v236 + 4);
                    v249 = **(_DWORD **)v236;
                    v250.i32[0] = *v247;
                    v251.i32[0] = v247[1];
                    *(float *)&a7 = (float)*(unsigned int *)(*(_QWORD *)v236 + 8);
                    v250.i32[1] = *v248;
                    v252 = vcvt_u32_f32(vdiv_f32(v250, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0)));
                    v253 = (uint32x2_t)vdup_n_s32(v249 - 1);
                    v251.i32[1] = v248[1];
                    a7 = COERCE_DOUBLE(vmin_u32(v253, vcvt_u32_f32(vdiv_f32(v251, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0)))));
                    a6 = COERCE_DOUBLE(vmla_s32((int32x2_t)vmin_u32(v253, v252), *(int32x2_t *)&a7, vdup_n_s32(v249)));
                    if (LODWORD(a6) == HIDWORD(a6))
                    {
                      if (**(_BYTE **)(v236 + 8))
                      {
                        if (*(float *)(v246 + 24 * v244 + 12) > *(float *)(v246 + 24 * v245 + 12))
                          goto LABEL_266;
                      }
                      else if (*(float *)(v246 + 24 * v244 + 20) > *(float *)(v246 + 24 * v245 + 20))
                      {
LABEL_266:
                        ++v240;
                        v234 = v243;
                      }
                    }
                    else if (LODWORD(a6) < HIDWORD(a6))
                    {
                      goto LABEL_266;
                    }
                  }
                  result = *v240;
                  *v241 = *v240;
                }
                while (v234 <= v239);
                if (v240 == --a2)
                {
                  *v240 = v235;
                }
                else
                {
                  *v240 = *a2;
                  *a2 = v235;
                  v254 = (char *)v240 - (char *)i + 8;
                  if (v254 >= 9)
                  {
                    v255 = *a3;
                    v256 = ((unint64_t)v254 >> 3) - 2;
                    v257 = v256 >> 1;
                    v258 = &i[v256 >> 1];
                    v259 = *v258;
                    v260 = *v240;
                    v261 = *(_QWORD *)a3[1];
                    v262 = (__int32 *)(v261 + 24 * *v258);
                    v263 = (__int32 *)(v261 + 24 * *v240);
                    v264 = *(unsigned int **)*a3;
                    LODWORD(a7) = v264[2];
                    *(float *)&a6 = (float)v264[1];
                    v265 = *v264;
                    result = v265 - 1;
                    v266.i32[0] = *v262;
                    v267.i32[0] = v262[1];
                    *(float *)&a7 = (float)LODWORD(a7);
                    v266.i32[1] = *v263;
                    v268 = (uint32x2_t)vdup_n_s32(result);
                    v267.i32[1] = v263[1];
                    v269 = vmla_s32((int32x2_t)vmin_u32(v268, vcvt_u32_f32(vdiv_f32(v266, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0)))), (int32x2_t)vmin_u32(v268, vcvt_u32_f32(vdiv_f32(v267, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0)))), vdup_n_s32(v265));
                    if (v269.i32[0] == v269.i32[1])
                    {
                      if (**(_BYTE **)(v255 + 8))
                      {
                        if (*(float *)(v261 + 24 * v259 + 12) > *(float *)(v261 + 24 * v260 + 12))
                          goto LABEL_286;
                      }
                      else if (*(float *)(v261 + 24 * v259 + 20) > *(float *)(v261 + 24 * v260 + 20))
                      {
                        goto LABEL_286;
                      }
                    }
                    else if (v269.i32[0] < (unsigned __int32)v269.i32[1])
                    {
LABEL_286:
                      *v240 = v259;
                      if (v256 >= 2)
                      {
                        v271 = v261 + 24 * v260;
                        v272 = (float *)(v271 + 12);
                        v273 = (float *)(v271 + 20);
                        while (1)
                        {
                          v274 = v257 - 1;
                          v257 = (v257 - 1) >> 1;
                          v270 = &i[v257];
                          v275 = *v270;
                          v276 = (float *)(v261 + 24 * *v270);
                          v277 = v276[1];
                          v278 = (float)(*v276 / *(float *)&a6);
                          if (result < v278)
                            v278 = v265 - 1;
                          v279 = (float)(v277 / *(float *)&a7);
                          if (result < v279)
                            v279 = v265 - 1;
                          v280 = v278 + v279 * v265;
                          if (v280 == v269.i32[1])
                          {
                            if (**(_BYTE **)(v255 + 8))
                            {
                              if (*(float *)(v261 + 24 * v275 + 12) <= *v272)
                                break;
                            }
                            else if (*(float *)(v261 + 24 * v275 + 20) <= *v273)
                            {
                              break;
                            }
                          }
                          else if (v280 >= v269.i32[1])
                          {
                            break;
                          }
                          *v258 = v275;
                          v258 = &i[v257];
                          if (v274 <= 1)
                            goto LABEL_288;
                        }
                      }
                      v270 = v258;
LABEL_288:
                      *v270 = v260;
                    }
                  }
                }
                if (v232-- <= 2)
                  return result;
              }
            }
          }
          if (v180.i32[0] >= (unsigned __int32)v180.i32[1])
            goto LABEL_203;
LABEL_202:
          ++v166;
          v169 = 2 * v167 + 2;
          goto LABEL_203;
        }
        v15 = v14 >> 1;
        v16 = &i[v14 >> 1];
        v17 = *a3;
        v18 = *(_QWORD *)a3[1];
        if ((unint64_t)v13 >= 0x401)
        {
          sub_20EEAC1F4(v10, &v10[v14 >> 1], v11, v17, v18, a6, a7);
          v308 = a4;
          v19 = v11;
          v20 = &v10[v15];
          sub_20EEAC1F4(v10 + 1, v20 - 1, a2 - 2, *a3, *(_QWORD *)a3[1], v21, v22);
          sub_20EEAC1F4(v10 + 2, &v10[v15 + 1], a2 - 3, *a3, *(_QWORD *)a3[1], v23, v24);
          result = (unint64_t)sub_20EEAC1F4(v20 - 1, v16, &v10[v15 + 1], *a3, *(_QWORD *)a3[1], v25, v26);
          v27 = *v10;
          *v10 = *v20;
          *v20 = v27;
          v11 = v19;
          a4 = v308 - 1;
          v28 = *a3;
          v29 = *(_QWORD *)a3[1];
          v30 = *v10;
          v31 = *(unsigned int **)*a3;
          if ((a5 & 1) != 0)
            goto LABEL_13;
LABEL_8:
          v32 = *(v10 - 1);
          v33 = (__int32 *)(v29 + 24 * v32);
          v34 = (__int32 *)(v29 + 24 * v30);
          LODWORD(a7) = v31[2];
          *(float *)&a6 = (float)v31[1];
          v35 = *v31;
          v36 = *v31 - 1;
          v37.i32[0] = *v33;
          v38.i32[0] = v33[1];
          *(float *)&a7 = (float)LODWORD(a7);
          v37.i32[1] = *v34;
          v39 = (uint32x2_t)vdup_n_s32(v36);
          v38.i32[1] = v34[1];
          v40 = vmla_s32((int32x2_t)vmin_u32(v39, vcvt_u32_f32(vdiv_f32(v37, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0)))), (int32x2_t)vmin_u32(v39, vcvt_u32_f32(vdiv_f32(v38, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0)))), vdup_n_s32(v35));
          v41 = v40.u32[1];
          if (v40.i32[0] == v40.i32[1])
          {
            if (**(_BYTE **)(v28 + 8))
            {
              if (*(float *)(v29 + 24 * v32 + 12) > *(float *)(v29 + 24 * v30 + 12))
                goto LABEL_19;
            }
            else if (*(float *)(v29 + 24 * v32 + 20) > *(float *)(v29 + 24 * v30 + 20))
            {
              goto LABEL_19;
            }
          }
          else if (v40.i32[0] < (unsigned __int32)v40.i32[1])
          {
            goto LABEL_19;
          }
          v91 = *v11;
          v92 = (float *)(v29 + 24 * *v11);
          v93 = *v92;
          v94 = v92[1];
          v95 = (float)(*v92 / *(float *)&a6);
          if (v36 < v95)
            v95 = v36;
          v96 = (float)(v94 / *(float *)&a7);
          if (v36 < v96)
            v96 = v36;
          v97 = v95 + v96 * v35;
          if (v40.i32[1] == v97)
          {
            if (**(_BYTE **)(v28 + 8))
            {
              v98 = *(float *)(v29 + 24 * v30 + 12);
              v99 = *(float *)(v29 + 24 * v91 + 12);
            }
            else
            {
              v98 = *(float *)(v29 + 24 * v30 + 20);
              v99 = *(float *)(v29 + 24 * v91 + 20);
            }
            if (v98 > v99)
            {
LABEL_103:
              v100 = v29 + 24 * v30;
              v101 = (float *)(v100 + 12);
              v102 = (float *)(v100 + 20);
              for (i = v10 + 1; ; ++i)
              {
                v103 = *i;
                v104 = (float *)(v29 + 24 * *i);
                v105 = v104[1];
                v106 = (float)(*v104 / *(float *)&a6);
                if (v36 < v106)
                  v106 = v36;
                v107 = (float)(v105 / *(float *)&a7);
                if (v36 < v107)
                  v107 = v36;
                result = v106 + v107 * v35;
                if (v40.i32[1] == (_DWORD)result)
                {
                  result = **(unsigned __int8 **)(v28 + 8);
                  if (**(_BYTE **)(v28 + 8))
                  {
                    if (*v101 > *(float *)(v29 + 24 * v103 + 12))
                      goto LABEL_131;
                  }
                  else if (*v102 > *(float *)(v29 + 24 * v103 + 20))
                  {
                    goto LABEL_131;
                  }
                }
                else if (v40.i32[1] < result)
                {
                  goto LABEL_131;
                }
              }
            }
          }
          else if (v40.i32[1] < v97)
          {
            goto LABEL_103;
          }
          i = v10 + 1;
          if (v10 + 1 < a2)
          {
            v108 = v29 + 24 * v30;
            v109 = (float *)(v108 + 12);
            v110 = (float *)(v108 + 20);
            do
            {
              v111 = *i;
              v112 = (float *)(v29 + 24 * *i);
              v113 = v112[1];
              v114 = (float)(*v112 / *(float *)&a6);
              if (v36 < v114)
                v114 = v36;
              v115 = (float)(v113 / *(float *)&a7);
              if (v36 < v115)
                v115 = v36;
              result = v114 + v115 * v35;
              if (v40.i32[1] == (_DWORD)result)
              {
                result = **(unsigned __int8 **)(v28 + 8);
                if (**(_BYTE **)(v28 + 8))
                {
                  if (*v109 > *(float *)(v29 + 24 * v111 + 12))
                    break;
                }
                else if (*v110 > *(float *)(v29 + 24 * v111 + 20))
                {
                  break;
                }
              }
              else if (v40.i32[1] < result)
              {
                break;
              }
              ++i;
            }
            while (i < a2);
          }
LABEL_131:
          v116 = (uint64_t **)a2;
          if (i < a2)
          {
            v117 = v29 + 24 * v30;
            v118 = (float *)(v117 + 12);
            v119 = (float *)(v117 + 20);
            v116 = (uint64_t **)v11;
            while (1)
            {
              v122 = (float)(v93 / *(float *)&a6);
              if (v36 < v122)
                v122 = v36;
              v123 = (float)(v94 / *(float *)&a7);
              if (v36 < v123)
                v123 = v36;
              result = v122 + v123 * v35;
              if (v40.i32[1] == (_DWORD)result)
              {
                result = **(unsigned __int8 **)(v28 + 8);
                if (**(_BYTE **)(v28 + 8))
                {
                  if (*v118 <= *(float *)(v29 + 24 * v91 + 12))
                    break;
                }
                else if (*v119 <= *(float *)(v29 + 24 * v91 + 20))
                {
                  break;
                }
              }
              else if (v40.i32[1] >= result)
              {
                break;
              }
              v120 = (uint64_t)*--v116;
              v91 = v120;
              v121 = (float *)(v29 + 24 * v120);
              v93 = *v121;
              v94 = v121[1];
            }
          }
          if (i < (uint64_t *)v116)
          {
            v124 = v29 + 24 * v30;
            v125 = (float *)(v124 + 12);
            v126 = (float *)(v124 + 20);
            v127 = *i;
            result = (unint64_t)*v116;
            do
            {
              *i++ = result;
              *v116 = (uint64_t *)v127;
              while (1)
              {
                v127 = *i;
                v128 = (float *)(v29 + 24 * *i);
                v129 = v128[1];
                v130 = (float)(*v128 / *(float *)&a6);
                if (v36 < v130)
                  v130 = v36;
                v131 = (float)(v129 / *(float *)&a7);
                if (v36 < v131)
                  v131 = v36;
                v132 = v130 + v131 * v35;
                if (v40.i32[1] != v132)
                {
                  if (v40.i32[1] < v132)
                    goto LABEL_161;
                  goto LABEL_149;
                }
                if (!**(_BYTE **)(v28 + 8))
                  break;
                if (*v125 > *(float *)(v29 + 24 * v127 + 12))
                  goto LABEL_161;
LABEL_149:
                ++i;
              }
              if (*v126 <= *(float *)(v29 + 24 * v127 + 20))
                goto LABEL_149;
              do
              {
                while (1)
                {
                  while (1)
                  {
LABEL_161:
                    v133 = (unint64_t)*--v116;
                    result = v133;
                    v134 = (float *)(v29 + 24 * v133);
                    v135 = v134[1];
                    v136 = (float)(*v134 / *(float *)&a6);
                    if (v36 < v136)
                      v136 = v36;
                    v137 = (float)(v135 / *(float *)&a7);
                    if (v36 < v137)
                      v137 = v36;
                    v138 = v136 + v137 * v35;
                    if (v40.i32[1] == v138)
                      break;
                    if (v40.i32[1] >= v138)
                      goto LABEL_146;
                  }
                  if (!**(_BYTE **)(v28 + 8))
                    break;
                  if (*v125 <= *(float *)(v29 + 24 * result + 12))
                    goto LABEL_146;
                }
              }
              while (*v126 > *(float *)(v29 + 24 * result + 20));
LABEL_146:
              ;
            }
            while (i < (uint64_t *)v116);
          }
          v139 = i - 1;
          if (i - 1 != v10)
            *v10 = *v139;
          a5 = 0;
          *v139 = v30;
          continue;
        }
        result = (unint64_t)sub_20EEAC1F4(&v10[v14 >> 1], v10, v11, v17, v18, a6, a7);
        --a4;
        v28 = *a3;
        v29 = *(_QWORD *)a3[1];
        v30 = *v10;
        v31 = *(unsigned int **)*a3;
        if ((a5 & 1) == 0)
          goto LABEL_8;
LABEL_13:
        v35 = *v31;
        v42 = (float *)(v29 + 24 * v30);
        v43 = v42[1];
        v44 = v31[2];
        *(float *)&a6 = (float)v31[1];
        v36 = *v31 - 1;
        *(float *)&a7 = (float)v44;
        v45 = (float)(*v42 / *(float *)&a6);
        if (v36 < v45)
          v45 = v36;
        v46 = (float)(v43 / *(float *)&a7);
        if (v36 < v46)
          v46 = v36;
        v41 = v45 + v46 * v35;
LABEL_19:
        v47 = 0;
        v48 = v29 + 24 * v30;
        v49 = (float *)(v48 + 12);
        v50 = (float *)(v48 + 20);
        while (1)
        {
          v51 = v10[v47 + 1];
          v52 = (float *)(v29 + 24 * v51);
          v53 = v52[1];
          v54 = (float)(*v52 / *(float *)&a6);
          if (v36 < v54)
            v54 = v36;
          v55 = (float)(v53 / *(float *)&a7);
          if (v36 < v55)
            v55 = v36;
          v56 = v54 + v55 * v35;
          if (v56 != v41)
          {
            if (v56 >= v41)
              goto LABEL_31;
            goto LABEL_21;
          }
          if (!**(_BYTE **)(v28 + 8))
            break;
          if (*(float *)(v29 + 24 * v51 + 12) <= *v49)
            goto LABEL_31;
LABEL_21:
          ++v47;
        }
        if (*(float *)(v29 + 24 * v51 + 20) > *v50)
          goto LABEL_21;
LABEL_31:
        v57 = &v10[v47];
        v58 = (unint64_t)&v10[v47 + 1];
        j = v11;
        if (v47 * 8)
        {
          while (1)
          {
            v60 = *j;
            v61 = (float *)(v29 + 24 * *j);
            v62 = v61[1];
            v63 = (float)(*v61 / *(float *)&a6);
            if (v36 < v63)
              v63 = v36;
            v64 = (float)(v62 / *(float *)&a7);
            if (v36 < v64)
              v64 = v36;
            v65 = v63 + v64 * v35;
            if (v65 == v41)
            {
              if (**(_BYTE **)(v28 + 8))
              {
                if (*(float *)(v29 + 24 * v60 + 12) > *v49)
                  goto LABEL_45;
              }
              else if (*(float *)(v29 + 24 * v60 + 20) > *v50)
              {
                goto LABEL_45;
              }
            }
            else if (v65 < v41)
            {
              goto LABEL_45;
            }
            --j;
          }
        }
        j = a2;
        if (v58 < (unint64_t)a2)
        {
          for (j = v11; ; --j)
          {
            v80 = *j;
            v81 = (float *)(v29 + 24 * *j);
            v82 = v81[1];
            v83 = (float)(*v81 / *(float *)&a6);
            if (v36 < v83)
              v83 = v36;
            v84 = (float)(v82 / *(float *)&a7);
            if (v36 < v84)
              v84 = v36;
            v85 = v83 + v84 * v35;
            if (v85 == v41)
            {
              if (**(_BYTE **)(v28 + 8))
              {
                if (v58 >= (unint64_t)j)
                  break;
                v86 = *(float *)(v29 + 24 * v80 + 12);
                v87 = *v49;
              }
              else
              {
                if (v58 >= (unint64_t)j)
                  break;
                v86 = *(float *)(v29 + 24 * v80 + 20);
                v87 = *v50;
              }
              if (v86 > v87)
                break;
            }
            else if (v58 >= (unint64_t)j || v85 < v41)
            {
              break;
            }
          }
        }
LABEL_45:
        if (v58 >= (unint64_t)j)
          goto LABEL_88;
        v66 = *j;
        v67 = (uint64_t *)v58;
        v68 = j;
        while (2)
        {
          *v67++ = v66;
          *v68 = v51;
          while (2)
          {
            v51 = *v67;
            v69 = (float *)(v29 + 24 * *v67);
            v70 = v69[1];
            v71 = (float)(*v69 / *(float *)&a6);
            if (v36 < v71)
              v71 = v36;
            v72 = (float)(v70 / *(float *)&a7);
            if (v36 < v72)
              v72 = v36;
            v73 = v71 + v72 * v35;
            if (v73 != v41)
            {
              if (v73 >= v41)
                goto LABEL_62;
LABEL_50:
              ++v67;
              continue;
            }
            break;
          }
          if (**(_BYTE **)(v28 + 8))
          {
            if (*(float *)(v29 + 24 * v51 + 12) <= *v49)
              goto LABEL_62;
            goto LABEL_50;
          }
          if (*(float *)(v29 + 24 * v51 + 20) > *v50)
            goto LABEL_50;
          do
          {
            while (1)
            {
              while (1)
              {
LABEL_62:
                v74 = *--v68;
                v66 = v74;
                v75 = (float *)(v29 + 24 * v74);
                v76 = v75[1];
                v77 = (float)(*v75 / *(float *)&a6);
                if (v36 < v77)
                  v77 = v36;
                v78 = (float)(v76 / *(float *)&a7);
                if (v36 < v78)
                  v78 = v36;
                v79 = v77 + v78 * v35;
                if (v79 == v41)
                  break;
                if (v79 < v41)
                  goto LABEL_47;
              }
              if (!**(_BYTE **)(v28 + 8))
                break;
              if (*(float *)(v29 + 24 * v66 + 12) > *v49)
                goto LABEL_47;
            }
          }
          while (*(float *)(v29 + 24 * v66 + 20) <= *v50);
LABEL_47:
          if (v67 < v68)
            continue;
          break;
        }
        v57 = v67 - 1;
LABEL_88:
        if (v57 != v10)
          *v10 = *v57;
        *v57 = v30;
        if (v58 < (unint64_t)j)
        {
LABEL_93:
          result = sub_20EEAAD54(v10, v57, a3, a4, a5 & 1);
          a5 = 0;
          i = v57 + 1;
          continue;
        }
        v88 = sub_20EEAC524(v10, v57, a3, a6, a7);
        i = v57 + 1;
        result = sub_20EEAC524(v57 + 1, a2, a3, v89, v90);
        if (!(_DWORD)result)
        {
          if (v88)
            continue;
          goto LABEL_93;
        }
        a2 = v57;
        if (!v88)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_20EEAC1F4(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  __int32 *v9;
  __int32 *v10;
  unsigned int v11;
  unsigned int v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  uint32x2_t v16;
  int32x2_t v17;
  float32x2_t v18;
  uint32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  uint64_t v22;
  float *v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  float *v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  float *v34;
  float v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  __int32 *v40;
  __int32 *v41;
  float32x2_t v42;
  float32x2_t v43;
  int32x2_t v44;

  v7 = *a2;
  v8 = *result;
  v9 = (__int32 *)(a5 + 24 * *a2);
  v10 = (__int32 *)(a5 + 24 * *result);
  *(float *)&a7 = (float)*(unsigned int *)(*(_QWORD *)a4 + 4);
  v11 = **(_DWORD **)a4;
  v12 = v11 - 1;
  v13.i32[0] = *v9;
  v14.i32[0] = v9[1];
  *(float *)&a6 = (float)*(unsigned int *)(*(_QWORD *)a4 + 8);
  v13.i32[1] = *v10;
  v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
  v16 = (uint32x2_t)vdup_n_s32(v11 - 1);
  v17 = (int32x2_t)vmin_u32(v16, vcvt_u32_f32(vdiv_f32(v13, v15)));
  v14.i32[1] = v10[1];
  v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
  v19 = vcvt_u32_f32(vdiv_f32(v14, v18));
  v20 = vdup_n_s32(v11);
  v21 = vmla_s32(v17, (int32x2_t)vmin_u32(v16, v19), v20);
  if (v21.i32[0] != v21.i32[1])
  {
    if (v21.i32[0] >= (unsigned __int32)v21.i32[1])
      goto LABEL_4;
LABEL_13:
    v27 = *a3;
    v28 = (float *)(a5 + 24 * *a3);
    v29 = v28[1];
    v30 = (float)(*v28 / *(float *)&a7);
    if (v12 < v30)
      v30 = v11 - 1;
    v31 = (float)(v29 / *(float *)&a6);
    if (v12 < v31)
      v31 = v11 - 1;
    v32 = v30 + v31 * v11;
    if (v32 == v21.i32[0])
    {
      if (**(_BYTE **)(a4 + 8))
      {
        if (*(float *)(a5 + 24 * v27 + 12) <= *(float *)(a5 + 24 * v7 + 12))
          goto LABEL_20;
LABEL_31:
        *result = v27;
        *a3 = v8;
        return result;
      }
      if (*(float *)(a5 + 24 * v27 + 20) > *(float *)(a5 + 24 * v7 + 20))
        goto LABEL_31;
    }
    else if (v32 < v21.i32[0])
    {
      goto LABEL_31;
    }
LABEL_20:
    *result = v7;
    *a2 = v8;
    v33 = *a3;
    v34 = (float *)(a5 + 24 * *a3);
    v35 = v34[1];
    v36 = (float)(*v34 / *(float *)&a7);
    if (v12 < v36)
      v36 = v11 - 1;
    if (v12 >= (float)(v35 / *(float *)&a6))
      v12 = (float)(v35 / *(float *)&a6);
    v37 = v36 + v12 * v11;
    if (v37 == v21.i32[1])
    {
      if (**(_BYTE **)(a4 + 8))
      {
        if (*(float *)(a5 + 24 * v33 + 12) <= *(float *)(a5 + 24 * v8 + 12))
          return result;
      }
      else if (*(float *)(a5 + 24 * v33 + 20) <= *(float *)(a5 + 24 * v8 + 20))
      {
        return result;
      }
    }
    else if (v37 >= v21.i32[1])
    {
      return result;
    }
    *a2 = v33;
    *a3 = v8;
    return result;
  }
  if (!**(_BYTE **)(a4 + 8))
  {
    if (*(float *)(a5 + 24 * v7 + 20) <= *(float *)(a5 + 24 * v8 + 20))
      goto LABEL_4;
    goto LABEL_13;
  }
  if (*(float *)(a5 + 24 * v7 + 12) > *(float *)(a5 + 24 * v8 + 12))
    goto LABEL_13;
LABEL_4:
  v22 = *a3;
  v23 = (float *)(a5 + 24 * *a3);
  v24 = v23[1];
  v25 = (float)(*v23 / *(float *)&a7);
  if (v12 < v25)
    v25 = v11 - 1;
  if (v12 >= (float)(v24 / *(float *)&a6))
    v12 = (float)(v24 / *(float *)&a6);
  v26 = v25 + v12 * v11;
  if (v26 == v21.i32[0])
  {
    if (**(_BYTE **)(a4 + 8))
    {
      if (*(float *)(a5 + 24 * v22 + 12) <= *(float *)(a5 + 24 * v7 + 12))
        return result;
    }
    else if (*(float *)(a5 + 24 * v22 + 20) <= *(float *)(a5 + 24 * v7 + 20))
    {
      return result;
    }
  }
  else if (v26 >= v21.i32[0])
  {
    return result;
  }
  *a2 = v22;
  *a3 = v7;
  v38 = *a2;
  v39 = *result;
  v40 = (__int32 *)(a5 + 24 * *a2);
  v41 = (__int32 *)(a5 + 24 * *result);
  v42.i32[0] = *v40;
  v43.i32[0] = v40[1];
  v42.i32[1] = *v41;
  v43.i32[1] = v41[1];
  v44 = vmla_s32((int32x2_t)vmin_u32(v16, vcvt_u32_f32(vdiv_f32(v42, v15))), (int32x2_t)vmin_u32(v16, vcvt_u32_f32(vdiv_f32(v43, v18))), v20);
  if (v44.i32[0] == v44.i32[1])
  {
    if (**(_BYTE **)(a4 + 8))
    {
      if (*(float *)(a5 + 24 * v38 + 12) > *(float *)(a5 + 24 * v39 + 12))
        goto LABEL_48;
    }
    else if (*(float *)(a5 + 24 * v38 + 20) > *(float *)(a5 + 24 * v39 + 20))
    {
LABEL_48:
      *result = v38;
      *a2 = v39;
    }
  }
  else if (v44.i32[0] < (unsigned __int32)v44.i32[1])
  {
    goto LABEL_48;
  }
  return result;
}

BOOL sub_20EEAC524(uint64_t *a1, uint64_t *a2, uint64_t *a3, double a4, double a5)
{
  uint64_t v8;
  _BOOL8 result;
  uint64_t *v10;
  int32x2_t v11;
  int32x2_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  float32x2_t v20;
  int32x2_t v21;
  unsigned int v22;
  uint32x2_t v23;
  float32x2_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int32 *v28;
  __int32 *v29;
  float32x2_t v30;
  float32x2_t v31;
  int32x2_t v32;
  uint64_t v33;
  float *v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int32 *v46;
  __int32 *v47;
  _DWORD *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint32x2_t v51;
  uint32x2_t v52;
  int32x2_t v53;

  v8 = a2 - a1;
  result = 1;
  switch(v8)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v43 = *(a2 - 1);
      v44 = *a1;
      v45 = *(_QWORD *)a3[1];
      v46 = (__int32 *)(v45 + 24 * v43);
      v47 = (__int32 *)(v45 + 24 * *a1);
      v48 = *(_DWORD **)*a3;
      LODWORD(a5) = v48[2];
      *(float *)&a4 = (float)v48[1];
      LODWORD(v48) = *v48;
      v49.i32[0] = *v46;
      v50.i32[0] = v46[1];
      *(float *)&a5 = (float)LODWORD(a5);
      v49.i32[1] = *v47;
      v51 = vcvt_u32_f32(vdiv_f32(v49, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0)));
      v52 = (uint32x2_t)vdup_n_s32((int)v48 - 1);
      v50.i32[1] = v47[1];
      v53 = vmla_s32((int32x2_t)vmin_u32(v52, v51), (int32x2_t)vmin_u32(v52, vcvt_u32_f32(vdiv_f32(v50, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0)))), vdup_n_s32(v48));
      if (v53.i32[0] == v53.i32[1])
      {
        if (**(_BYTE **)(*a3 + 8))
        {
          if (*(float *)(v45 + 24 * v43 + 12) <= *(float *)(v45 + 24 * v44 + 12))
            return result;
        }
        else if (*(float *)(v45 + 24 * v43 + 20) <= *(float *)(v45 + 24 * v44 + 20))
        {
          return result;
        }
      }
      else if (v53.i32[0] >= (unsigned __int32)v53.i32[1])
      {
        return result;
      }
      *a1 = v43;
      *(a2 - 1) = v44;
      return result;
    case 3:
      sub_20EEAC1F4(a1, a1 + 1, a2 - 1, *a3, *(_QWORD *)a3[1], a4, a5);
      return 1;
    case 4:
      sub_20EEAC8EC(a1, a1 + 1, a1 + 2, a2 - 1, a3, a4, a5);
      return 1;
    case 5:
      sub_20EEACB60(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3, a4, a5);
      return 1;
    default:
      v10 = a1 + 2;
      sub_20EEAC1F4(a1, a1 + 1, a1 + 2, *a3, *(_QWORD *)a3[1], a4, a5);
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      v16 = *a3;
      v17 = *(_QWORD *)a3[1];
      v18 = *(unsigned int **)*a3;
      v12.i32[0] = v18[2];
      *(float *)v11.i32 = (float)v18[1];
      v19 = *v18;
      *(float *)v12.i32 = (float)v12.u32[0];
      v20 = (float32x2_t)vdup_lane_s32(v12, 0);
      v21 = vdup_n_s32(v19);
      v22 = v19 - 1;
      v23 = (uint32x2_t)vdup_n_s32(v19 - 1);
      v24 = (float32x2_t)vdup_lane_s32(v11, 0);
      break;
  }
  while (2)
  {
    v26 = *v13;
    v27 = *v10;
    v28 = (__int32 *)(v17 + 24 * *v13);
    v29 = (__int32 *)(v17 + 24 * *v10);
    v30.i32[0] = *v28;
    v31.i32[0] = v28[1];
    v30.i32[1] = *v29;
    v31.i32[1] = v29[1];
    v32 = vmla_s32((int32x2_t)vmin_u32(v23, vcvt_u32_f32(vdiv_f32(v30, v24))), (int32x2_t)vmin_u32(v23, vcvt_u32_f32(vdiv_f32(v31, v20))), v21);
    if (v32.i32[0] == v32.i32[1])
    {
      if (**(_BYTE **)(v16 + 8))
      {
        if (*(float *)(v17 + 24 * v26 + 12) <= *(float *)(v17 + 24 * v27 + 12))
          goto LABEL_7;
      }
      else if (*(float *)(v17 + 24 * v26 + 20) <= *(float *)(v17 + 24 * v27 + 20))
      {
        goto LABEL_7;
      }
    }
    else if (v32.i32[0] >= (unsigned __int32)v32.i32[1])
    {
      goto LABEL_7;
    }
    *v13 = v27;
    v25 = a1;
    if (v10 == a1)
      goto LABEL_6;
    v33 = v17 + 24 * v26;
    v34 = (float *)(v33 + 12);
    v35 = (float *)(v33 + 20);
    v36 = v14;
    while (1)
    {
      v37 = *(uint64_t *)((char *)a1 + v36 + 8);
      v38 = (float *)(v17 + 24 * v37);
      v39 = v38[1];
      v40 = (float)(*v38 / *(float *)v11.i32);
      if (v22 < v40)
        v40 = v19 - 1;
      v41 = (float)(v39 / *(float *)v12.i32);
      if (v22 < v41)
        v41 = v19 - 1;
      v42 = v40 + v41 * v19;
      if (v32.i32[0] == v42)
        break;
      if (v32.i32[0] >= v42)
        goto LABEL_28;
LABEL_18:
      --v10;
      *(uint64_t *)((char *)a1 + v36 + 16) = v37;
      v36 -= 8;
      if (v36 == -16)
      {
        v25 = a1;
        goto LABEL_6;
      }
    }
    if (**(_BYTE **)(v16 + 8))
    {
      if (*v34 <= *(float *)(v17 + 24 * v37 + 12))
      {
        v25 = (uint64_t *)((char *)a1 + v36 + 16);
        goto LABEL_6;
      }
      goto LABEL_18;
    }
    if (*v35 > *(float *)(v17 + 24 * v37 + 20))
      goto LABEL_18;
LABEL_28:
    v25 = v10;
LABEL_6:
    *v25 = v26;
    if (++v15 == 8)
      return v13 + 1 == a2;
LABEL_7:
    v10 = v13;
    v14 += 8;
    if (++v13 != a2)
      continue;
    return 1;
  }
}

uint64_t *sub_20EEAC8EC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, double a6, double a7)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int32 *v17;
  __int32 *v18;
  _DWORD *v19;
  unsigned int v20;
  int32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  float32x2_t v25;
  uint32x2_t v26;
  int32x2_t v27;
  float32x2_t v28;
  uint32x2_t v29;
  int32x2_t v30;
  int32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  __int32 *v34;
  __int32 *v35;
  float32x2_t v36;
  float32x2_t v37;
  int32x2_t v38;
  uint64_t v39;
  uint64_t v40;
  __int32 *v41;
  __int32 *v42;
  float32x2_t v43;
  float32x2_t v44;
  int32x2_t v45;

  result = sub_20EEAC1F4(a1, a2, a3, *a5, *(_QWORD *)a5[1], a6, a7);
  v13 = *a4;
  v14 = *a3;
  v15 = *a5;
  v16 = *(_QWORD *)a5[1];
  v17 = (__int32 *)(v16 + 24 * *a4);
  v18 = (__int32 *)(v16 + 24 * *a3);
  v19 = *(_DWORD **)*a5;
  v20 = v19[2];
  *(float *)v21.i32 = (float)v19[1];
  LODWORD(v19) = *v19;
  v22.i32[0] = *v17;
  v23.i32[0] = v17[1];
  *(float *)v24.i32 = (float)v20;
  v22.i32[1] = *v18;
  v25 = (float32x2_t)vdup_lane_s32(v21, 0);
  v26 = (uint32x2_t)vdup_n_s32((int)v19 - 1);
  v27 = (int32x2_t)vmin_u32(v26, vcvt_u32_f32(vdiv_f32(v22, v25)));
  v23.i32[1] = v18[1];
  v28 = (float32x2_t)vdup_lane_s32(v24, 0);
  v29 = vcvt_u32_f32(vdiv_f32(v23, v28));
  v30 = vdup_n_s32(v19);
  v31 = vmla_s32(v27, (int32x2_t)vmin_u32(v26, v29), v30);
  if (v31.i32[0] == v31.i32[1])
  {
    if (**(_BYTE **)(v15 + 8))
    {
      if (*(float *)(v16 + 24 * v13 + 12) <= *(float *)(v16 + 24 * v14 + 12))
        return result;
    }
    else if (*(float *)(v16 + 24 * v13 + 20) <= *(float *)(v16 + 24 * v14 + 20))
    {
      return result;
    }
  }
  else if (v31.i32[0] >= (unsigned __int32)v31.i32[1])
  {
    return result;
  }
  *a3 = v13;
  *a4 = v14;
  v32 = *a3;
  v33 = *a2;
  v34 = (__int32 *)(v16 + 24 * *a3);
  v35 = (__int32 *)(v16 + 24 * *a2);
  v36.i32[0] = *v34;
  v37.i32[0] = v34[1];
  v36.i32[1] = *v35;
  v37.i32[1] = v35[1];
  v38 = vmla_s32((int32x2_t)vmin_u32(v26, vcvt_u32_f32(vdiv_f32(v36, v25))), (int32x2_t)vmin_u32(v26, vcvt_u32_f32(vdiv_f32(v37, v28))), v30);
  if (v38.i32[0] == v38.i32[1])
  {
    if (**(_BYTE **)(v15 + 8))
    {
      if (*(float *)(v16 + 24 * v32 + 12) <= *(float *)(v16 + 24 * v33 + 12))
        return result;
    }
    else if (*(float *)(v16 + 24 * v32 + 20) <= *(float *)(v16 + 24 * v33 + 20))
    {
      return result;
    }
  }
  else if (v38.i32[0] >= (unsigned __int32)v38.i32[1])
  {
    return result;
  }
  *a2 = v32;
  *a3 = v33;
  v39 = *a2;
  v40 = *a1;
  v41 = (__int32 *)(v16 + 24 * *a2);
  v42 = (__int32 *)(v16 + 24 * *a1);
  v43.i32[0] = *v41;
  v44.i32[0] = v41[1];
  v43.i32[1] = *v42;
  v44.i32[1] = v42[1];
  v45 = vmla_s32((int32x2_t)vmin_u32(v26, vcvt_u32_f32(vdiv_f32(v43, v25))), (int32x2_t)vmin_u32(v26, vcvt_u32_f32(vdiv_f32(v44, v28))), v30);
  if (v45.i32[0] == v45.i32[1])
  {
    if (**(_BYTE **)(v15 + 8))
    {
      if (*(float *)(v16 + 24 * v39 + 12) > *(float *)(v16 + 24 * v40 + 12))
        goto LABEL_22;
    }
    else if (*(float *)(v16 + 24 * v39 + 20) > *(float *)(v16 + 24 * v40 + 20))
    {
LABEL_22:
      *a1 = v39;
      *a2 = v40;
    }
  }
  else if (v45.i32[0] < (unsigned __int32)v45.i32[1])
  {
    goto LABEL_22;
  }
  return result;
}

uint64_t *sub_20EEACB60(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, double a7, double a8)
{
  uint64_t *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int32 *v19;
  __int32 *v20;
  _DWORD *v21;
  unsigned int v22;
  int32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int32x2_t v26;
  float32x2_t v27;
  uint32x2_t v28;
  int32x2_t v29;
  float32x2_t v30;
  uint32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  uint64_t v34;
  uint64_t v35;
  __int32 *v36;
  __int32 *v37;
  float32x2_t v38;
  float32x2_t v39;
  int32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  __int32 *v43;
  __int32 *v44;
  float32x2_t v45;
  float32x2_t v46;
  int32x2_t v47;
  uint64_t v48;
  uint64_t v49;
  __int32 *v50;
  __int32 *v51;
  float32x2_t v52;
  float32x2_t v53;
  int32x2_t v54;

  result = sub_20EEAC8EC(a1, a2, a3, a4, a6, a7, a8);
  v15 = *a5;
  v16 = *a4;
  v17 = *a6;
  v18 = *(_QWORD *)a6[1];
  v19 = (__int32 *)(v18 + 24 * *a5);
  v20 = (__int32 *)(v18 + 24 * *a4);
  v21 = *(_DWORD **)*a6;
  v22 = v21[2];
  *(float *)v23.i32 = (float)v21[1];
  LODWORD(v21) = *v21;
  v24.i32[0] = *v19;
  v25.i32[0] = v19[1];
  *(float *)v26.i32 = (float)v22;
  v24.i32[1] = *v20;
  v27 = (float32x2_t)vdup_lane_s32(v23, 0);
  v28 = (uint32x2_t)vdup_n_s32((int)v21 - 1);
  v29 = (int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v24, v27)));
  v25.i32[1] = v20[1];
  v30 = (float32x2_t)vdup_lane_s32(v26, 0);
  v31 = vcvt_u32_f32(vdiv_f32(v25, v30));
  v32 = vdup_n_s32(v21);
  v33 = vmla_s32(v29, (int32x2_t)vmin_u32(v28, v31), v32);
  if (v33.i32[0] == v33.i32[1])
  {
    if (**(_BYTE **)(v17 + 8))
    {
      if (*(float *)(v18 + 24 * v15 + 12) <= *(float *)(v18 + 24 * v16 + 12))
        return result;
    }
    else if (*(float *)(v18 + 24 * v15 + 20) <= *(float *)(v18 + 24 * v16 + 20))
    {
      return result;
    }
  }
  else if (v33.i32[0] >= (unsigned __int32)v33.i32[1])
  {
    return result;
  }
  *a4 = v15;
  *a5 = v16;
  v34 = *a4;
  v35 = *a3;
  v36 = (__int32 *)(v18 + 24 * *a4);
  v37 = (__int32 *)(v18 + 24 * *a3);
  v38.i32[0] = *v36;
  v39.i32[0] = v36[1];
  v38.i32[1] = *v37;
  v39.i32[1] = v37[1];
  v40 = vmla_s32((int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v38, v27))), (int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v39, v30))), v32);
  if (v40.i32[0] == v40.i32[1])
  {
    if (**(_BYTE **)(v17 + 8))
    {
      if (*(float *)(v18 + 24 * v34 + 12) <= *(float *)(v18 + 24 * v35 + 12))
        return result;
    }
    else if (*(float *)(v18 + 24 * v34 + 20) <= *(float *)(v18 + 24 * v35 + 20))
    {
      return result;
    }
  }
  else if (v40.i32[0] >= (unsigned __int32)v40.i32[1])
  {
    return result;
  }
  *a3 = v34;
  *a4 = v35;
  v41 = *a3;
  v42 = *a2;
  v43 = (__int32 *)(v18 + 24 * *a3);
  v44 = (__int32 *)(v18 + 24 * *a2);
  v45.i32[0] = *v43;
  v46.i32[0] = v43[1];
  v45.i32[1] = *v44;
  v46.i32[1] = v44[1];
  v47 = vmla_s32((int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v45, v27))), (int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v46, v30))), v32);
  if (v47.i32[0] == v47.i32[1])
  {
    if (**(_BYTE **)(v17 + 8))
    {
      if (*(float *)(v18 + 24 * v41 + 12) <= *(float *)(v18 + 24 * v42 + 12))
        return result;
    }
    else if (*(float *)(v18 + 24 * v41 + 20) <= *(float *)(v18 + 24 * v42 + 20))
    {
      return result;
    }
  }
  else if (v47.i32[0] >= (unsigned __int32)v47.i32[1])
  {
    return result;
  }
  *a2 = v41;
  *a3 = v42;
  v48 = *a2;
  v49 = *a1;
  v50 = (__int32 *)(v18 + 24 * *a2);
  v51 = (__int32 *)(v18 + 24 * *a1);
  v52.i32[0] = *v50;
  v53.i32[0] = v50[1];
  v52.i32[1] = *v51;
  v53.i32[1] = v51[1];
  v54 = vmla_s32((int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v52, v27))), (int32x2_t)vmin_u32(v28, vcvt_u32_f32(vdiv_f32(v53, v30))), v32);
  if (v54.i32[0] == v54.i32[1])
  {
    if (**(_BYTE **)(v17 + 8))
    {
      if (*(float *)(v18 + 24 * v48 + 12) > *(float *)(v18 + 24 * v49 + 12))
        goto LABEL_29;
    }
    else if (*(float *)(v18 + 24 * v48 + 20) > *(float *)(v18 + 24 * v49 + 20))
    {
LABEL_29:
      *a1 = v48;
      *a2 = v49;
    }
  }
  else if (v54.i32[0] < (unsigned __int32)v54.i32[1])
  {
    goto LABEL_29;
  }
  return result;
}

uint64_t *sub_20EEACE78(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  float v90;
  uint64_t v91;
  float v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t *v114;
  int64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  float v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  float v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  uint64_t v147;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v85 = *(a2 - 1);
        v86 = *v10;
        if (*(float *)(**(_QWORD **)(a3 + 8) + 24 * v85 + 12) > *(float *)(**(_QWORD **)(a3 + 8) + 24 * *v10 + 12))
        {
          *v10 = v85;
          goto LABEL_166;
        }
        return result;
      case 3:
        v86 = *v10;
        v87 = v10[1];
        v88 = **(_QWORD **)(a3 + 8);
        v89 = *(float *)(v88 + 24 * v87 + 12);
        v90 = *(float *)(v88 + 24 * *v10 + 12);
        v91 = *(a2 - 1);
        v92 = *(float *)(v88 + 24 * v91 + 12);
        if (v89 <= v90)
        {
          if (v92 > v89)
          {
            v10[1] = v91;
            *(a2 - 1) = v87;
            v102 = *v10;
            v98 = v10[1];
            v100 = *(float *)(v88 + 24 * v98 + 12);
            goto LABEL_155;
          }
        }
        else
        {
          if (v92 <= v89)
          {
            *v10 = v87;
            v10[1] = v86;
            v147 = *(a2 - 1);
            if (*(float *)(v88 + 24 * v147 + 12) <= v90)
              return result;
            v10[1] = v147;
          }
          else
          {
            *v10 = v91;
          }
LABEL_166:
          *(a2 - 1) = v86;
        }
        return result;
      case 4:
        return sub_20EEADDDC(v10, v10 + 1, v10 + 2, a2 - 1, **(_QWORD **)(a3 + 8));
      case 5:
        v93 = v10 + 1;
        v94 = v10 + 2;
        v95 = v10 + 3;
        result = sub_20EEADDDC(v9, v9 + 1, v9 + 2, v9 + 3, **(_QWORD **)(a3 + 8));
        v96 = *(a2 - 1);
        v97 = v9[3];
        v88 = **(_QWORD **)(a3 + 8);
        if (*(float *)(v88 + 24 * v96 + 12) > *(float *)(v88 + 24 * v97 + 12))
        {
          *v95 = v96;
          *(a2 - 1) = v97;
          v98 = *v95;
          v99 = *v94;
          v100 = *(float *)(v88 + 24 * *v95 + 12);
          if (v100 > *(float *)(v88 + 24 * *v94 + 12))
          {
            *v94 = v98;
            *v95 = v99;
            v101 = *v93;
            if (v100 > *(float *)(v88 + 24 * *v93 + 12))
            {
              v9[1] = v98;
              v9[2] = v101;
              v102 = *v9;
LABEL_155:
              if (v100 > *(float *)(v88 + 24 * v102 + 12))
              {
                *v9 = v98;
                v9[1] = v102;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v113 = (unint64_t)(v12 - 2) >> 1;
              v114 = *(uint64_t **)(a3 + 8);
              v115 = v113;
              do
              {
                if (v113 >= v115)
                {
                  v117 = (2 * v115) | 1;
                  v118 = &v10[v117];
                  if (2 * v115 + 2 >= v12)
                  {
                    v119 = *v114;
                  }
                  else
                  {
                    v119 = *v114;
                    if (*(float *)(*v114 + 24 * *v118 + 12) > *(float *)(*v114 + 24 * v118[1] + 12))
                    {
                      ++v118;
                      v117 = 2 * v115 + 2;
                    }
                  }
                  v120 = &v10[v115];
                  v121 = *v118;
                  v122 = *v120;
                  result = (uint64_t *)(v119 + 24 * *v120);
                  v123 = *((float *)result + 3);
                  if (*(float *)(v119 + 24 * *v118 + 12) <= v123)
                  {
                    do
                    {
                      result = v118;
                      *v120 = v121;
                      if (v113 < v117)
                        break;
                      v124 = 2 * v117;
                      v117 = (2 * v117) | 1;
                      v118 = &v10[v117];
                      v125 = v124 + 2;
                      if (v125 < v12 && *(float *)(v119 + 24 * *v118 + 12) > *(float *)(v119 + 24 * v118[1] + 12))
                      {
                        ++v118;
                        v117 = v125;
                      }
                      v121 = *v118;
                      v120 = result;
                    }
                    while (*(float *)(v119 + 24 * *v118 + 12) <= v123);
                    *result = v122;
                  }
                }
                v116 = v115-- <= 0;
              }
              while (!v116);
              v126 = (unint64_t)v11 >> 3;
              do
              {
                v127 = 0;
                v128 = *v10;
                v129 = *(uint64_t **)(a3 + 8);
                v130 = v10;
                do
                {
                  v131 = v130;
                  v130 += v127 + 1;
                  v132 = 2 * v127;
                  v127 = (2 * v127) | 1;
                  v133 = v132 + 2;
                  if (v133 < v126)
                  {
                    result = (uint64_t *)(*v129 + 24 * v130[1]);
                    if (*(float *)(*v129 + 24 * *v130 + 12) > *((float *)result + 3))
                    {
                      ++v130;
                      v127 = v133;
                    }
                  }
                  *v131 = *v130;
                }
                while (v127 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
                if (v130 == --a2)
                {
                  *v130 = v128;
                }
                else
                {
                  *v130 = *a2;
                  *a2 = v128;
                  v134 = (char *)v130 - (char *)v10 + 8;
                  if (v134 >= 9)
                  {
                    v135 = (((unint64_t)v134 >> 3) - 2) >> 1;
                    v136 = &v10[v135];
                    v137 = *v136;
                    v138 = *v130;
                    v139 = *v129;
                    v140 = *(float *)(v139 + 24 * *v130 + 12);
                    if (*(float *)(v139 + 24 * *v136 + 12) > v140)
                    {
                      do
                      {
                        v141 = v136;
                        *v130 = v137;
                        if (!v135)
                          break;
                        v135 = (v135 - 1) >> 1;
                        v136 = &v10[v135];
                        v137 = *v136;
                        v130 = v141;
                      }
                      while (*(float *)(v139 + 24 * *v136 + 12) > v140);
                      *v141 = v138;
                    }
                  }
                }
                v116 = v126-- <= 2;
              }
              while (!v116);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **(_QWORD **)(a3 + 8);
          v16 = *(a2 - 1);
          v17 = *(float *)(v15 + 24 * v16 + 12);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(float *)(v15 + 24 * *v10 + 12);
            v25 = *(float *)(v15 + 24 * *v14 + 12);
            if (v24 <= v25)
            {
              if (v17 > v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(float *)(v15 + 24 * *v10 + 12) > *(float *)(v15 + 24 * *v14 + 12))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(float *)(v15 + 24 * v40 + 12) <= v25)
                goto LABEL_32;
              *v10 = v40;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(float *)(v15 + 24 * *v14 + 12);
          v21 = *(float *)(v15 + 24 * *v10 + 12);
          if (v20 <= v21)
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(float *)(v15 + 24 * *v14 + 12) > *(float *)(v15 + 24 * *v10 + 12))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(float *)(v15 + 24 * v29 + 12) <= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(float *)(v15 + 24 * v33 + 12);
          v36 = *(float *)(v15 + 24 * v34 + 12);
          v37 = *(a2 - 2);
          v38 = *(float *)(v15 + 24 * v37 + 12);
          if (v35 <= v36)
          {
            if (v38 > v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(float *)(v15 + 24 * *v31 + 12) > *(float *)(v15 + 24 * v39 + 12))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v42 = *(a2 - 2);
              if (*(float *)(v15 + 24 * v42 + 12) <= v36)
                goto LABEL_37;
              *v31 = v42;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v43 = &v10[v13];
          v46 = v43[1];
          v44 = v43 + 1;
          v45 = v46;
          v47 = v10[2];
          v48 = *(float *)(v15 + 24 * v46 + 12);
          v49 = *(float *)(v15 + 24 * v47 + 12);
          v50 = *(a2 - 3);
          v51 = *(float *)(v15 + 24 * v50 + 12);
          if (v48 <= v49)
          {
            if (v51 > v48)
            {
              *v44 = v50;
              *(a2 - 3) = v45;
              v52 = v10[2];
              if (*(float *)(v15 + 24 * *v44 + 12) > *(float *)(v15 + 24 * v52 + 12))
              {
                v10[2] = *v44;
                *v44 = v52;
              }
            }
          }
          else
          {
            if (v51 <= v48)
            {
              v10[2] = v45;
              *v44 = v47;
              v53 = *(a2 - 3);
              if (*(float *)(v15 + 24 * v53 + 12) <= v49)
                goto LABEL_46;
              *v44 = v53;
            }
            else
            {
              v10[2] = v50;
            }
            *(a2 - 3) = v47;
          }
LABEL_46:
          v54 = *v14;
          v55 = *v31;
          v56 = *(float *)(v15 + 24 * *v14 + 12);
          v57 = *(float *)(v15 + 24 * *v31 + 12);
          v58 = *v44;
          v59 = *(float *)(v15 + 24 * *v44 + 12);
          if (v56 > v57)
          {
            if (v59 <= v56)
            {
              *v31 = v54;
              *v14 = v55;
              v31 = v14;
              v54 = v58;
              if (v59 <= v57)
              {
                v60 = *v10;
                *v10 = v55;
                *v14 = v60;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v59 <= v56)
            goto LABEL_54;
          *v14 = v58;
          *v44 = v54;
          v44 = v14;
          v54 = v55;
          if (v59 > v57)
          {
LABEL_53:
            *v31 = v58;
            *v44 = v55;
LABEL_54:
            v61 = *v10;
            *v10 = v54;
            *v14 = v61;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_55:
            v41 = *(float *)(v15 + 24 * v28 + 12);
            if (*(float *)(v15 + 24 * *(v10 - 1) + 12) > v41)
              goto LABEL_56;
            if (v41 <= *(float *)(v15 + 24 * *(a2 - 1) + 12))
            {
              v77 = v10 + 1;
              do
              {
                v10 = v77;
                if (v77 >= a2)
                  break;
                ++v77;
              }
              while (v41 <= *(float *)(v15 + 24 * *v10 + 12));
            }
            else
            {
              do
              {
                v76 = v10[1];
                ++v10;
              }
              while (v41 <= *(float *)(v15 + 24 * v76 + 12));
            }
            v78 = a2;
            if (v10 < a2)
            {
              v78 = a2;
              do
                v79 = *--v78;
              while (v41 > *(float *)(v15 + 24 * v79 + 12));
            }
            if (v10 < v78)
            {
              v80 = *v10;
              v81 = *v78;
              do
              {
                *v10 = v81;
                *v78 = v80;
                do
                {
                  v82 = v10[1];
                  ++v10;
                  v80 = v82;
                }
                while (v41 <= *(float *)(v15 + 24 * v82 + 12));
                do
                {
                  v83 = *--v78;
                  v81 = v83;
                }
                while (v41 > *(float *)(v15 + 24 * v83 + 12));
              }
              while (v10 < v78);
            }
            v84 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v84;
            a5 = 0;
            *v84 = v28;
            continue;
          }
          v75 = *v10;
          *v10 = v58;
          *v14 = v75;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_33:
          v41 = *(float *)(v15 + 24 * v28 + 12);
LABEL_56:
          v62 = 0;
          do
            v63 = v10[++v62];
          while (*(float *)(v15 + 24 * v63 + 12) > v41);
          v64 = &v10[v62];
          v65 = a2;
          if (v62 == 1)
          {
            v65 = a2;
            do
            {
              if (v64 >= v65)
                break;
              v67 = *--v65;
            }
            while (*(float *)(v15 + 24 * v67 + 12) <= v41);
          }
          else
          {
            do
              v66 = *--v65;
            while (*(float *)(v15 + 24 * v66 + 12) <= v41);
          }
          if (v64 >= v65)
          {
            v73 = v64 - 1;
            if (v64 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v68 = *v65;
            v69 = &v10[v62];
            v70 = v65;
            do
            {
              *v69 = v68;
              *v70 = v63;
              do
              {
                v71 = v69[1];
                ++v69;
                v63 = v71;
              }
              while (*(float *)(v15 + 24 * v71 + 12) > v41);
              do
              {
                v72 = *--v70;
                v68 = v72;
              }
              while (*(float *)(v15 + 24 * v72 + 12) <= v41);
            }
            while (v69 < v70);
            v73 = v69 - 1;
            if (v69 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v73;
          }
LABEL_74:
          *v73 = v28;
          if (v64 < v65)
            goto LABEL_77;
          v74 = sub_20EEAD9F0(v10, v73, a3);
          v10 = v73 + 1;
          result = (uint64_t *)sub_20EEAD9F0(v73 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v74)
              continue;
LABEL_77:
            result = (uint64_t *)sub_20EEACE78(v9, v73, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v73 + 1;
            continue;
          }
          a2 = v73;
          if (v74)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v103 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v104 = **(_QWORD **)(a3 + 8);
              v105 = 8;
              v106 = v10;
              do
              {
                v109 = *v106;
                v108 = v106[1];
                v106 = v103;
                v110 = *(float *)(v104 + 24 * v108 + 12);
                if (v110 > *(float *)(v104 + 24 * v109 + 12))
                {
                  v111 = v105;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v111) = v109;
                    v112 = v111 - 8;
                    if (v111 == 8)
                    {
                      v107 = v10;
                      goto LABEL_116;
                    }
                    v109 = *(uint64_t *)((char *)v10 + v111 - 16);
                    v111 -= 8;
                  }
                  while (v110 > *(float *)(v104 + 24 * v109 + 12));
                  v107 = (uint64_t *)((char *)v10 + v112);
LABEL_116:
                  *v107 = v108;
                }
                v103 = v106 + 1;
                v105 += 8;
              }
              while (v106 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v142 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v143 = **(_QWORD **)(a3 + 8);
            do
            {
              v145 = *v9;
              v144 = v9[1];
              v9 = v142;
              v146 = *(float *)(v143 + 24 * v144 + 12);
              if (v146 > *(float *)(v143 + 24 * v145 + 12))
              {
                do
                {
                  *v142 = v145;
                  v145 = *(v142 - 2);
                  --v142;
                }
                while (v146 > *(float *)(v143 + 24 * v145 + 12));
                *v142 = v144;
              }
              v142 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_20EEAD9F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**(_QWORD **)(a3 + 8) + 24 * v8 + 12) > *(float *)(**(_QWORD **)(a3 + 8) + 24 * *a1 + 12))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = *a1;
      v11 = a1[1];
      v12 = **(_QWORD **)(a3 + 8);
      v13 = *(float *)(v12 + 24 * v11 + 12);
      v14 = *(float *)(v12 + 24 * *a1 + 12);
      v15 = *(a2 - 1);
      v16 = *(float *)(v12 + 24 * v15 + 12);
      if (v13 <= v14)
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v11;
          v39 = *a1;
          v38 = a1[1];
          if (*(float *)(v12 + 24 * v38 + 12) > *(float *)(v12 + 24 * *a1 + 12))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v11;
        a1[1] = v10;
        v48 = *(a2 - 1);
        if (*(float *)(v12 + 24 * v48 + 12) > v14)
        {
          a1[1] = v48;
          *(a2 - 1) = v10;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v10;
      }
      return result;
    case 4:
      sub_20EEADDDC(a1, a1 + 1, a1 + 2, a2 - 1, **(_QWORD **)(a3 + 8));
      return 1;
    case 5:
      v27 = a1 + 1;
      v28 = a1 + 2;
      v29 = a1 + 3;
      sub_20EEADDDC(a1, a1 + 1, a1 + 2, a1 + 3, **(_QWORD **)(a3 + 8));
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = **(_QWORD **)(a3 + 8);
      if (*(float *)(v32 + 24 * v30 + 12) <= *(float *)(v32 + 24 * v31 + 12))
        return 1;
      *v29 = v30;
      *(a2 - 1) = v31;
      v33 = *v29;
      v34 = *v28;
      v35 = *(float *)(v32 + 24 * *v29 + 12);
      if (v35 <= *(float *)(v32 + 24 * *v28 + 12))
        return 1;
      *v28 = v33;
      *v29 = v34;
      v36 = *v27;
      if (v35 <= *(float *)(v32 + 24 * *v27 + 12))
        return 1;
      a1[1] = v33;
      a1[2] = v36;
      v37 = *a1;
      if (v35 <= *(float *)(v32 + 24 * *a1 + 12))
        return 1;
      *a1 = v33;
      a1[1] = v37;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = *a1;
      v21 = **(_QWORD **)(a3 + 8);
      v22 = *(float *)(v21 + 24 * v19 + 12);
      v23 = *(float *)(v21 + 24 * *a1 + 12);
      v24 = *(float *)(v21 + 24 * v17 + 12);
      if (v22 > v23)
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 <= v22)
        {
          *a1 = v19;
          a1[1] = v20;
          v25 = a1 + 1;
          v26 = a1 + 2;
          if (v24 <= v23)
            goto LABEL_25;
        }
LABEL_24:
        *v25 = v17;
        *v26 = v20;
        goto LABEL_25;
      }
      if (v24 > v22)
      {
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
        if (v24 > v23)
          goto LABEL_24;
      }
LABEL_25:
      v40 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v41 = 0;
      for (i = 24; ; i += 8)
      {
        v43 = *v40;
        v44 = *v18;
        v45 = *(float *)(v21 + 24 * *v40 + 12);
        if (v45 > *(float *)(v21 + 24 * v44 + 12))
          break;
LABEL_34:
        v18 = v40++;
        if (v40 == a2)
          return 1;
      }
      v46 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v46) = v44;
        v47 = v46 - 8;
        if (v46 == 8)
        {
          *a1 = v43;
          if (++v41 != 8)
            goto LABEL_34;
          return v40 + 1 == a2;
        }
        v44 = *(uint64_t *)((char *)a1 + v46 - 16);
        v46 -= 8;
      }
      while (v45 > *(float *)(v21 + 24 * v44 + 12));
      *(uint64_t *)((char *)a1 + v47) = v43;
      if (++v41 != 8)
        goto LABEL_34;
      return v40 + 1 == a2;
  }
}

uint64_t *sub_20EEADDDC(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v6 = *result;
  v7 = *(float *)(a5 + 24 * *a2 + 12);
  v8 = *(float *)(a5 + 24 * *result + 12);
  v9 = *a3;
  v10 = *(float *)(a5 + 24 * *a3 + 12);
  if (v7 <= v8)
  {
    if (v10 <= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(float *)(a5 + 24 * *a2 + 12) > *(float *)(a5 + 24 * *result + 12))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 > v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(float *)(a5 + 24 * *a3 + 12) > v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(float *)(a5 + 24 * *a4 + 12) > *(float *)(a5 + 24 * v5 + 12))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(float *)(a5 + 24 * *a3 + 12) > *(float *)(a5 + 24 * *a2 + 12))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(float *)(a5 + 24 * *a2 + 12) > *(float *)(a5 + 24 * *result + 12))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t *sub_20EEADF18(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  float v90;
  uint64_t v91;
  float v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t *v114;
  int64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  float v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  float v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  uint64_t v147;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v85 = *(a2 - 1);
        v86 = *v10;
        if (*(float *)(**(_QWORD **)(a3 + 8) + 24 * v85 + 20) > *(float *)(**(_QWORD **)(a3 + 8) + 24 * *v10 + 20))
        {
          *v10 = v85;
          goto LABEL_166;
        }
        return result;
      case 3:
        v86 = *v10;
        v87 = v10[1];
        v88 = **(_QWORD **)(a3 + 8);
        v89 = *(float *)(v88 + 24 * v87 + 20);
        v90 = *(float *)(v88 + 24 * *v10 + 20);
        v91 = *(a2 - 1);
        v92 = *(float *)(v88 + 24 * v91 + 20);
        if (v89 <= v90)
        {
          if (v92 > v89)
          {
            v10[1] = v91;
            *(a2 - 1) = v87;
            v102 = *v10;
            v98 = v10[1];
            v100 = *(float *)(v88 + 24 * v98 + 20);
            goto LABEL_155;
          }
        }
        else
        {
          if (v92 <= v89)
          {
            *v10 = v87;
            v10[1] = v86;
            v147 = *(a2 - 1);
            if (*(float *)(v88 + 24 * v147 + 20) <= v90)
              return result;
            v10[1] = v147;
          }
          else
          {
            *v10 = v91;
          }
LABEL_166:
          *(a2 - 1) = v86;
        }
        return result;
      case 4:
        return sub_20EEAEE7C(v10, v10 + 1, v10 + 2, a2 - 1, **(_QWORD **)(a3 + 8));
      case 5:
        v93 = v10 + 1;
        v94 = v10 + 2;
        v95 = v10 + 3;
        result = sub_20EEAEE7C(v9, v9 + 1, v9 + 2, v9 + 3, **(_QWORD **)(a3 + 8));
        v96 = *(a2 - 1);
        v97 = v9[3];
        v88 = **(_QWORD **)(a3 + 8);
        if (*(float *)(v88 + 24 * v96 + 20) > *(float *)(v88 + 24 * v97 + 20))
        {
          *v95 = v96;
          *(a2 - 1) = v97;
          v98 = *v95;
          v99 = *v94;
          v100 = *(float *)(v88 + 24 * *v95 + 20);
          if (v100 > *(float *)(v88 + 24 * *v94 + 20))
          {
            *v94 = v98;
            *v95 = v99;
            v101 = *v93;
            if (v100 > *(float *)(v88 + 24 * *v93 + 20))
            {
              v9[1] = v98;
              v9[2] = v101;
              v102 = *v9;
LABEL_155:
              if (v100 > *(float *)(v88 + 24 * v102 + 20))
              {
                *v9 = v98;
                v9[1] = v102;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v113 = (unint64_t)(v12 - 2) >> 1;
              v114 = *(uint64_t **)(a3 + 8);
              v115 = v113;
              do
              {
                if (v113 >= v115)
                {
                  v117 = (2 * v115) | 1;
                  v118 = &v10[v117];
                  if (2 * v115 + 2 >= v12)
                  {
                    v119 = *v114;
                  }
                  else
                  {
                    v119 = *v114;
                    if (*(float *)(*v114 + 24 * *v118 + 20) > *(float *)(*v114 + 24 * v118[1] + 20))
                    {
                      ++v118;
                      v117 = 2 * v115 + 2;
                    }
                  }
                  v120 = &v10[v115];
                  v121 = *v118;
                  v122 = *v120;
                  result = (uint64_t *)(v119 + 24 * *v120);
                  v123 = *((float *)result + 5);
                  if (*(float *)(v119 + 24 * *v118 + 20) <= v123)
                  {
                    do
                    {
                      result = v118;
                      *v120 = v121;
                      if (v113 < v117)
                        break;
                      v124 = 2 * v117;
                      v117 = (2 * v117) | 1;
                      v118 = &v10[v117];
                      v125 = v124 + 2;
                      if (v125 < v12 && *(float *)(v119 + 24 * *v118 + 20) > *(float *)(v119 + 24 * v118[1] + 20))
                      {
                        ++v118;
                        v117 = v125;
                      }
                      v121 = *v118;
                      v120 = result;
                    }
                    while (*(float *)(v119 + 24 * *v118 + 20) <= v123);
                    *result = v122;
                  }
                }
                v116 = v115-- <= 0;
              }
              while (!v116);
              v126 = (unint64_t)v11 >> 3;
              do
              {
                v127 = 0;
                v128 = *v10;
                v129 = *(uint64_t **)(a3 + 8);
                v130 = v10;
                do
                {
                  v131 = v130;
                  v130 += v127 + 1;
                  v132 = 2 * v127;
                  v127 = (2 * v127) | 1;
                  v133 = v132 + 2;
                  if (v133 < v126)
                  {
                    result = (uint64_t *)(*v129 + 24 * v130[1]);
                    if (*(float *)(*v129 + 24 * *v130 + 20) > *((float *)result + 5))
                    {
                      ++v130;
                      v127 = v133;
                    }
                  }
                  *v131 = *v130;
                }
                while (v127 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
                if (v130 == --a2)
                {
                  *v130 = v128;
                }
                else
                {
                  *v130 = *a2;
                  *a2 = v128;
                  v134 = (char *)v130 - (char *)v10 + 8;
                  if (v134 >= 9)
                  {
                    v135 = (((unint64_t)v134 >> 3) - 2) >> 1;
                    v136 = &v10[v135];
                    v137 = *v136;
                    v138 = *v130;
                    v139 = *v129;
                    v140 = *(float *)(v139 + 24 * *v130 + 20);
                    if (*(float *)(v139 + 24 * *v136 + 20) > v140)
                    {
                      do
                      {
                        v141 = v136;
                        *v130 = v137;
                        if (!v135)
                          break;
                        v135 = (v135 - 1) >> 1;
                        v136 = &v10[v135];
                        v137 = *v136;
                        v130 = v141;
                      }
                      while (*(float *)(v139 + 24 * *v136 + 20) > v140);
                      *v141 = v138;
                    }
                  }
                }
                v116 = v126-- <= 2;
              }
              while (!v116);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **(_QWORD **)(a3 + 8);
          v16 = *(a2 - 1);
          v17 = *(float *)(v15 + 24 * v16 + 20);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(float *)(v15 + 24 * *v10 + 20);
            v25 = *(float *)(v15 + 24 * *v14 + 20);
            if (v24 <= v25)
            {
              if (v17 > v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(float *)(v15 + 24 * *v10 + 20) > *(float *)(v15 + 24 * *v14 + 20))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(float *)(v15 + 24 * v40 + 20) <= v25)
                goto LABEL_32;
              *v10 = v40;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(float *)(v15 + 24 * *v14 + 20);
          v21 = *(float *)(v15 + 24 * *v10 + 20);
          if (v20 <= v21)
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(float *)(v15 + 24 * *v14 + 20) > *(float *)(v15 + 24 * *v10 + 20))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(float *)(v15 + 24 * v29 + 20) <= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(float *)(v15 + 24 * v33 + 20);
          v36 = *(float *)(v15 + 24 * v34 + 20);
          v37 = *(a2 - 2);
          v38 = *(float *)(v15 + 24 * v37 + 20);
          if (v35 <= v36)
          {
            if (v38 > v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(float *)(v15 + 24 * *v31 + 20) > *(float *)(v15 + 24 * v39 + 20))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v42 = *(a2 - 2);
              if (*(float *)(v15 + 24 * v42 + 20) <= v36)
                goto LABEL_37;
              *v31 = v42;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v43 = &v10[v13];
          v46 = v43[1];
          v44 = v43 + 1;
          v45 = v46;
          v47 = v10[2];
          v48 = *(float *)(v15 + 24 * v46 + 20);
          v49 = *(float *)(v15 + 24 * v47 + 20);
          v50 = *(a2 - 3);
          v51 = *(float *)(v15 + 24 * v50 + 20);
          if (v48 <= v49)
          {
            if (v51 > v48)
            {
              *v44 = v50;
              *(a2 - 3) = v45;
              v52 = v10[2];
              if (*(float *)(v15 + 24 * *v44 + 20) > *(float *)(v15 + 24 * v52 + 20))
              {
                v10[2] = *v44;
                *v44 = v52;
              }
            }
          }
          else
          {
            if (v51 <= v48)
            {
              v10[2] = v45;
              *v44 = v47;
              v53 = *(a2 - 3);
              if (*(float *)(v15 + 24 * v53 + 20) <= v49)
                goto LABEL_46;
              *v44 = v53;
            }
            else
            {
              v10[2] = v50;
            }
            *(a2 - 3) = v47;
          }
LABEL_46:
          v54 = *v14;
          v55 = *v31;
          v56 = *(float *)(v15 + 24 * *v14 + 20);
          v57 = *(float *)(v15 + 24 * *v31 + 20);
          v58 = *v44;
          v59 = *(float *)(v15 + 24 * *v44 + 20);
          if (v56 > v57)
          {
            if (v59 <= v56)
            {
              *v31 = v54;
              *v14 = v55;
              v31 = v14;
              v54 = v58;
              if (v59 <= v57)
              {
                v60 = *v10;
                *v10 = v55;
                *v14 = v60;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v59 <= v56)
            goto LABEL_54;
          *v14 = v58;
          *v44 = v54;
          v44 = v14;
          v54 = v55;
          if (v59 > v57)
          {
LABEL_53:
            *v31 = v58;
            *v44 = v55;
LABEL_54:
            v61 = *v10;
            *v10 = v54;
            *v14 = v61;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_55:
            v41 = *(float *)(v15 + 24 * v28 + 20);
            if (*(float *)(v15 + 24 * *(v10 - 1) + 20) > v41)
              goto LABEL_56;
            if (v41 <= *(float *)(v15 + 24 * *(a2 - 1) + 20))
            {
              v77 = v10 + 1;
              do
              {
                v10 = v77;
                if (v77 >= a2)
                  break;
                ++v77;
              }
              while (v41 <= *(float *)(v15 + 24 * *v10 + 20));
            }
            else
            {
              do
              {
                v76 = v10[1];
                ++v10;
              }
              while (v41 <= *(float *)(v15 + 24 * v76 + 20));
            }
            v78 = a2;
            if (v10 < a2)
            {
              v78 = a2;
              do
                v79 = *--v78;
              while (v41 > *(float *)(v15 + 24 * v79 + 20));
            }
            if (v10 < v78)
            {
              v80 = *v10;
              v81 = *v78;
              do
              {
                *v10 = v81;
                *v78 = v80;
                do
                {
                  v82 = v10[1];
                  ++v10;
                  v80 = v82;
                }
                while (v41 <= *(float *)(v15 + 24 * v82 + 20));
                do
                {
                  v83 = *--v78;
                  v81 = v83;
                }
                while (v41 > *(float *)(v15 + 24 * v83 + 20));
              }
              while (v10 < v78);
            }
            v84 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v84;
            a5 = 0;
            *v84 = v28;
            continue;
          }
          v75 = *v10;
          *v10 = v58;
          *v14 = v75;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_33:
          v41 = *(float *)(v15 + 24 * v28 + 20);
LABEL_56:
          v62 = 0;
          do
            v63 = v10[++v62];
          while (*(float *)(v15 + 24 * v63 + 20) > v41);
          v64 = &v10[v62];
          v65 = a2;
          if (v62 == 1)
          {
            v65 = a2;
            do
            {
              if (v64 >= v65)
                break;
              v67 = *--v65;
            }
            while (*(float *)(v15 + 24 * v67 + 20) <= v41);
          }
          else
          {
            do
              v66 = *--v65;
            while (*(float *)(v15 + 24 * v66 + 20) <= v41);
          }
          if (v64 >= v65)
          {
            v73 = v64 - 1;
            if (v64 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v68 = *v65;
            v69 = &v10[v62];
            v70 = v65;
            do
            {
              *v69 = v68;
              *v70 = v63;
              do
              {
                v71 = v69[1];
                ++v69;
                v63 = v71;
              }
              while (*(float *)(v15 + 24 * v71 + 20) > v41);
              do
              {
                v72 = *--v70;
                v68 = v72;
              }
              while (*(float *)(v15 + 24 * v72 + 20) <= v41);
            }
            while (v69 < v70);
            v73 = v69 - 1;
            if (v69 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v73;
          }
LABEL_74:
          *v73 = v28;
          if (v64 < v65)
            goto LABEL_77;
          v74 = sub_20EEAEA90(v10, v73, a3);
          v10 = v73 + 1;
          result = (uint64_t *)sub_20EEAEA90(v73 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v74)
              continue;
LABEL_77:
            result = (uint64_t *)sub_20EEADF18(v9, v73, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v73 + 1;
            continue;
          }
          a2 = v73;
          if (v74)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v103 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v104 = **(_QWORD **)(a3 + 8);
              v105 = 8;
              v106 = v10;
              do
              {
                v109 = *v106;
                v108 = v106[1];
                v106 = v103;
                v110 = *(float *)(v104 + 24 * v108 + 20);
                if (v110 > *(float *)(v104 + 24 * v109 + 20))
                {
                  v111 = v105;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v111) = v109;
                    v112 = v111 - 8;
                    if (v111 == 8)
                    {
                      v107 = v10;
                      goto LABEL_116;
                    }
                    v109 = *(uint64_t *)((char *)v10 + v111 - 16);
                    v111 -= 8;
                  }
                  while (v110 > *(float *)(v104 + 24 * v109 + 20));
                  v107 = (uint64_t *)((char *)v10 + v112);
LABEL_116:
                  *v107 = v108;
                }
                v103 = v106 + 1;
                v105 += 8;
              }
              while (v106 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v142 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v143 = **(_QWORD **)(a3 + 8);
            do
            {
              v145 = *v9;
              v144 = v9[1];
              v9 = v142;
              v146 = *(float *)(v143 + 24 * v144 + 20);
              if (v146 > *(float *)(v143 + 24 * v145 + 20))
              {
                do
                {
                  *v142 = v145;
                  v145 = *(v142 - 2);
                  --v142;
                }
                while (v146 > *(float *)(v143 + 24 * v145 + 20));
                *v142 = v144;
              }
              v142 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_20EEAEA90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**(_QWORD **)(a3 + 8) + 24 * v8 + 20) > *(float *)(**(_QWORD **)(a3 + 8) + 24 * *a1 + 20))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = *a1;
      v11 = a1[1];
      v12 = **(_QWORD **)(a3 + 8);
      v13 = *(float *)(v12 + 24 * v11 + 20);
      v14 = *(float *)(v12 + 24 * *a1 + 20);
      v15 = *(a2 - 1);
      v16 = *(float *)(v12 + 24 * v15 + 20);
      if (v13 <= v14)
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v11;
          v39 = *a1;
          v38 = a1[1];
          if (*(float *)(v12 + 24 * v38 + 20) > *(float *)(v12 + 24 * *a1 + 20))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v11;
        a1[1] = v10;
        v48 = *(a2 - 1);
        if (*(float *)(v12 + 24 * v48 + 20) > v14)
        {
          a1[1] = v48;
          *(a2 - 1) = v10;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v10;
      }
      return result;
    case 4:
      sub_20EEAEE7C(a1, a1 + 1, a1 + 2, a2 - 1, **(_QWORD **)(a3 + 8));
      return 1;
    case 5:
      v27 = a1 + 1;
      v28 = a1 + 2;
      v29 = a1 + 3;
      sub_20EEAEE7C(a1, a1 + 1, a1 + 2, a1 + 3, **(_QWORD **)(a3 + 8));
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = **(_QWORD **)(a3 + 8);
      if (*(float *)(v32 + 24 * v30 + 20) <= *(float *)(v32 + 24 * v31 + 20))
        return 1;
      *v29 = v30;
      *(a2 - 1) = v31;
      v33 = *v29;
      v34 = *v28;
      v35 = *(float *)(v32 + 24 * *v29 + 20);
      if (v35 <= *(float *)(v32 + 24 * *v28 + 20))
        return 1;
      *v28 = v33;
      *v29 = v34;
      v36 = *v27;
      if (v35 <= *(float *)(v32 + 24 * *v27 + 20))
        return 1;
      a1[1] = v33;
      a1[2] = v36;
      v37 = *a1;
      if (v35 <= *(float *)(v32 + 24 * *a1 + 20))
        return 1;
      *a1 = v33;
      a1[1] = v37;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = *a1;
      v21 = **(_QWORD **)(a3 + 8);
      v22 = *(float *)(v21 + 24 * v19 + 20);
      v23 = *(float *)(v21 + 24 * *a1 + 20);
      v24 = *(float *)(v21 + 24 * v17 + 20);
      if (v22 > v23)
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 <= v22)
        {
          *a1 = v19;
          a1[1] = v20;
          v25 = a1 + 1;
          v26 = a1 + 2;
          if (v24 <= v23)
            goto LABEL_25;
        }
LABEL_24:
        *v25 = v17;
        *v26 = v20;
        goto LABEL_25;
      }
      if (v24 > v22)
      {
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
        if (v24 > v23)
          goto LABEL_24;
      }
LABEL_25:
      v40 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v41 = 0;
      for (i = 24; ; i += 8)
      {
        v43 = *v40;
        v44 = *v18;
        v45 = *(float *)(v21 + 24 * *v40 + 20);
        if (v45 > *(float *)(v21 + 24 * v44 + 20))
          break;
LABEL_34:
        v18 = v40++;
        if (v40 == a2)
          return 1;
      }
      v46 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v46) = v44;
        v47 = v46 - 8;
        if (v46 == 8)
        {
          *a1 = v43;
          if (++v41 != 8)
            goto LABEL_34;
          return v40 + 1 == a2;
        }
        v44 = *(uint64_t *)((char *)a1 + v46 - 16);
        v46 -= 8;
      }
      while (v45 > *(float *)(v21 + 24 * v44 + 20));
      *(uint64_t *)((char *)a1 + v47) = v43;
      if (++v41 != 8)
        goto LABEL_34;
      return v40 + 1 == a2;
  }
}

uint64_t *sub_20EEAEE7C(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v6 = *result;
  v7 = *(float *)(a5 + 24 * *a2 + 20);
  v8 = *(float *)(a5 + 24 * *result + 20);
  v9 = *a3;
  v10 = *(float *)(a5 + 24 * *a3 + 20);
  if (v7 <= v8)
  {
    if (v10 <= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(float *)(a5 + 24 * *a2 + 20) > *(float *)(a5 + 24 * *result + 20))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 > v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(float *)(a5 + 24 * *a3 + 20) > v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(float *)(a5 + 24 * *a4 + 20) > *(float *)(a5 + 24 * v5 + 20))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(float *)(a5 + 24 * *a3 + 20) > *(float *)(a5 + 24 * *a2 + 20))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(float *)(a5 + 24 * *a2 + 20) > *(float *)(a5 + 24 * *result + 20))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_20EEAEFB8(uint64_t a1, unint64_t a2, int a3, char a4, int a5, int a6)
{
  size_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  *(_DWORD *)a1 = a5;
  *(_BYTE *)(a1 + 4) = a4;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v11 = 8 * a2;
  if (a2)
  {
    if (a2 >> 61)
      sub_20E867F44();
    v12 = (char *)operator new(8 * a2);
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 32) = &v12[8 * a2];
    bzero(v12, v11);
    *(_QWORD *)(a1 + 24) = &v12[v11];
  }
  *(_QWORD *)(a1 + 144) = a2;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 120) = xmmword_210313B70;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  if (a2)
  {
    v13 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 152) = v13;
    *(_QWORD *)(a1 + 168) = &v13[8 * a2];
    bzero(v13, v11);
    *(_QWORD *)(a1 + 160) = &v13[v11];
  }
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = xmmword_210313B70;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v14 = operator new(0x20uLL);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_24C9C36D8;
  v14[3] = 0;
  *(_QWORD *)(a1 + 288) = v14 + 3;
  *(_QWORD *)(a1 + 296) = v14;
  *(_DWORD *)(a1 + 304) = a3;
  *(_BYTE *)(a1 + 312) = 0;
  if (a6)
  {
    v15 = operator new();
    *(_DWORD *)v15 = a5;
    *(_QWORD *)(v15 + 12) = 0;
    *(_QWORD *)(v15 + 4) = 0;
    *(_BYTE *)(v15 + 20) = 0;
    v16 = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 280) = v15;
    if (v16)
      MEMORY[0x212BC6398](v16, 0x1000C402C707793);
  }
  return a1;
}

void sub_20EEAF170(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  sub_20E86665C(v4);
  v6 = *(_QWORD *)(v1 + 280);
  *(_QWORD *)(v1 + 280) = 0;
  if (v6)
  {
    MEMORY[0x212BC6398](v6, 0x1000C402C707793);
    sub_20EAAB7E8(v3);
    sub_20EAAB7E8(v2);
    _Unwind_Resume(a1);
  }
  sub_20EAAB7E8(v3);
  sub_20EAAB7E8(v2);
  _Unwind_Resume(a1);
}

void sub_20EEAF1E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EEAF204(unsigned int *a1)
{
  uint64_t v2;
  int v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  unsigned __int8 v14;
  int v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t *v25;
  unsigned __int8 v26;
  int v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t m;
  uint64_t v34;
  int v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned __int8 v50;
  int v51;
  _QWORD *v52;
  int v53;
  std::chrono::steady_clock::time_point v54;
  std::chrono::steady_clock::time_point *v55;
  unsigned __int8 v56;
  int v57;
  _QWORD *v58;
  int v59;
  std::chrono::steady_clock::time_point v60;
  std::chrono::steady_clock::time_point *v61;
  uint64_t *v62;
  unsigned __int8 v63;
  unsigned int v65;
  unsigned int v66;
  std::string::size_type v67;
  double v68;
  unsigned int v69;
  char *v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t j;
  uint64_t v75;
  uint64_t *v76;
  unsigned __int8 v77;
  unsigned int v79;
  unsigned int v80;
  std::string::size_type v81;
  double v82;
  unsigned int v83;
  char *v84;
  size_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t k;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  std::string::size_type v92;
  double v93;
  unsigned int v94;
  unsigned __int8 v95;
  unsigned int v96;
  unsigned int v97;
  std::string::size_type v98;
  double v99;
  unsigned int v100;
  unsigned __int8 v101;
  _QWORD *v102;
  _QWORD *v103;
  __uint64_t v104[2];
  std::string v105;
  __int16 v106;
  _BYTE v107[14];
  char v108;
  char v109;
  void *v110;
  char v111;
  char v112;
  void *v113;
  char v114;
  void *__p;
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a1 + 17))
  {
    v2 = *((_QWORD *)a1 + 23);
    if (v2)
    {
      v3 = *((unsigned __int8 *)a1 + 4);
      v4 = *(double *)(*((_QWORD *)a1 + 19) + 8 * v2 - 8);
      v5 = *((_QWORD *)a1 + 6);
      if (v5)
      {
LABEL_4:
        v6 = *((_QWORD *)a1 + 2);
        goto LABEL_7;
      }
    }
    else
    {
      v3 = *((unsigned __int8 *)a1 + 4);
      v4 = *(double *)(*((_QWORD *)a1 + 19) + 8 * ((uint64_t)(*((_QWORD *)a1 + 20) - *((_QWORD *)a1 + 19)) >> 3) - 8);
      v5 = *((_QWORD *)a1 + 6);
      if (v5)
        goto LABEL_4;
    }
    v6 = *((_QWORD *)a1 + 2);
    v5 = (*((_QWORD *)a1 + 3) - v6) >> 3;
LABEL_7:
    v7 = v4;
    v8 = *(double *)(v6 + 8 * v5 - 8);
    v9 = *((unsigned __int8 *)a1 + 312);
    *((_BYTE *)a1 + 312) = 0;
    v10 = *((_QWORD *)a1 + 36);
    if (v3)
    {
      if (!v9)
      {
        v11 = a1[76];
        v12 = !*(_BYTE *)(v10 + 4) || v11 == 0;
        if (!v12 && *(_DWORD *)v10 < v11 - 1)
        {
          ++*(_DWORD *)v10;
          goto LABEL_53;
        }
      }
      *(_DWORD *)v10 = 0;
      *(_BYTE *)(v10 + 4) = 1;
      v13 = sub_210219C18();
      v14 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
      {
LABEL_51:
        if (os_signpost_enabled((os_log_t)*v13))
        {
          v35 = *a1;
          LODWORD(v105.__r_.__value_.__l.__data_) = 67109632;
          HIDWORD(v105.__r_.__value_.__r.__words[0]) = v35;
          LOWORD(v105.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v105.__r_.__value_.__r.__words[1] + 2) = v7;
          HIWORD(v105.__r_.__value_.__r.__words[1]) = 1024;
          LODWORD(v105.__r_.__value_.__r.__words[2]) = v8;
          _os_signpost_emit_unreliably_with_name_impl();
        }
LABEL_53:
        v36 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
        if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
        {
          sub_20FCFB524();
          __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6D9C8);
        }
        v37 = *((_QWORD *)a1 + 23);
        if (v37)
        {
          v38 = *a1;
          v39 = *(double *)(*((_QWORD *)a1 + 19) + 8 * v37 - 8);
          v40 = *((_QWORD *)a1 + 6);
          if (v40)
          {
LABEL_56:
            v41 = *((_QWORD *)a1 + 2);
LABEL_59:
            sub_210237040("Feature points filtering (HW): Camera ID: [%02u] Number of features: %u/%u", &v105, v38, v39, *(double *)(v41 + 8 * v40 - 8));
            sub_20EA5C6C8((uint64_t)&v105, qword_254A6D9A8);
            goto LABEL_80;
          }
        }
        else
        {
          v38 = *a1;
          v39 = *(double *)(*((_QWORD *)a1 + 19)
                                        + 8 * ((uint64_t)(*((_QWORD *)a1 + 20) - *((_QWORD *)a1 + 19)) >> 3)
                                        - 8);
          v40 = *((_QWORD *)a1 + 6);
          if (v40)
            goto LABEL_56;
        }
        v41 = *((_QWORD *)a1 + 2);
        v40 = (*((_QWORD *)a1 + 3) - v41) >> 3;
        goto LABEL_59;
      }
      v16 = *a1;
      LODWORD(v105.__r_.__value_.__l.__data_) = 67109632;
      HIDWORD(v105.__r_.__value_.__r.__words[0]) = v16;
      LOWORD(v105.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v105.__r_.__value_.__r.__words[1] + 2) = v7;
      HIWORD(v105.__r_.__value_.__r.__words[1]) = 1024;
      LODWORD(v105.__r_.__value_.__r.__words[2]) = v8;
      v17 = (char *)_os_log_send_and_compose_impl();
      v18 = strlen(v17);
      v104[0] = 0;
      pthread_threadid_np(0, v104);
      v19 = v104[0];
      timespec_get((timespec *)v104, 1);
      sub_210219E20(&v105, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v13 + 1), (__int128 *)(v13 + 5), "Feature points filtering (HW): Camera ID: [%02u] Number of features: %u/%u", 0x4AuLL, v17, v18, v19, v104);
      std::mutex::lock(&stru_254A5A410);
      v20 = qword_254A5A458;
      for (i = unk_254A5A460; v20 != i; v20 += 40)
      {
        v22 = *(_QWORD *)(v20 + 32);
        if (!v22)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 48))(v22, &v105);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v116 < 0)
      {
        operator delete(__p);
        if ((v114 & 0x80000000) == 0)
        {
LABEL_22:
          if (!v112)
          {
LABEL_44:
            if (v109 && v108 < 0)
              operator delete(*(void **)&v107[6]);
            if ((v107[5] & 0x80000000) != 0)
              operator delete((void *)v105.__r_.__value_.__l.__size_);
            if (v17)
              free(v17);
            goto LABEL_51;
          }
LABEL_42:
          if (v111 < 0)
            operator delete(v110);
          goto LABEL_44;
        }
      }
      else if ((v114 & 0x80000000) == 0)
      {
        goto LABEL_22;
      }
      operator delete(v113);
      if (!v112)
        goto LABEL_44;
      goto LABEL_42;
    }
    if (!v9)
    {
      v23 = a1[76];
      v24 = !*(_BYTE *)(v10 + 4) || v23 == 0;
      if (!v24 && *(_DWORD *)v10 < v23 - 1)
      {
        ++*(_DWORD *)v10;
        goto LABEL_73;
      }
    }
    *(_DWORD *)v10 = 0;
    *(_BYTE *)(v10 + 4) = 1;
    v25 = sub_210219C18();
    v26 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_71:
      if (os_signpost_enabled((os_log_t)*v25))
      {
        v42 = *a1;
        LODWORD(v105.__r_.__value_.__l.__data_) = 67109632;
        HIDWORD(v105.__r_.__value_.__r.__words[0]) = v42;
        LOWORD(v105.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v105.__r_.__value_.__r.__words[1] + 2) = v7;
        HIWORD(v105.__r_.__value_.__r.__words[1]) = 1024;
        LODWORD(v105.__r_.__value_.__r.__words[2]) = v8;
        _os_signpost_emit_unreliably_with_name_impl();
      }
LABEL_73:
      v43 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
      if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
      {
        sub_20FCFB524();
        __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6D9C8);
      }
      v44 = *((_QWORD *)a1 + 23);
      if (v44)
      {
        v45 = *a1;
        v46 = *(double *)(*((_QWORD *)a1 + 19) + 8 * v44 - 8);
        v47 = *((_QWORD *)a1 + 6);
        if (v47)
        {
LABEL_76:
          v48 = *((_QWORD *)a1 + 2);
LABEL_79:
          sub_210237040("Feature points filtering (SW): Camera ID: [%02u] Number of features: %u/%u", &v105, v45, v46, *(double *)(v48 + 8 * v47 - 8));
          sub_20EA5C6C8((uint64_t)&v105, qword_254A6D9A8);
LABEL_80:
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v105.__r_.__value_.__l.__data_);
            v49 = (unsigned int *)*((_QWORD *)a1 + 35);
            if (!v49)
              return;
          }
          else
          {
            v49 = (unsigned int *)*((_QWORD *)a1 + 35);
            if (!v49)
              return;
          }
          if (*((_BYTE *)a1 + 4))
          {
            v50 = atomic_load((unsigned __int8 *)&qword_254A60010);
            if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A60010))
            {
              v102 = operator new(0x28uLL);
              v102[1] = 0;
              v102[2] = 0;
              *v102 = &off_24C9C4340;
              *((_BYTE *)v102 + 24) = 0;
              *((_BYTE *)v102 + 32) = 0;
              qword_254A60020 = (uint64_t)(v102 + 3);
              qword_254A60028 = (uint64_t)v102;
              unk_254A60030 = 1000000000;
              __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A60020, &dword_20E81F000);
              __cxa_guard_release(&qword_254A60010);
            }
            v51 = *((unsigned __int8 *)v49 + 20);
            *((_BYTE *)v49 + 20) = 0;
            v52 = (_QWORD *)qword_254A60020;
            v53 = *(unsigned __int8 *)(qword_254A60020 + 8);
            if (v51)
            {
              if (*(_BYTE *)(qword_254A60020 + 8))
                *(_BYTE *)(qword_254A60020 + 8) = 0;
              v54.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            }
            else
            {
              v54.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
              if (v53)
              {
                if (v54.__d_.__rep_ - *v52 < 1000000000)
                {
LABEL_136:
                  v95 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
                  if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
                  {
                    sub_20FCFB524();
                    __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6D9C8);
                  }
                  sub_210237040("Smudge Detector filtering (HW): Camera ID: [%02u] SFeat: %u, Smudginess: %0.2f, PercentageSFeats: %0.2f, State Detector: %u", &v105, *v49, v49[1], *((float *)v49 + 2), *((float *)v49 + 3), v49[4]);
                  sub_20EA5C6C8((uint64_t)&v105, qword_254A6D9A8);
LABEL_153:
                  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v105.__r_.__value_.__l.__data_);
                  return;
                }
                v55 = (std::chrono::steady_clock::time_point *)qword_254A60020;
LABEL_102:
                v55->__d_.__rep_ = v54.__d_.__rep_;
                v62 = sub_210219C18();
                v63 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
                if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
                {
                  __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DDD0);
                }
                if (!atomic_load(&qword_254A5A450))
                  goto LABEL_134;
                v65 = *v49;
                v66 = v49[1];
                *(double *)&v67 = *((float *)v49 + 2);
                v68 = *((float *)v49 + 3);
                v69 = v49[4];
                LODWORD(v105.__r_.__value_.__l.__data_) = 67110144;
                HIDWORD(v105.__r_.__value_.__r.__words[0]) = v65;
                LOWORD(v105.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v105.__r_.__value_.__r.__words[1] + 2) = v66;
                HIWORD(v105.__r_.__value_.__r.__words[1]) = 2048;
                v105.__r_.__value_.__r.__words[2] = v67;
                v106 = 2048;
                *(double *)v107 = v68;
                *(_WORD *)&v107[8] = 1024;
                *(_DWORD *)&v107[10] = v69;
                v70 = (char *)_os_log_send_and_compose_impl();
                v71 = strlen(v70);
                v104[0] = 0;
                pthread_threadid_np(0, v104);
                v72 = v104[0];
                timespec_get((timespec *)v104, 1);
                sub_210219E20(&v105, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v62 + 1), (__int128 *)(v62 + 5), "Smudge Detector filtering (HW): Camera ID: [%02u] SFeat: %u, Smudginess: %0.2f, PercentageSFeats: %0.2f, State Detector: %u", 0x7BuLL, v70, v71, v72, v104);
                std::mutex::lock(&stru_254A5A410);
                v73 = qword_254A5A458;
                for (j = unk_254A5A460; v73 != j; v73 += 40)
                {
                  v75 = *(_QWORD *)(v73 + 32);
                  if (!v75)
                    sub_20E86D37C();
                  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v75 + 48))(v75, &v105);
                }
                std::mutex::unlock(&stru_254A5A410);
                if (v116 < 0)
                {
                  operator delete(__p);
                  if ((v114 & 0x80000000) == 0)
                  {
LABEL_109:
                    if (!v112)
                    {
LABEL_127:
                      if (v109 && v108 < 0)
                        operator delete(*(void **)&v107[6]);
                      if ((v107[5] & 0x80000000) != 0)
                        operator delete((void *)v105.__r_.__value_.__l.__size_);
                      if (v70)
                        free(v70);
LABEL_134:
                      if (os_signpost_enabled((os_log_t)*v62))
                      {
                        v90 = *v49;
                        v91 = v49[1];
                        *(double *)&v92 = *((float *)v49 + 2);
                        v93 = *((float *)v49 + 3);
                        v94 = v49[4];
                        LODWORD(v105.__r_.__value_.__l.__data_) = 67110144;
                        HIDWORD(v105.__r_.__value_.__r.__words[0]) = v90;
                        LOWORD(v105.__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&v105.__r_.__value_.__r.__words[1] + 2) = v91;
                        HIWORD(v105.__r_.__value_.__r.__words[1]) = 2048;
                        v105.__r_.__value_.__r.__words[2] = v92;
                        v106 = 2048;
                        *(double *)v107 = v93;
                        *(_WORD *)&v107[8] = 1024;
                        *(_DWORD *)&v107[10] = v94;
                        _os_signpost_emit_unreliably_with_name_impl();
                      }
                      goto LABEL_136;
                    }
LABEL_125:
                    if (v111 < 0)
                      operator delete(v110);
                    goto LABEL_127;
                  }
                }
                else if ((v114 & 0x80000000) == 0)
                {
                  goto LABEL_109;
                }
                operator delete(v113);
                if (!v112)
                  goto LABEL_127;
                goto LABEL_125;
              }
            }
            v55 = (std::chrono::steady_clock::time_point *)qword_254A60020;
            if (!*(_BYTE *)(qword_254A60020 + 8))
              *(_BYTE *)(qword_254A60020 + 8) = 1;
            goto LABEL_102;
          }
          v56 = atomic_load((unsigned __int8 *)&qword_254A60018);
          if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_254A60018))
          {
            v103 = operator new(0x28uLL);
            v103[1] = 0;
            v103[2] = 0;
            *v103 = &off_24C9C4340;
            *((_BYTE *)v103 + 24) = 0;
            *((_BYTE *)v103 + 32) = 0;
            qword_254A60038 = (uint64_t)(v103 + 3);
            qword_254A60040 = (uint64_t)v103;
            unk_254A60048 = 1000000000;
            __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A60038, &dword_20E81F000);
            __cxa_guard_release(&qword_254A60018);
          }
          v57 = *((unsigned __int8 *)v49 + 20);
          *((_BYTE *)v49 + 20) = 0;
          v58 = (_QWORD *)qword_254A60038;
          v59 = *(unsigned __int8 *)(qword_254A60038 + 8);
          if (v57)
          {
            if (*(_BYTE *)(qword_254A60038 + 8))
              *(_BYTE *)(qword_254A60038 + 8) = 0;
            v60.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          }
          else
          {
            v60.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            if (v59)
            {
              if (v60.__d_.__rep_ - *v58 < 1000000000)
              {
LABEL_151:
                v101 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
                if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
                {
                  sub_20FCFB524();
                  __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6D9C8);
                }
                sub_210237040("Smudge Detector filtering (SW): Camera ID: [%02u] SFeat: %u, Smudginess: /%0.2f, PercentageSFeats: %0.2f, State Detector: %u", &v105, *v49, v49[1], *((float *)v49 + 2), *((float *)v49 + 3), v49[4]);
                sub_20EA5C6C8((uint64_t)&v105, qword_254A6D9A8);
                goto LABEL_153;
              }
              v61 = (std::chrono::steady_clock::time_point *)qword_254A60038;
LABEL_114:
              v61->__d_.__rep_ = v60.__d_.__rep_;
              v76 = sub_210219C18();
              v77 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
              if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
              {
                __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DDD0);
              }
              if (!atomic_load(&qword_254A5A450))
                goto LABEL_149;
              v79 = *v49;
              v80 = v49[1];
              *(double *)&v81 = *((float *)v49 + 2);
              v82 = *((float *)v49 + 3);
              v83 = v49[4];
              LODWORD(v105.__r_.__value_.__l.__data_) = 67110144;
              HIDWORD(v105.__r_.__value_.__r.__words[0]) = v79;
              LOWORD(v105.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v105.__r_.__value_.__r.__words[1] + 2) = v80;
              HIWORD(v105.__r_.__value_.__r.__words[1]) = 2048;
              v105.__r_.__value_.__r.__words[2] = v81;
              v106 = 2048;
              *(double *)v107 = v82;
              *(_WORD *)&v107[8] = 1024;
              *(_DWORD *)&v107[10] = v83;
              v84 = (char *)_os_log_send_and_compose_impl();
              v85 = strlen(v84);
              v104[0] = 0;
              pthread_threadid_np(0, v104);
              v86 = v104[0];
              timespec_get((timespec *)v104, 1);
              sub_210219E20(&v105, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v76 + 1), (__int128 *)(v76 + 5), "Smudge Detector filtering (SW): Camera ID: [%02u] SFeat: %u, Smudginess: /%0.2f, PercentageSFeats: %0.2f, State Detector: %u", 0x7CuLL, v84, v85, v86, v104);
              std::mutex::lock(&stru_254A5A410);
              v87 = qword_254A5A458;
              for (k = unk_254A5A460; v87 != k; v87 += 40)
              {
                v89 = *(_QWORD *)(v87 + 32);
                if (!v89)
                  sub_20E86D37C();
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v89 + 48))(v89, &v105);
              }
              std::mutex::unlock(&stru_254A5A410);
              if (v116 < 0)
              {
                operator delete(__p);
                if ((v114 & 0x80000000) == 0)
                {
LABEL_121:
                  if (!v112)
                  {
LABEL_142:
                    if (v109 && v108 < 0)
                      operator delete(*(void **)&v107[6]);
                    if ((v107[5] & 0x80000000) != 0)
                      operator delete((void *)v105.__r_.__value_.__l.__size_);
                    if (v84)
                      free(v84);
LABEL_149:
                    if (os_signpost_enabled((os_log_t)*v76))
                    {
                      v96 = *v49;
                      v97 = v49[1];
                      *(double *)&v98 = *((float *)v49 + 2);
                      v99 = *((float *)v49 + 3);
                      v100 = v49[4];
                      LODWORD(v105.__r_.__value_.__l.__data_) = 67110144;
                      HIDWORD(v105.__r_.__value_.__r.__words[0]) = v96;
                      LOWORD(v105.__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&v105.__r_.__value_.__r.__words[1] + 2) = v97;
                      HIWORD(v105.__r_.__value_.__r.__words[1]) = 2048;
                      v105.__r_.__value_.__r.__words[2] = v98;
                      v106 = 2048;
                      *(double *)v107 = v99;
                      *(_WORD *)&v107[8] = 1024;
                      *(_DWORD *)&v107[10] = v100;
                      _os_signpost_emit_unreliably_with_name_impl();
                    }
                    goto LABEL_151;
                  }
LABEL_140:
                  if (v111 < 0)
                    operator delete(v110);
                  goto LABEL_142;
                }
              }
              else if ((v114 & 0x80000000) == 0)
              {
                goto LABEL_121;
              }
              operator delete(v113);
              if (!v112)
                goto LABEL_142;
              goto LABEL_140;
            }
          }
          v61 = (std::chrono::steady_clock::time_point *)qword_254A60038;
          if (!*(_BYTE *)(qword_254A60038 + 8))
            *(_BYTE *)(qword_254A60038 + 8) = 1;
          goto LABEL_114;
        }
      }
      else
      {
        v45 = *a1;
        v46 = *(double *)(*((_QWORD *)a1 + 19)
                                      + 8 * ((uint64_t)(*((_QWORD *)a1 + 20) - *((_QWORD *)a1 + 19)) >> 3)
                                      - 8);
        v47 = *((_QWORD *)a1 + 6);
        if (v47)
          goto LABEL_76;
      }
      v48 = *((_QWORD *)a1 + 2);
      v47 = (*((_QWORD *)a1 + 3) - v48) >> 3;
      goto LABEL_79;
    }
    v28 = *a1;
    LODWORD(v105.__r_.__value_.__l.__data_) = 67109632;
    HIDWORD(v105.__r_.__value_.__r.__words[0]) = v28;
    LOWORD(v105.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v105.__r_.__value_.__r.__words[1] + 2) = v7;
    HIWORD(v105.__r_.__value_.__r.__words[1]) = 1024;
    LODWORD(v105.__r_.__value_.__r.__words[2]) = v8;
    v29 = (char *)_os_log_send_and_compose_impl();
    v30 = strlen(v29);
    v104[0] = 0;
    pthread_threadid_np(0, v104);
    v31 = v104[0];
    timespec_get((timespec *)v104, 1);
    sub_210219E20(&v105, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v25 + 1), (__int128 *)(v25 + 5), "Feature points filtering (SW): Camera ID: [%02u] Number of features: %u/%u", 0x4AuLL, v29, v30, v31, v104);
    std::mutex::lock(&stru_254A5A410);
    v32 = qword_254A5A458;
    for (m = unk_254A5A460; v32 != m; v32 += 40)
    {
      v34 = *(_QWORD *)(v32 + 32);
      if (!v34)
        sub_20E86D37C();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v34 + 48))(v34, &v105);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v116 < 0)
    {
      operator delete(__p);
      if ((v114 & 0x80000000) == 0)
      {
LABEL_38:
        if (!v112)
        {
LABEL_64:
          if (v109 && v108 < 0)
            operator delete(*(void **)&v107[6]);
          if ((v107[5] & 0x80000000) != 0)
            operator delete((void *)v105.__r_.__value_.__l.__size_);
          if (v29)
            free(v29);
          goto LABEL_71;
        }
LABEL_62:
        if (v111 < 0)
          operator delete(v110);
        goto LABEL_64;
      }
    }
    else if ((v114 & 0x80000000) == 0)
    {
      goto LABEL_38;
    }
    operator delete(v113);
    if (!v112)
      goto LABEL_64;
    goto LABEL_62;
  }
}

void sub_20EEB02F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

void sub_20EEB030C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60018);
  _Unwind_Resume(a1);
}

void sub_20EEB0324(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

void sub_20EEB033C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

void sub_20EEB0354(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60010);
  _Unwind_Resume(a1);
}

void sub_20EEB036C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

void sub_20EEB0384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;

  if (a52 < 0)
  {
    operator delete(__p);
    if ((a46 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a46 & 0x80000000) == 0)
  {
LABEL_5:
    if (!a40)
      goto LABEL_11;
LABEL_9:
    if (a39 < 0)
      operator delete(a34);
LABEL_11:
    if (a33 && a32 < 0)
      operator delete(a27);
    if (a26 < 0)
      operator delete(a18);
    if (!v52)
      _Unwind_Resume(a1);
    free(v52);
    _Unwind_Resume(a1);
  }
  operator delete(a41);
  if (!a40)
    goto LABEL_11;
  goto LABEL_9;
}

void sub_20EEB04B4(uint64_t a1, _DWORD *a2, unint64_t a3, unint64_t a4)
{
  unsigned int v8;
  unint64_t v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  unint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  double v58;
  _BYTE v59[16];
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *__p;
  void *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;

  v8 = a2[1];
  if (v8 >= 0xA)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = a2[1];
  }
  v9 = v8 + 10 * *a2;
  v10 = *(int8x8_t *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8(v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8 + 10 * *a2;
      if (*(_QWORD *)&v10 <= v9)
        v12 = v9 % *(_QWORD *)&v10;
    }
    else
    {
      v12 = (v10.i32[0] - 1) & v9;
    }
    v13 = *(char ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          v15 = *(_QWORD *)&v10 - 1;
          while (1)
          {
            v17 = *((_QWORD *)v14 + 1);
            if (v17 == v9)
            {
              if (*((_DWORD *)v14 + 4) == (_DWORD)v9)
                goto LABEL_39;
            }
            else if ((v17 & v15) != v12)
            {
              goto LABEL_24;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_24;
          }
        }
        do
        {
          v16 = *((_QWORD *)v14 + 1);
          if (v16 == v9)
          {
            if (*((_DWORD *)v14 + 4) == (_DWORD)v9)
              goto LABEL_39;
          }
          else
          {
            if (v16 >= *(_QWORD *)&v10)
              v16 %= *(_QWORD *)&v10;
            if (v16 != v12)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_24:
  sub_20EEAEFB8((uint64_t)v59, *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 48), *(_BYTE *)(a1 + 52), v9, *(unsigned __int8 *)(a1 + 53));
  v14 = sub_20EEB0DB8(a1, v9, v9, (uint64_t)v59);
  v18 = v69;
  if (v69)
  {
    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v68;
  v68 = 0;
  if (v21)
    MEMORY[0x212BC6398](v21, 0x1000C402C707793);
  if (__p)
  {
    v67 = __p;
    operator delete(__p);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (!*((_QWORD *)v14 + 20))
    goto LABEL_47;
LABEL_39:
  v22 = (double)a3;
  v23 = *((_QWORD *)v14 + 10);
  if (v23)
  {
    v24 = *((double *)v14 + 16);
    v25 = vabdd_f64(v22, v24 / (double)v23);
    if (v23 == 1
      || (v26 = 1.0 / (double)v23 * *((double *)v14 + 17) - 1.0 / (double)v23 * v24 * (1.0 / (double)v23 * v24),
          v26 < 0.0))
    {
      v26 = 0.0;
    }
  }
  else
  {
    v25 = v22 + 1.0;
    v26 = 0.0;
  }
  if (v25 > sqrt(v26) * 3.0)
  {
    LOBYTE(v27) = 1;
  }
  else
  {
LABEL_47:
    v27 = *((_QWORD *)v14 + 37);
    if (v27)
    {
      v28 = (double)a4;
      v29 = *((_QWORD *)v14 + 27);
      if (v29)
      {
        v30 = *((double *)v14 + 33);
        v31 = vabdd_f64(v28, v30 / (double)v29);
        if (v29 == 1
          || (v32 = 1.0 / (double)v29 * *((double *)v14 + 34) - 1.0 / (double)v29 * v30 * (1.0 / (double)v29 * v30),
              v32 < 0.0))
        {
          v32 = 0.0;
        }
      }
      else
      {
        v31 = v28 + 1.0;
        v32 = 0.0;
      }
      LOBYTE(v27) = v31 > sqrt(v32) * 3.0;
    }
  }
  v14[336] = v27;
  v33 = (double)a3;
  v34 = v33 * v33 + *((double *)v14 + 15);
  *((double *)v14 + 14) = *((double *)v14 + 14) + (double)a3;
  *((double *)v14 + 15) = v34;
  ++*((_QWORD *)v14 + 20);
  v35 = *((double *)v14 + 16) + (double)a3;
  v36 = v33 * v33 + *((double *)v14 + 17);
  *((double *)v14 + 16) = v35;
  *((double *)v14 + 17) = v36;
  v37 = *((_QWORD *)v14 + 10);
  v38 = *((_QWORD *)v14 + 5);
  v39 = (*((_QWORD *)v14 + 6) - v38) >> 3;
  if (v37 >= v39)
  {
    v40 = *(double *)(v38 + 8 * *((_QWORD *)v14 + 8));
    *((double *)v14 + 16) = v35 - v40;
    *((double *)v14 + 17) = v36 - v40 * v40;
  }
  v41 = *((_QWORD *)v14 + 9);
  *(double *)(v38 + 8 * v41) = v33;
  v42 = v41 + 1;
  if (v41 + 1 >= v39)
    v43 = v39;
  else
    v43 = 0;
  *((_QWORD *)v14 + 9) = v42 - v43;
  if (v37 == v39)
  {
    v44 = *((_QWORD *)v14 + 8) + 1;
    if (v44 < v37)
      v37 = 0;
    *((_QWORD *)v14 + 8) = v44 - v37;
  }
  else
  {
    *((_QWORD *)v14 + 10) = v37 + 1;
  }
  v45 = *((double *)v14 + 18);
  if (v45 < v33)
    v45 = (double)a3;
  if (*((double *)v14 + 19) <= v33)
    v33 = *((double *)v14 + 19);
  *((double *)v14 + 18) = v45;
  *((double *)v14 + 19) = v33;
  v46 = (double)a4;
  v47 = v46 * v46 + *((double *)v14 + 32);
  *((double *)v14 + 31) = *((double *)v14 + 31) + (double)a4;
  *((double *)v14 + 32) = v47;
  ++*((_QWORD *)v14 + 37);
  v48 = *((double *)v14 + 33) + (double)a4;
  v49 = v46 * v46 + *((double *)v14 + 34);
  *((double *)v14 + 33) = v48;
  *((double *)v14 + 34) = v49;
  v50 = *((_QWORD *)v14 + 27);
  v51 = *((_QWORD *)v14 + 22);
  v52 = (*((_QWORD *)v14 + 23) - v51) >> 3;
  if (v50 >= v52)
  {
    v53 = *(double *)(v51 + 8 * *((_QWORD *)v14 + 25));
    *((double *)v14 + 33) = v48 - v53;
    *((double *)v14 + 34) = v49 - v53 * v53;
  }
  v54 = *((_QWORD *)v14 + 26);
  *(double *)(v51 + 8 * v54) = v46;
  v55 = v54 + 1;
  if (v54 + 1 >= v52)
    v56 = v52;
  else
    v56 = 0;
  *((_QWORD *)v14 + 26) = v55 - v56;
  if (v50 == v52)
  {
    v57 = *((_QWORD *)v14 + 25) + 1;
    if (v57 < v50)
      v50 = 0;
    *((_QWORD *)v14 + 25) = v57 - v50;
  }
  else
  {
    *((_QWORD *)v14 + 27) = v50 + 1;
  }
  v58 = *((double *)v14 + 35);
  if (v58 < v46)
    v58 = (double)a4;
  if (*((double *)v14 + 36) <= v46)
    v46 = *((double *)v14 + 36);
  *((double *)v14 + 35) = v58;
  *((double *)v14 + 36) = v46;
}

void sub_20EEB09E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EE9FBEC(&a9);
  _Unwind_Resume(a1);
}

void sub_20EEB09F4(uint64_t a1, _DWORD *a2, int a3, int a4, float a5, float a6)
{
  unsigned int v12;
  unint64_t v13;
  int8x8_t v14;
  uint8x8_t v15;
  unint64_t v16;
  char **v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *__p;
  void *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v12 = a2[1];
  if (v12 >= 0xA)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v12 = a2[1];
  }
  v13 = v12 + 10 * *a2;
  v14 = *(int8x8_t *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8(v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v16 = v12 + 10 * *a2;
      if (*(_QWORD *)&v14 <= v13)
        v16 = v13 % *(_QWORD *)&v14;
    }
    else
    {
      v16 = (v14.i32[0] - 1) & v13;
    }
    v17 = *(char ***)(*(_QWORD *)a1 + 8 * v16);
    if (v17)
    {
      v18 = *v17;
      if (*v17)
      {
        if (v15.u32[0] < 2uLL)
        {
          v19 = *(_QWORD *)&v14 - 1;
          while (1)
          {
            v21 = *((_QWORD *)v18 + 1);
            if (v21 == v13)
            {
              if (*((_DWORD *)v18 + 4) == (_DWORD)v13)
                goto LABEL_39;
            }
            else if ((v21 & v19) != v16)
            {
              goto LABEL_24;
            }
            v18 = *(char **)v18;
            if (!v18)
              goto LABEL_24;
          }
        }
        do
        {
          v20 = *((_QWORD *)v18 + 1);
          if (v20 == v13)
          {
            if (*((_DWORD *)v18 + 4) == (_DWORD)v13)
              goto LABEL_39;
          }
          else
          {
            if (v20 >= *(_QWORD *)&v14)
              v20 %= *(_QWORD *)&v14;
            if (v20 != v16)
              break;
          }
          v18 = *(char **)v18;
        }
        while (v18);
      }
    }
  }
LABEL_24:
  sub_20EEAEFB8((uint64_t)v27, *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 48), *(_BYTE *)(a1 + 52), v13, *(unsigned __int8 *)(a1 + 53));
  v18 = sub_20EEB0DB8(a1, v13, v13, (uint64_t)v27);
  v22 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  v36 = 0;
  if (v25)
    MEMORY[0x212BC6398](v25, 0x1000C402C707793);
  if (__p)
  {
    v35 = __p;
    operator delete(__p);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
LABEL_39:
  v26 = *((_QWORD *)v18 + 38);
  *(_BYTE *)(v26 + 20) = *(_DWORD *)(v26 + 16) != a4;
  *(_DWORD *)(v26 + 4) = a3;
  *(_DWORD *)(v26 + 16) = a4;
  *(float *)(v26 + 8) = a5;
  *(float *)(v26 + 12) = a6;
}

void sub_20EEB0C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EE9FBEC(&a9);
  _Unwind_Resume(a1);
}

void sub_20EEB0C64(_QWORD *a1, _DWORD *a2)
{
  unsigned int v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = a2[1];
  if (v4 >= 0xA)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = a2[1];
  }
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_25;
  v6 = v4 + 10 * *a2;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (*(_QWORD *)&v5 <= v6)
      v8 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (v5.i32[0] - 1) & v6;
  }
  v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9 || (v10 = *v9) == 0)
LABEL_25:
    sub_20E89FD20("unordered_map::at: key not found");
  if (v7.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == v6)
      {
        if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
          goto LABEL_24;
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_25;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == v6)
      break;
    if (v12 >= *(_QWORD *)&v5)
      v12 %= *(_QWORD *)&v5;
    if (v12 != v8)
      goto LABEL_25;
LABEL_14:
    v10 = (uint64_t *)*v10;
    if (!v10)
      goto LABEL_25;
  }
  if (*((_DWORD *)v10 + 4) != (_DWORD)v6)
    goto LABEL_14;
LABEL_24:
  sub_20EEAF204((unsigned int *)v10 + 6);
}

char *sub_20EEB0DB8(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  char **v11;
  char *result;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  float v20;
  float v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  void *v43;
  unint64_t v44;
  char *v45;

  v8 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & a2;
    }
    v11 = *(char ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      result = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = *((_QWORD *)result + 1);
            if (v14 == a2)
            {
              if (*((_DWORD *)result + 4) == a2)
                return result;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            result = *(char **)result;
            if (!result)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = *((_QWORD *)result + 1);
          if (v13 == a2)
          {
            if (*((_DWORD *)result + 4) == a2)
              return result;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          result = *(char **)result;
        }
        while (result);
      }
    }
  }
LABEL_22:
  v15 = (_QWORD *)(a1 + 16);
  v45 = (char *)operator new(0x158uLL);
  *(_QWORD *)v45 = 0;
  *((_QWORD *)v45 + 1) = v8;
  v45[28] = *(_BYTE *)(a4 + 4);
  *((_QWORD *)v45 + 4) = *(_QWORD *)(a4 + 8);
  *(_OWORD *)(v45 + 40) = *(_OWORD *)(a4 + 16);
  *((_QWORD *)v45 + 7) = *(_QWORD *)(a4 + 32);
  *((_OWORD *)v45 + 4) = *(_OWORD *)(a4 + 40);
  *((_QWORD *)v45 + 10) = *(_QWORD *)(a4 + 56);
  *(_OWORD *)(v45 + 88) = *(_OWORD *)(a4 + 64);
  *((_QWORD *)v45 + 13) = *(_QWORD *)(a4 + 80);
  v16 = *(_OWORD *)(a4 + 104);
  *((_OWORD *)v45 + 7) = *(_OWORD *)(a4 + 88);
  *((_OWORD *)v45 + 8) = v16;
  *((_OWORD *)v45 + 9) = *(_OWORD *)(a4 + 120);
  v17 = *(_QWORD *)(a4 + 144);
  *((_QWORD *)v45 + 20) = *(_QWORD *)(a4 + 136);
  *((_QWORD *)v45 + 21) = v17;
  *((_OWORD *)v45 + 11) = *(_OWORD *)(a4 + 152);
  *((_QWORD *)v45 + 24) = *(_QWORD *)(a4 + 168);
  *(_OWORD *)(v45 + 200) = *(_OWORD *)(a4 + 176);
  *((_QWORD *)v45 + 27) = *(_QWORD *)(a4 + 192);
  *((_OWORD *)v45 + 14) = *(_OWORD *)(a4 + 200);
  *((_QWORD *)v45 + 30) = *(_QWORD *)(a4 + 216);
  v18 = *(_OWORD *)(a4 + 224);
  v19 = *(_OWORD *)(a4 + 240);
  *((_QWORD *)v45 + 37) = *(_QWORD *)(a4 + 272);
  *(_OWORD *)(v45 + 248) = v18;
  *((_QWORD *)v45 + 40) = *(_QWORD *)(a4 + 296);
  *((_DWORD *)v45 + 82) = *(_DWORD *)(a4 + 304);
  v45[336] = *(_BYTE *)(a4 + 312);
  *((_OWORD *)v45 + 19) = *(_OWORD *)(a4 + 280);
  *((_DWORD *)v45 + 4) = a3;
  *((_DWORD *)v45 + 6) = *(_DWORD *)a4;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 32) = 0;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_QWORD *)(a4 + 56) = 0;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_QWORD *)(a4 + 80) = 0;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_QWORD *)(a4 + 168) = 0;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_QWORD *)(a4 + 192) = 0;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_QWORD *)(a4 + 216) = 0;
  *(_OWORD *)(v45 + 280) = *(_OWORD *)(a4 + 256);
  *(_OWORD *)(v45 + 264) = v19;
  *(_OWORD *)(a4 + 280) = 0u;
  *(_QWORD *)(a4 + 296) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v23 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v20 / v21);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (prime > v9)
    {
LABEL_37:
      if (prime >> 61)
        sub_20E877A38();
      v27 = operator new(8 * prime);
      v28 = *(void **)a1;
      *(_QWORD *)a1 = v27;
      if (v28)
        operator delete(v28);
      v29 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
      while (prime != v29);
      v30 = (_QWORD *)*v15;
      if (!*v15)
        goto LABEL_69;
      v31 = v30[1];
      v32 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v33 = v31 & v32;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v15;
        for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
        {
          v35 = i[1] & v32;
          if (v35 == v33)
          {
            v30 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
          {
            *v30 = *i;
            v36 = 8 * v35;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v36);
            **(_QWORD **)(*(_QWORD *)a1 + v36) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v30;
            v30 = i;
            v33 = v35;
          }
        }
        goto LABEL_69;
      }
      if (v31 >= prime)
        v31 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v15;
      v40 = (_QWORD *)*v30;
      if (!*v30)
      {
LABEL_69:
        v9 = prime;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_70;
        goto LABEL_85;
      }
      while (1)
      {
        v42 = v40[1];
        if (v42 >= prime)
          v42 %= prime;
        if (v42 == v31)
          goto LABEL_63;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
        {
          *v30 = *v40;
          v41 = 8 * v42;
          *v40 = **(_QWORD **)(*(_QWORD *)a1 + v41);
          **(_QWORD **)(*(_QWORD *)a1 + v41) = v40;
          v40 = v30;
LABEL_63:
          v30 = v40;
          v40 = (_QWORD *)*v40;
          if (!v40)
            goto LABEL_69;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v30;
          v30 = v40;
          v40 = (_QWORD *)*v40;
          v31 = v42;
          if (!v40)
            goto LABEL_69;
        }
      }
    }
    if (prime < v9)
    {
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < v9)
      {
        if (!prime)
        {
          v43 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v43)
            operator delete(v43);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          goto LABEL_85;
        }
        goto LABEL_37;
      }
      v9 = *(_QWORD *)(a1 + 8);
    }
    if ((v9 & (v9 - 1)) != 0)
    {
LABEL_70:
      if (v9 <= v8)
      {
        v4 = v8 % v9;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        result = v45;
        if (v22)
          goto LABEL_25;
      }
      else
      {
        v4 = v8;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        result = v45;
        if (v22)
          goto LABEL_25;
      }
      goto LABEL_86;
    }
LABEL_85:
    v4 = ((_DWORD)v9 - 1) & v8;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    result = v45;
    if (v22)
      goto LABEL_25;
    goto LABEL_86;
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  result = v45;
  if (v22)
  {
LABEL_25:
    *(_QWORD *)result = *v22;
LABEL_92:
    *v22 = result;
    goto LABEL_93;
  }
LABEL_86:
  *(_QWORD *)result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
  if (*(_QWORD *)result)
  {
    v44 = *(_QWORD *)(*(_QWORD *)result + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v44 >= v9)
        v44 %= v9;
    }
    else
    {
      v44 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_92;
  }
LABEL_93:
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20EEB1388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EEB139C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB139C(uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20EE9FBEC(v2 + 3);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20EEB13E0(uint64_t a1, int a2, uint64_t a3, __int128 *a4, __int128 *a5, __int128 *a6, double a7)
{
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  _BYTE *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 16) = 0;
  v11 = a1 + 16;
  *(_OWORD *)(a1 + 24) = xmmword_2103854C0;
  *(_OWORD *)(a1 + 40) = xmmword_2103854D0;
  *(_QWORD *)(a1 + 56) = 0xBF847AE147AE147BLL;
  *(_BYTE *)(a1 + 64) = 0;
  *(double *)(a1 + 72) = a7;
  v12 = *a5;
  v13 = a5[2];
  *(_OWORD *)(a1 + 96) = a5[1];
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 80) = v12;
  v14 = *a6;
  v15 = a6[1];
  v16 = *(__int128 *)((char *)a6 + 28);
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 156) = v16;
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = v15;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v18 = (_BYTE *)*((_QWORD *)a6 + 6);
  v17 = (_BYTE *)*((_QWORD *)a6 + 7);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      sub_20E867F44();
    v20 = (char *)operator new(v17 - v18);
    *(_QWORD *)(a1 + 176) = v20;
    *(_QWORD *)(a1 + 184) = v20;
    v21 = &v20[4 * (v19 >> 2)];
    *(_QWORD *)(a1 + 192) = v21;
    memcpy(v20, v18, v19);
    *(_QWORD *)(a1 + 184) = v21;
  }
  v22 = *(__int128 *)((char *)a6 + 72);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a6 + 11);
  *(_OWORD *)(a1 + 200) = v22;
  v23 = (_BYTE *)(a1 + 224);
  if (*((char *)a6 + 119) < 0)
  {
    sub_20E860C04(v23, *((void **)a6 + 12), *((_QWORD *)a6 + 13));
  }
  else
  {
    v24 = a6[6];
    *(_QWORD *)(a1 + 240) = *((_QWORD *)a6 + 14);
    *(_OWORD *)v23 = v24;
  }
  *(_BYTE *)(a1 + 248) = *((_BYTE *)a6 + 120);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a3 + 560);
  v25 = *a4;
  v26 = a4[1];
  v27 = a4[2];
  *(_BYTE *)(v11 + 48) = *((_BYTE *)a4 + 48);
  *(_OWORD *)(v11 + 16) = v26;
  *(_OWORD *)(v11 + 32) = v27;
  *(_OWORD *)v11 = v25;
  return a1;
}

void sub_20EEB1540(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 184) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_20EEB1560(unint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  BOOL v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v88;
  uint64_t v89;
  unint64_t v91;
  uint64_t v92;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  int64_t v107;
  uint64_t v108;
  int64_t v109;
  unint64_t *v110;
  int64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  BOOL v127;
  unint64_t v128;
  uint64_t v129;
  BOOL v130;
  unint64_t *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v138;
  uint64_t v140;
  unint64_t *v141;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  BOOL v162;
  unint64_t v163;
  uint64_t v164;
  BOOL v165;
  unint64_t *v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  int v178;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v178 = a5;
LABEL_4:
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v96 = *(a2 - 1);
        v97 = *v11;
        v98 = *(_QWORD *)(*(_QWORD *)a3 + 24);
        v99 = *(_QWORD *)(v98 + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v96);
        v100 = *(_QWORD *)(v98 + ((v97 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v97);
        if ((v99 != 0) != (v100 != 0))
        {
          if (v99)
            v101 = v100 == 0;
          else
            v101 = 0;
          if (!v101)
            return result;
        }
        else if (v96 >= v97)
        {
          return result;
        }
        *v11 = v96;
        *(a2 - 1) = v97;
        return result;
      case 3:
        return (unint64_t)sub_20EEB25AC(v11, v11 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 24));
      case 4:
        return (unint64_t)sub_20EEB2A20(v11, v11 + 1, v11 + 2, a2 - 1, a3);
      case 5:
        return (unint64_t)sub_20EEB23C4(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
      default:
        if (v12 > 191)
        {
          if (!a4)
          {
            if (v11 == a2)
              return result;
            v107 = (unint64_t)(v13 - 2) >> 1;
            v108 = *(_QWORD *)a3;
            v109 = v107;
            while (1)
            {
              v111 = v109;
              if (v107 < v109)
                goto LABEL_186;
              v112 = (2 * v109) | 1;
              v113 = &v11[v112];
              if (2 * v111 + 2 >= v13)
              {
                v115 = *(_QWORD *)(v108 + 24);
                goto LABEL_198;
              }
              v114 = v113[1];
              v115 = *(_QWORD *)(v108 + 24);
              v116 = *(_QWORD *)(v115 + ((*v113 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *v113);
              if ((v116 != 0) == ((*(_QWORD *)(v115 + ((v114 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v114)) != 0))
                break;
              if (v116)
                v117 = (*(_QWORD *)(v115 + ((v114 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v114)) == 0;
              else
                v117 = 0;
              if (v117)
                goto LABEL_197;
LABEL_198:
              v118 = *v113;
              v119 = v11[v111];
              v120 = *(_QWORD *)(v115 + ((*v113 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *v113);
              result = v119 >> 6;
              v121 = 1 << v119;
              if ((v120 != 0) != ((*(_QWORD *)(v115 + 8 * (v119 >> 6)) & (1 << v119)) != 0))
              {
                if (v120)
                  v122 = (*(_QWORD *)(v115 + 8 * (v119 >> 6)) & (1 << v119)) == 0;
                else
                  v122 = 0;
                if (!v122)
                {
LABEL_205:
                  v11[v111] = v118;
                  if (v107 < v112)
                  {
LABEL_184:
                    v110 = v113;
LABEL_185:
                    *v110 = v119;
                    v108 = *(_QWORD *)a3;
                    goto LABEL_186;
                  }
                  while (2)
                  {
                    v123 = 2 * v112;
                    v112 = (2 * v112) | 1;
                    v110 = &v11[v112];
                    v124 = v123 + 2;
                    if (v124 < v13)
                    {
                      v125 = v110[1];
                      v126 = *(_QWORD *)(v115 + ((*v110 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *v110);
                      if ((v126 != 0) != ((*(_QWORD *)(v115 + ((v125 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v125)) != 0))
                      {
                        if (v126)
                          v127 = (*(_QWORD *)(v115 + ((v125 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v125)) == 0;
                        else
                          v127 = 0;
                        if (!v127)
                          goto LABEL_218;
LABEL_217:
                        ++v110;
                        v112 = v124;
                      }
                      else if (*v110 < v125)
                      {
                        goto LABEL_217;
                      }
                    }
LABEL_218:
                    v128 = *v110;
                    v129 = (1 << *v110) & *(_QWORD *)(v115 + ((*v110 >> 3) & 0x1FFFFFFFFFFFFFF8));
                    if ((v129 != 0) != ((*(_QWORD *)(v115 + 8 * result) & v121) != 0))
                    {
                      if (v129)
                        v130 = (*(_QWORD *)(v115 + 8 * result) & v121) == 0;
                      else
                        v130 = 0;
                      if (v130)
                        goto LABEL_184;
                    }
                    else if (v128 < v119)
                    {
                      goto LABEL_184;
                    }
                    *v113 = v128;
                    v113 = v110;
                    if (v107 < v112)
                      goto LABEL_185;
                    continue;
                  }
                }
              }
              else if (v118 >= v119)
              {
                goto LABEL_205;
              }
LABEL_186:
              v109 = v111 - 1;
              if (!v111)
              {
                v140 = (unint64_t)v12 >> 3;
                while (1)
                {
                  v143 = 0;
                  v144 = *v11;
                  v145 = *(_QWORD *)a3;
                  v141 = v11;
                  do
                  {
                    v146 = v141;
                    v141 += v143 + 1;
                    v147 = 2 * v143;
                    v143 = (2 * v143) | 1;
                    v148 = v147 + 2;
                    if (v148 < v140)
                    {
                      result = *v141;
                      v149 = v141[1];
                      v150 = *(_QWORD *)(v145 + 24);
                      v151 = *(_QWORD *)(v150 + ((*v141 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *v141);
                      v152 = *(_QWORD *)(v150 + ((v149 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v149);
                      if ((v151 != 0) != (v152 != 0))
                      {
                        if (v151)
                          v153 = v152 == 0;
                        else
                          v153 = 0;
                        if (v153)
                        {
LABEL_252:
                          ++v141;
                          v143 = v148;
                        }
                      }
                      else if (result < v149)
                      {
                        goto LABEL_252;
                      }
                    }
                    *v146 = *v141;
                  }
                  while (v143 <= (uint64_t)((unint64_t)(v140 - 2) >> 1));
                  if (v141 == --a2)
                    goto LABEL_249;
                  *v141 = *a2;
                  *a2 = v144;
                  v154 = (char *)v141 - (char *)v11 + 8;
                  if (v154 < 9)
                    goto LABEL_250;
                  v155 = ((unint64_t)v154 >> 3) - 2;
                  v156 = v155 >> 1;
                  v157 = &v11[v155 >> 1];
                  result = *v157;
                  v144 = *v141;
                  v158 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                  v159 = *(_QWORD *)(v158 + ((*v157 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *v157);
                  v160 = *v141 >> 6;
                  v161 = 1 << *v141;
                  if ((v159 != 0) == ((*(_QWORD *)(v158 + 8 * (v144 >> 6)) & (1 << v144)) != 0))
                  {
                    if (result >= v144)
                      goto LABEL_250;
LABEL_273:
                    *v141 = result;
                    if (v155 >= 2)
                    {
                      while (1)
                      {
                        v163 = v156 - 1;
                        v156 = (v156 - 1) >> 1;
                        v141 = &v11[v156];
                        result = *v141;
                        v164 = (1 << *v141) & *(_QWORD *)(v158 + ((*v141 >> 3) & 0x1FFFFFFFFFFFFFF8));
                        if ((v164 != 0) != ((*(_QWORD *)(v158 + 8 * v160) & v161) != 0))
                        {
                          if (v164)
                            v165 = (*(_QWORD *)(v158 + 8 * v160) & v161) == 0;
                          else
                            v165 = 0;
                          if (!v165)
                            break;
                        }
                        else if (result >= v144)
                        {
                          break;
                        }
                        *v157 = result;
                        v157 = &v11[v156];
                        if (v163 <= 1)
                          goto LABEL_249;
                      }
                    }
                    v141 = v157;
LABEL_249:
                    *v141 = v144;
                    goto LABEL_250;
                  }
                  if (v159)
                    v162 = (*(_QWORD *)(v158 + 8 * (v144 >> 6)) & (1 << v144)) == 0;
                  else
                    v162 = 0;
                  if (v162)
                    goto LABEL_273;
LABEL_250:
                  if (v140-- <= 2)
                    return result;
                }
              }
            }
            if (*v113 >= v114)
              goto LABEL_198;
LABEL_197:
            ++v113;
            v112 = 2 * v111 + 2;
            goto LABEL_198;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[(unint64_t)v13 >> 1];
          v16 = *(_QWORD *)(*(_QWORD *)a3 + 24);
          if ((unint64_t)v12 >= 0x401)
          {
            sub_20EEB25AC(v9, v15, a2 - 1, v16);
            v17 = &v9[v14];
            sub_20EEB25AC(v9 + 1, v17 - 1, a2 - 2, *(_QWORD *)(*(_QWORD *)a3 + 24));
            sub_20EEB25AC(v9 + 2, &v9[v14 + 1], a2 - 3, *(_QWORD *)(*(_QWORD *)a3 + 24));
            result = (unint64_t)sub_20EEB25AC(v17 - 1, v15, &v9[v14 + 1], *(_QWORD *)(*(_QWORD *)a3 + 24));
            v18 = *v9;
            *v9 = *v17;
            *v17 = v18;
            a5 = v178;
            --a4;
            v19 = *(_QWORD *)a3;
            v20 = *v9;
            if ((v178 & 1) != 0)
              goto LABEL_16;
LABEL_9:
            v21 = *(v9 - 1);
            v22 = *(_QWORD *)(v19 + 24);
            v23 = *(_QWORD *)(v22 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v21);
            v24 = v20 >> 6;
            v25 = (_QWORD *)(v22 + 8 * (v20 >> 6));
            v26 = 1 << v20;
            v27 = *v25 & (1 << v20);
            if ((v23 != 0) != (v27 != 0))
            {
              if (v23)
                v28 = v27 == 0;
              else
                v28 = 0;
              if (v28)
                goto LABEL_34;
            }
            else if (v21 < v20)
            {
              goto LABEL_18;
            }
            v66 = *v10;
            v67 = (1 << *v10) & *(_QWORD *)(v22 + ((*v10 >> 3) & 0x1FFFFFFFFFFFFFF8));
            if ((v27 != 0) != (v67 != 0))
            {
              if (v27)
                v68 = v67 == 0;
              else
                v68 = 0;
              v11 = v9;
              if (v68)
              {
                do
                {
LABEL_98:
                  v69 = v11[1];
                  ++v11;
                  v70 = (1 << v69) & *(_QWORD *)(v22 + ((v69 >> 3) & 0x1FFFFFFFFFFFFFF8));
                }
                while (v20 >= v69 && v70 != 0);
                goto LABEL_124;
              }
LABEL_104:
              v11 = v9 + 1;
              if (v9 + 1 < a2)
              {
                if (v27)
                {
                  do
                  {
                    if (v20 < *v11 || ((1 << *v11) & *(_QWORD *)(v22 + ((*v11 >> 3) & 0x1FFFFFFFFFFFFFF8))) == 0)
                      break;
                    ++v11;
                  }
                  while (v11 < a2);
                }
                else
                {
                  do
                  {
                    if (v20 < *v11 && ((1 << *v11) & *(_QWORD *)(v22 + ((*v11 >> 3) & 0x1FFFFFFFFFFFFFF8))) == 0)
                      break;
                    ++v11;
                  }
                  while (v11 < a2);
                }
              }
              goto LABEL_124;
            }
            if (v20 >= v66)
              goto LABEL_104;
            v11 = v9;
            if (v27)
              goto LABEL_98;
            v11 = v9;
            do
            {
              v74 = v11[1];
              ++v11;
              v75 = (1 << v74) & *(_QWORD *)(v22 + ((v74 >> 3) & 0x1FFFFFFFFFFFFFF8));
            }
            while (v20 >= v74 || v75 != 0);
LABEL_124:
            v77 = a2;
            if (v11 < a2)
            {
              v77 = a2 - 1;
              if (v27)
              {
                if (v20 < v66 || (v77 = a2 - 1, !v67))
                {
                  do
                  {
                    v78 = *--v77;
                    v79 = (1 << v78) & *(_QWORD *)(v22 + ((v78 >> 3) & 0x1FFFFFFFFFFFFFF8));
                  }
                  while (v20 < v78 || v79 == 0);
                }
              }
              else if (!v67)
              {
                v77 = a2 - 1;
                do
                {
                  if (v20 >= v66)
                    break;
                  v81 = *--v77;
                  v66 = v81;
                }
                while (((*(_QWORD *)(v22 + ((v81 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v81) & 1) == 0);
              }
            }
            if (v11 < v77)
            {
              v82 = *v11;
              v83 = *v77;
              do
              {
                *v11 = v83;
                *v77 = v82;
                v84 = *v25 & v26;
                if (v84)
                {
                  do
                  {
                    v85 = v11[1];
                    ++v11;
                    v82 = v85;
                    v86 = (1 << v85) & *(_QWORD *)(v22 + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8));
                  }
                  while (v20 >= v85 && v86 != 0);
                }
                else
                {
                  do
                  {
                    v88 = v11[1];
                    ++v11;
                    v82 = v88;
                    v89 = (1 << v88) & *(_QWORD *)(v22 + ((v88 >> 3) & 0x1FFFFFFFFFFFFFF8));
                  }
                  while (v20 >= v88 || v89 != 0);
                }
                if (v84)
                {
                  do
                  {
                    v91 = *--v77;
                    v83 = v91;
                    v92 = (1 << v91) & *(_QWORD *)(v22 + ((v91 >> 3) & 0x1FFFFFFFFFFFFFF8));
                  }
                  while (v20 < v91 || v92 == 0);
                }
                else
                {
                  do
                  {
                    v94 = *--v77;
                    v83 = v94;
                  }
                  while (((*(_QWORD *)(v22 + ((v94 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v94) & 1) == 0 && v20 < v83);
                }
              }
              while (v11 < v77);
            }
            v95 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v95;
            a5 = 0;
            *v95 = v20;
            continue;
          }
          result = (unint64_t)sub_20EEB25AC(v15, v9, a2 - 1, v16);
          --a4;
          v19 = *(_QWORD *)a3;
          v20 = *v9;
          if ((a5 & 1) == 0)
            goto LABEL_9;
LABEL_16:
          v22 = *(_QWORD *)(v19 + 24);
          v24 = v20 >> 6;
          v26 = 1 << v20;
          v27 = *(_QWORD *)(v22 + 8 * (v20 >> 6)) & (1 << v20);
LABEL_18:
          v25 = (_QWORD *)(v22 + 8 * v24);
          if (v27)
          {
            v30 = (unint64_t)(v9 + 1);
            v29 = v9[1];
            if (((*(_QWORD *)(v22 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29) & 1) == 0 || v29 >= v20)
              goto LABEL_46;
            v31 = 0;
            do
            {
              v29 = v9[v31 + 2];
              ++v31;
            }
            while (v29 < v20 && ((1 << v29) & *(_QWORD *)(v22 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8))) != 0);
            v30 = (unint64_t)&v9[v31 + 1];
            if (v31 * 8)
            {
              v33 = a2;
              do
              {
                v34 = *--v33;
                v35 = (1 << v34) & *(_QWORD *)(v22 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8));
              }
              while (v34 >= v20 || v35 == 0);
            }
            else
            {
LABEL_46:
              if (v30 >= (unint64_t)a2)
                goto LABEL_60;
              v42 = a2 - 1;
              v43 = a2 - 1;
              do
              {
                v45 = *v43--;
                v44 = v45;
                v46 = v45 < v20;
                if (v30 >= (unint64_t)v42)
                  break;
                v42 = v43;
              }
              while ((v46 & (*(_QWORD *)(v22 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44) & 1) == 0);
              v33 = v43 + 1;
            }
          }
          else
          {
LABEL_34:
            v37 = 0;
            do
              v29 = v9[++v37];
            while (v29 < v20 || ((1 << v29) & *(_QWORD *)(v22 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8))) != 0);
            v30 = (unint64_t)&v9[v37];
            v33 = a2;
            if (v37 != 1)
            {
              do
              {
                v39 = *--v33;
                v40 = (1 << v39) & *(_QWORD *)(v22 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8));
              }
              while (v39 >= v20 && v40 == 0);
              goto LABEL_58;
            }
            v47 = a2 - 1;
            if (v30 >= (unint64_t)a2)
            {
LABEL_60:
              v33 = a2;
              v11 = (unint64_t *)v30;
              if (v30 >= (unint64_t)a2)
                goto LABEL_84;
LABEL_61:
              v50 = *v33;
              v11 = (unint64_t *)v30;
              v51 = v33;
              while (2)
              {
                *v11 = v50;
                *v51 = v29;
                v52 = *v25 & v26;
                if (v52)
                {
                  v53 = v11[1];
                  ++v11;
                  v29 = v53;
                  if (((*(_QWORD *)(v22 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v53) & 1) != 0)
                  {
                    do
                    {
                      if (v29 >= v20)
                        break;
                      v54 = v11[1];
                      ++v11;
                      v29 = v54;
                    }
                    while (((*(_QWORD *)(v22 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v54) & 1) != 0);
                    goto LABEL_73;
                  }
                  goto LABEL_74;
                }
                do
                {
                  v55 = v11[1];
                  ++v11;
                  v29 = v55;
                  v56 = (1 << v55) & *(_QWORD *)(v22 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8));
                }
                while (v55 < v20 || v56 != 0);
LABEL_73:
                if (v52)
                {
                  do
                  {
LABEL_74:
                    v58 = *--v51;
                    v50 = v58;
                    v59 = (1 << v58) & *(_QWORD *)(v22 + ((v58 >> 3) & 0x1FFFFFFFFFFFFFF8));
                  }
                  while (v58 >= v20 || v59 == 0);
                }
                else
                {
                  do
                  {
                    v61 = *--v51;
                    v50 = v61;
                    v62 = (1 << v61) & *(_QWORD *)(v22 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8));
                  }
                  while (v61 >= v20 && v62 == 0);
                }
                if (v11 >= v51)
                  goto LABEL_84;
                continue;
              }
            }
            do
            {
              v33 = v47;
              v48 = *v47;
              if (((*(_QWORD *)(v22 + ((*v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v47) & 1) != 0)
                break;
              --v47;
            }
            while (v48 >= v20 && v30 < (unint64_t)v33);
          }
LABEL_58:
          v11 = (unint64_t *)v30;
          if (v30 < (unint64_t)v33)
            goto LABEL_61;
LABEL_84:
          v64 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v64;
          *v64 = v20;
          if (v30 < (unint64_t)v33)
            goto LABEL_89;
          v65 = sub_20EEB2760(v9, v11 - 1, a3);
          result = sub_20EEB2760(v11, a2, a3);
          if (!(_DWORD)result)
          {
            if (v65)
              goto LABEL_4;
LABEL_89:
            result = sub_20EEB1560(v9, v11 - 1, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = v11 - 1;
          if (v65)
            return result;
          goto LABEL_2;
        }
        v102 = *(_QWORD *)a3;
        if ((a5 & 1) != 0)
        {
          if (v11 == a2)
            return result;
          v103 = v11 + 1;
          if (v11 + 1 == a2)
            return result;
          v104 = 0;
          v105 = *(_QWORD *)(v102 + 24);
          v106 = v11;
LABEL_228:
          v132 = v106;
          v106 = v103;
          v134 = *v132;
          v133 = v132[1];
          v135 = v133 >> 6;
          v136 = 1 << v133;
          result = *(_QWORD *)(v105 + ((v134 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v134);
          if (((*(_QWORD *)(v105 + 8 * (v133 >> 6)) & (1 << v133)) != 0) != (result != 0))
          {
            if ((*(_QWORD *)(v105 + 8 * (v133 >> 6)) & (1 << v133)) == 0 || result != 0)
              goto LABEL_227;
          }
          else if (v133 >= v134)
          {
            goto LABEL_227;
          }
          v132[1] = v134;
          v131 = v11;
          if (v132 == v11)
            goto LABEL_226;
          v138 = v104;
          while (1)
          {
            result = *(unint64_t *)((char *)v11 + v138 - 8);
            if (((*(_QWORD *)(v105 + 8 * v135) & v136) != 0) != ((*(_QWORD *)(v105
                                                                             + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << result)) != 0))
            {
              if ((*(_QWORD *)(v105 + 8 * v135) & v136) == 0
                || (*(_QWORD *)(v105 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << result)) != 0)
              {
                v131 = (unint64_t *)((char *)v11 + v138);
                goto LABEL_226;
              }
            }
            else if (v133 >= result)
            {
              v131 = v132;
LABEL_226:
              *v131 = v133;
LABEL_227:
              v103 = v106 + 1;
              v104 += 8;
              if (v106 + 1 == a2)
                return result;
              goto LABEL_228;
            }
            --v132;
            *(unint64_t *)((char *)v11 + v138) = result;
            v138 -= 8;
            if (!v138)
            {
              v131 = v11;
              goto LABEL_226;
            }
          }
        }
        if (v11 != a2)
        {
          v166 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v167 = *(_QWORD *)(v102 + 24);
            do
            {
              v168 = v9;
              v9 = v166;
              v170 = *v168;
              v169 = v168[1];
              v171 = v169 >> 6;
              v172 = 1 << v169;
              result = (*(_QWORD *)(v167 + ((v170 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v170)) != 0;
              if (((*(_QWORD *)(v167 + 8 * (v169 >> 6)) & (1 << v169)) != 0) != ((*(_QWORD *)(v167
                                                                                               + ((v170 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v170)) != 0))
              {
                if ((*(_QWORD *)(v167 + 8 * (v169 >> 6)) & (1 << v169)) != 0
                  && (*(_QWORD *)(v167 + ((v170 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v170)) == 0)
                {
                  do
                  {
LABEL_299:
                    while (1)
                    {
                      v174 = v168;
                      v175 = v170;
                      v176 = *--v168;
                      v170 = v176;
                      v168[2] = v175;
                      result = ((*(_QWORD *)(v167 + 8 * v171) & v172) != 0) ^ ((*(_QWORD *)(v167 + ((v170 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v170)) != 0);
                      if (((*(_QWORD *)(v167 + 8 * v171) & v172) != 0) != ((*(_QWORD *)(v167
                                                                                       + ((v170 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v170)) != 0))
                        break;
                      if (v169 >= v170)
                        goto LABEL_288;
                    }
                  }
                  while ((*(_QWORD *)(v167 + 8 * v171) & v172) != 0
                       && (*(_QWORD *)(v167 + ((v170 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v170)) == 0);
LABEL_288:
                  *v174 = v169;
                }
              }
              else if (v169 < v170)
              {
                goto LABEL_299;
              }
              v166 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

unint64_t *sub_20EEB23C4(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t *result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  result = sub_20EEB2A20(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = *(_QWORD *)(*(_QWORD *)a6 + 24);
  v16 = *(_QWORD *)(v15 + ((*a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *a5);
  v17 = *(_QWORD *)(v15 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v14);
  if ((v16 != 0) == (v17 != 0))
  {
    if (v13 >= v14)
      return result;
LABEL_8:
    *a4 = v13;
    *a5 = v14;
    v19 = *a4;
    v20 = *a3;
    v21 = *(_QWORD *)(v15 + ((*a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *a4);
    v22 = *(_QWORD *)(v15 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v20);
    if ((v21 != 0) != (v22 != 0))
    {
      if (v21)
        v23 = v22 == 0;
      else
        v23 = 0;
      if (!v23)
        return result;
    }
    else if (v19 >= v20)
    {
      return result;
    }
    *a3 = v19;
    *a4 = v20;
    v24 = *a3;
    v25 = *a2;
    v26 = *(_QWORD *)(v15 + ((*a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *a3);
    v27 = *(_QWORD *)(v15 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v25);
    if ((v26 != 0) != (v27 != 0))
    {
      if (!v26 || v27)
        return result;
    }
    else if (v24 >= v25)
    {
      return result;
    }
    *a2 = v24;
    *a3 = v25;
    v28 = *a2;
    v29 = *a1;
    v30 = *(_QWORD *)(v15 + ((*a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *a2);
    v31 = *(_QWORD *)(v15 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v29);
    if ((v30 != 0) != (v31 != 0))
    {
      if (!v30 || v31)
        return result;
    }
    else if (v28 >= v29)
    {
      return result;
    }
    *a1 = v28;
    *a2 = v29;
    return result;
  }
  if (v16)
    v18 = v17 == 0;
  else
    v18 = 0;
  if (v18)
    goto LABEL_8;
  return result;
}

unint64_t *sub_20EEB25AC(unint64_t *result, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(a4 + ((*a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *a2);
  v7 = 1 << *result;
  if ((v6 != 0) == ((*(_QWORD *)(a4 + 8 * (v5 >> 6)) & (1 << v5)) != 0))
  {
    if (v4 >= v5)
      goto LABEL_15;
LABEL_7:
    v9 = *a3;
    v10 = (1 << *a3) & *(_QWORD *)(a4 + ((*a3 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if ((v6 != 0) != (v10 != 0))
    {
      if (v10)
        v11 = v6 == 0;
      else
        v11 = 0;
      if (!v11)
      {
LABEL_22:
        *result = v4;
        *a2 = v5;
        v15 = *a3;
        v16 = (1 << *a3) & *(_QWORD *)(a4 + ((*a3 >> 3) & 0x1FFFFFFFFFFFFFF8));
        v17 = *(_QWORD *)(a4 + 8 * (v5 >> 6)) & v7;
        if ((v16 != 0) != (v17 != 0))
        {
          if (!v16 || v17)
            return result;
        }
        else if (v15 >= v5)
        {
          return result;
        }
        *a2 = v15;
        *a3 = v5;
        return result;
      }
    }
    else if (v9 >= v4)
    {
      goto LABEL_22;
    }
    *result = v9;
    *a3 = v5;
    return result;
  }
  if (v6)
    v8 = (*(_QWORD *)(a4 + 8 * (v5 >> 6)) & (1 << v5)) == 0;
  else
    v8 = 0;
  if (v8)
    goto LABEL_7;
LABEL_15:
  v12 = *a3;
  v13 = (1 << *a3) & *(_QWORD *)(a4 + ((*a3 >> 3) & 0x1FFFFFFFFFFFFFF8));
  if ((v6 != 0) == (v13 != 0))
  {
    if (v12 >= v4)
      return result;
LABEL_27:
    *a2 = v12;
    *a3 = v4;
    v18 = *a2;
    v19 = *result;
    v20 = *(_QWORD *)(a4 + ((*a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *a2);
    v21 = *(_QWORD *)(a4 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v19);
    if ((v20 != 0) != (v21 != 0))
    {
      if (!v20 || v21)
        return result;
    }
    else if (v18 >= v19)
    {
      return result;
    }
    *result = v18;
    *a2 = v19;
    return result;
  }
  if (v13)
    v14 = v6 == 0;
  else
    v14 = 0;
  if (v14)
    goto LABEL_27;
  return result;
}

BOOL sub_20EEB2760(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v22 = *(a2 - 1);
      v23 = *a1;
      v24 = *(_QWORD *)(*(_QWORD *)a3 + 24);
      v25 = *(_QWORD *)(v24 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v22);
      v26 = *(_QWORD *)(v24 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v23);
      if ((v25 != 0) != (v26 != 0))
      {
        if (v25)
          v27 = v26 == 0;
        else
          v27 = 0;
        if (!v27)
          return result;
      }
      else if (v22 >= v23)
      {
        return result;
      }
      *a1 = v22;
      *(a2 - 1) = v23;
      return result;
    case 3:
      sub_20EEB25AC(a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 24));
      return 1;
    case 4:
      sub_20EEB2A20(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20EEB23C4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_20EEB25AC(a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 24));
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      v12 = *(_QWORD *)(*(_QWORD *)a3 + 24);
      while (2)
      {
        v14 = *v9;
        v15 = *v8;
        v16 = *v9 >> 6;
        v17 = 1 << *v9;
        if (((*(_QWORD *)(v12 + 8 * v16) & v17) != 0) != ((*(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v15)) != 0))
        {
          if ((*(_QWORD *)(v12 + 8 * v16) & v17) == 0
            || (*(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v15)) != 0)
          {
            goto LABEL_7;
          }
        }
        else if (v14 >= v15)
        {
          goto LABEL_7;
        }
        *v9 = v15;
        v13 = a1;
        if (v8 == a1)
          goto LABEL_6;
        v19 = v10;
        while (2)
        {
          v20 = *(unint64_t *)((char *)a1 + v19 + 8);
          if (((*(_QWORD *)(v12 + 8 * v16) & v17) != 0) != ((*(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v20)) != 0))
          {
            if ((*(_QWORD *)(v12 + 8 * v16) & v17) == 0
              || (*(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v20)) != 0)
            {
              v13 = v8;
              goto LABEL_6;
            }
            goto LABEL_19;
          }
          if (v14 < v20)
          {
LABEL_19:
            --v8;
            *(unint64_t *)((char *)a1 + v19 + 16) = v20;
            v19 -= 8;
            if (v19 == -16)
            {
              v13 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        v13 = (unint64_t *)((char *)a1 + v19 + 16);
LABEL_6:
        *v13 = v14;
        if (++v11 == 8)
          return v9 + 1 == a2;
LABEL_7:
        v8 = v9;
        v10 += 8;
        if (++v9 != a2)
          continue;
        return 1;
      }
  }
}

unint64_t *sub_20EEB2A20(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = sub_20EEB25AC(a1, a2, a3, *(_QWORD *)(*(_QWORD *)a5 + 24));
  v11 = *a4;
  v12 = *a3;
  v13 = *(_QWORD *)(*(_QWORD *)a5 + 24);
  v14 = *(_QWORD *)(v13 + ((*a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *a4);
  v15 = *(_QWORD *)(v13 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v12);
  if ((v14 != 0) == (v15 != 0))
  {
    if (v11 >= v12)
      return result;
LABEL_8:
    *a3 = v11;
    *a4 = v12;
    v17 = *a3;
    v18 = *a2;
    v19 = *(_QWORD *)(v13 + ((*a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *a3);
    v20 = *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v18);
    if ((v19 != 0) != (v20 != 0))
    {
      if (v19)
        v21 = v20 == 0;
      else
        v21 = 0;
      if (!v21)
        return result;
    }
    else if (v17 >= v18)
    {
      return result;
    }
    *a2 = v17;
    *a3 = v18;
    v22 = *a2;
    v23 = *a1;
    v24 = *(_QWORD *)(v13 + ((*a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << *a2);
    v25 = *(_QWORD *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v23);
    if ((v24 != 0) != (v25 != 0))
    {
      if (!v24 || v25)
        return result;
    }
    else if (v22 >= v23)
    {
      return result;
    }
    *a1 = v22;
    *a2 = v23;
    return result;
  }
  if (v14)
    v16 = v15 == 0;
  else
    v16 = 0;
  if (v16)
    goto LABEL_8;
  return result;
}

void sub_20EEB2BA8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_20EEB2C28(a1 + 8, a2);
}

_QWORD *sub_20EEB2BB0(_QWORD *a1)
{
  *a1 = off_24C9EF8C0;
  sub_20EEB2EA0((uint64_t)(a1 + 1));
  return a1;
}

void sub_20EEB2BE0(_QWORD *a1)
{
  *a1 = off_24C9EF8C0;
  sub_20EEB2EA0((uint64_t)(a1 + 1));
  JUMPOUT(0x212BC6398);
}

void sub_20EEB2C28(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;

  v5 = *(_QWORD *)(a1 + 112);
  v4 = *(std::__shared_weak_count **)(a1 + 120);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::mutex::lock((std::mutex *)(a1 + 48));
  v8 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 8) != v8)
  {
    v9 = *(_QWORD *)(v8 - 8);
    *(_QWORD *)(v8 - 8) = 0;
    sub_20EE89664(a1 + 8, (_QWORD *)(*(_QWORD *)(a1 + 16) - 8));
    std::mutex::unlock((std::mutex *)(a1 + 48));
    if (!v4)
      goto LABEL_11;
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(a1 + 32);
  if (v10 >= *(_QWORD *)(a1 + 40))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_QWORD *)(a1 + 32) = v10 + 1;
  v9 = operator new();
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_BYTE *)(v9 + 48) = 1;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 114) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_BYTE *)(v9 + 184) = 0;
  std::mutex::unlock((std::mutex *)(a1 + 48));
  if (v4)
  {
LABEL_9:
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
LABEL_11:
  *a2 = v9;
  v13 = (_QWORD *)operator new();
  *v13 = &off_24C9EF8F8;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v9;
  v13[4] = v5;
  v13[5] = v4;
  a2[1] = (uint64_t)v13;
  if (v4)
  {
    v14 = (unint64_t *)&v4->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20EEB2E18()
{
  __break(1u);
}

void sub_20EEB2E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  __cxa_end_catch();
  sub_20E86665C((uint64_t)va);
  sub_20EEB2F3C((uint64_t *)va1);
  sub_20E86665C((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EEB2E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB2EA0(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;

  v2 = *(std::mutex **)(a1 + 112);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 112));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v6 = *(_QWORD **)(a1 + 8);
  if (v6)
  {
    sub_20EE89664(a1 + 8, v6);
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

_QWORD *sub_20EEB2F3C(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[20];
    if (v3)
    {
      v2[21] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[13];
    if (v4)
    {
      v2[14] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[10];
    if (v5)
    {
      v2[11] = v5;
      operator delete(v5);
    }
    v6 = (void *)v2[7];
    if (v6)
    {
      v2[8] = v6;
      operator delete(v6);
    }
    MEMORY[0x212BC6398](v2, 0x1020C4069399AA6);
  }
  return a1;
}

void sub_20EEB2FC0(std::mutex *a1, _QWORD *a2)
{
  uint64_t sig;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  std::mutex::lock(a1);
  sig = a1[1].__m_.__sig;
  if (sig)
  {
    std::mutex::lock((std::mutex *)(sig + 48));
    v6 = *(char **)(sig + 16);
    v5 = *(_QWORD *)(sig + 24);
    if ((unint64_t)v6 < v5)
    {
      *(_QWORD *)v6 = a2;
      v7 = (uint64_t)(v6 + 8);
LABEL_50:
      *(_QWORD *)(sig + 16) = v7;
      std::mutex::unlock((std::mutex *)(sig + 48));
      std::mutex::unlock(a1);
      return;
    }
    v12 = *(char **)(sig + 8);
    v13 = (v6 - v12) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      sub_20E867F44();
    v15 = v5 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        sub_20E877A38();
      v17 = (char *)operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *(_QWORD *)v18 = a2;
      v7 = (uint64_t)(v18 + 8);
      v20 = (char *)(v6 - v12);
      if (v6 != v12)
        goto LABEL_23;
    }
    else
    {
      v17 = 0;
      v18 = (char *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = a2;
      v7 = 8 * v13 + 8;
      v20 = (char *)(v6 - v12);
      if (v6 != v12)
      {
LABEL_23:
        v21 = (unint64_t)(v20 - 8);
        if (v21 < 0x78)
          goto LABEL_56;
        if (&v6[-(v21 & 0xFFFFFFFFFFFFFFF8) - 8] < v18 && &v17[v6 - v12 - (v21 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_56;
        v23 = (v21 >> 3) + 1;
        v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        v18 -= v24;
        v25 = &v6[-v24];
        v26 = v6 - 16;
        v27 = &v17[8 * v13 - 16];
        v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *((_OWORD *)v26 - 1);
          v29 = *(_OWORD *)v26;
          *((_OWORD *)v26 - 1) = 0uLL;
          *(_OWORD *)v26 = 0uLL;
          *((_OWORD *)v27 - 1) = v30;
          *(_OWORD *)v27 = v29;
          v26 -= 32;
          v27 -= 32;
          v28 -= 4;
        }
        while (v28);
        v6 = v25;
        if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_56:
          do
          {
            v31 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v18 - 1) = v31;
            v18 -= 8;
          }
          while (v6 != v12);
        }
        v6 = *(char **)(sig + 8);
        v32 = *(char **)(sig + 16);
        *(_QWORD *)(sig + 8) = v18;
        *(_QWORD *)(sig + 16) = v7;
        *(_QWORD *)(sig + 24) = v19;
        while (v32 != v6)
        {
          v34 = (_QWORD *)*((_QWORD *)v32 - 1);
          v32 -= 8;
          v33 = v34;
          *(_QWORD *)v32 = 0;
          if (v34)
          {
            v35 = (void *)v33[20];
            if (v35)
            {
              v33[21] = v35;
              operator delete(v35);
            }
            v36 = (void *)v33[13];
            if (v36)
            {
              v33[14] = v36;
              operator delete(v36);
            }
            v37 = (void *)v33[10];
            if (v37)
            {
              v33[11] = v37;
              operator delete(v37);
            }
            v38 = (void *)v33[7];
            if (v38)
            {
              v33[8] = v38;
              operator delete(v38);
            }
            MEMORY[0x212BC6398](v33, 0x1020C4069399AA6);
          }
        }
        goto LABEL_48;
      }
    }
    *(_QWORD *)(sig + 8) = v18;
    *(_QWORD *)(sig + 16) = v7;
    *(_QWORD *)(sig + 24) = v19;
LABEL_48:
    if (v6)
      operator delete(v6);
    goto LABEL_50;
  }
  std::mutex::unlock(a1);
  if (a2)
  {
    v8 = (void *)a2[20];
    if (v8)
    {
      a2[21] = v8;
      operator delete(v8);
    }
    v9 = (void *)a2[13];
    if (v9)
    {
      a2[14] = v9;
      operator delete(v9);
    }
    v10 = (void *)a2[10];
    if (v10)
    {
      a2[11] = v10;
      operator delete(v10);
    }
    v11 = (void *)a2[7];
    if (v11)
    {
      a2[8] = v11;
      operator delete(v11);
    }
    JUMPOUT(0x212BC6398);
  }
}

void sub_20EEB3294(_Unwind_Exception *a1)
{
  std::mutex *v1;
  _QWORD *v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (!v2)
  {
LABEL_8:
    std::mutex::unlock(v1);
    _Unwind_Resume(a1);
  }
  v4 = (void *)v2[20];
  if (v4)
  {
    v2[21] = v4;
    operator delete(v4);
    v5 = (void *)v2[13];
    if (!v5)
    {
LABEL_4:
      v6 = (void *)v2[10];
      if (!v6)
        goto LABEL_5;
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (void *)v2[13];
    if (!v5)
      goto LABEL_4;
  }
  v2[14] = v5;
  operator delete(v5);
  v6 = (void *)v2[10];
  if (!v6)
  {
LABEL_5:
    v7 = (void *)v2[7];
    if (!v7)
    {
LABEL_7:
      MEMORY[0x212BC6398](v2, 0x1020C4069399AA6);
      goto LABEL_8;
    }
LABEL_6:
    v2[8] = v7;
    operator delete(v7);
    goto LABEL_7;
  }
LABEL_11:
  v2[11] = v6;
  operator delete(v6);
  v7 = (void *)v2[7];
  if (!v7)
    goto LABEL_7;
  goto LABEL_6;
}

void sub_20EEB3330(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EF8F8;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20EEB33A4(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EF8F8;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB341C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_20EEB2FC0(*(std::mutex **)(a1 + 32), *(_QWORD **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_20EEB3484(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS_3vio17feature_detection20PointDescriptorStoreENS1_18AutoReturningM"
                     "akeTIS5_NS1_21PoolObjectInitializerIS5_EENS1_23PoolObjectDeinitializerIS5_EEEENSt3__110shared_ptrIS"
                     "5_EENS1_29ThreadSafeObjectBorrowingPoolINSC_10unique_ptrIS5_NSC_14default_deleteIS5_EEEESB_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS_3vio17feature_detection20PointDescriptorStoreENS1_18Aut"
                                "oReturningMakeTIS5_NS1_21PoolObjectInitializerIS5_EENS1_23PoolObjectDeinitializerIS5_EEE"
                                "ENSt3__110shared_ptrIS5_EENS1_29ThreadSafeObjectBorrowingPoolINSC_10unique_ptrIS5_NSC_14"
                                "default_deleteIS5_EEEESB_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS_3vio17feature_detection20PointDescriptorStoreENS1_18AutoReturningMakeTIS5_NS1_21PoolObjectInitializerIS5_EENS1_23PoolObjectDeinitializerIS5_EEEENSt3__110shared_ptrIS5_EENS1_29ThreadSafeObjectBorrowingPoolINSC_10unique_ptrIS5_NSC_14default_deleteIS5_EEEESB_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS_3vio17feature_detection20PointDescriptorStoreENS1_18AutoReturningMakeTIS5_NS1_21PoolObjectInitializerIS5_EENS1_23PoolObjectDeinitializerIS5_EEEENSt3__110shared_ptrIS5_EENS1_29ThreadSafeObjectBorrowingPoolINSC_10unique_ptrIS5_NSC_14default_deleteIS5_EEEESB_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

uint64_t sub_20EEB34F4(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4, double a5)
{
  double v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double v10;

  v5 = a5;
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = &off_24C9EF958;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 24) = v8;
  v9 = (_QWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 32) = 0;
  *(double *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_QWORD *)(a1 + 8))
  {
    v10 = 1.0;
    if (a5 >= 1.0)
      goto LABEL_8;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/LineDetector.cpp", 39, (uint64_t)"detector_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_13;
    }
    a5 = *(double *)(a1 + 40);
    v10 = 1.0;
    if (a5 >= 1.0)
      goto LABEL_8;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/LineDetector.cpp", 40, (uint64_t)"result_upsampling_ratio_ >= 1.0", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_13;
  }
  a5 = *(double *)(a1 + 40);
LABEL_8:
  if ((a5 == v10) != (*v9 == 0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/LineDetector.cpp", 42, (uint64_t)"(frame_downsampler_ != nullptr) != ExactlyEqual(result_upsampling_ratio_, 1.0)", 78, (uint64_t)"Downsampler needs to be provided, unless scaling ratio is exactly 1.0.", 70, (void (*)(void **))sub_21023DDB0)|| *(_BYTE *)(a1 + 16)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/LineDetector.cpp", 44, (uint64_t)"!use_lens_model_during_detection_", 33, (uint64_t)"Currently not supported", 23, (void (*)(void **))sub_21023DDB0))
  {
LABEL_13:
    abort();
  }
  *(double *)(a1 + 48) = (v5 + -1.0) * 0.5;
  return a1;
}

void sub_20EEB3698(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;

  sub_20EE8A8E0(v2);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB36C4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

void sub_20EEB36CC(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  float64x2_t **v23;
  float64x2_t **v24;
  float64x2_t *v25;
  float64x2_t *v26;
  const double *v27;
  float64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v37[11];
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  void *__p;
  void *v43;
  _QWORD v44[12];
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  void *v47;
  void *v48;

  v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0;
  v7 = v6 + 3;
  *v6 = &off_24C9EDDC0;
  v6[4] = 0;
  v6[5] = 0;
  *a3 = v6 + 3;
  a3[1] = v6;
  if (*(_BYTE *)(a1 + 32))
  {
    v8 = v6;
    if (!a2[10]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetectionNodeGroup/src/LineDetector.cpp", 58, (uint64_t)"src_frame.image.data", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = *(uint64_t **)(a1 + 24);
    if (v9)
    {
      sub_20F41C808(v9, (uint64_t)a2, (uint64_t)v37);
      v10 = *(_QWORD *)(a1 + 8);
      sub_20EDB9988((uint64_t)v44, v37);
      (*(void (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)v10 + 16))(v10, v44, 0, v7);
      v44[0] = &off_24C9AFD78;
      if (v47)
      {
        v48 = v47;
        operator delete(v47);
      }
      v11 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = v45;
      if (v45)
      {
        v15 = (unint64_t *)&v45->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = v40;
      if (v40)
      {
        v18 = (unint64_t *)&v40->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = v38;
      if (v38)
      {
        v21 = (unint64_t *)&v38->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (float64x2_t **)v8[3];
      v24 = (float64x2_t **)v8[4];
      while (v23 != v24)
      {
        v25 = *v23;
        v26 = v23[1];
        if (*v23 != v26)
        {
          do
          {
            v27 = (const double *)(a1 + 48);
            v28 = vld1q_dup_f64(v27);
            v29 = v25[1];
            *v25 = vaddq_f64(v28, vmulq_n_f64(*v25, *(double *)(a1 + 40)));
            v25[1] = vaddq_f64((float64x2_t)vdupq_lane_s64(*(_QWORD *)(a1 + 48), 0), vmulq_n_f64(v29, *(double *)(a1 + 40)));
            v25 = (float64x2_t *)((char *)v25 + 376);
          }
          while (v25 != v26);
        }
        v23 += 3;
      }
    }
    else
    {
      v30 = *(_QWORD *)(a1 + 8);
      sub_20EDB9988((uint64_t)v37, a2);
      (*(void (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)v30 + 16))(v30, v37, 0, v7);
      v37[0] = &off_24C9AFD78;
      if (__p)
      {
        v43 = __p;
        operator delete(__p);
      }
      v31 = v41;
      if (v41)
      {
        v32 = (unint64_t *)&v41->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = v39;
      if (v39)
      {
        v35 = (unint64_t *)&v39->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
  }
}

void sub_20EEB39EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E8E481C(&a9);
  sub_20E86665C(v9);
  _Unwind_Resume(a1);
}

void sub_20EEB3A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EEB3A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  sub_20E8E481C((_QWORD *)(v10 - 192));
  sub_20E8E5AE4((uint64_t)&a9);
  sub_20E86665C(v9);
  _Unwind_Resume(a1);
}

void sub_20EEB3A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EEB3A5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EEB3A70(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24C9EF958;
  v2 = (uint64_t *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x212BC6398](v2, 0xA0C40AFF93C70);
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_20EEB3AF0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24C9EF958;
  v2 = (uint64_t *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x212BC6398](v2, 0xA0C40AFF93C70);
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB3B80(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  unint64_t *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  std::__shared_weak_count *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t *v98;
  std::__shared_weak_count *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t *v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count *v144;
  char *v145;
  std::__shared_weak_count *v146;
  char *v147;
  std::__shared_weak_count *v148;
  _BYTE v149[7];
  _BYTE v150[72];
  __int128 v151;
  uint64_t (**v152)();
  _BYTE v153[24];
  uint64_t (**v154)();
  __int128 v155;
  uint64_t (**v156)();
  __int128 v157;
  _QWORD v158[4];
  _QWORD v159[7];
  __int128 v160;
  __int128 v161;
  uint64_t (**v162)();
  _BYTE v163[24];
  uint64_t (**v164)();
  __int128 v165;
  uint64_t (**v166)();
  __int128 v167;
  _QWORD v168[4];
  _QWORD v169[7];
  __int128 v170;
  __int128 v171;
  uint64_t (**v172)();
  _BYTE v173[24];
  uint64_t (**v174)();
  __int128 v175;
  uint64_t (**v176)();
  __int128 v177;
  _QWORD v178[2];
  _QWORD v179[2];
  _QWORD v180[2];
  _QWORD v181[5];

  v181[2] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x70uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C9F0350;
  v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v150[32] = *(_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)&v150[32];
  *(_OWORD *)&v150[48] = v7;
  *(_QWORD *)&v150[64] = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)&v150[64];
  v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v150 = *(_OWORD *)a1;
  v10 = *(_OWORD *)v150;
  *(_OWORD *)&v150[16] = v9;
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 72) = v7;
  *((_QWORD *)v4 + 11) = v8;
  *(_OWORD *)(v4 + 24) = v10;
  v11 = operator new();
  v12 = *(_OWORD *)&v150[24];
  *(_OWORD *)v11 = *(_OWORD *)&v150[8];
  *(_OWORD *)(v11 + 16) = v12;
  v13 = *(_OWORD *)&v150[56];
  *(_OWORD *)(v11 + 32) = *(_OWORD *)&v150[40];
  *(_OWORD *)(v11 + 48) = v13;
  *(_WORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_BYTE *)(v11 + 80) = 0;
  *(_BYTE *)(v11 + 88) = 0;
  *((_QWORD *)v4 + 12) = v11;
  v4[104] = v4[24] == 2;
  v144 = (std::__shared_weak_count *)v4;
  v14 = operator new();
  v142 = v14;
  v15 = (char *)operator new(0x19uLL);
  strcpy(v15, "LineTrackingEnablerNode");
  do
    v16 = __ldxr(v5);
  while (__stxr(v16 + 1, v5));
  v147 = v4 + 24;
  v148 = (std::__shared_weak_count *)v4;
  do
    v17 = __ldxr(v5);
  while (__stxr(v17 + 1, v5));
  v140 = a2;
  v145 = v4 + 24;
  v146 = (std::__shared_weak_count *)v4;
  do
    v18 = __ldxr(v5);
  while (__stxr(v18 + 1, v5));
  *(_QWORD *)v14 = &off_24C9EF9B0;
  *(_QWORD *)(v14 + 8) = v15;
  *(_OWORD *)(v14 + 16) = xmmword_2102DAFD0;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_QWORD *)(v14 + 64) = 0;
  v19 = (std::__shared_weak_count *)operator new(0x58uLL);
  v19->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  v21 = &v19[1].__vftable;
  MEMORY[0x212BC5E10](&v19[1]);
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  do
    v23 = __ldxr(v5);
  while (__stxr(v23 + 1, v5));
  v143 = v19;
  v141 = (std::__shared_weak_count *)v4;
  v24 = operator new();
  *(_BYTE *)(v24 + 8) = 1;
  *(_QWORD *)(v24 + 48) = 0;
  *(_QWORD *)(v24 + 32) = 0;
  *(_QWORD *)(v24 + 40) = 0;
  *(_QWORD *)v24 = &off_24C9EFB18;
  *(_QWORD *)(v24 + 16) = &unk_24C9EFB90;
  *(_QWORD *)(v24 + 24) = &unk_24C9EFBD0;
  *(_QWORD *)(v24 + 56) = 0;
  *(_QWORD *)(v24 + 64) = 0;
  *(_QWORD *)(v24 + 72) = v21;
  *(_QWORD *)(v24 + 80) = v19;
  v25 = (_QWORD *)operator new();
  *v25 = &off_24C9EFCC8;
  v25[1] = v4 + 24;
  v25[2] = v4;
  *(_QWORD *)(v24 + 88) = v25;
  *(_QWORD *)(v24 + 96) = v24 + 96;
  *(_QWORD *)(v24 + 104) = v24 + 96;
  *(_QWORD *)(v24 + 112) = 0;
  *(_QWORD *)(v24 + 120) = v24 + 120;
  *(_QWORD *)(v24 + 128) = v24 + 120;
  *(_QWORD *)(v24 + 136) = 0;
  v26 = (std::__shared_weak_count *)operator new();
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EFD18;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)v24;
  v28 = *(std::__shared_weak_count **)(v24 + 40);
  if (v28)
  {
    if (v28->__shared_owners_ != -1)
      goto LABEL_23;
    do
      v29 = __ldxr(v27);
    while (__stxr(v29 + 1, v27));
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    *(_QWORD *)(v24 + 32) = v24;
    *(_QWORD *)(v24 + 40) = v26;
    std::__shared_weak_count::__release_weak(v28);
  }
  else
  {
    do
      v32 = __ldxr(v27);
    while (__stxr(v32 + 1, v27));
    v33 = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    *(_QWORD *)(v24 + 32) = v24;
    *(_QWORD *)(v24 + 40) = v26;
  }
  do
    v35 = __ldaxr(v27);
  while (__stlxr(v35 - 1, v27));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_23:
  *(_QWORD *)v150 = &off_24C9EF9E0;
  strcpy(&v150[8], "channel");
  *(_QWORD *)&v150[16] = v169[0];
  *(_QWORD *)&v150[23] = *(_QWORD *)((char *)v169 + 7);
  v150[31] = 7;
  v169[0] = 0;
  *(_QWORD *)((char *)v169 + 7) = 0;
  *(_QWORD *)&v150[32] = 0x7974706D45;
  *(_QWORD *)&v150[40] = v159[0];
  *(_QWORD *)&v150[47] = *(_QWORD *)((char *)v159 + 7);
  v150[55] = 5;
  v159[0] = 0;
  *(_QWORD *)((char *)v159 + 7) = 0;
  *(_QWORD *)&v150[56] = 0;
  *(_QWORD *)&v150[64] = 0;
  v36 = (unint64_t *)&v26->__shared_weak_owners_;
  *(_QWORD *)&v151 = v24;
  *((_QWORD *)&v151 + 1) = v26;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  v152 = &off_24C9C8F20;
  v38 = (_QWORD *)operator new();
  *v38 = &off_24C9EFD68;
  v38[1] = v24;
  v38[2] = v26;
  *(_QWORD *)v153 = v38;
  v39 = v151;
  if (*((_QWORD *)&v151 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 16);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    *(_OWORD *)&v153[8] = v151;
    if ((_QWORD)v151)
      v42 = v151 + 16;
    else
      v42 = 0;
    v43 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 16);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    v45 = *((_QWORD *)&v151 + 1);
    v39 = v151;
    v154 = &off_24C9EFA10;
    *(_QWORD *)&v155 = v42;
    *((_QWORD *)&v155 + 1) = *((_QWORD *)&v151 + 1);
    v46 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 16);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  else
  {
    *(_QWORD *)&v153[8] = v151;
    *(_QWORD *)&v153[16] = 0;
    if ((_QWORD)v151)
      v48 = v151 + 16;
    else
      v48 = 0;
    v45 = 0;
    v154 = &off_24C9EFA10;
    v155 = v48;
  }
  v49 = v39 + 24;
  if (!v39)
    v49 = 0;
  v156 = &off_24C9B2310;
  *(_QWORD *)&v157 = v49;
  *((_QWORD *)&v157 + 1) = v45;
  LODWORD(v168[3]) = *(_DWORD *)v149;
  *(_DWORD *)((char *)&v168[3] + 3) = *(_DWORD *)&v149[3];
  do
    v50 = __ldxr(p_shared_owners);
  while (__stxr(v50 + 1, p_shared_owners));
  v180[0] = v168[2];
  *(_QWORD *)((char *)v180 + 7) = *(_QWORD *)((char *)&v168[2] + 7);
  memset(&v168[2], 0, 15);
  v179[0] = v168[0];
  *(_QWORD *)((char *)v179 + 7) = *(_QWORD *)((char *)v168 + 7);
  v168[0] = 0;
  *(_QWORD *)((char *)v168 + 7) = 0;
  if (v148)
  {
    v51 = (unint64_t *)&v148->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v159[0] = v180[0];
  *(_QWORD *)((char *)v159 + 7) = *(_QWORD *)((char *)v180 + 7);
  v181[0] = v179[0];
  *(_QWORD *)((char *)v181 + 7) = *(_QWORD *)((char *)v179 + 7);
  v179[0] = 0;
  *(_QWORD *)((char *)v179 + 7) = 0;
  v180[0] = 0;
  *(_QWORD *)((char *)v180 + 7) = 0;
  v53 = operator new();
  *(_BYTE *)(v53 + 8) = 1;
  *(_QWORD *)(v53 + 48) = 0;
  *(_QWORD *)(v53 + 32) = 0;
  *(_QWORD *)(v53 + 40) = 0;
  *(_QWORD *)v53 = &off_24C9EFDE0;
  *(_QWORD *)(v53 + 16) = &unk_24C9EFE58;
  *(_QWORD *)(v53 + 24) = &unk_24C9EFE98;
  *(_QWORD *)(v53 + 56) = 0;
  *(_QWORD *)(v53 + 64) = 0;
  *(_QWORD *)(v53 + 72) = v21;
  *(_QWORD *)(v53 + 80) = v19;
  v54 = (_QWORD *)operator new();
  *v54 = &off_24C9EFF80;
  v54[1] = v147;
  v54[2] = v148;
  *(_QWORD *)(v53 + 88) = v54;
  *(_QWORD *)(v53 + 96) = v53 + 96;
  *(_QWORD *)(v53 + 104) = v53 + 96;
  *(_QWORD *)(v53 + 112) = 0;
  *(_QWORD *)(v53 + 120) = v53 + 120;
  *(_QWORD *)(v53 + 128) = v53 + 120;
  *(_QWORD *)(v53 + 136) = 0;
  v55 = (std::__shared_weak_count *)operator new();
  v55->__shared_owners_ = 0;
  v56 = (unint64_t *)&v55->__shared_owners_;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EFFD0;
  v55->__shared_weak_owners_ = 0;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
  v57 = *(std::__shared_weak_count **)(v53 + 40);
  if (v57)
  {
    if (v57->__shared_owners_ != -1)
      goto LABEL_60;
    do
      v58 = __ldxr(v56);
    while (__stxr(v58 + 1, v56));
    v59 = (unint64_t *)&v55->__shared_weak_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    *(_QWORD *)(v53 + 32) = v53;
    *(_QWORD *)(v53 + 40) = v55;
    std::__shared_weak_count::__release_weak(v57);
  }
  else
  {
    do
      v61 = __ldxr(v56);
    while (__stxr(v61 + 1, v56));
    v62 = (unint64_t *)&v55->__shared_weak_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
    *(_QWORD *)(v53 + 32) = v53;
    *(_QWORD *)(v53 + 40) = v55;
  }
  do
    v64 = __ldaxr(v56);
  while (__stlxr(v64 - 1, v56));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
LABEL_60:
  v169[0] = &off_24C9EFA48;
  strcpy((char *)&v169[1], "channel");
  v169[2] = v159[0];
  *(_QWORD *)((char *)&v169[2] + 7) = *(_QWORD *)((char *)v159 + 7);
  HIBYTE(v169[3]) = 7;
  v159[0] = 0;
  *(_QWORD *)((char *)v159 + 7) = 0;
  v169[4] = 0x7974706D45;
  v169[5] = v181[0];
  *(_QWORD *)((char *)&v169[5] + 7) = *(_QWORD *)((char *)v181 + 7);
  HIBYTE(v169[6]) = 5;
  v181[0] = 0;
  *(_QWORD *)((char *)v181 + 7) = 0;
  v170 = 0uLL;
  v65 = (unint64_t *)&v55->__shared_weak_owners_;
  *(_QWORD *)&v171 = v53;
  *((_QWORD *)&v171 + 1) = v55;
  do
    v66 = __ldxr(v65);
  while (__stxr(v66 + 1, v65));
  v172 = &off_24C9EFA78;
  v67 = (_QWORD *)operator new();
  *v67 = &off_24C9F0020;
  v67[1] = v53;
  v67[2] = v55;
  *(_QWORD *)v173 = v67;
  v68 = v171;
  if (*((_QWORD *)&v171 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 16);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    *(_OWORD *)&v173[8] = v171;
    if ((_QWORD)v171)
      v71 = v171 + 16;
    else
      v71 = 0;
    v72 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 16);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    v74 = *((_QWORD *)&v171 + 1);
    v68 = v171;
    v174 = &off_24C9B2520;
    *(_QWORD *)&v175 = v71;
    *((_QWORD *)&v175 + 1) = *((_QWORD *)&v171 + 1);
    v75 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 16);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  else
  {
    *(_QWORD *)&v173[8] = v171;
    *(_QWORD *)&v173[16] = 0;
    if ((_QWORD)v171)
      v77 = v171 + 16;
    else
      v77 = 0;
    v74 = 0;
    v174 = &off_24C9B2520;
    v175 = v77;
  }
  if (v68)
    v78 = v68 + 24;
  else
    v78 = 0;
  v176 = &off_24C9B2310;
  *(_QWORD *)&v177 = v78;
  *((_QWORD *)&v177 + 1) = v74;
  if (!v147
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 526, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  LODWORD(v158[3]) = *(_DWORD *)v149;
  *(_DWORD *)((char *)&v158[3] + 3) = *(_DWORD *)&v149[3];
  do
    v79 = __ldxr(p_shared_owners);
  while (__stxr(v79 + 1, p_shared_owners));
  v179[0] = v158[2];
  *(_QWORD *)((char *)v179 + 7) = *(_QWORD *)((char *)&v158[2] + 7);
  memset(&v158[2], 0, 15);
  v178[0] = v158[0];
  *(_QWORD *)((char *)v178 + 7) = *(_QWORD *)((char *)v158 + 7);
  v158[0] = 0;
  *(_QWORD *)((char *)v158 + 7) = 0;
  if (v146)
  {
    v80 = (unint64_t *)&v146->__shared_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v181[0] = v179[0];
  *(_QWORD *)((char *)v181 + 7) = *(_QWORD *)((char *)v179 + 7);
  v180[0] = v178[0];
  *(_QWORD *)((char *)v180 + 7) = *(_QWORD *)((char *)v178 + 7);
  v178[0] = 0;
  *(_QWORD *)((char *)v178 + 7) = 0;
  v179[0] = 0;
  *(_QWORD *)((char *)v179 + 7) = 0;
  v82 = operator new();
  *(_BYTE *)(v82 + 8) = 1;
  *(_QWORD *)(v82 + 48) = 0;
  *(_QWORD *)(v82 + 32) = 0;
  *(_QWORD *)(v82 + 40) = 0;
  *(_QWORD *)v82 = &off_24C9F0098;
  *(_QWORD *)(v82 + 16) = &unk_24C9F0110;
  *(_QWORD *)(v82 + 24) = &unk_24C9F0150;
  *(_QWORD *)(v82 + 56) = 0;
  *(_QWORD *)(v82 + 64) = 0;
  *(_QWORD *)(v82 + 72) = v21;
  *(_QWORD *)(v82 + 80) = v143;
  v83 = (_QWORD *)operator new();
  *v83 = &off_24C9F0238;
  v83[1] = v145;
  v83[2] = v146;
  *(_QWORD *)(v82 + 88) = v83;
  *(_QWORD *)(v82 + 96) = v82 + 96;
  *(_QWORD *)(v82 + 104) = v82 + 96;
  *(_QWORD *)(v82 + 112) = 0;
  *(_QWORD *)(v82 + 120) = v82 + 120;
  *(_QWORD *)(v82 + 128) = v82 + 120;
  *(_QWORD *)(v82 + 136) = 0;
  v84 = (std::__shared_weak_count *)operator new();
  v84->__shared_owners_ = 0;
  v85 = (unint64_t *)&v84->__shared_owners_;
  v84->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F0288;
  v84->__shared_weak_owners_ = 0;
  v84[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  v86 = *(std::__shared_weak_count **)(v82 + 40);
  if (v86)
  {
    if (v86->__shared_owners_ != -1)
      goto LABEL_100;
    do
      v87 = __ldxr(v85);
    while (__stxr(v87 + 1, v85));
    v88 = (unint64_t *)&v84->__shared_weak_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
    *(_QWORD *)(v82 + 32) = v82;
    *(_QWORD *)(v82 + 40) = v84;
    std::__shared_weak_count::__release_weak(v86);
  }
  else
  {
    do
      v90 = __ldxr(v85);
    while (__stxr(v90 + 1, v85));
    v91 = (unint64_t *)&v84->__shared_weak_owners_;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
    *(_QWORD *)(v82 + 32) = v82;
    *(_QWORD *)(v82 + 40) = v84;
  }
  do
    v93 = __ldaxr(v85);
  while (__stlxr(v93 - 1, v85));
  if (!v93)
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
LABEL_100:
  v159[0] = &off_24C9EFAB0;
  strcpy((char *)&v159[1], "channel");
  v159[2] = v181[0];
  *(_QWORD *)((char *)&v159[2] + 7) = *(_QWORD *)((char *)v181 + 7);
  HIBYTE(v159[3]) = 7;
  v181[0] = 0;
  *(_QWORD *)((char *)v181 + 7) = 0;
  v159[4] = 0x7974706D45;
  v159[5] = v180[0];
  *(_QWORD *)((char *)&v159[5] + 7) = *(_QWORD *)((char *)v180 + 7);
  HIBYTE(v159[6]) = 5;
  v180[0] = 0;
  *(_QWORD *)((char *)v180 + 7) = 0;
  v160 = 0uLL;
  v94 = (unint64_t *)&v84->__shared_weak_owners_;
  *(_QWORD *)&v161 = v82;
  *((_QWORD *)&v161 + 1) = v84;
  do
    v95 = __ldxr(v94);
  while (__stxr(v95 + 1, v94));
  v162 = &off_24C9EFAE0;
  v96 = (_QWORD *)operator new();
  *v96 = &off_24C9F02D8;
  v96[1] = v82;
  v96[2] = v84;
  *(_QWORD *)v163 = v96;
  v97 = v161;
  if (*((_QWORD *)&v161 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 16);
    v99 = v143;
    do
      v100 = __ldxr(v98);
    while (__stxr(v100 + 1, v98));
    *(_OWORD *)&v163[8] = v161;
    if ((_QWORD)v161)
      v101 = v161 + 16;
    else
      v101 = 0;
    v102 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 16);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
    v104 = *((_QWORD *)&v161 + 1);
    v97 = v161;
    v164 = &off_24C9B2520;
    *(_QWORD *)&v165 = v101;
    *((_QWORD *)&v165 + 1) = *((_QWORD *)&v161 + 1);
    v105 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 16);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  else
  {
    *(_QWORD *)&v163[8] = v161;
    *(_QWORD *)&v163[16] = 0;
    if ((_QWORD)v161)
      v107 = v161 + 16;
    else
      v107 = 0;
    v99 = v143;
    v104 = 0;
    v164 = &off_24C9B2520;
    v165 = v107;
  }
  if (v97)
    v108 = v97 + 24;
  else
    v108 = 0;
  v166 = &off_24C9B2310;
  *(_QWORD *)&v167 = v108;
  *((_QWORD *)&v167 + 1) = v104;
  if (!v145
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 526, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v109 = operator new();
  *(_QWORD *)v109 = &off_24C9EF9E0;
  *(_QWORD *)(v109 + 24) = *(_QWORD *)&v150[24];
  v110 = *(_OWORD *)&v150[8];
  memset(&v150[8], 0, 24);
  *(_QWORD *)(v109 + 48) = *(_QWORD *)&v150[48];
  v111 = *(_OWORD *)&v150[32];
  memset(&v150[32], 0, 40);
  v112 = *(_OWORD *)&v150[56];
  v113 = v151;
  v151 = 0uLL;
  *(_QWORD *)(v109 + 88) = &off_24C9C8F20;
  v114 = *(_OWORD *)v153;
  v115 = *(_QWORD *)&v153[16];
  *(_QWORD *)&v153[8] = 0;
  *(_QWORD *)&v153[16] = 0;
  *(_QWORD *)(v109 + 112) = v115;
  *(_QWORD *)(v109 + 120) = &off_24C9EFA10;
  v116 = v155;
  v117 = v157;
  v157 = 0uLL;
  *(_QWORD *)(v109 + 168) = &off_24C9EFA48;
  *(_QWORD *)(v109 + 192) = v169[3];
  v118 = *(_OWORD *)&v169[1];
  memset(&v169[1], 0, 24);
  *(_QWORD *)(v109 + 216) = v169[6];
  v119 = *(_OWORD *)&v169[4];
  memset(&v169[4], 0, 24);
  v120 = v170;
  v170 = 0uLL;
  v121 = v171;
  v171 = 0uLL;
  *(_QWORD *)(v109 + 256) = &off_24C9EFA78;
  v122 = *(_OWORD *)v173;
  v123 = *(_QWORD *)&v173[16];
  *(_QWORD *)&v173[8] = 0;
  *(_QWORD *)&v173[16] = 0;
  v124 = v175;
  v125 = v177;
  v177 = 0uLL;
  *(_QWORD *)(v109 + 336) = &off_24C9EFAB0;
  *(_QWORD *)(v109 + 360) = v159[3];
  *(_OWORD *)(v109 + 344) = *(_OWORD *)&v159[1];
  memset(&v159[1], 0, 24);
  *(_QWORD *)(v109 + 384) = v159[6];
  v126 = *(_OWORD *)&v159[4];
  memset(&v159[4], 0, 24);
  v127 = v160;
  v160 = 0uLL;
  v128 = v161;
  v161 = 0uLL;
  *(_QWORD *)(v109 + 424) = &off_24C9EFAE0;
  v129 = *(_QWORD *)&v163[16];
  v130 = v167;
  *(_OWORD *)(v109 + 264) = v122;
  *(_OWORD *)(v109 + 296) = v124;
  *(_OWORD *)(v109 + 392) = v127;
  *(_OWORD *)(v109 + 408) = v128;
  *(_OWORD *)(v109 + 488) = v130;
  v131 = *(_OWORD *)v163;
  *(_QWORD *)&v163[8] = 0;
  *(_QWORD *)&v163[16] = 0;
  *(_QWORD *)(v109 + 280) = v123;
  *(_QWORD *)(v109 + 288) = &off_24C9B2520;
  *(_QWORD *)(v109 + 448) = v129;
  *(_QWORD *)(v109 + 456) = &off_24C9B2520;
  *(_QWORD *)(v109 + 144) = &off_24C9B2310;
  *(_QWORD *)(v109 + 312) = &off_24C9B2310;
  *(_QWORD *)(v109 + 480) = &off_24C9B2310;
  v167 = 0uLL;
  *(_OWORD *)(v109 + 8) = v110;
  *(_OWORD *)(v109 + 32) = v111;
  *(_OWORD *)(v109 + 56) = v112;
  *(_OWORD *)(v109 + 72) = v113;
  *(_OWORD *)(v109 + 96) = v114;
  *(_OWORD *)(v109 + 128) = v116;
  *(_OWORD *)(v109 + 152) = v117;
  *(_OWORD *)(v109 + 176) = v118;
  *(_OWORD *)(v109 + 200) = v119;
  *(_OWORD *)(v109 + 224) = v120;
  *(_OWORD *)(v109 + 240) = v121;
  *(_OWORD *)(v109 + 320) = v125;
  *(_OWORD *)(v109 + 368) = v126;
  *(_OWORD *)(v109 + 432) = v131;
  *(_OWORD *)(v109 + 464) = v165;
  *(_QWORD *)(v142 + 72) = v109;
  v155 = 0uLL;
  *(_QWORD *)v153 = 0;
  *(_QWORD *)v173 = 0;
  v175 = 0uLL;
  *(_QWORD *)v163 = 0;
  v165 = 0uLL;
  sub_20EEB8B30((uint64_t)v159);
  if (v146)
  {
    v132 = (unint64_t *)&v146->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  sub_20EEB8D14((uint64_t)v169);
  if (v148)
  {
    v134 = (unint64_t *)&v148->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  sub_20EEB8EF8((uint64_t)v150);
  do
    v136 = __ldaxr(v5);
  while (__stlxr(v136 - 1, v5));
  if (!v136)
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
  }
  do
    v137 = __ldaxr(p_shared_owners);
  while (__stlxr(v137 - 1, p_shared_owners));
  if (!v137)
  {
    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
    std::__shared_weak_count::__release_weak(v99);
  }
  *v140 = v142;
  if (v144)
  {
    v138 = (unint64_t *)&v144->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
}

void sub_20EEB4D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,std::__shared_weak_count *a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  unint64_t *v62;
  unint64_t *v63;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;

  sub_20EEB8B30((uint64_t)&a62);
  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  sub_20EEB8D14((uint64_t)&STACK[0x270]);
  if (a24)
  {
    v67 = (unint64_t *)&a24->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  sub_20EEB8EF8((uint64_t)&a37);
  do
    v69 = __ldaxr(v62);
  while (__stlxr(v69 - 1, v62));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
    std::__shared_weak_count::__release_weak(a23);
  }
  do
    v70 = __ldaxr(v63);
  while (__stlxr(v70 - 1, v63));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))a27->__on_zero_shared)(a27);
    std::__shared_weak_count::__release_weak(a27);
  }
  v71 = *(std::__shared_weak_count **)(a25 + 64);
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (*(char *)(a25 + 55) < 0)
    operator delete(*a9);
  if (*(char *)(a25 + 31) < 0)
    operator delete(*(void **)(a25 + 8));
  sub_20E86665C((uint64_t)&a30);
  sub_20E86665C((uint64_t)&a32);
  sub_20E86665C((uint64_t)&a34);
  MEMORY[0x212BC6398](a25, 0x10B3C404AE8992ELL);
  sub_20E86665C((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20EEB5174(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;
  std::__shared_weak_count *v50;

  std::__shared_weak_count::__release_weak(v50);
  sub_20E86665C(a20);
  sub_20E86665C(v49);
  if (a49 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  JUMPOUT(0x20EEB502CLL);
}

void sub_20EEB51B4()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x20EEB502CLL);
}

void sub_20EEB51CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  unint64_t *v23;
  void **v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t v30;

  v26 = *(std::__shared_weak_count **)(v25 + 80);
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (*(char *)(v25 + 71) < 0)
    operator delete(*v24);
  v29 = *(std::__shared_weak_count **)(v25 + 40);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  MEMORY[0x212BC6398](v25, 0x10B3C404EE1F0BALL);
  do
    v30 = __ldaxr(v23);
  while (__stlxr(v30 - 1, v23));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
    std::__shared_weak_count::__release_weak(a23);
  }
  JUMPOUT(0x20EEB502CLL);
}

void sub_20EEB52A8()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x20EEB508CLL);
}

void sub_20EEB52BC()
{
  JUMPOUT(0x20EEB508CLL);
}

void sub_20EEB52C4()
{
  JUMPOUT(0x20EEB5110);
}

void sub_20EEB52CC()
{
  JUMPOUT(0x20EEB5128);
}

void sub_20EEB52D4(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20EEB5130);
}

void sub_20EEB52E8(uint64_t a1)
{
  sub_20EEB90DC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB5318(uint64_t a1)
{
  sub_20EEB8EF8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EEB533C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9EFA10;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EEB5374(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9EFA10;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB53BC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B6B70;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B6B70;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EEB5490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEB54BC(uint64_t a1)
{
  sub_20EEB8D14(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EEB54E0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EFA78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EEB5520(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EFA78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEB5570(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EEB5580(uint64_t a1)
{
  sub_20EEB8B30(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EEB55A4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EFAE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EEB55E4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EFAE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEB5634(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EEB5648(uint64_t a1)
{
  sub_20EEB5F14(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB566C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EEB6070(a1 + 11, a2, &v5);
    if (v6)
      sub_20EEB63D0(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EEB5728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EEB63D0(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB5750(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EEB5760(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EEB576C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EEB577C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EEB6070(a1 + 11, a2, &v14);
  if (v15)
    sub_20EEB63D0(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EEB5914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EEB5840);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EEB5988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EEB59E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EEB63D0(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EEB5A0C(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EEB5A90(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B6B70;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EEB5B40(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EEB5B54(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EEB5BE4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EEB5BF8(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EEB64F8(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EEB5C3C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EEB5C50(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EEB5C84(uint64_t a1)
{
  return sub_20EEB5F14(a1 - 16);
}

void sub_20EEB5C8C(uint64_t a1)
{
  sub_20EEB5F14(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB5CB4(uint64_t a1, uint64_t a2)
{
  sub_20EEB5A90(a1 - 16, a2);
}

void sub_20EEB5CBC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EEB64F8(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EEB5D00(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EEB5D14(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EEB5D48(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EEB5D50(uint64_t a1)
{
  return sub_20EEB5F14(a1 - 24);
}

void sub_20EEB5D58(uint64_t a1)
{
  sub_20EEB5F14(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB5D80(uint64_t a1)
{
  sub_20EEB5B54(a1 - 24);
}

uint64_t sub_20EEB5D88(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EEB5D90(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EEB5DF8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEB5E60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL4 v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)v2 != 1)
    return *(unsigned __int8 *)(v2 + 80);
  v3 = *(_QWORD *)(v2 + 72);
  if (*(double *)v3 <= *(double *)a2)
  {
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 12);
    v7 = *(_QWORD *)(v3 + 8);
    v8 = *(_QWORD *)(v3 + 16);
    result = *(unsigned __int8 *)(v3 + 64);
    v10 = v8 > v6 && v7 > v5;
    if (*(_BYTE *)(v3 + 64))
      v11 = !v10;
    else
      v11 = 0;
    if (v11 || (!*(_BYTE *)(v3 + 64) ? (v12 = v8 > v6) : (v12 = 0), v12 ? (v13 = v7 > v5) : (v13 = 0), v13))
    {
      v14 = *(_QWORD *)(v3 + 72) + 1;
      *(_QWORD *)(v3 + 72) = v14;
    }
    else
    {
      v14 = 0;
      *(_QWORD *)(v3 + 72) = 0;
    }
    v15 = 24;
    if ((_DWORD)result)
      v15 = 32;
    if (v14 >= *(unsigned int *)(v3 + v15))
    {
      *(_QWORD *)(v3 + 72) = 0;
      result = result ^ 1;
      *(_BYTE *)(v3 + 64) = result;
    }
    *(_BYTE *)(v2 + 80) = result;
  }
  else
  {
    result = *(unsigned __int8 *)(v3 + 64);
    *(_BYTE *)(v2 + 80) = result;
  }
  return result;
}

uint64_t sub_20EEB5F14(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9EFB18;
  *(_QWORD *)(a1 + 16) = &unk_24C9EFB90;
  *(_QWORD *)(a1 + 24) = &unk_24C9EFBD0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EEB6070(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  char v17;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, char *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v14 + 140) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_20EEB62DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EEB63A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EEB63C4);
}

uint64_t *sub_20EEB63D0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EEB64BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EEB6418);
}

char *sub_20EEB64F8(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EEB65D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EEB65F8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEB661C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EEB6634(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio28feature_detectio"
                     "n_node_group38LineTrackingEnablerVIOHealthStatisticsENS7_17LineEnablerOutputEvS9_Lb0EEEE27__shared_"
                     "ptr_default_deleteISA_SA_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio28featu"
                                "re_detection_node_group38LineTrackingEnablerVIOHealthStatisticsENS7_17LineEnablerOutputE"
                                "vS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio28feature_detection_node_group38LineTrackingEnablerVIOHealthStatisticsENS7_17LineEnablerOutputEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio28feature_detection_node_group38LineTrackingEnablerVIOHealthStatisticsENS7_17LineEnablerOutputEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EEB66A4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EEB66D0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EEB670C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9EFD68;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EEB6774(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EEB6804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EEB6818(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EEB68A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB68BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EEB6980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB6994(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EEB6A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EEB6A6C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EEB6B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EEB6B28(uint64_t a1)
{
  sub_20EEB73C8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB6B4C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_20EEB7510(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x212BC623C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EEB6C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB6C30(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EEB6C40(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EEB6C4C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EEB6C5C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EEB7510(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x212BC623C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EEB6DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x20EEB6D20);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EEB6E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x212BC623C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20EEB6EB4(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EEB6F38(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EEB6FC8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EEB6FDC(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EEB706C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EEB7080(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EEB70B4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EEB70E8(uint64_t a1)
{
  return sub_20EEB73C8(a1 - 16);
}

void sub_20EEB70F0(uint64_t a1)
{
  sub_20EEB73C8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB7118(uint64_t a1)
{
  sub_20EEB6F38(a1 - 16);
}

void sub_20EEB7120(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EEB7154(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EEB7188(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EEB7190(uint64_t a1)
{
  return sub_20EEB73C8(a1 - 24);
}

void sub_20EEB7198(uint64_t a1)
{
  sub_20EEB73C8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB71C0(uint64_t a1)
{
  sub_20EEB6FDC(a1 - 24);
}

uint64_t sub_20EEB71C8(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EEB71D0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EEB7238(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEB72A0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[71];
  __int128 v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  *(_OWORD *)&v6[32] = *(_OWORD *)(a2 + 33);
  *(_OWORD *)&v6[48] = *(_OWORD *)(a2 + 49);
  *(_QWORD *)&v6[63] = *((_QWORD *)a2 + 8);
  *(_OWORD *)v6 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)&v6[16] = *(_OWORD *)(a2 + 17);
  v7 = *(_OWORD *)(a2 + 49);
  HIBYTE(v7) = v6[63];
  result = operator new();
  *(_OWORD *)(result + 32) = *(_OWORD *)&v6[39];
  *(_OWORD *)(result + 48) = *(_OWORD *)&v6[55];
  *(_OWORD *)result = *(_OWORD *)&v6[7];
  *(_OWORD *)(result + 16) = *(_OWORD *)&v6[23];
  *(_WORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_OWORD *)(v2 + 1) = *(_OWORD *)v6;
  v5 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)&v6[63];
  *(_QWORD *)(v2 + 72) = result;
  *(_OWORD *)(v2 + 49) = v7;
  *(_OWORD *)(v2 + 33) = *(_OWORD *)&v6[32];
  *(_BYTE *)v2 = v3;
  *(_OWORD *)(v2 + 17) = *(_OWORD *)&v6[16];
  if (v5)
    result = MEMORY[0x212BC6398](v5, 0x1000C4086F741D2);
  *(_BYTE *)(v2 + 80) = v3 == 2;
  return result;
}

void sub_20EEB73BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20E860DA4(a1);
}

uint64_t sub_20EEB73C8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9EFDE0;
  *(_QWORD *)(a1 + 16) = &unk_24C9EFE58;
  *(_QWORD *)(a1 + 24) = &unk_24C9EFE98;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EEB7510(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EEB75A8()
{
  __break(1u);
}

void sub_20EEB7654(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EEB7674);
}

void sub_20EEB7684(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEB76A8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EEB76C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8odometry25LineTra"
                     "ckingEnablerConfigEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8odomet"
                                "ry25LineTrackingEnablerConfigEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8odometry25LineTrackingEnablerConfigEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8odometry25LineTrackingEnablerConfigEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EEB7730(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EEB775C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EEB7798@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9F0020;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EEB7800(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EEB7890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EEB78A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EEB7934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB7948(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EEB7A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB7A20(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EEB7AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EEB7AF8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EEB7B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EEB7BB4(uint64_t a1)
{
  sub_20EEB8348(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB7BD8(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_20EEB8490(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x212BC623C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EEB7C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB7CBC(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EEB7CCC(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EEB7CD8(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EEB7CE8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EEB8490(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x212BC623C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EEB7E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x20EEB7DACLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EEB7F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x212BC623C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20EEB7F40(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EEB7FC4(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EEB8054(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EEB8068(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EEB80F8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EEB810C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EEB8140(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EEB8174(uint64_t a1)
{
  return sub_20EEB8348(a1 - 16);
}

void sub_20EEB817C(uint64_t a1)
{
  sub_20EEB8348(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB81A4(uint64_t a1)
{
  sub_20EEB7FC4(a1 - 16);
}

void sub_20EEB81AC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EEB81E0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EEB8214(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EEB821C(uint64_t a1)
{
  return sub_20EEB8348(a1 - 24);
}

void sub_20EEB8224(uint64_t a1)
{
  sub_20EEB8348(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EEB824C(uint64_t a1)
{
  sub_20EEB8068(a1 - 24);
}

uint64_t sub_20EEB8254(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EEB825C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EEB82C4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEB832C(uint64_t result, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;

  v2 = *(_BYTE **)(result + 8);
  v3 = *a2;
  *v2 = v3;
  v2[80] = v3 == 2;
  return result;
}

uint64_t sub_20EEB8348(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9F0098;
  *(_QWORD *)(a1 + 16) = &unk_24C9F0110;
  *(_QWORD *)(a1 + 24) = &unk_24C9F0150;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EEB8490(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EEB8528()
{
  __break(1u);
}

void sub_20EEB85D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EEB85F4);
}

void sub_20EEB8604(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEB8628(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EEB8640(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8odometry15LineEna"
                     "blerTypeEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8odomet"
                                "ry15LineEnablerTypeEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8odometry15LineEnablerTypeEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8odometry15LineEnablerTypeEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EEB86B0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EEB86DC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EEB8718@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9F02D8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EEB8780(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EEB8810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EEB8824(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EEB88B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB88C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EEB898C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB89A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EEB8A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EEB8A78(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EEB8B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEB8B30(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EFAB0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9EFAE0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EEB8D14(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EFA48;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9EFA78;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EEB8EF8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EF9E0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9EFA10;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9C8F20;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EEB90DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9EF9B0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20EEB8B30(v2 + 336);
    sub_20EEB8D14(v2 + 168);
    v3 = sub_20EEB8EF8(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40EC6BA667);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20EEB8B30(v7 + 336);
    sub_20EEB8D14(v7 + 168);
    v8 = sub_20EEB8EF8(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C40EC6BA667);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EEB923C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F0350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EEB924C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F0350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEB927C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (result)
    JUMPOUT(0x212BC6398);
  return result;
}

unint64_t sub_20EEB92A8(uint64_t a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  v21 = v1;
  v22 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v20 = &off_24CA1A9C0;
  if (v1)
  {
    v6 = *v1;
    v5 = (std::__shared_weak_count *)v1[1];
    if (!v5)
      goto LABEL_10;
    v7 = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (v9)
    {
LABEL_10:
      if (!v6)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
LABEL_11:
      sub_2101613B8((uint64_t)v21);
  }
LABEL_12:
  v10 = sub_20EEBB2A4((uint64_t)&v20);
  if (v21)
  {
    v12 = *v21;
    v11 = (std::__shared_weak_count *)v21[1];
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12)
          goto LABEL_20;
        goto LABEL_19;
      }
    }
    if (v12)
LABEL_19:
      sub_210161594((uint64_t)v21);
  }
LABEL_20:
  v20 = &off_24CA1A9A0;
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v10;
}

void sub_20EEB9420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EEB9470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21015CB94((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EEB9484(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t (**v22)();
  uint64_t *v23;
  std::__shared_weak_count *v24;

  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  v23 = v5;
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v22 = &off_24CA1A9C0;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_10;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_10:
      if (!v10)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
LABEL_11:
      sub_2101613B8((uint64_t)v23);
  }
LABEL_12:
  sub_20EEBB84C((uint64_t)&v22, a2, a3);
  if (!v23)
    goto LABEL_20;
  v15 = *v23;
  v14 = (std::__shared_weak_count *)v23[1];
  if (!v14)
    goto LABEL_18;
  v16 = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (v18)
  {
LABEL_18:
    if (!v15)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (v15)
LABEL_19:
    sub_210161594((uint64_t)v23);
LABEL_20:
  v22 = &off_24CA1A9A0;
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EEB9610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EEB9660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21015CB94((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EEB9674(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  void **v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  uint64_t v66;
  _DWORD *v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  const char *v73;
  size_t v74;
  unsigned __int8 v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v80;
  const char *v81;
  size_t v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  const char *v85;
  size_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  void **v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  size_t v95;
  NSObject *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  os_log_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  char *v106;
  uint64_t v107;
  const char *v108;
  void *v109;
  int v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  int v130;
  unsigned int v131;
  void *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unsigned __int8 v136;
  const char *v137;
  size_t v138;
  __int128 *v139;
  uint64_t v140;
  uint64_t v141;
  void **v142;
  NSObject *v143;
  uint64_t v144;
  uint64_t v145;
  size_t v146;
  NSObject *v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  os_log_t v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  char *v157;
  uint64_t v158;
  const char *v159;
  void *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  int v180;
  unsigned int v181;
  void *v182;
  unint64_t *v183;
  unint64_t v184;
  _BYTE *v185;
  unint64_t v186;
  uint64_t v187;
  char *v188;
  __int128 *v189;
  _OWORD *v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  int *v196;
  int v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  const char *v212;
  _BYTE *v213;
  uint64_t v214;
  const char *v215;
  uint64_t v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t *v222;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v224;
  int v225;
  const char *v226;
  int v227;
  const char *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  uint64_t v231;
  void *__p[2];
  __int128 v233;
  void *v234[2];
  __int128 v235;
  void **v236;
  std::__shared_weak_count *v237;
  uint64_t (**v238)();
  uint64_t *v239;
  std::__shared_weak_count *v240;
  void *v241[2];
  char v242;
  char v243;
  uint64_t v244;
  os_log_t v245;
  __int128 v246;
  __int128 v247;
  void **v248;
  size_t v249;
  unint64_t v250;
  char v251;
  uint64_t v252;

  v252 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    goto LABEL_37;
  v5 = *v3;
  v6 = (std::__shared_weak_count *)v3[1];
  if (!v6)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    if (v5)
      goto LABEL_8;
LABEL_37:
    *a2 = 0;
    a2[16] = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v5)
    goto LABEL_37;
LABEL_8:
  kdebug_trace();
  v10 = *(uint64_t **)(a1 + 8);
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  v239 = v10;
  v240 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v238 = &off_24CA1A9C0;
  if (!v10)
    goto LABEL_26;
  v14 = *v10;
  v15 = (std::__shared_weak_count *)v10[1];
  if (!v15)
    goto LABEL_17;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (v18)
  {
LABEL_17:
    v19 = v239;
    if (!v14)
      goto LABEL_19;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  v19 = v239;
  if (v14)
LABEL_18:
    sub_2101613B8((uint64_t)v19);
LABEL_19:
  if (!v19)
  {
LABEL_26:
    v20 = 0;
    goto LABEL_27;
  }
  v20 = *v19;
  v21 = (std::__shared_weak_count *)v19[1];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_27:
  if ((MEMORY[0x212BC52F4](v20) & 1) != 0)
  {
    if (v239)
    {
      v25 = *v239;
      v26 = (std::__shared_weak_count *)v239[1];
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
      v25 = 0;
    }
    v30 = MEMORY[0x212BC5318](v25);
    if (v239)
    {
      v31 = *v239;
      v32 = (std::__shared_weak_count *)v239[1];
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
        do
          v35 = __ldaxr(v33);
        while (__stlxr(v35 - 1, v33));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
    else
    {
      v31 = 0;
    }
    v36 = MEMORY[0x212BC5324](v31);
    if (v239)
    {
      v37 = *v239;
      v38 = (std::__shared_weak_count *)v239[1];
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        do
          v41 = __ldaxr(v39);
        while (__stlxr(v41 - 1, v39));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    else
    {
      v37 = 0;
    }
    v42 = MEMORY[0x212BC530C](v37);
    if (v239)
    {
      v43 = a2;
      v44 = *v239;
      v45 = (std::__shared_weak_count *)v239[1];
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        do
          v48 = __ldaxr(v46);
        while (__stlxr(v48 - 1, v46));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      a2 = v43;
    }
    else
    {
      v44 = 0;
    }
    v49 = MEMORY[0x212BC5330](v44);
    v213 = a2;
    v50 = (char *)operator new(0x50uLL);
    *((_QWORD *)v50 + 1) = 0;
    *((_QWORD *)v50 + 2) = 0;
    *(_QWORD *)v50 = &off_24C9F03A0;
    *(_OWORD *)(v50 + 24) = 0u;
    v51 = (void **)(v50 + 24);
    *(_OWORD *)(v50 + 40) = 0u;
    *(_OWORD *)(v50 + 56) = 0u;
    *((_QWORD *)v50 + 9) = 0;
    v236 = (void **)(v50 + 24);
    v237 = (std::__shared_weak_count *)v50;
    if (v239)
    {
      v52 = *v239;
      v53 = (std::__shared_weak_count *)v239[1];
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
        do
          v56 = __ldaxr(v54);
        while (__stlxr(v56 - 1, v54));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
    }
    else
    {
      v52 = 0;
    }
    *((_QWORD *)v50 + 9) = MEMORY[0x212BC5300](v52);
    *(_OWORD *)v234 = 0u;
    v235 = 0u;
    *(_OWORD *)__p = 0u;
    v233 = 0u;
    v57 = v30;
    if (v30)
    {
      LOBYTE(v245) = 0;
      LOBYTE(v246) = 0;
      sub_20EE8AE04(&v234[1], 0, v30, (unint64_t)&v245);
      v59 = __p[1];
      v58 = v233;
    }
    else
    {
      v59 = 0;
      v58 = 0;
    }
    v60 = 0xAAAAAAAAAAAAAAABLL * ((v58 - (uint64_t)v59) >> 2);
    if (v30 > v60)
    {
      LOBYTE(v245) = 0;
      LOBYTE(v246) = 0;
      sub_20EE8AE04(&__p[1], v58, v30 - v60, (unint64_t)&v245);
    }
    v61 = *((_QWORD *)v50 + 3);
    v62 = (*((_QWORD *)v50 + 4) - v61) >> 3;
    if (v30 <= v62)
    {
      if (v30 < v62)
        *((_QWORD *)v50 + 4) = v61 + 8 * v30;
    }
    else
    {
      sub_20EE015F4(v51, v30 - v62);
    }
    if (v30)
    {
      v211 = v49;
      v63 = 0;
      v30 = 0;
      v217 = v36;
      v216 = v57;
      v221 = v42;
      while (1)
      {
        v65 = (unsigned int *)(v42 + 8 * v63);
        LODWORD(v222) = *v65;
        HIDWORD(v222) = 1;
        sub_20EEBB03C((uint64_t)&v245, (int *)v234, v222, &v222);
        if (!BYTE8(v246))
          break;
        v66 = v42 + 8 * v63;
        v68 = *(_DWORD *)(v66 + 4);
        v67 = (_DWORD *)(v66 + 4);
        v241[0] = (void *)(v68 | 0x100000000);
        sub_20EEBB03C((uint64_t)&v245, (int *)__p, v68, v241);
        if (!BYTE8(v246))
          break;
        if (*v65 >= v36)
        {
          sub_20EEBAEC0(&v231);
          if (**(int **)(v231 + 56) > 4)
            goto LABEL_84;
          v69 = *(unsigned __int8 *)(v231 + 72);
          v70 = sub_20E8C31DC(v231, "OSLogSurrogateAppender", 1, 0);
          v71 = v70;
          if (!v69 && !v70)
            goto LABEL_84;
          v218 = v69;
          v220 = v30;
          v222 = &v231;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v224 = std::chrono::system_clock::now().__d_.__rep_;
          v225 = 4;
          v226 = "unknown file";
          v227 = 137;
          v228 = "unknown function";
          v229 = 0;
          v230 = 0;
          v72 = *v222;
          v73 = (const char *)(*v222 + 16);
          v214 = *v222;
          v212 = v73;
          if (*(char *)(*v222 + 39) < 0)
          {
            v73 = *(const char **)(v72 + 16);
            v74 = *(_QWORD *)(v72 + 24);
            v136 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v136 & 1) == 0)
            {
LABEL_271:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v241);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v241);
                if (v243 && v242 < 0)
                  operator delete(v241[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v42 = v221;
              }
            }
          }
          else
          {
            v74 = *(unsigned __int8 *)(*v222 + 39);
            v75 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v75 & 1) == 0)
              goto LABEL_271;
          }
          if (byte_254A4A4F8[23] >= 0)
            v137 = byte_254A4A4F8;
          else
            v137 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v138 = byte_254A4A4F8[23];
          else
            v138 = *(_QWORD *)&byte_254A4A4F8[8];
          v245 = os_log_create(v137, v73);
          if (v138 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v138 >= 0x17)
          {
            v140 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v138 | 7) != 0x17)
              v140 = v138 | 7;
            v141 = v140 + 1;
            v139 = (__int128 *)operator new(v140 + 1);
            *((_QWORD *)&v246 + 1) = v138;
            *(_QWORD *)&v247 = v141 | 0x8000000000000000;
            *(_QWORD *)&v246 = v139;
            v42 = v221;
          }
          else
          {
            BYTE7(v247) = v138;
            v139 = &v246;
            if (!v138)
            {
LABEL_198:
              *((_BYTE *)v139 + v138) = 0;
              BYTE8(v247) = 1;
              if (v74 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v36 = v217;
              v57 = v216;
              if (v74 >= 0x17)
              {
                v144 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v74 | 7) != 0x17)
                  v144 = v74 | 7;
                v145 = v144 + 1;
                v142 = (void **)operator new(v144 + 1);
                v249 = v74;
                v250 = v145 | 0x8000000000000000;
                v248 = v142;
                v42 = v221;
              }
              else
              {
                HIBYTE(v250) = v74;
                v142 = (void **)&v248;
                if (!v74)
                {
                  LOBYTE(v248) = 0;
                  v251 = 1;
                  v143 = v245;
                  if ((SHIBYTE(v250) & 0x80000000) == 0)
                    goto LABEL_202;
LABEL_208:
                  operator delete(v248);
                  if (BYTE8(v247))
                    goto LABEL_209;
                  goto LABEL_211;
                }
              }
              memmove(v142, v73, v74);
              *((_BYTE *)v142 + v74) = 0;
              v251 = 1;
              v143 = v245;
              if (SHIBYTE(v250) < 0)
                goto LABEL_208;
LABEL_202:
              if (BYTE8(v247))
              {
LABEL_209:
                if (SBYTE7(v247) < 0)
                  operator delete((void *)v246);
              }
LABEL_211:
              if (v245)
                os_release(v245);
              if (v71 && *(_QWORD *)(v71 + 24))
              {
                v146 = _os_log_pack_size();
                v147 = operator new(v146, (std::align_val_t)8uLL);
                v148 = (std::__shared_weak_count *)operator new();
                v149 = v148;
                v148->__shared_owners_ = 0;
                v150 = (unint64_t *)&v148->__shared_owners_;
                v148->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v148->__shared_weak_owners_ = 0;
                v148[1].__vftable = (std::__shared_weak_count_vtbl *)v147;
                v245 = v147;
                *(_QWORD *)&v246 = v147;
                *((_QWORD *)&v246 + 1) = v148;
                do
                  v151 = __ldxr(v150);
                while (__stxr(v151 + 1, v150));
                v247 = 0uLL;
                v248 = 0;
                do
                  v152 = __ldaxr(v150);
                while (__stlxr(v152 - 1, v150));
                if (!v152)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v149);
                }
                v153 = v245;
                v154 = _os_log_pack_fill();
                v155 = *v67;
                v156 = *v65;
                *(_DWORD *)v154 = 67109376;
                *(_DWORD *)(v154 + 4) = v155;
                *(_WORD *)(v154 + 8) = 1024;
                *(_DWORD *)(v154 + 10) = v156;
                v157 = (char *)operator new();
                v158 = *(unsigned __int8 *)(v214 + 39);
                v159 = v212;
                if ((v158 & 0x80u) != 0)
                {
                  v159 = *(const char **)(v214 + 16);
                  v158 = *(_QWORD *)(v214 + 24);
                }
                *(_QWORD *)v157 = v153;
                *(_OWORD *)(v157 + 8) = v246;
                v246 = 0uLL;
                *(_OWORD *)(v157 + 24) = v247;
                v247 = 0uLL;
                *((_QWORD *)v157 + 5) = v159;
                *((_QWORD *)v157 + 6) = v158;
                v157[56] = 16;
                v244 = 0;
                v241[0] = v157;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v71 + 24) + 40))(*(_QWORD *)(v71 + 24), v241);
                v160 = v241[0];
                v241[0] = 0;
                if (v160)
                {
                  v161 = (std::__shared_weak_count *)*((_QWORD *)v160 + 4);
                  if (v161)
                  {
                    v162 = (unint64_t *)&v161->__shared_owners_;
                    do
                      v163 = __ldaxr(v162);
                    while (__stlxr(v163 - 1, v162));
                    if (!v163)
                    {
                      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                      std::__shared_weak_count::__release_weak(v161);
                    }
                  }
                  v164 = (std::__shared_weak_count *)*((_QWORD *)v160 + 2);
                  if (v164)
                  {
                    v165 = (unint64_t *)&v164->__shared_owners_;
                    do
                      v166 = __ldaxr(v165);
                    while (__stlxr(v166 - 1, v165));
                    if (!v166)
                    {
                      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                      std::__shared_weak_count::__release_weak(v164);
                    }
                  }
                  MEMORY[0x212BC6398](v160, 0x10F0C40B62ED6C6);
                  v167 = v244;
                  v244 = 0;
                  if (v167)
                  {
                    v168 = *(std::__shared_weak_count **)(v167 + 32);
                    if (v168)
                    {
                      v169 = (unint64_t *)&v168->__shared_owners_;
                      do
                        v170 = __ldaxr(v169);
                      while (__stlxr(v170 - 1, v169));
                      if (!v170)
                      {
                        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                        std::__shared_weak_count::__release_weak(v168);
                      }
                    }
                    v171 = *(std::__shared_weak_count **)(v167 + 16);
                    if (v171)
                    {
                      v172 = (unint64_t *)&v171->__shared_owners_;
                      do
                        v173 = __ldaxr(v172);
                      while (__stlxr(v173 - 1, v172));
                      if (!v173)
                      {
                        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                        std::__shared_weak_count::__release_weak(v171);
                      }
                    }
                    MEMORY[0x212BC6398](v167, 0x10F0C40B62ED6C6);
                  }
                }
                v174 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
                if (*((_QWORD *)&v247 + 1))
                {
                  v175 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
                  do
                    v176 = __ldaxr(v175);
                  while (__stlxr(v176 - 1, v175));
                  if (!v176)
                  {
                    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                    std::__shared_weak_count::__release_weak(v174);
                  }
                }
                v177 = (std::__shared_weak_count *)*((_QWORD *)&v246 + 1);
                if (*((_QWORD *)&v246 + 1))
                {
                  v178 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
                  do
                    v179 = __ldaxr(v178);
                  while (__stlxr(v179 - 1, v178));
                  if (!v179)
                  {
                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                    std::__shared_weak_count::__release_weak(v177);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v143, OS_LOG_TYPE_ERROR);
                v42 = v221;
                v180 = *v67;
                v181 = *v65;
                LODWORD(v245) = 67109376;
                HIDWORD(v245) = v180;
                LOWORD(v246) = 1024;
                *(_DWORD *)((char *)&v246 + 2) = v181;
                v182 = (void *)_os_log_send_and_compose_impl();
                if (v182)
                  free(v182);
              }
              if (v218)
              {
                sub_20E8C003C((uint64_t)&v222, "Bad match: %u -> %u.", *v67, *v65);
                sub_20E863570((uint64_t)&v222);
              }
              sub_20E863570((uint64_t)&v222);
              v133 = v230;
              if (v230)
              {
                v183 = (unint64_t *)&v230->__shared_owners_;
                do
                  v135 = __ldaxr(v183);
                while (__stlxr(v135 - 1, v183));
LABEL_263:
                if (!v135)
                {
                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                  std::__shared_weak_count::__release_weak(v133);
                }
              }
              goto LABEL_265;
            }
          }
          memmove(v139, v137, v138);
          goto LABEL_198;
        }
        v64 = (unsigned int *)((char *)*v236 + 8 * v30);
        *v64 = *v65;
        v64[1] = *v67;
        ++v30;
LABEL_84:
        if (++v63 == v57)
        {
          v51 = v236;
          v49 = v211;
          goto LABEL_277;
        }
      }
      sub_20EEBAEC0(&v231);
      if (**(int **)(v231 + 56) > 4)
        goto LABEL_84;
      v76 = *(unsigned __int8 *)(v231 + 72);
      v77 = sub_20E8C31DC(v231, "OSLogSurrogateAppender", 1, 0);
      v78 = v77;
      if (!v76 && v77 == 0)
        goto LABEL_84;
      v219 = v76;
      v220 = v30;
      v222 = &v231;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v224 = std::chrono::system_clock::now().__d_.__rep_;
      v225 = 4;
      v226 = "unknown file";
      v227 = 132;
      v228 = "unknown function";
      v229 = 0;
      v230 = 0;
      v80 = *v222;
      v81 = (const char *)(*v222 + 16);
      v215 = v81;
      if (*(char *)(*v222 + 39) < 0)
      {
        v81 = *(const char **)(v80 + 16);
        v82 = *(_QWORD *)(v80 + 24);
        v84 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v84 & 1) != 0)
          goto LABEL_103;
      }
      else
      {
        v82 = *(unsigned __int8 *)(*v222 + 39);
        v83 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v83 & 1) != 0)
          goto LABEL_103;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v241);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v241);
        if (v243 && v242 < 0)
          operator delete(v241[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v42 = v221;
      }
LABEL_103:
      if (byte_254A4A4F8[23] >= 0)
        v85 = byte_254A4A4F8;
      else
        v85 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v86 = byte_254A4A4F8[23];
      else
        v86 = *(_QWORD *)&byte_254A4A4F8[8];
      v245 = os_log_create(v85, v81);
      if (v86 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v86 >= 0x17)
      {
        v88 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v86 | 7) != 0x17)
          v88 = v86 | 7;
        v89 = v88 + 1;
        v87 = (__int128 *)operator new(v88 + 1);
        *((_QWORD *)&v246 + 1) = v86;
        *(_QWORD *)&v247 = v89 | 0x8000000000000000;
        *(_QWORD *)&v246 = v87;
        v42 = v221;
      }
      else
      {
        BYTE7(v247) = v86;
        v87 = &v246;
        if (!v86)
        {
LABEL_117:
          *((_BYTE *)v87 + v86) = 0;
          BYTE8(v247) = 1;
          if (v82 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v36 = v217;
          v57 = v216;
          if (v82 >= 0x17)
          {
            v92 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v82 | 7) != 0x17)
              v92 = v82 | 7;
            v93 = v92 + 1;
            v90 = (void **)operator new(v92 + 1);
            v249 = v82;
            v250 = v93 | 0x8000000000000000;
            v248 = v90;
            v42 = v221;
          }
          else
          {
            HIBYTE(v250) = v82;
            v90 = (void **)&v248;
            if (!v82)
            {
              LOBYTE(v248) = 0;
              v251 = 1;
              v91 = v245;
              if ((SHIBYTE(v250) & 0x80000000) == 0)
                goto LABEL_121;
              goto LABEL_127;
            }
          }
          memmove(v90, v81, v82);
          *((_BYTE *)v90 + v82) = 0;
          v251 = 1;
          v91 = v245;
          if ((SHIBYTE(v250) & 0x80000000) == 0)
          {
LABEL_121:
            if (!BYTE8(v247))
              goto LABEL_130;
            goto LABEL_128;
          }
LABEL_127:
          operator delete(v248);
          if (!BYTE8(v247))
            goto LABEL_130;
LABEL_128:
          if (SBYTE7(v247) < 0)
            operator delete((void *)v246);
LABEL_130:
          if (v245)
            os_release(v245);
          v94 = (_DWORD *)(v42 + 8 * v63 + 4);
          if (v78 && *(_QWORD *)(v78 + 24))
          {
            v95 = _os_log_pack_size();
            v96 = operator new(v95, (std::align_val_t)8uLL);
            v97 = (std::__shared_weak_count *)operator new();
            v98 = v97;
            v97->__shared_owners_ = 0;
            v99 = (unint64_t *)&v97->__shared_owners_;
            v97->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v97->__shared_weak_owners_ = 0;
            v97[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
            v245 = v96;
            *(_QWORD *)&v246 = v96;
            *((_QWORD *)&v246 + 1) = v97;
            do
              v100 = __ldxr(v99);
            while (__stxr(v100 + 1, v99));
            v247 = 0uLL;
            v248 = 0;
            do
              v101 = __ldaxr(v99);
            while (__stlxr(v101 - 1, v99));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v98);
            }
            v102 = v245;
            v103 = _os_log_pack_fill();
            v104 = *v94;
            v105 = *v65;
            *(_DWORD *)v103 = 67109376;
            *(_DWORD *)(v103 + 4) = v104;
            *(_WORD *)(v103 + 8) = 1024;
            *(_DWORD *)(v103 + 10) = v105;
            v106 = (char *)operator new();
            v107 = *(unsigned __int8 *)(v80 + 39);
            v108 = v215;
            if ((v107 & 0x80u) != 0)
            {
              v108 = *(const char **)(v80 + 16);
              v107 = *(_QWORD *)(v80 + 24);
            }
            *(_QWORD *)v106 = v102;
            *(_OWORD *)(v106 + 8) = v246;
            v246 = 0uLL;
            *(_OWORD *)(v106 + 24) = v247;
            v247 = 0uLL;
            *((_QWORD *)v106 + 5) = v108;
            *((_QWORD *)v106 + 6) = v107;
            v106[56] = 16;
            v244 = 0;
            v241[0] = v106;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v78 + 24) + 40))(*(_QWORD *)(v78 + 24), v241);
            v109 = v241[0];
            v241[0] = 0;
            v110 = v219;
            if (v109)
            {
              v111 = (std::__shared_weak_count *)*((_QWORD *)v109 + 4);
              if (v111)
              {
                v112 = (unint64_t *)&v111->__shared_owners_;
                do
                  v113 = __ldaxr(v112);
                while (__stlxr(v113 - 1, v112));
                if (!v113)
                {
                  ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                  std::__shared_weak_count::__release_weak(v111);
                }
              }
              v114 = (std::__shared_weak_count *)*((_QWORD *)v109 + 2);
              if (v114)
              {
                v115 = (unint64_t *)&v114->__shared_owners_;
                do
                  v116 = __ldaxr(v115);
                while (__stlxr(v116 - 1, v115));
                if (!v116)
                {
                  ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                  std::__shared_weak_count::__release_weak(v114);
                }
              }
              MEMORY[0x212BC6398](v109, 0x10F0C40B62ED6C6);
              v117 = v244;
              v244 = 0;
              if (v117)
              {
                v118 = *(std::__shared_weak_count **)(v117 + 32);
                if (v118)
                {
                  v119 = (unint64_t *)&v118->__shared_owners_;
                  do
                    v120 = __ldaxr(v119);
                  while (__stlxr(v120 - 1, v119));
                  if (!v120)
                  {
                    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                    std::__shared_weak_count::__release_weak(v118);
                  }
                }
                v121 = *(std::__shared_weak_count **)(v117 + 16);
                if (v121)
                {
                  v122 = (unint64_t *)&v121->__shared_owners_;
                  do
                    v123 = __ldaxr(v122);
                  while (__stlxr(v123 - 1, v122));
                  if (!v123)
                  {
                    ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                    std::__shared_weak_count::__release_weak(v121);
                  }
                }
                MEMORY[0x212BC6398](v117, 0x10F0C40B62ED6C6);
              }
            }
            v124 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
            if (*((_QWORD *)&v247 + 1))
            {
              v125 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
            v127 = (std::__shared_weak_count *)*((_QWORD *)&v246 + 1);
            if (*((_QWORD *)&v246 + 1))
            {
              v128 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
          }
          else
          {
            os_log_type_enabled(v91, OS_LOG_TYPE_ERROR);
            v130 = *v94;
            v131 = *v65;
            LODWORD(v245) = 67109376;
            HIDWORD(v245) = v130;
            LOWORD(v246) = 1024;
            *(_DWORD *)((char *)&v246 + 2) = v131;
            v132 = (void *)_os_log_send_and_compose_impl();
            v110 = v219;
            if (v132)
              free(v132);
          }
          if (v110)
          {
            sub_20E8C003C((uint64_t)&v222, "Duplicate match: %u -> %u.", *v94, *v65);
            sub_20E863570((uint64_t)&v222);
          }
          sub_20E863570((uint64_t)&v222);
          v133 = v230;
          v42 = v221;
          if (v230)
          {
            v134 = (unint64_t *)&v230->__shared_owners_;
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            goto LABEL_263;
          }
LABEL_265:
          v30 = v220;
          goto LABEL_84;
        }
      }
      memmove(v87, v85, v86);
      goto LABEL_117;
    }
LABEL_277:
    v184 = ((_BYTE *)v51[1] - (_BYTE *)*v51) >> 3;
    if (v30 <= v184)
    {
      if (v30 < v184)
        v51[1] = (char *)*v51 + 8 * v30;
    }
    else
    {
      sub_20EE015F4(v51, v30 - v184);
    }
    v185 = v51[3];
    v186 = ((_BYTE *)v51[4] - v185) >> 2;
    if (v36 <= v186)
    {
      if (v36 < v186)
        v51[4] = &v185[4 * v36];
    }
    else
    {
      sub_20EAC24FC((uint64_t)(v51 + 3), v36 - v186);
      v51 = v236;
    }
    if (v36)
    {
      v187 = 0;
      v188 = (char *)v51[3];
      if (v36 < 8)
        goto LABEL_291;
      if ((unint64_t)&v188[-v49] < 0x20)
        goto LABEL_291;
      v187 = v36 & 0xFFFFFFF8;
      v189 = (__int128 *)(v49 + 16);
      v190 = v188 + 16;
      v191 = v187;
      do
      {
        v192 = *v189;
        *(v190 - 1) = *(v189 - 1);
        *v190 = v192;
        v189 += 2;
        v190 += 2;
        v191 -= 8;
      }
      while (v191);
      if (v187 != v36)
      {
LABEL_291:
        v193 = v36 - v187;
        v194 = 4 * v187;
        v195 = &v188[v194];
        v196 = (int *)(v49 + v194);
        do
        {
          v197 = *v196++;
          *(_DWORD *)v195 = v197;
          v195 += 4;
          --v193;
        }
        while (v193);
      }
    }
    kdebug_trace();
    v198 = v237;
    *(_QWORD *)v213 = v51;
    *((_QWORD *)v213 + 1) = v198;
    if (v198)
    {
      v199 = (unint64_t *)&v198->__shared_owners_;
      do
        v200 = __ldxr(v199);
      while (__stxr(v200 + 1, v199));
    }
    v213[16] = 1;
    if (__p[1])
    {
      *(void **)&v233 = __p[1];
      operator delete(__p[1]);
    }
    if (v234[1])
    {
      *(void **)&v235 = v234[1];
      operator delete(v234[1]);
    }
    if (v198)
    {
      v201 = (unint64_t *)&v198->__shared_owners_;
      do
        v202 = __ldaxr(v201);
      while (__stlxr(v202 - 1, v201));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
        std::__shared_weak_count::__release_weak(v198);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  if (!v239)
    goto LABEL_313;
  v204 = *v239;
  v203 = (std::__shared_weak_count *)v239[1];
  if (!v203)
    goto LABEL_311;
  v205 = (unint64_t *)&v203->__shared_owners_;
  do
    v206 = __ldxr(v205);
  while (__stxr(v206 + 1, v205));
  do
    v207 = __ldaxr(v205);
  while (__stlxr(v207 - 1, v205));
  if (v207)
  {
LABEL_311:
    if (!v204)
      goto LABEL_313;
    goto LABEL_312;
  }
  ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
  std::__shared_weak_count::__release_weak(v203);
  if (v204)
LABEL_312:
    sub_210161594((uint64_t)v239);
LABEL_313:
  v238 = &off_24CA1A9A0;
  v208 = v240;
  if (v240)
  {
    v209 = (unint64_t *)&v240->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
}

void sub_20EEBAC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v43;

  if (*(_BYTE *)(v43 - 192) && *(char *)(v43 - 193) < 0)
    operator delete(*(void **)(v43 - 216));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a27);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  sub_20E86665C(v43 - 256);
  sub_21015CB94((_QWORD *)(v43 - 240));
  _Unwind_Resume(a1);
}

void sub_20EEBAEC0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60058);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60058))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60050);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A60058);
  }
  *a1 = qword_254A60050;
}

void sub_20EEBAF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60058);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60058);
  _Unwind_Resume(a1);
}

void sub_20EEBAFB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F03A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EEBAFC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F03A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EEBAFF4(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
}

void sub_20EEBB03C(uint64_t a1, int *a2, unsigned int a3, _DWORD *a4)
{
  int v8;
  void **v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[8];
  char v32;

  v8 = *a2;
  if (*a2)
  {
    v9 = (void **)(a2 + 2);
    v10 = *((_QWORD *)a2 + 1);
    v11 = a2[1];
    v12 = a3 - v11;
    v13 = *((_QWORD *)a2 + 2);
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 2);
    if (v14 <= v12)
    {
      v20 = v11 - a3;
      if (v11 > a3)
      {
        if ((int)(v11 - a3) < 0)
        {
          if (v12 <= v14)
            LODWORD(v12) = -1431655765 * ((v13 - v10) >> 2);
          v26 = 1431655765 - v14;
          if (v26 >= v12)
            v27 = v12;
          else
            v27 = v26;
          v31[0] = 0;
          v32 = 0;
          sub_20EE8AE04(v9, v13, v27, (unint64_t)v31);
          v23 = a2[1];
        }
        else
        {
          if (v20 <= v14)
            v21 = -1431655765 * ((v13 - v10) >> 2);
          else
            v21 = v20;
          if (v11 < v21)
            v21 = a2[1];
          if (1431655765 - (int)v14 >= v21)
            v22 = v21;
          else
            v22 = (1431655765 - v14);
          v31[0] = 0;
          v32 = 0;
          sub_20EE8AE04(v9, v10, v22, (unint64_t)v31);
          v23 = a2[1] - v22;
          a2[1] = v23;
        }
        v28 = a3 - v23;
        v29 = *((_QWORD *)a2 + 1);
        v30 = v29 + 12 * (a3 - v23);
        *(_DWORD *)v30 = *a4;
        *(_DWORD *)(v30 + 4) = a4[1];
        v16 = 1;
        *(_BYTE *)(v30 + 8) = 1;
        ++*a2;
        v15 = v29 + 12 * v28;
        goto LABEL_37;
      }
      v31[0] = 0;
      v32 = 0;
      if ((v12 & 0x80000000) != 0)
      {
        sub_20EE8AE04(v9, v10, v20, (unint64_t)v31);
        a2[1] = a3;
        v15 = *((_QWORD *)a2 + 1);
        *(_DWORD *)v15 = *a4;
      }
      else
      {
        sub_20EE8AE04(v9, v13, (v12 + 1) - v14, (unint64_t)v31);
        v24 = *((_QWORD *)a2 + 2);
        *(_DWORD *)(v24 - 12) = *a4;
        v15 = v24 - 12;
      }
      *(_DWORD *)(v15 + 4) = a4[1];
      v16 = 1;
      *(_BYTE *)(v15 + 8) = 1;
      v25 = *a2 + 1;
    }
    else
    {
      v15 = v10 + 12 * v12;
      if (*(_BYTE *)(v15 + 8))
      {
        v16 = 0;
LABEL_37:
        *(_QWORD *)a1 = a2;
        *(_QWORD *)(a1 + 8) = v15;
        goto LABEL_38;
      }
      *(_DWORD *)v15 = *a4;
      *(_DWORD *)(v15 + 4) = a4[1];
      v16 = 1;
      *(_BYTE *)(v15 + 8) = 1;
      v25 = v8 + 1;
    }
    *a2 = v25;
    goto LABEL_37;
  }
  v17 = *((_QWORD *)a2 + 1);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 2) - v17) >> 2);
  if (*((_QWORD *)a2 + 2) == v17)
  {
    sub_20EE8B16C((_QWORD *)a2 + 1, 1 - v18);
    v17 = *((_QWORD *)a2 + 1);
    v19 = *a2 + 1;
  }
  else
  {
    if (v18 >= 2)
      *((_QWORD *)a2 + 2) = v17 + 12;
    v19 = 1;
  }
  a2[1] = a3;
  *(_DWORD *)v17 = *a4;
  *(_DWORD *)(v17 + 4) = a4[1];
  *(_BYTE *)(v17 + 8) = 1;
  *a2 = v19;
  if (!v19)
    v17 = *((_QWORD *)a2 + 2);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v17;
  v16 = 1;
LABEL_38:
  *(_BYTE *)(a1 + 16) = v16;
}

unint64_t sub_20EEBB2A4(uint64_t a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v10;
  void *__p;
  __int128 v12;

  v1 = *(uint64_t **)(a1 + 8);
  if (!v1)
    goto LABEL_12;
  v4 = *v1;
  v3 = (std::__shared_weak_count *)v1[1];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_7:
    if (v4)
      goto LABEL_8;
LABEL_12:
    __p = operator new(0x20uLL);
    v12 = xmmword_2102DC000;
    strcpy((char *)__p, "keyInfoHeaderBuffer not valid");
    sub_20EEBB4BC((uint64_t *)&__p);
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (!v4)
    goto LABEL_12;
LABEL_8:
  v8 = (_DWORD *)sub_21015C7F8(a1, 0);
  if (v8)
  {
    if (v8[2] > 2u)
    {
      v10 = v8[12];
      if ((_DWORD)v10)
        return v8[10] | (unint64_t)(v10 << 32);
      __p = operator new(0x40uLL);
      v12 = xmmword_2102D7440;
      strcpy((char *)__p, "The offset for the extra section should be greater than 0");
      sub_20EEBB4BC((uint64_t *)&__p);
    }
    else
    {
      __p = operator new(0x40uLL);
      v12 = xmmword_2102D7440;
      strcpy((char *)__p, "Number of sections is too small to contain output section");
      sub_20EEBB4BC((uint64_t *)&__p);
    }
  }
  else
  {
    __p = operator new(0x38uLL);
    v12 = xmmword_2102DC7C0;
    strcpy((char *)__p, "BaseAddress of input buffer could not be obtained");
    sub_20EEBB4BC((uint64_t *)&__p);
  }
LABEL_13:
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  return 0;
}

void sub_20EEBB494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEBB4BC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t result;
  __uint64_t v13[2];
  int v14;
  _QWORD v15[3];
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = sub_210219C18();
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v14 = 136315138;
    v15[0] = v3;
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v13[0] = 0;
    pthread_threadid_np(0, v13);
    v8 = v13[0];
    timespec_get((timespec *)v13, 1);
    sub_210219E20(&v14, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v2 + 1), (__int128 *)(v2 + 5), "PixelBufferExtractionErr:Type:%s", 0x20uLL, v6, v7, v8, v13);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v11 + 48))(v11, &v14);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v26 < 0)
    {
      operator delete(__p);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_11:
        if (!v22)
        {
LABEL_17:
          if (v19 && v18 < 0)
            operator delete(v17);
          if (v16 < 0)
            operator delete(*(void **)((char *)v15 + 4));
          if (v6)
            free(v6);
          goto LABEL_24;
        }
LABEL_15:
        if (v21 < 0)
          operator delete(v20);
        goto LABEL_17;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v23);
    if (!v22)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_24:
  result = os_signpost_enabled((os_log_t)*v2);
  if ((_DWORD)result)
  {
    v14 = 136315138;
    v15[0] = v3;
    return _os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EEBB790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
LABEL_7:
  if (a34 < 0)
    operator delete(a29);
LABEL_9:
  if (a28)
  {
    if (a27 < 0)
      operator delete(a22);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if (!v47)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v47)
  {
    goto LABEL_14;
  }
  free(v47);
  _Unwind_Resume(exception_object);
}

void sub_20EEBB84C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  char v17;
  char v18;
  uint64_t v19;
  void *__p;
  __int128 v21;

  v4 = *(uint64_t **)(a1 + 8);
  if (!v4)
    goto LABEL_17;
  v8 = *v4;
  v7 = (std::__shared_weak_count *)v4[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
        goto LABEL_8;
LABEL_17:
      __p = operator new(0x20uLL);
      v21 = xmmword_2102DC000;
      strcpy((char *)__p, "keyInfoHeaderBuffer not valid");
      sub_20EEBBA34((_BYTE *)a3, (uint64_t *)&__p);
      goto LABEL_18;
    }
  }
  if (!v8)
    goto LABEL_17;
LABEL_8:
  v12 = sub_21015C7F8(a1, 0);
  if (v12)
  {
    v13 = v12;
    v14 = v12 + *((unsigned int *)a2 + 1);
    v15 = *(_WORD *)v14;
    v16 = *(_WORD *)(v14 + 2);
    if (v16)
      v17 = *(_BYTE *)(v14 + 84);
    else
      v17 = 1;
    if (*(_WORD *)(v14 + 2))
      v18 = *(_BYTE *)(v14 + 85);
    else
      v18 = 1;
    v19 = *a2;
    memcpy((void *)(a3 + 150), (const void *)(v14 + 86), 0x202uLL);
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v19;
    *(_WORD *)(a3 + 64) = v15;
    *(_WORD *)(a3 + 66) = v16;
    *(_OWORD *)(a3 + 84) = *(_OWORD *)(v14 + 20);
    *(_OWORD *)(a3 + 100) = *(_OWORD *)(v14 + 36);
    *(_OWORD *)(a3 + 116) = *(_OWORD *)(v14 + 52);
    *(_OWORD *)(a3 + 132) = *(_OWORD *)(v14 + 68);
    *(_OWORD *)(a3 + 68) = *(_OWORD *)(v14 + 4);
    *(_BYTE *)(a3 + 148) = v17;
    *(_BYTE *)(a3 + 149) = v18;
    *(_BYTE *)(a3 + 704) = 1;
    return;
  }
  __p = operator new(0x38uLL);
  v21 = xmmword_2102DC7C0;
  strcpy((char *)__p, "BaseAddress of input buffer could not be obtained");
  sub_20EEBBA34((_BYTE *)a3, (uint64_t *)&__p);
LABEL_18:
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_20EEBBA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEBBA34(_BYTE *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t result;
  __uint64_t v15[2];
  int v16;
  _QWORD v17[3];
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  void *__p;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = sub_210219C18();
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v16 = 136315138;
    v17[0] = v5;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v15[0] = 0;
    pthread_threadid_np(0, v15);
    v10 = v15[0];
    timespec_get((timespec *)v15, 1);
    sub_210219E20(&v16, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "PixelBufferExtractionErr:Type:%s", 0x20uLL, v8, v9, v10, v15);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v13 + 48))(v13, &v16);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v28 < 0)
    {
      operator delete(__p);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_11:
        if (!v24)
        {
LABEL_17:
          if (v21 && v20 < 0)
            operator delete(v19);
          if (v18 < 0)
            operator delete(*(void **)((char *)v17 + 4));
          if (v8)
            free(v8);
          goto LABEL_24;
        }
LABEL_15:
        if (v23 < 0)
          operator delete(v22);
        goto LABEL_17;
      }
    }
    else if ((v26 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v25);
    if (!v24)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_24:
  result = os_signpost_enabled((os_log_t)*v4);
  if ((_DWORD)result)
  {
    v16 = 136315138;
    v17[0] = v5;
    result = _os_signpost_emit_unreliably_with_name_impl();
  }
  *a1 = 0;
  a1[704] = 0;
  return result;
}

void sub_20EEBBD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
LABEL_7:
  if (a34 < 0)
    operator delete(a29);
LABEL_9:
  if (a28)
  {
    if (a27 < 0)
      operator delete(a22);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if (!v47)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v47)
  {
    goto LABEL_14;
  }
  free(v47);
  _Unwind_Resume(exception_object);
}

void sub_20EEBBDD0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *__p;
  __int128 v49;
  _BYTE v50[20];
  uint64_t (**v51)();
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t (**v54)();
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t (**v57)();
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t (**v60)();
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t (**v63)();
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t (**v66)();
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t (**v69)();
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t (**v72)();
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t (**v75)();
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t (**v78)();
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t (**v81)();
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t (**v84)();
  __int128 v85;
  __n128 v86;

  *(_WORD *)v50 = 0;
  *(_OWORD *)&v50[4] = 0uLL;
  v51 = &off_24CA1A9A0;
  v52 = 0;
  v53 = 0;
  v54 = &off_24CA1A9A0;
  v55 = 0;
  v56 = 0;
  v57 = &off_24CA1A9A0;
  v58 = 0;
  v59 = 0;
  v60 = &off_24CA1A9A0;
  v61 = 0;
  v62 = 0;
  v63 = &off_24CA1A9A0;
  v64 = 0;
  v65 = 0;
  v66 = &off_24CA1A9A0;
  v67 = 0;
  v68 = 0;
  v69 = &off_24CA1A9A0;
  v70 = 0;
  v71 = 0;
  v72 = &off_24CA1A9A0;
  v73 = 0;
  v74 = 0;
  v75 = &off_24CA1A9A0;
  v76 = 0;
  v77 = 0;
  v78 = &off_24CA1A9A0;
  v79 = 0;
  v80 = 0;
  v81 = &off_24CA1A9A0;
  v82 = 0;
  v83 = 0;
  v84 = &off_24CA1A9A0;
  *(_DWORD *)&v50[12] = *(_DWORD *)(a1 + 84);
  v85 = 0u;
  v86 = 0u;
  if ((*(_DWORD *)&v50[12] - 1281) > 0xFFFFFB1A)
  {
    *(_DWORD *)&v50[16] = *(_DWORD *)(a1 + 88);
    if ((*(_DWORD *)&v50[16] - 1025) > 0xFFFFFC1A)
    {
      *(_WORD *)v50 = *(_DWORD *)(a1 + 80);
      if (*(unsigned __int16 *)v50 - 7 > 0xFFFFFFF9)
      {
        v4 = *(unsigned __int16 *)(a1 + 64);
        v5 = *(_DWORD *)(a1 + 68);
        v6 = *(_DWORD *)(a1 + 144);
        *(_DWORD *)&v50[4] = v5;
        *(_DWORD *)&v50[8] = v6;
        if (v5 <= v4)
        {
          if (v5)
          {
            v43 = (unsigned int *)(a1 + 8);
            if (*(_BYTE *)(a1 + 148) == 1)
              v43 = (unsigned int *)(a1 + 12);
            v44 = *(_QWORD *)a1 + *v43;
            v45 = *(unsigned int *)(a1 + 76);
            v46 = v44 + *(unsigned int *)(a1 + 72);
            v47 = v44 + v45;
          }
          else
          {
            v46 = 0;
            v47 = 0;
          }
          v86.n128_u64[0] = v46;
          v86.n128_u64[1] = v47;
          *(_OWORD *)a2 = *(_OWORD *)v50;
          *(_DWORD *)(a2 + 16) = *(_DWORD *)&v50[16];
          *(_QWORD *)(a2 + 24) = &off_24CA1A9A0;
          *(_QWORD *)(a2 + 32) = 0;
          v52 = 0;
          v53 = 0;
          *(_QWORD *)(a2 + 40) = 0;
          *(_QWORD *)(a2 + 48) = &off_24CA1A9A0;
          *(_QWORD *)(a2 + 56) = 0;
          *(_QWORD *)(a2 + 64) = 0;
          v55 = 0;
          v56 = 0;
          *(_QWORD *)(a2 + 72) = &off_24CA1A9A0;
          *(_QWORD *)(a2 + 80) = 0;
          v58 = 0;
          v59 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = &off_24CA1A9A0;
          *(_QWORD *)(a2 + 104) = 0;
          *(_QWORD *)(a2 + 112) = 0;
          v61 = 0;
          v62 = 0;
          *(_QWORD *)(a2 + 120) = &off_24CA1A9A0;
          *(_QWORD *)(a2 + 128) = 0;
          v64 = 0;
          v65 = 0;
          *(_QWORD *)(a2 + 136) = 0;
          *(_QWORD *)(a2 + 144) = &off_24CA1A9A0;
          *(_QWORD *)(a2 + 152) = 0;
          *(_QWORD *)(a2 + 160) = 0;
          v67 = 0;
          v68 = 0;
          *(_QWORD *)(a2 + 168) = &off_24CA1A9A0;
          *(_QWORD *)(a2 + 176) = 0;
          v70 = 0;
          v71 = 0;
          *(_QWORD *)(a2 + 184) = 0;
          *(_QWORD *)(a2 + 192) = &off_24CA1A9A0;
          *(_QWORD *)(a2 + 200) = 0;
          *(_QWORD *)(a2 + 208) = 0;
          v73 = 0;
          v74 = 0;
          *(_QWORD *)(a2 + 216) = &off_24CA1A9A0;
          *(_QWORD *)(a2 + 224) = 0;
          *(_QWORD *)(a2 + 232) = 0;
          *(_QWORD *)(a2 + 240) = &off_24CA1A9A0;
          *(_QWORD *)(a2 + 248) = 0;
          *(_QWORD *)(a2 + 256) = 0;
          *(_QWORD *)(a2 + 264) = &off_24CA1A9A0;
          *(_QWORD *)(a2 + 272) = 0;
          *(_QWORD *)(a2 + 280) = 0;
          *(_QWORD *)(a2 + 288) = &off_24CA1A9A0;
          *(_QWORD *)(a2 + 296) = 0;
          *(_QWORD *)(a2 + 304) = 0;
          v85 = 0uLL;
          v3 = v86;
          *(__n128 *)(a2 + 312) = v86;
          v84 = &off_24CA1A9A0;
          v7 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
          if (*((_QWORD *)&v85 + 1))
            goto LABEL_12;
          goto LABEL_16;
        }
        __p = operator new(0x50uLL);
        v49 = xmmword_210388250;
        strcpy((char *)__p, "Number of Keypoints should be smaller or equal than max number of keypoints");
        v3.n128_f64[0] = sub_20EEBC430(a2, (uint64_t *)&__p);
      }
      else
      {
        __p = operator new(0x38uLL);
        v49 = xmmword_2102DCA30;
        strcpy((char *)__p, "Number of octaves is out of limits in data extraction");
        v3.n128_f64[0] = sub_20EEBC430(a2, (uint64_t *)&__p);
      }
    }
    else
    {
      __p = operator new(0x38uLL);
      v49 = xmmword_2102DCEA0;
      strcpy((char *)__p, "Input Image Height in data extraction is out of limits");
      v3.n128_f64[0] = sub_20EEBC430(a2, (uint64_t *)&__p);
    }
  }
  else
  {
    __p = operator new(0x38uLL);
    v49 = xmmword_2102DCA30;
    strcpy((char *)__p, "Input Image Width in data extraction is out of limits");
    v3.n128_f64[0] = sub_20EEBC430(a2, (uint64_t *)&__p);
  }
  if (SHIBYTE(v49) < 0)
    operator delete(__p);
  v84 = &off_24CA1A9A0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
LABEL_12:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v3);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_16:
  v81 = &off_24CA1A9A0;
  v10 = v83;
  if (v83)
  {
    v11 = (unint64_t *)&v83->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v3);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v78 = &off_24CA1A9A0;
  v13 = v80;
  if (v80)
  {
    v14 = (unint64_t *)&v80->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v3);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v75 = &off_24CA1A9A0;
  v16 = v77;
  if (v77)
  {
    v17 = (unint64_t *)&v77->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v3);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v72 = &off_24CA1A9A0;
  v19 = v74;
  if (v74)
  {
    v20 = (unint64_t *)&v74->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v19->__on_zero_shared)(v19, v3);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v69 = &off_24CA1A9A0;
  v22 = v71;
  if (v71)
  {
    v23 = (unint64_t *)&v71->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v3);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v66 = &off_24CA1A9A0;
  v25 = v68;
  if (v68)
  {
    v26 = (unint64_t *)&v68->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v25->__on_zero_shared)(v25, v3);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v63 = &off_24CA1A9A0;
  v28 = v65;
  if (v65)
  {
    v29 = (unint64_t *)&v65->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v28->__on_zero_shared)(v28, v3);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v60 = &off_24CA1A9A0;
  v31 = v62;
  if (v62)
  {
    v32 = (unint64_t *)&v62->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v31->__on_zero_shared)(v31, v3);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v57 = &off_24CA1A9A0;
  v34 = v59;
  if (v59)
  {
    v35 = (unint64_t *)&v59->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v34->__on_zero_shared)(v34, v3);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v54 = &off_24CA1A9A0;
  v37 = v56;
  if (v56)
  {
    v38 = (unint64_t *)&v56->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v37->__on_zero_shared)(v37, v3);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v51 = &off_24CA1A9A0;
  v40 = v53;
  if (v53)
  {
    v41 = (unint64_t *)&v53->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v40->__on_zero_shared)(v40, v3);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_20EEBC3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_20EE9F5B0(&a15);
    _Unwind_Resume(a1);
  }
  sub_20EE9F5B0(&a15);
  _Unwind_Resume(a1);
}

double sub_20EEBC430(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  double result;
  __uint64_t v15[2];
  int v16;
  _QWORD v17[3];
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  void *__p;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = sub_210219C18();
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v16 = 136315138;
    v17[0] = v5;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v15[0] = 0;
    pthread_threadid_np(0, v15);
    v10 = v15[0];
    timespec_get((timespec *)v15, 1);
    sub_210219E20(&v16, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "PixelBufferExtractionErr:Type:%s", 0x20uLL, v8, v9, v10, v15);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v13 + 48))(v13, &v16);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v28 < 0)
    {
      operator delete(__p);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_11:
        if (!v24)
        {
LABEL_17:
          if (v21 && v20 < 0)
            operator delete(v19);
          if (v18 < 0)
            operator delete(*(void **)((char *)v17 + 4));
          if (v8)
            free(v8);
          goto LABEL_24;
        }
LABEL_15:
        if (v23 < 0)
          operator delete(v22);
        goto LABEL_17;
      }
    }
    else if ((v26 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v25);
    if (!v24)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_24:
  if (os_signpost_enabled((os_log_t)*v4))
  {
    v16 = 136315138;
    v17[0] = v5;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = &off_24CA1A9A0;
  result = 0.0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  return result;
}

void sub_20EEBC76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
LABEL_7:
  if (a34 < 0)
    operator delete(a29);
LABEL_9:
  if (a28)
  {
    if (a27 < 0)
      operator delete(a22);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if (!v47)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v47)
  {
    goto LABEL_14;
  }
  free(v47);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEBC828@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char __p[21];
  char v14;
  __int128 v15[2];

  v14 = 20;
  strcpy(__p, "RangingManagerConfig");
  sub_20E8B30B4(a2, (__int128 *)__p, 180, 160);
  if (v14 < 0)
    operator delete(*(void **)__p);
  *(_QWORD *)__p = nullsub_1(a2);
  v4 = sub_20EAA1CB0((unint64_t *)a1);
  sub_20E8B2F9C((uint64_t *)__p, "RangingManagerConfig.minimal_required_range_size", v4, "Minimal number of range measurements needed to run range-based trajectory alignment.");
  *(_QWORD *)__p = nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)__p, "RangingManagerConfig.minimal_required_time_interval", v5, "Minimal time interval of range measurements needed to run range-based trajectory alignment, in seconds.");
  *(_QWORD *)__p = nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)__p, "RangingManagerConfig.enable_ranging_relocalization", v6, "Enable relocalization based on ranging measurements.");
  *(_QWORD *)__p = nullsub_1(a2);
  v7 = sub_20EB8894C(a1 + 24);
  sub_20E8B2F9C((uint64_t *)__p, "RangingManagerConfig.ranging_results_output_dir", v7, "Directory saving the outputed global & local transforms. It's empty by default, and no file will be outputed. If it's non-empty, result transforms from ranging will be saved in the directory every time it succeeds, and NO actual range-based re-localization will be performed.");
  *(_QWORD *)__p = nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)__p, "RangingManagerConfig.enable_motion_analyzer", v8, "Enable motion analyzer or not.");
  BYTE7(v15[1]) = 20;
  strcpy((char *)v15, "MotionAnalyzerConfig");
  sub_20E8B30B4(__p, v15, 80, 40);
  if (SBYTE7(v15[1]) < 0)
    operator delete(*(void **)&v15[0]);
  *(_QWORD *)&v15[0] = nullsub_1(__p);
  v9 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)v15, "MotionAnalyzerConfig.sliding_window_time", v9, "Max time interval that will be used to analyze motions.");
  *(_QWORD *)&v15[0] = nullsub_1(__p);
  v10 = sub_20EA9DCF0((unsigned int *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)v15, "MotionAnalyzerConfig.size_min", v10, "Minimal size of motions that will be needed to start analyzing motions.");
  *(_QWORD *)&v15[0] = nullsub_1(__p);
  v11 = sub_20EA9DB90((double *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)v15, "MotionAnalyzerConfig.eigen_sqrt_sum_threshold", v11, "Threshold on the sum of square root of eigenvalues. Unit: meter.");
  sub_20E8B32F0(a2, (uint64_t)__p);
  return sub_20E869298((uint64_t)__p);
}

void sub_20EEBCA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v14);
  _Unwind_Resume(a1);
}

void sub_20EEBCB18()
{
  JUMPOUT(0x20EEBCB08);
}

void sub_20EEBCB20()
{
  JUMPOUT(0x20EEBCB08);
}

void sub_20EEBCB28()
{
  JUMPOUT(0x20EEBCB08);
}

void sub_20EEBCB30()
{
  JUMPOUT(0x20EEBCB08);
}

void sub_20EEBCB38()
{
  JUMPOUT(0x20EEBCB08);
}

uint64_t *sub_20EEBCB40(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  _QWORD *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 80) = 0;
  v3 = (char *)operator new(0x308uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_24C9F0498;
  bzero(v3 + 152, 0x270uLL);
  *((_QWORD *)v3 + 3) = 850045863;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_QWORD *)v3 + 10) = 0;
  *((_QWORD *)v3 + 11) = 850045863;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *(_OWORD *)(v3 + 137) = 0u;
  v3[456] = 1;
  v3[768] = 1;
  *(_QWORD *)v2 = v3 + 24;
  *(_QWORD *)(v2 + 8) = v3;
  *(_BYTE *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  sub_20EF4B408((_QWORD *)(v2 + 72));
  *a1 = v2;
  a1[1] = (uint64_t)sub_20EEBD3D0;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F04E8;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v7 = *(_QWORD **)(v2 + 72);
  if (v7)
  {
    v7[4] = sub_20EEBD478;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (std::__shared_weak_count *)v7[3];
    v7[2] = v4 + 1;
    v7[3] = v4;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_20EEBCCFC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  sub_20EEBD3D0(v2);
  _Unwind_Resume(a1);
}

void sub_20EEBCD14(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  MEMORY[0x212BC6398](v1, 0x1020C40B6137A91);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEBCD78(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  sub_20E86872C(a1 + 88, *(_QWORD **)(a1 + 96));
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(void ***)(a1 + 48);
    if (v2)
    {
      do
      {
        v5 = (void **)*v2;
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    v3 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_20EEBCDF4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int16 v5;
  uint64_t **v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t ***v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  __int128 *v22;
  __int128 *v23;

  v4 = *a2;
  *(_OWORD *)(a1 + 10) = *(__int128 *)((char *)a2 + 10);
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    sub_20EAA6AA8(a1 + 32, (uint64_t)(a2 + 2));
    *(_BYTE *)(a1 + 72) = 1;
  }
  v5 = *((_WORD *)a2 + 40);
  *(_QWORD *)(a1 + 96) = 0;
  v6 = (uint64_t **)(a1 + 96);
  *(_WORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  v7 = (__int128 *)*((_QWORD *)a2 + 11);
  v8 = a2 + 6;
  if (v7 != a2 + 6)
  {
    v9 = (uint64_t ***)(a1 + 88);
    while (1)
    {
      v10 = *v6;
      v11 = (uint64_t *)(a1 + 96);
      if (*v9 != v6)
      {
        v12 = *v6;
        v13 = (uint64_t *)(a1 + 96);
        if (v10)
        {
          do
          {
            v11 = v12;
            v12 = (uint64_t *)v12[1];
          }
          while (v12);
        }
        else
        {
          do
          {
            v11 = (uint64_t *)v13[2];
            v14 = *v11 == (_QWORD)v13;
            v13 = v11;
          }
          while (v14);
        }
        v15 = *((_DWORD *)v7 + 7);
        if (*((_DWORD *)v11 + 7) >= v15)
          break;
      }
      if (v10)
        v16 = (uint64_t **)v11;
      else
        v16 = (uint64_t **)(a1 + 96);
      if (v10)
        v17 = (uint64_t **)(v11 + 1);
      else
        v17 = (uint64_t **)(a1 + 96);
      if (!*v17)
        goto LABEL_27;
LABEL_30:
      v22 = (__int128 *)*((_QWORD *)v7 + 1);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(__int128 **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (__int128 *)*((_QWORD *)v7 + 2);
          v14 = *(_QWORD *)v23 == (_QWORD)v7;
          v7 = v23;
        }
        while (!v14);
      }
      v7 = v23;
      if (v23 == v8)
        return a1;
    }
    v17 = (uint64_t **)(a1 + 96);
    v16 = (uint64_t **)(a1 + 96);
    if (v10)
    {
      v18 = *v6;
      while (1)
      {
        while (1)
        {
          v16 = (uint64_t **)v18;
          v19 = *((_DWORD *)v18 + 7);
          if (v19 <= v15)
            break;
          v18 = *v16;
          v17 = v16;
          if (!*v16)
            goto LABEL_27;
        }
        if (v19 >= v15)
          goto LABEL_30;
        v18 = v16[1];
        if (!v18)
        {
          v17 = v16 + 1;
          break;
        }
      }
    }
LABEL_27:
    v20 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v20 + 28) = *(_QWORD *)((char *)v7 + 28);
    *v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v16;
    *v17 = v20;
    v21 = **v9;
    if (v21)
    {
      *v9 = (uint64_t **)v21;
      v20 = *v17;
    }
    sub_20E868578(*(uint64_t **)(a1 + 96), v20);
    ++*(_QWORD *)(a1 + 104);
    goto LABEL_30;
  }
  return a1;
}

void sub_20EEBCFD4(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v4;
  void *v5;
  void **v6;

  if (*(_BYTE *)(v2 + 72))
  {
    v4 = *(void ***)(v2 + 48);
    if (v4)
    {
      do
      {
        v6 = (void **)*v4;
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
        operator delete(v4);
        v4 = v6;
      }
      while (v6);
    }
    v5 = *v1;
    *v1 = 0;
    if (v5)
      operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EEBD028(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_20E86872C(v2, v3);
  sub_20EAFDBE8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEBD048(int a1, unsigned int __val, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  _BYTE v7[24];
  int v8;
  std::string v9;
  std::string **v10;
  std::string *v11;
  std::string *v12;
  _BYTE *v13;
  std::string *v14;
  std::string *v15;

  v8 = 0;
  std::to_string(&v9, __val);
  v11 = (std::string *)v7;
  v12 = &v9;
  v13 = v7;
  v14 = &v9;
  v15 = &v9;
  v10 = &v11;
  ((void (*)(std::string ***, _BYTE *))sub_20E877EA0)(&v10, v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v11 = (std::string *)v7;
  v12 = (std::string *)" (";
  v13 = v7;
  v14 = (std::string *)" (";
  v15 = (std::string *)" (";
  if (v8 == -1)
    sub_20E877AB8();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _BYTE *))off_24C9F0440[v8])(&v9, v7);
  std::to_string(&v9, *a3);
  v11 = (std::string *)v7;
  v12 = &v9;
  v13 = v7;
  v14 = &v9;
  v15 = &v9;
  if (v8 == -1)
    sub_20E877AB8();
  v10 = &v11;
  ((void (*)(std::string ***, _BYTE *))off_24C9F0410[v8])(&v10, v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v11 = (std::string *)v7;
  v12 = (std::string *)"Fr|";
  v13 = v7;
  v14 = (std::string *)"Fr|";
  v15 = (std::string *)"Fr|";
  if (v8 == -1)
    sub_20E877AB8();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _BYTE *))off_24C9F0458[v8])(&v9, v7);
  std::to_string(&v9, *a4);
  v11 = (std::string *)v7;
  v12 = &v9;
  v13 = v7;
  v14 = &v9;
  v15 = &v9;
  if (v8 == -1)
    sub_20E877AB8();
  v10 = &v11;
  ((void (*)(std::string ***, _BYTE *))off_24C9F0410[v8])(&v10, v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v11 = (std::string *)v7;
  v12 = (std::string *)"ML)";
  v13 = v7;
  v14 = (std::string *)"ML)";
  v15 = (std::string *)"ML)";
  if (v8 == -1)
    sub_20E877AB8();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _BYTE *))off_24C9F0458[v8])(&v9, v7);
  if (v8 == -1)
    sub_20E877AB8();
  v11 = &v9;
  result = ((uint64_t (*)(std::string **, _BYTE *))off_24C9F0470[v8])(&v11, v7);
  if (v8 != -1)
    return ((uint64_t (*)(std::string **, _BYTE *))off_24C9F0428[v8])(&v11, v7);
  return result;
}

void sub_20EEBD2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20EEBD330(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F0498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EEBD340(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F0498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EEBD370(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 768) && *(_BYTE *)(a1 + 760))
    sub_20EAA69B4(a1 + 464);
  if (*(_BYTE *)(a1 + 456) && *(_BYTE *)(a1 + 448))
    sub_20EAA69B4(a1 + 152);
  std::mutex::~mutex((std::mutex *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t sub_20EEBD3D0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (result)
  {
    v1 = result;
    v2 = *(std::__shared_weak_count **)(result + 80);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EEBD478(std::__shared_weak_count_vtbl *a1, uint64_t ***a2)
{
  uint64_t **v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::mutex **v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  std::string::size_type v29;
  std::string *p_dst;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  std::string::size_type *v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type v40;
  uint64_t v41;
  int v42;
  std::string::size_type v43;
  std::string *v44;
  unint64_t v45;
  unint64_t v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  std::string *v50;
  std::string::size_type v51;
  std::string::size_type v52;
  uint64_t v53;
  int v54;
  std::string::size_type v55;
  std::string *v56;
  unint64_t v57;
  unint64_t v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  std::string *v62;
  std::string::size_type v63;
  std::string::size_type v64;
  void **v65;
  void *v66;
  char *v67;
  char *v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  double *i;
  double v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  int v84[2];
  int __val[2];
  double v86;
  void *__p;
  void *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  _QWORD *v93;
  __int128 v94[7];
  __int128 v95;
  int v96;
  char *v97;
  char *v98;
  char *v99;
  char v100[16];
  double *v101;
  char v102;
  char *v103;
  char *v104;
  char *v105;
  __int128 v106;
  char *v107;
  char *v108;
  char *v109;
  __int128 v110;
  char v111;
  char v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  std::string __dst;
  std::string **v118;
  char v119;
  void *v120[2];
  char v121;
  int v122;
  std::string *v123;
  std::string *v124;
  void **v125;
  std::string *v126;
  std::string *v127;
  char v128;
  char v129[9];

  if (!a2)
    return;
  sub_20EF4B2E0(&v80, a1);
  v3 = *a2;
  v82 = v80;
  v83 = v81;
  if (v81)
  {
    p_shared_owners = (unint64_t *)&v81->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = **v3;
  v7 = (std::mutex **)operator new();
  *v7 = (std::mutex *)(v6 + 64);
  std::mutex::lock((std::mutex *)(v6 + 64));
  *(_QWORD *)v84 = v7;
  *(_QWORD *)__val = v6 + 440;
  if (!*(_BYTE *)(v6 + 744))
    sub_20E866B34();
  LOBYTE(v94[0]) = 0;
  v112 = 0;
  if (*(_BYTE *)(v6 + 736))
  {
    sub_20EEBCDF4((uint64_t)v94, (__int128 *)(v6 + 440));
    v96 = *(_DWORD *)(v6 + 568);
    v95 = *(_OWORD *)(v6 + 552);
    v98 = 0;
    v99 = 0;
    v97 = 0;
    v8 = *(_BYTE **)(v6 + 576);
    v9 = *(_BYTE **)(v6 + 584);
    v10 = v9 - v8;
    if (v9 != v8)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v10 >> 3) >= 0x666666666666667)
        sub_20EAA7068();
      v97 = (char *)operator new(v10);
      v98 = v97;
      v11 = &v97[8 * (v10 >> 3)];
      v99 = v11;
      memcpy(v97, v8, v10 - 7);
      v98 = v11;
    }
    v100[0] = 0;
    v102 = 0;
    if (*(_BYTE *)(v6 + 640))
    {
      sub_20EAA6AA8((uint64_t)v100, v6 + 600);
      v102 = 1;
    }
    v103 = 0;
    v104 = 0;
    v105 = 0;
    v12 = *(_QWORD *)(v6 + 648);
    v13 = *(_QWORD *)(v6 + 656);
    v14 = v13 - v12;
    if (v13 != v12)
    {
      v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 3);
      if (v15 >= 0xAAAAAAAAAAAAAABLL)
        sub_20E867F44();
      v16 = (char *)operator new(v14);
      v17 = 0;
      v103 = v16;
      v104 = v16;
      v105 = &v16[24 * v15];
      do
      {
        v18 = v12 + v17;
        v19 = &v16[v17];
        *(_QWORD *)v19 = *(_QWORD *)(v12 + v17);
        *(_OWORD *)(v19 + 8) = *(_OWORD *)(v12 + v17 + 8);
        v17 += 24;
      }
      while (v18 + 24 != v13);
      v104 = &v16[v17];
    }
    v106 = *(_OWORD *)(v6 + 672);
    v108 = 0;
    v109 = 0;
    v107 = 0;
    v20 = *(_QWORD *)(v6 + 688);
    v21 = *(_QWORD *)(v6 + 696);
    v22 = v21 - v20;
    if (v21 != v20)
    {
      if (v22 < 0)
        sub_20EAA7068();
      v23 = (char *)operator new(v21 - v20);
      v24 = 0;
      v107 = v23;
      v109 = &v23[16 * (v22 >> 4)];
      do
      {
        v25 = v20 + v24;
        v26 = &v23[v24];
        *(_DWORD *)v26 = *(_DWORD *)(v20 + v24);
        *((_QWORD *)v26 + 1) = *(_QWORD *)(v20 + v24 + 8);
        v24 += 16;
      }
      while (v25 + 16 != v21);
      v108 = &v23[v24];
    }
    v111 = *(_BYTE *)(v6 + 728);
    v110 = *(_OWORD *)(v6 + 712);
    v112 = 1;
  }
  std::mutex::unlock(*v7);
  MEMORY[0x212BC6398](v7, 0x20C4093837F09);
  if (v112)
  {
    sub_20EEBCDF4((uint64_t)v84, v94);
    v122 = 0;
    v27 = operator new();
    *(_QWORD *)(v27 + 272) = 0;
    *(_OWORD *)(v27 + 240) = 0u;
    *(_OWORD *)(v27 + 256) = 0u;
    *(_OWORD *)(v27 + 208) = 0u;
    *(_OWORD *)(v27 + 224) = 0u;
    *(_OWORD *)(v27 + 176) = 0u;
    *(_OWORD *)(v27 + 192) = 0u;
    *(_OWORD *)(v27 + 144) = 0u;
    *(_OWORD *)(v27 + 160) = 0u;
    *(_OWORD *)(v27 + 112) = 0u;
    *(_OWORD *)(v27 + 128) = 0u;
    *(_OWORD *)(v27 + 80) = 0u;
    *(_OWORD *)(v27 + 96) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_OWORD *)(v27 + 64) = 0u;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)v27 = 0u;
    sub_20E863438(v27);
    v123 = (std::string *)v27;
    sub_20F3E8F30((_QWORD *)(v27 + 16), v84);
    v28 = *(_DWORD *)(v27 + 120);
    if ((v28 & 0x10) != 0)
    {
      v31 = *(_QWORD *)(v27 + 112);
      v32 = *(_QWORD *)(v27 + 72);
      if (v31 < v32)
      {
        *(_QWORD *)(v27 + 112) = v32;
        v31 = v32;
      }
      v33 = *(const void **)(v27 + 64);
      v29 = v31 - (_QWORD)v33;
      if (v31 - (unint64_t)v33 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_139;
    }
    else
    {
      if ((v28 & 8) == 0)
      {
        v29 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        p_dst = &__dst;
        goto LABEL_37;
      }
      v33 = *(const void **)(v27 + 40);
      v29 = *(_QWORD *)(v27 + 56) - (_QWORD)v33;
      if (v29 > 0x7FFFFFFFFFFFFFF7)
LABEL_139:
        sub_20E860B7C();
    }
    if (v29 >= 0x17)
    {
      v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v34 = v29 | 7;
      v35 = v34 + 1;
      p_dst = (std::string *)operator new(v34 + 1);
      __dst.__r_.__value_.__l.__size_ = v29;
      __dst.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v29;
      p_dst = &__dst;
      if (!v29)
      {
LABEL_37:
        p_dst->__r_.__value_.__s.__data_[v29] = 0;
        v36 = v123;
        v37 = (std::string::size_type *)MEMORY[0x24BEDB7F0];
        v38 = MEMORY[0x24BEDB848];
        if (v123)
        {
          v39 = *MEMORY[0x24BEDB7F0];
          v123->__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
          v40 = v37[9];
          *(std::string::size_type *)((char *)v36->__r_.__value_.__r.__words + *(_QWORD *)(v39 - 24)) = v37[8];
          v36[1].__r_.__value_.__r.__words[0] = v38 + 16;
          v36->__r_.__value_.__r.__words[2] = v40;
          if (v36[4].__r_.__value_.__s.__data_[15] < 0)
            operator delete((void *)v36[3].__r_.__value_.__r.__words[2]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x212BC6290](&v36[5].__r_.__value_.__r.__words[1]);
          MEMORY[0x212BC6398](v36, 0x10B2C40EED050F3);
        }
        v123 = (std::string *)v120;
        v124 = &__dst;
        v125 = v120;
        v126 = &__dst;
        v127 = &__dst;
        if (v122 == -1)
          sub_20E877AB8();
        v115[0] = &v123;
        ((void (*)(void **, void **))off_24C9F0410[v122])(v115, v120);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v122 == -1)
          sub_20E877AB8();
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
        ((void (*)(std::string **__return_ptr, std::string *, void **))off_24C9F0470[v122])(&v123, &__dst, v120);
        if (v122 != -1)
          ((void (*)(std::string *, void **))off_24C9F0428[v122])(&__dst, v120);
        if (SHIBYTE(v125) < 0)
          operator delete(v123);
        v122 = 0;
        v41 = operator new();
        *(_QWORD *)(v41 + 272) = 0;
        *(_OWORD *)(v41 + 240) = 0u;
        *(_OWORD *)(v41 + 256) = 0u;
        *(_OWORD *)(v41 + 208) = 0u;
        *(_OWORD *)(v41 + 224) = 0u;
        *(_OWORD *)(v41 + 176) = 0u;
        *(_OWORD *)(v41 + 192) = 0u;
        *(_OWORD *)(v41 + 144) = 0u;
        *(_OWORD *)(v41 + 160) = 0u;
        *(_OWORD *)(v41 + 112) = 0u;
        *(_OWORD *)(v41 + 128) = 0u;
        *(_OWORD *)(v41 + 80) = 0u;
        *(_OWORD *)(v41 + 96) = 0u;
        *(_OWORD *)(v41 + 48) = 0u;
        *(_OWORD *)(v41 + 64) = 0u;
        *(_OWORD *)(v41 + 16) = 0u;
        *(_OWORD *)(v41 + 32) = 0u;
        *(_OWORD *)v41 = 0u;
        sub_20E863438(v41);
        v123 = (std::string *)v41;
        if ((unint64_t)v90 > 2)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquares/src/ConservativeTrackingMode.cpp", 43, (uint64_t)&unk_2102C7907, 0, (uint64_t)"Unknown Mode", 12, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        sub_20E86A980((_QWORD *)(v41 + 16), (uint64_t)off_24C9F0540[v90], *(_QWORD *)&asc_2103883C8[8 * v90]);
        v42 = *(_DWORD *)(v41 + 120);
        if ((v42 & 0x10) != 0)
        {
          v45 = *(_QWORD *)(v41 + 112);
          v46 = *(_QWORD *)(v41 + 72);
          if (v45 < v46)
          {
            *(_QWORD *)(v41 + 112) = v46;
            v45 = v46;
          }
          v47 = *(const void **)(v41 + 64);
          v43 = v45 - (_QWORD)v47;
          if (v45 - (unint64_t)v47 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_141;
        }
        else
        {
          if ((v42 & 8) == 0)
          {
            v43 = 0;
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
            v44 = &__dst;
            goto LABEL_63;
          }
          v70 = *(_QWORD *)(v41 + 56);
          v47 = *(const void **)(v41 + 40);
          v43 = v70 - (_QWORD)v47;
          if ((unint64_t)(v70 - (_QWORD)v47) > 0x7FFFFFFFFFFFFFF7)
LABEL_141:
            sub_20E860B7C();
        }
        if (v43 >= 0x17)
        {
          v48 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v43 | 7) != 0x17)
            v48 = v43 | 7;
          v49 = v48 + 1;
          v44 = (std::string *)operator new(v48 + 1);
          __dst.__r_.__value_.__l.__size_ = v43;
          __dst.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v43;
          v44 = &__dst;
          if (!v43)
          {
LABEL_63:
            v44->__r_.__value_.__s.__data_[v43] = 0;
            v50 = v123;
            if (v123)
            {
              v51 = *v37;
              v123->__r_.__value_.__r.__words[0] = *v37;
              v52 = v37[9];
              *(std::string::size_type *)((char *)v50->__r_.__value_.__r.__words + *(_QWORD *)(v51 - 24)) = v37[8];
              v50[1].__r_.__value_.__r.__words[0] = v38 + 16;
              v50->__r_.__value_.__r.__words[2] = v52;
              if (v50[4].__r_.__value_.__s.__data_[15] < 0)
                operator delete((void *)v50[3].__r_.__value_.__r.__words[2]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x212BC6290](&v50[5].__r_.__value_.__r.__words[1]);
              MEMORY[0x212BC6398](v50, 0x10B2C40EED050F3);
            }
            v123 = (std::string *)v120;
            v124 = &__dst;
            v125 = v120;
            v126 = &__dst;
            v127 = &__dst;
            if (v122 == -1)
              sub_20E877AB8();
            v115[0] = &v123;
            ((void (*)(void **, void **))off_24C9F0410[v122])(v115, v120);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (v122 == -1)
              sub_20E877AB8();
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
            ((void (*)(std::string **__return_ptr, std::string *, void **))off_24C9F0470[v122])(&v123, &__dst, v120);
            if (v122 != -1)
              ((void (*)(std::string *, void **))off_24C9F0428[v122])(&__dst, v120);
            if (SHIBYTE(v125) < 0)
              operator delete(v123);
            v122 = 0;
            sub_20E87876C((uint64_t)v113, (uint64_t)v120, &v86);
            v123 = (std::string *)v120;
            v124 = (std::string *)"Hz";
            v125 = v120;
            v126 = (std::string *)"Hz";
            v127 = (std::string *)"Hz";
            if (v122 == -1)
              sub_20E877AB8();
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
            ((void (*)(std::string *, void **))off_24C9F0440[v122])(&__dst, v120);
            if (v122 == -1)
              sub_20E877AB8();
            v123 = &__dst;
            ((void (*)(void **__return_ptr, std::string **, void **))off_24C9F0470[v122])(v115, &v123, v120);
            if (v122 != -1)
              ((void (*)(std::string **, void **))off_24C9F0428[v122])(&v123, v120);
            v122 = 0;
            std::to_string(&__dst, __val[0]);
            v123 = (std::string *)v120;
            v124 = &__dst;
            v125 = v120;
            v126 = &__dst;
            v127 = &__dst;
            if (v122 == -1)
              sub_20E877AB8();
            v118 = &v123;
            ((void (*)(std::string ***, void **))off_24C9F0410[v122])(&v118, v120);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            v123 = (std::string *)v120;
            v124 = (std::string *)"/";
            v125 = v120;
            v126 = (std::string *)"/";
            v127 = (std::string *)"/";
            if (v122 == -1)
              sub_20E877AB8();
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
            ((void (*)(std::string *, void **))off_24C9F0528[v122])(&__dst, v120);
            std::to_string(&__dst, v84[1]);
            v123 = (std::string *)v120;
            v124 = &__dst;
            v125 = v120;
            v126 = &__dst;
            v127 = &__dst;
            if (v122 == -1)
              sub_20E877AB8();
            v118 = &v123;
            ((void (*)(std::string ***, void **))off_24C9F0410[v122])(&v118, v120);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (v122 == -1)
              sub_20E877AB8();
            v123 = &__dst;
            ((void (*)(void **__return_ptr, std::string **, void **))off_24C9F0470[v122])(v113, &v123, v120);
            if (v122 != -1)
              ((void (*)(std::string **, void **))off_24C9F0428[v122])(&v123, v120);
            v122 = 0;
            v53 = operator new();
            *(_QWORD *)(v53 + 272) = 0;
            *(_OWORD *)(v53 + 240) = 0u;
            *(_OWORD *)(v53 + 256) = 0u;
            *(_OWORD *)(v53 + 208) = 0u;
            *(_OWORD *)(v53 + 224) = 0u;
            *(_OWORD *)(v53 + 176) = 0u;
            *(_OWORD *)(v53 + 192) = 0u;
            *(_OWORD *)(v53 + 144) = 0u;
            *(_OWORD *)(v53 + 160) = 0u;
            *(_OWORD *)(v53 + 112) = 0u;
            *(_OWORD *)(v53 + 128) = 0u;
            *(_OWORD *)(v53 + 80) = 0u;
            *(_OWORD *)(v53 + 96) = 0u;
            *(_OWORD *)(v53 + 48) = 0u;
            *(_OWORD *)(v53 + 64) = 0u;
            *(_OWORD *)(v53 + 16) = 0u;
            *(_OWORD *)(v53 + 32) = 0u;
            *(_OWORD *)v53 = 0u;
            sub_20E863438(v53);
            v123 = (std::string *)v53;
            if ((unint64_t)v91 > 2)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/src/SlamMode.cpp", 39, (uint64_t)"", 0, (uint64_t)"Unknown Mode", 12, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            sub_20E86A980((_QWORD *)(v53 + 16), (uint64_t)off_24C9F0558[v91], qword_2103883E0[v91]);
            v54 = *(_DWORD *)(v53 + 120);
            if ((v54 & 0x10) != 0)
            {
              v57 = *(_QWORD *)(v53 + 112);
              v58 = *(_QWORD *)(v53 + 72);
              if (v57 < v58)
              {
                *(_QWORD *)(v53 + 112) = v58;
                v57 = v58;
              }
              v59 = *(const void **)(v53 + 64);
              v55 = v57 - (_QWORD)v59;
              if (v57 - (unint64_t)v59 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_143;
            }
            else
            {
              if ((v54 & 8) == 0)
              {
                v55 = 0;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
                v56 = &__dst;
                goto LABEL_103;
              }
              v71 = *(_QWORD *)(v53 + 56);
              v59 = *(const void **)(v53 + 40);
              v55 = v71 - (_QWORD)v59;
              if ((unint64_t)(v71 - (_QWORD)v59) > 0x7FFFFFFFFFFFFFF7)
LABEL_143:
                sub_20E860B7C();
            }
            if (v55 >= 0x17)
            {
              v60 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v55 | 7) != 0x17)
                v60 = v55 | 7;
              v61 = v60 + 1;
              v56 = (std::string *)operator new(v60 + 1);
              __dst.__r_.__value_.__l.__size_ = v55;
              __dst.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v55;
              v56 = &__dst;
              if (!v55)
              {
LABEL_103:
                v56->__r_.__value_.__s.__data_[v55] = 0;
                v62 = v123;
                if (v123)
                {
                  v63 = *v37;
                  v123->__r_.__value_.__r.__words[0] = *v37;
                  v64 = v37[9];
                  *(std::string::size_type *)((char *)v62->__r_.__value_.__r.__words + *(_QWORD *)(v63 - 24)) = v37[8];
                  v62[1].__r_.__value_.__r.__words[0] = v38 + 16;
                  v62->__r_.__value_.__r.__words[2] = v64;
                  if (v62[4].__r_.__value_.__s.__data_[15] < 0)
                    operator delete((void *)v62[3].__r_.__value_.__r.__words[2]);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&v62[5].__r_.__value_.__r.__words[1]);
                  MEMORY[0x212BC6398](v62, 0x10B2C40EED050F3);
                }
                v123 = (std::string *)v120;
                v124 = &__dst;
                v125 = v120;
                v126 = &__dst;
                v127 = &__dst;
                if (v122 == -1)
                  sub_20E877AB8();
                v118 = &v123;
                ((void (*)(std::string ***, void **))off_24C9F0410[v122])(&v118, v120);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                if (v122 == -1)
                  sub_20E877AB8();
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
                ((void (*)(std::string **__return_ptr, std::string *, void **))off_24C9F0470[v122])(&v123, &__dst, v120);
                if (v122 != -1)
                  ((void (*)(std::string *, void **))off_24C9F0428[v122])(&__dst, v120);
                if (SHIBYTE(v125) < 0)
                  operator delete(v123);
                sub_20E9F6A6C((unsigned int *)&__val[1]);
                if (SHIBYTE(v125) < 0)
                {
                  operator delete(v123);
                  if ((v114 & 0x80000000) == 0)
                  {
LABEL_117:
                    if ((v116 & 0x80000000) == 0)
                      goto LABEL_118;
                    goto LABEL_122;
                  }
                }
                else if ((v114 & 0x80000000) == 0)
                {
                  goto LABEL_117;
                }
                operator delete(v113[0]);
                if ((v116 & 0x80000000) == 0)
                {
LABEL_118:
                  sub_20E86872C((uint64_t)&v92, v93);
                  if (!v89)
                    goto LABEL_126;
LABEL_123:
                  v65 = (void **)v88;
                  if (v88)
                  {
                    do
                    {
                      v69 = (void **)*v65;
                      if (*((char *)v65 + 39) < 0)
                        operator delete(v65[2]);
                      operator delete(v65);
                      v65 = v69;
                    }
                    while (v69);
                  }
                  v66 = __p;
                  __p = 0;
                  if (v66)
                    operator delete(v66);
LABEL_126:
                  sub_20EEBD048((int)v120, DWORD1(v95) + v95, (unsigned int *)&v95 + 1, (unsigned int *)&v95);
                  sub_20EEBD048((int)&__dst, HIDWORD(v95) + DWORD2(v95), (unsigned int *)&v95 + 3, (unsigned int *)&v95 + 2);
                  if (!v111)
                    goto LABEL_131;
                  LODWORD(v126) = 0;
                  sub_20E87876C((uint64_t)v113, (uint64_t)&v123, (double *)&v110 + 1);
                  if ((_DWORD)v126 == -1)
                    sub_20E877AB8();
                  v113[0] = &v118;
                  ((void (*)(void **__return_ptr, void **, std::string **))off_24C9F0470[v126])(v115, v113, &v123);
                  if ((_DWORD)v126 != -1)
                    ((void (*)(void **, std::string **))off_24C9F0428[v126])(v113, &v123);
                  if (v116 < 0)
                  {
                    operator delete(v115[0]);
                    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_132:
                      if ((v121 & 0x80000000) == 0)
                        goto LABEL_133;
LABEL_146:
                      operator delete(v120[0]);
                      v67 = v97;
                      v68 = v98;
                      if (v97 == v98)
                      {
LABEL_179:
                        if (v102)
                        {
                          for (i = v101; i; i = *(double **)i)
                          {
                            v115[0] = *((void **)i + 9);
                            v73 = i[7];
                            v113[0] = *((void **)i + 8);
                            v118 = *(std::string ***)&v73;
                            v122 = 0;
                            sub_20E87876C((uint64_t)v129, (uint64_t)v120, (double *)v115);
                            v123 = (std::string *)v120;
                            v124 = (std::string *)" [";
                            v125 = v120;
                            v126 = (std::string *)" [";
                            v127 = (std::string *)" [";
                            if (v122 == -1)
                              sub_20E877AB8();
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
                            ((void (*)(std::string *, void **))off_24C9F0440[v122])(&__dst, v120);
                            sub_20E87876C((uint64_t)&v128, (uint64_t)v120, (double *)v113);
                            v123 = (std::string *)v120;
                            v124 = (std::string *)",";
                            v125 = v120;
                            v126 = (std::string *)",";
                            v127 = (std::string *)",";
                            if (v122 == -1)
                              sub_20E877AB8();
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
                            ((void (*)(std::string *, void **))off_24C9F0528[v122])(&__dst, v120);
                            sub_20E87876C((uint64_t)&v119, (uint64_t)v120, (double *)&v118);
                            v123 = (std::string *)v120;
                            v124 = (std::string *)"]";
                            v125 = v120;
                            v126 = (std::string *)"]";
                            v127 = (std::string *)"]";
                            if (v122 == -1)
                              sub_20E877AB8();
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
                            ((void (*)(std::string *, void **))off_24C9F0528[v122])(&__dst, v120);
                            if (v122 == -1)
                              sub_20E877AB8();
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
                            ((void (*)(std::string **__return_ptr, std::string *, void **))off_24C9F0470[v122])(&v123, &__dst, v120);
                            if (v122 != -1)
                              ((void (*)(std::string *, void **))off_24C9F0428[v122])(&__dst, v120);
                            if (SHIBYTE(v125) < 0)
                              operator delete(v123);
                          }
                        }
                        if (v112)
                          sub_20EAA69B4((uint64_t)v94);
                        goto LABEL_193;
                      }
                      while (1)
                      {
LABEL_150:
                        sub_20E9F6CBC((unint64_t *)v67);
                        v122 = 0;
                        sub_20EA5D220(v120, "m:");
                        std::to_string(&__dst, *((_DWORD *)v67 + 2));
                        v123 = (std::string *)v120;
                        v124 = &__dst;
                        v125 = v120;
                        v126 = &__dst;
                        v127 = &__dst;
                        if (v122 == -1)
                          sub_20E877AB8();
                        v118 = &v123;
                        ((void (*)(std::string ***, void **))off_24C9F0410[v122])(&v118, v120);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__dst.__r_.__value_.__l.__data_);
                        v123 = (std::string *)v120;
                        v124 = (std::string *)" r:";
                        v125 = v120;
                        v126 = (std::string *)" r:";
                        v127 = (std::string *)" r:";
                        if (v122 == -1)
                          sub_20E877AB8();
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
                        ((void (*)(std::string *, void **))off_24C9F0458[v122])(&__dst, v120);
                        std::to_string(&__dst, *((_DWORD *)v67 + 4));
                        v123 = (std::string *)v120;
                        v124 = &__dst;
                        v125 = v120;
                        v126 = &__dst;
                        v127 = &__dst;
                        if (v122 == -1)
                          sub_20E877AB8();
                        v118 = &v123;
                        ((void (*)(std::string ***, void **))off_24C9F0410[v122])(&v118, v120);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__dst.__r_.__value_.__l.__data_);
                        v123 = (std::string *)v120;
                        v124 = (std::string *)"/";
                        v125 = v120;
                        v126 = (std::string *)"/";
                        v127 = (std::string *)"/";
                        if (v122 == -1)
                          sub_20E877AB8();
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
                        ((void (*)(std::string *, void **))off_24C9F0528[v122])(&__dst, v120);
                        std::to_string(&__dst, *((_DWORD *)v67 + 3));
                        v123 = (std::string *)v120;
                        v124 = &__dst;
                        v125 = v120;
                        v126 = &__dst;
                        v127 = &__dst;
                        if (v122 == -1)
                          sub_20E877AB8();
                        v118 = &v123;
                        ((void (*)(std::string ***, void **))off_24C9F0410[v122])(&v118, v120);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__dst.__r_.__value_.__l.__data_);
                        v123 = (std::string *)v120;
                        v124 = (std::string *)" e:";
                        v125 = v120;
                        v126 = (std::string *)" e:";
                        v127 = (std::string *)" e:";
                        if (v122 == -1)
                          sub_20E877AB8();
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
                        ((void (*)(std::string *, void **))off_24C9F0458[v122])(&__dst, v120);
                        std::to_string(&__dst, *((_DWORD *)v67 + 6));
                        v123 = (std::string *)v120;
                        v124 = &__dst;
                        v125 = v120;
                        v126 = &__dst;
                        v127 = &__dst;
                        if (v122 == -1)
                          sub_20E877AB8();
                        v118 = &v123;
                        ((void (*)(std::string ***, void **))off_24C9F0410[v122])(&v118, v120);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__dst.__r_.__value_.__l.__data_);
                        v123 = (std::string *)v120;
                        v124 = (std::string *)"/";
                        v125 = v120;
                        v126 = (std::string *)"/";
                        v127 = (std::string *)"/";
                        if (v122 == -1)
                          sub_20E877AB8();
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
                        ((void (*)(std::string *, void **))off_24C9F0528[v122])(&__dst, v120);
                        std::to_string(&__dst, *((_DWORD *)v67 + 5));
                        v123 = (std::string *)v120;
                        v124 = &__dst;
                        v125 = v120;
                        v126 = &__dst;
                        v127 = &__dst;
                        if (v122 == -1)
                          sub_20E877AB8();
                        v118 = &v123;
                        ((void (*)(std::string ***, void **))off_24C9F0410[v122])(&v118, v120);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__dst.__r_.__value_.__l.__data_);
                        v123 = (std::string *)v120;
                        v124 = (std::string *)" a:";
                        v125 = v120;
                        v126 = (std::string *)" a:";
                        v127 = (std::string *)" a:";
                        if (v122 == -1)
                          sub_20E877AB8();
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
                        ((void (*)(std::string *, void **))off_24C9F0458[v122])(&__dst, v120);
                        std::to_string(&__dst, *((_DWORD *)v67 + 7));
                        v123 = (std::string *)v120;
                        v124 = &__dst;
                        v125 = v120;
                        v126 = &__dst;
                        v127 = &__dst;
                        if (v122 == -1)
                          sub_20E877AB8();
                        v118 = &v123;
                        ((void (*)(std::string ***, void **))off_24C9F0410[v122])(&v118, v120);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__dst.__r_.__value_.__l.__data_);
                        if (v122 == -1)
                          sub_20E877AB8();
                        v123 = &__dst;
                        ((void (*)(void **__return_ptr, std::string **, void **))off_24C9F0470[v122])(v113, &v123, v120);
                        if (v122 != -1)
                          ((void (*)(std::string **, void **))off_24C9F0428[v122])(&v123, v120);
                        if (v114 < 0)
                        {
                          operator delete(v113[0]);
                          if ((v116 & 0x80000000) == 0)
                            goto LABEL_149;
LABEL_178:
                          operator delete(v115[0]);
                          v67 += 40;
                          if (v67 == v68)
                            goto LABEL_179;
                        }
                        else
                        {
                          if (v116 < 0)
                            goto LABEL_178;
LABEL_149:
                          v67 += 40;
                          if (v67 == v68)
                            goto LABEL_179;
                        }
                      }
                    }
                  }
                  else
                  {
LABEL_131:
                    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_132;
                  }
                  operator delete(__dst.__r_.__value_.__l.__data_);
                  if ((v121 & 0x80000000) == 0)
                  {
LABEL_133:
                    v67 = v97;
                    v68 = v98;
                    if (v97 != v98)
                      goto LABEL_150;
                    goto LABEL_179;
                  }
                  goto LABEL_146;
                }
LABEL_122:
                operator delete(v115[0]);
                sub_20E86872C((uint64_t)&v92, v93);
                if (!v89)
                  goto LABEL_126;
                goto LABEL_123;
              }
            }
            memmove(v56, v59, v55);
            goto LABEL_103;
          }
        }
        memmove(v44, v47, v43);
        goto LABEL_63;
      }
    }
    memmove(p_dst, v33, v29);
    goto LABEL_37;
  }
LABEL_193:
  v74 = v83;
  if (v83)
  {
    v75 = (unint64_t *)&v83->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v81;
  if (v81)
  {
    v78 = (unint64_t *)&v81->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
}

void sub_20EEBE98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;

  sub_20E877A60(v64 - 136);
  if (*(char *)(v64 - 185) < 0)
    operator delete(*(void **)(v64 - 208));
  if (*(char *)(v64 - 145) < 0)
    operator delete(*(void **)(v64 - 168));
  if (a64)
    sub_20EAA69B4((uint64_t)&a27);
  sub_20E86665C((uint64_t)&a11);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EEBED88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F04E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EEBED98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F04E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EEBEDD0(unint64_t *a1, unint64_t a2, const char *a3)
{
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  unint64_t v24;
  int8x8_t v25;
  int8x8_t *v26;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t *v29;
  unint64_t v30;
  int8x8_t v31;
  int8x8_t *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  __int128 *v36;
  char *v37;
  unint64_t v38;
  __int128 v39;
  char v40;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (char *)v7;
  if (v6 - v7 >= a2)
  {
    if (!a2)
    {
LABEL_55:
      a1[1] = (unint64_t)v8;
      return;
    }
    v18 = (char *)(v7 + a2);
    if (a2 >= 8 && (v7 >= (unint64_t)(a3 + 1) || v18 <= a3))
    {
      if (a2 < 0x20)
      {
        v20 = 0;
        goto LABEL_36;
      }
      v20 = a2 & 0xFFFFFFFFFFFFFFE0;
      v28 = vld1q_dup_s8(a3);
      v29 = (int8x16_t *)(v7 + 16);
      v30 = a2 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29[-1] = v28;
        *v29 = v28;
        v29 += 2;
        v30 -= 32;
      }
      while (v30);
      if (v20 == a2)
        goto LABEL_54;
      if ((a2 & 0x18) != 0)
      {
LABEL_36:
        v8 = (char *)(v7 + (a2 & 0xFFFFFFFFFFFFFFF8));
        v31 = vld1_dup_s8(a3);
        v32 = (int8x8_t *)(v7 + v20);
        v33 = v20 - (a2 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v32++ = v31;
          v33 += 8;
        }
        while (v33);
        if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2)
          goto LABEL_54;
        goto LABEL_53;
      }
      v8 = (char *)(v7 + v20);
    }
    do
LABEL_53:
      *v8++ = *a3;
    while (v8 != v18);
LABEL_54:
    v8 = (char *)(v7 + a2);
    goto LABEL_55;
  }
  v9 = (char *)*a1;
  v10 = v7 - *a1;
  v11 = v10 + a2;
  if ((uint64_t)(v10 + a2) < 0)
    sub_20E867F44();
  v12 = v6 - (_QWORD)v9;
  if (2 * v12 > v11)
    v11 = 2 * v12;
  if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    v14 = (char *)operator new(v13);
    v15 = (unint64_t)&v14[v10];
    v16 = &v14[v10 + a2];
    v17 = &v14[v10];
    if (a2 < 8)
      goto LABEL_41;
  }
  else
  {
    v14 = 0;
    v15 = v7 - *a1;
    v16 = (char *)(v10 + a2);
    v17 = (char *)v15;
    if (a2 < 8)
      goto LABEL_41;
  }
  if (v15 >= (unint64_t)(a3 + 1) || (v17 = (char *)v15, v16 <= a3))
  {
    if (a2 < 0x20)
    {
      v21 = 0;
      goto LABEL_28;
    }
    v21 = a2 & 0xFFFFFFFFFFFFFFE0;
    v22 = vld1q_dup_s8(a3);
    v23 = (int8x16_t *)&v14[v10 + 16];
    v24 = a2 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v23[-1] = v22;
      *v23 = v22;
      v23 += 2;
      v24 -= 32;
    }
    while (v24);
    if (v21 == a2)
      goto LABEL_42;
    if ((a2 & 0x18) != 0)
    {
LABEL_28:
      v17 = (char *)(v15 + (a2 & 0xFFFFFFFFFFFFFFF8));
      v25 = vld1_dup_s8(a3);
      v26 = (int8x8_t *)&v14[v21 + v7 - (_QWORD)v9];
      v27 = v21 - (a2 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *v26++ = v25;
        v27 += 8;
      }
      while (v27);
      if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2)
        goto LABEL_42;
      goto LABEL_41;
    }
    v17 = (char *)(v15 + v21);
  }
  do
LABEL_41:
    *v17++ = *a3;
  while (v17 != v16);
LABEL_42:
  v34 = (char *)*a1;
  v35 = v7 - *a1;
  if (v7 != *a1)
  {
    if (v35 < 0x20)
      goto LABEL_60;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_60;
    v8 = (char *)(v7 - (v35 & 0xFFFFFFFFFFFFFFE0));
    v15 -= v35 & 0xFFFFFFFFFFFFFFE0;
    v36 = (__int128 *)(v7 - 16);
    v37 = &v14[v7 - 16 - (_QWORD)v9];
    v38 = v35 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v39 = *v36;
      *((_OWORD *)v37 - 1) = *(v36 - 1);
      *(_OWORD *)v37 = v39;
      v37 -= 32;
      v36 -= 2;
      v38 -= 32;
    }
    while (v38);
    if (v35 != (v35 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_60:
      do
      {
        v40 = *--v8;
        *(_BYTE *)--v15 = v40;
      }
      while (v8 != v34);
    }
    v8 = (char *)*a1;
  }
  *a1 = v15;
  a1[1] = (unint64_t)v16;
  a1[2] = (unint64_t)&v14[v13];
  if (v8)
    operator delete(v8);
}

__n128 sub_20EEBF084(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  unint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  __n128 result;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  void **v38;
  __int128 v39;
  void *__p[2];
  void *v41;
  void **v42[6];

  if (a1 != (_QWORD *)a2)
    sub_20EDB523C(a1, *(char **)a2, *(char **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  if (a1 + 3 != (_QWORD *)(a2 + 72))
    sub_20EDC8188(a1 + 3, *(char **)(a2 + 72), *(char **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  v37 = 0;
  v36 = 0uLL;
  v34 = a1;
  if (v5 != v4)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 3)) > 0x555555555555555)
      sub_20E867F44();
    __p[1] = &v37;
    v38 = (void **)operator new(0x9249249249249250 * ((v5 - v4) >> 3));
    *(_QWORD *)&v39 = v38;
    *((_QWORD *)&v39 + 1) = v38;
    __p[0] = &v38[0xF24924924924924ALL * ((v5 - v4) >> 3)];
    sub_20EEBF56C((uint64_t *)&v36, &v38);
    sub_20EEBFDD0((uint64_t)&v38);
    v4 = *(_QWORD *)(a2 + 48);
    v5 = *(_QWORD *)(a2 + 56);
  }
  for (; v4 != v5; v4 += 56)
  {
    v8 = *(void ***)v4;
    LODWORD(v39) = *(_DWORD *)(v4 + 8);
    v38 = v8;
    LODWORD(v8) = *(_DWORD *)(v4 + 20);
    *(_QWORD *)((char *)&v39 + 4) = *(_QWORD *)(v4 + 12);
    HIDWORD(v39) = (_DWORD)v8;
    sub_20EEBF6BC(__p, (uint64_t *)(v4 + 32));
    v9 = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1) < v37)
    {
      v6 = v38;
      *(_DWORD *)(*((_QWORD *)&v36 + 1) + 8) = v39;
      *(_QWORD *)v9 = v6;
      v7 = *(_QWORD *)((char *)&v39 + 4);
      *(_DWORD *)(v9 + 20) = HIDWORD(v39);
      *(_QWORD *)(v9 + 12) = v7;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_OWORD *)(v9 + 24) = *(_OWORD *)__p;
      *(_QWORD *)(v9 + 40) = v41;
      *((_QWORD *)&v36 + 1) = v9 + 48;
    }
    else
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 4);
      v11 = v10 + 1;
      if (v10 + 1 > 0x555555555555555)
        sub_20E867F44();
      if (0x5555555555555556 * ((uint64_t)(v37 - v36) >> 4) > v11)
        v11 = 0x5555555555555556 * ((uint64_t)(v37 - v36) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - v36) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v12 = 0x555555555555555;
      else
        v12 = v11;
      v42[4] = (void **)&v37;
      if (v12 > 0x555555555555555)
        sub_20E877A38();
      v13 = (void **)operator new(48 * v12);
      v14 = &v13[6 * v10];
      *v14 = v38;
      v42[0] = v13;
      v42[1] = v14;
      *(_OWORD *)(v14 + 1) = v39;
      *(_OWORD *)(v14 + 3) = *(_OWORD *)__p;
      v14[5] = v41;
      __p[1] = 0;
      v41 = 0;
      __p[0] = 0;
      v42[2] = v14 + 6;
      v42[3] = &v13[6 * v12];
      sub_20EEBF56C((uint64_t *)&v36, v42);
      v15 = *((_QWORD *)&v36 + 1);
      sub_20EEBFDD0((uint64_t)v42);
      v16 = (char *)__p[0];
      *((_QWORD *)&v36 + 1) = v15;
      if (__p[0])
      {
        v17 = (char *)__p[1];
        v18 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*(v17 - 8))
            {
              v19 = (_QWORD *)*((_QWORD *)v17 - 5);
              if (v19)
              {
                do
                {
                  v20 = (_QWORD *)*v19;
                  operator delete(v19);
                  v19 = v20;
                }
                while (v20);
              }
              v21 = (void *)*((_QWORD *)v17 - 7);
              *((_QWORD *)v17 - 7) = 0;
              if (v21)
                operator delete(v21);
            }
            v17 -= 80;
          }
          while (v17 != v16);
          v18 = __p[0];
        }
        __p[1] = v16;
        operator delete(v18);
      }
    }
  }
  v35 = v36;
  v22 = v37;
  v37 = 0;
  v36 = 0uLL;
  v38 = (void **)&v36;
  sub_20EEBFEB8(&v38);
  v23 = (void **)(v34 + 6);
  v24 = v34[6];
  if (v24)
  {
    v25 = v34[7];
    v26 = (void *)v34[6];
    if (v25 != v24)
    {
      do
      {
        v28 = *(_QWORD *)(v25 - 24);
        if (v28)
        {
          v29 = *(_QWORD *)(v25 - 16);
          v27 = *(void **)(v25 - 24);
          if (v29 != v28)
          {
            do
            {
              if (*(_BYTE *)(v29 - 8))
              {
                v30 = *(_QWORD **)(v29 - 40);
                if (v30)
                {
                  do
                  {
                    v31 = (_QWORD *)*v30;
                    operator delete(v30);
                    v30 = v31;
                  }
                  while (v31);
                }
                v32 = *(void **)(v29 - 56);
                *(_QWORD *)(v29 - 56) = 0;
                if (v32)
                  operator delete(v32);
              }
              v29 -= 80;
            }
            while (v29 != v28);
            v27 = *(void **)(v25 - 24);
          }
          *(_QWORD *)(v25 - 16) = v28;
          operator delete(v27);
        }
        v25 -= 48;
      }
      while (v25 != v24);
      v26 = *v23;
    }
    v34[7] = v24;
    operator delete(v26);
    *v23 = 0;
    v34[7] = 0;
    v34[8] = 0;
  }
  *((_OWORD *)v34 + 3) = v35;
  v34[8] = v22;
  v39 = 0uLL;
  v38 = 0;
  v42[0] = (void **)&v38;
  sub_20EEBFEB8(v42);
  return result;
}

void sub_20EEBF48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  sub_20EEBFDD0((uint64_t)&a16);
  a23 = (void **)&a13;
  sub_20EEBFEB8(&a23);
  _Unwind_Resume(a1);
}

void sub_20EEBF4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *__p, char *a20,uint64_t a21,char *a22,char a23)
{
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;

  v24 = __p;
  if (__p)
  {
    v25 = a20;
    v26 = __p;
    if (a20 != __p)
    {
      do
      {
        if (*(v25 - 8))
        {
          v27 = (_QWORD *)*((_QWORD *)v25 - 5);
          if (v27)
          {
            do
            {
              v28 = (_QWORD *)*v27;
              operator delete(v27);
              v27 = v28;
            }
            while (v28);
          }
          v29 = (void *)*((_QWORD *)v25 - 7);
          *((_QWORD *)v25 - 7) = 0;
          if (v29)
            operator delete(v29);
        }
        v25 -= 80;
      }
      while (v25 != v24);
      v26 = __p;
    }
    a20 = v24;
    operator delete(v26);
  }
  a22 = &a13;
  sub_20EEBFEB8((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EEBF56C(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = *(_QWORD *)(v4 + v7 - 48);
      *(_DWORD *)(v8 - 40) = *(_DWORD *)(v4 + v7 - 40);
      *(_QWORD *)(v8 - 48) = v9;
      v10 = *(_QWORD *)(v4 + v7 - 36);
      *(_DWORD *)(v8 - 28) = *(_DWORD *)(v4 + v7 - 28);
      *(_QWORD *)(v8 - 36) = v10;
      result = sub_20EEBF6BC((_QWORD *)(v6 + v7 - 24), (uint64_t *)(v4 + v7 - 24));
      v7 -= 48;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v11 = *v3;
  *v3 = v6;
  a2[1] = v11;
  v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void sub_20EEBF638(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  if (v3)
  {
    do
    {
      v6 = *(_QWORD *)(v2 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v2 + 32);
        v5 = *(void **)(v2 + 24);
        if (v7 != v6)
        {
          do
          {
            if (*(_BYTE *)(v7 - 8))
            {
              v8 = *(_QWORD **)(v7 - 40);
              if (v8)
              {
                do
                {
                  v9 = (_QWORD *)*v8;
                  operator delete(v8);
                  v8 = v9;
                }
                while (v9);
              }
              v10 = *(void **)(v7 - 56);
              *(_QWORD *)(v7 - 56) = 0;
              if (v10)
                operator delete(v10);
            }
            v7 -= 80;
          }
          while (v7 != v6);
          v5 = *(void **)(v2 + 24);
        }
        *(_QWORD *)(v2 + 32) = v6;
        operator delete(v5);
      }
      v2 += 48;
    }
    while (v2 != v1);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EEBF6BC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 4);
    if (v7 >= 0x333333333333334)
      sub_20E867F44();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[80 * v7];
    a1[1] = sub_20EEBF7E4(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_20EEBF764(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        if (*(v5 - 8))
        {
          v7 = (_QWORD *)*((_QWORD *)v5 - 5);
          if (v7)
          {
            do
            {
              v8 = (_QWORD *)*v7;
              operator delete(v7);
              v7 = v8;
            }
            while (v8);
          }
          v9 = (void *)*((_QWORD *)v5 - 7);
          *((_QWORD *)v5 - 7) = 0;
          if (v9)
            operator delete(v9);
        }
        v5 -= 80;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEBF7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  if (a2 != a3)
  {
    v6 = a2 + 64;
    do
    {
      v8 = *(_OWORD *)(v6 - 64);
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v6 - 48);
      *(_OWORD *)v4 = v8;
      *(_BYTE *)(v4 + 24) = 0;
      *(_BYTE *)(v4 + 72) = 0;
      if (*(_BYTE *)(v6 + 8))
      {
        sub_20EEBF970(v4 + 24, v6 - 40);
        *(_QWORD *)(v4 + 64) = *(_QWORD *)v6;
        *(_BYTE *)(v4 + 72) = 1;
        v4 = v10;
      }
      v7 = v6 - 64;
      v4 += 80;
      v10 = v4;
      v6 += 80;
    }
    while (v7 + 80 != a3);
  }
  return v4;
}

void sub_20EEBF8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  if (*(_BYTE *)(v9 + 72))
  {
    v12 = *(_QWORD **)(v9 + 40);
    if (v12)
    {
      do
      {
        v13 = (_QWORD *)*v12;
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
    v14 = *v10;
    *v10 = 0;
    if (v14)
      operator delete(v14);
  }
  sub_20EEBF8F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEBF8F0(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(_BYTE *)(v3 - 8))
      {
        v5 = *(_QWORD **)(v3 - 40);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v7 = *(void **)(v3 - 56);
        *(_QWORD *)(v3 - 56) = 0;
        if (v7)
          operator delete(v7);
      }
      v3 -= 80;
    }
  }
  return a1;
}

uint64_t sub_20EEBF970(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_20EEBFAB0(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_20EEBFA88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20EEBFA9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EEBFAB0(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20EEBFDBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEBFDD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      while (1)
      {
        v4 = i - 48;
        *(_QWORD *)(a1 + 16) = i - 48;
        v5 = *(_QWORD *)(i - 24);
        if (v5)
          break;
        i -= 48;
        if (v4 == v2)
          goto LABEL_15;
      }
      v6 = *(_QWORD *)(i - 16);
      v7 = *(void **)(i - 24);
      if (v6 != v5)
        break;
      *(_QWORD *)(i - 16) = v5;
      operator delete(v7);
      i = *(_QWORD *)(a1 + 16);
      if (i == v2)
        goto LABEL_15;
    }
    do
    {
      if (*(_BYTE *)(v6 - 8))
      {
        v8 = *(_QWORD **)(v6 - 40);
        if (v8)
        {
          do
          {
            v9 = (_QWORD *)*v8;
            operator delete(v8);
            v8 = v9;
          }
          while (v9);
        }
        v10 = *(void **)(v6 - 56);
        *(_QWORD *)(v6 - 56) = 0;
        if (v10)
          operator delete(v10);
      }
      v6 -= 80;
    }
    while (v6 != v5);
    v11 = *(void **)(i - 24);
    *(_QWORD *)(i - 16) = v5;
    operator delete(v11);
  }
LABEL_15:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20EEBFEB8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *((_QWORD *)v4 - 3);
        if (v7)
        {
          v8 = *((_QWORD *)v4 - 2);
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v8 != v7)
          {
            do
            {
              if (*(_BYTE *)(v8 - 8))
              {
                v9 = *(_QWORD **)(v8 - 40);
                if (v9)
                {
                  do
                  {
                    v10 = (_QWORD *)*v9;
                    operator delete(v9);
                    v9 = v10;
                  }
                  while (v10);
                }
                v11 = *(void **)(v8 - 56);
                *(_QWORD *)(v8 - 56) = 0;
                if (v11)
                  operator delete(v11);
              }
              v8 -= 80;
            }
            while (v8 != v7);
            v6 = (void *)*((_QWORD *)v4 - 3);
          }
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

size_t *sub_20EEBFFA4(size_t *a1, _DWORD *a2, void **a3, char a4, void **a5, char a6, uint64_t a7)
{
  void *v11;
  int v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  BOOL v22;
  void *memptr[3];
  void **v25[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (void *)((*a2 != 0) | (unint64_t)(v13 << 32));
  }
  v14 = (v12 * HIDWORD(v11));
  v15 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
  v17 = v16 | (v16 >> 16) | ((v16 | (v16 >> 16)) >> 32);
  if (v17 + 1 > 8)
    v18 = v17 + 1;
  else
    v18 = 8;
  *a1 = v14;
  a1[1] = 0;
  a1[2] = v18;
  if ((_DWORD)v14)
  {
    memptr[0] = 0;
    v19 = malloc_type_posix_memalign(memptr, v18, v14, 0x1F88E90uLL);
    if (v19)
      sub_210207B94(v19, a1[2], v14);
    v20 = memptr[0];
    a1[1] = (size_t)memptr[0];
    v21 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (size_t)v11;
    if (v20 && a6)
    {
      if ((_DWORD)v21)
        v22 = HIDWORD(v21) == 0;
      else
        v22 = 1;
      if (v22)
        v21 = 0;
      memptr[0] = v20;
      memptr[1] = (void *)v21;
      memptr[2] = v11;
      if (HIDWORD(v21) * HIDWORD(v11) == -1
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v25[0] = memptr;
      v25[1] = a5;
      sub_20EEC0144(v25);
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (size_t)v11;
  }
  return a1;
}

void sub_20EEC0128(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void ***sub_20EEC0144(void ***result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  void **v5;
  int v6;
  int v7;
  BOOL v8;
  void **v9;
  int v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int i;
  int v15;
  _BYTE *v16;
  int v17;
  BOOL v18;
  char *v19;
  int v20;

  v1 = *result;
  v2 = *((unsigned int *)*result + 4);
  if ((_DWORD)v2 == 1)
  {
    v3 = *((unsigned int *)v1 + 5);
    v4 = *((unsigned int *)v1 + 2);
    v5 = result[1];
    if ((_DWORD)v3 == (_DWORD)v4)
    {
      return (void ***)memset(*v1, *(unsigned __int8 *)v5, (*((_DWORD *)v1 + 3) * v3));
    }
    else
    {
      v17 = *((_DWORD *)v1 + 3);
      if ((_DWORD)v4)
        v18 = v17 == 0;
      else
        v18 = 1;
      if (!v18)
      {
        v19 = (char *)*v1;
        v20 = v17 - 1;
        if (v17 != 1)
        {
          do
          {
            memset(v19, *(unsigned __int8 *)v5, v4);
            v19 += v3;
            --v20;
          }
          while (v20);
        }
        return (void ***)memset(v19, *(unsigned __int8 *)v5, v4);
      }
    }
  }
  else
  {
    v6 = *((_DWORD *)v1 + 2);
    v7 = *((_DWORD *)v1 + 3);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = result[1];
      v10 = v6 - 1;
      v11 = *v1;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *((unsigned int *)v1 + 5);
        if (v10)
        {
          for (i = 0; i != v12; ++i)
          {
            v15 = v10;
            v16 = v11;
            do
            {
              *v16 = *(_BYTE *)v9;
              v16 += v2;
              --v15;
            }
            while (v15);
            *v16 = *(_BYTE *)v9;
            v11 += v13;
          }
        }
        else
        {
          do
          {
            *v11 = *(_BYTE *)v9;
            v11 += v13;
            --v12;
          }
          while (v12);
        }
      }
      for (; v10; --v10)
      {
        *v11 = *(_BYTE *)v9;
        v11 += v2;
      }
      *v11 = *(_BYTE *)v9;
    }
  }
  return result;
}

void sub_20EEC02BC(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a1[1];
  v7 = a1[2];
  v8 = ((v7 - v6) << 6) - 1;
  if (v7 == v6)
    v8 = 0;
  v9 = a1[5];
  v10 = v9 + a1[4];
  v11 = v8 - v10;
  if (a3 > v11)
  {
    sub_20EEC047C((uint64_t)a1, a3 - v11);
    v9 = a1[5];
    v6 = a1[1];
    v7 = a1[2];
    v10 = a1[4] + v9;
  }
  v12 = (_QWORD *)(v6 + 8 * (v10 >> 9));
  if (v7 == v6)
  {
    v13 = 0;
    if (a3)
      goto LABEL_7;
LABEL_10:
    v16 = v13;
    v15 = v12;
    goto LABEL_28;
  }
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (!a3)
    goto LABEL_10;
LABEL_7:
  v14 = a3 + ((v13 - *v12) >> 3);
  if (v14 < 1)
  {
    v17 = 511 - v14;
    LOWORD(v14) = ~(511 - v14);
    v15 = &v12[-(v17 >> 9)];
  }
  else
  {
    v15 = &v12[(unint64_t)v14 >> 9];
  }
  v16 = *v15 + 8 * (v14 & 0x1FF);
LABEL_28:
  while (v13 != v16)
  {
    v18 = v16;
    if (v12 != v15)
      v18 = *v12 + 4096;
    if (v13 == v18)
    {
      a1[5] = v9;
      if (v12 == v15)
        return;
      goto LABEL_27;
    }
    v19 = v18 - v13 - 8;
    if (v19 < 0x18 || (unint64_t)(v13 - (_QWORD)a2) < 0x20)
    {
      v22 = a2;
      v23 = (_QWORD *)v13;
      do
      {
LABEL_25:
        v28 = *v22++;
        *v23++ = v28;
      }
      while (v23 != (_QWORD *)v18);
      goto LABEL_26;
    }
    v20 = (v19 >> 3) + 1;
    v21 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    v22 = &a2[v21];
    v23 = (_QWORD *)(v13 + v21 * 8);
    v24 = (_OWORD *)(v13 + 16);
    v25 = (__int128 *)(a2 + 2);
    v26 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      *v24 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_25;
LABEL_26:
    a2 = v22;
    v9 = a1[5] + ((v18 - v13) >> 3);
    a1[5] = v9;
    if (v12 == v15)
      return;
LABEL_27:
    v29 = v12[1];
    ++v12;
    v13 = v29;
  }
}

void sub_20EEC047C(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 9);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        sub_20E8D0C84((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        sub_20E8D0E10((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 511;
        else
          v116 = 512;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - (v6 << 9);
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= v8 << 9;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      sub_20E877A38();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v8 << 9;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0x1000uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      sub_20E877A38();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            sub_20E877A38();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            sub_20E877A38();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) -= v144;
  if (v71)
    operator delete(v71);
}

void sub_20EEC0D68(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20EEC0DB4()
{
  __cxa_end_catch();
  JUMPOUT(0x20EEC0DBCLL);
}

void sub_20EEC0DD4(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_20E877A38();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0x1000uLL);
      sub_20E8D0C84((char **)a1, &v89);
      return;
    }
    v89 = operator new(0x1000uLL);
    sub_20E8D0E10((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_20E877A38();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_20E877A38();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_20EEC1314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EEC1330(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EEC1344(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EEC135C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEC1374(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EEC13DC()
{
  sub_20E860B90("vector");
}

void sub_20EEC13F0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC1458()
{
  return 1;
}

uint64_t sub_20EEC1460(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20EEC1468@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20EEC147C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_20EEC14F8(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 48);
    if (v3)
      free(v3);
    *(_QWORD *)(v2 + 48) = 0;
    MEMORY[0x212BC6398](v2, 0x1091C406A8758A4);
  }
  return a1;
}

void sub_20EEC1550()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC1564()
{
  return 1;
}

__int128 *sub_20EEC1570()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51368);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A51368))
  {
    v2 = sub_20EEC1648();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(&xmmword_254A51350, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A51360 = *((_QWORD *)v2 + 2);
      xmmword_254A51350 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A51350, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51368);
  }
  if (byte_254A51367 >= 0)
    return &xmmword_254A51350;
  else
    return (__int128 *)xmmword_254A51350;
}

void sub_20EEC1630(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51368);
  _Unwind_Resume(a1);
}

__int128 *sub_20EEC1648()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51388);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51388))
    return &xmmword_254A51370;
  v2 = sub_20EEC1724();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A51370, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A51380 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A51370 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A51370, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51388);
  return &xmmword_254A51370;
}

void sub_20EEC170C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51388);
  _Unwind_Resume(a1);
}

std::string *sub_20EEC1724()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A513A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A513A8))
    return &stru_254A51390;
  sub_20EEC193C((uint64_t)__p);
  sub_20EEC1814((char *)__p, &stru_254A51390);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51390, &dword_20E81F000);
  __cxa_guard_release(&qword_254A513A8);
  return &stru_254A51390;
}

void sub_20EEC17D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A513A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A513A8);
  _Unwind_Resume(a1);
}

void sub_20EEC1814(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EA6D818();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EEC1910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EEC193C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A513C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A513C8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray8u>]", qword_254A513B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A513B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A513C8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A513E8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A513E8))
  {
    v5 = sub_20E8A2354(qword_254A513B0, "<", 0);
    sub_20E89FC08(qword_254A513B0, 0, v5, qword_254A513D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A513D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A513E8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A51408);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A51408))
  {
    sub_21023CD84((uint64_t)qword_254A513D0, (uint64_t)&xmmword_254A513F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A513F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51408);
  }
  if (byte_254A51407 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A513F0, *((unint64_t *)&xmmword_254A513F0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A513F0;
    *(_QWORD *)(a1 + 16) = unk_254A51400;
  }
}

void sub_20EEC1AD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51408);
  _Unwind_Resume(a1);
}

void sub_20EEC1AF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A513E8);
  _Unwind_Resume(a1);
}

void sub_20EEC1B08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A513C8);
  _Unwind_Resume(a1);
}

void sub_20EEC1B24(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC1B48(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 48);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 48) = 0;
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EEC1B98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EEC1C08()
{
  sub_20E89FD20("vector");
}

uint64_t sub_20EEC1C1C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EEC1C84(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24C9F0948;
  sub_2101B91B8(a1, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C9F0600;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F0980;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 21);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a2 + 3) = *v14;
  *(_OWORD *)(a2 + 5) = v8;
  *(_OWORD *)(a2 + 7) = v7;
  v14 = 0;
  MEMORY[0x212BC6398]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v9 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a2 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20EEC1E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20E86665C(v10);
  sub_20E86665C((uint64_t)&a10);
  sub_20EEC1FE0(&a9);
  _Unwind_Resume(a1);
}

void sub_20EEC1EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEC1FE0(&a9);
  _Unwind_Resume(a1);
}

void sub_20EEC1EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_20EEC1ED8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC1F40()
{
  return 21;
}

uint64_t sub_20EEC1F48(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20EEC1F50@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20EEC1F64(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_20EEC1FE0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
      free(v3);
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x212BC6398](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_20EEC2038()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC204C()
{
  return 21;
}

__int128 *sub_20EEC2058()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51428);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A51428))
  {
    v2 = sub_20EEC2130();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(&xmmword_254A51410, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A51420 = *((_QWORD *)v2 + 2);
      xmmword_254A51410 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A51410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51428);
  }
  if (byte_254A51427 >= 0)
    return &xmmword_254A51410;
  else
    return (__int128 *)xmmword_254A51410;
}

void sub_20EEC2118(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51428);
  _Unwind_Resume(a1);
}

__int128 *sub_20EEC2130()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51448);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51448))
    return &xmmword_254A51430;
  v2 = sub_20EEC220C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A51430, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A51440 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A51430 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A51430, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51448);
  return &xmmword_254A51430;
}

void sub_20EEC21F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51448);
  _Unwind_Resume(a1);
}

std::string *sub_20EEC220C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51468);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51468))
    return &stru_254A51450;
  sub_20EEC2424((uint64_t)__p);
  sub_20EEC22FC((char *)__p, &stru_254A51450);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51450, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51468);
  return &stru_254A51450;
}

void sub_20EEC22BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51468);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51468);
  _Unwind_Resume(a1);
}

void sub_20EEC22FC(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EEC2608();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EEC23F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EEC2424(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A51488);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A51488))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb8u>]", qword_254A51470);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A51470, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51488);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A514A8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A514A8))
  {
    v5 = sub_20E8A2354(qword_254A51470, "<", 0);
    sub_20E89FC08(qword_254A51470, 0, v5, qword_254A51490);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A51490, &dword_20E81F000);
    __cxa_guard_release(&qword_254A514A8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A514C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A514C8))
  {
    sub_21023CD84((uint64_t)qword_254A51490, (uint64_t)&xmmword_254A514B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A514B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A514C8);
  }
  if (byte_254A514C7 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A514B0, *((unint64_t *)&xmmword_254A514B0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A514B0;
    *(_QWORD *)(a1 + 16) = unk_254A514C0;
  }
}

void sub_20EEC25C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A514C8);
  _Unwind_Resume(a1);
}

void sub_20EEC25D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A514A8);
  _Unwind_Resume(a1);
}

void sub_20EEC25F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51488);
  _Unwind_Resume(a1);
}

std::string *sub_20EEC2608()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51348);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51348))
    return &stru_254A51330;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb8u]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51330);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51330, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51348);
  return &stru_254A51330;
}

void sub_20EEC26C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51348);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51348);
  _Unwind_Resume(a1);
}

void sub_20EEC2704(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC2728(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EEC2778(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE21EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE21EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE21EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE21EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_20EEC27E8(_QWORD *result)
{
  *result = &off_24C9F09D0;
  return result;
}

_QWORD *sub_20EEC27F8(_QWORD *result)
{
  *result = &off_24C9F09D0;
  return result;
}

void sub_20EEC2808(_QWORD *a1)
{
  *a1 = &off_24C9F09D0;
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC2828()
{
  return 1;
}

uint64_t sub_20EEC2830()
{
  return 11;
}

uint64_t sub_20EEC2838(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_20EEC2840(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20EEC28A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v19, v3, 1);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x212BC6398]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_20EEC29F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EEC2A0C(uint64_t *a1@<X8>)
{
  size_t v2;
  size_t v3;
  size_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  __int128 v14;
  _BYTE v15[28];
  _BYTE v16[28];
  size_t v17[3];
  __int128 v18;
  char v19;
  uint64_t v20;
  void *v21;

  v19 = 0;
  v16[24] = 0;
  memset(v16, 0, 17);
  v20 = 0;
  v21 = 0;
  sub_20EEBFFA4(v17, &v20, &v21, 1, (void **)&v19, 1, 0);
  *(_OWORD *)v15 = 0uLL;
  *(_OWORD *)&v15[12] = *(_OWORD *)&v16[12];
  v3 = v17[0];
  v2 = v17[1];
  v4 = v17[2];
  v14 = v18;
  v5 = operator new();
  *(_QWORD *)v5 = &off_24C9F0580;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)v15;
  *(_OWORD *)(v5 + 20) = *(_OWORD *)&v15[12];
  *(_QWORD *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = v2;
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 64) = v14;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F0800;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *a1 = v5;
  a1[1] = (uint64_t)v6;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v16, v5, 1);
  v9 = *(_QWORD *)(*(_QWORD *)v16 + 16);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)v16;
  a1[5] = v9;
  *(_QWORD *)v16 = 0;
  MEMORY[0x212BC6398]();
  a1[6] = a1[3];
  *(_OWORD *)(a1 + 7) = *((_OWORD *)a1 + 2);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 36) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_20EEC2C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20E86665C(v2);
  sub_20E86665C((uint64_t)va1);
  sub_20EEC14F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EEC2C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EEC14F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EEC2C60(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20EEC2C7C(_QWORD *a1)
{
  *a1 = &off_24C9F09D0;
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC2C9C()
{
  return 1;
}

_QWORD **sub_20EEC2CA4(_QWORD **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *v2 = &off_24C9F0E80;
    sub_20EB0580C((uint64_t)(v2 + 8));
    v2[1] = &off_24C9F0ED0;
    v3 = (std::__shared_weak_count *)v2[3];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x212BC6398](v2, 0x10F3C4035895BD5);
  }
  return a1;
}

_QWORD *sub_20EEC2D48(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9F0ED0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EEC2DBC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C9F0ED0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC2E30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_20EEC2E38(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_20EEC2E40@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_20EEC2E54(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_20EEC2ED0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9F0E80;
  sub_20EB0580C((uint64_t)(a1 + 8));
  a1[1] = &off_24C9F0ED0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EEC2F54(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9F0E80;
  sub_20EB0580C((uint64_t)(a1 + 8));
  a1[1] = &off_24C9F0ED0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC2FD8(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20EEC2FE0(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  BOOL v5;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24C9F0E40, 0);
  if (result)
  {
    if ((void *)a1 == lpsrc)
    {
      return 1;
    }
    else if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(result + 48))
    {
      if (*(_DWORD *)(a1 + 56) == *(_DWORD *)(result + 56)
        && (*(_DWORD *)(a1 + 32) == *(_DWORD *)(result + 32)
          ? (v5 = *(_DWORD *)(a1 + 36) == *(_DWORD *)(result + 36))
          : (v5 = 0),
            v5))
      {
        return *(_DWORD *)(a1 + 40) == *(_DWORD *)(result + 40);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20EEC309C(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = sub_20EEC4700();
  sub_20EEC3150(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 64, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20EEC3134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEC3150(uint64_t a1)
{
  unsigned __int8 v2;
  std::string *v4;
  std::string::size_type size;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A516E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A516E8))
  {
    v4 = sub_20EEC3EE0();
    size = v4->__r_.__value_.__l.__size_;
    if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v6 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
    }
    else
    {
      v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
      v6 = size;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A516D0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A516E0 = *(_QWORD *)(v9 - 8);
      xmmword_254A516D0 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A516D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A516E8);
  }
  return sub_20EEC48FC(&xmmword_254A516D0, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_20EEC3260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A516E8);
  _Unwind_Resume(a1);
}

void sub_20EEC3280(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A516E8);
  _Unwind_Resume(a1);
}

void sub_20EEC3298(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 1;
}

void sub_20EEC32C4(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 1, a2);
}

_QWORD *sub_20EEC32FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9F0E80;
  sub_20EB0580C((uint64_t)(a1 + 8));
  a1[1] = &off_24C9F0ED0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EEC3380(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9F0E80;
  sub_20EB0580C((uint64_t)(a1 + 8));
  a1[1] = &off_24C9F0ED0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC3404(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20EEC419C();
  return sub_20EEC3558(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 64, (uint64_t)"}");
}

uint64_t sub_20EEC345C(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20EEC3784((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9F0AB8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9F0A70[v3])(v5, v2);
  return result;
}

void sub_20EEC34F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C9F0A70[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20EEC352C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20EEC3558(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20EEC3784((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9F0AA0[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9F0AA0[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C9F0AB8[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C9F0A70[v16])(&p_dst, &__dst);
  return result;
}

void sub_20EEC36F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEC370C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEC3720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEC3734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEC3748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEC375C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEC3770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEC3784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20EEC3A28((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C9F0A88[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20EEC39D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20EEC39F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EEC3A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEC3A28(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  int v14;
  uint64_t v15;
  uint64_t size;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *p_p;
  std::string::size_type v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  std::string::size_type v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  __int16 v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t result;
  std::string __p;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  __int16 v50;
  uint64_t v51;
  _QWORD *v52;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
      if (!v4)
        goto LABEL_19;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v4)
        goto LABEL_19;
    }
    v4 = *(_QWORD *)(a2 + 8);
    v9 = *(std::__shared_weak_count **)(a2 + 16);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (*(_BYTE *)(a2 + 53))
          goto LABEL_17;
        goto LABEL_19;
      }
    }
  }
  else if (!v4)
  {
    goto LABEL_19;
  }
  if (*(_BYTE *)(a2 + 53))
  {
LABEL_17:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v51, v4, 0);
    goto LABEL_20;
  }
LABEL_19:
  v51 = 0;
LABEL_20:
  v13 = sub_20EEC3EE0();
  v14 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  if (v14 >= 0)
    v15 = (uint64_t)v13;
  else
    v15 = v13->__r_.__value_.__r.__words[0];
  if (v14 >= 0)
    size = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  else
    size = v13->__r_.__value_.__l.__size_;
  v17 = sub_20E86A980(a1, v15, size);
  sub_20E86A980(v17, (uint64_t)": ", 2);
  v18 = *(unsigned int *)(a2 + 48);
  if (v18 >= 0x29)
  {
    sub_20E86A980(a1, (uint64_t)"Invalid Format (", 16);
    v20 = (_QWORD *)std::ostream::operator<<();
    v19 = sub_20E86A980(v20, (uint64_t)")", 1);
  }
  else
  {
    v19 = sub_20E86A980(a1, (uint64_t)(&off_24CA1AA50)[2 * v18], (uint64_t)(&off_24CA1AA50)[2 * v18 + 1]);
  }
  sub_20E86A980(v19, (uint64_t)", ", 2);
  sub_20EA6BC60((unsigned int *)(a2 + 24), (unsigned int *)(a2 + 32), "x", 1uLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v22 = __p.__r_.__value_.__l.__size_;
  v23 = sub_20E86A980(a1, (uint64_t)p_p, v22);
  sub_20E86A980(v23, (uint64_t)" ", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20E86A980(a1, (uint64_t)"[row byte stride ", 17);
  v24 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v24, (uint64_t)", ", 2);
  if (*(_BYTE *)(a2 + 52) && *(_QWORD *)(a2 + 40))
  {
    v25 = *(_QWORD *)(a2 + 8);
    v26 = *(std::__shared_weak_count **)(a2 + 16);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v25 + 88))(v25, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
  }
  v30 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v30, (uint64_t)"]", 1);
  sub_20E86A980(a1, (uint64_t)", values = {\n", 13);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9C0338;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = *(std::__shared_weak_count **)(a2 + 16);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v35 = *(_QWORD *)(a2 + 40);
    v36 = *(_DWORD *)(a2 + 48);
    v37 = *(_WORD *)(a2 + 52);
    do
      v38 = __ldxr(v33);
    while (__stxr(v38 + 1, v33));
  }
  else
  {
    v35 = *(_QWORD *)(a2 + 40);
    v36 = *(_DWORD *)(a2 + 48);
    v37 = *(_WORD *)(a2 + 52);
  }
  __p.__r_.__value_.__l.__size_ = v31;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v32;
  v46 = *(_QWORD *)(a2 + 24);
  v47 = *(_DWORD *)(a2 + 32);
  v48 = v35;
  v49 = v36;
  v50 = v37;
  if (v32)
  {
    v39 = (unint64_t *)&v32->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v52 = a1;
  sub_2101D9908(v49, &v52, &__p);
  v41 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    v42 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  sub_20E86A980(a1, (uint64_t)"\n}", 2);
  result = v51;
  v51 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20EEC3E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v21;

  sub_20EA69690((uint64_t)&__p);
  v21 = a20;
  a20 = 0;
  if (!v21)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(a1);
}

std::string *sub_20EEC3EE0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A515C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A515C8))
  {
    sub_20E8610C0(v7, "ConstSharedImage");
    v2 = sub_20E8A46B4();
    sub_20EEC40E4((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EEC40E4((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A515B0, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A515B0, &dword_20E81F000);
          __cxa_guard_release(&qword_254A515C8);
          return &stru_254A515B0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A515B0;
}

void sub_20EEC4030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A515C8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A515C8);
  _Unwind_Resume(a1);
}

void sub_20EEC40E4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EEC4180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_20EEC419C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A515E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A515E8))
    return &xmmword_254A515D0;
  v2 = sub_20EEC4278();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A515D0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A515E0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A515D0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A515D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A515E8);
  return &xmmword_254A515D0;
}

void sub_20EEC4260(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A515E8);
  _Unwind_Resume(a1);
}

std::string *sub_20EEC4278()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51608);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51608))
    return &stru_254A515F0;
  sub_20EEC451C((uint64_t)__p);
  sub_20EEC4368((char *)__p, &stru_254A515F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A515F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51608);
  return &stru_254A515F0;
}

void sub_20EEC4328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51608);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51608);
  _Unwind_Resume(a1);
}

void sub_20EEC4368(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  std::string::size_type v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EEC3EE0();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20EEC44CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EEC451C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A51628);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A51628))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::img::SharedImage<cv3d::kit::img::Format::Dynamic, cv3d::kit::img::DynamicBuffer, cv3d::kit::img::Mutability::Const>>]", qword_254A51610);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A51610, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51628);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A51648);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A51648))
  {
    v5 = sub_20E8A2354(qword_254A51610, "<", 0);
    sub_20E89FC08(qword_254A51610, 0, v5, qword_254A51630);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A51630, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51648);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A51668);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A51668))
  {
    sub_21023CD84((uint64_t)qword_254A51630, (uint64_t)&xmmword_254A51650);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A51650, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51668);
  }
  if (byte_254A51667 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A51650, *((unint64_t *)&xmmword_254A51650 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A51650;
    *(_QWORD *)(a1 + 16) = unk_254A51660;
  }
}

void sub_20EEC46B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51668);
  _Unwind_Resume(a1);
}

void sub_20EEC46D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51648);
  _Unwind_Resume(a1);
}

void sub_20EEC46E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51628);
  _Unwind_Resume(a1);
}

__int128 *sub_20EEC4700()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51688);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51688))
    return &xmmword_254A51670;
  v2 = (char *)sub_20EEC47DC();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A51670, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A51680 = *((_QWORD *)v2 + 2);
    xmmword_254A51670 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A51670, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51688);
  return &xmmword_254A51670;
}

void sub_20EEC47C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51688);
  _Unwind_Resume(a1);
}

void *sub_20EEC47DC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A516A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A516A8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ImageData]", qword_254A51690);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A51690, &dword_20E81F000);
    __cxa_guard_release(&qword_254A516A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A516C8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A516C8))
    return &unk_254A516B0;
  sub_21023CD84((uint64_t)qword_254A51690, (uint64_t)&unk_254A516B0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A516B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A516C8);
  return &unk_254A516B0;
}

void sub_20EEC48CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A516C8);
  _Unwind_Resume(a1);
}

void sub_20EEC48E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A516A8);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEC48FC(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20EEC3784((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9F0AA0[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C9F0AB8[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C9F0A70[v11])(&p_dst, &__dst);
  return result;
}

void sub_20EEC4A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEC4A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEC4A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEC4A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEC4A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEC4AA4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EEC4B0C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC4B74()
{
  return 2;
}

uint64_t sub_20EEC4B7C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20EEC4B84@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20EEC4B9C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20EEC4C1C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC4C30()
{
  return 2;
}

__int128 *sub_20EEC4C3C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A514E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A514E8))
  {
    v2 = sub_20EEC4D14();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(&xmmword_254A514D0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A514E0 = *((_QWORD *)v2 + 2);
      xmmword_254A514D0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A514D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A514E8);
  }
  if (byte_254A514E7 >= 0)
    return &xmmword_254A514D0;
  else
    return (__int128 *)xmmword_254A514D0;
}

void sub_20EEC4CFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A514E8);
  _Unwind_Resume(a1);
}

__int128 *sub_20EEC4D14()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51508);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51508))
    return &xmmword_254A514F0;
  v2 = sub_20EEC4DF0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A514F0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A51500 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A514F0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A514F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51508);
  return &xmmword_254A514F0;
}

void sub_20EEC4DD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51508);
  _Unwind_Resume(a1);
}

std::string *sub_20EEC4DF0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51528);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51528))
    return &stru_254A51510;
  sub_20EEC5008((uint64_t)__p);
  sub_20EEC4EE0((char *)__p, &stru_254A51510);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51510, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51528);
  return &stru_254A51510;
}

void sub_20EEC4EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51528);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51528);
  _Unwind_Resume(a1);
}

void sub_20EEC4EE0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EEC51EC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EEC4FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EEC5008(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A51548);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A51548))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray16u>]", qword_254A51530);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A51530, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51548);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A51568);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A51568))
  {
    v5 = sub_20E8A2354(qword_254A51530, "<", 0);
    sub_20E89FC08(qword_254A51530, 0, v5, qword_254A51550);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A51550, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51568);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A51588);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A51588))
  {
    sub_21023CD84((uint64_t)qword_254A51550, (uint64_t)&xmmword_254A51570);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A51570, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51588);
  }
  if (byte_254A51587 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A51570, *((unint64_t *)&xmmword_254A51570 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A51570;
    *(_QWORD *)(a1 + 16) = unk_254A51580;
  }
}

void sub_20EEC51A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51588);
  _Unwind_Resume(a1);
}

void sub_20EEC51BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51568);
  _Unwind_Resume(a1);
}

void sub_20EEC51D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51548);
  _Unwind_Resume(a1);
}

std::string *sub_20EEC51EC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A515A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A515A8))
    return &stru_254A51590;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray16u]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51590);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51590, &dword_20E81F000);
  __cxa_guard_release(&qword_254A515A8);
  return &stru_254A51590;
}

void sub_20EEC52A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A515A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A515A8);
  _Unwind_Resume(a1);
}

void sub_20EEC52E8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC530C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 48);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 48) = 0;
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EEC535C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE2EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE2EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EEC53CC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC5434()
{
  return 2;
}

uint64_t sub_20EEC543C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20EEC5444@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20EEC545C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20EEC54E0(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  __int16 v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;
  __int128 v15;
  uint64_t (**v16)();

  v16 = &off_24C9F07C8;
  sub_2101B800C(a1, (uint64_t)&v12);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C9F0580;
  *(_OWORD *)(v3 + 8) = v13[0];
  *(_OWORD *)(v3 + 20) = *(_OWORD *)((char *)v13 + 12);
  *(_OWORD *)(v3 + 40) = v13[2];
  *(_QWORD *)(v3 + 56) = v14;
  *(_OWORD *)(v3 + 64) = v15;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F0800;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v12, v3, 1);
  v7 = *(_QWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)v12;
  a2[5] = v7;
  v12 = 0;
  MEMORY[0x212BC6398]();
  a2[6] = a2[3];
  *(_OWORD *)(a2 + 7) = *((_OWORD *)a2 + 2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v9 = v8;
  if ((v8 & 0xFFFFFF) <= 0x10000)
    v9 = 0;
  v10 = v8 & 0xFF00;
  if ((v8 & 0xFF0000) == 0)
    v10 = 0;
  *((_WORD *)a2 + 36) = v10 & 0xFF00 | v9;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20EEC56B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20E86665C(v10);
  sub_20E86665C((uint64_t)&a10);
  sub_20EEC14F8(&a9);
  _Unwind_Resume(a1);
}

void sub_20EEC56E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEC14F8(&a9);
  _Unwind_Resume(a1);
}

void sub_20EEC56F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18)
    free(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEC5710(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)a1 = &off_24C9AD388;
  sub_20E8A1900((_WORD *)(a1 + 8));
  *(_QWORD *)(a1 + 88) = &off_24C9F06D0;
  sub_20EEC2A0C((uint64_t *)(a1 + 96));
  *(_QWORD *)(a1 + 176) = &off_24C9C05B0;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v6 = 0uLL;
  sub_20EA69C40(a1 + 184, &v8, &v6);
  v2 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)(a1 + 232) = &off_24C9F06D0;
  sub_20EEC2A0C((uint64_t *)(a1 + 240));
  return a1;
}

void sub_20EEC57E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_20EA69038(v3);
  sub_20E86665C(v2);
  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EEC584C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEC5860(uint64_t result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = *(std::__shared_weak_count **)(result + 248);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)v1[24];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)v1[13];
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)v1[2];
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t *sub_20EEC5978(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      sub_20E867F44();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_20E877A38();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 4;
      if (v17 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 2) + 1;
      v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      v7 = &v6[-v19];
      v16 = (_DWORD *)((char *)v16 - v19);
      v20 = &v15[4 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v6 = *a2;
    v8 = v6 + 4;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

uint64_t sub_20EEC5AE8(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

double sub_20EEC5B64@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  double result;

  v2 = operator new[]();
  *a1 = v2;
  a1[1] = 0;
  v3 = (_QWORD *)operator new();
  *(_QWORD *)&result = 0x100000001;
  v3[1] = 0x100000001;
  *v3 = &off_24C9F0F40;
  v3[2] = v2;
  a1[1] = (uint64_t)v3;
  return result;
}

void sub_20EEC5BE0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x212BC6368](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_20EEC5C04(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EEC5C1C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC5C30(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    JUMPOUT(0x212BC6368);
  return result;
}

uint64_t sub_20EEC5C50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N5boost21checked_array_deleterINS_18default_color_typeEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"N5boost21checked_array_deleterINS_18default_color_typeEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N5boost21checked_array_deleterINS_18default_color_typeEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N5boost21checked_array_deleterINS_18default_color_typeEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EEC5CBC()
{
  return 0;
}

uint64_t sub_20EEC5CC4(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_20EEC5CCC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20EEC5D34(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v19, v3, 2);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x212BC6398]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_20EEC5E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EEC5E98(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC5F00()
{
  return 21;
}

uint64_t sub_20EEC5F08(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20EEC5F10@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20EEC5F24(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20EEC5FA8(unint64_t a1@<X1>, float32x2_t *a2@<X3>, float *a3@<X4>, unsigned __int8 a4@<W5>, _QWORD *a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float32x2_t *v13;
  float32x2_t v14;
  char *v15;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  float v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t *v30;
  float v31;
  BOOL v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float *v37;
  float *v38;
  float *v39;
  float *v40;
  float *v41;
  float v42;
  float v43;
  float *v44;
  char *v45;
  float *v46;
  char *v47;
  char *v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float *v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float *v61;
  float *v62;
  float *v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float *v69;
  float *v70;
  float v71;
  unint64_t v72;
  float32x2_t v73;
  float32x2_t v74;
  uint64_t v75;
  uint64_t v76;
  float32x2_t v77;
  float32x2_t v78;
  int32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  int64x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float v85;
  float32x2_t *v86;
  float v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  float v92;
  float32x2_t *v93;
  uint64_t v94;
  float32x2_t v95;
  float32x2_t v96;
  uint64_t (***v97)();
  uint64_t (***v98)();
  uint64_t (***v99)();
  uint64_t (***v100)();
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float v108;
  float *v109;
  float32x2_t v110;
  float v111;
  float32x2_t *v112;
  float v113;
  float v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float *v123;
  float *v124;
  float32x2_t *v125;
  void (**v126)(float *);
  BOOL v127;
  float *v128;
  float32x2_t v129;
  float32x2_t *v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  _QWORD v134[2];
  float32x2_t v135;
  float32x2_t v136[2];
  float32x2_t v137;
  float32x2_t v138[2];
  __int128 v139;
  uint64_t (**v140)();
  __int128 v141;
  float32x2_t *v142;
  float32x2_t *v143;
  float32x2_t *v144;
  float32x2_t *v145;
  uint64_t (**v146)();
  float32x2_t v147;
  float32x2_t v148;
  uint64_t (**v149)();
  float32x2_t v150;
  float32x2_t v151;
  uint64_t (**v152)();
  __int128 v153;
  uint64_t (**v154)();
  __int128 v155;
  float *v156;
  float32x2_t *v157;
  unint64_t v158;
  float32x2_t v159;
  float32x2_t v160;

  v9 = (uint64_t)(a1 - (_QWORD)a2) >> 3;
  v10 = a4;
  if (a4)
    *a3 = 0.0;
  if (v9 == 1)
  {
    v11 = *(_QWORD *)(a1 - 8);
    *a5 = v11;
    a5[1] = v11;
    a5[2] = v11;
    a5[3] = v11;
    return;
  }
  if (!v9)
  {
    *(_OWORD *)a5 = 0u;
    *((_OWORD *)a5 + 1) = 0u;
    return;
  }
  v156 = 0;
  v157 = 0;
  v158 = 0;
  sub_20EEC6954((uint64_t)&v156, v9);
  if (a1 > (unint64_t)a2)
  {
    v12 = a1 - 8;
    v13 = (float32x2_t *)(a1 - 8);
    do
    {
      if (v13 == a2)
        v17 = a1;
      else
        v17 = v12;
      v18 = v13->f32[0];
      v19 = *(float *)(v17 - 8);
      if (v13->f32[0] != v19)
      {
        v20 = v18 - v19;
        v21 = v19 - v18;
        if (v13->f32[0] >= v19)
          v21 = v20;
        if (v21 > 0.000001)
          goto LABEL_24;
      }
      v22 = v13->f32[1];
      v23 = *(float *)(v17 - 4);
      v24 = v22 < v23;
      if (v22 != v23)
      {
        v25 = v22 - v23;
        v26 = v23 - v22;
        if (!v24)
          v26 = v25;
        if (v26 > 0.000001)
        {
LABEL_24:
          v27 = *v13;
          v28 = vsub_f32(*(float32x2_t *)(v17 - 8), *v13);
          v29 = vmul_n_f32(v28, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v28, v28), (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1), v28, 1).f32[0]));
          v30 = v157;
          if (v156 == (float *)v157)
            goto LABEL_33;
          v31 = v157[-1].f32[0];
          v32 = v29.f32[0] < v31;
          if (v29.f32[0] != v31)
          {
            v33 = v29.f32[0] - v31;
            v34 = v31 - v29.f32[0];
            if (!v32)
              v34 = v33;
            if (v34 > 0.000001)
              goto LABEL_33;
          }
          v35 = v157[-1].f32[1];
          if (v29.f32[1] != v35)
          {
            v36 = v35 - v29.f32[1];
            if (v29.f32[1] >= v35)
              v36 = v29.f32[1] - v35;
            if (v36 > 0.000001)
            {
LABEL_33:
              v146 = &off_24C9F1098;
              v147 = v27;
              v148 = v29;
              if ((unint64_t)v157 < v158)
              {
                *v157 = (float32x2_t)&off_24C9F1098;
                v30[1] = v147;
                v14 = v148;
                v30[1] = v147;
                v30[2] = v14;
                v30[2] = v148;
                v15 = (char *)&v30[3];
              }
              else
              {
                v15 = sub_20EEC6B54((void **)&v156, (uint64_t)&v146);
              }
              v157 = (float32x2_t *)v15;
            }
          }
        }
      }
      v12 -= 8;
    }
    while (v13-- > a2);
  }
  v37 = v156;
  if (v156 == (float *)v157)
  {
    v55 = *(_QWORD *)(a1 - 8);
    *a5 = v55;
    a5[1] = v55;
    a5[2] = v55;
    a5[3] = v55;
    if (!v37)
      return;
    goto LABEL_130;
  }
  v128 = a3;
  v38 = v156;
  v39 = v156;
  v40 = v156;
  v41 = v156;
  if (v156 + 6 != (float *)v157)
  {
    v42 = v156[8];
    v43 = v156[2];
    if (v42 >= v43)
      v39 = v156;
    else
      v39 = v156 + 6;
    if (v42 >= v43)
      v38 = v156 + 6;
    else
      v38 = v156;
    v44 = v156 + 12;
    if (v156 + 12 == (float *)v157)
    {
      v56 = v156[9];
      v57 = v156[3];
      if (v56 >= v57)
        v40 = v156;
      else
        v40 = v156 + 6;
      if (v56 >= v57)
        v41 = v156 + 6;
      else
        v41 = v156;
    }
    else
    {
      v45 = (char *)(v156 + 12);
      v46 = v156;
      while (1)
      {
        v47 = v45;
        v48 = v45 + 24;
        if (v48 == (char *)v157)
          break;
        v49 = v46 + 18;
        v50 = *((float *)v47 + 8);
        v51 = *((float *)v47 + 2);
        v52 = v39[2];
        v53 = v38[2];
        if (v51 >= v52)
          v54 = v39;
        else
          v54 = (float *)v47;
        if (v50 < v53)
          v49 = v38;
        if (v50 < v52)
          v39 = (float *)v48;
        if (v51 >= v53)
          v38 = (float *)v47;
        if (v50 >= v51)
        {
          v39 = v54;
          v38 = v49;
        }
        v45 = v47 + 48;
        v46 = (float *)v47;
        if (v47 + 48 == (char *)v157)
          goto LABEL_71;
      }
      v58 = *((float *)v47 + 2);
      if (v58 >= v39[2])
      {
        if (v58 >= v38[2])
          v38 = (float *)v47;
      }
      else
      {
        v39 = (float *)v47;
      }
LABEL_71:
      v59 = v156[9];
      v60 = v156[3];
      if (v59 >= v60)
        v61 = v156 + 6;
      else
        v61 = v156;
      if (v59 >= v60)
        v40 = v156;
      else
        v40 = v156 + 6;
      v62 = v156;
      while (1)
      {
        v41 = v44;
        v63 = v44 + 6;
        if (v44 + 6 == (float *)v157)
          break;
        v64 = v62 + 18;
        v65 = v41[9];
        v66 = v41[3];
        v67 = v40[3];
        v68 = v61[3];
        if (v66 >= v67)
          v69 = v40;
        else
          v69 = v41;
        if (v65 < v68)
          v64 = v61;
        if (v65 < v67)
          v40 = v63;
        if (v66 >= v68)
          v70 = v41;
        else
          v70 = v61;
        if (v65 < v66)
        {
          v61 = v70;
        }
        else
        {
          v40 = v69;
          v61 = v64;
        }
        v44 = v41 + 12;
        v62 = v41;
        if (v41 + 12 == (float *)v157)
          goto LABEL_97;
      }
      v71 = v44[3];
      if (v71 >= v40[3])
      {
        if (v71 >= v61[3])
          goto LABEL_98;
      }
      else
      {
        v40 = v44;
      }
LABEL_97:
      v41 = v61;
    }
  }
LABEL_98:
  v130 = (float32x2_t *)a5;
  v72 = 0;
  v73 = *(float32x2_t *)(v39 + 2);
  v146 = &off_24C9F1098;
  v147 = v73;
  v148 = (float32x2_t)0x3F80000000000000;
  v149 = &off_24C9F1098;
  v74 = *(float32x2_t *)(v41 + 2);
  v150 = v74;
  v151 = (float32x2_t)1065353216;
  v152 = &off_24C9F1098;
  v75 = *((_QWORD *)v38 + 1);
  *(_QWORD *)&v153 = v75;
  *((_QWORD *)&v153 + 1) = 0xBF80000000000000;
  v154 = &off_24C9F1098;
  v76 = *((_QWORD *)v40 + 1);
  *(_QWORD *)&v155 = v76;
  *((_QWORD *)&v155 + 1) = 3212836864;
  v142 = (float32x2_t *)v39;
  v143 = (float32x2_t *)v41;
  v144 = (float32x2_t *)v38;
  v145 = (float32x2_t *)v40;
  v134[1] = &off_24C9F1098;
  v135 = v73;
  v136[0] = (float32x2_t)0x3F80000000000000;
  v136[1] = (float32x2_t)&off_24C9F1098;
  v137 = v74;
  v138[0] = (float32x2_t)1065353216;
  v138[1] = (float32x2_t)&off_24C9F1098;
  *(_QWORD *)&v139 = v75;
  *((_QWORD *)&v139 + 1) = 0xBF80000000000000;
  v140 = &off_24C9F1098;
  *(_QWORD *)&v141 = v76;
  *((_QWORD *)&v141 + 1) = 3212836864;
  v77 = vadd_f32(v73, (float32x2_t)0x3F80000000000000);
  v78 = vsub_f32(v77, v73);
  v79 = (int32x2_t)vmla_lane_f32(vmul_f32(v78, v78), (float32x2_t)vdup_lane_s32((int32x2_t)v78, 1), v78, 1);
  v80 = vadd_f32(v74, (float32x2_t)1065353216);
  v81 = vsub_f32(v80, v74);
  v82.i64[0] = v75;
  v82.i64[1] = v76;
  v83 = (float32x2_t)vzip2_s32((int32x2_t)v73, (int32x2_t)v74);
  v84 = vdiv_f32(vsub_f32(vmul_f32(vsub_f32(v83, (float32x2_t)vshrn_n_s64(v82, 0x20uLL)), vsub_f32((float32x2_t)vzip1_s32((int32x2_t)v77, (int32x2_t)v80), (float32x2_t)__PAIR64__(v74.u32[0], v73.u32[0]))), vmul_f32(vsub_f32((float32x2_t)__PAIR64__(v74.u32[0], v73.u32[0]), (float32x2_t)__PAIR64__(v76, v75)), vsub_f32((float32x2_t)vzip2_s32((int32x2_t)v77, (int32x2_t)v80), v83))), vsqrt_f32((float32x2_t)vzip1_s32(v79, (int32x2_t)vmla_lane_f32(vmul_f32(v81, v81), (float32x2_t)vdup_lane_s32((int32x2_t)v81, 1), v81, 1))));
  v85 = fabsf(vmul_lane_f32(v84, v84, 1).f32[0]);
  do
  {
    v86 = v142;
    v87 = vmla_lane_f32(vmul_f32(v148, v142[2]), (float32x2_t)vdup_lane_s32((int32x2_t)v142[2], 1), v148, 1).f32[0];
    LODWORD(v88) = vmla_lane_f32(vmul_f32(v151, v143[2]), (float32x2_t)vdup_lane_s32((int32x2_t)v143[2], 1), v151, 1).u32[0];
    LODWORD(v89) = vmla_lane_f32(vmul_f32(*(float32x2_t *)((char *)&v153 + 8), v144[2]), (float32x2_t)vdup_lane_s32((int32x2_t)v144[2], 1), *(float32x2_t *)((char *)&v153 + 8), 1).u32[0];
    if (v87 <= -1.0)
      v86 = (float32x2_t *)v37;
    v90 = fmaxf(v87, -1.0);
    if (v88 <= v90)
    {
      v91 = 0;
    }
    else
    {
      v86 = v143;
      v91 = 1;
    }
    if (v88 > v90)
      v90 = v88;
    if (v89 > v90)
    {
      v86 = v144;
      v91 = 2;
      v90 = v89;
    }
    v92 = vmla_lane_f32(vmul_f32(*(float32x2_t *)((char *)&v155 + 8), v145[2]), (float32x2_t)vdup_lane_s32((int32x2_t)v145[2], 1), *(float32x2_t *)((char *)&v155 + 8), 1).f32[0];
    if (v92 <= v90)
      v93 = v86;
    else
      v93 = v145;
    if (v92 <= v90)
      v94 = v91;
    else
      v94 = 3;
    v95 = vmul_n_f32(v93[2], 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v93[2], v93[2]), (float32x2_t)vdup_lane_s32((int32x2_t)v93[2], 1), v93[2], 1).f32[0]));
    v96.i32[0] = vdup_lane_s32((int32x2_t)v95, 1).u32[0];
    v96.f32[1] = -v95.f32[0];
    v131 = v95;
    v132 = v96;
    v133 = vneg_f32(v95);
    v134[0] = vneg_f32(v96);
    v97 = &(&v146)[3 * v94];
    ((void (*)(uint64_t (***)(), float32x2_t *))(*v97)[3])(v97, &v131);
    v98 = &(&v146)[3 * ((v94 + 1) & 3)];
    ((void (*)(uint64_t (***)(), float32x2_t *))(*v98)[3])(v98, &v132);
    v99 = &(&v146)[3 * ((v94 + 2) & 3)];
    ((void (*)(uint64_t (***)(), float32x2_t *))(*v99)[3])(v99, &v133);
    v100 = &(&v146)[3 * ((v94 - 1) & 3)];
    ((void (*)(uint64_t (***)(), _QWORD *))(*v100)[3])(v100, v134);
    v101 = vadd_f32(v147, v148);
    v102 = vsub_f32(v101, v147);
    v103 = vadd_f32(v150, v151);
    v104 = vsub_f32(v103, v150);
    v105 = (float32x2_t)vzip1_s32((int32x2_t)v147, (int32x2_t)v150);
    v106 = (float32x2_t)vzip2_s32((int32x2_t)v147, (int32x2_t)v150);
    v107 = vdiv_f32(vsub_f32(vmul_f32(vsub_f32(v106, (float32x2_t)__PAIR64__(DWORD1(v155), DWORD1(v153))), vsub_f32((float32x2_t)vzip1_s32((int32x2_t)v101, (int32x2_t)v103), v105)), vmul_f32(vsub_f32(v105, (float32x2_t)__PAIR64__(v155, v153)), vsub_f32((float32x2_t)vzip2_s32((int32x2_t)v101, (int32x2_t)v103), v106))), vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vmla_lane_f32(vmul_f32(v102, v102), (float32x2_t)vdup_lane_s32((int32x2_t)v102, 1), v102, 1), (int32x2_t)vmla_lane_f32(vmul_f32(v104, v104), (float32x2_t)vdup_lane_s32((int32x2_t)v104, 1), v104, 1))));
    v108 = fabsf(vmul_lane_f32(v107, v107, 1).f32[0]);
    if (v108 < v85)
    {
      v135 = v147;
      v136[0] = v148;
      v137 = v150;
      v138[0] = v151;
      v139 = v153;
      v141 = v155;
      v85 = v108;
    }
    if (&v93[3] == v157)
      v109 = v156;
    else
      v109 = (float *)&v93[3];
    ((void (*)(uint64_t (***)(), float *))(*v97)[2])(&(&v146)[3 * v94], v109 + 2);
    (&v142)[v94] = (float32x2_t *)v109;
    ++v72;
    v37 = v156;
  }
  while (v72 < 0xAAAAAAAAAAAAAAABLL * (((char *)v157 - (char *)v156) >> 3));
  v110 = v136[0];
  if (v10)
  {
    v111 = vmla_lane_f32(v136[0], 0, v136[0], 1).f32[0];
    v112 = v136;
    if (v111 >= 0.70711
      || (v111 = vmla_lane_f32(v138[0], 0, v138[0], 1).f32[0], v112 = v138, v111 >= 0.70711)
      || (v111 = vmla_lane_f32(*(float32x2_t *)((char *)&v139 + 8), 0, *(float32x2_t *)((char *)&v139 + 8), 1).f32[0],
          v112 = (float32x2_t *)&v139 + 1,
          v111 >= 0.70711)
      || (v111 = vmla_lane_f32(*(float32x2_t *)((char *)&v141 + 8), 0, *(float32x2_t *)((char *)&v141 + 8), 1).f32[0],
          v113 = 0.0,
          v112 = (float32x2_t *)&v141 + 1,
          v111 >= 0.70711))
    {
      v129 = v136[0];
      v114 = acosf(v111);
      v110 = v129;
      if (v112->f32[1] >= 0.0)
        v113 = v114;
      else
        v113 = -v114;
    }
    *v128 = v113;
  }
  v115 = v135;
  v116 = v137;
  v117 = vadd_f32(v110, v135);
  v131 = v135;
  v132 = v117;
  v118 = vadd_f32(v137, v138[0]);
  v159 = v137;
  v160 = v118;
  sub_20EEC6D54(&v131, &v159, v130 + 1, 1);
  v131 = v116;
  v132 = v118;
  v119 = (float32x2_t)v139;
  v120 = vadd_f32(*(float32x2_t *)&v139, *(float32x2_t *)((char *)&v139 + 8));
  v159 = (float32x2_t)v139;
  v160 = v120;
  sub_20EEC6D54(&v131, &v159, v130 + 2, 1);
  v131 = v119;
  v132 = v120;
  v121 = (float32x2_t)v141;
  v122 = vadd_f32(*(float32x2_t *)&v141, *(float32x2_t *)((char *)&v141 + 8));
  v159 = (float32x2_t)v141;
  v160 = v122;
  sub_20EEC6D54(&v131, &v159, v130 + 3, 1);
  v131 = v121;
  v132 = v122;
  v159 = v115;
  v160 = v117;
  sub_20EEC6D54(&v131, &v159, v130, 1);
  v37 = v156;
  if (v156)
  {
LABEL_130:
    v123 = v37;
    if (v157 != (float32x2_t *)v37)
    {
      v124 = (float *)&v157[-3];
      v125 = v157 - 3;
      do
      {
        v126 = (void (**)(float *))*v125;
        v125 -= 3;
        (*v126)(v124);
        v127 = v124 == v37;
        v124 = (float *)v125;
      }
      while (!v127);
      v123 = v156;
    }
    v157 = (float32x2_t *)v37;
    operator delete(v123);
  }
}

void sub_20EEC687C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EEC68E4((void **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_20EEC6890(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EEC68E4((void **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_20EEC68A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EEC68E4((void **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_20EEC68B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EEC68E4((void **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_20EEC68CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EEC68E4((void **)(v1 - 160));
  _Unwind_Resume(a1);
}

void **sub_20EEC68E4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 24;
      v6 = v3 - 24;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 24;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EEC6954(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  double *v18;
  uint64_t *v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void (**v28)(char *);
  BOOL v29;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = (v4 - v2) / 24;
    v9 = &v6[24 * v8];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v7;
LABEL_19:
      if (v2)
        operator delete(v2);
      return;
    }
    v10 = v4 - v2 - 24;
    if (v10 >= 0x318)
    {
      v13 = v10 / 0x18;
      v14 = (unint64_t)&v6[24 * v8 - 24 + -24 * (v10 / 0x18)];
      v15 = (unint64_t)&v4[-24 * (v10 / 0x18) - 16];
      v16 = v14 >= (unint64_t)v4 || v15 >= (unint64_t)v9;
      v11 = v4;
      v12 = v9;
      if (v16)
      {
        v17 = v13 + 1;
        v11 = &v4[-24 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
        v12 = &v9[-24 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
        v18 = (double *)(v9 - 48);
        v19 = (uint64_t *)(v4 - 16);
        v20 = vdupq_n_s64((unint64_t)&off_24C9F1098);
        v21 = v17 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          v22 = *(v19 - 3);
          v23 = *v19;
          v24 = *(v19 - 2);
          v25 = v19[1];
          vst3q_f64(v18, *(float64x2x3_t *)v20.i8);
          v18 -= 6;
          v19 -= 6;
          v21 -= 2;
        }
        while (v21);
        if (v17 == (v17 & 0x1FFFFFFFFFFFFFFELL))
          goto LABEL_16;
      }
    }
    else
    {
      v11 = v4;
      v12 = &v6[24 * v8];
    }
    do
    {
      *((_QWORD *)v12 - 3) = &off_24C9F1098;
      v12 -= 24;
      *(_OWORD *)(v12 + 8) = *((_OWORD *)v11 - 1);
      v11 -= 24;
    }
    while (v11 != v2);
LABEL_16:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v7;
    v26 = v4 - 24;
    v27 = v4 - 24;
    do
    {
      v28 = *(void (***)(char *))v27;
      v27 -= 24;
      (*v28)(v26);
      v29 = v26 == v2;
      v26 = v27;
    }
    while (!v29);
    goto LABEL_19;
  }
}

void sub_20EEC6B28()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEC6B3C(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 8) = *a2;
  return result;
}

uint64_t sub_20EEC6B48(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 16) = *a2;
  return result;
}

char *sub_20EEC6B54(void **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  double *v23;
  char *v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (**v33)(char *);
  BOOL v34;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = v3 - (_BYTE *)*a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3) + 1;
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * (((_BYTE *)a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v4) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    sub_20E877A38();
  v8 = 24 * v6;
  v9 = (char *)operator new(24 * v6);
  v10 = &v9[8 * (v5 >> 3)];
  v11 = &v9[v8];
  *(_QWORD *)v10 = &off_24C9F1098;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 8);
  v12 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v3)
      return v12;
    goto LABEL_26;
  }
  v13 = v3 - v4 - 24;
  if (v13 < 0x318)
  {
    v14 = v3;
LABEL_20:
    v22 = v10;
    do
    {
      *((_QWORD *)v22 - 3) = &off_24C9F1098;
      v22 -= 24;
      *(_OWORD *)(v22 + 8) = *((_OWORD *)v14 - 1);
      v14 -= 24;
    }
    while (v14 != v4);
    goto LABEL_22;
  }
  v15 = v13 / 0x18;
  v16 = 24 * (v13 / 0x18);
  v17 = (unint64_t)&v9[v5 - v16 - 24];
  v18 = (unint64_t)&v3[-v16 - 16];
  v19 = v17 >= (unint64_t)v3 || v18 >= (unint64_t)v10;
  v14 = v3;
  if (!v19)
    goto LABEL_20;
  v20 = v15 + 1;
  v21 = (v15 + 1) & 0x1FFFFFFFFFFFFFFELL;
  v14 = &v3[-24 * v21];
  v22 = &v10[-24 * v21];
  v23 = (double *)(v10 - 48);
  v24 = v3 - 16;
  v25 = vdupq_n_s64((unint64_t)&off_24C9F1098);
  v26 = v21;
  do
  {
    v27 = *((_QWORD *)v24 - 3);
    v28 = *(_QWORD *)v24;
    v29 = *((_QWORD *)v24 - 2);
    v30 = *((_QWORD *)v24 + 1);
    vst3q_f64(v23, *(float64x2x3_t *)v25.i8);
    v23 -= 6;
    v24 -= 48;
    v26 -= 2;
  }
  while (v26);
  v10 = v22;
  if (v20 != v21)
    goto LABEL_20;
LABEL_22:
  *a1 = v22;
  a1[1] = v12;
  a1[2] = v11;
  v31 = v3 - 24;
  v32 = v31;
  do
  {
    v33 = *(void (***)(char *))v32;
    v32 -= 24;
    (*v33)(v31);
    v34 = v31 == v4;
    v31 = v32;
  }
  while (!v34);
  v3 = v4;
  if (v4)
LABEL_26:
    operator delete(v3);
  return v12;
}

uint64_t sub_20EEC6D54(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, char a4)
{
  float32x2_t *v4;
  float v5;
  float v6;
  float v7;
  float32x2_t *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v26;
  float v27;
  BOOL v28;
  BOOL v29;
  float *v31;
  float *v32;
  _BOOL4 v33;
  _BOOL4 v34;
  BOOL v35;
  float v36;
  float v37;
  float *v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;

  v4 = a2 + 1;
  v5 = a2[1].f32[0];
  v6 = a2[1].f32[1];
  v7 = a2->f32[1];
  v8 = a1 + 1;
  v9 = a1[1].f32[0];
  v10 = a1->f32[0];
  v11 = v9 - a1->f32[0];
  v12 = a2->f32[0];
  v13 = v5 - a2->f32[0];
  v14 = (float *)&a1[1] + 1;
  v15 = a1[1].f32[1];
  v16 = (float *)a1 + 1;
  v17 = a1->f32[1];
  v18 = (float)((float)(v6 - v7) * v11) - (float)(v13 * (float)(v15 - v17));
  v19 = a1->f32[0] - a2->f32[0];
  v20 = (float)(v13 * (float)(v17 - v7)) - (float)((float)(v6 - v7) * v19);
  v21 = (float)(v11 * (float)(v17 - v7)) - (float)(v19 * (float)(v15 - v17));
  if (v18 == 0.0)
    goto LABEL_14;
  v22 = 0.0 - v18;
  if (v18 >= 0.0)
    v22 = v18;
  if (v22 <= 0.000001)
  {
LABEL_14:
    if (v20 != 0.0)
    {
      v26 = 0.0 - v20;
      if (v20 >= 0.0)
        v26 = v20;
      if (v26 > 0.000001)
        return 0;
    }
    if (v21 != 0.0)
    {
      v27 = 0.0 - v21;
      if (v21 >= 0.0)
        v27 = v21;
      if (v27 > 0.000001)
        return 0;
    }
    v28 = v12 == v10 && v7 == v17;
    if (v28 || (v5 == v10 ? (v29 = v6 == v17) : (v29 = 0), v29))
    {
      *a3 = *a1;
      return 1;
    }
    if (v5 == v9 && v6 == v15 || v12 == v9 && v7 == v15)
    {
      *a3 = *v8;
      return 1;
    }
    if (v12 > v10 && v5 > v9 && v5 > v10 && v12 > v9)
      return 0;
    if (v7 > v17 && v6 > v15 && v7 > v15 && v6 > v17)
      return 0;
    if (v12 < v10 && v5 < v9 && v5 < v10 && v12 < v9)
      return 0;
    if (v7 < v17 && v6 < v15 && v7 < v15 && v6 < v17)
      return 0;
    if (v10 <= v9 || v5 >= v10 || (v31 = (float *)a1 + 1, v32 = (float *)a1, v12 >= v10))
    {
      if (v7 >= v17 || v6 >= v17 || (v31 = (float *)a1 + 1, v32 = (float *)a1, v17 <= v15))
      {
        if (v5 >= v9 || v9 <= v10 || (v31 = (float *)&a1[1] + 1, v32 = (float *)&a1[1], v12 >= v9))
        {
          if (v7 >= v15 || v6 >= v15 || (v31 = (float *)&a1[1] + 1, v32 = (float *)&a1[1], v15 <= v17))
          {
            if (v12 <= v10 || v12 <= v5 || (v31 = (float *)a2 + 1, v32 = (float *)a2, v12 <= v9))
            {
              v33 = v7 > v17;
              v34 = v7 > v6;
              if (v7 <= v15)
                v34 = 0;
              v35 = !v34 || !v33;
              if (v34 && v33)
                v31 = (float *)a2 + 1;
              else
                v31 = (float *)&a2[1] + 1;
              if (v35)
                v32 = (float *)&a2[1];
              else
                v32 = (float *)a2;
            }
          }
        }
      }
    }
    v36 = *v32;
    v37 = *v31;
    if (*v32 != v10 || v37 != v17)
    {
      if (v10 < v9 && v5 > v10)
      {
        v38 = (float *)a1 + 1;
        v39 = (float *)a1;
        if (v12 > v10)
          goto LABEL_112;
      }
      if (v7 > v17 && v6 > v17)
      {
        v38 = (float *)a1 + 1;
        v39 = (float *)a1;
        if (v17 < v15)
          goto LABEL_112;
      }
    }
    if (v36 != v9 || v37 != v15)
    {
      if (v10 > v9 && v5 > v9)
      {
        v38 = (float *)&a1[1] + 1;
        v39 = (float *)&a1[1];
        if (v12 > v9)
          goto LABEL_112;
      }
      if (v7 > v15 && v6 > v15)
      {
        v38 = (float *)&a1[1] + 1;
        v39 = (float *)&a1[1];
        if (v15 < v17)
          goto LABEL_112;
      }
    }
    if (v36 == v12 && v37 == v7)
      goto LABEL_90;
    if (v12 < v10 && v12 < v5 && v12 < v9)
    {
      v38 = (float *)a2 + 1;
      v39 = (float *)a2;
      goto LABEL_112;
    }
    if (v7 >= v6 || v7 >= v15 || (v38 = (float *)a2 + 1, v39 = (float *)a2, v7 >= v17))
    {
LABEL_90:
      v38 = (float *)&a2[1] + 1;
      v39 = (float *)&a2[1];
    }
LABEL_112:
    v40 = *v39;
    v41 = *v38;
    *a3 = 0;
    if ((a1->f32[0] != v36 || *v16 != v37) && (a1->f32[0] != v40 || *v16 != v41))
      *a3 = vadd_f32(*a3, *a1);
    if ((v8->f32[0] != v36 || *v14 != v37) && (v8->f32[0] != v40 || *v14 != v41))
      *a3 = vadd_f32(*a3, *v8);
    v42 = a2->f32[1];
    if ((a2->f32[0] != v36 || v42 != v37) && (a2->f32[0] != v40 || v42 != v41))
      *a3 = vadd_f32(*a3, *a2);
    v43 = a2[1].f32[1];
    if (v4->f32[0] == v36 && v43 == v37)
    {
      *a3 = vmul_f32(*a3, (float32x2_t)0x3F0000003F000000);
      return 1;
    }
    else
    {
      v44 = *a3;
      if (v4->f32[0] != v40 || v43 != v41)
        v44 = vadd_f32(v44, *v4);
      *a3 = vmul_f32(v44, (float32x2_t)0x3F0000003F000000);
      return 1;
    }
  }
  v23 = v20 / v18;
  if ((a4 & 1) != 0)
    goto LABEL_40;
  if (v23 < 0.0 || v23 > 1.0)
    return 0;
  if ((float)(v21 / v18) < 0.0 || (float)(v21 / v18) > 1.0)
    return 0;
LABEL_40:
  a3->f32[0] = v10 + (float)(v11 * v23);
  a3->f32[1] = *v16 + (float)(v23 * (float)(*v14 - *v16));
  return 1;
}

unint64_t *sub_20EEC7298(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _DWORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  void *memptr[3];
  _QWORD v36[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 4 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    v20 = malloc_type_posix_memalign(memptr, v19, 4 * v14, 0x1F88E90uLL);
    if (v20)
      sub_210207B94(v20, a1[2], v15);
    v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
    if (v21 && a6)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = (void *)v22;
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x3FFFFFFF3FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 30) >> 2) == -1
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v36[0] = memptr;
      v36[1] = a5;
      v25 = v11 & 0x3FFFFFFF;
      if (v25 == 1)
      {
        sub_20EEC74F8((uint64_t)v36);
        return a1;
      }
      if ((_DWORD)v24 && HIDWORD(v24))
      {
        v26 = (_DWORD)v24 - 1;
        v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          v28 = HIDWORD(v11) & 0x3FFFFFFF;
          if ((_DWORD)v24 == 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
LABEL_39:
            *v21 = *a5;
            return a1;
          }
          v29 = 0;
          v30 = 4 * v28;
          do
          {
            v31 = v21;
            v32 = (_DWORD)v24 - 1;
            do
            {
              *v31 = *a5;
              v31 += v25;
              --v32;
            }
            while (v32);
            *v31 = *a5;
            v21 = (_DWORD *)((char *)v21 + v30);
            ++v29;
          }
          while (v29 != v27);
        }
        if ((_DWORD)v24 != 1)
        {
          v33 = 4 * v25;
          do
          {
            *v21 = *a5;
            v21 = (_DWORD *)((char *)v21 + v33);
            --v26;
          }
          while (v26);
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  }
  return a1;
}

void sub_20EEC74DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEC74F8(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  _DWORD v22[5];
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  v5 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v1 + 12) * v3);
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v12 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v12 < 0x10)
      goto LABEL_19;
    v13 = 4 * v6;
    if (!(_DWORD)v6)
      v13 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      v14 = (_DWORD *)v7;
LABEL_20:
      v15 = v6 + 1;
      do
      {
        *v14++ = *(_DWORD *)v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    v14 = (_DWORD *)(v7 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF8;
    v16 = vld1q_dup_f32(v2);
    v17 = (float32x4_t *)(v7 + 16);
    v18 = v12 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_20;
  }
  else
  {
    v20 = 0;
    v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    v21[2] = v2;
    v9 = *(_DWORD *)(v1 + 12);
    if ((_DWORD)v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      v22[2] = v5;
      v22[3] = v9 - 1;
      v22[4] = v4;
      v11 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_20EEC7688((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

uint64_t sub_20EEC7688(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const float **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          v15 = -4;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v17 = vld1q_dup_f32(v10);
            v18 = (float32x4_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_DWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const float **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 4 * v23;
    if (!v24)
      v26 = 4;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_DWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v22);
    v30 = (float32x4_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

uint64_t sub_20EEC78DC(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  BOOL v29;
  void *v30;
  void *v32[2];
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36[2];

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 4 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    v32[0] = 0;
    v24 = malloc_type_posix_memalign(v32, v23, 4 * v18, 0x1F88E90uLL);
    if (v24)
      sub_210207B94(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = v32[0];
    *(void **)(a1 + 8) = v32[0];
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 44) = 4 * v12;
  if (v25 && a6)
  {
    v27 = *(_DWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 24))
      v28 = *(_DWORD *)(a1 + 28) == 0;
    else
      v28 = 1;
    v29 = v28 || v27 == 0;
    v30 = *(void **)(a1 + 24);
    if (v29)
    {
      v30 = 0;
      v27 = 0;
    }
    v32[0] = v25;
    v32[1] = v30;
    v33 = v27;
    v34 = v11 & 0x3FFFFFFF3FFFFFFFLL;
    v35 = v12 & 0x3FFFFFFF;
    if (v27 * (v12 & 0x3FFFFFFF) == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v36[0] = (uint64_t)v32;
    v36[1] = a5;
    sub_20EEC7ABC(v36);
  }
  return a1;
}

void sub_20EEC7AA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_20EEC7ABC(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD v12[7];
  char v13;

  v2 = *a1;
  v3 = *(_DWORD *)(v2 + 20);
  if (v3 == 1)
  {
    if (*(_DWORD *)(v2 + 24) == *(_DWORD *)(v2 + 8))
      sub_20EEC7B70((uint64_t)a1);
    else
      sub_20EEC7F78(v2, a1[1]);
  }
  else
  {
    v11 = (_DWORD *)a1[1];
    v5 = *(_DWORD *)(v2 + 8);
    v4 = *(_DWORD *)(v2 + 12);
    v6 = *(_DWORD *)(v2 + 16);
    if (v5)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7 && v6 != 0)
    {
      v12[0] = 0;
      v12[1] = v5 - 1;
      v12[2] = v3;
      v12[3] = v4 - 1;
      v9 = *(_DWORD *)(v2 + 28);
      v12[4] = *(_DWORD *)(v2 + 24);
      v12[5] = v6 - 1;
      v12[6] = v9;
      v10 = *(_DWORD **)v2;
      v13 = 0;
      sub_20EEC8038(v12, (uint64_t)&v13, &v11, v10);
    }
  }
}

uint64_t sub_20EEC7B70(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];
  _DWORD v24[7];
  unint64_t v25[2];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(_DWORD *)(*(_QWORD *)result + 12);
  v5 = *(_DWORD *)(*(_QWORD *)result + 24);
  v4 = *(_DWORD *)(*(_QWORD *)result + 28);
  if (v4 == v5 * v3)
  {
    v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v14 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v14 < 0x10)
      goto LABEL_22;
    v15 = 4 * v6;
    if (!(_DWORD)v6)
      v15 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      v16 = (_DWORD *)v7;
LABEL_23:
      v17 = v6 + 1;
      do
      {
        *v16++ = *(_DWORD *)v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    v16 = (_DWORD *)(v7 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF8;
    v18 = vld1q_dup_f32(v2);
    v19 = (float32x4_t *)(v7 + 16);
    v20 = v14 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_23;
  }
  else
  {
    v22 = 0;
    v9 = *(_DWORD *)(v1 + 8);
    v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    v23[2] = v2;
    v10 = *(_DWORD *)(v1 + 16);
    if (v3)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      v24[2] = *(_DWORD *)(v1 + 20);
      v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      v13 = *(_QWORD *)v1;
      v25[0] = 0;
      v25[1] = 0;
      return sub_20EEC7D20((_BOOL8)v24, v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_20EEC7D20(_BOOL8 result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unsigned int *v8;
  unsigned int i;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(unsigned int *)(result + 8) | ((unint64_t)*(unsigned int *)(result + 16) << 32);
  *a2 = a4;
  a2[1] = v7;
  if (*(_DWORD *)(result + 20))
  {
    v8 = (unsigned int *)result;
    for (i = 0; i < v8[5]; ++i)
    {
      *a2 = v4;
      v10 = *(const float **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          if (result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          v15 = -4;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v17 = vld1q_dup_f32(v10);
            v18 = (float32x4_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_DWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * v8[6];
    }
  }
  *a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const float **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if (result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 4 * v23;
    if (!v24)
      v26 = 4;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_DWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v22);
    v30 = (float32x4_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

uint64_t sub_20EEC7F78(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  _QWORD v13[3];
  _DWORD v14[5];
  unsigned int v15;
  unsigned int v16;
  _QWORD v17[2];

  v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  v3 = *(unsigned int *)(result + 8);
  v2 = *(_DWORD *)(result + 12);
  v11 = v3;
  v13[2] = a2;
  v4 = *(_DWORD *)(result + 16);
  if ((_DWORD)v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    v7 = *(_DWORD *)(result + 24);
    v14[2] = *(_DWORD *)(result + 20);
    v14[3] = v2 - 1;
    v8 = *(_DWORD *)(result + 28);
    v9 = *(_QWORD *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    v15 = v4 - 1;
    v16 = v8;
    if (v4 != 1)
    {
      v10 = 0;
      do
      {
        sub_20EEC7688((uint64_t)v14, (uint64_t)v17, (uint64_t)v13, v9);
        v9 += 4 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_20EEC7688((uint64_t)v14, (uint64_t)v17, (uint64_t)v13, v9);
  }
  return result;
}

float sub_20EEC8038(_DWORD *a1, uint64_t a2, _DWORD **a3, _DWORD *a4)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  float result;

  v4 = a1[5];
  v5 = a1[3];
  if (!v4)
  {
    v6 = a1[1];
    if (v5)
      goto LABEL_14;
LABEL_25:
    v7 = *a3;
    if (!v6)
      goto LABEL_33;
    goto LABEL_26;
  }
  v6 = a1[1];
  v7 = *a3;
  v8 = a1[6];
  if (v5)
  {
    v9 = a1[4];
    if (!v6)
    {
      do
      {
        v33 = a4;
        v34 = v5;
        do
        {
          *v33 = *v7;
          v33 += v9;
          --v34;
        }
        while (v34);
        *v33 = *v7;
        a4 += v8;
        ++v6;
      }
      while (v6 != v4);
      do
      {
LABEL_32:
        *a4 = *v7;
        a4 += v9;
        --v5;
      }
      while (v5);
      goto LABEL_33;
    }
    v10 = 0;
    v11 = 4 * v8;
    v12 = v9;
    v13 = 4 * a1[2];
    v14 = &a4[v12];
    do
    {
      v15 = 0;
      v16 = v14;
      v17 = a4;
      do
      {
        v18 = v16;
        v19 = v17;
        v20 = v6;
        do
        {
          *v19 = *v7;
          v19 = (_DWORD *)((char *)v19 + v13);
          --v20;
        }
        while (v20);
        *v19 = *v7;
        v17 = (_DWORD *)((char *)v17 + v12 * 4);
        ++v15;
        v16 = &v18[v12];
      }
      while (v15 != v5);
      v21 = v6;
      do
      {
        *v18 = *v7;
        v18 = (_DWORD *)((char *)v18 + v13);
        --v21;
      }
      while (v21);
      *v18 = *v7;
      a4 = (_DWORD *)((char *)a4 + v11);
      ++v10;
      v14 = (_DWORD *)((char *)v14 + v11);
    }
    while (v10 != v4);
LABEL_14:
    v7 = *a3;
    v9 = a1[4];
    if (v6)
    {
      v22 = 0;
      v23 = 4 * v9;
      v24 = 4 * a1[2];
      do
      {
        v25 = a4;
        v26 = v6;
        do
        {
          *v25 = *v7;
          v25 = (_DWORD *)((char *)v25 + v24);
          --v26;
        }
        while (v26);
        *v25 = *v7;
        a4 = (_DWORD *)((char *)a4 + v23);
        ++v22;
      }
      while (v22 != v5);
LABEL_26:
      v32 = 4 * a1[2];
      do
      {
        *a4 = *v7;
        a4 = (_DWORD *)((char *)a4 + v32);
        --v6;
      }
      while (v6);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v6)
  {
    v27 = 0;
    v28 = 4 * v8;
    v29 = 4 * a1[2];
    do
    {
      v30 = a4;
      v31 = v6;
      do
      {
        *v30 = *v7;
        v30 = (_DWORD *)((char *)v30 + v29);
        --v31;
      }
      while (v31);
      *v30 = *v7;
      a4 = (_DWORD *)((char *)a4 + v28);
      ++v27;
    }
    while (v27 != v4);
    goto LABEL_25;
  }
  do
  {
    *a4 = *v7;
    a4 += v8;
    --v4;
  }
  while (v4);
  v7 = *a3;
LABEL_33:
  result = *(float *)v7;
  *a4 = *v7;
  return result;
}

uint64_t sub_20EEC8250(uint64_t a1, float32x2_t *a2, float a3, float a4)
{
  float32x2_t *v8;
  uint64_t v9;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  __int32 v19;
  uint64_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  unsigned __int32 v33;
  float v34;
  float32x4_t v35;
  float32x2_t v36;
  float v37;
  float v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float v42;
  unsigned __int32 v43;
  float v44;
  float32x4_t v45;
  float32x2_t v46;
  float v47;
  float v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float v52;
  float v53;
  int8x16_t v54;
  float v55;
  unsigned __int32 v56;
  float32x4_t v57;
  float32x2_t v58;
  float v59;
  float v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float v64;
  float v65;
  int8x16_t v66;
  float v67;
  unsigned __int32 v68;
  float32x4_t v69;
  float32x2_t v70;
  float v71;
  float v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float v76;
  float v77;
  int8x16_t v78;
  float v79;
  unsigned __int32 v80;
  float32x4_t v81;
  float32x2_t v82;
  float v83;
  float v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float v89;
  float v90;
  int8x16_t v91;
  float v92;
  unsigned __int32 v93;
  float v95;
  BOOL v96;
  int8x16_t v97;
  float v98;
  int8x16_t v99;
  float32x2_t v100;
  uint64_t v101;
  __int32 v102;
  uint64_t v103;
  uint64_t v104;
  float v105;

  *(_OWORD *)a1 = xmmword_2103898F0;
  *(_OWORD *)(a1 + 16) = xmmword_2103898F0;
  *(_OWORD *)(a1 + 32) = xmmword_2103898F0;
  *(_OWORD *)(a1 + 48) = xmmword_2103898F0;
  *(_OWORD *)(a1 + 64) = xmmword_2103898F0;
  *(_OWORD *)(a1 + 80) = xmmword_2103898F0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = (float32x2_t *)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 1065353216;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0x3F80000000000000;
  v103 = 0;
  v9 = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 56))(v9, &v103, &v104);
  __asm { FMOV            V1.2S, #-1.0 }
  v100 = vadd_f32(a2[12], _D1);
  v15 = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, float32x2_t *, uint64_t *))(*(_QWORD *)v15 + 56))(v15, &v100, &v101);
  *v8 = 0;
  *(float *)(a1 + 104) = a3;
  *(_OWORD *)(a1 + 108) = xmmword_210389900;
  *(_DWORD *)(a1 + 124) = 0;
  *(float *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 132) = 0;
  *(_DWORD *)(a1 + 140) = 1065353216;
  v22.i32[0] = HIDWORD(v104);
  v16 = -v105;
  v25.i32[0] = v104;
  v17 = v104;
  *(_QWORD *)(a1 + 144) = v104;
  v18 = v105;
  *(float *)(a1 + 152) = v105;
  *(float *)(a1 + 156) = v16;
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 164) = v25.i32[0];
  v23.i32[0] = HIDWORD(v101);
  v25.f32[0] = -*(float *)&v101;
  v19 = v102;
  *(_DWORD *)(a1 + 176) = v102;
  *(_QWORD *)(a1 + 192) = v17;
  v20 = v101;
  *(_QWORD *)(a1 + 168) = v101;
  v26.i32[0] = v102;
  *(_DWORD *)(a1 + 180) = v102;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = v25.i32[0];
  *(_QWORD *)(a1 + 200) = LODWORD(v18);
  *(float *)(a1 + 208) = v16;
  *(_DWORD *)(a1 + 212) = v22.i32[0];
  v21.f32[0] = -v23.f32[0];
  *(_QWORD *)(a1 + 216) = v20;
  *(_DWORD *)(a1 + 224) = v19;
  *(_DWORD *)(a1 + 228) = 0;
  v22.i32[0] = *(_DWORD *)(a1 + 116);
  v23.i64[0] = *(_QWORD *)(a1 + 108);
  v24 = v23;
  v24.i32[2] = v22.i32[0];
  *(int32x2_t *)v25.f32 = vdup_lane_s32(*(int32x2_t *)v23.f32, 1);
  *(_DWORD *)(a1 + 232) = v26.i32[0];
  *(_DWORD *)(a1 + 236) = v21.i32[0];
  *(float32x2_t *)v26.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32), *(float32x2_t *)v25.f32, *(float32x2_t *)v23.f32, 1), v22, v22);
  if (*(float *)v26.i32 == 1.0
    || (*(float *)v26.i32 >= 1.0 ? (v27 = *(float *)v26.i32 + -1.0) : (v27 = 1.0 - *(float *)v26.i32), v27 <= 0.000001))
  {
    v26.i32[0] = v8[1].i32[0];
    v33 = vmla_f32(vmla_lane_f32(vmul_f32(*v8, *(float32x2_t *)v23.f32), *(float32x2_t *)v25.f32, *v8, 1), v22, *(float32x2_t *)v26.i8).u32[0];
  }
  else
  {
    v21.f32[0] = 1.0 / sqrtf(*(float *)v26.i32);
    v24 = vmulq_n_f32(v24, v21.f32[0]);
    *(float32x2_t *)v25.f32 = *v8;
    v25.i32[2] = v8[1].i32[0];
    v28 = vmul_lane_f32(v21, *(float32x2_t *)v23.f32, 1);
    v29 = vmul_f32(v22, v21);
    v30 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.f32, 1);
    v31 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    v32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), v28, *(float32x2_t *)v24.f32, 1), v31, v29).f32[0];
    if (v32 == 1.0)
    {
      v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL);
    }
    else
    {
      if (v32 >= 1.0)
        v95 = v32 + -1.0;
      else
        v95 = 1.0 - v32;
      v96 = v95 > 0.000001;
      v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL);
      if (v96)
      {
        v30.f32[0] = sqrtf(v32);
        v97 = (int8x16_t)vmulq_n_f32(v24, 1.0 / v30.f32[0]);
        v34 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v97.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1), *(float32x2_t *)v25.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL), *(float32x2_t *)v26.i8).f32[0];
        v25 = (float32x4_t)vdupq_lane_s32((int32x2_t)v30, 0);
        v24 = vdivq_f32(v24, v25);
        goto LABEL_10;
      }
    }
    v33 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v24.f32), v30, *(float32x2_t *)v25.f32, 1), v31, *(float32x2_t *)v26.i8).u32[0];
  }
  v34 = -*(float *)&v33;
LABEL_10:
  *(float *)a1 = v34;
  *(_DWORD *)(a1 + 12) = v24.i32[2];
  v25.i32[0] = *(_DWORD *)(a1 + 140);
  v26.i64[0] = *(_QWORD *)(a1 + 132);
  v35 = (float32x4_t)v26;
  v35.i32[2] = v25.i32[0];
  v36 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
  *(_QWORD *)(a1 + 4) = v24.i64[0];
  v37 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v36, *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0];
  if (v37 == 1.0 || (v37 >= 1.0 ? (v38 = v37 + -1.0) : (v38 = 1.0 - v37), v38 <= 0.000001))
  {
    v26.i32[0] = *(_DWORD *)(a1 + 128);
    v43 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 120), *(float32x2_t *)v35.f32), v36, *(float32x2_t *)(a1 + 120), 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
  }
  else
  {
    v36.f32[0] = 1.0 / sqrtf(v37);
    v35 = vmulq_n_f32(v35, v36.f32[0]);
    v24.i64[0] = *(_QWORD *)(a1 + 120);
    v24.i32[2] = *(_DWORD *)(a1 + 128);
    v39 = vmul_lane_f32(v36, *(float32x2_t *)v26.i8, 1);
    v40 = vmul_f32(*(float32x2_t *)v25.f32, v36);
    v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 1);
    v25.i64[0] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    v42 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32), v39, *(float32x2_t *)v35.f32, 1), *(float32x2_t *)v25.f32, v40).f32[0];
    if (v42 == 1.0)
    {
      v26 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL);
    }
    else
    {
      v98 = v42 + -1.0;
      if (v42 < 1.0)
        v98 = 1.0 - v42;
      v96 = v98 > 0.000001;
      v26 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL);
      if (v96)
      {
        v25.f32[0] = sqrtf(v42);
        v99 = (int8x16_t)vmulq_n_f32(v35, 1.0 / v25.f32[0]);
        v44 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v99.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.i8, 1), *(float32x2_t *)v24.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL), *(float32x2_t *)v26.i8).f32[0];
        v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
        v35 = vdivq_f32(v35, v25);
        goto LABEL_19;
      }
    }
    v43 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v35.f32), v41, *(float32x2_t *)v24.f32, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
  }
  v44 = -*(float *)&v43;
LABEL_19:
  *(float *)(a1 + 16) = v44;
  *(_DWORD *)(a1 + 28) = v35.i32[2];
  v25.i32[0] = *(_DWORD *)(a1 + 164);
  v26.i64[0] = *(_QWORD *)(a1 + 156);
  v45 = (float32x4_t)v26;
  v45.i32[2] = v25.i32[0];
  v46 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
  *(_QWORD *)(a1 + 20) = v35.i64[0];
  v47 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v46, *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0];
  if (v47 == 1.0 || (v47 >= 1.0 ? (v48 = v47 + -1.0) : (v48 = 1.0 - v47), v48 <= 0.000001))
  {
    v26.i32[0] = *(_DWORD *)(a1 + 152);
    v56 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 144), *(float32x2_t *)v45.f32), v46, *(float32x2_t *)(a1 + 144), 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
LABEL_31:
    v55 = -*(float *)&v56;
    goto LABEL_32;
  }
  v46.f32[0] = 1.0 / sqrtf(v47);
  v45 = vmulq_n_f32(v45, v46.f32[0]);
  v35.i64[0] = *(_QWORD *)(a1 + 144);
  v35.i32[2] = *(_DWORD *)(a1 + 152);
  v49 = vmul_lane_f32(v46, *(float32x2_t *)v26.i8, 1);
  v50 = vmul_f32(*(float32x2_t *)v25.f32, v46);
  v51 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.f32, 1);
  v25.i64[0] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
  v52 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), v49, *(float32x2_t *)v45.f32, 1), *(float32x2_t *)v25.f32, v50).f32[0];
  if (v52 == 1.0 || (v52 >= 1.0 ? (v53 = v52 + -1.0) : (v53 = 1.0 - v52), v53 <= 0.000001))
  {
    v26 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL);
    v56 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v45.f32), v51, *(float32x2_t *)v35.f32, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
    goto LABEL_31;
  }
  v25.f32[0] = sqrtf(v52);
  v54 = (int8x16_t)vmulq_n_f32(v45, 1.0 / v25.f32[0]);
  v26 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL);
  v55 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v54.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1), *(float32x2_t *)v35.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), *(float32x2_t *)v26.i8).f32[0];
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
  v45 = vdivq_f32(v45, v25);
LABEL_32:
  *(float *)(a1 + 32) = v55;
  *(_DWORD *)(a1 + 44) = v45.i32[2];
  v25.i32[0] = *(_DWORD *)(a1 + 188);
  v26.i64[0] = *(_QWORD *)(a1 + 180);
  v57 = (float32x4_t)v26;
  v57.i32[2] = v25.i32[0];
  v58 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
  *(_QWORD *)(a1 + 36) = v45.i64[0];
  v59 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v58, *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0];
  if (v59 == 1.0 || (v59 >= 1.0 ? (v60 = v59 + -1.0) : (v60 = 1.0 - v59), v60 <= 0.000001))
  {
    v26.i32[0] = *(_DWORD *)(a1 + 176);
    v68 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 168), *(float32x2_t *)v57.f32), v58, *(float32x2_t *)(a1 + 168), 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
LABEL_44:
    v67 = -*(float *)&v68;
    goto LABEL_45;
  }
  v58.f32[0] = 1.0 / sqrtf(v59);
  v57 = vmulq_n_f32(v57, v58.f32[0]);
  v45.i64[0] = *(_QWORD *)(a1 + 168);
  v45.i32[2] = *(_DWORD *)(a1 + 176);
  v61 = vmul_lane_f32(v58, *(float32x2_t *)v26.i8, 1);
  v62 = vmul_f32(*(float32x2_t *)v25.f32, v58);
  v63 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 1);
  v25.i64[0] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
  v64 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32), v61, *(float32x2_t *)v57.f32, 1), *(float32x2_t *)v25.f32, v62).f32[0];
  if (v64 == 1.0 || (v64 >= 1.0 ? (v65 = v64 + -1.0) : (v65 = 1.0 - v64), v65 <= 0.000001))
  {
    v26 = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL);
    v68 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v57.f32), v63, *(float32x2_t *)v45.f32, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
    goto LABEL_44;
  }
  v25.f32[0] = sqrtf(v64);
  v66 = (int8x16_t)vmulq_n_f32(v57, 1.0 / v25.f32[0]);
  v26 = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL);
  v67 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v66.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1), *(float32x2_t *)v45.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL), *(float32x2_t *)v26.i8).f32[0];
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
  v57 = vdivq_f32(v57, v25);
LABEL_45:
  *(float *)(a1 + 48) = v67;
  *(_DWORD *)(a1 + 60) = v57.i32[2];
  v25.i32[0] = *(_DWORD *)(a1 + 212);
  v26.i64[0] = *(_QWORD *)(a1 + 204);
  v69 = (float32x4_t)v26;
  v69.i32[2] = v25.i32[0];
  v70 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
  *(_QWORD *)(a1 + 52) = v57.i64[0];
  v71 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v70, *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0];
  if (v71 == 1.0 || (v71 >= 1.0 ? (v72 = v71 + -1.0) : (v72 = 1.0 - v71), v72 <= 0.000001))
  {
    v26.i32[0] = *(_DWORD *)(a1 + 200);
    v80 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 192), *(float32x2_t *)v69.f32), v70, *(float32x2_t *)(a1 + 192), 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
LABEL_57:
    v79 = -*(float *)&v80;
    goto LABEL_58;
  }
  v70.f32[0] = 1.0 / sqrtf(v71);
  v69 = vmulq_n_f32(v69, v70.f32[0]);
  v57.i64[0] = *(_QWORD *)(a1 + 192);
  v57.i32[2] = *(_DWORD *)(a1 + 200);
  v73 = vmul_lane_f32(v70, *(float32x2_t *)v26.i8, 1);
  v74 = vmul_f32(*(float32x2_t *)v25.f32, v70);
  v75 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.f32, 1);
  v25.i64[0] = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
  v76 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), v73, *(float32x2_t *)v69.f32, 1), *(float32x2_t *)v25.f32, v74).f32[0];
  if (v76 == 1.0 || (v76 >= 1.0 ? (v77 = v76 + -1.0) : (v77 = 1.0 - v76), v77 <= 0.000001))
  {
    v26 = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL);
    v80 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v69.f32), v75, *(float32x2_t *)v57.f32, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
    goto LABEL_57;
  }
  v25.f32[0] = sqrtf(v76);
  v78 = (int8x16_t)vmulq_n_f32(v69, 1.0 / v25.f32[0]);
  v26 = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL);
  v79 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v78.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 1), *(float32x2_t *)v57.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL), *(float32x2_t *)v26.i8).f32[0];
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
  v69 = vdivq_f32(v69, v25);
LABEL_58:
  *(float *)(a1 + 64) = v79;
  *(_DWORD *)(a1 + 76) = v69.i32[2];
  v25.i32[0] = *(_DWORD *)(a1 + 236);
  v26.i64[0] = *(_QWORD *)(a1 + 228);
  v81 = (float32x4_t)v26;
  v81.i32[2] = v25.i32[0];
  v82 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
  *(_QWORD *)(a1 + 68) = v69.i64[0];
  v83 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v82, *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0];
  if (v83 == 1.0 || (v83 >= 1.0 ? (v84 = v83 + -1.0) : (v84 = 1.0 - v83), v84 <= 0.000001))
  {
    v26.i32[0] = *(_DWORD *)(a1 + 224);
    v93 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 216), *(float32x2_t *)v81.f32), v82, *(float32x2_t *)(a1 + 216), 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
LABEL_70:
    v92 = -*(float *)&v93;
    goto LABEL_71;
  }
  v82.f32[0] = 1.0 / sqrtf(v83);
  v81 = vmulq_n_f32(v81, v82.f32[0]);
  v69.i64[0] = *(_QWORD *)(a1 + 216);
  v69.i32[2] = *(_DWORD *)(a1 + 224);
  v85 = vmul_lane_f32(v82, *(float32x2_t *)v26.i8, 1);
  v86 = vmul_f32(*(float32x2_t *)v25.f32, v82);
  v87 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.f32, 1);
  v88 = (float32x2_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
  v89 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32), v85, *(float32x2_t *)v81.f32, 1), v88, v86).f32[0];
  if (v89 == 1.0 || (v89 >= 1.0 ? (v90 = v89 + -1.0) : (v90 = 1.0 - v89), v90 <= 0.000001))
  {
    v93 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v81.f32), v87, *(float32x2_t *)v69.f32, 1), v88, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL)).u32[0];
    goto LABEL_70;
  }
  v88.f32[0] = sqrtf(v89);
  v91 = (int8x16_t)vmulq_n_f32(v81, 1.0 / v88.f32[0]);
  v92 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v91.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v91.i8, 1), *(float32x2_t *)v69.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL)).f32[0];
  v81 = vdivq_f32(v81, (float32x4_t)vdupq_lane_s32((int32x2_t)v88, 0));
LABEL_71:
  *(float *)(a1 + 80) = v92;
  *(_DWORD *)(a1 + 92) = v81.i32[2];
  *(_QWORD *)(a1 + 84) = v81.i64[0];
  return a1;
}

uint64_t sub_20EEC8B1C(uint64_t result, uint64_t a2, double a3, double a4, int32x4_t a5, float32x4_t a6, double a7, double a8)
{
  float32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  float v48;
  int8x16_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float v59;
  float v60;
  int8x16_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x4_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float v71;
  float v72;
  int8x16_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float v85;
  float v86;
  int8x16_t v87;
  float32x4_t v88;
  float v89;
  BOOL v90;
  int8x16_t v91;
  float32x2_t v92;
  float v93;
  int8x16_t v94;
  float32x2_t v95;

  *(_OWORD *)result = xmmword_2103898F0;
  *(_OWORD *)(result + 16) = xmmword_2103898F0;
  *(_OWORD *)(result + 32) = xmmword_2103898F0;
  *(_OWORD *)(result + 48) = xmmword_2103898F0;
  *(_OWORD *)(result + 64) = xmmword_2103898F0;
  *(_OWORD *)(result + 80) = xmmword_2103898F0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0x3F80000000000000;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0x3F80000000000000;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0x3F80000000000000;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(_DWORD *)(result + 188) = 1065353216;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0x3F80000000000000;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 232) = 0x3F80000000000000;
  v8 = *(float32x2_t *)a2;
  *(_DWORD *)(result + 104) = *(_DWORD *)(a2 + 8);
  *(float32x2_t *)(result + 96) = v8;
  v9 = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(result + 116) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(result + 108) = v9;
  v10 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(result + 128) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(result + 120) = v10;
  v11 = *(_QWORD *)(a2 + 36);
  *(_DWORD *)(result + 140) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(result + 132) = v11;
  v12 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(result + 152) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(result + 144) = v12;
  v13 = *(_QWORD *)(a2 + 60);
  *(_DWORD *)(result + 164) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(result + 156) = v13;
  v14 = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(result + 176) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(result + 168) = v14;
  v15 = *(_QWORD *)(a2 + 84);
  *(_DWORD *)(result + 188) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(result + 180) = v15;
  v16 = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(result + 200) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(result + 192) = v16;
  v17 = *(_QWORD *)(a2 + 108);
  *(_DWORD *)(result + 212) = *(_DWORD *)(a2 + 116);
  *(_QWORD *)(result + 204) = v17;
  v18 = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(result + 224) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(result + 216) = v18;
  v19 = *(_QWORD *)(a2 + 132);
  *(_DWORD *)(result + 236) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(result + 228) = v19;
  LODWORD(a4) = *(_DWORD *)(a2 + 20);
  a6.i64[0] = *(_QWORD *)(a2 + 12);
  v20 = a6;
  v20.i32[2] = LODWORD(a4);
  v21 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v22 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v21, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)&a4, *(float32x2_t *)&a4);
  if (v22.f32[0] == 1.0 || (v22.f32[0] >= 1.0 ? (v23 = v22.f32[0] + -1.0) : (v23 = 1.0 - v22.f32[0]), v23 <= 0.000001))
  {
    v22.i32[0] = *(_DWORD *)(a2 + 8);
    v29 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)a6.f32), v21, *(float32x2_t *)a2, 1), *(float32x2_t *)&a4, v22);
  }
  else
  {
    *(float *)&a8 = 1.0 / sqrtf(v22.f32[0]);
    v20 = vmulq_n_f32(v20, *(float *)&a8);
    a5.i64[0] = *(_QWORD *)a2;
    a5.i32[2] = *(_DWORD *)(a2 + 8);
    v24 = vmul_lane_f32(*(float32x2_t *)&a8, *(float32x2_t *)a6.f32, 1);
    v25 = vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a8);
    v26 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.f32, 1);
    *(_QWORD *)&a4 = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
    v27 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), v24, *(float32x2_t *)v20.f32, 1), *(float32x2_t *)&a4, v25).f32[0];
    if (v27 == 1.0)
    {
      v28 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
    }
    else
    {
      if (v27 >= 1.0)
        v89 = v27 + -1.0;
      else
        v89 = 1.0 - v27;
      v90 = v89 > 0.000001;
      v28 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
      if (v90)
      {
        v26.f32[0] = sqrtf(v27);
        v91 = (int8x16_t)vmulq_n_f32(v20, 1.0 / v26.f32[0]);
        v92 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v91.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v91.i8, 1), *(float32x2_t *)a5.i8, 1);
        *(_QWORD *)&a4 = vextq_s8(v91, v91, 8uLL).u64[0];
        v29 = vmla_f32(v92, *(float32x2_t *)&a4, v28);
        *(float *)&a4 = -v29.f32[0];
        a5 = vdupq_lane_s32((int32x2_t)v26, 0);
        v20 = vdivq_f32(v20, (float32x4_t)a5);
        goto LABEL_10;
      }
    }
    v29 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v20.f32), v26, *(float32x2_t *)a5.i8, 1), *(float32x2_t *)&a4, v28);
  }
  *(float *)&a4 = -v29.f32[0];
LABEL_10:
  *(_DWORD *)result = LODWORD(a4);
  *(_DWORD *)(result + 12) = v20.i32[2];
  *(_QWORD *)(result + 4) = v20.i64[0];
  LODWORD(a4) = *(_DWORD *)(a2 + 44);
  a6.i64[0] = *(_QWORD *)(a2 + 36);
  v30 = a6;
  v30.i32[2] = LODWORD(a4);
  v31 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v31, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)&a4, *(float32x2_t *)&a4);
  if (v32.f32[0] == 1.0 || (v32.f32[0] >= 1.0 ? (v33 = v32.f32[0] + -1.0) : (v33 = 1.0 - v32.f32[0]), v33 <= 0.000001))
  {
    v32.i32[0] = *(_DWORD *)(a2 + 32);
    v39 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 24), *(float32x2_t *)a6.f32), v31, *(float32x2_t *)(a2 + 24), 1), *(float32x2_t *)&a4, v32);
  }
  else
  {
    v29.f32[0] = 1.0 / sqrtf(v32.f32[0]);
    v30 = vmulq_n_f32(v30, v29.f32[0]);
    a5.i64[0] = *(_QWORD *)(a2 + 24);
    a5.i32[2] = *(_DWORD *)(a2 + 32);
    v34 = vmul_lane_f32(v29, *(float32x2_t *)a6.f32, 1);
    v35 = vmul_f32(*(float32x2_t *)&a4, v29);
    v36 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.f32, 1);
    *(_QWORD *)&a4 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
    v37 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32), v34, *(float32x2_t *)v30.f32, 1), *(float32x2_t *)&a4, v35).f32[0];
    if (v37 == 1.0)
    {
      v38 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
    }
    else
    {
      if (v37 >= 1.0)
        v93 = v37 + -1.0;
      else
        v93 = 1.0 - v37;
      v90 = v93 > 0.000001;
      v38 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
      if (v90)
      {
        v36.f32[0] = sqrtf(v37);
        v94 = (int8x16_t)vmulq_n_f32(v30, 1.0 / v36.f32[0]);
        v95 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v94.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v94.i8, 1), *(float32x2_t *)a5.i8, 1);
        *(_QWORD *)&a4 = vextq_s8(v94, v94, 8uLL).u64[0];
        v39 = vmla_f32(v95, *(float32x2_t *)&a4, v38);
        *(float *)&a4 = -v39.f32[0];
        a5 = vdupq_lane_s32((int32x2_t)v36, 0);
        v30 = vdivq_f32(v30, (float32x4_t)a5);
        goto LABEL_19;
      }
    }
    v39 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v30.f32), v36, *(float32x2_t *)a5.i8, 1), *(float32x2_t *)&a4, v38);
  }
  *(float *)&a4 = -v39.f32[0];
LABEL_19:
  *(_DWORD *)(result + 16) = LODWORD(a4);
  *(_DWORD *)(result + 28) = v30.i32[2];
  *(_QWORD *)(result + 20) = v30.i64[0];
  LODWORD(a4) = *(_DWORD *)(a2 + 68);
  a6.i64[0] = *(_QWORD *)(a2 + 60);
  v40 = a6;
  v40.i32[2] = LODWORD(a4);
  v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v42 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v41, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)&a4, *(float32x2_t *)&a4);
  if (v42.f32[0] == 1.0 || (v42.f32[0] >= 1.0 ? (v43 = v42.f32[0] + -1.0) : (v43 = 1.0 - v42.f32[0]), v43 <= 0.000001))
  {
    v42.i32[0] = *(_DWORD *)(a2 + 56);
    v51 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 48), *(float32x2_t *)a6.f32), v41, *(float32x2_t *)(a2 + 48), 1), *(float32x2_t *)&a4, v42);
LABEL_31:
    *(float *)&a4 = -v51.f32[0];
    goto LABEL_32;
  }
  v39.f32[0] = 1.0 / sqrtf(v42.f32[0]);
  v40 = vmulq_n_f32(v40, v39.f32[0]);
  a5.i64[0] = *(_QWORD *)(a2 + 48);
  a5.i32[2] = *(_DWORD *)(a2 + 56);
  v44 = vmul_lane_f32(v39, *(float32x2_t *)a6.f32, 1);
  v45 = vmul_f32(*(float32x2_t *)&a4, v39);
  v46 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 1);
  *(_QWORD *)&a4 = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
  v47 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), v44, *(float32x2_t *)v40.f32, 1), *(float32x2_t *)&a4, v45).f32[0];
  if (v47 == 1.0 || (v47 >= 1.0 ? (v48 = v47 + -1.0) : (v48 = 1.0 - v47), v48 <= 0.000001))
  {
    v51 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v40.f32), v46, *(float32x2_t *)a5.i8, 1), *(float32x2_t *)&a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL));
    goto LABEL_31;
  }
  v46.f32[0] = sqrtf(v47);
  v49 = (int8x16_t)vmulq_n_f32(v40, 1.0 / v46.f32[0]);
  v50 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v49.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1), *(float32x2_t *)a5.i8, 1);
  *(_QWORD *)&a4 = vextq_s8(v49, v49, 8uLL).u64[0];
  v51 = vmla_f32(v50, *(float32x2_t *)&a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL));
  *(float *)&a4 = -v51.f32[0];
  a5 = vdupq_lane_s32((int32x2_t)v46, 0);
  v40 = vdivq_f32(v40, (float32x4_t)a5);
LABEL_32:
  *(_DWORD *)(result + 32) = LODWORD(a4);
  *(_DWORD *)(result + 44) = v40.i32[2];
  *(_QWORD *)(result + 36) = v40.i64[0];
  LODWORD(a4) = *(_DWORD *)(a2 + 92);
  a6.i64[0] = *(_QWORD *)(a2 + 84);
  v52 = a6;
  v52.i32[2] = LODWORD(a4);
  v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v54 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v53, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)&a4, *(float32x2_t *)&a4);
  if (v54.f32[0] == 1.0 || (v54.f32[0] >= 1.0 ? (v55 = v54.f32[0] + -1.0) : (v55 = 1.0 - v54.f32[0]), v55 <= 0.000001))
  {
    v54.i32[0] = *(_DWORD *)(a2 + 80);
    v63 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 72), *(float32x2_t *)a6.f32), v53, *(float32x2_t *)(a2 + 72), 1), *(float32x2_t *)&a4, v54);
LABEL_44:
    *(float *)&a4 = -v63.f32[0];
    goto LABEL_45;
  }
  v51.f32[0] = 1.0 / sqrtf(v54.f32[0]);
  v52 = vmulq_n_f32(v52, v51.f32[0]);
  a5.i64[0] = *(_QWORD *)(a2 + 72);
  a5.i32[2] = *(_DWORD *)(a2 + 80);
  v56 = vmul_lane_f32(v51, *(float32x2_t *)a6.f32, 1);
  v57 = vmul_f32(*(float32x2_t *)&a4, v51);
  v58 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 1);
  *(_QWORD *)&a4 = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
  v59 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32), v56, *(float32x2_t *)v52.f32, 1), *(float32x2_t *)&a4, v57).f32[0];
  if (v59 == 1.0 || (v59 >= 1.0 ? (v60 = v59 + -1.0) : (v60 = 1.0 - v59), v60 <= 0.000001))
  {
    v63 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v52.f32), v58, *(float32x2_t *)a5.i8, 1), *(float32x2_t *)&a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL));
    goto LABEL_44;
  }
  v58.f32[0] = sqrtf(v59);
  v61 = (int8x16_t)vmulq_n_f32(v52, 1.0 / v58.f32[0]);
  v62 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v61.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1), *(float32x2_t *)a5.i8, 1);
  *(_QWORD *)&a4 = vextq_s8(v61, v61, 8uLL).u64[0];
  v63 = vmla_f32(v62, *(float32x2_t *)&a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL));
  *(float *)&a4 = -v63.f32[0];
  a5 = vdupq_lane_s32((int32x2_t)v58, 0);
  v52 = vdivq_f32(v52, (float32x4_t)a5);
LABEL_45:
  *(_DWORD *)(result + 48) = LODWORD(a4);
  *(_DWORD *)(result + 60) = v52.i32[2];
  *(_QWORD *)(result + 52) = v52.i64[0];
  LODWORD(a4) = *(_DWORD *)(a2 + 116);
  a6.i64[0] = *(_QWORD *)(a2 + 108);
  v64 = a6;
  v64.i32[2] = LODWORD(a4);
  v65 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v66 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v65, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)&a4, *(float32x2_t *)&a4);
  if (v66.f32[0] == 1.0 || (v66.f32[0] >= 1.0 ? (v67 = v66.f32[0] + -1.0) : (v67 = 1.0 - v66.f32[0]), v67 <= 0.000001))
  {
    v66.i32[0] = *(_DWORD *)(a2 + 104);
    v75 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 96), *(float32x2_t *)a6.f32), v65, *(float32x2_t *)(a2 + 96), 1), *(float32x2_t *)&a4, v66);
LABEL_57:
    *(float *)&a4 = -v75.f32[0];
    goto LABEL_58;
  }
  v63.f32[0] = 1.0 / sqrtf(v66.f32[0]);
  v64 = vmulq_n_f32(v64, v63.f32[0]);
  a5.i64[0] = *(_QWORD *)(a2 + 96);
  a5.i32[2] = *(_DWORD *)(a2 + 104);
  v68 = vmul_lane_f32(v63, *(float32x2_t *)a6.f32, 1);
  v69 = vmul_f32(*(float32x2_t *)&a4, v63);
  v70 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.f32, 1);
  *(_QWORD *)&a4 = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
  v71 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32), v68, *(float32x2_t *)v64.f32, 1), *(float32x2_t *)&a4, v69).f32[0];
  if (v71 == 1.0 || (v71 >= 1.0 ? (v72 = v71 + -1.0) : (v72 = 1.0 - v71), v72 <= 0.000001))
  {
    v75 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v64.f32), v70, *(float32x2_t *)a5.i8, 1), *(float32x2_t *)&a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL));
    goto LABEL_57;
  }
  v70.f32[0] = sqrtf(v71);
  v73 = (int8x16_t)vmulq_n_f32(v64, 1.0 / v70.f32[0]);
  v74 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v73.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.i8, 1), *(float32x2_t *)a5.i8, 1);
  *(_QWORD *)&a4 = vextq_s8(v73, v73, 8uLL).u64[0];
  v75 = vmla_f32(v74, *(float32x2_t *)&a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL));
  *(float *)&a4 = -v75.f32[0];
  a5 = vdupq_lane_s32((int32x2_t)v70, 0);
  v64 = vdivq_f32(v64, (float32x4_t)a5);
LABEL_58:
  *(_DWORD *)(result + 64) = LODWORD(a4);
  *(_DWORD *)(result + 76) = v64.i32[2];
  *(_QWORD *)(result + 68) = v64.i64[0];
  LODWORD(a4) = *(_DWORD *)(a2 + 140);
  a6.i64[0] = *(_QWORD *)(a2 + 132);
  v76 = a6;
  v76.i32[2] = LODWORD(a4);
  v77 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v78 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v77, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)&a4, *(float32x2_t *)&a4);
  if (v78.f32[0] == 1.0 || (v78.f32[0] >= 1.0 ? (v79 = v78.f32[0] + -1.0) : (v79 = 1.0 - v78.f32[0]), v79 <= 0.000001))
  {
    v78.i32[0] = *(_DWORD *)(a2 + 128);
    *(float *)(result + 80) = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 120), *(float32x2_t *)a6.f32), v77, *(float32x2_t *)(a2 + 120), 1), *(float32x2_t *)&a4, v78).f32[0];
    *(_DWORD *)(result + 92) = LODWORD(a4);
    *(_QWORD *)(result + 84) = a6.i64[0];
  }
  else
  {
    v75.f32[0] = 1.0 / sqrtf(v78.f32[0]);
    v80 = vmulq_n_f32(v76, v75.f32[0]);
    a5.i64[0] = *(_QWORD *)(a2 + 120);
    a5.i32[2] = *(_DWORD *)(a2 + 128);
    v81 = vmul_lane_f32(v75, *(float32x2_t *)a6.f32, 1);
    v82 = vmul_f32(*(float32x2_t *)&a4, v75);
    v83 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.f32, 1);
    v84 = (float32x2_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
    v85 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32), v81, *(float32x2_t *)v80.f32, 1), v84, v82).f32[0];
    if (v85 == 1.0 || (v85 >= 1.0 ? (v86 = v85 + -1.0) : (v86 = 1.0 - v85), v86 <= 0.000001))
    {
      *(float *)(result + 80) = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v80.f32), v83, *(float32x2_t *)a5.i8, 1), v84, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL)).f32[0];
      *(_DWORD *)(result + 92) = v80.i32[2];
      *(_QWORD *)(result + 84) = v80.i64[0];
    }
    else
    {
      v83.f32[0] = sqrtf(v85);
      v87 = (int8x16_t)vmulq_n_f32(v80, 1.0 / v83.f32[0]);
      v88 = vdivq_f32(v80, (float32x4_t)vdupq_lane_s32((int32x2_t)v83, 0));
      *(float *)(result + 80) = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v87.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), *(float32x2_t *)a5.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL)).f32[0];
      *(_DWORD *)(result + 92) = v88.i32[2];
      *(_QWORD *)(result + 84) = v88.i64[0];
    }
  }
  return result;
}

uint64_t *sub_20EEC9388(uint64_t *a1, char **a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  int v7;
  int v8;
  uint64_t **v9;
  uint64_t **v10;
  int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  double v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  double v30;
  double v31;
  _BOOL4 v32;
  uint64_t **v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  double v39;
  double v40;
  _BOOL4 v41;
  double v42;
  BOOL v43;
  _QWORD *v44;
  _QWORD *v45;

  sub_20EEC98D4((uint64_t)a2, 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - a1[1]) >> 3));
  sub_20EEC9B24(a1);
  v4 = (__int128 *)a1[1];
  v5 = (__int128 *)a1[2];
  if (v4 == v5)
    goto LABEL_13;
  if ((char *)v5 - (char *)v4 == 40)
  {
    sub_20EECC7A4(a2, (uint64_t)v4);
  }
  else
  {
    v6 = (__int128 *)a1[4];
    if (v6 == v5)
      goto LABEL_12;
    v7 = 0;
    v8 = *(_DWORD *)v4;
    do
    {
      if (*(_DWORD *)v6 != v8)
        break;
      if (v8 != *((_DWORD *)v6 + 2))
        break;
      v6 = (__int128 *)((char *)v6 + 40);
      a1[4] = (uint64_t)v6;
      ++v7;
    }
    while (v6 != v5);
    if (v7 != 1)
    {
LABEL_12:
      sub_20EECC8DC(a1, (uint64_t)a2);
      goto LABEL_13;
    }
    sub_20EECCA44((uint64_t)a1, (uint64_t)v4, v4, (uint64_t)v4 + 40, a1 + 17, (uint64_t)a2);
  }
  a1[4] += 40;
LABEL_13:
  v9 = (uint64_t **)a1[9];
  v10 = (uint64_t **)a1[10];
  while (1)
  {
LABEL_15:
    while (1)
    {
      v11 = (int *)a1[2];
      v12 = (int *)a1[4];
      if (v9 == v10)
        break;
      if (v12 != v11)
      {
        v13 = *v12;
        v14 = (*v9)[4];
        if (*v12 >= 0)
          *(_QWORD *)&v15 = 0x8000000000000000 - COERCE__INT64((double)v13);
        else
          v15 = (double)v13;
        if (v14 >= 0)
          v14 = 0x8000000000000000 - v14;
        v16 = *(_QWORD *)&v15 >= (unint64_t)v14;
        v17 = *(_QWORD *)&v15 - v14;
        if (v17 != 0 && v16 && v17 >= 0x41)
          goto LABEL_28;
      }
      sub_20EECA23C((uint64_t)a1, a2);
      v10 = (uint64_t **)a1[9];
      v18 = a1[10];
      v9 = v10;
      if (v10 != (uint64_t **)v18)
      {
LABEL_29:
        v9 = v10;
        while (1)
        {
          v20 = *v9;
          if (*((_BYTE *)*v9 + 40))
            break;
          v21 = v18 - (_QWORD)v9;
          if (v18 - (uint64_t)v9 >= 9)
          {
            v22 = 0;
            v23 = v21 >> 3;
            v24 = (unint64_t)((v21 >> 3) - 2) >> 1;
            v25 = v9;
            do
            {
              v26 = &v25[v22 + 1];
              v27 = (2 * v22) | 1;
              v28 = 2 * v22 + 2;
              if (v28 < v23)
              {
                v29 = v26[1];
                v30 = *((double *)v29 + 4);
                v31 = *((double *)*v26 + 4);
                v32 = *((double *)v29 + 3) < *((double *)*v26 + 3);
                if (v30 != v31)
                  v32 = v30 < v31;
                if (v32)
                {
                  ++v26;
                  v27 = v28;
                }
              }
              *v25 = *v26;
              v25 = v26;
              v22 = v27;
            }
            while (v27 <= v24);
            v33 = (uint64_t **)(v18 - 8);
            if (v26 == v33)
            {
              *v26 = v20;
            }
            else
            {
              *v26 = *v33;
              *v33 = v20;
              v34 = (char *)v26 - (char *)v9 + 8;
              if (v34 >= 9)
              {
                v35 = (((unint64_t)v34 >> 3) - 2) >> 1;
                v36 = &v9[v35];
                v37 = *v36;
                v38 = *v26;
                v39 = *((double *)*v26 + 4);
                v40 = *((double *)*v36 + 4);
                v41 = *((double *)*v26 + 3) < *((double *)*v36 + 3);
                if (v39 != v40)
                  v41 = v39 < v40;
                if (v41)
                {
                  do
                  {
                    *v26 = v37;
                    v26 = v36;
                    if (!v35)
                      break;
                    v35 = (v35 - 1) >> 1;
                    v36 = &v9[v35];
                    v37 = *v36;
                    v42 = *((double *)*v36 + 4);
                    v43 = *((double *)v38 + 3) < *((double *)*v36 + 3);
                    if (v39 != v42)
                      v43 = v39 < v42;
                  }
                  while (v43);
                  *v26 = v38;
                }
              }
            }
          }
          a1[10] -= 8;
          v19 = *v20;
          *(_QWORD *)(v19 + 8) = v20[1];
          *(_QWORD *)v20[1] = v19;
          --a1[15];
          operator delete(v20);
          v10 = (uint64_t **)a1[9];
          v18 = a1[10];
          v9 = v10;
          if (v10 == (uint64_t **)v18)
            goto LABEL_15;
        }
        v10 = (uint64_t **)v18;
      }
    }
    if (v12 == v11)
      break;
LABEL_28:
    sub_20EEC9D44((uint64_t)a1, (uint64_t)a2);
    v10 = (uint64_t **)a1[9];
    v18 = a1[10];
    v9 = v10;
    if (v10 != (uint64_t **)v18)
      goto LABEL_29;
  }
  v45 = (_QWORD *)a1[17];
  v44 = a1 + 17;
  sub_20E86872C((uint64_t)(v44 - 1), v45);
  *(v44 - 1) = v44;
  *v44 = 0;
  v44[1] = 0;
  return sub_20EECA6E4((uint64_t *)a2);
}

uint64_t sub_20EEC96C8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  void *v8;

  sub_20E86872C(a1 + 128, *(_QWORD **)(a1 + 136));
  if (*(_QWORD *)(a1 + 120))
  {
    v3 = *(_QWORD *)(a1 + 104);
    v2 = *(uint64_t **)(a1 + 112);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 120) = 0;
    if (v2 != (uint64_t *)(a1 + 104))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 104));
    }
  }
  v6 = *(void **)(a1 + 72);
  if (v6)
  {
    *(_QWORD *)(a1 + 80) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 48) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 8);
  if (v8)
  {
    *(_QWORD *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_20EEC9770(_QWORD *a1, int *a2, int *a3)
{
  int v4;
  int v5;
  unint64_t v6;
  char *v7;
  _DWORD *v8;
  char **v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;

  v4 = *a2;
  v5 = *a3;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (char **)(a1 + 1);
    v10 = (char *)a1[1];
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v10) >> 3) + 1;
    if (v11 > 0x666666666666666)
      sub_20E867F44();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (_QWORD)v10) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0x666666666666666)
        sub_20E877A38();
      v14 = (char *)operator new(40 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * ((v7 - v10) >> 3)];
    *(_DWORD *)v15 = v4;
    *((_DWORD *)v15 + 1) = v5;
    *((_DWORD *)v15 + 2) = v4;
    *((_DWORD *)v15 + 3) = v5;
    *((_QWORD *)v15 + 2) = 0;
    *((_QWORD *)v15 + 4) = 0;
    v8 = v15 + 40;
    if (v7 != v10)
    {
      do
      {
        v16 = *(_OWORD *)(v7 - 40);
        v17 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v15 - 24) = v17;
        *(_OWORD *)(v15 - 40) = v16;
        v15 -= 40;
        v7 -= 40;
      }
      while (v7 != v10);
      v7 = *v9;
    }
    a1[1] = v15;
    a1[2] = v8;
    a1[3] = &v14[40 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_DWORD *)v7 = v4;
    *((_DWORD *)v7 + 1) = v5;
    *((_DWORD *)v7 + 2) = v4;
    *((_DWORD *)v7 + 3) = v5;
    *((_QWORD *)v7 + 2) = 0;
    v8 = v7 + 40;
    *((_QWORD *)v7 + 4) = 0;
  }
  a1[2] = v8;
  result = a1[347];
  *((_QWORD *)v8 - 2) = result;
  a1[347] = result + 1;
  return result;
}

void sub_20EEC98D4(uint64_t a1, unint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  _BYTE *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _BYTE *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;

  v4 = *(_BYTE **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v5 = *(_BYTE **)(a1 + 8);
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[24 * ((v5 - v4) / 24)];
    v8 = v7;
    if (v5 != v4)
    {
      v9 = &v6[24 * ((v5 - v4) / 24)];
      do
      {
        v10 = *(_OWORD *)(v5 - 24);
        v8 = v9 - 24;
        *((_QWORD *)v9 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v5 -= 24;
        v9 -= 24;
      }
      while (v5 != v4);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[24 * a2];
    if (v4)
      operator delete(v4);
  }
  v11 = *(_BYTE **)(a1 + 24);
  if (2 * a2 > (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v11) >> 5)
  {
    if ((2 * a2) >> 59)
      sub_20E867F44();
    v12 = *(_BYTE **)(a1 + 32);
    v13 = (char *)operator new(a2 << 6);
    v14 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFE0];
    v15 = v14;
    if (v12 != v11)
    {
      v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFE0];
      do
      {
        v17 = *((_OWORD *)v12 - 1);
        v15 = v16 - 32;
        *((_OWORD *)v16 - 2) = *((_OWORD *)v12 - 2);
        *((_OWORD *)v16 - 1) = v17;
        v12 -= 32;
        v16 -= 32;
      }
      while (v12 != v11);
    }
    *(_QWORD *)(a1 + 24) = v15;
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = &v13[64 * a2];
    if (v11)
      operator delete(v11);
  }
  v18 = *(_BYTE **)(a1 + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)v18) >> 4) < 6 * a2)
  {
    if (6 * a2 >= 0x555555555555556)
      sub_20E867F44();
    v19 = *(_BYTE **)(a1 + 56);
    v20 = (char *)operator new(288 * a2);
    v21 = &v20[48 * ((v19 - v18) / 48)];
    v22 = v21;
    if (v19 != v18)
    {
      v23 = &v20[48 * ((v19 - v18) / 48)];
      do
      {
        v24 = *((_OWORD *)v19 - 3);
        v25 = *((_OWORD *)v19 - 1);
        v22 = v23 - 48;
        *((_OWORD *)v23 - 2) = *((_OWORD *)v19 - 2);
        *((_OWORD *)v23 - 1) = v25;
        *((_OWORD *)v23 - 3) = v24;
        v19 -= 48;
        v23 -= 48;
      }
      while (v19 != v18);
    }
    *(_QWORD *)(a1 + 48) = v22;
    *(_QWORD *)(a1 + 56) = v21;
    *(_QWORD *)(a1 + 64) = &v20[288 * a2];
    if (v18)
      operator delete(v18);
  }
}

char *sub_20EEC9B24(_QWORD *a1)
{
  uint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *result;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  __int16 v22;

  v2 = a1[1];
  v3 = (int *)a1[2];
  v4 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - v2) >> 3));
  v22 = 0;
  if (v3 == (int *)v2)
    v5 = 0;
  else
    v5 = v4;
  sub_20EECAAF0(v2, v3, (uint64_t)&v22, v5, 1);
  v6 = (char *)a1[1];
  v7 = (char *)a1[2];
  result = v6;
  if (v6 == v7)
    goto LABEL_23;
  v9 = v6 + 40;
  if (v6 + 40 == v7)
    goto LABEL_22;
  v10 = *(_DWORD *)v6;
  while (1)
  {
    v11 = v10;
    v10 = *(_DWORD *)v9;
    if (__PAIR64__(*((_DWORD *)v9 - 9), v11) == *(_QWORD *)v9
      && *((_DWORD *)v9 - 8) == *((_DWORD *)v9 + 2)
      && *((_DWORD *)v9 - 7) == *((_DWORD *)v9 + 3))
    {
      break;
    }
    v9 += 40;
    if (v9 == v7)
      goto LABEL_22;
  }
  v12 = v9 - 40;
  if (v9 - 40 == v7)
  {
LABEL_22:
    result = (char *)a1[2];
LABEL_23:
    v7 = result;
    goto LABEL_24;
  }
  v13 = v9 + 40;
  if (v13 != v7)
  {
    do
    {
      if (*(_DWORD *)v12 != *(_DWORD *)v13
        || *((_DWORD *)v12 + 1) != *((_DWORD *)v13 + 1)
        || *((_DWORD *)v12 + 2) != *((_DWORD *)v13 + 2)
        || *((_DWORD *)v12 + 3) != *((_DWORD *)v13 + 3))
      {
        v14 = *(_OWORD *)v13;
        v15 = *((_OWORD *)v13 + 1);
        *((_QWORD *)v12 + 9) = *((_QWORD *)v13 + 4);
        *(_OWORD *)(v12 + 56) = v15;
        *(_OWORD *)(v12 + 40) = v14;
        v12 += 40;
      }
      v13 += 40;
    }
    while (v13 != v7);
    v6 = (char *)a1[1];
    v7 = (char *)a1[2];
  }
  if (v12 + 40 != v7)
  {
    v7 = v12 + 40;
    a1[2] = v12 + 40;
  }
LABEL_24:
  if (v7 == v6)
    goto LABEL_34;
  v16 = (unsigned __int128)((v7 - v6) * (__int128)0x6666666666666667) >> 64;
  v17 = (v16 >> 4) + ((unint64_t)v16 >> 63);
  if (v17 <= 1)
    v17 = 1;
  if (v17 < 2)
  {
    v18 = 0;
LABEL_32:
    v21 = (unint64_t *)&v6[40 * v18 + 16];
    do
    {
      *v21 = v18;
      v21 += 5;
      ++v18;
    }
    while (v17 != v18);
    goto LABEL_34;
  }
  v19 = 0;
  v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v6 + 56;
  do
  {
    *(v20 - 5) = v19;
    *v20 = v19 + 1;
    v20 += 10;
    v19 += 2;
  }
  while (v19 != v18);
  if (v17 != v18)
    goto LABEL_32;
LABEL_34:
  a1[4] = v6;
  return result;
}

void sub_20EEC9D44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _DWORD *v6;
  __int32 v7;
  __int32 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  int8x16_t v19;
  __int128 v20;
  int8x16_t v21;
  __int128 v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  int v26;
  _QWORD *v27;
  int8x16_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t **v33;
  int *v34;
  int *v35;
  _OWORD *v36;
  _OWORD *v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int *v45;
  _OWORD *v46;
  __int128 v47;
  _QWORD *v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD v56[2];
  uint64_t v57;
  int8x16_t v58;
  __int128 v59;
  uint64_t v60;
  int8x16_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[3];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_OWORD *)(v3 + 16);
  v61 = *(int8x16_t *)v3;
  v62 = v5;
  v63 = v4;
  v6 = (_DWORD *)(v3 + 40);
  v7 = v61.i32[0];
  if (v61.i32[0] == v61.i32[2] && (v8 = v61.i32[1], v61.i32[1] == v61.i32[3]))
  {
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    if (v9 != v10)
    {
      do
      {
        if (*(_DWORD *)v9 != v7 || *(_DWORD *)(v9 + 4) != v8)
          break;
        v12 = *(uint64_t **)(v9 + 8);
        sub_20EECE180((_QWORD *)v9, v10);
        *(_QWORD *)(a1 + 48) -= 16;
        v13 = (uint64_t *)v12[1];
        v14 = v12;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v18 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v18);
        }
        if (*(uint64_t **)(a1 + 128) == v12)
          *(_QWORD *)(a1 + 128) = v15;
        v11 = *(uint64_t **)(a1 + 136);
        --*(_QWORD *)(a1 + 144);
        sub_20E8D2134(v11, v12);
        operator delete(v12);
        v9 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(a1 + 48);
      }
      while (v9 != v10);
      v3 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v16 = *(_DWORD **)(a1 + 16);
    if (v6 != v16)
    {
      do
      {
        if (*v6 == v6[2])
        {
          v17 = v6[1];
          v18 = *v6 != v61.i32[0] || v17 == v6[3];
          if (v18 || v17 != v61.i32[1])
            goto LABEL_27;
        }
        else if (*(_QWORD *)v6 != v61.i64[0])
        {
          goto LABEL_27;
        }
        v6 += 10;
      }
      while (v6 != v16);
      v6 = *(_DWORD **)(a1 + 16);
    }
  }
LABEL_27:
  v19 = *(int8x16_t *)v3;
  v20 = *(_OWORD *)(v3 + 16);
  v57 = *(_QWORD *)(v3 + 32);
  v56[0] = v19;
  v56[1] = v20;
  v21 = *(int8x16_t *)v3;
  v22 = *(_OWORD *)(v3 + 16);
  v60 = *(_QWORD *)(v3 + 32);
  v59 = v22;
  v58 = v21;
  v23 = (uint64_t *)(a1 + 136);
  v24 = *(_QWORD **)(a1 + 136);
  v25 = (uint64_t *)(a1 + 136);
  if (v24)
  {
    v25 = (uint64_t *)(a1 + 136);
    do
    {
      v26 = sub_20EECD738(a1 + 152, (uint64_t)(v24 + 4), (uint64_t)v56);
      v27 = v24 + 1;
      if (!v26)
      {
        v27 = v24;
        v25 = v24;
      }
      v24 = (_QWORD *)*v27;
    }
    while (*v27);
    v3 = *(_QWORD *)(a1 + 32);
  }
  if ((_DWORD *)v3 != v6)
  {
    v54 = a1 + 104;
    do
    {
      v28 = *(int8x16_t *)v3;
      v29 = *(_OWORD *)(v3 + 16);
      v63 = *(_QWORD *)(v3 + 32);
      v61 = v28;
      v62 = v29;
      if (v25 == v23)
      {
        v41 = *v23;
        v42 = a1 + 136;
        if (*v23)
        {
          do
          {
            v43 = v41;
            v41 = *(_QWORD *)(v41 + 8);
          }
          while (v41);
        }
        else
        {
          do
          {
            v43 = *(_QWORD *)(v42 + 16);
            v18 = *(_QWORD *)v43 == v42;
            v42 = v43;
          }
          while (v18);
        }
        v44 = (int *)(v43 + 32);
        v45 = (int *)(v43 + 72);
        v25 = (uint64_t *)sub_20EECCA44(a1, v43 + 72, (__int128 *)(v43 + 72), (uint64_t)&v61, v25, a2);
        BYTE8(v65) = 1;
        if (sub_20EECE2E0(a1 + 160, v44, v45, v61.i32, (uint64_t)&v64))
        {
          v46 = operator new(0x38uLL);
          v47 = v65;
          v46[1] = v64;
          v46[2] = v47;
          *((_QWORD *)v46 + 6) = v25;
          v48 = *(_QWORD **)(a1 + 112);
          *(_QWORD *)v46 = v54;
          *((_QWORD *)v46 + 1) = v48;
          *v48 = v46;
          v49 = *(_QWORD *)(a1 + 120) + 1;
          *(_QWORD *)(a1 + 112) = v46;
          *(_QWORD *)(a1 + 120) = v49;
          v66[0] = v46;
          sub_20EEE345C((void **)(a1 + 72), v66);
          v25[14] = *(_QWORD *)(a1 + 112) + 16;
        }
        goto LABEL_36;
      }
      if (v25 == *(uint64_t **)(a1 + 128))
      {
        v36 = sub_20EECCA44(a1, (uint64_t)(v25 + 4), (__int128 *)v25 + 2, (uint64_t)&v61, v25, a2);
        if (v61.i32[0] != v61.i32[2])
          goto LABEL_57;
      }
      else
      {
        v30 = v25[14];
        if (v30)
        {
          *(_BYTE *)(v30 + 24) = 0;
          v25[14] = 0;
        }
        v31 = (uint64_t **)*v25;
        v32 = v25;
        if (*v25)
        {
          do
          {
            v33 = v31;
            v31 = (uint64_t **)v31[1];
          }
          while (v31);
        }
        else
        {
          do
          {
            v33 = (uint64_t **)v32[2];
            v18 = *v33 == v32;
            v32 = (uint64_t *)v33;
          }
          while (v18);
        }
        v34 = (int *)(v33 + 4);
        v35 = (int *)(v33 + 9);
        v36 = sub_20EECCA44(a1, (uint64_t)(v33 + 9), (__int128 *)v25 + 2, (uint64_t)&v61, v25, a2);
        BYTE8(v65) = 1;
        if (sub_20EECE2E0(a1 + 160, v34, v35, v61.i32, (uint64_t)&v64))
        {
          v37 = operator new(0x38uLL);
          v38 = v65;
          v37[1] = v64;
          v37[2] = v38;
          *((_QWORD *)v37 + 6) = v36;
          v39 = *(_QWORD **)(a1 + 112);
          *(_QWORD *)v37 = v54;
          *((_QWORD *)v37 + 1) = v39;
          *v39 = v37;
          v40 = *(_QWORD *)(a1 + 120) + 1;
          *(_QWORD *)(a1 + 112) = v37;
          *(_QWORD *)(a1 + 120) = v40;
          v66[0] = v37;
          sub_20EEE345C((void **)(a1 + 72), v66);
          *((_QWORD *)v36 + 14) = *(_QWORD *)(a1 + 112) + 16;
        }
        if (v61.i32[0] != v61.i32[2])
        {
LABEL_57:
          v61 = vextq_s8(v61, v61, 8uLL);
          v63 ^= 0x20uLL;
          goto LABEL_58;
        }
      }
      if (v61.i32[1] != v61.i32[3])
        goto LABEL_57;
LABEL_58:
      BYTE8(v65) = 1;
      if (sub_20EECE2E0(a1 + 160, v61.i32, (int *)v25 + 8, (int *)v25 + 18, (uint64_t)&v64))
      {
        v50 = operator new(0x38uLL);
        v51 = v65;
        v50[1] = v64;
        v50[2] = v51;
        *((_QWORD *)v50 + 6) = v25;
        v52 = *(_QWORD **)(a1 + 112);
        *(_QWORD *)v50 = v54;
        *((_QWORD *)v50 + 1) = v52;
        *v52 = v50;
        v53 = *(_QWORD *)(a1 + 120) + 1;
        *(_QWORD *)(a1 + 112) = v50;
        *(_QWORD *)(a1 + 120) = v53;
        v66[0] = v50;
        sub_20EEE345C((void **)(a1 + 72), v66);
        v25[14] = *(_QWORD *)(a1 + 112) + 16;
      }
      v25 = (uint64_t *)v36;
LABEL_36:
      v3 = *(_QWORD *)(a1 + 32) + 40;
      *(_QWORD *)(a1 + 32) = v3;
    }
    while ((_DWORD *)v3 != v6);
  }
}

void sub_20EECA23C(uint64_t a1, _QWORD *a2)
{
  char **v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  int *v28;
  int *v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  int8x16_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _OWORD *v42;

  v3 = (char **)(a1 + 72);
  v4 = **(_QWORD **)(a1 + 72);
  v5 = (uint64_t *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 48);
  v7 = *(_OWORD *)(v6 + 88);
  v37 = *(int8x16_t *)(v6 + 72);
  v38 = v7;
  v39 = *(_QWORD *)(v6 + 104);
  v8 = *(_QWORD *)(v6 + 120);
  v9 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
  {
    do
    {
      v10 = v9;
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9);
  }
  else
  {
    v11 = v6;
    do
    {
      v10 = *(_QWORD *)(v11 + 16);
      v12 = *(_QWORD *)v10 == v11;
      v11 = v10;
    }
    while (v12);
  }
  v13 = *(_QWORD **)(v10 + 120);
  v14 = *(_OWORD *)(v10 + 48);
  v35[0] = *(_OWORD *)(v10 + 32);
  v35[1] = v14;
  v36 = *(_QWORD *)(v10 + 64);
  if (*(_QWORD *)&v35[0] != *((_QWORD *)&v35[0] + 1))
    goto LABEL_14;
  if (v37.i32[0] == v37.i32[2])
  {
    if (v37.i32[0] != LODWORD(v35[0]) || v37.i32[1] == v37.i32[3] || v37.i32[3] != DWORD1(v35[0]))
      goto LABEL_14;
  }
  else if (v37.i64[1] != *(_QWORD *)&v35[0])
  {
    goto LABEL_14;
  }
  v37 = vextq_s8(v37, v37, 8uLL);
  v39 ^= 0x20uLL;
LABEL_14:
  v15 = v38;
  *(int8x16_t *)(v10 + 72) = v37;
  *(_OWORD *)(v10 + 88) = v15;
  *(_QWORD *)(v10 + 104) = v39;
  *(_QWORD *)(v10 + 120) = sub_20EEE364C(a2, (int *)v35, v37.i32, v5, v13, v8);
  v16 = *(_QWORD **)(v6 + 8);
  if (v16)
  {
    do
    {
      v17 = v16;
      v16 = (_QWORD *)*v16;
    }
    while (v16);
  }
  else
  {
    v18 = (_QWORD *)v6;
    do
    {
      v17 = (_QWORD *)v18[2];
      v12 = *v17 == (_QWORD)v18;
      v18 = v17;
    }
    while (!v12);
  }
  if (*(_QWORD *)(a1 + 128) == v6)
    *(_QWORD *)(a1 + 128) = v17;
  v19 = *(uint64_t **)(a1 + 136);
  --*(_QWORD *)(a1 + 144);
  sub_20E8D2134(v19, (uint64_t *)v6);
  operator delete((void *)v6);
  sub_20EECA56C(v3);
  if (v10 != *(_QWORD *)(a1 + 128))
  {
    v20 = *(_QWORD *)(v10 + 112);
    if (v20)
    {
      *(_BYTE *)(v20 + 24) = 0;
      *(_QWORD *)(v10 + 112) = 0;
    }
    v21 = *(_QWORD *)v10;
    if (*(_QWORD *)v10)
    {
      do
      {
        v22 = v21;
        v21 = *(_QWORD *)(v21 + 8);
      }
      while (v21);
    }
    else
    {
      v23 = v10;
      do
      {
        v22 = *(_QWORD *)(v23 + 16);
        v12 = *(_QWORD *)v22 == v23;
        v23 = v22;
      }
      while (v12);
    }
    BYTE8(v41) = 1;
    if (sub_20EECE2E0(a1 + 160, (int *)(v22 + 32), (int *)v35, v37.i32, (uint64_t)&v40))
    {
      v24 = operator new(0x38uLL);
      v25 = v41;
      v24[1] = v40;
      v24[2] = v25;
      *((_QWORD *)v24 + 6) = v10;
      v26 = *(_QWORD **)(a1 + 112);
      *(_QWORD *)v24 = a1 + 104;
      *((_QWORD *)v24 + 1) = v26;
      *v26 = v24;
      v27 = *(_QWORD *)(a1 + 120) + 1;
      *(_QWORD *)(a1 + 112) = v24;
      *(_QWORD *)(a1 + 120) = v27;
      v42 = v24;
      sub_20EEE345C((void **)v3, &v42);
      *(_QWORD *)(v10 + 112) = *(_QWORD *)(a1 + 112) + 16;
    }
  }
  v28 = *(int **)(v10 + 8);
  if (v28)
  {
    do
    {
      v29 = v28;
      v28 = *(int **)v28;
    }
    while (v28);
  }
  else
  {
    do
    {
      v29 = *(int **)(v10 + 16);
      v12 = *(_QWORD *)v29 == v10;
      v10 = (uint64_t)v29;
    }
    while (!v12);
  }
  if (v29 != (int *)(a1 + 136))
  {
    v30 = *((_QWORD *)v29 + 14);
    if (v30)
    {
      *(_BYTE *)(v30 + 24) = 0;
      *((_QWORD *)v29 + 14) = 0;
    }
    BYTE8(v41) = 1;
    if (sub_20EECE2E0(a1 + 160, (int *)v35, v37.i32, v29 + 18, (uint64_t)&v40))
    {
      v31 = operator new(0x38uLL);
      v32 = v41;
      v31[1] = v40;
      v31[2] = v32;
      *((_QWORD *)v31 + 6) = v29;
      v33 = *(_QWORD **)(a1 + 112);
      *(_QWORD *)v31 = a1 + 104;
      *((_QWORD *)v31 + 1) = v33;
      *v33 = v31;
      v34 = *(_QWORD *)(a1 + 120) + 1;
      *(_QWORD *)(a1 + 112) = v31;
      *(_QWORD *)(a1 + 120) = v34;
      v42 = v31;
      sub_20EEE345C((void **)v3, &v42);
      *((_QWORD *)v29 + 14) = *(_QWORD *)(a1 + 112) + 16;
    }
  }
}

void sub_20EECA56C(char **a1)
{
  char *v1;
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  _BOOL4 v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  _BOOL4 v24;
  double v25;
  BOOL v26;
  uint64_t v27;

  v1 = *a1;
  v2 = a1[1];
  v3 = *(uint64_t **)*a1;
  v4 = v2 - *a1;
  if (v4 >= 9)
  {
    v5 = 0;
    v6 = v4 >> 3;
    v7 = (unint64_t)((v4 >> 3) - 2) >> 1;
    v8 = *a1;
    do
    {
      v9 = &v8[8 * v5 + 8];
      v10 = (2 * v5) | 1;
      v11 = 2 * v5 + 2;
      if (v11 < v6)
      {
        v12 = *((_QWORD *)v9 + 1);
        v13 = *(double *)(v12 + 32);
        v14 = *(double *)(*(_QWORD *)v9 + 32);
        v15 = *(double *)(v12 + 24) < *(double *)(*(_QWORD *)v9 + 24);
        if (v13 != v14)
          v15 = v13 < v14;
        if (v15)
        {
          v9 += 8;
          v10 = v11;
        }
      }
      *(_QWORD *)v8 = *(_QWORD *)v9;
      v8 = v9;
      v5 = v10;
    }
    while (v10 <= v7);
    v16 = v2 - 8;
    if (v9 == v16)
    {
      *(_QWORD *)v9 = v3;
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v16;
      *(_QWORD *)v16 = v3;
      v17 = v9 - v1 + 8;
      if (v17 >= 9)
      {
        v18 = (((unint64_t)v17 >> 3) - 2) >> 1;
        v19 = &v1[8 * v18];
        v20 = *(_QWORD *)v19;
        v21 = *(_QWORD *)v9;
        v22 = *(double *)(*(_QWORD *)v9 + 32);
        v23 = *(double *)(*(_QWORD *)v19 + 32);
        v24 = *(double *)(*(_QWORD *)v9 + 24) < *(double *)(*(_QWORD *)v19 + 24);
        if (v22 != v23)
          v24 = v22 < v23;
        if (v24)
        {
          do
          {
            *(_QWORD *)v9 = v20;
            v9 = v19;
            if (!v18)
              break;
            v18 = (v18 - 1) >> 1;
            v19 = &v1[8 * v18];
            v20 = *(_QWORD *)v19;
            v25 = *(double *)(*(_QWORD *)v19 + 32);
            v26 = *(double *)(v21 + 24) < *(double *)(*(_QWORD *)v19 + 24);
            if (v22 != v25)
              v26 = v22 < v25;
          }
          while (v26);
          *(_QWORD *)v9 = v21;
        }
      }
    }
  }
  a1[1] -= 8;
  v27 = *v3;
  *(_QWORD *)(v27 + 8) = v3[1];
  *(_QWORD *)v3[1] = v27;
  --a1[6];
  operator delete(v3);
}

uint64_t *sub_20EECA6E4(uint64_t *result)
{
  __int128 *v1;
  __int128 *v2;
  __int128 *v3;
  _QWORD *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 *v45;
  unint64_t v46;
  __int128 *v47;
  __int128 *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;

  v2 = (__int128 *)result[6];
  v1 = (__int128 *)result[7];
  if (v2 == v1)
  {
    v1 = (__int128 *)result[6];
    v32 = (_OWORD *)result[3];
    v31 = (_OWORD *)result[4];
    if (v32 == v31)
      goto LABEL_74;
  }
  else
  {
    v3 = (__int128 *)result[6];
    do
    {
      while (1)
      {
        v5 = (unint64_t *)*((_QWORD *)v3 + 1);
        v4 = (_QWORD *)*((_QWORD *)v3 + 2);
        v6 = (uint64_t *)v4[1];
        if (v5 && v6 != 0)
        {
          v8 = *v5;
          v9 = *v6;
          if ((*v5 & 0x8000000000000000) == 0)
            v8 = 0x8000000000000000 - *v5;
          if (v9 >= 0)
            v9 = 0x8000000000000000 - v9;
          v10 = v8 - v9 <= 0x80 ? 0 : -1;
          if (!(v8 > v9 ? v10 : v9 - v8 > 0x80))
          {
            v12 = v5[1];
            v13 = v6[1];
            if (v12 >= 0)
              v12 = 0x8000000000000000 - v12;
            if (v13 >= 0)
              v13 = 0x8000000000000000 - v13;
            v14 = (unint64_t)(v12 - v13) <= 0x80 ? 0 : -1;
            if (!(v12 > (unint64_t)v13 ? v14 : (unint64_t)(v13 - v12) > 0x80))
              break;
          }
        }
        if (v3 != v2)
        {
          v16 = *v3;
          v17 = v3[2];
          v2[1] = v3[1];
          v2[2] = v17;
          *v2 = v16;
          v18 = v2 + 3;
          v19 = v3[5];
          v20 = v3[3];
          v2[4] = v3[4];
          v2[5] = v19;
          v2[3] = v20;
          *((_QWORD *)v2 + 2) = v2 + 3;
          *((_QWORD *)v2 + 8) = v2;
          v21 = *((_QWORD *)v2 + 4);
          if (v21)
          {
            *(_QWORD *)(v21 + 24) = v2;
            *(_QWORD *)(*((_QWORD *)v2 + 9) + 32) = v18;
          }
          if (*((_QWORD *)v2 + 10))
          {
            *(_QWORD *)(*((_QWORD *)v2 + 3) + 32) = v2;
            *(_QWORD *)(*((_QWORD *)v2 + 10) + 24) = v18;
          }
        }
        v2 += 6;
        v1 = (__int128 *)result[7];
        v3 += 6;
        if (v3 == v1)
          goto LABEL_40;
      }
      v22 = *(_QWORD **)(v4[4] + 16);
      if (v22 != v4)
      {
        v23 = *(_QWORD **)(v4[4] + 16);
        do
        {
          v23[1] = v5;
          v23 = *(_QWORD **)(v23[4] + 16);
        }
        while (v23 != v4);
      }
      v24 = v4[3];
      v25 = *(_QWORD *)(v4[2] + 24);
      v26 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 4) + 16) + 16);
      *(_QWORD *)(v26 + 24) = v25;
      *(_QWORD *)(v25 + 32) = v26;
      v27 = v22[2];
      *(_QWORD *)(v24 + 32) = v27;
      *(_QWORD *)(v27 + 24) = v24;
      v3 += 6;
    }
    while (v3 != v1);
LABEL_40:
    v28 = (__int128 *)result[6];
    if (v2 != v1)
    {
      v1 = v2;
      result[7] = (uint64_t)v2;
    }
    if (v28 == v1)
    {
      v2 = v1;
      v32 = (_OWORD *)result[3];
      v31 = (_OWORD *)result[4];
      if (v32 == v31)
        goto LABEL_74;
    }
    else
    {
      v29 = v28;
      do
      {
        v30 = *((_QWORD *)v29 + 1);
        *(_QWORD *)(*(_QWORD *)v29 + 8) = v29;
        if (v30)
          *(_QWORD *)(v30 + 16) = v29;
        v29 += 3;
      }
      while (v29 != v1);
      v2 = v1;
      v1 = v28;
      v32 = (_OWORD *)result[3];
      v31 = (_OWORD *)result[4];
      if (v32 == v31)
      {
LABEL_74:
        if (v1 == v2)
          return result;
        *((_QWORD *)v1 + 3) = v1;
        *((_QWORD *)v1 + 4) = v1;
        v44 = v1 + 6;
        v45 = v1 + 3;
        if (v1 + 6 == v2)
          goto LABEL_84;
        v46 = (char *)v2 - (char *)v1 - 192;
        if (v46 >= 0x60)
        {
          v49 = v46 / 0x60 + 1;
          v50 = v49 & 0x7FFFFFFFFFFFFFELL;
          v51 = 96 * (v49 & 0x7FFFFFFFFFFFFFELL);
          v45 = (__int128 *)((char *)v45 + v51);
          v47 = (__int128 *)&v44[(unint64_t)v51 / 8];
          v48 = &v1[(unint64_t)v51 / 0x10];
          v52 = (_QWORD *)v1 + 15;
          v53 = v49 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            *(v52 - 6) = v52 - 3;
            *(v52 - 5) = v52 - 3;
            result = v52 + 9;
            v52[6] = v52 + 9;
            v52[7] = v52 + 9;
            *v52 = v52 - 9;
            v52[1] = v52 - 9;
            v52[12] = v52 + 3;
            v52[13] = v52 + 3;
            v52 += 24;
            v53 -= 2;
          }
          while (v53);
          if (v49 == v50)
          {
            v1 = (__int128 *)&v44[12 * v50 - 12];
LABEL_84:
            *((_QWORD *)v1 + 9) = v45;
            *((_QWORD *)v1 + 10) = v45;
            return result;
          }
        }
        else
        {
          v47 = v1 + 6;
          v48 = v1;
        }
        do
        {
          *((_QWORD *)v48 + 9) = v47;
          *((_QWORD *)v48 + 10) = v47;
          *((_QWORD *)v48 + 15) = v45;
          *((_QWORD *)v48 + 16) = v45;
          v45 = v47 + 3;
          v48 = v47;
          v47 += 6;
        }
        while (v47 != v2);
        v1 = v47 - 6;
        v45 = v47 - 3;
        goto LABEL_84;
      }
    }
  }
  v33 = v32;
  do
  {
    if (*((_QWORD *)v33 + 2))
    {
      if (v33 != v32)
      {
        v34 = v33[1];
        *v32 = *v33;
        v32[1] = v34;
        v35 = *((_QWORD *)v32 + 2);
        v36 = v35;
        do
        {
          *(_QWORD *)(v36 + 8) = v32;
          v36 = *(_QWORD *)(*(_QWORD *)(v36 + 32) + 16);
        }
        while (v36 != v35);
        v31 = (_OWORD *)result[4];
      }
      v32 += 2;
    }
    v33 += 2;
  }
  while (v33 != v31);
  v37 = (_OWORD *)result[3];
  if (v32 != v31)
  {
    v31 = v32;
    result[4] = (uint64_t)v32;
  }
  if (v37 == v31)
  {
    v1 = (__int128 *)result[6];
    v2 = (__int128 *)result[7];
    goto LABEL_74;
  }
  v38 = *result;
  v39 = result[1];
  while (v38 != v39)
  {
    v40 = *(_QWORD *)(v38 + 8);
    if (v40)
    {
      v41 = *(_QWORD *)(v38 + 8);
      while (1)
      {
        v42 = *(_QWORD *)(v41 + 32);
        if (!v42)
          break;
        v41 = *(_QWORD *)(v41 + 32);
        if (v42 == v40)
        {
          v41 = *(_QWORD *)(v38 + 8);
          if (*(_QWORD *)(v40 + 32))
            goto LABEL_64;
          goto LABEL_71;
        }
      }
      do
      {
LABEL_71:
        v43 = v40;
        v40 = *(_QWORD *)(v40 + 24);
      }
      while (v40);
      *(_QWORD *)(v41 + 32) = v43;
      *(_QWORD *)(v43 + 24) = v41;
    }
LABEL_64:
    v38 += 24;
  }
  return result;
}

void sub_20EECAAF0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  int *v18;
  __int128 *v19;
  int *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  __n128 *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

uint64_t sub_20EECAF64(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;

  v3 = *a2;
  if ((_DWORD)v3 != *a3)
    return (int)v3 < *a3;
  v4 = a2[2];
  if ((_DWORD)v3 == (_DWORD)v4)
  {
    v5 = a2[1];
    v6 = a3[2];
    if (v5 == a2[3])
    {
      if ((_DWORD)v3 == v6)
      {
        v7 = a3[1];
        v8 = v5 < v7;
        v9 = v5 <= v7;
        v10 = v8;
        if (v7 == a3[3])
          return v10;
        else
          return v9;
      }
    }
    else if ((_DWORD)v3 == v6)
    {
      return v5 < a3[1];
    }
    return 1;
  }
  v12 = (int)a3[2];
  if ((_DWORD)v3 == (_DWORD)v12)
    return 0;
  v13 = a2[1];
  v14 = a3[1];
  if ((_DWORD)v13 != v14)
    return (int)v13 < v14;
  v15 = v4 - v3;
  v16 = v3 - v12;
  v17 = a2[3] - v13;
  v18 = v13 - (int)a3[3];
  if (v15 >= 0)
    v19 = v15;
  else
    v19 = -v15;
  if (v17 >= 0)
    v20 = v17;
  else
    v20 = -v17;
  if (v16 >= 0)
    v21 = v16;
  else
    v21 = -v16;
  if (v18 >= 0)
    v22 = v18;
  else
    v22 = -v18;
  v23 = v22 * v19;
  v24 = v20 * v21;
  v25 = v18 ^ v15;
  v26 = (double)(v23 - v24);
  v27 = v17 ^ v16;
  v28 = (double)(v24 - v23);
  if (v23 < v24)
    v26 = -v28;
  if (v27 < 0)
    v26 = (double)(v23 + v24);
  if (v23 > v24)
    v28 = -(double)(v23 - v24);
  if (v27 >= 0)
    v28 = -(double)(v23 + v24);
  if (v25 < 0)
    v26 = v28;
  return v26 > 0.0;
}

uint64_t sub_20EECB0B8(uint64_t result, int *a2, uint64_t a3)
{
  uint64_t v4;
  int *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  uint64_t v45;

  if ((int *)result == a2)
    return result;
  v4 = result;
  v5 = (int *)(result + 40);
  if ((int *)(result + 40) == a2)
    return result;
  v7 = 0;
  v8 = result;
  while (2)
  {
    v10 = v5;
    result = sub_20EECAF64(a3, v5, (_DWORD *)v8);
    if (!(_DWORD)result)
      goto LABEL_6;
    v11 = *(_DWORD *)(v8 + 40);
    v12 = *(_DWORD *)(v8 + 44);
    v13 = *(_DWORD *)(v8 + 48);
    v14 = *(_DWORD *)(v8 + 52);
    v44 = *(_OWORD *)(v8 + 56);
    v45 = *(_QWORD *)(v8 + 72);
    v15 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v10 = *(_OWORD *)v8;
    *((_OWORD *)v10 + 1) = v15;
    *((_QWORD *)v10 + 4) = *(_QWORD *)(v8 + 32);
    v9 = v4;
    if (v8 == v4)
      goto LABEL_5;
    v16 = v14 - (uint64_t)v12;
    if (v13 - (uint64_t)v11 >= 0)
      v17 = v13 - (uint64_t)v11;
    else
      v17 = v11 - (uint64_t)v13;
    if (v16 >= 0)
      v18 = v14 - (uint64_t)v12;
    else
      v18 = v12 - (uint64_t)v14;
    if (v11 == v13)
    {
      if (v12 == v14)
      {
        v19 = v7;
        while (1)
        {
          v21 = v4 + v19;
          v22 = *(_DWORD *)(v4 + v19 - 40);
          if (v11 == v22)
          {
            if (v11 == *(_DWORD *)(v21 - 32))
            {
              v23 = *(_DWORD *)(v4 + v19 - 36);
              if (v23 == *(_DWORD *)(v4 + v19 - 28))
              {
                if (v12 >= v23)
                  goto LABEL_51;
              }
              else if (v12 > v23)
              {
                v9 = v4 + v19;
                goto LABEL_5;
              }
            }
          }
          else if (v11 >= v22)
          {
            goto LABEL_51;
          }
          v8 -= 40;
          v20 = *(_OWORD *)(v4 + v19 - 24);
          *(_OWORD *)v21 = *(_OWORD *)(v4 + v19 - 40);
          *(_OWORD *)(v21 + 16) = v20;
          *(_QWORD *)(v21 + 32) = *(_QWORD *)(v4 + v19 - 8);
          v19 -= 40;
          if (!v19)
            goto LABEL_4;
        }
      }
      v40 = v7;
      while (1)
      {
        v42 = v4 + v40;
        v43 = *(_DWORD *)(v4 + v40 - 40);
        if (v11 == v43)
        {
          if (v11 == *(_DWORD *)(v42 - 32))
          {
            v9 = v4 + v40;
            if (v12 >= *(_DWORD *)(v4 + v40 - 36))
              goto LABEL_5;
          }
        }
        else if (v11 >= v43)
        {
          goto LABEL_51;
        }
        v8 -= 40;
        v41 = *(_OWORD *)(v4 + v40 - 24);
        *(_OWORD *)v42 = *(_OWORD *)(v4 + v40 - 40);
        *(_OWORD *)(v42 + 16) = v41;
        *(_QWORD *)(v42 + 32) = *(_QWORD *)(v4 + v40 - 8);
        v40 -= 40;
        if (!v40)
          goto LABEL_4;
      }
    }
    result = v7;
    while (1)
    {
      v25 = v4 + result;
      v26 = *(_DWORD *)(v4 + result - 40);
      v27 = v11 < v26;
      if (v11 != v26)
      {
LABEL_28:
        if (!v27)
          goto LABEL_51;
        goto LABEL_30;
      }
      v28 = *(int *)(v25 - 32);
      if (v11 == (_DWORD)v28)
        break;
      v29 = *(_DWORD *)(v4 + result - 36);
      v27 = v12 < v29;
      if (v12 != v29)
        goto LABEL_28;
      v30 = v11 - v28;
      v31 = v12 - (uint64_t)*(int *)(v4 + result - 28);
      if (v30 >= 0)
        v32 = v30;
      else
        v32 = -v30;
      if (v31 >= 0)
        v33 = v12 - (uint64_t)*(int *)(v4 + result - 28);
      else
        v33 = *(int *)(v4 + result - 28) - (uint64_t)v12;
      v34 = v33 * v17;
      v35 = v32 * v18;
      v36 = v31 ^ (v13 - (uint64_t)v11);
      v37 = v30 ^ v16;
      v38 = (double)(v34 - v35);
      v39 = (double)(v35 - v34);
      if (v34 < v35)
        v38 = -v39;
      if (v37 < 0)
        v38 = (double)(v34 + v35);
      if (v34 > v35)
        v39 = -(double)(v34 - v35);
      if (v37 >= 0)
        v39 = -(double)(v34 + v35);
      if (v36 < 0)
        v38 = v39;
      if (v38 <= 0.0)
      {
LABEL_51:
        v9 = v8;
        goto LABEL_5;
      }
LABEL_30:
      v8 -= 40;
      v24 = *(_OWORD *)(v4 + result - 24);
      *(_OWORD *)v25 = *(_OWORD *)(v4 + result - 40);
      *(_OWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 32) = *(_QWORD *)(v4 + result - 8);
      result -= 40;
      if (!result)
      {
LABEL_4:
        v9 = v4;
        goto LABEL_5;
      }
    }
    v9 = v4 + result;
LABEL_5:
    *(_DWORD *)v9 = v11;
    *(_DWORD *)(v9 + 4) = v12;
    *(_DWORD *)(v9 + 8) = v13;
    *(_DWORD *)(v9 + 12) = v14;
    *(_OWORD *)(v9 + 16) = v44;
    *(_QWORD *)(v9 + 32) = v45;
LABEL_6:
    v5 = v10 + 10;
    v7 += 40;
    v8 = (uint64_t)v10;
    if (v10 + 10 != a2)
      continue;
    return result;
  }
}

uint64_t sub_20EECB388(uint64_t result, int *a2, uint64_t a3)
{
  int *v4;
  int *v5;
  int *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  __int128 v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  __int128 v31;
  int v32;
  BOOL v33;
  int v34;
  __int128 v35;
  int v36;
  BOOL v37;
  __int128 v38;
  uint64_t v39;

  if ((int *)result != a2)
  {
    v4 = (int *)result;
    v5 = (int *)(result + 40);
    if ((int *)(result + 40) != a2)
    {
      do
      {
        v7 = v5;
        result = sub_20EECAF64(a3, v5, v4);
        if ((_DWORD)result)
        {
          v8 = *v7;
          v9 = v4[11];
          v10 = v4[12];
          v11 = v4[13];
          v38 = *(_OWORD *)(v4 + 14);
          v39 = *((_QWORD *)v4 + 9);
          v12 = v10 - *v7;
          v13 = v11 - v9;
          if (v12 >= 0)
            v14 = v10 - v8;
          else
            v14 = v8 - v10;
          if (v13 >= 0)
            result = v11 - v9;
          else
            result = v9 - v11;
          if (v8 == (_DWORD)v10)
          {
            if (v9 == (_DWORD)v11)
            {
              do
              {
                while (1)
                {
                  do
                  {
                    while (1)
                    {
                      v15 = v4;
                      v31 = *((_OWORD *)v4 + 1);
                      *(_OWORD *)(v4 + 10) = *(_OWORD *)v4;
                      *(_OWORD *)(v4 + 14) = v31;
                      *((_QWORD *)v4 + 9) = *((_QWORD *)v4 + 4);
                      v32 = *(v4 - 10);
                      v4 -= 10;
                      v33 = v8 < v32;
                      if (v8 == v32)
                        break;
                      if (!v33)
                        goto LABEL_4;
                    }
                  }
                  while (v8 != *(v15 - 8));
                  v34 = *(v15 - 9);
                  if (v34 != *(v15 - 7))
                    break;
                  if (v9 >= v34)
                    goto LABEL_4;
                }
              }
              while (v9 <= v34);
            }
            else
            {
              do
              {
                while (1)
                {
                  v15 = v4;
                  v35 = *((_OWORD *)v4 + 1);
                  *(_OWORD *)(v4 + 10) = *(_OWORD *)v4;
                  *(_OWORD *)(v4 + 14) = v35;
                  *((_QWORD *)v4 + 9) = *((_QWORD *)v4 + 4);
                  v36 = *(v4 - 10);
                  v4 -= 10;
                  v37 = v8 < v36;
                  if (v8 == v36)
                    break;
                  if (!v37)
                    goto LABEL_4;
                }
              }
              while (v8 != *(v15 - 8) || v9 < *(v15 - 9));
            }
          }
          else
          {
            while (1)
            {
              while (1)
              {
                v15 = v4;
                v16 = *((_OWORD *)v4 + 1);
                *(_OWORD *)(v4 + 10) = *(_OWORD *)v4;
                *(_OWORD *)(v4 + 14) = v16;
                *((_QWORD *)v4 + 9) = *((_QWORD *)v4 + 4);
                v17 = *(v4 - 10);
                v4 -= 10;
                v18 = v8 < v17;
                if (v8 == v17)
                  break;
                if (!v18)
                  goto LABEL_4;
              }
              v19 = *(v15 - 8);
              if (v8 == (_DWORD)v19)
                break;
              v20 = *(v15 - 9);
              if (v9 == v20)
              {
                v21 = v8 - v19;
                v22 = v9 - (uint64_t)*(v15 - 7);
                if (v21 >= 0)
                  v23 = v21;
                else
                  v23 = -v21;
                if (v22 >= 0)
                  v24 = v9 - (uint64_t)*(v15 - 7);
                else
                  v24 = *(v15 - 7) - (uint64_t)v9;
                v25 = v24 * v14;
                v26 = v23 * result;
                v27 = v22 ^ v12;
                v28 = v21 ^ v13;
                v29 = (double)(v25 - v26);
                v30 = (double)(v26 - v25);
                if (v25 < v26)
                  v29 = -v30;
                if (v28 < 0)
                  v29 = (double)(v25 + v26);
                if (v25 > v26)
                  v30 = -(double)(v25 - v26);
                if (v28 >= 0)
                  v30 = -(double)(v25 + v26);
                if (v27 < 0)
                  v29 = v30;
                if (v29 <= 0.0)
                  break;
              }
              else if (v9 >= v20)
              {
                break;
              }
            }
          }
LABEL_4:
          *v15 = v8;
          v15[1] = v9;
          v15[2] = v10;
          v15[3] = v11;
          *((_OWORD *)v15 + 1) = v38;
          *((_QWORD *)v15 + 4) = v39;
        }
        v5 = v7 + 10;
        v4 = v7;
      }
      while (v7 + 10 != a2);
    }
  }
  return result;
}

uint64_t sub_20EECB5D0(__int128 *a1, int *a2, int *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v8 = sub_20EECAF64(a4, a2, a1);
  result = sub_20EECAF64(a4, a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *a1;
      v11 = a1[1];
      v12 = *((_QWORD *)a1 + 4);
      v13 = *((_QWORD *)a3 + 4);
      v14 = *((_OWORD *)a3 + 1);
      *a1 = *(_OWORD *)a3;
      a1[1] = v14;
      *((_QWORD *)a1 + 4) = v13;
      *((_QWORD *)a3 + 4) = v12;
      result = 1;
LABEL_10:
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v11;
      return result;
    }
    v25 = *a1;
    v26 = a1[1];
    v27 = *((_QWORD *)a1 + 4);
    v28 = *((_QWORD *)a2 + 4);
    v29 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v29;
    *((_QWORD *)a1 + 4) = v28;
    *((_QWORD *)a2 + 4) = v27;
    *(_OWORD *)a2 = v25;
    *((_OWORD *)a2 + 1) = v26;
    if (sub_20EECAF64(a4, a3, a2))
    {
      v10 = *(_OWORD *)a2;
      v11 = *((_OWORD *)a2 + 1);
      v30 = *((_QWORD *)a2 + 4);
      v31 = *((_QWORD *)a3 + 4);
      v32 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v32;
      *((_QWORD *)a2 + 4) = v31;
      *((_QWORD *)a3 + 4) = v30;
      result = 2;
      goto LABEL_10;
    }
    return 1;
  }
  if ((_DWORD)result)
  {
    v15 = *(_OWORD *)a2;
    v16 = *((_OWORD *)a2 + 1);
    v17 = *((_QWORD *)a2 + 4);
    v18 = *((_QWORD *)a3 + 4);
    v19 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v19;
    *((_QWORD *)a2 + 4) = v18;
    *((_QWORD *)a3 + 4) = v17;
    *(_OWORD *)a3 = v15;
    *((_OWORD *)a3 + 1) = v16;
    if (!sub_20EECAF64(a4, a2, a1))
      return 1;
    v20 = *a1;
    v21 = a1[1];
    v22 = *((_QWORD *)a1 + 4);
    v23 = *((_QWORD *)a2 + 4);
    v24 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v24;
    *((_QWORD *)a1 + 4) = v23;
    *((_QWORD *)a2 + 4) = v22;
    result = 2;
    *(_OWORD *)a2 = v20;
    *((_OWORD *)a2 + 1) = v21;
  }
  return result;
}

_DWORD *sub_20EECB744(__int128 *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  __int128 *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v4 = a2;
  v6 = a1[1];
  v64 = *a1;
  v65 = v6;
  v66 = *((_QWORD *)a1 + 4);
  if ((sub_20EECAF64(a3, (int *)&v64, (_DWORD *)(a2 - 40)) & 1) != 0)
  {
    v7 = a1;
    do
      v7 += 10;
    while ((sub_20EECAF64(a3, (int *)&v64, v7) & 1) == 0);
  }
  else
  {
    v8 = (_DWORD *)a1 + 10;
    do
    {
      v7 = v8;
      if ((unint64_t)v8 >= v4)
        break;
      v9 = sub_20EECAF64(a3, (int *)&v64, v8);
      v8 = v7 + 10;
    }
    while (!v9);
  }
  if ((unint64_t)v7 < v4)
  {
    do
      v4 -= 40;
    while ((sub_20EECAF64(a3, (int *)&v64, (_DWORD *)v4) & 1) != 0);
  }
LABEL_95:
  while ((unint64_t)v7 < v4)
  {
    v10 = *(_OWORD *)v7;
    v11 = *((_OWORD *)v7 + 1);
    v69 = *((_QWORD *)v7 + 4);
    v67 = v10;
    v68 = v11;
    v12 = *(_OWORD *)v4;
    v13 = *(_OWORD *)(v4 + 16);
    *((_QWORD *)v7 + 4) = *(_QWORD *)(v4 + 32);
    *(_OWORD *)v7 = v12;
    *((_OWORD *)v7 + 1) = v13;
    v14 = v67;
    v15 = v68;
    *(_QWORD *)(v4 + 32) = v69;
    *(_OWORD *)v4 = v14;
    *(_OWORD *)(v4 + 16) = v15;
    v16 = SDWORD2(v64) - (uint64_t)(int)v64;
    v17 = SHIDWORD(v64) - (uint64_t)SDWORD1(v64);
    if (v16 >= 0)
      v18 = SDWORD2(v64) - (uint64_t)(int)v64;
    else
      v18 = (int)v64 - (uint64_t)SDWORD2(v64);
    if (v17 >= 0)
      v19 = SHIDWORD(v64) - (uint64_t)SDWORD1(v64);
    else
      v19 = SDWORD1(v64) - (uint64_t)SHIDWORD(v64);
    if ((_DWORD)v64 == DWORD2(v64))
    {
      if (DWORD1(v64) == HIDWORD(v64))
      {
        while (1)
        {
          while (1)
          {
            v35 = v7[10];
            v7 += 10;
            v34 = v35;
            if ((_DWORD)v64 == v35)
              break;
            if ((int)v64 < v34)
              goto LABEL_56;
          }
          if ((_DWORD)v64 != v7[2])
            break;
          v36 = v7[1];
          if (v36 == v7[3])
          {
            if (SDWORD1(v64) < v36)
              break;
          }
          else if (SDWORD1(v64) <= v36)
          {
            break;
          }
        }
      }
      else
      {
        do
        {
          while (1)
          {
            v38 = v7[10];
            v7 += 10;
            v37 = v38;
            if ((_DWORD)v64 == v38)
              break;
            if ((int)v64 < v37)
              goto LABEL_56;
          }
        }
        while ((_DWORD)v64 == v7[2] && SDWORD1(v64) >= v7[1]);
      }
    }
    else
    {
      do
      {
        while (1)
        {
          do
          {
            while (1)
            {
              v21 = v7[10];
              v7 += 10;
              v20 = v21;
              if ((_DWORD)v64 == v21)
                break;
              if ((int)v64 < v20)
                goto LABEL_56;
            }
            v22 = (int)v7[2];
          }
          while ((_DWORD)v64 == (_DWORD)v22);
          v23 = v7[1];
          if (DWORD1(v64) == v23)
            break;
          if (SDWORD1(v64) < v23)
            goto LABEL_56;
        }
        v24 = (int)v64 - v22;
        v25 = SDWORD1(v64) - (uint64_t)(int)v7[3];
        if (v24 >= 0)
          v26 = v24;
        else
          v26 = -v24;
        if (v25 >= 0)
          v27 = SDWORD1(v64) - (uint64_t)(int)v7[3];
        else
          v27 = (int)v7[3] - (uint64_t)SDWORD1(v64);
        v28 = v27 * v18;
        v29 = v26 * v19;
        v30 = v25 ^ v16;
        v31 = v24 ^ v17;
        v32 = (double)(v28 - v29);
        v33 = (double)(v29 - v28);
        if (v28 < v29)
          v32 = -v33;
        if (v31 < 0)
          v32 = (double)(v28 + v29);
        if (v28 > v29)
          v33 = -(double)(v28 - v29);
        if (v31 >= 0)
          v33 = -(double)(v28 + v29);
        if (v30 < 0)
          v32 = v33;
      }
      while (v32 <= 0.0);
    }
LABEL_56:
    if ((_DWORD)v64 == DWORD2(v64))
    {
      if (DWORD1(v64) == HIDWORD(v64))
      {
        do
        {
          while (1)
          {
            do
            {
              while (1)
              {
                v54 = *(_DWORD *)(v4 - 40);
                v4 -= 40;
                v53 = v54;
                if ((_DWORD)v64 == v54)
                  break;
                if ((int)v64 >= v53)
                  goto LABEL_95;
              }
            }
            while ((_DWORD)v64 != *(_DWORD *)(v4 + 8));
            v55 = *(_DWORD *)(v4 + 4);
            if (v55 != *(_DWORD *)(v4 + 12))
              break;
            if (SDWORD1(v64) >= v55)
              goto LABEL_95;
          }
        }
        while (SDWORD1(v64) <= v55);
      }
      else
      {
        do
        {
          while (1)
          {
            v57 = *(_DWORD *)(v4 - 40);
            v4 -= 40;
            v56 = v57;
            if ((_DWORD)v64 == v57)
              break;
            if ((int)v64 >= v56)
              goto LABEL_95;
          }
        }
        while ((_DWORD)v64 != *(_DWORD *)(v4 + 8) || SDWORD1(v64) < *(_DWORD *)(v4 + 4));
      }
    }
    else
    {
      while (1)
      {
        while (1)
        {
          v40 = *(_DWORD *)(v4 - 40);
          v4 -= 40;
          v39 = v40;
          if ((_DWORD)v64 == v40)
            break;
          if ((int)v64 >= v39)
            goto LABEL_95;
        }
        v41 = *(int *)(v4 + 8);
        if ((_DWORD)v64 == (_DWORD)v41)
          break;
        v42 = *(_DWORD *)(v4 + 4);
        if (DWORD1(v64) == v42)
        {
          v43 = (int)v64 - v41;
          v44 = SDWORD1(v64) - (uint64_t)*(int *)(v4 + 12);
          if (v43 >= 0)
            v45 = v43;
          else
            v45 = -v43;
          if (v44 >= 0)
            v46 = SDWORD1(v64) - (uint64_t)*(int *)(v4 + 12);
          else
            v46 = *(int *)(v4 + 12) - (uint64_t)SDWORD1(v64);
          v47 = v46 * v18;
          v48 = v45 * v19;
          v49 = v44 ^ v16;
          v50 = v43 ^ v17;
          v51 = (double)(v47 - v48);
          v52 = (double)(v48 - v47);
          if (v47 < v48)
            v51 = -v52;
          if (v50 < 0)
            v51 = (double)(v47 + v48);
          if (v47 > v48)
            v52 = -(double)(v47 - v48);
          if (v50 >= 0)
            v52 = -(double)(v47 + v48);
          if (v49 < 0)
            v51 = v52;
          if (v51 <= 0.0)
            goto LABEL_95;
        }
        else if (SDWORD1(v64) >= v42)
        {
          goto LABEL_95;
        }
      }
    }
  }
  v58 = (__int128 *)(v7 - 10);
  if (v7 - 10 != (_DWORD *)a1)
  {
    v59 = *v58;
    v60 = *(_OWORD *)(v7 - 6);
    *((_QWORD *)a1 + 4) = *((_QWORD *)v7 - 1);
    *a1 = v59;
    a1[1] = v60;
  }
  v61 = v64;
  v62 = v65;
  *((_QWORD *)v7 - 1) = v66;
  *v58 = v61;
  *(_OWORD *)(v7 - 6) = v62;
  return v7;
}

uint64_t sub_20EECBB14(__int128 *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v6 = 0;
  v7 = a1[1];
  v59 = *a1;
  v60 = v7;
  v61 = *((_QWORD *)a1 + 4);
  do
    v6 += 40;
  while ((sub_20EECAF64(a3, (int *)((char *)a1 + v6), &v59) & 1) != 0);
  v8 = (unint64_t)a1 + v6;
  v9 = (uint64_t)a1 + v6 - 40;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      a2 -= 10;
    }
    while ((sub_20EECAF64(a3, a2, &v59) & 1) == 0);
  }
  else
  {
    do
      a2 -= 10;
    while (!sub_20EECAF64(a3, a2, &v59));
  }
  if (v8 < (unint64_t)a2)
  {
    v10 = (unint64_t)a1 + v6;
    v11 = a2;
LABEL_11:
    v12 = *(_OWORD *)v10;
    v13 = *(_OWORD *)(v10 + 16);
    v64 = *(_QWORD *)(v10 + 32);
    v62 = v12;
    v63 = v13;
    v14 = *(_OWORD *)v11;
    v15 = *((_OWORD *)v11 + 1);
    *(_QWORD *)(v10 + 32) = *((_QWORD *)v11 + 4);
    *(_OWORD *)v10 = v14;
    *(_OWORD *)(v10 + 16) = v15;
    v16 = v62;
    v17 = v63;
    *((_QWORD *)v11 + 4) = v64;
    *(_OWORD *)v11 = v16;
    *((_OWORD *)v11 + 1) = v17;
    v18 = (int)v59 - (uint64_t)SDWORD2(v59);
    v19 = SDWORD1(v59) - (uint64_t)SHIDWORD(v59);
    if (v18 >= 0)
      v20 = (int)v59 - (uint64_t)SDWORD2(v59);
    else
      v20 = SDWORD2(v59) - (uint64_t)(int)v59;
    if (v19 >= 0)
      v21 = SDWORD1(v59) - (uint64_t)SHIDWORD(v59);
    else
      v21 = SHIDWORD(v59) - (uint64_t)SDWORD1(v59);
    if ((_DWORD)v59 != DWORD2(v59))
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v23 = *(_DWORD *)(v10 + 40);
            v10 += 40;
            v22 = v23;
            if (v23 == (_DWORD)v59)
              break;
            if (v22 >= (int)v59)
              goto LABEL_59;
          }
          v24 = *(_DWORD *)(v10 + 4);
          v25 = *(int *)(v10 + 8);
          if ((_DWORD)v59 == (_DWORD)v25)
            break;
          if (v24 != DWORD1(v59))
            goto LABEL_47;
          v26 = v25 - (int)v59;
          v27 = *(int *)(v10 + 12) - (uint64_t)SDWORD1(v59);
          if (v26 >= 0)
            v28 = v26;
          else
            v28 = -v26;
          if (v27 >= 0)
            v29 = *(int *)(v10 + 12) - (uint64_t)SDWORD1(v59);
          else
            v29 = SDWORD1(v59) - (uint64_t)*(int *)(v10 + 12);
          v30 = v28 * v21;
          v31 = v29 * v20;
          v32 = v26 ^ v19;
          v33 = v27 ^ v18;
          v34 = (double)(v30 - v31);
          v35 = (double)(v31 - v30);
          if (v30 < v31)
            v34 = -v35;
          if (v33 < 0)
            v34 = (double)(v31 + v30);
          if (v30 > v31)
            v35 = -(double)(v30 - v31);
          if (v33 >= 0)
            v35 = -(double)(v31 + v30);
          if (v32 < 0)
            v34 = v35;
          if (v34 <= 0.0)
            goto LABEL_59;
        }
        if (v24 == *(_DWORD *)(v10 + 12))
        {
          if ((_DWORD)v59 == DWORD2(v59))
          {
            if (DWORD1(v59) == HIDWORD(v59))
            {
LABEL_47:
              if (v24 >= SDWORD1(v59))
                goto LABEL_59;
            }
            else if (v24 > SDWORD1(v59))
            {
              goto LABEL_59;
            }
          }
        }
        else if ((_DWORD)v59 == DWORD2(v59))
        {
          goto LABEL_47;
        }
      }
    }
    while (1)
    {
      while (1)
      {
        v37 = *(_DWORD *)(v10 + 40);
        v10 += 40;
        v36 = v37;
        if (v37 == (_DWORD)v59)
          break;
        if (v36 >= (int)v59)
          goto LABEL_59;
      }
      if ((_DWORD)v59 != *(_DWORD *)(v10 + 8))
        break;
      v38 = *(_DWORD *)(v10 + 4);
      if (v38 == *(_DWORD *)(v10 + 12))
      {
        if ((_DWORD)v59 == DWORD2(v59))
        {
          if (DWORD1(v59) == HIDWORD(v59))
          {
LABEL_58:
            if (v38 >= SDWORD1(v59))
              break;
          }
          else if (v38 > SDWORD1(v59))
          {
            break;
          }
        }
      }
      else if ((_DWORD)v59 == DWORD2(v59))
      {
        goto LABEL_58;
      }
    }
LABEL_59:
    v9 = v10 - 40;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v40 = *(v11 - 10);
          v11 -= 10;
          v39 = v40;
          if (v40 == (_DWORD)v59)
            break;
          if (v39 < (int)v59)
            goto LABEL_10;
        }
        v41 = v11[2];
        if ((_DWORD)v59 == (_DWORD)v41)
          break;
        if ((_DWORD)v59 != DWORD2(v59))
        {
          v43 = v11[1];
          if (v43 == DWORD1(v59))
          {
            v44 = v41 - (int)v59;
            v45 = v11[3] - (uint64_t)SDWORD1(v59);
            if (v44 >= 0)
              v46 = v44;
            else
              v46 = -v44;
            if (v45 >= 0)
              v47 = v11[3] - (uint64_t)SDWORD1(v59);
            else
              v47 = SDWORD1(v59) - (uint64_t)v11[3];
            v48 = v46 * v21;
            v49 = v47 * v20;
            v50 = v44 ^ v19;
            v51 = v45 ^ v18;
            v52 = (double)(v48 - v49);
            v53 = (double)(v49 - v48);
            if (v48 < v49)
              v52 = -v53;
            if (v51 < 0)
              v52 = (double)(v49 + v48);
            if (v48 > v49)
              v53 = -(double)(v48 - v49);
            if (v51 >= 0)
              v53 = -(double)(v49 + v48);
            if (v50 < 0)
              v52 = v53;
            if (v52 > 0.0)
            {
LABEL_10:
              if (v10 >= (unint64_t)v11)
                goto LABEL_93;
              goto LABEL_11;
            }
          }
          else if (v43 < SDWORD1(v59))
          {
            goto LABEL_10;
          }
        }
      }
      v42 = v11[1];
      if (v42 != v11[3])
        break;
      if ((_DWORD)v59 != DWORD2(v59))
        goto LABEL_10;
      if (DWORD1(v59) == HIDWORD(v59))
      {
LABEL_89:
        if (v42 < SDWORD1(v59))
          goto LABEL_10;
      }
      else if (v42 <= SDWORD1(v59))
      {
        goto LABEL_10;
      }
    }
    if ((_DWORD)v59 != DWORD2(v59))
      goto LABEL_10;
    goto LABEL_89;
  }
LABEL_93:
  if ((__int128 *)v9 != a1)
  {
    v54 = *(_OWORD *)v9;
    v55 = *(_OWORD *)(v9 + 16);
    *((_QWORD *)a1 + 4) = *(_QWORD *)(v9 + 32);
    *a1 = v54;
    a1[1] = v55;
  }
  v56 = v59;
  v57 = v60;
  *(_QWORD *)(v9 + 32) = v61;
  *(_OWORD *)v9 = v56;
  *(_OWORD *)(v9 + 16) = v57;
  return v9;
}

BOOL sub_20EECBEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 40;
      if (!sub_20EECAF64(a3, (int *)(a2 - 40), (_DWORD *)a1))
        return 1;
      v9 = *(_OWORD *)a1;
      v10 = *(_OWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(v8 + 32);
      v13 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(v8 + 32) = v11;
      result = 1;
      *(_OWORD *)v8 = v9;
      *(_OWORD *)(v8 + 16) = v10;
      return result;
    case 3uLL:
      sub_20EECB5D0((__int128 *)a1, (int *)(a1 + 40), (int *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      v24 = (__int128 *)(a1 + 40);
      v25 = (__int128 *)(a1 + 80);
      v26 = a2 - 40;
      sub_20EECB5D0((__int128 *)a1, (int *)(a1 + 40), (int *)(a1 + 80), a3);
      if (!sub_20EECAF64(a3, (int *)v26, (_DWORD *)(a1 + 80)))
        return 1;
      v27 = *v25;
      v28 = *(_OWORD *)(a1 + 96);
      v29 = *(_QWORD *)(a1 + 112);
      v30 = *(_QWORD *)(v26 + 32);
      v31 = *(_OWORD *)(v26 + 16);
      *v25 = *(_OWORD *)v26;
      *(_OWORD *)(a1 + 96) = v31;
      *(_QWORD *)(a1 + 112) = v30;
      *(_QWORD *)(v26 + 32) = v29;
      *(_OWORD *)v26 = v27;
      *(_OWORD *)(v26 + 16) = v28;
      if (!sub_20EECAF64(a3, (int *)(a1 + 80), (_DWORD *)(a1 + 40)))
        return 1;
      v32 = *(_QWORD *)(a1 + 72);
      v34 = *v24;
      v33 = *(_OWORD *)(a1 + 56);
      v35 = *(_OWORD *)(a1 + 96);
      *v24 = *v25;
      *(_OWORD *)(a1 + 56) = v35;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 112);
      *v25 = v34;
      *(_OWORD *)(a1 + 96) = v33;
      *(_QWORD *)(a1 + 112) = v32;
      if (!sub_20EECAF64(a3, (int *)(a1 + 40), (_DWORD *)a1))
        return 1;
      v36 = *(_QWORD *)(a1 + 32);
      v38 = *(_OWORD *)a1;
      v37 = *(_OWORD *)(a1 + 16);
      v39 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v24;
      *(_OWORD *)(a1 + 16) = v39;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72);
      *v24 = v38;
      *(_OWORD *)(a1 + 56) = v37;
      result = 1;
      *(_QWORD *)(a1 + 72) = v36;
      return result;
    case 5uLL:
      sub_20EECC164(a1, (__int128 *)(a1 + 40), (int *)(a1 + 80), (__int128 *)(a1 + 120), (__int128 *)(a2 - 40), a3);
      return 1;
    default:
      v14 = (_DWORD *)(a1 + 80);
      sub_20EECB5D0((__int128 *)a1, (int *)(a1 + 40), (int *)(a1 + 80), a3);
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if (sub_20EECAF64(a3, (int *)v15, v14))
    {
      v20 = *(_OWORD *)(v15 + 16);
      v40 = *(_OWORD *)v15;
      v41 = v20;
      v42 = *(_QWORD *)(v15 + 32);
      v21 = v16;
      do
      {
        v22 = a1 + v21;
        v23 = *(_OWORD *)(a1 + v21 + 96);
        *(_OWORD *)(v22 + 120) = *(_OWORD *)(a1 + v21 + 80);
        *(_OWORD *)(v22 + 136) = v23;
        *(_QWORD *)(v22 + 152) = *(_QWORD *)(a1 + v21 + 112);
        if (v21 == -80)
        {
          v18 = a1;
          goto LABEL_7;
        }
        v21 -= 40;
      }
      while ((sub_20EECAF64(a3, (int *)&v40, (_DWORD *)(v22 + 40)) & 1) != 0);
      v18 = a1 + v21 + 120;
LABEL_7:
      v19 = v41;
      *(_OWORD *)v18 = v40;
      *(_OWORD *)(v18 + 16) = v19;
      *(_QWORD *)(v18 + 32) = v42;
      if (++v17 == 8)
        return v15 + 40 == a2;
    }
    v14 = (_DWORD *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2)
      return 1;
  }
}

__n128 sub_20EECC164(uint64_t a1, __int128 *a2, int *a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __n128 result;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;

  sub_20EECB5D0((__int128 *)a1, (int *)a2, a3, a6);
  if (sub_20EECAF64(a6, (int *)a4, a3))
  {
    v12 = *(_OWORD *)a3;
    v13 = *((_OWORD *)a3 + 1);
    v14 = *((_QWORD *)a3 + 4);
    v15 = *((_QWORD *)a4 + 4);
    v16 = a4[1];
    *(_OWORD *)a3 = *a4;
    *((_OWORD *)a3 + 1) = v16;
    *((_QWORD *)a3 + 4) = v15;
    *((_QWORD *)a4 + 4) = v14;
    *a4 = v12;
    a4[1] = v13;
    if (sub_20EECAF64(a6, a3, a2))
    {
      v17 = *a2;
      v18 = a2[1];
      v19 = *((_QWORD *)a2 + 4);
      v20 = *((_QWORD *)a3 + 4);
      v21 = *((_OWORD *)a3 + 1);
      *a2 = *(_OWORD *)a3;
      a2[1] = v21;
      *((_QWORD *)a2 + 4) = v20;
      *((_QWORD *)a3 + 4) = v19;
      *(_OWORD *)a3 = v17;
      *((_OWORD *)a3 + 1) = v18;
      if (sub_20EECAF64(a6, (int *)a2, (_DWORD *)a1))
      {
        v22 = *(_OWORD *)a1;
        v23 = *(_OWORD *)(a1 + 16);
        v24 = *(_QWORD *)(a1 + 32);
        v25 = *((_QWORD *)a2 + 4);
        v26 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v26;
        *(_QWORD *)(a1 + 32) = v25;
        *((_QWORD *)a2 + 4) = v24;
        *a2 = v22;
        a2[1] = v23;
      }
    }
  }
  if (sub_20EECAF64(a6, (int *)a5, a4))
  {
    v28 = *a4;
    v29 = a4[1];
    v30 = *((_QWORD *)a4 + 4);
    v31 = *((_QWORD *)a5 + 4);
    v32 = a5[1];
    *a4 = *a5;
    a4[1] = v32;
    *((_QWORD *)a4 + 4) = v31;
    *((_QWORD *)a5 + 4) = v30;
    *a5 = v28;
    a5[1] = v29;
    if (sub_20EECAF64(a6, (int *)a4, a3))
    {
      v33 = *(_OWORD *)a3;
      v34 = *((_OWORD *)a3 + 1);
      v35 = *((_QWORD *)a3 + 4);
      v36 = *((_QWORD *)a4 + 4);
      v37 = a4[1];
      *(_OWORD *)a3 = *a4;
      *((_OWORD *)a3 + 1) = v37;
      *((_QWORD *)a3 + 4) = v36;
      *((_QWORD *)a4 + 4) = v35;
      *a4 = v33;
      a4[1] = v34;
      if (sub_20EECAF64(a6, a3, a2))
      {
        v38 = *a2;
        v39 = a2[1];
        v40 = *((_QWORD *)a2 + 4);
        v41 = *((_QWORD *)a3 + 4);
        v42 = *((_OWORD *)a3 + 1);
        *a2 = *(_OWORD *)a3;
        a2[1] = v42;
        *((_QWORD *)a2 + 4) = v41;
        *((_QWORD *)a3 + 4) = v40;
        *(_OWORD *)a3 = v38;
        *((_OWORD *)a3 + 1) = v39;
        if (sub_20EECAF64(a6, (int *)a2, (_DWORD *)a1))
        {
          result = *(__n128 *)a1;
          v43 = *(_OWORD *)(a1 + 16);
          v44 = *(_QWORD *)(a1 + 32);
          v45 = *((_QWORD *)a2 + 4);
          v46 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v46;
          *(_QWORD *)(a1 + 32) = v45;
          *((_QWORD *)a2 + 4) = v44;
          *a2 = (__int128)result;
          a2[1] = v43;
        }
      }
    }
  }
  return result;
}

__n128 sub_20EECC328(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  int64_t v12;
  __int128 *v13;
  int64_t v14;
  __n128 result;
  __n128 v16;
  __n128 *v17;
  __n128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v26 = v4;
    v27 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = (__int128 *)(a1 + 40 * v12);
      v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_20EECAF64(a2, (int *)(a1 + 40 * v12), (_DWORD *)v13 + 10))
      {
        v13 = (__int128 *)((char *)v13 + 40);
        v12 = v14;
      }
      if ((sub_20EECAF64(a2, (int *)v13, v7) & 1) == 0)
      {
        v16 = v7[1];
        v23 = *v7;
        v24 = v16;
        v25 = v7[2].n128_i64[0];
        do
        {
          v17 = (__n128 *)v13;
          v18 = (__n128)*v13;
          v19 = v13[1];
          v7[2].n128_u64[0] = *((_QWORD *)v13 + 4);
          *v7 = v18;
          v7[1] = (__n128)v19;
          if (v9 < v12)
            break;
          v20 = (2 * v12) | 1;
          v13 = (__int128 *)(a1 + 40 * v20);
          v21 = 2 * v12 + 2;
          if (v21 < a3)
          {
            if (sub_20EECAF64(a2, (int *)(a1 + 40 * v20), (_DWORD *)v13 + 10))
            {
              v13 = (__int128 *)((char *)v13 + 40);
              v20 = v21;
            }
          }
          v7 = v17;
          v12 = v20;
        }
        while (!sub_20EECAF64(a2, (int *)v13, &v23));
        result = v23;
        v22 = v24;
        v17[2].n128_u64[0] = v25;
        *v17 = result;
        v17[1] = v22;
      }
    }
  }
  return result;
}

unint64_t sub_20EECC494(unint64_t result, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v6;
  int *v7;
  int64_t v8;
  uint64_t v10;
  int *v11;
  __int128 v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  __int128 v45;
  __int128 v46;
  int *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  if ((uint64_t)((uint64_t)a2 - result) >= 41)
  {
    v57 = v3;
    v58 = v4;
    v6 = (int *)a2;
    v7 = (int *)result;
    v8 = ((unint64_t)a2 - result) / 0x28;
    do
    {
      v10 = 0;
      v51 = *(_OWORD *)v7;
      v52 = *((_OWORD *)v7 + 1);
      v53 = *((_QWORD *)v7 + 4);
      v11 = v7;
      do
      {
        v14 = v11;
        v15 = v10 + 1;
        v11 += 10 * v10 + 10;
        v16 = 2 * v10;
        v10 = (2 * v10) | 1;
        v17 = v16 + 2;
        if (v17 >= v8)
          goto LABEL_7;
        v18 = v11[10];
        v19 = *v11;
        if ((_DWORD)v19 == v18)
        {
          v20 = v14[10 * v15 + 2];
          if ((_DWORD)v19 == (_DWORD)v20)
          {
            v21 = v11[1];
            v22 = v14[10 * v15 + 3];
            v23 = v11[12];
            if (v21 == v22)
            {
              if ((_DWORD)v19 != v23)
                goto LABEL_6;
              v24 = v11[11];
              if (v24 != v11[13])
              {
                if (v21 <= v24)
                  goto LABEL_6;
                goto LABEL_7;
              }
            }
            else
            {
              if ((_DWORD)v19 != v23)
                goto LABEL_6;
              v24 = v11[11];
            }
            if (v21 < v24)
              goto LABEL_6;
          }
          else
          {
            v25 = v11[12];
            if ((_DWORD)v19 != (_DWORD)v25)
            {
              v26 = v11[1];
              result = v11[11];
              if ((_DWORD)v26 == (_DWORD)result)
              {
                v27 = v20 - v19;
                v28 = v19 - v25;
                v29 = v14[10 * v15 + 3] - v26;
                v30 = v26 - v11[13];
                if (v27 >= 0)
                  v31 = v27;
                else
                  v31 = -v27;
                if (v29 >= 0)
                  v32 = v29;
                else
                  v32 = -v29;
                if (v28 >= 0)
                  v33 = v28;
                else
                  v33 = -v28;
                if (v30 >= 0)
                  v34 = v30;
                else
                  v34 = -v30;
                v35 = v34 * v31;
                result = v32 * v33;
                v36 = v30 ^ v27;
                v37 = v29 ^ v28;
                v38 = (double)(v35 - result);
                v39 = (double)(result - v35);
                if (v35 < result)
                  v38 = -v39;
                if (v37 < 0)
                  v38 = (double)(v35 + result);
                if (v35 > result)
                  v39 = -(double)(v35 - result);
                if (v37 >= 0)
                  v39 = -(double)(v35 + result);
                if (v36 < 0)
                  v38 = v39;
                if (v38 > 0.0)
                {
LABEL_6:
                  v11 += 10;
                  v10 = v17;
                }
              }
              else if ((int)v26 < (int)result)
              {
                goto LABEL_6;
              }
            }
          }
        }
        else if ((int)v19 < v18)
        {
          goto LABEL_6;
        }
LABEL_7:
        v12 = *(_OWORD *)v11;
        v13 = *((_OWORD *)v11 + 1);
        *((_QWORD *)v14 + 4) = *((_QWORD *)v11 + 4);
        *(_OWORD *)v14 = v12;
        *((_OWORD *)v14 + 1) = v13;
      }
      while (v10 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
      v6 -= 10;
      if (v11 == v6)
      {
        *((_QWORD *)v11 + 4) = v53;
        *(_OWORD *)v11 = v51;
        *((_OWORD *)v11 + 1) = v52;
      }
      else
      {
        v40 = *(_OWORD *)v6;
        v41 = *((_OWORD *)v6 + 1);
        *((_QWORD *)v11 + 4) = *((_QWORD *)v6 + 4);
        *(_OWORD *)v11 = v40;
        *((_OWORD *)v11 + 1) = v41;
        *(_OWORD *)v6 = v51;
        *((_OWORD *)v6 + 1) = v52;
        *((_QWORD *)v6 + 4) = v53;
        v42 = (char *)v11 - (char *)v7 + 40;
        if (v42 >= 41)
        {
          v43 = (v42 / 0x28uLL - 2) >> 1;
          v44 = &v7[10 * v43];
          result = sub_20EECAF64(a3, v44, v11);
          if ((_DWORD)result)
          {
            v45 = *(_OWORD *)v11;
            v46 = *((_OWORD *)v11 + 1);
            v56 = *((_QWORD *)v11 + 4);
            v54 = v45;
            v55 = v46;
            do
            {
              v47 = v44;
              v48 = *(_OWORD *)v44;
              v49 = *((_OWORD *)v44 + 1);
              *((_QWORD *)v11 + 4) = *((_QWORD *)v44 + 4);
              *(_OWORD *)v11 = v48;
              *((_OWORD *)v11 + 1) = v49;
              if (!v43)
                break;
              v43 = (v43 - 1) >> 1;
              v44 = &v7[10 * v43];
              result = sub_20EECAF64(a3, v44, &v54);
              v11 = v47;
            }
            while ((result & 1) != 0);
            v50 = v55;
            *(_OWORD *)v47 = v54;
            *((_OWORD *)v47 + 1) = v50;
            *((_QWORD *)v47 + 4) = v56;
          }
        }
      }
    }
    while (v8-- > 2);
  }
  return result;
}

void sub_20EECC7A4(char **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32) & 0x1FLL;
  v6 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v13 = (char *)operator new(24 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[24 * v9];
    *(_QWORD *)v14 = v3;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = v4;
    v7 = v14 + 24;
    if (v6 != v8)
    {
      do
      {
        v15 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v6 -= 24;
      }
      while (v6 != v8);
      v6 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[24 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = v3;
    *((_QWORD *)v6 + 1) = 0;
    v7 = v6 + 24;
    *((_QWORD *)v6 + 2) = v4;
  }
  a1[1] = v7;
}

uint64_t *sub_20EECC8DC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t **v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  uint64_t *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[48];
  uint64_t v29;
  uint64_t v30;

  v2 = result[1];
  if (v2 + 40 != result[4])
  {
    v4 = result;
    v5 = (uint64_t **)(result + 16);
    v6 = result + 17;
    do
    {
      v9 = *(_OWORD *)(v2 + 16);
      v26 = *(_OWORD *)v2;
      v27 = v9;
      *(_QWORD *)v28 = *(_QWORD *)(v2 + 32);
      v10 = *(_OWORD *)(v2 + 56);
      *(_OWORD *)&v28[8] = *(_OWORD *)(v2 + 40);
      *(_OWORD *)&v28[24] = v10;
      *(_QWORD *)&v28[40] = *(_QWORD *)(v2 + 72);
      v11 = sub_20EECCD70(a2, (int *)v2, (int *)(v2 + 40));
      v22 = *(_OWORD *)v28;
      v23 = *(_OWORD *)&v28[16];
      v24 = *(_OWORD *)&v28[32];
      v20 = v26;
      v21 = v27;
      *(_QWORD *)&v25 = 0;
      *((_QWORD *)&v25 + 1) = v11;
      result = sub_20EECD504(v5, v6, &v30, &v29, (uint64_t)&v20);
      if (!*result)
      {
        v12 = result;
        v13 = operator new(0x80uLL);
        v14 = v23;
        v13[4] = v22;
        v13[5] = v14;
        v15 = v24;
        v16 = v21;
        v13[2] = v20;
        v13[3] = v16;
        v17 = v25;
        v13[6] = v15;
        v13[7] = v17;
        v18 = v30;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = v18;
        *v12 = (uint64_t)v13;
        v19 = (uint64_t *)**v5;
        if (v19)
        {
          *v5 = v19;
          v7 = (uint64_t *)*v12;
        }
        else
        {
          v7 = (uint64_t *)v13;
        }
        result = sub_20E868578((uint64_t *)v4[17], v7);
        ++v4[18];
      }
      v8 = v2 + 80;
      v2 += 40;
    }
    while (v8 != v4[4]);
  }
  return result;
}

_OWORD *sub_20EECCA44(uint64_t a1, uint64_t a2, __int128 *__sz, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  _OWORD *v39;
  uint64_t *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  int8x16_t v48;
  __int128 v49;
  _BYTE v50[48];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  int8x16_t v56;
  __int128 v57;
  _BYTE v58[48];
  uint64_t v59;
  uint64_t v60;

  v9 = *(_OWORD *)(a2 + 16);
  v56 = *(int8x16_t *)a2;
  v57 = v9;
  v10 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)&v58[8] = *(_OWORD *)a4;
  *(_OWORD *)&v58[24] = *(_OWORD *)(a4 + 16);
  v11 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)v58 = v10;
  *(_QWORD *)&v58[40] = v11;
  v13 = *(_QWORD *)a4;
  v12 = *(_QWORD *)(a4 + 8);
  v55 = *(_OWORD *)(a4 + 16);
  v14 = *(_QWORD *)(a4 + 32);
  v15 = __sz[1];
  v52 = *__sz;
  v53 = v15;
  v54 = *((_QWORD *)__sz + 4);
  if (v13 == v12)
  {
    v16 = v13;
    v13 = v12;
  }
  else
  {
    v14 ^= 0x20uLL;
    v16 = v12;
  }
  v17 = sub_20EECCD70(a6, (int *)__sz, (int *)a4);
  v49 = v55;
  *(_OWORD *)&v50[8] = v52;
  v18 = (_QWORD **)(a1 + 128);
  v48.i64[0] = v16;
  v48.i64[1] = v13;
  *(_QWORD *)v50 = v14;
  *(_OWORD *)&v50[24] = v53;
  *(_QWORD *)&v50[40] = v54;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = v19;
  v20 = sub_20EECD504((_QWORD *)(a1 + 128), a5, &v60, &v59, (uint64_t)&v48);
  v21 = (_QWORD *)*v20;
  if (!*v20)
  {
    v22 = v20;
    v21 = operator new(0x80uLL);
    v23 = *(_OWORD *)&v50[16];
    *((_OWORD *)v21 + 4) = *(_OWORD *)v50;
    *((_OWORD *)v21 + 5) = v23;
    v24 = v51;
    *((_OWORD *)v21 + 6) = *(_OWORD *)&v50[32];
    *((_OWORD *)v21 + 7) = v24;
    v25 = v49;
    *((int8x16_t *)v21 + 2) = v48;
    *((_OWORD *)v21 + 3) = v25;
    v26 = v60;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = v26;
    *v22 = (uint64_t)v21;
    v27 = (_QWORD *)**v18;
    v28 = v21;
    if (v27)
    {
      *v18 = v27;
      v28 = (uint64_t *)*v22;
    }
    sub_20E868578(*(uint64_t **)(a1 + 136), v28);
    ++*(_QWORD *)(a1 + 144);
    if (*(_DWORD *)a4 != *(_DWORD *)(a4 + 8))
      goto LABEL_11;
LABEL_10:
    if (*(_DWORD *)(a4 + 4) == *(_DWORD *)(a4 + 12))
      goto LABEL_16;
    goto LABEL_11;
  }
  if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 8))
    goto LABEL_10;
LABEL_11:
  v29 = *(_OWORD *)(a4 + 16);
  v48 = *(int8x16_t *)a4;
  v49 = v29;
  *(_OWORD *)&v50[24] = *(_OWORD *)(a4 + 16);
  *(_QWORD *)v50 = *(_QWORD *)(a4 + 32);
  *(int8x16_t *)&v50[8] = vextq_s8(v48, v48, 8uLL);
  v51 = 0uLL;
  *(_QWORD *)&v50[40] = *(_QWORD *)v50 ^ 0x20;
  v30 = sub_20EECD504((_QWORD *)(a1 + 128), v21, &v60, &v59, (uint64_t)&v48);
  v21 = (_QWORD *)*v30;
  if (!*v30)
  {
    v31 = v30;
    v21 = operator new(0x80uLL);
    v32 = *(_OWORD *)&v50[16];
    *((_OWORD *)v21 + 4) = *(_OWORD *)v50;
    *((_OWORD *)v21 + 5) = v32;
    v33 = v51;
    *((_OWORD *)v21 + 6) = *(_OWORD *)&v50[32];
    *((_OWORD *)v21 + 7) = v33;
    v34 = v49;
    *((int8x16_t *)v21 + 2) = v48;
    *((_OWORD *)v21 + 3) = v34;
    v35 = v60;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = v35;
    *v31 = (uint64_t)v21;
    v36 = (_QWORD *)**v18;
    v37 = v21;
    if (v36)
    {
      *v18 = v36;
      v37 = (uint64_t *)*v31;
    }
    sub_20E868578(*(uint64_t **)(a1 + 136), v37);
    ++*(_QWORD *)(a1 + 144);
  }
  v48.i64[0] = *(_QWORD *)(a4 + 8);
  v48.i64[1] = (uint64_t)v21;
  sub_20EECD36C((char **)(a1 + 40), &v48);
LABEL_16:
  *(_OWORD *)v50 = *(_OWORD *)v58;
  *(_OWORD *)&v50[16] = *(_OWORD *)&v58[16];
  *(_OWORD *)&v50[32] = *(_OWORD *)&v58[32];
  v48 = v56;
  v49 = v57;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = v17;
  v38 = sub_20EECD504((_QWORD *)(a1 + 128), v21, &v60, &v59, (uint64_t)&v48);
  v39 = (_OWORD *)*v38;
  if (!*v38)
  {
    v40 = v38;
    v39 = operator new(0x80uLL);
    v41 = *(_OWORD *)&v50[16];
    v39[4] = *(_OWORD *)v50;
    v39[5] = v41;
    v42 = v51;
    v39[6] = *(_OWORD *)&v50[32];
    v39[7] = v42;
    v43 = v49;
    v39[2] = v48;
    v39[3] = v43;
    v44 = v60;
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = v44;
    *v40 = (uint64_t)v39;
    v45 = (_QWORD *)**v18;
    v46 = (uint64_t *)v39;
    if (v45)
    {
      *v18 = v45;
      v46 = (uint64_t *)*v40;
    }
    sub_20E868578(*(uint64_t **)(a1 + 136), v46);
    ++*(_QWORD *)(a1 + 144);
  }
  return v39;
}

char *sub_20EECCD70(uint64_t a1, int *__sz, int *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;
  int v12;
  int v13;
  _BOOL4 v14;
  int v15;
  int v16;
  int v18;
  _BOOL4 v20;
  unsigned int v21;
  _BOOL4 v24;
  int v25;
  char **v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  _QWORD *v80;
  char *v81;
  char *v82;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;

  v7 = *__sz;
  v6 = __sz[1];
  v8 = __sz[2];
  v9 = __sz[3];
  v11 = *__sz != v8 || v6 != v9;
  v12 = *a3;
  v13 = a3[2];
  if (*a3 == v13)
  {
    v15 = a3[1];
    v16 = a3[3];
    v14 = v15 != v16;
    if (v11 && v15 == v16)
    {
      if (v7 != v12 || v6 != v15)
      {
        v18 = a3[1];
        if (v8 != v12 || v9 != v15)
          goto LABEL_15;
        v21 = 1;
        v18 = __sz[3];
        if (v12 == v13)
          goto LABEL_40;
        goto LABEL_38;
      }
LABEL_39:
      v21 = 1;
      v18 = __sz[1];
      if (v12 == v13)
        goto LABEL_40;
      goto LABEL_38;
    }
  }
  else
  {
    v14 = 1;
  }
  if (!v11 && v14)
  {
    v18 = a3[1];
    if (v12 != v7 || v18 != v6)
    {
      v15 = a3[3];
      if (v13 != v7 || v15 != v6)
        goto LABEL_15;
      v21 = 1;
      if (v12 == v13)
        goto LABEL_40;
LABEL_38:
      v24 = 1;
      goto LABEL_44;
    }
    goto LABEL_39;
  }
  v18 = a3[1];
  v15 = a3[3];
LABEL_15:
  v20 = v12 != v13 || v18 != v15;
  v21 = v11 ^ v20 ^ 1;
  if (v12 != v13)
    goto LABEL_38;
LABEL_40:
  v25 = a3[3];
  v24 = v18 != v25;
  if (v11 && v18 == v25)
  {
    if (v7 != v12 || v6 != v18)
    {
      v84 = v9 == v18 && v8 == v12;
      v27 = (char **)(a1 + 48);
      v28 = v21;
      if (!v84)
        goto LABEL_46;
      goto LABEL_55;
    }
LABEL_54:
    v27 = (char **)(a1 + 48);
    v28 = v21;
    goto LABEL_55;
  }
LABEL_44:
  if (v11 || !v24)
  {
LABEL_45:
    v27 = (char **)(a1 + 48);
    v28 = v21;
LABEL_46:
    v28 |= 2uLL;
    goto LABEL_55;
  }
  if (v12 == v7 && v18 == v6)
    goto LABEL_54;
  if (v13 != v7)
    goto LABEL_45;
  v27 = (char **)(a1 + 48);
  v28 = v21;
  if (a3[3] != v6)
    goto LABEL_46;
LABEL_55:
  v85 = *((_QWORD *)a3 + 2);
  v86 = *((_QWORD *)__sz + 2);
  v30 = v27[1];
  v29 = (unint64_t)v27[2];
  if ((unint64_t)v30 >= v29)
  {
    v32 = *v27;
    v33 = 0xAAAAAAAAAAAAAAABLL * ((v30 - *v27) >> 4);
    v34 = v33 + 1;
    if (v33 + 1 > 0x555555555555555)
      goto LABEL_130;
    v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v32) >> 4);
    if (2 * v35 > v34)
      v34 = 2 * v35;
    if (v35 >= 0x2AAAAAAAAAAAAAALL)
      v36 = 0x555555555555555;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 > 0x555555555555555)
        goto LABEL_129;
      v37 = (char *)operator new(48 * v36);
    }
    else
    {
      v37 = 0;
    }
    v38 = &v37[48 * v33];
    *(_OWORD *)v38 = 0u;
    *((_OWORD *)v38 + 1) = 0u;
    *((_QWORD *)v38 + 4) = 0;
    *((_QWORD *)v38 + 5) = v28;
    v31 = v38 + 48;
    if (v30 != v32)
    {
      do
      {
        v39 = *((_OWORD *)v30 - 3);
        v40 = *((_OWORD *)v30 - 1);
        *((_OWORD *)v38 - 2) = *((_OWORD *)v30 - 2);
        *((_OWORD *)v38 - 1) = v40;
        *((_OWORD *)v38 - 3) = v39;
        v38 -= 48;
        v30 -= 48;
      }
      while (v30 != v32);
      v30 = *v27;
    }
    *v27 = v38;
    v27[1] = v31;
    v27[2] = &v37[48 * v36];
    if (v30)
      operator delete(v30);
  }
  else
  {
    *(_OWORD *)v30 = 0u;
    *((_OWORD *)v30 + 1) = 0u;
    *((_QWORD *)v30 + 4) = 0;
    *((_QWORD *)v30 + 5) = v28;
    v31 = v30 + 48;
  }
  v27[1] = v31;
  v41 = (unint64_t)v27[2];
  if ((unint64_t)v31 < v41)
  {
    *(_OWORD *)v31 = 0u;
    *((_OWORD *)v31 + 1) = 0u;
    *((_QWORD *)v31 + 4) = 0;
    *((_QWORD *)v31 + 5) = v28;
    v42 = v31 + 48;
    v27[1] = v31 + 48;
    v44 = *(_QWORD **)a1;
    v43 = *(_QWORD **)(a1 + 8);
    if (*(_QWORD **)a1 == v43)
    {
LABEL_94:
      v63 = *((_QWORD *)__sz + 3);
      v64 = *((_QWORD *)__sz + 4) & 0x1FLL;
      v65 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v44 >= v65)
      {
        v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (_QWORD)v44) >> 3);
        v67 = 2 * v66;
        if (2 * v66 <= 1)
          v67 = 1;
        if (v66 >= 0x555555555555555)
          v68 = 0xAAAAAAAAAAAAAAALL;
        else
          v68 = v67;
        if (v68 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_129;
        v69 = 3 * v68;
        v70 = operator new(24 * v68);
        *v70 = v63;
        v70[1] = 0;
        v70[2] = v64;
        v43 = v70 + 3;
        *(_QWORD *)a1 = v70;
        *(_QWORD *)(a1 + 8) = v70 + 3;
        *(_QWORD *)(a1 + 16) = &v70[v69];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *v44 = v63;
        v44[1] = 0;
        v43 = v44 + 3;
        v44[2] = v64;
      }
      *(_QWORD *)(a1 + 8) = v43;
      v57 = *((_QWORD *)a3 + 3);
      v58 = *((_QWORD *)a3 + 4) & 0x1FLL;
      v59 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v43 >= v59)
        goto LABEL_105;
LABEL_91:
      *v43 = v57;
      v43[1] = 0;
      v60 = v43 + 3;
      v43[2] = v58;
      v61 = v85;
      v62 = v86;
      goto LABEL_120;
    }
    goto LABEL_90;
  }
  v45 = *v27;
  v46 = 0xAAAAAAAAAAAAAAABLL * ((v31 - *v27) >> 4);
  v47 = v46 + 1;
  if (v46 + 1 > 0x555555555555555)
LABEL_130:
    sub_20E867F44();
  v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (_QWORD)v45) >> 4);
  if (2 * v48 > v47)
    v47 = 2 * v48;
  if (v48 >= 0x2AAAAAAAAAAAAAALL)
    v49 = 0x555555555555555;
  else
    v49 = v47;
  if (v49)
  {
    if (v49 > 0x555555555555555)
      goto LABEL_129;
    v50 = (char *)operator new(48 * v49);
  }
  else
  {
    v50 = 0;
  }
  v51 = &v50[48 * v46];
  *(_OWORD *)v51 = 0u;
  *((_OWORD *)v51 + 1) = 0u;
  v52 = &v50[48 * v49];
  *((_QWORD *)v51 + 4) = 0;
  *((_QWORD *)v51 + 5) = v28;
  v42 = v51 + 48;
  if (v31 == v45)
  {
    *v27 = v51;
    v27[1] = v42;
    v56 = v31;
    v27[2] = v52;
  }
  else
  {
    v53 = v31;
    do
    {
      v54 = *((_OWORD *)v53 - 3);
      v55 = *((_OWORD *)v53 - 1);
      *((_OWORD *)v51 - 2) = *((_OWORD *)v53 - 2);
      *((_OWORD *)v51 - 1) = v55;
      *((_OWORD *)v51 - 3) = v54;
      v51 -= 48;
      v53 -= 48;
    }
    while (v53 != v45);
    v56 = *v27;
    *v27 = v51;
    v27[1] = v42;
    v27[2] = v52;
    if (!v56)
    {
      v27[1] = v42;
      v44 = *(_QWORD **)a1;
      v43 = *(_QWORD **)(a1 + 8);
      if (*(_QWORD **)a1 == v43)
        goto LABEL_94;
      goto LABEL_90;
    }
  }
  operator delete(v56);
  v27[1] = v42;
  v44 = *(_QWORD **)a1;
  v43 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v43)
    goto LABEL_94;
LABEL_90:
  v57 = *((_QWORD *)a3 + 3);
  v58 = *((_QWORD *)a3 + 4) & 0x1FLL;
  v59 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v43 < v59)
    goto LABEL_91;
LABEL_105:
  v71 = *(_QWORD **)a1;
  v72 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v43 - *(_QWORD *)a1) >> 3);
  v73 = v72 + 1;
  if (v72 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - (_QWORD)v71) >> 3);
  if (2 * v74 > v73)
    v73 = 2 * v74;
  if (v74 >= 0x555555555555555)
    v75 = 0xAAAAAAAAAAAAAAALL;
  else
    v75 = v73;
  if (!v75)
  {
    v76 = 0;
    goto LABEL_115;
  }
  if (v75 > 0xAAAAAAAAAAAAAAALL)
LABEL_129:
    sub_20E877A38();
  v76 = (char *)operator new(24 * v75);
LABEL_115:
  v77 = &v76[24 * v72];
  v78 = &v76[24 * v75];
  *(_QWORD *)v77 = v57;
  *((_QWORD *)v77 + 1) = 0;
  *((_QWORD *)v77 + 2) = v58;
  v60 = v77 + 24;
  if (v43 == v71)
  {
    v61 = v85;
    v62 = v86;
    *(_QWORD *)a1 = v77;
    *(_QWORD *)(a1 + 8) = v60;
    *(_QWORD *)(a1 + 16) = v78;
    if (!v43)
      goto LABEL_120;
    goto LABEL_119;
  }
  v62 = v86;
  do
  {
    v79 = *(_OWORD *)(v43 - 3);
    *((_QWORD *)v77 - 1) = *(v43 - 1);
    *(_OWORD *)(v77 - 24) = v79;
    v77 -= 24;
    v43 -= 3;
  }
  while (v43 != v71);
  v43 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v77;
  *(_QWORD *)(a1 + 8) = v60;
  *(_QWORD *)(a1 + 16) = v78;
  v61 = v85;
  if (v43)
LABEL_119:
    operator delete(v43);
LABEL_120:
  *(_QWORD *)(a1 + 8) = v60;
  v80 = *(_QWORD **)a1;
  *((_QWORD *)v31 - 6) = *(_QWORD *)a1 + 24 * v62;
  v81 = v31 - 48;
  *((_QWORD *)v42 - 6) = &v80[3 * v61];
  v82 = v42 - 48;
  *((_QWORD *)v81 + 2) = v82;
  *((_QWORD *)v82 + 2) = v81;
  return v81;
}

void sub_20EECD36C(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  int v19;
  char *v20;
  _BOOL4 v21;
  BOOL v22;
  _BOOL4 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  BOOL v28;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_20E867F44();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_20E877A38();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  a1[1] = v6;
  v14 = *a1;
  v15 = v6 - *a1;
  if (v15 >= 17)
  {
    v16 = (((unint64_t)v15 >> 4) - 2) >> 1;
    v17 = &v14[16 * v16];
    v18 = *((_DWORD *)v6 - 4);
    v19 = *((_DWORD *)v6 - 3);
    v20 = v6 - 16;
    v21 = v19 < *((_DWORD *)v17 + 1);
    v22 = v18 == *(_DWORD *)v17;
    v23 = v18 < *(_DWORD *)v17;
    if (v22)
      v23 = v21;
    if (v23)
    {
      v24 = *(_OWORD *)v20;
      v25 = *(_QWORD *)v20;
      v26 = HIDWORD(*(_QWORD *)v20);
      do
      {
        v27 = v20;
        v20 = v17;
        *(_QWORD *)v27 = *(_QWORD *)v17;
        *((_QWORD *)v27 + 1) = *((_QWORD *)v17 + 1);
        if (!v16)
          break;
        v16 = (v16 - 1) >> 1;
        v17 = &v14[16 * v16];
        v28 = *(_DWORD *)v17 > (int)v25;
        if (*(_DWORD *)v17 == (_DWORD)v25)
          v28 = *((_DWORD *)v17 + 1) > (int)v26;
      }
      while (v28);
      *(_OWORD *)v20 = v24;
    }
  }
}

uint64_t *sub_20EECD504(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || (v11 = (uint64_t)(a1 + 3), sub_20EECD738((uint64_t)(a1 + 3), a5, (uint64_t)(a2 + 4))))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v13 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v13;
        return v13 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v12 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v13 = v12;
        v12 = (_QWORD *)v12[1];
      }
      while (v12);
    }
    else
    {
      v17 = a2;
      do
      {
        v13 = (_QWORD *)v17[2];
        v18 = *v13 == (_QWORD)v17;
        v17 = v13;
      }
      while (v18);
    }
    if (sub_20EECD738((uint64_t)(a1 + 3), (uint64_t)(v13 + 4), a5))
      goto LABEL_16;
    v19 = (_QWORD *)*v9;
    if (*v9)
    {
      do
      {
        while (1)
        {
          v20 = v19;
          v21 = (uint64_t)(v19 + 4);
          if (!sub_20EECD738((uint64_t)(a1 + 3), a5, (uint64_t)(v19 + 4)))
            break;
          v19 = (_QWORD *)*v20;
          v9 = v20;
          if (!*v20)
            goto LABEL_41;
        }
        if (!sub_20EECD738((uint64_t)(a1 + 3), v21, a5))
          break;
        v9 = v20 + 1;
        v19 = (_QWORD *)v20[1];
      }
      while (v19);
      goto LABEL_41;
    }
LABEL_19:
    v20 = v9;
LABEL_41:
    *a3 = v20;
    return v9;
  }
  if (!sub_20EECD738((uint64_t)(a1 + 3), (uint64_t)(a2 + 4), a5))
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  a4 = a2 + 1;
  v14 = a2[1];
  if (v14)
  {
    v15 = (_QWORD *)a2[1];
    do
    {
      v16 = v15;
      v15 = (_QWORD *)*v15;
    }
    while (v15);
  }
  else
  {
    v22 = a2;
    do
    {
      v16 = (_QWORD *)v22[2];
      v18 = *v16 == (_QWORD)v22;
      v22 = v16;
    }
    while (!v18);
  }
  if (v16 != v9)
  {
    if (!sub_20EECD738(v11, a5, (uint64_t)(v16 + 4)))
    {
      v23 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          while (1)
          {
            v20 = v23;
            v24 = (uint64_t)(v23 + 4);
            if (!sub_20EECD738(v11, a5, (uint64_t)(v23 + 4)))
              break;
            v23 = (_QWORD *)*v20;
            v9 = v20;
            if (!*v20)
              goto LABEL_41;
          }
          if (!sub_20EECD738(v11, v24, a5))
            break;
          v9 = v20 + 1;
          v23 = (_QWORD *)v20[1];
        }
        while (v23);
        goto LABEL_41;
      }
      goto LABEL_19;
    }
    v14 = *a4;
  }
  if (v14)
  {
    *a3 = v16;
    return v16;
  }
  else
  {
    *a3 = a2;
  }
  return a4;
}

uint64_t sub_20EECD738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _BOOL4 v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  int *v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  _BOOL4 v38;
  _BOOL4 v39;
  unint64_t v40;
  BOOL v41;
  int v43;
  BOOL v44;
  int *v45;
  int v46;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 56);
  if (v3 <= v4)
    v5 = 40;
  else
    v5 = 0;
  if (v3 <= v4)
    v6 = a2 + 40;
  else
    v6 = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 56);
  if (v7 <= v8)
    v9 = 40;
  else
    v9 = 0;
  if (v7 <= v8)
    v10 = a3 + 40;
  else
    v10 = a3;
  v11 = *(_DWORD *)(a2 + v5);
  v12 = *(_DWORD *)(v6 + 8);
  v13 = *(_DWORD *)(v6 + 4);
  v14 = *(_DWORD *)(v6 + 12);
  v15 = v13 < v14;
  if (v11 != v12)
    v15 = v11 < v12;
  if (v15)
    v16 = v11;
  else
    v16 = *(_DWORD *)(v6 + 8);
  if (v15)
    v17 = (int *)v6;
  else
    v17 = (int *)(v6 + 8);
  v18 = *(_DWORD *)(v10 + 8);
  v19 = *(_DWORD *)(a3 + v9);
  v20 = *(_DWORD *)(v10 + 4);
  v21 = *(_DWORD *)(v10 + 12);
  v22 = v20 < v21;
  if (v19 != v18)
    v22 = v19 < v18;
  if (v22)
    v23 = v19;
  else
    v23 = *(_DWORD *)(v10 + 8);
  if (v16 < v23)
  {
    if (v22)
      v24 = (int *)v10;
    else
      v24 = (int *)(v10 + 8);
    return sub_20EECDA60(a1 + 1, (int *)a2, (int *)(a2 + 40), v24);
  }
  if (v16 > v23)
    return sub_20EECDA60(a1 + 1, (int *)a3, (int *)(a3 + 40), v17) ^ 1;
  v26 = *(_QWORD *)(v6 + 16);
  v27 = *(_QWORD *)(v10 + 16);
  if (v26 == v27)
  {
    if (v3 == v4)
    {
      LODWORD(v28) = *(_DWORD *)(a2 + 4);
      LODWORD(v29) = 0;
      v30 = v7 > v8;
      if (v7 == v8)
      {
LABEL_36:
        v31 = *(unsigned int *)(a3 + 4);
LABEL_63:
        v38 = (int)v29 < SHIDWORD(v31);
        v41 = (_DWORD)v28 == (_DWORD)v31;
        v39 = (int)v28 < (int)v31;
        if (v41)
          return v38;
        else
          return v39;
      }
    }
    else if (v3 <= v4)
    {
      v28 = *(unsigned int *)(a2 + 44) | 0xFFFFFFFF00000000;
      v29 = HIDWORD(v28);
      v30 = v7 > v8;
      if (v7 == v8)
        goto LABEL_36;
    }
    else
    {
      v28 = *(unsigned int *)(a2 + 12) | 0x100000000;
      v29 = HIDWORD(v28);
      v30 = v7 > v8;
      if (v7 == v8)
        goto LABEL_36;
    }
    if (v30)
      v31 = *(unsigned int *)(a3 + 12) | 0x100000000;
    else
      v31 = *(unsigned int *)(a3 + 44) | 0xFFFFFFFF00000000;
    goto LABEL_63;
  }
  if (v26 >= v27)
  {
    if (v3 == v4)
    {
      v33 = *(_DWORD *)(a2 + 4);
      v34 = v7 > v8;
      if (v7 != v8)
        goto LABEL_45;
    }
    else
    {
      v37 = (int *)(a2 + 44);
      if (v3 > v4)
        v37 = (int *)(a2 + 12);
      v33 = *v37;
      v34 = v7 > v8;
      if (v7 != v8)
      {
LABEL_45:
        if (!v34)
        {
          v40 = *(unsigned int *)(a3 + 44) | 0xFFFFFFFF00000000;
          goto LABEL_69;
        }
        if (*(_DWORD *)a3 == *(_DWORD *)(a3 + 8))
        {
          v35 = *(unsigned int *)(a3 + 4);
          if ((_DWORD)v35 != *(_DWORD *)(a3 + 12))
            goto LABEL_68;
        }
        else
        {
          LODWORD(v35) = *(_DWORD *)(a3 + 12);
        }
        v35 = v35;
LABEL_68:
        v40 = v35 | 0x100000000;
LABEL_69:
        if (v33 != (_DWORD)v40)
          return v33 < (int)v40;
        v41 = v19 == v18 && v20 == v21;
        return !v41 || SHIDWORD(v40) > 0;
      }
    }
    v40 = *(unsigned int *)(a3 + 4);
    goto LABEL_69;
  }
  if (v3 != v4)
  {
    if (v3 <= v4)
    {
      v32 = *(unsigned int *)(a2 + 44) | 0xFFFFFFFF00000000;
      goto LABEL_83;
    }
    if (*(_DWORD *)a2 == *(_DWORD *)(a2 + 8))
    {
      v36 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v36 != *(_DWORD *)(a2 + 12))
        goto LABEL_82;
    }
    else
    {
      LODWORD(v36) = *(_DWORD *)(a2 + 12);
    }
    v36 = v36;
LABEL_82:
    v32 = v36 | 0x100000000;
    goto LABEL_83;
  }
  v32 = *(unsigned int *)(a2 + 4);
LABEL_83:
  if (v7 == v8)
  {
    v43 = *(_DWORD *)(a3 + 4);
    v44 = v43 <= (int)v32;
    if (v43 != (_DWORD)v32)
      return !v44;
  }
  else
  {
    v45 = (int *)(a3 + 44);
    if (v7 > v8)
      v45 = (int *)(a3 + 12);
    v46 = *v45;
    v44 = v46 <= (int)v32;
    if (v46 != (_DWORD)v32)
      return !v44;
  }
  return v11 == v12 && v13 == v14 && v32 < 0;
}

uint64_t sub_20EECDA60(uint64_t a1, int *a2, int *a3, int *a4)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v14;
  int64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;

  v8 = *a2;
  if (*a2 != a2[2] || (v9 = a2[1], (_DWORD)v9 != a2[3]))
  {
    if (*a3 != a3[2] || a3[1] != a3[3])
      return sub_20EECDD28(a1, a2, (uint64_t)a3, a4);
    v14 = sub_20EECDE44(a1, a3, a2, a4, 1);
    if (!v14)
    {
      v15.i64[0] = (int)*(_QWORD *)a3;
      v15.i64[1] = (int)HIDWORD(*(_QWORD *)a3);
      v16 = vcvtq_f64_s64(v15);
      v15.i64[0] = (int)*(_QWORD *)a4;
      v15.i64[1] = (int)HIDWORD(*(_QWORD *)a4);
      v17 = vsubq_f64(v16, vcvtq_f64_s64(v15));
      v18.f64[1] = v17.f64[1];
      v18.f64[0] = 2.0;
      v19 = vmulq_f64(v17, v17);
      v20 = vmulq_f64(v17, v18);
      return vdivq_f64(vaddq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1)), v20).f64[0] >= sub_20EECE06C(a1, a2, a4);
    }
    return v14 == -1;
  }
  v10 = *a3;
  if (*a3 != a3[2] || (v11 = a3[1], (_DWORD)v11 != a3[3]))
  {
    v14 = sub_20EECDE44(a1, a2, a3, a4, 0);
    if (!v14)
    {
      v21.i64[0] = (int)*(_QWORD *)a2;
      v21.i64[1] = (int)HIDWORD(*(_QWORD *)a2);
      v22 = vcvtq_f64_s64(v21);
      v21.i64[0] = (int)*(_QWORD *)a4;
      v21.i64[1] = (int)HIDWORD(*(_QWORD *)a4);
      v23 = vsubq_f64(v22, vcvtq_f64_s64(v21));
      v24.f64[1] = v23.f64[1];
      v24.f64[0] = 2.0;
      v25 = vmulq_f64(v23, v23);
      v26 = vmulq_f64(v23, v24);
      return vdivq_f64(vaddq_f64(v25, (float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1)), v26).f64[0] < sub_20EECE06C(a1, a3, a4);
    }
    return v14 == -1;
  }
  if (v8 > v10)
  {
    v12 = a4[1];
    if (v12 <= (int)v9)
      return 0;
LABEL_19:
    v27 = *a4;
    return (((double)(int)v9 - (double)v12) * ((double)(int)v9 - (double)v12)
          + ((double)v8 - (double)v27) * ((double)v8 - (double)v27))
         / ((double)v8 - (double)v27 + (double)v8 - (double)v27) < (((double)(int)v11 - (double)v12)
                                                                  * ((double)(int)v11 - (double)v12)
                                                                  + ((double)v10 - (double)v27)
                                                                  * ((double)v10 - (double)v27))
                                                                 / ((double)v10 - (double)v27 + (double)v10
                                                                                              - (double)v27);
  }
  if (v8 >= v10)
    return v11 + v9 < 2 * a4[1];
  v12 = a4[1];
  if (v12 < (int)v11)
    goto LABEL_19;
  return 1;
}

BOOL sub_20EECDD28(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  double v24;

  if (*((_QWORD *)a2 + 2) == *(_QWORD *)(a3 + 16))
  {
    v5 = a2[2];
    v6 = a2[3];
    v7 = *a2 - v5;
    v8 = v5 - *a4;
    v9 = a2[1] - v6;
    v10 = v6 - a4[1];
    if (v7 >= 0)
      v11 = v7;
    else
      v11 = -v7;
    if (v9 >= 0)
      v12 = v9;
    else
      v12 = -v9;
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = -v8;
    if (v10 >= 0)
      v14 = v10;
    else
      v14 = -v10;
    v15 = v14 * v11;
    v16 = v12 * v13;
    v17 = v10 ^ v7;
    v18 = (double)(v15 - v16);
    v19 = v9 ^ v8;
    v20 = (double)(v16 - v15);
    if (v15 < v16)
      v18 = -v20;
    if (v19 < 0)
      v18 = (double)(v15 + v16);
    if (v15 > v16)
      v20 = -(double)(v15 - v16);
    if (v19 >= 0)
      v20 = -(double)(v15 + v16);
    if (v17 < 0)
      v18 = v20;
    return v18 > 0.0;
  }
  else
  {
    v24 = sub_20EECE06C(a1, a2, a4);
    return v24 < sub_20EECE06C(a1, (int *)a3, a4);
  }
}

uint64_t sub_20EECDE44(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  int v48;
  unsigned int v49;

  v5 = *a3;
  v6 = a3[1];
  v8 = a3[2];
  v7 = a3[3];
  v10 = *a4;
  v9 = a4[1];
  v11 = v8 - v10;
  v12 = v6 - v7;
  v13 = v7 - v9;
  if (v5 - v8 >= 0)
    v14 = v5 - v8;
  else
    v14 = v8 - v5;
  if (v12 >= 0)
    v15 = v6 - v7;
  else
    v15 = v7 - v6;
  if (v11 >= 0)
    v16 = v8 - v10;
  else
    v16 = v10 - v8;
  if (v13 >= 0)
    v17 = v7 - v9;
  else
    v17 = v9 - v7;
  v18 = v17 * v14;
  v19 = v15 * v16;
  v20 = v12 ^ v11;
  if ((v13 ^ (v5 - v8)) < 0)
  {
    if (v20 < 0)
    {
      v22 = v18 > v19;
      v21 = v18 - v19;
      if (!v22)
      {
LABEL_26:
        if ((a3[8] & 0x20) != 0)
          return 1;
        else
          return 0xFFFFFFFFLL;
      }
    }
    else
    {
      v21 = v18 + v19;
    }
  }
  else
  {
    if (v20 < 0 || v18 >= v19)
      goto LABEL_26;
    v21 = v19 - v18;
  }
  if (!v21)
    goto LABEL_26;
  v23 = a2[1];
  if ((_DWORD)v5 == (_DWORD)v8)
  {
    if ((int)v9 >= (int)v23 || a5)
    {
      if ((int)v9 > (int)v23)
        v38 = a5;
      else
        v38 = 0;
      return (v38 << 31 >> 31);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v25 = *a2;
    v26 = v7 - v6;
    v27 = v10 - v25;
    v28 = v9 - v23;
    if (v8 - v5 >= 0)
      v29 = v8 - v5;
    else
      v29 = v5 - v8;
    if (v26 >= 0)
      v30 = v7 - v6;
    else
      v30 = v6 - v7;
    if (v27 >= 0)
      v31 = v10 - v25;
    else
      v31 = v25 - v10;
    if (v28 >= 0)
      v32 = v9 - v23;
    else
      v32 = v23 - v9;
    v33 = v32 * v29;
    v34 = v31 * v30;
    v35 = v27 ^ v26;
    v36 = (double)(v33 - v34);
    v37 = (double)(v34 - v33);
    if (v33 < v34)
      v36 = -v37;
    if (v35 < 0)
      v36 = (double)(v33 + v34);
    if (v33 > v34)
      v37 = -(double)(v33 - v34);
    if (v35 >= 0)
      v37 = -(double)(v33 + v34);
    if ((v28 ^ (v8 - v5)) < 0)
      v36 = v37;
    if (v36 <= 0.0)
    {
      v39 = (double)(int)v10 - (double)(int)v25;
      v40 = (double)(int)v9 - (double)(int)v23;
      v41 = (v40 - v39) * (((double)(int)v8 - (double)(int)v5) * (v39 + v40));
      v42 = ((double)(int)v7 - (double)(int)v6 + (double)(int)v7 - (double)(int)v6) * v39 * v40;
      v43 = v41;
      v44 = v42;
      if (v41 >= 0.0)
        *(_QWORD *)&v43 = 0x8000000000000000 - *(_QWORD *)&v41;
      if (v42 >= 0.0)
        *(_QWORD *)&v44 = 0x8000000000000000 - *(_QWORD *)&v42;
      if (*(_QWORD *)&v43 - *(_QWORD *)&v44 <= 4uLL)
        v45 = 0;
      else
        v45 = -1;
      if (*(_QWORD *)&v43 > *(_QWORD *)&v44)
        v46 = v45;
      else
        v46 = *(_QWORD *)&v44 - *(_QWORD *)&v43 > 4uLL;
      v47 = v46;
      v48 = v46 ^ a5;
      if (a5)
        v49 = -1;
      else
        v49 = 1;
      if ((v47 & v48) != 0)
        return v49;
      else
        return 0;
    }
    else if ((a3[8] & 0x20) != 0)
    {
      return a5 ^ 1u;
    }
    else
    {
      return (a5 << 31 >> 31);
    }
  }
}

double sub_20EECE06C(uint64_t a1, int *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;

  v3 = *a2;
  v4 = a2[2];
  if ((_DWORD)v3 == (_DWORD)v4)
    return ((double)(int)v3 - (double)*a3) * 0.5;
  v6 = a2[3];
  v7 = a2[1];
  v8 = (double)(int)v6 - (double)(int)v7;
  v9 = ((double)(int)v4 - (double)(int)v3) * ((double)(int)v4 - (double)(int)v3);
  v10 = sqrt(v9 + v8 * v8);
  v11 = v8 < 0.0;
  v12 = (v10 - v8) / v9;
  v13 = 1.0 / (v8 + v10);
  if (!v11)
    v12 = v13;
  v14 = v4 - v3;
  v15 = v6 - v7;
  v16 = *a3 - v3;
  v17 = a3[1] - v7;
  if (v14 >= 0)
    v18 = v14;
  else
    v18 = -v14;
  if (v15 >= 0)
    v19 = v15;
  else
    v19 = -v15;
  if (v16 >= 0)
    v20 = v16;
  else
    v20 = -v16;
  if (v17 >= 0)
    v21 = v17;
  else
    v21 = -v17;
  v22 = v21 * v18;
  v23 = v20 * v19;
  v24 = v17 ^ v14;
  v25 = v16 ^ v15;
  v26 = (double)(v22 - v23);
  v27 = (double)(v23 - v22);
  if (v22 < v23)
    v26 = -v27;
  if (v25 < 0)
    v26 = (double)(v22 + v23);
  if (v22 > v23)
    v27 = -(double)(v22 - v23);
  if (v25 >= 0)
    v27 = -(double)(v22 + v23);
  if (v24 < 0)
    v26 = v27;
  return v12 * v26;
}

_QWORD *sub_20EECE180(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _BOOL4 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;

  v2 = a2 - (_QWORD)result;
  if (a2 - (uint64_t)result >= 17)
  {
    v3 = 0;
    v4 = v2 >> 4;
    v5 = *result;
    v6 = result[1];
    v7 = (unint64_t)((v2 >> 4) - 2) >> 1;
    v8 = result;
    do
    {
      v9 = (uint64_t)&v8[2 * v3 + 2];
      v10 = (2 * v3) | 1;
      v11 = 2 * v3 + 2;
      if (v11 < v4)
      {
        v12 = *(_DWORD *)(v9 + 16);
        v13 = v12 == *(_DWORD *)v9;
        v14 = v12 < *(_DWORD *)v9;
        if (v13)
          v14 = *(_DWORD *)(v9 + 20) < *(_DWORD *)(v9 + 4);
        if (v14)
        {
          v9 += 16;
          v10 = v11;
        }
      }
      *v8 = *(_QWORD *)v9;
      v8[1] = *(_QWORD *)(v9 + 8);
      v8 = (_QWORD *)v9;
      v3 = v10;
    }
    while (v10 <= v7);
    if (v9 == a2 - 16)
    {
      *(_QWORD *)v9 = v5;
      *(_QWORD *)(v9 + 8) = v6;
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)(a2 - 16);
      *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 16) = v5;
      *(_QWORD *)(a2 - 8) = v6;
      v15 = v9 - (_QWORD)result + 16;
      if (v15 >= 17)
      {
        v16 = (((unint64_t)v15 >> 4) - 2) >> 1;
        v17 = &result[2 * v16];
        v18 = *(_DWORD *)v9 < *(_DWORD *)v17;
        if (*(_DWORD *)v9 == *(_DWORD *)v17)
          v18 = *(_DWORD *)(v9 + 4) < *((_DWORD *)v17 + 1);
        if (v18)
        {
          v19 = *(_OWORD *)v9;
          v20 = *(_QWORD *)v9;
          v21 = HIDWORD(*(_QWORD *)v9);
          do
          {
            v22 = (_QWORD *)v9;
            v9 = (uint64_t)v17;
            *v22 = *v17;
            v22[1] = v17[1];
            if (!v16)
              break;
            v16 = (v16 - 1) >> 1;
            v17 = &result[2 * v16];
            v23 = *(_DWORD *)v17 > (int)v20;
            if (*(_DWORD *)v17 == (_DWORD)v20)
              v23 = *((_DWORD *)v17 + 1) > (int)v21;
          }
          while (v23);
          *(_OWORD *)v9 = v19;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20EECE2E0(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  int *v6;
  int *v7;
  int *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  double v63;
  unint64_t v64;
  double v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  double v70;
  unint64_t v71;
  double v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  double v77;
  unint64_t v78;
  double v79;
  BOOL v80;

  v6 = a4;
  v7 = a3;
  v8 = a2;
  v10 = *a2;
  if ((_DWORD)v10 != a2[2] || (v11 = a2[1], (_DWORD)v11 != a2[3]))
  {
    v31 = *a3;
    if ((_DWORD)v31 != a3[2] || (v32 = a3[1], (_DWORD)v32 != a3[3]))
    {
      if (*a4 != a4[2] || a4[1] != a4[3])
      {
        v39 = *((_QWORD *)a3 + 2);
        if (*((_QWORD *)a2 + 2) == v39 || v39 == *((_QWORD *)a4 + 2))
          return 0;
        sub_20EED1DA8(a1 + 4, a2, a3, a4, a5);
        if (*v8 != v8[2])
          goto LABEL_82;
        goto LABEL_81;
      }
      if (*((_QWORD *)a2 + 2) == *((_QWORD *)a3 + 2))
        return 0;
      v37 = a1 + 4;
      a2 = a4;
      a3 = v8;
      a4 = v7;
      v38 = 3;
      goto LABEL_80;
    }
    if (*(_QWORD *)a4 == *((_QWORD *)a4 + 1))
    {
      result = sub_20EECF090(a1 + 2, a3, a4, a2, 1);
      if (!(_DWORD)result)
        return result;
      v33 = a1 + 4;
      a2 = v7;
      v34 = v6;
      v35 = v8;
      v36 = 1;
      goto LABEL_53;
    }
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)a4 + 2))
      return 0;
    v42 = *((_QWORD *)a4 + 4);
    if ((a2[8] & 0x20) != 0)
    {
      if ((v42 & 0x20) == 0)
      {
LABEL_79:
        v37 = a1 + 4;
        a2 = a3;
        a3 = v8;
        v38 = 2;
        goto LABEL_80;
      }
    }
    else if ((v42 & 0x20) != 0)
    {
      return 0;
    }
    v43 = v10 - v31;
    v44 = v31 - a4[2];
    v45 = a2[1] - v32;
    v46 = v32 - a4[3];
    if (v10 - v31 >= 0)
      v47 = v10 - v31;
    else
      v47 = v31 - v10;
    if (v45 >= 0)
      v48 = v45;
    else
      v48 = -v45;
    if (v44 >= 0)
      v49 = v44;
    else
      v49 = -v44;
    if (v46 >= 0)
      v50 = v46;
    else
      v50 = -v46;
    v51 = v50 * v47;
    v52 = v48 * v49;
    v53 = v46 ^ v43;
    v54 = v45 ^ v44;
    if (v53 < 0)
    {
      if (v54 < 0)
      {
        v56 = v51 > v52;
        v55 = v51 - v52;
        if (!v56)
          return 0;
      }
      else
      {
        v55 = v51 + v52;
      }
    }
    else
    {
      result = 0;
      if (v54 < 0 || v51 >= v52)
        return result;
      v55 = v52 - v51;
    }
    if (!v55)
      return 0;
    goto LABEL_79;
  }
  v12 = *a3;
  v13 = a3[2];
  if ((_DWORD)v12 != v13 || (v14 = a3[1], (_DWORD)v14 != a3[3]))
  {
    if (*a4 == a4[2])
    {
      v41 = a4[1];
      if (v41 == a4[3])
      {
        if ((_DWORD)v12 == (_DWORD)v10 && v13 == *a4 && a3[1] == (_DWORD)v11 && a3[3] == v41)
          return 0;
        v33 = a1 + 4;
        v34 = a4;
        v35 = v7;
        v36 = 2;
LABEL_53:
        sub_20EECF238(v33, a2, v34, v35, v36, a5);
        if (*v8 != v8[2])
          goto LABEL_82;
        goto LABEL_81;
      }
    }
    if (*((_QWORD *)a3 + 2) == *((_QWORD *)a4 + 2))
      return 0;
    v37 = a1 + 4;
    v38 = 1;
LABEL_80:
    sub_20EED0028(v37, a2, a3, a4, v38, a5);
    if (*v8 != v8[2])
    {
LABEL_82:
      if (*v7 != v7[2])
        goto LABEL_147;
      v58 = v7[1];
      if (v58 == v7[3])
        goto LABEL_147;
      v67 = *((_QWORD *)v7 + 4);
      if ((v67 & 0x20) != 0)
        v68 = v7[3];
      else
        v68 = v7[1];
      v69 = *(_QWORD *)(a5 + 8);
      if (v69 >= 0)
        v69 = 0x8000000000000000 - v69;
      if (v68 >= 0)
        *(_QWORD *)&v70 = 0x8000000000000000 - COERCE__INT64((double)v68);
      else
        v70 = (double)v68;
      v80 = (unint64_t)v69 >= *(_QWORD *)&v70;
      v71 = v69 - *(_QWORD *)&v70;
      if (v71 == 0 || !v80 || v71 <= 0x40)
      {
        if ((v67 & 0x20) == 0)
          v58 = v7[3];
        if (v58 >= 0)
          *(_QWORD *)&v72 = 0x8000000000000000 - COERCE__INT64((double)v58);
        else
          v72 = (double)v58;
        v80 = *(_QWORD *)&v72 >= (unint64_t)v69;
        v73 = *(_QWORD *)&v72 - v69;
        if (!v80 || v73 <= 0x40)
        {
LABEL_147:
          if (*v6 != v6[2])
            return 1;
          v59 = v6[1];
          if (v59 == v6[3])
            return 1;
          v74 = *((_QWORD *)v6 + 4);
          if ((v74 & 0x20) != 0)
            v75 = v6[3];
          else
            v75 = v6[1];
          v76 = *(_QWORD *)(a5 + 8);
          if (v76 >= 0)
            v76 = 0x8000000000000000 - v76;
          if (v75 >= 0)
            *(_QWORD *)&v77 = 0x8000000000000000 - COERCE__INT64((double)v75);
          else
            v77 = (double)v75;
          v80 = (unint64_t)v76 >= *(_QWORD *)&v77;
          v78 = v76 - *(_QWORD *)&v77;
          if (v78 == 0 || !v80 || v78 <= 0x40)
          {
            if ((v74 & 0x20) == 0)
              v59 = v6[3];
            if (v59 >= 0)
              *(_QWORD *)&v79 = 0x8000000000000000 - COERCE__INT64((double)v59);
            else
              v79 = (double)v59;
            v80 = (unint64_t)(*(_QWORD *)&v79 - v76) > 0x40 && *(_QWORD *)&v79 >= (unint64_t)v76;
            if (!v80)
              return 1;
          }
        }
      }
      return 0;
    }
LABEL_81:
    v57 = v8[1];
    if (v57 != v8[3])
    {
      v60 = *((_QWORD *)v8 + 4);
      if ((v60 & 0x20) != 0)
        v61 = v8[3];
      else
        v61 = v8[1];
      v62 = *(_QWORD *)(a5 + 8);
      if (v62 >= 0)
        v62 = 0x8000000000000000 - v62;
      if (v61 >= 0)
        *(_QWORD *)&v63 = 0x8000000000000000 - COERCE__INT64((double)v61);
      else
        v63 = (double)v61;
      v80 = (unint64_t)v62 >= *(_QWORD *)&v63;
      v64 = v62 - *(_QWORD *)&v63;
      if (v64 != 0 && v80 && v64 > 0x40)
        return 0;
      if ((v60 & 0x20) == 0)
        v57 = v8[3];
      if (v57 >= 0)
        *(_QWORD *)&v65 = 0x8000000000000000 - COERCE__INT64((double)v57);
      else
        v65 = (double)v57;
      v80 = *(_QWORD *)&v65 >= (unint64_t)v62;
      v66 = *(_QWORD *)&v65 - v62;
      if (v80 && v66 > 0x40)
        return 0;
    }
    goto LABEL_82;
  }
  v15 = *a4;
  if ((_DWORD)v15 != a4[2] || (v16 = a4[1], (_DWORD)v16 != a4[3]))
  {
    result = sub_20EECF090(a1 + 2, a2, a3, a4, 3);
    if (!(_DWORD)result)
      return result;
    v33 = a1 + 4;
    a2 = v8;
    v34 = v7;
    v35 = v6;
    v36 = 3;
    goto LABEL_53;
  }
  v18 = v10 - v12;
  v17 = v10 - v12 < 0;
  v19 = v12 - v15;
  v20 = v11 - v14;
  v21 = v14 - v16;
  if (v17)
    v22 = -v18;
  else
    v22 = v18;
  if (v20 >= 0)
    v23 = v20;
  else
    v23 = -v20;
  if (v19 >= 0)
    v24 = v19;
  else
    v24 = -v19;
  if (v21 >= 0)
    v25 = v21;
  else
    v25 = -v21;
  v26 = v25 * v22;
  v27 = v24 * v23;
  v28 = v19 ^ v20;
  if ((v21 ^ v18) < 0)
  {
    if (v28 < 0)
    {
      v56 = v26 > v27;
      v30 = v26 - v27;
      if (!v56)
        return 0;
    }
    else
    {
      v30 = v26 + v27;
    }
LABEL_152:
    if (!v30)
      return 0;
    sub_20EECE87C(a1 + 4, a2, a3, a4, a5);
    if (*v8 != v8[2])
      goto LABEL_82;
    goto LABEL_81;
  }
  result = 0;
  if ((v28 & 0x8000000000000000) == 0 && v26 < v27)
  {
    v30 = v27 - v26;
    goto LABEL_152;
  }
  return result;
}

void sub_20EECE87C(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  BOOL v50;
  double v51;
  double v52;
  double v53;
  BOOL v54;
  double v55;
  double v56;
  BOOL v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  BOOL v63;
  double v64;
  double v65;
  BOOL v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  BOOL v82;
  double v83;
  BOOL v84;
  double v85;
  double v86;
  BOOL v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  BOOL v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  _BOOL4 v101;
  _BOOL4 v102;
  double v103;
  BOOL v104;
  _BOOL4 v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  _BOOL4 v112;
  double v113;
  double v114;

  v5 = *a2;
  v6 = a2[1];
  v7 = (double)(int)v5;
  v8 = *a3;
  v9 = a3[1];
  v10 = (double)(int)v8;
  v11 = (double)(int)v5 - (double)(int)v8;
  v12 = *a4;
  v13 = a4[1];
  v14 = (double)(int)v12;
  v15 = (double)(int)v8 - (double)(int)v12;
  v16 = (double)(int)v6;
  v17 = (double)(int)v9;
  v18 = (double)(int)v6 - (double)(int)v9;
  v19 = (double)(int)v13;
  v20 = (double)(int)v9 - (double)(int)v13;
  v21 = v5 - v8;
  v22 = v8 - v12;
  v23 = v6 - v9;
  v24 = v9 - v13;
  if (v21 >= 0)
    v25 = v21;
  else
    v25 = -v21;
  if (v22 >= 0)
    v26 = v22;
  else
    v26 = -v22;
  if (v23 >= 0)
    v27 = v23;
  else
    v27 = -v23;
  if (v24 >= 0)
    v28 = v24;
  else
    v28 = -v24;
  v29 = v28 * v25;
  v30 = v27 * v26;
  v31 = v24 ^ v21;
  v32 = v23 ^ v22;
  v33 = (double)(v29 - v30);
  v34 = (double)(v30 - v29);
  if (v29 < v30)
    v33 = -v34;
  if (v32 < 0)
    v33 = (double)(v29 + v30);
  if (v29 > v30)
    v34 = -(double)(v29 - v30);
  if (v32 >= 0)
    v34 = -(double)(v29 + v30);
  if (v31 < 0)
    v33 = v34;
  v35 = v10 + v14;
  v36 = v16 + v17;
  v37 = v11 * (v7 + v10);
  v38 = v37 * v20;
  if (v37 * v20 >= 0.0)
  {
    v40 = 0.0;
    v39 = v38 + 0.0;
    v44 = v18 * v36;
    v45 = v18 * v36 * v20;
    v46 = 3.0;
    if (v45 >= 0.0)
    {
      v47 = v45 + v39;
      v43 = 0.0;
      if (v39 < 0.0 && (v45 > 0.0 || v39 > 0.0))
      {
        v58 = (v39 * 3.0 - (v45 + v45)) / v47;
        if (v58 < 0.0)
          v58 = -v58;
LABEL_47:
        v46 = v58 + 1.0;
        v48 = v40;
        v39 = v47;
        v51 = v17 + v19;
        v52 = v15 * v35;
        v53 = v52 * v18;
        v54 = v52 * v18 <= 0.0;
        if (v52 * v18 < 0.0)
          goto LABEL_48;
        goto LABEL_38;
      }
LABEL_45:
      v58 = 2.0;
      if (v46 >= 2.0)
        v58 = v46;
      goto LABEL_47;
    }
    v43 = 0.0;
  }
  else
  {
    v39 = 0.0;
    v40 = 0.0 - v38;
    v41 = 2.0;
    if (v38 > 0.0)
    {
      v42 = (v38 + v38 + 0.0) / v40;
      v41 = -v42;
      if (v42 >= 0.0)
        v41 = v42;
    }
    v43 = v41 + 1.0;
    v44 = v18 * v36;
    v45 = v18 * v36 * v20;
    v46 = 0.0;
    if (v45 >= 0.0)
    {
      v47 = v45 + 0.0;
      goto LABEL_45;
    }
  }
  v48 = v40 - v45;
  if (v45 > 0.0 || v40 < 0.0)
  {
    v43 = (v45 + v45 + v40 * v43) / v48;
    v49 = -v43;
    v50 = v43 < 0.0;
  }
  else
  {
    v49 = 2.0;
    v50 = v43 < 2.0;
  }
  if (v50)
    v43 = v49;
  v43 = v43 + 1.0;
  v51 = v17 + v19;
  v52 = v15 * v35;
  v53 = v52 * v18;
  v54 = v52 * v18 <= 0.0;
  if (v52 * v18 < 0.0)
  {
LABEL_48:
    v59 = v39 - v53;
    if (v54 && v39 >= 0.0)
    {
      v60 = 2.0;
      if (v46 >= 2.0)
        v60 = v46;
    }
    else
    {
      v60 = (v53 + v53 + v46 * v39) / v59;
      if (v60 < 0.0)
        v60 = -v60;
    }
    v46 = v60 + 1.0;
    v55 = v48;
    v39 = v59;
    v61 = v20 * v51;
    v62 = v18 * (v20 * v51);
    v63 = v62 <= 0.0;
    if (v62 >= 0.0)
      goto LABEL_57;
    goto LABEL_65;
  }
LABEL_38:
  v55 = v53 + v48;
  if (v48 < 0.0 && (v53 > 0.0 || v48 > 0.0))
  {
    v43 = (v43 * v48 - (v53 + v53)) / v55;
    v56 = -v43;
    v57 = v43 < 0.0;
  }
  else
  {
    v56 = 2.0;
    v57 = v43 < 2.0;
  }
  if (v57)
    v43 = v56;
  v43 = v43 + 1.0;
  v61 = v20 * v51;
  v62 = v18 * (v20 * v51);
  v63 = v62 <= 0.0;
  if (v62 >= 0.0)
  {
LABEL_57:
    v64 = v62 + v55;
    if (v55 < 0.0 && (v62 > 0.0 || v55 > 0.0))
    {
      v43 = (v43 * v55 - (v62 + v62)) / v64;
      v65 = -v43;
      v66 = v43 < 0.0;
    }
    else
    {
      v65 = 2.0;
      v66 = v43 < 2.0;
    }
    if (v66)
      v43 = v65;
    v43 = v43 + 1.0;
    v69 = v11 * v52;
    if (v69 < 0.0)
      goto LABEL_86;
LABEL_74:
    v70 = 0.0;
    v71 = v69 + 0.0;
    v72 = v11 * v61;
    v73 = 3.0;
    if (v72 < 0.0)
    {
      v74 = 0.0;
      goto LABEL_90;
    }
    v75 = v71 + v72;
    v74 = 0.0;
    if (v71 < 0.0 && (v71 > 0.0 || v72 > 0.0))
    {
      v76 = (v71 * 3.0 - (v72 + v72)) / v75;
      v77 = -v76;
      if (v76 >= 0.0)
        v77 = v76;
      v74 = 0.0;
LABEL_104:
      v73 = v77 + 1.0;
      v80 = v70;
      v71 = v75;
      v83 = v37 * v15;
      v84 = v37 * v15 <= 0.0;
      if (v37 * v15 >= 0.0)
        goto LABEL_97;
LABEL_105:
      if (v84 && v71 >= 0.0)
      {
        v88 = 2.0;
        if (v73 >= 2.0)
          v88 = v73;
      }
      else
      {
        v88 = (v83 + v83 + v73 * v71) / (v71 - v83);
        if (v88 < 0.0)
          v88 = -v88;
      }
      v73 = v88 + 1.0;
      v85 = v80;
      v71 = v71 - v83;
      v89 = 0.5;
      v90 = v7 - v14;
      v91 = v16 - v19;
      v92 = v15 * v44;
      v93 = v15 * v44 <= 0.0;
      if (v15 * v44 < 0.0)
        goto LABEL_124;
      goto LABEL_114;
    }
LABEL_102:
    v77 = 2.0;
    if (v73 >= 2.0)
      v77 = v73;
    goto LABEL_104;
  }
LABEL_65:
  v67 = v39 - v62;
  if (v63 && v39 >= 0.0)
  {
    v68 = 2.0;
    if (v46 >= 2.0)
      v68 = v46;
  }
  else
  {
    v68 = (v62 + v62 + v46 * v39) / v67;
    if (v68 < 0.0)
      v68 = -v68;
  }
  v46 = v68 + 1.0;
  v64 = v55;
  v39 = v67;
  v69 = v11 * v52;
  if (v69 >= 0.0)
    goto LABEL_74;
LABEL_86:
  v71 = 0.0;
  v70 = 0.0 - v69;
  v78 = 2.0;
  if (v69 > 0.0)
  {
    v79 = (v69 + v69 + 0.0) / v70;
    v78 = -v79;
    if (v79 >= 0.0)
      v78 = v79;
  }
  v74 = v78 + 1.0;
  v72 = v11 * v61;
  v73 = 0.0;
  if (v72 >= 0.0)
  {
    v75 = v72 + 0.0;
    goto LABEL_102;
  }
LABEL_90:
  v80 = v70 - v72;
  if (v72 > 0.0 || v70 < 0.0)
  {
    v74 = (v72 + v72 + v70 * v74) / v80;
    v81 = -v74;
    v82 = v74 < 0.0;
  }
  else
  {
    v81 = 2.0;
    v82 = v74 < 2.0;
  }
  if (v82)
    v74 = v81;
  v74 = v74 + 1.0;
  v83 = v37 * v15;
  v84 = v37 * v15 <= 0.0;
  if (v37 * v15 < 0.0)
    goto LABEL_105;
LABEL_97:
  v85 = v83 + v80;
  if (v80 < 0.0 && (v83 > 0.0 || v80 > 0.0))
  {
    v74 = (v74 * v80 - (v83 + v83)) / v85;
    v86 = -v74;
    v87 = v74 < 0.0;
  }
  else
  {
    v86 = 2.0;
    v87 = v74 < 2.0;
  }
  if (v87)
    v74 = v86;
  v74 = v74 + 1.0;
  v89 = 0.5;
  v90 = v7 - v14;
  v91 = v16 - v19;
  v92 = v15 * v44;
  v93 = v15 * v44 <= 0.0;
  if (v15 * v44 < 0.0)
  {
LABEL_124:
    if (v93 && v71 >= 0.0)
    {
      v96 = 2.0;
      if (v73 >= 2.0)
        v96 = v73;
    }
    else
    {
      v96 = (v92 + v92 + v73 * v71) / (v71 - v92);
      if (v96 < 0.0)
        v96 = -v96;
    }
    v73 = v96 + 1.0;
    v94 = v85;
    v71 = v71 - v92;
    goto LABEL_136;
  }
LABEL_114:
  v94 = v92 + v85;
  if (v85 < 0.0 && (v92 > 0.0 || v85 > 0.0))
  {
    v95 = (v74 * v85 - (v92 + v92)) / v94;
    if (v95 < 0.0)
      v95 = -v95;
  }
  else
  {
    v95 = 2.0;
    if (v74 >= 2.0)
      v95 = v74;
  }
  v74 = v95 + 1.0;
LABEL_136:
  v97 = v89 / v33;
  v98 = sqrt((v90 * v90 + v91 * v91) * ((v11 * v11 + v18 * v18) * (v15 * v15 + v20 * v20)));
  v99 = v98 + v64;
  if (v64 < 0.0 && (v98 > 0.0 || v64 > 0.0))
  {
    v100 = (v43 * v64 + v98 * -5.0) / v99;
    if (v100 < 0.0)
      v100 = -v100;
  }
  else
  {
    v100 = 5.0;
    if (v43 >= 5.0)
      v100 = v43;
  }
  v101 = v39 < 0.0;
  v102 = v64 > 0.0 || v39 < 0.0;
  v103 = v71 - v94;
  v104 = v39 > 0.0 || v64 < 0.0;
  v105 = v71 < 0.0;
  if (v94 > 0.0)
    v105 = 1;
  v106 = v39 - v99;
  if (v99 > 0.0)
    v101 = 1;
  *(double *)a5 = v97 * (v39 - v64);
  *(double *)(a5 + 8) = v97 * v103;
  *(double *)(a5 + 16) = v97 * v106;
  *(_BYTE *)(a5 + 24) = 1;
  if (v102 && v104)
  {
    v107 = (v43 * v64 + v46 * v39) / (v39 - v64);
    if (v107 < 0.0)
      v107 = -v107;
    v108 = 1.0;
    v109 = 1.0;
    if (!v105)
      goto LABEL_166;
  }
  else
  {
    if (v46 >= v43)
      v107 = v46;
    else
      v107 = v43;
    v108 = 1.0;
    v109 = 1.0;
    if (!v105)
      goto LABEL_166;
  }
  if (v71 <= 0.0 && v94 >= 0.0)
  {
LABEL_166:
    if (v73 >= v74)
      v110 = v73;
    else
      v110 = v74;
    goto LABEL_169;
  }
  v110 = (v74 * v94 + v73 * v71) / v103;
  if (v110 < 0.0)
    v110 = -v110;
LABEL_169:
  v111 = v100 + v108;
  v112 = v39 > 0.0;
  if (v99 < 0.0)
    v112 = 1;
  if (v101 && v112)
  {
    v113 = (v46 * v39 + v99 * v111) / v106;
    if (v113 < 0.0)
      v113 = -v113;
  }
  else if (v46 >= v111)
  {
    v113 = v46;
  }
  else
  {
    v113 = v111;
  }
  v114 = v113 + 1.0;
  if (v107 + v109 > 64.0 || v110 + 1.0 > 64.0 || v114 > 64.0)
    sub_20EED30F4();
}

uint64_t sub_20EECF090(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;

  if (a5 == 2)
  {
    if (*a4 == *a2 && a4[1] == a2[1] && a4[2] == *a3)
      return a4[3] != a3[1];
    return 1;
  }
  v6 = *a2;
  v7 = *a3;
  v8 = a3[1];
  v9 = v6 - v7;
  v10 = v7 - *a4;
  v11 = a2[1] - v8;
  v12 = v8 - a4[1];
  if (v6 - v7 >= 0)
    v13 = v6 - v7;
  else
    v13 = v7 - v6;
  if (v11 >= 0)
    v14 = a2[1] - v8;
  else
    v14 = v8 - a2[1];
  if (v10 >= 0)
    v15 = v7 - *a4;
  else
    v15 = *a4 - v7;
  if (v12 >= 0)
    v16 = v8 - a4[1];
  else
    v16 = a4[1] - v8;
  v17 = v16 * v13;
  v18 = v14 * v15;
  v19 = v12 ^ v9;
  v20 = v11 ^ v10;
  v21 = (double)(v17 - v18);
  v22 = (double)(v18 - v17);
  if (v17 < v18)
    v21 = -v22;
  if (v20 < 0)
    v21 = (double)(v17 + v18);
  if (v17 > v18)
    v22 = -(double)(v17 - v18);
  if (v20 >= 0)
    v22 = -(double)(v17 + v18);
  if (v19 < 0)
    v21 = v22;
  v23 = v7 - a4[2];
  v24 = v8 - a4[3];
  if (v23 >= 0)
    v25 = v7 - a4[2];
  else
    v25 = a4[2] - v7;
  if (v24 >= 0)
    v26 = v24;
  else
    v26 = -v24;
  v27 = v26 * v13;
  v28 = v25 * v14;
  v29 = v24 ^ v9;
  v30 = v23 ^ v11;
  v31 = (double)(v27 - v28);
  v32 = (double)(v28 - v27);
  if (v27 < v28)
    v31 = -v32;
  if (v30 < 0)
    v31 = (double)(v27 + v28);
  if (v27 > v28)
    v32 = -(double)(v27 - v28);
  if (v30 >= 0)
    v32 = -(double)(v27 + v28);
  if (v29 < 0)
    v31 = v32;
  if (a5 != 3)
  {
    if (a5 == 1 && (int)v6 >= (int)v7)
      return v21 < 0.0;
    goto LABEL_50;
  }
  if ((int)v7 < (int)v6)
  {
LABEL_50:
    if (v21 < 0.0)
      return 1;
  }
  return v31 < 0.0;
}

void sub_20EECF238(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  BOOL v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  BOOL v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  BOOL v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  BOOL v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  BOOL v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  BOOL v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  _BOOL4 v196;
  _BOOL4 v197;
  BOOL v198;
  BOOL v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;

  v6 = *a4;
  v7 = a4[1];
  v8 = a4[2];
  v9 = a4[3];
  v11 = *a2;
  v10 = a2[1];
  v12 = *a3;
  v13 = a3[1];
  v14 = v9 - v7;
  v15 = v6 - v8;
  v16 = v12 - v11;
  v17 = v13 - v10;
  if (v9 - v7 >= 0)
    v18 = v9 - v7;
  else
    v18 = v7 - v9;
  if (v15 >= 0)
    v19 = v6 - v8;
  else
    v19 = v8 - v6;
  if (v16 >= 0)
    v20 = v12 - v11;
  else
    v20 = v11 - v12;
  if (v17 >= 0)
    v21 = v13 - v10;
  else
    v21 = v10 - v13;
  v22 = v21 * v18;
  v23 = v20 * v19;
  v24 = v16 ^ v15;
  if ((v17 ^ v14) < 0)
  {
    v25 = -(double)(v23 + v22);
    v26 = (double)(v23 - v22);
    v79 = v22 > v23;
    v27 = v22 - v23;
    if (v79)
      v26 = -(double)v27;
    if (v24 < 0)
      v25 = v26;
  }
  else if (v24 < 0)
  {
    v25 = (double)(v23 + v22);
  }
  else if (v22 >= v23)
  {
    v25 = (double)(v22 - v23);
  }
  else
  {
    v25 = -(double)(v23 - v22);
  }
  v28 = v7 - v9;
  v29 = v9 - v10;
  v30 = v8 - v11;
  if (v7 - v9 >= 0)
    v31 = v7 - v9;
  else
    v31 = v9 - v7;
  if (v29 >= 0)
    v32 = v9 - v10;
  else
    v32 = v10 - v9;
  if (v30 >= 0)
    v33 = v8 - v11;
  else
    v33 = v11 - v8;
  v34 = v33 * v31;
  v35 = v32 * v19;
  v36 = v29 ^ v15;
  if ((v30 ^ v28) < 0)
  {
    v37 = -(double)(v34 + v35);
    v38 = (double)(v35 - v34);
    v79 = v34 > v35;
    v39 = v34 - v35;
    if (v79)
      v38 = -(double)v39;
    if (v36 < 0)
      v37 = v38;
  }
  else if (v36 < 0)
  {
    v37 = (double)(v34 + v35);
  }
  else if (v34 >= v35)
  {
    v37 = (double)(v34 - v35);
  }
  else
  {
    v37 = -(double)(v35 - v34);
  }
  v40 = v8 - v12;
  if (v9 - v13 >= 0)
    v41 = v9 - v13;
  else
    v41 = v13 - v9;
  if (v40 >= 0)
    v42 = v8 - v12;
  else
    v42 = v12 - v8;
  v43 = v42 * v31;
  v44 = v41 * v19;
  v45 = (v9 - v13) ^ v15;
  if ((v40 ^ v28) < 0)
  {
    if ((v45 & 0x8000000000000000) == 0)
    {
      v47 = v43 + v44;
      goto LABEL_60;
    }
    v47 = v43 - v44;
    if (v43 > v44)
      goto LABEL_60;
    v46 = v44 - v43;
  }
  else if (v45 < 0)
  {
    v46 = v43 + v44;
  }
  else
  {
    v46 = v43 - v44;
    if (v43 < v44)
    {
      v47 = v44 - v43;
LABEL_60:
      v48 = -(double)v47;
      goto LABEL_63;
    }
  }
  v48 = (double)v46;
LABEL_63:
  v49 = v11 - v12;
  v50 = v8 - v6;
  if (v10 - v13 >= 0)
    v51 = v10 - v13;
  else
    v51 = v13 - v10;
  if (v49 >= 0)
    v52 = v11 - v12;
  else
    v52 = v12 - v11;
  if (v50 >= 0)
    v53 = v8 - v6;
  else
    v53 = v6 - v8;
  v54 = v51 * v53;
  v55 = v52 * v18;
  v56 = v49 ^ v14;
  if (((v10 - v13) ^ v50) < 0)
  {
    if (v56 < 0)
    {
      v58 = v54 - v55;
      if (v54 <= v55)
      {
        v57 = v55 - v54;
        goto LABEL_120;
      }
    }
    else
    {
      v58 = v55 + v54;
    }
LABEL_80:
    v59 = -(double)v58;
    v60 = (double)(int)v13;
    v61 = (double)(int)v10;
    v62 = (double)(int)v11;
    v63 = (double)(int)v12;
    if (v59 != 0.0)
      goto LABEL_81;
LABEL_121:
    v80 = v25 / (v37 * 8.0);
    if (v80 >= 0.0)
    {
      v69 = 0.0;
      v81 = v80 + 0.0;
      v84 = v37 / (v25 + v25);
      v75 = 5.0;
      v65 = 0.0;
      if (v84 < 0.0)
      {
LABEL_128:
        v76 = v81 - v84;
        if (v84 <= 0.0 && v81 >= 0.0)
        {
          v85 = 4.0;
          v86 = v75 < 4.0;
          goto LABEL_146;
        }
        v97 = v84 * 4.0 + v81 * v75;
LABEL_145:
        v75 = v97 / v76;
        v85 = -v75;
        v86 = v75 < 0.0;
LABEL_146:
        if (v86)
          v75 = v85;
LABEL_148:
        v68 = v75 + 1.0;
        v77 = v60 - v61;
        v78 = (v62 + v63) * 0.5;
        v79 = v78 <= 0.0;
        if (v78 < 0.0)
          goto LABEL_149;
        goto LABEL_141;
      }
      v87 = v84 + 0.0;
      v68 = 5.0;
    }
    else
    {
      v81 = 0.0;
      v69 = 0.0 - v80;
      v82 = 4.0;
      if (v80 > 0.0)
      {
        v83 = (v80 * 4.0 + 0.0) / v69;
        v82 = -v83;
        if (v83 >= 0.0)
          v82 = v83;
      }
      v65 = v82 + 1.0;
      v84 = v37 / (v25 + v25);
      if (v84 < 0.0)
      {
        v75 = 0.0;
        goto LABEL_128;
      }
      v87 = v84 + v69;
      v68 = 0.0;
      if (v69 < 0.0 && (v84 > 0.0 || v69 > 0.0))
      {
        v88 = (v69 * v65 + v84 * -4.0) / v87;
        if (v88 < 0.0)
          v88 = -v88;
        goto LABEL_140;
      }
    }
    v88 = 4.0;
    if (v65 >= 4.0)
      v88 = v65;
LABEL_140:
    v65 = v88 + 1.0;
    v69 = v87;
    v76 = v81;
    v77 = v60 - v61;
    v78 = (v62 + v63) * 0.5;
    v79 = v78 <= 0.0;
    if (v78 < 0.0)
      goto LABEL_149;
    goto LABEL_141;
  }
  if (v56 < 0)
  {
    v57 = v55 + v54;
  }
  else
  {
    v57 = v54 - v55;
    if (v54 < v55)
    {
      v58 = v55 - v54;
      goto LABEL_80;
    }
  }
LABEL_120:
  v59 = (double)v57;
  v60 = (double)(int)v13;
  v61 = (double)(int)v10;
  v62 = (double)(int)v11;
  v63 = (double)(int)v12;
  if ((double)v57 == 0.0)
    goto LABEL_121;
LABEL_81:
  v64 = sqrt(v48 * (v37 * (v25 * v25 + v59 * v59))) / (v59 * v59);
  if ((_DWORD)a5 == 2)
  {
    if (v64 < 0.0)
    {
      v65 = 0.0;
      v66 = 0.0 - v64;
      v67 = 9.0;
      if (v64 > 0.0)
      {
        v67 = (v64 * 9.0 + 0.0) / v66;
        if (v67 < 0.0)
          v67 = -v67;
      }
      v68 = v67 + 1.0;
      v69 = 0.0;
      v70 = v37 + v48;
      v71 = 1.0;
      if (v37 < 0.0)
        goto LABEL_98;
LABEL_97:
      if (v48 >= 0.0)
        goto LABEL_103;
      goto LABEL_98;
    }
    v68 = 0.0;
    v69 = v64 + 0.0;
    v65 = 10.0;
    v66 = 0.0;
    v70 = v37 + v48;
    v71 = 1.0;
    if (v37 >= 0.0)
      goto LABEL_97;
  }
  else
  {
    if (v64 < 0.0)
    {
      v68 = 0.0;
      v69 = 0.0 - v64;
      v72 = 9.0;
      if (v64 > 0.0)
      {
        v72 = (v64 * 9.0 + 0.0) / v69;
        if (v72 < 0.0)
          v72 = -v72;
      }
      v65 = v72 + 1.0;
      v66 = 0.0;
      v70 = v37 + v48;
      v71 = 1.0;
      if (v37 < 0.0)
        goto LABEL_98;
      goto LABEL_97;
    }
    v65 = 0.0;
    v66 = v64 + 0.0;
    v68 = 10.0;
    v69 = 0.0;
    v70 = v37 + v48;
    v71 = 1.0;
    if (v37 >= 0.0)
      goto LABEL_97;
  }
LABEL_98:
  if (v37 > 0.0 || v48 > 0.0)
  {
    v73 = (v37 - v48) / v70;
    if (v73 < 0.0)
      v71 = -v73;
    else
      v71 = v73;
  }
LABEL_103:
  v74 = v25 * v70 / (v59 * (v59 + v59));
  v75 = v71 + 1.0 + 1.0 + 1.0 + 4.0 + 1.0;
  if (v74 >= 0.0)
  {
    v76 = v74 + v66;
    if (v66 >= 0.0 || v74 <= 0.0 && v66 <= 0.0)
    {
      if (v68 >= v75)
        v75 = v68;
      goto LABEL_148;
    }
    v97 = v68 * v66 - v74 * v75;
    goto LABEL_145;
  }
  if (v74 > 0.0 || v69 < 0.0)
  {
    v75 = (v65 * v69 + v74 * v75) / (v69 - v74);
    if (v75 < 0.0)
      v75 = -v75;
  }
  else if (v65 >= v75)
  {
    v75 = v65;
  }
  v65 = v75 + 1.0;
  v69 = v69 - v74;
  v76 = v66;
  v77 = v60 - v61;
  v78 = (v62 + v63) * 0.5;
  v79 = v78 <= 0.0;
  if (v78 < 0.0)
  {
LABEL_149:
    v91 = 0.0;
    v92 = 0.0 - v78;
    v98 = 0.0;
    if (!v79)
    {
      v99 = (v78 * 0.0 + 0.0) / v92;
      v98 = -v99;
      if (v99 >= 0.0)
        v98 = v99;
    }
    v89 = v98 + 1.0;
    v90 = 0.0;
    if (v77 < 0.0)
      goto LABEL_153;
LABEL_142:
    v93 = v77 * v76;
    v94 = v77 * v69;
    v95 = v68;
    v96 = v65;
    goto LABEL_154;
  }
LABEL_141:
  v89 = 0.0;
  v90 = v78 + 0.0;
  v91 = 1.0;
  v92 = 0.0;
  if (v77 >= 0.0)
    goto LABEL_142;
LABEL_153:
  v93 = -(v77 * v69);
  v94 = -(v77 * v76);
  v95 = v65;
  v96 = v68;
LABEL_154:
  v100 = v96 + 0.0;
  v101 = v95 + 0.0 + 1.0;
  v102 = v90 + v93;
  if ((v90 < 0.0 || v93 < 0.0) && (v90 > 0.0 || v93 > 0.0))
  {
    v106 = (v91 * v90 - v93 * v101) / v102;
    v103 = -v106;
    if (v106 >= 0.0)
      v103 = v106;
    v104 = v100 + 1.0;
    v105 = v92 + v94;
    if (v92 < 0.0)
      goto LABEL_167;
  }
  else
  {
    if (v91 >= v101)
      v103 = v91;
    else
      v103 = v101;
    v104 = v100 + 1.0;
    v105 = v92 + v94;
    if (v92 < 0.0)
      goto LABEL_167;
  }
  if (v94 >= 0.0)
  {
LABEL_169:
    if (v89 >= v104)
      v107 = v89;
    else
      v107 = v104;
    goto LABEL_174;
  }
LABEL_167:
  if (v92 <= 0.0 && v94 <= 0.0)
    goto LABEL_169;
  v107 = (v89 * v92 - v94 * v104) / v105;
  if (v107 < 0.0)
    v107 = -v107;
LABEL_174:
  v108 = v62 - v63;
  v109 = (v60 + v61) * 0.5;
  if (v109 >= 0.0)
  {
    v114 = 0.0;
    v115 = v109 + 0.0;
    v111 = 0.0;
    v110 = 1.0;
    if (v108 >= 0.0)
    {
LABEL_179:
      v116 = v108 * v76;
      v117 = v108 * v69;
      v118 = v68;
      goto LABEL_182;
    }
  }
  else
  {
    v110 = 0.0;
    v111 = 0.0 - v109;
    v112 = 0.0;
    if (v109 > 0.0)
    {
      v113 = (v109 * 0.0 + 0.0) / v111;
      v112 = -v113;
      if (v113 >= 0.0)
        v112 = v113;
    }
    v114 = v112 + 1.0;
    v115 = 0.0;
    if (v108 >= 0.0)
      goto LABEL_179;
  }
  v116 = -(v108 * v69);
  v117 = -(v108 * v76);
  v118 = v65;
  v65 = v68;
LABEL_182:
  v119 = (double)(int)v7;
  v120 = v65 + 0.0;
  v121 = v118 + 0.0 + 1.0;
  v122 = v115 + v116;
  if ((v115 < 0.0 || v116 < 0.0) && (v115 > 0.0 || v116 > 0.0))
  {
    v110 = (v110 * v115 - v116 * v121) / v122;
    v121 = -v110;
    v123 = v110 < 0.0;
  }
  else
  {
    v123 = v110 < v121;
  }
  if (!v123)
    v121 = v110;
  v124 = (double)(int)v6;
  v125 = (double)(int)v9 - v119;
  v126 = v120 + 1.0;
  v127 = v111 + v117;
  if ((v111 < 0.0 || v117 < 0.0) && (v111 > 0.0 || v117 > 0.0))
  {
    v129 = (v114 * v111 - v117 * v126) / v127;
    if (v129 >= 0.0)
      v128 = v129;
    else
      v128 = -v129;
  }
  else if (v114 >= v126)
  {
    v128 = v114;
  }
  else
  {
    v128 = v126;
  }
  v130 = v124 - (double)(int)v8;
  v131 = v103 + 1.0;
  v132 = v107 + 1.0;
  v133 = v125 * v124;
  v134 = v125 * v124 <= 0.0;
  if (v125 * v124 >= 0.0)
  {
    v136 = 0.0;
    v135 = v133 + 0.0;
    v140 = v130 * v119;
    v141 = 2.0;
    if (v140 >= 0.0)
    {
      v142 = v135 + v140;
      v139 = 0.0;
      if (v135 < 0.0 && (v135 > 0.0 || v140 > 0.0))
      {
        v146 = (v135 + v135 - v140) / v142;
        if (v146 < 0.0)
          v146 = -v146;
        v139 = 0.0;
        goto LABEL_216;
      }
LABEL_214:
      v146 = 1.0;
      if (v141 >= 1.0)
        v146 = v141;
LABEL_216:
      v141 = v146 + 1.0;
      v135 = v142;
      v143 = v136;
      goto LABEL_221;
    }
    v139 = 0.0;
  }
  else
  {
    v135 = 0.0;
    v136 = 0.0 - v133;
    v137 = 1.0;
    if (!v134)
    {
      v138 = (v133 + 0.0) / v136;
      v137 = -v138;
      if (v138 >= 0.0)
        v137 = v138;
    }
    v139 = v137 + 1.0;
    v140 = v130 * v119;
    v141 = 0.0;
    if (v140 >= 0.0)
    {
      v142 = v140 + 0.0;
      goto LABEL_214;
    }
  }
  v143 = v136 - v140;
  if (v140 > 0.0 || v136 < 0.0)
  {
    v139 = (v140 + v136 * v139) / v143;
    v144 = -v139;
    v145 = v139 < 0.0;
  }
  else
  {
    v144 = 1.0;
    v145 = v139 < 1.0;
  }
  if (v145)
    v139 = v144;
  v139 = v139 + 1.0;
LABEL_221:
  v147 = -(v125 * v102);
  if (v125 >= 0.0)
    v148 = v125 * v102;
  else
    v148 = -(v125 * v105);
  if (v125 >= 0.0)
    v149 = v103 + 1.0;
  else
    v149 = v132;
  if (v125 < 0.0)
  {
    v150 = v103 + 1.0;
  }
  else
  {
    v147 = v125 * v105;
    v150 = v132;
  }
  v151 = v149 + 1.0;
  v152 = v143 + v148;
  if ((v143 < 0.0 || v148 < 0.0) && (v143 > 0.0 || v148 > 0.0))
  {
    v154 = (v139 * v143 - v148 * v151) / v152;
    v153 = -v154;
    if (v154 >= 0.0)
      v153 = v154;
  }
  else if (v139 >= v151)
  {
    v153 = v139;
  }
  else
  {
    v153 = v151;
  }
  v155 = v125 * v125;
  v156 = v121 + 1.0;
  v157 = v128 + 1.0;
  v158 = v150 + 1.0;
  v159 = v135 + v147;
  if ((v135 < 0.0 || v147 < 0.0) && (v135 > 0.0 || v147 > 0.0))
  {
    v160 = (v141 * v135 - v147 * v158) / v159;
    if (v160 < 0.0)
      v160 = -v160;
  }
  else if (v141 >= v158)
  {
    v160 = v141;
  }
  else
  {
    v160 = v150 + 1.0;
  }
  v161 = v155 + v130 * v130;
  v162 = v153 + 1.0;
  v163 = v130 < 0.0;
  v164 = -(v130 * v127);
  v165 = -(v130 * v122);
  v166 = v130 * v122;
  v167 = v130 * v127;
  if (v163)
  {
    v166 = v164;
    v168 = v157;
  }
  else
  {
    v168 = v156;
  }
  if (v163)
    v169 = v165;
  else
    v169 = v167;
  if (v163)
    v170 = v156;
  else
    v170 = v157;
  v171 = v168 + 1.0;
  v172 = v152 + v166;
  if ((v152 < 0.0 || v166 < 0.0) && (v152 > 0.0 || v166 > 0.0))
  {
    v173 = (v152 * v162 - v166 * v171) / v172;
    if (v173 < 0.0)
      v173 = -v173;
  }
  else if (v162 >= v171)
  {
    v173 = v162;
  }
  else
  {
    v173 = v171;
  }
  v174 = v160 + 1.0;
  v175 = v170 + 1.0;
  v176 = v159 + v169;
  v177 = sqrt(v161);
  if ((v159 < 0.0 || v169 < 0.0) && (v159 > 0.0 || v169 > 0.0))
  {
    v185 = (v159 * v174 - v169 * v175) / v176;
    v186 = -v185;
    if (v185 >= 0.0)
      v186 = v185;
    v179 = v173 + 1.0;
    v180 = 1.0;
    v181 = v186 + 1.0;
    v182 = 1.0 / v177;
    if (v172 < v176)
      goto LABEL_274;
  }
  else
  {
    if (v174 >= v175)
      v178 = v174;
    else
      v178 = v175;
    v179 = v173 + 1.0;
    v180 = 1.0;
    v181 = v178 + 1.0;
    v182 = 1.0 / v177;
    if (v172 < v176)
    {
LABEL_274:
      v183 = v179;
      v184 = v172;
      goto LABEL_279;
    }
  }
  v183 = v181;
  v184 = v176;
  v181 = v179;
  v176 = v172;
LABEL_279:
  v187 = v181 + 3.0;
  v188 = v183 + 3.0;
  v189 = v182 * v184;
  v190 = v187 + v180;
  v191 = v182 * v176;
  v192 = v102 + v191;
  if ((v102 < 0.0 || v191 < 0.0) && (v102 > 0.0 || v191 > 0.0))
  {
    v193 = (v102 * v131 - v191 * v190) / v192;
    if (v193 < 0.0)
      v193 = -v193;
    v194 = v188 + v180;
    v195 = v105 + v189;
    if (v105 < 0.0)
      goto LABEL_292;
  }
  else
  {
    if (v131 >= v190)
      v193 = v131;
    else
      v193 = v187 + v180;
    v194 = v188 + v180;
    v195 = v105 + v189;
    if (v105 < 0.0)
      goto LABEL_292;
  }
  if (v189 >= 0.0)
    goto LABEL_294;
LABEL_292:
  if (v105 <= 0.0 && v189 <= 0.0)
  {
LABEL_294:
    if (v132 >= v194)
      v194 = v132;
    goto LABEL_299;
  }
  v194 = (v105 * v132 - v189 * v194) / v195;
  if (v194 < 0.0)
    v194 = -v194;
LABEL_299:
  v196 = v127 > 0.0 || v122 < 0.0;
  v197 = v192 < 0.0;
  if (v195 > 0.0)
    v197 = 1;
  v198 = v102 > 0.0;
  if (v105 < 0.0)
    v198 = 1;
  v199 = v105 > 0.0 || v102 < 0.0;
  *(double *)a6 = v102 - v105;
  *(double *)(a6 + 8) = v122 - v127;
  *(double *)(a6 + 16) = v192 - v195;
  *(_BYTE *)(a6 + 24) = 1;
  if (v199 && v198)
  {
    v200 = (v102 * v131 + v105 * v132) / (v102 - v105);
    if (v200 < 0.0)
      v200 = -v200;
    v201 = 1.0;
    v202 = 1.0;
    v203 = 1.0;
    if (!v196)
      goto LABEL_322;
  }
  else
  {
    if (v131 >= v132)
      v200 = v131;
    else
      v200 = v132;
    v201 = 1.0;
    v202 = 1.0;
    v203 = 1.0;
    if (!v196)
      goto LABEL_322;
  }
  if (v122 <= 0.0 && v127 >= 0.0)
  {
LABEL_322:
    if (v156 >= v157)
      v204 = v156;
    else
      v204 = v157;
    goto LABEL_325;
  }
  v204 = (v122 * v156 + v127 * v157) / (v122 - v127);
  if (v204 < 0.0)
    v204 = -v204;
LABEL_325:
  v205 = v193 + v201;
  v206 = v194 + v202;
  v207 = v200 + v203;
  if (v197 && (v192 > 0.0 || v195 < 0.0))
  {
    v205 = (v192 * v205 + v195 * v206) / (v192 - v195);
    if (v205 < 0.0)
      v205 = -v205;
  }
  else if (v205 < v206)
  {
    v205 = v194 + v202;
  }
  v208 = v204 + 1.0;
  v209 = v205 + 1.0;
  if (v207 > 64.0 || v208 > 64.0 || v209 > 64.0)
    sub_20EED50C8(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, v207 > 64.0, v208 > 64.0, v209 > 64.0);
}

