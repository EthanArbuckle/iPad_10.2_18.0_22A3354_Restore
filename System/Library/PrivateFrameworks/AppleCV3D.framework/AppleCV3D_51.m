void sub_20FEBD8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEBD8F4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FE68140((uint64_t)v25, a2, (int *)(v3 + 200));
}

void sub_20FEBDD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEBDD68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD v13[5];
  unsigned __int8 **v14;
  _QWORD v15[5];
  unsigned __int8 **v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = (unsigned __int8 **)&v23;
  if (sub_20FF1D2E8((uint64_t)&v17, v15, v13))
  {
    if (*((_BYTE *)v16 + 24) && *((_BYTE *)v14 + 24))
    {
      v8 = *v16;
      v9 = v16[1];
      v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_20FF1C59C(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v11 = sub_21009C500((uint64_t *)(a1 + 200), (uint64_t *)(a2 + 200));
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v16 + 24) != 0) == (*((_BYTE *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20EB0580C((uint64_t)v18);
  sub_20EB0580C((uint64_t)v24);
  return v11;
}

void sub_20FEBDF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEBDF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEBDF80(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FEBE38C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FEBE62C(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FEBE8AC(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FEBEB4C(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FEBED64(&v9, (uint64_t)a1);
          else
            sub_20FEBE0E4(&v8, a1);
        }
      }
    }
  }
}

void sub_20FEBE0E4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE13A54((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20FE13A54((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE133CC((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20FE133CC((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FDEB904((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20FDEB904((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (uint64_t *)(v3 + 200);
  v13 = a2[2];
  v14 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20FE7689C(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE7689C(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FEBE38C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20FE726CC((uint64_t)&v16, a2, v3 + 200);
}

void sub_20FEBE62C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE1036C(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE10250(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FDE75BC(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 2u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  sub_20FE72B2C(a2, (uint64_t *)(v3 + 200));
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FEBE8AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20FE7446C((uint64_t)&v16, a2, v3 + 200);
}

_QWORD *sub_20FEBEB4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20E86A980(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FE748CC(a2, (uint64_t *)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20E86A980(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FEBED64(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_2100B6A04((_QWORD *)a2);
  sub_20FE75890(a2, (uint64_t *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20FEBEF1C(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FEBF5A8(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FEBFA54(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FEBFEC4(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FEC0370(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FEC09B4(&v9, a1);
          else
            sub_20FEBF080(&v8, (uint64_t *)a1);
        }
      }
    }
  }
}

void sub_20FEBF080(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  char v29;
  uint64_t v30[27];
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v30);
    sub_20FDE470C((uint64_t)&v31, v30);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v29, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v30);
  sub_20FDE470C((uint64_t)&v31, v30);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v29, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20EB0580C((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *a2;
  v30[0] = a2[1];
  v25 = v30[0];
  v31 = 6;
  (*(void (**)(uint64_t *, unsigned int *))(v24 + 104))(a2, &v31);
  if (v25 < 1)
  {
    if (v31 < 3)
      sub_20FDF69C0((uint64_t)&v31, (uint64_t)a2, v4, v31);
    else
      sub_20FDF6C34((uint64_t)a2, v4, v31);
  }
  else
  {
    sub_20FDF63C8((int *)v30, (uint64_t)a2, v4, v31);
  }
  v26 = *a2;
  v30[0] = a2[1];
  v27 = v30[0];
  v31 = 2;
  (*(void (**)(uint64_t *, unsigned int *))(v26 + 104))(a2, &v31);
  v28 = (uint64_t *)(v3 + 200);
  if (v27 < 1)
  {
    if (v31 < 2)
      sub_20FE81428((uint64_t)&v31, a2, v28);
    else
      sub_20FE81310(a2, v3 + 200);
  }
  else
  {
    sub_20FE80E34((int *)v30, a2, v28, v31);
  }
}

void sub_20FEBF560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEBF5A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v28);
    sub_20FDE470C((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v28);
  sub_20FDE470C((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20EB0580C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  return sub_20FE779D8(a2, (uint64_t *)(v3 + 200));
}

void sub_20FEBFA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FEBFA54(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v26);
    sub_20FDE470C((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v26);
  sub_20FDE470C((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20EB0580C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v26, a2, v4);
  return sub_20FE784F0(a2, (uint64_t *)(v3 + 200));
}

void sub_20FEBFE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEBFEC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v28);
    sub_20FDE470C((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v28);
  sub_20FDE470C((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20EB0580C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  return sub_20FE7B3BC(a2, (uint64_t *)(v3 + 200));
}

void sub_20FEC0328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEC0370(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  void *__p;
  uint64_t v34;
  char v35;
  _BYTE v36[8];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)&__p);
    sub_20FDE470C((uint64_t)v36, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v36);
        if (!v51)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(_BYTE *)(v3 + 64) = 0;
    if (v40)
    {
      v8 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(_QWORD *)(v3 + 56) = v8;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v42;
    v10 = v41;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v45)
    {
      v11 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(_QWORD *)(v3 + 112) = v11;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v48)
    {
      v12 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(_QWORD *)(v3 + 144) = v12;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(_QWORD *)(v3 + 176) = v50;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v49;
    if (!(_QWORD)v49)
      goto LABEL_46;
    v15 = *((_QWORD *)&v49 + 1);
    v16 = (void *)v49;
    if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v49;
LABEL_45:
    *((_QWORD *)&v49 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)&__p);
  sub_20FDE470C((uint64_t)v36, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(_BYTE *)(v3 + 64) = 0;
    if (v40)
    {
      v17 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(_QWORD *)(v3 + 56) = v17;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v42;
    v19 = v41;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v45)
    {
      v20 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(_QWORD *)(v3 + 112) = v20;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v48)
    {
      v21 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(_QWORD *)(v3 + 144) = v21;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(_QWORD *)(v3 + 176) = v50;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v36);
  if (v51)
  {
LABEL_38:
    v14 = v49;
    if (!(_QWORD)v49)
      goto LABEL_46;
    v23 = *((_QWORD *)&v49 + 1);
    v16 = (void *)v49;
    if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v48 && SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  sub_20EB0580C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20E9E840C(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20FDF3288((uint64_t)&__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          v29 = 0;
          if (v35 < 0)
            goto LABEL_83;
          goto LABEL_69;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      v29 = 1;
      if (v35 < 0)
LABEL_83:
        operator delete(__p);
LABEL_69:
      if (*(_BYTE *)(a2 + 131))
        v28 = 0;
      else
        v28 = v29;
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_20E9E840C(a2, &__p);
  v26 = __p;
  if (__p >= 2)
    v27 = 2;
  else
    v27 = __p;
  if (v27 < 2)
    sub_20FE7BDC4((uint64_t)&__p, a2, (uint64_t *)(v3 + 200));
  else
    sub_20FE7BCAC(a2, v3 + 200);
  if (v26 >= 2 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_99:
          v31 = 0;
          if (v35 < 0)
            goto LABEL_102;
          goto LABEL_88;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_99;
      }
      v31 = 1;
      if (v35 < 0)
LABEL_102:
        operator delete(__p);
LABEL_88:
      if (*(_BYTE *)(a2 + 131))
        v30 = 0;
      else
        v30 = v31;
    }
    while ((v30 & 1) != 0);
  }
}

void sub_20FEC096C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEC09B4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FE7E4A8((uint64_t)v25, a2, (uint64_t *)(v3 + 200));
}

void sub_20FEC0DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FEC0E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v19;
  _QWORD v21[5];
  uint64_t *v22;
  _QWORD v23[5];
  _QWORD *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[6];

  v37[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v32);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v32);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v32);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v26);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v26);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v26);
  }
  v23[0] = v32;
  v23[1] = &v33;
  v23[2] = &v34;
  v23[3] = &v35;
  v23[4] = &v36;
  v24 = v37;
  v21[0] = v26;
  v21[1] = &v27;
  v21[2] = &v28;
  v21[3] = &v29;
  v21[4] = &v30;
  v22 = &v31;
  if (!sub_20FF1D2E8((uint64_t)&v25, v23, v21))
    goto LABEL_35;
  if (!*((_BYTE *)v24 + 24) || !*((_BYTE *)v22 + 24))
  {
    if ((*((_BYTE *)v24 + 24) != 0) == (*((_BYTE *)v22 + 24) != 0))
      goto LABEL_22;
LABEL_35:
    v19 = 0;
    goto LABEL_36;
  }
  v8 = (unsigned __int8 *)*v24;
  v9 = (unsigned __int8 *)v24[1];
  v10 = (unsigned __int8 *)*v22;
  if (&v9[-*v24] != (unsigned __int8 *)(v22[1] - *v22))
    goto LABEL_35;
  if (v8 != v9)
  {
    while (sub_20FF1C59C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_35;
  }
LABEL_22:
  if (*(_QWORD *)(a1 + 200) != *(_QWORD *)(a2 + 200))
    goto LABEL_35;
  v11 = *(_QWORD *)(a1 + 224);
  if (v11 != *(_QWORD *)(a2 + 224))
    goto LABEL_35;
  v12 = *(unsigned __int8 **)(a1 + 232);
  v13 = *(unsigned __int8 **)(a2 + 232);
  v14 = &v12[v11];
  v15 = &v13[v11];
  if (v11)
  {
    v16 = v11 - 1;
    while (1)
    {
      v17 = v16;
      if (*v12 != *v13)
        goto LABEL_35;
      ++v12;
      ++v13;
      --v16;
      if (!v17)
      {
        v13 = v15;
        v12 = v14;
        break;
      }
    }
  }
  v19 = v12 == v14 && v13 == v15;
LABEL_36:
  sub_20EB0580C((uint64_t)v26);
  sub_20EB0580C((uint64_t)v32);
  return v19;
}

void sub_20FEC106C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEC108C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEC10A0(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FEC14AC(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FEC174C(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FEC19CC(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FEC1C6C(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FEC1E84(&v9, (uint64_t)a1);
          else
            sub_20FEC1204(&v8, a1);
        }
      }
    }
  }
}

void sub_20FEC1204(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE13A54((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20FE13A54((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE133CC((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20FE133CC((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FDEB904((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20FDEB904((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = v3 + 200;
  v13 = a2[2];
  v14 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20FE868A0((uint64_t)a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE868A0((uint64_t)a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FEC14AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20FE85E30((uint64_t)&v16, a2, v3 + 200);
}

void sub_20FEC174C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE1036C(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE10250(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FDE75BC(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 2u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  sub_20FE86134(a2, v3 + 200);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FEC19CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20FE86318((uint64_t)&v16, a2, v3 + 200);
}

_QWORD *sub_20FEC1C6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20E86A980(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FE8661C(a2, v3 + 200);
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20E86A980(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FEC1E84(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_2100B6A04((_QWORD *)a2);
  sub_20FE86764(a2, (uint64_t *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20FEC203C(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FEC26C8(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FEC2B74(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FEC2FE4(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FEC3490(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FEC3AD4(&v9, a1);
          else
            sub_20FEC21A0(&v8, (uint64_t *)a1);
        }
      }
    }
  }
}

void sub_20FEC21A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30[27];
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v30);
    sub_20FDE470C((uint64_t)&v31, v30);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v29, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v30);
  sub_20FDE470C((uint64_t)&v31, v30);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v29, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20EB0580C((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *a2;
  v30[0] = a2[1];
  v25 = v30[0];
  v31 = 6;
  (*(void (**)(uint64_t *, unsigned int *))(v24 + 104))(a2, &v31);
  if (v25 < 1)
  {
    if (v31 < 3)
      sub_20FDF69C0((uint64_t)&v31, (uint64_t)a2, v4, v31);
    else
      sub_20FDF6C34((uint64_t)a2, v4, v31);
  }
  else
  {
    sub_20FDF63C8((int *)v30, (uint64_t)a2, v4, v31);
  }
  v26 = *a2;
  v30[0] = a2[1];
  v27 = v30[0];
  v31 = 2;
  (*(void (**)(uint64_t *, unsigned int *))(v26 + 104))(a2, &v31);
  v28 = v3 + 200;
  if (v27 < 1)
  {
    if (v31 < 2)
      sub_20FE887D8((uint64_t)&v31, (uint64_t)a2, v28);
    else
      sub_20FE88944((uint64_t)a2, v3 + 200);
  }
  else
  {
    sub_20FE884B0((int *)v30, (uint64_t)a2, v28, v31);
  }
}

void sub_20FEC2680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEC26C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v28);
    sub_20FDE470C((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v28);
  sub_20FDE470C((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20EB0580C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  return sub_20FE869D0(a2, v3 + 200);
}

void sub_20FEC2B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FEC2B74(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v26);
    sub_20FDE470C((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v26);
  sub_20FDE470C((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20EB0580C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v26, a2, v4);
  return sub_20FE86F70(a2, v3 + 200);
}

void sub_20FEC2F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEC2FE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v28);
    sub_20FDE470C((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v28);
  sub_20FDE470C((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20EB0580C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  return sub_20FE874B4(a2, v3 + 200);
}

void sub_20FEC3448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEC3490(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  void *__p;
  uint64_t v34;
  char v35;
  _BYTE v36[8];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)&__p);
    sub_20FDE470C((uint64_t)v36, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v36);
        if (!v51)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(_BYTE *)(v3 + 64) = 0;
    if (v40)
    {
      v8 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(_QWORD *)(v3 + 56) = v8;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v42;
    v10 = v41;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v45)
    {
      v11 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(_QWORD *)(v3 + 112) = v11;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v48)
    {
      v12 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(_QWORD *)(v3 + 144) = v12;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(_QWORD *)(v3 + 176) = v50;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v49;
    if (!(_QWORD)v49)
      goto LABEL_46;
    v15 = *((_QWORD *)&v49 + 1);
    v16 = (void *)v49;
    if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v49;
LABEL_45:
    *((_QWORD *)&v49 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)&__p);
  sub_20FDE470C((uint64_t)v36, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(_BYTE *)(v3 + 64) = 0;
    if (v40)
    {
      v17 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(_QWORD *)(v3 + 56) = v17;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v42;
    v19 = v41;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v45)
    {
      v20 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(_QWORD *)(v3 + 112) = v20;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v48)
    {
      v21 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(_QWORD *)(v3 + 144) = v21;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(_QWORD *)(v3 + 176) = v50;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v36);
  if (v51)
  {
LABEL_38:
    v14 = v49;
    if (!(_QWORD)v49)
      goto LABEL_46;
    v23 = *((_QWORD *)&v49 + 1);
    v16 = (void *)v49;
    if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v48 && SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  sub_20EB0580C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20E9E840C(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20FDF3288((uint64_t)&__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          v29 = 0;
          if (v35 < 0)
            goto LABEL_83;
          goto LABEL_69;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      v29 = 1;
      if (v35 < 0)
LABEL_83:
        operator delete(__p);
LABEL_69:
      if (*(_BYTE *)(a2 + 131))
        v28 = 0;
      else
        v28 = v29;
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_20E9E840C(a2, &__p);
  v26 = __p;
  if (__p >= 2)
    v27 = 2;
  else
    v27 = __p;
  if (v27 < 2)
    sub_20FE87A54((uint64_t)&__p, a2, v3 + 200);
  else
    sub_20FE87BC0(a2, v3 + 200);
  if (v26 >= 2 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_99:
          v31 = 0;
          if (v35 < 0)
            goto LABEL_102;
          goto LABEL_88;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_99;
      }
      v31 = 1;
      if (v35 < 0)
LABEL_102:
        operator delete(__p);
LABEL_88:
      if (*(_BYTE *)(a2 + 131))
        v30 = 0;
      else
        v30 = v31;
    }
    while ((v30 & 1) != 0);
  }
}

void sub_20FEC3A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEC3AD4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FE87E18((uint64_t)v25, a2, v3 + 200);
}

void sub_20FEC3F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEC3F48(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA0A7A0;
  sub_20EB0580C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20FEC3FE0(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  unsigned __int128 *v12;
  unsigned __int128 v13;

  *(_QWORD *)result = off_24CA0A7A0;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(result + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  v3 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(result + 40) = v3;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(result + 72) = v4;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v5 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(result + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(result + 96) = v5;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v6 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(result + 144) = 0;
  *(_OWORD *)(result + 128) = v6;
  *(_BYTE *)(result + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    v7 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(result + 144) = v7;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_BYTE *)(result + 168) = 1;
  }
  *(_BYTE *)(result + 176) = 0;
  *(_BYTE *)(result + 200) = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    v8 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)(result + 176) = v8;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_BYTE *)(result + 200) = 1;
  }
  v9 = *(_OWORD *)(a2 + 208);
  v10 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(result + 240) = 0;
  *(_QWORD *)(result + 224) = v10;
  *(_OWORD *)(result + 208) = v9;
  *(_BYTE *)(result + 288) = 0;
  if (*(_BYTE *)(a2 + 288))
  {
    v11 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(result + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(result + 240) = v11;
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    v12 = (unsigned __int128 *)(a2 + 272);
    do
      v13 = __ldaxp(v12);
    while (__stlxp(v13, v12));
    *(_OWORD *)(result + 272) = v13;
    *(_BYTE *)(result + 288) = 1;
  }
  *(_BYTE *)(result + 304) = 0;
  *(_BYTE *)(result + 328) = 0;
  if (*(_BYTE *)(a2 + 328))
  {
    *(_QWORD *)(result + 304) = 0;
    *(_QWORD *)(result + 312) = 0;
    *(_QWORD *)(result + 320) = 0;
    *(_OWORD *)(result + 304) = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(result + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a2 + 312) = 0;
    *(_QWORD *)(a2 + 320) = 0;
    *(_BYTE *)(result + 328) = 1;
  }
  *(_QWORD *)result = off_24CA0A720;
  return result;
}

void sub_20FEC4170(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA0A7A0;
  sub_20EB0580C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 40));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_10:
    JUMPOUT(0x212BC6398);
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_10;
}

uint64_t sub_20FEC420C(uint64_t a1)
{
  return a1 + 128;
}

unsigned __int8 **sub_20FEC4214(char *a1, char *lpsrc)
{
  unsigned __int8 **result;
  unsigned __int8 **v5[6];
  _QWORD v6[6];

  result = (unsigned __int8 **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA0A760, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return (unsigned __int8 **)1;
    }
    else
    {
      v6[0] = a1 + 8;
      v6[1] = a1 + 32;
      v6[2] = a1 + 40;
      v6[3] = a1 + 64;
      v6[4] = a1 + 72;
      v6[5] = a1 + 96;
      v5[0] = result + 1;
      v5[1] = result + 4;
      v5[2] = result + 5;
      v5[3] = result + 8;
      v5[4] = result + 9;
      v5[5] = result + 12;
      return (unsigned __int8 **)sub_20FEC56C8((uint64_t)v6, v5);
    }
  }
  return result;
}

void sub_20FEC42D4(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FEC5940();
  sub_20FEC4388(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 128, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FEC436C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEC4388(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56FD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56FD8))
  {
    v4 = sub_20FEC5380();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A56FC0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A56FD0 = *(_QWORD *)(v9 - 8);
      xmmword_254A56FC0 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56FC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56FD8);
  }
  return sub_20FEC5D00(&xmmword_254A56FC0, (__int128 *)"{", (__int128 *)(a1 + 8), (__int128 *)"}");
}

void sub_20FEC4498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A56FD8);
  _Unwind_Resume(a1);
}

void sub_20FEC44B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56FD8);
  _Unwind_Resume(a1);
}

void sub_20FEC44D0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 10;
}

void sub_20FEC44FC(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 10, a2);
}

uint64_t sub_20FEC4534(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA0A7A0;
  sub_20EB0580C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20FEC45CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA0A7A0;
  sub_20EB0580C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 40));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_10:
    JUMPOUT(0x212BC6398);
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_10;
}

uint64_t sub_20FEC4668(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FEC4E1C();
  return sub_20FEC478C(v2, (__int128 *)"{", (__int128 *)(a1 + 8), (__int128 *)",", a1 + 128, (__int128 *)"}");
}

uint64_t sub_20FEC46C0(uint64_t a1)
{
  return sub_20FEC557C(a1 + 8);
}

void sub_20FEC46C8(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FEC46F4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA0A7A0;
  sub_20EB0580C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20FEC478C(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, __int128 *a6)
{
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  char v21;
  __int128 *v22;
  const char *v23;
  __int128 *v24;
  const char *v25;
  const char *v26;
  __int128 **v27;

  v14 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&v12, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v12 = *a1;
    v13 = *((_QWORD *)a1 + 2);
  }
  v14 = 1;
  v15 = &v12;
  v16 = a2;
  v17 = &v12;
  v18 = a2;
  v19 = a2;
  sub_20E89FEA0((uint64_t *)&v17, (uint64_t)&v12);
  v15 = a3;
  v16 = (__int128 *)((char *)a3 + 24);
  v17 = a3 + 2;
  v18 = (__int128 *)((char *)a3 + 56);
  v19 = a3 + 4;
  v20 = (uint64_t)a3 + 88;
  v22 = &v12;
  v23 = "{";
  v24 = &v12;
  v25 = "{";
  v26 = "{";
  if (v14 == -1)
    goto LABEL_12;
  v27 = &v22;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v14])(&v27, &v12);
  LOBYTE(v22) = 1;
  v23 = (const char *)&v12;
  v24 = (__int128 *)&v21;
  sub_20FEC4A6C((uint64_t)&v15, (uint64_t)&v22);
  v22 = &v12;
  v23 = "}";
  v24 = &v12;
  v25 = "}";
  v26 = "}";
  if (v14 == -1)
LABEL_12:
    sub_20E877AB8();
  v27 = &v22;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v14])(&v27, &v12);
  v15 = &v12;
  v16 = a4;
  v17 = &v12;
  v18 = a4;
  v19 = a4;
  if (v14 == -1)
    sub_20E877AB8();
  v22 = (__int128 *)&v15;
  ((void (*)(__int128 **, __int128 *))off_24CA08258[v14])(&v22, &v12);
  sub_20EB0A838((uint64_t)&v27, (uint64_t)&v12, a5);
  v15 = &v12;
  v16 = a6;
  v17 = &v12;
  v18 = a6;
  v19 = a6;
  if (v14 == -1)
    sub_20E877AB8();
  v22 = (__int128 *)&v15;
  ((void (*)(__int128 **, __int128 *))off_24CA08258[v14])(&v22, &v12);
  if (v14 == -1)
    sub_20E877AB8();
  v15 = (__int128 *)&v22;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v14])(&v15, &v12);
  if (v14 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v14])(&v15, &v12);
  return result;
}

void sub_20FEC49DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC49F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC4A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC4A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC4A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC4A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC4A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEC4A6C(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t *v24;

  v4 = *(const char **)a1;
  if (!*(_BYTE *)a2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = ",";
    v21 = v19;
    v22 = ",";
    v23 = ",";
    v5 = *(unsigned int *)(v19 + 24);
    if ((_DWORD)v5 == -1)
      goto LABEL_21;
    v24 = &v19;
    ((void (*)(uint64_t **))off_24CA08258[v5])(&v24);
  }
  *(_BYTE *)a2 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = v4;
  v21 = v19;
  v22 = v4;
  v23 = v4;
  v6 = *(unsigned int *)(v19 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_21;
  v24 = &v19;
  ((void (*)(uint64_t **))off_24CA08240[v6])(&v24);
  v7 = *(int **)(a1 + 8);
  if (!*(_BYTE *)a2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = ",";
    v21 = v19;
    v22 = ",";
    v23 = ",";
    v8 = *(unsigned int *)(v19 + 24);
    if ((_DWORD)v8 == -1)
      goto LABEL_21;
    v24 = &v19;
    ((void (*)(uint64_t **))off_24CA08258[v8])(&v24);
  }
  *(_BYTE *)a2 = 0;
  sub_20FD0DBA4((uint64_t)&v19, *(_QWORD *)(a2 + 8), v7);
  v9 = *(const char **)(a1 + 16);
  if (!*(_BYTE *)a2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = ",";
    v21 = v19;
    v22 = ",";
    v23 = ",";
    v10 = *(unsigned int *)(v19 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_21;
    v24 = &v19;
    ((void (*)(uint64_t **))off_24CA08258[v10])(&v24);
  }
  *(_BYTE *)a2 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = v9;
  v21 = v19;
  v22 = v9;
  v23 = v9;
  v11 = *(unsigned int *)(v19 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_21;
  v24 = &v19;
  ((void (*)(uint64_t **))off_24CA08240[v11])(&v24);
  sub_20FEC4D14(a2, *(unsigned int **)(a1 + 24));
  v12 = *(const char **)(a1 + 32);
  if (!*(_BYTE *)a2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = ",";
    v21 = v19;
    v22 = ",";
    v23 = ",";
    v13 = *(unsigned int *)(v19 + 24);
    if ((_DWORD)v13 == -1)
      goto LABEL_21;
    v24 = &v19;
    ((void (*)(uint64_t **))off_24CA08258[v13])(&v24);
  }
  *(_BYTE *)a2 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = v12;
  v21 = v19;
  v22 = v12;
  v23 = v12;
  v14 = *(unsigned int *)(v19 + 24);
  if ((_DWORD)v14 == -1)
    goto LABEL_21;
  v24 = &v19;
  ((void (*)(uint64_t **))off_24CA08240[v14])(&v24);
  v15 = *(const char **)(a1 + 40);
  if (!*(_BYTE *)a2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = ",";
    v21 = v19;
    v22 = ",";
    v23 = ",";
    v16 = *(unsigned int *)(v19 + 24);
    if ((_DWORD)v16 == -1)
      goto LABEL_21;
    v24 = &v19;
    ((void (*)(uint64_t **))off_24CA08258[v16])(&v24);
  }
  *(_BYTE *)a2 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = v15;
  v21 = v19;
  v22 = v15;
  v23 = v15;
  v17 = *(unsigned int *)(v19 + 24);
  if ((_DWORD)v17 == -1)
LABEL_21:
    sub_20E877AB8();
  v24 = &v19;
  return ((uint64_t (*)(uint64_t **))off_24CA08240[v17])(&v24);
}

void sub_20FEC4D14(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  uint64_t *v13;

  if (!*(_BYTE *)a1)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (std::string *)",";
    v10 = v8;
    v11 = (std::string *)",";
    v12 = (std::string *)",";
    v4 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *))off_24CA08258[v4])(&v7);
  }
  *(_BYTE *)a1 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  std::to_string(&v7, *a2);
  v8 = v5;
  v9 = &v7;
  v10 = v5;
  v11 = &v7;
  v12 = &v7;
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6 == -1)
    sub_20E877AB8();
  v13 = &v8;
  ((void (*)(uint64_t **, uint64_t))off_24CA08138[v6])(&v13, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_20FEC4E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_20FEC4E1C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56E98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56E98))
    return &xmmword_254A56E80;
  v2 = sub_20FEC4EF8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56E80, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56E90 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56E80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56E80, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56E98);
  return &xmmword_254A56E80;
}

void sub_20FEC4EE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56E98);
  _Unwind_Resume(a1);
}

std::string *sub_20FEC4EF8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56EB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56EB8))
    return &stru_254A56EA0;
  sub_20FEC519C((uint64_t)__p);
  sub_20FEC4FE8((char *)__p, &stru_254A56EA0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56EA0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56EB8);
  return &stru_254A56EA0;
}

void sub_20FEC4FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56EB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56EB8);
  _Unwind_Resume(a1);
}

void sub_20FEC4FE8(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FEC5380();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FEC514C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FEC519C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56F38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56F38))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::TextLog>]", qword_254A56F20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56F20, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56F38);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56F58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56F58))
  {
    v5 = sub_20E8A2354(qword_254A56F20, "<", 0);
    sub_20E89FC08(qword_254A56F20, 0, v5, qword_254A56F40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56F40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56F58);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56F78);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56F78))
  {
    sub_21023CD84((uint64_t)qword_254A56F40, (uint64_t)&xmmword_254A56F60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56F60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56F78);
  }
  if (byte_254A56F77 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56F60, *((unint64_t *)&xmmword_254A56F60 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56F60;
    *(_QWORD *)(a1 + 16) = unk_254A56F70;
  }
}

void sub_20FEC5338(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56F78);
  _Unwind_Resume(a1);
}

void sub_20FEC5350(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56F58);
  _Unwind_Resume(a1);
}

void sub_20FEC5368(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56F38);
  _Unwind_Resume(a1);
}

__int128 *sub_20FEC5380()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56ED8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56ED8))
    return &xmmword_254A56EC0;
  v2 = (char *)sub_20FEC545C();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A56EC0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A56ED0 = *((_QWORD *)v2 + 2);
    xmmword_254A56EC0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56EC0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56ED8);
  return &xmmword_254A56EC0;
}

void sub_20FEC5444(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56ED8);
  _Unwind_Resume(a1);
}

void *sub_20FEC545C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56EF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A56EF8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::TextLog]", qword_254A56EE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56EE0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56EF8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A56F18);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56F18))
    return &unk_254A56F00;
  sub_21023CD84((uint64_t)qword_254A56EE0, (uint64_t)&unk_254A56F00);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A56F00, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56F18);
  return &unk_254A56F00;
}

void sub_20FEC554C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56F18);
  _Unwind_Resume(a1);
}

void sub_20FEC5564(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56EF8);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEC557C(uint64_t a1)
{
  uint64_t result;
  _DWORD v2[6];
  int v3;
  _QWORD v4[6];
  char v5;
  _DWORD *v6;
  const char *v7;
  char *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v3 = 0;
  v4[0] = a1;
  v4[1] = a1 + 24;
  v4[2] = a1 + 32;
  v4[3] = a1 + 56;
  v4[4] = a1 + 64;
  v4[5] = a1 + 88;
  sub_20E89FDB0(v2, "{");
  LOBYTE(v6) = 1;
  v7 = (const char *)v2;
  v8 = &v5;
  sub_20FEC4A6C((uint64_t)v4, (uint64_t)&v6);
  v6 = v2;
  v7 = "}";
  v8 = (char *)v2;
  v9 = "}";
  v10 = "}";
  if (v3 == -1)
    sub_20E877AB8();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24CA08258[v3])(&v11, v2);
  if (v3 == -1)
    sub_20E877AB8();
  v4[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA08168[v3])(v4, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA08150[v3])(v4, v2);
  return result;
}

void sub_20FEC56A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEC56B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEC56C8(uint64_t a1, unsigned __int8 ***a2)
{
  const void **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 **v10;
  uint64_t result;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v39;

  v2 = *(const void ***)a1;
  v3 = *a2;
  v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (unsigned __int8 *)*(unsigned __int8 *)(*(_QWORD *)a1 + 23);
  else
    v5 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v7 = (char)v6;
  if ((char)v6 < 0)
    v6 = v3[1];
  if (v5 != v6)
    return 0;
  if (v7 >= 0)
    v10 = *a2;
  else
    v10 = (unsigned __int8 **)*v3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v10, *(_QWORD *)(*(_QWORD *)a1 + 8)))
      return 0;
  }
  else if (*(_BYTE *)(*(_QWORD *)a1 + 23))
  {
    while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v10)
    {
      v2 = (const void **)((char *)v2 + 1);
      v10 = (unsigned __int8 **)((char *)v10 + 1);
      if (!--v4)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  if (**(_DWORD **)(a1 + 8) != *(_DWORD *)a2[1])
    return 0;
  v12 = *(unsigned __int8 **)(a1 + 16);
  v13 = (unsigned __int8 *)a2[2];
  v14 = v12[23];
  if ((v14 & 0x80u) == 0)
    v15 = (unsigned __int8 *)v12[23];
  else
    v15 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
  v16 = (unsigned __int8 *)v13[23];
  v17 = (char)v16;
  if ((char)v16 < 0)
    v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  if (v15 != v16)
    return 0;
  if (v17 >= 0)
    v18 = (unsigned __int8 *)a2[2];
  else
    v18 = *(unsigned __int8 **)v13;
  if ((v14 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v12, v18, *((_QWORD *)v12 + 1)))
      return 0;
  }
  else if (v12[23])
  {
    while (*v12 == *v18)
    {
      ++v12;
      ++v18;
      if (!--v14)
        goto LABEL_34;
    }
    return 0;
  }
LABEL_34:
  if (**(_DWORD **)(a1 + 24) != *(_DWORD *)a2[3])
    return 0;
  v19 = *(unsigned __int8 **)(a1 + 32);
  v20 = (unsigned __int8 *)a2[4];
  v21 = v19[23];
  if ((v21 & 0x80u) == 0)
    v22 = (unsigned __int8 *)v19[23];
  else
    v22 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
  v23 = (unsigned __int8 *)v20[23];
  v24 = (char)v23;
  if ((char)v23 < 0)
    v23 = (unsigned __int8 *)*((_QWORD *)v20 + 1);
  if (v22 != v23)
    return 0;
  if (v24 >= 0)
    v25 = (unsigned __int8 *)a2[4];
  else
    v25 = *(unsigned __int8 **)v20;
  if ((v21 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v19, v25, *((_QWORD *)v19 + 1)))
      goto LABEL_50;
    return 0;
  }
  if (v19[23])
  {
    while (*v19 == *v25)
    {
      ++v19;
      ++v25;
      if (!--v21)
        goto LABEL_50;
    }
    return 0;
  }
LABEL_50:
  v26 = *(unsigned __int8 **)(a1 + 40);
  v27 = (unsigned __int8 *)a2[5];
  v28 = v26[23];
  if ((v28 & 0x80u) == 0)
    v29 = (unsigned __int8 *)v26[23];
  else
    v29 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
  v30 = (unsigned __int8 *)v27[23];
  v31 = (char)v30;
  if ((char)v30 < 0)
    v30 = (unsigned __int8 *)*((_QWORD *)v27 + 1);
  if (v29 != v30)
    return 0;
  if (v31 >= 0)
    v32 = (unsigned __int8 *)a2[5];
  else
    v32 = *(unsigned __int8 **)v27;
  if ((v28 & 0x80) != 0)
    return memcmp(*(const void **)v26, v32, *((_QWORD *)v26 + 1)) == 0;
  if (!v26[23])
    return 1;
  v33 = v28 - 1;
  do
  {
    v35 = *v26++;
    v34 = v35;
    v37 = *v32++;
    v36 = v37;
    v39 = v33-- != 0;
    result = v34 == v36;
  }
  while (v34 == v36 && v39);
  return result;
}

std::string *sub_20FEC5940()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A56F98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A56F98))
  {
    sub_20E8610C0(v9, "viz::PackageData");
    v2 = sub_20FEC5380();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20FEC5C08();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20E877C80(v8, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v9, (uint64_t *)v8, &stru_254A56F80, v6, v7);
    sub_20E89FB98(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56F80, &dword_20E81F000);
        __cxa_guard_release(&qword_254A56F98);
        return &stru_254A56F80;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254A56F80;
}

void sub_20FEC5B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254A56F98);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254A56F98);
  _Unwind_Resume(a1);
}

std::string *sub_20FEC5C08()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56FB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56FB8))
    return &stru_254A56FA0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 10U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A56FA0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56FA0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56FB8);
  return &stru_254A56FA0;
}

void sub_20FEC5CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56FB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56FB8);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEC5D00(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  char v17;
  __int128 *v18;
  const char *v19;
  __int128 *v20;
  const char *v21;
  const char *v22;
  __int128 **v23;

  v10 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&v8, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v8 = *a1;
    v9 = *((_QWORD *)a1 + 2);
  }
  v10 = 1;
  v11 = &v8;
  v12 = a2;
  v13 = &v8;
  v14 = a2;
  v15 = a2;
  sub_20E89FEA0((uint64_t *)&v13, (uint64_t)&v8);
  v11 = a3;
  v12 = (__int128 *)((char *)a3 + 24);
  v13 = a3 + 2;
  v14 = (__int128 *)((char *)a3 + 56);
  v15 = a3 + 4;
  v16 = (uint64_t)a3 + 88;
  v18 = &v8;
  v19 = "{";
  v20 = &v8;
  v21 = "{";
  v22 = "{";
  if (v10 == -1)
    goto LABEL_11;
  v23 = &v18;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v10])(&v23, &v8);
  LOBYTE(v18) = 1;
  v19 = (const char *)&v8;
  v20 = (__int128 *)&v17;
  sub_20FEC4A6C((uint64_t)&v11, (uint64_t)&v18);
  v18 = &v8;
  v19 = "}";
  v20 = &v8;
  v21 = "}";
  v22 = "}";
  if (v10 == -1)
LABEL_11:
    sub_20E877AB8();
  v23 = &v18;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v10])(&v23, &v8);
  v11 = &v8;
  v12 = a4;
  v13 = &v8;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_20E877AB8();
  v18 = (__int128 *)&v11;
  ((void (*)(__int128 **, __int128 *))off_24CA08258[v10])(&v18, &v8);
  if (v10 == -1)
    sub_20E877AB8();
  v11 = (__int128 *)&v18;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v10])(&v11, &v8);
  if (v10 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v10])(&v11, &v8);
  return result;
}

void sub_20FEC5EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC5F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC5F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC5F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC5F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEC5F5C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = off_24CA0A7A0;
  v4 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 6);
  v5 = a2[2];
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 40) = v5;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 14);
  v6 = a2[4];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 10);
  *(_OWORD *)(a1 + 72) = v6;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 8) = 0;
  v7 = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 13);
  *(_OWORD *)(a1 + 96) = v7;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 11) = 0;
  sub_20EB09F3C(a1 + 128, a3);
  *(_QWORD *)a1 = off_24CA0A720;
  return a1;
}

void sub_20FEC6030(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (v1[119] < 0)
  {
    operator delete(*v5);
    if ((v1[95] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[63] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v1[95] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((v1[63] & 0x80000000) == 0)
  {
LABEL_4:
    if ((v1[31] & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEC609C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned __int8 **v18;
  _BYTE *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned __int8 **v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[6];

  v37[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v32);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v32);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v32);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v26);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v26);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v26);
  }
  v19 = v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = &v36;
  v24 = (unsigned __int8 **)v37;
  v13 = v26;
  v14 = &v27;
  v15 = &v28;
  v16 = &v29;
  v17 = &v30;
  v18 = (unsigned __int8 **)&v31;
  if (sub_20FF1D2E8((uint64_t)&v25, &v19, &v13))
  {
    if (*((_BYTE *)v24 + 24) && *((_BYTE *)v18 + 24))
    {
      v8 = *v24;
      v9 = v24[1];
      v10 = *v18;
      if (v9 - *v24 == v18[1] - *v18)
      {
        if (v8 != v9)
        {
          while (sub_20FF1C59C(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v19 = (_BYTE *)(a1 + 200);
        v20 = (uint64_t *)(a1 + 224);
        v21 = (uint64_t *)(a1 + 232);
        v22 = (uint64_t *)(a1 + 256);
        v23 = (uint64_t *)(a1 + 264);
        v24 = (unsigned __int8 **)(a1 + 288);
        v13 = (_BYTE *)(a2 + 200);
        v14 = (uint64_t *)(a2 + 224);
        v15 = (uint64_t *)(a2 + 232);
        v16 = (uint64_t *)(a2 + 256);
        v17 = (uint64_t *)(a2 + 264);
        v18 = (unsigned __int8 **)(a2 + 288);
        v11 = sub_20FEC6300((uint64_t)&v25, (uint64_t)&v19, (uint64_t)&v13);
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v24 + 24) != 0) == (*((_BYTE *)v18 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20EB0580C((uint64_t)v26);
  sub_20EB0580C((uint64_t)v32);
  return v11;
}

void sub_20FEC62D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEC62EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEC6300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t result;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  char v27;

  if ((sub_20FEC6488((uint64_t)&v27, a2, (unsigned __int8 **)a3) & 1) == 0)
    return 0;
  if (**(_DWORD **)(a2 + 24) != **(_DWORD **)(a3 + 24))
    return 0;
  v5 = *(unsigned __int8 **)(a2 + 32);
  v6 = *(unsigned __int8 ***)(a3 + 32);
  v7 = v5[23];
  if ((v7 & 0x80u) == 0)
    v8 = (unsigned __int8 *)v5[23];
  else
    v8 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
  v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  v10 = (char)v9;
  if ((char)v9 < 0)
    v9 = v6[1];
  if (v8 != v9)
    return 0;
  if (v10 >= 0)
    v11 = *(unsigned __int8 **)(a3 + 32);
  else
    v11 = *v6;
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v5, v11, *((_QWORD *)v5 + 1)))
      goto LABEL_20;
    return 0;
  }
  if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7)
        goto LABEL_20;
    }
    return 0;
  }
LABEL_20:
  v13 = *(unsigned __int8 **)(a2 + 40);
  v14 = *(unsigned __int8 ***)(a3 + 40);
  v15 = v13[23];
  if ((v15 & 0x80u) == 0)
    v16 = (unsigned __int8 *)v13[23];
  else
    v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
  v18 = (char)v17;
  if ((char)v17 < 0)
    v17 = v14[1];
  if (v16 != v17)
    return 0;
  if (v18 >= 0)
    v19 = *(unsigned __int8 **)(a3 + 40);
  else
    v19 = *v14;
  if ((v15 & 0x80) != 0)
    return memcmp(*(const void **)v13, v19, *((_QWORD *)v13 + 1)) == 0;
  if (!v13[23])
    return 1;
  v20 = v15 - 1;
  do
  {
    v22 = *v13++;
    v21 = v22;
    v24 = *v19++;
    v23 = v24;
    v26 = v20-- != 0;
    result = v21 == v23;
  }
  while (v21 == v23 && v26);
  return result;
}

uint64_t sub_20FEC6488(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  const void **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v12;
  uint64_t result;
  unsigned __int8 *v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;

  v4 = *(const void ***)a2;
  v5 = *a3;
  v6 = *(unsigned __int8 *)(*(_QWORD *)a2 + 23);
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if ((v6 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 23);
  else
    v8 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v9 = v5[23];
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)v5 + 1);
  if (v8 != v9)
    return 0;
  if (v10 >= 0)
    v12 = v5;
  else
    v12 = *(unsigned __int8 **)v5;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v4, v12, v7))
      return 0;
  }
  else if ((_DWORD)v6)
  {
    while (*(unsigned __int8 *)v4 == *v12)
    {
      v4 = (const void **)((char *)v4 + 1);
      ++v12;
      if (!--v6)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  if (**(unsigned __int8 **)(a2 + 8) != *a3[1])
    return 0;
  v14 = *(unsigned __int8 **)(a2 + 16);
  v15 = (unsigned __int8 **)a3[2];
  v16 = v14[23];
  if ((v16 & 0x80u) == 0)
    v17 = (unsigned __int8 *)v14[23];
  else
    v17 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  v18 = (unsigned __int8 *)*((unsigned __int8 *)v15 + 23);
  v19 = (char)v18;
  if ((char)v18 < 0)
    v18 = v15[1];
  if (v17 != v18)
    return 0;
  if (v19 >= 0)
    v20 = a3[2];
  else
    v20 = *v15;
  if ((v16 & 0x80) != 0)
    return memcmp(*(const void **)v14, v20, *((_QWORD *)v14 + 1)) == 0;
  if (!v14[23])
    return 1;
  v21 = v16 - 1;
  do
  {
    v23 = *v14++;
    v22 = v23;
    v25 = *v20++;
    v24 = v25;
    v27 = v21-- != 0;
    result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

void sub_20FEC65F0(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FEC6980(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FEC6F94(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FEC73A0(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FEC7830(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FEC7B2C(&v9, (uint64_t)a1);
          else
            sub_20FEC6754(&v8, a1);
        }
      }
    }
  }
}

void sub_20FEC6754(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v12 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    v9 = v12;
    if (v8 < 1)
    {
      sub_20FE13A54((uint64_t)a2, v4, v12);
      goto LABEL_17;
    }
    if (v8 == 2)
    {
      v12 = 3;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE13A54((uint64_t)a2, v4, v9);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v12 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    v11 = v12;
    if (v10 < 1)
    {
      sub_20FE133CC((uint64_t)a2, v4, v12);
      goto LABEL_17;
    }
    if (v10 == 2)
    {
      v12 = 3;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE133CC((uint64_t)a2, v4, v11);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v12 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    v7 = v12;
    if (v6 < 1)
    {
      sub_20FDEB904((uint64_t)a2, v4, v12);
      goto LABEL_17;
    }
    if (v6 == 2)
    {
      v12 = 3;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FDEB904((uint64_t)a2, v4, v7);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
LABEL_17:
  v12 = 1;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
  sub_20FEC8024((uint64_t)a2, (__int128 *)(v3 + 200));
}

void sub_20FEC6980(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FAEA0(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v18);
  sub_20FEC6C80(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEC6C80(uint64_t a1, __int128 *a2)
{
  BOOL v3;
  int *v4;
  int v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void *v11[2];
  char v12;
  unsigned __int8 v13;
  void *v14;
  char v15;
  int v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  char v21;
  unint64_t v22;

  sub_20FEC6E10(v11, a2);
  sub_2101FD70C(a1, (uint64_t)v11);
  if (*(_BYTE *)(a1 + 88))
    v3 = *(_QWORD *)(a1 + 80) == 7;
  else
    v3 = 0;
  if (!v3
    || ((v4 = *(int **)(a1 + 72), v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == *(_DWORD *)"version")
      ? (v7 = v6 == *(_DWORD *)"sion")
      : (v7 = 0),
        !v7))
  {
    v21 = 6;
    v22 = v13;
    v8 = (unsigned __int8 *)sub_2101FAC64(a1);
    v9 = *v8;
    *v8 = v21;
    v21 = v9;
    v10 = (void **)*((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v22;
    v22 = (unint64_t)v10;
    sub_20EB07D94((void ***)&v22, v9);
  }
  sub_2101FD70C(a1, (uint64_t)&v14);
  sub_2101FD244(a1, &v16);
  sub_2101FD70C(a1, (uint64_t)&v17);
  sub_2101FD70C(a1, (uint64_t)&__p);
  if (v20 < 0)
  {
    operator delete(__p);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v15 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v17);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v12 & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(v11[0]);
    return;
  }
LABEL_18:
  operator delete(v14);
  if (v12 < 0)
    goto LABEL_19;
}

void sub_20FEC6DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void ***v9;
  uint64_t v10;

  sub_20EB07D94(v9, *(unsigned __int8 *)(v10 - 32));
  sub_20FDE3B08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC6DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDE3B08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_20FEC6E10(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[24] = *((_BYTE *)a2 + 24);
    v5 = __dst + 32;
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[24] = *((_BYTE *)a2 + 24);
    v5 = __dst + 32;
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = a2[2];
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 6);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20E860C04(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
LABEL_6:
  *((_DWORD *)__dst + 14) = *((_DWORD *)a2 + 14);
  if (*((char *)a2 + 87) < 0)
  {
    sub_20E860C04(__dst + 64, *((void **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v7 = a2[4];
    *((_QWORD *)__dst + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)__dst + 4) = v7;
  }
  v8 = __dst + 88;
  if (*((char *)a2 + 111) < 0)
  {
    sub_20E860C04(v8, *((void **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 88);
    *((_QWORD *)__dst + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)v8 = v9;
  }
  return __dst;
}

void sub_20FEC6F20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20FEC6F94(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v15 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v15, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v15, v7 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE1036C(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v15 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v15, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v15, v8 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE10250(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v15 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v15, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v15, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FDE75BC(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v15 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v15, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v15, v14 + 8);
  }
  sub_20FEC7184(a2, (__int128 *)(v3 + 200));
}

void sub_20FEC7184(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  char v11;
  void *v12[2];
  char v13;
  unsigned int v14;
  void *v15[2];
  char v16;
  void *__p[2];
  char v18;
  uint64_t *v19;
  char v20;

  sub_20FEC6E10(v9, a2);
  v3 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v3 + 40))
  {
    v19 = (uint64_t *)(v3 + 16);
    sub_20E9F4E1C((uint64_t)&v20, &v19, (const void **)v9);
  }
  else
  {
    sub_20E9F5254((uint64_t)&v19, v3 + 8, (uint64_t)v9);
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v19 = (uint64_t *)(v4 + 16);
    sub_20E9F3164(&v19, v11);
  }
  else
  {
    if (v11 < 0)
    {
      LOBYTE(v19) = -52;
      BYTE1(v19) = v11;
    }
    else
    {
      LOBYTE(v19) = v11;
    }
    std::ostream::write();
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v19 = (uint64_t *)(v5 + 16);
    sub_20E9F4E1C((uint64_t)&v20, &v19, (const void **)v12);
  }
  else
  {
    sub_20E9F5254((uint64_t)&v19, v5 + 8, (uint64_t)v12);
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v19 = (uint64_t *)(v6 + 16);
    sub_20E9F3D4C(&v19, v14);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v19, v6 + 8);
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v19 = (uint64_t *)(v7 + 16);
    sub_20E9F4E1C((uint64_t)&v20, &v19, (const void **)v15);
  }
  else
  {
    sub_20E9F5254((uint64_t)&v19, v7 + 8, (uint64_t)v15);
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    v19 = (uint64_t *)(v8 + 16);
    sub_20E9F4E1C((uint64_t)&v20, &v19, (const void **)__p);
  }
  else
  {
    sub_20E9F5254((uint64_t)&v19, v8 + 8, (uint64_t)__p);
  }
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_24:
      if ((v13 & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_29;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v15[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v10 & 0x80000000) == 0)
      return;
LABEL_30:
    operator delete(v9[0]);
    return;
  }
LABEL_29:
  operator delete(v12[0]);
  if (v10 < 0)
    goto LABEL_30;
}

void sub_20FEC738C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDE3B08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC73A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FA8A4(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v18);
  sub_20FEC76A0(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEC76A0(uint64_t a1, __int128 *a2)
{
  BOOL v3;
  int *v4;
  int v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  void *v11[2];
  char v12;
  unsigned __int8 v13;
  void *v14;
  char v15;
  int v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  char v21;
  uint64_t v22;

  sub_20FEC6E10(v11, a2);
  sub_2101FB61C(a1, (uint64_t)v11);
  if (*(_BYTE *)(a1 + 88))
    v3 = *(_QWORD *)(a1 + 80) == 7;
  else
    v3 = 0;
  if (!v3
    || ((v4 = *(int **)(a1 + 72), v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == *(_DWORD *)"version")
      ? (v7 = v6 == *(_DWORD *)"sion")
      : (v7 = 0),
        !v7))
  {
    v21 = 6;
    v22 = v13;
    v8 = (unsigned __int8 *)sub_2101FA67C(a1);
    v9 = *v8;
    *v8 = v21;
    v21 = v9;
    v10 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v22;
    v22 = v10;
    sub_20EB911C0(&v22, v9);
  }
  sub_2101FB61C(a1, (uint64_t)&v14);
  sub_2101FB154(a1, &v16);
  sub_2101FB61C(a1, (uint64_t)&v17);
  sub_2101FB61C(a1, (uint64_t)&__p);
  if (v20 < 0)
  {
    operator delete(__p);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v15 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v17);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v12 & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(v11[0]);
    return;
  }
LABEL_18:
  operator delete(v14);
  if (v12 < 0)
    goto LABEL_19;
}

void sub_20FEC77FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;

  sub_20EB911C0(v9, *(unsigned __int8 *)(v10 - 32));
  sub_20FDE3B08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC781C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDE3B08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEC7830(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v16 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v16, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v14 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v14, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v17 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v17, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v15, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v18 = v7;
  sub_20E86A980(v11, (uint64_t)&v18, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v19 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v19, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FEC7A04(a2, (__int128 *)(v3 + 200));
}

void sub_20FEC7A04(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  void *__dst[2];
  char v5;
  unsigned __int8 v6[8];
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  char v13;

  sub_20FEC6E10(__dst, a2);
  sub_20E9E713C(a1, (uint64_t)__dst);
  sub_20E9E6F58(a1, v6);
  sub_20E9E713C(a1, (uint64_t)&v7);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = *(_QWORD **)(a1 + 24);
    v13 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v3, (uint64_t)&v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20E9E713C(a1, (uint64_t)&v9);
  sub_20E9E713C(a1, (uint64_t)&__p);
  if (v12 < 0)
  {
    operator delete(__p);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_5:
      if ((v8 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v5 & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(__dst[0]);
    return;
  }
LABEL_10:
  operator delete(v7);
  if (v5 < 0)
    goto LABEL_11;
}

void sub_20FEC7B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE3B08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEC7B2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int __src;
  uint64_t v11;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 1;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
  sub_20FEC7CA8(a2, (__int128 *)(v3 + 200));
}

void sub_20FEC7CA8(uint64_t a1, __int128 *a2)
{
  int64_t v3;
  int64_t v4;
  char *p_dst;
  int64_t v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *p_p;
  int64_t v14;
  void *__dst;
  int64_t v16;
  unsigned __int8 v17;
  char v18;
  char v19[7];
  void *v20;
  int64_t v21;
  unsigned __int8 v22;
  char v23[4];
  char v24[4];
  void *v25;
  int64_t v26;
  unsigned __int8 v27;
  void *__p;
  int64_t v29;
  unsigned __int8 v30;
  int64_t __src;
  uint64_t v32;

  sub_20FEC6E10(&__dst, a2);
  v3 = v17;
  if ((v17 & 0x80u) != 0)
    v3 = v16;
  __src = v3;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v32, 8);
  if ((char)v17 < 0)
  {
    p_dst = (char *)__dst;
    v4 = v16;
    if (!__dst && v16)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_42;
      }
      p_dst = 0;
    }
  }
  else
  {
    v4 = v17;
    p_dst = (char *)&__dst;
  }
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), p_dst, &p_dst[v4], v4);
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), &v18, v19, 1);
  v6 = v22;
  if ((v22 & 0x80u) != 0)
    v6 = v21;
  __src = v6;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v32, 8);
  if ((char)v22 < 0)
  {
    v7 = (char *)v20;
    v8 = v21;
    if (!v20 && v21)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_42;
      }
      v7 = 0;
    }
  }
  else
  {
    v7 = (char *)&v20;
    v8 = v22;
  }
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), v7, &v7[v8], v8);
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), v23, v24, 4);
  v9 = v27;
  if ((v27 & 0x80u) != 0)
    v9 = v26;
  __src = v9;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v32, 8);
  if ((char)v27 < 0)
  {
    v10 = (char *)v25;
    v11 = v26;
    if (!v25 && v26)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_42;
      }
      v10 = 0;
    }
  }
  else
  {
    v10 = (char *)&v25;
    v11 = v27;
  }
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), v10, &v10[v11], v11);
  v12 = v30;
  if ((v30 & 0x80u) != 0)
    v12 = v29;
  __src = v12;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v32, 8);
  if (((char)v30 & 0x80000000) == 0)
  {
    p_p = (char *)&__p;
    v14 = v30;
    goto LABEL_33;
  }
  p_p = (char *)__p;
  v14 = v29;
  if (!__p && v29)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0))
    {
      p_p = 0;
      goto LABEL_33;
    }
LABEL_42:
    abort();
  }
LABEL_33:
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), p_p, &p_p[v14], v14);
  if ((char)v30 < 0)
  {
    operator delete(__p);
    if (((char)v27 & 0x80000000) == 0)
    {
LABEL_35:
      if (((char)v22 & 0x80000000) == 0)
        goto LABEL_36;
      goto LABEL_40;
    }
  }
  else if (((char)v27 & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(v25);
  if (((char)v22 & 0x80000000) == 0)
  {
LABEL_36:
    if (((char)v17 & 0x80000000) == 0)
      return;
LABEL_41:
    operator delete(__dst);
    return;
  }
LABEL_40:
  operator delete(v20);
  if ((char)v17 < 0)
    goto LABEL_41;
}

void sub_20FEC8010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE3B08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEC8024(uint64_t a1, __int128 *a2)
{
  void *v3[2];
  char v4;
  uint64_t v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  void *__p;
  char v12;

  sub_20FEC6E10(v3, a2);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, v3);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v5);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, &v6);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v8);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, &v9);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, &__p);
  if (v12 < 0)
  {
    operator delete(__p);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v9);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(v3[0]);
    return;
  }
LABEL_8:
  operator delete(v6);
  if (v4 < 0)
    goto LABEL_9;
}

void sub_20FEC813C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDE3B08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_20FEC8150(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  double result;
  _QWORD *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
    return sub_20FEC8808(&v10, (uint64_t)v4);
  v10 = a2;
  v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
  if (v6)
  {
    sub_20FEC8F34(&v10, v6);
  }
  else
  {
    v10 = a2;
    v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
    if (v7)
    {
      return sub_20FEC93F4(&v10, (uint64_t)v7);
    }
    else
    {
      v10 = a2;
      v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
      if (v8)
      {
        return sub_20FEC9B20(&v10, (uint64_t)v8);
      }
      else
      {
        v10 = a2;
        if (*a1 == &off_24CA167C8)
          return sub_20FECA244(&v10, a1);
        else
          sub_20FEC82B4(&v9, a1);
      }
    }
  }
  return result;
}

uint64_t sub_20FEC82B4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v27;
  uint64_t v28[27];
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v28);
    sub_20FDE470C((uint64_t)&v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v28);
  sub_20FDE470C((uint64_t)&v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20EB0580C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *a2;
  v28[0] = a2[1];
  v25 = v28[0];
  v29 = 6;
  (*(void (**)(_QWORD *, unsigned int *))(v24 + 104))(a2, &v29);
  if (v25 < 1)
  {
    if (v29 < 3)
      sub_20FDF69C0((uint64_t)&v29, (uint64_t)a2, v4, v29);
    else
      sub_20FDF6C34((uint64_t)a2, v4, v29);
  }
  else
  {
    sub_20FDF63C8((int *)v28, (uint64_t)a2, v4, v29);
  }
  LODWORD(v28[0]) = 1;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 104))(a2, v28);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 144))(a2, v3 + 200);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, v3 + 224);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 144))(a2, v3 + 232);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 104))(a2, v3 + 256);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 144))(a2, v3 + 264);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 144))(a2, v3 + 288);
}

void sub_20FEC87C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20FEC8808(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v27[0] = (uint64_t)"value";
  v27[1] = 5;
  v27[2] = v3 + 200;
  return sub_20FEC8CAC(a2, (uint64_t)v27);
}

void sub_20FEC8C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20FEC8CAC(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char *v6;
  void **v7;
  __int128 v8;
  char *v9;
  void **v10;
  void **v11;
  char *v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *exception;
  __int128 v21;
  uint64_t v22;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(_QWORD *)(a2 + 16);
  sub_2101FF7D8(a1);
  v5 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a1 + 104) = 1;
  v6 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21 = 0;
  sub_2100DB048(v6, &v21);
  if (DWORD1(v21))
    goto LABEL_17;
  v7 = (void **)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_2100DB548(v7, (uint64_t)&v21);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  v8 = v21;
  *(_QWORD *)(v4 + 16) = v22;
  *(_OWORD *)v4 = v8;
  v9 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21 = 0;
  sub_2100DB048(v9, &v21);
  if ((unint64_t)v21 >= 0x100)
    goto LABEL_17;
  *(_BYTE *)(v4 + 24) = v21;
  v10 = (void **)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_2100DB548(v10, (uint64_t)&v21);
  v11 = (void **)(v4 + 32);
  if (*(char *)(v4 + 55) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = v21;
  *(_QWORD *)(v4 + 48) = v22;
  v12 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21 = 0;
  sub_2100DB048(v12, &v21);
  if (DWORD1(v21))
  {
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *(_DWORD *)(v4 + 56) = v21;
  v13 = (void **)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_2100DB548(v13, (uint64_t)&v21);
  v14 = (void **)(v4 + 64);
  if (*(char *)(v4 + 87) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = v21;
  *(_QWORD *)(v4 + 80) = v22;
  v15 = (void **)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_2100DB548(v15, (uint64_t)&v21);
  v16 = (void **)(v4 + 88);
  if (*(char *)(v4 + 111) < 0)
    operator delete(*v16);
  result = *(double *)&v21;
  *(_OWORD *)v16 = v21;
  *(_QWORD *)(v4 + 104) = v22;
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v18 - 8);
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(a1 + 48) = v18 - 8;
  *(_QWORD *)(a1 + 72) = v19 - 8;
  return result;
}

void sub_20FEC8F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20FEC8F34(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v27, a2, v4);
  LODWORD(v27[0]) = 1;
  v25 = a2[6];
  v24 = a2 + 6;
  sub_20E9EDADC(v25, v27);
  sub_20E9EE280(*v24, (std::string *)(v3 + 200));
  sub_20E9ED7B4(*v24, (_BYTE *)(v3 + 224));
  sub_20E9EE280(*v24, (std::string *)(v3 + 232));
  sub_20E9EDADC(*v24, (_DWORD *)(v3 + 256));
  sub_20E9EE280(*v24, (std::string *)(v3 + 264));
  sub_20E9EE280(*v24, (std::string *)(v3 + 288));
}

void sub_20FEC93AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20FEC93F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v27[0] = (uint64_t)"value";
  v27[1] = 5;
  v27[2] = v3 + 200;
  return sub_20FEC9898(a2, (uint64_t)v27);
}

void sub_20FEC9850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20FEC9898(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char *v6;
  void **v7;
  __int128 v8;
  char *v9;
  void **v10;
  void **v11;
  char *v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *exception;
  __int128 v21;
  uint64_t v22;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(_QWORD *)(a2 + 16);
  sub_2101FF2E8(a1);
  v5 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a1 + 104) = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21 = 0;
  sub_2100DA8B0(v6, &v21);
  if (DWORD1(v21))
    goto LABEL_17;
  v7 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_2100DADB0(v7, (uint64_t)&v21);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  v8 = v21;
  *(_QWORD *)(v4 + 16) = v22;
  *(_OWORD *)v4 = v8;
  v9 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21 = 0;
  sub_2100DA8B0(v9, &v21);
  if ((unint64_t)v21 >= 0x100)
    goto LABEL_17;
  *(_BYTE *)(v4 + 24) = v21;
  v10 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_2100DADB0(v10, (uint64_t)&v21);
  v11 = (void **)(v4 + 32);
  if (*(char *)(v4 + 55) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = v21;
  *(_QWORD *)(v4 + 48) = v22;
  v12 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21 = 0;
  sub_2100DA8B0(v12, &v21);
  if (DWORD1(v21))
  {
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *(_DWORD *)(v4 + 56) = v21;
  v13 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_2100DADB0(v13, (uint64_t)&v21);
  v14 = (void **)(v4 + 64);
  if (*(char *)(v4 + 87) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = v21;
  *(_QWORD *)(v4 + 80) = v22;
  v15 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_2100DADB0(v15, (uint64_t)&v21);
  v16 = (void **)(v4 + 88);
  if (*(char *)(v4 + 111) < 0)
    operator delete(*v16);
  result = *(double *)&v21;
  *(_OWORD *)v16 = v21;
  *(_QWORD *)(v4 + 104) = v22;
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v18 - 8);
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(a1 + 48) = v18 - 8;
  *(_QWORD *)(a1 + 72) = v19 - 8;
  return result;
}

void sub_20FEC9AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double sub_20FEC9B20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  void **v28;
  void **v29;
  double result;
  uint64_t v31;
  void **v32;
  int v33;
  int v34;
  void **v35;
  char v36;
  void *__p[2];
  uint64_t v38;
  _BYTE v39[8];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)__p);
    sub_20FDE470C((uint64_t)v39, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v39);
        if (!v54)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v36, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v40;
    *(_BYTE *)(v3 + 64) = 0;
    if (v43)
    {
      v8 = v42;
      *(_OWORD *)(v3 + 40) = v41;
      *(_QWORD *)(v3 + 56) = v8;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v45;
    v10 = v44;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v48)
    {
      v11 = v47;
      *(_OWORD *)(v3 + 96) = v46;
      *(_QWORD *)(v3 + 112) = v11;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v51)
    {
      v12 = v50;
      *(_OWORD *)(v3 + 128) = v49;
      *(_QWORD *)(v3 + 144) = v12;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v54;
    if (v54)
    {
      *(_OWORD *)(v3 + 160) = v52;
      *(_QWORD *)(v3 + 176) = v53;
      v52 = 0uLL;
      v53 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v52;
    if (!(_QWORD)v52)
      goto LABEL_46;
    v15 = *((_QWORD *)&v52 + 1);
    v16 = (void *)v52;
    if (*((_QWORD *)&v52 + 1) == (_QWORD)v52)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v52;
LABEL_45:
    *((_QWORD *)&v52 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)__p);
  sub_20FDE470C((uint64_t)v39, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v36, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v40;
    *(_BYTE *)(v3 + 64) = 0;
    if (v43)
    {
      v17 = v42;
      *(_OWORD *)(v3 + 40) = v41;
      *(_QWORD *)(v3 + 56) = v17;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v45;
    v19 = v44;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v48)
    {
      v20 = v47;
      *(_OWORD *)(v3 + 96) = v46;
      *(_QWORD *)(v3 + 112) = v20;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v51)
    {
      v21 = v50;
      *(_OWORD *)(v3 + 128) = v49;
      *(_QWORD *)(v3 + 144) = v21;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v54;
    if (v54)
    {
      *(_OWORD *)(v3 + 160) = v52;
      *(_QWORD *)(v3 + 176) = v53;
      v52 = 0uLL;
      v53 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v39);
  if (v54)
  {
LABEL_38:
    v14 = v52;
    if (!(_QWORD)v52)
      goto LABEL_46;
    v23 = *((_QWORD *)&v52 + 1);
    v16 = (void *)v52;
    if (*((_QWORD *)&v52 + 1) == (_QWORD)v52)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v51 && SHIBYTE(v50) < 0)
    operator delete((void *)v49);
  if (v48 && SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  sub_20EB0580C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_20E9E840C(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_20FDF3288((uint64_t)__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (SHIBYTE(v38) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_78:
          v27 = 0;
          if (SHIBYTE(v38) < 0)
            goto LABEL_81;
          goto LABEL_67;
        }
      }
      else if (SHIBYTE(v38) == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_78;
      }
      v27 = 1;
      if (SHIBYTE(v38) < 0)
LABEL_81:
        operator delete(__p[0]);
LABEL_67:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  LODWORD(__p[0]) = 1;
  sub_20E9E840C(a2, __p);
  ++*(_QWORD *)(a2 + 80);
  if (*(_BYTE *)(a2 + 128) && *(_BYTE *)(a2 + 131))
  {
    *(_BYTE *)(a2 + 132) = 1;
  }
  else
  {
    sub_20E9E9FEC(a2, (uint64_t)__p);
    v28 = (void **)(v3 + 200);
    if (*(char *)(v3 + 223) < 0)
      operator delete(*v28);
    *(_OWORD *)v28 = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 216) = v38;
    ++*(_QWORD *)(a2 + 104);
  }
  sub_20E9E7AC8(a2, (_BYTE *)(v3 + 224));
  ++*(_QWORD *)(a2 + 80);
  if (*(_BYTE *)(a2 + 128) && *(_BYTE *)(a2 + 131))
  {
    *(_BYTE *)(a2 + 132) = 1;
  }
  else
  {
    sub_20E9E9FEC(a2, (uint64_t)__p);
    v29 = (void **)(v3 + 232);
    if (*(char *)(v3 + 255) < 0)
      operator delete(*v29);
    *(_OWORD *)v29 = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 248) = v38;
    ++*(_QWORD *)(a2 + 104);
  }
  sub_20E9E840C(a2, (_DWORD *)(v3 + 256));
  v31 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v31 + 1;
  if (*(_BYTE *)(a2 + 128) && *(_BYTE *)(a2 + 131))
  {
    *(_BYTE *)(a2 + 132) = 1;
    *(_QWORD *)(a2 + 80) = v31 + 2;
LABEL_98:
    *(_BYTE *)(a2 + 132) = 1;
    return result;
  }
  sub_20E9E9FEC(a2, (uint64_t)__p);
  v32 = (void **)(v3 + 264);
  if (*(char *)(v3 + 287) < 0)
    operator delete(*v32);
  result = *(double *)__p;
  *(_OWORD *)v32 = *(_OWORD *)__p;
  *(_QWORD *)(v3 + 280) = v38;
  ++*(_QWORD *)(a2 + 104);
  v33 = *(unsigned __int8 *)(a2 + 128);
  v34 = *(unsigned __int8 *)(a2 + 131);
  ++*(_QWORD *)(a2 + 80);
  if (v33 && v34)
    goto LABEL_98;
  sub_20E9E9FEC(a2, (uint64_t)__p);
  v35 = (void **)(v3 + 288);
  if (*(char *)(v3 + 311) < 0)
    operator delete(*v35);
  result = *(double *)__p;
  *(_OWORD *)v35 = *(_OWORD *)__p;
  *(_QWORD *)(v3 + 304) = v38;
  ++*(_QWORD *)(a2 + 104);
  return result;
}

void sub_20FECA1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20FECA244(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  std::logic_error *exception;
  char v30;
  uint64_t v31[27];
  _BYTE v32[8];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v31);
    sub_20FDE470C((uint64_t)v32, v31);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v32);
        if (!v47)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v30, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(_BYTE *)(v3 + 64) = 0;
    if (v36)
    {
      v8 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(_QWORD *)(v3 + 56) = v8;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v38;
    v10 = v37;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v41)
    {
      v11 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(_QWORD *)(v3 + 112) = v11;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v44)
    {
      v12 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(_QWORD *)(v3 + 144) = v12;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(_QWORD *)(v3 + 176) = v46;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v45;
    if (!(_QWORD)v45)
      goto LABEL_46;
    v15 = *((_QWORD *)&v45 + 1);
    v16 = (void *)v45;
    if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v45;
LABEL_45:
    *((_QWORD *)&v45 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v31);
  sub_20FDE470C((uint64_t)v32, v31);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v30, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(_BYTE *)(v3 + 64) = 0;
    if (v36)
    {
      v17 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(_QWORD *)(v3 + 56) = v17;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v38;
    v19 = v37;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v41)
    {
      v20 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(_QWORD *)(v3 + 112) = v20;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v44)
    {
      v21 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(_QWORD *)(v3 + 144) = v21;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(_QWORD *)(v3 + 176) = v46;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v32);
  if (v47)
  {
LABEL_38:
    v14 = v45;
    if (!(_QWORD)v45)
      goto LABEL_46;
    v23 = *((_QWORD *)&v45 + 1);
    v16 = (void *)v45;
    if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v44 && SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  sub_20EB0580C((uint64_t)v31);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v31, a2, v4);
  v24 = a2[6];
  v25 = a2[7];
  v26 = v25 >= v24;
  v27 = v25 - v24;
  if (!v26)
    v27 = 0;
  if (v27 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v24 + 4;
  return sub_20FECA720(a2, v3 + 200);
}

void sub_20FECA6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20FECA720(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;

  sub_2100B7230(a1, a2);
  v4 = a1[6];
  if (a1[7] <= v4)
    goto LABEL_6;
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1[3] + v4);
  ++a1[6];
  sub_2100B7230(a1, a2 + 32);
  v5 = a1[6];
  v6 = a1[7];
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (!v7)
    v8 = 0;
  if (v8 <= 3)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1[3] + v5);
  a1[6] += 4;
  sub_2100B7230(a1, a2 + 64);
  return sub_2100B7230(a1, a2 + 88);
}

void sub_20FECA800(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FECA814(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FECA828(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24CA0AA10;
  sub_20EB0580C(a1 + 80);
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x212BC6398](v2, 0x1000C4072FAA15ELL);
  return a1;
}

uint64_t *sub_20FECA8B4(uint64_t *a1)
{
  uint64_t v2;

  if (*((_BYTE *)a1 + 64) && *((char *)a1 + 63) < 0)
  {
    operator delete((void *)a1[5]);
    if (!*((_BYTE *)a1 + 32))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)a1 + 32))
  {
    goto LABEL_7;
  }
  if (*((char *)a1 + 31) < 0)
    operator delete((void *)a1[1]);
LABEL_7:
  v2 = *a1;
  *a1 = 0;
  if (v2)
    MEMORY[0x212BC6398](v2, 0x1000C4072FAA15ELL);
  return a1;
}

__n128 sub_20FECA930(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  uint64_t v9;
  unsigned __int128 *v10;
  unsigned __int128 v11;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a1 = off_24CA0AA10;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v3 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    v4 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(a1 + 72) = 1;
  }
  v5 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v6 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v6;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    v7 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v7;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 1;
  }
  result = *(__n128 *)(a2 + 160);
  v9 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = v9;
  *(__n128 *)(a1 + 160) = result;
  *(_BYTE *)(a1 + 240) = 0;
  if (*(_BYTE *)(a2 + 240))
  {
    result = *(__n128 *)(a2 + 192);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(__n128 *)(a1 + 192) = result;
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    v10 = (unsigned __int128 *)(a2 + 224);
    do
      v11 = __ldaxp(v10);
    while (__stlxp(v11, v10));
    *(_OWORD *)(a1 + 224) = v11;
    *(_BYTE *)(a1 + 240) = 1;
  }
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    result = *(__n128 *)(a2 + 256);
    *(__n128 *)(a1 + 256) = result;
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 272) = 0;
    *(_BYTE *)(a1 + 280) = 1;
  }
  return result;
}

void sub_20FECAAB4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24CA0AA10;
  sub_20EB0580C(a1 + 80);
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x212BC6398](v2, 0x1000C4072FAA15ELL);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FECAB50(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_20FECAB58(const void **a1, const void **lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA0A9D0, 0);
  if (result)
  {
    if (a1 == lpsrc)
      return 1;
    else
      return sub_20FF3C300(a1 + 1, (uint64_t *)(result + 8));
  }
  return result;
}

void sub_20FECABBC(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FECBCC8();
  sub_20FECAC70(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 80, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FECAC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FECAC70(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A57138);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A57138))
  {
    v4 = sub_20FECBACC();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A57120, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A57130 = *(_QWORD *)(v9 - 8);
      xmmword_254A57120 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57120, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57138);
  }
  return sub_20FECC088(&xmmword_254A57120, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)"}");
}

void sub_20FECAD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A57138);
  _Unwind_Resume(a1);
}

void sub_20FECADA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57138);
  _Unwind_Resume(a1);
}

void sub_20FECADB8(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 11;
}

void sub_20FECADE4(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 11, a2);
}

uint64_t sub_20FECAE1C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24CA0AA10;
  sub_20EB0580C(a1 + 80);
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x212BC6398](v2, 0x1000C4072FAA15ELL);
  return a1;
}

void sub_20FECAEA8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24CA0AA10;
  sub_20EB0580C(a1 + 80);
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x212BC6398](v2, 0x1000C4072FAA15ELL);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FECAF44(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FECB568();
  return sub_20FECB098(v2, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)",", a1 + 80, (uint64_t)"}");
}

uint64_t sub_20FECAF9C(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20FECB2C4((uint64_t)v5, (uint64_t)v2, (uint64_t *)(a1 + 8));
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08168[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08150[v3])(v5, v2);
  return result;
}

void sub_20FECB034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA08150[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FECB06C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FECB098(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20FECB2C4((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v16])(&p_dst, &__dst);
  return result;
}

void sub_20FECB234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECB24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECB260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECB274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECB288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECB29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECB2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECB2C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20FF3C674((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FECB514(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FECB538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FECB554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20FECB568()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56FF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56FF8))
    return &xmmword_254A56FE0;
  v2 = sub_20FECB644();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56FE0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56FF0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56FE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56FE0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56FF8);
  return &xmmword_254A56FE0;
}

void sub_20FECB62C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56FF8);
  _Unwind_Resume(a1);
}

std::string *sub_20FECB644()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57018);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57018))
    return &stru_254A57000;
  sub_20FECB8E8((uint64_t)__p);
  sub_20FECB734((char *)__p, &stru_254A57000);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A57000, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57018);
  return &stru_254A57000;
}

void sub_20FECB6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A57018);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A57018);
  _Unwind_Resume(a1);
}

void sub_20FECB734(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FECBACC();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FECB898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FECB8E8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A57098);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A57098))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::Transform3>]", qword_254A57080);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A57080, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57098);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A570B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A570B8))
  {
    v5 = sub_20E8A2354(qword_254A57080, "<", 0);
    sub_20E89FC08(qword_254A57080, 0, v5, qword_254A570A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A570A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A570B8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A570D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A570D8))
  {
    sub_21023CD84((uint64_t)qword_254A570A0, (uint64_t)&xmmword_254A570C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A570C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A570D8);
  }
  if (byte_254A570D7 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A570C0, *((unint64_t *)&xmmword_254A570C0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A570C0;
    *(_QWORD *)(a1 + 16) = unk_254A570D0;
  }
}

void sub_20FECBA84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A570D8);
  _Unwind_Resume(a1);
}

void sub_20FECBA9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A570B8);
  _Unwind_Resume(a1);
}

void sub_20FECBAB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57098);
  _Unwind_Resume(a1);
}

__int128 *sub_20FECBACC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57038);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57038))
    return &xmmword_254A57020;
  v2 = (char *)sub_20FECBBA8();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A57020, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A57030 = *((_QWORD *)v2 + 2);
    xmmword_254A57020 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57020, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57038);
  return &xmmword_254A57020;
}

void sub_20FECBB90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57038);
  _Unwind_Resume(a1);
}

void *sub_20FECBBA8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57058);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A57058))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::Transform3]", qword_254A57040);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A57040, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57058);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A57078);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57078))
    return &unk_254A57060;
  sub_21023CD84((uint64_t)qword_254A57040, (uint64_t)&unk_254A57060);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A57060, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57078);
  return &unk_254A57060;
}

void sub_20FECBC98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57078);
  _Unwind_Resume(a1);
}

void sub_20FECBCB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57058);
  _Unwind_Resume(a1);
}

std::string *sub_20FECBCC8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A570F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A570F8))
  {
    sub_20E8610C0(v9, "viz::PackageData");
    v2 = sub_20FECBACC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20FECBF90();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20E877C80(v8, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v9, (uint64_t *)v8, &stru_254A570E0, v6, v7);
    sub_20E89FB98(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A570E0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A570F8);
        return &stru_254A570E0;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254A570E0;
}

void sub_20FECBEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254A570F8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254A570F8);
  _Unwind_Resume(a1);
}

std::string *sub_20FECBF90()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57118);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57118))
    return &stru_254A57100;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 11U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A57100);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A57100, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57118);
  return &stru_254A57100;
}

void sub_20FECC048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A57118);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A57118);
  _Unwind_Resume(a1);
}

uint64_t sub_20FECC088(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20FECB2C4((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v11])(&p_dst, &__dst);
  return result;
}

void sub_20FECC1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECC1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECC1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECC208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECC21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FECC230(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = off_24CA0AA10;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    v5 = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[3];
    *(_OWORD *)(a1 + 16) = v5;
    a2[2] = 0;
    a2[3] = 0;
    a2[1] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v6 = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 64) = a2[7];
    *(_OWORD *)(a1 + 48) = v6;
    a2[6] = 0;
    a2[7] = 0;
    a2[5] = 0;
    *(_BYTE *)(a1 + 72) = 1;
  }
  sub_20EB09F3C(a1 + 80, a3);
  *(_QWORD *)a1 = off_24CA0A990;
  return a1;
}

void sub_20FECC2EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v5;

  if (*(_BYTE *)(v1 + 72) && *(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(_BYTE *)(v1 + 40) && *(char *)(v1 + 39) < 0)
    operator delete(*v2);
  v5 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v5)
    MEMORY[0x212BC6398](v5, 0x1000C4072FAA15ELL);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FECC348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD v13[5];
  unsigned __int8 **v14;
  _QWORD v15[5];
  unsigned __int8 **v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = (unsigned __int8 **)&v23;
  if (sub_20FF1D2E8((uint64_t)&v17, v15, v13))
  {
    if (*((_BYTE *)v16 + 24) && *((_BYTE *)v14 + 24))
    {
      v8 = *v16;
      v9 = v16[1];
      v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_20FF1C59C(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v11 = sub_20FF3D860((unsigned __int8 *)(a1 + 200), (unsigned __int8 *)(a2 + 200));
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v16 + 24) != 0) == (*((_BYTE *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20EB0580C((uint64_t)v18);
  sub_20EB0580C((uint64_t)v24);
  return v11;
}

void sub_20FECC530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FECC54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FECC560(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FECC96C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FECD864(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FECE7DC(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FECF2E4(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FED01F0(&v9, (uint64_t)a1);
          else
            sub_20FECC6C4(&v8, a1);
        }
      }
    }
  }
}

void sub_20FECC6C4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE13A54((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20FE13A54((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE133CC((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20FE133CC((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FDEB904((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20FDEB904((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = v3 + 200;
  v13 = a2[2];
  v14 = 1;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20FED0894(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FED0894(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FECC96C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FAEA0(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v18);
  sub_20FECCC6C(a2, v3 + 200);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FECCC6C(uint64_t a1, uint64_t a2)
{
  _BYTE v3[120];
  void *v4;
  char v5;
  char v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20FECCF94((uint64_t)v3, a2);
  sub_20FECCD50(a1, (uint64_t)v3);
  if (v9 && v8 < 0)
    operator delete(__p);
  if (v6)
  {
    if (v5 < 0)
      operator delete(v4);
  }
}

void sub_20FECCD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FECCD50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  void **v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  uint64_t v16;
  int v17;

  v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "src_to_dst";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v16 = 7;
  v17 = 1;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FD244(a1, &v17);
  sub_20FECD0C0(a1, v4);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned __int8 **)(v7 - 8);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = v7 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v8 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "src";
    *(_QWORD *)(a1 + 80) = 3;
    *(_BYTE *)(a1 + 88) = 1;
  }
  if (*(_BYTE *)(a2 + 144))
  {
    sub_2101FD70C(a1, a2 + 120);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_16;
  }
  else
  {
    v16 = 0;
    v9 = (unsigned __int8 *)sub_2101FAC64(a1);
    v10 = *v9;
    *v9 = 0;
    v11 = (void **)*((_QWORD *)v9 + 1);
    *((_QWORD *)v9 + 1) = v16;
    v16 = (uint64_t)v11;
    sub_20EB07D94((void ***)&v16, v10);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_16;
  }
  v12 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "dst";
  *(_QWORD *)(a1 + 80) = 3;
  if (!v12)
  {
    *(_BYTE *)(a1 + 88) = 1;
    if (*(_BYTE *)(a2 + 176))
      goto LABEL_17;
    goto LABEL_19;
  }
LABEL_16:
  if (*(_BYTE *)(a2 + 176))
  {
LABEL_17:
    sub_2101FD70C(a1, a2 + 152);
    return;
  }
LABEL_19:
  v16 = 0;
  v13 = (unsigned __int8 *)sub_2101FAC64(a1);
  v14 = *v13;
  *v13 = 0;
  v15 = (void **)*((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v16;
  v16 = (uint64_t)v15;
  sub_20EB07D94((void ***)&v16, v14);
}

void sub_20FECCF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FECCF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20FECCF94(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *(_OWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 8);
  v9 = *(_OWORD *)(a2 + 24);
  v10 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 144) = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    if (*(char *)(a2 + 143) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 120), *(void **)(a2 + 120), *(_QWORD *)(a2 + 128));
    }
    else
    {
      v11 = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = v11;
    }
    *(_BYTE *)(a1 + 144) = 1;
  }
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 152), *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
    }
    else
    {
      v12 = *(_OWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = v12;
    }
    *(_BYTE *)(a1 + 176) = 1;
  }
  return a1;
}

void sub_20FECD07C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[176] && v1[175] < 0)
    operator delete(*v3);
  if (v1[144])
  {
    if (v1[143] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FECD0C0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "se3_type";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v9 = a2;
  sub_20FECD498(a1, (_BYTE **)&v9);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
        goto LABEL_23;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v5 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_r";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v5)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 8;
      sub_2101FE8F4(a1, &v9);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_t";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v6)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 20;
      sub_2101FE8F4(a1, &v9);
      break;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
LABEL_23:
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_r";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v7)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 8;
      sub_2101FEC64(a1, &v9);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v8 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_t";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v8)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 32;
      sub_2101FEC64(a1, &v9);
      break;
    case 4:
      sub_20FECD2F4(a1, a2);
      break;
    case 5:
      sub_20FECD3C4(a1, a2);
      break;
    default:
      return;
  }
}

void sub_20FECD2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a2 + 104))
    sub_20E877AB8();
  v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "affine3x4";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v7 = 4;
  v8 = v4;
  sub_2101FE8F4(a1, &v7);
  v7 = 4;
  v8 = a2 + 24;
  sub_2101FE8F4(a1, &v7);
  v7 = 4;
  v8 = a2 + 40;
  sub_2101FE8F4(a1, &v7);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(a1 + 56) = v6 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20FECD3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a2 + 104) != 1)
    sub_20E877AB8();
  v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "affine3x4";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v7 = 4;
  v8 = v4;
  sub_2101FEC64(a1, &v7);
  v7 = 4;
  v8 = a2 + 40;
  sub_2101FEC64(a1, &v7);
  v7 = 4;
  v8 = a2 + 72;
  sub_2101FEC64(a1, &v7);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(a1 + 56) = v6 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20FECD498(uint64_t a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FECD5A0((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FD70C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FECD55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FECD578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECD58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECD5A0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)off_24CA0AF60[(char)*a3 - 1], qword_2103EE220[(char)(*a3 - 1)]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FECD810(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FECD834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FECD850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FECD864(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE1036C(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE10250(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FDE75BC(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  sub_20FECDAE4(a2, v3 + 200);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FECDAE4(uint64_t a1, uint64_t a2)
{
  _BYTE v3[120];
  void *v4;
  char v5;
  char v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20FECCF94((uint64_t)v3, a2);
  sub_20FECDBC8(a1, (uint64_t)v3);
  if (v9 && v8 < 0)
    operator delete(__p);
  if (v6)
  {
    if (v5 < 0)
      operator delete(v4);
  }
}

void sub_20FECDB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_20FECDBC8(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t *v20;

  v4 = (char *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v20 = (uint64_t *)(v5 + 16);
    sub_20E9F3D4C(&v20, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v5 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  sub_20FECDE84(a1, v4);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v6 + 48), *(_QWORD *)(v6 + 16) - v7 - 9);
  v8 = *(_QWORD *)(v6 + 48);
  if (v8)
    memmove((void *)(*(_QWORD *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
  *(_QWORD *)(v6 + 48) = 0;
  v9 = *(_QWORD *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 88) - 8;
  *(_QWORD *)(v6 + 88) = v10;
  if (v9 == v10)
  {
    std::ostream::write();
    if (*(_BYTE *)(v6 + 40))
    {
      free(*(void **)(v6 + 24));
      *(_BYTE *)(v6 + 40) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 144))
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v11 + 40))
    {
      v20 = (uint64_t *)(v11 + 16);
      sub_20E9F3164(&v20, 1);
      v12 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v12 + 40))
        goto LABEL_12;
    }
    else
    {
      LOBYTE(v20) = 1;
      std::ostream::write();
      v12 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v12 + 40))
      {
LABEL_12:
        v20 = (uint64_t *)(v12 + 16);
        sub_20E9F4E1C((uint64_t)&v19, &v20, (const void **)(a2 + 120));
        if (!*(_BYTE *)(a2 + 176))
          goto LABEL_25;
LABEL_19:
        v14 = (const void **)(a2 + 152);
        v15 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v15 + 40))
        {
          v20 = (uint64_t *)(v15 + 16);
          sub_20E9F3164(&v20, 1);
          v16 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v16 + 40))
          {
LABEL_21:
            v20 = (uint64_t *)(v16 + 16);
            return (char *)sub_20E9F4E1C((uint64_t)&v19, &v20, v14);
          }
        }
        else
        {
          LOBYTE(v20) = 1;
          std::ostream::write();
          v16 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v16 + 40))
            goto LABEL_21;
        }
        return (char *)sub_20E9F5254((uint64_t)&v20, v16 + 8, (uint64_t)v14);
      }
    }
    sub_20E9F5254((uint64_t)&v20, v12 + 8, a2 + 120);
    if (!*(_BYTE *)(a2 + 176))
      goto LABEL_25;
    goto LABEL_19;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v13 + 40))
  {
    LOBYTE(v20) = 0;
    std::ostream::write();
    if (!*(_BYTE *)(a2 + 176))
      goto LABEL_25;
    goto LABEL_19;
  }
  v20 = (uint64_t *)(v13 + 16);
  sub_20E9F3164(&v20, 0);
  if (*(_BYTE *)(a2 + 176))
    goto LABEL_19;
LABEL_25:
  v18 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v18 + 40))
  {
    v20 = (uint64_t *)(v18 + 16);
    return sub_20E9F3164(&v20, 0);
  }
  else
  {
    LOBYTE(v20) = 0;
    return (char *)std::ostream::write();
  }
}

uint64_t sub_20FECDE84(uint64_t a1, char *a2)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  _BYTE v49[9];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    *(_QWORD *)v49 = v5 + 16;
    result = (uint64_t)sub_20E9F3164((uint64_t **)v49, v4);
  }
  else
  {
    if (v4 < 0)
    {
      v49[0] = -52;
      v49[1] = v4;
    }
    else
    {
      v49[0] = *a2;
    }
    result = std::ostream::write();
  }
  switch(*a2)
  {
    case 1:
      if (*((_DWORD *)a2 + 26) != 2)
        sub_20E877AB8();
      v7 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v7 + 40))
      {
        *(_QWORD *)v49 = v7 + 16;
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 2);
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 3);
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 4);
      }
      else
      {
        v16 = *((_DWORD *)a2 + 2);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v16);
        std::ostream::write();
        v17 = *((_DWORD *)a2 + 3);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v17);
        std::ostream::write();
        v18 = *((_DWORD *)a2 + 4);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v18);
        std::ostream::write();
      }
      v19 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v19 + 40))
      {
        *(_QWORD *)v49 = v19 + 16;
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 5);
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 6);
        result = (uint64_t)sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 7);
      }
      else
      {
        v27 = *((_DWORD *)a2 + 5);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v27);
        std::ostream::write();
        v28 = *((_DWORD *)a2 + 6);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v28);
        std::ostream::write();
        v29 = *((_DWORD *)a2 + 7);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v29);
        result = std::ostream::write();
      }
      break;
    case 2:
      if (*((_DWORD *)a2 + 26) != 3)
        sub_20E877AB8();
      v9 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        *(_QWORD *)v49 = v9 + 16;
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 1);
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 2);
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 3);
      }
      else
      {
        *(_QWORD *)&v49[1] = bswap64(*((_QWORD *)a2 + 1));
        v49[0] = -53;
        std::ostream::write();
        v20 = *((_QWORD *)a2 + 2);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v20);
        std::ostream::write();
        v21 = *((_QWORD *)a2 + 3);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v21);
        std::ostream::write();
      }
      v22 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)v49 = v22 + 16;
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 4);
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 5);
        result = (uint64_t)sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 6);
      }
      else
      {
        *(_QWORD *)&v49[1] = bswap64(*((_QWORD *)a2 + 4));
        v49[0] = -53;
        std::ostream::write();
        v30 = *((_QWORD *)a2 + 5);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v30);
        std::ostream::write();
        v31 = *((_QWORD *)a2 + 6);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v31);
        result = std::ostream::write();
      }
      break;
    case 4:
      if (*((_DWORD *)a2 + 26))
        sub_20E877AB8();
      v8 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v8 + 40))
      {
        *(_QWORD *)v49 = v8 + 16;
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 2);
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 3);
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 4);
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 5);
      }
      else
      {
        v11 = *((_DWORD *)a2 + 2);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v11);
        std::ostream::write();
        v12 = *((_DWORD *)a2 + 3);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v12);
        std::ostream::write();
        v13 = *((_DWORD *)a2 + 4);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v13);
        std::ostream::write();
        v14 = *((_DWORD *)a2 + 5);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v14);
        std::ostream::write();
      }
      v15 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v15 + 40))
      {
        *(_QWORD *)v49 = v15 + 16;
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 6);
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 7);
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 8);
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 9);
      }
      else
      {
        v32 = *((_DWORD *)a2 + 6);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v32);
        std::ostream::write();
        v33 = *((_DWORD *)a2 + 7);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v33);
        std::ostream::write();
        v34 = *((_DWORD *)a2 + 8);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v34);
        std::ostream::write();
        v35 = *((_DWORD *)a2 + 9);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v35);
        std::ostream::write();
      }
      v36 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v36 + 40))
      {
        *(_QWORD *)v49 = v36 + 16;
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 10);
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 11);
        sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 12);
        result = (uint64_t)sub_20E9F4B2C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 13);
      }
      else
      {
        v41 = *((_DWORD *)a2 + 10);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v41);
        std::ostream::write();
        v42 = *((_DWORD *)a2 + 11);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v42);
        std::ostream::write();
        v43 = *((_DWORD *)a2 + 12);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v43);
        std::ostream::write();
        v44 = *((_DWORD *)a2 + 13);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v44);
        result = std::ostream::write();
      }
      break;
    case 5:
      if (*((_DWORD *)a2 + 26) != 1)
        sub_20E877AB8();
      v10 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v10 + 40))
      {
        *(_QWORD *)v49 = v10 + 16;
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 1);
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 2);
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 3);
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 4);
      }
      else
      {
        *(_QWORD *)&v49[1] = bswap64(*((_QWORD *)a2 + 1));
        v49[0] = -53;
        std::ostream::write();
        v23 = *((_QWORD *)a2 + 2);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v23);
        std::ostream::write();
        v24 = *((_QWORD *)a2 + 3);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v24);
        std::ostream::write();
        v25 = *((_QWORD *)a2 + 4);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v25);
        std::ostream::write();
      }
      v26 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v26 + 40))
      {
        *(_QWORD *)v49 = v26 + 16;
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 5);
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 6);
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 7);
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 8);
      }
      else
      {
        *(_QWORD *)&v49[1] = bswap64(*((_QWORD *)a2 + 5));
        v49[0] = -53;
        std::ostream::write();
        v37 = *((_QWORD *)a2 + 6);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v37);
        std::ostream::write();
        v38 = *((_QWORD *)a2 + 7);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v38);
        std::ostream::write();
        v39 = *((_QWORD *)a2 + 8);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v39);
        std::ostream::write();
      }
      v40 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v40 + 40))
      {
        *(_QWORD *)v49 = v40 + 16;
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 9);
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 10);
        sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 11);
        result = (uint64_t)sub_20E9F4C08((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 12);
      }
      else
      {
        *(_QWORD *)&v49[1] = bswap64(*((_QWORD *)a2 + 9));
        v49[0] = -53;
        std::ostream::write();
        v45 = *((_QWORD *)a2 + 10);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v45);
        std::ostream::write();
        v46 = *((_QWORD *)a2 + 11);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v46);
        std::ostream::write();
        v47 = *((_QWORD *)a2 + 12);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v47);
        result = std::ostream::write();
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_20FECE7DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FA8A4(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v18);
  sub_20FECEADC(a2, v3 + 200);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FECEADC(uint64_t a1, uint64_t a2)
{
  _BYTE v3[120];
  void *v4;
  char v5;
  char v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20FECCF94((uint64_t)v3, a2);
  sub_20FECEBC0(a1, (uint64_t)v3);
  if (v9 && v8 < 0)
    operator delete(__p);
  if (v6)
  {
    if (v5 < 0)
      operator delete(v4);
  }
}

void sub_20FECEB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FECEBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "src_to_dst";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v16 = 7;
  v17 = 1;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FB154(a1, &v17);
  sub_20FECEE04(a1, v4);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned __int8 **)(v7 - 8);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = v7 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v8 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "src";
    *(_QWORD *)(a1 + 80) = 3;
    *(_BYTE *)(a1 + 88) = 1;
  }
  if (*(_BYTE *)(a2 + 144))
  {
    sub_2101FB61C(a1, a2 + 120);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_16;
  }
  else
  {
    v16 = 0;
    v9 = (unsigned __int8 *)sub_2101FA67C(a1);
    v10 = *v9;
    *v9 = 0;
    v11 = *((_QWORD *)v9 + 1);
    *((_QWORD *)v9 + 1) = v16;
    v16 = v11;
    sub_20EB911C0(&v16, v10);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_16;
  }
  v12 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "dst";
  *(_QWORD *)(a1 + 80) = 3;
  if (!v12)
  {
    *(_BYTE *)(a1 + 88) = 1;
    if (*(_BYTE *)(a2 + 176))
      goto LABEL_17;
    goto LABEL_19;
  }
LABEL_16:
  if (*(_BYTE *)(a2 + 176))
  {
LABEL_17:
    sub_2101FB61C(a1, a2 + 152);
    return;
  }
LABEL_19:
  v16 = 0;
  v13 = (unsigned __int8 *)sub_2101FA67C(a1);
  v14 = *v13;
  *v13 = 0;
  v15 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v16;
  v16 = v15;
  sub_20EB911C0(&v16, v14);
}

void sub_20FECEDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FECEDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FECEE04(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "se3_type";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v9 = a2;
  sub_20FECF1DC(a1, (_BYTE **)&v9);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
        goto LABEL_23;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v5 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_r";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v5)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 8;
      sub_2101FC804(a1, (float **)&v9);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_t";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v6)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 20;
      sub_2101FC804(a1, (float **)&v9);
      break;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
LABEL_23:
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_r";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v7)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 8;
      sub_2101FCC24(a1, &v9);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v8 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_t";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v8)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 32;
      sub_2101FCC24(a1, &v9);
      break;
    case 4:
      sub_20FECF038(a1, a2);
      break;
    case 5:
      sub_20FECF108(a1, a2);
      break;
    default:
      return;
  }
}

void sub_20FECF038(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a2 + 104))
    sub_20E877AB8();
  v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "affine3x4";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v7 = 4;
  v8 = v4;
  sub_2101FC804(a1, (float **)&v7);
  v7 = 4;
  v8 = a2 + 24;
  sub_2101FC804(a1, (float **)&v7);
  v7 = 4;
  v8 = a2 + 40;
  sub_2101FC804(a1, (float **)&v7);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(a1 + 56) = v6 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20FECF108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a2 + 104) != 1)
    sub_20E877AB8();
  v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "affine3x4";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v7 = 4;
  v8 = v4;
  sub_2101FCC24(a1, &v7);
  v7 = 4;
  v8 = a2 + 40;
  sub_2101FCC24(a1, &v7);
  v7 = 4;
  v8 = a2 + 72;
  sub_2101FCC24(a1, &v7);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(a1 + 56) = v6 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20FECF1DC(uint64_t a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FECD5A0((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FB61C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FECF2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FECF2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FECF2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FECF2E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20E86A980(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FECF4FC(a2, v3 + 200);
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20E86A980(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FECF4FC(uint64_t a1, uint64_t a2)
{
  _BYTE v3[120];
  void *v4;
  char v5;
  char v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20FECCF94((uint64_t)v3, a2);
  sub_20FECF5E0(a1, (uint64_t)v3);
  if (v9 && v8 < 0)
    operator delete(__p);
  if (v6)
  {
    if (v5 < 0)
      operator delete(v4);
  }
}

void sub_20FECF598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FECF5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  char v15;

  v4 = a2 + 8;
  if (*(_QWORD *)(a1 + 40))
  {
    v5 = *(_QWORD **)(a1 + 24);
    v13 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v5, (uint64_t)&v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20FECF734(a1, v4);
  v6 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = *(_QWORD **)(a1 + 24);
    v14 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v7, (uint64_t)&v14, 1);
  }
  v8 = *(_QWORD **)(a1 + 24);
  v15 = v6;
  sub_20E86A980(v8, (uint64_t)&v15, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 144))
  {
    v10 = 1;
    sub_20E9E6F58(a1, &v10);
    sub_20E9E713C(a1, a2 + 120);
    if (*(_BYTE *)(a2 + 176))
    {
LABEL_7:
      v12 = 1;
      sub_20E9E6F58(a1, &v12);
      sub_20E9E713C(a1, a2 + 152);
      return;
    }
  }
  else
  {
    v9 = 0;
    sub_20E9E6F58(a1, &v9);
    if (*(_BYTE *)(a2 + 176))
      goto LABEL_7;
  }
  v11 = 0;
  sub_20E9E6F58(a1, &v11);
}

void sub_20FECF734(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  unsigned __int8 v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;

  v73 = *(_BYTE *)a2;
  sub_20E9E6F58(a1, &v73);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
        goto LABEL_84;
      v4 = (_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 40))
      {
        v5 = *(_QWORD **)(a1 + 24);
        v74 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v5, (uint64_t)&v74, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v6 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v6 + 1;
      if (v6 != -1)
      {
        v7 = *(_QWORD **)(a1 + 24);
        v74 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v7, (uint64_t)&v74, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v8 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v8 + 1;
      if (v8 != -1)
      {
        v9 = *(_QWORD **)(a1 + 24);
        v74 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v9, (uint64_t)&v74, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v10 + 1;
      if (v10 != -1)
      {
        v11 = *(_QWORD **)(a1 + 24);
        v75 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v11, (uint64_t)&v75, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v12 + 1;
      if (v12 != -1)
      {
        v13 = *(_QWORD **)(a1 + 24);
        v75 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v13, (uint64_t)&v75, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v14 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v14 + 1;
      if (v14 != -1)
      {
        v15 = *(_QWORD **)(a1 + 24);
        v75 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v15, (uint64_t)&v75, 1);
      }
      goto LABEL_15;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
        goto LABEL_84;
      v4 = (_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 40))
      {
        v39 = *(_QWORD **)(a1 + 24);
        v76 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v39, (uint64_t)&v76, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v40 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v40 + 1;
      if (v40 != -1)
      {
        v41 = *(_QWORD **)(a1 + 24);
        v76 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v41, (uint64_t)&v76, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v42 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v42 + 1;
      if (v42 != -1)
      {
        v43 = *(_QWORD **)(a1 + 24);
        v76 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v43, (uint64_t)&v76, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v44 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v44 + 1;
      if (v44 != -1)
      {
        v45 = *(_QWORD **)(a1 + 24);
        v77 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v45, (uint64_t)&v77, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v46 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v46 + 1;
      if (v46 != -1)
      {
        v47 = *(_QWORD **)(a1 + 24);
        v77 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v47, (uint64_t)&v77, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v48 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v48 + 1;
      if (v48 != -1)
      {
        v49 = *(_QWORD **)(a1 + 24);
        v77 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v49, (uint64_t)&v77, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      goto LABEL_82;
    case 4:
      if (*(_DWORD *)(a2 + 104))
        goto LABEL_84;
      v4 = (_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 40))
      {
        v16 = *(_QWORD **)(a1 + 24);
        v78 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v16, (uint64_t)&v78, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v17 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v17 + 1;
      if (v17 != -1)
      {
        v18 = *(_QWORD **)(a1 + 24);
        v78 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v18, (uint64_t)&v78, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v19 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v19 + 1;
      if (v19 != -1)
      {
        v20 = *(_QWORD **)(a1 + 24);
        v78 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v20, (uint64_t)&v78, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v21 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v21 + 1;
      if (v21 != -1)
      {
        v22 = *(_QWORD **)(a1 + 24);
        v78 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v22, (uint64_t)&v78, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v23 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v23 + 1;
      if (v23 != -1)
      {
        v24 = *(_QWORD **)(a1 + 24);
        v79 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v24, (uint64_t)&v79, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v25 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v25 + 1;
      if (v25 != -1)
      {
        v26 = *(_QWORD **)(a1 + 24);
        v79 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v26, (uint64_t)&v79, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v27 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v27 + 1;
      if (v27 != -1)
      {
        v28 = *(_QWORD **)(a1 + 24);
        v79 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v28, (uint64_t)&v79, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v29 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v29 + 1;
      if (v29 != -1)
      {
        v30 = *(_QWORD **)(a1 + 24);
        v79 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v30, (uint64_t)&v79, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v31 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v31 + 1;
      if (v31 != -1)
      {
        v32 = *(_QWORD **)(a1 + 24);
        v80 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v32, (uint64_t)&v80, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v33 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v33 + 1;
      if (v33 != -1)
      {
        v34 = *(_QWORD **)(a1 + 24);
        v80 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v34, (uint64_t)&v80, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v35 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v35 + 1;
      if (v35 != -1)
      {
        v36 = *(_QWORD **)(a1 + 24);
        v80 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v36, (uint64_t)&v80, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v37 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v37 + 1;
      if (v37 != -1)
      {
        v38 = *(_QWORD **)(a1 + 24);
        v80 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v38, (uint64_t)&v80, 1);
      }
LABEL_15:
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      goto LABEL_83;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1)
LABEL_84:
        sub_20E877AB8();
      v4 = (_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 40))
      {
        v50 = *(_QWORD **)(a1 + 24);
        v81 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v50, (uint64_t)&v81, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v51 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v51 + 1;
      if (v51 != -1)
      {
        v52 = *(_QWORD **)(a1 + 24);
        v81 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v52, (uint64_t)&v81, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v53 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v53 + 1;
      if (v53 != -1)
      {
        v54 = *(_QWORD **)(a1 + 24);
        v81 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v54, (uint64_t)&v81, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v55 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v55 + 1;
      if (v55 != -1)
      {
        v56 = *(_QWORD **)(a1 + 24);
        v81 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v56, (uint64_t)&v81, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v57 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v57 + 1;
      if (v57 != -1)
      {
        v58 = *(_QWORD **)(a1 + 24);
        v82 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v58, (uint64_t)&v82, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v59 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v59 + 1;
      if (v59 != -1)
      {
        v60 = *(_QWORD **)(a1 + 24);
        v82 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v60, (uint64_t)&v82, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v61 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v61 + 1;
      if (v61 != -1)
      {
        v62 = *(_QWORD **)(a1 + 24);
        v82 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v62, (uint64_t)&v82, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v63 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v63 + 1;
      if (v63 != -1)
      {
        v64 = *(_QWORD **)(a1 + 24);
        v82 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v64, (uint64_t)&v82, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v65 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v65 + 1;
      if (v65 != -1)
      {
        v66 = *(_QWORD **)(a1 + 24);
        v83 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v66, (uint64_t)&v83, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v67 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v67 + 1;
      if (v67 != -1)
      {
        v68 = *(_QWORD **)(a1 + 24);
        v83 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v68, (uint64_t)&v83, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v69 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v69 + 1;
      if (v69 != -1)
      {
        v70 = *(_QWORD **)(a1 + 24);
        v83 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v70, (uint64_t)&v83, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v71 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v71 + 1;
      if (v71 != -1)
      {
        v72 = *(_QWORD **)(a1 + 24);
        v83 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v72, (uint64_t)&v83, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
LABEL_82:
      std::ostream::operator<<();
LABEL_83:
      ++*v4;
      break;
    default:
      return;
  }
}

void sub_20FED01F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 1;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_2100B6A04((_QWORD *)a2);
  sub_20FED03A8(a2, v3 + 200);
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20FED03A8(uint64_t a1, uint64_t a2)
{
  _BYTE v3[120];
  void *v4;
  char v5;
  char v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20FECCF94((uint64_t)v3, a2);
  sub_20FED048C(a1, (uint64_t)v3);
  if (v9 && v8 < 0)
    operator delete(__p);
  if (v6)
  {
    if (v5 < 0)
      operator delete(v4);
  }
}

void sub_20FED0444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_20FED048C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  char *v10;
  char *v11;
  char *p_src;
  uint64_t v13;
  int64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  int64_t v17;
  _BOOL4 v18;
  uint64_t __src;
  uint64_t v21;

  v4 = a2 + 8;
  LODWORD(__src) = 1;
  v5 = a1 + 24;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_2100B6A04((_QWORD *)a1);
  sub_20FED070C(a1, v4);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v6 + 10) = *(_QWORD *)(a1 + 32) - v6 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(_BYTE *)(a2 + 144))
  {
    LOBYTE(__src) = 1;
    sub_2100B8FD4(v5, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    v7 = *(unsigned __int8 *)(a2 + 143);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 128);
    __src = v7;
    sub_2100B8FD4(v5, *(char **)(a1 + 32), (char *)&__src, (char *)&v21, 8);
    if (*(char *)(a2 + 143) < 0)
    {
      v8 = *(char **)(a2 + 120);
      v9 = *(_QWORD *)(a2 + 128);
      if (!v8)
      {
        if (v9)
        {
          v15 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
          v8 = 0;
          if (v15)
            goto LABEL_21;
        }
      }
    }
    else
    {
      v8 = (char *)(a2 + 120);
      v9 = *(unsigned __int8 *)(a2 + 143);
    }
    sub_2100B8FD4(v5, *(char **)(a1 + 32), v8, &v8[v9], v9);
    if (*(_BYTE *)(a2 + 176))
    {
LABEL_12:
      LOBYTE(__src) = 1;
      sub_2100B8FD4(v5, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      v16 = *(unsigned __int8 *)(a2 + 175);
      if ((v16 & 0x80u) != 0)
        v16 = *(_QWORD *)(a2 + 160);
      __src = v16;
      sub_2100B8FD4(v5, *(char **)(a1 + 32), (char *)&__src, (char *)&v21, 8);
      if ((*(char *)(a2 + 175) & 0x80000000) == 0)
      {
        p_src = (char *)(a2 + 152);
        v17 = *(unsigned __int8 *)(a2 + 175);
LABEL_19:
        v10 = *(char **)(a1 + 32);
        v11 = &p_src[v17];
        v13 = v5;
        v14 = v17;
        return sub_2100B8FD4(v13, v10, p_src, v11, v14);
      }
      p_src = *(char **)(a2 + 152);
      v17 = *(_QWORD *)(a2 + 160);
      if (p_src)
        goto LABEL_19;
      if (!v17)
        goto LABEL_19;
      v18 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
      p_src = 0;
      if (!v18)
        goto LABEL_19;
LABEL_21:
      abort();
    }
  }
  else
  {
    LOBYTE(__src) = 0;
    sub_2100B8FD4(v5, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (*(_BYTE *)(a2 + 176))
      goto LABEL_12;
  }
  LOBYTE(__src) = 0;
  v10 = *(char **)(a1 + 32);
  v11 = (char *)&__src + 1;
  p_src = (char *)&__src;
  v13 = v5;
  v14 = 1;
  return sub_2100B8FD4(v13, v10, p_src, v11, v14);
}

char *sub_20FED070C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  char *v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  char *v14;
  char __src;
  uint64_t v16;

  __src = *(_BYTE *)a2;
  v4 = a1 + 24;
  result = sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v16, 1);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
        goto LABEL_11;
      v6 = (char *)(a2 + 8);
      v7 = *(char **)(a1 + 32);
      v8 = (char *)(a2 + 20);
      v9 = 12;
      v10 = v4;
      v11 = v8;
      v12 = 12;
      goto LABEL_10;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
        goto LABEL_11;
      v6 = (char *)(a2 + 8);
      v7 = *(char **)(a1 + 32);
      v8 = (char *)(a2 + 32);
      v9 = 24;
      v10 = v4;
      v11 = v8;
      v12 = 24;
      goto LABEL_10;
    case 4:
      if (*(_DWORD *)(a2 + 104))
        goto LABEL_11;
      v13 = (char *)(a2 + 24);
      v9 = 16;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)(a2 + 8), (char *)(a2 + 24), 16);
      v7 = *(char **)(a1 + 32);
      v8 = (char *)(a2 + 40);
      v10 = v4;
      v6 = v13;
      v11 = v8;
      v12 = 16;
      goto LABEL_10;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1)
LABEL_11:
        sub_20E877AB8();
      v14 = (char *)(a2 + 40);
      v9 = 32;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)(a2 + 8), (char *)(a2 + 40), 32);
      v7 = *(char **)(a1 + 32);
      v8 = (char *)(a2 + 72);
      v10 = v4;
      v6 = v14;
      v11 = v8;
      v12 = 32;
LABEL_10:
      sub_2100B8FD4(v10, v7, v6, v11, v12);
      result = sub_2100B8FD4(v4, *(char **)(a1 + 32), v8, &v8[v9], v9);
      break;
    default:
      return result;
  }
  return result;
}

void sub_20FED0894(_DWORD *a1, uint64_t a2)
{
  _BYTE v3[120];
  void *v4;
  char v5;
  char v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20FECCF94((uint64_t)v3, a2);
  sub_20FED0978(a1, (uint64_t)v3);
  if (v9 && v8 < 0)
    operator delete(__p);
  if (v6)
  {
    if (v5 < 0)
      operator delete(v4);
  }
}

void sub_20FED0930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FED0978(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v4 = a2 + 8;
  v5 = a1[2];
  v7 = 1;
  (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v7);
  if (v5 < 1)
  {
    sub_20FED0AF8(a1, v4);
    if (*(_BYTE *)(a2 + 144))
      goto LABEL_5;
LABEL_8:
    v9 = 0;
    (*(void (**)(_DWORD *, char *))(*(_QWORD *)a1 + 80))(a1, &v9);
    if (*(_BYTE *)(a2 + 176))
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v5 == 2)
  {
    v8 = 1;
    (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v8);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
  sub_20FED0AF8(a1, v4);
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
  if (!*(_BYTE *)(a2 + 144))
    goto LABEL_8;
LABEL_5:
  v10 = 1;
  (*(void (**)(_DWORD *, char *))(*(_QWORD *)a1 + 80))(a1, &v10);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 120);
  if (*(_BYTE *)(a2 + 176))
  {
LABEL_6:
    v12 = 1;
    (*(void (**)(_DWORD *, char *))(*(_QWORD *)a1 + 80))(a1, &v12);
    return (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 152);
  }
LABEL_9:
  v11 = 0;
  return (*(uint64_t (**)(_DWORD *, char *))(*(_QWORD *)a1 + 80))(a1, &v11);
}

void sub_20FED0AF8(_BYTE *a1, uint64_t a2)
{
  _BYTE *v4;

  v4 = (_BYTE *)a2;
  sub_20FED0EDC(a1, &v4);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
        goto LABEL_9;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
      break;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
LABEL_9:
        sub_20E877AB8();
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 8);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
      break;
    case 4:
      sub_20FED0CB0((uint64_t)a1, a2);
      break;
    case 5:
      sub_20FED0DC4((uint64_t)a1, a2);
      break;
    default:
      return;
  }
}

uint64_t sub_20FED0CB0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 104))
    sub_20E877AB8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 36);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 44);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 48);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 52);
}

uint64_t sub_20FED0DC4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 104) != 1)
    sub_20E877AB8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 88);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 96);
}

void sub_20FED0EDC(_BYTE *a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_20FECD5A0((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_20E877AB8();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v6);
  }
}

void sub_20FED0FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FED0FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FED1000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FED1014(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FED1688(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FED2278(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FED2BA4(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FED3794(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FED4304(&v9, a1);
          else
            sub_20FED1178(&v8, (uint64_t *)a1);
        }
      }
    }
  }
}

void sub_20FED1178(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29[27];
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v29);
    sub_20FDE470C((uint64_t)&v30, v29);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v30);
        if (!v45)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v8;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v36;
    v10 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v11;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v12;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(_QWORD *)(v3 + 176) = v44;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v43;
    if (!(_QWORD)v43)
      goto LABEL_46;
    v15 = *((_QWORD *)&v43 + 1);
    v16 = (void *)v43;
    if (*((_QWORD *)&v43 + 1) == (_QWORD)v43)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v43;
LABEL_45:
    *((_QWORD *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v29);
  sub_20FDE470C((uint64_t)&v30, v29);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v17 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v17;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v36;
    v19 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v20 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v20;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v21 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v21;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(_QWORD *)(v3 + 176) = v44;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v30);
  if (v45)
  {
LABEL_38:
    v14 = v43;
    if (!(_QWORD)v43)
      goto LABEL_46;
    v23 = *((_QWORD *)&v43 + 1);
    v16 = (void *)v43;
    if (*((_QWORD *)&v43 + 1) == (_QWORD)v43)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v34 && SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  sub_20EB0580C((uint64_t)v29);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *a2;
  v29[0] = a2[1];
  v25 = v29[0];
  v30 = 6;
  (*(void (**)(uint64_t *, unsigned int *))(v24 + 104))(a2, &v30);
  if (v25 < 1)
  {
    if (v30 < 3)
      sub_20FDF69C0((uint64_t)&v30, (uint64_t)a2, v4, v30);
    else
      sub_20FDF6C34((uint64_t)a2, v4, v30);
  }
  else
  {
    sub_20FDF63C8((int *)v29, (uint64_t)a2, v4, v30);
  }
  v26 = *a2;
  v29[0] = a2[1];
  v27 = v29[0];
  v30 = 1;
  (*(void (**)(uint64_t *, unsigned int *))(v26 + 104))(a2, &v30);
  if (v27 < 1)
    sub_20FED5138(a2, v3 + 200);
  else
    sub_20FED4E50((int *)v29, a2, v3 + 200);
}

void sub_20FED1640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FED1688(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  char v31;
  uint64_t v32[27];
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v32);
    sub_20FDE470C((uint64_t)v33, v32);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v33);
        if (!v48)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v8 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v8;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v39;
    v10 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v11 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v11;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v12 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v12;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v15 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v46;
LABEL_45:
    *((_QWORD *)&v46 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v32);
  sub_20FDE470C((uint64_t)v33, v32);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v17 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v17;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v39;
    v19 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v20 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v20;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v21 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v21;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v33);
  if (v48)
  {
LABEL_38:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v23 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  sub_20EB0580C((uint64_t)v32);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF7D8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v32[0] = 0;
  sub_2100DB048(v27, v32);
  if (HIDWORD(v32[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  sub_20FED1BDC(a2, v3 + 200);
  v28 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v28 - 8);
  v29 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a2 + 48) = v28 - 8;
  *(_QWORD *)(a2 + 72) = v29 - 8;
}

void sub_20FED1B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FED1BDC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *exception;
  unint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "src_to_dst";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2101FF7D8(a1);
  v5 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a1 + 104) = 1;
  v6 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v11 = 0;
  sub_2100DB048(v6, &v11);
  if (HIDWORD(v11))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  sub_20FED1D2C(a1, a2 + 8);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  LODWORD(v7) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "src";
  *(_QWORD *)(a1 + 96) = 3;
  if (!(_DWORD)v7)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20FDED690((uint64_t *)a1, a2 + 120);
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "dst";
  *(_QWORD *)(a1 + 96) = 3;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20FDED690((uint64_t *)a1, a2 + 152);
}

void sub_20FED1D2C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unint64_t v6;
  float *v7;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  double *v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "se3_type";
  *(_QWORD *)(a1 + 96) = 8;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v25 = (_BYTE *)a2;
  sub_20FED2088((uint64_t *)a1, &v25);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      v5 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_r";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v5)
        *(_BYTE *)(a1 + 104) = 1;
      v6 = sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_210201290(v6, (float *)(a2 + 8));
      v7 = (float *)(a2 + 20);
      v8 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_t";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v8)
        *(_BYTE *)(a1 + 104) = 1;
      v9 = sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_210201290(v9, v7);
      break;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      v10 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_r";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v10)
        *(_BYTE *)(a1 + 104) = 1;
      v11 = sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_210201398(v11, (double *)(a2 + 8));
      v12 = (double *)(a2 + 32);
      v13 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_t";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v13)
        *(_BYTE *)(a1 + 104) = 1;
      v14 = sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_210201398(v14, v12);
      break;
    case 4:
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      v15 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "affine3x4";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v15)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF7D8(a1);
      v16 = sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_210201290(v16, (float *)(a2 + 8));
      v17 = sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_210201290(v17, (float *)(a2 + 24));
      v18 = sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_210201290(v18, (float *)(a2 + 40));
      goto LABEL_28;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "affine3x4";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF7D8(a1);
      v20 = sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_210201398(v20, (double *)(a2 + 8));
      v21 = sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_210201398(v21, (double *)(a2 + 40));
      v22 = sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_210201398(v22, (double *)(a2 + 72));
LABEL_28:
      v23 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v23 - 8);
      v24 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v24 - 8);
      *(_QWORD *)(a1 + 48) = v23 - 8;
      *(_QWORD *)(a1 + 72) = v24 - 8;
      break;
    default:
      return;
  }
}

void sub_20FED2088(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FFA90(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DB548(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20FF3CA24((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FED21EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FED2278(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v28);
    sub_20FDE470C((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v28);
  sub_20FDE470C((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20EB0580C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v28, a2, v4);
  LODWORD(v28[0]) = 1;
  sub_20E9EDADC(a2[6], v28);
  sub_20E90A71C(a2 + 2);
  sub_20FED275C(a2, v3 + 200);
  v24 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2);
  v26 = *(_QWORD *)(v24 - 16) - result + *(_QWORD *)(v24 - 8);
  if (v26)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v26);
  a2[4] -= 16;
  return result;
}

void sub_20FED2714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FED275C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  int v9;
  char v10;
  char v11;

  v4 = a2 + 8;
  v9 = 1;
  sub_20E9EDADC(a1[6], &v9);
  sub_20E90A71C(a1 + 2);
  sub_20FED28DC((uint64_t)a1, v4);
  v5 = a1[4];
  v6 = *(_QWORD *)(v5 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v5 - 8);
  if (v6)
    (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v6);
  a1[4] -= 16;
  v7 = (void **)(a2 + 120);
  v10 = 0;
  sub_20E9ED7B4(a1[6], &v10);
  if (v10)
  {
    if (!*(_BYTE *)(a2 + 144))
    {
      *v7 = 0;
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_BYTE *)(a2 + 144) = 1;
    }
    sub_20E9EE280(a1[6], (std::string *)(a2 + 120));
  }
  else if (*(_BYTE *)(a2 + 144))
  {
    if (*(char *)(a2 + 143) < 0)
      operator delete(*v7);
    *(_BYTE *)(a2 + 144) = 0;
  }
  v8 = (void **)(a2 + 152);
  v11 = 0;
  sub_20E9ED7B4(a1[6], &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a2 + 176))
    {
      *v8 = 0;
      *(_QWORD *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_BYTE *)(a2 + 176) = 1;
    }
    sub_20E9EE280(a1[6], (std::string *)(a2 + 152));
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) < 0)
      operator delete(*v8);
    *(_BYTE *)(a2 + 176) = 0;
  }
}

void sub_20FED28DC(uint64_t a1, uint64_t a2)
{
  int v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;

  v19 = 0;
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v19);
  v4 = v19;
  *(_BYTE *)a2 = v19;
  switch(v4)
  {
    case 1:
      v5 = (float *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      v6 = *(_QWORD *)(a1 + 48);
      sub_20E9EDF48(v6, v5);
      sub_20E9EDF48(v6, (float *)(a2 + 12));
      sub_20E9EDF48(v6, (float *)(a2 + 16));
      v7 = *(_QWORD *)(a1 + 48);
      sub_20E9EDF48(v7, (float *)(a2 + 20));
      sub_20E9EDF48(v7, (float *)(a2 + 24));
      v8 = (float *)(a2 + 28);
      goto LABEL_11;
    case 2:
      v9 = (double *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)v9 = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      v10 = *(_QWORD *)(a1 + 48);
      sub_20E9EE078(v10, v9);
      sub_20E9EE078(v10, (double *)(a2 + 16));
      sub_20E9EE078(v10, (double *)(a2 + 24));
      v11 = *(_QWORD *)(a1 + 48);
      sub_20E9EE078(v11, (double *)(a2 + 32));
      sub_20E9EE078(v11, (double *)(a2 + 40));
      v12 = (double *)(a2 + 48);
      goto LABEL_15;
    case 4:
      v13 = (float *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)v13 = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      v14 = *(_QWORD *)(a1 + 48);
      sub_20E9EDF48(v14, v13);
      sub_20E9EDF48(v14, (float *)(a2 + 12));
      sub_20E9EDF48(v14, (float *)(a2 + 16));
      sub_20E9EDF48(v14, (float *)(a2 + 20));
      v15 = *(_QWORD *)(a1 + 48);
      sub_20E9EDF48(v15, (float *)(a2 + 24));
      sub_20E9EDF48(v15, (float *)(a2 + 28));
      sub_20E9EDF48(v15, (float *)(a2 + 32));
      sub_20E9EDF48(v15, (float *)(a2 + 36));
      v7 = *(_QWORD *)(a1 + 48);
      sub_20E9EDF48(v7, (float *)(a2 + 40));
      sub_20E9EDF48(v7, (float *)(a2 + 44));
      sub_20E9EDF48(v7, (float *)(a2 + 48));
      v8 = (float *)(a2 + 52);
LABEL_11:
      sub_20E9EDF48(v7, v8);
      return;
    case 5:
      v16 = (double *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)v16 = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      v17 = *(_QWORD *)(a1 + 48);
      sub_20E9EE078(v17, v16);
      sub_20E9EE078(v17, (double *)(a2 + 16));
      sub_20E9EE078(v17, (double *)(a2 + 24));
      sub_20E9EE078(v17, (double *)(a2 + 32));
      v18 = *(_QWORD *)(a1 + 48);
      sub_20E9EE078(v18, (double *)(a2 + 40));
      sub_20E9EE078(v18, (double *)(a2 + 48));
      sub_20E9EE078(v18, (double *)(a2 + 56));
      sub_20E9EE078(v18, (double *)(a2 + 64));
      v11 = *(_QWORD *)(a1 + 48);
      sub_20E9EE078(v11, (double *)(a2 + 72));
      sub_20E9EE078(v11, (double *)(a2 + 80));
      sub_20E9EE078(v11, (double *)(a2 + 88));
      v12 = (double *)(a2 + 96);
LABEL_15:
      sub_20E9EE078(v11, v12);
      break;
    default:
      return;
  }
}

void sub_20FED2BA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  char v31;
  uint64_t v32[27];
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v32);
    sub_20FDE470C((uint64_t)v33, v32);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v33);
        if (!v48)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v8 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v8;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v39;
    v10 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v11 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v11;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v12 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v12;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v15 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v46;
LABEL_45:
    *((_QWORD *)&v46 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v32);
  sub_20FDE470C((uint64_t)v33, v32);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v17 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v17;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v39;
    v19 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v20 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v20;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v21 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v21;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v33);
  if (v48)
  {
LABEL_38:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v23 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  sub_20EB0580C((uint64_t)v32);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF2E8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v32[0] = 0;
  sub_2100DA8B0(v27, v32);
  if (HIDWORD(v32[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  sub_20FED30F8(a2, v3 + 200);
  v28 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v28 - 8);
  v29 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a2 + 48) = v28 - 8;
  *(_QWORD *)(a2 + 72) = v29 - 8;
}

void sub_20FED30B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FED30F8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *exception;
  unint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "src_to_dst";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2101FF2E8(a1);
  v5 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a1 + 104) = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v11 = 0;
  sub_2100DA8B0(v6, &v11);
  if (HIDWORD(v11))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  sub_20FED3248(a1, a2 + 8);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  LODWORD(v7) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "src";
  *(_QWORD *)(a1 + 96) = 3;
  if (!(_DWORD)v7)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20FD25354((uint64_t *)a1, a2 + 120);
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "dst";
  *(_QWORD *)(a1 + 96) = 3;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20FD25354((uint64_t *)a1, a2 + 152);
}

void sub_20FED3248(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unint64_t v6;
  float *v7;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  double *v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "se3_type";
  *(_QWORD *)(a1 + 96) = 8;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v25 = (_BYTE *)a2;
  sub_20FED35A4((uint64_t *)a1, &v25);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      v5 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_r";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v5)
        *(_BYTE *)(a1 + 104) = 1;
      v6 = sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2102004AC(v6, (float *)(a2 + 8));
      v7 = (float *)(a2 + 20);
      v8 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_t";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v8)
        *(_BYTE *)(a1 + 104) = 1;
      v9 = sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2102004AC(v9, v7);
      break;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      v10 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_r";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v10)
        *(_BYTE *)(a1 + 104) = 1;
      v11 = sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2102005DC(v11, (double *)(a2 + 8));
      v12 = (double *)(a2 + 32);
      v13 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_t";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v13)
        *(_BYTE *)(a1 + 104) = 1;
      v14 = sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2102005DC(v14, v12);
      break;
    case 4:
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      v15 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "affine3x4";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v15)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF2E8(a1);
      v16 = sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2102004AC(v16, (float *)(a2 + 8));
      v17 = sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2102004AC(v17, (float *)(a2 + 24));
      v18 = sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2102004AC(v18, (float *)(a2 + 40));
      goto LABEL_28;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "affine3x4";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF2E8(a1);
      v20 = sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2102005DC(v20, (double *)(a2 + 8));
      v21 = sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2102005DC(v21, (double *)(a2 + 40));
      v22 = sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2102005DC(v22, (double *)(a2 + 72));
LABEL_28:
      v23 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v23 - 8);
      v24 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v24 - 8);
      *(_QWORD *)(a1 + 48) = v23 - 8;
      *(_QWORD *)(a1 + 72) = v24 - 8;
      break;
    default:
      return;
  }
}

void sub_20FED35A4(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20FF3CA24((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FED3708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FED3794(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  void *__p;
  uint64_t v32;
  char v33;
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)&__p);
    sub_20FDE470C((uint64_t)v34, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v30, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)&__p);
  sub_20FDE470C((uint64_t)v34, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v30, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20EB0580C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20E9E840C(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20FDF3288((uint64_t)&__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v33 < 0)
      {
        if (v32 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_92:
          v29 = 0;
          if (v33 < 0)
            goto LABEL_95;
          goto LABEL_81;
        }
      }
      else if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_92;
      }
      v29 = 1;
      if (v33 < 0)
LABEL_95:
        operator delete(__p);
LABEL_81:
      if (*(_BYTE *)(a2 + 131))
        v28 = 0;
      else
        v28 = v29;
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 1;
  sub_20E9E840C(a2, &__p);
  sub_20FED3DB0(a2, v3 + 200);
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v33 < 0)
      {
        if (v32 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_77:
          v27 = 0;
          if (v33 < 0)
            goto LABEL_80;
          goto LABEL_66;
        }
      }
      else if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_77;
      }
      v27 = 1;
      if (v33 < 0)
LABEL_80:
        operator delete(__p);
LABEL_66:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
}

void sub_20FED3D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20FED3DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  char v6;
  char v7;
  void **v8;
  double result;
  char v10;
  void *__p[2];
  uint64_t v12;

  v4 = a2 + 8;
  LODWORD(__p[0]) = 1;
  sub_20E9E840C(a1, __p);
  sub_20FED4060(a1, v4);
  if (!*(_BYTE *)(a1 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a1, (uint64_t)__p);
      if (SHIBYTE(v12) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_17:
          v7 = 0;
          if (SHIBYTE(v12) < 0)
            goto LABEL_20;
          goto LABEL_6;
        }
      }
      else if (SHIBYTE(v12) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_17;
      }
      v7 = 1;
      if (SHIBYTE(v12) < 0)
LABEL_20:
        operator delete(__p[0]);
LABEL_6:
      if (*(_BYTE *)(a1 + 131))
        v6 = 0;
      else
        v6 = v7;
    }
    while ((v6 & 1) != 0);
  }
  v5 = (void **)(a2 + 120);
  v10 = 0;
  sub_20E9E7AC8(a1, &v10);
  if (v10)
  {
    if (*(_BYTE *)(a2 + 144))
    {
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
        goto LABEL_28;
    }
    else
    {
      *v5 = 0;
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_BYTE *)(a2 + 144) = 1;
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
      {
LABEL_28:
        sub_20E9E9FEC(a1, (uint64_t)__p);
        if (*(char *)(a2 + 143) < 0)
          operator delete(*v5);
        *(_OWORD *)v5 = *(_OWORD *)__p;
        *(_QWORD *)(a2 + 136) = v12;
        ++*(_QWORD *)(a1 + 104);
        goto LABEL_31;
      }
    }
    if (*(_BYTE *)(a1 + 131))
    {
      *(_BYTE *)(a1 + 132) = 1;
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  if (*(_BYTE *)(a2 + 144))
  {
    if (*(char *)(a2 + 143) < 0)
      operator delete(*v5);
    *(_BYTE *)(a2 + 144) = 0;
  }
LABEL_31:
  v8 = (void **)(a2 + 152);
  v10 = 0;
  sub_20E9E7AC8(a1, &v10);
  if (v10)
  {
    if (*(_BYTE *)(a2 + 176))
    {
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
        goto LABEL_43;
    }
    else
    {
      *v8 = 0;
      *(_QWORD *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_BYTE *)(a2 + 176) = 1;
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
      {
LABEL_43:
        sub_20E9E9FEC(a1, (uint64_t)__p);
        if (*(char *)(a2 + 175) < 0)
          operator delete(*v8);
        result = *(double *)__p;
        *(_OWORD *)v8 = *(_OWORD *)__p;
        *(_QWORD *)(a2 + 168) = v12;
        ++*(_QWORD *)(a1 + 104);
        return result;
      }
    }
    if (*(_BYTE *)(a1 + 131))
    {
      *(_BYTE *)(a1 + 132) = 1;
      return result;
    }
    goto LABEL_43;
  }
  if (*(_BYTE *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) < 0)
      operator delete(*v8);
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

void sub_20FED4060(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  unsigned __int8 v10;

  v10 = 0;
  sub_20E9E7AC8(a1, &v10);
  v4 = v10;
  *(_BYTE *)a2 = v10;
  switch(v4)
  {
    case 1:
      v5 = (_DWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      sub_20E9E8D84(a1, v5);
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 12));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 16));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 20));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 24));
      v6 = (_DWORD *)(a2 + 28);
      goto LABEL_11;
    case 2:
      v7 = (_QWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)v7 = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      sub_20E9E8FD8(a1, v7);
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 16));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 24));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 32));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 40));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 48));
      break;
    case 4:
      v8 = (_DWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)v8 = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      sub_20E9E8D84(a1, v8);
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 12));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 16));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 20));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 24));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 28));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 32));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 36));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 40));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 44));
      sub_20E9E8D84(a1, (_DWORD *)(a2 + 48));
      v6 = (_DWORD *)(a2 + 52);
LABEL_11:
      sub_20E9E8D84(a1, v6);
      break;
    case 5:
      v9 = (_QWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)v9 = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      sub_20E9E8FD8(a1, v9);
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 16));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 24));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 32));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 40));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 48));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 56));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 64));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 72));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 80));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 88));
      sub_20E9E8FD8(a1, (_QWORD *)(a2 + 96));
      break;
    default:
      return;
  }
}

void sub_20FED4304(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FED4778((uint64_t)v25, a2, v3 + 200);
}

void sub_20FED4730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FED4778(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;
  char v12;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_2100B6EE0(a2);
  sub_20FED4854((uint64_t)&v12, a2, a3 + 8);
  sub_20FDF5298(a2, a3 + 120);
  sub_20FDF5298(a2, a3 + 152);
  v9 = a2[12];
  v10 = a2[9];
  a2[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_20FED4840(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FED4854(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_2100B6EE0(a2);
  sub_20FED4924(a2, a3);
  v9 = a2[12];
  v10 = a2[9];
  a2[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_20FED4910(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_20FED4924(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  double result;
  std::logic_error *exception;
  _OWORD *v6;

  v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v3 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  *(_BYTE *)a2 = v3;
  switch(v3)
  {
    case 1:
      sub_20FED4A58(a1, a2);
      break;
    case 2:
      *(_QWORD *)&result = sub_20FED4B70(a1, a2).n128_u64[0];
      break;
    case 4:
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      v6 = (_OWORD *)(a2 + 8);
      *(_QWORD *)&result = sub_20FED4C8C(a1, &v6).n128_u64[0];
      break;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      v6 = (_OWORD *)(a2 + 8);
      *(_QWORD *)&result = sub_20FED4D68(a1, &v6).n128_u64[0];
      break;
    default:
      return result;
  }
  return result;
}

void sub_20FED4A44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FED4A58(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::logic_error *exception;

  v2 = (_QWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 104) != 2)
  {
    *v2 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 104) = 2;
  }
  v3 = result[6];
  v4 = result[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 0xB)
    goto LABEL_10;
  v7 = (uint64_t *)(result[3] + v3);
  v8 = *v7;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)v7 + 2);
  *v2 = v8;
  v9 = result[7];
  v10 = result[6] + 12;
  result[6] = v10;
  v5 = v9 >= v10;
  v11 = v9 - v10;
  if (!v5)
    v11 = 0;
  if (v11 <= 0xB)
  {
LABEL_10:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v12 = result[3] + v10;
  v13 = *(_QWORD *)v12;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(v12 + 8);
  *(_QWORD *)(a2 + 20) = v13;
  result[6] += 12;
  return result;
}

void sub_20FED4B48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FED4B5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20FED4B70(_QWORD *a1, uint64_t a2)
{
  _OWORD *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  __int128 *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __n128 result;
  std::logic_error *exception;

  v2 = (_OWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 104) != 3)
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *v2 = 0u;
    *(_DWORD *)(a2 + 104) = 3;
  }
  v3 = a1[6];
  v4 = a1[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 0x17)
    goto LABEL_10;
  v7 = (__int128 *)(a1[3] + v3);
  v8 = *v7;
  *(_QWORD *)(a2 + 24) = *((_QWORD *)v7 + 2);
  *v2 = v8;
  v9 = a1[7];
  v10 = a1[6] + 24;
  a1[6] = v10;
  v5 = v9 >= v10;
  v11 = v9 - v10;
  if (!v5)
    v11 = 0;
  if (v11 <= 0x17)
  {
LABEL_10:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v12 = (__n128 *)(a1[3] + v10);
  result = *v12;
  *(_QWORD *)(a2 + 48) = v12[1].n128_u64[0];
  *(__n128 *)(a2 + 32) = result;
  a1[6] += 24;
  return result;
}

void sub_20FED4C64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FED4C78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20FED4C8C(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 result;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  v6 = (_OWORD *)*a2;
  *(_OWORD *)*a2 = *(_OWORD *)(a1[3] + v3);
  v7 = a1[7];
  v8 = a1[6] + 16;
  a1[6] = v8;
  v4 = v7 >= v8;
  v9 = v7 - v8;
  if (!v4)
    v9 = 0;
  if (v9 < 0x10)
    goto LABEL_11;
  v6[1] = *(_OWORD *)(a1[3] + v8);
  v10 = a1[7];
  v11 = a1[6] + 16;
  a1[6] = v11;
  v4 = v10 >= v11;
  v12 = v10 - v11;
  if (!v4)
    v12 = 0;
  if (v12 < 0x10)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  result = *(__n128 *)(a1[3] + v11);
  v6[2] = result;
  a1[6] += 16;
  return result;
}

void sub_20FED4D54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20FED4D68(_QWORD *a1, _OWORD **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 result;
  __int128 v19;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 0x1F)
    goto LABEL_11;
  v6 = *a2;
  v7 = (_OWORD *)(a1[3] + v3);
  v8 = v7[1];
  *v6 = *v7;
  v6[1] = v8;
  v9 = a1[7];
  v10 = a1[6] + 32;
  a1[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 < 0x20)
    goto LABEL_11;
  v12 = (_OWORD *)(a1[3] + v10);
  v13 = v12[1];
  v6[2] = *v12;
  v6[3] = v13;
  v14 = a1[7];
  v15 = a1[6] + 32;
  a1[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 < 0x20)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v17 = a1[3] + v15;
  result = *(__n128 *)v17;
  v19 = *(_OWORD *)(v17 + 16);
  v6[4] = *(_OWORD *)v17;
  v6[5] = v19;
  a1[6] += 32;
  return result;
}

void sub_20FED4E3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FED4E50(int *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;

  v5 = *a1;
  if (*a1 == 2)
  {
    v9 = 1;
    (*(void (**)(uint64_t *, unsigned int *))(*a2 + 104))(a2, &v9);
    if (v9 >= 2)
    {
      v7 = v9;
      v8 = sub_20FED4F3C();
      sub_20E9F5C70((std::string *)v8, v7, 1u);
    }
    v5 = *a1;
  }
  if (v5 <= 0)
  {
    sub_20FED5138(a2, a3);
  }
  else
  {
    (*(void (**)(uint64_t *))(*a2 + 16))(a2);
    sub_20FED5138(a2, a3);
    (*(void (**)(uint64_t *))(*a2 + 24))(a2);
  }
}

__int128 *sub_20FED4F3C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57158);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57158))
    return &xmmword_254A57140;
  v2 = (char *)sub_20FED5018();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A57140, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A57150 = *((_QWORD *)v2 + 2);
    xmmword_254A57140 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57140, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57158);
  return &xmmword_254A57140;
}

void sub_20FED5000(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57158);
  _Unwind_Resume(a1);
}

void *sub_20FED5018()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57178);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A57178))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::Transform3Sample]", qword_254A57160);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A57160, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57178);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A57198);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57198))
    return &unk_254A57180;
  sub_21023CD84((uint64_t)qword_254A57160, (uint64_t)&unk_254A57180);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A57180, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57198);
  return &unk_254A57180;
}

void sub_20FED5108(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57198);
  _Unwind_Resume(a1);
}

void sub_20FED5120(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57178);
  _Unwind_Resume(a1);
}

void sub_20FED5138(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;

  v4 = a2 + 8;
  v5 = *a1;
  v8 = a1[1];
  v9 = 1;
  (*(void (**)(uint64_t *, int *))(v5 + 104))(a1, &v9);
  if ((int)v8 < 1)
    sub_20FED55A0(a1, v4);
  else
    sub_20FED52B8((int *)&v8, a1, v4);
  v6 = (void **)(a2 + 120);
  v10 = 0;
  (*(void (**)(uint64_t *, char *))(*a1 + 80))(a1, &v10);
  if (v10)
  {
    if (!*(_BYTE *)(a2 + 144))
    {
      *v6 = 0;
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_BYTE *)(a2 + 144) = 1;
    }
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 120);
  }
  else if (*(_BYTE *)(a2 + 144))
  {
    if (*(char *)(a2 + 143) < 0)
      operator delete(*v6);
    *(_BYTE *)(a2 + 144) = 0;
  }
  v7 = (void **)(a2 + 152);
  v11 = 0;
  (*(void (**)(uint64_t *, char *))(*a1 + 80))(a1, &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a2 + 176))
    {
      *v7 = 0;
      *(_QWORD *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_BYTE *)(a2 + 176) = 1;
    }
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 152);
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) < 0)
      operator delete(*v7);
    *(_BYTE *)(a2 + 176) = 0;
  }
}

void sub_20FED52B8(int *a1, _BYTE *a2, uint64_t a3)
{
  int v5;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;

  v5 = *a1;
  if (*a1 == 2)
  {
    v9 = 1;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
    if (v9 >= 2)
    {
      v7 = v9;
      v8 = sub_20FED53A4();
      sub_20E9F5C70((std::string *)v8, v7, 1u);
    }
    v5 = *a1;
  }
  if (v5 <= 0)
  {
    sub_20FED55A0(a2, a3);
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FED55A0(a2, a3);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
  }
}

__int128 *sub_20FED53A4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A571B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A571B8))
    return &xmmword_254A571A0;
  v2 = (char *)sub_20FED5480();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A571A0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A571B0 = *((_QWORD *)v2 + 2);
    xmmword_254A571A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A571A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A571B8);
  return &xmmword_254A571A0;
}

void sub_20FED5468(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A571B8);
  _Unwind_Resume(a1);
}

void *sub_20FED5480()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A571D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A571D8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::SE3Sample]", qword_254A571C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A571C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A571D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A571F8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A571F8))
    return &unk_254A571E0;
  sub_21023CD84((uint64_t)qword_254A571C0, (uint64_t)&unk_254A571E0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A571E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A571F8);
  return &unk_254A571E0;
}

void sub_20FED5570(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A571F8);
  _Unwind_Resume(a1);
}

void sub_20FED5588(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A571D8);
  _Unwind_Resume(a1);
}

void sub_20FED55A0(_BYTE *a1, uint64_t a2)
{
  _QWORD *v4;
  _OWORD *v5;
  _BYTE *v6;

  v6 = (_BYTE *)a2;
  sub_20FED59CC(a1, &v6);
  switch(*(_BYTE *)a2)
  {
    case 1:
      v4 = (_QWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *v4 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)a1 + 128))(a1, v4);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
      break;
    case 2:
      v5 = (_OWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *v5 = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      (*(void (**)(_BYTE *, _OWORD *))(*(_QWORD *)a1 + 136))(a1, v5);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
      break;
    case 4:
      sub_20FED5778((uint64_t)a1, a2);
      break;
    case 5:
      sub_20FED589C((uint64_t)a1, a2);
      break;
    default:
      return;
  }
}

uint64_t sub_20FED5778(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  v4 = (_OWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 104))
  {
    v4[1] = 0u;
    v4[2] = 0u;
    *v4 = 0u;
    *(_DWORD *)(a2 + 104) = 0;
  }
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 128))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 36);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 44);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 48);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 52);
}

uint64_t sub_20FED589C(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  v4 = (_OWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 104) != 1)
  {
    v4[4] = 0u;
    v4[5] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *v4 = 0u;
    v4[1] = 0u;
    *(_DWORD *)(a2 + 104) = 1;
  }
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 136))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 88);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 96);
}

void sub_20FED59CC(_BYTE *a1, _BYTE **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_21023865C(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_20FF3CA24((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v6 + 128);
    MEMORY[0x212BC6398](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 80))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20FED5B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20FD0DE48(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FED5B80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24CA079B8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 112) = 0;
  *(_BYTE *)(v4 + 136) = 0;
  if (*(_BYTE *)(a1 + 136))
  {
    *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
    *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(v4 + 136) = 1;
  }
  *(_BYTE *)(v4 + 176) = 0;
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
  *(_BYTE *)(v4 + 224) = 0;
  if (*(_BYTE *)(a1 + 224))
  {
    *(_OWORD *)(v4 + 176) = *(_OWORD *)(a1 + 176);
    *(_QWORD *)(v4 + 192) = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    v6 = (unsigned __int128 *)(a1 + 208);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 208) = v7;
    *(_BYTE *)(v4 + 224) = 1;
  }
  *(_BYTE *)(v4 + 240) = 0;
  *(_BYTE *)(v4 + 264) = 0;
  if (*(_BYTE *)(a1 + 264))
  {
    *(_OWORD *)(v4 + 240) = *(_OWORD *)(a1 + 240);
    *(_QWORD *)(v4 + 256) = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_BYTE *)(v4 + 264) = 1;
  }
  *(_QWORD *)v4 = &off_24CA07938;
  *a2 = &off_24CA0C0E8;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20FED5D2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FED5D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _QWORD v17[5];
  uint64_t *v18;
  _QWORD v19[5];
  _QWORD *v20;
  char v21;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[6];

  v33[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v28);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v28);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v28);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v22);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v22);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v22);
  }
  v19[0] = v28;
  v19[1] = &v29;
  v19[2] = &v30;
  v19[3] = &v31;
  v19[4] = &v32;
  v20 = v33;
  v17[0] = v22;
  v17[1] = &v23;
  v17[2] = &v24;
  v17[3] = &v25;
  v17[4] = &v26;
  v18 = &v27;
  if (!sub_20FF1D2E8((uint64_t)&v21, v19, v17))
    goto LABEL_34;
  if (!*((_BYTE *)v20 + 24) || !*((_BYTE *)v18 + 24))
  {
    if ((*((_BYTE *)v20 + 24) != 0) == (*((_BYTE *)v18 + 24) != 0))
      goto LABEL_22;
LABEL_34:
    v11 = 0;
    goto LABEL_35;
  }
  v8 = (unsigned __int8 *)*v20;
  v9 = (unsigned __int8 *)v20[1];
  v10 = (unsigned __int8 *)*v18;
  if (&v9[-*v20] != (unsigned __int8 *)(v18[1] - *v18))
    goto LABEL_34;
  if (v8 != v9)
  {
    while (sub_20FF1C59C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_34;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_34;
  v11 = (*(_BYTE *)(a1 + 256) != 0) == (*(_BYTE *)(a2 + 256) != 0);
  if (*(_BYTE *)(a1 + 256) && *(_BYTE *)(a2 + 256))
  {
    v12 = *(unsigned int *)(a1 + 248);
    v13 = *(_DWORD *)(a2 + 248);
    v14 = v13 == -1;
    v15 = v13 != -1 && v13 == v12;
    if ((_DWORD)v12 == -1)
      v11 = v14;
    else
      v11 = v15;
    if ((_DWORD)v12 != -1 && v15)
    {
      v19[0] = v17;
      v11 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))off_24CA08440[v12])(v19, a1 + 208, a2 + 208);
    }
  }
LABEL_35:
  sub_20EB0580C((uint64_t)v22);
  sub_20EB0580C((uint64_t)v28);
  return v11;
}

void sub_20FED5FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FED5FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

BOOL sub_20FED5FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  _BOOL8 result;

  if (*(_QWORD *)a2 != *(_QWORD *)a3)
    return 0;
  v3 = *(unsigned __int8 *)(a3 + 16);
  if (*(_BYTE *)(a2 + 16))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if ((*(_BYTE *)(a2 + 16) != 0) == (v3 != 0))
      goto LABEL_10;
    return 0;
  }
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a3 + 8))
    return 0;
LABEL_10:
  result = (*(_BYTE *)(a2 + 32) != 0) == (*(_BYTE *)(a3 + 32) != 0);
  if (*(_BYTE *)(a2 + 32))
  {
    if (*(_BYTE *)(a3 + 32))
      return *(_QWORD *)(a2 + 24) == *(_QWORD *)(a3 + 24);
  }
  return result;
}

BOOL sub_20FED606C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v3;

  if (*a2 != *a3 || *((_QWORD *)a2 + 1) != *((_QWORD *)a3 + 1))
    return 0;
  if (a2[24])
    v3 = a3[24] == 0;
  else
    v3 = 1;
  if (v3)
    return (a2[24] != 0) == (a3[24] != 0);
  else
    return *((_QWORD *)a2 + 2) == *((_QWORD *)a3 + 2);
}

void sub_20FED60D8(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FED6450(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FED714C(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FED7A40(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FED873C(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FED8D70(&v9, (uint64_t)a1);
          else
            sub_20FED623C(&v8, a1);
        }
      }
    }
  }
}

uint64_t sub_20FED623C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    LODWORD(v13) = 4;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v9 = v13;
    if (v8 < 1)
    {
      sub_20FE13A54((uint64_t)a2, v4, v13);
      goto LABEL_17;
    }
    if (v8 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE13A54((uint64_t)a2, v4, v9);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    LODWORD(v13) = 5;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v11 = v13;
    if (v10 < 1)
    {
      sub_20FE133CC((uint64_t)a2, v4, v13);
      goto LABEL_17;
    }
    if (v10 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE133CC((uint64_t)a2, v4, v11);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    LODWORD(v13) = 6;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v7 = v13;
    if (v6 < 1)
    {
      sub_20FDEB904((uint64_t)a2, v4, v13);
      goto LABEL_17;
    }
    if (v6 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FDEB904((uint64_t)a2, v4, v7);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
LABEL_17:
  v13 = *((_QWORD *)a2 + 1);
  return sub_20FED9308((int *)&v13, a2, (__int128 *)(v3 + 200));
}

void sub_20FED6450(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  _OWORD v22[3];

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    *(_QWORD *)&v21 = "version";
    *((_QWORD *)&v21 + 1) = 7;
    LODWORD(v22[0]) = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, v22);
    sub_20FE0EFCC(a2, v4, v22[0]);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      *(_QWORD *)&v21 = "version";
      *((_QWORD *)&v21 + 1) = 7;
      LODWORD(v22[0]) = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, v22);
      sub_20FDE4E60(a2, v4, v22[0]);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    *(_QWORD *)&v21 = "version";
    *((_QWORD *)&v21 + 1) = 7;
    LODWORD(v22[0]) = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, v22);
    sub_20FE0E65C(a2, v4, v22[0]);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FAEA0(a2);
  *(_QWORD *)&v21 = "version";
  *((_QWORD *)&v21 + 1) = 7;
  LODWORD(v22[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, v22);
  v17 = v22[0];
  v18 = *(_OWORD *)(v3 + 216);
  v21 = *(_OWORD *)(v3 + 200);
  v22[0] = v18;
  v19 = *(_OWORD *)(v3 + 248);
  v22[1] = *(_OWORD *)(v3 + 232);
  v22[2] = v19;
  sub_20FED6760(a2, (unsigned __int8 *)&v21, v17);
  v20 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(a2 + 56) = v20 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FED6760(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  _BYTE *v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  std::runtime_error *exception;
  const char *v23;
  unint64_t v24;
  int v25;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "sync_type";
    v6 = a1 + 72;
    v8 = (_BYTE *)(a1 + 88);
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 9;
    v9 = (_QWORD *)(a1 + 80);
    if (!v7)
      *v8 = 1;
    v10 = *a2;
    goto LABEL_14;
  }
  v9 = (_QWORD *)(a1 + 80);
  v6 = a1 + 72;
  v8 = (_BYTE *)(a1 + 88);
  v10 = *a2;
  if (*(_BYTE *)(a1 + 88))
    v11 = *(_QWORD *)(a1 + 80) == 7;
  else
    v11 = 0;
  if (!v11
    || (**(_DWORD **)v6 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v6 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_14:
    LOBYTE(v23) = 6;
    v24 = v10;
    v13 = (unsigned __int8 *)sub_2101FAC64(a1);
    v14 = *v13;
    *v13 = 6;
    LOBYTE(v23) = v14;
    v15 = (void **)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v24;
    v24 = (unint64_t)v15;
    sub_20EB07D94((void ***)&v24, v14);
  }
  if (a3 < 2)
    return;
  v16 = *a2;
  if (!*a2)
    return;
  if (v16 != 2)
  {
    if (v16 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid sync type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (!*((_DWORD *)a2 + 12))
    {
      v17 = (uint64_t)(a2 + 8);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v18 = *v8;
        *(_QWORD *)v6 = "value";
        *v9 = 5;
        if (!v18)
          *v8 = 1;
      }
      sub_2101FAEA0(a1);
      v23 = "version";
      v24 = 7;
      v25 = 1;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v19 = *v8;
        *(_QWORD *)v6 = "version";
        *v9 = 7;
        if (!v19)
          *v8 = 1;
      }
      sub_2101FD244(a1, &v25);
      sub_20FED6A1C(a1, v17);
      v20 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v20 - 8);
      *(_QWORD *)(a1 + 56) = v20 - 8;
      if (*(_BYTE *)(a1 + 88))
        *v8 = 0;
      return;
    }
LABEL_34:
    sub_20E877AB8();
  }
  if (*((_DWORD *)a2 + 12) != 1)
    goto LABEL_34;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v21 = *v8;
    *(_QWORD *)v6 = "value";
    *v9 = 5;
    if (!v21)
      *v8 = 1;
  }
  sub_20FED6D8C((uint64_t)&v23, a1, a2 + 8);
}

void sub_20FED69F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FED6A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FED6A1C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _QWORD *v8;
  BOOL v9;
  BOOL v10;
  unsigned __int8 *v11;
  int v12;
  void **v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  void **v18;
  int v19;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  unsigned __int8 *v24;
  void **v25;
  char v26;
  void **v27;

  v4 = *(unsigned __int8 **)(a1 + 40);
  if (*v4 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "sync_command_id";
    v5 = a1 + 72;
    v7 = (_BYTE *)(a1 + 88);
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 15;
    v8 = (_QWORD *)(a1 + 80);
    if (!v6)
      *v7 = 1;
    goto LABEL_13;
  }
  v8 = (_QWORD *)(a1 + 80);
  v5 = a1 + 72;
  v7 = (_BYTE *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v9 = *(_QWORD *)(a1 + 80) == 7;
  else
    v9 = 0;
  if (!v9
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v10 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v10 = 0),
        !v10))
  {
LABEL_13:
    v27 = *(void ***)a2;
    v11 = (unsigned __int8 *)sub_2101FAC64(a1);
    v12 = *v11;
    *v11 = 6;
    v13 = (void **)*((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v27;
    v27 = v13;
    sub_20EB07D94(&v27, v12);
    v4 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v4 > 1u || (v14 = *v7, *(_QWORD *)v5 = "proceed_n", *v8 = 9, v14))
  {
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_17;
LABEL_25:
    v26 = 0;
    v27 = 0;
    v16 = (unsigned __int8 *)sub_2101FAC64(a1);
    goto LABEL_26;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_25;
LABEL_17:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v15 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v15 = 0),
        !v15))
  {
    v26 = 6;
    v27 = *(void ***)(a2 + 8);
    v16 = (unsigned __int8 *)sub_2101FAC64(a1);
LABEL_26:
    v17 = *v16;
    *v16 = v26;
    v18 = (void **)*((_QWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = v27;
    v27 = v18;
    sub_20EB07D94(&v27, v17);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v19 = *v7, *(_QWORD *)v5 = "proceed_until", *v8 = 13, v19))
  {
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_30;
LABEL_38:
    v27 = 0;
    v24 = (unsigned __int8 *)sub_2101FAC64(a1);
    v22 = *v24;
    *v24 = 0;
    v25 = (void **)*((_QWORD *)v24 + 1);
    *((_QWORD *)v24 + 1) = v27;
    v27 = v25;
    goto LABEL_39;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_38;
LABEL_30:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v20 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v20 = 0),
        !v20))
  {
    v27 = *(void ***)(a2 + 24);
    v21 = (unsigned __int8 *)sub_2101FAC64(a1);
    v22 = *v21;
    *v21 = 6;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v27;
    v27 = v23;
LABEL_39:
    sub_20EB07D94(&v27, v22);
  }
}

void sub_20FED6D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FED6D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FED6D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FED6D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FED6D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FED6D8C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  unsigned __int8 *v6;
  const char **v7;
  int v8;
  _BYTE *v9;
  _QWORD *v10;
  BOOL v11;
  unsigned __int8 *v12;
  int v13;
  void **v14;
  int v15;
  const char *v16;
  int v17;
  int v18;
  unsigned __int8 *v20;
  int v21;
  void **v22;
  int v23;
  BOOL v24;
  unsigned __int8 *v25;
  int v26;
  void **v27;
  unsigned __int8 *v28;
  void **v29;
  uint64_t v30;
  unint64_t v31;
  int v32;

  sub_2101FAEA0(a2);
  v31 = 7;
  v32 = 1;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2101FD244(a2, &v32);
    v6 = *(unsigned __int8 **)(a2 + 40);
    if (*v6 <= 1u)
      goto LABEL_4;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2101FD244(a2, &v32);
    v6 = *(unsigned __int8 **)(a2 + 40);
    if (*v6 <= 1u)
    {
LABEL_4:
      *(_QWORD *)(a2 + 72) = "status";
      v7 = (const char **)(a2 + 72);
      v9 = (_BYTE *)(a2 + 88);
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 6;
      v10 = (_QWORD *)(a2 + 80);
      if (!v8)
        *v9 = 1;
      goto LABEL_13;
    }
  }
  v10 = (_QWORD *)(a2 + 80);
  v7 = (const char **)(a2 + 72);
  v9 = (_BYTE *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 88)
    || *(_QWORD *)(a2 + 80) != 7
    || (*(_DWORD *)*v7 == *(_DWORD *)"version" ? (v11 = *(_DWORD *)(*v7 + 3) == *(_DWORD *)"sion") : (v11 = 0), !v11))
  {
LABEL_13:
    v31 = *a3;
    v12 = (unsigned __int8 *)sub_2101FAC64(a2);
    v13 = *v12;
    *v12 = 6;
    v14 = (void **)*((_QWORD *)v12 + 1);
    *((_QWORD *)v12 + 1) = v31;
    v31 = (unint64_t)v14;
    sub_20EB07D94((void ***)&v31, v13);
    v6 = *(unsigned __int8 **)(a2 + 40);
  }
  v15 = *v9;
  if (*v6 > 1u)
  {
    if (!*v9 || *v10 != 7)
    {
LABEL_25:
      v31 = *((_QWORD *)a3 + 1);
      v20 = (unsigned __int8 *)sub_2101FAC64(a2);
      v21 = *v20;
      *v20 = 6;
      v22 = (void **)*((_QWORD *)v20 + 1);
      *((_QWORD *)v20 + 1) = v31;
      v31 = (unint64_t)v22;
      sub_20EB07D94((void ***)&v31, v21);
      v6 = *(unsigned __int8 **)(a2 + 40);
      goto LABEL_26;
    }
    v16 = *v7;
  }
  else
  {
    *v7 = "sync_id";
    *v10 = 7;
    if (!v15)
      *v9 = 1;
    v16 = "sync_id";
  }
  v17 = *(_DWORD *)v16;
  v18 = *(_DWORD *)(v16 + 3);
  if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion")
    goto LABEL_25;
LABEL_26:
  if (*v6 > 1u || (v23 = *v9, *v7 = "acknowledge_until", *v10 = 17, v23))
  {
    if (a3[24])
      goto LABEL_29;
LABEL_37:
    v31 = 0;
    v28 = (unsigned __int8 *)sub_2101FAC64(a2);
    v26 = *v28;
    *v28 = 0;
    v29 = (void **)*((_QWORD *)v28 + 1);
    *((_QWORD *)v28 + 1) = v31;
    v31 = (unint64_t)v29;
    goto LABEL_38;
  }
  *v9 = 1;
  if (!a3[24])
    goto LABEL_37;
LABEL_29:
  if (!*v9
    || *v10 != 7
    || (*(_DWORD *)*v7 == *(_DWORD *)"version" ? (v24 = *(_DWORD *)(*v7 + 3) == *(_DWORD *)"sion") : (v24 = 0), !v24))
  {
    v31 = *((_QWORD *)a3 + 2);
    v25 = (unsigned __int8 *)sub_2101FAC64(a2);
    v26 = *v25;
    *v25 = 6;
    v27 = (void **)*((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v31;
    v31 = (unint64_t)v27;
LABEL_38:
    sub_20EB07D94((void ***)&v31, v26);
  }
  v30 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 56) = v30 - 8;
  if (*(_BYTE *)(a2 + 88))
    *v9 = 0;
}

void sub_20FED70EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FED7104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FED711C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FED7134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FED714C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[4];

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      *(_QWORD *)&v22[0] = v7 + 16;
      sub_20E9F3D4C((uint64_t **)v22, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v22, v7 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE1036C(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      *(_QWORD *)&v22[0] = v8 + 16;
      sub_20E9F3D4C((uint64_t **)v22, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v22, v8 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE10250(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      *(_QWORD *)&v22[0] = v6 + 16;
      sub_20E9F3D4C((uint64_t **)v22, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)v22, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FDE75BC(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    *(_QWORD *)&v22[0] = v14 + 16;
    sub_20E9F3D4C((uint64_t **)v22, 2u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v22, v14 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  v15 = *(_OWORD *)(v3 + 216);
  v22[0] = *(_OWORD *)(v3 + 200);
  v22[1] = v15;
  v16 = *(_OWORD *)(v3 + 248);
  v22[2] = *(_OWORD *)(v3 + 232);
  v22[3] = v16;
  sub_20FED73DC(a2, (char *)v22, 2u);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v17 + 48), *(_QWORD *)(v17 + 16) - v18 - 9);
  v19 = *(_QWORD *)(v17 + 48);
  if (v19)
    memmove((void *)(*(_QWORD *)(v17 + 24) + v18), *(const void **)(v17 + 56), v19);
  *(_QWORD *)(v17 + 48) = 0;
  v20 = *(_QWORD *)(v17 + 80);
  v21 = *(_QWORD *)(v17 + 88) - 8;
  *(_QWORD *)(v17 + 88) = v21;
  if (v20 == v21)
  {
    std::ostream::write();
    if (*(_BYTE *)(v17 + 40))
    {
      free(*(void **)(v17 + 24));
      *(_BYTE *)(v17 + 40) = 0;
    }
  }
}

void sub_20FED73DC(uint64_t a1, char *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  std::runtime_error *exception;
  uint64_t *v19;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v19 = (uint64_t *)(v7 + 16);
    sub_20E9F3164(&v19, v6);
    if (a3 < 2)
      return;
  }
  else if (v6 < 0)
  {
    LOBYTE(v19) = -52;
    BYTE1(v19) = v6;
    std::ostream::write();
    if (a3 < 2)
      return;
  }
  else
  {
    LOBYTE(v19) = *a2;
    std::ostream::write();
    if (a3 < 2)
      return;
  }
  v8 = *a2;
  if (*a2)
  {
    if (v8 == 2)
    {
      if (*((_DWORD *)a2 + 12) == 1)
      {
        v11 = a2 + 8;
        v12 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v12 + 40))
        {
          v19 = (uint64_t *)(v12 + 16);
          sub_20E9F3D4C(&v19, 1u);
        }
        else
        {
          sub_20E9F3FC0((uint64_t)&v19, v12 + 8);
        }
        sub_20FED7830((uint64_t)&v19, a1, v11);
        return;
      }
    }
    else
    {
      if (v8 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (!*((_DWORD *)a2 + 12))
      {
        v9 = (uint64_t)(a2 + 8);
        v10 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v10 + 40))
        {
          v19 = (uint64_t *)(v10 + 16);
          sub_20E9F3D4C(&v19, 1u);
        }
        else
        {
          sub_20E9F3FC0((uint64_t)&v19, v10 + 8);
        }
        sub_20E9EE95C(*(_QWORD *)(a1 + 24));
        sub_20FED762C(a1, v9);
        v13 = *(_QWORD *)(a1 + 24);
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 88) - 8);
        sub_20E9EE4D0((uint64_t *)(v13 + 48), *(_QWORD *)(v13 + 16) - v14 - 9);
        v15 = *(_QWORD *)(v13 + 48);
        if (v15)
          memmove((void *)(*(_QWORD *)(v13 + 24) + v14), *(const void **)(v13 + 56), v15);
        *(_QWORD *)(v13 + 48) = 0;
        v16 = *(_QWORD *)(v13 + 80);
        v17 = *(_QWORD *)(v13 + 88) - 8;
        *(_QWORD *)(v13 + 88) = v17;
        if (v16 == v17)
        {
          std::ostream::write();
          if (*(_BYTE *)(v13 + 40))
          {
            free(*(void **)(v13 + 24));
            *(_BYTE *)(v13 + 40) = 0;
          }
        }
        return;
      }
    }
    sub_20E877AB8();
  }
}

void sub_20FED7618(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_20FED762C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;

  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v12 = (uint64_t *)(v4 + 16);
    sub_20E9F472C(&v12, *(_QWORD *)a2);
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_3;
  }
  else
  {
    sub_20E9F4A34();
    if (*(_BYTE *)(a2 + 16))
    {
LABEL_3:
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v5 + 40))
      {
        v12 = (uint64_t *)(v5 + 16);
        sub_20E9F3164(&v12, 1);
        v6 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v6 + 40))
          goto LABEL_5;
      }
      else
      {
        LOBYTE(v12) = 1;
        std::ostream::write();
        v6 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v6 + 40))
        {
LABEL_5:
          v12 = (uint64_t *)(v6 + 16);
          sub_20E9F472C(&v12, *(_QWORD *)(a2 + 8));
          if (!*(_BYTE *)(a2 + 32))
            goto LABEL_19;
LABEL_13:
          v8 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v8 + 40))
          {
            v12 = (uint64_t *)(v8 + 16);
            sub_20E9F3164(&v12, 1);
            v9 = *(_QWORD *)(a1 + 24);
            if (*(_BYTE *)(v9 + 40))
            {
LABEL_15:
              v12 = (uint64_t *)(v9 + 16);
              return sub_20E9F472C(&v12, *(_QWORD *)(a2 + 24));
            }
          }
          else
          {
            LOBYTE(v12) = 1;
            std::ostream::write();
            v9 = *(_QWORD *)(a1 + 24);
            if (*(_BYTE *)(v9 + 40))
              goto LABEL_15;
          }
          return (char *)sub_20E9F4A34();
        }
      }
      sub_20E9F4A34();
      if (!*(_BYTE *)(a2 + 32))
        goto LABEL_19;
      goto LABEL_13;
    }
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
  {
    LOBYTE(v12) = 0;
    std::ostream::write();
    if (!*(_BYTE *)(a2 + 32))
      goto LABEL_19;
    goto LABEL_13;
  }
  v12 = (uint64_t *)(v7 + 16);
  sub_20E9F3164(&v12, 0);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_13;
LABEL_19:
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 40))
  {
    v12 = (uint64_t *)(v11 + 16);
    return sub_20E9F3164(&v12, 0);
  }
  else
  {
    LOBYTE(v12) = 0;
    return (char *)std::ostream::write();
  }
}

void sub_20FED7830(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v16 = (uint64_t *)(v5 + 16);
    sub_20E9F3164(&v16, *a3);
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
      goto LABEL_3;
LABEL_13:
    sub_20E9F4A34();
    if (a3[24])
      goto LABEL_4;
LABEL_14:
    v10 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v10 + 40))
    {
      v16 = (uint64_t *)(v10 + 16);
      sub_20E9F3164(&v16, 0);
    }
    else
    {
      LOBYTE(v16) = 0;
      std::ostream::write();
    }
    goto LABEL_17;
  }
  v9 = *a3;
  if (v9 < 0)
  {
    LOBYTE(v16) = -52;
    BYTE1(v16) = v9;
    std::ostream::write();
    v6 = *(_QWORD *)(a2 + 24);
    if (!*(_BYTE *)(v6 + 40))
      goto LABEL_13;
  }
  else
  {
    LOBYTE(v16) = *a3;
    std::ostream::write();
    v6 = *(_QWORD *)(a2 + 24);
    if (!*(_BYTE *)(v6 + 40))
      goto LABEL_13;
  }
LABEL_3:
  v16 = (uint64_t *)(v6 + 16);
  sub_20E9F472C(&v16, *((_QWORD *)a3 + 1));
  if (!a3[24])
    goto LABEL_14;
LABEL_4:
  v7 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v16 = (uint64_t *)(v7 + 16);
    sub_20E9F3164(&v16, 1);
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
LABEL_6:
      v16 = (uint64_t *)(v8 + 16);
      sub_20E9F472C(&v16, *((_QWORD *)a3 + 2));
      goto LABEL_17;
    }
  }
  else
  {
    LOBYTE(v16) = 1;
    std::ostream::write();
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
      goto LABEL_6;
  }
  sub_20E9F4A34();
LABEL_17:
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v11 + 48), *(_QWORD *)(v11 + 16) - v12 - 9);
  v13 = *(_QWORD *)(v11 + 48);
  if (v13)
    memmove((void *)(*(_QWORD *)(v11 + 24) + v12), *(const void **)(v11 + 56), v13);
  *(_QWORD *)(v11 + 48) = 0;
  v14 = *(_QWORD *)(v11 + 80);
  v15 = *(_QWORD *)(v11 + 88) - 8;
  *(_QWORD *)(v11 + 88) = v15;
  if (v14 == v15)
  {
    std::ostream::write();
    if (*(_BYTE *)(v11 + 40))
    {
      free(*(void **)(v11 + 24));
      *(_BYTE *)(v11 + 40) = 0;
    }
  }
}

void sub_20FED7A40(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  _OWORD v22[3];

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    *(_QWORD *)&v21 = "version";
    *((_QWORD *)&v21 + 1) = 7;
    LODWORD(v22[0]) = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, v22);
    sub_20FE113C8(a2, v4, v22[0]);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      *(_QWORD *)&v21 = "version";
      *((_QWORD *)&v21 + 1) = 7;
      LODWORD(v22[0]) = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, v22);
      sub_20FDE8860(a2, v4, v22[0]);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    *(_QWORD *)&v21 = "version";
    *((_QWORD *)&v21 + 1) = 7;
    LODWORD(v22[0]) = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, v22);
    sub_20FE10C84(a2, v4, v22[0]);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FA8A4(a2);
  *(_QWORD *)&v21 = "version";
  *((_QWORD *)&v21 + 1) = 7;
  LODWORD(v22[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, v22);
  v17 = v22[0];
  v18 = *(_OWORD *)(v3 + 216);
  v21 = *(_OWORD *)(v3 + 200);
  v22[0] = v18;
  v19 = *(_OWORD *)(v3 + 248);
  v22[1] = *(_OWORD *)(v3 + 232);
  v22[2] = v19;
  sub_20FED7D50(a2, (unsigned __int8 *)&v21, v17);
  v20 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(a2 + 56) = v20 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FED7D50(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  _BYTE *v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  std::runtime_error *exception;
  const char *v23;
  uint64_t v24;
  int v25;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "sync_type";
    v6 = a1 + 72;
    v8 = (_BYTE *)(a1 + 88);
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 9;
    v9 = (_QWORD *)(a1 + 80);
    if (!v7)
      *v8 = 1;
    v10 = *a2;
    goto LABEL_14;
  }
  v9 = (_QWORD *)(a1 + 80);
  v6 = a1 + 72;
  v8 = (_BYTE *)(a1 + 88);
  v10 = *a2;
  if (*(_BYTE *)(a1 + 88))
    v11 = *(_QWORD *)(a1 + 80) == 7;
  else
    v11 = 0;
  if (!v11
    || (**(_DWORD **)v6 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v6 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_14:
    LOBYTE(v23) = 6;
    v24 = v10;
    v13 = (unsigned __int8 *)sub_2101FA67C(a1);
    v14 = *v13;
    *v13 = 6;
    LOBYTE(v23) = v14;
    v15 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v24;
    v24 = v15;
    sub_20EB911C0(&v24, v14);
  }
  if (a3 < 2)
    return;
  v16 = *a2;
  if (!*a2)
    return;
  if (v16 != 2)
  {
    if (v16 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid sync type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (!*((_DWORD *)a2 + 12))
    {
      v17 = (uint64_t)(a2 + 8);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v18 = *v8;
        *(_QWORD *)v6 = "value";
        *v9 = 5;
        if (!v18)
          *v8 = 1;
      }
      sub_2101FA8A4(a1);
      v23 = "version";
      v24 = 7;
      v25 = 1;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v19 = *v8;
        *(_QWORD *)v6 = "version";
        *v9 = 7;
        if (!v19)
          *v8 = 1;
      }
      sub_2101FB154(a1, &v25);
      sub_20FED800C(a1, v17);
      v20 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v20 - 8);
      *(_QWORD *)(a1 + 56) = v20 - 8;
      if (*(_BYTE *)(a1 + 88))
        *v8 = 0;
      return;
    }
LABEL_34:
    sub_20E877AB8();
  }
  if (*((_DWORD *)a2 + 12) != 1)
    goto LABEL_34;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v21 = *v8;
    *(_QWORD *)v6 = "value";
    *v9 = 5;
    if (!v21)
      *v8 = 1;
  }
  sub_20FED837C((uint64_t)&v23, a1, a2 + 8);
}

void sub_20FED7FE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FED7FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FED800C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _QWORD *v8;
  BOOL v9;
  BOOL v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = *(unsigned __int8 **)(a1 + 40);
  if (*v4 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "sync_command_id";
    v5 = a1 + 72;
    v7 = (_BYTE *)(a1 + 88);
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 15;
    v8 = (_QWORD *)(a1 + 80);
    if (!v6)
      *v7 = 1;
    goto LABEL_13;
  }
  v8 = (_QWORD *)(a1 + 80);
  v5 = a1 + 72;
  v7 = (_BYTE *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v9 = *(_QWORD *)(a1 + 80) == 7;
  else
    v9 = 0;
  if (!v9
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v10 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v10 = 0),
        !v10))
  {
LABEL_13:
    v27 = *(_QWORD *)a2;
    v11 = (unsigned __int8 *)sub_2101FA67C(a1);
    v12 = *v11;
    *v11 = 6;
    v13 = *((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v27;
    v27 = v13;
    sub_20EB911C0(&v27, v12);
    v4 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v4 > 1u || (v14 = *v7, *(_QWORD *)v5 = "proceed_n", *v8 = 9, v14))
  {
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_17;
LABEL_25:
    v26 = 0;
    v27 = 0;
    v16 = (unsigned __int8 *)sub_2101FA67C(a1);
    goto LABEL_26;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_25;
LABEL_17:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v15 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v15 = 0),
        !v15))
  {
    v26 = 6;
    v27 = *(_QWORD *)(a2 + 8);
    v16 = (unsigned __int8 *)sub_2101FA67C(a1);
LABEL_26:
    v17 = *v16;
    *v16 = v26;
    v18 = *((_QWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = v27;
    v27 = v18;
    sub_20EB911C0(&v27, v17);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v19 = *v7, *(_QWORD *)v5 = "proceed_until", *v8 = 13, v19))
  {
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_30;
LABEL_38:
    v27 = 0;
    v24 = (unsigned __int8 *)sub_2101FA67C(a1);
    v22 = *v24;
    *v24 = 0;
    v25 = *((_QWORD *)v24 + 1);
    *((_QWORD *)v24 + 1) = v27;
    v27 = v25;
    goto LABEL_39;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_38;
LABEL_30:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v20 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v20 = 0),
        !v20))
  {
    v27 = *(_QWORD *)(a2 + 24);
    v21 = (unsigned __int8 *)sub_2101FA67C(a1);
    v22 = *v21;
    *v21 = 6;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v27;
    v27 = v23;
LABEL_39:
    sub_20EB911C0(&v27, v22);
  }
}

void sub_20FED8304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FED831C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FED8334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FED834C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FED8364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FED837C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  unsigned __int8 *v6;
  const char **v7;
  int v8;
  _BYTE *v9;
  _QWORD *v10;
  BOOL v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  int v15;
  const char *v16;
  int v17;
  int v18;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  sub_2101FA8A4(a2);
  v31 = 7;
  v32 = 1;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2101FB154(a2, &v32);
    v6 = *(unsigned __int8 **)(a2 + 40);
    if (*v6 <= 1u)
      goto LABEL_4;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2101FB154(a2, &v32);
    v6 = *(unsigned __int8 **)(a2 + 40);
    if (*v6 <= 1u)
    {
LABEL_4:
      *(_QWORD *)(a2 + 72) = "status";
      v7 = (const char **)(a2 + 72);
      v9 = (_BYTE *)(a2 + 88);
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 6;
      v10 = (_QWORD *)(a2 + 80);
      if (!v8)
        *v9 = 1;
      goto LABEL_13;
    }
  }
  v10 = (_QWORD *)(a2 + 80);
  v7 = (const char **)(a2 + 72);
  v9 = (_BYTE *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 88)
    || *(_QWORD *)(a2 + 80) != 7
    || (*(_DWORD *)*v7 == *(_DWORD *)"version" ? (v11 = *(_DWORD *)(*v7 + 3) == *(_DWORD *)"sion") : (v11 = 0), !v11))
  {
LABEL_13:
    v31 = *a3;
    v12 = (unsigned __int8 *)sub_2101FA67C(a2);
    v13 = *v12;
    *v12 = 6;
    v14 = *((_QWORD *)v12 + 1);
    *((_QWORD *)v12 + 1) = v31;
    v31 = v14;
    sub_20EB911C0(&v31, v13);
    v6 = *(unsigned __int8 **)(a2 + 40);
  }
  v15 = *v9;
  if (*v6 > 1u)
  {
    if (!*v9 || *v10 != 7)
    {
LABEL_25:
      v31 = *((_QWORD *)a3 + 1);
      v20 = (unsigned __int8 *)sub_2101FA67C(a2);
      v21 = *v20;
      *v20 = 6;
      v22 = *((_QWORD *)v20 + 1);
      *((_QWORD *)v20 + 1) = v31;
      v31 = v22;
      sub_20EB911C0(&v31, v21);
      v6 = *(unsigned __int8 **)(a2 + 40);
      goto LABEL_26;
    }
    v16 = *v7;
  }
  else
  {
    *v7 = "sync_id";
    *v10 = 7;
    if (!v15)
      *v9 = 1;
    v16 = "sync_id";
  }
  v17 = *(_DWORD *)v16;
  v18 = *(_DWORD *)(v16 + 3);
  if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion")
    goto LABEL_25;
LABEL_26:
  if (*v6 > 1u || (v23 = *v9, *v7 = "acknowledge_until", *v10 = 17, v23))
  {
    if (a3[24])
      goto LABEL_29;
LABEL_37:
    v31 = 0;
    v28 = (unsigned __int8 *)sub_2101FA67C(a2);
    v26 = *v28;
    *v28 = 0;
    v29 = *((_QWORD *)v28 + 1);
    *((_QWORD *)v28 + 1) = v31;
    v31 = v29;
    goto LABEL_38;
  }
  *v9 = 1;
  if (!a3[24])
    goto LABEL_37;
LABEL_29:
  if (!*v9
    || *v10 != 7
    || (*(_DWORD *)*v7 == *(_DWORD *)"version" ? (v24 = *(_DWORD *)(*v7 + 3) == *(_DWORD *)"sion") : (v24 = 0), !v24))
  {
    v31 = *((_QWORD *)a3 + 2);
    v25 = (unsigned __int8 *)sub_2101FA67C(a2);
    v26 = *v25;
    *v25 = 6;
    v27 = *((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v31;
    v31 = v27;
LABEL_38:
    sub_20EB911C0(&v31, v26);
  }
  v30 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 56) = v30 - 8;
  if (*(_BYTE *)(a2 + 88))
    *v9 = 0;
}

void sub_20FED86DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FED86F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FED870C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FED8724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FED873C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *result;
  _OWORD v20[4];

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      LOBYTE(v20[0]) = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        LOBYTE(v20[0]) = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)v20, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      LOBYTE(v20[0]) = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)v20, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      LOBYTE(v20[0]) = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  LOBYTE(v20[0]) = v7;
  sub_20E86A980(v11, (uint64_t)v20, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    LOBYTE(v20[0]) = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)v20, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  v14 = *(_OWORD *)(v3 + 216);
  v20[0] = *(_OWORD *)(v3 + 200);
  v20[1] = v14;
  v15 = *(_OWORD *)(v3 + 248);
  v20[2] = *(_OWORD *)(v3 + 232);
  v20[3] = v15;
  sub_20FED8964(a2, (unsigned __int8 *)v20, 2u);
  v16 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v17 = *(_QWORD **)(a2 + 24);
    LOBYTE(v20[0]) = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v17, (uint64_t)v20, 1);
  }
  v18 = *(_QWORD **)(a2 + 24);
  LOBYTE(v20[0]) = v16;
  result = sub_20E86A980(v18, (uint64_t)v20, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FED8964(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  std::runtime_error *exception;
  unsigned __int8 v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v13 = *a2;
  sub_20E9E6F58(a1, &v13);
  if (a3 < 2)
    return;
  v6 = *a2;
  if (!*a2)
    return;
  if (v6 == 2)
  {
    if (*((_DWORD *)a2 + 12) == 1)
    {
      sub_20FED8C18((uint64_t)&v14, a1, a2 + 8);
      return;
    }
LABEL_14:
    sub_20E877AB8();
  }
  if (v6 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid sync type");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (*((_DWORD *)a2 + 12))
    goto LABEL_14;
  v7 = (uint64_t)(a2 + 8);
  if (*(_QWORD *)(a1 + 40))
  {
    v8 = *(_QWORD **)(a1 + 24);
    v15 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v8, (uint64_t)&v15, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20FED8AD8(a1, v7);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    v16 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v10, (uint64_t)&v16, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  v17 = v9;
  sub_20E86A980(v11, (uint64_t)&v17, 1);
  ++*(_QWORD *)(a1 + 40);
}

void sub_20FED8AC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FED8AD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  char v11;
  char v12;
  char v13;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    v11 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v4, (uint64_t)&v11, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 16))
  {
    v8 = 1;
    sub_20E9E6F58(a1, &v8);
    if (*(_QWORD *)(a1 + 40))
    {
      v5 = *(_QWORD **)(a1 + 24);
      v12 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v5, (uint64_t)&v12, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_7;
LABEL_11:
    v9 = 0;
    sub_20E9E6F58(a1, &v9);
    return;
  }
  v7 = 0;
  sub_20E9E6F58(a1, &v7);
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_11;
LABEL_7:
  v10 = 1;
  sub_20E9E6F58(a1, &v10);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v13 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)&v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
}

_QWORD *sub_20FED8C18(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;
  unsigned __int8 v13;
  unsigned __int8 v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  if (*(_QWORD *)(a2 + 40))
  {
    v5 = *(_QWORD **)(a2 + 24);
    v15 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v5, (uint64_t)&v15, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20E9E6F58(a2, a3);
  if (*(_QWORD *)(a2 + 40))
  {
    v6 = *(_QWORD **)(a2 + 24);
    v16 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v6, (uint64_t)&v16, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  if (!a3[24])
  {
    v13 = 0;
    sub_20E9E6F58(a2, &v13);
    v9 = *(_BYTE *)(a2 + 34);
    if (!*(_QWORD *)(a2 + 40))
      goto LABEL_10;
    goto LABEL_9;
  }
  v14 = 1;
  sub_20E9E6F58(a2, &v14);
  if (*(_QWORD *)(a2 + 40))
  {
    v7 = *(_QWORD **)(a2 + 24);
    v17 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v7, (uint64_t)&v17, 1);
  }
  std::ostream::operator<<();
  v8 = *(_QWORD *)(a2 + 40) + 1;
  *(_QWORD *)(a2 + 40) = v8;
  v9 = *(_BYTE *)(a2 + 34);
  if (v8)
  {
LABEL_9:
    v10 = *(_QWORD **)(a2 + 24);
    v18 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v10, (uint64_t)&v18, 1);
  }
LABEL_10:
  v11 = *(_QWORD **)(a2 + 24);
  v19 = v9;
  result = sub_20E86A980(v11, (uint64_t)&v19, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

char *sub_20FED8D70(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  char *result;
  uint64_t v14;
  _OWORD v15[4];

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    LODWORD(v15[0]) = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)v15, (char *)v15 + 4, 4);
    v7 = v15[0];
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    LODWORD(v15[0]) = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)v15, (char *)v15 + 4, 4);
    v8 = v15[0];
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    LODWORD(v15[0]) = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)v15, (char *)v15 + 4, 4);
    v6 = v15[0];
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  LODWORD(v15[0]) = 2;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)v15, (char *)v15 + 4, 4);
  v10 = v15[0];
  sub_2100B6A04((_QWORD *)a2);
  v11 = *(_OWORD *)(v3 + 216);
  v15[0] = *(_OWORD *)(v3 + 200);
  v15[1] = v11;
  v12 = *(_OWORD *)(v3 + 248);
  v15[2] = *(_OWORD *)(v3 + 232);
  v15[3] = v12;
  result = sub_20FED8F3C(a2, (char *)v15, v10);
  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v14 + 10) = *(_QWORD *)(a2 + 32) - v14 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  return result;
}

char *sub_20FED8F3C(uint64_t a1, char *a2, unsigned int a3)
{
  uint64_t v6;
  char *result;
  int v8;
  uint64_t v9;
  std::runtime_error *exception;
  char __src;
  int v12;
  char v13[3];
  char v14;
  int v15;
  uint64_t v16;

  __src = *a2;
  v6 = a1 + 24;
  result = sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v12, 1);
  if (a3 >= 2)
  {
    v8 = *a2;
    if (*a2)
    {
      if (v8 == 2)
      {
        if (*((_DWORD *)a2 + 12) == 1)
        {
          v15 = 1;
          sub_2100B8FD4(v6, *(char **)(a1 + 32), (char *)&v15, (char *)&v16, 4);
          return sub_20FED9204((uint64_t)&v14, a1, a2 + 8);
        }
      }
      else
      {
        if (v8 != 1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "invalid sync type");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        if (!*((_DWORD *)a2 + 12))
        {
          v12 = 1;
          sub_2100B8FD4(v6, *(char **)(a1 + 32), (char *)&v12, v13, 4);
          sub_2100B6A04((_QWORD *)a1);
          result = sub_20FED90CC(a1, a2 + 8);
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
          *(_QWORD *)(v9 + 10) = *(_QWORD *)(a1 + 32) - v9 - 18;
          *(_QWORD *)(a1 + 56) -= 8;
          return result;
        }
      }
      sub_20E877AB8();
    }
  }
  return result;
}

void sub_20FED90B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_20FED90CC(uint64_t a1, char *__src)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  char v12;
  char __srca;
  char v14;
  char v15;
  uint64_t v16;

  v4 = a1 + 24;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
  if (!__src[16])
  {
    v12 = 0;
    sub_2100B8FD4(v4, *(char **)(a1 + 32), &v12, &__srca, 1);
    v5 = __src + 32;
    if (__src[32])
      goto LABEL_3;
LABEL_5:
    v14 = 0;
    v6 = *(char **)(a1 + 32);
    v9 = &v15;
    v8 = &v14;
    v7 = v4;
    v10 = 1;
    return sub_2100B8FD4(v7, v6, v8, v9, v10);
  }
  __srca = 1;
  sub_2100B8FD4(v4, *(char **)(a1 + 32), &__srca, &v14, 1);
  sub_2100B8FD4(v4, *(char **)(a1 + 32), __src + 8, __src + 16, 8);
  v5 = __src + 32;
  if (!__src[32])
    goto LABEL_5;
LABEL_3:
  v15 = 1;
  sub_2100B8FD4(v4, *(char **)(a1 + 32), &v15, (char *)&v16, 1);
  v6 = *(char **)(a1 + 32);
  v7 = v4;
  v8 = __src + 24;
  v9 = v5;
  v10 = 8;
  return sub_2100B8FD4(v7, v6, v8, v9, v10);
}

char *sub_20FED9204(uint64_t a1, uint64_t a2, char *a3)
{
  char *v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *p_src;
  int64_t v12;
  char *result;
  uint64_t v14;
  char v15;
  char __src;
  uint64_t v17;

  sub_2100B6A04((_QWORD *)a2);
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), a3, a3 + 1, 1);
  v5 = a3 + 16;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), a3 + 8, a3 + 16, 8);
  v7 = a3[24];
  v6 = a3 + 24;
  if (v7)
  {
    __src = 1;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), &__src, (char *)&v17, 1);
    v8 = *(char **)(a2 + 32);
    v9 = a2 + 24;
    v10 = v5;
    p_src = v6;
    v12 = 8;
  }
  else
  {
    v15 = 0;
    v8 = *(char **)(a2 + 32);
    p_src = &__src;
    v10 = &v15;
    v9 = a2 + 24;
    v12 = 1;
  }
  result = sub_2100B8FD4(v9, v8, v10, p_src, v12);
  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v14 + 10) = *(_QWORD *)(a2 + 32) - v14 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  return result;
}

uint64_t sub_20FED9308(int *a1, _QWORD *a2, __int128 *a3)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  LODWORD(v12) = 2;
  (*(void (**)(_QWORD *, __int128 *))(*a2 + 104))(a2, &v12);
  v6 = v12;
  if (*a1 < 1
    || *a1 == 2 && (LODWORD(v12) = 1, (*(void (**)(_QWORD *, __int128 *))(*a2 + 104))(a2, &v12), *a1 <= 0))
  {
    v10 = a3[1];
    v12 = *a3;
    v13 = v10;
    v11 = a3[3];
    v14 = a3[2];
    v15 = v11;
    return sub_20FED940C(a2, (unsigned __int8 *)&v12, v6);
  }
  else
  {
    (*(void (**)(_QWORD *))(*a2 + 16))(a2);
    v7 = a3[1];
    v12 = *a3;
    v13 = v7;
    v8 = a3[3];
    v14 = a3[2];
    v15 = v8;
    sub_20FED940C(a2, (unsigned __int8 *)&v12, v6);
    return (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  }
}

uint64_t sub_20FED940C(_QWORD *a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t result;
  int v7;
  std::runtime_error *exception;
  uint64_t v9;

  LOBYTE(v9) = *a2;
  result = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a1 + 80))(a1, &v9);
  if (a3 >= 2)
  {
    v7 = *a2;
    if (*a2)
    {
      if (v7 == 2)
      {
        if (*((_DWORD *)a2 + 12) == 1)
        {
          v9 = a1[1];
          return sub_20FED97D4((int *)&v9, (uint64_t)a1, (uint64_t)(a2 + 8));
        }
      }
      else
      {
        if (v7 != 1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "invalid sync type");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        if (!*((_DWORD *)a2 + 12))
        {
          v9 = a1[1];
          return sub_20FED9518((int *)&v9, (uint64_t)a1, (uint64_t)(a2 + 8));
        }
      }
      sub_20E877AB8();
    }
  }
  return result;
}

void sub_20FED9504(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FED9518(int *a1, uint64_t a2, uint64_t a3)
{
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v7 = 1;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
    return sub_20FED9674(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3);
  if (*(_BYTE *)(a3 + 16))
  {
    v9 = 1;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
    if (*(_BYTE *)(a3 + 32))
    {
LABEL_5:
      v11 = 1;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v11);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 24);
    }
  }
  else
  {
    v8 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v8);
    if (*(_BYTE *)(a3 + 32))
      goto LABEL_5;
  }
  v10 = 0;
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v10);
}

uint64_t sub_20FED9674(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v5 = *a1;
  if (*a1 == 2)
  {
    v8 = 1;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3);
  if (*(_BYTE *)(a3 + 16))
  {
    v10 = 1;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
    if (*(_BYTE *)(a3 + 32))
      goto LABEL_7;
  }
  else
  {
    v9 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v9);
    if (*(_BYTE *)(a3 + 32))
    {
LABEL_7:
      v12 = 1;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v12);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 24);
      if (v5 < 1)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  v11 = 0;
  result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v11);
  if (v5 < 1)
    return result;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t sub_20FED97D4(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = 1;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
    if (*(_BYTE *)(a3 + 24))
    {
      v13 = 1;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v13);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 16);
    }
    else
    {
      v12 = 0;
      return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v12);
    }
  }
  else
  {
    if (*a1 == 2 && (v9 = 1, (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v9), *a1 < 1))
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
    if (*(_BYTE *)(a3 + 24))
    {
      v11 = 1;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v11);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 16);
      if (v6)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    }
    else
    {
      v10 = 0;
      result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v10);
      if (v6)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  return result;
}

void sub_20FED99A4(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FED9FD8(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FEDAB50(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FEDB3D4(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FEDBF4C(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FEDC99C(&v9, a1);
          else
            sub_20FED9B08(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

uint64_t sub_20FED9B08(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v27;
  uint64_t v28[27];
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v28);
    sub_20FDE470C((uint64_t)&v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v28);
  sub_20FDE470C((uint64_t)&v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20EB0580C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v28[0] = *(_QWORD *)(a2 + 8);
  v25 = v28[0];
  v29 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v24 + 104))(a2, &v29);
  if (v25 < 1)
  {
    if (v29 < 3)
      sub_20FDF69C0((uint64_t)&v29, a2, v4, v29);
    else
      sub_20FDF6C34(a2, v4, v29);
  }
  else
  {
    sub_20FDF63C8((int *)v28, a2, v4, v29);
  }
  return sub_20FEDD4A8((uint64_t)v28, (_DWORD *)a2, v3 + 200);
}

void sub_20FED9F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FED9FD8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v33);
    sub_20FDE470C((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v33);
  sub_20FDE470C((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20EB0580C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF7D8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_2100DB048(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20FEDA530(a2, v3 + 200, v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20FEDA4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEDA530(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  char *v7;
  char v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::runtime_error *exception;
  unint64_t v23;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "sync_type";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v23 = 0;
  sub_2100DB048(v7, &v23);
  v8 = v23;
  if (v23 >= 0x100)
    goto LABEL_30;
  *(_BYTE *)a2 = v23;
  if (a3 >= 2 && v8)
  {
    if (v8 != 2)
    {
      if (v8 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (*(_BYTE *)(a2 + 56))
      {
        v9 = *(_DWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        if (v9)
          *(_DWORD *)(a2 + 48) = 0;
        v10 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "value";
        *(_QWORD *)(a1 + 96) = 5;
        if (v10)
        {
LABEL_12:
          sub_2101FF7D8(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_2101FFA90((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v23 = 0;
          sub_2100DB048(v12, &v23);
          if (!HIDWORD(v23))
          {
            sub_20FEDA83C(a1, a2 + 8);
LABEL_24:
            v17 = *(_QWORD *)(a1 + 48);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v17 - 8);
            v18 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 112) = *(_QWORD *)(v18 - 8);
            *(_QWORD *)(a1 + 48) = v17 - 8;
            *(_QWORD *)(a1 + 72) = v18 - 8;
            return;
          }
          goto LABEL_30;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 56) = 1;
        v19 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "value";
        *(_QWORD *)(a1 + 96) = 5;
        if (v19)
          goto LABEL_12;
      }
      *(_BYTE *)(a1 + 104) = 1;
      goto LABEL_12;
    }
    if (*(_BYTE *)(a2 + 56))
    {
      v13 = *(_DWORD *)(a2 + 48);
      *(_BYTE *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      if (v13 != 1)
        *(_DWORD *)(a2 + 48) = 1;
      v14 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "value";
      *(_QWORD *)(a1 + 96) = 5;
      if (v14)
      {
LABEL_20:
        sub_2101FF7D8(a1);
        v15 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "version";
        *(_QWORD *)(a1 + 96) = 7;
        if (!v15)
          *(_BYTE *)(a1 + 104) = 1;
        v16 = (char *)sub_2101FFA90((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        v23 = 0;
        sub_2100DB048(v16, &v23);
        if (!HIDWORD(v23))
        {
          sub_20FEDA9D0(a1, a2 + 8);
          goto LABEL_24;
        }
LABEL_30:
        v21 = __cxa_allocate_exception(8uLL);
        *v21 = &off_24CA1FAE0;
        __cxa_throw(v21, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
    }
    else
    {
      *(_BYTE *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 48) = 1;
      *(_BYTE *)(a2 + 56) = 1;
      v20 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "value";
      *(_QWORD *)(a1 + 96) = 5;
      if (v20)
        goto LABEL_20;
    }
    *(_BYTE *)(a1 + 104) = 1;
    goto LABEL_20;
  }
}

void sub_20FEDA828(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEDA83C(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "sync_command_id";
  *(_QWORD *)(a1 + 96) = 15;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v10 = 0;
  sub_2100DB048(v5, &v10);
  *(_QWORD *)a2 = v10;
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "proceed_n";
  *(_QWORD *)(a1 + 96) = 9;
  if (v6)
  {
    if (*(_BYTE *)sub_2101FFA90((uint64_t *)a1))
    {
LABEL_5:
      v7 = (char *)sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v10 = 0;
      sub_2100DB048(v7, &v10);
      *(_QWORD *)(a2 + 8) = v10;
      *(_BYTE *)(a2 + 16) = 1;
      goto LABEL_9;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2101FFA90((uint64_t *)a1))
      goto LABEL_5;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 16))
    *(_BYTE *)(a2 + 16) = 0;
LABEL_9:
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "proceed_until";
  *(_QWORD *)(a1 + 96) = 13;
  if (v8)
  {
    if (*(_BYTE *)sub_2101FFA90((uint64_t *)a1))
    {
LABEL_11:
      v9 = (char *)sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v10 = 0;
      sub_2100DB048(v9, &v10);
      *(_QWORD *)(a2 + 24) = v10;
      *(_BYTE *)(a2 + 32) = 1;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2101FFA90((uint64_t *)a1))
      goto LABEL_11;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 32))
    *(_BYTE *)(a2 + 32) = 0;
}

void sub_20FEDA9D0(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  _QWORD *exception;
  unint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "status";
  *(_QWORD *)(a1 + 96) = 6;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v11 = 0;
  sub_2100DB048(v5, &v11);
  if (v11 >= 0x100)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *(_BYTE *)a2 = v11;
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "sync_id";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v11 = 0;
  sub_2100DB048(v7, &v11);
  *(_QWORD *)(a2 + 8) = v11;
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "acknowledge_until";
  *(_QWORD *)(a1 + 96) = 17;
  if (v8)
  {
    if (*(_BYTE *)sub_2101FFA90((uint64_t *)a1))
    {
LABEL_8:
      v9 = (char *)sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v11 = 0;
      sub_2100DB048(v9, &v11);
      *(_QWORD *)(a2 + 16) = v11;
      *(_BYTE *)(a2 + 24) = 1;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2101FFA90((uint64_t *)a1))
      goto LABEL_8;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 24))
    *(_BYTE *)(a2 + 24) = 0;
}

uint64_t sub_20FEDAB50(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  char v30;
  uint64_t v31[27];
  _BYTE v32[8];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v31);
    sub_20FDE470C((uint64_t)v32, v31);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v32);
        if (!v47)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v30, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(_BYTE *)(v3 + 64) = 0;
    if (v36)
    {
      v8 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(_QWORD *)(v3 + 56) = v8;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v38;
    v10 = v37;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v41)
    {
      v11 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(_QWORD *)(v3 + 112) = v11;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v44)
    {
      v12 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(_QWORD *)(v3 + 144) = v12;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(_QWORD *)(v3 + 176) = v46;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v45;
    if (!(_QWORD)v45)
      goto LABEL_46;
    v15 = *((_QWORD *)&v45 + 1);
    v16 = (void *)v45;
    if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v45;
LABEL_45:
    *((_QWORD *)&v45 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v31);
  sub_20FDE470C((uint64_t)v32, v31);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v30, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(_BYTE *)(v3 + 64) = 0;
    if (v36)
    {
      v17 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(_QWORD *)(v3 + 56) = v17;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v38;
    v19 = v37;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v41)
    {
      v20 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(_QWORD *)(v3 + 112) = v20;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v44)
    {
      v21 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(_QWORD *)(v3 + 144) = v21;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(_QWORD *)(v3 + 176) = v46;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v32);
  if (v47)
  {
LABEL_38:
    v14 = v45;
    if (!(_QWORD)v45)
      goto LABEL_46;
    v23 = *((_QWORD *)&v45 + 1);
    v16 = (void *)v45;
    if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v44 && SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  sub_20EB0580C((uint64_t)v31);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v31, a2, v4);
  LODWORD(v31[0]) = 2;
  sub_20E9EDADC(a2[6], v31);
  v24 = v31[0];
  v25 = a2 + 2;
  sub_20E90A71C(a2 + 2);
  if (v24 >= 2)
    v26 = 2;
  else
    v26 = v24;
  sub_20FEDB038(a2, v3 + 200, v26);
  v27 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(*v25 + 32))(a2 + 2);
  v29 = *(_QWORD *)(v27 - 16) - result + *(_QWORD *)(v27 - 8);
  if (v29)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v25 + 40))(a2 + 2, v29);
  a2[4] -= 16;
  return result;
}

void sub_20FEDAFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEDB038(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::runtime_error *exception;
  unsigned __int8 v12;
  int v13;
  char v14;
  int v15;

  v12 = 0;
  sub_20E9ED7B4(a1[6], &v12);
  v6 = v12;
  *(_BYTE *)a2 = v12;
  if (a3 >= 2 && v6)
  {
    if (v6 == 2)
    {
      if (*(_BYTE *)(a2 + 56))
      {
        v8 = *(_DWORD *)(a2 + 48);
        *(_BYTE *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        if (v8 != 1)
          *(_DWORD *)(a2 + 48) = 1;
      }
      else
      {
        *(_BYTE *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 48) = 1;
        *(_BYTE *)(a2 + 56) = 1;
      }
      v15 = 1;
      sub_20E9EDADC(a1[6], &v15);
      sub_20FEDB2FC((uint64_t)&v14, a1, a2 + 8);
    }
    else
    {
      if (v6 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (*(_BYTE *)(a2 + 56))
      {
        v7 = *(_DWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        if (v7)
          *(_DWORD *)(a2 + 48) = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 56) = 1;
      }
      v13 = 1;
      sub_20E9EDADC(a1[6], &v13);
      sub_20E90A71C(a1 + 2);
      sub_20FEDB238((uint64_t)a1, a2 + 8);
      v9 = a1[4];
      v10 = *(_QWORD *)(v9 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v9 - 8);
      if (v10)
        (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v10);
      a1[4] -= 16;
    }
  }
}

void sub_20FEDB224(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEDB238(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)a2);
  v4 = 0;
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v4);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 8));
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
  v5 = 0;
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v5);
  if (v5)
  {
    if (!*(_BYTE *)(a2 + 32))
    {
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 1;
    }
    sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 24));
  }
  else if (*(_BYTE *)(a2 + 32))
  {
    *(_BYTE *)(a2 + 32) = 0;
  }
}

uint64_t sub_20FEDB2FC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;

  v5 = a2 + 2;
  sub_20E90A71C(a2 + 2);
  sub_20E9ED7B4(a2[6], (_BYTE *)a3);
  sub_20E9EDE6C(a2[6], (_QWORD *)(a3 + 8));
  v9 = 0;
  sub_20E9ED7B4(a2[6], &v9);
  if (v9)
  {
    if (!*(_BYTE *)(a3 + 24))
    {
      *(_QWORD *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 24) = 1;
    }
    sub_20E9EDE6C(a2[6], (_QWORD *)(a3 + 16));
  }
  else if (*(_BYTE *)(a3 + 24))
  {
    *(_BYTE *)(a3 + 24) = 0;
  }
  v6 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(v5);
  v8 = *(_QWORD *)(v6 - 16) - result + *(_QWORD *)(v6 - 8);
  if (v8)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v8);
  a2[4] -= 16;
  return result;
}

void sub_20FEDB3D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v33);
    sub_20FDE470C((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v33);
  sub_20FDE470C((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20EB0580C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF2E8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_2100DA8B0(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20FEDB92C(a2, v3 + 200, v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20FEDB8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEDB92C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  char *v7;
  char v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::runtime_error *exception;
  unint64_t v23;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "sync_type";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v23 = 0;
  sub_2100DA8B0(v7, &v23);
  v8 = v23;
  if (v23 >= 0x100)
    goto LABEL_30;
  *(_BYTE *)a2 = v23;
  if (a3 >= 2 && v8)
  {
    if (v8 != 2)
    {
      if (v8 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (*(_BYTE *)(a2 + 56))
      {
        v9 = *(_DWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        if (v9)
          *(_DWORD *)(a2 + 48) = 0;
        v10 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "value";
        *(_QWORD *)(a1 + 96) = 5;
        if (v10)
        {
LABEL_12:
          sub_2101FF2E8(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_2101FF5A0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v23 = 0;
          sub_2100DA8B0(v12, &v23);
          if (!HIDWORD(v23))
          {
            sub_20FEDBC38(a1, a2 + 8);
LABEL_24:
            v17 = *(_QWORD *)(a1 + 48);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v17 - 8);
            v18 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 112) = *(_QWORD *)(v18 - 8);
            *(_QWORD *)(a1 + 48) = v17 - 8;
            *(_QWORD *)(a1 + 72) = v18 - 8;
            return;
          }
          goto LABEL_30;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 56) = 1;
        v19 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "value";
        *(_QWORD *)(a1 + 96) = 5;
        if (v19)
          goto LABEL_12;
      }
      *(_BYTE *)(a1 + 104) = 1;
      goto LABEL_12;
    }
    if (*(_BYTE *)(a2 + 56))
    {
      v13 = *(_DWORD *)(a2 + 48);
      *(_BYTE *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      if (v13 != 1)
        *(_DWORD *)(a2 + 48) = 1;
      v14 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "value";
      *(_QWORD *)(a1 + 96) = 5;
      if (v14)
      {
LABEL_20:
        sub_2101FF2E8(a1);
        v15 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "version";
        *(_QWORD *)(a1 + 96) = 7;
        if (!v15)
          *(_BYTE *)(a1 + 104) = 1;
        v16 = (char *)sub_2101FF5A0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        v23 = 0;
        sub_2100DA8B0(v16, &v23);
        if (!HIDWORD(v23))
        {
          sub_20FEDBDCC(a1, a2 + 8);
          goto LABEL_24;
        }
LABEL_30:
        v21 = __cxa_allocate_exception(8uLL);
        *v21 = &off_24CA1FAE0;
        __cxa_throw(v21, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
    }
    else
    {
      *(_BYTE *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 48) = 1;
      *(_BYTE *)(a2 + 56) = 1;
      v20 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "value";
      *(_QWORD *)(a1 + 96) = 5;
      if (v20)
        goto LABEL_20;
    }
    *(_BYTE *)(a1 + 104) = 1;
    goto LABEL_20;
  }
}

void sub_20FEDBC24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEDBC38(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "sync_command_id";
  *(_QWORD *)(a1 + 96) = 15;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v10 = 0;
  sub_2100DA8B0(v5, &v10);
  *(_QWORD *)a2 = v10;
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "proceed_n";
  *(_QWORD *)(a1 + 96) = 9;
  if (v6)
  {
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
    {
LABEL_5:
      v7 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v10 = 0;
      sub_2100DA8B0(v7, &v10);
      *(_QWORD *)(a2 + 8) = v10;
      *(_BYTE *)(a2 + 16) = 1;
      goto LABEL_9;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
      goto LABEL_5;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 16))
    *(_BYTE *)(a2 + 16) = 0;
LABEL_9:
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "proceed_until";
  *(_QWORD *)(a1 + 96) = 13;
  if (v8)
  {
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
    {
LABEL_11:
      v9 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v10 = 0;
      sub_2100DA8B0(v9, &v10);
      *(_QWORD *)(a2 + 24) = v10;
      *(_BYTE *)(a2 + 32) = 1;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
      goto LABEL_11;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 32))
    *(_BYTE *)(a2 + 32) = 0;
}

void sub_20FEDBDCC(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  _QWORD *exception;
  unint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "status";
  *(_QWORD *)(a1 + 96) = 6;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v11 = 0;
  sub_2100DA8B0(v5, &v11);
  if (v11 >= 0x100)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *(_BYTE *)a2 = v11;
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "sync_id";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v11 = 0;
  sub_2100DA8B0(v7, &v11);
  *(_QWORD *)(a2 + 8) = v11;
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "acknowledge_until";
  *(_QWORD *)(a1 + 96) = 17;
  if (v8)
  {
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
    {
LABEL_8:
      v9 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v11 = 0;
      sub_2100DA8B0(v9, &v11);
      *(_QWORD *)(a2 + 16) = v11;
      *(_BYTE *)(a2 + 24) = 1;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
      goto LABEL_8;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 24))
    *(_BYTE *)(a2 + 24) = 0;
}

void sub_20FEDBF4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  void *__p;
  uint64_t v33;
  char v34;
  _BYTE v35[8];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)&__p);
    sub_20FDE470C((uint64_t)v35, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v35);
        if (!v50)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v36;
    *(_BYTE *)(v3 + 64) = 0;
    if (v39)
    {
      v8 = v38;
      *(_OWORD *)(v3 + 40) = v37;
      *(_QWORD *)(v3 + 56) = v8;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v41;
    v10 = v40;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v44)
    {
      v11 = v43;
      *(_OWORD *)(v3 + 96) = v42;
      *(_QWORD *)(v3 + 112) = v11;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v47)
    {
      v12 = v46;
      *(_OWORD *)(v3 + 128) = v45;
      *(_QWORD *)(v3 + 144) = v12;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v50;
    if (v50)
    {
      *(_OWORD *)(v3 + 160) = v48;
      *(_QWORD *)(v3 + 176) = v49;
      v48 = 0uLL;
      v49 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v48;
    if (!(_QWORD)v48)
      goto LABEL_46;
    v15 = *((_QWORD *)&v48 + 1);
    v16 = (void *)v48;
    if (*((_QWORD *)&v48 + 1) == (_QWORD)v48)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v48;
LABEL_45:
    *((_QWORD *)&v48 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)&__p);
  sub_20FDE470C((uint64_t)v35, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v36;
    *(_BYTE *)(v3 + 64) = 0;
    if (v39)
    {
      v17 = v38;
      *(_OWORD *)(v3 + 40) = v37;
      *(_QWORD *)(v3 + 56) = v17;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v41;
    v19 = v40;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v44)
    {
      v20 = v43;
      *(_OWORD *)(v3 + 96) = v42;
      *(_QWORD *)(v3 + 112) = v20;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v47)
    {
      v21 = v46;
      *(_OWORD *)(v3 + 128) = v45;
      *(_QWORD *)(v3 + 144) = v21;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v50;
    if (v50)
    {
      *(_OWORD *)(v3 + 160) = v48;
      *(_QWORD *)(v3 + 176) = v49;
      v48 = 0uLL;
      v49 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v35);
  if (v50)
  {
LABEL_38:
    v14 = v48;
    if (!(_QWORD)v48)
      goto LABEL_46;
    v23 = *((_QWORD *)&v48 + 1);
    v16 = (void *)v48;
    if (*((_QWORD *)&v48 + 1) == (_QWORD)v48)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v47 && SHIBYTE(v46) < 0)
    operator delete((void *)v45);
  if (v44 && SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  sub_20EB0580C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20E9E840C(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20FDF3288((uint64_t)&__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v34 < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_95:
          v30 = 0;
          if (v34 < 0)
            goto LABEL_98;
          goto LABEL_84;
        }
      }
      else if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_95;
      }
      v30 = 1;
      if (v34 < 0)
LABEL_98:
        operator delete(__p);
LABEL_84:
      if (*(_BYTE *)(a2 + 131))
        v29 = 0;
      else
        v29 = v30;
    }
    while ((v29 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_20E9E840C(a2, &__p);
  if (__p >= 2)
    v26 = 2;
  else
    v26 = __p;
  sub_20FEDC568(a2, v3 + 200, v26);
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v34 < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          v28 = 0;
          if (v34 < 0)
            goto LABEL_83;
          goto LABEL_69;
        }
      }
      else if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      v28 = 1;
      if (v34 < 0)
LABEL_83:
        operator delete(__p);
LABEL_69:
      if (*(_BYTE *)(a2 + 131))
        v27 = 0;
      else
        v27 = v28;
    }
    while ((v27 & 1) != 0);
  }
}

void sub_20FEDC520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEDC568(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;
  std::runtime_error *exception;
  void *__p[2];
  char v13;

  LOBYTE(__p[0]) = 0;
  sub_20E9E7AC8(a1, __p);
  v6 = LOBYTE(__p[0]);
  *(_BYTE *)a2 = __p[0];
  if (a3 < 2 || !v6)
    return;
  if (v6 != 2)
  {
    if (v6 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid sync type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (*(_BYTE *)(a2 + 56))
    {
      v7 = *(_DWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 40) = 0;
      if (v7)
        *(_DWORD *)(a2 + 48) = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 56) = 1;
    }
    LODWORD(__p[0]) = 1;
    sub_20E9E840C(a1, __p);
    sub_20FEDC7A0(a1, a2 + 8);
    if (*(_BYTE *)(a1 + 131))
      return;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a1, (uint64_t)__p);
      if (v13 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_25:
          v10 = 0;
          if (v13 < 0)
            goto LABEL_28;
          goto LABEL_14;
        }
      }
      else if (v13 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_25;
      }
      v10 = 1;
      if (v13 < 0)
LABEL_28:
        operator delete(__p[0]);
LABEL_14:
      if (*(_BYTE *)(a1 + 131))
        v9 = 0;
      else
        v9 = v10;
      if ((v9 & 1) == 0)
        return;
    }
  }
  if (*(_BYTE *)(a2 + 56))
  {
    v8 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 0;
    if (v8 != 1)
      *(_DWORD *)(a2 + 48) = 1;
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 48) = 1;
    *(_BYTE *)(a2 + 56) = 1;
  }
  sub_20FEDC860((uint64_t)__p, a1, a2 + 8);
}

void sub_20FEDC78C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEDC7A0(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  sub_20E9E88B4(a1, (_QWORD *)a2);
  v4 = 0;
  sub_20E9E7AC8(a1, &v4);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    sub_20E9E88B4(a1, (_QWORD *)(a2 + 8));
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
  v5 = 0;
  sub_20E9E7AC8(a1, &v5);
  if (v5)
  {
    if (!*(_BYTE *)(a2 + 32))
    {
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 1;
    }
    sub_20E9E88B4(a1, (_QWORD *)(a2 + 24));
  }
  else if (*(_BYTE *)(a2 + 32))
  {
    *(_BYTE *)(a2 + 32) = 0;
  }
}

void sub_20FEDC860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  char v6;
  void *__p[2];
  char v8;

  LODWORD(__p[0]) = 1;
  sub_20E9E840C(a2, __p);
  sub_20E9E7AC8(a2, (_BYTE *)a3);
  sub_20E9E88B4(a2, (_QWORD *)(a3 + 8));
  LOBYTE(__p[0]) = 0;
  sub_20E9E7AC8(a2, __p);
  if (LOBYTE(__p[0]))
  {
    if (!*(_BYTE *)(a3 + 24))
    {
      *(_QWORD *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 24) = 1;
    }
    sub_20E9E88B4(a2, (_QWORD *)(a3 + 16));
  }
  else if (*(_BYTE *)(a3 + 24))
  {
    *(_BYTE *)(a3 + 24) = 0;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v8 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v6 = 0;
          if (v8 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v8 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v6 = 1;
      if (v8 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v5 = 0;
      else
        v5 = v6;
    }
    while ((v5 & 1) != 0);
  }
}

_QWORD *sub_20FEDC99C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v26);
    sub_20FDE470C((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v26);
  sub_20FDE470C((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20EB0580C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v26, a2, v4);
  return sub_20FEDCE10((uint64_t)v26, a2, v3 + 200);
}

void sub_20FEDCDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FEDCE10(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  sub_2100B6EE0(a2);
  if (v9 >= 2)
    v10 = 2;
  else
    v10 = v9;
  result = sub_20FEDCEE4(a2, a3, v10);
  v12 = a2[12];
  v13 = a2[9];
  a2[6] = *(_QWORD *)(v12 - 8) + *(_QWORD *)(v13 - 8) + 8;
  a2[9] = v13 - 8;
  a2[12] = v12 - 8;
  return result;
}

void sub_20FEDCED0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEDCEE4(_QWORD *result, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  std::logic_error *exception;
  std::runtime_error *v8;
  char v9;
  char v10;

  v3 = result[6];
  if (result[7] <= v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v4 = *(unsigned __int8 *)(result[3] + v3);
  result[6] = v3 + 1;
  *(_BYTE *)a2 = v4;
  if (a3 >= 2 && v4)
  {
    if (v4 == 2)
    {
      if (*(_BYTE *)(a2 + 56))
      {
        v6 = *(_DWORD *)(a2 + 48);
        *(_BYTE *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        if (v6 != 1)
          *(_DWORD *)(a2 + 48) = 1;
      }
      else
      {
        *(_BYTE *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 48) = 1;
        *(_BYTE *)(a2 + 56) = 1;
      }
      return sub_20FEDD2FC((uint64_t)&v10, result, a2 + 8);
    }
    else
    {
      if (v4 != 1)
      {
        v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v8, "invalid sync type");
        __cxa_throw(v8, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (*(_BYTE *)(a2 + 56))
      {
        v5 = *(_DWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        if (v5)
          *(_DWORD *)(a2 + 48) = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 56) = 1;
      }
      return sub_20FEDD094((uint64_t)&v9, result, (_QWORD *)(a2 + 8));
    }
  }
  return result;
}

void sub_20FEDD06C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEDD080(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEDD094(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_2100B6EE0(a2);
  result = sub_20FEDD164(a2, a3);
  v10 = a2[12];
  v11 = a2[9];
  a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
  return result;
}

void sub_20FEDD150(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEDD164(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_QWORD *)(a1[3] + v2);
  a1[6] += 8;
  sub_20FEDD204(a1, (uint64_t)(a2 + 1));
  return sub_20FEDD204(a1, (uint64_t)(a2 + 3));
}

void sub_20FEDD1F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEDD204(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;

  v3 = result[6];
  v2 = result[7];
  if (v2 <= v3)
    goto LABEL_12;
  v4 = result[3];
  v5 = *(unsigned __int8 *)(v4 + v3);
  v6 = v3 + 1;
  result[6] = v6;
  if (v5)
  {
    if (!*(_BYTE *)(a2 + 8))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
    v7 = v2 >= v6;
    v8 = v2 - v6;
    if (!v7)
      v8 = 0;
    if (v8 > 7)
    {
      *(_QWORD *)a2 = *(_QWORD *)(v4 + v6);
      result[6] += 8;
      return result;
    }
LABEL_12:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  if (*(_BYTE *)(a2 + 8))
    *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_20FEDD2D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEDD2E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEDD2FC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_2100B6EE0(a2);
  result = sub_20FEDD3CC(a2, a3);
  v10 = a2[12];
  v11 = a2[9];
  a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
  return result;
}

void sub_20FEDD3B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEDD3CC(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  std::logic_error *exception;

  v2 = a1[6];
  if (a1[7] <= v2)
    goto LABEL_6;
  *(_BYTE *)a2 = *(_BYTE *)(a1[3] + v2);
  v3 = a1[7];
  v4 = a1[6] + 1;
  a1[6] = v4;
  v5 = v3 >= v4;
  v6 = v3 - v4;
  if (!v5)
    v6 = 0;
  if (v6 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1[3] + v4);
  a1[6] += 8;
  return sub_20FEDD204(a1, a2 + 16);
}

void sub_20FEDD480(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEDD494(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEDD4A8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  __int128 *v10;
  unsigned int v11;
  unsigned int v12;

  v5 = a2[2];
  v11 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v11);
  v6 = v11;
  if (v5 < 1)
    return sub_20FEDD7A4(a2, a3, v11);
  if (v5 == 2)
  {
    v12 = 1;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v9 = v12;
      v10 = sub_20FEDD5A8();
      sub_20E9F5C70((std::string *)v10, v9, 2u);
    }
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
  if (v6 >= 2)
    v7 = 2;
  else
    v7 = v6;
  sub_20FEDD7A4(a2, a3, v7);
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FEDD5A8()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55758);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55758))
    return &xmmword_254A55740;
  v2 = (char *)sub_20FEDD684();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A55740, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A55750 = *((_QWORD *)v2 + 2);
    xmmword_254A55740 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55740, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55758);
  return &xmmword_254A55740;
}

void sub_20FEDD66C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55758);
  _Unwind_Resume(a1);
}

void *sub_20FEDD684()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55778);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55778))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::SyncSample]", qword_254A55760);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55760, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55778);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55798);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55798))
    return &unk_254A55780;
  sub_21023CD84((uint64_t)qword_254A55760, (uint64_t)&unk_254A55780);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55780, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55798);
  return &unk_254A55780;
}

void sub_20FEDD774(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55798);
  _Unwind_Resume(a1);
}

void sub_20FEDD78C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55778);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEDD7A4(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  std::runtime_error *exception;
  int v13[3];
  int v14;

  LOBYTE(v13[0]) = 0;
  result = (*(uint64_t (**)(_QWORD *, int *))(*a1 + 80))(a1, v13);
  v7 = LOBYTE(v13[0]);
  *(_BYTE *)a2 = v13[0];
  if (a3 >= 2 && v7)
  {
    if (v7 == 2)
    {
      if (*(_BYTE *)(a2 + 56))
      {
        v9 = *(_DWORD *)(a2 + 48);
        *(_BYTE *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        if (v9 != 1)
          *(_DWORD *)(a2 + 48) = 1;
      }
      else
      {
        *(_BYTE *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 48) = 1;
        *(_BYTE *)(a2 + 56) = 1;
      }
      v10 = *a1;
      *(_QWORD *)v13 = a1[1];
      v11 = v13[0];
      v14 = 1;
      (*(void (**)(_QWORD *, int *))(v10 + 104))(a1, &v14);
      if (v11 < 1)
      {
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2 + 8);
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 120))(a1, a2 + 16);
        LOBYTE(v14) = 0;
        result = (*(uint64_t (**)(_QWORD *, int *))(*a1 + 80))(a1, &v14);
        if ((_BYTE)v14)
        {
          if (!*(_BYTE *)(a2 + 32))
          {
            *(_QWORD *)(a2 + 24) = 0;
            *(_BYTE *)(a2 + 32) = 1;
          }
          return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 120))(a1, a2 + 24);
        }
        else if (*(_BYTE *)(a2 + 32))
        {
          *(_BYTE *)(a2 + 32) = 0;
        }
      }
      else
      {
        return sub_20FEDDEB4(v13, (uint64_t)a1, a2 + 8);
      }
    }
    else
    {
      if (v7 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (*(_BYTE *)(a2 + 56))
      {
        v8 = *(_DWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        if (v8)
          *(_DWORD *)(a2 + 48) = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 56) = 1;
      }
      *(_QWORD *)v13 = a1[1];
      return sub_20FEDD9F8(v13, (uint64_t)a1, a2 + 8);
    }
  }
  return result;
}

void sub_20FEDD9E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEDD9F8(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  char v8;
  char v9;

  v7 = 1;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
    return sub_20FEDDB48(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3);
  v8 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v8);
  if (v8)
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  }
  else if (*(_BYTE *)(a3 + 16))
  {
    *(_BYTE *)(a3 + 16) = 0;
  }
  v9 = 0;
  result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v9);
  if (v9)
  {
    if (!*(_BYTE *)(a3 + 32))
    {
      *(_QWORD *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 1;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 24);
  }
  else if (*(_BYTE *)(a3 + 32))
  {
    *(_BYTE *)(a3 + 32) = 0;
  }
  return result;
}

uint64_t sub_20FEDDB48(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  char v11;
  char v12;

  v5 = *a1;
  if (*a1 == 2)
  {
    v10 = 1;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      v8 = v10;
      v9 = sub_20FEDDCB8();
      sub_20E9F5C70((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3);
  v11 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  }
  else if (*(_BYTE *)(a3 + 16))
  {
    *(_BYTE *)(a3 + 16) = 0;
  }
  v12 = 0;
  result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v12);
  if (v12)
  {
    if (!*(_BYTE *)(a3 + 32))
    {
      *(_QWORD *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 1;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 24);
  }
  else if (*(_BYTE *)(a3 + 32))
  {
    *(_BYTE *)(a3 + 32) = 0;
  }
  if (v5 >= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return result;
}

__int128 *sub_20FEDDCB8()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A557B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A557B8))
    return &xmmword_254A557A0;
  v2 = (char *)sub_20FEDDD94();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A557A0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A557B0 = *((_QWORD *)v2 + 2);
    xmmword_254A557A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A557A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A557B8);
  return &xmmword_254A557A0;
}

void sub_20FEDDD7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A557B8);
  _Unwind_Resume(a1);
}

void *sub_20FEDDD94()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A557D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A557D8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::SyncCommandSample]", qword_254A557C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A557C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A557D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A557F8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A557F8))
    return &unk_254A557E0;
  sub_21023CD84((uint64_t)qword_254A557C0, (uint64_t)&unk_254A557E0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A557E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A557F8);
  return &unk_254A557E0;
}

void sub_20FEDDE84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A557F8);
  _Unwind_Resume(a1);
}

void sub_20FEDDE9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A557D8);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEDDEB4(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  char v11;

  v5 = *a1;
  if (*a1 == 2)
  {
    v10 = 1;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      v8 = v10;
      v9 = sub_20FEDDFE4();
      sub_20E9F5C70((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  v11 = 0;
  result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a3 + 24))
    {
      *(_QWORD *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 24) = 1;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 16);
  }
  else if (*(_BYTE *)(a3 + 24))
  {
    *(_BYTE *)(a3 + 24) = 0;
  }
  if (v5 >= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return result;
}

__int128 *sub_20FEDDFE4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55818);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55818))
    return &xmmword_254A55800;
  v2 = (char *)sub_20FEDE0C0();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A55800, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A55810 = *((_QWORD *)v2 + 2);
    xmmword_254A55800 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55800, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55818);
  return &xmmword_254A55800;
}

void sub_20FEDE0A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55818);
  _Unwind_Resume(a1);
}

void *sub_20FEDE0C0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55838);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55838))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ClientSyncUpdateSample]", qword_254A55820);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55820, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55838);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55858);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55858))
    return &unk_254A55840;
  sub_21023CD84((uint64_t)qword_254A55820, (uint64_t)&unk_254A55840);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55840, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55858);
  return &unk_254A55840;
}

void sub_20FEDE1B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55858);
  _Unwind_Resume(a1);
}

void sub_20FEDE1C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55838);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEDE1E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA08820;
  sub_20EB0580C(a1 + 240);
  sub_20FCF4D74(a1 + 64);
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

__n128 sub_20FEDE240(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  unsigned __int128 *v14;
  unsigned __int128 v15;

  *(_QWORD *)a1 = off_24CA08820;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v2;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v3 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    v4 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v4;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v5 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v5;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    v6 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = v6;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    v7 = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v7;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    v8 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = v8;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    v9 = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v9;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    *(_BYTE *)(a1 + 208) = 1;
  }
  v10 = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v10;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
    v11 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = v11;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a2 + 256) = 0;
    *(_BYTE *)(a1 + 280) = 1;
  }
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    v12 = *(_OWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = v12;
    *(_QWORD *)(a2 + 296) = 0;
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a2 + 288) = 0;
    *(_BYTE *)(a1 + 312) = 1;
  }
  result = *(__n128 *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(__n128 *)(a1 + 320) = result;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  if (*(_BYTE *)(a2 + 400))
  {
    result = *(__n128 *)(a2 + 352);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(__n128 *)(a1 + 352) = result;
    *(_QWORD *)(a2 + 360) = 0;
    *(_QWORD *)(a2 + 368) = 0;
    *(_QWORD *)(a2 + 352) = 0;
    v14 = (unsigned __int128 *)(a2 + 384);
    do
      v15 = __ldaxp(v14);
    while (__stlxp(v15, v14));
    *(_OWORD *)(a1 + 384) = v15;
    *(_BYTE *)(a1 + 400) = 1;
  }
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  if (*(_BYTE *)(a2 + 440))
  {
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    result = *(__n128 *)(a2 + 416);
    *(__n128 *)(a1 + 416) = result;
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a2 + 416) = 0;
    *(_QWORD *)(a2 + 424) = 0;
    *(_QWORD *)(a2 + 432) = 0;
    *(_BYTE *)(a1 + 440) = 1;
  }
  return result;
}

void sub_20FEDE454(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA08820;
  sub_20EB0580C(a1 + 240);
  sub_20FCF4D74(a1 + 64);
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FEDE4B4(uint64_t a1)
{
  return a1 + 240;
}

uint64_t sub_20FEDE4BC(void *a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v5[4];
  uint64_t v6[4];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA087E0, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v6[0] = (uint64_t)a1 + 8;
      v6[1] = (uint64_t)a1 + 24;
      v6[2] = (uint64_t)a1 + 64;
      v6[3] = (uint64_t)a1 + 216;
      v5[0] = result + 8;
      v5[1] = result + 24;
      v5[2] = result + 64;
      v5[3] = result + 216;
      return sub_20FD200D4((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

void sub_20FEDE560(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FEDF600();
  sub_20FEDE614(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 240, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FEDE5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEDE614(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55998);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55998))
  {
    v4 = sub_20FEDF404();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A55980, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A55990 = *(_QWORD *)(v9 - 8);
      xmmword_254A55980 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55980, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55998);
  }
  return sub_20FEDF8E8(&xmmword_254A55980, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_20FEDE724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A55998);
  _Unwind_Resume(a1);
}

void sub_20FEDE744(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55998);
  _Unwind_Resume(a1);
}

void sub_20FEDE75C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 1;
}

double sub_20FEDE788@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  sub_20FF30F0C(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_20FEDE7BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA08820;
  sub_20EB0580C(a1 + 240);
  sub_20FCF4D74(a1 + 64);
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_20FEDE81C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA08820;
  sub_20EB0580C(a1 + 240);
  sub_20FCF4D74(a1 + 64);
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FEDE87C(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FEDEEA0();
  return sub_20FEDE9D0(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 240, (uint64_t)"}");
}

uint64_t sub_20FEDE8D4(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20FEDEBFC((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08168[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08150[v3])(v5, v2);
  return result;
}

void sub_20FEDE96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA08150[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FEDE9A4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FEDE9D0(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20FEDEBFC((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v16])(&p_dst, &__dst);
  return result;
}

void sub_20FEDEB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEDEB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEDEB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEDEBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEDEBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEDEBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEDEBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEDEBFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20FF191FC((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FEDEE4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FEDEE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEDEE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20FEDEEA0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55878);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55878))
    return &xmmword_254A55860;
  v2 = sub_20FEDEF7C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A55860, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A55870 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A55860 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55860, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55878);
  return &xmmword_254A55860;
}

void sub_20FEDEF64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55878);
  _Unwind_Resume(a1);
}

std::string *sub_20FEDEF7C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55898);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55898))
    return &stru_254A55880;
  sub_20FEDF220((uint64_t)__p);
  sub_20FEDF06C((char *)__p, &stru_254A55880);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A55880, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55898);
  return &stru_254A55880;
}

void sub_20FEDF02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A55898);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A55898);
  _Unwind_Resume(a1);
}

void sub_20FEDF06C(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FEDF404();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FEDF1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FEDF220(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55918);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55918))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::PeerInfo>]", qword_254A55900);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55900, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55918);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A55938);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A55938))
  {
    v5 = sub_20E8A2354(qword_254A55900, "<", 0);
    sub_20E89FC08(qword_254A55900, 0, v5, qword_254A55920);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55920, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55938);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A55958);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A55958))
  {
    sub_21023CD84((uint64_t)qword_254A55920, (uint64_t)&xmmword_254A55940);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55940, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55958);
  }
  if (byte_254A55957 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A55940, *((unint64_t *)&xmmword_254A55940 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A55940;
    *(_QWORD *)(a1 + 16) = unk_254A55950;
  }
}

void sub_20FEDF3BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55958);
  _Unwind_Resume(a1);
}

void sub_20FEDF3D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55938);
  _Unwind_Resume(a1);
}

void sub_20FEDF3EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55918);
  _Unwind_Resume(a1);
}

__int128 *sub_20FEDF404()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A558B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A558B8))
    return &xmmword_254A558A0;
  v2 = (char *)sub_20FEDF4E0();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A558A0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A558B0 = *((_QWORD *)v2 + 2);
    xmmword_254A558A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A558A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A558B8);
  return &xmmword_254A558A0;
}

void sub_20FEDF4C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A558B8);
  _Unwind_Resume(a1);
}

void *sub_20FEDF4E0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A558D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A558D8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::PeerInfo]", qword_254A558C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A558C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A558D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A558F8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A558F8))
    return &unk_254A558E0;
  sub_21023CD84((uint64_t)qword_254A558C0, (uint64_t)&unk_254A558E0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A558E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A558F8);
  return &unk_254A558E0;
}

void sub_20FEDF5D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A558F8);
  _Unwind_Resume(a1);
}

void sub_20FEDF5E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A558D8);
  _Unwind_Resume(a1);
}

std::string *sub_20FEDF600()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A55978);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55978))
  {
    sub_20E8610C0(v11, "viz::PackageData");
    v2 = sub_20FEDF404();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_20FDD26DC();
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_20EB0FC3C();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_20E877C80(v10, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v11, (uint64_t *)v10, &stru_254A55960, v8, v9);
    sub_20E89FB98(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A55960, &dword_20E81F000);
        __cxa_guard_release(&qword_254A55978);
        return &stru_254A55960;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_254A55960;
}

void sub_20FEDF80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_254A55978);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20FEDF8C0()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20FEDF89CLL);
  }
}

uint64_t sub_20FEDF8E8(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20FEDEBFC((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v11])(&p_dst, &__dst);
  return result;
}

void sub_20FEDFA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEDFA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEDFA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEDFA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEDFA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20FEDFA90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _BOOL8 v11;
  _QWORD v13[5];
  unsigned __int8 **v14;
  _QWORD v15[5];
  unsigned __int8 **v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = (unsigned __int8 **)&v23;
  if (sub_20FF1D2E8((uint64_t)&v17, v15, v13))
  {
    if (*((_BYTE *)v16 + 24) && *((_BYTE *)v14 + 24))
    {
      v8 = *v16;
      v9 = v16[1];
      v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_20FF1C59C(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v11 = sub_20FDDC4D4(a1 + 200, a2 + 200);
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v16 + 24) != 0) == (*((_BYTE *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20EB0580C((uint64_t)v18);
  sub_20EB0580C((uint64_t)v24);
  return v11;
}

void sub_20FEDFC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEDFC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEDFCA8(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FEE00B4(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FEE0E2C(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FEE1B34(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FEE2620(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FEE2CAC(&v9, (uint64_t)a1);
          else
            sub_20FEDFE0C(&v8, a1);
        }
      }
    }
  }
}

void sub_20FEDFE0C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v15 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
    v9 = v15;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v15 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE13A54((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20FE13A54((uint64_t)a2, v4, v15);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v15 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
    v11 = v15;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v15 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE133CC((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20FE133CC((uint64_t)a2, v4, v15);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v15 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
    v7 = v15;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v15 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FDEB904((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20FDEB904((uint64_t)a2, v4, v15);
  }
LABEL_17:
  v12 = (__int128 *)(v3 + 200);
  v13 = a2[2];
  v15 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
  v14 = v15;
  if (v13 < 1)
  {
    sub_20FEE3584((uint64_t)a2, v12, v15);
  }
  else
  {
    if (v13 == 2)
    {
      v15 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FEE3584((uint64_t)a2, v12, v14);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FEE00B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FAEA0(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v18);
  sub_20FEE03B4(a2, (__int128 *)(v3 + 200), v18);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEE03B4(uint64_t a1, __int128 *a2, unsigned int a3)
{
  void *v5[2];
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20FEE0990((char *)v5, a2);
  sub_20FEE04F8(a1, (uint64_t)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0)
    goto LABEL_15;
}

void sub_20FEE04E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FD22A0C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEE04F8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  void **v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  int v32;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "user_given_name";
    *(_QWORD *)(a1 + 80) = 15;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FD70C(a1, a2);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "product_name";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FD70C(a1, a2 + 24);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "type";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FD70C(a1, a2 + 48);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "serial_number";
    *(_QWORD *)(a1 + 80) = 13;
    if (!v9)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FD70C(a1, a2 + 72);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v10 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "os_build_version";
    *(_QWORD *)(a1 + 80) = 16;
    if (!v10)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FD70C(a1, a2 + 96);
  v11 = a2 + 120;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v12 = *(unsigned __int8 *)(a1 + 88),
        *(_QWORD *)(a1 + 72) = "os_product_version",
        *(_QWORD *)(a1 + 80) = 18,
        v12))
  {
    sub_2101FD70C(a1, v11);
    v13 = *(unsigned __int8 **)(a1 + 40);
    if (*v13 <= 1u)
      goto LABEL_19;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2101FD70C(a1, v11);
    v13 = *(unsigned __int8 **)(a1 + 40);
    if (*v13 <= 1u)
    {
LABEL_19:
      *(_QWORD *)(a1 + 72) = "process_id";
      v14 = a1 + 72;
      v16 = (_BYTE *)(a1 + 88);
      v15 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 10;
      v17 = (_QWORD *)(a1 + 80);
      if (!v15)
        *v16 = 1;
      goto LABEL_28;
    }
  }
  v17 = (_QWORD *)(a1 + 80);
  v14 = a1 + 72;
  v16 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v14 == *(_DWORD *)"version"
      ? (v18 = *(_DWORD *)(*(_QWORD *)v14 + 3) == *(_DWORD *)"sion")
      : (v18 = 0),
        !v18))
  {
LABEL_28:
    v19 = *(int *)(a2 + 144);
    LOBYTE(v30) = 5;
    v31 = v19;
    v20 = (unsigned __int8 *)sub_2101FAC64(a1);
    v21 = *v20;
    *v20 = 5;
    LOBYTE(v30) = v21;
    v22 = (void **)*((_QWORD *)v20 + 1);
    *((_QWORD *)v20 + 1) = v31;
    v31 = (uint64_t)v22;
    sub_20EB07D94((void ***)&v31, v21);
    v13 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v13 <= 1u)
  {
    v23 = *v16;
    *(_QWORD *)v14 = "process_name";
    *v17 = 12;
    if (!v23)
      *v16 = 1;
  }
  sub_2101FD70C(a1, a2 + 152);
  if (**(unsigned __int8 **)(a1 + 40) > 1u || (v24 = *v16, *(_QWORD *)v14 = "uuid", *v17 = 4, v24))
  {
    v30 = (const char *)(a2 + 176);
    sub_20FEE0C1C(a1, (unsigned __int8 **)&v30);
    if (a3 < 2)
      return;
  }
  else
  {
    *v16 = 1;
    v30 = (const char *)(a2 + 176);
    sub_20FEE0C1C(a1, (unsigned __int8 **)&v30);
    if (a3 < 2)
      return;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v25 = *v16;
    *(_QWORD *)v14 = "protocol_info";
    *v17 = 13;
    if (!v25)
      *v16 = 1;
  }
  sub_2101FAEA0(a1);
  v30 = "version";
  v31 = 7;
  v32 = 1;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v26 = *v16;
    *(_QWORD *)v14 = "version";
    *v17 = 7;
    if (!v26)
      *v16 = 1;
  }
  sub_2101FD244(a1, &v32);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v27 = *v16;
    *(_QWORD *)v14 = "current";
    *v17 = 7;
    if (!v27)
      *v16 = 1;
  }
  v30 = (const char *)(a2 + 192);
  sub_20FEE0D24(a1, (uint64_t **)&v30);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v28 = *v16;
    *(_QWORD *)v14 = "min";
    *v17 = 3;
    if (!v28)
      *v16 = 1;
  }
  v30 = (const char *)(a2 + 204);
  sub_20FEE0D24(a1, (uint64_t **)&v30);
  v29 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a1 + 56) = v29 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v16 = 0;
}

void sub_20FEE0978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

char *sub_20FEE0990(char *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20E860C04(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    sub_20E860C04(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v7;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_20E860C04(__dst + 72, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v8;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_20E860C04(__dst + 96, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v9 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)__dst + 6) = v9;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_20E860C04(__dst + 120, *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 120);
    *((_QWORD *)__dst + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v10;
  }
  *((_DWORD *)__dst + 36) = *((_DWORD *)a2 + 36);
  v11 = __dst + 152;
  if (*((char *)a2 + 175) < 0)
  {
    sub_20E860C04(v11, *((void **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v12 = *(__int128 *)((char *)a2 + 152);
    *((_QWORD *)__dst + 21) = *((_QWORD *)a2 + 21);
    *(_OWORD *)v11 = v12;
  }
  v13 = a2[11];
  v14 = a2[12];
  *((_QWORD *)__dst + 26) = *((_QWORD *)a2 + 26);
  *((_OWORD *)__dst + 11) = v13;
  *((_OWORD *)__dst + 12) = v14;
  return __dst;
}

void sub_20FEE0B30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
  {
    operator delete(*v6);
    if ((*(char *)(v1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 95) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v5);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20FEE0C1C(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20EE1E7C4((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FD70C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FEE0CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEE0CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE0D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE0D24(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FD29BB8((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FD70C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FEE0DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEE0E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE0E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE0E2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE1036C(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE10250(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FDE75BC(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 2u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  sub_20FEE10AC(a2, (__int128 *)(v3 + 200), 2u);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FEE10AC(uint64_t a1, __int128 *a2, unsigned int a3)
{
  void *v5[2];
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20FEE0990((char *)v5, a2);
  sub_20FEE11F0(a1, (uint64_t)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0)
    goto LABEL_15;
}

void sub_20FEE11D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FD22A0C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEE11F0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  const void **v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t *v50;

  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v50 = (uint64_t *)(v6 + 16);
    sub_20E9F4E1C((uint64_t)&v49, &v50, (const void **)a2);
    v7 = (const void **)(a2 + 24);
    v8 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v8 + 40))
      goto LABEL_3;
  }
  else
  {
    sub_20E9F5254((uint64_t)&v50, v6 + 8, a2);
    v7 = (const void **)(a2 + 24);
    v8 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
LABEL_3:
      v50 = (uint64_t *)(v8 + 16);
      sub_20E9F4E1C((uint64_t)&v49, &v50, v7);
      v9 = (const void **)(a2 + 48);
      v10 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v10 + 40))
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  sub_20E9F5254((uint64_t)&v50, v8 + 8, (uint64_t)v7);
  v9 = (const void **)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v10 + 40))
  {
LABEL_4:
    v50 = (uint64_t *)(v10 + 16);
    sub_20E9F4E1C((uint64_t)&v49, &v50, v9);
    v11 = (const void **)(a2 + 72);
    v12 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v12 + 40))
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  sub_20E9F5254((uint64_t)&v50, v10 + 8, (uint64_t)v9);
  v11 = (const void **)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v12 + 40))
  {
LABEL_5:
    v50 = (uint64_t *)(v12 + 16);
    sub_20E9F4E1C((uint64_t)&v49, &v50, v11);
    v13 = (const void **)(a2 + 96);
    v14 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v14 + 40))
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  sub_20E9F5254((uint64_t)&v50, v12 + 8, (uint64_t)v11);
  v13 = (const void **)(a2 + 96);
  v14 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
LABEL_6:
    v50 = (uint64_t *)(v14 + 16);
    sub_20E9F4E1C((uint64_t)&v49, &v50, v13);
    v15 = (const void **)(a2 + 120);
    v16 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v16 + 40))
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  sub_20E9F5254((uint64_t)&v50, v14 + 8, (uint64_t)v13);
  v15 = (const void **)(a2 + 120);
  v16 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v16 + 40))
  {
LABEL_7:
    v50 = (uint64_t *)(v16 + 16);
    sub_20E9F4E1C((uint64_t)&v49, &v50, v15);
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  sub_20E9F5254((uint64_t)&v50, v16 + 8, (uint64_t)v15);
  v17 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v17 + 40))
  {
LABEL_8:
    v50 = (uint64_t *)(v17 + 16);
    sub_20E9F3834(&v50, *(_DWORD *)(a2 + 144));
    v18 = (const void **)(a2 + 152);
    v19 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v19 + 40))
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  sub_20E9F3C50();
  v18 = (const void **)(a2 + 152);
  v19 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v19 + 40))
  {
LABEL_9:
    v50 = (uint64_t *)(v19 + 16);
    sub_20E9F4E1C((uint64_t)&v49, &v50, v18);
    v20 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v20 + 40))
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  sub_20E9F5254((uint64_t)&v50, v19 + 8, (uint64_t)v18);
  v20 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v20 + 40))
  {
LABEL_10:
    v50 = (uint64_t *)(v20 + 16);
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 176));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 177));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 178));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 179));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 180));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 181));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 182));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 183));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 184));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 185));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 186));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 187));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 188));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 189));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 190));
    sub_20E9F3164(&v50, *(_BYTE *)(a2 + 191));
    if (a3 < 2)
      return;
    goto LABEL_54;
  }
LABEL_20:
  v21 = *(char *)(a2 + 176);
  if (v21 < 0)
  {
    LOBYTE(v50) = -52;
    BYTE1(v50) = v21;
    std::ostream::write();
    v22 = *(char *)(a2 + 177);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_22:
      LOBYTE(v50) = v22;
      std::ostream::write();
      v23 = *(char *)(a2 + 178);
      if ((v23 & 0x80000000) == 0)
        goto LABEL_23;
      goto LABEL_40;
    }
  }
  else
  {
    LOBYTE(v50) = *(_BYTE *)(a2 + 176);
    std::ostream::write();
    v22 = *(char *)(a2 + 177);
    if ((v22 & 0x80000000) == 0)
      goto LABEL_22;
  }
  LOBYTE(v50) = -52;
  BYTE1(v50) = v22;
  std::ostream::write();
  v23 = *(char *)(a2 + 178);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_23:
    LOBYTE(v50) = v23;
    std::ostream::write();
    v24 = *(char *)(a2 + 179);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_41;
  }
LABEL_40:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v23;
  std::ostream::write();
  v24 = *(char *)(a2 + 179);
  if ((v24 & 0x80000000) == 0)
  {
LABEL_24:
    LOBYTE(v50) = v24;
    std::ostream::write();
    v25 = *(char *)(a2 + 180);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_42;
  }
LABEL_41:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v24;
  std::ostream::write();
  v25 = *(char *)(a2 + 180);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_25:
    LOBYTE(v50) = v25;
    std::ostream::write();
    v26 = *(char *)(a2 + 181);
    if ((v26 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_43;
  }
LABEL_42:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v25;
  std::ostream::write();
  v26 = *(char *)(a2 + 181);
  if ((v26 & 0x80000000) == 0)
  {
LABEL_26:
    LOBYTE(v50) = v26;
    std::ostream::write();
    v27 = *(char *)(a2 + 182);
    if ((v27 & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_44;
  }
LABEL_43:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v26;
  std::ostream::write();
  v27 = *(char *)(a2 + 182);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_27:
    LOBYTE(v50) = v27;
    std::ostream::write();
    v28 = *(char *)(a2 + 183);
    if ((v28 & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_45;
  }
LABEL_44:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v27;
  std::ostream::write();
  v28 = *(char *)(a2 + 183);
  if ((v28 & 0x80000000) == 0)
  {
LABEL_28:
    LOBYTE(v50) = v28;
    std::ostream::write();
    v29 = *(char *)(a2 + 184);
    if ((v29 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_46;
  }
LABEL_45:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v28;
  std::ostream::write();
  v29 = *(char *)(a2 + 184);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_29:
    LOBYTE(v50) = v29;
    std::ostream::write();
    v30 = *(char *)(a2 + 185);
    if ((v30 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_47;
  }
LABEL_46:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v29;
  std::ostream::write();
  v30 = *(char *)(a2 + 185);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_30:
    LOBYTE(v50) = v30;
    std::ostream::write();
    v31 = *(char *)(a2 + 186);
    if ((v31 & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_48;
  }
LABEL_47:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v30;
  std::ostream::write();
  v31 = *(char *)(a2 + 186);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_31:
    LOBYTE(v50) = v31;
    std::ostream::write();
    v32 = *(char *)(a2 + 187);
    if ((v32 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_49;
  }
LABEL_48:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v31;
  std::ostream::write();
  v32 = *(char *)(a2 + 187);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_32:
    LOBYTE(v50) = v32;
    std::ostream::write();
    v33 = *(char *)(a2 + 188);
    if ((v33 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_50;
  }
LABEL_49:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v32;
  std::ostream::write();
  v33 = *(char *)(a2 + 188);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_33:
    LOBYTE(v50) = v33;
    std::ostream::write();
    v34 = *(char *)(a2 + 189);
    if ((v34 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_51;
  }
LABEL_50:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v33;
  std::ostream::write();
  v34 = *(char *)(a2 + 189);
  if ((v34 & 0x80000000) == 0)
  {
LABEL_34:
    LOBYTE(v50) = v34;
    std::ostream::write();
    v35 = *(char *)(a2 + 190);
    if ((v35 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_52;
  }
LABEL_51:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v34;
  std::ostream::write();
  v35 = *(char *)(a2 + 190);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_35:
    LOBYTE(v50) = v35;
    std::ostream::write();
    v36 = *(char *)(a2 + 191);
    if ((v36 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_53;
  }
LABEL_52:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v35;
  std::ostream::write();
  v36 = *(char *)(a2 + 191);
  if ((v36 & 0x80000000) == 0)
  {
LABEL_36:
    LOBYTE(v50) = v36;
    std::ostream::write();
    if (a3 < 2)
      return;
    goto LABEL_54;
  }
LABEL_53:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v36;
  std::ostream::write();
  if (a3 < 2)
    return;
LABEL_54:
  v37 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v37 + 40))
  {
    v50 = (uint64_t *)(v37 + 16);
    sub_20E9F3D4C(&v50, 1u);
    sub_20E9EE95C(*(_QWORD *)(a1 + 24));
    v38 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v38 + 40))
      goto LABEL_56;
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v50, v37 + 8);
    sub_20E9EE95C(*(_QWORD *)(a1 + 24));
    v38 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v38 + 40))
    {
LABEL_56:
      v50 = (uint64_t *)(v38 + 16);
      sub_20E9F3D4C(&v50, *(_DWORD *)(a2 + 192));
      v39 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v39 + 40))
        goto LABEL_57;
      goto LABEL_64;
    }
  }
  sub_20E9F3FC0((uint64_t)&v50, v38 + 8);
  v39 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v39 + 40))
  {
LABEL_57:
    v50 = (uint64_t *)(v39 + 16);
    sub_20E9F3D4C(&v50, *(_DWORD *)(a2 + 196));
    v40 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v40 + 40))
      goto LABEL_58;
    goto LABEL_65;
  }
LABEL_64:
  sub_20E9F3FC0((uint64_t)&v50, v39 + 8);
  v40 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v40 + 40))
  {
LABEL_58:
    v50 = (uint64_t *)(v40 + 16);
    sub_20E9F3D4C(&v50, *(_DWORD *)(a2 + 200));
    v41 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v41 + 40))
      goto LABEL_59;
    goto LABEL_66;
  }
LABEL_65:
  sub_20E9F3FC0((uint64_t)&v50, v40 + 8);
  v41 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v41 + 40))
  {
LABEL_59:
    v50 = (uint64_t *)(v41 + 16);
    sub_20E9F3D4C(&v50, *(_DWORD *)(a2 + 204));
    v42 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v42 + 40))
      goto LABEL_60;
LABEL_67:
    sub_20E9F3FC0((uint64_t)&v50, v42 + 8);
    v43 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v43 + 40))
      goto LABEL_61;
LABEL_68:
    sub_20E9F3FC0((uint64_t)&v50, v43 + 8);
    goto LABEL_69;
  }
LABEL_66:
  sub_20E9F3FC0((uint64_t)&v50, v41 + 8);
  v42 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v42 + 40))
    goto LABEL_67;
LABEL_60:
  v50 = (uint64_t *)(v42 + 16);
  sub_20E9F3D4C(&v50, *(_DWORD *)(a2 + 208));
  v43 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v43 + 40))
    goto LABEL_68;
LABEL_61:
  v50 = (uint64_t *)(v43 + 16);
  sub_20E9F3D4C(&v50, *(_DWORD *)(a2 + 212));
LABEL_69:
  v44 = *(_QWORD *)(a1 + 24);
  v45 = *(_QWORD *)(*(_QWORD *)(v44 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v44 + 48), *(_QWORD *)(v44 + 16) - v45 - 9);
  v46 = *(_QWORD *)(v44 + 48);
  if (v46)
    memmove((void *)(*(_QWORD *)(v44 + 24) + v45), *(const void **)(v44 + 56), v46);
  *(_QWORD *)(v44 + 48) = 0;
  v47 = *(_QWORD *)(v44 + 80);
  v48 = *(_QWORD *)(v44 + 88) - 8;
  *(_QWORD *)(v44 + 88) = v48;
  if (v47 == v48)
  {
    std::ostream::write();
    if (*(_BYTE *)(v44 + 40))
    {
      free(*(void **)(v44 + 24));
      *(_BYTE *)(v44 + 40) = 0;
    }
  }
}

void sub_20FEE1B34(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FA8A4(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v18);
  sub_20FEE1E34(a2, (__int128 *)(v3 + 200), v18);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEE1E34(uint64_t a1, __int128 *a2, unsigned int a3)
{
  void *v5[2];
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20FEE0990((char *)v5, a2);
  sub_20FEE1F78(a1, (uint64_t)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0)
    goto LABEL_15;
}

void sub_20FEE1F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FD22A0C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEE1F78(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  int v32;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "user_given_name";
    *(_QWORD *)(a1 + 80) = 15;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FB61C(a1, a2);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "product_name";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FB61C(a1, a2 + 24);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "type";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FB61C(a1, a2 + 48);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "serial_number";
    *(_QWORD *)(a1 + 80) = 13;
    if (!v9)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FB61C(a1, a2 + 72);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v10 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "os_build_version";
    *(_QWORD *)(a1 + 80) = 16;
    if (!v10)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FB61C(a1, a2 + 96);
  v11 = a2 + 120;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v12 = *(unsigned __int8 *)(a1 + 88),
        *(_QWORD *)(a1 + 72) = "os_product_version",
        *(_QWORD *)(a1 + 80) = 18,
        v12))
  {
    sub_2101FB61C(a1, v11);
    v13 = *(unsigned __int8 **)(a1 + 40);
    if (*v13 <= 1u)
      goto LABEL_19;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2101FB61C(a1, v11);
    v13 = *(unsigned __int8 **)(a1 + 40);
    if (*v13 <= 1u)
    {
LABEL_19:
      *(_QWORD *)(a1 + 72) = "process_id";
      v14 = a1 + 72;
      v16 = (_BYTE *)(a1 + 88);
      v15 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 10;
      v17 = (_QWORD *)(a1 + 80);
      if (!v15)
        *v16 = 1;
      goto LABEL_28;
    }
  }
  v17 = (_QWORD *)(a1 + 80);
  v14 = a1 + 72;
  v16 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v14 == *(_DWORD *)"version"
      ? (v18 = *(_DWORD *)(*(_QWORD *)v14 + 3) == *(_DWORD *)"sion")
      : (v18 = 0),
        !v18))
  {
LABEL_28:
    v19 = *(int *)(a2 + 144);
    LOBYTE(v30) = 5;
    v31 = v19;
    v20 = (unsigned __int8 *)sub_2101FA67C(a1);
    v21 = *v20;
    *v20 = 5;
    LOBYTE(v30) = v21;
    v22 = *((_QWORD *)v20 + 1);
    *((_QWORD *)v20 + 1) = v31;
    v31 = v22;
    sub_20EB911C0(&v31, v21);
    v13 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v13 <= 1u)
  {
    v23 = *v16;
    *(_QWORD *)v14 = "process_name";
    *v17 = 12;
    if (!v23)
      *v16 = 1;
  }
  sub_2101FB61C(a1, a2 + 152);
  if (**(unsigned __int8 **)(a1 + 40) > 1u || (v24 = *v16, *(_QWORD *)v14 = "uuid", *v17 = 4, v24))
  {
    v30 = (const char *)(a2 + 176);
    sub_20FEE2410(a1, (unsigned __int8 **)&v30);
    if (a3 < 2)
      return;
  }
  else
  {
    *v16 = 1;
    v30 = (const char *)(a2 + 176);
    sub_20FEE2410(a1, (unsigned __int8 **)&v30);
    if (a3 < 2)
      return;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v25 = *v16;
    *(_QWORD *)v14 = "protocol_info";
    *v17 = 13;
    if (!v25)
      *v16 = 1;
  }
  sub_2101FA8A4(a1);
  v30 = "version";
  v31 = 7;
  v32 = 1;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v26 = *v16;
    *(_QWORD *)v14 = "version";
    *v17 = 7;
    if (!v26)
      *v16 = 1;
  }
  sub_2101FB154(a1, &v32);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v27 = *v16;
    *(_QWORD *)v14 = "current";
    *v17 = 7;
    if (!v27)
      *v16 = 1;
  }
  v30 = (const char *)(a2 + 192);
  sub_20FEE2518(a1, (uint64_t **)&v30);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v28 = *v16;
    *(_QWORD *)v14 = "min";
    *v17 = 3;
    if (!v28)
      *v16 = 1;
  }
  v30 = (const char *)(a2 + 204);
  sub_20FEE2518(a1, (uint64_t **)&v30);
  v29 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a1 + 56) = v29 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v16 = 0;
}

void sub_20FEE23F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FEE2410(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20EE1E7C4((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FB61C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FEE24D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEE24F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE2504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE2518(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FD29BB8((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FB61C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FEE25DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEE25F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE260C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEE2620(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20E86A980(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FEE2838(a2, (__int128 *)(v3 + 200), 2u);
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20E86A980(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FEE2838(uint64_t a1, __int128 *a2, unsigned int a3)
{
  void *v5[2];
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20FEE0990((char *)v5, a2);
  sub_20FEE297C(a1, (unsigned __int8 *)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0)
    goto LABEL_15;
}

void sub_20FEE2964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FD22A0C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEE297C(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  sub_20E9E713C(a1, (uint64_t)a2);
  sub_20E9E713C(a1, (uint64_t)(a2 + 24));
  sub_20E9E713C(a1, (uint64_t)(a2 + 48));
  sub_20E9E713C(a1, (uint64_t)(a2 + 72));
  sub_20E9E713C(a1, (uint64_t)(a2 + 96));
  sub_20E9E713C(a1, (uint64_t)(a2 + 120));
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v24 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)&v24, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20E9E713C(a1, (uint64_t)(a2 + 152));
  sub_20E9E6F58(a1, a2 + 176);
  sub_20E9E6F58(a1, a2 + 177);
  sub_20E9E6F58(a1, a2 + 178);
  sub_20E9E6F58(a1, a2 + 179);
  sub_20E9E6F58(a1, a2 + 180);
  sub_20E9E6F58(a1, a2 + 181);
  sub_20E9E6F58(a1, a2 + 182);
  sub_20E9E6F58(a1, a2 + 183);
  sub_20E9E6F58(a1, a2 + 184);
  sub_20E9E6F58(a1, a2 + 185);
  sub_20E9E6F58(a1, a2 + 186);
  sub_20E9E6F58(a1, a2 + 187);
  sub_20E9E6F58(a1, a2 + 188);
  sub_20E9E6F58(a1, a2 + 189);
  sub_20E9E6F58(a1, a2 + 190);
  sub_20E9E6F58(a1, a2 + 191);
  if (a3 >= 2)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v7 = *(_QWORD **)(a1 + 24);
      v25 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v7, (uint64_t)&v25, 1);
    }
    std::ostream::operator<<();
    v8 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v8 + 1;
    if (v8 != -1)
    {
      v9 = *(_QWORD **)(a1 + 24);
      v26 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v9, (uint64_t)&v26, 1);
    }
    std::ostream::operator<<();
    v10 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10 + 1;
    if (v10 != -1)
    {
      v11 = *(_QWORD **)(a1 + 24);
      v27 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v11, (uint64_t)&v27, 1);
    }
    std::ostream::operator<<();
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12 + 1;
    if (v12 != -1)
    {
      v13 = *(_QWORD **)(a1 + 24);
      v28 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v13, (uint64_t)&v28, 1);
    }
    std::ostream::operator<<();
    v14 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14 + 1;
    if (v14 != -1)
    {
      v15 = *(_QWORD **)(a1 + 24);
      v29 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v15, (uint64_t)&v29, 1);
    }
    std::ostream::operator<<();
    v16 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v16 + 1;
    if (v16 != -1)
    {
      v17 = *(_QWORD **)(a1 + 24);
      v30 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v17, (uint64_t)&v30, 1);
    }
    std::ostream::operator<<();
    v18 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v18 + 1;
    if (v18 != -1)
    {
      v19 = *(_QWORD **)(a1 + 24);
      v31 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v19, (uint64_t)&v31, 1);
    }
    std::ostream::operator<<();
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(_BYTE *)(a1 + 34);
    *(_QWORD *)(a1 + 40) = v20 + 1;
    if (v20 != -1)
    {
      v22 = *(_QWORD **)(a1 + 24);
      v32 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v22, (uint64_t)&v32, 1);
    }
    v23 = *(_QWORD **)(a1 + 24);
    v33 = v21;
    sub_20E86A980(v23, (uint64_t)&v33, 1);
    ++*(_QWORD *)(a1 + 40);
  }
}

void sub_20FEE2CAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int128 *v10;
  unsigned int v11;
  uint64_t v12;
  int __src;
  uint64_t v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v14, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v14, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v14, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  v10 = (__int128 *)(v3 + 200);
  __src = 2;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v14, 4);
  v11 = __src;
  sub_2100B6A04((_QWORD *)a2);
  sub_20FEE2E64(a2, v10, v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v12 + 10) = *(_QWORD *)(a2 + 32) - v12 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20FEE2E64(uint64_t a1, __int128 *a2, unsigned int a3)
{
  void *v5[2];
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20FEE0990((char *)v5, a2);
  sub_20FEE2FA8(a1, (uint64_t)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0)
    goto LABEL_15;
}

void sub_20FEE2F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FD22A0C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20FEE2FA8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  char *v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  char *v29;
  int64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  char *v33;
  int64_t v34;
  _BOOL4 v35;
  char *result;
  uint64_t v37;
  uint64_t __src;
  uint64_t v39;

  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  __src = v6;
  v7 = a1 + 24;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 23) < 0)
  {
    v9 = *(char **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2)
      v10 = 1;
    else
      v10 = v8 == 0;
    if (!v10)
    {
      v11 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
      v9 = 0;
      if (v11)
        goto LABEL_55;
    }
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
    v9 = (char *)a2;
  }
  sub_2100B8FD4(v7, *(char **)(a1 + 32), v9, &v9[v8], v8);
  v12 = *(unsigned __int8 *)(a2 + 47);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 32);
  __src = v12;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 47) < 0)
  {
    v13 = *(char **)(a2 + 24);
    v14 = *(_QWORD *)(a2 + 32);
    if (!v13)
    {
      if (v14)
      {
        v15 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
        v13 = 0;
        if (v15)
          goto LABEL_55;
      }
    }
  }
  else
  {
    v13 = (char *)(a2 + 24);
    v14 = *(unsigned __int8 *)(a2 + 47);
  }
  sub_2100B8FD4(v7, *(char **)(a1 + 32), v13, &v13[v14], v14);
  v16 = *(unsigned __int8 *)(a2 + 71);
  if ((v16 & 0x80u) != 0)
    v16 = *(_QWORD *)(a2 + 56);
  __src = v16;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 71) < 0)
  {
    v17 = *(char **)(a2 + 48);
    v18 = *(_QWORD *)(a2 + 56);
    if (!v17)
    {
      if (v18)
      {
        v19 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
        v17 = 0;
        if (v19)
          goto LABEL_55;
      }
    }
  }
  else
  {
    v17 = (char *)(a2 + 48);
    v18 = *(unsigned __int8 *)(a2 + 71);
  }
  sub_2100B8FD4(v7, *(char **)(a1 + 32), v17, &v17[v18], v18);
  v20 = *(unsigned __int8 *)(a2 + 95);
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(a2 + 80);
  __src = v20;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 95) < 0)
  {
    v21 = *(char **)(a2 + 72);
    v22 = *(_QWORD *)(a2 + 80);
    if (!v21)
    {
      if (v22)
      {
        v23 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
        v21 = 0;
        if (v23)
          goto LABEL_55;
      }
    }
  }
  else
  {
    v21 = (char *)(a2 + 72);
    v22 = *(unsigned __int8 *)(a2 + 95);
  }
  sub_2100B8FD4(v7, *(char **)(a1 + 32), v21, &v21[v22], v22);
  v24 = *(unsigned __int8 *)(a2 + 119);
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 104);
  __src = v24;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 119) < 0)
  {
    v25 = *(char **)(a2 + 96);
    v26 = *(_QWORD *)(a2 + 104);
    if (!v25)
    {
      if (v26)
      {
        v27 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
        v25 = 0;
        if (v27)
          goto LABEL_55;
      }
    }
  }
  else
  {
    v25 = (char *)(a2 + 96);
    v26 = *(unsigned __int8 *)(a2 + 119);
  }
  sub_2100B8FD4(v7, *(char **)(a1 + 32), v25, &v25[v26], v26);
  v28 = *(unsigned __int8 *)(a2 + 143);
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(a2 + 128);
  __src = v28;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 143) < 0)
  {
    v29 = *(char **)(a2 + 120);
    v30 = *(_QWORD *)(a2 + 128);
    if (!v29)
    {
      if (v30)
      {
        v31 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
        v29 = 0;
        if (v31)
          goto LABEL_55;
      }
    }
  }
  else
  {
    v29 = (char *)(a2 + 120);
    v30 = *(unsigned __int8 *)(a2 + 143);
  }
  sub_2100B8FD4(v7, *(char **)(a1 + 32), v29, &v29[v30], v30);
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)(a2 + 144), (char *)(a2 + 148), 4);
  v32 = *(unsigned __int8 *)(a2 + 175);
  if ((v32 & 0x80u) != 0)
    v32 = *(_QWORD *)(a2 + 160);
  __src = v32;
  sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 175) < 0)
  {
    v33 = *(char **)(a2 + 152);
    v34 = *(_QWORD *)(a2 + 160);
    if (v33)
      goto LABEL_52;
    if (!v34)
      goto LABEL_52;
    v35 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
    v33 = 0;
    if (!v35)
      goto LABEL_52;
LABEL_55:
    abort();
  }
  v33 = (char *)(a2 + 152);
  v34 = *(unsigned __int8 *)(a2 + 175);
LABEL_52:
  sub_2100B8FD4(v7, *(char **)(a1 + 32), v33, &v33[v34], v34);
  result = sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)(a2 + 176), (char *)(a2 + 192), 16);
  if (a3 >= 2)
  {
    LODWORD(__src) = 1;
    sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
    sub_2100B6A04((_QWORD *)a1);
    sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)(a2 + 192), (char *)(a2 + 196), 4);
    sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)(a2 + 196), (char *)(a2 + 200), 4);
    sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)(a2 + 200), (char *)(a2 + 204), 4);
    sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)(a2 + 204), (char *)(a2 + 208), 4);
    sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)(a2 + 208), (char *)(a2 + 212), 4);
    result = sub_2100B8FD4(v7, *(char **)(a1 + 32), (char *)(a2 + 212), (char *)(a2 + 216), 4);
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v37 + 10) = *(_QWORD *)(a1 + 32) - v37 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  return result;
}

void sub_20FEE3584(uint64_t a1, __int128 *a2, unsigned int a3)
{
  void *v5[2];
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20FEE0990((char *)v5, a2);
  sub_20FEE36C8(a1, (uint64_t)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0)
    goto LABEL_15;
}

void sub_20FEE36B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FD22A0C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEE36C8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 96);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 120);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2 + 144);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 152);
  sub_20FEE37C0((_BYTE *)a1, (unsigned __int8 *)(a2 + 176));
  if (a3 >= 2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    sub_20FEE3A5C((int *)&v6, (_BYTE *)a1, (uint64_t *)(a2 + 192));
  }
}

void sub_20FEE37C0(_BYTE *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;

  if ((a1[12] & 2) != 0)
  {
    v4 = a2;
    sub_20FEE394C((uint64_t)a1, &v4);
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 1);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 2);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 3);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 4);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 5);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 6);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 7);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 8);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 9);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 10);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 11);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 12);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 13);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 14);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 15);
  }
}

void sub_20FEE394C(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20EE1E7C4((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FEE3A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEE3A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE3A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE3A5C(int *a1, _BYTE *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;

  LODWORD(v7) = 1;
  (*(void (**)(_BYTE *, uint64_t **))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
  {
    sub_20FEE3BB8(a1, a2, a3);
    return;
  }
  if ((a2[12] & 2) != 0)
  {
    v7 = a3;
    sub_20FEE3D20((uint64_t)a2, &v7);
    v6 = (uint64_t *)((char *)a3 + 12);
    if ((a2[12] & 2) != 0)
      goto LABEL_5;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 4);
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3 + 1);
    v6 = (uint64_t *)((char *)a3 + 12);
    if ((a2[12] & 2) != 0)
    {
LABEL_5:
      v7 = v6;
      sub_20FEE3D20((uint64_t)a2, &v7);
      return;
    }
  }
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, v6);
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3 + 2);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 20);
}

void sub_20FEE3BB8(int *a1, _BYTE *a2, uint64_t *a3)
{
  int v5;
  uint64_t *v7;
  uint64_t *v8;

  v5 = *a1;
  if (*a1 == 2)
  {
    LODWORD(v8) = 1;
    (*(void (**)(_BYTE *, uint64_t **))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
  if ((a2[12] & 2) == 0)
  {
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 4);
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3 + 1);
    v7 = (uint64_t *)((char *)a3 + 12);
    if ((a2[12] & 2) != 0)
      goto LABEL_7;
LABEL_10:
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, v7);
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3 + 2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 20);
    if (v5 < 1)
      return;
    goto LABEL_11;
  }
  v8 = a3;
  sub_20FEE3D20((uint64_t)a2, &v8);
  v7 = (uint64_t *)((char *)a3 + 12);
  if ((a2[12] & 2) == 0)
    goto LABEL_10;
LABEL_7:
  v8 = v7;
  sub_20FEE3D20((uint64_t)a2, &v8);
  if (v5 >= 1)
LABEL_11:
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

void sub_20FEE3D20(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FD29BB8((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FEE3DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEE3E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE3E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE3E30(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FEE4464(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FEE52C4(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FEE5A08(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FEE6868(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FEE7374(&v9, a1);
          else
            sub_20FEE3F94(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20FEE3F94(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27[27];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)&v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)&v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v27[0] = *(_QWORD *)(a2 + 8);
  v25 = v27[0];
  v28 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v24 + 104))(a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3)
      sub_20FDF69C0((uint64_t)&v28, a2, v4, v28);
    else
      sub_20FDF6C34(a2, v4, v28);
  }
  else
  {
    sub_20FDF63C8((int *)v27, a2, v4, v28);
  }
  sub_20FEE7C68((uint64_t)v27, (_DWORD *)a2, v3 + 200);
}

void sub_20FEE441C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEE4464(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v33);
    sub_20FDE470C((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v33);
  sub_20FDE470C((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20EB0580C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF7D8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_2100DB048(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20FEE49BC(a2, v3 + 200, v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20FEE4974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEE49BC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  void **v7;
  int v8;
  void **v9;
  void **v10;
  int v11;
  void **v12;
  void **v13;
  int v14;
  void **v15;
  void **v16;
  int v17;
  void **v18;
  void **v19;
  int v20;
  void **v21;
  void **v22;
  int v23;
  char *v24;
  int v25;
  void **v26;
  void **v27;
  int v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *exception;
  __int128 v37;
  uint64_t v38;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "user_given_name";
  *(_QWORD *)(a1 + 96) = 15;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (void **)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DB548(v7, (uint64_t)&v37);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v37;
  *(_QWORD *)(a2 + 16) = v38;
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "product_name";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v8)
    *(_BYTE *)(a1 + 104) = 1;
  v9 = (void **)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DB548(v9, (uint64_t)&v37);
  v10 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = v37;
  *(_QWORD *)(a2 + 40) = v38;
  v11 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "type";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v11)
    *(_BYTE *)(a1 + 104) = 1;
  v12 = (void **)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DB548(v12, (uint64_t)&v37);
  v13 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = v37;
  *(_QWORD *)(a2 + 64) = v38;
  v14 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "serial_number";
  *(_QWORD *)(a1 + 96) = 13;
  if (!v14)
    *(_BYTE *)(a1 + 104) = 1;
  v15 = (void **)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DB548(v15, (uint64_t)&v37);
  v16 = (void **)(a2 + 72);
  if (*(char *)(a2 + 95) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = v37;
  *(_QWORD *)(a2 + 88) = v38;
  v17 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "os_build_version";
  *(_QWORD *)(a1 + 96) = 16;
  if (!v17)
    *(_BYTE *)(a1 + 104) = 1;
  v18 = (void **)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DB548(v18, (uint64_t)&v37);
  v19 = (void **)(a2 + 96);
  if (*(char *)(a2 + 119) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = v37;
  *(_QWORD *)(a2 + 112) = v38;
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "os_product_version";
  *(_QWORD *)(a1 + 96) = 18;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
  v21 = (void **)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DB548(v21, (uint64_t)&v37);
  v22 = (void **)(a2 + 120);
  if (*(char *)(a2 + 143) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = v37;
  *(_QWORD *)(a2 + 136) = v38;
  v23 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "process_id";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v23)
    *(_BYTE *)(a1 + 104) = 1;
  v24 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v37 = 0;
  sub_2100DB190(v24, &v37);
  if ((_QWORD)v37 != (int)v37)
    goto LABEL_46;
  *(_DWORD *)(a2 + 144) = v37;
  v25 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "process_name";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v25)
    *(_BYTE *)(a1 + 104) = 1;
  v26 = (void **)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DB548(v26, (uint64_t)&v37);
  v27 = (void **)(a2 + 152);
  if (*(char *)(a2 + 175) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v37;
  *(_QWORD *)(a2 + 168) = v38;
  v28 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "uuid";
  *(_QWORD *)(a1 + 96) = 4;
  if (v28)
  {
    *(_QWORD *)&v37 = a2 + 176;
    sub_20FEE4ED4((uint64_t *)a1, (_OWORD **)&v37);
    if (a3 < 2)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)&v37 = a2 + 176;
    sub_20FEE4ED4((uint64_t *)a1, (_OWORD **)&v37);
    if (a3 < 2)
      return;
  }
  v29 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "protocol_info";
  *(_QWORD *)(a1 + 96) = 13;
  if (!v29)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2101FF7D8(a1);
  v30 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v30)
    *(_BYTE *)(a1 + 104) = 1;
  v31 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v37 = 0;
  sub_2100DB048(v31, &v37);
  if (DWORD1(v37))
  {
LABEL_46:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v32 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "current";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v32)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v37 = a2 + 192;
  sub_20FEE50D4((uint64_t *)a1, (uint64_t *)&v37);
  v33 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "min";
  *(_QWORD *)(a1 + 96) = 3;
  if (!v33)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v37 = a2 + 204;
  sub_20FEE50D4((uint64_t *)a1, (uint64_t *)&v37);
  v34 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v34 - 8);
  v35 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v35 - 8);
  *(_QWORD *)(a1 + 48) = v34 - 8;
  *(_QWORD *)(a1 + 72) = v35 - 8;
}

void sub_20FEE4E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20FEE4ED4(uint64_t *a1, _OWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  v4 = (void **)sub_2101FFA90(a1);
  ++a1[14];
  v17 = 0;
  v16 = 0uLL;
  sub_2100DB548(v4, (uint64_t)&v16);
  v14 = v17;
  *(_OWORD *)__p = v16;
  v5 = SHIBYTE(v17);
  v6 = (char *)v16;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  v15 = v8;
  v16 = 0uLL;
  sub_20FCF4A0C((uint64_t *)v8, &v16);
  v10 = MEMORY[0x24BEDB7F0];
  v11 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v12;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v16;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

void sub_20FEE5044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_20FD0DE48(&a15);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FEE50D4(uint64_t *a1, uint64_t *a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  __p[0] = 0;
  __p[1] = 0;
  v16 = 0;
  v4 = (void **)sub_2101FFA90(a1);
  ++a1[14];
  v19 = 0;
  v18 = 0uLL;
  sub_2100DB548(v4, (uint64_t)&v18);
  v16 = v19;
  *(_OWORD *)__p = v18;
  v5 = SHIBYTE(v19);
  v6 = (char *)v18;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  v17 = v8;
  *(_QWORD *)&v18 = 0;
  DWORD2(v18) = 0;
  sub_210233D60((uint64_t *)v8, (uint64_t)&v18);
  v10 = MEMORY[0x24BEDB7F0];
  v11 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v12;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  v13 = DWORD2(v18);
  v14 = *a2;
  *(_QWORD *)v14 = v18;
  *(_DWORD *)(v14 + 8) = v13;
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

void sub_20FEE5234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48(&a16);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEE52C4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  char v30;
  uint64_t v31[27];
  _BYTE v32[8];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v31);
    sub_20FDE470C((uint64_t)v32, v31);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v32);
        if (!v47)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v30, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(_BYTE *)(v3 + 64) = 0;
    if (v36)
    {
      v8 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(_QWORD *)(v3 + 56) = v8;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v38;
    v10 = v37;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v41)
    {
      v11 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(_QWORD *)(v3 + 112) = v11;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v44)
    {
      v12 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(_QWORD *)(v3 + 144) = v12;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(_QWORD *)(v3 + 176) = v46;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v45;
    if (!(_QWORD)v45)
      goto LABEL_46;
    v15 = *((_QWORD *)&v45 + 1);
    v16 = (void *)v45;
    if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v45;
LABEL_45:
    *((_QWORD *)&v45 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v31);
  sub_20FDE470C((uint64_t)v32, v31);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v30, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(_BYTE *)(v3 + 64) = 0;
    if (v36)
    {
      v17 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(_QWORD *)(v3 + 56) = v17;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v38;
    v19 = v37;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v41)
    {
      v20 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(_QWORD *)(v3 + 112) = v20;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v44)
    {
      v21 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(_QWORD *)(v3 + 144) = v21;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(_QWORD *)(v3 + 176) = v46;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v32);
  if (v47)
  {
LABEL_38:
    v14 = v45;
    if (!(_QWORD)v45)
      goto LABEL_46;
    v23 = *((_QWORD *)&v45 + 1);
    v16 = (void *)v45;
    if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v44 && SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  sub_20EB0580C((uint64_t)v31);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v31, a2, v4);
  LODWORD(v31[0]) = 2;
  sub_20E9EDADC(a2[6], v31);
  v24 = v31[0];
  v25 = a2 + 2;
  sub_20E90A71C(a2 + 2);
  if (v24 >= 2)
    v26 = 2;
  else
    v26 = v24;
  sub_20FEE57AC(a2, v3 + 200, v26);
  v27 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(*v25 + 32))(a2 + 2);
  v29 = *(_QWORD *)(v27 - 16) - result + *(_QWORD *)(v27 - 8);
  if (v29)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v25 + 40))(a2 + 2, v29);
  a2[4] -= 16;
  return result;
}

void sub_20FEE5764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEE57AC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  char v7;
  int v8;

  sub_20E9EE280(a1[6], (std::string *)a2);
  sub_20E9EE280(a1[6], (std::string *)(a2 + 24));
  sub_20E9EE280(a1[6], (std::string *)(a2 + 48));
  sub_20E9EE280(a1[6], (std::string *)(a2 + 72));
  sub_20E9EE280(a1[6], (std::string *)(a2 + 96));
  sub_20E9EE280(a1[6], (std::string *)(a2 + 120));
  sub_20E9EDA2C(a1[6], (_DWORD *)(a2 + 144));
  sub_20E9EE280(a1[6], (std::string *)(a2 + 152));
  v6 = a1[6];
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 176));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 177));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 178));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 179));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 180));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 181));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 182));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 183));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 184));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 185));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 186));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 187));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 188));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 189));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 190));
  sub_20E9ED7B4(v6, (_BYTE *)(a2 + 191));
  if (a3 >= 2)
  {
    v8 = 1;
    sub_20E9EDADC(a1[6], &v8);
    sub_20FEE5934((uint64_t)&v7, a1, (_DWORD *)(a2 + 192));
  }
}

uint64_t sub_20FEE5934(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = a2 + 2;
  sub_20E90A71C(a2 + 2);
  sub_20E9EDADC(a2[6], a3);
  sub_20E9EDADC(a2[6], a3 + 1);
  sub_20E9EDADC(a2[6], a3 + 2);
  sub_20E9EDADC(a2[6], a3 + 3);
  sub_20E9EDADC(a2[6], a3 + 4);
  sub_20E9EDADC(a2[6], a3 + 5);
  v6 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(v5);
  v8 = *(_QWORD *)(v6 - 16) - result + *(_QWORD *)(v6 - 8);
  if (v8)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v8);
  a2[4] -= 16;
  return result;
}

void sub_20FEE5A08(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v33);
    sub_20FDE470C((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v33);
  sub_20FDE470C((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20EB0580C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF2E8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_2100DA8B0(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20FEE5F60(a2, v3 + 200, v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20FEE5F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEE5F60(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  void **v7;
  int v8;
  void **v9;
  void **v10;
  int v11;
  void **v12;
  void **v13;
  int v14;
  void **v15;
  void **v16;
  int v17;
  void **v18;
  void **v19;
  int v20;
  void **v21;
  void **v22;
  int v23;
  char *v24;
  int v25;
  void **v26;
  void **v27;
  int v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *exception;
  __int128 v37;
  uint64_t v38;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "user_given_name";
  *(_QWORD *)(a1 + 96) = 15;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DADB0(v7, (uint64_t)&v37);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v37;
  *(_QWORD *)(a2 + 16) = v38;
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "product_name";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v8)
    *(_BYTE *)(a1 + 104) = 1;
  v9 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DADB0(v9, (uint64_t)&v37);
  v10 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = v37;
  *(_QWORD *)(a2 + 40) = v38;
  v11 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "type";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v11)
    *(_BYTE *)(a1 + 104) = 1;
  v12 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DADB0(v12, (uint64_t)&v37);
  v13 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = v37;
  *(_QWORD *)(a2 + 64) = v38;
  v14 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "serial_number";
  *(_QWORD *)(a1 + 96) = 13;
  if (!v14)
    *(_BYTE *)(a1 + 104) = 1;
  v15 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DADB0(v15, (uint64_t)&v37);
  v16 = (void **)(a2 + 72);
  if (*(char *)(a2 + 95) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = v37;
  *(_QWORD *)(a2 + 88) = v38;
  v17 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "os_build_version";
  *(_QWORD *)(a1 + 96) = 16;
  if (!v17)
    *(_BYTE *)(a1 + 104) = 1;
  v18 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DADB0(v18, (uint64_t)&v37);
  v19 = (void **)(a2 + 96);
  if (*(char *)(a2 + 119) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = v37;
  *(_QWORD *)(a2 + 112) = v38;
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "os_product_version";
  *(_QWORD *)(a1 + 96) = 18;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
  v21 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DADB0(v21, (uint64_t)&v37);
  v22 = (void **)(a2 + 120);
  if (*(char *)(a2 + 143) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = v37;
  *(_QWORD *)(a2 + 136) = v38;
  v23 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "process_id";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v23)
    *(_BYTE *)(a1 + 104) = 1;
  v24 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v37 = 0;
  sub_2100DA9F8(v24, &v37);
  if ((_QWORD)v37 != (int)v37)
    goto LABEL_46;
  *(_DWORD *)(a2 + 144) = v37;
  v25 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "process_name";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v25)
    *(_BYTE *)(a1 + 104) = 1;
  v26 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_2100DADB0(v26, (uint64_t)&v37);
  v27 = (void **)(a2 + 152);
  if (*(char *)(a2 + 175) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v37;
  *(_QWORD *)(a2 + 168) = v38;
  v28 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "uuid";
  *(_QWORD *)(a1 + 96) = 4;
  if (v28)
  {
    *(_QWORD *)&v37 = a2 + 176;
    sub_20FEE6478((uint64_t *)a1, (_OWORD **)&v37);
    if (a3 < 2)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)&v37 = a2 + 176;
    sub_20FEE6478((uint64_t *)a1, (_OWORD **)&v37);
    if (a3 < 2)
      return;
  }
  v29 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "protocol_info";
  *(_QWORD *)(a1 + 96) = 13;
  if (!v29)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2101FF2E8(a1);
  v30 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v30)
    *(_BYTE *)(a1 + 104) = 1;
  v31 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v37 = 0;
  sub_2100DA8B0(v31, &v37);
  if (DWORD1(v37))
  {
LABEL_46:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v32 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "current";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v32)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v37 = a2 + 192;
  sub_20FEE6678((uint64_t *)a1, (uint64_t *)&v37);
  v33 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "min";
  *(_QWORD *)(a1 + 96) = 3;
  if (!v33)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v37 = a2 + 204;
  sub_20FEE6678((uint64_t *)a1, (uint64_t *)&v37);
  v34 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v34 - 8);
  v35 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v35 - 8);
  *(_QWORD *)(a1 + 48) = v34 - 8;
  *(_QWORD *)(a1 + 72) = v35 - 8;
}

void sub_20FEE6440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20FEE6478(uint64_t *a1, _OWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v17 = 0;
  v16 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v16);
  v14 = v17;
  *(_OWORD *)__p = v16;
  v5 = SHIBYTE(v17);
  v6 = (char *)v16;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  v15 = v8;
  v16 = 0uLL;
  sub_20FCF4A0C((uint64_t *)v8, &v16);
  v10 = MEMORY[0x24BEDB7F0];
  v11 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v12;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v16;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

void sub_20FEE65E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_20FD0DE48(&a15);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FEE6678(uint64_t *a1, uint64_t *a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  __p[0] = 0;
  __p[1] = 0;
  v16 = 0;
  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v19 = 0;
  v18 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v18);
  v16 = v19;
  *(_OWORD *)__p = v18;
  v5 = SHIBYTE(v19);
  v6 = (char *)v18;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  v17 = v8;
  *(_QWORD *)&v18 = 0;
  DWORD2(v18) = 0;
  sub_210233D60((uint64_t *)v8, (uint64_t)&v18);
  v10 = MEMORY[0x24BEDB7F0];
  v11 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v12;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  v13 = DWORD2(v18);
  v14 = *a2;
  *(_QWORD *)v14 = v18;
  *(_DWORD *)(v14 + 8) = v13;
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

void sub_20FEE67D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48(&a16);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FEE6868(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  void *__p;
  uint64_t v33;
  char v34;
  _BYTE v35[8];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)&__p);
    sub_20FDE470C((uint64_t)v35, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v35);
        if (!v50)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v36;
    *(_BYTE *)(v3 + 64) = 0;
    if (v39)
    {
      v8 = v38;
      *(_OWORD *)(v3 + 40) = v37;
      *(_QWORD *)(v3 + 56) = v8;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v41;
    v10 = v40;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v44)
    {
      v11 = v43;
      *(_OWORD *)(v3 + 96) = v42;
      *(_QWORD *)(v3 + 112) = v11;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v47)
    {
      v12 = v46;
      *(_OWORD *)(v3 + 128) = v45;
      *(_QWORD *)(v3 + 144) = v12;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v50;
    if (v50)
    {
      *(_OWORD *)(v3 + 160) = v48;
      *(_QWORD *)(v3 + 176) = v49;
      v48 = 0uLL;
      v49 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v48;
    if (!(_QWORD)v48)
      goto LABEL_46;
    v15 = *((_QWORD *)&v48 + 1);
    v16 = (void *)v48;
    if (*((_QWORD *)&v48 + 1) == (_QWORD)v48)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v48;
LABEL_45:
    *((_QWORD *)&v48 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)&__p);
  sub_20FDE470C((uint64_t)v35, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v36;
    *(_BYTE *)(v3 + 64) = 0;
    if (v39)
    {
      v17 = v38;
      *(_OWORD *)(v3 + 40) = v37;
      *(_QWORD *)(v3 + 56) = v17;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v41;
    v19 = v40;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v44)
    {
      v20 = v43;
      *(_OWORD *)(v3 + 96) = v42;
      *(_QWORD *)(v3 + 112) = v20;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v47)
    {
      v21 = v46;
      *(_OWORD *)(v3 + 128) = v45;
      *(_QWORD *)(v3 + 144) = v21;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v50;
    if (v50)
    {
      *(_OWORD *)(v3 + 160) = v48;
      *(_QWORD *)(v3 + 176) = v49;
      v48 = 0uLL;
      v49 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v35);
  if (v50)
  {
LABEL_38:
    v14 = v48;
    if (!(_QWORD)v48)
      goto LABEL_46;
    v23 = *((_QWORD *)&v48 + 1);
    v16 = (void *)v48;
    if (*((_QWORD *)&v48 + 1) == (_QWORD)v48)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v47 && SHIBYTE(v46) < 0)
    operator delete((void *)v45);
  if (v44 && SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  sub_20EB0580C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20E9E840C(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20FDF3288((uint64_t)&__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v34 < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_95:
          v30 = 0;
          if (v34 < 0)
            goto LABEL_98;
          goto LABEL_84;
        }
      }
      else if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_95;
      }
      v30 = 1;
      if (v34 < 0)
LABEL_98:
        operator delete(__p);
LABEL_84:
      if (*(_BYTE *)(a2 + 131))
        v29 = 0;
      else
        v29 = v30;
    }
    while ((v29 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_20E9E840C(a2, &__p);
  if (__p >= 2)
    v26 = 2;
  else
    v26 = __p;
  sub_20FEE6E84(a2, v3 + 200, v26);
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v34 < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          v28 = 0;
          if (v34 < 0)
            goto LABEL_83;
          goto LABEL_69;
        }
      }
      else if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      v28 = 1;
      if (v34 < 0)
LABEL_83:
        operator delete(__p);
LABEL_69:
      if (*(_BYTE *)(a2 + 131))
        v27 = 0;
      else
        v27 = v28;
    }
    while ((v27 & 1) != 0);
  }
}

void sub_20FEE6E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEE6E84(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  void **v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char v17;
  char v18;
  char v19;
  void **v20;
  int v21;
  int v22;
  void **v23;
  int v24;
  int v25;
  void **v26;
  int v27;
  int v28;
  void **v29;
  void *__p[2];
  uint64_t v31;

  v6 = *(_QWORD *)(a1 + 80) + 1;
  *(_QWORD *)(a1 + 80) = v6;
  if (*(_BYTE *)(a1 + 128))
    v7 = *(_BYTE *)(a1 + 131) == 0;
  else
    v7 = 1;
  if (!v7)
  {
    *(_BYTE *)(a1 + 132) = 1;
    *(_QWORD *)(a1 + 80) = v6 + 1;
LABEL_15:
    v10 = v6 + 2;
LABEL_20:
    *(_BYTE *)(a1 + 132) = 1;
    v14 = v10 + 1;
LABEL_21:
    v15 = v14 + 1;
LABEL_22:
    *(_QWORD *)(a1 + 80) = v15 + 1;
LABEL_23:
    *(_BYTE *)(a1 + 132) = 1;
    goto LABEL_24;
  }
  sub_20E9E9FEC(a1, (uint64_t)__p);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 16) = v31;
  ++*(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128))
    v8 = *(_BYTE *)(a1 + 131) == 0;
  else
    v8 = 1;
  v9 = v8;
  *(_QWORD *)(a1 + 80) = v6 + 1;
  if ((v9 & 1) == 0)
    goto LABEL_15;
  v11 = (void **)(a2 + 24);
  sub_20E9E9FEC(a1, (uint64_t)__p);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 40) = v31;
  ++*(_QWORD *)(a1 + 104);
  v12 = *(unsigned __int8 *)(a1 + 128);
  v13 = *(unsigned __int8 *)(a1 + 131);
  v10 = *(_QWORD *)(a1 + 80) + 1;
  *(_QWORD *)(a1 + 80) = v10;
  if (v12 && v13)
    goto LABEL_20;
  v20 = (void **)(a2 + 48);
  sub_20E9E9FEC(a1, (uint64_t)__p);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 64) = v31;
  ++*(_QWORD *)(a1 + 104);
  v21 = *(unsigned __int8 *)(a1 + 128);
  v22 = *(unsigned __int8 *)(a1 + 131);
  v14 = *(_QWORD *)(a1 + 80) + 1;
  *(_QWORD *)(a1 + 80) = v14;
  if (v21 && v22)
    goto LABEL_21;
  v23 = (void **)(a2 + 72);
  sub_20E9E9FEC(a1, (uint64_t)__p);
  if (*(char *)(a2 + 95) < 0)
    operator delete(*v23);
  *(_OWORD *)v23 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 88) = v31;
  ++*(_QWORD *)(a1 + 104);
  v24 = *(unsigned __int8 *)(a1 + 128);
  v25 = *(unsigned __int8 *)(a1 + 131);
  v15 = *(_QWORD *)(a1 + 80) + 1;
  *(_QWORD *)(a1 + 80) = v15;
  if (v24 && v25)
    goto LABEL_22;
  v26 = (void **)(a2 + 96);
  sub_20E9E9FEC(a1, (uint64_t)__p);
  if (*(char *)(a2 + 119) < 0)
    operator delete(*v26);
  *(_OWORD *)v26 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 112) = v31;
  ++*(_QWORD *)(a1 + 104);
  v27 = *(unsigned __int8 *)(a1 + 128);
  v28 = *(unsigned __int8 *)(a1 + 131);
  ++*(_QWORD *)(a1 + 80);
  if (v27 && v28)
    goto LABEL_23;
  v29 = (void **)(a2 + 120);
  sub_20E9E9FEC(a1, (uint64_t)__p);
  if (*(char *)(a2 + 143) < 0)
    operator delete(*v29);
  *(_OWORD *)v29 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 136) = v31;
  ++*(_QWORD *)(a1 + 104);
LABEL_24:
  sub_20E9E81B8(a1, (_DWORD *)(a2 + 144));
  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
  }
  else
  {
    v16 = (void **)(a2 + 152);
    sub_20E9E9FEC(a1, (uint64_t)__p);
    if (*(char *)(a2 + 175) < 0)
      operator delete(*v16);
    *(_OWORD *)v16 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 168) = v31;
    ++*(_QWORD *)(a1 + 104);
  }
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 176));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 177));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 178));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 179));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 180));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 181));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 182));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 183));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 184));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 185));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 186));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 187));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 188));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 189));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 190));
  sub_20E9E7AC8(a1, (_BYTE *)(a2 + 191));
  if (a3 >= 2)
  {
    LODWORD(__p[0]) = 1;
    sub_20E9E840C(a1, __p);
    sub_20E9E840C(a1, (_DWORD *)(a2 + 192));
    sub_20E9E840C(a1, (_DWORD *)(a2 + 196));
    sub_20E9E840C(a1, (_DWORD *)(a2 + 200));
    sub_20E9E840C(a1, (_DWORD *)(a2 + 204));
    sub_20E9E840C(a1, (_DWORD *)(a2 + 208));
    sub_20E9E840C(a1, (_DWORD *)(a2 + 212));
    if (!*(_BYTE *)(a1 + 131))
    {
      while (1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
          return;
        sub_20E9E9FEC(a1, (uint64_t)__p);
        if (SHIBYTE(v31) < 0)
        {
          if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
            goto LABEL_45;
LABEL_33:
          v17 = 1;
          if (SHIBYTE(v31) < 0)
            goto LABEL_46;
LABEL_34:
          if (*(_BYTE *)(a1 + 131))
            v18 = 0;
          else
            v18 = v17;
          if ((v18 & 1) == 0)
            return;
        }
        else
        {
          if (SHIBYTE(v31) != 1 || *(unsigned __int8 *)(a1 + 72) != LOBYTE(__p[0]))
            goto LABEL_33;
LABEL_45:
          v17 = 0;
          if ((SHIBYTE(v31) & 0x80000000) == 0)
            goto LABEL_34;
LABEL_46:
          operator delete(__p[0]);
          if (*(_BYTE *)(a1 + 131))
            v19 = 0;
          else
            v19 = v17;
          if ((v19 & 1) == 0)
            return;
        }
      }
    }
  }
}

void sub_20FEE7374(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FEE77E8((uint64_t)v25, a2, v3 + 200);
}

void sub_20FEE77A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEE77E8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  sub_2100B6EE0(a2);
  if (v9 >= 2)
    v10 = 2;
  else
    v10 = v9;
  sub_20FEE78BC(a2, a3, v10);
  v11 = a2[12];
  v12 = a2[9];
  a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
  a2[9] = v12 - 8;
  a2[12] = v11 - 8;
}

void sub_20FEE78A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEE78BC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::logic_error *exception;
  char v14;

  sub_2100B7230(a1, a2);
  sub_2100B7230(a1, a2 + 24);
  sub_2100B7230(a1, a2 + 48);
  sub_2100B7230(a1, a2 + 72);
  sub_2100B7230(a1, a2 + 96);
  sub_2100B7230(a1, a2 + 120);
  v6 = a1[6];
  v7 = a1[7];
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (!v8)
    v9 = 0;
  if (v9 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 144) = *(_DWORD *)(a1[3] + v6);
  a1[6] += 4;
  sub_2100B7230(a1, a2 + 152);
  v10 = a1[6];
  v11 = a1[7];
  v8 = v11 >= v10;
  v12 = v11 - v10;
  if (!v8)
    v12 = 0;
  if (v12 <= 0xF)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
LABEL_12:
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1[3] + v10);
  a1[6] += 16;
  if (a3 >= 2)
    sub_20FEE7A20((uint64_t)&v14, a1, (_DWORD *)(a2 + 192));
}

void sub_20FEE79F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEE7A0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD **sub_20FEE7A20(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _DWORD **result;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _QWORD *v16;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_2100B6EE0(a2);
  v13 = a3;
  v14 = a3 + 1;
  v15 = a3 + 2;
  v16 = a2;
  sub_20FEE7B10(&v13, (uint64_t *)&v16);
  v13 = a3 + 3;
  v14 = a3 + 4;
  v15 = a3 + 5;
  v16 = a2;
  result = sub_20FEE7B10(&v13, (uint64_t *)&v16);
  v10 = a2[12];
  v11 = a2[9];
  a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
  return result;
}

void sub_20FEE7AFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD **sub_20FEE7B10(_DWORD **result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::logic_error *exception;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 48);
  v4 = *(_QWORD *)(*a2 + 56);
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
    goto LABEL_11;
  **result = *(_DWORD *)(*(_QWORD *)(v2 + 24) + v3);
  *(_QWORD *)(v2 + 48) += 4;
  v7 = *a2;
  v8 = *(_QWORD *)(*a2 + 48);
  v9 = *(_QWORD *)(*a2 + 56);
  v5 = v9 >= v8;
  v10 = v9 - v8;
  if (!v5)
    v10 = 0;
  if (v10 <= 3)
    goto LABEL_11;
  *result[1] = *(_DWORD *)(*(_QWORD *)(v7 + 24) + v8);
  *(_QWORD *)(v7 + 48) += 4;
  v11 = *a2;
  v12 = *(_QWORD *)(*a2 + 48);
  v13 = *(_QWORD *)(*a2 + 56);
  v5 = v13 >= v12;
  v14 = v13 - v12;
  if (!v5)
    v14 = 0;
  if (v14 <= 3)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *result[2] = *(_DWORD *)(*(_QWORD *)(v11 + 24) + v12);
  *(_QWORD *)(v11 + 48) += 4;
  return result;
}

void sub_20FEE7C2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEE7C40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEE7C54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEE7C68(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  unsigned int v11;

  v5 = a2[2];
  v10 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v10);
  v6 = v10;
  if (v5 < 1)
  {
    sub_20FEE8118((uint64_t)a2, a3, v10);
  }
  else
  {
    if (v5 == 2)
    {
      v11 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v11);
      if (v11 >= 3)
      {
        v8 = v11;
        v9 = sub_20FEE7D68();
        sub_20E9F5C70((std::string *)v9, v8, 2u);
      }
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    if (v6 >= 2)
      v7 = 2;
    else
      v7 = v6;
    sub_20FEE8118((uint64_t)a2, a3, v7);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

__int128 *sub_20FEE7D68()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A559B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A559B8))
    return &xmmword_254A559A0;
  v2 = sub_20FEE7E44();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A559A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A559B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A559A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A559A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A559B8);
  return &xmmword_254A559A0;
}

void sub_20FEE7E2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A559B8);
  _Unwind_Resume(a1);
}

std::string *sub_20FEE7E44()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A559D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A559D8))
    return &stru_254A559C0;
  sub_20FEE7F34((uint64_t)__p);
  sub_20EB0B20C((char *)__p, &stru_254A559C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A559C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A559D8);
  return &stru_254A559C0;
}

void sub_20FEE7EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A559D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A559D8);
  _Unwind_Resume(a1);
}

void sub_20FEE7F34(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A559F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A559F8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::PeerInfoSample<2U>]", qword_254A559E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A559E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A559F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A55A18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A55A18))
  {
    v5 = sub_20E8A2354(qword_254A559E0, "<", 0);
    sub_20E89FC08(qword_254A559E0, 0, v5, qword_254A55A00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55A00, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55A18);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A55A38);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A55A38))
  {
    sub_21023CD84((uint64_t)qword_254A55A00, (uint64_t)&xmmword_254A55A20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55A20, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55A38);
  }
  if (byte_254A55A37 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A55A20, *((unint64_t *)&xmmword_254A55A20 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A55A20;
    *(_QWORD *)(a1 + 16) = unk_254A55A30;
  }
}

void sub_20FEE80D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55A38);
  _Unwind_Resume(a1);
}

void sub_20FEE80E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55A18);
  _Unwind_Resume(a1);
}

void sub_20FEE8100(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A559F8);
  _Unwind_Resume(a1);
}

void sub_20FEE8118(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 96);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 120);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2 + 144);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 152);
  sub_20FEE8210((_BYTE *)a1, (_OWORD *)(a2 + 176));
  if (a3 >= 2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    sub_20FEE8538((int *)&v6, (_BYTE *)a1, a2 + 192);
  }
}

void sub_20FEE8210(_BYTE *a1, _OWORD *a2)
{
  _OWORD *v4;

  if ((a1[12] & 2) != 0)
  {
    v4 = a2;
    sub_20FEE839C((uint64_t)a1, &v4);
  }
  else
  {
    (*(void (**)(_BYTE *, _OWORD *))(*(_QWORD *)a1 + 80))(a1, a2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 1);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 3);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 4);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 5);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 6);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 7);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 8);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 9);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 10);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 11);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 12);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 13);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 14);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 15);
  }
}

void sub_20FEE839C(uint64_t a1, _OWORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
  v3 = SHIBYTE(v12);
  v4 = (char *)__p[0];
  v5 = operator new();
  v6 = v5;
  if (v3 >= 0)
    v7 = (char *)__p;
  else
    v7 = v4;
  sub_21023865C(v5, v7);
  v13 = v6;
  v14 = 0uLL;
  sub_20FCF4A0C((uint64_t *)v6, &v14);
  v8 = MEMORY[0x24BEDB7F0];
  v9 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v6 + *(_QWORD *)(v9 - 24)) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v6 + 16) = v10;
  if (*(char *)(v6 + 111) < 0)
    operator delete(*(void **)(v6 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v6 + 128);
  MEMORY[0x212BC6398](v6, 0x10B2C40EED050F3);
  **a2 = v14;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_20FEE84E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  sub_20FD0DE48(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FEE8538(int *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  LODWORD(v7) = 1;
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
  {
    sub_20FEE8694(a1, a2, a3);
    return;
  }
  if ((a2[12] & 2) != 0)
  {
    v7 = a3;
    sub_20FEE8A1C((uint64_t)a2, &v7);
    v6 = a3 + 12;
    if ((a2[12] & 2) != 0)
      goto LABEL_5;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 8);
    v6 = a3 + 12;
    if ((a2[12] & 2) != 0)
    {
LABEL_5:
      v7 = v6;
      sub_20FEE8A1C((uint64_t)a2, &v7);
      return;
    }
  }
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, v6);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
}

void sub_20FEE8694(int *a1, _BYTE *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unsigned int v8;
  __int128 *v9;
  uint64_t v10;

  v5 = *a1;
  if (*a1 == 2)
  {
    LODWORD(v10) = 1;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      v8 = v10;
      v9 = sub_20FEE8820();
      sub_20E9F5C70((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
  if ((a2[12] & 2) == 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 8);
    v7 = a3 + 12;
    if ((a2[12] & 2) != 0)
      goto LABEL_8;
LABEL_11:
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, v7);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    if (v5 < 1)
      return;
    goto LABEL_12;
  }
  v10 = a3;
  sub_20FEE8A1C((uint64_t)a2, &v10);
  v7 = a3 + 12;
  if ((a2[12] & 2) == 0)
    goto LABEL_11;
LABEL_8:
  v10 = v7;
  sub_20FEE8A1C((uint64_t)a2, &v10);
  if (v5 < 1)
    return;
LABEL_12:
  (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FEE8820()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55A58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55A58))
    return &xmmword_254A55A40;
  v2 = (char *)sub_20FEE88FC();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A55A40, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A55A50 = *((_QWORD *)v2 + 2);
    xmmword_254A55A40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55A40, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55A58);
  return &xmmword_254A55A40;
}

void sub_20FEE88E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55A58);
  _Unwind_Resume(a1);
}

void *sub_20FEE88FC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55A78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55A78))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::kio::ProtocolInfoSample]", qword_254A55A60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55A60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55A78);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55A98);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55A98))
    return &unk_254A55A80;
  sub_21023CD84((uint64_t)qword_254A55A60, (uint64_t)&unk_254A55A80);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55A80, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55A98);
  return &unk_254A55A80;
}

void sub_20FEE89EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55A98);
  _Unwind_Resume(a1);
}

void sub_20FEE8A04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55A78);
  _Unwind_Resume(a1);
}

void sub_20FEE8A1C(uint64_t a1, uint64_t *a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
  v3 = SHIBYTE(v14);
  v4 = (char *)__p[0];
  v5 = operator new();
  v6 = v5;
  if (v3 >= 0)
    v7 = (char *)__p;
  else
    v7 = v4;
  sub_21023865C(v5, v7);
  v15 = v6;
  v16 = 0;
  v17 = 0;
  sub_210233D60((uint64_t *)v6, (uint64_t)&v16);
  v8 = MEMORY[0x24BEDB7F0];
  v9 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v6 + *(_QWORD *)(v9 - 24)) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v6 + 16) = v10;
  if (*(char *)(v6 + 111) < 0)
    operator delete(*(void **)(v6 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v6 + 128);
  MEMORY[0x212BC6398](v6, 0x10B2C40EED050F3);
  v11 = v17;
  v12 = *a2;
  *(_QWORD *)v12 = v16;
  *(_DWORD *)(v12 + 8) = v11;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

void sub_20FEE8B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  sub_20FD0DE48(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEE8BA8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  unsigned __int128 *v13;
  unsigned __int128 v14;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = &off_24CA07A88;
  *(_QWORD *)(result + 8) = v2;
  v3 = (_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 16) = v4;
  v5 = result + 16;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 24) = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *(_QWORD *)(a2 + 8) = v3;
    *v3 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)(result + 8) = v5;
  }
  v7 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(result + 48) = 0;
  *(_OWORD *)(result + 32) = v7;
  *(_BYTE *)(result + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(result + 48) = v8;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(result + 72) = 1;
  }
  *(_BYTE *)(result + 80) = 0;
  *(_BYTE *)(result + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    v9 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(result + 80) = v9;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_BYTE *)(result + 104) = 1;
  }
  v10 = *(_OWORD *)(a2 + 112);
  v11 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(result + 144) = 0;
  *(_QWORD *)(result + 128) = v11;
  *(_OWORD *)(result + 112) = v10;
  *(_BYTE *)(result + 192) = 0;
  if (*(_BYTE *)(a2 + 192))
  {
    v12 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(result + 144) = v12;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    v13 = (unsigned __int128 *)(a2 + 176);
    do
      v14 = __ldaxp(v13);
    while (__stlxp(v14, v13));
    *(_OWORD *)(result + 176) = v14;
    *(_BYTE *)(result + 192) = 1;
  }
  *(_BYTE *)(result + 208) = 0;
  *(_BYTE *)(result + 232) = 0;
  if (*(_BYTE *)(a2 + 232))
  {
    *(_QWORD *)(result + 208) = 0;
    *(_QWORD *)(result + 216) = 0;
    *(_QWORD *)(result + 224) = 0;
    *(_OWORD *)(result + 208) = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(result + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a2 + 216) = 0;
    *(_QWORD *)(a2 + 224) = 0;
    *(_BYTE *)(result + 232) = 1;
  }
  *(_QWORD *)result = &off_24CA07A08;
  return result;
}

char *sub_20FEE8CFC(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_20E94F4BC(a1, a2, &v15, &v14, a3);
  if (*v6)
    return (char *)*v6;
  v8 = v6;
  v9 = (char *)operator new(0x40uLL);
  v10 = v9 + 32;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_20E860C04(v10, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a4;
    *((_QWORD *)v9 + 6) = *(_QWORD *)(a4 + 16);
  }
  v9[56] = *(_BYTE *)(a4 + 24);
  v11 = v15;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v11;
  *v8 = (uint64_t)v9;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v9;
  if (v12)
  {
    *a1 = v12;
    v13 = (uint64_t *)*v8;
  }
  sub_20E868578(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_20FEE8DE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEE8DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD *v13[5];
  unsigned __int8 **v14;
  _QWORD v15[5];
  unsigned __int8 **v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = (unsigned __int8 **)&v23;
  if (sub_20FF1D2E8((uint64_t)&v17, v15, v13))
  {
    if (*((_BYTE *)v16 + 24) && *((_BYTE *)v14 + 24))
    {
      v8 = *v16;
      v9 = v16[1];
      v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_20FF1C59C(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v15[0] = a1 + 200;
        v13[0] = (_QWORD *)(a2 + 200);
        v11 = sub_20FDD4A28((uint64_t)v15, v13);
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v16 + 24) != 0) == (*((_BYTE *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20EB0580C((uint64_t)v18);
  sub_20EB0580C((uint64_t)v24);
  return v11;
}

void sub_20FEE8FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEE9014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEE9028(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FEE9434(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FEEA394(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FEEA820(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FEEAFE0(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FEEB39C(&v9, (uint64_t)a1);
          else
            sub_20FEE918C(&v8, a1);
        }
      }
    }
  }
}

void sub_20FEE918C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  const void ***v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE13A54((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20FE13A54((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE133CC((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20FE133CC((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FDEB904((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20FDEB904((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (const void ***)(v3 + 200);
  v13 = a2[2];
  v14 = 1;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20FEEB7D0((uint64_t)a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FEEB7D0((uint64_t)a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FEE9434(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FAEA0(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v18);
  sub_20FEE9734(a2, (const void ***)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEE9734(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  const void **v5;
  const void ***v6;
  BOOL v7;
  char **v8;
  char *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_20FEE8CFC((uint64_t **)&v8, (uint64_t *)v9, v4 + 4, (uint64_t)(v4 + 4));
      v5 = (const void **)v4[1];
      if (v5)
      {
        do
        {
          v6 = (const void ***)v5;
          v5 = (const void **)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (const void ***)v4[2];
          v7 = *v6 == v4;
          v4 = (const void **)v6;
        }
        while (!v7);
      }
      v4 = (const void **)v6;
    }
    while (v6 != v3);
  }
  sub_20FEE9828(a1, (uint64_t)&v8);
  sub_20E866BE0((uint64_t)&v8, v9[0]);
}

void sub_20FEE97F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20FEE9810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20FEE9828(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  void **v13;
  __int128 v14;
  void **v15;

  v4 = *(_QWORD *)(a2 + 16);
  v15 = 0;
  v14 = 0uLL;
  sub_20FEE99C8((uint64_t)&v14, v4);
  v5 = a2 + 8;
  sub_20FEE9AB8(*(_QWORD **)a2, (_QWORD *)(a2 + 8), (uint64_t)&v14);
  *(_OWORD *)__p = v14;
  v13 = v15;
  *(_QWORD *)&v14 = "context_enable_state_changes";
  *((_QWORD *)&v14 + 1) = 28;
  v15 = __p;
  sub_20FEE9D34(a1, (uint64_t)&v14);
  v15 = 0;
  v14 = (unint64_t)&v14 + 8;
  sub_20FEEA248((_QWORD **)&v14, (__int128 *)__p[0], v6, (__int128 *)__p[1]);
  sub_20E866BE0(a2, *(char **)(a2 + 8));
  v7 = *((_QWORD *)&v14 + 1);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v7;
  v8 = v15;
  *(_QWORD *)(a2 + 16) = v15;
  if (v8)
  {
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)&v14 = (char *)&v14 + 8;
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0;
    sub_20E866BE0((uint64_t)&v14, 0);
    v9 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  else
  {
    *(_QWORD *)a2 = v5;
    sub_20E866BE0((uint64_t)&v14, (char *)v7);
    v9 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  v10 = (void **)__p[1];
  v11 = v9;
  if (__p[1] != v9)
  {
    do
    {
      if (*((char *)v10 - 9) < 0)
        operator delete(*(v10 - 4));
      v10 -= 4;
    }
    while (v10 != v9);
    v11 = (void **)__p[0];
  }
  __p[1] = v9;
  operator delete(v11);
}

void sub_20FEE9978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  sub_20E866BE0((uint64_t)&a13, a14);
  sub_20EB9B93C(&a9);
  _Unwind_Resume(a1);
}

void sub_20FEE99A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEE99B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEE99C8(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  void **v11;

  v2 = *(void ***)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    if (a2 >> 59)
      sub_20FDFA718();
    v4 = *(void ***)(a1 + 8);
    v5 = 32 * a2;
    v6 = (char *)operator new(32 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[(char *)v4 - (char *)v2];
      do
      {
        v10 = *((_OWORD *)v4 - 2);
        *((_QWORD *)v9 - 2) = *(v4 - 2);
        *((_OWORD *)v9 - 2) = v10;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(v4 - 4) = 0;
        *(v9 - 8) = *((_BYTE *)v4 - 8);
        v9 -= 32;
        v4 -= 4;
      }
      while (v4 != v2);
      v2 = *(void ***)a1;
      v11 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        if (*((char *)v11 - 9) < 0)
          operator delete(*(v11 - 4));
        v11 -= 4;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_20FEE9AB8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  unint64_t v7;
  __int128 v8;
  _QWORD *v9;
  char *v10;
  int v11;
  _QWORD *v12;
  BOOL v13;
  void *__p[2];
  uint64_t v16;
  char v17;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *((_BYTE *)v5 + 56);
      if (*((char *)v5 + 55) < 0)
      {
        sub_20E860C04(__p, (void *)v5[4], v5[5]);
        v17 = v6;
        v7 = *(_QWORD *)(a3 + 8);
        if (v7 < *(_QWORD *)(a3 + 16))
        {
LABEL_6:
          v8 = *(_OWORD *)__p;
          *(_QWORD *)(v7 + 16) = v16;
          *(_OWORD *)v7 = v8;
          __p[1] = 0;
          v16 = 0;
          __p[0] = 0;
          *(_BYTE *)(v7 + 24) = v17;
          *(_QWORD *)(a3 + 8) = v7 + 32;
          v9 = (_QWORD *)v5[1];
          if (v9)
            goto LABEL_11;
          goto LABEL_14;
        }
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v5 + 2);
        v16 = v5[6];
        v17 = v6;
        v7 = *(_QWORD *)(a3 + 8);
        if (v7 < *(_QWORD *)(a3 + 16))
          goto LABEL_6;
      }
      v10 = sub_20FEE9BFC((void **)a3, (uint64_t)__p);
      v11 = SHIBYTE(v16);
      *(_QWORD *)(a3 + 8) = v10;
      if (v11 < 0)
      {
        operator delete(__p[0]);
        v9 = (_QWORD *)v5[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v12 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      else
      {
        v9 = (_QWORD *)v5[1];
        if (v9)
          goto LABEL_11;
      }
      do
      {
LABEL_14:
        v12 = (_QWORD *)v5[2];
        v13 = *v12 == (_QWORD)v5;
        v5 = v12;
      }
      while (!v13);
LABEL_3:
      v5 = v12;
    }
    while (v12 != a2);
  }
  return a3;
}

void sub_20FEE9BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20FEE9BFC(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  __int128 v16;
  void **v17;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20FDFA718();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    sub_20E877A38();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11[24] = *(_BYTE *)(a2 + 24);
  v13 = v11 + 32;
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 2);
      *((_QWORD *)v11 - 2) = *(v15 - 2);
      *((_OWORD *)v11 - 2) = v16;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 4) = 0;
      *(v11 - 8) = *((_BYTE *)v15 - 8);
      v11 -= 32;
      v15 -= 4;
    }
    while (v15 != v14);
    v15 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v17 != v15)
    {
      if (*((char *)v17 - 9) < 0)
        operator delete(*(v17 - 4));
      v17 -= 4;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20FEE9D34(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  char v11;
  char *v12;

  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v3 = *(unsigned __int8 *)(a1 + 88), *(_OWORD *)(a1 + 72) = *(_OWORD *)a2, v3))
  {
    v4 = *(uint64_t **)(a2 + 16);
    sub_2101FAEA0(a1);
    v5 = *v4;
    v6 = v4[1];
    if (v5 != v6)
    {
      do
      {
LABEL_6:
        sub_2101FAEA0(a1);
        sub_2101FD70C(a1, v5);
        v11 = *(_BYTE *)(v5 + 24);
        v12 = &v11;
        sub_20FEE9E58(a1, (unsigned __int8 **)&v12);
        v7 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 8);
        *(_QWORD *)(a1 + 56) = v7 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        v5 += 32;
      }
      while (v5 != v6);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 16);
      *(_QWORD *)(a1 + 56) = v7 - 16;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    v8 = *(uint64_t **)(a2 + 16);
    sub_2101FAEA0(a1);
    v5 = *v8;
    v6 = v8[1];
    if (v5 != v6)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (v10)
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20FEE9E58(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FEE9F60((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FD70C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FEE9F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEE9F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE9F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEE9F60(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v24[0] = v5;
  v6 = (_QWORD *)(v5 + 16);
  v7 = *a3;
  if (v7 > 2)
  {
    sub_20E86A980(v6, (uint64_t)"Invalid(", 8);
    v8 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v8, (uint64_t)")", 1);
  }
  else
  {
    sub_20E86A980(v6, (uint64_t)(&off_24CA0C000)[2 * v7], (uint64_t)(&off_24CA0C000)[2 * v7 + 1]);
  }
  v9 = *(_DWORD *)(v5 + 120);
  if ((v9 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v5 + 112);
    v13 = *(_QWORD *)(v5 + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v5 + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v5 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v23) = 0;
      v11 = __dst;
      goto LABEL_17;
    }
    v14 = *(const void **)(v5 + 40);
    v10 = *(_QWORD *)(v5 + 56) - (_QWORD)v14;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
      sub_20E860B7C();
  }
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v23 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_16;
  }
  HIBYTE(v23) = v10;
  v11 = __dst;
  if (v10)
LABEL_16:
    memmove(v11, v14, v10);
LABEL_17:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v24[0];
  if (v24[0])
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v20;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v17 + 128);
    MEMORY[0x212BC6398](v17, 0x10B2C40EED050F3);
  }
  v24[0] = a2;
  v24[1] = __dst;
  v24[2] = a2;
  v24[3] = __dst;
  v24[4] = __dst;
  v21 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v21 == -1)
    sub_20E877AB8();
  v25 = v24;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v21])(&v25, a2);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
}

void sub_20FEEA1F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FEEA218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEEA234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FEEA248(_QWORD **a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  __int128 *v5;
  uint64_t *v7;
  char v8;
  __int128 v9;
  uint64_t *v10;
  _OWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;

  if (a2 != a4)
  {
    v5 = a2;
    v7 = (uint64_t *)(a1 + 1);
    while (1)
    {
      v8 = *((_BYTE *)v5 + 24);
      if (*((char *)v5 + 23) < 0)
      {
        sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v9 = *v5;
        v15 = *((_QWORD *)v5 + 2);
        *(_OWORD *)__p = v9;
      }
      v16 = v8;
      v10 = sub_20E94F4BC(a1, v7, &v18, &v17, (const void **)__p);
      if (!*v10)
        break;
      if (SHIBYTE(v15) < 0)
        goto LABEL_13;
LABEL_3:
      v5 += 2;
      if (v5 == a4)
        return;
    }
    v11 = operator new(0x40uLL);
    v11[2] = *(_OWORD *)__p;
    *((_QWORD *)v11 + 6) = v15;
    __p[1] = 0;
    v15 = 0;
    __p[0] = 0;
    *((_BYTE *)v11 + 56) = v16;
    v12 = v18;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v12;
    *v10 = (uint64_t)v11;
    v13 = (_QWORD *)**a1;
    if (v13)
    {
      *a1 = v13;
      v11 = (_OWORD *)*v10;
    }
    sub_20E868578(a1[1], (uint64_t *)v11);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_13:
    operator delete(__p[0]);
    goto LABEL_3;
  }
}

void sub_20FEEA378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEEA394(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE1036C(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE10250(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FDE75BC(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  sub_20FEEA614(a2, (const void ***)(v3 + 200));
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FEEA614(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  unint64_t v5;
  uint64_t v6;
  const void **v7;
  const void ***v8;
  BOOL v9;
  uint64_t *v10;
  const void **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  char **v16;
  char **v17;
  char *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;

  v18 = 0;
  v19 = 0;
  v17 = &v18;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 == (const void **)(a2 + 1))
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 24);
    if (!*(_BYTE *)(v6 + 40))
    {
LABEL_3:
      sub_20E9F4A34();
      goto LABEL_13;
    }
  }
  else
  {
    do
    {
      sub_20FEE8CFC((uint64_t **)&v17, (uint64_t *)&v18, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != v3);
    v5 = v19;
    v6 = *(_QWORD *)(a1 + 24);
    if (!*(_BYTE *)(v6 + 40))
      goto LABEL_3;
  }
  v21 = (uint64_t *)(v6 + 16);
  sub_20E9F472C(&v21, v5);
LABEL_13:
  v10 = (uint64_t *)v17;
  if (v17 != &v18)
  {
    do
    {
      v11 = (const void **)(v10 + 4);
      v12 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v12 + 40))
      {
        v21 = (uint64_t *)(v12 + 16);
        sub_20E9F4E1C((uint64_t)&v20, &v21, v11);
      }
      else
      {
        sub_20E9F5254((uint64_t)&v21, v12 + 8, (uint64_t)v11);
      }
      v13 = *((char *)v10 + 56);
      v14 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v14 + 40))
      {
        v21 = (uint64_t *)(v14 + 16);
        sub_20E9F3164(&v21, v13);
      }
      else
      {
        if (v13 < 0)
        {
          LOBYTE(v21) = -52;
          BYTE1(v21) = v13;
        }
        else
        {
          LOBYTE(v21) = *((_BYTE *)v10 + 56);
        }
        std::ostream::write();
      }
      v15 = (char *)v10[1];
      if (v15)
      {
        do
        {
          v16 = (char **)v15;
          v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (char **)v10[2];
          v9 = *v16 == (char *)v10;
          v10 = (uint64_t *)v16;
        }
        while (!v9);
      }
      v10 = (uint64_t *)v16;
    }
    while (v16 != &v18);
  }
  sub_20E866BE0((uint64_t)&v17, v18);
}

void sub_20FEEA7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20FEEA7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20FEEA808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20FEEA820(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FA8A4(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v18);
  sub_20FEEAB20(a2, (const void ***)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEEAB20(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  const void **v5;
  const void ***v6;
  BOOL v7;
  char **v8;
  char *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_20FEE8CFC((uint64_t **)&v8, (uint64_t *)v9, v4 + 4, (uint64_t)(v4 + 4));
      v5 = (const void **)v4[1];
      if (v5)
      {
        do
        {
          v6 = (const void ***)v5;
          v5 = (const void **)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (const void ***)v4[2];
          v7 = *v6 == v4;
          v4 = (const void **)v6;
        }
        while (!v7);
      }
      v4 = (const void **)v6;
    }
    while (v6 != v3);
  }
  sub_20FEEAC14(a1, (uint64_t)&v8);
  sub_20E866BE0((uint64_t)&v8, v9[0]);
}

void sub_20FEEABE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20FEEABFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20FEEAC14(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  void **v13;
  __int128 v14;
  void **v15;

  v4 = *(_QWORD *)(a2 + 16);
  v15 = 0;
  v14 = 0uLL;
  sub_20FEE99C8((uint64_t)&v14, v4);
  v5 = a2 + 8;
  sub_20FEE9AB8(*(_QWORD **)a2, (_QWORD *)(a2 + 8), (uint64_t)&v14);
  *(_OWORD *)__p = v14;
  v13 = v15;
  *(_QWORD *)&v14 = "context_enable_state_changes";
  *((_QWORD *)&v14 + 1) = 28;
  v15 = __p;
  sub_20FEEADB4(a1, (uint64_t)&v14);
  v15 = 0;
  v14 = (unint64_t)&v14 + 8;
  sub_20FEEA248((_QWORD **)&v14, (__int128 *)__p[0], v6, (__int128 *)__p[1]);
  sub_20E866BE0(a2, *(char **)(a2 + 8));
  v7 = *((_QWORD *)&v14 + 1);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v7;
  v8 = v15;
  *(_QWORD *)(a2 + 16) = v15;
  if (v8)
  {
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)&v14 = (char *)&v14 + 8;
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0;
    sub_20E866BE0((uint64_t)&v14, 0);
    v9 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  else
  {
    *(_QWORD *)a2 = v5;
    sub_20E866BE0((uint64_t)&v14, (char *)v7);
    v9 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  v10 = (void **)__p[1];
  v11 = v9;
  if (__p[1] != v9)
  {
    do
    {
      if (*((char *)v10 - 9) < 0)
        operator delete(*(v10 - 4));
      v10 -= 4;
    }
    while (v10 != v9);
    v11 = (void **)__p[0];
  }
  __p[1] = v9;
  operator delete(v11);
}

void sub_20FEEAD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  sub_20E866BE0((uint64_t)&a13, a14);
  sub_20EB9B93C(&a9);
  _Unwind_Resume(a1);
}

void sub_20FEEAD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEEADA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEEADB4(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  char v11;
  char *v12;

  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v3 = *(unsigned __int8 *)(a1 + 88), *(_OWORD *)(a1 + 72) = *(_OWORD *)a2, v3))
  {
    v4 = *(uint64_t **)(a2 + 16);
    sub_2101FA8A4(a1);
    v5 = *v4;
    v6 = v4[1];
    if (v5 != v6)
    {
      do
      {
LABEL_6:
        sub_2101FA8A4(a1);
        sub_2101FB61C(a1, v5);
        v11 = *(_BYTE *)(v5 + 24);
        v12 = &v11;
        sub_20FEEAED8(a1, (unsigned __int8 **)&v12);
        v7 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 8);
        *(_QWORD *)(a1 + 56) = v7 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        v5 += 32;
      }
      while (v5 != v6);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 16);
      *(_QWORD *)(a1 + 56) = v7 - 16;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    v8 = *(uint64_t **)(a2 + 16);
    sub_2101FA8A4(a1);
    v5 = *v8;
    v6 = v8[1];
    if (v5 != v6)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (v10)
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20FEEAED8(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FEE9F60((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FB61C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FEEAF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEEAFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEEAFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEEAFE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20E86A980(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FEEB1F8(a2, (const void ***)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20E86A980(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FEEB1F8(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  const void **v5;
  const void ***v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t *v9;
  char *v10;
  char **v11;
  char **v12;
  char *v13[2];
  unsigned __int8 v14;

  v13[0] = 0;
  v13[1] = 0;
  v12 = v13;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_20FEE8CFC((uint64_t **)&v12, (uint64_t *)v13, v4 + 4, (uint64_t)(v4 + 4));
      v5 = (const void **)v4[1];
      if (v5)
      {
        do
        {
          v6 = (const void ***)v5;
          v5 = (const void **)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (const void ***)v4[2];
          v7 = *v6 == v4;
          v4 = (const void **)v6;
        }
        while (!v7);
      }
      v4 = (const void **)v6;
    }
    while (v6 != v3);
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_13;
    goto LABEL_12;
  }
  if (*(_QWORD *)(a1 + 40))
  {
LABEL_12:
    v8 = *(_QWORD **)(a1 + 24);
    v14 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v8, (uint64_t)&v14, 1);
  }
LABEL_13:
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v9 = (uint64_t *)v12;
  if (v12 != v13)
  {
    do
    {
      sub_20E9E713C(a1, (uint64_t)(v9 + 4));
      v14 = *((_BYTE *)v9 + 56);
      sub_20E9E6F58(a1, &v14);
      v10 = (char *)v9[1];
      if (v10)
      {
        do
        {
          v11 = (char **)v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char **)v9[2];
          v7 = *v11 == (char *)v9;
          v9 = (uint64_t *)v11;
        }
        while (!v7);
      }
      v9 = (uint64_t *)v11;
    }
    while (v11 != v13);
  }
  sub_20E866BE0((uint64_t)&v12, v13[0]);
}

void sub_20FEEB354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20E866BE0((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20FEEB36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20E866BE0((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20FEEB384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20E866BE0((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20FEEB39C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 1;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_2100B6A04((_QWORD *)a2);
  sub_20FEEB554(a2, (const void ***)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20FEEB554(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  uint64_t v5;
  const void **v6;
  const void ***v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  BOOL v12;
  char *v13;
  char **v14;
  char **v15;
  char *v16;
  uint64_t v17;
  uint64_t __src;
  uint64_t v19;

  v16 = 0;
  v17 = 0;
  v15 = &v16;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 == (const void **)(a2 + 1))
  {
    v5 = 0;
  }
  else
  {
    do
    {
      sub_20FEE8CFC((uint64_t **)&v15, (uint64_t *)&v16, v4 + 4, (uint64_t)(v4 + 4));
      v6 = (const void **)v4[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v4[2];
          v12 = *v7 == v4;
          v4 = (const void **)v7;
        }
        while (!v12);
      }
      v4 = (const void **)v7;
    }
    while (v7 != v3);
    v5 = v17;
  }
  __src = v5;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v19, 8);
  v8 = (uint64_t *)v15;
  if (v15 != &v16)
  {
    do
    {
      v9 = *((unsigned __int8 *)v8 + 55);
      if ((v9 & 0x80u) != 0)
        v9 = v8[5];
      __src = v9;
      sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v19, 8);
      if (*((char *)v8 + 55) < 0)
      {
        v10 = (char *)v8[4];
        v11 = v8[5];
        if (v10)
          v12 = 1;
        else
          v12 = v11 == 0;
        if (!v12)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v10 = 0;
        }
      }
      else
      {
        v10 = (char *)(v8 + 4);
        v11 = *((unsigned __int8 *)v8 + 55);
      }
      sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), v10, &v10[v11], v11);
      LOBYTE(__src) = *((_BYTE *)v8 + 56);
      sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      v13 = (char *)v8[1];
      if (v13)
      {
        do
        {
          v14 = (char **)v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char **)v8[2];
          v12 = *v14 == (char *)v8;
          v8 = (uint64_t *)v14;
        }
        while (!v12);
      }
      v8 = (uint64_t *)v14;
    }
    while (v14 != &v16);
  }
  sub_20E866BE0((uint64_t)&v15, v16);
}

void sub_20FEEB770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20E866BE0((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20FEEB788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20E866BE0((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20FEEB7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20E866BE0((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20FEEB7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20E866BE0((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20FEEB7D0(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  uint64_t v5;
  const void **v6;
  const void ***v7;
  BOOL v8;
  uint64_t *v9;
  char *v10;
  char **v11;
  char **v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v13 = 0;
  v14 = 0;
  v12 = &v13;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 == (const void **)(a2 + 1))
  {
    v5 = 0;
  }
  else
  {
    do
    {
      sub_20FEE8CFC((uint64_t **)&v12, (uint64_t *)&v13, v4 + 4, (uint64_t)(v4 + 4));
      v6 = (const void **)v4[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v4[2];
          v8 = *v7 == v4;
          v4 = (const void **)v7;
        }
        while (!v8);
      }
      v4 = (const void **)v7;
    }
    while (v7 != v3);
    v5 = v14;
  }
  v15 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v15);
  v9 = (uint64_t *)v12;
  if (v12 != &v13)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 144))(a1, v9 + 4);
      LOBYTE(v15) = *((_BYTE *)v9 + 56);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v15);
      v10 = (char *)v9[1];
      if (v10)
      {
        do
        {
          v11 = (char **)v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char **)v9[2];
          v8 = *v11 == (char *)v9;
          v9 = (uint64_t *)v11;
        }
        while (!v8);
      }
      v9 = (uint64_t *)v11;
    }
    while (v11 != &v13);
  }
  sub_20E866BE0((uint64_t)&v12, v13);
}

void sub_20FEEB914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20E866BE0((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20FEEB92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20E866BE0((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20FEEB944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20E866BE0((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20FEEB95C(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FEEBF98(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FEECC24(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FEED340(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FEEDE28(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FEEE56C(&v9, a1);
          else
            sub_20FEEBAC0(&v8, (uint64_t *)a1);
        }
      }
    }
  }
}

void sub_20FEEBAC0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27[27];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)&v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)&v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *a2;
  v27[0] = a2[1];
  v25 = v27[0];
  v28 = 6;
  (*(void (**)(uint64_t *, unsigned int *))(v24 + 104))(a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3)
      sub_20FDF69C0((uint64_t)&v28, (uint64_t)a2, v4, v28);
    else
      sub_20FDF6C34((uint64_t)a2, v4, v28);
  }
  else
  {
    sub_20FDF63C8((int *)v27, (uint64_t)a2, v4, v28);
  }
  v27[0] = a2[1];
  sub_20FEEEC28((int *)v27, (uint64_t)a2, v3 + 200);
}

void sub_20FEEBF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEEBF98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  char v31;
  uint64_t v32[27];
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v32);
    sub_20FDE470C((uint64_t)v33, v32);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v33);
        if (!v48)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v8 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v8;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v39;
    v10 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v11 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v11;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v12 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v12;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v15 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v46;
LABEL_45:
    *((_QWORD *)&v46 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v32);
  sub_20FDE470C((uint64_t)v33, v32);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v17 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v17;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v39;
    v19 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v20 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v20;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v21 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v21;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v33);
  if (v48)
  {
LABEL_38:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v23 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  sub_20EB0580C((uint64_t)v32);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF7D8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v32[0] = 0;
  sub_2100DB048(v27, v32);
  if (HIDWORD(v32[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  sub_20FEEC4EC(a2, v3 + 200);
  v28 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v28 - 8);
  v29 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a2 + 48) = v28 - 8;
  *(_QWORD *)(a2 + 72) = v29 - 8;
}

void sub_20FEEC4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEEC4EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  void **v12;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  v16 = 0;
  v15 = 0uLL;
  sub_20FEE99C8((uint64_t)&v15, v4);
  v5 = a2 + 8;
  sub_20FEE9AB8(*(_QWORD **)a2, (_QWORD *)(a2 + 8), (uint64_t)&v15);
  *(_OWORD *)__p = v15;
  v14 = v16;
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "context_enable_state_changes";
  *(_QWORD *)(a1 + 96) = 28;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20FEEC694((uint64_t *)a1, (char **)__p);
  *((_QWORD *)&v15 + 1) = 0;
  v16 = 0;
  *(_QWORD *)&v15 = (char *)&v15 + 8;
  sub_20FEEA248((_QWORD **)&v15, (__int128 *)__p[0], v7, (__int128 *)__p[1]);
  sub_20E866BE0(a2, *(char **)(a2 + 8));
  v8 = *((_QWORD *)&v15 + 1);
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v8;
  v9 = v16;
  *(_QWORD *)(a2 + 16) = v16;
  if (v9)
  {
    *(_QWORD *)(v8 + 16) = v5;
    *(_QWORD *)&v15 = (char *)&v15 + 8;
    *((_QWORD *)&v15 + 1) = 0;
    v16 = 0;
    sub_20E866BE0((uint64_t)&v15, 0);
    v10 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  else
  {
    *(_QWORD *)a2 = v5;
    sub_20E866BE0((uint64_t)&v15, (char *)v8);
    v10 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  v11 = (void **)__p[1];
  v12 = v10;
  if (__p[1] != v10)
  {
    do
    {
      if (*((char *)v11 - 9) < 0)
        operator delete(*(v11 - 4));
      v11 -= 4;
    }
    while (v11 != v10);
    v12 = (void **)__p[0];
  }
  __p[1] = v10;
  operator delete(v12);
}

void sub_20FEEC644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  sub_20E866BE0((uint64_t)&a13, a14);
  sub_20EB9B93C(&a9);
  _Unwind_Resume(a1);
}

void sub_20FEEC66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEEC680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEEC694(uint64_t *a1, char **a2)
{
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  void ***v7;
  void **v8;
  char *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  __int128 v21;
  void *v22;

  sub_2101FF7D8((uint64_t)a1);
  v4 = (unsigned __int8 *)a1[4];
  v5 = *v4;
  if (v5 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 4;
  }
  else if (v5 == 1)
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 3);
  }
  else
  {
    if (!*v4)
    {
      v6 = 0;
      v7 = (void ***)(a2 + 1);
      v8 = (void **)a2[1];
      v9 = *a2;
      v10 = ((char *)v8 - *a2) >> 5;
      goto LABEL_11;
    }
    v6 = 1;
  }
  v7 = (void ***)(a2 + 1);
  v8 = (void **)a2[1];
  v9 = *a2;
  v10 = ((char *)v8 - *a2) >> 5;
  if (v6 > v10)
  {
    sub_20FEEC8A4((void **)a2, v6 - v10);
    v13 = a2;
    v11 = (void **)*a2;
    v12 = (void **)v13[1];
    if (v11 != v12)
      goto LABEL_22;
LABEL_20:
    v14 = a1[6];
    v15 = a1[9];
    goto LABEL_25;
  }
LABEL_11:
  if (v10 <= v6)
  {
    v12 = v8;
    v11 = (void **)*a2;
    if (v11 != v8)
      goto LABEL_22;
    goto LABEL_20;
  }
  v12 = (void **)&v9[32 * v6];
  while (v8 != v12)
  {
    if (*((char *)v8 - 9) < 0)
      operator delete(*(v8 - 4));
    v8 -= 4;
  }
  *v7 = v12;
  v11 = (void **)*a2;
  if (v11 == v12)
    goto LABEL_20;
  do
  {
LABEL_22:
    sub_2101FF7D8((uint64_t)a1);
    v20 = (void **)sub_2101FFA90(a1);
    ++a1[14];
    v22 = 0;
    v21 = 0uLL;
    sub_2100DB548(v20, (uint64_t)&v21);
    if (*((char *)v11 + 23) < 0)
      operator delete(*v11);
    v16 = (char *)(v11 + 3);
    v17 = v21;
    v11[2] = v22;
    *(_OWORD *)v11 = v17;
    v11 += 4;
    *(_QWORD *)&v21 = v16;
    sub_20FEECA34(a1, (_BYTE **)&v21);
    v18 = a1[6];
    a1[4] = *(_QWORD *)(v18 - 8);
    v19 = a1[9];
    a1[14] = *(_QWORD *)(v19 - 8);
    a1[6] = v18 - 8;
    a1[9] = v19 - 8;
  }
  while (v11 != v12);
  v14 = v18 - 8;
  v15 = v19 - 8;
LABEL_25:
  a1[4] = *(_QWORD *)(v14 - 8);
  a1[14] = *(_QWORD *)(v15 - 8);
  a1[6] = v14 - 8;
  a1[9] = v15 - 8;
}

void sub_20FEEC888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEEC8A4(void **a1, unint64_t a2)
{
  _BYTE *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void **v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  void **v18;
  __int128 v19;
  void **v20;

  v5 = (void **)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (_BYTE *)v5) >> 5)
  {
    if (a2)
    {
      v11 = 32 * a2;
      v12 = &v5[4 * a2];
      do
      {
        *v5 = 0;
        v5[1] = 0;
        *((_BYTE *)v5 + 24) = 0;
        v5[2] = 0;
        v5 += 4;
        v11 -= 32;
      }
      while (v11);
      v5 = v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = ((char *)v5 - (_BYTE *)*a1) >> 5;
    if ((v6 + a2) >> 59)
      sub_20FDFA718();
    v7 = v4 - (_BYTE *)*a1;
    v8 = v7 >> 4;
    if (v7 >> 4 <= v6 + a2)
      v8 = v6 + a2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
    {
      if (v9 >> 59)
        sub_20E877A38();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[32 * v6];
    v14 = 32 * a2;
    v15 = &v13[32 * a2];
    v16 = v13;
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      v16[24] = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v14 -= 32;
    }
    while (v14);
    v17 = &v10[32 * v9];
    v18 = (void **)*a1;
    if (v5 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v5 - 2);
        *((_QWORD *)v13 - 2) = *(v5 - 2);
        *((_OWORD *)v13 - 2) = v19;
        *(v5 - 3) = 0;
        *(v5 - 2) = 0;
        *(v5 - 4) = 0;
        *(v13 - 8) = *((_BYTE *)v5 - 8);
        v13 -= 32;
        v5 -= 4;
      }
      while (v5 != v18);
      v5 = (void **)*a1;
      v20 = (void **)a1[1];
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
      while (v20 != v5)
      {
        if (*((char *)v20 - 9) < 0)
          operator delete(*(v20 - 4));
        v20 -= 4;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20FEECA34(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FFA90(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DB548(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20FF1ABD0((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FEECB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEECC24(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v28);
    sub_20FDE470C((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v28);
  sub_20FDE470C((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20EB0580C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v28, a2, v4);
  LODWORD(v28[0]) = 1;
  sub_20E9EDADC(a2[6], v28);
  sub_20E90A71C(a2 + 2);
  sub_20FEED0FC((uint64_t)a2, v3 + 200);
  v24 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2);
  v26 = *(_QWORD *)(v24 - 16) - result + *(_QWORD *)(v24 - 8);
  if (v26)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v26);
  a2[4] -= 16;
  return result;
}

void sub_20FEED0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEED0FC(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  std::string __p;
  char v6;
  uint64_t v7;
  char v8;

  v7 = 0;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v7);
  sub_20E866BE0(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  for (i = v7; i; --i)
  {
    memset(&__p, 0, sizeof(__p));
    v6 = 0;
    sub_20E9EE280(*(_QWORD *)(a1 + 48), &__p);
    v8 = 0;
    sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v8);
    v6 = v8;
    sub_20FEED1D8((uint64_t **)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20FEED1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_20FEED1D8(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = a1 + 1;
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = v5[4];
      v11 = v5 + 4;
      v12 = (_QWORD *)v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    v19 = memcmp(v15, v8, v17);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        return v10;
    }
    else if (v16 >= v9)
    {
      return v10;
    }
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_29:
  v20 = (uint64_t *)v10;
  v10 = (uint64_t **)operator new(0x40uLL);
  *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
  v10[6] = *(uint64_t **)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_BYTE *)v10 + 56) = *(_BYTE *)(a3 + 24);
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v20;
  *v6 = (uint64_t *)v10;
  v21 = (uint64_t *)**a1;
  v22 = (uint64_t *)v10;
  if (v21)
  {
    *a1 = v21;
    v22 = *v6;
  }
  sub_20E868578(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

void sub_20FEED340(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  char v31;
  uint64_t v32[27];
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v32);
    sub_20FDE470C((uint64_t)v33, v32);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v33);
        if (!v48)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v8 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v8;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v39;
    v10 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v11 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v11;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v12 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v12;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v15 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v46;
LABEL_45:
    *((_QWORD *)&v46 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v32);
  sub_20FDE470C((uint64_t)v33, v32);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v17 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v17;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v39;
    v19 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v20 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v20;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v21 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v21;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v33);
  if (v48)
  {
LABEL_38:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v23 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  sub_20EB0580C((uint64_t)v32);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF2E8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v32[0] = 0;
  sub_2100DA8B0(v27, v32);
  if (HIDWORD(v32[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  sub_20FEED894(a2, v3 + 200);
  v28 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v28 - 8);
  v29 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a2 + 48) = v28 - 8;
  *(_QWORD *)(a2 + 72) = v29 - 8;
}

void sub_20FEED84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEED894(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  void **v12;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  v16 = 0;
  v15 = 0uLL;
  sub_20FEE99C8((uint64_t)&v15, v4);
  v5 = a2 + 8;
  sub_20FEE9AB8(*(_QWORD **)a2, (_QWORD *)(a2 + 8), (uint64_t)&v15);
  *(_OWORD *)__p = v15;
  v14 = v16;
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "context_enable_state_changes";
  *(_QWORD *)(a1 + 96) = 28;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20FEEDA3C((uint64_t *)a1, (char **)__p);
  *((_QWORD *)&v15 + 1) = 0;
  v16 = 0;
  *(_QWORD *)&v15 = (char *)&v15 + 8;
  sub_20FEEA248((_QWORD **)&v15, (__int128 *)__p[0], v7, (__int128 *)__p[1]);
  sub_20E866BE0(a2, *(char **)(a2 + 8));
  v8 = *((_QWORD *)&v15 + 1);
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v8;
  v9 = v16;
  *(_QWORD *)(a2 + 16) = v16;
  if (v9)
  {
    *(_QWORD *)(v8 + 16) = v5;
    *(_QWORD *)&v15 = (char *)&v15 + 8;
    *((_QWORD *)&v15 + 1) = 0;
    v16 = 0;
    sub_20E866BE0((uint64_t)&v15, 0);
    v10 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  else
  {
    *(_QWORD *)a2 = v5;
    sub_20E866BE0((uint64_t)&v15, (char *)v8);
    v10 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  v11 = (void **)__p[1];
  v12 = v10;
  if (__p[1] != v10)
  {
    do
    {
      if (*((char *)v11 - 9) < 0)
        operator delete(*(v11 - 4));
      v11 -= 4;
    }
    while (v11 != v10);
    v12 = (void **)__p[0];
  }
  __p[1] = v10;
  operator delete(v12);
}

void sub_20FEED9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  sub_20E866BE0((uint64_t)&a13, a14);
  sub_20EB9B93C(&a9);
  _Unwind_Resume(a1);
}

void sub_20FEEDA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEEDA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEEDA3C(uint64_t *a1, char **a2)
{
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  void ***v7;
  void **v8;
  char *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  __int128 v21;
  void *v22;

  sub_2101FF2E8((uint64_t)a1);
  v4 = (unsigned __int8 *)a1[4];
  v5 = *v4;
  if (v5 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 4;
  }
  else if (v5 == 1)
  {
    v6 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 16);
  }
  else
  {
    if (!*v4)
    {
      v6 = 0;
      v7 = (void ***)(a2 + 1);
      v8 = (void **)a2[1];
      v9 = *a2;
      v10 = ((char *)v8 - *a2) >> 5;
      goto LABEL_11;
    }
    v6 = 1;
  }
  v7 = (void ***)(a2 + 1);
  v8 = (void **)a2[1];
  v9 = *a2;
  v10 = ((char *)v8 - *a2) >> 5;
  if (v6 > v10)
  {
    sub_20FEEC8A4((void **)a2, v6 - v10);
    v13 = a2;
    v11 = (void **)*a2;
    v12 = (void **)v13[1];
    if (v11 != v12)
      goto LABEL_22;
LABEL_20:
    v14 = a1[6];
    v15 = a1[9];
    goto LABEL_25;
  }
LABEL_11:
  if (v10 <= v6)
  {
    v12 = v8;
    v11 = (void **)*a2;
    if (v11 != v8)
      goto LABEL_22;
    goto LABEL_20;
  }
  v12 = (void **)&v9[32 * v6];
  while (v8 != v12)
  {
    if (*((char *)v8 - 9) < 0)
      operator delete(*(v8 - 4));
    v8 -= 4;
  }
  *v7 = v12;
  v11 = (void **)*a2;
  if (v11 == v12)
    goto LABEL_20;
  do
  {
LABEL_22:
    sub_2101FF2E8((uint64_t)a1);
    v20 = (void **)sub_2101FF5A0(a1);
    ++a1[14];
    v22 = 0;
    v21 = 0uLL;
    sub_2100DADB0(v20, (uint64_t)&v21);
    if (*((char *)v11 + 23) < 0)
      operator delete(*v11);
    v16 = (char *)(v11 + 3);
    v17 = v21;
    v11[2] = v22;
    *(_OWORD *)v11 = v17;
    v11 += 4;
    *(_QWORD *)&v21 = v16;
    sub_20FEEDC38(a1, (_BYTE **)&v21);
    v18 = a1[6];
    a1[4] = *(_QWORD *)(v18 - 8);
    v19 = a1[9];
    a1[14] = *(_QWORD *)(v19 - 8);
    a1[6] = v18 - 8;
    a1[9] = v19 - 8;
  }
  while (v11 != v12);
  v14 = v18 - 8;
  v15 = v19 - 8;
LABEL_25:
  a1[4] = *(_QWORD *)(v14 - 8);
  a1[14] = *(_QWORD *)(v15 - 8);
  a1[6] = v14 - 8;
  a1[9] = v15 - 8;
}

void sub_20FEEDC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEEDC38(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20FF1ABD0((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FEEDD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FEEDE28(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  void *__p;
  uint64_t v32;
  char v33;
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)&__p);
    sub_20FDE470C((uint64_t)v34, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v30, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)&__p);
  sub_20FDE470C((uint64_t)v34, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v30, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20EB0580C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20E9E840C(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20FDF3288((uint64_t)&__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v33 < 0)
      {
        if (v32 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_92:
          v29 = 0;
          if (v33 < 0)
            goto LABEL_95;
          goto LABEL_81;
        }
      }
      else if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_92;
      }
      v29 = 1;
      if (v33 < 0)
LABEL_95:
        operator delete(__p);
LABEL_81:
      if (*(_BYTE *)(a2 + 131))
        v28 = 0;
      else
        v28 = v29;
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 1;
  sub_20E9E840C(a2, &__p);
  sub_20FEEE438(a2, v3 + 200);
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v33 < 0)
      {
        if (v32 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_77:
          v27 = 0;
          if (v33 < 0)
            goto LABEL_80;
          goto LABEL_66;
        }
      }
      else if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_77;
      }
      v27 = 1;
      if (v33 < 0)
LABEL_80:
        operator delete(__p);
LABEL_66:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
}

void sub_20FEEE3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEEE438(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  BOOL v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v9 = 0;
  sub_20E9E88B4(a1, &v9);
  sub_20E866BE0(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  for (i = v9; i; --i)
  {
    __p[0] = 0;
    __p[1] = 0;
    v8 = 0;
    v7 = 0;
    ++*(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 128))
      v5 = *(_BYTE *)(a1 + 131) == 0;
    else
      v5 = 1;
    if (v5)
    {
      sub_20E9E9FEC(a1, (uint64_t)&v10);
      if (SHIBYTE(v7) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v10;
      v7 = v11;
      ++*(_QWORD *)(a1 + 104);
    }
    else
    {
      *(_BYTE *)(a1 + 132) = 1;
    }
    LOBYTE(v10) = 0;
    sub_20E9E7AC8(a1, &v10);
    v8 = v10;
    sub_20FEED1D8((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v7) < 0)
      operator delete(__p[0]);
  }
}

void sub_20FEEE550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEEE56C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FEEE9E0((uint64_t)v25, a2, v3 + 200);
}

void sub_20FEEE998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEEE9E0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_2100B6EE0(a2);
  sub_20FEEEA98(a2, a3);
  v9 = a2[12];
  v10 = a2[9];
  a2[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_20FEEEA84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEEEA98(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  std::logic_error *v12;
  std::logic_error *exception;
  void *__p[2];
  uint64_t v15;
  char v16;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = (_QWORD *)(a2 + 8);
  sub_20E866BE0(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = 0;
  for (*v9 = 0; v8; --v8)
  {
    __p[0] = 0;
    __p[1] = 0;
    v16 = 0;
    v15 = 0;
    sub_2100B7230(a1, (uint64_t)__p);
    v10 = a1[6];
    if (a1[7] <= v10)
    {
      v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v12, "Not enough data to read");
      v12->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
      __cxa_throw(v12, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
    }
    v11 = *(_BYTE *)(a1[3] + v10);
    a1[6] = v10 + 1;
    v16 = v11;
    sub_20FEED1D8((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
  }
}

void sub_20FEEEBE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEEEBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEEEC28(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  __int128 *v7;
  int v8;
  unsigned int v9;

  v8 = 1;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
    goto LABEL_6;
  if (*a1 != 2)
    goto LABEL_5;
  v9 = 1;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  if (v9 >= 2)
  {
    v6 = v9;
    v7 = sub_20FEEED24();
    sub_20E9F5C70((std::string *)v7, v6, 1u);
  }
  if (*a1 <= 0)
  {
LABEL_6:
    sub_20FEEEF20(a2, a3);
  }
  else
  {
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_20FEEEF20(a2, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
}

__int128 *sub_20FEEED24()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55AB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55AB8))
    return &xmmword_254A55AA0;
  v2 = (char *)sub_20FEEEE00();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A55AA0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A55AB0 = *((_QWORD *)v2 + 2);
    xmmword_254A55AA0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55AA0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55AB8);
  return &xmmword_254A55AA0;
}

void sub_20FEEEDE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55AB8);
  _Unwind_Resume(a1);
}

void *sub_20FEEEE00()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55AD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55AD8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateEnabledContextsSample]", qword_254A55AC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55AC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55AD8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55AF8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55AF8))
    return &unk_254A55AE0;
  sub_21023CD84((uint64_t)qword_254A55AC0, (uint64_t)&unk_254A55AE0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55AE0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55AF8);
  return &unk_254A55AE0;
}

void sub_20FEEEEF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55AF8);
  _Unwind_Resume(a1);
}

void sub_20FEEEF08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55AD8);
  _Unwind_Resume(a1);
}

void sub_20FEEEF20(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *__p[2];
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v8 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v8);
  sub_20E866BE0(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  for (i = v8; i; --i)
  {
    __p[0] = 0;
    __p[1] = 0;
    v7 = 0;
    v6 = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v9 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 80))(a1, &v9);
    v7 = v9;
    sub_20FEED1D8((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
}

void sub_20FEEEFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_20FEEF010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = sub_20FEF1170((char *)a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5);
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      result = sub_20E860C04((_BYTE *)(a2 + 24), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 48) = 1;
  }
  return result;
}

void sub_20FEEF09C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*v2);
  }
  sub_20EB9B93C((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEEF0C8(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)a1 = off_24CA08C00;
  sub_20EB0580C(a1 + 64);
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      return a1;
  }
  v3 = *(void ***)(a1 + 16);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v4);
  return a1;
}

__n128 sub_20FEEF16C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  uint64_t v7;
  unsigned __int128 *v8;
  unsigned __int128 v9;

  *(_QWORD *)a1 = off_24CA08C00;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v2 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v2;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  v3 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = v3;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    v4 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v4;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    v5 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = v5;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_BYTE *)(a1 + 136) = 1;
  }
  result = *(__n128 *)(a2 + 144);
  v7 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = v7;
  *(__n128 *)(a1 + 144) = result;
  *(_BYTE *)(a1 + 224) = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    result = *(__n128 *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(__n128 *)(a1 + 176) = result;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    v8 = (unsigned __int128 *)(a2 + 208);
    do
      v9 = __ldaxp(v8);
    while (__stlxp(v9, v8));
    *(_OWORD *)(a1 + 208) = v9;
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (*(_BYTE *)(a2 + 264))
  {
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    result = *(__n128 *)(a2 + 240);
    *(__n128 *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a2 + 256) = 0;
    *(_BYTE *)(a1 + 264) = 1;
  }
  return result;
}

void sub_20FEEF2D0(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)a1 = off_24CA08C00;
  sub_20EB0580C(a1 + 64);
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      goto LABEL_13;
  }
  else
  {
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      goto LABEL_13;
  }
  v3 = *(void ***)(a1 + 16);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v4);
LABEL_13:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FEEF384(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20FEEF38C(uint64_t *a1, uint64_t *lpsrc)
{
  uint64_t result;
  unsigned __int8 ***v5[2];
  uint64_t *v6[2];

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA07AC8, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v6[0] = a1 + 1;
      v6[1] = a1 + 4;
      v5[0] = (unsigned __int8 ***)(result + 8);
      v5[1] = (unsigned __int8 ***)(result + 32);
      return sub_20FEF0AE0(v6, v5);
    }
  }
  return result;
}

void sub_20FEEF41C(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FEF0CD8();
  sub_20FEEF4D0(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 64, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FEEF4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEEF4D0(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55C38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55C38))
  {
    v4 = sub_20FEF08E4();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A55C20, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A55C30 = *(_QWORD *)(v9 - 8);
      xmmword_254A55C20 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55C20, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55C38);
  }
  return sub_20FEF0FC0(&xmmword_254A55C20, (_QWORD **)"{", (_QWORD **)(a1 + 8), (_QWORD **)"}");
}

void sub_20FEEF5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A55C38);
  _Unwind_Resume(a1);
}

void sub_20FEEF600(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55C38);
  _Unwind_Resume(a1);
}

void sub_20FEEF618(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 4;
}

double sub_20FEEF644@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  sub_20FF310CC(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_20FEEF678(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)a1 = off_24CA08C00;
  sub_20EB0580C(a1 + 64);
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      return a1;
  }
  v3 = *(void ***)(a1 + 16);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v4);
  return a1;
}

void sub_20FEEF71C(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)a1 = off_24CA08C00;
  sub_20EB0580C(a1 + 64);
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      goto LABEL_13;
  }
  else
  {
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      goto LABEL_13;
  }
  v3 = *(void ***)(a1 + 16);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v4);
LABEL_13:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FEEF7D0(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FEF0380();
  return sub_20FEEF9D4(v2, (_QWORD **)"{", (_QWORD **)(a1 + 8), (_QWORD **)",", a1 + 64, (_QWORD **)"}");
}

uint64_t sub_20FEEF828(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  _QWORD v4[2];
  _BYTE v5[2];

  v3 = 0;
  v4[0] = a1 + 8;
  v4[1] = a1 + 32;
  sub_20FEEFC08((uint64_t)v5, (uint64_t)v2, (uint64_t)v4);
  if (v3 == -1)
    sub_20E877AB8();
  v4[0] = v5;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08168[v3])(v4, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08150[v3])(v4, v2);
  return result;
}

void sub_20FEEF8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA08150[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FEEF904(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FEEF930(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)a1 = off_24CA08C00;
  sub_20EB0580C(a1 + 64);
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      return a1;
  }
  v3 = *(void ***)(a1 + 16);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v4);
  return a1;
}

uint64_t sub_20FEEF9D4(__int128 *a1, _QWORD **a2, _QWORD **a3, _QWORD **a4, uint64_t a5, _QWORD **a6)
{
  uint64_t result;
  char v12;
  __int128 __dst;
  uint64_t v14;
  int v15;
  __int128 *p_dst;
  _QWORD **v17;
  __int128 *v18;
  _QWORD **v19;
  _QWORD **v20;
  __int128 **p_p_dst;

  v15 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v14 = *((_QWORD *)a1 + 2);
  }
  v15 = 1;
  p_dst = &__dst;
  v17 = a2;
  v18 = &__dst;
  v19 = a2;
  v20 = a2;
  sub_20E89FEA0((uint64_t *)&v18, (uint64_t)&__dst);
  p_dst = (__int128 *)a3;
  v17 = a3 + 3;
  sub_20FEEFC08((uint64_t)&p_p_dst, (uint64_t)&__dst, (uint64_t)&p_dst);
  p_dst = &__dst;
  v17 = a4;
  v18 = &__dst;
  v19 = a4;
  v20 = a4;
  if (v15 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v15])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v17 = a6;
  v18 = &__dst;
  v19 = a6;
  v20 = a6;
  if (v15 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v15])(&p_p_dst, &__dst);
  if (v15 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v15])(&p_dst, &__dst);
  if (v15 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v15])(&p_dst, &__dst);
  return result;
}

void sub_20FEEFB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEEFB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEEFBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEEFBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEEFBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEEFBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEEFBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEEFC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = "{";
  v14 = a2;
  v15 = "{";
  v16 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_10;
  v17 = &v12;
  ((void (*)(uint64_t **))off_24CA08258[v3])(&v17);
  sub_20FEEFD70((uint64_t)&v12, a2, *(uint64_t **)a3);
  v6 = *(_QWORD *)(a3 + 8);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_10;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24CA08258[v7])(&v17, a2);
  if (*(_BYTE *)(v6 + 24))
  {
    v12 = a2;
    v13 = (const char *)v6;
    v14 = a2;
    v15 = (const char *)v6;
    v16 = (const char *)v6;
    v8 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v8 == -1)
      goto LABEL_10;
    v17 = &v12;
    v9 = off_24CA08240;
  }
  else
  {
    v12 = a2;
    v13 = "nullopt";
    v14 = a2;
    v15 = "nullopt";
    v16 = "nullopt";
    v8 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v8 == -1)
      goto LABEL_10;
    v17 = &v12;
    v9 = off_24CA08270;
  }
  ((void (*)(uint64_t **, uint64_t))v9[v8])(&v17, a2);
  v12 = a2;
  v13 = "}";
  v14 = a2;
  v15 = "}";
  v16 = "}";
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_10:
    sub_20E877AB8();
  v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24CA08258[v10])(&v17, a2);
}

uint64_t sub_20FEEFD70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  const char *v21;
  const char *v22;
  uint64_t *v23;

  if (a3[1] - *a3 <= 31)
  {
    v18 = a2;
    v19 = "{}";
    v20 = (char *)a2;
    v21 = "{}";
    v22 = "{}";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v23 = &v18;
      return ((uint64_t (*)(uint64_t **, uint64_t))off_24CA083E8[v4])(&v23, a2);
    }
LABEL_15:
    sub_20E877AB8();
  }
  v18 = a2;
  v19 = "{";
  v20 = (char *)a2;
  v21 = "{";
  v22 = "{";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_15;
  v23 = &v18;
  ((void (*)(uint64_t **, uint64_t))off_24CA08258[v6])(&v23, a2);
  v8 = *a3;
  v18 = a2;
  v19 = "{";
  v20 = (char *)a2;
  v21 = "{";
  v22 = "{";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_15;
  v23 = &v18;
  ((void (*)(uint64_t **, uint64_t))off_24CA08258[v9])(&v23, a2);
  LOBYTE(v18) = 1;
  v19 = (const char *)a2;
  v20 = &v17;
  sub_20FEEFFC0(v8, (uint64_t)&v18);
  v18 = a2;
  v19 = "}";
  v20 = (char *)a2;
  v21 = "}";
  v22 = "}";
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
    goto LABEL_15;
  v23 = &v18;
  ((void (*)(uint64_t **, uint64_t))off_24CA08258[v10])(&v23, a2);
  v11 = a3[1];
  for (i = v8 + 32; i != v11; i += 32)
  {
    v18 = a2;
    v19 = ",";
    v20 = (char *)a2;
    v21 = ",";
    v22 = ",";
    v13 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v13 == -1)
      goto LABEL_15;
    v23 = &v18;
    ((void (*)(uint64_t **, uint64_t))off_24CA08258[v13])(&v23, a2);
    v18 = a2;
    v19 = "{";
    v20 = (char *)a2;
    v21 = "{";
    v22 = "{";
    v14 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v14 == -1)
      goto LABEL_15;
    v23 = &v18;
    ((void (*)(uint64_t **, uint64_t))off_24CA08258[v14])(&v23, a2);
    LOBYTE(v18) = 1;
    v19 = (const char *)a2;
    v20 = &v17;
    sub_20FEEFFC0(i, (uint64_t)&v18);
    v18 = a2;
    v19 = "}";
    v20 = (char *)a2;
    v21 = "}";
    v22 = "}";
    v15 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v15 == -1)
      goto LABEL_15;
    v23 = &v18;
    ((void (*)(uint64_t **, uint64_t))off_24CA08258[v15])(&v23, a2);
  }
  v18 = a2;
  v19 = "}";
  v20 = (char *)a2;
  v21 = "}";
  v22 = "}";
  v16 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v16 == -1)
    goto LABEL_15;
  v23 = &v18;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24CA08258[v16])(&v23, a2);
}

void sub_20FEEFFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t *v12;

  if (!*(_BYTE *)a2)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = ",";
    v9 = v7;
    v10 = ",";
    v11 = ",";
    v4 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v4 == -1)
      goto LABEL_9;
    v12 = &v7;
    ((void (*)(uint64_t **))off_24CA08258[v4])(&v12);
  }
  *(_BYTE *)a2 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = (const char *)a1;
  v9 = v7;
  v10 = (const char *)a1;
  v11 = (const char *)a1;
  v5 = *(unsigned int *)(v7 + 24);
  if ((_DWORD)v5 == -1)
LABEL_9:
    sub_20E877AB8();
  v12 = &v7;
  ((void (*)(uint64_t **))off_24CA08240[v5])(&v12);
  if (!*(_BYTE *)a2)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = ",";
    v9 = v7;
    v10 = ",";
    v11 = ",";
    v6 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v6 != -1)
    {
      v12 = &v7;
      ((void (*)(uint64_t **))off_24CA08258[v6])(&v12);
      goto LABEL_8;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  sub_20FEF00CC((uint64_t)&v7, *(_QWORD *)(a2 + 8), (int *)(a1 + 24));
}

void sub_20FEF00CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)(&off_24CA0D000)[2 * *a3], (uint64_t)(&off_24CA0D000)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FEF032C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FEF0350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEF036C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20FEF0380()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55B18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55B18))
    return &xmmword_254A55B00;
  v2 = sub_20FEF045C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A55B00, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A55B10 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A55B00 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55B00, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55B18);
  return &xmmword_254A55B00;
}

void sub_20FEF0444(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55B18);
  _Unwind_Resume(a1);
}

std::string *sub_20FEF045C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55B38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55B38))
    return &stru_254A55B20;
  sub_20FEF0700((uint64_t)__p);
  sub_20FEF054C((char *)__p, &stru_254A55B20);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A55B20, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55B38);
  return &stru_254A55B20;
}

void sub_20FEF050C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A55B38);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A55B38);
  _Unwind_Resume(a1);
}

void sub_20FEF054C(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FEF08E4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FEF06B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FEF0700(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55BB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55BB8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::UpdateEnabledLoggers>]", qword_254A55BA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55BA0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55BB8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A55BD8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A55BD8))
  {
    v5 = sub_20E8A2354(qword_254A55BA0, "<", 0);
    sub_20E89FC08(qword_254A55BA0, 0, v5, qword_254A55BC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55BC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55BD8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A55BF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A55BF8))
  {
    sub_21023CD84((uint64_t)qword_254A55BC0, (uint64_t)&xmmword_254A55BE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55BE0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55BF8);
  }
  if (byte_254A55BF7 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A55BE0, *((unint64_t *)&xmmword_254A55BE0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A55BE0;
    *(_QWORD *)(a1 + 16) = unk_254A55BF0;
  }
}

void sub_20FEF089C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55BF8);
  _Unwind_Resume(a1);
}

void sub_20FEF08B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55BD8);
  _Unwind_Resume(a1);
}

void sub_20FEF08CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55BB8);
  _Unwind_Resume(a1);
}

__int128 *sub_20FEF08E4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55B58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55B58))
    return &xmmword_254A55B40;
  v2 = (char *)sub_20FEF09C0();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A55B40, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A55B50 = *((_QWORD *)v2 + 2);
    xmmword_254A55B40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55B40, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55B58);
  return &xmmword_254A55B40;
}

void sub_20FEF09A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55B58);
  _Unwind_Resume(a1);
}

void *sub_20FEF09C0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55B78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55B78))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateEnabledLoggers]", qword_254A55B60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55B60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55B78);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55B98);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55B98))
    return &unk_254A55B80;
  sub_21023CD84((uint64_t)qword_254A55B60, (uint64_t)&unk_254A55B80);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55B80, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55B98);
  return &unk_254A55B80;
}

void sub_20FEF0AB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55B98);
  _Unwind_Resume(a1);
}

void sub_20FEF0AC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55B78);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEF0AE0(uint64_t **a1, unsigned __int8 ****a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t result;
  _BOOL4 v14;
  unsigned __int8 *v15;
  unsigned __int8 ***v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 ***v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;

  v3 = **a1;
  v2 = (*a1)[1];
  v4 = **a2;
  if (v2 - v3 != (char *)(*a2)[1] - (char *)v4)
    return 0;
  for (; v3 != v2; v4 += 4)
  {
    v7 = *(unsigned __int8 *)(v3 + 23);
    if ((v7 & 0x80u) == 0)
      v8 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
    else
      v8 = *(unsigned __int8 **)(v3 + 8);
    v9 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
    v10 = (char)v9;
    if ((char)v9 < 0)
      v9 = v4[1];
    if (v8 != v9)
      return 0;
    if (v10 >= 0)
      v11 = (unsigned __int8 *)v4;
    else
      v11 = *v4;
    if ((v7 & 0x80) != 0)
    {
      v14 = memcmp(*(const void **)v3, v11, *(_QWORD *)(v3 + 8)) == 0;
      result = 0;
      if (!v14)
        return result;
    }
    else
    {
      if (*(_BYTE *)(v3 + 23))
      {
        v12 = 0;
        while (*(unsigned __int8 *)(v3 + v12) == v11[v12])
        {
          if (v7 == ++v12)
            goto LABEL_17;
        }
        return 0;
      }
LABEL_17:
      result = 0;
    }
    if (*(_DWORD *)(v3 + 24) != *((_DWORD *)v4 + 6))
      return result;
    v3 += 32;
  }
  v15 = (unsigned __int8 *)a1[1];
  v16 = a2[1];
  if (v15[24])
    v17 = *((_BYTE *)v16 + 24) == 0;
  else
    v17 = 1;
  if (v17)
    return (v15[24] != 0) == (*((_BYTE *)v16 + 24) != 0);
  v18 = v15[23];
  if ((v18 & 0x80u) == 0)
    v19 = (unsigned __int8 *)v15[23];
  else
    v19 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
  v20 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
  v21 = (char)v20;
  if ((char)v20 < 0)
    v20 = (unsigned __int8 *)v16[1];
  if (v19 != v20)
    return 0;
  if (v21 >= 0)
    v22 = a2[1];
  else
    v22 = (unsigned __int8 ***)*v16;
  if ((v18 & 0x80) != 0)
    return memcmp(*(const void **)v15, v22, *((_QWORD *)v15 + 1)) == 0;
  if (!v15[23])
    return 1;
  v23 = v18 - 1;
  do
  {
    v25 = *v15++;
    v24 = v25;
    v27 = *(unsigned __int8 *)v22;
    v22 = (unsigned __int8 ***)((char *)v22 + 1);
    v26 = v27;
    v29 = v23-- != 0;
    result = v24 == v26;
  }
  while (v24 == v26 && v29);
  return result;
}

std::string *sub_20FEF0CD8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A55C18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55C18))
  {
    sub_20E8610C0(v11, "viz::PackageData");
    v2 = sub_20FEF08E4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_20FDD26DC();
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_20EA6BF74();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_20E877C80(v10, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v11, (uint64_t *)v10, &stru_254A55C00, v8, v9);
    sub_20E89FB98(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A55C00, &dword_20E81F000);
        __cxa_guard_release(&qword_254A55C18);
        return &stru_254A55C00;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_254A55C00;
}

void sub_20FEF0EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_254A55C18);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20FEF0F98()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20FEF0F74);
  }
}

uint64_t sub_20FEF0FC0(__int128 *a1, _QWORD **a2, _QWORD **a3, _QWORD **a4)
{
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 *v11;
  _QWORD **v12;
  __int128 *v13;
  _QWORD **v14;
  _QWORD **v15;
  __int128 **v16;

  v10 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&v8, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v8 = *a1;
    v9 = *((_QWORD *)a1 + 2);
  }
  v10 = 1;
  v11 = &v8;
  v12 = a2;
  v13 = &v8;
  v14 = a2;
  v15 = a2;
  sub_20E89FEA0((uint64_t *)&v13, (uint64_t)&v8);
  v11 = (__int128 *)a3;
  v12 = a3 + 3;
  sub_20FEEFC08((uint64_t)&v16, (uint64_t)&v8, (uint64_t)&v11);
  v11 = &v8;
  v12 = a4;
  v13 = &v8;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_20E877AB8();
  v16 = &v11;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v10])(&v16, &v8);
  if (v10 == -1)
    sub_20E877AB8();
  v11 = (__int128 *)&v16;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v10])(&v11, &v8);
  if (v10 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v10])(&v11, &v8);
  return result;
}

void sub_20FEF1108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF1120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF1134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF1148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20FEF1170(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >> 59)
      sub_20FDFA718();
    result = (char *)operator new(32 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[32 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_20E860C04(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        *(_DWORD *)&v8[v9 + 24] = *(_DWORD *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20FEF124C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EBF0E7C(&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF1260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 9) < 0)
      operator delete(*(void **)(v10 + v11 - 32));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EBF0E7C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEF129C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;

  *(_QWORD *)a1 = off_24CA08C00;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  sub_20EB09F3C(a1 + 64, a3);
  *(_QWORD *)a1 = off_24CA08BB0;
  return a1;
}

void sub_20FEF1348(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v5;
  void **v6;
  void *v7;

  if (*(_BYTE *)(v1 + 56) && *(char *)(v1 + 55) < 0)
    operator delete(*v3);
  v5 = (void **)*v2;
  if (*v2)
  {
    v6 = *(void ***)(v1 + 16);
    v7 = *v2;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*(v6 - 4));
        v6 -= 4;
      }
      while (v6 != v5);
      v7 = *v2;
    }
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEF13B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 ***v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned __int8 **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned __int8 **v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[6];

  v37[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v32);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v32);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v32);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v26);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v26);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v26);
  }
  v19 = (uint64_t *)v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = &v36;
  v24 = (unsigned __int8 **)v37;
  v13 = (unsigned __int8 ***)v26;
  v14 = &v27;
  v15 = &v28;
  v16 = &v29;
  v17 = &v30;
  v18 = (unsigned __int8 **)&v31;
  if (sub_20FF1D2E8((uint64_t)&v25, &v19, &v13))
  {
    if (*((_BYTE *)v24 + 24) && *((_BYTE *)v18 + 24))
    {
      v8 = *v24;
      v9 = v24[1];
      v10 = *v18;
      if (v9 - *v24 == v18[1] - *v18)
      {
        if (v8 != v9)
        {
          while (sub_20FF1C59C(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v19 = (uint64_t *)(a1 + 200);
        v20 = (uint64_t *)(a1 + 224);
        v13 = (unsigned __int8 ***)(a2 + 200);
        v14 = (uint64_t *)(a2 + 224);
        v11 = sub_20FEF0AE0(&v19, &v13);
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v24 + 24) != 0) == (*((_BYTE *)v18 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20EB0580C((uint64_t)v26);
  sub_20EB0580C((uint64_t)v32);
  return v11;
}

void sub_20FEF15BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEF15D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEF15EC(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FEF19F8(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FEF2794(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FEF2CCC(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FEF349C(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FEF389C(&v9, (uint64_t)a1);
          else
            sub_20FEF1750(&v8, a1);
        }
      }
    }
  }
}

void sub_20FEF1750(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE13A54((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20FE13A54((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE133CC((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20FE133CC((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FDEB904((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20FDEB904((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = v3 + 200;
  v13 = a2[2];
  v14 = 1;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20FEF3D60((uint64_t)a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FEF3D60((uint64_t)a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FEF19F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FAEA0(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v18);
  sub_20FEF1CF8(a2, v3 + 200);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEF1CF8(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  void *__p;
  char v9;
  char v10;

  sub_20FEF1DAC((uint64_t)&v6, a2);
  sub_20FEF1EA8(a1, (uint64_t)&v6);
  if (v10 && v9 < 0)
    operator delete(__p);
  v3 = (void **)v6;
  if (v6)
  {
    v4 = v7;
    v5 = v6;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v3);
      v5 = v6;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_20FEF1D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE4450((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEF1DAC(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20FEF1170((char *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v4;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_20FEF1E3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void **v5;
  void **v6;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  v4 = *(void ***)v1;
  if (*(_QWORD *)v1)
  {
    v5 = *(void ***)(v1 + 8);
    v6 = *(void ***)v1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 9) < 0)
          operator delete(*(v5 - 4));
        v5 -= 4;
      }
      while (v5 != v4);
      v6 = *(void ***)v1;
    }
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FEF1EA8(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  void **v7;
  void **v8;
  void *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  void **v13;
  __int128 v14;
  void **p_p;
  void *__p;
  void **v17;

  sub_20FEF2098((__int128 **)a2, (uint64_t)&__p);
  *(_QWORD *)&v14 = "logger_enable_state_changes";
  *((_QWORD *)&v14 + 1) = 27;
  p_p = &__p;
  sub_20FEF2568(a1, (uint64_t)&v14);
  sub_20FEF21EC((__int128 **)&__p, (uint64_t)&v14);
  v4 = *(__int128 **)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(__int128 **)(a2 + 8);
    v6 = *(__int128 **)a2;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 9) < 0)
          operator delete(*((void **)v5 - 4));
        v5 -= 2;
      }
      while (v5 != v4);
      v6 = *(__int128 **)a2;
    }
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v6);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v14;
  v7 = (void **)__p;
  *(_QWORD *)(a2 + 16) = p_p;
  if (v7)
  {
    v8 = v17;
    v9 = v7;
    if (v17 != v7)
    {
      do
      {
        if (*((char *)v8 - 9) < 0)
          operator delete(*(v8 - 4));
        v8 -= 4;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v17 = v7;
    operator delete(v9);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v10 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "target_context", *(_QWORD *)(a1 + 80) = 14, v10))
  {
    if (*(_BYTE *)(a2 + 48))
    {
LABEL_20:
      sub_2101FD70C(a1, a2 + 24);
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    if (*(_BYTE *)(a2 + 48))
      goto LABEL_20;
  }
  LOBYTE(__p) = 0;
  v17 = 0;
  v11 = (unsigned __int8 *)sub_2101FAC64(a1);
  v12 = *v11;
  *v11 = __p;
  LOBYTE(__p) = v12;
  v13 = (void **)*((_QWORD *)v11 + 1);
  *((_QWORD *)v11 + 1) = v17;
  v17 = v13;
  sub_20EB07D94(&v17, v12);
}

void sub_20FEF2058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  void ***v12;

  sub_20EB07D94(v12, a12);
  _Unwind_Resume(a1);
}

void sub_20FEF2070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEF2084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

double sub_20FEF2098@<D0>(__int128 **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  __int128 *i;
  __int128 *v6;
  __int128 v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  double result;
  __int128 v12;
  unint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;

  v4 = ((char *)a1[1] - (char *)*a1) >> 5;
  v13 = 0;
  v12 = 0uLL;
  sub_20FEF2340((uint64_t)&v12, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 2)
  {
    while (1)
    {
      while (1)
      {
        v8 = *((_DWORD *)v6 + 6);
        if (*((char *)v6 + 23) < 0)
        {
          sub_20E860C04(__p, *(void **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v9 = *v6;
          v15 = *((_QWORD *)v6 + 2);
          *(_OWORD *)__p = v9;
        }
        v16 = v8;
        v10 = *((_QWORD *)&v12 + 1);
        if (*((_QWORD *)&v12 + 1) >= v13)
          break;
        v7 = *(_OWORD *)__p;
        *(_QWORD *)(*((_QWORD *)&v12 + 1) + 16) = v15;
        *(_OWORD *)v10 = v7;
        __p[1] = 0;
        v15 = 0;
        __p[0] = 0;
        *(_DWORD *)(v10 + 24) = v16;
        *((_QWORD *)&v12 + 1) = v10 + 32;
        v6 += 2;
        if (v6 == i)
          goto LABEL_12;
      }
      *((_QWORD *)&v12 + 1) = sub_20FEF2430((void **)&v12, (uint64_t)__p);
      if (SHIBYTE(v15) < 0)
        break;
      v6 += 2;
      if (v6 == i)
        goto LABEL_12;
    }
    operator delete(__p[0]);
  }
LABEL_12:
  result = *(double *)&v12;
  *(_OWORD *)a2 = v12;
  *(_QWORD *)(a2 + 16) = v13;
  return result;
}

void sub_20FEF21B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20EB9B93C(&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF21C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  sub_20EB9B93C((void **)&a9);
  _Unwind_Resume(a1);
}

double sub_20FEF21EC@<D0>(__int128 **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  __int128 *i;
  __int128 *v6;
  __int128 v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  double result;
  __int128 v12;
  unint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;

  v4 = ((char *)a1[1] - (char *)*a1) >> 5;
  v13 = 0;
  v12 = 0uLL;
  sub_20FEF2340((uint64_t)&v12, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 2)
  {
    while (1)
    {
      while (1)
      {
        v8 = *((_DWORD *)v6 + 6);
        if (*((char *)v6 + 23) < 0)
        {
          sub_20E860C04(__p, *(void **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v9 = *v6;
          v15 = *((_QWORD *)v6 + 2);
          *(_OWORD *)__p = v9;
        }
        v16 = v8;
        v10 = *((_QWORD *)&v12 + 1);
        if (*((_QWORD *)&v12 + 1) >= v13)
          break;
        v7 = *(_OWORD *)__p;
        *(_QWORD *)(*((_QWORD *)&v12 + 1) + 16) = v15;
        *(_OWORD *)v10 = v7;
        __p[1] = 0;
        v15 = 0;
        __p[0] = 0;
        *(_DWORD *)(v10 + 24) = v16;
        *((_QWORD *)&v12 + 1) = v10 + 32;
        v6 += 2;
        if (v6 == i)
          goto LABEL_12;
      }
      *((_QWORD *)&v12 + 1) = sub_20FEF2430((void **)&v12, (uint64_t)__p);
      if (SHIBYTE(v15) < 0)
        break;
      v6 += 2;
      if (v6 == i)
        goto LABEL_12;
    }
    operator delete(__p[0]);
  }
LABEL_12:
  result = *(double *)&v12;
  *(_OWORD *)a2 = v12;
  *(_QWORD *)(a2 + 16) = v13;
  return result;
}

void sub_20FEF2304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20EB9B93C(&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF231C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  sub_20EB9B93C((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF2340(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  void **v11;

  v2 = *(void ***)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    if (a2 >> 59)
      sub_20FDFA718();
    v4 = *(void ***)(a1 + 8);
    v5 = 32 * a2;
    v6 = (char *)operator new(32 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[(char *)v4 - (char *)v2];
      do
      {
        v10 = *((_OWORD *)v4 - 2);
        *((_QWORD *)v9 - 2) = *(v4 - 2);
        *((_OWORD *)v9 - 2) = v10;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(v4 - 4) = 0;
        *((_DWORD *)v9 - 2) = *((_DWORD *)v4 - 2);
        v9 -= 32;
        v4 -= 4;
      }
      while (v4 != v2);
      v2 = *(void ***)a1;
      v11 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        if (*((char *)v11 - 9) < 0)
          operator delete(*(v11 - 4));
        v11 -= 4;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_20FEF2430(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  __int128 v16;
  void **v17;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20FDFA718();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    sub_20E877A38();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  v13 = v11 + 32;
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 2);
      *((_QWORD *)v11 - 2) = *(v15 - 2);
      *((_OWORD *)v11 - 2) = v16;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 4) = 0;
      *((_DWORD *)v11 - 2) = *((_DWORD *)v15 - 2);
      v11 -= 32;
      v15 -= 4;
    }
    while (v15 != v14);
    v15 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v17 != v15)
    {
      if (*((char *)v17 - 9) < 0)
        operator delete(*(v17 - 4));
      v17 -= 4;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20FEF2568(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int *v12;

  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v3 = *(unsigned __int8 *)(a1 + 88), *(_OWORD *)(a1 + 72) = *(_OWORD *)a2, v3))
  {
    v4 = *(uint64_t **)(a2 + 16);
    sub_2101FAEA0(a1);
    v5 = *v4;
    v6 = v4[1];
    if (v5 != v6)
    {
      do
      {
LABEL_6:
        sub_2101FAEA0(a1);
        sub_2101FD70C(a1, v5);
        v11 = *(_DWORD *)(v5 + 24);
        v12 = &v11;
        sub_20FEF268C(a1, &v12);
        v7 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 8);
        *(_QWORD *)(a1 + 56) = v7 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        v5 += 32;
      }
      while (v5 != v6);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 16);
      *(_QWORD *)(a1 + 56) = v7 - 16;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    v8 = *(uint64_t **)(a2 + 16);
    sub_2101FAEA0(a1);
    v5 = *v8;
    v6 = v8[1];
    if (v5 != v6)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (v10)
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20FEF268C(uint64_t a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FEF00CC((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FD70C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FEF2750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEF276C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEF2780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEF2794(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE1036C(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE10250(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FDE75BC(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  sub_20FEF2A14(a2, v3 + 200);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FEF2A14(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  void *__p;
  char v9;
  char v10;

  sub_20FEF1DAC((uint64_t)&v6, a2);
  sub_20FEF2AC8(a1, (uint64_t)&v6);
  if (v10 && v9 < 0)
    operator delete(__p);
  v3 = (void **)v6;
  if (v6)
  {
    v4 = v7;
    v5 = v6;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v3);
      v5 = v6;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_20FEF2AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE4450((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20FEF2AC8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t *v18;

  v4 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
  {
    sub_20E9F4A34();
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (!v7)
      goto LABEL_12;
    goto LABEL_5;
  }
  v18 = (uint64_t *)(v5 + 16);
  sub_20E9F472C(&v18, v4);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
LABEL_5:
    v8 = 32 * (v7 >> 5);
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        v18 = (uint64_t *)(v9 + 16);
        sub_20E9F4E1C((uint64_t)&v17, &v18, (const void **)v6);
        v10 = *(_DWORD *)(v6 + 24);
        v11 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v11 + 40))
          goto LABEL_11;
LABEL_6:
        v18 = (uint64_t *)(v11 + 16);
        sub_20E9F3834(&v18, v10);
        v6 += 32;
        v8 -= 32;
        if (!v8)
          break;
      }
      else
      {
        sub_20E9F5254((uint64_t)&v18, v9 + 8, v6);
        v10 = *(_DWORD *)(v6 + 24);
        v11 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v11 + 40))
          goto LABEL_6;
LABEL_11:
        sub_20E9F3C50();
        v6 += 32;
        v8 -= 32;
        if (!v8)
          break;
      }
    }
  }
LABEL_12:
  if (*(_BYTE *)(a2 + 48))
  {
    v12 = (const void **)(a2 + 24);
    v13 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v13 + 40))
    {
      v18 = (uint64_t *)(v13 + 16);
      sub_20E9F3164(&v18, 1);
      v14 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v14 + 40))
      {
LABEL_15:
        v18 = (uint64_t *)(v14 + 16);
        return (char *)sub_20E9F4E1C((uint64_t)&v17, &v18, v12);
      }
    }
    else
    {
      LOBYTE(v18) = 1;
      std::ostream::write();
      v14 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v14 + 40))
        goto LABEL_15;
    }
    return (char *)sub_20E9F5254((uint64_t)&v18, v14 + 8, (uint64_t)v12);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v16 + 40))
    {
      v18 = (uint64_t *)(v16 + 16);
      return sub_20E9F3164(&v18, 0);
    }
    else
    {
      LOBYTE(v18) = 0;
      return (char *)std::ostream::write();
    }
  }
}

void sub_20FEF2CCC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FA8A4(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v18);
  sub_20FEF2FCC(a2, v3 + 200);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEF2FCC(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  void *__p;
  char v9;
  char v10;

  sub_20FEF1DAC((uint64_t)&v6, a2);
  sub_20FEF3080(a1, (uint64_t)&v6);
  if (v10 && v9 < 0)
    operator delete(__p);
  v3 = (void **)v6;
  if (v6)
  {
    v4 = v7;
    v5 = v6;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v3);
      v5 = v6;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_20FEF306C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE4450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEF3080(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void **p_p;
  void *__p;
  void *v17;

  sub_20FEF2098((__int128 **)a2, (uint64_t)&__p);
  *(_QWORD *)&v14 = "logger_enable_state_changes";
  *((_QWORD *)&v14 + 1) = 27;
  p_p = &__p;
  sub_20FEF3270(a1, (uint64_t)&v14);
  sub_20FEF21EC((__int128 **)&__p, (uint64_t)&v14);
  v4 = *(__int128 **)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(__int128 **)(a2 + 8);
    v6 = *(__int128 **)a2;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 9) < 0)
          operator delete(*((void **)v5 - 4));
        v5 -= 2;
      }
      while (v5 != v4);
      v6 = *(__int128 **)a2;
    }
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v6);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v14;
  v7 = __p;
  *(_QWORD *)(a2 + 16) = p_p;
  if (v7)
  {
    v8 = (uint64_t)v17;
    v9 = v7;
    if (v17 != v7)
    {
      do
      {
        if (*(char *)(v8 - 9) < 0)
          operator delete(*(void **)(v8 - 32));
        v8 -= 32;
      }
      while ((void *)v8 != v7);
      v9 = __p;
    }
    v17 = v7;
    operator delete(v9);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v10 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "target_context", *(_QWORD *)(a1 + 80) = 14, v10))
  {
    if (*(_BYTE *)(a2 + 48))
    {
LABEL_20:
      sub_2101FB61C(a1, a2 + 24);
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    if (*(_BYTE *)(a2 + 48))
      goto LABEL_20;
  }
  LOBYTE(__p) = 0;
  v17 = 0;
  v11 = (unsigned __int8 *)sub_2101FA67C(a1);
  v12 = *v11;
  *v11 = __p;
  LOBYTE(__p) = v12;
  v13 = *((_QWORD *)v11 + 1);
  *((_QWORD *)v11 + 1) = v17;
  v17 = (void *)v13;
  sub_20EB911C0((uint64_t *)&v17, v12);
}

void sub_20FEF3230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t *v12;

  sub_20EB911C0(v12, a12);
  _Unwind_Resume(a1);
}

void sub_20FEF3248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEF325C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEF3270(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int *v12;

  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v3 = *(unsigned __int8 *)(a1 + 88), *(_OWORD *)(a1 + 72) = *(_OWORD *)a2, v3))
  {
    v4 = *(uint64_t **)(a2 + 16);
    sub_2101FA8A4(a1);
    v5 = *v4;
    v6 = v4[1];
    if (v5 != v6)
    {
      do
      {
LABEL_6:
        sub_2101FA8A4(a1);
        sub_2101FB61C(a1, v5);
        v11 = *(_DWORD *)(v5 + 24);
        v12 = &v11;
        sub_20FEF3394(a1, &v12);
        v7 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 8);
        *(_QWORD *)(a1 + 56) = v7 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        v5 += 32;
      }
      while (v5 != v6);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 16);
      *(_QWORD *)(a1 + 56) = v7 - 16;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    v8 = *(uint64_t **)(a2 + 16);
    sub_2101FA8A4(a1);
    v5 = *v8;
    v6 = v8[1];
    if (v5 != v6)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (v10)
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20FEF3394(uint64_t a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FEF00CC((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FB61C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FEF3458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEF3474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEF3488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEF349C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20E86A980(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FEF36B4(a2, v3 + 200);
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20E86A980(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FEF36B4(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  void *__p;
  char v9;
  char v10;

  sub_20FEF1DAC((uint64_t)&v6, a2);
  sub_20FEF3768(a1, (uint64_t)&v6);
  if (v10 && v9 < 0)
    operator delete(__p);
  v3 = (void **)v6;
  if (v6)
  {
    v4 = v7;
    v5 = v6;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v3);
      v5 = v6;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_20FEF3754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE4450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEF3768(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  char v10;
  char v11;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    v10 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v4, (uint64_t)&v10, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 != *(_QWORD *)a2)
  {
    do
    {
      sub_20E9E713C(a1, v5);
      if (*(_QWORD *)(a1 + 40))
      {
        v7 = *(_QWORD **)(a1 + 24);
        v11 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v7, (uint64_t)&v11, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      v5 += 32;
    }
    while (v5 != v6);
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v9 = 1;
    sub_20E9E6F58(a1, &v9);
    sub_20E9E713C(a1, a2 + 24);
  }
  else
  {
    v8 = 0;
    sub_20E9E6F58(a1, &v8);
  }
}

void sub_20FEF389C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 1;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_2100B6A04((_QWORD *)a2);
  sub_20FEF3A54(a2, v3 + 200);
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20FEF3A54(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  void *__p;
  char v9;
  char v10;

  sub_20FEF1DAC((uint64_t)&v6, a2);
  sub_20FEF3B08(a1, (uint64_t *)&v6);
  if (v10 && v9 < 0)
    operator delete(__p);
  v3 = (void **)v6;
  if (v6)
  {
    v4 = v7;
    v5 = v6;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v3);
      v5 = v6;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_20FEF3AF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE4450((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20FEF3B08(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  int64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  uint64_t v13;
  char *p_src;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int64_t v19;
  _BOOL4 v20;
  uint64_t v22;
  uint64_t __src;
  uint64_t v24;

  v22 = (a2[1] - *a2) >> 5;
  v4 = a1 + 24;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&v22, (char *)&__src, 8);
  v5 = *a2;
  v6 = a2[1] - *a2;
  if (v6)
  {
    for (i = 32 * (v6 >> 5); i; i -= 32)
    {
      v10 = *(unsigned __int8 *)(v5 + 23);
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(v5 + 8);
      __src = v10;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v24, 8);
      if (*(char *)(v5 + 23) < 0)
      {
        v9 = *(char **)v5;
        v8 = *(_QWORD *)(v5 + 8);
        if (*(_QWORD *)v5)
          v11 = 1;
        else
          v11 = v8 == 0;
        if (!v11)
        {
          v12 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
          v9 = 0;
          if (v12)
            goto LABEL_13;
        }
      }
      else
      {
        v8 = *(unsigned __int8 *)(v5 + 23);
        v9 = (char *)v5;
      }
      sub_2100B8FD4(v4, *(char **)(a1 + 32), v9, &v9[v8], v8);
      LODWORD(__src) = *(_DWORD *)(v5 + 24);
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
      v5 += 32;
    }
  }
  if (*((_BYTE *)a2 + 48))
  {
    LOBYTE(__src) = 1;
    sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    v13 = *((unsigned __int8 *)a2 + 47);
    if ((v13 & 0x80u) != 0)
      v13 = a2[4];
    __src = v13;
    sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v24, 8);
    if (*((char *)a2 + 47) < 0)
    {
      p_src = (char *)a2[3];
      v15 = a2[4];
      if (!p_src)
      {
        if (v15)
        {
          v20 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0);
          p_src = 0;
          if (v20)
LABEL_13:
            abort();
        }
      }
    }
    else
    {
      p_src = (char *)(a2 + 3);
      v15 = *((unsigned __int8 *)a2 + 47);
    }
    v16 = *(char **)(a1 + 32);
    v17 = &p_src[v15];
    v18 = v4;
    v19 = v15;
  }
  else
  {
    LOBYTE(__src) = 0;
    v16 = *(char **)(a1 + 32);
    v17 = (char *)&__src + 1;
    p_src = (char *)&__src;
    v18 = v4;
    v19 = 1;
  }
  return sub_2100B8FD4(v18, v16, p_src, v17, v19);
}

void sub_20FEF3D60(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  void *v8;
  void **v9;
  void *__p;
  char v11;
  char v12;
  uint64_t v13;
  int v14;

  sub_20FEF1DAC((uint64_t)&v8, a2);
  v13 = ((char *)v9 - (_BYTE *)v8) >> 5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v13);
  v3 = (void **)v8;
  v4 = v9;
  if (v9 != v8)
  {
    do
    {
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, v3);
      v14 = *((_DWORD *)v3 + 6);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 56))(a1, &v14);
      v3 += 4;
    }
    while (v3 != v4);
  }
  if (v12)
  {
    LOBYTE(v13) = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v13);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, &__p);
  }
  else
  {
    LOBYTE(v13) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v13);
  }
  if (v12 && v11 < 0)
    operator delete(__p);
  v5 = (void **)v8;
  if (v8)
  {
    v6 = v9;
    v7 = v8;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*(v6 - 4));
        v6 -= 4;
      }
      while (v6 != v5);
      v7 = v8;
    }
    v9 = v5;
    operator delete(v7);
  }
}

void sub_20FEF3EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE4450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEF3ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE4450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEF3EE0(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FEF451C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FEF516C(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FEF57D8(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FEF6284(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FEF6B08(&v9, a1);
          else
            sub_20FEF4044(&v8, (uint64_t *)a1);
        }
      }
    }
  }
}

void sub_20FEF4044(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27[27];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)&v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)&v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *a2;
  v27[0] = a2[1];
  v25 = v27[0];
  v28 = 6;
  (*(void (**)(uint64_t *, unsigned int *))(v24 + 104))(a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3)
      sub_20FDF69C0((uint64_t)&v28, (uint64_t)a2, v4, v28);
    else
      sub_20FDF6C34((uint64_t)a2, v4, v28);
  }
  else
  {
    sub_20FDF63C8((int *)v27, (uint64_t)a2, v4, v28);
  }
  v27[0] = a2[1];
  sub_20FEF71BC((int *)v27, (uint64_t)a2, v3 + 200);
}

void sub_20FEF44D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEF451C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  char v31;
  uint64_t v32[27];
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v32);
    sub_20FDE470C((uint64_t)v33, v32);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v33);
        if (!v48)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v8 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v8;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v39;
    v10 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v11 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v11;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v12 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v12;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v15 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v46;
LABEL_45:
    *((_QWORD *)&v46 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v32);
  sub_20FDE470C((uint64_t)v33, v32);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v17 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v17;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v39;
    v19 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v20 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v20;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v21 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v21;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v33);
  if (v48)
  {
LABEL_38:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v23 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  sub_20EB0580C((uint64_t)v32);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF7D8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v32[0] = 0;
  sub_2100DB048(v27, v32);
  if (HIDWORD(v32[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  sub_20FEF4A70(a2, v3 + 200);
  v28 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v28 - 8);
  v29 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a2 + 48) = v28 - 8;
  *(_QWORD *)(a2 + 72) = v29 - 8;
}

void sub_20FEF4A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEF4A70(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  void *__p;
  void **v15;

  sub_20FEF2098((__int128 **)a2, (uint64_t)&__p);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "logger_enable_state_changes";
  *(_QWORD *)(a1 + 96) = 27;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20FEF4BDC((uint64_t *)a1, (char **)&__p);
  sub_20FEF21EC((__int128 **)&__p, (uint64_t)&v12);
  v5 = *(__int128 **)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *(__int128 **)(a2 + 8);
    v7 = *(__int128 **)a2;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*((void **)v6 - 4));
        v6 -= 2;
      }
      while (v6 != v5);
      v7 = *(__int128 **)a2;
    }
    *(_QWORD *)(a2 + 8) = v5;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v12;
  v8 = (void **)__p;
  *(_QWORD *)(a2 + 16) = v13;
  if (v8)
  {
    v9 = v15;
    v10 = v8;
    if (v15 != v8)
    {
      do
      {
        if (*((char *)v9 - 9) < 0)
          operator delete(*(v9 - 4));
        v9 -= 4;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v15 = v8;
    operator delete(v10);
  }
  v11 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "target_context";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v11)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20FDED690((uint64_t *)a1, a2 + 24);
}

void sub_20FEF4BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEF4BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEF4BDC(uint64_t *a1, char **a2)
{
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  void ***v7;
  void **v8;
  char *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  __int128 v21;
  void *v22;

  sub_2101FF7D8((uint64_t)a1);
  v4 = (unsigned __int8 *)a1[4];
  v5 = *v4;
  if (v5 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 4;
  }
  else if (v5 == 1)
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 3);
  }
  else
  {
    if (!*v4)
    {
      v6 = 0;
      v7 = (void ***)(a2 + 1);
      v8 = (void **)a2[1];
      v9 = *a2;
      v10 = ((char *)v8 - *a2) >> 5;
      goto LABEL_11;
    }
    v6 = 1;
  }
  v7 = (void ***)(a2 + 1);
  v8 = (void **)a2[1];
  v9 = *a2;
  v10 = ((char *)v8 - *a2) >> 5;
  if (v6 > v10)
  {
    sub_20FEF4DEC((void **)a2, v6 - v10);
    v13 = a2;
    v11 = (void **)*a2;
    v12 = (void **)v13[1];
    if (v11 != v12)
      goto LABEL_22;
LABEL_20:
    v14 = a1[6];
    v15 = a1[9];
    goto LABEL_25;
  }
LABEL_11:
  if (v10 <= v6)
  {
    v12 = v8;
    v11 = (void **)*a2;
    if (v11 != v8)
      goto LABEL_22;
    goto LABEL_20;
  }
  v12 = (void **)&v9[32 * v6];
  while (v8 != v12)
  {
    if (*((char *)v8 - 9) < 0)
      operator delete(*(v8 - 4));
    v8 -= 4;
  }
  *v7 = v12;
  v11 = (void **)*a2;
  if (v11 == v12)
    goto LABEL_20;
  do
  {
LABEL_22:
    sub_2101FF7D8((uint64_t)a1);
    v20 = (void **)sub_2101FFA90(a1);
    ++a1[14];
    v22 = 0;
    v21 = 0uLL;
    sub_2100DB548(v20, (uint64_t)&v21);
    if (*((char *)v11 + 23) < 0)
      operator delete(*v11);
    v16 = (char *)(v11 + 3);
    v17 = v21;
    v11[2] = v22;
    *(_OWORD *)v11 = v17;
    v11 += 4;
    *(_QWORD *)&v21 = v16;
    sub_20FEF4F7C(a1, (_DWORD **)&v21);
    v18 = a1[6];
    a1[4] = *(_QWORD *)(v18 - 8);
    v19 = a1[9];
    a1[14] = *(_QWORD *)(v19 - 8);
    a1[6] = v18 - 8;
    a1[9] = v19 - 8;
  }
  while (v11 != v12);
  v14 = v18 - 8;
  v15 = v19 - 8;
LABEL_25:
  a1[4] = *(_QWORD *)(v14 - 8);
  a1[14] = *(_QWORD *)(v15 - 8);
  a1[6] = v14 - 8;
  a1[9] = v15 - 8;
}

void sub_20FEF4DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEF4DEC(void **a1, unint64_t a2)
{
  _BYTE *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void **v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  void **v18;
  __int128 v19;
  void **v20;

  v5 = (void **)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (_BYTE *)v5) >> 5)
  {
    if (a2)
    {
      v11 = 32 * a2;
      v12 = &v5[4 * a2];
      do
      {
        *v5 = 0;
        v5[1] = 0;
        *((_DWORD *)v5 + 6) = 0;
        v5[2] = 0;
        v5 += 4;
        v11 -= 32;
      }
      while (v11);
      v5 = v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = ((char *)v5 - (_BYTE *)*a1) >> 5;
    if ((v6 + a2) >> 59)
      sub_20FDFA718();
    v7 = v4 - (_BYTE *)*a1;
    v8 = v7 >> 4;
    if (v7 >> 4 <= v6 + a2)
      v8 = v6 + a2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
    {
      if (v9 >> 59)
        sub_20E877A38();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[32 * v6];
    v14 = 32 * a2;
    v15 = &v13[32 * a2];
    v16 = v13;
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v14 -= 32;
    }
    while (v14);
    v17 = &v10[32 * v9];
    v18 = (void **)*a1;
    if (v5 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v5 - 2);
        *((_QWORD *)v13 - 2) = *(v5 - 2);
        *((_OWORD *)v13 - 2) = v19;
        *(v5 - 3) = 0;
        *(v5 - 2) = 0;
        *(v5 - 4) = 0;
        *((_DWORD *)v13 - 2) = *((_DWORD *)v5 - 2);
        v13 -= 32;
        v5 -= 4;
      }
      while (v5 != v18);
      v5 = (void **)*a1;
      v20 = (void **)a1[1];
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
      while (v20 != v5)
      {
        if (*((char *)v20 - 9) < 0)
          operator delete(*(v20 - 4));
        v20 -= 4;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20FEF4F7C(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FFA90(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DB548(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20FF31578((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FEF50E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEF516C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v26);
    sub_20FDE470C((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v26);
  sub_20FDE470C((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20EB0580C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v26, a2, v4);
  LODWORD(v26[0]) = 1;
  sub_20E9EDADC(a2[6], v26);
  return sub_20FEF55F8((uint64_t)v26, a2, v3 + 200);
}

void sub_20FEF55B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEF55F8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;

  v5 = a2 + 2;
  sub_20E90A71C(a2 + 2);
  sub_20FEF56DC((uint64_t)a2, a3);
  v6 = (void **)(a3 + 24);
  v10 = 0;
  sub_20E9ED7B4(a2[6], &v10);
  if (v10)
  {
    if (!*(_BYTE *)(a3 + 48))
    {
      *v6 = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 48) = 1;
    }
    sub_20E9EE280(a2[6], (std::string *)(a3 + 24));
  }
  else if (*(_BYTE *)(a3 + 48))
  {
    if (*(char *)(a3 + 47) < 0)
      operator delete(*v6);
    *(_BYTE *)(a3 + 48) = 0;
  }
  v7 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(v5);
  v9 = *(_QWORD *)(v7 - 16) - result + *(_QWORD *)(v7 - 8);
  if (v9)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v9);
  a2[4] -= 16;
  return result;
}

void sub_20FEF56DC(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unint64_t v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v9 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v9);
  v4 = *(std::string **)(a2 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a2) >> 5;
  if (v9 > v5)
  {
    sub_20FEF4DEC((void **)a2, v9 - v5);
    v8 = a2;
    v6 = *(std::string **)a2;
    v7 = *(_QWORD *)(v8 + 8);
    if ((std::string *)v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v9 >= v5)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v6 = *(std::string **)a2;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v7 = *(_QWORD *)a2 + 32 * v9;
  while (v4 != (std::string *)v7)
  {
    if (v4[-1].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v4[-2].__r_.__value_.__r.__words[2]);
    v4 = (std::string *)((char *)v4 - 32);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v6 = *(std::string **)a2;
  if ((std::string *)v7 != v6)
  {
    do
    {
LABEL_13:
      sub_20E9EE280(*(_QWORD *)(a1 + 48), v6);
      v10 = 0;
      sub_20E9EDA2C(*(_QWORD *)(a1 + 48), &v10);
      LODWORD(v6[1].__r_.__value_.__l.__data_) = v10;
      v6 = (std::string *)((char *)v6 + 32);
    }
    while (v6 != (std::string *)v7);
  }
}

void sub_20FEF57D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  char v31;
  uint64_t v32[27];
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v32);
    sub_20FDE470C((uint64_t)v33, v32);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v33);
        if (!v48)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v8 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v8;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v39;
    v10 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v11 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v11;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v12 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v12;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v15 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v46;
LABEL_45:
    *((_QWORD *)&v46 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v32);
  sub_20FDE470C((uint64_t)v33, v32);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v17 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v17;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v39;
    v19 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v20 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v20;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v21 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v21;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v33);
  if (v48)
  {
LABEL_38:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v23 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  sub_20EB0580C((uint64_t)v32);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF2E8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v32[0] = 0;
  sub_2100DA8B0(v27, v32);
  if (HIDWORD(v32[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  sub_20FEF5D2C(a2, v3 + 200);
  v28 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v28 - 8);
  v29 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a2 + 48) = v28 - 8;
  *(_QWORD *)(a2 + 72) = v29 - 8;
}

void sub_20FEF5CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEF5D2C(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  void *__p;
  void **v15;

  sub_20FEF2098((__int128 **)a2, (uint64_t)&__p);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "logger_enable_state_changes";
  *(_QWORD *)(a1 + 96) = 27;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20FEF5E98((uint64_t *)a1, (char **)&__p);
  sub_20FEF21EC((__int128 **)&__p, (uint64_t)&v12);
  v5 = *(__int128 **)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *(__int128 **)(a2 + 8);
    v7 = *(__int128 **)a2;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*((void **)v6 - 4));
        v6 -= 2;
      }
      while (v6 != v5);
      v7 = *(__int128 **)a2;
    }
    *(_QWORD *)(a2 + 8) = v5;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v12;
  v8 = (void **)__p;
  *(_QWORD *)(a2 + 16) = v13;
  if (v8)
  {
    v9 = v15;
    v10 = v8;
    if (v15 != v8)
    {
      do
      {
        if (*((char *)v9 - 9) < 0)
          operator delete(*(v9 - 4));
        v9 -= 4;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v15 = v8;
    operator delete(v10);
  }
  v11 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "target_context";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v11)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20FD25354((uint64_t *)a1, a2 + 24);
}

void sub_20FEF5E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEF5E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FEF5E98(uint64_t *a1, char **a2)
{
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  void ***v7;
  void **v8;
  char *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  __int128 v21;
  void *v22;

  sub_2101FF2E8((uint64_t)a1);
  v4 = (unsigned __int8 *)a1[4];
  v5 = *v4;
  if (v5 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 4;
  }
  else if (v5 == 1)
  {
    v6 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 16);
  }
  else
  {
    if (!*v4)
    {
      v6 = 0;
      v7 = (void ***)(a2 + 1);
      v8 = (void **)a2[1];
      v9 = *a2;
      v10 = ((char *)v8 - *a2) >> 5;
      goto LABEL_11;
    }
    v6 = 1;
  }
  v7 = (void ***)(a2 + 1);
  v8 = (void **)a2[1];
  v9 = *a2;
  v10 = ((char *)v8 - *a2) >> 5;
  if (v6 > v10)
  {
    sub_20FEF4DEC((void **)a2, v6 - v10);
    v13 = a2;
    v11 = (void **)*a2;
    v12 = (void **)v13[1];
    if (v11 != v12)
      goto LABEL_22;
LABEL_20:
    v14 = a1[6];
    v15 = a1[9];
    goto LABEL_25;
  }
LABEL_11:
  if (v10 <= v6)
  {
    v12 = v8;
    v11 = (void **)*a2;
    if (v11 != v8)
      goto LABEL_22;
    goto LABEL_20;
  }
  v12 = (void **)&v9[32 * v6];
  while (v8 != v12)
  {
    if (*((char *)v8 - 9) < 0)
      operator delete(*(v8 - 4));
    v8 -= 4;
  }
  *v7 = v12;
  v11 = (void **)*a2;
  if (v11 == v12)
    goto LABEL_20;
  do
  {
LABEL_22:
    sub_2101FF2E8((uint64_t)a1);
    v20 = (void **)sub_2101FF5A0(a1);
    ++a1[14];
    v22 = 0;
    v21 = 0uLL;
    sub_2100DADB0(v20, (uint64_t)&v21);
    if (*((char *)v11 + 23) < 0)
      operator delete(*v11);
    v16 = (char *)(v11 + 3);
    v17 = v21;
    v11[2] = v22;
    *(_OWORD *)v11 = v17;
    v11 += 4;
    *(_QWORD *)&v21 = v16;
    sub_20FEF6094(a1, (_DWORD **)&v21);
    v18 = a1[6];
    a1[4] = *(_QWORD *)(v18 - 8);
    v19 = a1[9];
    a1[14] = *(_QWORD *)(v19 - 8);
    a1[6] = v18 - 8;
    a1[9] = v19 - 8;
  }
  while (v11 != v12);
  v14 = v18 - 8;
  v15 = v19 - 8;
LABEL_25:
  a1[4] = *(_QWORD *)(v14 - 8);
  a1[14] = *(_QWORD *)(v15 - 8);
  a1[6] = v14 - 8;
  a1[9] = v15 - 8;
}

void sub_20FEF6078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEF6094(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20FF31578((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FEF61F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FEF6284(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  void *__p[2];
  char v30;
  _BYTE v31[8];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)__p);
    sub_20FDE470C((uint64_t)v31, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)__p);
  sub_20FDE470C((uint64_t)v31, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20EB0580C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_20E9E840C(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_20FDF3288((uint64_t)__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          v27 = 0;
          if (v30 < 0)
            goto LABEL_79;
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      v27 = 1;
      if (v30 < 0)
LABEL_79:
        operator delete(__p[0]);
LABEL_65:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  sub_20FEF67E0((uint64_t)__p, a2, v3 + 200);
}

void sub_20FEF6798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEF67E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  char v6;
  char v7;
  char v8;
  void *__p[2];
  uint64_t v10;

  LODWORD(__p[0]) = 1;
  sub_20E9E840C(a2, __p);
  sub_20FEF69AC(a2, a3);
  v5 = (void **)(a3 + 24);
  v8 = 0;
  sub_20E9E7AC8(a2, &v8);
  if (!v8)
  {
    if (!*(_BYTE *)(a3 + 48))
      goto LABEL_13;
    if (*(char *)(a3 + 47) < 0)
      operator delete(*v5);
    *(_BYTE *)(a3 + 48) = 0;
    if (*(_BYTE *)(a2 + 131))
      return;
    while (1)
    {
LABEL_23:
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (SHIBYTE(v10) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_30:
          v7 = 0;
          if (SHIBYTE(v10) < 0)
            goto LABEL_33;
          goto LABEL_19;
        }
      }
      else if (SHIBYTE(v10) == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_30;
      }
      v7 = 1;
      if (SHIBYTE(v10) < 0)
LABEL_33:
        operator delete(__p[0]);
LABEL_19:
      if (*(_BYTE *)(a2 + 131))
        v6 = 0;
      else
        v6 = v7;
      if ((v6 & 1) == 0)
        return;
    }
  }
  if (!*(_BYTE *)(a3 + 48))
  {
    *v5 = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_BYTE *)(a3 + 48) = 1;
    ++*(_QWORD *)(a2 + 80);
    if (!*(_BYTE *)(a2 + 128))
      goto LABEL_15;
    goto LABEL_11;
  }
  ++*(_QWORD *)(a2 + 80);
  if (*(_BYTE *)(a2 + 128))
  {
LABEL_11:
    if (!*(_BYTE *)(a2 + 131))
      goto LABEL_15;
    *(_BYTE *)(a2 + 132) = 1;
LABEL_13:
    if (!*(_BYTE *)(a2 + 131))
      goto LABEL_23;
    return;
  }
LABEL_15:
  sub_20E9E9FEC(a2, (uint64_t)__p);
  if (*(char *)(a3 + 47) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 40) = v10;
  ++*(_QWORD *)(a2 + 104);
  if (!*(_BYTE *)(a2 + 131))
    goto LABEL_23;
}

void sub_20FEF69AC(uint64_t a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  void *v16;

  v14 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  sub_20E9E88B4(a1, &v14);
  v4 = *(void ***)(a2 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a2) >> 5;
  if (v14 > v5)
  {
    sub_20FEF4DEC((void **)a2, v14 - v5);
    v8 = a2;
    v6 = *(void ***)a2;
    v7 = *(void ***)(v8 + 8);
    v9 = (char *)v7 - (char *)v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v14 >= v5)
  {
    v6 = *(void ***)a2;
    v9 = (char *)v4 - (char *)v6;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v10 = *(_QWORD *)a2 + 32 * v14;
  while (v4 != (void **)v10)
  {
    if (*((char *)v4 - 9) < 0)
      operator delete(*(v4 - 4));
    v4 -= 4;
  }
  *(_QWORD *)(a2 + 8) = v10;
  v6 = *(void ***)a2;
  v9 = v10 - (_QWORD)v6;
  if ((void **)v10 != v6)
  {
LABEL_13:
    v11 = 32 * (v9 >> 5);
    do
    {
      ++*(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(a1 + 128))
        v12 = *(_BYTE *)(a1 + 131) == 0;
      else
        v12 = 1;
      if (v12)
      {
        sub_20E9E9FEC(a1, (uint64_t)&v15);
        if (*((char *)v6 + 23) < 0)
          operator delete(*v6);
        v13 = v15;
        v6[2] = v16;
        *(_OWORD *)v6 = v13;
        ++*(_QWORD *)(a1 + 104);
      }
      else
      {
        *(_BYTE *)(a1 + 132) = 1;
      }
      LODWORD(v15) = 0;
      sub_20E9E81B8(a1, &v15);
      *((_DWORD *)v6 + 6) = v15;
      v6 += 4;
      v11 -= 32;
    }
    while (v11);
  }
}

void sub_20FEF6B08(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FEF6F7C((uint64_t)v25, a2, v3 + 200);
}

void sub_20FEF6F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEF6F7C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_2100B6EE0(a2);
  sub_20FEF7040(a2, a3);
  sub_20FDF5298(a2, a3 + 24);
  v9 = a2[12];
  v10 = a2[9];
  a2[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_20FEF702C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEF7040(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_21;
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = (v9 - *(_QWORD *)a2) >> 5;
  if (v8 > v10)
  {
    sub_20FEF4DEC((void **)a2, v8 - v10);
    v13 = a2;
    v11 = *(_DWORD **)a2;
    v12 = *(_QWORD *)(v13 + 8);
    if ((_DWORD *)v12 != v11)
      goto LABEL_16;
    return;
  }
  if (v8 < v10)
  {
    v12 = *(_QWORD *)a2 + 32 * v8;
    while (v9 != v12)
    {
      if (*(char *)(v9 - 9) < 0)
        operator delete(*(void **)(v9 - 32));
      v9 -= 32;
    }
    *(_QWORD *)(a2 + 8) = v12;
    v11 = *(_DWORD **)a2;
    if ((_DWORD *)v12 == v11)
      return;
    while (1)
    {
LABEL_16:
      sub_2100B7230(a1, (uint64_t)v11);
      v14 = a1[6];
      v15 = a1[7];
      v4 = v15 >= v14;
      v16 = v15 - v14;
      if (!v4)
        v16 = 0;
      if (v16 <= 3)
        break;
      v17 = *(_DWORD *)(a1[3] + v14);
      a1[6] = v14 + 4;
      v11[6] = v17;
      v11 += 8;
      if (v11 == (_DWORD *)v12)
        return;
    }
LABEL_21:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v12 = *(_QWORD *)(a2 + 8);
  v11 = *(_DWORD **)a2;
  if (v9 != *(_QWORD *)a2)
    goto LABEL_16;
}

void sub_20FEF7194(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEF71A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEF71BC(int *a1, uint64_t a2, uint64_t a3)
{
  void **v6;
  int v7;
  char v8;

  v7 = 1;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 < 1)
  {
    sub_20FEF7608(a2, a3);
    v6 = (void **)(a3 + 24);
    v8 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v8);
    if (v8)
    {
      if (!*(_BYTE *)(a3 + 48))
      {
        *v6 = 0;
        *(_QWORD *)(a3 + 32) = 0;
        *(_QWORD *)(a3 + 40) = 0;
        *(_BYTE *)(a3 + 48) = 1;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3 + 24);
    }
    else if (*(_BYTE *)(a3 + 48))
    {
      if (*(char *)(a3 + 47) < 0)
        operator delete(*v6);
      *(_BYTE *)(a3 + 48) = 0;
    }
  }
  else
  {
    sub_20FEF72E0(a1, a2, a3);
  }
}

void sub_20FEF72E0(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void **v7;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  char v11;

  v5 = *a1;
  if (*a1 == 2)
  {
    v10 = 1;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      v8 = v10;
      v9 = sub_20FEF740C();
      sub_20E9F5C70((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_20FEF7608(a2, a3);
  v7 = (void **)(a3 + 24);
  v11 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a3 + 48))
    {
      *v7 = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 48) = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3 + 24);
  }
  else if (*(_BYTE *)(a3 + 48))
  {
    if (*(char *)(a3 + 47) < 0)
      operator delete(*v7);
    *(_BYTE *)(a3 + 48) = 0;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FEF740C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55C58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55C58))
    return &xmmword_254A55C40;
  v2 = (char *)sub_20FEF74E8();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A55C40, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A55C50 = *((_QWORD *)v2 + 2);
    xmmword_254A55C40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55C40, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55C58);
  return &xmmword_254A55C40;
}

void sub_20FEF74D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55C58);
  _Unwind_Resume(a1);
}

void *sub_20FEF74E8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55C78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55C78))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateEnabledLoggersSample]", qword_254A55C60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55C60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55C78);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55C98);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55C98))
    return &unk_254A55C80;
  sub_21023CD84((uint64_t)qword_254A55C60, (uint64_t)&unk_254A55C80);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55C80, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55C98);
  return &unk_254A55C80;
}

void sub_20FEF75D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55C98);
  _Unwind_Resume(a1);
}

void sub_20FEF75F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55C78);
  _Unwind_Resume(a1);
}

void sub_20FEF7608(uint64_t a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v9 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v9);
  v4 = *(void ***)(a2 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a2) >> 5;
  if (v9 > v5)
  {
    sub_20FEF4DEC((void **)a2, v9 - v5);
    v8 = a2;
    v6 = *(void ***)a2;
    v7 = *(_QWORD *)(v8 + 8);
    if ((void **)v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v9 >= v5)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v6 = *(void ***)a2;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v7 = *(_QWORD *)a2 + 32 * v9;
  while (v4 != (void **)v7)
  {
    if (*((char *)v4 - 9) < 0)
      operator delete(*(v4 - 4));
    v4 -= 4;
  }
  *(_QWORD *)(a2 + 8) = v7;
  v6 = *(void ***)a2;
  if ((void **)v7 != v6)
  {
    do
    {
LABEL_13:
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, v6);
      v10 = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 56))(a1, &v10);
      *((_DWORD *)v6 + 6) = v10;
      v6 += 4;
    }
    while (v6 != (void **)v7);
  }
}

_QWORD *sub_20FEF7718@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24CA08E40;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 112) = 0;
  *(_BYTE *)(v4 + 136) = 0;
  if (*(_BYTE *)(a1 + 136))
  {
    *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
    *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(v4 + 136) = 1;
  }
  *(_BYTE *)(v4 + 176) = 0;
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
  *(_BYTE *)(v4 + 224) = 0;
  if (*(_BYTE *)(a1 + 224))
  {
    *(_OWORD *)(v4 + 176) = *(_OWORD *)(a1 + 176);
    *(_QWORD *)(v4 + 192) = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    v6 = (unsigned __int128 *)(a1 + 208);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 208) = v7;
    *(_BYTE *)(v4 + 224) = 1;
  }
  *(_BYTE *)(v4 + 240) = 0;
  *(_BYTE *)(v4 + 264) = 0;
  if (*(_BYTE *)(a1 + 264))
  {
    *(_OWORD *)(v4 + 240) = *(_OWORD *)(a1 + 240);
    *(_QWORD *)(v4 + 256) = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_BYTE *)(v4 + 264) = 1;
  }
  *(_QWORD *)v4 = &off_24CA08DF0;
  *a2 = &off_24CA0C0E8;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20FEF78BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEF78D8(_QWORD *a1)
{
  *a1 = &off_24CA08E40;
  sub_20EB0580C((uint64_t)(a1 + 8));
  return a1;
}

void sub_20FEF7908(_QWORD *a1)
{
  *a1 = &off_24CA08E40;
  sub_20EB0580C((uint64_t)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FEF7948(uint64_t a1)
{
  return a1 + 64;
}

BOOL sub_20FEF7950(uint64_t a1, void *lpsrc)
{
  _BYTE *v4;
  _BOOL8 v5;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA07AF8, 0);
  if (!v4)
    return 0;
  if ((void *)a1 == lpsrc)
    return 1;
  v5 = (*(_BYTE *)(a1 + 48) != 0) == (v4[48] != 0);
  if (!*(_BYTE *)(a1 + 48) || !v4[48])
    return v5;
  if (*(_QWORD *)(a1 + 8) != *((_QWORD *)v4 + 1))
    return 0;
  if (!*(_BYTE *)(a1 + 24) || !v4[24])
  {
    if ((*(_BYTE *)(a1 + 24) != 0) == (v4[24] != 0))
      goto LABEL_13;
    return 0;
  }
  if (*(_QWORD *)(a1 + 16) != *((_QWORD *)v4 + 2))
    return 0;
LABEL_13:
  v5 = (*(_BYTE *)(a1 + 40) != 0) == (v4[40] != 0);
  if (*(_BYTE *)(a1 + 40) && v4[40])
    return *(_QWORD *)(a1 + 32) == *((_QWORD *)v4 + 4);
  return v5;
}

void sub_20FEF7A84(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FEF8D24();
  sub_20FEF7B38(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 64, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FEF7B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEF7B38(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55DD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55DD8))
  {
    v4 = sub_20FEF89F8();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A55DC0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A55DD0 = *(_QWORD *)(v9 - 8);
      xmmword_254A55DC0 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55DC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55DD8);
  }
  return sub_20FEF900C(&xmmword_254A55DC0, "{", a1 + 8, "}");
}

void sub_20FEF7C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A55DD8);
  _Unwind_Resume(a1);
}

void sub_20FEF7C68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55DD8);
  _Unwind_Resume(a1);
}

void sub_20FEF7C80(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 5;
}

void sub_20FEF7CAC(void *lpsrc@<X0>, uint64_t a2@<X8>)
{
  sub_20FF30B5C(lpsrc, 5, a2);
}

_QWORD *sub_20FEF7CD4(_QWORD *a1)
{
  *a1 = &off_24CA08E40;
  sub_20EB0580C((uint64_t)(a1 + 8));
  return a1;
}

void sub_20FEF7D04(_QWORD *a1)
{
  *a1 = &off_24CA08E40;
  sub_20EB0580C((uint64_t)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FEF7D44(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FEF8494();
  return sub_20FEF7DD0(v2, "{", a1 + 8, ",", a1 + 64, "}");
}

uint64_t sub_20FEF7D9C(uint64_t a1)
{
  return sub_20FEF8BF4(a1 + 8);
}

void sub_20FEF7DA4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FEF7DD0(__int128 *a1, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const char *a6)
{
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  __int128 *v17;
  const char *v18;
  __int128 *v19;
  const char *v20;
  const char *v21;
  __int128 **v22;

  v14 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&v12, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v12 = *a1;
    v13 = *((_QWORD *)a1 + 2);
  }
  v14 = 1;
  v17 = &v12;
  v18 = a2;
  v19 = &v12;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&v12);
  v15 = a3;
  v17 = &v12;
  v18 = "{";
  v19 = &v12;
  v20 = "{";
  v21 = "{";
  if (v14 == -1)
    goto LABEL_12;
  v22 = &v17;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v14])(&v22, &v12);
  LOBYTE(v17) = 1;
  v18 = (const char *)&v12;
  v19 = (__int128 *)&v16;
  sub_20FEF8094(&v15, (uint64_t)&v17);
  v17 = &v12;
  v18 = "}";
  v19 = &v12;
  v20 = "}";
  v21 = "}";
  if (v14 == -1)
LABEL_12:
    sub_20E877AB8();
  v22 = &v17;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v14])(&v22, &v12);
  v17 = &v12;
  v18 = a4;
  v19 = &v12;
  v20 = a4;
  v21 = a4;
  if (v14 == -1)
    sub_20E877AB8();
  v22 = &v17;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v14])(&v22, &v12);
  sub_20EB0A838((uint64_t)&v15, (uint64_t)&v12, a5);
  v17 = &v12;
  v18 = a6;
  v19 = &v12;
  v20 = a6;
  v21 = a6;
  if (v14 == -1)
    sub_20E877AB8();
  v22 = &v17;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v14])(&v22, &v12);
  if (v14 == -1)
    sub_20E877AB8();
  v17 = (__int128 *)&v22;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v14])(&v17, &v12);
  if (v14 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v14])(&v17, &v12);
  return result;
}

void sub_20FEF8004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF801C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF8030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF8044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF8058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF806C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF8080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF8094(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  const char *v8;
  unsigned int *v9;
  const char *v10;
  const char *v11;
  unsigned int **v12;

  v3 = *a1;
  if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
    v4 = *(unsigned int **)(a2 + 8);
    if (*(_BYTE *)(v3 + 40))
    {
LABEL_3:
      sub_20FEF8180((uint64_t)&v7, v4, v3);
      return;
    }
  }
  else
  {
    v7 = *(unsigned int **)(a2 + 8);
    v8 = ",";
    v9 = v7;
    v10 = ",";
    v11 = ",";
    v5 = v7[6];
    if ((_DWORD)v5 == -1)
      goto LABEL_8;
    v12 = &v7;
    ((void (*)(unsigned int ***))off_24CA08258[v5])(&v12);
    *(_BYTE *)a2 = 0;
    v4 = *(unsigned int **)(a2 + 8);
    if (*(_BYTE *)(v3 + 40))
      goto LABEL_3;
  }
  v7 = v4;
  v8 = "nullopt";
  v9 = v4;
  v10 = "nullopt";
  v11 = "nullopt";
  v6 = v4[6];
  if ((_DWORD)v6 == -1)
LABEL_8:
    sub_20E877AB8();
  v12 = &v7;
  ((void (*)(unsigned int ***))off_24CA08270[v6])(&v12);
}

void sub_20FEF8180(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;
  void *p_p;
  uint64_t v7;
  int v8;
  size_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21[2];
  unint64_t v22;
  _QWORD *v23;
  void *__p;
  void **v25;
  unsigned int *v26;
  void **v27;
  void **v28;
  _QWORD v29[3];

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v23 = (_QWORD *)v5;
  v29[0] = a3;
  v29[1] = a3 + 8;
  v29[2] = a3 + 24;
  sub_20FF1A044((uint64_t)v29);
  if (SHIBYTE(v26) >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (SHIBYTE(v26) >= 0)
    v7 = HIBYTE(v26);
  else
    v7 = (uint64_t)v25;
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)p_p, v7);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    v8 = *(_DWORD *)(v5 + 120);
    if ((v8 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v11 = *(_QWORD *)(v5 + 112);
    v12 = *(_QWORD *)(v5 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v5 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
    goto LABEL_15;
  }
  operator delete(__p);
  v8 = *(_DWORD *)(v5 + 120);
  if ((v8 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v8 & 8) == 0)
  {
    v9 = 0;
    HIBYTE(v22) = 0;
    v10 = v21;
    goto LABEL_22;
  }
  v13 = *(const void **)(v5 + 40);
  v9 = *(_QWORD *)(v5 + 56) - (_QWORD)v13;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    sub_20E860B7C();
LABEL_15:
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = operator new(v14 + 1);
    v21[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    v21[0] = v10;
    goto LABEL_21;
  }
  HIBYTE(v22) = v9;
  v10 = v21;
  if (v9)
LABEL_21:
    memmove(v10, v13, v9);
LABEL_22:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v23;
  if (v23)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v23 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v16 + 16);
    MEMORY[0x212BC6398](v16, 0x10B2C40EED050F3);
  }
  __p = a2;
  v25 = v21;
  v26 = a2;
  v27 = v21;
  v28 = v21;
  v20 = a2[6];
  if ((_DWORD)v20 == -1)
    sub_20E877AB8();
  v29[0] = &__p;
  ((void (*)(_QWORD *, unsigned int *))off_24CA08138[v20])(v29, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20FEF841C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_20FD0DE48(&a15);
    _Unwind_Resume(a1);
  }
  sub_20FD0DE48(&a15);
  _Unwind_Resume(a1);
}

__int128 *sub_20FEF8494()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55CB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55CB8))
    return &xmmword_254A55CA0;
  v2 = sub_20FEF8570();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A55CA0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A55CB0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A55CA0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55CA0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55CB8);
  return &xmmword_254A55CA0;
}

void sub_20FEF8558(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55CB8);
  _Unwind_Resume(a1);
}

std::string *sub_20FEF8570()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55CD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55CD8))
    return &stru_254A55CC0;
  sub_20FEF8814((uint64_t)__p);
  sub_20FEF8660((char *)__p, &stru_254A55CC0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A55CC0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55CD8);
  return &stru_254A55CC0;
}

void sub_20FEF8620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A55CD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A55CD8);
  _Unwind_Resume(a1);
}

void sub_20FEF8660(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FEF89F8();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FEF87C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FEF8814(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55D58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55D58))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::UpdateSyncConfiguration>]", qword_254A55D40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55D40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55D58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A55D78);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A55D78))
  {
    v5 = sub_20E8A2354(qword_254A55D40, "<", 0);
    sub_20E89FC08(qword_254A55D40, 0, v5, qword_254A55D60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55D60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55D78);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A55D98);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A55D98))
  {
    sub_21023CD84((uint64_t)qword_254A55D60, (uint64_t)&xmmword_254A55D80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55D80, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55D98);
  }
  if (byte_254A55D97 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A55D80, *((unint64_t *)&xmmword_254A55D80 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A55D80;
    *(_QWORD *)(a1 + 16) = unk_254A55D90;
  }
}

void sub_20FEF89B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55D98);
  _Unwind_Resume(a1);
}

void sub_20FEF89C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55D78);
  _Unwind_Resume(a1);
}

void sub_20FEF89E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55D58);
  _Unwind_Resume(a1);
}

__int128 *sub_20FEF89F8()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55CF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55CF8))
    return &xmmword_254A55CE0;
  v2 = (char *)sub_20FEF8AD4();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A55CE0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A55CF0 = *((_QWORD *)v2 + 2);
    xmmword_254A55CE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55CE0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55CF8);
  return &xmmword_254A55CE0;
}

void sub_20FEF8ABC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55CF8);
  _Unwind_Resume(a1);
}

void *sub_20FEF8AD4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55D18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55D18))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateSyncConfiguration]", qword_254A55D00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55D00, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55D18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55D38);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55D38))
    return &unk_254A55D20;
  sub_21023CD84((uint64_t)qword_254A55D00, (uint64_t)&unk_254A55D20);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55D20, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55D38);
  return &unk_254A55D20;
}

void sub_20FEF8BC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55D38);
  _Unwind_Resume(a1);
}

void sub_20FEF8BDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55D18);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEF8BF4(uint64_t a1)
{
  uint64_t result;
  _DWORD v2[6];
  int v3;
  uint64_t v4;
  char v5;
  _QWORD **v6;
  const char *v7;
  char *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v3 = 0;
  v4 = a1;
  sub_20E89FDB0(v2, "{");
  LOBYTE(v6) = 1;
  v7 = (const char *)v2;
  v8 = &v5;
  sub_20FEF8094(&v4, (uint64_t)&v6);
  v6 = (_QWORD **)v2;
  v7 = "}";
  v8 = (char *)v2;
  v9 = "}";
  v10 = "}";
  if (v3 == -1)
    sub_20E877AB8();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24CA08258[v3])(&v11, v2);
  if (v3 == -1)
    sub_20E877AB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA08168[v3])(&v6, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA08150[v3])(&v6, v2);
  return result;
}

void sub_20FEF8CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF8D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *sub_20FEF8D24()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A55DB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55DB8))
  {
    sub_20E8610C0(v11, "viz::PackageData");
    v2 = sub_20FEF89F8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_20FDD26DC();
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_20FE55E34();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_20E877C80(v10, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v11, (uint64_t *)v10, &stru_254A55DA0, v8, v9);
    sub_20E89FB98(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A55DA0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A55DB8);
        return &stru_254A55DA0;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_254A55DA0;
}

void sub_20FEF8F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_254A55DB8);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20FEF8FE4()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20FEF8FC0);
  }
}

uint64_t sub_20FEF900C(__int128 *a1, const char *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  __int128 *v13;
  const char *v14;
  __int128 *v15;
  const char *v16;
  const char *v17;
  __int128 **v18;

  v10 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&v8, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v8 = *a1;
    v9 = *((_QWORD *)a1 + 2);
  }
  v10 = 1;
  v13 = &v8;
  v14 = a2;
  v15 = &v8;
  v16 = a2;
  v17 = a2;
  sub_20E89FEA0((uint64_t *)&v15, (uint64_t)&v8);
  v11 = a3;
  v13 = &v8;
  v14 = "{";
  v15 = &v8;
  v16 = "{";
  v17 = "{";
  if (v10 == -1)
    goto LABEL_11;
  v18 = &v13;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v10])(&v18, &v8);
  LOBYTE(v13) = 1;
  v14 = (const char *)&v8;
  v15 = (__int128 *)&v12;
  sub_20FEF8094(&v11, (uint64_t)&v13);
  v13 = &v8;
  v14 = "}";
  v15 = &v8;
  v16 = "}";
  v17 = "}";
  if (v10 == -1)
LABEL_11:
    sub_20E877AB8();
  v18 = &v13;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v10])(&v18, &v8);
  v13 = &v8;
  v14 = a4;
  v15 = &v8;
  v16 = a4;
  v17 = a4;
  if (v10 == -1)
    sub_20E877AB8();
  v18 = &v13;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v10])(&v18, &v8);
  if (v10 == -1)
    sub_20E877AB8();
  v13 = (__int128 *)&v18;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v10])(&v13, &v8);
  if (v10 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v10])(&v13, &v8);
  return result;
}

void sub_20FEF91E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF91FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF9210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF9224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEF9238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20FEF924C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _BOOL8 v11;
  _QWORD v13[5];
  unsigned __int8 **v14;
  _QWORD v15[5];
  unsigned __int8 **v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = (unsigned __int8 **)&v23;
  if (!sub_20FF1D2E8((uint64_t)&v17, v15, v13))
    goto LABEL_28;
  if (*((_BYTE *)v16 + 24) && *((_BYTE *)v14 + 24))
  {
    v8 = *v16;
    v9 = v16[1];
    v10 = *v14;
    if (v9 - *v16 != v14[1] - *v14)
      goto LABEL_28;
    if (v8 != v9)
    {
      while (sub_20FF1C59C(v8, v10))
      {
        v8 += 96;
        v10 += 96;
        if (v8 == v9)
          goto LABEL_22;
      }
      goto LABEL_28;
    }
  }
  else if ((*((_BYTE *)v16 + 24) != 0) != (*((_BYTE *)v14 + 24) != 0))
  {
    goto LABEL_28;
  }
LABEL_22:
  v11 = (*(_BYTE *)(a1 + 248) != 0) == (*(_BYTE *)(a2 + 248) != 0);
  if (!*(_BYTE *)(a1 + 248) || !*(_BYTE *)(a2 + 248))
    goto LABEL_29;
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
  {
LABEL_28:
    v11 = 0;
    goto LABEL_29;
  }
  if (*(_BYTE *)(a1 + 224) && *(_BYTE *)(a2 + 224))
  {
    if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a2 + 216))
      goto LABEL_28;
  }
  else if ((*(_BYTE *)(a1 + 224) != 0) != (*(_BYTE *)(a2 + 224) != 0))
  {
    goto LABEL_28;
  }
  v11 = (*(_BYTE *)(a1 + 240) != 0) == (*(_BYTE *)(a2 + 240) != 0);
  if (*(_BYTE *)(a1 + 240) && *(_BYTE *)(a2 + 240))
    v11 = *(_QWORD *)(a1 + 232) == *(_QWORD *)(a2 + 232);
LABEL_29:
  sub_20EB0580C((uint64_t)v18);
  sub_20EB0580C((uint64_t)v24);
  return v11;
}

void sub_20FEF94C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEF94E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEF94FC(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FEF9874(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FEFA168(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FEFA5A4(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FEFAE98(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FEFB1F4(&v9, (uint64_t)a1);
          else
            sub_20FEF9660(&v8, a1);
        }
      }
    }
  }
}

uint64_t sub_20FEF9660(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    LODWORD(v13) = 4;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v9 = v13;
    if (v8 < 1)
    {
      sub_20FE13A54((uint64_t)a2, v4, v13);
      goto LABEL_17;
    }
    if (v8 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE13A54((uint64_t)a2, v4, v9);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    LODWORD(v13) = 5;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v11 = v13;
    if (v10 < 1)
    {
      sub_20FE133CC((uint64_t)a2, v4, v13);
      goto LABEL_17;
    }
    if (v10 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE133CC((uint64_t)a2, v4, v11);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    LODWORD(v13) = 6;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v7 = v13;
    if (v6 < 1)
    {
      sub_20FDEB904((uint64_t)a2, v4, v13);
      goto LABEL_17;
    }
    if (v6 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FDEB904((uint64_t)a2, v4, v7);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
LABEL_17:
  v13 = *((_QWORD *)a2 + 1);
  return sub_20FEFB4F8((int *)&v13, a2, (__int128 *)(v3 + 200));
}

void sub_20FEF9874(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20FEF9B14((uint64_t)&v16, a2, (__int128 *)(v3 + 200));
}

void sub_20FEF9B14(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_2101FAEA0(a2);
  *(_QWORD *)&v15 = "version";
  *((_QWORD *)&v15 + 1) = 7;
  LODWORD(v16[0]) = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, v16);
  v6 = a3[1];
  v15 = *a3;
  v16[0] = v6;
  v16[1] = a3[2];
  v17 = *((_QWORD *)a3 + 6);
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a2 + 88),
        *(_QWORD *)(a2 + 72) = "initial_sync_command",
        *(_QWORD *)(a2 + 80) = 20,
        v7))
  {
    if ((_BYTE)v17)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    if ((_BYTE)v17)
    {
LABEL_7:
      v13 = *(_QWORD *)(a2 + 8);
      sub_20FEF9CC8(&v13, a2, (__int128 *)((char *)&v15 + 8));
      v8 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        return;
      goto LABEL_8;
    }
  }
  LOBYTE(v13) = 0;
  v14 = 0;
  v9 = (unsigned __int8 *)sub_2101FAC64(a2);
  v10 = *v9;
  *v9 = 0;
  LOBYTE(v13) = v10;
  v11 = (void **)*((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = v14;
  v14 = v11;
  sub_20EB07D94(&v14, v10);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 56) = v12 - 8;
  if (!*(_BYTE *)(a2 + 88))
    return;
LABEL_8:
  *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEF9CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FEF9CC8(_DWORD *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  sub_2101FAEA0(a2);
  *(_QWORD *)&v10 = "version";
  *((_QWORD *)&v10 + 1) = 7;
  LODWORD(v11) = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v11);
  if (*a1 == 2)
  {
    *(_QWORD *)&v10 = "min_version";
    *((_QWORD *)&v10 + 1) = 11;
    LODWORD(v11) = 1;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v7 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v7)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v11);
  }
  v8 = a3[1];
  v10 = *a3;
  v11 = v8;
  v12 = *((_QWORD *)a3 + 4);
  sub_20FEF9DF8(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEF9DF8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _QWORD *v8;
  BOOL v9;
  BOOL v10;
  unsigned __int8 *v11;
  int v12;
  void **v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  void **v18;
  int v19;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  unsigned __int8 *v24;
  void **v25;
  char v26;
  void **v27;

  v4 = *(unsigned __int8 **)(a1 + 40);
  if (*v4 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "sync_command_id";
    v5 = a1 + 72;
    v7 = (_BYTE *)(a1 + 88);
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 15;
    v8 = (_QWORD *)(a1 + 80);
    if (!v6)
      *v7 = 1;
    goto LABEL_13;
  }
  v8 = (_QWORD *)(a1 + 80);
  v5 = a1 + 72;
  v7 = (_BYTE *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v9 = *(_QWORD *)(a1 + 80) == 7;
  else
    v9 = 0;
  if (!v9
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v10 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v10 = 0),
        !v10))
  {
LABEL_13:
    v27 = *(void ***)a2;
    v11 = (unsigned __int8 *)sub_2101FAC64(a1);
    v12 = *v11;
    *v11 = 6;
    v13 = (void **)*((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v27;
    v27 = v13;
    sub_20EB07D94(&v27, v12);
    v4 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v4 > 1u || (v14 = *v7, *(_QWORD *)v5 = "proceed_n", *v8 = 9, v14))
  {
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_17;
LABEL_25:
    v26 = 0;
    v27 = 0;
    v16 = (unsigned __int8 *)sub_2101FAC64(a1);
    goto LABEL_26;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_25;
LABEL_17:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v15 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v15 = 0),
        !v15))
  {
    v26 = 6;
    v27 = *(void ***)(a2 + 8);
    v16 = (unsigned __int8 *)sub_2101FAC64(a1);
LABEL_26:
    v17 = *v16;
    *v16 = v26;
    v18 = (void **)*((_QWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = v27;
    v27 = v18;
    sub_20EB07D94(&v27, v17);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v19 = *v7, *(_QWORD *)v5 = "proceed_until", *v8 = 13, v19))
  {
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_30;
LABEL_38:
    v27 = 0;
    v24 = (unsigned __int8 *)sub_2101FAC64(a1);
    v22 = *v24;
    *v24 = 0;
    v25 = (void **)*((_QWORD *)v24 + 1);
    *((_QWORD *)v24 + 1) = v27;
    v27 = v25;
    goto LABEL_39;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_38;
LABEL_30:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v20 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v20 = 0),
        !v20))
  {
    v27 = *(void ***)(a2 + 24);
    v21 = (unsigned __int8 *)sub_2101FAC64(a1);
    v22 = *v21;
    *v21 = 6;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v27;
    v27 = v23;
LABEL_39:
    sub_20EB07D94(&v27, v22);
  }
}

void sub_20FEFA0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FEFA108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FEFA120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FEFA138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FEFA150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FEFA168(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE1036C(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE10250(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FDE75BC(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  sub_20FEFA3E8(a2, v3 + 200);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FEFA3E8(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v3;
  v13[2] = *(_OWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 48);
  if ((_BYTE)v14)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v4 + 40))
    {
      v12 = (uint64_t *)(v4 + 16);
      sub_20E9F3164(&v12, 1);
    }
    else
    {
      LOBYTE(v12) = 1;
      std::ostream::write();
    }
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v12 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v12, 1u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v12, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a1 + 24));
    sub_20FED762C(a1, (uint64_t)v13 + 8);
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 88) - 8);
    sub_20E9EE4D0((uint64_t *)(v7 + 48), *(_QWORD *)(v7 + 16) - v8 - 9);
    v9 = *(_QWORD *)(v7 + 48);
    if (v9)
      memmove((void *)(*(_QWORD *)(v7 + 24) + v8), *(const void **)(v7 + 56), v9);
    *(_QWORD *)(v7 + 48) = 0;
    v10 = *(_QWORD *)(v7 + 80);
    v11 = *(_QWORD *)(v7 + 88) - 8;
    *(_QWORD *)(v7 + 88) = v11;
    if (v10 == v11)
    {
      std::ostream::write();
      if (*(_BYTE *)(v7 + 40))
      {
        free(*(void **)(v7 + 24));
        *(_BYTE *)(v7 + 40) = 0;
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
    {
      v12 = (uint64_t *)(v5 + 16);
      sub_20E9F3164(&v12, 0);
    }
    else
    {
      std::ostream::write();
    }
  }
}

void sub_20FEFA5A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20FEFA844((uint64_t)&v16, a2, (__int128 *)(v3 + 200));
}

void sub_20FEFA844(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_2101FA8A4(a2);
  *(_QWORD *)&v15 = "version";
  *((_QWORD *)&v15 + 1) = 7;
  LODWORD(v16[0]) = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, v16);
  v6 = a3[1];
  v15 = *a3;
  v16[0] = v6;
  v16[1] = a3[2];
  v17 = *((_QWORD *)a3 + 6);
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a2 + 88),
        *(_QWORD *)(a2 + 72) = "initial_sync_command",
        *(_QWORD *)(a2 + 80) = 20,
        v7))
  {
    if ((_BYTE)v17)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    if ((_BYTE)v17)
    {
LABEL_7:
      v13 = *(_QWORD *)(a2 + 8);
      sub_20FEFA9F8(&v13, a2, (__int128 *)((char *)&v15 + 8));
      v8 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        return;
      goto LABEL_8;
    }
  }
  LOBYTE(v13) = 0;
  v14 = 0;
  v9 = (unsigned __int8 *)sub_2101FA67C(a2);
  v10 = *v9;
  *v9 = 0;
  LOBYTE(v13) = v10;
  v11 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = v14;
  v14 = v11;
  sub_20EB911C0(&v14, v10);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 56) = v12 - 8;
  if (!*(_BYTE *)(a2 + 88))
    return;
LABEL_8:
  *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEFA9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FEFA9F8(_DWORD *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  sub_2101FA8A4(a2);
  *(_QWORD *)&v10 = "version";
  *((_QWORD *)&v10 + 1) = 7;
  LODWORD(v11) = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v11);
  if (*a1 == 2)
  {
    *(_QWORD *)&v10 = "min_version";
    *((_QWORD *)&v10 + 1) = 11;
    LODWORD(v11) = 1;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v7 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v7)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v11);
  }
  v8 = a3[1];
  v10 = *a3;
  v11 = v8;
  v12 = *((_QWORD *)a3 + 4);
  sub_20FEFAB28(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEFAB28(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _QWORD *v8;
  BOOL v9;
  BOOL v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = *(unsigned __int8 **)(a1 + 40);
  if (*v4 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "sync_command_id";
    v5 = a1 + 72;
    v7 = (_BYTE *)(a1 + 88);
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 15;
    v8 = (_QWORD *)(a1 + 80);
    if (!v6)
      *v7 = 1;
    goto LABEL_13;
  }
  v8 = (_QWORD *)(a1 + 80);
  v5 = a1 + 72;
  v7 = (_BYTE *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v9 = *(_QWORD *)(a1 + 80) == 7;
  else
    v9 = 0;
  if (!v9
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v10 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v10 = 0),
        !v10))
  {
LABEL_13:
    v27 = *(_QWORD *)a2;
    v11 = (unsigned __int8 *)sub_2101FA67C(a1);
    v12 = *v11;
    *v11 = 6;
    v13 = *((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v27;
    v27 = v13;
    sub_20EB911C0(&v27, v12);
    v4 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v4 > 1u || (v14 = *v7, *(_QWORD *)v5 = "proceed_n", *v8 = 9, v14))
  {
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_17;
LABEL_25:
    v26 = 0;
    v27 = 0;
    v16 = (unsigned __int8 *)sub_2101FA67C(a1);
    goto LABEL_26;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_25;
LABEL_17:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v15 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v15 = 0),
        !v15))
  {
    v26 = 6;
    v27 = *(_QWORD *)(a2 + 8);
    v16 = (unsigned __int8 *)sub_2101FA67C(a1);
LABEL_26:
    v17 = *v16;
    *v16 = v26;
    v18 = *((_QWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = v27;
    v27 = v18;
    sub_20EB911C0(&v27, v17);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v19 = *v7, *(_QWORD *)v5 = "proceed_until", *v8 = 13, v19))
  {
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_30;
LABEL_38:
    v27 = 0;
    v24 = (unsigned __int8 *)sub_2101FA67C(a1);
    v22 = *v24;
    *v24 = 0;
    v25 = *((_QWORD *)v24 + 1);
    *((_QWORD *)v24 + 1) = v27;
    v27 = v25;
    goto LABEL_39;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_38;
LABEL_30:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v20 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v20 = 0),
        !v20))
  {
    v27 = *(_QWORD *)(a2 + 24);
    v21 = (unsigned __int8 *)sub_2101FA67C(a1);
    v22 = *v21;
    *v21 = 6;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v27;
    v27 = v23;
LABEL_39:
    sub_20EB911C0(&v27, v22);
  }
}

void sub_20FEFAE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FEFAE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FEFAE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FEFAE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FEFAE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEFAE98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v16 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v16, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v14 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v14, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v17 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v17, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v15, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v18 = v7;
  sub_20E86A980(v11, (uint64_t)&v18, 1);
  ++*(_QWORD *)(a2 + 40);
  return sub_20FEFB034((uint64_t)&v13, a2, v3 + 200);
}

_QWORD *sub_20FEFB034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  _QWORD *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *result;
  unsigned __int8 v16;
  _OWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 40))
  {
    v5 = *(_QWORD **)(a2 + 24);
    LOBYTE(v17[0]) = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v5, (uint64_t)v17, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a3 + 16);
  v17[0] = *(_OWORD *)a3;
  v17[1] = v6;
  v17[2] = *(_OWORD *)(a3 + 32);
  v18 = *(_QWORD *)(a3 + 48);
  if (!(_BYTE)v18)
  {
    v16 = 0;
    sub_20E9E6F58(a2, &v16);
    v12 = *(_BYTE *)(a2 + 34);
    if (!*(_QWORD *)(a2 + 40))
      goto LABEL_12;
LABEL_11:
    v13 = *(_QWORD **)(a2 + 24);
    LOBYTE(v17[0]) = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)v17, 1);
    goto LABEL_12;
  }
  v16 = 1;
  sub_20E9E6F58(a2, &v16);
  if (*(_QWORD *)(a2 + 40))
  {
    v7 = *(_QWORD **)(a2 + 24);
    v16 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v7, (uint64_t)&v16, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FED8AD8(a2, (uint64_t)v17 + 8);
  v8 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v9 = *(_QWORD **)(a2 + 24);
    v16 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v9, (uint64_t)&v16, 1);
  }
  v10 = *(_QWORD **)(a2 + 24);
  v16 = v8;
  sub_20E86A980(v10, (uint64_t)&v16, 1);
  v11 = *(_QWORD *)(a2 + 40) + 1;
  *(_QWORD *)(a2 + 40) = v11;
  v12 = *(_BYTE *)(a2 + 34);
  if (v11)
    goto LABEL_11;
LABEL_12:
  v14 = *(_QWORD **)(a2 + 24);
  LOBYTE(v17[0]) = v12;
  result = sub_20E86A980(v14, (uint64_t)v17, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

char *sub_20FEFB1F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  char *result;
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    LODWORD(v12[0]) = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)v12, (char *)v12 + 4, 4);
    v7 = v12[0];
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    LODWORD(v12[0]) = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)v12, (char *)v12 + 4, 4);
    v8 = v12[0];
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    LODWORD(v12[0]) = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)v12, (char *)v12 + 4, 4);
    v6 = v12[0];
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  LODWORD(v12[0]) = 1;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)v12, (char *)v12 + 4, 4);
  sub_2100B6A04((_QWORD *)a2);
  v10 = *(_OWORD *)(v3 + 216);
  v12[0] = *(_OWORD *)(v3 + 200);
  v12[1] = v10;
  v12[2] = *(_OWORD *)(v3 + 232);
  v13 = *(_QWORD *)(v3 + 248);
  result = sub_20FEFB400(a2, (char *)v12 + 8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24) + 10) = *(_QWORD *)(a2 + 32)
                                                                                     - (*(_QWORD *)(*(_QWORD *)(a2 + 56)
                                                                                                  - 8)
                                                                                      + *(_QWORD *)(a2 + 24))
                                                                                     - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  return result;
}

char *sub_20FEFB400(uint64_t a1, char *a2)
{
  uint64_t v3;
  char *result;
  uint64_t v6;
  char v7;
  char __src;
  int v9;
  uint64_t v10;

  v3 = a1 + 24;
  if (a2[40])
  {
    __src = 1;
    sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v9, 1);
    v9 = 1;
    sub_2100B8FD4(v3, *(char **)(a1 + 32), (char *)&v9, (char *)&v10, 4);
    sub_2100B6A04((_QWORD *)a1);
    result = sub_20FED90CC(a1, a2);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v6 + 10) = *(_QWORD *)(a1 + 32) - v6 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  else
  {
    v7 = 0;
    return sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), &v7, &__src, 1);
  }
  return result;
}

uint64_t sub_20FEFB4F8(int *a1, _QWORD *a2, __int128 *a3)
{
  int v6;
  __int128 v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  LODWORD(v11) = 1;
  (*(void (**)(_QWORD *, __int128 *))(*a2 + 104))(a2, &v11);
  if (*a1 < 1)
  {
    v9 = a3[1];
    v11 = *a3;
    v12 = v9;
    v13 = a3[2];
    v14 = *((_QWORD *)a3 + 6);
    if ((_BYTE)v14)
    {
      LOBYTE(v10) = 1;
      (*(void (**)(_QWORD *, uint64_t *))(*a2 + 80))(a2, &v10);
      v10 = a2[1];
      return sub_20FED9518((int *)&v10, (uint64_t)a2, (uint64_t)&v11 + 8);
    }
    else
    {
      LOBYTE(v10) = 0;
      return (*(uint64_t (**)(_QWORD *, uint64_t *))(*a2 + 80))(a2, &v10);
    }
  }
  else
  {
    if (*a1 == 2 && (LODWORD(v11) = 1, (*(void (**)(_QWORD *, __int128 *))(*a2 + 104))(a2, &v11), *a1 < 1))
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(_QWORD *))(*a2 + 16))(a2);
      v6 = 1;
    }
    v7 = a3[1];
    v11 = *a3;
    v12 = v7;
    v13 = a3[2];
    v14 = *((_QWORD *)a3 + 6);
    if ((_BYTE)v14)
    {
      LOBYTE(v10) = 1;
      (*(void (**)(_QWORD *, uint64_t *))(*a2 + 80))(a2, &v10);
      v10 = a2[1];
      result = sub_20FED9518((int *)&v10, (uint64_t)a2, (uint64_t)&v11 + 8);
    }
    else
    {
      LOBYTE(v10) = 0;
      result = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a2 + 80))(a2, &v10);
    }
    if (v6)
      return (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  }
  return result;
}

void sub_20FEFB6D0(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FEFBD9C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FEFC514(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FEFCAEC(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FEFD264(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FEFD9C8(&v9, a1);
          else
            sub_20FEFB834(&v8, a1);
        }
      }
    }
  }
}

uint64_t sub_20FEFB834(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t result;
  char v29;
  uint64_t v30[27];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v30);
    sub_20FDE470C((uint64_t)&v31, v30);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v29, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v30);
  sub_20FDE470C((uint64_t)&v31, v30);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v29, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20EB0580C((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *a2;
  v30[0] = a2[1];
  v25 = v30[0];
  LODWORD(v31) = 6;
  (*(void (**)(_QWORD *, uint64_t *))(v24 + 104))(a2, &v31);
  if (v25 < 1)
  {
    if (v31 < 3)
      sub_20FDF69C0((uint64_t)&v31, (uint64_t)a2, v4, v31);
    else
      sub_20FDF6C34((uint64_t)a2, v4, v31);
  }
  else
  {
    sub_20FDF63C8((int *)v30, (uint64_t)a2, v4, v31);
  }
  v26 = *a2;
  v31 = a2[1];
  v27 = v31;
  LODWORD(v30[0]) = 1;
  (*(void (**)(_QWORD *, uint64_t *))(v26 + 104))(a2, v30);
  if (v27 >= 1)
    return sub_20FEFDFC4((int *)&v31, a2, v3 + 200);
  v29 = 0;
  result = (*(uint64_t (**)(_QWORD *, char *))(*a2 + 80))(a2, &v29);
  if (v29)
  {
    if (!*(_BYTE *)(v3 + 248))
    {
      *(_QWORD *)(v3 + 208) = 0;
      *(_BYTE *)(v3 + 216) = 0;
      *(_BYTE *)(v3 + 224) = 0;
      *(_BYTE *)(v3 + 232) = 0;
      *(_BYTE *)(v3 + 240) = 0;
      *(_BYTE *)(v3 + 248) = 1;
    }
    v30[0] = a2[1];
    return sub_20FEDD9F8((int *)v30, (uint64_t)a2, v3 + 208);
  }
  else if (*(_BYTE *)(v3 + 248))
  {
    *(_BYTE *)(v3 + 248) = 0;
  }
  return result;
}

void sub_20FEFBD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEFBD9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FEFC24C((uint64_t)v27, a2, v3 + 200);
}

void sub_20FEFC204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEFC24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  sub_2101FF7D8(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  *(_QWORD *)&v12 = 0;
  sub_2100DB048(v6, &v12);
  if (DWORD1(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "initial_sync_command";
  *(_QWORD *)(a2 + 96) = 20;
  if (v7)
  {
    if (*(_BYTE *)sub_2101FFA90((uint64_t *)a2))
    {
LABEL_6:
      *(_QWORD *)&v12 = 0;
      BYTE8(v12) = 0;
      LOBYTE(v13) = 0;
      BYTE8(v13) = 0;
      LOBYTE(v14) = 0;
      v15 = *(_QWORD *)(a2 + 8);
      sub_20FEFC3B0(&v15, a2, (uint64_t)&v12);
      v8 = v13;
      *(_OWORD *)(a3 + 8) = v12;
      *(_OWORD *)(a3 + 24) = v8;
      *(_QWORD *)(a3 + 40) = v14;
      *(_BYTE *)(a3 + 48) = 1;
      goto LABEL_10;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_2101FFA90((uint64_t *)a2))
      goto LABEL_6;
  }
  ++*(_QWORD *)(a2 + 112);
  if (*(_BYTE *)(a3 + 48))
    *(_BYTE *)(a3 + 48) = 0;
LABEL_10:
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
}

void sub_20FEFC3B0(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  int v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  __int128 *v14;
  unint64_t v15;

  sub_2101FF7D8(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_2100DB048(v7, &v15);
  if (HIDWORD(v15))
    goto LABEL_10;
  if (*a1 != 2)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "min_version";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_2100DB048(v9, &v15);
  v10 = v15;
  if (HIDWORD(v15))
  {
LABEL_10:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v15 >= 2)
  {
    v14 = sub_20FEDDCB8();
    sub_20E9F5C70((std::string *)v14, v10, 1u);
  }
LABEL_9:
  sub_20FEDA83C(a2, a3);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
}

uint64_t sub_20FEFC514(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v28);
    sub_20FDE470C((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v28);
  sub_20FDE470C((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20EB0580C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v28, a2, v4);
  LODWORD(v28[0]) = 1;
  sub_20E9EDADC(a2[6], v28);
  sub_20E90A71C(a2 + 2);
  sub_20FEFC9EC(a2, v3 + 208);
  v24 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2);
  v26 = *(_QWORD *)(v24 - 16) - result + *(_QWORD *)(v24 - 8);
  if (v26)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v26);
  a2[4] -= 16;
  return result;
}

void sub_20FEFC9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEFC9EC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;

  v6 = 0;
  sub_20E9ED7B4(a1[6], &v6);
  if (v6)
  {
    if (!*(_BYTE *)(a2 + 40))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    v7 = 1;
    sub_20E9EDADC(a1[6], &v7);
    sub_20E90A71C(a1 + 2);
    sub_20FEDB238((uint64_t)a1, a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
  }
  else if (*(_BYTE *)(a2 + 40))
  {
    *(_BYTE *)(a2 + 40) = 0;
  }
}

void sub_20FEFCAEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FEFCF9C((uint64_t)v27, a2, v3 + 200);
}

void sub_20FEFCF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEFCF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  sub_2101FF2E8(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  *(_QWORD *)&v12 = 0;
  sub_2100DA8B0(v6, &v12);
  if (DWORD1(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "initial_sync_command";
  *(_QWORD *)(a2 + 96) = 20;
  if (v7)
  {
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a2))
    {
LABEL_6:
      *(_QWORD *)&v12 = 0;
      BYTE8(v12) = 0;
      LOBYTE(v13) = 0;
      BYTE8(v13) = 0;
      LOBYTE(v14) = 0;
      v15 = *(_QWORD *)(a2 + 8);
      sub_20FEFD100(&v15, a2, (uint64_t)&v12);
      v8 = v13;
      *(_OWORD *)(a3 + 8) = v12;
      *(_OWORD *)(a3 + 24) = v8;
      *(_QWORD *)(a3 + 40) = v14;
      *(_BYTE *)(a3 + 48) = 1;
      goto LABEL_10;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a2))
      goto LABEL_6;
  }
  ++*(_QWORD *)(a2 + 112);
  if (*(_BYTE *)(a3 + 48))
    *(_BYTE *)(a3 + 48) = 0;
LABEL_10:
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
}

void sub_20FEFD100(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  int v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  __int128 *v14;
  unint64_t v15;

  sub_2101FF2E8(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_2100DA8B0(v7, &v15);
  if (HIDWORD(v15))
    goto LABEL_10;
  if (*a1 != 2)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "min_version";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_2100DA8B0(v9, &v15);
  v10 = v15;
  if (HIDWORD(v15))
  {
LABEL_10:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v15 >= 2)
  {
    v14 = sub_20FEDDCB8();
    sub_20E9F5C70((std::string *)v14, v10, 1u);
  }
LABEL_9:
  sub_20FEDBC38(a2, a3);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
}

void sub_20FEFD264(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  void *__p[2];
  char v30;
  _BYTE v31[8];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)__p);
    sub_20FDE470C((uint64_t)v31, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)__p);
  sub_20FDE470C((uint64_t)v31, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20EB0580C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_20E9E840C(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_20FDF3288((uint64_t)__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          v27 = 0;
          if (v30 < 0)
            goto LABEL_79;
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      v27 = 1;
      if (v30 < 0)
LABEL_79:
        operator delete(__p[0]);
LABEL_65:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  LODWORD(__p[0]) = 1;
  sub_20E9E840C(a2, __p);
  sub_20FEFD7D8((uint64_t)__p, a2, v3 + 200);
}

void sub_20FEFD790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEFD7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  void *__p;
  uint64_t v11;
  char v12;

  v9 = 0;
  sub_20E9E7AC8(a2, &v9);
  if (v9)
  {
    if (!*(_BYTE *)(a3 + 48))
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 48) = 1;
    }
    LODWORD(__p) = 1;
    sub_20E9E840C(a2, &__p);
    sub_20FEDC7A0(a2, a3 + 8);
    if (!*(_BYTE *)(a2 + 131))
    {
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
          break;
        sub_20E9E9FEC(a2, (uint64_t)&__p);
        if (v12 < 0)
        {
          if (v11 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
          {
LABEL_17:
            v6 = 0;
            if (v12 < 0)
              goto LABEL_20;
            goto LABEL_6;
          }
        }
        else if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
        {
          goto LABEL_17;
        }
        v6 = 1;
        if (v12 < 0)
LABEL_20:
          operator delete(__p);
LABEL_6:
        if (*(_BYTE *)(a2 + 131))
          v5 = 0;
        else
          v5 = v6;
      }
      while ((v5 & 1) != 0);
    }
  }
  else if (*(_BYTE *)(a3 + 48))
  {
    *(_BYTE *)(a3 + 48) = 0;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v12 < 0)
      {
        if (v11 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_36:
          v8 = 0;
          if (v12 < 0)
            goto LABEL_39;
          goto LABEL_25;
        }
      }
      else if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_36;
      }
      v8 = 1;
      if (v12 < 0)
LABEL_39:
        operator delete(__p);
LABEL_25:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

_QWORD *sub_20FEFD9C8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v26);
    sub_20FDE470C((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v26);
  sub_20FDE470C((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20EB0580C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v26, a2, v4);
  return sub_20FEFDE3C((uint64_t)v26, a2, v3 + 200);
}

void sub_20FEFDDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FEFDE3C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_2100B6EE0(a2);
  result = sub_20FEFDEF4(a2, a3 + 8);
  v10 = a2[12];
  v11 = a2[9];
  a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
  return result;
}

void sub_20FEFDEE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEFDEF4(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  int v3;
  std::logic_error *exception;
  char v5;

  v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v3 = *(unsigned __int8 *)(result[3] + v2);
  result[6] = v2 + 1;
  if (v3)
  {
    if (!*(_BYTE *)(a2 + 40))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    return sub_20FEDD094((uint64_t)&v5, result, (_QWORD *)a2);
  }
  else if (*(_BYTE *)(a2 + 40))
  {
    *(_BYTE *)(a2 + 40) = 0;
  }
  return result;
}

void sub_20FEFDFB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEFDFC4(int *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  char v11;
  uint64_t v12;

  v5 = *a1;
  if (*a1 == 2)
  {
    v10 = 1;
    (*(void (**)(_QWORD *, unsigned int *))(*a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      v8 = v10;
      v9 = sub_20FEFE0E0();
      sub_20E9F5C70((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(_QWORD *))(*a2 + 16))(a2);
  v11 = 0;
  result = (*(uint64_t (**)(_QWORD *, char *))(*a2 + 80))(a2, &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a3 + 48))
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 48) = 1;
    }
    v12 = a2[1];
    result = sub_20FEDD9F8((int *)&v12, (uint64_t)a2, a3 + 8);
  }
  else if (*(_BYTE *)(a3 + 48))
  {
    *(_BYTE *)(a3 + 48) = 0;
  }
  if (v5 >= 1)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  return result;
}

__int128 *sub_20FEFE0E0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55DF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55DF8))
    return &xmmword_254A55DE0;
  v2 = (char *)sub_20FEFE1BC();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A55DE0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A55DF0 = *((_QWORD *)v2 + 2);
    xmmword_254A55DE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55DE0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55DF8);
  return &xmmword_254A55DE0;
}

void sub_20FEFE1A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55DF8);
  _Unwind_Resume(a1);
}

void *sub_20FEFE1BC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55E18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55E18))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateSyncConfigurationSample]", qword_254A55E00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55E00, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55E18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55E38);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55E38))
    return &unk_254A55E20;
  sub_21023CD84((uint64_t)qword_254A55E00, (uint64_t)&unk_254A55E20);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55E20, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55E38);
  return &unk_254A55E20;
}

void sub_20FEFE2AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55E38);
  _Unwind_Resume(a1);
}

void sub_20FEFE2C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55E18);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEFE2DC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void **v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v16 = (void **)&v19 + 1;
    do
    {
      if (*((char *)v16 - 1) < 0)
        operator delete(*(v16 - 3));
      ++v1;
      strcpy((char *)v16 - 24, "cv3d.viz");
      *((_BYTE *)v16 - 1) = 8;
      *(_DWORD *)v16 = v1;
      v16 += 4;
    }
    while (v2 != v1);
    v15 = DWORD2(v19);
    v14 = DWORD2(v21);
    v13 = DWORD2(v23);
    v12 = DWORD2(v25);
    v11 = DWORD2(v27);
    v10 = DWORD2(v29);
    v9 = DWORD2(v31);
    v8 = DWORD2(v33);
    v7 = DWORD2(v35);
    v6 = DWORD2(v37);
    v5 = DWORD2(v39);
    v4 = DWORD2(v41);
    v3 = DWORD2(v43);
  }
  xmmword_254A6DA80 = v18;
  qword_254A6DA90 = v19;
  v18 = 0uLL;
  dword_254A6DA98 = v15;
  xmmword_254A6DAA0 = v20;
  qword_254A6DAB0 = v21;
  *(_QWORD *)&v19 = 0;
  v20 = 0uLL;
  *(_QWORD *)&v21 = 0;
  dword_254A6DAB8 = v14;
  qword_254A6DAD0 = v23;
  xmmword_254A6DAC0 = v22;
  v22 = 0uLL;
  dword_254A6DAD8 = v13;
  qword_254A6DAF0 = v25;
  xmmword_254A6DAE0 = v24;
  *(_QWORD *)&v23 = 0;
  v24 = 0uLL;
  *(_QWORD *)&v25 = 0;
  dword_254A6DAF8 = v12;
  qword_254A6DB10 = v27;
  xmmword_254A6DB00 = v26;
  v26 = 0uLL;
  dword_254A6DB18 = v11;
  qword_254A6DB30 = v29;
  xmmword_254A6DB20 = v28;
  *(_QWORD *)&v27 = 0;
  v28 = 0uLL;
  *(_QWORD *)&v29 = 0;
  dword_254A6DB38 = v10;
  qword_254A6DB50 = v31;
  xmmword_254A6DB40 = v30;
  v30 = 0uLL;
  dword_254A6DB58 = v9;
  qword_254A6DB70 = v33;
  xmmword_254A6DB60 = v32;
  *(_QWORD *)&v31 = 0;
  v32 = 0uLL;
  *(_QWORD *)&v33 = 0;
  dword_254A6DB78 = v8;
  qword_254A6DB90 = v35;
  xmmword_254A6DB80 = v34;
  v34 = 0uLL;
  dword_254A6DB98 = v7;
  qword_254A6DBB0 = v37;
  xmmword_254A6DBA0 = v36;
  *(_QWORD *)&v35 = 0;
  v36 = 0uLL;
  *(_QWORD *)&v37 = 0;
  dword_254A6DBB8 = v6;
  qword_254A6DBD0 = v39;
  xmmword_254A6DBC0 = v38;
  v38 = 0uLL;
  dword_254A6DBD8 = v5;
  qword_254A6DBF0 = v41;
  xmmword_254A6DBE0 = v40;
  *(_QWORD *)&v39 = 0;
  v40 = 0uLL;
  *(_QWORD *)&v41 = 0;
  dword_254A6DBF8 = v4;
  qword_254A6DC10 = v43;
  xmmword_254A6DC00 = v42;
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0;
  dword_254A6DC18 = v3;
  return sub_20FEFE58C((uint64_t)&v18);
}

uint64_t sub_20FEFE58C(uint64_t a1)
{
  if (*(char *)(a1 + 407) < 0)
  {
    operator delete(*(void **)(a1 + 384));
    if ((*(char *)(a1 + 375) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 343) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(char *)(a1 + 375) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 352));
  if ((*(char *)(a1 + 343) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 311) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 320));
  if ((*(char *)(a1 + 311) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 279) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 288));
  if ((*(char *)(a1 + 279) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 247) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 256));
  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 215) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 224));
  if ((*(char *)(a1 + 215) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 183) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 192));
  if ((*(char *)(a1 + 183) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(a1 + 151) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(*(void **)(a1 + 160));
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(*(void **)(a1 + 128));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_26:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_27;
  }
LABEL_25:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_26;
LABEL_13:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_27:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FEFE6EC(uint64_t a1, _QWORD *a2, _QWORD *a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v22;

  v10 = (_QWORD *)sub_20E8C0020(a1, 1);
  *v10 = &off_24CA0B078;
  v11 = a2[1];
  v10[2] = *a2;
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a3[1];
  *(_QWORD *)(a1 + 32) = *a3;
  *(_QWORD *)(a1 + 40) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (*((_BYTE *)a4 + 24))
  {
    if (*((char *)a4 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 48), *(void **)a4, *((_QWORD *)a4 + 1));
    }
    else
    {
      v17 = *a4;
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
      *(_OWORD *)(a1 + 48) = v17;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 71) = 4;
    strcpy((char *)(a1 + 48), "logs");
  }
  if (*a5)
  {
    v18 = a5[1];
    *(_QWORD *)(a1 + 72) = *a5;
    *(_QWORD *)(a1 + 80) = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    return a1;
  }
  else
  {
    v22 = operator new(0x20uLL);
    v22[1] = 0;
    v22[2] = 0;
    *v22 = &off_24CA0B0C0;
    v22[3] = &off_24CA1F808;
    *(_QWORD *)(a1 + 72) = v22 + 3;
    *(_QWORD *)(a1 + 80) = v22;
    return a1;
  }
}

void sub_20FEFE844(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (!v4)
  {
    sub_20E86665C(v2);
    nullsub_1(v1);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v4);
  sub_20E86665C(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEFE8AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_24CA0B078;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_14:
    operator delete(*(void **)(a1 + 48));
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      goto LABEL_8;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_14;
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
LABEL_7:
    std::__shared_weak_count::__release_weak(v5);
LABEL_8:
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v6)
    return nullsub_1(a1);
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return nullsub_1(a1);
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return nullsub_1(a1);
}

void sub_20FEFE98C(uint64_t a1)
{
  sub_20FEFE8AC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FEFE9B0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  __int128 *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  size_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  size_t v26;
  __int128 *v27;
  uint64_t v28;
  int v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const void *v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  _OWORD *v47;
  __int128 v48;
  std::__shared_count v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  __int128 __dst;
  unint64_t v69;
  int v70;
  __int128 v71;
  unint64_t v72;
  int v73;
  __int128 v74;
  unint64_t v75;
  __int128 v76;
  unint64_t v77;
  uint64_t (**v78)();
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  int v85;
  __int128 v86;
  unint64_t v87;
  int v88;
  __int128 v89;
  unint64_t v90;
  __int128 __p;
  unint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t (**v95)();
  uint64_t v96;
  std::__shared_weak_count *v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v82 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v81 = v6;
      if (!v6)
      {
        v9 = v5;
LABEL_102:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v67 = __ldaxr(p_shared_owners);
        while (__stlxr(v67 - 1, p_shared_owners));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*(char *)(a1 + 71) < 0)
      {
        v7 = *(_QWORD *)(a1 + 48);
        v8 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        v7 = a1 + 48;
        v8 = *(unsigned __int8 *)(a1 + 71);
      }
      v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), v7, v8);
      v11 = *(__int128 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
      v12 = *(const char **)a2;
      v13 = strlen(*(const char **)a2);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v14 = v13;
      if (v13 >= 0x17)
      {
        v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v16 = v13 | 7;
        v17 = v16 + 1;
        p_dst = (__int128 *)operator new(v16 + 1);
        *((_QWORD *)&__dst + 1) = v14;
        v69 = v17 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v69) = v13;
        p_dst = &__dst;
        if (!v13)
        {
LABEL_16:
          *((_BYTE *)p_dst + v14) = 0;
          v70 = *(_DWORD *)(a2 + 24);
          v18 = *(const char **)(a2 + 32);
          v19 = strlen(v18);
          if (v19 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v20 = v19;
          if (v19 >= 0x17)
          {
            v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17)
              v22 = v19 | 7;
            v23 = v22 + 1;
            v21 = (__int128 *)operator new(v22 + 1);
            *((_QWORD *)&v71 + 1) = v20;
            v72 = v23 | 0x8000000000000000;
            *(_QWORD *)&v71 = v21;
          }
          else
          {
            HIBYTE(v72) = v19;
            v21 = &v71;
            if (!v19)
            {
LABEL_24:
              *((_BYTE *)v21 + v20) = 0;
              v73 = *(_DWORD *)(a2 + 40) & ~(*(int *)(a2 + 40) >> 31);
              v24 = *(const char **)(a2 + 48);
              v25 = strlen(v24);
              if (v25 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v26 = v25;
              if (v25 >= 0x17)
              {
                v31 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v25 | 7) != 0x17)
                  v31 = v25 | 7;
                v32 = v31 + 1;
                v27 = (__int128 *)operator new(v31 + 1);
                *((_QWORD *)&v74 + 1) = v26;
                v75 = v32 | 0x8000000000000000;
                *(_QWORD *)&v74 = v27;
              }
              else
              {
                HIBYTE(v75) = v25;
                v27 = &v74;
                if (!v25)
                {
                  LOBYTE(v74) = 0;
                  v28 = *(_QWORD *)(a2 + 56);
                  v29 = *(_DWORD *)(v28 + 120);
                  if ((v29 & 0x10) == 0)
                    goto LABEL_28;
                  goto LABEL_34;
                }
              }
              memmove(v27, v24, v26);
              *((_BYTE *)v27 + v26) = 0;
              v28 = *(_QWORD *)(a2 + 56);
              v29 = *(_DWORD *)(v28 + 120);
              if ((v29 & 0x10) == 0)
              {
LABEL_28:
                if ((v29 & 8) == 0)
                {
                  v30 = 0;
                  HIBYTE(v77) = 0;
LABEL_39:
                  v36 = &v76;
                  goto LABEL_44;
                }
                v35 = *(const void **)(v28 + 40);
                v30 = *(_QWORD *)(v28 + 56) - (_QWORD)v35;
                if (v30 > 0x7FFFFFFFFFFFFFF7)
LABEL_59:
                  sub_20E860B7C();
LABEL_37:
                if (v30 >= 0x17)
                {
                  v37 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v30 | 7) != 0x17)
                    v37 = v30 | 7;
                  v38 = v37 + 1;
                  v36 = (__int128 *)operator new(v37 + 1);
                  *((_QWORD *)&v76 + 1) = v30;
                  v77 = v38 | 0x8000000000000000;
                  *(_QWORD *)&v76 = v36;
                }
                else
                {
                  HIBYTE(v77) = v30;
                  v36 = &v76;
                  if (!v30)
                    goto LABEL_39;
                }
                memmove(v36, v35, v30);
LABEL_44:
                *((_BYTE *)v36 + v30) = 0;
                v93 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));
                v94 = v39;
                LOBYTE(v95) = 0;
                v98 = 0;
                v99 = 0;
                v100 = 0;
                v101 = 0;
                v102 = 0;
                v103 = 0;
                v104 = 0;
                v105 = 0;
                v106 = 0;
                v83 = __dst;
                v84 = (std::__shared_weak_count *)v69;
                __dst = 0uLL;
                v69 = 0;
                v85 = v70;
                v86 = v71;
                v87 = v72;
                v71 = 0uLL;
                v72 = 0;
                v88 = v73;
                v40 = v75;
                v89 = v74;
                v74 = 0uLL;
                v75 = 0;
                v90 = v40;
                v92 = v77;
                __p = v76;
                v76 = 0uLL;
                v77 = 0;
                v41 = operator new();
                sub_20FEC5F5C(v41, &v83, (uint64_t)&v93);
                v78 = &off_24CA0C0E8;
                v79 = v41;
                v42 = (std::__shared_weak_count *)operator new();
                v42->__shared_owners_ = 0;
                v43 = (unint64_t *)&v42->__shared_owners_;
                v42->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0C1E0;
                v42->__shared_weak_owners_ = 0;
                v42[1].__vftable = (std::__shared_weak_count_vtbl *)v41;
                if (SHIBYTE(v92) < 0)
                {
                  operator delete((void *)__p);
                  if ((SHIBYTE(v90) & 0x80000000) == 0)
                  {
LABEL_46:
                    if ((SHIBYTE(v87) & 0x80000000) == 0)
                      goto LABEL_47;
                    goto LABEL_52;
                  }
                }
                else if ((SHIBYTE(v90) & 0x80000000) == 0)
                {
                  goto LABEL_46;
                }
                operator delete((void *)v89);
                if ((SHIBYTE(v87) & 0x80000000) == 0)
                {
LABEL_47:
                  if ((SHIBYTE(v84) & 0x80000000) == 0)
                    goto LABEL_48;
LABEL_53:
                  operator delete((void *)v83);
LABEL_48:
                  sub_20EB0580C((uint64_t)&v93);
                  *(_QWORD *)&v83 = &off_24CA0C0E8;
                  *((_QWORD *)&v83 + 1) = v41;
                  v84 = v42;
                  v79 = 0;
                  v80 = 0;
                  v44 = (char *)operator new(0x50uLL);
                  v45 = (std::__shared_weak_count *)v44;
                  *((_QWORD *)v44 + 1) = 0;
                  v46 = (unint64_t *)(v44 + 8);
                  *((_QWORD *)v44 + 2) = 0;
                  *(_QWORD *)v44 = &off_24CA078E8;
                  v47 = v44 + 24;
                  if (*((char *)v11 + 23) < 0)
                  {
                    sub_20E860C04(v44 + 24, *(void **)v11, *((_QWORD *)v11 + 1));
                  }
                  else
                  {
                    v48 = *v11;
                    *((_QWORD *)v44 + 5) = *((_QWORD *)v11 + 2);
                    *v47 = v48;
                  }
                  LOBYTE(v45[2].__vftable) = 0;
                  LOBYTE(v45[3].__vftable) = 0;
                  if (*((_BYTE *)v11 + 48))
                  {
                    if (*((char *)v11 + 47) < 0)
                    {
                      sub_20E860C04(&v45[2], *((void **)v11 + 3), *((_QWORD *)v11 + 4));
                    }
                    else
                    {
                      v49 = *(std::__shared_count *)((char *)v11 + 24);
                      v45[2].__shared_weak_owners_ = *((_QWORD *)v11 + 5);
                      v45[2].std::__shared_count = v49;
                    }
                    LOBYTE(v45[3].__vftable) = 1;
                  }
                  *((_QWORD *)&v83 + 1) = 0;
                  v84 = 0;
                  v93 = (uint64_t)v47;
                  v94 = v45;
                  do
                    v50 = __ldxr(v46);
                  while (__stxr(v50 + 1, v46));
                  v95 = &off_24CA0C0E8;
                  v96 = v41;
                  v97 = v42;
                  do
                    v51 = __ldxr(v43);
                  while (__stxr(v51 + 1, v43));
                  do
                    v52 = __ldaxr(v43);
                  while (__stlxr(v52 - 1, v43));
                  if (!v52)
                  {
                    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                    std::__shared_weak_count::__release_weak(v42);
                  }
                  do
                    v53 = __ldaxr(v46);
                  while (__stlxr(v53 - 1, v46));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                    std::__shared_weak_count::__release_weak(v45);
                  }
                  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v93);
                  v54 = v97;
                  if (v97)
                  {
                    v55 = (unint64_t *)&v97->__shared_owners_;
                    do
                      v56 = __ldaxr(v55);
                    while (__stlxr(v56 - 1, v55));
                    if (!v56)
                    {
                      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                      std::__shared_weak_count::__release_weak(v54);
                    }
                  }
                  v57 = v94;
                  if (v94)
                  {
                    v58 = (unint64_t *)&v94->__shared_owners_;
                    do
                      v59 = __ldaxr(v58);
                    while (__stlxr(v59 - 1, v58));
                    if (!v59)
                    {
                      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                      std::__shared_weak_count::__release_weak(v57);
                    }
                  }
                  v60 = v84;
                  if (v84)
                  {
                    v61 = (unint64_t *)&v84->__shared_owners_;
                    do
                      v62 = __ldaxr(v61);
                    while (__stlxr(v62 - 1, v61));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                    }
                  }
                  v63 = v80;
                  if (v80)
                  {
                    v64 = (unint64_t *)&v80->__shared_owners_;
                    do
                      v65 = __ldaxr(v64);
                    while (__stlxr(v65 - 1, v64));
                    if (!v65)
                    {
                      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                      std::__shared_weak_count::__release_weak(v63);
                    }
                  }
                  if (SHIBYTE(v77) < 0)
                  {
                    operator delete((void *)v76);
                    if ((SHIBYTE(v75) & 0x80000000) == 0)
                    {
LABEL_94:
                      if ((SHIBYTE(v72) & 0x80000000) == 0)
                        goto LABEL_95;
                      goto LABEL_100;
                    }
                  }
                  else if ((SHIBYTE(v75) & 0x80000000) == 0)
                  {
                    goto LABEL_94;
                  }
                  operator delete((void *)v74);
                  if ((SHIBYTE(v72) & 0x80000000) == 0)
                  {
LABEL_95:
                    if ((SHIBYTE(v69) & 0x80000000) == 0)
                      goto LABEL_96;
                    goto LABEL_101;
                  }
LABEL_100:
                  operator delete((void *)v71);
                  if ((SHIBYTE(v69) & 0x80000000) == 0)
                  {
LABEL_96:
                    v9 = v82;
                    if (!v82)
                      return;
                    goto LABEL_102;
                  }
LABEL_101:
                  operator delete((void *)__dst);
                  v9 = v82;
                  if (!v82)
                    return;
                  goto LABEL_102;
                }
LABEL_52:
                operator delete((void *)v86);
                if ((SHIBYTE(v84) & 0x80000000) == 0)
                  goto LABEL_48;
                goto LABEL_53;
              }
LABEL_34:
              v33 = *(_QWORD *)(v28 + 112);
              v34 = *(_QWORD *)(v28 + 72);
              if (v33 < v34)
              {
                *(_QWORD *)(v28 + 112) = v34;
                v33 = v34;
              }
              v35 = *(const void **)(v28 + 64);
              v30 = v33 - (_QWORD)v35;
              if (v33 - (unint64_t)v35 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_59;
              goto LABEL_37;
            }
          }
          memmove(v21, v18, v20);
          goto LABEL_24;
        }
      }
      memmove(p_dst, v12, v14);
      goto LABEL_16;
    }
  }
}

void sub_20FEFF16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  void **v44;
  void **v45;
  void *v47;

  if (*(_BYTE *)(v43 + 72) && *(char *)(v43 + 71) < 0)
    operator delete(*v45);
  if (*(char *)(v43 + 47) < 0)
    operator delete(*v44);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v43);
  operator delete(v47);
  sub_20FF1C8E4((uint64_t)&a29);
  sub_20FF1C8E4((uint64_t)&a24);
  sub_20FDE3B08((uint64_t)&a10);
  sub_20E86665C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20FEFF244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a29 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_4:
    sub_20E86665C((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a10);
  sub_20E86665C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20FEFF2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E86665C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20FEFF2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E86665C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20FEFF2F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0B0C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FEFF300(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0B0C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FEFF338(uint64_t a1)
{
  char *v2;
  char *v3;
  std::__shared_weak_count *v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;

  while (1)
  {
    v3 = *(char **)(a1 + 96);
    v2 = *(char **)(a1 + 104);
    if (v3 == v2)
      break;
    sub_20FEFF410(a1, *((_QWORD *)v2 - 2));
  }
  v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    v3 = *(char **)(a1 + 96);
  }
  if (v3)
  {
    v5 = *(char **)(a1 + 104);
    v6 = v3;
    if (v5 != v3)
    {
      do
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v3);
      v6 = *(char **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v6);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  v10 = *(std::__shared_weak_count **)(a1 + 24);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  return a1;
}

uint64_t sub_20FEFF410(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v4 = *(_QWORD **)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 104);
  if (v4 != v3)
  {
    while (*v4 != a2)
    {
      v4 += 2;
      if (v4 == v3)
        return 0;
    }
  }
  if (v4 == v3)
    return 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
  v5 = v4 + 2;
  v6 = *(_QWORD **)(a1 + 104);
  if (v4 + 2 != v6)
  {
    do
    {
      v7 = *(_OWORD *)v5;
      *v5 = 0;
      v5[1] = 0;
      v8 = (std::__shared_weak_count *)v4[1];
      *(_OWORD *)v4 = v7;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 += 2;
      v4 += 2;
    }
    while (v5 != v6);
    v5 = *(_QWORD **)(a1 + 104);
  }
  while (v5 != v4)
  {
    v12 = (std::__shared_weak_count *)*(v5 - 1);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v5 -= 2;
  }
  *(_QWORD *)(a1 + 104) = v4;
  return 1;
}

uint64_t sub_20FEFF560(uint64_t a1)
{
  return sub_20FEFF338(a1 - 8);
}

void sub_20FEFF568(uint64_t a1)
{
  sub_20FEFF338(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FEFF58C(uint64_t a1)
{
  sub_20FEFF338(a1 - 8);
  JUMPOUT(0x212BC6398);
}

void sub_20FEFF5B4(uint64_t **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  char *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;

  v6 = operator new(0xA0uLL);
  v8 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24CA0B280;
  v9 = (char *)(v6 + 3);
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v6[3] = &off_24CA0B110;
  v6[4] = &unk_24CA0B150;
  v6[5] = 0;
  v6[6] = 0;
  v6[7] = 850045863;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v6[18] = v8;
    v6[19] = v7;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    v6[18] = v8;
    v6[19] = 0;
  }
  *a3 = v9;
  a3[1] = v6;
  v14 = v6 + 2;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v6[5] = v9;
  v6[6] = v6;
  v16 = *a1;
  v17 = a1[1];
  while (v16 != v17)
  {
    v18 = *v16;
    v19 = (std::__shared_weak_count *)v16[1];
    v37 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      v22 = (_QWORD *)*a3;
      v36 = v19;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
      v35 = v18;
      v26 = (uint64_t *)v22[12];
      v25 = (uint64_t *)v22[13];
      v24 = (uint64_t)(v22 + 12);
      if (v26 != v25)
      {
LABEL_22:
        while (*v26 != v18)
        {
          v26 += 2;
          if (v26 == v25)
          {
            v26 = v25;
            break;
          }
        }
      }
    }
    else
    {
      v22 = (_QWORD *)*a3;
      v35 = *v16;
      v36 = 0;
      v26 = *(uint64_t **)(*a3 + 96);
      v25 = *(uint64_t **)(*a3 + 104);
      v24 = *a3 + 96;
      if (v26 != v25)
        goto LABEL_22;
    }
    if (v26 == v25)
    {
      if ((unint64_t)v25 >= v22[14])
      {
        v29 = sub_20FF001FC(v24, v18, (uint64_t)v19);
        v18 = v35;
      }
      else
      {
        *v25 = v18;
        v25[1] = (uint64_t)v19;
        if (v19)
        {
          v27 = (unint64_t *)&v19->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = v25 + 2;
      }
      v22[13] = v29;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 24))(v18, v22);
      v19 = v36;
      if (!v36)
        goto LABEL_38;
    }
    else if (!v19)
    {
      goto LABEL_38;
    }
    v30 = (unint64_t *)&v19->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v32 = v37;
      if (!v37)
        goto LABEL_12;
      goto LABEL_39;
    }
LABEL_38:
    v32 = v37;
    if (!v37)
      goto LABEL_12;
LABEL_39:
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
LABEL_12:
    v16 += 2;
  }
}

void sub_20FEFF81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a11);
  sub_20E86665C(v11);
  _Unwind_Resume(a1);
}

BOOL sub_20FEFF840(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(uint64_t **)(a1 + 96);
  v10 = *(uint64_t **)(a1 + 104);
  if (v9 != v10)
  {
    while (*v9 != v6)
    {
      v9 += 2;
      if (v9 == v10)
      {
        v9 = *(uint64_t **)(a1 + 104);
        break;
      }
    }
  }
  if (v9 == v10)
  {
    if ((unint64_t)v10 >= *(_QWORD *)(a1 + 112))
    {
      v13 = sub_20FF001FC(a1 + 96, v6, (uint64_t)v5);
    }
    else
    {
      *v10 = v6;
      v10[1] = (uint64_t)v5;
      if (v5)
      {
        v11 = (unint64_t *)&v5->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = v10 + 2;
    }
    *(_QWORD *)(a1 + 104) = v13;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a1);
  }
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::mutex::unlock(v4);
  return v9 == v10;
}

void sub_20FEFF974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_20E86665C((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_20FEFF990(uint64_t a1, uint64_t **a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;

  v4 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v5 = *(uint64_t **)(a1 + 96);
  v6 = *(uint64_t **)(a1 + 104);
  while (v6 != v5)
  {
    v6 -= 2;
    v7 = *a2;
    v8 = a2[1];
    if (*a2 != v8)
    {
      while (*v7 != *v6)
      {
        v7 += 2;
        if (v7 == v8)
        {
          v7 = a2[1];
          break;
        }
      }
    }
    if (v7 == v8)
      sub_20FEFF410(a1, *v6);
  }
  v9 = *a2;
  v10 = a2[1];
  while (v9 != v10)
  {
    v12 = *v9;
    v11 = (std::__shared_weak_count *)v9[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v16 = *(uint64_t **)(a1 + 96);
    v15 = *(uint64_t **)(a1 + 104);
    if (v16 != v15)
    {
      while (*v16 != v12)
      {
        v16 += 2;
        if (v16 == v15)
        {
          v16 = *(uint64_t **)(a1 + 104);
          break;
        }
      }
    }
    if (v16 == v15)
    {
      if ((unint64_t)v15 >= *(_QWORD *)(a1 + 112))
      {
        v19 = sub_20FF001FC(a1 + 96, v12, (uint64_t)v11);
      }
      else
      {
        *v15 = v12;
        v15[1] = (uint64_t)v11;
        if (v11)
        {
          v17 = (unint64_t *)&v11->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = v15 + 2;
      }
      *(_QWORD *)(a1 + 104) = v19;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v12, a1);
    }
    if (v11)
    {
      v20 = (unint64_t *)&v11->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 += 2;
  }
  std::mutex::unlock(v4);
}

void sub_20FEFFB34(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20FEFFB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_20E86665C((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_20FEFFB64@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  result = *(std::__shared_weak_count **)(a1 + 128);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(a1 + 120);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

std::__shared_weak_count *sub_20FEFFBB0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  *a2 = 0;
  a2[1] = 0;
  result = *(std::__shared_weak_count **)(a1 + 128);
  if (result)
  {
    result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result)
      *a2 = *(_QWORD *)(a1 + 120);
  }
  return result;
}

std::__shared_weak_count *sub_20FEFFBF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  result = *(std::__shared_weak_count **)(a1 + 24);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

uint64_t sub_20FEFFC3C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *i;

  v4 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v5 = *(_QWORD **)(a1 + 96);
  for (i = *(_QWORD **)(a1 + 104); v5 != i; v5 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, a2);
  std::mutex::unlock(v4);
  return a1 + 8;
}

void sub_20FEFFCB4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEFFCC8(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *i;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(_QWORD **)(a1 + 88);
  for (i = *(_QWORD **)(a1 + 96); v5 != i; v5 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, a2);
  std::mutex::unlock(v4);
  return a1;
}

void sub_20FEFFD3C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEFFD50(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20FEFFDB8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20FEFFE14(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20FEFFE7C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FEFFEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::mutex *v5;
  _QWORD *v6;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = (std::mutex *)(v4 + 32);
  std::mutex::lock((std::mutex *)(v4 + 32));
  v6 = *(_QWORD **)(v4 + 96);
  for (i = *(_QWORD **)(v4 + 104); v6 != i; v6 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  std::mutex::unlock(v5);
  return a1 + 8;
}

void sub_20FEFFF5C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEFFF70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::mutex *v5;
  _QWORD *v6;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (std::mutex *)(v4 + 32);
  std::mutex::lock((std::mutex *)(v4 + 32));
  v6 = *(_QWORD **)(v4 + 96);
  for (i = *(_QWORD **)(v4 + 104); v6 != i; v6 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  std::mutex::unlock(v5);
  return a1;
}

void sub_20FEFFFE8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_20FEFFFFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *result;

  v3 = *(_QWORD *)(a1 + 16);
  result = *(std::__shared_weak_count **)(v3 + 128);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(v3 + 120);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

std::__shared_weak_count *sub_20FF00048@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *result;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = 0;
  a2[1] = 0;
  result = *(std::__shared_weak_count **)(v2 + 128);
  if (result)
  {
    result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result)
      *a2 = *(_QWORD *)(v2 + 120);
  }
  return result;
}

std::__shared_weak_count *sub_20FF00088@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *result;

  v3 = *(_QWORD *)(a1 + 16);
  result = *(std::__shared_weak_count **)(v3 + 24);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(v3 + 16);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

_QWORD *sub_20FF000DC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_20FF00180(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FF001FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  __int128 v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_20E867F44();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_20E877A38();
  v11 = 16 * v6;
  v12 = (char *)operator new(16 * v6);
  v13 = &v12[16 * v5];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  if (a3)
  {
    v14 = (unint64_t *)(a3 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v16 = &v12[v11];
  v17 = v13 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v4 - 1);
      v4 -= 2;
      *((_OWORD *)v13 - 1) = v18;
      v13 -= 16;
      *v4 = 0;
      v4[1] = 0;
    }
    while (v4 != v3);
    v3 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    while (v19 != v3)
    {
      v20 = (std::__shared_weak_count *)*(v19 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v19 -= 2;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_20FF00348(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0B280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FF00358(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0B280;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF00388(uint64_t a1)
{
  return sub_20FEFF338(a1 + 24);
}

double sub_20FF00398@<D0>(char a1@<W1>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  char *v4;
  _QWORD *v5;
  __int128 v6;
  __n128 *v7;
  char *v8;
  __int128 v9;
  const char *v10;
  char *v11;
  char *v12;
  char *v13;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "no error");
      return a3.n128_f64[0];
    case 1:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "unknown error");
      return a3.n128_f64[0];
    case 2:
      v4 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_2102DCC80;
      strcpy(v4, "filesystem operation failed");
      a3.n128_u64[0] = *(_QWORD *)"operation failed";
      return a3.n128_f64[0];
    case 3:
      v5 = operator new(0x20uLL);
      *(_QWORD *)a2 = v5;
      v6 = xmmword_2102DBFB0;
      v7 = (__n128 *)"caught runtime exception";
      goto LABEL_11;
    case 4:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "data is invalid");
      return a3.n128_f64[0];
    case 5:
      *(_BYTE *)(a2 + 23) = 20;
      a3.n128_u64[0] = *(_QWORD *)"timestamp is invalid";
      strcpy((char *)a2, "timestamp is invalid");
      return a3.n128_f64[0];
    case 6:
      v8 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v8;
      v9 = xmmword_2102DB470;
      v10 = "timestamping is inconsistent";
      goto LABEL_15;
    case 7:
      v5 = operator new(0x20uLL);
      *(_QWORD *)a2 = v5;
      v6 = xmmword_2102DBFB0;
      v7 = (__n128 *)"processing queue is full";
LABEL_11:
      *(_OWORD *)(a2 + 8) = v6;
      a3 = *v7;
      *(__n128 *)v5 = *v7;
      v5[2] = v7[1].n128_u64[0];
      *((_BYTE *)v5 + 24) = 0;
      return a3.n128_f64[0];
    case 8:
      v11 = (char *)operator new(0x40uLL);
      *(_QWORD *)a2 = v11;
      *(_OWORD *)(a2 + 8) = xmmword_2102DBC10;
      strcpy(v11, "chosen common I/O format is not supported for the data type");
      a3.n128_u64[0] = *(_QWORD *)"or the data type";
      return a3.n128_f64[0];
    case 9:
      v12 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v12;
      *(_OWORD *)(a2 + 8) = xmmword_2102DC8F0;
      a3.n128_u64[0] = *(_QWORD *)"data package unknown to serializer";
      strcpy(v12, "data package unknown to serializer");
      return a3.n128_f64[0];
    case 10:
      v8 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v8;
      v9 = xmmword_2102DB470;
      v10 = "data type unknown to package";
LABEL_15:
      *(_OWORD *)(a2 + 8) = v9;
      *(_OWORD *)v8 = *(_OWORD *)v10;
      a3 = *(__n128 *)(v10 + 12);
      *(__n128 *)(v8 + 12) = a3;
      v8[28] = 0;
      break;
    case 11:
      *(_BYTE *)(a2 + 23) = 19;
      a3.n128_u64[0] = *(_QWORD *)"failed to load data";
      strcpy((char *)a2, "failed to load data");
      break;
    case 12:
      *(_BYTE *)(a2 + 23) = 20;
      a3.n128_u64[0] = *(_QWORD *)"sequence i/o failure";
      strcpy((char *)a2, "sequence i/o failure");
      break;
    case 13:
      v13 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v13;
      *(_OWORD *)(a2 + 8) = xmmword_2102DBFF0;
      strcpy(v13, "unsupported or invalid sequence");
      a3.n128_u64[0] = *(_QWORD *)"invalid sequence";
      break;
    default:
      *(_BYTE *)(a2 + 23) = 18;
      a3.n128_u64[0] = *(_QWORD *)"unknown error code";
      strcpy((char *)a2, "unknown error code");
      break;
  }
  return a3.n128_f64[0];
}

__n128 sub_20FF006F4@<Q0>(int a1@<W1>, uint64_t a2@<X8>, __n128 result@<Q0>)
{
  _OWORD *v4;
  __int128 v5;
  const char *v6;
  char *v7;
  __int128 v8;
  const char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "no error");
      return result;
    case 1:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "unknown error");
      return result;
    case 2:
      v4 = operator new(0x28uLL);
      *(_QWORD *)a2 = v4;
      v5 = xmmword_2102DC280;
      v6 = "server Receive() threw exception";
      goto LABEL_19;
    case 3:
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"server send failure";
      strcpy((char *)a2, "server send failure");
      return result;
    case 4:
      v7 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v7;
      v8 = xmmword_2102DBFE0;
      v9 = "server can't reach client";
      goto LABEL_12;
    case 5:
      v10 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v10;
      *(_OWORD *)(a2 + 8) = xmmword_2102DC970;
      strcpy(v10, "server cannot serialize data of unknown package");
      result.n128_u64[0] = *(_QWORD *)" unknown package";
      return result;
    case 6:
      v11 = (char *)operator new(0x40uLL);
      *(_QWORD *)a2 = v11;
      *(_OWORD *)(a2 + 8) = xmmword_2102D7440;
      strcpy(v11, "server cannot serialize package data of unknown data type");
      result.n128_u64[0] = *(_QWORD *)"nknown data type";
      return result;
    case 7:
      v12 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v12;
      *(_OWORD *)(a2 + 8) = xmmword_2102DCC80;
      strcpy(v12, "server serialization failed");
      result.n128_u64[0] = *(_QWORD *)"alization failed";
      return result;
    case 8:
      v4 = operator new(0x28uLL);
      *(_QWORD *)a2 = v4;
      v5 = xmmword_2102DC280;
      v6 = "client Receive() threw exception";
LABEL_19:
      *(_OWORD *)(a2 + 8) = v5;
      result = *(__n128 *)v6;
      v14 = *((_OWORD *)v6 + 1);
      *v4 = *(_OWORD *)v6;
      v4[1] = v14;
      *((_BYTE *)v4 + 32) = 0;
      return result;
    case 9:
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"client send failure";
      strcpy((char *)a2, "client send failure");
      return result;
    case 10:
      v7 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v7;
      v8 = xmmword_2102DBFE0;
      v9 = "client can't reach server";
LABEL_12:
      *(_OWORD *)(a2 + 8) = v8;
      *(_OWORD *)v7 = *(_OWORD *)v9;
      result = *(__n128 *)(v9 + 9);
      *(__n128 *)(v7 + 9) = result;
      v7[25] = 0;
      break;
    case 11:
      v13 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v13;
      *(_OWORD *)(a2 + 8) = xmmword_2102E0950;
      result.n128_u64[0] = *(_QWORD *)"client does not have syncing enabled";
      strcpy(v13, "client does not have syncing enabled");
      break;
    case 12:
      *(_BYTE *)(a2 + 23) = 7;
      strcpy((char *)a2, "timeout");
      break;
    case 13:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "invalid peer ID");
      break;
    case 15:
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"configuration issue";
      strcpy((char *)a2, "configuration issue");
      break;
    default:
      *(_BYTE *)(a2 + 23) = 18;
      result.n128_u64[0] = *(_QWORD *)"unknown error code";
      strcpy((char *)a2, "unknown error code");
      break;
  }
  return result;
}

void sub_20FF00A74(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;

  sub_20FF00BB4("ignoring data of timestamp ", a1, (uint64_t)"; exporter is exporting only the first encountered timestamp, which was '",
    a2,
    (uint64_t)"'");
  if (SHIBYTE(v5) < 0)
  {
    sub_20E860C04(__p, v4[0], (unint64_t)v4[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v7 = v5;
  }
  v8 = 1;
  LOBYTE(v9) = 0;
  v13 = 0;
  v14 = 1;
  sub_20FDD9B4C(5u, (__int128 *)__p, a3);
  if (!v14)
    goto LABEL_11;
  if (v13)
  {
    if ((v12 & 0x80000000) == 0)
    {
      if ((v10 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v9);
      if (!v8)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v8)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_20FF00B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF00BB4(char *__s, uint64_t *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t result;
  char v10;
  char v11;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v13 = 0;
  sub_20E9EBBAC(v12, __s);
  sub_20FF029B8((uint64_t)&v11, (uint64_t)v12, a2);
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_20E877AB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24CA0B3C8[v13])(&v19, v12);
  sub_20FD2A5A0((uint64_t)&v10, (uint64_t)v12, a4);
  v14 = (_QWORD **)v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_20E877AB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24CA0B3E0[v13])(&v19, v12);
  if (v13 == -1)
    sub_20E877AB8();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA0B3F8[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA0B380[v13])(&v14, v12);
  return result;
}

void sub_20FF00D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF00D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF00D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF00D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF00D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF00D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF00D88(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v5[2];
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;

  v4 = -*a2;
  sub_20FF00ED8("received data of timestamp ", a1, (std::string::size_type)" ", &v4, (std::string::size_type)" before newest timestamp");
  if (SHIBYTE(v6) < 0)
  {
    sub_20E860C04(__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v5;
    v8 = v6;
  }
  v9 = 1;
  LOBYTE(v10) = 0;
  v14 = 0;
  v15 = 1;
  sub_20FDD9B4C(6u, (__int128 *)__p, a3);
  if (!v15)
    goto LABEL_11;
  if (v14)
  {
    if ((v13 & 0x80000000) == 0)
    {
      if ((v11 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v10);
      if (!v9)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v12);
    if (v11 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v9)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_20FF00EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF00ED8(char *__s, uint64_t *a2, std::string::size_type a3, uint64_t *a4, std::string::size_type a5)
{
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  uint64_t result;
  char v14;
  _DWORD v15[6];
  int v16;
  void *__p[2];
  std::string::size_type v18;
  std::string v19;
  void **v20;
  void **v21;
  void *v22[2];
  unsigned __int8 v23;
  uint64_t v24;
  std::string v25;

  v16 = 0;
  sub_20E9EBBAC(v15, __s);
  sub_20FF029B8((uint64_t)&v14, (uint64_t)v15, a2);
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v19.__r_.__value_.__l.__size_ = a3;
  v19.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  v20 = (void **)a3;
  v21 = (void **)a3;
  if (v16 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24CA0B3E0[v16])(&v25, v15);
  v24 = *a4;
  sub_20E9F681C(&v24);
  std::string::push_back(&v25, 32);
  v19 = v25;
  memset(&v25, 0, sizeof(v25));
  sub_210237BC0(1, 1000, v22);
  if ((v23 & 0x80u) == 0)
    v9 = (const std::string::value_type *)v22;
  else
    v9 = (const std::string::value_type *)v22[0];
  if ((v23 & 0x80u) == 0)
    v10 = v23;
  else
    v10 = (std::string::size_type)v22[1];
  v11 = std::string::append(&v19, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v18 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (((char)v23 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_20:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
  operator delete(v22[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_10:
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_11;
LABEL_21:
  operator delete(v25.__r_.__value_.__l.__data_);
LABEL_11:
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v19.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
  v19.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  v20 = __p;
  v21 = __p;
  if (v16 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24CA0B3B0[v16])(&v25, v15);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v19.__r_.__value_.__l.__size_ = a5;
  v19.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  v20 = (void **)a5;
  v21 = (void **)a5;
  if (v16 == -1)
    sub_20E877AB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24CA0B410[v16])(&v25, v15);
  if (v16 == -1)
    sub_20E877AB8();
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  result = ((uint64_t (*)(std::string *, _DWORD *))off_24CA0B3F8[v16])(&v19, v15);
  if (v16 != -1)
    return ((uint64_t (*)(std::string *, _DWORD *))off_24CA0B380[v16])(&v19, v15);
  return result;
}

void sub_20FF01148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  if (*(char *)(v28 - 81) < 0)
  {
    operator delete(*(void **)(v28 - 104));
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 - 49) & 0x80000000) == 0)
      {
LABEL_8:
        sub_20E877A60((uint64_t)&a11);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(*(void **)(v27 + 8));
      sub_20E877A60((uint64_t)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v28 - 49) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20FF0120C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  std::string v14;
  std::string __p;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  _QWORD v23[2];
  char v24;
  char *v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v23[0] = a2;
  v23[1] = a3;
  if ((_BYTE)a3)
  {
    LODWORD(v27) = 0;
    sub_20E8ECB20(v26, ", max queue size ");
    sub_20EA6D064((uint64_t)&v25, (uint64_t)v26, (uint64_t)v23);
    if ((_DWORD)v27 == -1)
      sub_20E877AB8();
    v25 = &v24;
    ((void (*)(void **__return_ptr, char **, _QWORD *))off_24CA0B3F8[v27])(&v11, &v25, v26);
    if ((_DWORD)v27 != -1)
      ((void (*)(char **, _QWORD *))off_24CA0B380[v27])(&v25, v26);
    v6 = HIBYTE(v13);
    v7 = v11;
    v8 = v12;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  v9 = *((unsigned __int8 *)a1 + 23);
  if ((v9 & 0x80u) == 0)
    v10 = a1;
  else
    v10 = (uint64_t *)*a1;
  if ((v9 & 0x80u) != 0)
    v9 = a1[1];
  v26[0] = v10;
  v26[1] = v9;
  if ((v6 & 0x80u) == 0)
  {
    v7 = &v11;
    v8 = v6;
  }
  v26[2] = v7;
  v27 = v8;
  sub_20E8778D4((uint64_t)v26, (uint64_t)&v28, 0, 0, &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    __p = v14;
  v16 = 1;
  LOBYTE(v17) = 0;
  v21 = 0;
  v22 = 1;
  sub_20FDD9B4C(7u, (__int128 *)&__p, a4);
  if (v22)
  {
    if (!v21)
      goto LABEL_21;
    if (v20 < 0)
    {
      operator delete(v19);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_21:
        if (!v16)
          goto LABEL_24;
LABEL_22:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_24;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v17);
    if (!v16)
      goto LABEL_24;
    goto LABEL_22;
  }
LABEL_24:
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete(v11);
    return;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13) < 0)
    goto LABEL_28;
}

void sub_20FF01450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_20FF014CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E877A60(v1 - 72);
  _Unwind_Resume(a1);
}

void sub_20FF014E0(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  std::string v8;
  std::string __p;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  _QWORD v17[8];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v17[0] = "Cannot save data as '";
  v17[1] = 21;
  v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  if ((v4 & 0x80u) != 0)
    v4 = a1[1];
  v17[2] = v5;
  v17[3] = v4;
  v17[4] = "'. Reason: ";
  v17[5] = 11;
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  v17[6] = v7;
  v17[7] = v6;
  sub_20E8778D4((uint64_t)v17, (uint64_t)&v18, 0, 0, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    __p = v8;
  v10 = 1;
  LOBYTE(v11) = 0;
  v15 = 0;
  v16 = 1;
  sub_20FDD9B4C(8u, (__int128 *)&__p, a3);
  if (v16)
  {
    if (!v15)
      goto LABEL_18;
    if (v14 < 0)
    {
      operator delete(v13);
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        if (!v10)
          goto LABEL_21;
LABEL_19:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_21;
      }
    }
    else if ((v12 & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(v11);
    if (!v10)
      goto LABEL_21;
    goto LABEL_19;
  }
LABEL_21:
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_20FF0165C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FF01694(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  std::string v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  std::string v14;
  std::string __dst;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  char v21;
  char v22;
  const char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  if (*((char *)a1 + 23) < 0)
  {
    v4 = (uint64_t *)*a1;
  }
  else
  {
    v3 = *((unsigned __int8 *)a1 + 23);
    v4 = a1;
  }
  if (v3)
  {
    v23 = "Package id '";
    v24 = 12;
    v25 = v4;
    v26 = v3;
    v28 = 222;
    sub_20E8778D4((uint64_t)&v23, (uint64_t)&v29, 0, 0, &v14);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      sub_20E860C04(&v6, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      v6 = v14;
    v7 = 1;
    LOBYTE(v8) = 0;
    v12 = 0;
    v13 = 1;
    sub_20FDD9B4C(9u, (__int128 *)&v6, a2);
    if (v13)
    {
      if (!v12)
        goto LABEL_14;
      if (v11 < 0)
      {
        operator delete(v10);
        if ((v9 & 0x80000000) == 0)
        {
LABEL_14:
          if (!v7)
            goto LABEL_28;
          goto LABEL_15;
        }
      }
      else if ((v9 & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(v8);
      if (v7)
      {
LABEL_15:
        if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_28;
        v5 = (void *)v6.__r_.__value_.__r.__words[0];
        goto LABEL_27;
      }
    }
  }
  else
  {
    v23 = "Package id '";
    v24 = 12;
    v25 = v4;
    v26 = 0;
    v27 = "' encountered during loading is unrecognized. An empty package name indicates a serialization error (e.g. inva"
          "lid data in the stream)";
    v28 = 133;
    sub_20E8778D4((uint64_t)&v23, (uint64_t)&v29, 0, 0, &v14);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      sub_20E860C04(&__dst, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      __dst = v14;
    v16 = 1;
    LOBYTE(v17) = 0;
    v21 = 0;
    v22 = 1;
    sub_20FDD9B4C(9u, (__int128 *)&__dst, a2);
    if (v22)
    {
      if (v21)
      {
        if (v20 < 0)
          operator delete(__p);
        if (v18 < 0)
          operator delete(v17);
      }
      if (v16 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        v5 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_27:
        operator delete(v5);
      }
    }
  }
LABEL_28:
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_20FF018CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FF01918(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  void *__dst[2];
  uint64_t v17;
  char v18;
  void *v19;
  char v20;
  void *__p;
  char v22;
  char v23;
  char v24;
  _DWORD v25[6];
  int v26;
  std::string v27;
  std::string **v28;
  std::string *v29;
  std::string *v30;
  _DWORD *v31;
  std::string *v32;
  std::string *v33;

  if (*(_DWORD *)(a1 + 24))
  {
    v26 = 0;
    sub_20E8A330C(v25, "Package '");
    v29 = (std::string *)v25;
    v30 = (std::string *)a1;
    v31 = v25;
    v32 = (std::string *)a1;
    v33 = (std::string *)a1;
    if (v26 == -1)
      sub_20E877AB8();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24CA0B428[v26])(&v27, v25);
    v29 = (std::string *)v25;
    v30 = (std::string *)"' data type id ";
    v31 = v25;
    v32 = (std::string *)"' data type id ";
    v33 = (std::string *)"' data type id ";
    if (v26 == -1)
      sub_20E877AB8();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24CA0B440[v26])(&v27, v25);
    std::to_string(&v27, *(_DWORD *)(a1 + 24));
    v29 = (std::string *)v25;
    v30 = &v27;
    v31 = v25;
    v32 = &v27;
    v33 = &v27;
    if (v26 == -1)
      sub_20E877AB8();
    v28 = &v29;
    ((void (*)(std::string ***, _DWORD *))off_24CA0B3B0[v26])(&v28, v25);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v29 = (std::string *)v25;
    v30 = (std::string *)" encountered during loading is unrecognized. The loader's package version may be too old.";
    v31 = v25;
    v32 = (std::string *)" encountered during loading is unrecognized. The loader's package version may be too old.";
    v33 = (std::string *)" encountered during loading is unrecognized. The loader's package version may be too old.";
    if (v26 == -1)
      sub_20E877AB8();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24CA0B470[v26])(&v27, v25);
    if (v26 == -1)
      sub_20E877AB8();
    v29 = &v27;
    ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24CA0B3F8[v26])(v14, &v29, v25);
    if (v26 != -1)
      ((void (*)(std::string **, _DWORD *))off_24CA0B380[v26])(&v29, v25);
    if (SHIBYTE(v15) < 0)
    {
      sub_20E860C04(&v5, v14[0], (unint64_t)v14[1]);
    }
    else
    {
      v5 = *(_OWORD *)v14;
      v6 = v15;
    }
    v7 = 1;
    LOBYTE(v8) = 0;
    v12 = 0;
    v13 = 1;
    sub_20FDD9B4C(0xAu, &v5, a2);
    if (v13)
    {
      if (!v12)
        goto LABEL_29;
      if (v11 < 0)
      {
        operator delete(v10);
        if ((v9 & 0x80000000) == 0)
        {
LABEL_29:
          if (!v7)
            goto LABEL_43;
          goto LABEL_30;
        }
      }
      else if ((v9 & 0x80000000) == 0)
      {
        goto LABEL_29;
      }
      operator delete(v8);
      if (v7)
      {
LABEL_30:
        if ((SHIBYTE(v6) & 0x80000000) == 0)
          goto LABEL_43;
        v4 = (void *)v5;
        goto LABEL_42;
      }
    }
  }
  else
  {
    v26 = 0;
    sub_20E8A330C(v25, "Package '");
    v29 = (std::string *)v25;
    v30 = (std::string *)a1;
    v31 = v25;
    v32 = (std::string *)a1;
    v33 = (std::string *)a1;
    if (v26 == -1)
      sub_20E877AB8();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24CA0B428[v26])(&v27, v25);
    v29 = (std::string *)v25;
    v30 = (std::string *)"' data type id ";
    v31 = v25;
    v32 = (std::string *)"' data type id ";
    v33 = (std::string *)"' data type id ";
    if (v26 == -1)
      sub_20E877AB8();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24CA0B440[v26])(&v27, v25);
    std::to_string(&v27, *(_DWORD *)(a1 + 24));
    v29 = (std::string *)v25;
    v30 = &v27;
    v31 = v25;
    v32 = &v27;
    v33 = &v27;
    if (v26 == -1)
      sub_20E877AB8();
    v28 = &v29;
    ((void (*)(std::string ***, _DWORD *))off_24CA0B3B0[v26])(&v28, v25);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v29 = (std::string *)v25;
    v30 = (std::string *)" encountered during loading is unrecognized. A data type ID of 0 indicates a serialization erro"
                         "r (e.g. invalid data in the stream)";
    v31 = v25;
    v32 = (std::string *)" encountered during loading is unrecognized. A data type ID of 0 indicates a serialization erro"
                         "r (e.g. invalid data in the stream)";
    v33 = (std::string *)" encountered during loading is unrecognized. A data type ID of 0 indicates a serialization erro"
                         "r (e.g. invalid data in the stream)";
    if (v26 == -1)
      sub_20E877AB8();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24CA0B458[v26])(&v27, v25);
    if (v26 == -1)
      sub_20E877AB8();
    v29 = &v27;
    ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24CA0B3F8[v26])(v14, &v29, v25);
    if (v26 != -1)
      ((void (*)(std::string **, _DWORD *))off_24CA0B380[v26])(&v29, v25);
    if (SHIBYTE(v15) < 0)
    {
      sub_20E860C04(__dst, v14[0], (unint64_t)v14[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v14;
      v17 = v15;
    }
    v18 = 1;
    LOBYTE(v19) = 0;
    v23 = 0;
    v24 = 1;
    sub_20FDD9B4C(0xAu, (__int128 *)__dst, a2);
    if (v24)
    {
      if (v23)
      {
        if (v22 < 0)
          operator delete(__p);
        if (v20 < 0)
          operator delete(v19);
      }
      if (v18 && SHIBYTE(v17) < 0)
      {
        v4 = __dst[0];
LABEL_42:
        operator delete(v4);
      }
    }
  }
LABEL_43:
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_20FF01E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF01E68(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
  {
    operator delete(*(void **)(v1 - 104));
    sub_20E877A60(v1 - 136);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20FF01EA8);
}

void sub_20FF01EA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E877A60(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_20FF01EB8(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  char v8;
  void *v9[2];
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;

  v20 = a3;
  if (a3)
  {
    sub_20FF02220(", reason: ", (const char *)&v20);
  }
  else
  {
    v8 = 0;
    LOBYTE(v7) = 0;
  }
  sub_20FF02074("Failed to send command(s) to client ", a1, (uint64_t)&v7, (uint64_t)".");
  if (SHIBYTE(v10) < 0)
  {
    sub_20E860C04(__p, v9[0], (unint64_t)v9[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v9;
    v12 = v10;
  }
  v13 = 1;
  LOBYTE(v14) = 0;
  v18 = 0;
  v19 = 1;
  sub_20FDCABE4(a2, (__int128 *)__p, a4);
  if (v19)
  {
    if (!v18)
      goto LABEL_11;
    if (v17 < 0)
    {
      operator delete(v16);
      if ((v15 & 0x80000000) == 0)
      {
LABEL_11:
        if (!v13)
          goto LABEL_14;
LABEL_12:
        if (SHIBYTE(v12) < 0)
          operator delete(__p[0]);
        goto LABEL_14;
      }
    }
    else if ((v15 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v14);
    if (!v13)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_14:
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    if ((v8 & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v7);
    return;
  }
  operator delete(v9[0]);
  if (v8 < 0)
    goto LABEL_18;
}

void sub_20FF02018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF02074(char *__s, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v10 = 0;
  sub_20EA8A320(v9, __s);
  sub_20EE1E7C4((uint64_t)&v8, (uint64_t)v9, a2);
  v11 = (_QWORD **)v9;
  v12 = a3;
  v13 = v9;
  v14 = a3;
  v15 = a3;
  if (v10 == -1)
    sub_20E877AB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24CA0B428[v10])(&v16, v9);
  v11 = (_QWORD **)v9;
  v12 = a4;
  v13 = v9;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_20E877AB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24CA0B3E0[v10])(&v16, v9);
  if (v10 == -1)
    sub_20E877AB8();
  v11 = &v16;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA0B3F8[v10])(&v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA0B380[v10])(&v11, v9);
  return result;
}

void sub_20FF021BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF021D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF021E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF021F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF0220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF02220(char *__s, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20E9ECA4C(v4, __s);
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24CA0B488[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_20E877AB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24CA0B398[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_20E877AB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA0B3F8[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA0B380[v5])(&v6, v4);
  return result;
}

void sub_20FF0234C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FF02360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FF02374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FF02388(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3[2];
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;

  if (SHIBYTE(v4) < 0)
  {
    sub_20E860C04(__p, v3[0], (unint64_t)v3[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v3;
    v6 = v4;
  }
  v7 = 1;
  LOBYTE(v8) = 0;
  v12 = 0;
  v13 = 1;
  sub_20FDCABE4(0xFu, (__int128 *)__p, a2);
  if (!v13)
    goto LABEL_11;
  if (v12)
  {
    if ((v11 & 0x80000000) == 0)
    {
      if ((v9 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v8);
      if (!v7)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v10);
    if (v9 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v7)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_20FF02498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF024C4(char *__s, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v10 = 0;
  sub_20E9F5D10(v9, __s);
  sub_20EE1E7C4((uint64_t)&v8, (uint64_t)v9, a2);
  v11 = (_QWORD **)v9;
  v12 = a3;
  v13 = v9;
  v14 = a3;
  v15 = a3;
  if (v10 == -1)
    sub_20E877AB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24CA0B4A0[v10])(&v16, v9);
  v11 = (_QWORD **)v9;
  v12 = a4;
  v13 = v9;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_20E877AB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24CA0B4B8[v10])(&v16, v9);
  if (v10 == -1)
    sub_20E877AB8();
  v11 = &v16;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA0B3F8[v10])(&v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA0B380[v10])(&v11, v9);
  return result;
}

void sub_20FF0260C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF02620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF02634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF02648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF0265C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF02670(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3[2];
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;

  if (SHIBYTE(v4) < 0)
  {
    sub_20E860C04(__p, v3[0], (unint64_t)v3[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v3;
    v6 = v4;
  }
  v7 = 1;
  LOBYTE(v8) = 0;
  v12 = 0;
  v13 = 1;
  sub_20FDCABE4(0xFu, (__int128 *)__p, a2);
  if (!v13)
    goto LABEL_11;
  if (v12)
  {
    if ((v11 & 0x80000000) == 0)
    {
      if ((v9 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v8);
      if (!v7)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v10);
    if (v9 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v7)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_20FF02780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF027AC(char *__s, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v10 = 0;
  sub_20E9F5D10(v9, __s);
  sub_20EE1E7C4((uint64_t)&v8, (uint64_t)v9, a2);
  v11 = (_QWORD **)v9;
  v12 = a3;
  v13 = v9;
  v14 = a3;
  v15 = a3;
  if (v10 == -1)
    sub_20E877AB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24CA0B4D0[v10])(&v16, v9);
  v11 = (_QWORD **)v9;
  v12 = a4;
  v13 = v9;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_20E877AB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24CA0B4E8[v10])(&v16, v9);
  if (v10 == -1)
    sub_20E877AB8();
  v11 = &v16;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA0B3F8[v10])(&v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA0B380[v10])(&v11, v9);
  return result;
}

void sub_20FF028F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF02908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF0291C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF02930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF02944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF02958(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x212BC6398);
}

const char *sub_20FF0297C()
{
  return "cv3d.kit.viz I/O";
}

void sub_20FF02988(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x212BC6398);
}

const char *sub_20FF029AC()
{
  return "cv3d.kit.viz client/server";
}

void sub_20FF029B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_2102339F4((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA0B3B0[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FF02C08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FF02C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF02C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20FF02C5C(_DWORD ***a1)
{
  return sub_20EAA5094(**a1, (char *)(*a1)[1]);
}

void sub_20FF02C68(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA0B380[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20E877C80((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20FF02E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FF02E64(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20FF030F4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FF0310C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_20FF03114(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24CA0B380[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20FF03200(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA0B380[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20E877C80((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20FF033B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FF033FC(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20FF0368C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FF036A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_20FF036AC(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24CA0B380[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20FF03798(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA0B380[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20E877C80((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20FF03950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FF03994(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20FF03C24(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FF03C3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_20FF03C44(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24CA0B380[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20FF03D30(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA0B380[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20E877C80((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20FF03EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FF03F2C(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20FF041BC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FF041D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_20FF041DC(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24CA0B380[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20FF042C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA0B380[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20E877C80((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20FF04480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FF044C4(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20FF04754(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FF0476C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20FF04774(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_12;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_12:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_13;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_13:
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void **)a1;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_6:
    v5 = (void **)a1;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*v5);
  return a1;
}

uint64_t sub_20FF04874(uint64_t a1)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(void ***)(a1 + 16);
    if (v2)
    {
      do
      {
        while (1)
        {
          v3 = (void **)*v2;
          v4 = (std::__shared_weak_count *)v2[6];
          if (v4)
          {
            p_shared_owners = (unint64_t *)&v4->__shared_owners_;
            do
              v6 = __ldaxr(p_shared_owners);
            while (__stlxr(v6 - 1, p_shared_owners));
            if (!v6)
            {
              ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
              std::__shared_weak_count::__release_weak(v4);
            }
          }
          if (*((char *)v2 + 39) < 0)
            break;
          operator delete(v2);
          v2 = v3;
          if (!v3)
            goto LABEL_12;
        }
        operator delete(v2[2]);
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
LABEL_12:
    v7 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
      operator delete(v7);
  }
  return a1;
}

uint64_t sub_20FF04930(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  char v27;

  if (*(_BYTE *)(a1 + 112))
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 288) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8));
  if (*(_BYTE *)(a1 + 456))
    sub_20FF0981C(a1 + 416, 0, 0);
  v2 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    MEMORY[0x212BC6398](v2, 0xA1C40BD48D6D6);
  }
  if (*(_BYTE *)(a1 + 456))
  {
    v5 = *(void ***)(a1 + 432);
    if (v5)
    {
      do
      {
        while (1)
        {
          v6 = (void **)*v5;
          v7 = (std::__shared_weak_count *)v5[6];
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          if (*((char *)v5 + 39) < 0)
            break;
          operator delete(v5);
          v5 = v6;
          if (!v6)
            goto LABEL_21;
        }
        operator delete(v5[2]);
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
LABEL_21:
    v10 = *(void **)(a1 + 416);
    *(_QWORD *)(a1 + 416) = 0;
    if (v10)
      operator delete(v10);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 352));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 304));
  v11 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v13 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
    MEMORY[0x212BC6398](v11, 0xA1C40BD48D6D6);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 224));
  v14 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v14)
    MEMORY[0x212BC6398](v14, 0x10A1C40756C35FELL);
  v15 = *(std::__shared_weak_count **)(a1 + 208);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v18 = *(_QWORD **)(a1 + 152);
    if (v18 == (_QWORD *)(a1 + 128))
    {
      v19 = 4;
      v18 = (_QWORD *)(a1 + 128);
      goto LABEL_40;
    }
    if (v18)
    {
      v19 = 5;
LABEL_40:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v20 = *(_QWORD *)(a1 + 64);
    if (v20)
    {
      v21 = *(_QWORD *)(a1 + 72);
      v22 = *(void **)(a1 + 64);
      if (v21 != v20)
      {
        do
        {
          if (*(_BYTE *)(v21 - 8))
          {
            v23 = *(unsigned int *)(v21 - 16);
            if ((_DWORD)v23 != -1)
              ((void (*)(char *, uint64_t))off_24CA0B640[v23])(&v27, v21 - 48);
            *(_DWORD *)(v21 - 16) = -1;
          }
          *(_QWORD *)(v21 - 816) = &off_24CA0BEA8;
          sub_20FF18588(v21 - 800);
          v21 -= 816;
        }
        while (v21 != v20);
        v22 = *(void **)(a1 + 64);
      }
      *(_QWORD *)(a1 + 72) = v20;
      operator delete(v22);
    }
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v24 = *(std::__shared_weak_count **)(a1 + 24);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  v25 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  return a1;
}

void sub_20FF04C54(uint64_t a1)
{
  sub_20FF04930(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FF04C78(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD v25[13];
  void *v26[2];
  __int128 v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 __p;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;

  v8 = a3 + 2;
  v9 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *))(a3[2] + 16))(a3 + 2) + 96);
  v10 = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
  v12 = v10;
  v13 = 80;
  if (v9)
    v10 += 80;
  else
    v13 = 0;
  v14 = (_OWORD *)(a2 + 168);
  if (*(_BYTE *)(a2 + 184))
  {
    v11 = (unsigned __int8 *)(a2 + 176);
    if (*(unsigned __int8 *)(a2 + 176) != *(unsigned __int8 *)(v10 + 8))
    {
      sub_20FF00A74((uint64_t *)v10, v11, (uint64_t)v26);
      *(_OWORD *)a1 = *(_OWORD *)v26;
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a1 + 40) = 0;
        v15 = v29;
        if (v29)
        {
          *(_OWORD *)(a1 + 16) = v27;
          *(_QWORD *)(a1 + 32) = v28;
          v28 = 0;
          v27 = 0uLL;
          *(_BYTE *)(a1 + 40) = 1;
        }
        *(_BYTE *)(a1 + 48) = 0;
        *(_BYTE *)(a1 + 104) = 0;
        if (v35)
        {
          v16 = v32;
          *(_QWORD *)(a1 + 64) = v31;
          *(_OWORD *)(a1 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a1 + 72) = v16;
          *(_OWORD *)(a1 + 80) = __p;
          *(_QWORD *)(a1 + 96) = v34;
          v31 = 0;
          __p = 0uLL;
          v34 = 0;
          *(_BYTE *)(a1 + 104) = 1;
        }
        *(_BYTE *)(a1 + 112) = 1;
        *(_BYTE *)(a1 + 120) = 0;
        if (v15 && SHIBYTE(v28) < 0)
        {
          v17 = (void *)v27;
LABEL_38:
          operator delete(v17);
          return;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 120) = 0;
      }
      return;
    }
  }
  else
  {
    *v14 = *(_OWORD *)v10;
    *(_BYTE *)(a2 + 184) = 1;
  }
  v18 = *(_QWORD *)(v12 + v13) - *(_QWORD *)v14;
  if (!v18 || v18 < 0)
  {
    if (v18 <= -1000000001)
    {
      v25[0] = -(uint64_t)(-v18 / 0xF4240uLL);
      sub_20FF00D88((uint64_t *)v10, v25, (uint64_t)v26);
      if (*(_BYTE *)(a2 + 160))
      {
        v22 = *(_QWORD *)(a2 + 152);
        if (!v22)
          sub_20E86D37C();
        (*(void (**)(uint64_t, uint64_t, _QWORD *, void **))(*(_QWORD *)v22 + 48))(v22, a2 + 32, v8, v26);
      }
      if (v36)
      {
        if (v35)
        {
          if (SHIBYTE(v34) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v31) < 0)
            operator delete((void *)v30);
        }
        if (v29 && SHIBYTE(v28) < 0)
          operator delete((void *)v27);
      }
    }
  }
  else
  {
    v19 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *, unsigned __int8 *))(*v8 + 16))(v8, v11) + 96);
    v20 = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    v21 = (_QWORD *)(v20 + 80);
    if (!v19)
      v21 = (_QWORD *)v20;
    *(_QWORD *)v14 = *v21;
  }
  LOBYTE(v26[0]) = 0;
  LOBYTE(v28) = 0;
  v25[0] = a2;
  v25[1] = v26;
  v25[2] = a3;
  v23 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v23 == -1)
    sub_20E877AB8();
  v37 = v25;
  ((void (*)(_QWORD **, uint64_t))off_24CA0B660[v23])(&v37, a4);
  if ((_BYTE)v28)
  {
    sub_20FF0FD88(*(_QWORD *)(a2 + 216), a2 + 192, (std::mutex *)(a2 + 224), (const std::__fs::filesystem::path *)(a2 + 32), a3, (const std::__fs::filesystem::path *)v26, *(unsigned __int8 *)(a2 + 464));
    v24 = v28;
    *(_BYTE *)(a1 + 120) = 1;
    if (v24 && SBYTE7(v27) < 0)
    {
      v17 = v26[0];
      goto LABEL_38;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 1;
  }
}

void sub_20FF04FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E89EF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF04FB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,__int128 __p,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;
  _OWORD *v31;
  void *v32;
  char *v33;
  void *v34;
  char *v35;

  if (a28 && a26 < 0)
    operator delete((void *)__p);
  if (a2 == 4)
  {
    v31 = __cxa_begin_catch(a1);
    __p = v31[1];
    sub_20E89EFE4(&a23, v31 + 2);
    sub_20FDCAA88(v28, (uint64_t)&__p);
    sub_20E89EF58((uint64_t)&__p);
    __cxa_end_catch();
  }
  else
  {
    if (a2 == 3)
    {
      v32 = __cxa_begin_catch(a1);
      v33 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32);
      sub_20E89F6D4(&a10, v33);
      a21 = 1;
      sub_20FDD9B4C(2u, &a10, (uint64_t)&__p);
    }
    else
    {
      v34 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v35 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v34 + 16))(v34);
        sub_20E89F6D4(&a10, v35);
        a21 = 1;
        sub_20FDD9B4C(3u, &a10, (uint64_t)&__p);
      }
      else
      {
        LOBYTE(a10) = 0;
        a21 = 0;
        sub_20FDD9B4C(1u, &a10, (uint64_t)&__p);
      }
    }
    sub_20FDCAA88(v28, (uint64_t)&__p);
    sub_20E89EF58((uint64_t)&__p);
    sub_20E89F09C((uint64_t)&a10);
    __cxa_end_catch();
  }
  JUMPOUT(0x20FF04F78);
}

void sub_20FF050E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89F09C((uint64_t)va);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20FF05140(std::future<void> *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  uint64_t v11[2];
  char v12;
  _QWORD v13[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11[0] = a2;
  v11[1] = a3;
  if (*(_BYTE *)(a2 + 88))
  {
    v6 = *(_QWORD *)(a3 + 24);
    if (!v6)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v6 = *(_QWORD *)(a3 + 24);
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v6 + 48))(__p);
    v7 = *(_QWORD *)(a2 + 64);
    v8 = *(_QWORD *)(a2 + 72);
    if (v7 == v8)
      goto LABEL_12;
    while ((sub_20FF17674(v7, a3) & 1) == 0)
    {
      v7 += 816;
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
    if (v7 == *(_QWORD *)(a2 + 72))
    {
LABEL_12:
      v13[0] = 6;
      v14 = 0;
      sub_20FF05398(a1, v11, (uint64_t)v13);
      if (v14 == -1)
        goto LABEL_14;
    }
    else
    {
      if (*(_BYTE *)(v7 + 808))
      {
        sub_20FF05398(a1, v11, v7 + 768);
        goto LABEL_14;
      }
      v13[0] = 6;
      v14 = 0;
      sub_20FF05398(a1, v11, (uint64_t)v13);
      if (v14 == -1)
      {
LABEL_14:
        if (v10 < 0)
          operator delete(__p[0]);
        return;
      }
    }
    ((void (*)(char *, _QWORD *))off_24CA0B640[v14])(&v12, v13);
    goto LABEL_14;
  }
  v13[0] = 6;
  v14 = 0;
  sub_20FF05398(a1, v11, (uint64_t)v13);
  if (v14 != -1)
    ((void (*)(void **, _QWORD *))off_24CA0B640[v14])(__p, v13);
}

void sub_20FF05334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FF05398(std::future<void> *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  signed int v8;
  std::chrono::steady_clock::time_point v9;
  signed int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  std::promise<void> *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  void **v46;
  void *v47;
  std::__shared_weak_count *v48;
  uint64_t (***v49)();
  char *v50;
  char *v51;
  void **v52;
  std::future<void> *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  uint64_t (***v58)();
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void **v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v82;
  std::chrono::steady_clock::time_point v83;
  std::chrono::system_clock::time_point v84;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v85;
  signed int v86;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v87;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v88;
  uint64_t v89;
  std::chrono::system_clock::time_point v90;
  uint64_t v91;
  std::future<void> v93;
  std::unique_lock<std::mutex> __lk;
  void *v95;
  std::__shared_weak_count *v96;
  std::promise<void> *v97;
  std::__shared_weak_count *v98;
  char v99;
  char v100;
  std::__shared_weak_count *v101[2];
  void *v102[2];
  uint64_t (**v103)();
  void *v104[2];
  std::__shared_weak_count *v105;
  char v106;
  void *__p;
  int v108;
  char v109;
  char v110;
  char v111;
  unsigned __int8 v112;
  _QWORD v113[3];
  _QWORD *v114;
  __int128 v115;
  uint64_t (**v116)();
  __int128 v117;
  uint64_t (***v118)();
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void **v123;
  int v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  if (*(_BYTE *)(*a2 + 112))
  {
    v7 = a2[1];
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v6 + 352);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v6 + 352));
    if (!*(_BYTE *)(v6 + 104)
      || (v8 = atomic_load((unsigned int *)(v6 + 296)), *(_QWORD *)(v6 + 96) > (unint64_t)v8))
    {
LABEL_6:
      v11 = (unsigned int *)(v6 + 296);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(v6 + 288);
      v113[0] = &off_24CA0B820;
      v114 = v113;
      v14 = (std::promise<void> *)operator new(0x20uLL);
      v14[2].__state_ = 0;
      v14->__state_ = (std::__assoc_sub_state *)&unk_24C9B85F0;
      v14[1].__state_ = 0;
      v97 = std::promise<void>::promise(v14 + 3);
      v98 = (std::__shared_weak_count *)v14;
      std::promise<void>::get_future(v97);
      v16 = *(std::__shared_weak_count **)(v6 + 16);
      v15 = *(std::__shared_weak_count **)(v6 + 24);
      if (v15)
      {
        p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v18 = __ldxr(p_shared_weak_owners);
        while (__stxr(v18 + 1, p_shared_weak_owners));
      }
      v19 = *(void **)v7;
      v20 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)&v115 = *(_QWORD *)v7;
      *((_QWORD *)&v115 + 1) = v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v24 = *(_QWORD *)(v7 + 24);
      v23 = *(_QWORD *)(v7 + 32);
      v116 = &off_24CA0C0E8;
      *(_QWORD *)&v117 = v24;
      *((_QWORD *)&v117 + 1) = v23;
      if (v23)
      {
        v25 = (unint64_t *)(v23 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      LOBYTE(v121[0]) = 0;
      v124 = -1;
      v27 = *(unsigned int *)(a3 + 32);
      if ((_DWORD)v27 != -1)
      {
        ((void (*)(char *, void **, uint64_t))off_24CA0B650[v27])(&v99, v121, a3);
        v124 = v27;
        v19 = (void *)v115;
      }
      v101[0] = v16;
      v101[1] = v15;
      v102[0] = v19;
      v102[1] = *((void **)&v115 + 1);
      v115 = 0uLL;
      v103 = &off_24CA0C0E8;
      *(_OWORD *)v104 = v117;
      v117 = 0uLL;
      LOBYTE(v105) = 0;
      v108 = -1;
      if ((_DWORD)v27 != -1)
      {
        ((void (*)(char *, std::__shared_weak_count **, void **))off_24CA0B6F0[v27])(&v100, &v105, v121);
        v108 = v27;
      }
      v28 = (char *)operator new(0x78uLL);
      v29 = v28;
      v30 = *(_OWORD *)v102;
      *(_OWORD *)(v28 + 24) = *(_OWORD *)v101;
      v31 = v28 + 24;
      *(_QWORD *)v28 = &off_24CA0B6B0;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = 0;
      v101[0] = 0;
      v101[1] = 0;
      *(_OWORD *)(v28 + 40) = v30;
      v102[0] = 0;
      v102[1] = 0;
      *((_QWORD *)v28 + 7) = &off_24CA0C0E8;
      *((_OWORD *)v28 + 4) = *(_OWORD *)v104;
      v104[0] = 0;
      v104[1] = 0;
      v28[80] = 0;
      *((_DWORD *)v28 + 28) = -1;
      if ((_DWORD)v27 == -1)
      {
        v95 = v28 + 24;
        v96 = (std::__shared_weak_count *)v28;
        v108 = -1;
        v32 = (std::__shared_weak_count *)v104[1];
        if (!v104[1])
          goto LABEL_33;
      }
      else
      {
        ((void (*)(char *, char *, std::__shared_weak_count **))off_24CA0B6F0[v27])(&v100, v28 + 80, &v105);
        *((_DWORD *)v29 + 28) = v27;
        v95 = v31;
        v96 = (std::__shared_weak_count *)v29;
        if (v108 != -1)
          ((void (*)(char *, std::__shared_weak_count **))off_24CA0B640[v108])(&v100, &v105);
        v108 = -1;
        v32 = (std::__shared_weak_count *)v104[1];
        if (!v104[1])
        {
LABEL_33:
          v35 = (std::__shared_weak_count *)v102[1];
          if (v102[1])
          {
            v36 = (unint64_t *)((char *)v102[1] + 8);
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          if (v101[1])
            std::__shared_weak_count::__release_weak(v101[1]);
          if (v124 != -1)
            ((void (*)(char *, void **))off_24CA0B640[v124])(&v100, v121);
          v38 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
          if (*((_QWORD *)&v117 + 1))
          {
            v39 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          v41 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
          if (*((_QWORD *)&v115 + 1))
          {
            v42 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = (std::__shared_weak_count *)v97;
          v45 = v98;
          v101[0] = (std::__shared_weak_count *)v97;
          v101[1] = v98;
          v97 = 0;
          v98 = 0;
          v46 = v102;
          if (v114)
          {
            if (v114 == v113)
            {
              v104[0] = v102;
              (*(void (**)(uint64_t, _QWORD *))(v113[0] + 24))((uint64_t)v113, v102);
              v44 = v101[0];
              v45 = v101[1];
            }
            else
            {
              v104[0] = v114;
              v114 = 0;
            }
          }
          else
          {
            v104[0] = 0;
          }
          v47 = v95;
          v48 = v96;
          v104[1] = v95;
          v105 = v96;
          v95 = 0;
          v96 = 0;
          *(_QWORD *)&v115 = v44;
          *((_QWORD *)&v115 + 1) = v45;
          v101[0] = 0;
          v101[1] = 0;
          v49 = &v116;
          if (v104[0])
          {
            if (v104[0] == v102)
            {
              v118 = &v116;
              (*((void (**)(void **, uint64_t (***)()))v102[0] + 3))(v102, &v116);
              v47 = v104[1];
              v48 = v105;
            }
            else
            {
              v118 = (uint64_t (***)())v104[0];
              v104[0] = 0;
            }
          }
          else
          {
            v118 = 0;
          }
          v119 = v47;
          v120 = v48;
          v104[1] = 0;
          v105 = 0;
          v123 = 0;
          v50 = (char *)operator new(0x48uLL);
          v51 = v50;
          *(_QWORD *)v50 = &off_24CA0B710;
          *(_OWORD *)(v50 + 8) = v115;
          v115 = 0uLL;
          if (v118)
          {
            if (v118 == &v116)
            {
              *((_QWORD *)v50 + 6) = v50 + 24;
              ((void (*)(uint64_t (***)()))v116[3])(&v116);
              v47 = v119;
              v48 = v120;
            }
            else
            {
              *((_QWORD *)v50 + 6) = v118;
              v118 = 0;
            }
          }
          else
          {
            *((_QWORD *)v50 + 6) = 0;
          }
          *((_QWORD *)v51 + 7) = v47;
          *((_QWORD *)v51 + 8) = v48;
          v119 = 0;
          v120 = 0;
          v123 = (void **)v51;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 40))(v13, v121);
          v52 = v123;
          if (v123 == v121)
          {
            v54 = 4;
            v52 = v121;
            v53 = a1;
          }
          else
          {
            v53 = a1;
            if (!v123)
            {
LABEL_72:
              v55 = v120;
              if (!v120)
                goto LABEL_76;
              p_shared_owners = (unint64_t *)&v120->__shared_owners_;
              do
                v57 = __ldaxr(p_shared_owners);
              while (__stlxr(v57 - 1, p_shared_owners));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
                v58 = v118;
                if (v118 != &v116)
                  goto LABEL_77;
              }
              else
              {
LABEL_76:
                v58 = v118;
                if (v118 != &v116)
                {
LABEL_77:
                  if (!v58)
                  {
LABEL_82:
                    v60 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
                    if (!*((_QWORD *)&v115 + 1))
                      goto LABEL_86;
                    v61 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
                    do
                      v62 = __ldaxr(v61);
                    while (__stlxr(v62 - 1, v61));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                      v63 = v105;
                      if (!v105)
                        goto LABEL_90;
                    }
                    else
                    {
LABEL_86:
                      v63 = v105;
                      if (!v105)
                        goto LABEL_90;
                    }
                    v64 = (unint64_t *)&v63->__shared_owners_;
                    do
                      v65 = __ldaxr(v64);
                    while (__stlxr(v65 - 1, v64));
                    if (!v65)
                    {
                      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                      std::__shared_weak_count::__release_weak(v63);
                      v66 = (void **)v104[0];
                      if (v104[0] != v102)
                        goto LABEL_91;
                      goto LABEL_96;
                    }
LABEL_90:
                    v66 = (void **)v104[0];
                    if (v104[0] != v102)
                    {
LABEL_91:
                      if (!v66)
                      {
LABEL_98:
                        v68 = v101[1];
                        if (v101[1])
                        {
                          v69 = &v101[1]->__shared_owners_;
                          do
                            v70 = __ldaxr((unint64_t *)v69);
                          while (__stlxr(v70 - 1, (unint64_t *)v69));
                          if (!v70)
                          {
                            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                            std::__shared_weak_count::__release_weak(v68);
                          }
                        }
                        v71 = v96;
                        if (!v96)
                          goto LABEL_107;
                        v72 = (unint64_t *)&v96->__shared_owners_;
                        do
                          v73 = __ldaxr(v72);
                        while (__stlxr(v73 - 1, v72));
                        if (!v73)
                        {
                          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                          std::__shared_weak_count::__release_weak(v71);
                          v74 = v98;
                          if (!v98)
                            goto LABEL_111;
                        }
                        else
                        {
LABEL_107:
                          v74 = v98;
                          if (!v98)
                            goto LABEL_111;
                        }
                        v75 = (unint64_t *)&v74->__shared_owners_;
                        do
                          v76 = __ldaxr(v75);
                        while (__stlxr(v76 - 1, v75));
                        if (!v76)
                        {
                          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                          std::__shared_weak_count::__release_weak(v74);
                          v77 = v114;
                          if (v114 != v113)
                            goto LABEL_112;
                          goto LABEL_117;
                        }
LABEL_111:
                        v77 = v114;
                        if (v114 != v113)
                        {
LABEL_112:
                          if (!v77)
                          {
LABEL_119:
                            if (__lk.__owns_)
                              std::mutex::unlock(__lk.__m_);
                            v53->__state_ = v93.__state_;
                            v93.__state_ = 0;
                            LOBYTE(v53[1].__state_) = 1;
                            std::future<void>::~future(&v93);
                            return;
                          }
                          v78 = 5;
LABEL_118:
                          (*(void (**)(void))(*v77 + 8 * v78))();
                          goto LABEL_119;
                        }
LABEL_117:
                        v78 = 4;
                        v77 = v113;
                        goto LABEL_118;
                      }
                      v67 = 5;
                      v46 = v66;
LABEL_97:
                      (*((void (**)(void **))*v46 + v67))(v46);
                      goto LABEL_98;
                    }
LABEL_96:
                    v67 = 4;
                    goto LABEL_97;
                  }
                  v59 = 5;
                  v49 = v58;
LABEL_81:
                  ((void (*)(uint64_t (***)()))(*v49)[v59])(v49);
                  goto LABEL_82;
                }
              }
              v59 = 4;
              goto LABEL_81;
            }
            v54 = 5;
          }
          (*((void (**)(void))*v52 + v54))();
          goto LABEL_72;
        }
      }
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      goto LABEL_33;
    }
    v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v10 = atomic_load((unsigned int *)(v6 + 296));
    if (!*(_BYTE *)(v6 + 104))
      goto LABEL_192;
    if (*(_QWORD *)(v6 + 96) > (unint64_t)v10)
      goto LABEL_6;
    rep = v9.__d_.__rep_;
    LODWORD(v117) = 0;
    sub_20EA7737C(&v115, "blocking caller while waiting for space in queue");
    if ((_DWORD)v117 == -1)
LABEL_193:
      sub_20E877AB8();
    v113[0] = &v97;
    ((void (*)(void **__return_ptr, _QWORD *, __int128 *))off_24CA0B688[v117])(v121, v113, &v115);
    if ((_DWORD)v117 != -1)
      ((void (*)(_QWORD *, __int128 *))off_24CA0B670[v117])(v113, &v115);
    sub_20FF0120C((uint64_t *)v121, *(_QWORD *)(v6 + 96), *(_QWORD *)(v6 + 104), (uint64_t)v101);
    v91 = v7 + 16;
    if (*(_BYTE *)(v6 + 160))
    {
      v82 = *(_QWORD *)(v6 + 152);
      if (!v82)
LABEL_194:
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, std::__shared_weak_count **))(*(_QWORD *)v82 + 48))(v82, v6 + 32, v91, v101);
    }
    if (v111)
    {
      if (v110)
      {
        if (v109 < 0)
          operator delete(__p);
        if (v106 < 0)
          operator delete(v104[1]);
      }
      if (LOBYTE(v104[0]) && SHIBYTE(v103) < 0)
        operator delete(v102[0]);
    }
    if (v122 < 0)
      operator delete(v121[0]);
    v83.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    std::chrono::steady_clock::now();
    v84.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v85.__d_.__rep_ = 1000000000;
    if (v84.__d_.__rep_)
    {
      if (v84.__d_.__rep_ <= 0)
      {
        v85.__d_.__rep_ = 0x800000003B9ACA00;
        if ((unint64_t)v84.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          goto LABEL_160;
      }
      else if ((unint64_t)v84.__d_.__rep_ >= 0x20C49BA5D411B8)
      {
        v85.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_160;
      }
      v85.__d_.__rep_ = 1000 * v84.__d_.__rep_ + 1000000000;
    }
LABEL_160:
    std::condition_variable::__do_timed_wait((std::condition_variable *)(v6 + 304), &__lk, v85);
    std::chrono::steady_clock::now();
    v86 = atomic_load((unsigned int *)(v6 + 296));
    if (*(_BYTE *)(v6 + 104))
    {
      v87 = v83.__d_.__rep_ - rep;
      while (1)
      {
        if (*(_QWORD *)(v6 + 96) > (unint64_t)v86)
          goto LABEL_6;
        if (std::chrono::steady_clock::now().__d_.__rep_ - (v87 + rep) >= 500000000)
          break;
LABEL_182:
        std::chrono::steady_clock::now();
        v90.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        v88.__d_.__rep_ = 1000000000;
        if (v90.__d_.__rep_)
        {
          if (v90.__d_.__rep_ < 1)
          {
            if ((unint64_t)v90.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
              v88.__d_.__rep_ = 1000 * v90.__d_.__rep_ + 1000000000;
            else
              v88.__d_.__rep_ = 0x800000003B9ACA00;
          }
          else if ((unint64_t)v90.__d_.__rep_ >= 0x20C49BA5D411B8)
          {
            v88.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v88.__d_.__rep_ = 1000 * v90.__d_.__rep_ + 1000000000;
          }
        }
        std::condition_variable::__do_timed_wait((std::condition_variable *)(v6 + 304), &__lk, v88);
        std::chrono::steady_clock::now();
        v86 = atomic_load((unsigned int *)(v6 + 296));
        if (!*(_BYTE *)(v6 + 104))
          goto LABEL_192;
      }
      LODWORD(v117) = 0;
      sub_20EA7737C(&v115, "blocking caller while waiting for space in queue");
      if ((_DWORD)v117 == -1)
        goto LABEL_193;
      v113[0] = &v97;
      ((void (*)(void **__return_ptr, _QWORD *, __int128 *))off_24CA0B688[v117])(v121, v113, &v115);
      if ((_DWORD)v117 != -1)
        ((void (*)(_QWORD *, __int128 *))off_24CA0B670[v117])(v113, &v115);
      sub_20FF0120C((uint64_t *)v121, *(_QWORD *)(v6 + 96), *(_QWORD *)(v6 + 104), (uint64_t)v101);
      if (*(_BYTE *)(v6 + 160))
      {
        v89 = *(_QWORD *)(v6 + 152);
        if (!v89)
          goto LABEL_194;
        (*(void (**)(uint64_t, uint64_t, uint64_t, std::__shared_weak_count **))(*(_QWORD *)v89 + 48))(v89, v6 + 32, v91, v101);
      }
      if (!v111)
        goto LABEL_179;
      if (!v110)
        goto LABEL_176;
      if (v109 < 0)
      {
        operator delete(__p);
        if ((v106 & 0x80000000) == 0)
        {
LABEL_176:
          if (LOBYTE(v104[0]))
            goto LABEL_177;
          goto LABEL_179;
        }
      }
      else if ((v106 & 0x80000000) == 0)
      {
        goto LABEL_176;
      }
      operator delete(v104[1]);
      if (LOBYTE(v104[0]))
      {
LABEL_177:
        if (SHIBYTE(v103) < 0)
          operator delete(v102[0]);
      }
LABEL_179:
      if (v122 < 0)
        operator delete(v121[0]);
      v87 = std::chrono::steady_clock::now().__d_.__rep_ - rep;
      goto LABEL_182;
    }
LABEL_192:
    sub_20E866B34();
  }
  sub_20FF04C78((uint64_t)v101, *a2, (_QWORD *)a2[1], a3);
  if (v112)
  {
    LOBYTE(a1->__state_) = 0;
    LOBYTE(a1[1].__state_) = 0;
    return;
  }
  if (!*(_BYTE *)(v6 + 160))
  {
    LOBYTE(a1->__state_) = 0;
    LOBYTE(a1[1].__state_) = 0;
LABEL_149:
    if (v111)
    {
      if (v110)
      {
        if (v109 < 0)
          operator delete(__p);
        if (v106 < 0)
          operator delete(v104[1]);
      }
      if (LOBYTE(v104[0]) && SHIBYTE(v103) < 0)
        operator delete(v102[0]);
    }
    return;
  }
  v79 = *(_QWORD *)(v6 + 152);
  if (!v79)
    sub_20E86D37C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, std::__shared_weak_count **))(*(_QWORD *)v79 + 48))(v79, v6 + 32, a2[1] + 16, v101);
  v80 = v112;
  LOBYTE(a1->__state_) = 0;
  LOBYTE(a1[1].__state_) = 0;
  if (!v80)
    goto LABEL_149;
}

void sub_20FF0603C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::future<void> a11, std::mutex *a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;

  sub_20E89EF58((uint64_t)&a25);
  if (*(char *)(v44 - 113) < 0)
    operator delete(*(void **)(v44 - 136));
  if (!a13)
    _Unwind_Resume(a1);
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF0621C(uint64_t a1, uint64_t a2)
{
  std::future<void> v4;
  char v5;

  sub_20FF05140(&v4, a1, a2);
  if (v5)
    std::future<void>::~future(&v4);
  return a1;
}

_QWORD *sub_20FF06264(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  int v14;
  uint64_t *v15;
  void **v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  _OWORD *v40;
  uint64_t v41;
  BOOL v42;
  void **v43;
  size_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void **v58;
  char *v59;
  void **v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  void **v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  void *v77[2];
  uint64_t *v78;
  char v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  void *v82;
  char v83;
  void *__p;
  char v85;
  char v86;
  char v87;
  char v88;
  uint64_t v89;
  _BYTE v90[2];
  _QWORD v91[3];
  void **v92;
  unsigned __int8 v93;
  void *v94;
  void *v95;
  uint64_t v96;
  void **v97;
  unsigned __int8 v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24CA0B548;
  LOBYTE(v91[0]) = 0;
  v93 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v9 = *(_QWORD *)(a4 + 24);
    if (v9)
    {
      if (v9 == a4)
      {
        v92 = (void **)v91;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 24))(a4, v91);
      }
      else
      {
        v92 = *(void ***)(a4 + 24);
        *(_QWORD *)(a4 + 24) = 0;
      }
    }
    else
    {
      v92 = 0;
    }
    v93 = 1;
  }
  if (*((_BYTE *)a3 + 48))
  {
    sub_210218568("VDataExporter", 0, 2u, 0, 0, 0, (uint64_t *)&v94);
    v10 = v94;
    v77[0] = &off_24CA1E2F8;
    v77[1] = v94;
    v11 = (_QWORD *)operator new();
    *v11 = &off_24C9B1898;
    v12 = (_QWORD *)operator new();
    *v12 = &off_24CA1E2F8;
    v12[1] = v10;
    v11[1] = v12;
  }
  else
  {
    v11 = 0;
  }
  v13 = (char *)operator new(0x1F0uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24CA0B7D0;
  LOBYTE(v94) = 0;
  v98 = 0;
  v14 = v93;
  v70 = a2;
  v71 = a3;
  if (v93)
  {
    if (v92)
    {
      if (v92 == v91)
      {
        v97 = &v94;
        (*(void (**)(_QWORD *, void **))(v91[0] + 24))(v91, &v94);
      }
      else
      {
        v97 = v92;
        v92 = 0;
      }
    }
    else
    {
      v97 = 0;
    }
    v14 = 1;
    v98 = 1;
  }
  *((_OWORD *)v13 + 2) = 0u;
  v15 = (uint64_t *)(v13 + 32);
  *((_QWORD *)v13 + 3) = &off_24CA0B510;
  v16 = (void **)(v13 + 56);
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_QWORD *)v13 + 10) = a5;
  v13[88] = 0;
  v13[112] = 0;
  if (*((_BYTE *)v71 + 24))
  {
    *((_QWORD *)v13 + 11) = 0;
    *((_QWORD *)v13 + 12) = 0;
    *((_QWORD *)v13 + 13) = 0;
    v17 = *v71;
    v72 = v71[1];
    v18 = v72 - *v71;
    if (v72 != *v71)
    {
      v19 = 0xFAFAFAFAFAFAFAFBLL * (v18 >> 4);
      if (v19 >= 0x50505050505051)
        sub_20E867F44();
      v20 = (char *)operator new(v18);
      *((_QWORD *)v13 + 11) = v20;
      *((_QWORD *)v13 + 12) = v20;
      *((_QWORD *)v13 + 13) = &v20[816 * v19];
      v73 = (uint64_t)v20;
      v89 = (uint64_t)v20;
      v77[0] = v13 + 104;
      v77[1] = &v89;
      v78 = &v73;
      v79 = 0;
      v21 = v20;
      do
      {
        *(_QWORD *)v21 = &off_24CA0BEA8;
        v21[16] = 0;
        v21[64] = 0;
        if (*(_BYTE *)(v17 + 64))
        {
          v21[24] = 0;
          *((_DWORD *)v21 + 14) = -1;
          v22 = *(unsigned int *)(v17 + 56);
          if ((_DWORD)v22 != -1)
          {
            ((void (*)(_BYTE *, char *, uint64_t))off_24CA0B5B0[v22])(v90, v21 + 24, v17 + 24);
            *((_DWORD *)v21 + 14) = v22;
          }
          v21[64] = 1;
        }
        v23 = *(_QWORD *)(v17 + 72);
        v24 = *(_DWORD *)(v17 + 80);
        v21[88] = 0;
        *((_DWORD *)v21 + 20) = v24;
        *((_QWORD *)v21 + 9) = v23;
        v21[128] = 0;
        if (*(_BYTE *)(v17 + 128))
        {
          v21[88] = 0;
          v21[120] = 0;
          if (*(_BYTE *)(v17 + 120))
          {
            if (*(char *)(v17 + 111) < 0)
            {
              sub_20E860C04(v21 + 88, *(void **)(v17 + 88), *(_QWORD *)(v17 + 96));
            }
            else
            {
              v25 = *(_OWORD *)(v17 + 88);
              *((_QWORD *)v21 + 13) = *(_QWORD *)(v17 + 104);
              *(_OWORD *)(v21 + 88) = v25;
            }
            *((_DWORD *)v21 + 28) = *(_DWORD *)(v17 + 112);
            v21[120] = 1;
          }
          v21[128] = 1;
        }
        v21[136] = 0;
        v21[168] = 0;
        if (*(_BYTE *)(v17 + 168))
        {
          v21[136] = 0;
          *((_DWORD *)v21 + 40) = -1;
          v26 = *(unsigned int *)(v17 + 160);
          if ((_DWORD)v26 != -1)
          {
            ((void (*)(_BYTE *, char *, uint64_t))off_24CA0B5D0[v26])(v90, v21 + 136, v17 + 136);
            *((_DWORD *)v21 + 40) = v26;
          }
          v21[168] = 1;
        }
        v21[176] = 0;
        v21[240] = 0;
        if (*(_BYTE *)(v17 + 240))
        {
          v21[176] = 0;
          *((_DWORD *)v21 + 58) = -1;
          v27 = *(unsigned int *)(v17 + 232);
          if ((_DWORD)v27 != -1)
          {
            ((void (*)(_BYTE *, char *, uint64_t))off_24CA0B5F0[v27])(v90, v21 + 176, v17 + 176);
            *((_DWORD *)v21 + 58) = v27;
          }
          v21[240] = 1;
        }
        v21[248] = 0;
        v21[272] = 0;
        if (*(_BYTE *)(v17 + 272))
        {
          *((_QWORD *)v21 + 31) = &off_24CA0C0E8;
          *((_QWORD *)v21 + 32) = *(_QWORD *)(v17 + 256);
          v28 = *(_QWORD *)(v17 + 264);
          *((_QWORD *)v21 + 33) = v28;
          if (v28)
          {
            v29 = (unint64_t *)(v28 + 8);
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
          }
          v21[272] = 1;
        }
        v21[280] = 0;
        v21[328] = 0;
        if (*(_BYTE *)(v17 + 328))
        {
          v21[288] = 0;
          *((_DWORD *)v21 + 80) = -1;
          v31 = *(unsigned int *)(v17 + 320);
          if ((_DWORD)v31 != -1)
          {
            ((void (*)(_BYTE *, char *, uint64_t))off_24CA0B5B0[v31])(v90, v21 + 288, v17 + 288);
            *((_DWORD *)v21 + 80) = v31;
          }
          v21[328] = 1;
        }
        v21[336] = 0;
        v21[432] = 0;
        if (*(_BYTE *)(v17 + 432))
        {
          v21[352] = 0;
          *((_DWORD *)v21 + 104) = -1;
          v32 = *(unsigned int *)(v17 + 416);
          if ((_DWORD)v32 != -1)
          {
            ((void (*)(_BYTE *, char *, uint64_t))off_24CA0B610[v32])(v90, v21 + 352, v17 + 352);
            *((_DWORD *)v21 + 104) = v32;
          }
          v21[432] = 1;
        }
        v21[448] = 0;
        v21[592] = 0;
        if (*(_BYTE *)(v17 + 592))
        {
          v21[464] = 0;
          *((_DWORD *)v21 + 144) = -1;
          v33 = *(unsigned int *)(v17 + 576);
          if ((_DWORD)v33 != -1)
          {
            ((void (*)(_BYTE *, char *, uint64_t))off_24CA0B630[v33])(v90, v21 + 464, v17 + 464);
            *((_DWORD *)v21 + 144) = v33;
          }
          v21[592] = 1;
        }
        v21[608] = 0;
        v21[640] = 0;
        if (*(_BYTE *)(v17 + 640))
        {
          sub_20EB0A0E8((uint64_t)(v21 + 608), v17 + 608);
          v21[640] = 1;
        }
        v21[648] = 0;
        v21[696] = 0;
        if (*(_BYTE *)(v17 + 696))
        {
          v21[656] = 0;
          *((_DWORD *)v21 + 172) = -1;
          v34 = *(unsigned int *)(v17 + 688);
          if ((_DWORD)v34 != -1)
          {
            ((void (*)(_BYTE *, char *, uint64_t))off_24CA0B5B0[v34])(v90, v21 + 656, v17 + 656);
            *((_DWORD *)v21 + 172) = v34;
          }
          v21[696] = 1;
        }
        v35 = *(_OWORD *)(v17 + 704);
        v36 = *(_OWORD *)(v17 + 720);
        v37 = *(_OWORD *)(v17 + 736);
        *(_OWORD *)(v21 + 745) = *(_OWORD *)(v17 + 745);
        *((_OWORD *)v21 + 45) = v36;
        *((_OWORD *)v21 + 46) = v37;
        *((_OWORD *)v21 + 44) = v35;
        v21[768] = 0;
        v21[808] = 0;
        if (*(_BYTE *)(v17 + 808))
        {
          v21[768] = 0;
          *((_DWORD *)v21 + 200) = -1;
          v38 = *(unsigned int *)(v17 + 800);
          if ((_DWORD)v38 != -1)
          {
            ((void (*)(_BYTE *, char *, uint64_t))off_24CA0B650[v38])(v90, v21 + 768, v17 + 768);
            *((_DWORD *)v21 + 200) = v38;
          }
          v21[808] = 1;
        }
        v17 += 816;
        v21 = (char *)(v73 + 816);
        v73 += 816;
      }
      while (v17 != v72);
      *((_QWORD *)v13 + 12) = v21;
      v14 = v98;
      v15 = (uint64_t *)(v13 + 32);
    }
    v13[112] = 1;
    v16 = (void **)(v13 + 56);
  }
  v13[152] = 0;
  v39 = *((_OWORD *)v71 + 3);
  *(_OWORD *)(v13 + 120) = *((_OWORD *)v71 + 2);
  *(_OWORD *)(v13 + 136) = v39;
  v13[184] = 0;
  if (v14)
  {
    if (v97)
    {
      if (v97 == &v94)
      {
        *((_QWORD *)v13 + 22) = v13 + 152;
        (*((void (**)(void **, char *))v94 + 3))(&v94, v13 + 152);
      }
      else
      {
        *((_QWORD *)v13 + 22) = v97;
        v97 = 0;
      }
    }
    else
    {
      *((_QWORD *)v13 + 22) = 0;
    }
    v13[184] = 1;
  }
  *((_QWORD *)v13 + 31) = 850045863;
  v13[192] = 0;
  v13[208] = 0;
  *((_QWORD *)v13 + 27) = &off_24CA1F288;
  *((_QWORD *)v13 + 28) = 0;
  *((_QWORD *)v13 + 29) = 0;
  *((_QWORD *)v13 + 30) = 0;
  *((_OWORD *)v13 + 16) = 0u;
  *((_OWORD *)v13 + 17) = 0u;
  *((_OWORD *)v13 + 18) = 0u;
  *((_QWORD *)v13 + 38) = 0;
  *((_QWORD *)v13 + 39) = v11;
  *((_DWORD *)v13 + 80) = 0;
  *((_QWORD *)v13 + 41) = 1018212795;
  *((_OWORD *)v13 + 21) = 0u;
  *((_OWORD *)v13 + 22) = 0u;
  *((_QWORD *)v13 + 46) = 0;
  *((_QWORD *)v13 + 47) = 850045863;
  v40 = v13 + 440;
  v13[480] = 0;
  *((_OWORD *)v13 + 24) = 0u;
  *((_OWORD *)v13 + 26) = 0u;
  *(_OWORD *)(v13 + 425) = 0u;
  v41 = *((_QWORD *)v13 + 18);
  *((_OWORD *)v13 + 25) = 0u;
  if ((unint64_t)(v41 - 1) < 2)
  {
    *v40 = 0uLL;
    *(_OWORD *)(v13 + 456) = 0uLL;
    *((_DWORD *)v13 + 118) = 1065353216;
    v13[480] = 1;
LABEL_83:
    v42 = (v41 & 0xFFFFFFFFFFFFFFFELL) == 2;
    goto LABEL_84;
  }
  if (v41)
    goto LABEL_83;
  if (*((_BYTE *)v71 + 48))
  {
    *v40 = 0uLL;
    *(_OWORD *)(v13 + 456) = 0uLL;
    *((_DWORD *)v13 + 118) = 1065353216;
    v13[480] = 1;
    v13[488] = 0;
    goto LABEL_85;
  }
  v42 = 1;
LABEL_84:
  v13[488] = v42;
LABEL_85:
  v73 = 0x500000001;
  v74 = 0;
  v75 = 1;
  v76 = 0;
  sub_20FF0CF5C(v70, a5, (uint64_t)&v73, (uint64_t)v77);
  if (!v88)
  {
    sub_20ED3C7D0((uint64_t)v77);
    sub_20E9F5CE8((uint64_t)v77);
  }
  if (v13[79] < 0)
  {
    if (SHIBYTE(v78) >= 0)
      v43 = v77;
    else
      v43 = (void **)v77[0];
    if (SHIBYTE(v78) >= 0)
      v44 = HIBYTE(v78);
    else
      v44 = (size_t)v77[1];
    sub_20E867CBC(v16, v43, v44);
  }
  else if ((HIBYTE(v78) & 0x80) != 0)
  {
    sub_20E867BF8(v16, v77[0], (size_t)v77[1]);
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)v77;
    v16[2] = v78;
  }
  v46 = v80;
  v45 = v81;
  if (v81)
  {
    p_shared_owners = (unint64_t *)&v81->__shared_owners_;
    do
      v48 = __ldxr(p_shared_owners);
    while (__stxr(v48 + 1, p_shared_owners));
  }
  v49 = (std::__shared_weak_count *)*((_QWORD *)v13 + 29);
  *((_QWORD *)v13 + 28) = v46;
  *((_QWORD *)v13 + 29) = v45;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 28) + 16))(*((_QWORD *)v13 + 28));
  v53 = (_QWORD *)operator new();
  v89 = 0x400000001;
  sub_20E9E9588((uint64_t)v53, &v89, v52, 0, 0, 0);
  *v53 = &off_24CA0BA78;
  v53[2] = &unk_24CA0BBC8;
  v54 = *((_QWORD *)v13 + 30);
  *((_QWORD *)v13 + 30) = v53;
  if (v54)
    MEMORY[0x212BC6398](v54, 0x10A1C40756C35FELL);
  if (v88)
  {
    v55 = v81;
    if (!v81)
      goto LABEL_112;
    v56 = (unint64_t *)&v81->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (v57)
    {
LABEL_112:
      if ((SHIBYTE(v78) & 0x80000000) == 0)
        goto LABEL_125;
      goto LABEL_113;
    }
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    if (SHIBYTE(v78) < 0)
    {
LABEL_113:
      v58 = v77;
LABEL_123:
      operator delete(*v58);
    }
  }
  else if (v87)
  {
    if (v86)
    {
      if (v85 < 0)
        operator delete(__p);
      if (v83 < 0)
        operator delete(v82);
    }
    if ((_BYTE)v81 && SHIBYTE(v80) < 0)
    {
      v58 = (void **)&v78;
      goto LABEL_123;
    }
  }
LABEL_125:
  v59 = v13 + 24;
  if (v98)
  {
    v60 = v97;
    if (v97 == &v94)
    {
      v61 = 4;
      v60 = &v94;
      goto LABEL_130;
    }
    if (v97)
    {
      v61 = 5;
LABEL_130:
      (*((void (**)(void **))*v60 + v61))(v60);
    }
  }
  a1[1] = v59;
  a1[2] = v13;
  v62 = (_QWORD *)operator new();
  v94 = 0;
  v95 = 0;
  v96 = 0;
  LOBYTE(v77[0]) = 0;
  v79 = 0;
  sub_20FF20DA0(v62, 1, (uint64_t)&v94, (uint64_t *)v77);
  if (v79 && SHIBYTE(v78) < 0)
    operator delete(v77[0]);
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  v63 = *v15;
  *v15 = (uint64_t)v62;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = (unint64_t *)(v13 + 16);
  do
    v65 = __ldxr(v64);
  while (__stxr(v65 + 1, v64));
  v66 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  *((_QWORD *)v13 + 5) = v59;
  *((_QWORD *)v13 + 6) = v13;
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
  if (v93)
  {
    v67 = v92;
    if (v92 == v91)
    {
      v68 = 4;
      v67 = (void **)v91;
      goto LABEL_147;
    }
    if (v92)
    {
      v68 = 5;
LABEL_147:
      (*((void (**)(void **))*v67 + v68))(v67);
    }
  }
  return a1;
}

void sub_20FF06E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _Unwind_Exception *exception_object, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20E860DA4(a1);
}

uint64_t sub_20FF07578(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 112))
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 288) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 288) + 8));
    if (*(_BYTE *)(v2 + 456))
      sub_20FF0981C(v2 + 416, 0, 0);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20FF07620(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 112))
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 288) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 288) + 8));
    if (*(_BYTE *)(v2 + 456))
      sub_20FF0981C(v2 + 416, 0, 0);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF076C8(uint64_t a1, uint64_t a2)
{
  std::future<void> v4;
  char v5;

  sub_20FF05140(&v4, *(_QWORD *)(a1 + 8), a2);
  if (v5)
    std::future<void>::~future(&v4);
  return a1;
}

uint64_t sub_20FF07710(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v10;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v4);
  }
  v8 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_24CA0B798[v8])(&v10, a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20FF07808(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FF07868(uint64_t a1)
{
  sub_20FDE1770(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FF078B0(uint64_t a1)
{
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 96));
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_8;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 119) < 0)
    goto LABEL_6;
LABEL_3:
  if (!*(_BYTE *)(a1 + 88))
  {
LABEL_8:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_12:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_13;
  }
LABEL_7:
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    goto LABEL_8;
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_12;
LABEL_9:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_13:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20FF0795C(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_10:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_10;
LABEL_5:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_11:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20FF079FC(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  char v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = *(uint64_t **)(a1 + 8);
    v3 = *(uint64_t **)(a1 + 16);
    v5 = *v3;
    for (i = *v4; v5 != i; v5 -= 816)
    {
      if (*(_BYTE *)(v5 - 8))
      {
        v7 = *(unsigned int *)(v5 - 16);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, uint64_t))off_24CA0B640[v7])(&v8, v5 - 48);
        *(_DWORD *)(v5 - 16) = -1;
      }
      *(_QWORD *)(v5 - 816) = &off_24CA0BEA8;
      sub_20FF18588(v5 - 800);
    }
  }
  return a1;
}

uint64_t sub_20FF07ABC(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v2 = *(void ***)a1;
      if (*(_QWORD *)a1)
      {
        v3 = *(void ***)(a1 + 8);
        v4 = *(void ***)a1;
        if (v3 == v2)
        {
LABEL_15:
          *(_QWORD *)(a1 + 8) = v2;
          operator delete(v4);
          return a1;
        }
        while (1)
        {
          if (*((_BYTE *)v3 - 16) && *((char *)v3 - 41) < 0)
          {
            operator delete(*(v3 - 8));
            if (*((_BYTE *)v3 - 72))
            {
LABEL_10:
              if (*((char *)v3 - 73) < 0)
                operator delete(*(v3 - 12));
            }
          }
          else if (*((_BYTE *)v3 - 72))
          {
            goto LABEL_10;
          }
          v3 -= 12;
          if (v3 == v2)
          {
            v4 = *(void ***)a1;
            goto LABEL_15;
          }
        }
      }
    }
  }
  return a1;
}

uint64_t sub_20FF07B68(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 144))
  {
    v2 = *(unsigned int *)(a1 + 128);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA0B620[v2])(&v4, a1 + 16);
    *(_DWORD *)(a1 + 128) = -1;
  }
  return a1;
}

uint64_t sub_20FF07BC8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA0B600[v2])(&v4, a1 + 16);
    *(_DWORD *)(a1 + 80) = -1;
  }
  return a1;
}

uint64_t sub_20FF07C28(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA0B5A0[v2])(&v4, a1 + 8);
    *(_DWORD *)(a1 + 40) = -1;
  }
  return a1;
}

uint64_t sub_20FF07C88(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA0B5E0[v2])(&v4, a1);
    *(_DWORD *)(a1 + 56) = -1;
  }
  return a1;
}

uint64_t sub_20FF07CE8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA0B5C0[v2])(&v4, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t sub_20FF07D48(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 40) && *(_BYTE *)(result + 32) && *(char *)(result + 23) < 0)
  {
    operator delete(*(void **)result);
    return v1;
  }
  return result;
}

void sub_20FF07D98(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
  }
}

void sub_20FF07DB4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void *sub_20FF07DC8(int a1, _BYTE *__dst, __int128 *a3)
{
  __int128 v4;
  void *result;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a3 + 24))
  {
    if (*((char *)a3 + 23) < 0)
    {
      result = sub_20E860C04(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v4 = *a3;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  return result;
}

void sub_20FF07E24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20FF07E48(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20E860C04(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_20FF07E74(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_20FF07E88(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void *sub_20FF07E9C(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20E860C04(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void *sub_20FF07EC8(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20E860C04(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_20FF07EF4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48) && *(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_20FF07F40(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void *sub_20FF07F54(int a1, _BYTE *__dst, __int128 *a3)
{
  __int128 v5;
  char *v6;
  void *result;
  __int128 v8;

  if (*((char *)a3 + 23) < 0)
  {
    result = sub_20E860C04(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    __dst[24] = 0;
    v6 = __dst + 24;
    __dst[48] = 0;
    if (!*((_BYTE *)a3 + 48))
      return result;
  }
  else
  {
    v5 = *a3;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
    __dst[24] = 0;
    v6 = __dst + 24;
    __dst[48] = 0;
    if (!*((_BYTE *)a3 + 48))
      return result;
  }
  if (*((char *)a3 + 47) < 0)
  {
    result = sub_20E860C04(v6, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)a3 + 24);
    *((_QWORD *)v6 + 2) = *((_QWORD *)a3 + 5);
    *(_OWORD *)v6 = v8;
  }
  __dst[48] = 1;
  return result;
}

void sub_20FF08020(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *sub_20FF08054(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20E860C04(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_20FF08080(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
  }
}

void sub_20FF0809C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void *sub_20FF080B0(int a1, _BYTE *__dst, __int128 *a3)
{
  __int128 v5;
  void *result;
  unsigned __int128 *v7;
  unsigned __int128 v8;

  *__dst = 0;
  __dst[48] = 0;
  if (*((_BYTE *)a3 + 48))
  {
    if (*((char *)a3 + 23) < 0)
    {
      result = sub_20E860C04(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v5 = *a3;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)__dst = v5;
    }
    v7 = (unsigned __int128 *)(a3 + 2);
    do
      v8 = __ldaxp(v7);
    while (__stlxp(v8, v7));
    *((_OWORD *)__dst + 2) = v8;
    __dst[48] = 1;
  }
  return result;
}

void sub_20FF08124(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20FF08148(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20E860C04(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_20FF08174(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 96))
  {
    if (*(_BYTE *)(a2 + 80) && *(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
    }
  }
}

void sub_20FF081D0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_BYTE *sub_20FF081E4(int a1, _BYTE *__dst, uint64_t a3)
{
  _BYTE *result;

  *__dst = 0;
  __dst[96] = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    result = sub_20EB054F8(__dst, (__int128 *)a3);
    __dst[96] = 1;
  }
  return result;
}

void sub_20FF08224(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 96))
  {
    if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(_BYTE *)(v1 + 24))
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_20FF08268(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20E860C04(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_20FF08294(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t sub_20FF082A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a3 + 24);
  if (result)
  {
    if (result == a3)
    {
      *(_QWORD *)(a2 + 24) = a2;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a2);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a2 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t sub_20FF0830C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA0B640[v2])(&v4, a1);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void sub_20FF08364(char *__p)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  do
  {
    while (1)
    {
      v2 = *(char **)__p;
      v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 6);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (__p[39] < 0)
        break;
      operator delete(__p);
      __p = v2;
      if (!v2)
        return;
    }
    operator delete(*((void **)__p + 2));
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_20FF08400()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FF08418()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20FF08430(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  std::string __p;
  uint64_t v8;
  unsigned __int8 v9;

  v2 = *a1;
  v3 = **a1;
  if (*(_BYTE *)(v3 + 456))
    v4 = v3 + 416;
  else
    v4 = 0;
  sub_20FF12C30(v3 + 32, (void ***)(*a1)[2], *a2, *(_QWORD *)(v3 + 56), v4, *(unsigned __int8 *)(v3 + 456), &__p);
  v6 = v2[1];
  if (*(unsigned __int8 *)(v6 + 32) == v9)
  {
    if (*(_BYTE *)(v6 + 32))
    {
      if (*(char *)(v6 + 23) < 0)
        operator delete(*(void **)v6);
      result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(__n128 *)v6 = result;
      *(_QWORD *)(v6 + 24) = v8;
    }
  }
  else if (*(_BYTE *)(v6 + 32))
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    *(_BYTE *)(v6 + 32) = 0;
    if (v9 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(__n128 *)v6 = result;
    *(_QWORD *)(v6 + 24) = v8;
    *(_BYTE *)(v6 + 32) = 1;
  }
  return result;
}

__n128 sub_20FF08530(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _QWORD v16[2];

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *v2;
  v5 = v2[2];
  v6 = *(_QWORD *)(*v2 + 56);
  v7 = *v2 + 416;
  v8 = *(unsigned __int8 *)(*v2 + 456);
  if (!*(_BYTE *)(*v2 + 456))
    v7 = 0;
  v16[0] = v7;
  v16[1] = v8;
  v15 = 6;
  if (!v3)
    sub_20E86D37C();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 48))(__p, v3, v4 + 32, v5, &v15, v6, v16);
  v10 = v2[1];
  if (*(unsigned __int8 *)(v10 + 32) == v14)
  {
    if (*(_BYTE *)(v10 + 32))
    {
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      result = *(__n128 *)__p;
      *(_QWORD *)(v10 + 16) = v12;
      *(__n128 *)v10 = result;
      *(_QWORD *)(v10 + 24) = v13;
    }
  }
  else if (*(_BYTE *)(v10 + 32))
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    *(_BYTE *)(v10 + 32) = 0;
    if (v14 && SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  else
  {
    result = *(__n128 *)__p;
    *(_QWORD *)(v10 + 16) = v12;
    *(__n128 *)v10 = result;
    *(_QWORD *)(v10 + 24) = v13;
    *(_BYTE *)(v10 + 32) = 1;
  }
  return result;
}

uint64_t sub_20FF08654(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  char v11;

  v2 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA0B640[v2])(&v11, a1 + 56);
  *(_DWORD *)(a1 + 88) = -1;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(std::__shared_weak_count **)(a1 + 8);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

_QWORD *sub_20FF08728(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = a1 + 2;
    v6 = (_QWORD *)a1[5];
    if (v6 != a1 + 2)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v5;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = a1 + 2;
  v6 = (_QWORD *)a1[5];
  if (v6 == a1 + 2)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (std::__shared_weak_count *)a1[1];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20FF08808(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0B6B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FF08818(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0B6B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FF08848(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  char v10;

  v2 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA0B640[v2])(&v10, a1 + 80);
  *(_DWORD *)(a1 + 112) = -1;
  v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

void sub_20FF0891C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t sub_20FF08928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v3 = (_QWORD *)(a3 + 24);
  v4 = *(_QWORD *)(a3 + 24);
  if (!v4)
  {
    v3 = (_QWORD *)(a2 + 24);
    goto LABEL_5;
  }
  if (v4 != a3)
  {
    *(_QWORD *)(a2 + 24) = v4;
LABEL_5:
    *v3 = 0;
    return result;
  }
  *(_QWORD *)(a2 + 24) = a2;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
}

_QWORD *sub_20FF0897C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_24CA0B710;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v5;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = a1 + 3;
  v6 = (_QWORD *)a1[6];
  if (v6 == a1 + 3)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20FF08A68(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_24CA0B710;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
    {
LABEL_6:
      if (!v6)
        goto LABEL_11;
      v7 = 5;
LABEL_10:
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
      v8 = (std::__shared_weak_count *)a1[2];
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      JUMPOUT(0x212BC6398);
    }
  }
  v7 = 4;
  v6 = v5;
  goto LABEL_10;
}

_QWORD *sub_20FF08B54(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x48uLL);
  v4 = a1[1];
  v3 = a1[2];
  *v2 = &off_24CA0B710;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[6];
  if (!v7)
    goto LABEL_7;
  if ((_QWORD *)v7 != a1 + 3)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_7:
    v2[6] = v7;
    goto LABEL_9;
  }
  v2[6] = v2 + 3;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
LABEL_9:
  v8 = a1[8];
  v2[7] = a1[7];
  v2[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v2;
}

void sub_20FF08C10(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF08C5C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24CA0B710;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = a1[6];
  if (!result)
    goto LABEL_7;
  if ((_QWORD *)result != a1 + 3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_7:
    a2[6] = result;
    goto LABEL_9;
  }
  a2[6] = a2 + 3;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[6] + 24))(a1[6]);
LABEL_9:
  v9 = a1[8];
  a2[7] = a1[7];
  a2[8] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20FF08D08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FF08D4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = a1 + 3;
      v6 = (_QWORD *)a1[6];
      if (v6 != a1 + 3)
        goto LABEL_6;
LABEL_9:
      v7 = 4;
      v6 = v5;
      goto LABEL_10;
    }
  }
  v5 = a1 + 3;
  v6 = (_QWORD *)a1[6];
  if (v6 == a1 + 3)
    goto LABEL_9;
LABEL_6:
  if (!v6)
    goto LABEL_11;
  v7 = 5;
LABEL_10:
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20FF08E20(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = __p + 24;
    v6 = (char *)*((_QWORD *)__p + 6);
    if (v6 != __p + 24)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v5;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = __p + 24;
  v6 = (char *)*((_QWORD *)__p + 6);
  if (v6 == __p + 24)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    operator delete(__p);
  }
  else
  {
LABEL_15:
    operator delete(__p);
  }
}

void sub_20FF08F00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[8];
  std::__shared_weak_count *v6[2];
  _BYTE v7[32];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)v6 = *(_OWORD *)v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  v7[0] = 0;
  v8 = -1;
  v3 = *(unsigned int *)(v2 + 88);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_24CA0B6F0[v3])(v5, v7, v2 + 56);
    v8 = v3;
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (!v4)
    sub_20E86D37C();
  (*(void (**)(uint64_t, std::__shared_weak_count **, uint64_t, _BYTE *))(*(_QWORD *)v4 + 48))(v4, v6, v2 + 16, v7);
  if (v8 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24CA0B640[v8])(v5, v7);
  v8 = -1;
  if (v6[1])
    std::__shared_weak_count::__release_weak(v6[1]);
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 8));
}

void sub_20FF09008(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20FF09024(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  uint64_t v17;
  std::promise<void> *v18;
  std::exception_ptr v19;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v18 = *(std::promise<void> **)(v17 + 8);
    std::current_exception();
    v19.__ptr_ = &a10;
    std::promise<void>::set_exception(v18, v19);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x20FF08FD0);
  }
  JUMPOUT(0x20FF09014);
}

uint64_t sub_20FF090A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIvNSt3__18functionIFvNS4_8weak_ptrINS_3kit3v"
                     "iz13VDataExporter4ImplEEERKNS8_11ContextDataENS4_7variantIJNS8_17StoragePreferenceENS5_IFNS4_8optio"
                     "nalINS8_12DataLocationEEERKNS4_4__fs10filesystem4pathESE_SG_RNS7_2fs11IFilesystemENS0_11OptionalRef"
                     "INS8_15ExportFileStateEEEEEEEEEEEENS1_11IWorkQueueTINS5_IFvvEEEEEJRSB_SE_RKSX_EEENS4_6futureIT_EERT"
                     "1_OT0_DpOT2_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIvNSt3__18functionIFvNS4_8weak_pt"
                                "rINS_3kit3viz13VDataExporter4ImplEEERKNS8_11ContextDataENS4_7variantIJNS8_17StoragePrefe"
                                "renceENS5_IFNS4_8optionalINS8_12DataLocationEEERKNS4_4__fs10filesystem4pathESE_SG_RNS7_2"
                                "fs11IFilesystemENS0_11OptionalRefINS8_15ExportFileStateEEEEEEEEEEEENS1_11IWorkQueueTINS5"
                                "_IFvvEEEEEJRSB_SE_RKSX_EEENS4_6futureIT_EERT1_OT0_DpOT2_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIvNSt3__18functionIFvNS4_8weak_ptrINS_3kit3viz13VDataExporter4ImplEEERKNS8_11ContextDataENS4_7variantIJNS8_17StoragePreferenceENS5_IFNS4_8optionalINS8_12DataLocationEEERKNS4_4__fs10filesystem4pathESE_SG_RNS7_2fs11IFilesystemENS0_11OptionalRefINS8_15ExportFileStateEEEEEEEEEEEENS1_11IWorkQueueTINS5_IFvvEEEEEJRSB_SE_RKSX_EEENS4_6futureIT_EERT1_OT0_DpOT2_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIvNSt3__18functionIFvNS4_8weak_ptrINS_3kit3viz13VDataExporter4ImplEEERKNS8_11ContextDataENS4_7variantIJNS8_17StoragePreferenceENS5_IFNS4_8optionalINS8_12DataLocationEEERKNS4_4__fs10filesystem4pathESE_SG_RNS7_2fs11IFilesystemENS0_11OptionalRefINS8_15ExportFileStateEEEEEEEEEEEENS1_11IWorkQueueTINS5_IFvvEEEEEJRSB_SE_RKSX_EEENS4_6futureIT_EERT1_OT0_DpOT2_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FF09114()
{
  return &unk_24CA0B770;
}

void sub_20FF09120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__dst[2];
  unint64_t v26;
  _QWORD v27[5];
  _QWORD *v28;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v27[0] = v5;
  if (*(_BYTE *)(a3 + 48))
  {
    v6 = *(char *)(a3 + 47);
    if (v6 >= 0)
      v7 = a3 + 24;
    else
      v7 = *(_QWORD *)(a3 + 24);
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a3 + 47);
    else
      v8 = *(_QWORD *)(a3 + 32);
    sub_20E86A980((_QWORD *)(v5 + 16), v7, v8);
  }
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)":", 1);
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *(_QWORD *)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  sub_20E86A980((_QWORD *)(v5 + 16), v10, v11);
  v12 = *(_DWORD *)(v5 + 120);
  if ((v12 & 0x10) != 0)
  {
    v15 = *(_QWORD *)(v5 + 112);
    v16 = *(_QWORD *)(v5 + 72);
    if (v15 < v16)
    {
      *(_QWORD *)(v5 + 112) = v16;
      v15 = v16;
    }
    v17 = *(const void **)(v5 + 64);
    v13 = v15 - (_QWORD)v17;
    if (v15 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v12 & 8) == 0)
    {
      v13 = 0;
      HIBYTE(v26) = 0;
      v14 = __dst;
      goto LABEL_28;
    }
    v17 = *(const void **)(v5 + 40);
    v13 = *(_QWORD *)(v5 + 56) - (_QWORD)v17;
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_20E860B7C();
  }
  if (v13 >= 0x17)
  {
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    v14 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)v13;
    v26 = v19 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_27;
  }
  HIBYTE(v26) = v13;
  v14 = __dst;
  if (v13)
LABEL_27:
    memmove(v14, v17, v13);
LABEL_28:
  *((_BYTE *)v14 + v13) = 0;
  v20 = v27[0];
  if (v27[0])
  {
    v21 = MEMORY[0x24BEDB7F0];
    v22 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v27[0] = *MEMORY[0x24BEDB7F0];
    v23 = *(_QWORD *)(v21 + 72);
    *(_QWORD *)(v20 + *(_QWORD *)(v22 - 24)) = *(_QWORD *)(v21 + 64);
    *(_QWORD *)(v20 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v20 + 16) = v23;
    if (*(char *)(v20 + 111) < 0)
      operator delete(*(void **)(v20 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v20 + 128);
    MEMORY[0x212BC6398](v20, 0x10B2C40EED050F3);
  }
  v27[0] = a2;
  v27[1] = __dst;
  v27[2] = a2;
  v27[3] = __dst;
  v27[4] = __dst;
  v24 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v24 == -1)
    sub_20E877AB8();
  v28 = v27;
  ((void (*)(_QWORD **, uint64_t))off_24CA0B7A8[v24])(&v28, a2);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
}

void sub_20FF093CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FF093F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF0940C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FF09420(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0B7D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FF09430(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0B7D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF09460(uint64_t a1)
{
  return sub_20FF04930(a1 + 24);
}

void sub_20FF09470()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FF09484()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CA0B820;
  return result;
}

void sub_20FF094A8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CA0B820;
}

void sub_20FF094C0(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  char v24;
  char v25;
  char v26;
  _BYTE v27[32];
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v27[0] = 0;
  v28 = -1;
  v7 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_24CA0B6F0[v7])(v16, v27, a4);
    v28 = v7;
  }
  if (!v5)
    goto LABEL_16;
  v8 = std::__shared_weak_count::lock(v5);
  if (!v8)
    goto LABEL_16;
  v9 = v8;
  if (v6)
  {
    sub_20FF04C78((uint64_t)v16, v6, a3, (uint64_t)v27);
    if (!v26 && *(_BYTE *)(v6 + 160))
    {
      v10 = *(_QWORD *)(v6 + 152);
      if (!v10)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v10 + 48))(v10, v6 + 32, a3 + 2, v16);
    }
    std::mutex::lock((std::mutex *)(v6 + 352));
    v11 = (unsigned int *)(v6 + 296);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    std::condition_variable::notify_one((std::condition_variable *)(v6 + 304));
    std::mutex::unlock((std::mutex *)(v6 + 352));
    if (!v26 && v25)
    {
      if (v24)
      {
        if (v23 < 0)
          operator delete(__p);
        if (v21 < 0)
          operator delete(v20);
      }
      if (v19 && v18 < 0)
        operator delete(v17);
    }
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_16:
    v15 = v28;
    if (v28 == -1)
      goto LABEL_18;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  v15 = v28;
  if (v28 != -1)
LABEL_17:
    ((void (*)(_BYTE *, _BYTE *))off_24CA0B640[v15])(v16, v27);
LABEL_18:
  v28 = -1;
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20FF096B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39)
{
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;

  if (!(_BYTE)a37 && (_BYTE)a33)
  {
    if (a31)
    {
      if (a30 < 0)
        operator delete(__p);
      if (a23 < 0)
        operator delete(a18);
    }
    if (a17 && a16 < 0)
      operator delete(a11);
  }
  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v44 = __ldaxr(p_shared_owners);
  while (__stlxr(v44 - 1, p_shared_owners));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  v45 = *(unsigned int *)(v41 - 48);
  if ((_DWORD)v45 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24CA0B640[v45])(&a9, v41 - 80);
  *(_DWORD *)(v41 - 48) = -1;
  std::__shared_weak_count::__release_weak(v39);
  _Unwind_Resume(a1);
}

void sub_20FF09784(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

uint64_t sub_20FF097A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz13VDataExporter4Impl16ExportDataAsynchERKNS1_11ContextDataERKNSt3__17variantIJNS1_17"
                     "StoragePreferenceENS7_8functionIFNS7_8optionalINS1_12DataLocationEEERKNS7_4__fs10filesystem4pathES6"
                     "_S9_RNS0_2fs11IFilesystemENS_3esn11OptionalRefINS1_15ExportFileStateEEEEEEEEEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz13VDataExporter4Impl16ExportDataAsynchERKNS1_11ContextDataERKNSt3__17vari"
                                "antIJNS1_17StoragePreferenceENS7_8functionIFNS7_8optionalINS1_12DataLocationEEERKNS7_4__"
                                "fs10filesystem4pathES6_S9_RNS0_2fs11IFilesystemENS_3esn11OptionalRefINS1_15ExportFileSta"
                                "teEEEEEEEEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz13VDataExporter4Impl16ExportDataAsynchERKNS1_11ContextDataERKNSt3__17variantIJNS1_17StoragePreferenceENS7_8functionIFNS7_8optionalINS1_12DataLocationEEERKNS7_4__fs10filesystem4pathES6_S9_RNS0_2fs11IFilesystemENS_3esn11OptionalRefINS1_15ExportFileStateEEEEEEEEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz13VDataExporter4Impl16ExportDataAsynchERKNS1_11ContextDataERKNSt3__17variantIJNS1_17StoragePreferenceENS7_8functionIFNS7_8optionalINS1_12DataLocationEEERKNS7_4__fs10filesystem4pathES6_S9_RNS0_2fs11IFilesystemENS_3esn11OptionalRefINS1_15ExportFileStateEEEEEEEEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FF09810()
{
  return &unk_24CA0B890;
}

void sub_20FF0981C(uint64_t a1, void **a2, void **a3)
{
  unint64_t v3;
  void **v4;
  uint64_t v6;
  uint64_t i;
  void **v8;
  _OWORD *v9;
  char v10;
  __int128 v11;
  void *v12;
  size_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void **v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  unint64_t v30;
  int v31;
  std::__fs::filesystem::path::__string_view v32;
  uint64_t v33;
  int v34;
  std::__fs::filesystem::path::__string_view v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t prime;
  int8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  int8x8_t v46;
  unint64_t v47;
  uint8x8_t v48;
  void **v49;
  unint64_t v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;
  uint64_t *v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t **v61;
  uint64_t *v62;
  unint64_t v63;
  int v64;
  std::__fs::filesystem::path::__string_view v65;
  uint64_t v66;
  int v67;
  std::__fs::filesystem::path::__string_view v68;
  _QWORD *v69;
  _BYTE *v70;
  __int128 v71;
  char *v72;
  unint64_t *v73;
  unint64_t v74;
  float v75;
  float v76;
  _BOOL8 v77;
  unint64_t v78;
  unint64_t v79;
  size_t v80;
  int8x8_t v81;
  unint64_t v82;
  uint8x8_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  void *__p[2];
  void *v92;
  char v93;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    v8 = *(void ***)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v89 = a1 + 16;
    if (a2 == a3)
    {
      v21 = v8;
      if (v8)
        goto LABEL_118;
    }
    else
    {
      if (v8)
      {
        while (1)
        {
          v9 = v8 + 2;
          if (v8 + 2 != v4)
          {
            v10 = *((_BYTE *)v4 + 23);
            if (*((char *)v8 + 39) < 0)
            {
              if (v10 >= 0)
                v12 = v4;
              else
                v12 = *v4;
              if (v10 >= 0)
                v13 = *((unsigned __int8 *)v4 + 23);
              else
                v13 = (size_t)v4[1];
              sub_20E867CBC(v8 + 2, v12, v13);
            }
            else if ((*((_BYTE *)v4 + 23) & 0x80) != 0)
            {
              sub_20E867BF8(v8 + 2, *v4, (size_t)v4[1]);
            }
            else
            {
              v11 = *(_OWORD *)v4;
              v8[4] = v4[2];
              *v9 = v11;
            }
          }
          v15 = v4[3];
          v14 = (unint64_t *)v4[4];
          if (v14)
          {
            v16 = v14 + 1;
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = (std::__shared_weak_count *)v8[6];
          v8[5] = v15;
          v8[6] = v14;
          if (!v18)
            goto LABEL_25;
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
            v21 = (void **)*v8;
            if ((*((char *)v8 + 39) & 0x80000000) == 0)
            {
LABEL_26:
              *(_OWORD *)__p = *v9;
              v92 = v8[4];
              goto LABEL_29;
            }
          }
          else
          {
LABEL_25:
            v21 = (void **)*v8;
            if ((*((char *)v8 + 39) & 0x80000000) == 0)
              goto LABEL_26;
          }
          sub_20E860C04(__p, v8[2], (unint64_t)v8[3]);
LABEL_29:
          if (SHIBYTE(v92) >= 0)
            v22 = (uint64_t *)__p;
          else
            v22 = (uint64_t *)__p[0];
          if (SHIBYTE(v92) >= 0)
            v23 = HIBYTE(v92);
          else
            v23 = (unint64_t)__p[1];
          v24 = sub_20E8D177C((uint64_t)&v93, v22, v23);
          v25 = v24;
          if (SHIBYTE(v92) < 0)
          {
            operator delete(__p[0]);
            v8[1] = (void *)v25;
            v3 = *(_QWORD *)(a1 + 8);
            if (!v3)
              goto LABEL_71;
          }
          else
          {
            v8[1] = (void *)v24;
            v3 = *(_QWORD *)(a1 + 8);
            if (!v3)
              goto LABEL_71;
          }
          v26 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
          v26.i16[0] = vaddlv_u8(v26);
          if (v26.u32[0] > 1uLL)
          {
            v27 = v25;
            if (v3 <= v25)
              v27 = v25 % v3;
          }
          else
          {
            v27 = (v3 - 1) & v25;
          }
          v28 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v27);
          if (v28)
          {
            v29 = *v28;
            if (*v28)
            {
              if (v26.u32[0] < 2uLL)
              {
                while (1)
                {
                  v33 = v29[1];
                  if (v33 == v25)
                  {
                    v34 = *((char *)v8 + 39);
                    if (v34 >= 0)
                      v35.__data_ = (const std::string_view::value_type *)(v8 + 2);
                    else
                      v35.__data_ = (const std::string_view::value_type *)v8[2];
                    if (v34 >= 0)
                      v35.__size_ = *((unsigned __int8 *)v8 + 39);
                    else
                      v35.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)v8[3];
                    if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v29 + 2), v35))
                      goto LABEL_108;
                  }
                  else if ((v33 & (v3 - 1)) != v27)
                  {
                    goto LABEL_71;
                  }
                  v29 = (uint64_t *)*v29;
                  if (!v29)
                    goto LABEL_71;
                }
              }
              do
              {
                v30 = v29[1];
                if (v30 == v25)
                {
                  v31 = *((char *)v8 + 39);
                  if (v31 >= 0)
                    v32.__data_ = (const std::string_view::value_type *)(v8 + 2);
                  else
                    v32.__data_ = (const std::string_view::value_type *)v8[2];
                  if (v31 >= 0)
                    v32.__size_ = *((unsigned __int8 *)v8 + 39);
                  else
                    v32.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)v8[3];
                  if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v29 + 2), v32))
                    goto LABEL_108;
                }
                else
                {
                  if (v30 >= v3)
                    v30 %= v3;
                  if (v30 != v27)
                    break;
                }
                v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
          }
LABEL_71:
          v36 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
          v37 = *(float *)(a1 + 32);
          if (!v3 || (float)(v37 * (float)v3) < v36)
          {
            v38 = (v3 & (v3 - 1)) != 0;
            if (v3 < 3)
              v38 = 1;
            v39 = v38 | (2 * v3);
            v40 = vcvtps_u32_f32(v36 / v37);
            if (v39 <= v40)
              prime = v40;
            else
              prime = v39;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
            }
            v42 = *(int8x8_t *)(a1 + 8);
            if (prime > *(_QWORD *)&v42)
              goto LABEL_83;
            if (prime < *(_QWORD *)&v42)
            {
              v43 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
              if (*(_QWORD *)&v42 < 3uLL
                || (v44 = (uint8x8_t)vcnt_s8(v42), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
              {
                v43 = std::__next_prime(v43);
              }
              else
              {
                v45 = 1 << -(char)__clz(v43 - 1);
                if (v43 >= 2)
                  v43 = v45;
              }
              if (prime <= v43)
                prime = v43;
              if (prime < *(_QWORD *)&v42)
LABEL_83:
                sub_20E8D2B3C(a1, prime);
            }
          }
          v46 = *(int8x8_t *)(a1 + 8);
          v47 = (unint64_t)v8[1];
          v48 = (uint8x8_t)vcnt_s8(v46);
          v48.i16[0] = vaddlv_u8(v48);
          if (v48.u32[0] > 1uLL)
          {
            if (v47 >= *(_QWORD *)&v46)
              v47 %= *(_QWORD *)&v46;
          }
          else
          {
            v47 &= *(_QWORD *)&v46 - 1;
          }
          v49 = *(void ***)(*(_QWORD *)a1 + 8 * v47);
          if (v49)
          {
            *v8 = *v49;
          }
          else
          {
            *v8 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v8;
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v47) = v89;
            if (!*v8)
              goto LABEL_107;
            v50 = *((_QWORD *)*v8 + 1);
            if (v48.u32[0] > 1uLL)
            {
              if (v50 >= *(_QWORD *)&v46)
                v50 %= *(_QWORD *)&v46;
            }
            else
            {
              v50 &= *(_QWORD *)&v46 - 1;
            }
            v49 = (void **)(*(_QWORD *)a1 + 8 * v50);
          }
          *v49 = v8;
LABEL_107:
          ++*(_QWORD *)(a1 + 24);
LABEL_108:
          v4 += 5;
          if (v21)
          {
            v8 = v21;
            if (v4 != a3)
              continue;
          }
          goto LABEL_112;
        }
      }
      v21 = 0;
LABEL_112:
      if (v21)
      {
        do
        {
          while (1)
          {
LABEL_118:
            v51 = (void **)*v21;
            v52 = (std::__shared_weak_count *)v21[6];
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            if (*((char *)v21 + 39) < 0)
              break;
            operator delete(v21);
            v21 = v51;
            if (!v51)
              goto LABEL_124;
          }
          operator delete(v21[2]);
          operator delete(v21);
          v21 = v51;
        }
        while (v51);
      }
    }
  }
LABEL_124:
  if (v4 == a3)
    return;
  do
  {
    while (1)
    {
      if (*((char *)v4 + 23) < 0)
      {
        sub_20E860C04(__p, *v4, (unint64_t)v4[1]);
      }
      else
      {
        v55 = *(_OWORD *)v4;
        v92 = v4[2];
        *(_OWORD *)__p = v55;
      }
      v56 = SHIBYTE(v92) >= 0 ? (uint64_t *)__p : (uint64_t *)__p[0];
      v57 = SHIBYTE(v92) >= 0 ? (void *)HIBYTE(v92) : __p[1];
      v58 = sub_20E8D177C((uint64_t)&v93, v56, (unint64_t)v57);
      if (SHIBYTE(v92) < 0)
      {
        operator delete(__p[0]);
        v59 = *(_QWORD *)(a1 + 8);
        if (!v59)
          goto LABEL_171;
      }
      else
      {
        v59 = *(_QWORD *)(a1 + 8);
        if (!v59)
          goto LABEL_171;
      }
      v60 = (uint8x8_t)vcnt_s8((int8x8_t)v59);
      v60.i16[0] = vaddlv_u8(v60);
      if (v60.u32[0] > 1uLL)
      {
        v3 = v58;
        if (v58 >= v59)
          v3 = v58 % v59;
      }
      else
      {
        v3 = (v59 - 1) & v58;
      }
      v61 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
      if (v61)
      {
        v62 = *v61;
        if (*v61)
          break;
      }
LABEL_171:
      v69 = operator new(0x38uLL);
      __p[0] = v69;
      __p[1] = (void *)(a1 + 16);
      LOBYTE(v92) = 0;
      *v69 = 0;
      v69[1] = v58;
      v70 = v69 + 2;
      if (*((char *)v4 + 23) < 0)
      {
        sub_20E860C04(v70, *v4, (unint64_t)v4[1]);
      }
      else
      {
        v71 = *(_OWORD *)v4;
        v69[4] = v4[2];
        *(_OWORD *)v70 = v71;
      }
      v69[5] = v4[3];
      v72 = (char *)v4[4];
      v69[6] = v72;
      if (v72)
      {
        v73 = (unint64_t *)(v72 + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      LOBYTE(v92) = 1;
      v75 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v76 = *(float *)(a1 + 32);
      if (v59 && (float)(v76 * (float)v59) >= v75)
        goto LABEL_205;
      v77 = (v59 & (v59 - 1)) != 0;
      if (v59 < 3)
        v77 = 1;
      v78 = v77 | (2 * v59);
      v79 = vcvtps_u32_f32(v75 / v76);
      if (v78 <= v79)
        v80 = v79;
      else
        v80 = v78;
      if (v80 == 1)
      {
        v80 = 2;
      }
      else if ((v80 & (v80 - 1)) != 0)
      {
        v80 = std::__next_prime(v80);
      }
      v81 = *(int8x8_t *)(a1 + 8);
      if (v80 > *(_QWORD *)&v81)
        goto LABEL_189;
      if (v80 < *(_QWORD *)&v81)
      {
        v82 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (*(_QWORD *)&v81 < 3uLL || (v83 = (uint8x8_t)vcnt_s8(v81), v83.i16[0] = vaddlv_u8(v83), v83.u32[0] > 1uLL))
        {
          v82 = std::__next_prime(v82);
        }
        else
        {
          v84 = 1 << -(char)__clz(v82 - 1);
          if (v82 >= 2)
            v82 = v84;
        }
        if (v80 <= v82)
          v80 = v82;
        if (v80 < *(_QWORD *)&v81)
LABEL_189:
          sub_20E8D2B3C(a1, v80);
      }
      v59 = *(_QWORD *)(a1 + 8);
      v85 = v59 - 1;
      if ((v59 & (v59 - 1)) == 0)
      {
        v3 = v85 & v58;
        v86 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v85 & v58));
        v87 = __p[0];
        if (!v86)
          goto LABEL_208;
        goto LABEL_206;
      }
      if (v58 < v59)
      {
        v3 = v58;
LABEL_205:
        v86 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
        v87 = __p[0];
        if (!v86)
          goto LABEL_208;
        goto LABEL_206;
      }
      v3 = v58 % v59;
      v86 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v58 % v59));
      v87 = __p[0];
      if (!v86)
      {
LABEL_208:
        *v87 = *(_QWORD *)(a1 + 16);
        *(void **)(a1 + 16) = __p[0];
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
        if (*(_QWORD *)__p[0])
        {
          v88 = *(_QWORD *)(*(_QWORD *)__p[0] + 8);
          if ((v59 & (v59 - 1)) != 0)
          {
            if (v88 >= v59)
              v88 %= v59;
          }
          else
          {
            v88 &= v59 - 1;
          }
          *(void **)(*(_QWORD *)a1 + 8 * v88) = __p[0];
        }
        goto LABEL_214;
      }
LABEL_206:
      *v87 = *v86;
      *v86 = __p[0];
LABEL_214:
      ++*(_QWORD *)(a1 + 24);
      v4 += 5;
      if (v4 == a3)
        return;
    }
    if (v60.u32[0] < 2uLL)
    {
      while (1)
      {
        v66 = v62[1];
        if (v66 == v58)
        {
          v67 = *((char *)v4 + 23);
          if (v67 >= 0)
            v68.__data_ = (const std::string_view::value_type *)v4;
          else
            v68.__data_ = (const std::string_view::value_type *)*v4;
          if (v67 >= 0)
            v68.__size_ = *((unsigned __int8 *)v4 + 23);
          else
            v68.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)v4[1];
          if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v62 + 2), v68))
            goto LABEL_169;
        }
        else if ((v66 & (v59 - 1)) != v3)
        {
          goto LABEL_171;
        }
        v62 = (uint64_t *)*v62;
        if (!v62)
          goto LABEL_171;
      }
    }
    while (1)
    {
      v63 = v62[1];
      if (v63 == v58)
        break;
      if (v63 >= v59)
        v63 %= v59;
      if (v63 != v3)
        goto LABEL_171;
LABEL_147:
      v62 = (uint64_t *)*v62;
      if (!v62)
        goto LABEL_171;
    }
    v64 = *((char *)v4 + 23);
    if (v64 >= 0)
      v65.__data_ = (const std::string_view::value_type *)v4;
    else
      v65.__data_ = (const std::string_view::value_type *)*v4;
    if (v64 >= 0)
      v65.__size_ = *((unsigned __int8 *)v4 + 23);
    else
      v65.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)v4[1];
    if (std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v62 + 2), v65))
      goto LABEL_147;
LABEL_169:
    v4 += 5;
  }
  while (v4 != a3);
}

void sub_20FF0A110(void *a1)
{
  char *v1;

  __cxa_begin_catch(a1);
  sub_20FF08364(v1);
  __cxa_rethrow();
}

void sub_20FF0A13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FF0A17C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FF0A15C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_20FF0A17C(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          if ((*(char *)(v2 + 39) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
      if (*(char *)(v2 + 39) < 0)
LABEL_8:
        operator delete(*(void **)(v2 + 16));
    }
LABEL_9:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_20FF0A218()
{
  JUMPOUT(0x212BC6398);
}

_DWORD *sub_20FF0A22C(uint64_t a1)
{
  _DWORD *result;
  int v3;

  result = operator new(0x10uLL);
  v3 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)result = &off_24CA0B8B0;
  result[2] = v3;
  return result;
}

uint64_t sub_20FF0A264(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = &off_24CA0B8B0;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

unint64_t sub_20FF0A284(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t result;
  int v9;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *p_p;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  __int128 *v27;
  uint64_t v28;
  char v29;
  size_t v30;
  void *v31;
  unint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  size_t v40;
  unsigned int v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  _BYTE *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  size_t v54;
  std::__shared_weak_count_vtbl *v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  size_t v58;
  size_t v59;
  _BYTE *v60;
  void *v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  char *v71;
  char *shared_owners;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  const char *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  os_log_type_t v94;
  const char *v95;
  int v96;
  void *v97[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v99;
  const char *v100;
  int v101;
  const char *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void *__p;
  size_t v106;
  int64_t v107;
  _QWORD v108[2];
  _QWORD v109[3];
  const void *v110;
  uint64_t v111;
  const void *v112;
  unint64_t v113;
  void *v114;
  char v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  _QWORD v121[2];
  __int128 v122;
  unsigned __int8 v123;
  _BYTE __dst[24];
  unint64_t v125;
  char v126;
  void *v127[2];
  unint64_t v128;
  char v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  sub_20FF0B14C(&v119);
  result = v119;
  if (**(_DWORD **)(v119 + 56) > *(_DWORD *)(a1 + 8))
    return result;
  v9 = *(unsigned __int8 *)(v119 + 72);
  result = sub_20E8C31DC(v119, "OSLogSurrogateAppender", 1, 0);
  if (!v9 && result == 0)
    return result;
  v11 = result;
  sub_20E863438((uint64_t)v108);
  v12 = sub_20E86A980(v109, (uint64_t)"Failed to export data of type ", 30);
  v13 = a3[1];
  if (!v13)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v13 = a3[1];
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v13 + 48))(v97);
  sub_20FF0B240((uint64_t)v97);
  if (v107 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v107 >= 0)
    v15 = HIBYTE(v107);
  else
    v15 = v106;
  v16 = sub_20E86A980(v12, (uint64_t)p_p, v15);
  v17 = sub_20E86A980(v16, (uint64_t)" and time ", 10);
  v18 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *))(*a3 + 16))(a3) + 96);
  v19 = (*(uint64_t (**)(_QWORD *))(*a3 + 16))(a3);
  if (v18)
    v20 = (uint64_t *)(v19 + 80);
  else
    v20 = (uint64_t *)v19;
  v21 = sub_2102339F4(v17, v20);
  v22 = sub_20E86A980(v21, (uint64_t)" in ", 4);
  v23 = v22;
  v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0)
    v25 = (_BYTE *)a2;
  else
    v25 = *(_BYTE **)a2;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  sub_20EB052B4(v22, v25, &v25[v24], 0x22u, 0x5Cu);
  v26 = sub_20E86A980(v23, (uint64_t)", error: ", 9);
  LODWORD(v125) = 0;
  sub_20FF0B374((uint64_t)v121, (std::string::size_type)__dst, a4);
  if ((_DWORD)v125 == -1)
    sub_20E877AB8();
  v121[0] = &v120;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24CA0B688[v125])(&v122, v121, __dst);
  if ((_DWORD)v125 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24CA0B670[v125])(v121, __dst);
  if ((v123 & 0x80u) == 0)
    v27 = &v122;
  else
    v27 = (__int128 *)v122;
  if ((v123 & 0x80u) == 0)
    v28 = v123;
  else
    v28 = *((_QWORD *)&v122 + 1);
  sub_20E86A980(v26, (uint64_t)v27, v28);
  if ((char)v123 < 0)
  {
    operator delete((void *)v122);
    if ((SHIBYTE(v107) & 0x80000000) == 0)
    {
LABEL_34:
      if ((SHIBYTE(rep) & 0x80000000) == 0)
        goto LABEL_35;
      goto LABEL_40;
    }
  }
  else if ((SHIBYTE(v107) & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__p);
  if ((SHIBYTE(rep) & 0x80000000) == 0)
  {
LABEL_35:
    v29 = v117;
    v96 = v9;
    if ((v117 & 0x10) == 0)
      goto LABEL_36;
LABEL_41:
    v32 = v116;
    if (v116 < v113)
    {
      v116 = v113;
      v32 = v113;
    }
    v33 = v112;
    v30 = v32 - (_QWORD)v112;
    if (v32 - (unint64_t)v112 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_99;
    goto LABEL_44;
  }
LABEL_40:
  operator delete(v97[0]);
  v29 = v117;
  v96 = v9;
  if ((v117 & 0x10) != 0)
    goto LABEL_41;
LABEL_36:
  if ((v29 & 8) == 0)
  {
    v30 = 0;
    HIBYTE(v107) = 0;
    v31 = &__p;
    goto LABEL_51;
  }
  v33 = v110;
  v30 = v111 - (_QWORD)v110;
  if ((unint64_t)(v111 - (_QWORD)v110) > 0x7FFFFFFFFFFFFFF7)
LABEL_99:
    sub_20E860B7C();
LABEL_44:
  if (v30 >= 0x17)
  {
    v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v34 = v30 | 7;
    v35 = v34 + 1;
    v31 = operator new(v34 + 1);
    v106 = v30;
    v107 = v35 | 0x8000000000000000;
    __p = v31;
    goto LABEL_50;
  }
  HIBYTE(v107) = v30;
  v31 = &__p;
  if (v30)
LABEL_50:
    memmove(v31, v33, v30);
LABEL_51:
  *((_BYTE *)v31 + v30) = 0;
  v36 = *(_DWORD *)(a1 + 8);
  v97[0] = &v119;
  v97[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v99 = v36;
  v100 = "unknown file";
  v101 = 434;
  v103 = 0;
  v104 = 0;
  v102 = "unknown function";
  if (v107 >= 0)
    v37 = (const char *)&__p;
  else
    v37 = (const char *)__p;
  v38 = *(_QWORD *)v97[0];
  v39 = (const char *)(*(_QWORD *)v97[0] + 16);
  v95 = v39;
  if (*(char *)(*(_QWORD *)v97[0] + 39) < 0)
  {
    v39 = *(const char **)(v38 + 16);
    v40 = *(_QWORD *)(v38 + 24);
  }
  else
  {
    v40 = *(unsigned __int8 *)(*(_QWORD *)v97[0] + 39);
  }
  v41 = *(_DWORD *)(a1 + 8);
  v42 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__dst);
    if ((_BYTE)v125)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)__dst;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&__dst[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v43 = byte_254A4A4F8;
  else
    v43 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v44 = byte_254A4A4F8[23];
  else
    v44 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)__dst = os_log_create(v43, v39);
  v45 = &__dst[8];
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v44 >= 0x17)
  {
    v46 = v11;
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v45 = operator new(v47 + 1);
    *(_QWORD *)&__dst[16] = v44;
    v125 = v48 | 0x8000000000000000;
    *(_QWORD *)&__dst[8] = v45;
    v11 = v46;
    goto LABEL_71;
  }
  HIBYTE(v125) = v44;
  if (v44)
LABEL_71:
    memmove(v45, v43, v44);
  v45[v44] = 0;
  v126 = 1;
  v49 = v127;
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v40 >= 0x17)
  {
    v51 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v51 = v40 | 7;
    v52 = v51 + 1;
    v49 = (void **)operator new(v51 + 1);
    v127[1] = (void *)v40;
    v128 = v52 | 0x8000000000000000;
    v127[0] = v49;
  }
  else
  {
    HIBYTE(v128) = v40;
    if (!v40)
    {
      LOBYTE(v127[0]) = 0;
      v129 = 1;
      v50 = *(NSObject **)__dst;
      if ((SHIBYTE(v128) & 0x80000000) == 0)
        goto LABEL_76;
      goto LABEL_82;
    }
  }
  memmove(v49, v39, v40);
  *((_BYTE *)v49 + v40) = 0;
  v129 = 1;
  v50 = *(NSObject **)__dst;
  if ((SHIBYTE(v128) & 0x80000000) == 0)
  {
LABEL_76:
    if (!v126)
      goto LABEL_85;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(v127[0]);
  if (!v126)
    goto LABEL_85;
LABEL_83:
  if (SHIBYTE(v125) < 0)
    operator delete(*(void **)&__dst[8]);
LABEL_85:
  if (*(_QWORD *)__dst)
    os_release(*(void **)__dst);
  if (v41 >= 7)
    v53 = OS_LOG_TYPE_DEBUG;
  else
    v53 = (0x11101001020202uLL >> (8 * v41));
  if (!v11 || !*(_QWORD *)(v11 + 24))
  {
    os_log_type_enabled(v50, v53);
    *(_DWORD *)__dst = 136315138;
    *(_QWORD *)&__dst[4] = v37;
    v61 = (void *)_os_log_send_and_compose_impl();
    v62 = v96;
    if (v61)
      free(v61);
    goto LABEL_129;
  }
  v54 = _os_log_pack_size();
  v55 = (std::__shared_weak_count_vtbl *)operator new(v54, (std::align_val_t)8uLL);
  v56 = (std::__shared_weak_count *)operator new();
  v56->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v56->__shared_owners_;
  v56->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v56->__shared_weak_owners_ = 0;
  v56[1].__vftable = v55;
  v58 = strlen(v37);
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v59 = v58;
  v94 = v53;
  if (v58 >= 0x17)
  {
    v63 = v11;
    v64 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v64 = v58 | 7;
    v65 = v64 + 1;
    v60 = operator new(v64 + 1);
    *(_QWORD *)&__dst[8] = v59;
    *(_QWORD *)&__dst[16] = v65 | 0x8000000000000000;
    *(_QWORD *)__dst = v60;
    v11 = v63;
    goto LABEL_103;
  }
  __dst[23] = v58;
  v60 = __dst;
  if (v58)
LABEL_103:
    memcpy(v60, v37, v59);
  v93 = v11;
  v60[v59] = 0;
  *(_QWORD *)&v122 = *(_QWORD *)&__dst[8];
  v66 = *(_QWORD *)__dst;
  *(_QWORD *)((char *)&v122 + 7) = *(_QWORD *)&__dst[15];
  v67 = __dst[23];
  v68 = operator new(0x38uLL);
  v69 = (std::__shared_weak_count *)v68;
  v68[1] = 0;
  v70 = v68 + 1;
  v68[3] = off_24C9ABC20;
  v71 = (char *)(v68 + 3);
  v68[2] = 0;
  v68[4] = v66;
  shared_owners = (char *)(v68 + 4);
  *v68 = &off_24C9ABBD0;
  v68[5] = v122;
  *(_QWORD *)((char *)v68 + 47) = *(_QWORD *)((char *)&v122 + 7);
  *((_BYTE *)v68 + 55) = v67;
  do
    v73 = __ldxr(p_shared_owners);
  while (__stxr(v73 + 1, p_shared_owners));
  do
    v74 = __ldxr(v70);
  while (__stxr(v74 + 1, v70));
  do
    v75 = __ldaxr(v70);
  while (__stlxr(v75 - 1, v70));
  if (!v75)
  {
    (*(void (**)(_QWORD *))(*v68 + 16))(v68);
    std::__shared_weak_count::__release_weak(v69);
  }
  do
    v76 = __ldaxr(p_shared_owners);
  while (__stlxr(v76 - 1, p_shared_owners));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  if (SHIBYTE(v69[2].__vftable) < 0)
    shared_owners = (char *)v69[1].__shared_owners_;
  v77 = _os_log_pack_fill();
  *(_DWORD *)v77 = 136315138;
  *(_QWORD *)(v77 + 4) = shared_owners;
  v78 = operator new();
  v79 = *(unsigned __int8 *)(v38 + 39);
  v80 = v95;
  if ((v79 & 0x80u) != 0)
  {
    v80 = *(const char **)(v38 + 16);
    v79 = *(_QWORD *)(v38 + 24);
  }
  *(_QWORD *)v78 = v55;
  *(_QWORD *)(v78 + 8) = v55;
  *(_QWORD *)(v78 + 16) = v56;
  *(_QWORD *)(v78 + 24) = v71;
  *(_QWORD *)(v78 + 32) = v69;
  *(_QWORD *)(v78 + 40) = v80;
  *(_QWORD *)(v78 + 48) = v79;
  *(_BYTE *)(v78 + 56) = v94;
  *(_QWORD *)__dst = v78;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v93 + 24) + 40))(*(_QWORD *)(v93 + 24), __dst);
  v81 = *(_QWORD *)__dst;
  *(_QWORD *)__dst = 0;
  v62 = v96;
  if (v81)
  {
    v82 = *(std::__shared_weak_count **)(v81 + 32);
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = *(std::__shared_weak_count **)(v81 + 16);
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    MEMORY[0x212BC6398](v81, 0x10F0C40B62ED6C6);
  }
LABEL_129:
  if (v62)
  {
    v88 = (const char *)&__p;
    if (v107 < 0)
      v88 = (const char *)__p;
    sub_20E8C003C((uint64_t)v97, "%s", v88);
    sub_20E863570((uint64_t)v97);
  }
  sub_20E863570((uint64_t)v97);
  v89 = v104;
  if (v104)
  {
    v90 = (unint64_t *)&v104->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (SHIBYTE(v107) < 0)
    operator delete(__p);
  v108[0] = *MEMORY[0x24BEDB7F0];
  v92 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v108 + *(_QWORD *)(v108[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v109[0] = v92;
  v109[1] = MEMORY[0x24BEDB848] + 16;
  if (v115 < 0)
    operator delete(v114);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v118);
}

void sub_20FF0ADAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  uint64_t v58;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a17);
  v55 = a28;
  if (a28)
  {
    p_shared_owners = (unint64_t *)&a28->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (a34 < 0)
    operator delete(__p);
  a35 = *MEMORY[0x24BEDB7F0];
  v58 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a35 + *(_QWORD *)(a35 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a37 = v58;
  a38 = MEMORY[0x24BEDB848] + 16;
  if (a51 < 0)
    operator delete(a46);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&a54);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF0B0D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz13VDataExporter17LogErrorsInternalEN4tlog8LogLevelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz13VDataExporter17LogErrorsInternalEN4tlog8LogLevelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz13VDataExporter17LogErrorsInternalEN4tlog8LogLevelEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz13VDataExporter17LogErrorsInternalEN4tlog8LogLevelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FF0B140()
{
  return &unk_24CA0B920;
}

void sub_20FF0B14C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)qword_254A6C7C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_254A6C7C0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.kit.viz");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6C7B8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(qword_254A6C7C0);
  }
  *a1 = qword_254A6C7B8;
}

void sub_20FF0B1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_254A6C7C0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_254A6C7C0);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF0B240(uint64_t a1)
{
  uint64_t result;
  _DWORD v2[6];
  int v3;
  _QWORD v4[2];
  char v5;
  _QWORD *v6;
  const char *v7;
  char *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v3 = 0;
  v4[0] = a1;
  v4[1] = a1 + 24;
  sub_20E89FDB0(v2, "{");
  LOBYTE(v6) = 1;
  v7 = (const char *)v2;
  v8 = &v5;
  sub_20FDD9884((uint64_t)v4, (uint64_t)&v6);
  v6 = v2;
  v7 = "}";
  v8 = (char *)v2;
  v9 = "}";
  v10 = "}";
  if (v3 == -1)
    sub_20E877AB8();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24CA0B780[v3])(&v11, v2);
  if (v3 == -1)
    sub_20E877AB8();
  v6 = v4;
  result = ((uint64_t (*)(_QWORD **, _DWORD *))off_24CA0B688[v3])(&v6, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD **, _DWORD *))off_24CA0B670[v3])(&v6, v2);
  return result;
}

void sub_20FF0B34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF0B360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF0B374(uint64_t a1, std::string::size_type a2, uint64_t a3)
{
  uint64_t v5;
  std::string *p_p;
  std::string::size_type size;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  std::string __p;
  void **v24;
  void **v25;
  std::string *v26;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v26 = (std::string *)v5;
  sub_2102341F0(a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)p_p, size);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = *(_DWORD *)(v5 + 120);
    if ((v8 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v11 = *(_QWORD *)(v5 + 112);
    v12 = *(_QWORD *)(v5 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v5 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
    goto LABEL_15;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v8 = *(_DWORD *)(v5 + 120);
  if ((v8 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v8 & 8) == 0)
  {
    v9 = 0;
    HIBYTE(v22) = 0;
    v10 = __dst;
    goto LABEL_22;
  }
  v13 = *(const void **)(v5 + 40);
  v9 = *(_QWORD *)(v5 + 56) - (_QWORD)v13;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    sub_20E860B7C();
LABEL_15:
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_21;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_21:
    memmove(v10, v13, v9);
LABEL_22:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v26;
  if (v26)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    v26->__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(std::string::size_type *)((char *)v16->__r_.__value_.__r.__words + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[1].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    v16->__r_.__value_.__r.__words[2] = v19;
    if (v16[4].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v16[3].__r_.__value_.__r.__words[2]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v16[5].__r_.__value_.__r.__words[1]);
    MEMORY[0x212BC6398](v16, 0x10B2C40EED050F3);
  }
  __p.__r_.__value_.__r.__words[0] = a2;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
  __p.__r_.__value_.__r.__words[2] = a2;
  v24 = __dst;
  v25 = __dst;
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    sub_20E877AB8();
  v26 = &__p;
  ((void (*)(std::string **, std::string::size_type))off_24CA0B7A8[v20])(&v26, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_20FF0B600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
  {
    operator delete(__p);
    sub_20FD0DE48((uint64_t *)(v21 - 56));
    _Unwind_Resume(a1);
  }
  sub_20FD0DE48((uint64_t *)(v21 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_20FF0B678(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_24CA1DF08;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

_DWORD *sub_20FF0B6DC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24CA0B670[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20FF0B7CC(_DWORD ***a1)
{
  return sub_20E9955EC(**a1, (char *)(*a1)[1]);
}

void sub_20FF0B7D8(uint64_t a1, uint64_t a2)
{
  sub_20FF0B7E8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20FF0B7E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA0B670[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20FF0B99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20FF0B9E0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20FF0BAD8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20FF0BAD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20FF0BAD8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20FF0BCD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF0BCE8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_24CA1DF08;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 24))();
  JUMPOUT(0x212BC6398);
}

char *sub_20FF0BD64(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  char *result;
  char v6;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v6 = 0;
  result = sub_2100DB440(v4, &v6);
  *a2 = v6;
  return result;
}

void sub_20FF0BDB0(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DB190(v4, &v6);
  if (v6 != (char)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FF0BE2C(uint64_t *a1, _WORD *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DB190(v4, &v6);
  if (v6 != (__int16)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FF0BEA8(uint64_t *a1, _DWORD *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DB190(v4, &v6);
  if (v6 != (int)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FF0BF24(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v5 = 0;
  sub_2100DB190(v4, &v5);
  *a2 = v5;
}

void sub_20FF0BF70(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v5 = 0;
  sub_2100DB190(v4, &v5);
  *a2 = v5;
}

void sub_20FF0BFBC(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  _QWORD *exception;
  unint64_t v6;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DB048(v4, &v6);
  if (v6 >= 0x100)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FF0C038(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DB190(v4, &v6);
  if (v6 != (char)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FF0C0B4(uint64_t *a1, _WORD *a2)
{
  char *v4;
  _QWORD *exception;
  unint64_t v6;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DB048(v4, &v6);
  if (v6 >= 0x10000)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FF0C130(uint64_t *a1, _DWORD *a2)
{
  char *v4;
  _QWORD *exception;
  unint64_t v6;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v6 = 0;
  sub_2100DB048(v4, &v6);
  if (HIDWORD(v6))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20FF0C1AC(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v5 = 0;
  sub_2100DB048(v4, &v5);
  *a2 = v5;
}

void sub_20FF0C1F8(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v5 = 0;
  sub_2100DB048(v4, &v5);
  *a2 = v5;
}

void sub_20FF0C244(uint64_t *a1, float *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_2101FFA90(a1);
  ++a1[14];
  *a2 = sub_210206948(v4);
}

void sub_20FF0C27C(uint64_t *a1, double *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_2101FFA90(a1);
  ++a1[14];
  *a2 = sub_210206A28(v4);
}

double sub_20FF0C2B4(uint64_t *a1, uint64_t a2)
{
  void **v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (void **)sub_2101FFA90(a1);
  ++a1[14];
  v7 = 0;
  v6 = 0uLL;
  sub_2100DB548(v4, (uint64_t)&v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_20FF0C31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF0C338(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2102014A0(a1, (uint64_t)v3);
}

void sub_20FF0C35C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  sub_210200A70(v4, (uint64_t)v5);
}

void sub_20FF0C39C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  sub_210200C1C(v4, (uint64_t)v5);
}

void sub_20FF0C3DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  sub_210200DC8(v4, (uint64_t)v5);
}

void sub_20FF0C41C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  v5 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_21020368C(v5, (uint64_t)&v18);
  v6 = v18;
  v7 = v19;
  if (v18 != v19)
  {
    v8 = (char *)v19 - (char *)v18 - 8;
    v9 = (_QWORD *)a3;
    v10 = v18;
    if (v8 < 0x18)
      goto LABEL_11;
    v11 = (v8 >> 3) + 1;
    v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    v9 = (_QWORD *)(a3 + v12 * 8);
    v10 = &v18[v12];
    v13 = (__int128 *)(v18 + 2);
    v14 = (_OWORD *)(a3 + 16);
    v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_11:
      do
      {
        v17 = *v10++;
        *v9++ = v17;
      }
      while (v10 != v7);
    }
  }
  if (v6)
  {
    v19 = v6;
    operator delete(v6);
  }
}

void sub_20FF0C4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF0C504(uint64_t *a1, uint64_t a2, void *a3)
{
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v5 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_21020368C(v5, (uint64_t)&v7);
  v6 = v7;
  if (v8 != v7)
    memmove(a3, v7, v8 - v7);
  if (v6)
  {
    v8 = v6;
    operator delete(v6);
  }
}

void sub_20FF0C574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF0C590(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  sub_2101FFBA8(v4, (uint64_t)v5);
}

void sub_20FF0C5D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  sub_210200B2C(v4, (uint64_t)v5);
}

void sub_20FF0C610(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  sub_210200D0C(v4, (uint64_t)v5);
}

void sub_20FF0C650(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  sub_210200E84(v4, (uint64_t)v5);
}

void sub_20FF0C690(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  v5 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_2102039C8(v5, (uint64_t)&v18);
  v6 = v18;
  v7 = v19;
  if (v18 != v19)
  {
    v8 = (char *)v19 - (char *)v18 - 8;
    v9 = (_QWORD *)a3;
    v10 = v18;
    if (v8 < 0x18)
      goto LABEL_11;
    v11 = (v8 >> 3) + 1;
    v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    v9 = (_QWORD *)(a3 + v12 * 8);
    v10 = &v18[v12];
    v13 = (__int128 *)(v18 + 2);
    v14 = (_OWORD *)(a3 + 16);
    v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_11:
      do
      {
        v17 = *v10++;
        *v9++ = v17;
      }
      while (v10 != v7);
    }
  }
  if (v6)
  {
    v19 = v6;
    operator delete(v6);
  }
}

void sub_20FF0C75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF0C778(uint64_t *a1, uint64_t a2, void *a3)
{
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v5 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_2102039C8(v5, (uint64_t)&v7);
  v6 = v7;
  if (v8 != v7)
    memmove(a3, v7, v8 - v7);
  if (v6)
  {
    v8 = v6;
    operator delete(v6);
  }
}

void sub_20FF0C7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF0C804(uint64_t *a1, uint64_t a2, float *a3)
{
  unint64_t v5;

  v5 = sub_2101FFA90(a1);
  ++a1[14];
  sub_210201290(v5, a3);
}

void sub_20FF0C838(uint64_t *a1, uint64_t a2, double *a3)
{
  unint64_t v5;

  v5 = sub_2101FFA90(a1);
  ++a1[14];
  sub_210201398(v5, a3);
}

void sub_20FF0C86C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_210201568(a1, (uint64_t)v3);
}

void sub_20FF0C890(uint64_t *a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)sub_2101FFA90(a1);
  ++a1[14];
  sub_2101FFBA8(v4, a2);
}

void sub_20FF0C8CC(uint64_t a1, uint64_t a2)
{
  int v4;
  size_t v5;
  void **p_dst;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  char *v23;
  std::runtime_error *exception;
  std::__fs::filesystem::path v25;
  void **__dst;
  size_t v27;
  int64_t v28;
  std::string v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 144);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(a1 + 136);
    v8 = *(_QWORD *)(a1 + 96);
    if (v7 < v8)
    {
      *(_QWORD *)(a1 + 136) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(a1 + 88);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v28) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 80) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20E860B7C();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v27 = v5;
    v28 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v28) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_13:
    memmove(p_dst, v9, v5);
LABEL_14:
  *((_BYTE *)p_dst + v5) = 0;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 135) = 0;
  sub_20E8B469C(a1 + 48);
  std::ios_base::clear((std::ios_base *)(a1 + 24 + *(_QWORD *)(*(_QWORD *)(a1 + 24) - 24)), 0);
  *(_QWORD *)(a1 + 312) = 0;
  v12 = HIBYTE(v28);
  if (v28 >= 0)
    v13 = HIBYTE(v28);
  else
    v13 = v27;
  if (!v13 && *(_BYTE *)(a1 + 328))
  {
    if ((v28 & 0x8000000000000000) == 0)
      return;
LABEL_51:
    operator delete(__dst);
    return;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    if (v28 < 0)
      v12 = v27;
    if (!v12)
      goto LABEL_47;
LABEL_46:
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
    std::ostream::write();
    goto LABEL_47;
  }
  sub_210224144((const std::__fs::filesystem::path *)a1, 0x11u, *(_QWORD *)(a1 + 304), &v29);
  if (*(_BYTE *)(a2 + 24))
  {
    v14 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = 0uLL;
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    *(_OWORD *)(a2 + 8) = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = &off_24CA1F288;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = 0uLL;
    *(_BYTE *)(a2 + 24) = 1;
  }
  v18 = (std::__shared_weak_count *)v29.__r_.__value_.__r.__words[2];
  if (v29.__r_.__value_.__r.__words[2])
  {
    v19 = (unint64_t *)(v29.__r_.__value_.__r.__words[2] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (!*(_QWORD *)(a2 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 23) < 0)
      sub_20E860C04(&v25, *(void **)a1, *(_QWORD *)(a1 + 8));
    else
      v25.__pn_ = *(std::__fs::filesystem::path::string_type *)a1;
    sub_20E8B0848("Failed to write to file: ", &v25.__pn_, &v29);
    std::runtime_error::runtime_error(exception, &v29);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v21 = HIBYTE(v28);
  if (v28 < 0)
    v21 = v27;
  if (v21)
    goto LABEL_46;
LABEL_47:
  v22 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v23 = (char *)v22 + *(_QWORD *)(*v22 - 24);
  if ((v23[32] & 5) != 0)
  {
    *(_QWORD *)(a1 + 320) = 0;
    *(_BYTE *)(a1 + 328) = 1;
    if (v28 < 0)
      goto LABEL_51;
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v23 + 5) + 32))(&v29, *((_QWORD *)v23 + 5), 0, 1, 16);
    *(_QWORD *)(a1 + 320) = v30 & ~(v30 >> 63);
    *(_BYTE *)(a1 + 328) = 1;
    if (v28 < 0)
      goto LABEL_51;
  }
}

void sub_20FF0CCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  __cxa_free_exception(v26);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF0CD3C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v5 = a1 + 40;
    if ((*(char *)(a2 + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v5 = a1 + 40;
    if ((*(char *)(a2 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20E860C04((_BYTE *)v5, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
LABEL_6:
  if (*(char *)(a2 + 119) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 64), *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 64) = v7;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 120);
  if (*(_BYTE *)(a2 + 88))
  {
    if (*(char *)(a2 + 87) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 96), *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v8;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 119) = 0;
    *(_BYTE *)(a1 + 96) = 0;
  }
  v12 = -1;
  if (*(char *)(a2 + 151) < 0)
  {
    sub_20E860C04(&v10, *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 128);
    v11 = *(_QWORD *)(a2 + 144);
  }
  *(_OWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 136) = v11;
  return a1;
}

void sub_20FF0CEB8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[87] < 0)
  {
    operator delete(*v4);
    if ((v1[63] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[31] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((v1[63] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_20FF0CF5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__fs::filesystem::path::__string_view v8;
  _BYTE *v9;
  std::basic_string_view<_CharT, _Traits>::size_type v10;
  std::basic_string_view<_CharT, _Traits>::size_type v11;
  std::__fs::filesystem::path::__string_view v12;
  int v13;
  std::__fs::filesystem::path::__string_view v14;
  _BYTE *v15;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  void *v22;
  size_t v23;
  std::__fs::filesystem::path::__string_view v24;
  _BYTE *v25;
  std::basic_string_view<_CharT, _Traits>::size_type v26;
  std::basic_string_view<_CharT, _Traits>::size_type v27;
  void *v28;
  int v29;
  char v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  _DWORD *v34;
  _BOOL4 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  std::__fs::filesystem::path::__string_view v39;
  _BYTE *v40;
  std::basic_string_view<_CharT, _Traits>::size_type v41;
  std::basic_string_view<_CharT, _Traits>::size_type v42;
  std::string::size_type size;
  void *v44;
  int v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t v49;
  void ***v50;
  _QWORD *v51;
  uint64_t v52;
  void ***v53;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *v66;
  unint64_t v67;
  void *v68;
  int v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  int v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  __int128 v78;
  unsigned __int8 *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::string *v83;
  unint64_t v84;
  void *v85;
  int v86;
  int v87;
  uint64_t v88;
  unint64_t *v89;
  __int128 v90;
  _BYTE v91[7];
  char v92;
  char v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  char v98;
  char v99;
  std::__fs::filesystem::path v100;
  std::__fs::filesystem::path v101;
  void *v102[2];
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  char v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  char v111;
  char v112;
  _BYTE v113[24];
  _BYTE v114[28];
  _BYTE v115[28];
  unsigned __int8 *v116;
  std::string v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  unsigned __int8 v122;
  _BYTE v123[24];
  void *v124[2];
  char v125;
  char v126;
  void *v127;
  char v128;
  void *v129;
  char v130;
  char v131;
  char v132;
  std::__fs::filesystem::path __src;
  void *__p[4];
  std::__fs::filesystem::path v135;
  _BYTE v136[28];
  void *v137;
  char v138;
  void *v139;
  char v140;
  char v141;
  char v142;
  std::string pn;
  _BYTE *v144;
  _BYTE __dst[32];
  _BYTE v146[64];
  uint64_t v147;
  char v148;
  uint64_t v149;
  char v150;
  _BYTE v151[32];
  std::__fs::filesystem::path *p_pn;
  unsigned __int8 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  char v158;
  char v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  v8 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)a1);
  if (v8.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v8.__size_ >= 0x17)
  {
    v10 = (v8.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8.__size_ | 7) != 0x17)
      v10 = v8.__size_ | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
    *(_QWORD *)__dst = v9;
    *(_QWORD *)&__dst[8] = v8.__size_;
    goto LABEL_8;
  }
  __dst[23] = v8.__size_;
  v9 = __dst;
  if (v8.__size_)
LABEL_8:
    memmove(v9, v8.__data_, v8.__size_);
  v9[v8.__size_] = 0;
  *(_OWORD *)v151 = *(_OWORD *)__dst;
  *(_QWORD *)&v151[16] = *(_QWORD *)&__dst[16];
  memset(__dst, 0, 24);
  sub_20E8A9678((std::string *)__dst, (std::string *)".csv", (std::string *)"");
  if (__dst[23] >= 0)
    v12.__data_ = __dst;
  else
    v12.__data_ = *(const std::string_view::value_type **)__dst;
  if (__dst[23] >= 0)
    v12.__size_ = __dst[23];
  else
    v12.__size_ = *(_QWORD *)&__dst[8];
  v13 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)v151, v12);
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v151[23] & 0x80000000) == 0)
      goto LABEL_17;
  }
  else if ((v151[23] & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(*(void **)v151);
LABEL_17:
  memset(&v135, 0, sizeof(v135));
  memset(__p, 0, 24);
  memset(&__src, 0, sizeof(__src));
  if (!v13)
  {
    v14 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)a1);
    if (v14.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v14.__size_ >= 0x17)
    {
      v16 = (v14.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14.__size_ | 7) != 0x17)
        v16 = v14.__size_ | 7;
      v17 = v16 + 1;
      v15 = operator new(v16 + 1);
      *(_QWORD *)&__dst[16] = v17 | 0x8000000000000000;
      *(_QWORD *)__dst = v15;
      *(_QWORD *)&__dst[8] = v14.__size_;
    }
    else
    {
      __dst[23] = v14.__size_;
      v15 = __dst;
      if (!v14.__size_)
      {
LABEL_31:
        v15[v14.__size_] = 0;
        *(_QWORD *)v151 = *(_QWORD *)&__dst[8];
        v18 = *(void **)__dst;
        *(_QWORD *)&v151[7] = *(_QWORD *)&__dst[15];
        v19 = __dst[23];
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        __p[0] = v18;
        __p[1] = *(void **)v151;
        *(void **)((char *)&__p[1] + 7) = *(void **)&v151[7];
        HIBYTE(__p[2]) = v19;
        if (&v135 != (std::__fs::filesystem::path *)a1)
        {
          v20 = *(_BYTE *)(a1 + 23);
          if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v20 >= 0)
              v22 = (void *)a1;
            else
              v22 = *(void **)a1;
            if (v20 >= 0)
              v23 = *(unsigned __int8 *)(a1 + 23);
            else
              v23 = *(_QWORD *)(a1 + 8);
            sub_20E867CBC((void **)&v135.__pn_.__r_.__value_.__l.__data_, v22, v23);
          }
          else if ((*(_BYTE *)(a1 + 23) & 0x80) != 0)
          {
            sub_20E867BF8(&v135, *(void **)a1, *(_QWORD *)(a1 + 8));
          }
          else
          {
            v135 = *(std::__fs::filesystem::path *)a1;
          }
        }
        v24 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)a1);
        if (v24.__size_ > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v24.__size_ >= 0x17)
        {
          v26 = (v24.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24.__size_ | 7) != 0x17)
            v26 = v24.__size_ | 7;
          v27 = v26 + 1;
          v25 = operator new(v26 + 1);
          *(_QWORD *)&__dst[16] = v27 | 0x8000000000000000;
          *(_QWORD *)__dst = v25;
          *(_QWORD *)&__dst[8] = v24.__size_;
        }
        else
        {
          __dst[23] = v24.__size_;
          v25 = __dst;
          if (!v24.__size_)
          {
LABEL_68:
            v25[v24.__size_] = 0;
            v28 = *(void **)__dst;
            *(_DWORD *)v136 = *(_DWORD *)&__dst[16];
            *(_DWORD *)&v136[3] = *(_DWORD *)&__dst[19];
            v29 = __dst[23];
            if ((__dst[23] & 0x80000000) != 0)
            {
              sub_20E860C04(v151, *(void **)__dst, *(unint64_t *)&__dst[8]);
              v30 = v151[23];
              v31 = v151[23];
              v36 = v151[23];
              if (v151[23] < 0)
                v36 = *(_QWORD *)&v151[8];
              if (v36 >= 4)
              {
LABEL_72:
                v33 = v31 < 0;
                v34 = v151;
                if (v33)
                  v34 = *(_DWORD **)v151;
                v35 = *v34 == 1868983913;
                if ((v30 & 0x80) == 0)
                {
LABEL_81:
                  if (v29 < 0)
                  {
                    operator delete(v28);
                    if (v35)
                    {
LABEL_83:
                      sub_20E89F6D4(v124, "sequence file must not be named 'info'");
                      v132 = 1;
                      sub_21022F9AC((uint64_t)v124, (uint64_t)__dst);
                      *(_OWORD *)a4 = *(_OWORD *)__dst;
                      *(_BYTE *)(a4 + 16) = 0;
                      *(_BYTE *)(a4 + 112) = 0;
                      if ((_BYTE)v149)
                      {
                        *(_BYTE *)(a4 + 40) = 0;
                        v37 = v146[8];
                        if (v146[8])
                        {
                          *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
                          *(_QWORD *)(a4 + 32) = *(_QWORD *)v146;
                          *(_QWORD *)&__dst[24] = 0;
                          *(_QWORD *)v146 = 0;
                          *(_QWORD *)&__dst[16] = 0;
                          *(_BYTE *)(a4 + 40) = 1;
                        }
                        *(_BYTE *)(a4 + 48) = 0;
                        *(_BYTE *)(a4 + 104) = 0;
                        if (v148)
                        {
                          v38 = *(_QWORD *)&v146[40];
                          *(_QWORD *)(a4 + 64) = *(_QWORD *)&v146[32];
                          *(_OWORD *)(a4 + 48) = *(_OWORD *)&v146[16];
                          *(_OWORD *)&v146[16] = 0uLL;
                          *(_QWORD *)(a4 + 72) = v38;
                          *(_OWORD *)(a4 + 80) = *(_OWORD *)&v146[48];
                          *(_QWORD *)(a4 + 96) = v147;
                          *(_QWORD *)&v146[32] = 0;
                          *(_OWORD *)&v146[48] = 0uLL;
                          v147 = 0;
                          *(_BYTE *)(a4 + 104) = 1;
                        }
                        *(_BYTE *)(a4 + 112) = 1;
                        *(_BYTE *)(a4 + 120) = 0;
                        if (v37 && (v146[7] & 0x80000000) != 0)
                          operator delete(*(void **)&__dst[16]);
                        if (!v132)
                        {
LABEL_343:
                          if ((SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_344;
                          goto LABEL_348;
                        }
                      }
                      else
                      {
                        *(_BYTE *)(a4 + 120) = 0;
                        if (!v132)
                          goto LABEL_343;
                      }
                      if (v131)
                      {
                        if (v130 < 0)
                          operator delete(v129);
                        if (v128 < 0)
                          operator delete(v127);
                      }
                      if (v126 && v125 < 0)
                      {
                        operator delete(v124[0]);
                        if ((SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_344;
                        goto LABEL_348;
                      }
                      goto LABEL_343;
                    }
                  }
                  else if (v35)
                  {
                    goto LABEL_83;
                  }
                  v39 = std::__fs::filesystem::path::__stem(&v135);
                  if (v39.__size_ > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v39.__size_ >= 0x17)
                  {
                    v41 = (v39.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v39.__size_ | 7) != 0x17)
                      v41 = v39.__size_ | 7;
                    v42 = v41 + 1;
                    v40 = operator new(v41 + 1);
                    *(_QWORD *)&__dst[16] = v42 | 0x8000000000000000;
                    *(_QWORD *)__dst = v40;
                    *(_QWORD *)&__dst[8] = v39.__size_;
                  }
                  else
                  {
                    __dst[23] = v39.__size_;
                    v40 = __dst;
                    if (!v39.__size_)
                    {
LABEL_102:
                      v40[v39.__size_] = 0;
                      size = *(_QWORD *)&__dst[8];
                      v44 = *(void **)__dst;
                      *(_DWORD *)v123 = *(_DWORD *)&__dst[16];
                      *(_DWORD *)&v123[3] = *(_DWORD *)&__dst[19];
                      v45 = __dst[23];
                      if ((__dst[23] & 0x80000000) != 0)
                      {
                        sub_20E860C04(&pn, *(void **)__dst, *(unint64_t *)&__dst[8]);
                        LOBYTE(v47) = *((_BYTE *)&pn.__r_.__value_.__s + 23);
                        size = pn.__r_.__value_.__l.__size_;
                        v46 = (std::string *)pn.__r_.__value_.__r.__words[0];
                      }
                      else
                      {
                        *(_OWORD *)&pn.__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
                        LODWORD(pn.__r_.__value_.__r.__words[2]) = *(_DWORD *)v123;
                        *(_DWORD *)((char *)&pn.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v123[3];
                        *((_BYTE *)&pn.__r_.__value_.__s + 23) = __dst[23];
                        v46 = *(std::string **)__dst;
                        LOBYTE(v47) = __dst[23];
                      }
                      *(_QWORD *)__dst = "info_";
                      *(_QWORD *)&__dst[8] = 5;
                      v47 = v47;
                      if ((v47 & 0x80u) != 0)
                        v47 = size;
                      else
                        v46 = &pn;
                      *(_QWORD *)&__dst[16] = v46;
                      *(_QWORD *)&__dst[24] = v47;
                      *(_QWORD *)v146 = ".json";
                      *(_QWORD *)&v146[8] = 5;
                      sub_20E8778D4((uint64_t)__dst, (uint64_t)&v146[16], 0, 0, (std::string *)v115);
                      *(_OWORD *)v136 = *(_OWORD *)v115;
                      *(_QWORD *)&v136[16] = *(_QWORD *)&v115[16];
                      memset(v115, 0, 24);
                      if (SHIBYTE(__p[2]) < 0)
                      {
                        sub_20E860C04(v151, __p[0], (unint64_t)__p[1]);
                      }
                      else
                      {
                        *(_OWORD *)v151 = *(_OWORD *)__p;
                        *(void **)&v151[16] = __p[2];
                      }
                      sub_20E8A944C((uint64_t)v151, (std::__fs::filesystem::path *)v136);
                      if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__src.__pn_.__r_.__value_.__l.__data_);
                      __src = *(std::__fs::filesystem::path *)v151;
                      v151[23] = 0;
                      v151[0] = 0;
                      if ((v136[23] & 0x80000000) != 0)
                      {
                        operator delete(*(void **)v136);
                        if ((v115[23] & 0x80000000) == 0)
                        {
LABEL_125:
                          if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_126;
                          goto LABEL_130;
                        }
                      }
                      else if ((v115[23] & 0x80000000) == 0)
                      {
                        goto LABEL_125;
                      }
                      operator delete(*(void **)v115);
                      if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_126:
                        if ((v45 & 0x80000000) == 0)
                          goto LABEL_133;
LABEL_131:
                        v21 = v44;
                        goto LABEL_132;
                      }
LABEL_130:
                      operator delete(pn.__r_.__value_.__l.__data_);
                      if ((v45 & 0x80000000) == 0)
                        goto LABEL_133;
                      goto LABEL_131;
                    }
                  }
                  memmove(v40, v39.__data_, v39.__size_);
                  goto LABEL_102;
                }
LABEL_80:
                operator delete(*(void **)v151);
                goto LABEL_81;
              }
            }
            else
            {
              *(_OWORD *)v151 = *(_OWORD *)__dst;
              *(_DWORD *)&v151[16] = *(_DWORD *)v136;
              *(_DWORD *)&v151[19] = *(_DWORD *)&v136[3];
              v151[23] = __dst[23];
              v30 = __dst[23];
              v31 = __dst[23];
              v32 = __dst[23];
              if (__dst[23] < 0)
                v32 = *(_QWORD *)&__dst[8];
              if (v32 >= 4)
                goto LABEL_72;
            }
            v35 = 0;
            if ((v30 & 0x80) == 0)
              goto LABEL_81;
            goto LABEL_80;
          }
        }
        memmove(v25, v24.__data_, v24.__size_);
        goto LABEL_68;
      }
    }
    memmove(v15, v14.__data_, v14.__size_);
    goto LABEL_31;
  }
  if (__p != (void **)a1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20E867BF8(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      __p[2] = *(void **)(a1 + 16);
    }
  }
  memset(v151, 0, 24);
  sub_20E8A9678((std::string *)v151, (std::string *)"sequence.csv", (std::string *)"");
  if (SHIBYTE(__p[2]) < 0)
  {
    sub_20E860C04(__dst, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__p;
    *(void **)&__dst[16] = __p[2];
  }
  sub_20E8A944C((uint64_t)__dst, (std::__fs::filesystem::path *)v151);
  if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__pn_.__r_.__value_.__l.__data_);
  v135 = *(std::__fs::filesystem::path *)__dst;
  __dst[23] = 0;
  __dst[0] = 0;
  if ((v151[23] & 0x80000000) != 0)
    operator delete(*(void **)v151);
  memset(v151, 0, 24);
  sub_20E8A9678((std::string *)v151, (std::string *)"info.json", (std::string *)"");
  if (SHIBYTE(__p[2]) < 0)
  {
    sub_20E860C04(__dst, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__p;
    *(void **)&__dst[16] = __p[2];
  }
  sub_20E8A944C((uint64_t)__dst, (std::__fs::filesystem::path *)v151);
  if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__pn_.__r_.__value_.__l.__data_);
  __src = *(std::__fs::filesystem::path *)__dst;
  __dst[23] = 0;
  __dst[0] = 0;
  if ((v151[23] & 0x80000000) != 0)
  {
    v21 = *(void **)v151;
LABEL_132:
    operator delete(v21);
  }
LABEL_133:
  *(_OWORD *)v123 = *(_OWORD *)a3;
  *(_QWORD *)&v123[16] = *(_QWORD *)(a3 + 16);
  *(_OWORD *)&v136[4] = *(_OWORD *)a3;
  *(_QWORD *)&v136[20] = *(_QWORD *)(a3 + 16);
  *(_OWORD *)&pn.__r_.__value_.__l.__data_ = xmmword_2103BE4C0;
  pn.__r_.__value_.__s.__data_[16] = 0;
  *(_QWORD *)&__dst[8] = 0x300000001;
  v48 = operator new();
  *(_BYTE *)v48 = 0;
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)&__dst[24] = sub_210204368;
  v146[0] = 1;
  v146[56] = 0;
  LOBYTE(v147) = 0;
  BYTE4(v147) = 0;
  memset(&v146[16], 0, 25);
  *(_QWORD *)&v146[8] = v48;
  *(_QWORD *)&__dst[16] = v48;
  *(_QWORD *)__dst = &off_24CA0BCF8;
  sub_2101FAEA0((uint64_t)__dst);
  *(_QWORD *)v151 = "version";
  *(_QWORD *)&v151[8] = 7;
  *(_DWORD *)&v151[16] = 1;
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "version";
    *(_QWORD *)&v146[48] = 7;
    if (!v146[56])
      v146[56] = 1;
  }
  sub_2101FD244((uint64_t)__dst, &v151[16]);
  *(_OWORD *)v151 = *(_OWORD *)v136;
  *(_OWORD *)&v151[12] = *(_OWORD *)&v136[12];
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "protocol_info";
    *(_QWORD *)&v146[48] = 13;
    if (!v146[56])
      v146[56] = 1;
  }
  sub_2101FAEA0((uint64_t)__dst);
  *(_QWORD *)v115 = "version";
  *(_QWORD *)&v115[8] = 7;
  *(_DWORD *)&v115[16] = 1;
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "version";
    *(_QWORD *)&v146[48] = 7;
    if (!v146[56])
      v146[56] = 1;
  }
  sub_2101FD244((uint64_t)__dst, &v115[16]);
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "current";
    *(_QWORD *)&v146[48] = 7;
    if (!v146[56])
      v146[56] = 1;
  }
  *(_QWORD *)v115 = &v151[4];
  sub_20FEE0D24((uint64_t)__dst, (uint64_t **)v115);
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "min";
    *(_QWORD *)&v146[48] = 3;
    if (!v146[56])
      v146[56] = 1;
  }
  *(_QWORD *)v115 = &v151[16];
  sub_20FEE0D24((uint64_t)__dst, (uint64_t **)v115);
  v49 = *(_QWORD *)&v146[24];
  *(_QWORD *)&v146[8] = *(_QWORD *)(*(_QWORD *)&v146[24] - 8);
  *(_QWORD *)&v146[24] -= 8;
  if (v146[56])
    v146[56] = 0;
  *(_QWORD *)&v146[8] = *(_QWORD *)(v49 - 16);
  *(_QWORD *)&v146[24] = v49 - 16;
  sub_2101F7C54(*(unsigned __int8 **)&__dst[16], (uint64_t)&pn, v121);
  *(_QWORD *)__dst = &off_24CA1DC90;
  if (*(_QWORD *)&v146[16])
  {
    *(_QWORD *)&v146[24] = *(_QWORD *)&v146[16];
    operator delete(*(void **)&v146[16]);
  }
  v50 = *(void ****)&__dst[16];
  *(_QWORD *)&__dst[16] = 0;
  if (v50)
    (*(void (**)(void ***))&__dst[24])(v50);
  if (!(*(unsigned int (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 328))(a2, &__src))
  {
    sub_210224144(&__src, 0x30u, a2, v115);
    if (*(_QWORD *)&v115[8])
    {
      v56 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&v115[8] + 16))(*(_QWORD *)&v115[8]);
      if ((v122 & 0x80u) == 0)
        v57 = v121;
      else
        v57 = (void **)v121[0];
      if ((v122 & 0x80u) == 0)
        v58 = v122;
      else
        v58 = (uint64_t)v121[1];
      sub_20E86A980(v56, (uint64_t)v57, v58);
      v150 = 1;
      v59 = *(std::__shared_weak_count **)&v115[16];
      if (!*(_QWORD *)&v115[16])
        goto LABEL_268;
      goto LABEL_264;
    }
    if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_20E860C04(&pn, __src.__pn_.__r_.__value_.__l.__data_, __src.__pn_.__r_.__value_.__l.__size_);
    else
      pn = __src.__pn_;
    v66 = std::string::insert(&pn, 0, "failed to create file ", 0x16uLL);
    v68 = (void *)v66->__r_.__value_.__r.__words[0];
    v67 = v66->__r_.__value_.__l.__size_;
    LODWORD(v118) = v66->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v118 + 3) = *(_DWORD *)((char *)&v66->__r_.__value_.__r.__words[2] + 3);
    v69 = SHIBYTE(v66->__r_.__value_.__r.__words[2]);
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (v69 < 0)
    {
      sub_20E860C04(v136, v68, v67);
    }
    else
    {
      *(_QWORD *)v136 = v68;
      *(_QWORD *)&v136[8] = v67;
      *(_DWORD *)&v136[16] = v118;
      *(_DWORD *)&v136[19] = *(_DWORD *)((char *)&v118 + 3);
      v136[23] = v69;
    }
    v136[24] = 1;
    LOBYTE(v137) = 0;
    v141 = 0;
    v142 = 1;
    sub_20E89F2F8(5u, (__int128 *)v136, (uint64_t)v151);
    *(_OWORD *)__dst = *(_OWORD *)v151;
    __dst[16] = 0;
    LOBYTE(v149) = 0;
    if (v159)
    {
      v146[8] = 0;
      if (v153)
      {
        *(_OWORD *)&__dst[16] = *(_OWORD *)&v151[16];
        *(_QWORD *)v146 = p_pn;
        *(_QWORD *)&v151[24] = 0;
        p_pn = 0;
        *(_QWORD *)&v151[16] = 0;
        v146[8] = 1;
      }
      v146[16] = 0;
      v148 = 0;
      if (v158)
      {
        *(_OWORD *)&v146[32] = v155;
        *(_OWORD *)&v146[16] = v154;
        v154 = 0uLL;
        *(_OWORD *)&v146[48] = v156;
        v147 = v157;
        *(_QWORD *)&v155 = 0;
        v156 = 0uLL;
        v157 = 0;
        v148 = 1;
      }
      LOBYTE(v149) = 1;
      v150 = 0;
      if (v153 && SHIBYTE(p_pn) < 0)
        operator delete(*(void **)&v151[16]);
    }
    else
    {
      v150 = 0;
    }
    if (v142)
    {
      if (v141)
      {
        if (v140 < 0)
          operator delete(v139);
        if (v138 < 0)
          operator delete(v137);
      }
      if (v136[24] && (v136[23] & 0x80000000) != 0)
        operator delete(*(void **)v136);
    }
    if (v69 < 0)
    {
      operator delete(v68);
      if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_263:
        v59 = *(std::__shared_weak_count **)&v115[16];
        if (!*(_QWORD *)&v115[16])
          goto LABEL_268;
LABEL_264:
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v71 = __ldaxr(p_shared_owners);
        while (__stlxr(v71 - 1, p_shared_owners));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
LABEL_268:
        if (!v150)
        {
          *(_OWORD *)v151 = *(_OWORD *)__dst;
          v73 = sub_20E89EFE4(&v151[16], (__int128 *)&__dst[16]);
          *(_OWORD *)a4 = *(_OWORD *)v151;
          *(_BYTE *)(a4 + 16) = 0;
          *(_BYTE *)(a4 + 112) = 0;
          if (v159)
          {
            *(_BYTE *)(a4 + 40) = 0;
            v74 = v153;
            if (v153)
            {
              *(_OWORD *)(a4 + 16) = *(_OWORD *)v73;
              *(_QWORD *)(a4 + 32) = *((_QWORD *)v73 + 2);
              *((_QWORD *)v73 + 1) = 0;
              *((_QWORD *)v73 + 2) = 0;
              *(_QWORD *)v73 = 0;
              *(_BYTE *)(a4 + 40) = 1;
            }
            *(_BYTE *)(a4 + 48) = 0;
            *(_BYTE *)(a4 + 104) = 0;
            if (v158)
            {
              v75 = *((_QWORD *)&v155 + 1);
              *(_QWORD *)(a4 + 64) = v155;
              *(_OWORD *)(a4 + 48) = v154;
              v154 = 0uLL;
              *(_QWORD *)(a4 + 72) = v75;
              *(_OWORD *)(a4 + 80) = v156;
              *(_QWORD *)(a4 + 96) = v157;
              *(_QWORD *)&v155 = 0;
              v156 = 0uLL;
              v157 = 0;
              *(_BYTE *)(a4 + 104) = 1;
            }
            *(_BYTE *)(a4 + 112) = 1;
            *(_BYTE *)(a4 + 120) = 0;
            if (v74 && SHIBYTE(p_pn) < 0)
              operator delete(*(void **)&v151[16]);
          }
          else
          {
            *(_BYTE *)(a4 + 120) = 0;
          }
          if (!v150 && (_BYTE)v149)
          {
            if (v148)
            {
              if (SHIBYTE(v147) < 0)
                operator delete(*(void **)&v146[48]);
              if ((v146[39] & 0x80000000) != 0)
                operator delete(*(void **)&v146[16]);
            }
            if (v146[8] && (v146[7] & 0x80000000) != 0)
              operator delete(*(void **)&__dst[16]);
          }
          goto LABEL_342;
        }
LABEL_269:
        sub_210224144(&v135, 0x11u, a2, v151);
        v72 = *(_QWORD *)&v151[8];
        if (*(_QWORD *)&v151[8])
        {
          if (SHIBYTE(__p[2]) < 0)
          {
            sub_20E860C04(__dst, __p[0], (unint64_t)__p[1]);
            v72 = *(_QWORD *)&v151[8];
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)__p;
            *(void **)&__dst[16] = __p[2];
          }
          *(_QWORD *)&__dst[24] = &off_24CA1F288;
          *(_QWORD *)v146 = v72;
          *(_QWORD *)&v146[8] = *(_QWORD *)&v151[16];
          if (*(_QWORD *)&v151[16])
          {
            v76 = (unint64_t *)(*(_QWORD *)&v151[16] + 8);
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
            v78 = *(_OWORD *)v146;
          }
          else
          {
            v78 = v72;
          }
          *(_OWORD *)a4 = *(_OWORD *)__dst;
          *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
          *(_QWORD *)(a4 + 24) = &off_24CA1F288;
          *(_OWORD *)(a4 + 32) = v78;
          *(_BYTE *)(a4 + 120) = 1;
          v63 = *(std::__shared_weak_count **)&v151[16];
          if (!*(_QWORD *)&v151[16])
            goto LABEL_342;
LABEL_338:
          v89 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldaxr(v89);
          while (__stlxr(v65 - 1, v89));
          goto LABEL_340;
        }
        if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
          sub_20E860C04(v136, v135.__pn_.__r_.__value_.__l.__data_, v135.__pn_.__r_.__value_.__l.__size_);
        else
          *(std::__fs::filesystem::path *)v136 = v135;
        v83 = std::string::insert((std::string *)v136, 0, "failed to create file ", 0x16uLL);
        v85 = (void *)v83->__r_.__value_.__r.__words[0];
        v84 = v83->__r_.__value_.__l.__size_;
        *(_DWORD *)v115 = v83->__r_.__value_.__r.__words[2];
        *(_DWORD *)&v115[3] = *(_DWORD *)((char *)&v83->__r_.__value_.__r.__words[2] + 3);
        v86 = SHIBYTE(v83->__r_.__value_.__r.__words[2]);
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        if (v86 < 0)
        {
          sub_20E860C04(&v90, v85, v84);
        }
        else
        {
          *(_QWORD *)&v90 = v85;
          *((_QWORD *)&v90 + 1) = v84;
          *(_DWORD *)v91 = *(_DWORD *)v115;
          *(_DWORD *)&v91[3] = *(_DWORD *)&v115[3];
          v92 = v86;
        }
        v93 = 1;
        LOBYTE(v94) = 0;
        v98 = 0;
        v99 = 1;
        sub_20E89F2F8(5u, &v90, (uint64_t)__dst);
        *(_OWORD *)a4 = *(_OWORD *)__dst;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if ((_BYTE)v149)
        {
          *(_BYTE *)(a4 + 40) = 0;
          v87 = v146[8];
          if (v146[8])
          {
            *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
            *(_QWORD *)(a4 + 32) = *(_QWORD *)v146;
            *(_QWORD *)&__dst[24] = 0;
            *(_QWORD *)v146 = 0;
            *(_QWORD *)&__dst[16] = 0;
            *(_BYTE *)(a4 + 40) = 1;
          }
          *(_BYTE *)(a4 + 48) = 0;
          *(_BYTE *)(a4 + 104) = 0;
          if (v148)
          {
            v88 = *(_QWORD *)&v146[40];
            *(_QWORD *)(a4 + 64) = *(_QWORD *)&v146[32];
            *(_OWORD *)(a4 + 48) = *(_OWORD *)&v146[16];
            *(_OWORD *)&v146[16] = 0uLL;
            *(_QWORD *)(a4 + 72) = v88;
            *(_OWORD *)(a4 + 80) = *(_OWORD *)&v146[48];
            *(_QWORD *)(a4 + 96) = v147;
            *(_QWORD *)&v146[32] = 0;
            *(_OWORD *)&v146[48] = 0uLL;
            v147 = 0;
            *(_BYTE *)(a4 + 104) = 1;
          }
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (v87 && (v146[7] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[16]);
        }
        else
        {
          *(_BYTE *)(a4 + 120) = 0;
        }
        if (v99)
        {
          if (v98)
          {
            if (v97 < 0)
              operator delete(v96);
            if (v95 < 0)
              operator delete(v94);
          }
          if (v93 && v92 < 0)
            operator delete((void *)v90);
        }
        if (v86 < 0)
        {
          operator delete(v85);
          if ((v136[23] & 0x80000000) == 0)
          {
LABEL_337:
            v63 = *(std::__shared_weak_count **)&v151[16];
            if (!*(_QWORD *)&v151[16])
              goto LABEL_342;
            goto LABEL_338;
          }
        }
        else if ((v136[23] & 0x80000000) == 0)
        {
          goto LABEL_337;
        }
        operator delete(*(void **)v136);
        v63 = *(std::__shared_weak_count **)&v151[16];
        if (!*(_QWORD *)&v151[16])
          goto LABEL_342;
        goto LABEL_338;
      }
    }
    else if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_263;
    }
    operator delete(pn.__r_.__value_.__l.__data_);
    v59 = *(std::__shared_weak_count **)&v115[16];
    if (!*(_QWORD *)&v115[16])
      goto LABEL_268;
    goto LABEL_264;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::__fs::filesystem::path *, uint64_t))(*(_QWORD *)a2 + 368))(&v118, a2, &__src, 8);
  v51 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 16))(v119);
  sub_20EA9DA18(&v117, *(_QWORD **)((char *)v51 + *(_QWORD *)(*v51 - 24) + 40), 0);
  sub_2101F8600((uint64_t *)&v117, (uint64_t *)&v116);
  memset(&v114[4], 0, 24);
  sub_20EB08AD0((uint64_t)v151, v116);
  *(_QWORD *)&__dst[8] = 0x300000001;
  *(_QWORD *)__dst = &unk_24CA1DF08;
  v52 = operator new();
  *(_BYTE *)v52 = v151[0];
  *(_QWORD *)(v52 + 8) = *(_QWORD *)&v151[8];
  v151[0] = 0;
  *(_QWORD *)&v151[8] = 0;
  *(_QWORD *)&__dst[16] = v52;
  *(_QWORD *)&__dst[24] = sub_210204368;
  *(_QWORD *)v146 = v52;
  v148 = 0;
  v149 = 0;
  memset(&v146[8], 0, 49);
  sub_20EB07D94((void ***)&v151[8], 0);
  *(_QWORD *)__dst = &off_24CA0B940;
  sub_20FF161DC((uint64_t)__dst, (uint64_t)v114);
  *(_OWORD *)v115 = *(_OWORD *)v114;
  *(_OWORD *)&v115[12] = *(_OWORD *)&v114[12];
  *(_QWORD *)__dst = &unk_24CA1DF08;
  if (*(_QWORD *)&v146[32])
  {
    *(_QWORD *)&v146[40] = *(_QWORD *)&v146[32];
    operator delete(*(void **)&v146[32]);
  }
  if (*(_QWORD *)&v146[8])
  {
    *(_QWORD *)&v146[16] = *(_QWORD *)&v146[8];
    operator delete(*(void **)&v146[8]);
  }
  v53 = *(void ****)&__dst[16];
  *(_QWORD *)&__dst[16] = 0;
  if (v53)
    (*(void (**)(void ***))&__dst[24])(v53);
  *(_OWORD *)v113 = *(_OWORD *)&v115[4];
  *(_QWORD *)&v113[16] = *(_QWORD *)&v115[20];
  if (*(_QWORD *)&v115[4] == *(_QWORD *)v123
    && *(unsigned int *)&v113[8] == (unint64_t)*(unsigned int *)&v123[8]
    && *(_QWORD *)&v113[12] == *(_QWORD *)&v123[12]
    && *(unsigned int *)&v113[20] == (unint64_t)*(unsigned int *)&v123[20])
  {
    v79 = v116;
    v116 = 0;
    if (v79)
    {
      sub_20EB07D94((void ***)v79 + 1, *v79);
      MEMORY[0x212BC6398](v79, 0x1022C40B06DCE69);
    }
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117.__r_.__value_.__l.__data_);
    v80 = v120;
    if (v120)
    {
      v81 = (unint64_t *)&v120->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    goto LABEL_269;
  }
  if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v101, v135.__pn_.__r_.__value_.__l.__data_, v135.__pn_.__r_.__value_.__l.__size_);
  else
    v101 = v135;
  if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v100, __src.__pn_.__r_.__value_.__l.__data_, __src.__pn_.__r_.__value_.__l.__size_);
  else
    v100 = __src;
  *(_DWORD *)&v136[24] = 0;
  sub_20E9955EC(v136, "Can't append to sequence '");
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = &v101;
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = &v101;
  p_pn = &v101;
  if (*(_DWORD *)&v136[24] == -1)
    sub_20E877AB8();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24CA0BCD0[*(unsigned int *)&v136[24]])(&pn, v136);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = "'. Info file '";
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = "'. Info file '";
  p_pn = (std::__fs::filesystem::path *)"'. Info file '";
  if (*(_DWORD *)&v136[24] == -1)
    sub_20E877AB8();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24CA0BE28[*(unsigned int *)&v136[24]])(&pn, v136);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = &v100;
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = &v100;
  p_pn = &v100;
  if (*(_DWORD *)&v136[24] == -1)
    sub_20E877AB8();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24CA0BCD0[*(unsigned int *)&v136[24]])(&pn, v136);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = "' sequence protocol version ";
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = "' sequence protocol version ";
  p_pn = (std::__fs::filesystem::path *)"' sequence protocol version ";
  if (*(_DWORD *)&v136[24] == -1)
    sub_20E877AB8();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24CA0BE40[*(unsigned int *)&v136[24]])(&pn, v136);
  sub_20FF163AC(&pn, (uint64_t *)v113);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = &pn;
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = &pn;
  p_pn = (std::__fs::filesystem::path *)&pn;
  if (*(_DWORD *)&v136[24] == -1)
    sub_20E877AB8();
  v144 = v151;
  ((void (*)(_BYTE **, _BYTE *))off_24CA0BC88[*(unsigned int *)&v136[24]])(&v144, v136);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = " is incompatible with current version ";
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = " is incompatible with current version ";
  p_pn = (std::__fs::filesystem::path *)" is incompatible with current version ";
  if (*(_DWORD *)&v136[24] == -1)
    sub_20E877AB8();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24CA0BE58[*(unsigned int *)&v136[24]])(&pn, v136);
  sub_20FF163AC(&pn, (uint64_t *)v123);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = &pn;
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = &pn;
  p_pn = (std::__fs::filesystem::path *)&pn;
  if (*(_DWORD *)&v136[24] == -1)
    sub_20E877AB8();
  v144 = v151;
  ((void (*)(_BYTE **, _BYTE *))off_24CA0BC88[*(unsigned int *)&v136[24]])(&v144, v136);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = ".";
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = ".";
  p_pn = (std::__fs::filesystem::path *)".";
  if (*(_DWORD *)&v136[24] == -1)
    sub_20E877AB8();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24CA0BE70[*(unsigned int *)&v136[24]])(&pn, v136);
  if (*(_DWORD *)&v136[24] == -1)
    sub_20E877AB8();
  *(_QWORD *)v151 = &pn;
  ((void (*)(void **__return_ptr, _BYTE *, _BYTE *))off_24CA0BCB8[*(unsigned int *)&v136[24]])(v102, v151, v136);
  if (*(_DWORD *)&v136[24] != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24CA0BCA0[*(unsigned int *)&v136[24]])(v151, v136);
  if (SHIBYTE(v103) < 0)
  {
    sub_20E860C04(&v104, v102[0], (unint64_t)v102[1]);
  }
  else
  {
    v104 = *(_OWORD *)v102;
    v105 = v103;
  }
  v106 = 1;
  LOBYTE(v107) = 0;
  v111 = 0;
  v112 = 1;
  sub_20E89F2F8(5u, &v104, (uint64_t)__dst);
  *(_OWORD *)a4 = *(_OWORD *)__dst;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!(_BYTE)v149)
  {
    *(_BYTE *)(a4 + 120) = 0;
    if (!v112)
      goto LABEL_224;
    goto LABEL_216;
  }
  *(_BYTE *)(a4 + 40) = 0;
  v60 = v146[8];
  if (v146[8])
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
    *(_QWORD *)(a4 + 32) = *(_QWORD *)v146;
    *(_QWORD *)&__dst[24] = 0;
    *(_QWORD *)v146 = 0;
    *(_QWORD *)&__dst[16] = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (v148)
  {
    v61 = *(_QWORD *)&v146[40];
    *(_QWORD *)(a4 + 64) = *(_QWORD *)&v146[32];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)&v146[16];
    *(_OWORD *)&v146[16] = 0uLL;
    *(_QWORD *)(a4 + 72) = v61;
    *(_OWORD *)(a4 + 80) = *(_OWORD *)&v146[48];
    *(_QWORD *)(a4 + 96) = v147;
    *(_QWORD *)&v146[32] = 0;
    *(_OWORD *)&v146[48] = 0uLL;
    v147 = 0;
    *(_BYTE *)(a4 + 104) = 1;
  }
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (v60 && (v146[7] & 0x80000000) != 0)
    operator delete(*(void **)&__dst[16]);
  if (v112)
  {
LABEL_216:
    if (v111)
    {
      if (v110 < 0)
        operator delete(v109);
      if (v108 < 0)
        operator delete(v107);
    }
    if (v106 && SHIBYTE(v105) < 0)
      operator delete((void *)v104);
  }
LABEL_224:
  if (SHIBYTE(v103) < 0)
  {
    operator delete(v102[0]);
    if ((SHIBYTE(v100.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_226:
      if ((SHIBYTE(v101.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_227;
      goto LABEL_237;
    }
  }
  else if ((SHIBYTE(v100.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_226;
  }
  operator delete(v100.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v101.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_227:
    v62 = v116;
    v116 = 0;
    if (!v62)
      goto LABEL_229;
    goto LABEL_228;
  }
LABEL_237:
  operator delete(v101.__pn_.__r_.__value_.__l.__data_);
  v62 = v116;
  v116 = 0;
  if (v62)
  {
LABEL_228:
    sub_20EB07D94((void ***)v62 + 1, *v62);
    MEMORY[0x212BC6398](v62, 0x1022C40B06DCE69);
  }
LABEL_229:
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  v63 = v120;
  if (v120)
  {
    v64 = (unint64_t *)&v120->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
LABEL_340:
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
LABEL_342:
  if (((char)v122 & 0x80000000) == 0)
    goto LABEL_343;
  operator delete(v121[0]);
  if ((SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_344:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_345;
    goto LABEL_349;
  }
LABEL_348:
  operator delete(__src.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_345:
    if ((SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_350:
    operator delete(v135.__pn_.__r_.__value_.__l.__data_);
    return;
  }
LABEL_349:
  operator delete(__p[0]);
  if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_350;
}

void sub_20FF0E9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  char a71;
  void *v71;
  uint64_t v72;

  operator delete(v71);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  sub_21022EBB8(v72 - 224);
  if (a71 < 0)
    operator delete(a66);
  if (SLOBYTE(STACK[0x277]) < 0)
  {
    operator delete((void *)STACK[0x260]);
    if ((SLOBYTE(STACK[0x297]) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((SLOBYTE(STACK[0x297]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x2B7]) < 0)
      goto LABEL_8;
    goto LABEL_11;
  }
  operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x2A0]);
    _Unwind_Resume(a1);
  }
LABEL_11:
  _Unwind_Resume(a1);
}

void sub_20FF0ED60(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[7].__imp_.__imp_))
    goto LABEL_5;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if (SHIBYTE(this[5].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[3].__imp_.__imp_))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[4].__vftable);
  if (!LOBYTE(this[3].__imp_.__imp_))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[2].__vftable);
    std::runtime_error::~runtime_error(this);
    return;
  }
LABEL_7:
  std::runtime_error::~runtime_error(this);
}

void sub_20FF0EDEC(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable))
    goto LABEL_10;
  if (!LOBYTE(this[7].__imp_.__imp_))
    goto LABEL_5;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    {
LABEL_5:
      if (!LOBYTE(this[3].__imp_.__imp_))
        goto LABEL_10;
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(this[4].__vftable);
  if (!LOBYTE(this[3].__imp_.__imp_))
    goto LABEL_10;
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[2].__vftable);
LABEL_10:
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x212BC6398);
}

void sub_20FF0EE7C(uint64_t a1, uint64_t a2, void *__src, size_t __len, uint64_t a5, char a6)
{
  std::__fs::filesystem::path *p_dst;
  size_t v13;
  size_t v14;
  std::__fs::filesystem::path *v15;
  std::string::size_type size;
  std::string *v17;
  std::string *v18;
  _BYTE *v19;
  char v20;
  int v21;
  BOOL v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  uint64_t v26;
  std::string *v27;
  void **v28;
  void **p_data;
  void *v30;
  std::__fs::filesystem::path __p;
  void *v32;
  std::string *v33;
  std::__fs::filesystem::path v34;
  std::__fs::filesystem::path __dst;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__len >= 0x17)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v13 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = __len;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  p_dst->__pn_.__r_.__value_.__s.__data_[__len] = 0;
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &__dst;
  else
    v15 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__pn_.__r_.__value_.__l.__size_;
  sub_20E9E507C((char *)v15, size, ".", 1, 0, (uint64_t)&v32);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    v17 = (std::string *)v32;
    v18 = v33;
    memset(v36, 0, 15);
    if (v32 != v33)
      goto LABEL_17;
  }
  else
  {
    v17 = (std::string *)v32;
    v18 = v33;
    memset(v36, 0, 15);
    if (v32 != v33)
    {
LABEL_17:
      v19 = 0;
      v20 = 0;
      while (1)
      {
        v34.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        v34.__pn_.__r_.__value_.__l.__size_ = v36[0];
        *(std::string::size_type *)((char *)&v34.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v36 + 7);
        *((_BYTE *)&v34.__pn_.__r_.__value_.__s + 23) = v20;
        memset(v36, 0, 15);
        if (SHIBYTE(v17->__r_.__value_.__r.__words[2]) < 0)
        {
          if (!v17->__r_.__value_.__l.__size_ || *v17->__r_.__value_.__l.__data_ != 47)
          {
LABEL_27:
            if (std::__fs::filesystem::path::__filename(&v34).__size_)
              std::string::push_back(&v34.__pn_, 47);
            goto LABEL_30;
          }
        }
        else if (!*((_BYTE *)&v17->__r_.__value_.__s + 23) || v17->__r_.__value_.__s.__data_[0] != 47)
        {
          goto LABEL_27;
        }
        if (v20 < 0)
        {
          *v19 = 0;
          v34.__pn_.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v34.__pn_.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v34.__pn_.__r_.__value_.__s + 23) = 0;
        }
LABEL_30:
        v21 = SHIBYTE(v17->__r_.__value_.__r.__words[2]);
        v22 = v21 < 0;
        if (v21 >= 0)
          v23 = v17;
        else
          v23 = (std::string *)v17->__r_.__value_.__r.__words[0];
        v24 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
        if (v22)
          v24 = v17->__r_.__value_.__l.__size_;
        sub_20E8A9678(&v34.__pn_, v23, (std::string *)((char *)v23 + v24));
        v25 = HIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20E860C04(&__dst, v34.__pn_.__r_.__value_.__l.__data_, v34.__pn_.__r_.__value_.__l.__size_);
          v25 = HIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]);
        }
        else
        {
          __dst = v34;
        }
        v36[0] = __dst.__pn_.__r_.__value_.__l.__size_;
        v19 = (_BYTE *)__dst.__pn_.__r_.__value_.__r.__words[0];
        *(_QWORD *)((char *)v36 + 7) = *(std::string::size_type *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[1] + 7);
        v20 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
        *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = 0;
        __dst.__pn_.__r_.__value_.__s.__data_[0] = 0;
        if (v25 < 0)
          operator delete(v34.__pn_.__r_.__value_.__l.__data_);
        if (++v17 == v18)
        {
          __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
          __p.__pn_.__r_.__value_.__l.__size_ = v36[0];
          *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v36 + 7);
          *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v20;
          if (a6)
            goto LABEL_41;
LABEL_50:
          if (*(char *)(a2 + 23) < 0)
          {
            sub_20E860C04((_BYTE *)a1, *(void **)a2, *(_QWORD *)(a2 + 8));
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          }
          sub_20E8A944C(a1, &__p);
          goto LABEL_63;
        }
      }
    }
  }
  memset(&__p, 0, sizeof(__p));
  if (!a6)
    goto LABEL_50;
LABEL_41:
  memset(&v34, 0, sizeof(v34));
  v26 = *(unsigned __int8 *)(a5 + 23);
  if ((v26 & 0x80u) == 0)
    v27 = (std::string *)a5;
  else
    v27 = *(std::string **)a5;
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(a5 + 8);
  sub_20E8A9678(&v34.__pn_, v27, (std::string *)((char *)v27 + v26));
  if (*(char *)(a2 + 23) < 0)
    sub_20E860C04(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::__fs::filesystem::path *)a2;
  sub_20E8A944C((uint64_t)&__dst, &v34);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04((_BYTE *)a1, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
  else
    *(std::__fs::filesystem::path *)a1 = __dst;
  sub_20E8A944C(a1, &__p);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_63;
  }
  else if ((SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(v34.__pn_.__r_.__value_.__l.__data_);
LABEL_63:
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  v28 = (void **)v32;
  if (v32)
  {
    p_data = (void **)&v33->__r_.__value_.__l.__data_;
    v30 = v32;
    if (v33 != v32)
    {
      do
      {
        if (*((char *)p_data - 1) < 0)
          operator delete(*(p_data - 3));
        p_data -= 3;
      }
      while (p_data != v28);
      v30 = v32;
    }
    v33 = (std::string *)v28;
    operator delete(v30);
  }
}

void sub_20FF0F290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  sub_20E89FB98(&a16);
  _Unwind_Resume(a1);
}

void sub_20FF0F384(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int i;
  std::string *v17;
  __int128 v18;
  std::string v19;
  void *v20[2];
  std::string::size_type v21;
  int v22;
  std::string __p;
  std::__fs::filesystem::path v24;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_20FF0F648(&v24.__pn_, *a3, a4, a5, (uint64_t *)&__p, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    sub_20E860C04((_BYTE *)a1, *(void **)a2, *(_QWORD *)(a2 + 8));
    goto LABEL_6;
  }
  if (*(char *)(a2 + 23) < 0)
    goto LABEL_5;
LABEL_3:
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
LABEL_6:
  sub_20E8A944C(a1, &v24);
  for (i = 1; ; i = v22 + 1)
  {
    v22 = i;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a8 + 176))(a8, a1) & 1) == 0)
      break;
    sub_20E8A9280(&v22);
    v17 = std::string::insert(&v19, 0, "_", 1uLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v21 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)v20 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    sub_20FF0F648(&__p, *a3, a4, a5, (uint64_t *)v20, a6, a7);
    if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v24.__pn_.__r_.__value_.__l.__data_);
      v24.__pn_ = __p;
      if ((SHIBYTE(v21) & 0x80000000) == 0)
      {
LABEL_11:
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_12;
        goto LABEL_16;
      }
    }
    else
    {
      v24.__pn_ = __p;
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_11;
    }
    operator delete(v20[0]);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_13:
      __p = *(std::string *)a2;
      goto LABEL_18;
    }
LABEL_17:
    sub_20E860C04(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_18:
    sub_20E8A944C((uint64_t)&__p, &v24);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = __p;
  }
  if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__pn_.__r_.__value_.__l.__data_);
}

void sub_20FF0F5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF0F648(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  std::string::size_type size;
  std::string *p_p;
  uint64_t v15;
  uint64_t *v16;
  std::string __p;
  std::string v18;
  _QWORD v19[10];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_210237040("%020llu", &__p, a2);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = "_";
  v19[3] = 1;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v19[4] = p_p;
  v19[5] = size;
  v15 = *((unsigned __int8 *)a5 + 23);
  if ((v15 & 0x80u) == 0)
    v16 = a5;
  else
    v16 = (uint64_t *)*a5;
  if ((v15 & 0x80u) != 0)
    v15 = a5[1];
  v19[6] = v16;
  v19[7] = v15;
  v19[8] = a6;
  v19[9] = a7;
  sub_20E8778D4((uint64_t)v19, (uint64_t)&v20, 0, 0, &v18);
  *a1 = v18;
  memset(&v18, 0, sizeof(v18));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20FF0F770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FF0F798(std::string *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  size_t v12;
  void **v13;
  std::string *p_dst;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type size;
  void *v23;
  int v24;
  void *v25;
  std::string::size_type v26;
  char v27;
  void *v28;
  void **v29;
  void **v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  std::string::size_type v35;
  std::string::value_type v36;
  int v37;
  std::string *v38;
  std::string::size_type v39;
  std::string::value_type v40;
  std::string v41;
  void *__p[2];
  unsigned __int8 v43;
  _DWORD v44[2];
  std::string __dst;
  void *v46[2];
  uint64_t v47;
  unsigned int v48;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) + 40))
      goto LABEL_15;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_92;
    }
    if (!*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8)) + 40))
      goto LABEL_15;
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_92;
    }
    v5 = *(_QWORD *)(a2 + 8);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v7 = *(unsigned __int8 *)(v6 + 39);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(v6 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if ((*(char *)(v9 + 39) & 0x80000000) == 0)
      {
LABEL_14:
        *(_OWORD *)v46 = *(_OWORD *)(v9 + 16);
        v47 = *(_QWORD *)(v9 + 32);
LABEL_59:
        v26 = HIBYTE(v47);
        v27 = HIBYTE(v47);
        v29 = (void **)v46[0];
        v28 = v46[1];
        if (v47 >= 0)
          v30 = v46;
        else
          v30 = (void **)v46[0];
        if (v47 >= 0)
          v31 = (char *)HIBYTE(v47);
        else
          v31 = (char *)v46[1];
        if (v31)
        {
          do
          {
            v32 = (char *)memchr(" .\\/:*?|<>\"", *(char *)v30, 0xBuLL);
            v33 = "";
            if (v32)
              v33 = v32;
            if (v33 - " .\\/:*?|<>\"" != 11)
              *(_BYTE *)v30 = 95;
            v30 = (void **)((char *)v30 + 1);
            --v31;
          }
          while (v31);
          v26 = HIBYTE(v47);
          v29 = (void **)v46[0];
          v28 = v46[1];
          v27 = HIBYTE(v47);
        }
        v34 = v27;
        if (v27 >= 0)
          v35 = v26;
        else
          v35 = (std::string::size_type)v28;
        a1->__r_.__value_.__r.__words[0] = 0;
        a1->__r_.__value_.__l.__size_ = 0;
        a1->__r_.__value_.__r.__words[2] = 0;
        std::string::reserve(a1, v35);
        if (v34 >= 0)
          v29 = v46;
        for (; v35; --v35)
        {
          v36 = __tolower(*(unsigned __int8 *)v29);
          std::string::push_back(a1, v36);
          v29 = (void **)((char *)v29 + 1);
        }
        goto LABEL_89;
      }
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_92;
      }
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
      if ((*(char *)(v9 + 39) & 0x80000000) == 0)
        goto LABEL_14;
    }
    sub_20E860C04(v46, *(void **)(v9 + 16), *(_QWORD *)(v9 + 24));
    goto LABEL_59;
  }
LABEL_15:
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v10 = *(_QWORD *)(a2 + 8);
      goto LABEL_18;
    }
LABEL_92:
    abort();
  }
LABEL_18:
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v10 + 48))(v46);
  v11 = SHIBYTE(v47);
  if (v47 >= 0)
    v12 = HIBYTE(v47);
  else
    v12 = (size_t)v46[1];
  if (v12 != 8)
  {
    v15 = v12 + 1;
    if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v15 >= 0x17)
    {
      v16 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v16 = v15 | 7;
      v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v12 + 1;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12 + 1;
      if (!v12)
        goto LABEL_37;
    }
LABEL_33:
    if (v11 >= 0)
      v18 = v46;
    else
      v18 = (void **)v46[0];
    memmove(p_dst, v18, v12);
LABEL_37:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v12) = 95;
    sub_20E9F6A6C(&v48);
    if ((v43 & 0x80u) == 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if ((v43 & 0x80u) == 0)
      v20 = v43;
    else
      v20 = (std::string::size_type)__p[1];
    v21 = std::string::append(&__dst, (const std::string::value_type *)v19, v20);
    v23 = (void *)v21->__r_.__value_.__r.__words[0];
    size = v21->__r_.__value_.__l.__size_;
    v44[0] = v21->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v44 + 3) = *(_DWORD *)((char *)&v21->__r_.__value_.__r.__words[2] + 3);
    v24 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if ((char)v43 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_45:
        if ((v24 & 0x80000000) == 0)
        {
LABEL_46:
          v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
          v41.__r_.__value_.__l.__size_ = size;
          LODWORD(v41.__r_.__value_.__r.__words[2]) = v44[0];
          *(_DWORD *)((char *)&v41.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v44 + 3);
          *((_BYTE *)&v41.__r_.__value_.__s + 23) = v24;
LABEL_50:
          sub_210236E50(&v41, ".", 1, "_", 1uLL, 0, 0, (uint64_t)a1);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v41.__r_.__value_.__l.__data_);
            if ((v24 & 0x80000000) == 0)
              goto LABEL_89;
          }
          else if ((v24 & 0x80000000) == 0)
          {
            goto LABEL_89;
          }
          v25 = v23;
          goto LABEL_55;
        }
LABEL_49:
        sub_20E860C04(&v41, v23, size);
        goto LABEL_50;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_49;
  }
  v13 = (void **)v46[0];
  if (v47 >= 0)
    v13 = v46;
  if (*(void **)"cv3d.viz" != *v13)
  {
    __dst.__r_.__value_.__r.__words[2] = 0x900000000000000;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    p_dst = &__dst;
    goto LABEL_33;
  }
  sub_20FF36404((uint64_t)__p, v48);
  v37 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v38 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v39 = __dst.__r_.__value_.__l.__size_;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  std::string::reserve(a1, v39);
  if (v37 >= 0)
    v38 = &__dst;
  for (; v39; --v39)
  {
    v40 = __tolower(v38->__r_.__value_.__s.__data_[0]);
    std::string::push_back(a1, v40);
    v38 = (std::string *)((char *)v38 + 1);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v25 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_55:
    operator delete(v25);
  }
LABEL_89:
  if (SHIBYTE(v47) < 0)
    operator delete(v46[0]);
}

void sub_20FF0FCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void sub_20FF0FD88(uint64_t a1, uint64_t a2, std::mutex *a3, const std::__fs::filesystem::path *a4, _QWORD *a5, const std::__fs::filesystem::path *a6, int a7)
{
  uint64_t v7;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  size_t v35;
  void **v36;
  unint64_t v37;
  unint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  char v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  int v56;
  std::__fs::filesystem::path v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  std::__fs::filesystem::path v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  std::__fs::filesystem::path v80;
  __int128 v81;
  uint64_t v82;
  std::__fs::filesystem::path v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  _BYTE v87[24];
  int v88;
  void *__dst[2];
  unint64_t v90;
  _QWORD v91[5];
  _QWORD *v92;

  v14 = a5[3];
  if (!v14)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v14 = a5[3];
  }
  v56 = a7;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v14 + 48))(&v84);
  v15 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *))(a5[2] + 16))(a5 + 2) + 96);
  v16 = (*(uint64_t (**)(_QWORD *))(a5[2] + 16))(a5 + 2);
  v17 = (uint64_t *)(v16 + 80);
  if (!v15)
    v17 = (uint64_t *)v16;
  v18 = *v17;
  std::__fs::filesystem::path::lexically_relative(&v83, a6, a4);
  std::mutex::lock(a3);
  v58 = v18;
  if (SHIBYTE(v85) < 0)
  {
    sub_20E860C04(&v59, (void *)v84, *((unint64_t *)&v84 + 1));
  }
  else
  {
    v59 = v84;
    v60 = v85;
  }
  v61 = v86;
  v19 = (__int128 *)*a5;
  if (*(char *)(*a5 + 23) < 0)
  {
    sub_20E860C04(&v62, *(void **)v19, *((_QWORD *)v19 + 1));
  }
  else
  {
    v20 = *v19;
    v63 = *((_QWORD *)v19 + 2);
    v62 = v20;
  }
  LOBYTE(v64) = 0;
  LOBYTE(v66) = 0;
  if (*((_BYTE *)v19 + 48))
  {
    if (*((char *)v19 + 47) < 0)
    {
      sub_20E860C04(&v64, *((void **)v19 + 3), *((_QWORD *)v19 + 4));
    }
    else
    {
      v21 = *(__int128 *)((char *)v19 + 24);
      v65 = *((_QWORD *)v19 + 5);
      v64 = v21;
    }
    LOBYTE(v66) = 1;
  }
  if (SHIBYTE(v83.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v57, v83.__pn_.__r_.__value_.__l.__data_, v83.__pn_.__r_.__value_.__l.__size_);
  else
    v57 = v83;
  v67 = v57;
  memset(&v57, 0, sizeof(v57));
  *(_QWORD *)&v68 = a6[1].__pn_.__r_.__value_.__l.__data_;
  v22 = a5[3];
  if (!v22)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v22 = a5[3];
  }
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  v24 = v23;
  v25 = *(unsigned __int8 *)(v23 + 40);
  if (*(_BYTE *)(v23 + 40))
  {
    v26 = *(char *)(v23 + 39);
    if (v26 >= 0)
      v27 = v23 + 16;
    else
      v27 = *(_QWORD *)(v23 + 16);
    if (v26 >= 0)
      v7 = *(unsigned __int8 *)(v23 + 39);
    else
      v7 = *(_QWORD *)(v23 + 24);
  }
  else
  {
    v27 = 0;
  }
  v28 = *(unsigned __int8 *)(v23 + 160);
  v88 = 0;
  v29 = operator new();
  *(_QWORD *)(v29 + 272) = 0;
  *(_OWORD *)(v29 + 240) = 0u;
  *(_OWORD *)(v29 + 256) = 0u;
  *(_OWORD *)(v29 + 208) = 0u;
  *(_OWORD *)(v29 + 224) = 0u;
  *(_OWORD *)(v29 + 176) = 0u;
  *(_OWORD *)(v29 + 192) = 0u;
  *(_OWORD *)(v29 + 144) = 0u;
  *(_OWORD *)(v29 + 160) = 0u;
  *(_OWORD *)(v29 + 112) = 0u;
  *(_OWORD *)(v29 + 128) = 0u;
  *(_OWORD *)(v29 + 80) = 0u;
  *(_OWORD *)(v29 + 96) = 0u;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)(v29 + 64) = 0u;
  *(_OWORD *)(v29 + 16) = 0u;
  *(_OWORD *)(v29 + 32) = 0u;
  *(_OWORD *)v29 = 0u;
  sub_20E863438(v29);
  v91[0] = v29;
  if (v25)
    sub_20E86A980((_QWORD *)(v29 + 16), v27, v7);
  if (v28)
  {
    v30 = sub_20E86A980((_QWORD *)(v29 + 16), (uint64_t)"#", 1);
    v31 = *(char *)(v24 + 135);
    if (v31 >= 0)
      v32 = v24 + 112;
    else
      v32 = *(_QWORD *)(v24 + 112);
    if (v31 >= 0)
      v33 = *(unsigned __int8 *)(v24 + 135);
    else
      v33 = *(_QWORD *)(v24 + 120);
    sub_20E86A980(v30, v32, v33);
  }
  v34 = *(_DWORD *)(v29 + 120);
  if ((v34 & 0x10) != 0)
  {
    v37 = *(_QWORD *)(v29 + 112);
    v38 = *(_QWORD *)(v29 + 72);
    if (v37 < v38)
    {
      *(_QWORD *)(v29 + 112) = v38;
      v37 = v38;
    }
    v39 = *(const void **)(v29 + 64);
    v35 = v37 - (_QWORD)v39;
    if (v37 - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_133;
  }
  else
  {
    if ((v34 & 8) == 0)
    {
      v35 = 0;
      HIBYTE(v90) = 0;
      v36 = __dst;
      goto LABEL_54;
    }
    v39 = *(const void **)(v29 + 40);
    v35 = *(_QWORD *)(v29 + 56) - (_QWORD)v39;
    if (v35 >= 0x7FFFFFFFFFFFFFF8)
LABEL_133:
      sub_20E860B7C();
  }
  if (v35 >= 0x17)
  {
    v40 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v40 = v35 | 7;
    v41 = v40 + 1;
    v36 = (void **)operator new(v40 + 1);
    __dst[1] = (void *)v35;
    v90 = v41 | 0x8000000000000000;
    __dst[0] = v36;
    goto LABEL_53;
  }
  HIBYTE(v90) = v35;
  v36 = __dst;
  if (v35)
LABEL_53:
    memmove(v36, v39, v35);
LABEL_54:
  *((_BYTE *)v36 + v35) = 0;
  v42 = v91[0];
  if (v91[0])
  {
    v43 = MEMORY[0x24BEDB7F0];
    v44 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v91[0] = *MEMORY[0x24BEDB7F0];
    v45 = *(_QWORD *)(v43 + 72);
    *(_QWORD *)(v42 + *(_QWORD *)(v44 - 24)) = *(_QWORD *)(v43 + 64);
    *(_QWORD *)(v42 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v42 + 16) = v45;
    if (*(char *)(v42 + 111) < 0)
      operator delete(*(void **)(v42 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v42 + 128);
    MEMORY[0x212BC6398](v42, 0x10B2C40EED050F3);
  }
  v91[0] = v87;
  v91[1] = __dst;
  v91[2] = v87;
  v91[3] = __dst;
  v91[4] = __dst;
  if (v88 == -1)
    sub_20E877AB8();
  v92 = v91;
  ((void (*)(_QWORD **, _BYTE *))off_24CA0BC88[v88])(&v92, v87);
  if (SHIBYTE(v90) < 0)
    operator delete(__dst[0]);
  if (v88 == -1)
    sub_20E877AB8();
  v91[0] = __dst;
  ((void (*)(_QWORD *__return_ptr, _QWORD *, _BYTE *))off_24CA0BCB8[v88])((_QWORD *)&v68 + 1, v91, v87);
  if (v88 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24CA0BCA0[v88])(v91, v87);
  sub_20FF0CD3C((uint64_t)&v71, (uint64_t)&v58);
  if (v70 < 0)
  {
    operator delete(*((void **)&v68 + 1));
    if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if (!(_BYTE)v66)
        goto LABEL_72;
      goto LABEL_70;
    }
  }
  else if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v67.__pn_.__r_.__value_.__l.__data_);
  if (!(_BYTE)v66)
    goto LABEL_72;
LABEL_70:
  if (SHIBYTE(v65) < 0)
    operator delete((void *)v64);
LABEL_72:
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v60) & 0x80000000) == 0)
    {
LABEL_74:
      if ((SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_75;
LABEL_79:
      operator delete(v57.__pn_.__r_.__value_.__l.__data_);
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_81;
      goto LABEL_80;
    }
  }
  else if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    goto LABEL_74;
  }
  operator delete((void *)v59);
  if (SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_79;
LABEL_75:
  if (*(_QWORD *)(a1 + 40))
  {
LABEL_80:
    v46 = *(_QWORD **)(a1 + 24);
    LOBYTE(v58) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v46, (uint64_t)&v58, 1);
  }
LABEL_81:
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v58 = v71;
  if (SHIBYTE(v73) < 0)
  {
    sub_20E860C04(&v59, (void *)v72, *((unint64_t *)&v72 + 1));
  }
  else
  {
    v59 = v72;
    v60 = v73;
  }
  v61 = v74;
  if (SHIBYTE(v76) < 0)
  {
    sub_20E860C04(&v62, (void *)v75, *((unint64_t *)&v75 + 1));
  }
  else
  {
    v62 = v75;
    v63 = v76;
  }
  if (SHIBYTE(v78) < 0)
  {
    sub_20E860C04(&v64, (void *)v77, *((unint64_t *)&v77 + 1));
  }
  else
  {
    v64 = v77;
    v65 = v78;
  }
  v66 = v79;
  if (SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v67, v80.__pn_.__r_.__value_.__l.__data_, v80.__pn_.__r_.__value_.__l.__size_);
  else
    v67 = v80;
  if (SHIBYTE(v82) < 0)
  {
    sub_20E860C04(&v68, (void *)v81, *((unint64_t *)&v81 + 1));
  }
  else
  {
    v68 = v81;
    v69 = v82;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v47 = *(_QWORD **)(a1 + 24);
    LOBYTE(v91[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v47, (uint64_t)v91, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20E9E713C(a1, (uint64_t)&v59);
  if (*(_QWORD *)(a1 + 40))
  {
    v48 = *(_QWORD **)(a1 + 24);
    LOBYTE(v91[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v48, (uint64_t)v91, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20E9E713C(a1, (uint64_t)&v62);
  sub_20E9E713C(a1, (uint64_t)&v64);
  if (*(_QWORD *)(a1 + 40))
  {
    v49 = *(_QWORD **)(a1 + 24);
    LOBYTE(v91[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v49, (uint64_t)v91, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20E9E713C(a1, (uint64_t)&v67);
  sub_20E9E713C(a1, (uint64_t)&v68);
  if (SHIBYTE(v69) < 0)
  {
    operator delete((void *)v68);
    if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_104:
      if ((SHIBYTE(v65) & 0x80000000) == 0)
        goto LABEL_105;
      goto LABEL_111;
    }
  }
  else if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_104;
  }
  operator delete(v67.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
LABEL_105:
    if ((SHIBYTE(v63) & 0x80000000) == 0)
      goto LABEL_106;
    goto LABEL_112;
  }
LABEL_111:
  operator delete((void *)v64);
  if ((SHIBYTE(v63) & 0x80000000) == 0)
  {
LABEL_106:
    if ((SHIBYTE(v60) & 0x80000000) == 0)
      goto LABEL_107;
LABEL_113:
    operator delete((void *)v59);
    v50 = *(_BYTE *)(a1 + 34);
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_115;
    goto LABEL_114;
  }
LABEL_112:
  operator delete((void *)v62);
  if (SHIBYTE(v60) < 0)
    goto LABEL_113;
LABEL_107:
  v50 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
LABEL_114:
    v51 = *(_QWORD **)(a1 + 24);
    LOBYTE(v58) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v51, (uint64_t)&v58, 1);
  }
LABEL_115:
  v52 = *(_QWORD **)(a1 + 24);
  LOBYTE(v58) = v50;
  sub_20E86A980(v52, (uint64_t)&v58, 1);
  v53 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v53;
  v54 = *(_QWORD **)(a1 + 24);
  LOBYTE(v58) = *(_BYTE *)(a1 + 33);
  sub_20E86A980(v54, (uint64_t)&v58, 1);
  if (v56)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
    std::ostream::flush();
  }
  if (SHIBYTE(v82) < 0)
  {
    operator delete((void *)v81);
    if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_119:
      if ((SHIBYTE(v78) & 0x80000000) == 0)
        goto LABEL_120;
      goto LABEL_127;
    }
  }
  else if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_119;
  }
  operator delete(v80.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v78) & 0x80000000) == 0)
  {
LABEL_120:
    if ((SHIBYTE(v76) & 0x80000000) == 0)
      goto LABEL_121;
    goto LABEL_128;
  }
LABEL_127:
  operator delete((void *)v77);
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
LABEL_121:
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_122;
    goto LABEL_129;
  }
LABEL_128:
  operator delete((void *)v75);
  if ((SHIBYTE(v73) & 0x80000000) == 0)
  {
LABEL_122:
    std::mutex::unlock(a3);
    if ((SHIBYTE(v83.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_123;
    goto LABEL_130;
  }
LABEL_129:
  operator delete((void *)v72);
  std::mutex::unlock(a3);
  if ((SHIBYTE(v83.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_123:
    if ((SHIBYTE(v85) & 0x80000000) == 0)
      return;
LABEL_131:
    operator delete((void *)v84);
    return;
  }
LABEL_130:
  operator delete(v83.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85) < 0)
    goto LABEL_131;
}

void sub_20FF10750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::mutex *v49;
  uint64_t v50;

  if (a38 && a37 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a24 < 0)
    operator delete(a19);
  std::mutex::unlock(v49);
  if (*(char *)(v50 - 225) < 0)
  {
    operator delete(*(void **)(v50 - 248));
    if ((*(char *)(v50 - 201) & 0x80000000) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v50 - 201) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(*(void **)(v50 - 224));
  _Unwind_Resume(a1);
}

void sub_20FF10970(uint64_t a1, uint64_t a2, void ***a3, int a4, unint64_t a5, uint64_t a6, char a7)
{
  int v10;
  int v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  int v20;
  size_t v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  std::string *v28;
  uint64_t *v29;
  std::string::size_type *v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  int8x8_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  std::string::size_type p_dst;
  uint64_t v42;
  std::__fs::filesystem::path::__string_view v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  std::__fs::filesystem::path::__string_view v53;
  std::string *v54;
  uint64_t v55;
  unint64_t v56;
  std::string::size_type v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t v69;
  std::__fs::filesystem::path::__string_view v70;
  unint64_t v71;
  std::__fs::filesystem::path::__string_view v72;
  _QWORD *v73;
  _BYTE *v74;
  float v75;
  float v76;
  _QWORD *v77;
  _QWORD *v78;
  _BOOL8 v79;
  unint64_t v80;
  unint64_t v81;
  size_t prime;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  std::string::pointer data;
  int v95;
  int v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  size_t *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  void *v121;
  std::string::value_type v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  void *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::runtime_error *exception;
  __int128 v148;
  int v149;
  std::__fs::filesystem::path v150;
  uint64_t v151;
  std::__fs::filesystem::path __dst;
  void *v153[2];
  int64_t v154;
  void *v155[2];
  char v156;
  uint64_t (**v157)();
  __int128 v158;
  unsigned __int8 v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  uint64_t (**v162)();
  __int128 v163;
  char v164;
  __int128 v165;
  char v166;
  std::string pn;
  char v168[8];
  void *v169;
  char v170;
  uint64_t v171;
  int v172;
  void *v173;
  char *v174;
  std::string __p;
  _QWORD *v176;
  std::string::value_type v177;
  std::string::value_type v178;
  std::string::value_type v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  char v183;
  uint64_t v184[19];
  _BYTE v185[32];
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  _QWORD v192[22];

  v192[19] = *MEMORY[0x24BDAC8D0];
  v10 = a4;
  switch(a4)
  {
    case 1:
      v156 = 4;
      v14 = 1952539694;
      goto LABEL_6;
    case 2:
      v156 = 4;
      v14 = 1987273518;
      goto LABEL_6;
    case 3:
      v156 = 5;
      strcpy((char *)v155, ".json");
      goto LABEL_7;
    case 4:
      v156 = 4;
      v14 = 1954051118;
LABEL_6:
      LODWORD(v155[0]) = v14;
      BYTE4(v155[0]) = 0;
LABEL_7:
      sub_20FF0F798((std::string *)v185, (uint64_t)(a3 + 2));
      if (v156 >= 0)
        v15 = v155;
      else
        v15 = (void **)v155[0];
      if (v156 >= 0)
        v16 = v156;
      else
        v16 = (std::string::size_type)v155[1];
      v17 = std::string::append((std::string *)v185, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v154 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)v153 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if ((v185[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v185);
        v19 = *a3;
        v20 = *((char *)*a3 + 23);
        if ((v20 & 0x80000000) == 0)
          goto LABEL_15;
      }
      else
      {
        v19 = *a3;
        v20 = *((char *)*a3 + 23);
        if ((v20 & 0x80000000) == 0)
        {
LABEL_15:
          v21 = v20;
          v22 = v19;
          goto LABEL_18;
        }
      }
      v22 = *v19;
      v21 = (size_t)v19[1];
LABEL_18:
      v23 = (_BYTE)v19 + 24;
      v24 = *((unsigned __int8 *)v19 + 48);
      v25 = (unint64_t)(v19 + 3) & 0xFFFFFFFFFFFFFF00;
      v26 = v23 & 0xF8;
      if (!v24)
        v26 = 0;
      sub_20FF0EE7C((uint64_t)v185, a2, v22, v21, v26 | v25, v24);
      memset(&__p, 0, sizeof(__p));
      v27 = (char *)HIBYTE(v154);
      if (v154 >= 0)
        v28 = (std::string *)v153;
      else
        v28 = (std::string *)v153[0];
      if (v154 < 0)
        v27 = (char *)v153[1];
      sub_20E8A9678(&__p, v28, (std::string *)&v27[(_QWORD)v28]);
      if ((v185[23] & 0x80000000) != 0)
        sub_20E860C04(&__dst, *(void **)v185, *(unint64_t *)&v185[8]);
      else
        __dst = *(std::__fs::filesystem::path *)v185;
      sub_20E8A944C((uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v185[23] & 0x80000000) == 0)
          goto LABEL_30;
      }
      else if ((v185[23] & 0x80000000) == 0)
      {
        goto LABEL_30;
      }
      operator delete(*(void **)v185);
LABEL_30:
      v29 = sub_20FDD7854(0);
      sub_20FDD72D4((uint64_t)v168, (uint64_t)(a3 + 2), (uint64_t)v29);
      LOBYTE(v162) = 0;
      v164 = 0;
      v160 = 0;
      v161 = 0;
      LOBYTE(v157) = 0;
      v159 = 0;
      if (!a7)
      {
        sub_210224144(&__dst, 0x11u, a5, v185);
        v162 = &off_24CA1F288;
        v163 = *(_OWORD *)&v185[8];
        v164 = 1;
        v30 = (std::string::size_type *)(*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)&v185[8] + 16))(*(_QWORD *)&v185[8], *(__n128 *)&v185[8]);
        v31 = (char *)v30 + *(_QWORD *)(*v30 - 24);
        if ((v31[32] & 5) != 0)
        {
          v32 = -1;
        }
        else
        {
          (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v31 + 5) + 32))(v185, *((_QWORD *)v31 + 5), 0, 1, 16);
          v32 = v192[0];
        }
        v51 = v32 & ~(v32 >> 63);
        goto LABEL_241;
      }
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_20E860C04(v185, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
      else
        *(std::__fs::filesystem::path *)v185 = __dst;
      if (v185[23] >= 0)
        v33 = (uint64_t *)v185;
      else
        v33 = *(uint64_t **)v185;
      if (v185[23] >= 0)
        v34 = v185[23];
      else
        v34 = *(_QWORD *)&v185[8];
      v35 = sub_20E8D177C((uint64_t)&__p, v33, v34);
      if ((v185[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v185);
        v36 = *(int8x8_t *)(a6 + 8);
        if (!*(_QWORD *)&v36)
          goto LABEL_89;
      }
      else
      {
        v36 = *(int8x8_t *)(a6 + 8);
        if (!*(_QWORD *)&v36)
          goto LABEL_89;
      }
      v37 = (uint8x8_t)vcnt_s8(v36);
      v37.i16[0] = vaddlv_u8(v37);
      if (v37.u32[0] > 1uLL)
      {
        v38 = v35;
        if (v35 >= *(_QWORD *)&v36)
          v38 = v35 % *(_QWORD *)&v36;
      }
      else
      {
        v38 = (*(_QWORD *)&v36 - 1) & v35;
      }
      v39 = *(uint64_t ***)(*(_QWORD *)a6 + 8 * v38);
      if (!v39 || (v40 = *v39) == 0)
      {
LABEL_89:
        v166 = 0;
        LOBYTE(v165) = 0;
        sub_20FD0DEF4((uint64_t)&__p, &v165, 24);
        v54 = (std::string *)operator new(0x168uLL);
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA0BC38;
        if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
          sub_20E860C04(&pn, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
        else
          pn = __dst.__pn_;
        sub_20FF15074((uint64_t)v185, (uint64_t)&__p);
        v149 = v10;
        if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
          sub_20E860C04(&v54[1], pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
        else
          v54[1] = pn;
        v55 = a1;
        sub_20FF15074((uint64_t)&v54[2], (uint64_t)v185);
        v54[13].__r_.__value_.__r.__words[2] = a5;
        v54[14].__r_.__value_.__r.__words[0] = 0;
        v54[14].__r_.__value_.__s.__data_[8] = 0;
        v54[14].__r_.__value_.__s.__data_[16] = 0;
        v56 = MEMORY[0x24BEDB7F0];
        v57 = *MEMORY[0x24BEDB7F0];
        *(_QWORD *)v185 = v57;
        v58 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v59 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(_QWORD *)&v185[*(_QWORD *)(v57 - 24)] = v58;
        p_dst = MEMORY[0x24BEDB848];
        *(_QWORD *)&v185[16] = v59;
        *(_QWORD *)&v185[24] = MEMORY[0x24BEDB848] + 16;
        if (SHIBYTE(v190) < 0)
          operator delete(*((void **)&v189 + 1));
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x212BC6290](v192);
        if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
          operator delete(pn.__r_.__value_.__l.__data_);
        v60 = v161;
        v160 = v54 + 1;
        v161 = (std::__shared_weak_count *)v54;
        if (v60)
        {
          p_shared_owners = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(p_shared_owners);
          while (__stlxr(v62 - 1, p_shared_owners));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        __p.__r_.__value_.__r.__words[0] = v57;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v57 - 24)) = v58;
        __p.__r_.__value_.__r.__words[2] = v59;
        v176 = (_QWORD *)(p_dst + 16);
        if (v183 < 0)
          operator delete(v182);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x212BC6290](v184);
        a1 = v55;
        if (v166 < 0)
        {
          operator delete((void *)v165);
          v10 = v149;
          if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_108;
        }
        else
        {
          v10 = v149;
          if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_108:
            *(std::__fs::filesystem::path *)v185 = __dst;
            goto LABEL_111;
          }
        }
        sub_20E860C04(v185, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
LABEL_111:
        if (v185[23] >= 0)
          v63 = (uint64_t *)v185;
        else
          v63 = *(uint64_t **)v185;
        if (v185[23] >= 0)
          v64 = v185[23];
        else
          v64 = *(_QWORD *)&v185[8];
        a5 = sub_20E8D177C((uint64_t)&__p, v63, v64);
        if ((v185[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v185);
          v65 = *(_QWORD *)(a6 + 8);
          if (!v65)
            goto LABEL_154;
        }
        else
        {
          v65 = *(_QWORD *)(a6 + 8);
          if (!v65)
            goto LABEL_154;
        }
        v66 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
        v66.i16[0] = vaddlv_u8(v66);
        if (v66.u32[0] > 1uLL)
        {
          v56 = a5;
          if (a5 >= v65)
            v56 = a5 % v65;
        }
        else
        {
          v56 = (v65 - 1) & a5;
        }
        v67 = *(uint64_t ***)(*(_QWORD *)a6 + 8 * v56);
        if (v67)
        {
          v68 = *v67;
          if (*v67)
          {
            if (v66.u32[0] < 2uLL)
            {
              p_dst = v65 - 1;
              while (1)
              {
                v69 = v68[1];
                if (v69 == a5)
                {
                  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v70.__data_ = (const std::string_view::value_type *)&__dst;
                  else
                    v70.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
                  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v70.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
                  else
                    v70.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
                  if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v68 + 2), v70))
                    goto LABEL_197;
                }
                else if ((v69 & p_dst) != v56)
                {
                  goto LABEL_154;
                }
                v68 = (uint64_t *)*v68;
                if (!v68)
                  goto LABEL_154;
              }
            }
            p_dst = (std::string::size_type)&__dst;
            do
            {
              v71 = v68[1];
              if (v71 == a5)
              {
                if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v72.__data_ = (const std::string_view::value_type *)&__dst;
                else
                  v72.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
                if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v72.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
                else
                  v72.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
                if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v68 + 2), v72))
                  goto LABEL_197;
              }
              else
              {
                if (v71 >= v65)
                  v71 %= v65;
                if (v71 != v56)
                  break;
              }
              v68 = (uint64_t *)*v68;
            }
            while (v68);
          }
        }
LABEL_154:
        v73 = operator new(0x38uLL);
        *(_QWORD *)v185 = v73;
        *(_QWORD *)&v185[8] = a6 + 16;
        v185[16] = 0;
        *v73 = 0;
        v73[1] = a5;
        v74 = v73 + 2;
        if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20E860C04(v74, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v74 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
          v73[4] = *((_QWORD *)&__dst.__pn_.__r_.__value_.__l + 2);
        }
        v73[5] = 0;
        v73[6] = 0;
        v185[16] = 1;
        v75 = (float)(unint64_t)(*(_QWORD *)(a6 + 24) + 1);
        v76 = *(float *)(a6 + 32);
        if (v65 && (float)(v76 * (float)v65) >= v75)
        {
          v77 = *(_QWORD **)(*(_QWORD *)a6 + 8 * v56);
          v78 = *(_QWORD **)v185;
          if (v77)
          {
LABEL_160:
            *v78 = *v77;
            *v77 = *(_QWORD *)v185;
LABEL_196:
            v68 = *(uint64_t **)v185;
            ++*(_QWORD *)(a6 + 24);
LABEL_197:
            v89 = (uint64_t)v160;
            v88 = v161;
            if (v161)
            {
              v90 = (unint64_t *)&v161->__shared_owners_;
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
            }
            v48 = (std::__shared_weak_count *)v68[6];
            v68[5] = v89;
            v68[6] = (uint64_t)v88;
            if (v48)
            {
              v92 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v92);
              while (__stlxr(v50 - 1, v92));
              goto LABEL_203;
            }
            goto LABEL_204;
          }
        }
        else
        {
          v79 = v65 < 3 || (v65 & (v65 - 1)) != 0;
          v80 = v79 | (2 * v65);
          v81 = vcvtps_u32_f32(v75 / v76);
          if (v80 <= v81)
            prime = v81;
          else
            prime = v80;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          p_dst = *(_QWORD *)(a6 + 8);
          if (prime > p_dst)
            goto LABEL_172;
          if (prime < p_dst)
          {
            v83 = vcvtps_u32_f32((float)*(unint64_t *)(a6 + 24) / *(float *)(a6 + 32));
            if (p_dst < 3
              || (v84 = (uint8x8_t)vcnt_s8((int8x8_t)p_dst), v84.i16[0] = vaddlv_u8(v84), v84.u32[0] > 1uLL))
            {
              v83 = std::__next_prime(v83);
            }
            else
            {
              v85 = 1 << -(char)__clz(v83 - 1);
              if (v83 >= 2)
                v83 = v85;
            }
            if (prime <= v83)
              prime = v83;
            if (prime < p_dst)
LABEL_172:
              sub_20E8D2B3C(a6, prime);
          }
          v65 = *(_QWORD *)(a6 + 8);
          v86 = v65 - 1;
          if ((v65 & (v65 - 1)) != 0)
          {
            if (a5 >= v65)
            {
              v56 = a5 % v65;
              v77 = *(_QWORD **)(*(_QWORD *)a6 + 8 * (a5 % v65));
              v78 = *(_QWORD **)v185;
              if (v77)
                goto LABEL_160;
            }
            else
            {
              v56 = a5;
              v77 = *(_QWORD **)(*(_QWORD *)a6 + 8 * a5);
              v78 = *(_QWORD **)v185;
              if (v77)
                goto LABEL_160;
            }
          }
          else
          {
            v56 = v86 & a5;
            v77 = *(_QWORD **)(*(_QWORD *)a6 + 8 * (v86 & a5));
            v78 = *(_QWORD **)v185;
            if (v77)
              goto LABEL_160;
          }
        }
        *v78 = *(_QWORD *)(a6 + 16);
        *(_QWORD *)(a6 + 16) = *(_QWORD *)v185;
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v56) = a6 + 16;
        if (**(_QWORD **)v185)
        {
          v87 = *(_QWORD *)(**(_QWORD **)v185 + 8);
          if ((v65 & (v65 - 1)) != 0)
          {
            if (v87 >= v65)
              v87 %= v65;
          }
          else
          {
            v87 &= v65 - 1;
          }
          *(_QWORD *)(*(_QWORD *)a6 + 8 * v87) = *(_QWORD *)v185;
        }
        goto LABEL_196;
      }
      if (v37.u32[0] < 2uLL)
      {
        p_dst = *(_QWORD *)&v36 - 1;
        while (1)
        {
          v42 = v40[1];
          if (v42 == v35)
          {
            if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43.__data_ = (const std::string_view::value_type *)&__dst;
            else
              v43.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
            if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
            else
              v43.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
            if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v40 + 2), v43))
              goto LABEL_66;
          }
          else if ((v42 & p_dst) != v38)
          {
            goto LABEL_89;
          }
          v40 = (uint64_t *)*v40;
          if (!v40)
            goto LABEL_89;
        }
      }
      p_dst = (std::string::size_type)&__dst;
      break;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 130, (uint64_t)"", 0, (uint64_t)"Unsupported format", 18, (void (*)(void **))sub_21023DDB0);
      abort();
  }
  while (1)
  {
    v52 = v40[1];
    if (v52 == v35)
      break;
    if (v52 >= *(_QWORD *)&v36)
      v52 %= *(_QWORD *)&v36;
    if (v52 != v38)
      goto LABEL_89;
LABEL_77:
    v40 = (uint64_t *)*v40;
    if (!v40)
      goto LABEL_89;
  }
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v53.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
  else
    v53.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
  if (std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v40 + 2), v53))
    goto LABEL_77;
LABEL_66:
  v45 = v40[5];
  v44 = (std::__shared_weak_count *)v40[6];
  if (v44)
  {
    v46 = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = v161;
  v160 = (std::string *)v45;
  v161 = v44;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
LABEL_203:
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      v93 = (uint64_t)v160;
      data = v160[13].__r_.__value_.__l.__data_;
      v95 = v160[13].__r_.__value_.__s.__data_[16];
      if (!v160[13].__r_.__value_.__s.__data_[16])
        goto LABEL_213;
LABEL_205:
      v51 = (uint64_t)&data[*(_QWORD *)(v93 + 320)];
      v96 = v159;
      if (v159)
        goto LABEL_226;
      goto LABEL_206;
    }
  }
LABEL_204:
  v93 = (uint64_t)v160;
  data = v160[13].__r_.__value_.__l.__data_;
  v95 = v160[13].__r_.__value_.__s.__data_[16];
  if (v160[13].__r_.__value_.__s.__data_[16])
    goto LABEL_205;
LABEL_213:
  sub_210224144((const std::__fs::filesystem::path *)v93, 0x11u, *(_QWORD *)(v93 + 304), &__p);
  if (!__p.__r_.__value_.__l.__size_)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (*(char *)(v93 + 23) < 0)
    {
      sub_20E860C04(&pn, *(void **)v93, *(_QWORD *)(v93 + 8));
    }
    else
    {
      v148 = *(_OWORD *)v93;
      pn.__r_.__value_.__r.__words[2] = *(_QWORD *)(v93 + 16);
      *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v148;
    }
    sub_20E8B0848("Failed to write to file: ", &pn, (std::string *)v185);
    std::runtime_error::runtime_error(exception, (const std::string *)v185);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v100 = (_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
  v101 = (char *)v100 + *(_QWORD *)(*v100 - 24);
  if ((v101[32] & 5) != 0)
  {
    v102 = 0;
    *(_QWORD *)(v93 + 320) = 0;
    *(_BYTE *)(v93 + 328) = 1;
    a5 = __p.__r_.__value_.__r.__words[2];
    p_dst = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__r.__words[2])
      goto LABEL_225;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v101 + 5) + 32))(v185, *((_QWORD *)v101 + 5), 0, 1, 16);
    v102 = v192[0] & ~(v192[0] >> 63);
    *(_QWORD *)(v93 + 320) = v102;
    *(_BYTE *)(v93 + 328) = 1;
    a5 = __p.__r_.__value_.__r.__words[2];
    p_dst = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__r.__words[2])
      goto LABEL_225;
  }
  v103 = (unint64_t *)(a5 + 8);
  do
    v104 = __ldxr(v103);
  while (__stxr(v104 + 1, v103));
  v105 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    v106 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
LABEL_225:
  v51 = (uint64_t)&data[v102];
  v96 = v159;
  if (v159 == 1)
  {
LABEL_206:
    if (!v96)
      goto LABEL_233;
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
    *(_QWORD *)&v158 = p_dst;
    *((_QWORD *)&v158 + 1) = a5;
    if (v97)
    {
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    goto LABEL_240;
  }
LABEL_226:
  if (!v96)
  {
    v157 = &off_24CA1F288;
    *(_QWORD *)&v158 = p_dst;
    *((_QWORD *)&v158 + 1) = a5;
    v159 = 1;
LABEL_240:
    v30 = &v160[1].__r_.__value_.__r.__words[2];
    goto LABEL_241;
  }
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
  if (*((_QWORD *)&v158 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v159 = 0;
LABEL_233:
  v30 = &v160[1].__r_.__value_.__r.__words[2];
  if (!v95)
  {
    if (a5)
    {
      v111 = (unint64_t *)(a5 + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)a5 + 16))(a5);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)a5);
      }
    }
  }
LABEL_241:
  v113 = (char *)v30 + *(_QWORD *)(*v30 - 24);
  if ((v113[32] & 5) != 0)
  {
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    memset(v185, 0, sizeof(v185));
    v192[0] = -1;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v113 + 5) + 32))(v185, *((_QWORD *)v113 + 5), 0, 1, 16);
  }
  if (v10 == 4 || v10 == 2)
  {
    pn.__r_.__value_.__r.__words[0] = 0x400000001;
    sub_20E9E9588((uint64_t)&__p, (uint64_t *)&pn, (uint64_t)v30, 0, 0, 0);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA0BA78;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24CA0BBC8;
    if (v180)
    {
      pn.__r_.__value_.__s.__data_[0] = v177;
      sub_20E86A980(v176, (uint64_t)&pn, 1);
    }
    std::ostream::operator<<();
    ++v180;
    sub_20FF168F8((uint64_t)&__p, (uint64_t)v168);
    v122 = v179;
    if (v180)
    {
      pn.__r_.__value_.__s.__data_[0] = v177;
      sub_20E86A980(v176, (uint64_t)&pn, 1);
    }
    pn.__r_.__value_.__s.__data_[0] = v122;
    sub_20E86A980(v176, (uint64_t)&pn, 1);
    v123 = v180 + 1;
    v180 = 0;
    v181 = v123;
    pn.__r_.__value_.__s.__data_[0] = v178;
    sub_20E86A980(v176, (uint64_t)&pn, 1);
  }
  else
  {
    if (v10 != 1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 445, (uint64_t)"", 0, (uint64_t)"Unsupported format", 18, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B7040;
    __p.__r_.__value_.__l.__size_ = 1;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B7190;
    v114 = operator new();
    *(_QWORD *)v114 = v30;
    *(_QWORD *)(v114 + 8) = v30;
    *(_BYTE *)(v114 + 16) = 0;
    *(_BYTE *)(v114 + 40) = 0;
    *(_BYTE *)(v114 + 48) = 0;
    *(_BYTE *)(v114 + 72) = 0;
    *(_QWORD *)(v114 + 88) = 0;
    *(_QWORD *)(v114 + 96) = 0;
    *(_QWORD *)(v114 + 80) = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B4468;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B45B8;
    v176 = (_QWORD *)v114;
    pn.__r_.__value_.__s.__data_[0] = 2;
    std::ostream::write();
    sub_20E9EE95C((uint64_t)v176);
    sub_20FF1664C((uint64_t)&__p, (uint64_t)v168);
    v115 = v176;
    v116 = *(_QWORD *)(v176[11] - 8);
    v117 = v176 + 6;
    sub_20E9EE4D0(v176 + 6, v176[2] - v116 - 9);
    if (*v117)
      memmove((void *)(v115[3] + v116), (const void *)v115[7], *v117);
    v115[6] = 0;
    v118 = v115[10];
    v119 = v115[11] - 8;
    v115[11] = v119;
    if (v118 == v119)
    {
      std::ostream::write();
      if (*((_BYTE *)v115 + 40))
      {
        free((void *)v115[3]);
        *((_BYTE *)v115 + 40) = 0;
      }
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B7040;
    v120 = v176;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B7190;
    v176 = 0;
    if (v120)
    {
      v121 = (void *)v120[10];
      if (v121)
      {
        v120[11] = v121;
        operator delete(v121);
      }
      if (*((_BYTE *)v120 + 72))
        free((void *)v120[7]);
      if (*((_BYTE *)v120 + 40))
        free((void *)v120[3]);
      MEMORY[0x212BC6398](v120, 0x1030C408C1A3048);
    }
  }
  v124 = (uint64_t)v160;
  if (v160)
  {
    v125 = v160[13].__r_.__value_.__r.__words[0];
    if (v125 <= 0x19000)
    {
      v129 = (char *)v30 + *(_QWORD *)(*v30 - 24);
      if ((v129[32] & 5) != 0)
      {
        v130 = -1;
      }
      else
      {
        (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v129 + 5)
                                                                                            + 32))(&__p, *((_QWORD *)v129 + 5), 0, 1, 16);
        v130 = v184[0];
        v125 = *(_QWORD *)(v124 + 312);
      }
      *(_QWORD *)(v124 + 312) = v130 + v125 - v192[0];
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      LOBYTE(v176) = 0;
      if (v159)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA1F288;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v158;
        v158 = 0uLL;
        LOBYTE(v176) = 1;
      }
      sub_20FF0C8CC((uint64_t)v160, (uint64_t)&__p);
      if ((_BYTE)v176)
      {
        v126 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
        {
          v127 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
      }
    }
  }
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v150, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
  else
    v150 = __dst;
  v151 = v51;
  if (v159)
  {
    v131 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
    if (*((_QWORD *)&v158 + 1))
    {
      v132 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
  }
  v134 = v161;
  if (v161)
  {
    v135 = (unint64_t *)&v161->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  if (v164)
  {
    v137 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
    if (*((_QWORD *)&v163 + 1))
    {
      v138 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)&v150.__pn_.__r_.__value_.__l.__data_;
  v140 = v151;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v150.__pn_.__r_.__value_.__l + 2);
  *(_QWORD *)(a1 + 24) = v140;
  *(_BYTE *)(a1 + 32) = 1;
  v141 = (char *)v173;
  if (v173)
  {
    v142 = v174;
    v143 = v173;
    if (v174 != v173)
    {
      do
      {
        v144 = (std::__shared_weak_count *)*((_QWORD *)v142 - 1);
        if (v144)
        {
          v145 = (unint64_t *)&v144->__shared_owners_;
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        v142 -= 16;
      }
      while (v142 != v141);
      v143 = v173;
    }
    v174 = v141;
    operator delete(v143);
  }
  if (v172 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_24CA0BC78[v172])(v185, &v171);
  v172 = -1;
  if ((v170 & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_314;
LABEL_318:
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v154) < 0)
      goto LABEL_319;
LABEL_315:
    if ((v156 & 0x80000000) == 0)
      return;
LABEL_320:
    operator delete(v155[0]);
    return;
  }
  operator delete(v169);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_318;
LABEL_314:
  if ((SHIBYTE(v154) & 0x80000000) == 0)
    goto LABEL_315;
LABEL_319:
  operator delete(v153[0]);
  if (v156 < 0)
    goto LABEL_320;
}

void sub_20FF11CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38,int a39,__int16 a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *v64;

  __cxa_free_exception(v64);
  sub_21022EBB8((uint64_t)&a64);
  if (a38)
    sub_21022EBB8((uint64_t)&a35);
  sub_20E86665C((uint64_t)&a40);
  if (a45)
    sub_21022EBB8((uint64_t)&a42);
  sub_20FF07710((uint64_t)&a53);
  if (a20 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

void sub_20FF11F34(std::string *a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5)
{
  uint64_t v9;
  size_t v10;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  std::string *v21;
  std::string::size_type size;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  std::string::value_type v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void ***(*v32)(void ***);
  uint64_t v33;
  size_t *v34;
  uint64_t v35;
  uint64_t v36;
  void ***(*v37)(void ***);
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  char *v46;
  char *v47;
  char *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  _QWORD *v55;
  void **v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::runtime_error *exception;
  std::logic_error *v68;
  __int128 v69;
  char v70;
  void *v71[2];
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::__fs::filesystem::path v76;
  std::string __dst;
  void ***(*v78)(void ***);
  std::string::value_type v79;
  std::string::value_type v80;
  std::string::value_type v81;
  unsigned __int8 *v82;
  void *v83;
  char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  const char *v91;
  uint64_t v92;
  unsigned int v93;
  void *__p[2];
  char v95;
  char v96;
  uint64_t v97;
  int v98;
  void *v99;
  char *v100;
  std::string pn;
  char v102;
  int v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unsigned int v106;
  char *v107;
  char *v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v9 = *a3;
  if (*(char *)(*a3 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    v10 = *(unsigned __int8 *)(*a3 + 23);
    v11 = (void *)*a3;
  }
  v12 = v9 + 24;
  v13 = *(unsigned __int8 *)(v9 + 48);
  v14 = (v9 + 24) & 0xFFFFFFFFFFFFFF00;
  v15 = v12 & 0xF8;
  if (!v13)
    v15 = 0;
  sub_20FF0EE7C((uint64_t)&__dst, a2, v11, v10, v15 | v14, v13);
  v17 = a3[2];
  v16 = (uint64_t)(a3 + 2);
  v18 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t))(v17 + 16))(v16) + 96);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (v18)
    v20 = (uint64_t *)(v19 + 80);
  else
    v20 = (uint64_t *)v19;
  sub_20FF0F798(&pn, v16);
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &pn;
  else
    v21 = (std::string *)pn.__r_.__value_.__r.__words[0];
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  else
    size = pn.__r_.__value_.__l.__size_;
  v23 = a4 - 1;
  switch(v23)
  {
    case 0:
      v24 = 4;
      v95 = 4;
      v25 = 1952539694;
      goto LABEL_20;
    case 1:
      v24 = 4;
      v95 = 4;
      v25 = 1987273518;
      goto LABEL_20;
    case 2:
      v24 = 5;
      v95 = 5;
      strcpy((char *)__p, ".json");
      goto LABEL_21;
    case 3:
      v24 = 4;
      v95 = 4;
      v25 = 1954051118;
LABEL_20:
      LODWORD(__p[0]) = v25;
      BYTE4(__p[0]) = 0;
LABEL_21:
      sub_20FF0F384((uint64_t)&v76, (uint64_t)&__dst, v20, (uint64_t)v21, size, (uint64_t)__p, v24, a5);
      if (v95 < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_23:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_24;
          goto LABEL_33;
        }
      }
      else if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(pn.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
LABEL_33:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
      sub_210224144(&v76, 0x30u, a5, &v73);
      if (!v74)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
          sub_20E860C04(&pn, v76.__pn_.__r_.__value_.__l.__data_, v76.__pn_.__r_.__value_.__l.__size_);
        else
          pn = v76.__pn_;
        sub_20E8B0848("Failed to write to file: ", &pn, &__dst);
        std::runtime_error::runtime_error(exception, &__dst);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      return;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 130, (uint64_t)"", 0, (uint64_t)"Unsupported format", 18, (void (*)(void **))sub_21023DDB0);
      abort();
  }
  v26 = sub_20FDD7854(0);
  sub_20FDD72D4((uint64_t)__p, v16, (uint64_t)v26);
  switch(v23)
  {
    case 0:
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B7040;
      __dst.__r_.__value_.__l.__size_ = 1;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B7190;
      v31 = operator new();
      *(_QWORD *)v31 = v30;
      *(_QWORD *)(v31 + 8) = v30;
      *(_BYTE *)(v31 + 16) = 0;
      *(_BYTE *)(v31 + 40) = 0;
      *(_BYTE *)(v31 + 48) = 0;
      *(_BYTE *)(v31 + 72) = 0;
      *(_QWORD *)(v31 + 88) = 0;
      *(_QWORD *)(v31 + 96) = 0;
      *(_QWORD *)(v31 + 80) = 0;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B4468;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B45B8;
      v78 = (void ***(*)(void ***))v31;
      sub_20E9F3FC0((uint64_t)&pn, v31 + 8);
      sub_20E9EE95C((uint64_t)v78);
      sub_20FF1664C((uint64_t)&__dst, (uint64_t)__p);
      v32 = v78;
      v33 = *(_QWORD *)(*((_QWORD *)v78 + 11) - 8);
      v34 = (size_t *)((char *)v78 + 48);
      sub_20E9EE4D0((uint64_t *)v78 + 6, *((_QWORD *)v78 + 2) - v33 - 9);
      if (*v34)
        memmove((void *)(*((_QWORD *)v32 + 3) + v33), *((const void **)v32 + 7), *v34);
      *((_QWORD *)v32 + 6) = 0;
      v35 = *((_QWORD *)v32 + 10);
      v36 = *((_QWORD *)v32 + 11) - 8;
      *((_QWORD *)v32 + 11) = v36;
      if (v35 == v36)
      {
        std::ostream::write();
        if (*((_BYTE *)v32 + 40))
        {
          free(*((void **)v32 + 3));
          *((_BYTE *)v32 + 40) = 0;
        }
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B7040;
      v37 = v78;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B7190;
      v78 = 0;
      if (!v37)
        goto LABEL_108;
      v38 = (void *)*((_QWORD *)v37 + 10);
      if (v38)
      {
        *((_QWORD *)v37 + 11) = v38;
        operator delete(v38);
      }
      if (*((_BYTE *)v37 + 72))
        free(*((void **)v37 + 7));
      if (*((_BYTE *)v37 + 40))
        free(*((void **)v37 + 3));
      MEMORY[0x212BC6398](v37, 0x1030C408C1A3048);
      if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_47;
      goto LABEL_109;
    case 1:
    case 3:
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      pn.__r_.__value_.__r.__words[0] = 0x400000001;
      sub_20E9E9588((uint64_t)&__dst, (uint64_t *)&pn, v27, 0, 0, 0);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA0BA78;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24CA0BBC8;
      if (v82)
      {
        pn.__r_.__value_.__s.__data_[0] = v79;
        sub_20E86A980(v78, (uint64_t)&pn, 1);
      }
      std::ostream::operator<<();
      ++v82;
      sub_20FF168F8((uint64_t)&__dst, (uint64_t)__p);
      v28 = v81;
      if (v82)
      {
        pn.__r_.__value_.__s.__data_[0] = v79;
        sub_20E86A980(v78, (uint64_t)&pn, 1);
      }
      pn.__r_.__value_.__s.__data_[0] = v28;
      sub_20E86A980(v78, (uint64_t)&pn, 1);
      v29 = v82 + 1;
      v82 = 0;
      v83 = v29;
      pn.__r_.__value_.__s.__data_[0] = v80;
      sub_20E86A980(v78, (uint64_t)&pn, 1);
      goto LABEL_108;
    case 2:
      v69 = xmmword_2103BE4C0;
      v70 = 0;
      __dst.__r_.__value_.__l.__size_ = 0x300000001;
      v39 = operator new();
      *(_BYTE *)v39 = 0;
      *(_QWORD *)(v39 + 8) = 0;
      __dst.__r_.__value_.__r.__words[2] = v39;
      v78 = sub_210204368;
      v79 = 1;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v84 = 0;
      v85 = 0;
      LOBYTE(v86) = 0;
      v82 = (unsigned __int8 *)v39;
      v83 = 0;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA0BCF8;
      sub_2101FAEA0((uint64_t)&__dst);
      pn.__r_.__value_.__r.__words[0] = (std::string::size_type)"version";
      pn.__r_.__value_.__l.__size_ = 7;
      LODWORD(pn.__r_.__value_.__r.__words[2]) = 2;
      if (*v82 <= 1u)
      {
        v86 = "version";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_2101FD244((uint64_t)&__dst, &pn.__r_.__value_.__r.__words[2]);
      sub_20FF16C00((uint64_t)&pn, (uint64_t)__p);
      if (*v82 <= 1u)
      {
        v86 = "data_id";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_2101FAEA0((uint64_t)&__dst);
      v91 = "version";
      v92 = 7;
      v93 = 2;
      if (*v82 <= 1u)
      {
        v86 = "version";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_2101FD244((uint64_t)&__dst, &v93);
      if (*v82 <= 1u)
      {
        v86 = "package_id";
        v87 = 10;
        if (!v88)
          v88 = 1;
      }
      sub_2101FD70C((uint64_t)&__dst, (uint64_t)&pn.__r_.__value_.__l.__size_);
      if (*v82 <= 1u)
      {
        v86 = "type_id";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_2101FD244((uint64_t)&__dst, &v103);
      v82 = (unsigned __int8 *)*((_QWORD *)v84 - 1);
      v84 -= 8;
      if (v88)
        v88 = 0;
      if (v106 > 1)
        sub_20E877AB8();
      v40 = v104;
      v41 = v105;
      if (v105)
      {
        p_shared_owners = (unint64_t *)&v105->__shared_owners_;
        do
          v43 = __ldxr(p_shared_owners);
        while (__stxr(v43 + 1, p_shared_owners));
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (*v82 <= 1u)
      {
        v86 = "data";
        v87 = 4;
        if (!v88)
          v88 = 1;
      }
      sub_2101FAEA0((uint64_t)&__dst);
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
      v91 = "version";
      v92 = 7;
      v93 = v45;
      if (*v82 <= 1u)
      {
        v86 = "version";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_2101FD244((uint64_t)&__dst, &v93);
      (*(void (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)v40 + 32))(v40, &__dst, v93);
      v82 = (unsigned __int8 *)*((_QWORD *)v84 - 1);
      v84 -= 8;
      if (v88)
        v88 = 0;
      v46 = v107;
      if (v107)
      {
        v47 = v108;
        v48 = v107;
        if (v108 != v107)
        {
          do
          {
            v49 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v47 -= 16;
          }
          while (v47 != v46);
          v48 = v107;
        }
        v108 = v46;
        operator delete(v48);
      }
      if (v106 != -1)
        ((void (*)(const char **, uint64_t *))off_24CA0BC78[v106])(&v91, &v104);
      v106 = -1;
      if (v102 < 0)
        operator delete((void *)pn.__r_.__value_.__l.__size_);
      v82 = (unsigned __int8 *)*((_QWORD *)v84 - 1);
      v84 -= 8;
      if (v88)
        v88 = 0;
      sub_2101F7C54((unsigned __int8 *)__dst.__r_.__value_.__r.__words[2], (uint64_t)&v69, v71);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA1DC90;
      if (v83)
      {
        v84 = (char *)v83;
        operator delete(v83);
      }
      v54 = __dst.__r_.__value_.__r.__words[2];
      __dst.__r_.__value_.__r.__words[2] = 0;
      if (v54)
        ((void (*)(std::string::size_type, uint64_t, uint64_t))v78)(v54, v52, v53);
      v55 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      if ((v72 & 0x80u) == 0)
        v56 = v71;
      else
        v56 = (void **)v71[0];
      if ((v72 & 0x80u) == 0)
        v57 = v72;
      else
        v57 = (uint64_t)v71[1];
      sub_20E86A980(v55, (uint64_t)v56, v57);
      if ((char)v72 < 0)
      {
        operator delete(v71[0]);
        if ((SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_109;
LABEL_47:
        sub_20E860C04(&__dst, v76.__pn_.__r_.__value_.__l.__data_, v76.__pn_.__r_.__value_.__l.__size_);
        goto LABEL_110;
      }
LABEL_108:
      if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_47;
LABEL_109:
      __dst = v76.__pn_;
LABEL_110:
      *a1 = __dst;
      a1[1].__r_.__value_.__r.__words[0] = 0;
      a1[1].__r_.__value_.__s.__data_[8] = 1;
      v58 = (char *)v99;
      if (v99)
      {
        v59 = v100;
        v60 = v99;
        if (v100 != v99)
        {
          do
          {
            v61 = (std::__shared_weak_count *)*((_QWORD *)v59 - 1);
            if (v61)
            {
              v62 = (unint64_t *)&v61->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            v59 -= 16;
          }
          while (v59 != v58);
          v60 = v99;
        }
        v100 = v58;
        operator delete(v60);
      }
      if (v98 != -1)
        ((void (*)(std::string *, uint64_t *))off_24CA0BC78[v98])(&__dst, &v97);
      v98 = -1;
      if (v96 < 0)
      {
        operator delete(__p[1]);
        v64 = v75;
        if (!v75)
          goto LABEL_130;
      }
      else
      {
        v64 = v75;
        if (!v75)
          goto LABEL_130;
      }
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (v66)
      {
LABEL_130:
        if ((SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_131;
      }
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_131:
        operator delete(v76.__pn_.__r_.__value_.__l.__data_);
      return;
    default:
      v68 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v68, "No method to save given format");
      v68->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v68, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
}

void sub_20FF12A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  sub_20FF07710((uint64_t)&a47);
  sub_21022EBB8((uint64_t)&a18);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FF12C30(uint64_t a1@<X0>, void ***a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  void **v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  size_t v13;
  uint64_t v14;
  __int128 *v15;
  void **p_s1;
  uint64_t v17;
  _BOOL4 v18;
  void *v19;
  uint64_t v20;
  void ***v21;
  unint64_t v22;
  void *__s1;
  size_t __n;
  unsigned __int8 v25;
  int v26;
  uint64_t v27;
  void ***v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  __int128 v36;

  v27 = a1;
  v28 = a2;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v32 = 0;
  v33 = 0;
  v34 = 0x400000004;
  v35 = 3;
  if ((a3 & 1) != 0)
  {
    a7->__r_.__value_.__s.__data_[0] = 0;
    a7[1].__r_.__value_.__s.__data_[8] = 0;
    return;
  }
  if ((a3 & 0x40) == 0)
    goto LABEL_25;
  v10 = a2[3];
  if (!v10)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_63;
    }
    v10 = a2[3];
  }
  (*((void (**)(void **__return_ptr))*v10 + 6))(&__s1);
  v11 = atomic_load((unsigned __int8 *)&qword_254A6DC20);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DC20))
  {
    v36 = xmmword_2103EE250;
    sub_20FEFE2DC((uint64_t *)&v36);
    __cxa_atexit((void (*)(void *))sub_20FEFE588, &xmmword_254A6DA80, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DC20);
  }
  v12 = v25;
  if ((v25 & 0x80u) == 0)
    v13 = v25;
  else
    v13 = __n;
  v14 = *((_QWORD *)&xmmword_254A6DB40 + 1);
  if (qword_254A6DB50 >= 0)
    v14 = HIBYTE(qword_254A6DB50);
  if (v13 != v14)
    goto LABEL_23;
  if (qword_254A6DB50 >= 0)
    v15 = &xmmword_254A6DB40;
  else
    v15 = (__int128 *)xmmword_254A6DB40;
  if ((v25 & 0x80) != 0)
  {
    v19 = __s1;
    if (memcmp(__s1, v15, __n))
    {
      operator delete(v19);
      if ((a3 & 4) == 0)
        goto LABEL_33;
      goto LABEL_26;
    }
  }
  else if (v25)
  {
    p_s1 = &__s1;
    v17 = v25;
    while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v15)
    {
      p_s1 = (void **)((char *)p_s1 + 1);
      v15 = (__int128 *)((char *)v15 + 1);
      if (!--v17)
        goto LABEL_44;
    }
LABEL_23:
    v18 = 0;
    if ((v25 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_45;
  }
LABEL_44:
  v18 = v26 == dword_254A6DB58;
  if ((v12 & 0x80) != 0)
  {
LABEL_45:
    operator delete(__s1);
    if (v18)
      goto LABEL_46;
LABEL_25:
    if ((a3 & 4) == 0)
      goto LABEL_33;
LABEL_26:
    sub_20FF15358((uint64_t)&v27);
    if (v33)
    {
      sub_20FF15358((uint64_t)&v27);
      if ((_DWORD)v34 != 6)
      {
        if ((_DWORD)v34 == 5)
        {
          sub_20FF1326C(a7, v27, v28, a3, v29);
          return;
        }
        goto LABEL_62;
      }
      sub_20FF148D8((uint64_t)a7, v27, v28, a3, v29);
      return;
    }
LABEL_33:
    if ((a3 & 0x38) != 0)
    {
      if ((a3 & 0x10) != 0)
      {
        if ((a3 & 0x100) != 0)
          sub_20FF11F34(a7, v27, v28, 2, v29);
        else
          sub_20FF10970((uint64_t)a7, v27, v28, 2, v29, v30, v31);
        return;
      }
      if ((a3 & 0x20) != 0)
      {
        sub_20FF11F34(a7, v27, v28, 3, v29);
        return;
      }
      sub_20FF15358((uint64_t)&v27);
      if (BYTE1(v32))
      {
        v20 = v27;
        v21 = v28;
        v22 = v29;
        if ((a3 & 0x100) == 0)
        {
LABEL_38:
          sub_20FF10970((uint64_t)a7, v20, v21, SHIDWORD(v34), v22, v30, v31);
          return;
        }
LABEL_54:
        sub_20FF11F34(a7, v20, v21, v35, v22);
        return;
      }
      sub_20FF15358((uint64_t)&v27);
      if (BYTE2(v32))
      {
        v20 = v27;
        v21 = v28;
        v22 = v29;
        if ((a3 & 0x80) != 0)
          goto LABEL_38;
        goto LABEL_54;
      }
      v20 = v27;
      v21 = v28;
      v22 = v29;
      if ((a3 & 2) == 0)
      {
        if ((a3 & 0x80) != 0)
          goto LABEL_38;
        goto LABEL_54;
      }
    }
    else
    {
      sub_20FF15358((uint64_t)&v27);
      v20 = v27;
      v21 = v28;
      v22 = v29;
      if (BYTE1(v32))
      {
        if ((a3 & 0x100) != 0)
        {
LABEL_59:
          sub_20FF11F34(a7, v20, v21, 1, v22);
          return;
        }
LABEL_41:
        sub_20FF10970((uint64_t)a7, v20, v21, 1, v22, v30, v31);
        return;
      }
    }
    if ((a3 & 0x80) == 0)
      goto LABEL_59;
    goto LABEL_41;
  }
LABEL_24:
  if (!v18)
    goto LABEL_25;
LABEL_46:
  sub_20FF15358((uint64_t)&v27);
  if ((_DWORD)v34 == 6)
  {
    sub_20FF148D8((uint64_t)a7, v27, v28, 0x40uLL, v29);
  }
  else
  {
    if ((_DWORD)v34 != 5)
    {
LABEL_62:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 593, (uint64_t)"", 0, (uint64_t)"No known common format", 22, (void (*)(void **))sub_21023DDB0);
LABEL_63:
      abort();
    }
    sub_20FF1326C(a7, v27, v28, 0x40uLL, v29);
  }
}

void sub_20FF130B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_guard_abort(&qword_254A6DC20);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FF130D8(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  std::string *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;

  v15 = a1;
  v16 = a2;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = 0;
  v21 = 0;
  v22 = 0x400000004;
  v23 = 3;
  if ((a3 & 2) != 0)
  {
LABEL_9:
    v12 = a7;
    v13 = 1;
    v14 = a4;
LABEL_10:
    sub_20FF11F34(v12, a1, a2, v13, v14);
    return;
  }
  if ((a3 & 8) != 0)
    goto LABEL_11;
  if ((a3 & 0x10) != 0)
  {
    v12 = a7;
    v13 = 2;
    v14 = a4;
    goto LABEL_10;
  }
  if ((a3 & 0x20) != 0)
  {
LABEL_11:
    v12 = a7;
    v13 = 3;
    v14 = a4;
    goto LABEL_10;
  }
  if ((a3 & 0x40) == 0)
  {
    if ((a3 & 4) == 0)
    {
      if ((a3 & 1) == 0)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 768, (uint64_t)"", 0, (uint64_t)"Flag not supported for ExportLargeData", 38, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      a7->__r_.__value_.__s.__data_[0] = 0;
      a7[1].__r_.__value_.__s.__data_[8] = 0;
      return;
    }
    goto LABEL_9;
  }
  sub_20FF15358((uint64_t)&v15);
  if ((_DWORD)v22 == 6)
  {
    sub_20FF148D8((uint64_t)a7, v15, v16, a3, v17);
  }
  else
  {
    if ((_DWORD)v22 != 5)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 593, (uint64_t)"", 0, (uint64_t)"No known common format", 22, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    sub_20FF1326C(a7, v15, v16, a3, v17);
  }
}

void sub_20FF1326C(std::string *a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t (***v10)();
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  const char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _BYTE *v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *exception;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__fs::filesystem::path v50;
  std::string::size_type v51;
  std::__fs::filesystem::path v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  void *v62[2];
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  void *v67;
  char v68;
  __int128 v69;
  __int128 v70;
  char v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  char v77;
  char v78;
  __int128 v79;
  void *__p[2];
  int v81;
  char v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  char v90;
  __int128 v91;
  void *v92;
  char v93;
  char v94;
  void *v95;
  char v96;
  void *v97;
  char v98;
  char v99;
  char v100;
  char v101;
  int v102;
  _QWORD v103[2];

  v10 = (uint64_t (***)())a3[3];
  v11 = (std::__shared_weak_count *)a3[4];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (v10 && *v10 == &off_24CA0C258)
  {
    v14 = 1;
    if (!v11)
      goto LABEL_13;
  }
  else
  {
    v14 = 0;
    if (!v11)
      goto LABEL_13;
  }
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_13:
  if ((v14 & 1) == 0)
  {
    v53 = 0;
    v54 = 0;
    goto LABEL_104;
  }
  v18 = a3[3];
  v17 = (std::__shared_weak_count *)a3[4];
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v53 = v18;
  v54 = v17;
  if (!v18)
  {
LABEL_104:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 808, (uint64_t)"image_data_ptr", 14, (uint64_t)"ExportImageData requires data to be ImageData", 45, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v21 = ".png";
  v22 = 3;
  v23 = 4;
  switch(*(_DWORD *)(v18 + 56))
  {
    case 1:
    case 2:
    case 0x15:
    case 0x16:
    case 0x1E:
      goto LABEL_21;
    case 3:
    case 4:
      v21 = ".tiff";
      v22 = 5;
      v23 = 5;
      goto LABEL_21;
    case 0x17:
    case 0x18:
    case 0x1D:
    case 0x1F:
    case 0x20:
      v21 = ".tiff";
      v23 = 5;
      v22 = 5;
LABEL_21:
      sub_20FF13984(&v50, a2, a3, (uint64_t)v21, v23, a4, a5);
      sub_210224144(&v52, 0x30u, a5, &v47);
      v24 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
      *(_QWORD *)&v79 = &off_24C9C0338;
      v25 = *(_QWORD *)(v18 + 16);
      v26 = *(std::__shared_weak_count **)(v18 + 24);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        v29 = *(_QWORD *)(v18 + 48);
        v30 = *(_DWORD *)(v18 + 56);
        v31 = *(_WORD *)(v18 + 60);
        do
          v32 = __ldxr(v27);
        while (__stxr(v32 + 1, v27));
      }
      else
      {
        v29 = *(_QWORD *)(v18 + 48);
        v30 = *(_DWORD *)(v18 + 56);
        v31 = *(_WORD *)(v18 + 60);
      }
      *((_QWORD *)&v79 + 1) = v25;
      __p[0] = v26;
      v33 = *(void **)(v18 + 32);
      v81 = *(_DWORD *)(v18 + 40);
      __p[1] = v33;
      v83 = v29;
      LODWORD(v84) = v30;
      WORD2(v84) = v31;
      if (v26)
      {
        v34 = (unint64_t *)&v26->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      sub_20FF4BD6C(&v79, v24, v22, (uint64_t)&v91);
      v36 = (std::__shared_weak_count *)__p[0];
      if (!__p[0])
        goto LABEL_37;
      v37 = (unint64_t *)((char *)__p[0] + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        if (v101)
          goto LABEL_38;
      }
      else
      {
LABEL_37:
        if (v101)
        {
LABEL_38:
          v66 = 1;
          goto LABEL_73;
        }
      }
      v103[0] = "save";
      v103[1] = 4;
      v102 = v22;
      sub_20FF4BB98("Failure during ", (uint64_t)v103, (uint64_t)" from stream with file format ", &v102, (uint64_t)": ");
      if (v101)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C9B4620;
        __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
      }
      sub_21023590C(&v67, &v91, (uint64_t)&v69);
      v79 = v69;
      v39 = sub_20E89EFE4(__p, &v70);
      v55 = v79;
      LOBYTE(v56) = 0;
      v65 = 0;
      if (!v90)
      {
        v66 = 0;
        if (!v78)
          goto LABEL_60;
        goto LABEL_52;
      }
      v58 = 0;
      v40 = v83;
      if ((_BYTE)v83)
      {
        v56 = *(_OWORD *)v39;
        v57 = *((_QWORD *)v39 + 2);
        *((_QWORD *)v39 + 1) = 0;
        *((_QWORD *)v39 + 2) = 0;
        *(_QWORD *)v39 = 0;
        v58 = 1;
      }
      LOBYTE(v59) = 0;
      v64 = 0;
      if (v89)
      {
        v60 = v85;
        v59 = v84;
        v84 = 0uLL;
        v61 = v86;
        *(_OWORD *)v62 = v87;
        v63 = v88;
        v85 = 0;
        v87 = 0uLL;
        v88 = 0;
        v64 = 1;
      }
      v65 = 1;
      v66 = 0;
      if (v40 && v82 < 0)
        operator delete(__p[0]);
      if (v78)
      {
LABEL_52:
        if (v77)
        {
          if (v76 < 0)
            operator delete(v75);
          if (v74 < 0)
            operator delete(v73);
        }
        if (v72 && v71 < 0)
          operator delete((void *)v70);
      }
LABEL_60:
      if (v68 < 0)
      {
        operator delete(v67);
        if (v101)
          goto LABEL_73;
      }
      else if (v101)
      {
        goto LABEL_73;
      }
      if (v100)
      {
        if (v99)
        {
          if (v98 < 0)
            operator delete(v97);
          if (v96 < 0)
            operator delete(v95);
        }
        if (v94 && v93 < 0)
          operator delete(v92);
      }
LABEL_73:
      sub_20FDE71D8((uint64_t)&v55);
      if (!v66 && v65)
      {
        if (v64)
        {
          if (SHIBYTE(v63) < 0)
            operator delete(v62[0]);
          if (SHIBYTE(v60) < 0)
            operator delete((void *)v59);
        }
        if (v58 && SHIBYTE(v57) < 0)
          operator delete((void *)v56);
      }
      if (SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_20E860C04(a1, v50.__pn_.__r_.__value_.__l.__data_, v50.__pn_.__r_.__value_.__l.__size_);
      else
        *(std::__fs::filesystem::path *)a1 = v50;
      a1[1].__r_.__value_.__r.__words[0] = v51;
      a1[1].__r_.__value_.__s.__data_[8] = 1;
      v41 = v49;
      if (!v49)
        goto LABEL_90;
      v42 = (unint64_t *)&v49->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (v43)
      {
LABEL_90:
        if ((SHIBYTE(v52.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_91;
LABEL_100:
        operator delete(v52.__pn_.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_92;
LABEL_101:
        operator delete(v50.__pn_.__r_.__value_.__l.__data_);
        goto LABEL_92;
      }
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if (SHIBYTE(v52.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_100;
LABEL_91:
      if (SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_101;
LABEL_92:
      v17 = v54;
LABEL_93:
      if (v17)
      {
        v44 = (unint64_t *)&v17->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      return;
    default:
      sub_20FF130D8(a2, a3, a4, a5, 0, 0, a1);
      goto LABEL_93;
  }
}

void sub_20FF138C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF138D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;

  sub_20E89EF58((uint64_t)&a43);
  if (a42 < 0)
    operator delete(__p);
  sub_20E89ED1C(v58 - 232);
  sub_21022EBB8((uint64_t)&a9);
  sub_20FF14880((uint64_t)&a12);
  sub_20E86665C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20FF13970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF13984(std::__fs::filesystem::path *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  int v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  size_t size;
  unint64_t v23;
  uint64_t v24;
  std::string *p_dst;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  std::string *v37;
  std::string::size_type v38;
  std::__fs::filesystem::path::__string_view v39;
  std::__fs::filesystem::path *p_p;
  std::basic_string_view<_CharT, _Traits>::size_type v41;
  std::basic_string_view<_CharT, _Traits>::size_type v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  _QWORD *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  std::string::value_type v55;
  void **v56;
  void **v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  size_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  size_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  std::string::value_type v71;
  uint64_t v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__fs::filesystem::path *v75;
  std::string::value_type *v76;
  void **v77;
  void **v78;
  void *v79;
  std::__fs::filesystem::path *v80;
  int v81;
  std::__fs::filesystem::path v82;
  uint64_t v83;
  std::__fs::filesystem::path v84;
  std::__fs::filesystem::path v85;
  std::string v86;
  std::__fs::filesystem::path v87;
  void *v88[2];
  char v89;
  uint64_t *v90[3];
  _QWORD *v91;
  std::string::value_type v92;
  std::string::value_type v93;
  std::string::value_type v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (**v99)();
  __int128 v100;
  char v101;
  std::string::value_type v102;
  std::string __dst;
  unint64_t v104;
  _BYTE v105[24];
  void *v106;
  char v107;
  char v108;
  void *v109;
  char v110;
  char v111;
  void *v112;
  char v113;
  char v114;
  void *v115;
  void **v116;
  char v117;
  _OWORD v118[8];
  uint64_t v119;
  std::__fs::filesystem::path __p;
  unint64_t v121;
  _BYTE v122[24];
  void *v123;
  char v124;
  char v125;
  void *v126;
  uint64_t v127;
  char v128;
  void *v129;
  char v130;
  char v131;
  void *v132;
  void **v133;
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  if (a6 <= 0x10 && ((1 << a6) & 0x14100) != 0)
  {
    v81 = 2;
    v12 = 1987273518;
  }
  else
  {
    v81 = 1;
    v12 = 1952539694;
  }
  v89 = 4;
  LODWORD(v88[0]) = v12;
  BYTE4(v88[0]) = 0;
  v13 = *a3;
  if (*(char *)(*a3 + 23) < 0)
  {
    v15 = *(void **)v13;
    v14 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    v14 = *(unsigned __int8 *)(*a3 + 23);
    v15 = (void *)*a3;
  }
  v16 = v13 + 24;
  v17 = *(unsigned __int8 *)(v13 + 48);
  v18 = (v13 + 24) & 0xFFFFFFFFFFFFFF00;
  v19 = v16 & 0xF8;
  if (!v17)
    v19 = 0;
  sub_20FF0EE7C((uint64_t)&v87, a2, v15, v14, v19 | v18, v17);
  v80 = a1;
  v20 = a3 + 2;
  sub_20FF0F798(&v86, (uint64_t)(a3 + 2));
  v21 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  else
    size = v86.__r_.__value_.__l.__size_;
  v23 = size + 5;
  if (size + 5 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v24 = a5;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 5;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 5;
    if (!size)
      goto LABEL_24;
  }
  if (v21 >= 0)
    v28 = &v86;
  else
    v28 = (std::string *)v86.__r_.__value_.__r.__words[0];
  memmove(p_dst, v28, size);
LABEL_24:
  strcpy((char *)p_dst + size, "_info");
  if (v89 >= 0)
    v29 = v88;
  else
    v29 = (void **)v88[0];
  if (v89 >= 0)
    v30 = v89;
  else
    v30 = (std::string::size_type)v88[1];
  v31 = std::string::append(&__dst, (const std::string::value_type *)v29, v30);
  v32 = v31->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v118[0] = v31->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v118 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
  v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v118 + 7);
  __p.__pn_.__r_.__value_.__r.__words[0] = v32;
  __p.__pn_.__r_.__value_.__l.__size_ = *(_QWORD *)&v118[0];
  *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v33;
  if (SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v85, v87.__pn_.__r_.__value_.__l.__data_, v87.__pn_.__r_.__value_.__l.__size_);
  else
    v85 = v87;
  sub_20E8A944C((uint64_t)&v85, &__p);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_35:
  v34 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *))(*v20 + 16))(a3 + 2) + 96);
  v35 = (*(uint64_t (**)(_QWORD *))(*v20 + 16))(a3 + 2);
  if (v34)
    v36 = (uint64_t *)(v35 + 80);
  else
    v36 = (uint64_t *)v35;
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v86;
  else
    v37 = (std::string *)v86.__r_.__value_.__r.__words[0];
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  else
    v38 = v86.__r_.__value_.__l.__size_;
  sub_20FF0F384((uint64_t)&v84, (uint64_t)&v87, v36, (uint64_t)v37, v38, a4, v24, a7);
  v39 = std::__fs::filesystem::path::__filename(&v84);
  if (v39.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v39.__size_ >= 0x17)
  {
    v41 = (v39.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39.__size_ | 7) != 0x17)
      v41 = v39.__size_ | 7;
    v42 = v41 + 1;
    p_p = (std::__fs::filesystem::path *)operator new(v41 + 1);
    __p.__pn_.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    __p.__pn_.__r_.__value_.__l.__size_ = v39.__size_;
    goto LABEL_51;
  }
  *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v39.__size_;
  p_p = &__p;
  if (v39.__size_)
LABEL_51:
    memmove(p_p, v39.__data_, v39.__size_);
  p_p->__pn_.__r_.__value_.__s.__data_[v39.__size_] = 0;
  v43 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
  LODWORD(v118[0]) = __p.__pn_.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v118 + 3) = *(_DWORD *)((char *)&__p.__pn_.__r_.__value_.__r.__words[2] + 3);
  v44 = SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
  v45 = a3[3];
  if (!v45)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v45 = a3[3];
  }
  v46 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
  if (v44 < 0)
  {
    sub_20E860C04(&__dst, (void *)v43, *((unint64_t *)&v43 + 1));
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v43;
    LODWORD(__dst.__r_.__value_.__r.__words[2]) = v118[0];
    *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v118 + 3);
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v44;
  }
  v104 = 0;
  sub_20FDE470C((uint64_t)v105, v46);
  if (v44 < 0)
    operator delete((void *)v43);
  v97 = 0;
  v98 = 0;
  sub_210224144(&v85, 0x11u, a7, &__p);
  v47 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__r.__words[2];
  v99 = &off_24CA1F288;
  v100 = *(_OWORD *)&__p.__pn_.__r_.__value_.__r.__words[1];
  v101 = 1;
  v48 = (_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__pn_.__r_.__value_.__l.__size_
                                                                    + 16))(__p.__pn_.__r_.__value_.__l.__size_);
  v49 = v48;
  v50 = (char *)v48 + *(_QWORD *)(*v48 - 24);
  if ((v50[32] & 5) != 0)
  {
    v51 = -1;
    v52 = (char *)v48 + *(_QWORD *)(*v48 - 24);
    if ((v52[32] & 5) != 0)
    {
LABEL_64:
      memset(v118, 0, sizeof(v118));
      v119 = -1;
      goto LABEL_67;
    }
  }
  else
  {
    (*(void (**)(std::__fs::filesystem::path *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v50 + 5) + 32))(&__p, *((_QWORD *)v50 + 5), 0, 1, 16);
    v51 = v127;
    v52 = (char *)v49 + *(_QWORD *)(*v49 - 24);
    if ((v52[32] & 5) != 0)
      goto LABEL_64;
  }
  (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v52 + 5) + 32))(v118, *((_QWORD *)v52 + 5), 0, 1, 16);
LABEL_67:
  if (v81 == 2)
  {
    __p.__pn_.__r_.__value_.__r.__words[0] = 0x400000001;
    sub_20E9E9588((uint64_t)v90, (uint64_t *)&__p, (uint64_t)v49, 0, 0, 0);
    v90[0] = (uint64_t *)&off_24CA0BA78;
    v90[2] = (uint64_t *)&unk_24CA0BBC8;
    if (v95)
    {
      __p.__pn_.__r_.__value_.__s.__data_[0] = v92;
      sub_20E86A980(v91, (uint64_t)&__p, 1);
    }
    std::ostream::operator<<();
    ++v95;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_20E860C04(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p.__pn_ = __dst;
    v121 = v104;
    sub_20FDE55A4((uint64_t)v122, (uint64_t)v105);
    sub_20E9E713C((uint64_t)v90, (uint64_t)&__p);
    if (v95)
    {
      v102 = v92;
      sub_20E86A980(v91, (uint64_t)&v102, 1);
    }
    std::ostream::operator<<();
    if (!__CFADD__(v95++, 1))
    {
      v102 = v92;
      sub_20E86A980(v91, (uint64_t)&v102, 1);
    }
    std::ostream::operator<<();
    ++v95;
    sub_20FDE9BD0((uint64_t)v90, (uint64_t)v122, 6u);
    v55 = v94;
    if (v95)
    {
      v102 = v92;
      sub_20E86A980(v91, (uint64_t)&v102, 1);
    }
    v102 = v55;
    sub_20E86A980(v91, (uint64_t)&v102, 1);
    ++v95;
    if (v134)
    {
      v56 = (void **)v132;
      if (v132)
      {
        v57 = v133;
        v58 = v132;
        if (v133 != v132)
        {
          do
          {
            if (*((char *)v57 - 1) < 0)
              operator delete(*(v57 - 3));
            v57 -= 3;
          }
          while (v57 != v56);
          v58 = v132;
        }
        v133 = v56;
        operator delete(v58);
      }
    }
    if (v131 && v130 < 0)
      operator delete(v129);
    if (v128 && SHIBYTE(v127) < 0)
      operator delete(v126);
    if (v125 && v124 < 0)
      operator delete(v123);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      v71 = v94;
      if (!v95)
      {
LABEL_129:
        __p.__pn_.__r_.__value_.__s.__data_[0] = v71;
        sub_20E86A980(v91, (uint64_t)&__p, 1);
        v72 = v95 + 1;
        v95 = 0;
        v96 = v72;
        __p.__pn_.__r_.__value_.__s.__data_[0] = v93;
        sub_20E86A980(v91, (uint64_t)&__p, 1);
        goto LABEL_130;
      }
    }
    else
    {
      v71 = v94;
      if (!v95)
        goto LABEL_129;
    }
    __p.__pn_.__r_.__value_.__s.__data_[0] = v92;
    sub_20E86A980(v91, (uint64_t)&__p, 1);
    goto LABEL_129;
  }
  __p.__pn_.__r_.__value_.__l.__size_ = 1;
  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B7040;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B7190;
  v53 = operator new();
  *(_QWORD *)v53 = v49;
  *(_QWORD *)(v53 + 8) = v49;
  *(_BYTE *)(v53 + 16) = 0;
  *(_BYTE *)(v53 + 40) = 0;
  *(_BYTE *)(v53 + 48) = 0;
  *(_BYTE *)(v53 + 72) = 0;
  *(_QWORD *)(v53 + 88) = 0;
  *(_QWORD *)(v53 + 96) = 0;
  *(_QWORD *)(v53 + 80) = 0;
  v121 = v53;
  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B4468;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B45B8;
  LOBYTE(v90[0]) = 3;
  std::ostream::write();
  sub_20E9EE95C(v121);
  if (*(_BYTE *)(v121 + 40))
  {
    v90[0] = (uint64_t *)(v121 + 16);
    sub_20E9F4E1C((uint64_t)&v102, v90, (const void **)&__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_20E9F5254((uint64_t)v90, v121 + 8, (uint64_t)&__dst);
  }
  if (*(_BYTE *)(v121 + 40))
  {
    v90[0] = (uint64_t *)(v121 + 16);
    sub_20E9F472C(v90, v104);
  }
  else
  {
    sub_20E9F4A34();
  }
  if (*(_BYTE *)(v121 + 40))
  {
    v90[0] = (uint64_t *)(v121 + 16);
    sub_20E9F3D4C(v90, 6u);
  }
  else
  {
    LOBYTE(v90[0]) = 6;
    std::ostream::write();
  }
  sub_20E9EE95C(v121);
  sub_20FDE76D8((uint64_t)&__p, (uint64_t)v105, 6u);
  v59 = v121;
  v60 = *(_QWORD *)(*(_QWORD *)(v121 + 88) - 8);
  v61 = (size_t *)(v121 + 48);
  sub_20E9EE4D0((uint64_t *)(v121 + 48), *(_QWORD *)(v121 + 16) - v60 - 9);
  if (*v61)
    memmove((void *)(*(_QWORD *)(v59 + 24) + v60), *(const void **)(v59 + 56), *v61);
  *(_QWORD *)(v59 + 48) = 0;
  v62 = *(_QWORD *)(v59 + 80);
  v63 = *(_QWORD *)(v59 + 88) - 8;
  *(_QWORD *)(v59 + 88) = v63;
  if (v62 == v63)
  {
    std::ostream::write();
    if (*(_BYTE *)(v59 + 40))
    {
      free(*(void **)(v59 + 24));
      *(_BYTE *)(v59 + 40) = 0;
    }
  }
  v64 = v121;
  v65 = *(_QWORD *)(*(_QWORD *)(v121 + 88) - 8);
  v66 = (size_t *)(v121 + 48);
  sub_20E9EE4D0((uint64_t *)(v121 + 48), *(_QWORD *)(v121 + 16) - v65 - 9);
  if (*v66)
    memmove((void *)(*(_QWORD *)(v64 + 24) + v65), *(const void **)(v64 + 56), *v66);
  *(_QWORD *)(v64 + 48) = 0;
  v67 = *(_QWORD *)(v64 + 80);
  v68 = *(_QWORD *)(v64 + 88) - 8;
  *(_QWORD *)(v64 + 88) = v68;
  if (v67 == v68)
  {
    std::ostream::write();
    if (*(_BYTE *)(v64 + 40))
    {
      free(*(void **)(v64 + 24));
      *(_BYTE *)(v64 + 40) = 0;
    }
  }
  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B7040;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B7190;
  v69 = v121;
  v121 = 0;
  if (v69)
  {
    v70 = *(void **)(v69 + 80);
    if (v70)
    {
      *(_QWORD *)(v69 + 88) = v70;
      operator delete(v70);
    }
    if (*(_BYTE *)(v69 + 72))
      free(*(void **)(v69 + 56));
    if (*(_BYTE *)(v69 + 40))
      free(*(void **)(v69 + 24));
    MEMORY[0x212BC6398](v69, 0x1030C408C1A3048);
  }
LABEL_130:
  if (SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v82, v85.__pn_.__r_.__value_.__l.__data_, v85.__pn_.__r_.__value_.__l.__size_);
  else
    v82 = v85;
  v83 = v51 & ~(v51 >> 63);
  if (!v47)
    goto LABEL_137;
  p_shared_owners = (unint64_t *)&v47->__shared_owners_;
  do
    v74 = __ldaxr(p_shared_owners);
  while (__stlxr(v74 - 1, p_shared_owners));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_138;
  }
  else
  {
LABEL_137:
    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_138:
      v75 = v80;
      *v80 = v82;
      goto LABEL_141;
    }
  }
  v75 = v80;
  sub_20E860C04(v80, v82.__pn_.__r_.__value_.__l.__data_, v82.__pn_.__r_.__value_.__l.__size_);
LABEL_141:
  v75[1].__pn_.__r_.__value_.__r.__words[0] = v83;
  v76 = &v75[1].__pn_.__r_.__value_.__s.__data_[8];
  if (SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(v76, v84.__pn_.__r_.__value_.__l.__data_, v84.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)v76 = *(_OWORD *)&v84.__pn_.__r_.__value_.__l.__data_;
    v75[2].__pn_.__r_.__value_.__r.__words[0] = v84.__pn_.__r_.__value_.__r.__words[2];
  }
  if (SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__pn_.__r_.__value_.__l.__data_);
  if (v117)
  {
    v77 = (void **)v115;
    if (v115)
    {
      v78 = v116;
      v79 = v115;
      if (v116 != v115)
      {
        do
        {
          if (*((char *)v78 - 1) < 0)
            operator delete(*(v78 - 3));
          v78 -= 3;
        }
        while (v78 != v77);
        v79 = v115;
      }
      v116 = v77;
      operator delete(v79);
    }
  }
  if (v114 && v113 < 0)
    operator delete(v112);
  if (v111 && v110 < 0)
    operator delete(v109);
  if (v108)
  {
    if (v107 < 0)
      operator delete(v106);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_166:
      if ((SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_167;
      goto LABEL_173;
    }
  }
  else if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_166;
  }
  operator delete(v84.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_167:
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_168;
    goto LABEL_174;
  }
LABEL_173:
  operator delete(v85.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_168:
    if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_169;
    goto LABEL_175;
  }
LABEL_174:
  operator delete(v86.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_169:
    if ((v89 & 0x80000000) == 0)
      return;
LABEL_176:
    operator delete(v88[0]);
    return;
  }
LABEL_175:
  operator delete(v87.__pn_.__r_.__value_.__l.__data_);
  if (v89 < 0)
    goto LABEL_176;
}

void sub_20FF14668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t v63;

  if (*(char *)(v63 + 23) < 0)
    operator delete(*a9);
  if (a16 < 0)
    operator delete(__p);
  sub_20FF07868((uint64_t)&a63);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((a30 & 0x80000000) == 0)
      goto LABEL_10;
  }
  else if ((a30 & 0x80000000) == 0)
  {
LABEL_10:
    if (a36 < 0)
    {
      operator delete(a31);
      if ((a42 & 0x80000000) == 0)
      {
LABEL_12:
        if ((a48 & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_16;
      }
    }
    else if ((a42 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(a37);
    if ((a48 & 0x80000000) == 0)
LABEL_13:
      _Unwind_Resume(a1);
LABEL_16:
    operator delete(a43);
    _Unwind_Resume(a1);
  }
  operator delete(a25);
  goto LABEL_10;
}

uint64_t sub_20FF14880(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_20FF148D8(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  BOOL v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _BOOL4 v23;
  char v24;
  uint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *exception;
  uint64_t v33;
  std::__fs::filesystem::path __p;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  void *v39[2];
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  uint64_t v43;
  char v44;
  char v45;
  unsigned __int8 v46;
  std::__fs::filesystem::path v47;
  uint64_t v48;
  std::__fs::filesystem::path v49;
  uint64_t v50[2];
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  v10 = (const void *)a3[3];
  v11 = (std::__shared_weak_count *)a3[4];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (v10)
  {
    v14 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA0AF48, 0) != 0;
    if (!v11)
      goto LABEL_11;
  }
  else
  {
    v14 = 0;
    if (!v11)
      goto LABEL_11;
  }
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_11:
    if (v14)
      goto LABEL_12;
LABEL_19:
    v17 = 0;
    v63 = 0;
    v64 = 0;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v14)
    goto LABEL_19;
LABEL_12:
  v18 = a3[3];
  v17 = (std::__shared_weak_count *)a3[4];
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v63 = v18;
  v64 = v17;
  if (!v18)
  {
LABEL_20:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 833, (uint64_t)"mesh_data_ptr", 13, (uint64_t)"ExportMeshData requires data to be MeshData", 43, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v18 = 0;
    v21 = MEMORY[8];
    if (*(_DWORD *)(MEMORY[8] + 104) > 1u)
      goto LABEL_23;
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v18 + 8);
  if (*(_DWORD *)(v21 + 104) > 1u)
    goto LABEL_23;
LABEL_22:
  if (*(_DWORD *)(v21 + 64) <= 1u)
  {
    if (*(_QWORD *)(v21 + 144) == *(_QWORD *)(v21 + 152)
      && *(_QWORD *)(v21 + 176) == *(_QWORD *)(v21 + 184)
      && *(_QWORD *)(v21 + 208) == *(_QWORD *)(v21 + 216)
      && *(_QWORD *)(v21 + 240) == *(_QWORD *)(v21 + 248)
      && *(_QWORD *)(v21 + 280) == *(_QWORD *)(v21 + 288)
      && *(_QWORD *)(v21 + 320) == *(_QWORD *)(v21 + 328)
      && (v22 = *(_BYTE *)(v21 + 380)) == 0)
    {
      v23 = *(_BYTE *)(v21 + 408) == 0;
      if (a4 == 64)
        goto LABEL_37;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      if (a4 == 64)
        goto LABEL_37;
    }
    goto LABEL_31;
  }
LABEL_23:
  v22 = 1;
  v23 = 0;
  if (a4 == 64)
  {
LABEL_37:
    v24 = v22 ^ 1;
    if (a4 != 64)
      v24 = 1;
    if ((v24 & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x88uLL);
      sub_20E8610C0(&v47, ".obj");
      sub_20E8610C0(v50, "mesh is required to have per-vertex colors and normals");
      sub_20FF014E0((uint64_t *)&v47, v50, (uint64_t)&v35);
      v52 = v35;
      LOBYTE(v53) = 0;
      v62 = 0;
      if (v45)
      {
        v55 = 0;
        if (v38)
        {
          v53 = v36;
          v54 = v37;
          v37 = 0;
          v36 = 0uLL;
          v55 = 1;
        }
        LOBYTE(v56) = 0;
        v61 = 0;
        if (v44)
        {
          v57 = v40;
          v56 = *(_OWORD *)v39;
          v39[0] = 0;
          v39[1] = 0;
          v58 = v41;
          v59 = *(_OWORD *)v42;
          v60 = v43;
          v40 = 0;
          v42[0] = 0;
          v42[1] = 0;
          v43 = 0;
          v61 = 1;
        }
        v62 = 1;
      }
      sub_20FF15520((uint64_t)exception, &v52);
      __cxa_throw(exception, (struct type_info *)&unk_24CA0BBE8, (void (*)(void *))sub_20FF0ED60);
    }
    sub_20FF13984(&v47, a2, a3, (uint64_t)".obj", 4, a4, a5);
    sub_210224144(&v49, 0x30u, a5, v50);
    if (SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_20E860C04(&__p, v49.__pn_.__r_.__value_.__l.__data_, v49.__pn_.__r_.__value_.__l.__size_);
    else
      __p = v49;
    sub_20FF441FC((uint64_t)&__p, *(uint64_t **)(v18 + 8), a5, (uint64_t)&v35);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (!v46)
    {
      v33 = sub_20ED3C7D0((uint64_t)&v35);
      sub_20E9F5CE8(v33);
    }
    if (SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04((_BYTE *)a1, v47.__pn_.__r_.__value_.__l.__data_, v47.__pn_.__r_.__value_.__l.__size_);
      v26 = v46;
      *(_QWORD *)(a1 + 24) = v48;
      *(_BYTE *)(a1 + 32) = 1;
      if (!v26 && v45)
      {
        if (v44)
        {
          if (SHIBYTE(v43) < 0)
            operator delete(v42[0]);
          if (SHIBYTE(v40) < 0)
            operator delete(v39[0]);
        }
        if (v38 && SHIBYTE(v37) < 0)
          operator delete((void *)v36);
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)&v47.__pn_.__r_.__value_.__l.__data_;
      v25 = v48;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)&v47.__pn_.__r_.__value_.__l + 2);
      *(_QWORD *)(a1 + 24) = v25;
      *(_BYTE *)(a1 + 32) = 1;
    }
    v27 = v51;
    if (!v51)
      goto LABEL_53;
    v28 = (unint64_t *)&v51->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if ((SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_54:
        if ((SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_59;
      }
    }
    else
    {
LABEL_53:
      if ((SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_54;
    }
    operator delete(v49.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_55:
      v17 = v64;
      if (!v64)
        return;
      goto LABEL_60;
    }
LABEL_59:
    operator delete(v47.__pn_.__r_.__value_.__l.__data_);
    v17 = v64;
    if (!v64)
      return;
    goto LABEL_60;
  }
LABEL_31:
  if (v23)
    goto LABEL_37;
  sub_20FF130D8(a2, a3, a4, a5, 0, 0);
  if (!v17)
    return;
LABEL_60:
  v30 = (unint64_t *)&v17->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_20FF14E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  int v48;
  uint64_t v49;

  sub_20E89EF58(v49 - 208);
  sub_20E89EF58((uint64_t)&a16);
  if (a47 < 0)
    operator delete(__p);
  if (a37 < 0)
  {
    operator delete(a32);
    if ((v48 & 1) == 0)
    {
LABEL_8:
      sub_20E86665C(v49 - 80);
      _Unwind_Resume(a1);
    }
  }
  else if (!v48)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v47);
  sub_20E86665C(v49 - 80);
  _Unwind_Resume(a1);
}

void sub_20FF14F18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0BC38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FF14F28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0BC38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FF14F58(uint64_t a1)
{
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  std::__shared_weak_count *v10;
  char v11;

  v2 = (void **)(a1 + 24);
  v9[0] = 0;
  v11 = 0;
  sub_20FF0C8CC(a1 + 24, (uint64_t)v9);
  if (v11)
  {
    v3 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  v6 = MEMORY[0x24BEDB7F0];
  v7 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(v6 + 72);
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(a1 + 72) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 64) = v8;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](a1 + 176);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v2);
}

uint64_t sub_20FF15074(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  std::locale v31;
  std::locale v32;

  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB898] + 16;
  v4 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = v6;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v8 = (std::ios_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  std::ios_base::move(v7, v8);
  v7[1].__vftable = v8[1].__vftable;
  v8[1].__vftable = 0;
  v7[1].__fmtflags_ = v8[1].__fmtflags_;
  v9 = v4[4];
  v10 = v4[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 16 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v4[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v4[6];
  v12 = MEMORY[0x24BEDB858];
  *(_QWORD *)a1 = MEMORY[0x24BEDB858] + 24;
  *(_QWORD *)(a1 + 128) = v12 + 104;
  *(_QWORD *)(a1 + 16) = v12 + 64;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 88) = 0;
  v14 = (_OWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v15 = (__int128 *)(a2 + 88);
  if (*(char *)(a2 + 111) >= 0)
    v16 = a2 + 88;
  else
    v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 40);
  if (v17)
  {
    v18 = v17 - v16;
    v19 = *(_QWORD *)(a2 + 48) - v16;
    v20 = *(_QWORD *)(a2 + 56) - v16;
    v21 = *(_QWORD *)(a2 + 64);
    if (v21)
    {
LABEL_6:
      v22 = v21 - v16;
      v23 = *(_QWORD *)(a2 + 72) - v16;
      v24 = *(_QWORD *)(a2 + 80) - v16;
      goto LABEL_9;
    }
  }
  else
  {
    v20 = -1;
    v19 = -1;
    v18 = -1;
    v21 = *(_QWORD *)(a2 + 64);
    if (v21)
      goto LABEL_6;
  }
  v22 = -1;
  v23 = -1;
  v24 = -1;
LABEL_9:
  v25 = *(_QWORD *)(a2 + 112);
  v26 = v25 - v16;
  if (!v25)
    v26 = -1;
  v27 = *v15;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *v14 = v27;
  *(_BYTE *)(a2 + 111) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  v28 = a1 + 88;
  if (*(char *)(a1 + 111) < 0)
    v28 = *(_QWORD *)v14;
  if (v18 != -1)
  {
    *(_QWORD *)(a1 + 40) = v28 + v18;
    *(_QWORD *)(a1 + 48) = v28 + v19;
    *(_QWORD *)(a1 + 56) = v28 + v20;
  }
  if (v22 != -1)
  {
    *(_QWORD *)(a1 + 80) = v28 + v24;
    *(_QWORD *)(a1 + 64) = v28 + v22;
    *(_QWORD *)(a1 + 72) = v28 + v22 + v23;
  }
  v29 = v28 + v26;
  if (v26 == -1)
    v29 = 0;
  *(_QWORD *)(a1 + 112) = v29;
  if (*(char *)(a2 + 111) < 0)
    v15 = *(__int128 **)(a2 + 88);
  *(_QWORD *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v15;
  *(_QWORD *)(a2 + 64) = v15;
  *(_QWORD *)(a2 + 72) = v15;
  *(_QWORD *)(a2 + 80) = v15;
  *(_QWORD *)(a2 + 112) = v15;
  std::locale::locale(&v31, (const std::locale *)(a2 + 32));
  (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, &v31);
  std::locale::locale(&v32, (const std::locale *)(a1 + 32));
  std::locale::operator=((std::locale *)(a1 + 32), &v31);
  std::locale::~locale(&v32);
  std::locale::~locale(&v31);
  *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40) = a1 + 24;
  return a1;
}

void sub_20FF152FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  uint64_t v10;
  void **v11;

  std::locale::~locale(&a9);
  if (*(char *)(v9 + 111) < 0)
    operator delete(*v11);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v10);
  _Unwind_Resume(a1);
}

void sub_20FF15358(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  void **v6;
  int v7;
  void *__p[2];
  unsigned __int8 v9;
  int v10;

  if (!*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)(a1 + 40) = 1;
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(v2 + 24);
    if (!v3)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v3 = *(_QWORD *)(v2 + 24);
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v3 + 48))(__p);
    v4 = v9;
    v5 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v4 = (unint64_t)__p[1];
    if (v4 == 8)
    {
      v6 = (void **)__p[0];
      if ((v9 & 0x80u) == 0)
        v6 = __p;
      if (*(void **)"cv3d.viz" == *v6)
      {
        switch(v10)
        {
          case 0:
          case 14:
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 651, (uint64_t)"", 0, (uint64_t)"invalid data type", 17, (void (*)(void **))sub_21023DDB0);
            abort();
          case 1:
            *(_BYTE *)(a1 + 44) = 1;
            v7 = 5;
            goto LABEL_19;
          case 2:
          case 3:
          case 4:
          case 12:
          case 13:
            *(_BYTE *)(a1 + 42) = 1;
            break;
          case 5:
          case 8:
          case 10:
            *(_BYTE *)(a1 + 41) = 1;
            *(_DWORD *)(a1 + 52) = 2;
            break;
          case 6:
            *(_DWORD *)(a1 + 56) = 3;
            break;
          case 7:
            *(_BYTE *)(a1 + 44) = 1;
            v7 = 6;
LABEL_19:
            *(_DWORD *)(a1 + 48) = v7;
            break;
          case 11:
            *(_BYTE *)(a1 + 41) = 1;
            *(_DWORD *)(a1 + 52) = 4;
            break;
          default:
            break;
        }
      }
    }
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_20FF15504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF15520(uint64_t a1, _OWORD *a2)
{
  std::string v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v7 = 0;
  sub_20FF0B374((uint64_t)&v9, (std::string::size_type)v6, (uint64_t)a2);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(std::string *__return_ptr, char **, _BYTE *))off_24CA0BCB8[v7])(&v5, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA0BCA0[v7])(&v9, v6);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_24CA0BC10;
  *(_OWORD *)(a1 + 16) = *a2;
  sub_20E89EFE4((_BYTE *)(a1 + 32), a2 + 1);
  return a1;
}

void sub_20FF155FC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_20FF15610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF1562C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF15640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF15654(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CA1DC90;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

void sub_20FF156A8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CA1DC90;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  JUMPOUT(0x212BC6398);
}

void sub_20FF15714(uint64_t a1, unsigned __int8 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_2101FAC64(a1);
    v7 = *v6;
    *v6 = 4;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB07D94(&v9, v7);
  }
}

void sub_20FF157B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FF157CC(uint64_t a1, char *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_2101FAC64(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB07D94(&v9, v7);
  }
}

void sub_20FF1586C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FF15884(uint64_t a1, __int16 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_2101FAC64(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB07D94(&v9, v7);
  }
}

void sub_20FF15924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FF1593C(uint64_t a1, int *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_2101FAC64(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB07D94(&v9, v7);
  }
}

void sub_20FF159DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FF159F4(uint64_t a1, void ***a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FAC64(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB07D94(&v9, v7);
  }
}

void sub_20FF15A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FF15AAC(uint64_t a1, void ***a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FAC64(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB07D94(&v9, v7);
  }
}

void sub_20FF15B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FF15B64(uint64_t a1, unsigned __int8 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_2101FAC64(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB07D94(&v9, v7);
  }
}

void sub_20FF15C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FF15C1C(uint64_t a1, char *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_2101FAC64(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB07D94(&v9, v7);
  }
}

void sub_20FF15CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FF15CD4(uint64_t a1, unsigned __int16 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_2101FAC64(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB07D94(&v9, v7);
  }
}

void sub_20FF15D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FF15D90(uint64_t a1, void ***a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FAC64(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB07D94(&v9, v7);
  }
}

void sub_20FF15E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FF15E48(uint64_t a1, void ***a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FAC64(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB07D94(&v9, v7);
  }
}

void sub_20FF15EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FF15F00(uint64_t a1, float *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    sub_2101FD320(a1, a2);
  }
}

void sub_20FF15F44(uint64_t a1, double *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    sub_2101FD518(a1, a2);
  }
}

void sub_20FF15F8C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FEFD0(a1, v3);
}

void sub_20FF15FB0(uint64_t a1, size_t a2, size_t a3)
{
  size_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FD81C(a1, v3);
}

void sub_20FF15FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FDA8C(a1, (uint64_t)v3);
}

void sub_20FF15FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FDCFC(a1, (uint64_t)v3);
}

void sub_20FF1601C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FDF6C(a1, (uint64_t)v3);
}

void sub_20FF16040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FE1DC(a1, (uint64_t)v3);
}

void sub_20FF16064(uint64_t a1, size_t a2, size_t a3)
{
  size_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FB01C(a1, v3);
}

void sub_20FF16088(uint64_t a1, size_t a2, size_t a3)
{
  size_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FD954(a1, v3);
}

void sub_20FF160AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FDBC4(a1, (uint64_t)v3);
}

void sub_20FF160D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FDE34(a1, (uint64_t)v3);
}

void sub_20FF160F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FE0A4(a1, (uint64_t)v3);
}

void sub_20FF16118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FE314(a1, (uint64_t)v3);
}

void sub_20FF1613C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FE8F4(a1, v3);
}

void sub_20FF16160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FEC64(a1, v3);
}

void sub_20FF16184(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FF120(a1, v3);
}

void sub_20FF161AC(uint64_t a1, size_t *a2)
{
  size_t v2;
  size_t v3[2];

  v2 = a2[1];
  v3[0] = *a2;
  v3[1] = v2;
  sub_2101FB01C(a1, v3);
}

void sub_20FF161DC(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  int v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *exception;
  uint64_t v15;

  sub_2101FF7D8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v15 = 0;
  sub_2100DB048(v5, &v15);
  if (HIDWORD(v15))
  {
LABEL_14:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "protocol_info";
  *(_QWORD *)(a1 + 96) = 13;
  if (v6)
  {
    sub_2101FF7D8(a1);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (v7)
      goto LABEL_6;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_2101FF7D8(a1);
    v13 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (v13)
      goto LABEL_6;
  }
  *(_BYTE *)(a1 + 104) = 1;
LABEL_6:
  v8 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v15 = 0;
  sub_2100DB048(v8, &v15);
  if (HIDWORD(v15))
    goto LABEL_14;
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "current";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  v15 = a2 + 4;
  sub_20FEE50D4((uint64_t *)a1, &v15);
  v10 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "min";
  *(_QWORD *)(a1 + 96) = 3;
  if (!v10)
    *(_BYTE *)(a1 + 104) = 1;
  v15 = a2 + 16;
  sub_20FEE50D4((uint64_t *)a1, &v15);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a1 + 48) = v11 - 8;
  *(_QWORD *)(a1 + 72) = v12 - 8;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v11 - 16);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a1 + 48) = v11 - 16;
  *(_QWORD *)(a1 + 72) = v12 - 16;
}

void *sub_20FF163AC(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *result;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v19 = v4;
  v5 = sub_20E86A980((_QWORD *)(v4 + 16), (uint64_t)"{", 1);
  sub_20E86A980(v5, (uint64_t)"{current=", 9);
  sub_210233CA0(v5, a2);
  sub_20E86A980(v5, (uint64_t)", min=", 6);
  sub_210233CA0(v5, (uint64_t *)((char *)a2 + 12));
  sub_20E86A980(v5, (uint64_t)"}", 1);
  result = sub_20E86A980(v5, (uint64_t)"}", 1);
  v7 = *(_DWORD *)(v4 + 120);
  if ((v7 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v4 + 112);
    v10 = *(_QWORD *)(v4 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v4 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v4 + 64);
    v12 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_20;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      a1[23] = 0;
      *a1 = 0;
      v8 = v4;
      if (!v4)
        return result;
LABEL_11:
      v13 = MEMORY[0x24BEDB7F0];
      v14 = *MEMORY[0x24BEDB7F0];
      *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
      v15 = *(_QWORD *)(v13 + 72);
      *(_QWORD *)(v8 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
      *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
      *(_QWORD *)(v8 + 16) = v15;
      if (*(char *)(v8 + 111) < 0)
        operator delete(*(void **)(v8 + 88));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](v8 + 128);
      JUMPOUT(0x212BC6398);
    }
    v11 = *(const void **)(v4 + 40);
    v12 = *(_QWORD *)(v4 + 56) - (_QWORD)v11;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
LABEL_20:
      sub_20E860B7C();
  }
  if (v12 >= 0x17)
  {
    v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v16 = v12 | 7;
    v17 = v16 + 1;
    v18 = operator new(v16 + 1);
    *((_QWORD *)a1 + 1) = v12;
    *((_QWORD *)a1 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)a1 = v18;
    a1 = v18;
  }
  else
  {
    a1[23] = v12;
    if (!v12)
    {
      *a1 = 0;
      v8 = v19;
      if (v19)
        goto LABEL_11;
      return result;
    }
  }
  result = memmove(a1, v11, v12);
  a1[v12] = 0;
  v8 = v19;
  if (v19)
    goto LABEL_11;
  return result;
}

void sub_20FF16614(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FF16638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FF1664C(uint64_t a1, uint64_t a2)
{
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;

  v4 = (const void **)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v26 = (uint64_t *)(v5 + 16);
    sub_20E9F3D4C(&v26, 2u);
    sub_20E9EE95C(*(_QWORD *)(a1 + 24));
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
      goto LABEL_3;
LABEL_6:
    sub_20E9F5254((uint64_t)&v26, v6 + 8, (uint64_t)v4);
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_20E9F3FC0((uint64_t)&v26, v5 + 8);
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v6 + 40))
    goto LABEL_6;
LABEL_3:
  v26 = (uint64_t *)(v6 + 16);
  sub_20E9F4E1C((uint64_t)&v25, &v26, v4);
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
LABEL_4:
    v26 = (uint64_t *)(v7 + 16);
    sub_20E9F3D4C(&v26, *(_DWORD *)(a2 + 32));
    goto LABEL_8;
  }
LABEL_7:
  sub_20E9F3FC0((uint64_t)&v26, v7 + 8);
LABEL_8:
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v8 + 48), *(_QWORD *)(v8 + 16) - v9 - 9);
  v10 = *(_QWORD *)(v8 + 48);
  if (v10)
    memmove((void *)(*(_QWORD *)(v8 + 24) + v9), *(const void **)(v8 + 56), v10);
  *(_QWORD *)(v8 + 48) = 0;
  v11 = *(_QWORD *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 88) - 8;
  *(_QWORD *)(v8 + 88) = v12;
  if (v11 == v12)
  {
    std::ostream::write();
    if (*(_BYTE *)(v8 + 40))
    {
      free(*(void **)(v8 + 24));
      *(_BYTE *)(v8 + 40) = 0;
    }
  }
  if (*(_DWORD *)(a2 + 56) > 1u)
    sub_20E877AB8();
  v14 = *(_QWORD *)(a2 + 40);
  v13 = *(std::__shared_weak_count **)(a2 + 48);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  v19 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v19 + 40))
  {
    v26 = (uint64_t *)(v19 + 16);
    sub_20E9F3D4C(&v26, v18);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v26, v19 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a1, v18);
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v20 + 48), *(_QWORD *)(v20 + 16) - v21 - 9);
  v22 = *(_QWORD *)(v20 + 48);
  if (v22)
    memmove((void *)(*(_QWORD *)(v20 + 24) + v21), *(const void **)(v20 + 56), v22);
  *(_QWORD *)(v20 + 48) = 0;
  v23 = *(_QWORD *)(v20 + 80);
  v24 = *(_QWORD *)(v20 + 88) - 8;
  *(_QWORD *)(v20 + 88) = v24;
  if (v23 == v24)
  {
    std::ostream::write();
    if (*(_BYTE *)(v20 + 40))
    {
      free(*(void **)(v20 + 24));
      *(_BYTE *)(v20 + 40) = 0;
    }
  }
}

void sub_20FF168F8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  char v26[8];
  void *v27;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unsigned int v31;
  void *__p;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  sub_20FF16C00((uint64_t)v26, a2);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v3, (uint64_t)&v25, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20E9E713C(a1, (uint64_t)&v27);
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v4, (uint64_t)&v25, 1);
  }
  std::ostream::operator<<();
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 34);
  *(_QWORD *)(a1 + 40) = v5 + 1;
  if (v5 != -1)
  {
    v7 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v7, (uint64_t)&v25, 1);
  }
  v8 = *(_QWORD **)(a1 + 24);
  v25 = v6;
  sub_20E86A980(v8, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a1 + 40);
  if (v31 > 1)
    sub_20E877AB8();
  v9 = v29;
  v10 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  if (*(_QWORD *)(a1 + 40))
  {
    v15 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v15, (uint64_t)&v25, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a1, v14);
  v16 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v17 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v17, (uint64_t)&v25, 1);
  }
  v18 = *(_QWORD **)(a1 + 24);
  v25 = v16;
  sub_20E86A980(v18, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a1 + 40);
  v19 = (char *)__p;
  if (__p)
  {
    v20 = v33;
    v21 = __p;
    if (v33 != __p)
    {
      do
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v20 -= 16;
      }
      while (v20 != v19);
      v21 = __p;
    }
    v33 = v19;
    operator delete(v21);
  }
  if (v31 != -1)
    ((void (*)(char *, uint64_t *))off_24CA0BC78[v31])(&v25, &v29);
  v31 = -1;
  if (v28 < 0)
    operator delete(v27);
}

void sub_20FF16BD0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FF16BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FF07710((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF16C00(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;
  _BYTE v8[2];

  if (*(char *)(a2 + 31) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 56) = -1;
  v6 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24CA0BE88[v6])(v8, a1 + 40, a2 + 40);
    *(_DWORD *)(a1 + 56) = v6;
  }
  sub_20FDD8FB0((_QWORD *)(a1 + 64), a2 + 64);
  return a1;
}

void sub_20FF16CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v14 + 56);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_24CA0BC78[v17])(&a13, v15);
  *(_DWORD *)(v14 + 56) = -1;
  if (*(char *)(v14 + 31) < 0)
    operator delete(*v13);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FF16D18(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t v15;
  void **v17;
  uint64_t v18;
  std::string::size_type v19;
  char *v20;
  void *__p[2];
  uint64_t v22;
  __int128 __dst;
  int64_t v24;
  int v25;

  v2 = (char *)a1;
  v3 = *((_DWORD *)a1 + 6);
  if (v3 == 1)
  {
    v25 = -1;
    if ((char)a2[23] < 0)
    {
      sub_20E860C04(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      __dst = *(_OWORD *)a2;
      v24 = *((_QWORD *)a2 + 2);
    }
    v22 = v24;
    *(_OWORD *)__p = __dst;
    if (v24 >= 0)
      v17 = __p;
    else
      v17 = (void **)__dst;
    if (v24 >= 0)
      v18 = HIBYTE(v24);
    else
      v18 = *((_QWORD *)&__dst + 1);
    if (v2[23] < 0)
    {
      v20 = v2;
      v2 = *(char **)v2;
      v19 = *((_QWORD *)v20 + 1);
    }
    else
    {
      v19 = v2[23];
    }
    v15 = sub_21023721C((uint64_t)v17, v18, v2, v19, 0);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return v15;
    operator delete(__p[0]);
    return v15;
  }
  else
  {
    if (v3)
      sub_20E877AB8();
    v4 = a1[23];
    if ((v4 & 0x80u) == 0)
      v5 = a1[23];
    else
      v5 = *((_QWORD *)a1 + 1);
    v6 = a2[23];
    v7 = (char)v6;
    if ((v6 & 0x80u) != 0)
      v6 = *((_QWORD *)a2 + 1);
    if (v5 != v6)
      return 0;
    if (v7 < 0)
      a2 = *(unsigned __int8 **)a2;
    if ((v4 & 0x80) != 0)
    {
      return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
    }
    else
    {
      if (a1[23])
      {
        v8 = v4 - 1;
        do
        {
          v10 = *v2++;
          v9 = v10;
          v12 = *a2++;
          v11 = v12;
          v14 = v8-- != 0;
          v15 = v9 == v11;
        }
        while (v9 == v11 && v14);
        return v15;
      }
      return 1;
    }
  }
}

void sub_20FF16EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF16ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF16EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned __int8 v5;
  size_t v6;
  unint64_t v7;
  int v8;
  void **v9;
  uint64_t v10;
  void **v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  uint64_t v18;
  void *p_s1;
  size_t v20;
  std::string::size_type v21;
  uint64_t v22;
  void *__p[2];
  unsigned __int8 v25;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;
  char v29;
  char *v30;
  _BYTE v31[24];
  int v32;

  v3 = a1;
  v4 = *(_DWORD *)(a1 + 56);
  if (v4 == 1)
  {
    v32 = 0;
    sub_20FF09120((uint64_t)__p, (uint64_t)v31, a2);
    if (v32 == -1)
      sub_20E877AB8();
    __p[0] = &v30;
    ((void (*)(void **__return_ptr, void **, _BYTE *))off_24CA0BEF8[v32])(&__s1, __p, v31);
    if (v32 != -1)
      ((void (*)(void **, _BYTE *))off_24CA0BEE0[v32])(__p, v31);
    if ((v28 & 0x80u) == 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if ((v28 & 0x80u) == 0)
      v20 = v28;
    else
      v20 = __n;
    if (*(char *)(v3 + 23) < 0)
    {
      v22 = v3;
      v3 = *(_QWORD *)v3;
      v21 = *(_QWORD *)(v22 + 8);
    }
    else
    {
      v21 = *(unsigned __int8 *)(v3 + 23);
    }
    v18 = sub_21023721C((uint64_t)p_s1, v20, (char *)v3, v21, 0);
    if ((char)v28 < 0)
      goto LABEL_49;
    return v18;
  }
  if (v4)
    sub_20E877AB8();
  v32 = 0;
  sub_20FF09120((uint64_t)__p, (uint64_t)v31, a1);
  if (v32 == -1)
    sub_20E877AB8();
  __p[0] = &v30;
  ((void (*)(void **__return_ptr, void **, _BYTE *))off_24CA0BEF8[v32])(&__s1, __p, v31);
  if (v32 != -1)
    ((void (*)(void **, _BYTE *))off_24CA0BEE0[v32])(__p, v31);
  v32 = 0;
  sub_20FF09120((uint64_t)&v30, (uint64_t)v31, a2);
  if (v32 == -1)
    sub_20E877AB8();
  v30 = &v29;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA0BEF8[v32])(__p, &v30, v31);
  if (v32 != -1)
    ((void (*)(char **, _BYTE *))off_24CA0BEE0[v32])(&v30, v31);
  v5 = v28;
  if ((v28 & 0x80u) == 0)
    v6 = v28;
  else
    v6 = __n;
  v7 = v25;
  v8 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v7 = (unint64_t)__p[1];
  if (v6 != v7)
  {
    v18 = 0;
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_48;
  }
  if ((v25 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((char)v28 < 0)
  {
    v18 = memcmp(__s1, v9, __n) == 0;
    goto LABEL_44;
  }
  if (v28)
  {
    v10 = v28 - 1;
    v11 = &__s1;
    do
    {
      v13 = *(unsigned __int8 *)v11;
      v11 = (void **)((char *)v11 + 1);
      v12 = v13;
      v15 = *(unsigned __int8 *)v9;
      v9 = (void **)((char *)v9 + 1);
      v14 = v15;
      v17 = v10-- != 0;
      v18 = v12 == v14;
    }
    while (v12 == v14 && v17);
LABEL_44:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_48;
  }
  v18 = 1;
  if (((char)v25 & 0x80000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x80) != 0)
      goto LABEL_49;
    return v18;
  }
LABEL_48:
  operator delete(__p[0]);
  if ((v28 & 0x80) == 0)
    return v18;
LABEL_49:
  operator delete(__s1);
  return v18;
}

void sub_20FF1719C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF171F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF17208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20FF1721C(uint64_t a1, std::__shared_weak_count *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  if (!a2)
    return a1 != 0;
  p_shared_owners = (unint64_t *)&a2->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1 != 0;
  ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
  std::__shared_weak_count::__release_weak(a2);
  return a1 != 0;
}

void sub_20FF1729C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int128 *v7;
  unsigned __int128 v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  int8x8_t v16;
  uint64_t v17;
  unsigned __int128 v18;
  _BYTE *v19;
  void *v20[2];
  uint64_t v21;
  char v22;
  _OWORD v23[2];
  void *__p[2];
  uint64_t v25;
  unsigned __int128 v26;
  unsigned __int8 v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  LOBYTE(v20[0]) = 0;
  v22 = 0;
  v4 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_20E860C04(v20, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)(a2 + 16);
      v21 = *(_QWORD *)(a2 + 32);
    }
    v4 = 1;
    v22 = 1;
  }
  LOBYTE(__p[0]) = 0;
  v27 = 0;
  if (!*(_BYTE *)(a2 + 160))
  {
    v5 = 0;
    if (v4)
      goto LABEL_16;
LABEL_10:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v6 = a1 + 32;
    *(_BYTE *)(a1 + 80) = 0;
    if (!v5)
      goto LABEL_50;
    goto LABEL_45;
  }
  if (*(char *)(a2 + 135) < 0)
  {
    sub_20E860C04(__p, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 112);
    v25 = *(_QWORD *)(a2 + 128);
  }
  v7 = (unsigned __int128 *)(a2 + 144);
  do
    v8 = __ldaxp(v7);
  while (__stlxp(v8, v7));
  v26 = v8;
  v5 = 1;
  v27 = 1;
  if (!v22)
    goto LABEL_10;
LABEL_16:
  *(_QWORD *)&v23[1] = v21;
  v23[0] = *(_OWORD *)v20;
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v9 = BYTE7(v23[1]);
  v10 = *((_QWORD *)&v23[0] + 1);
  v11 = *(_QWORD *)&v23[0];
  if ((SBYTE7(v23[1]) & 0x80u) == 0)
    v12 = v23;
  else
    v12 = *(_OWORD **)&v23[0];
  if ((SBYTE7(v23[1]) & 0x80u) == 0)
    v10 = BYTE7(v23[1]);
  if (v10)
  {
    v13 = v12;
    if (v10 >= 8)
    {
      v13 = (char *)v12 + (v10 & 0xFFFFFFFFFFFFFFF8);
      v14 = (char *)v12 + 3;
      v15 = v10 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        v16 = vceq_s8(*(int8x8_t *)(v14 - 3), (int8x8_t)0x2323232323232323);
        if ((v16.i8[0] & 1) != 0)
        {
          *(v14 - 3) = 95;
          if ((v16.i8[1] & 1) == 0)
          {
LABEL_27:
            if ((v16.i8[2] & 1) == 0)
              goto LABEL_28;
            goto LABEL_36;
          }
        }
        else if ((v16.i8[1] & 1) == 0)
        {
          goto LABEL_27;
        }
        *(v14 - 2) = 95;
        if ((v16.i8[2] & 1) == 0)
        {
LABEL_28:
          if ((v16.i8[3] & 1) == 0)
            goto LABEL_29;
          goto LABEL_37;
        }
LABEL_36:
        *(v14 - 1) = 95;
        if ((v16.i8[3] & 1) == 0)
        {
LABEL_29:
          if ((v16.i8[4] & 1) == 0)
            goto LABEL_30;
          goto LABEL_38;
        }
LABEL_37:
        *v14 = 95;
        if ((v16.i8[4] & 1) == 0)
        {
LABEL_30:
          if ((v16.i8[5] & 1) == 0)
            goto LABEL_31;
          goto LABEL_39;
        }
LABEL_38:
        v14[1] = 95;
        if ((v16.i8[5] & 1) == 0)
        {
LABEL_31:
          if ((v16.i8[6] & 1) == 0)
            goto LABEL_32;
          goto LABEL_40;
        }
LABEL_39:
        v14[2] = 95;
        if ((v16.i8[6] & 1) == 0)
        {
LABEL_32:
          if ((v16.i8[7] & 1) != 0)
            goto LABEL_41;
          goto LABEL_24;
        }
LABEL_40:
        v14[3] = 95;
        if ((v16.i8[7] & 1) != 0)
LABEL_41:
          v14[4] = 95;
LABEL_24:
        v14 += 8;
        v15 -= 8;
        if (!v15)
        {
          if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_43;
          break;
        }
      }
    }
    v19 = (char *)v12 + v10;
    do
    {
      if (*v13 == 35)
        *v13 = 95;
      ++v13;
    }
    while (v13 != v19);
LABEL_43:
    v11 = *(_QWORD *)&v23[0];
    v9 = BYTE7(v23[1]);
    v5 = v27;
  }
  v28[0] = *((_QWORD *)&v23[0] + 1);
  *(_QWORD *)((char *)v28 + 7) = *(_QWORD *)((char *)v23 + 15);
  memset(v23, 0, 24);
  v17 = v28[0];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v28 + 7);
  *(_BYTE *)(a1 + 23) = v9;
  *(_BYTE *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 0;
  v6 = a1 + 32;
  *(_BYTE *)(a1 + 80) = 0;
  if (v5)
  {
LABEL_45:
    *(_OWORD *)v6 = *(_OWORD *)__p;
    *(_QWORD *)(v6 + 16) = v25;
    __p[1] = 0;
    v25 = 0;
    __p[0] = 0;
    do
      v18 = __ldaxp(&v26);
    while (__stlxp(v18, &v26));
    *(_OWORD *)(a1 + 64) = v18;
    *(_BYTE *)(a1 + 80) = 1;
    if (v27 && SHIBYTE(v25) < 0)
      operator delete(__p[0]);
  }
LABEL_50:
  if (v22)
  {
    if (SHIBYTE(v21) < 0)
      operator delete(v20[0]);
  }
}

void sub_20FF175C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a29 && a25 < 0)
    operator delete(__p);
  if (a15)
  {
    if (a14 < 0)
      operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FF17604(_QWORD *a1)
{
  *a1 = &off_24CA0BEA8;
  sub_20FF18588((uint64_t)(a1 + 2));
  return a1;
}

void sub_20FF17634(_QWORD *a1)
{
  *a1 = &off_24CA0BEA8;
  sub_20FF18588((uint64_t)(a1 + 2));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF17674(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  __int128 *p_p;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned __int128 v40;
  int v41;
  unsigned __int8 v42;
  __int128 __p;
  uint64_t v44;
  int v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  unsigned __int128 v52;
  char v53;
  __int128 __dst;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  unsigned __int128 v59;
  char v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v42 = 1;
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(std::__shared_weak_count **)(a2 + 32);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_14:
    LOBYTE(__p) = 0;
    v46 = 0;
    if (!*(_BYTE *)(a1 + 64))
    {
      v10 = 0;
      goto LABEL_23;
    }
    v10 = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5)
    goto LABEL_14;
LABEL_7:
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = *(_QWORD *)(a2 + 24);
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v9 + 48))(&__dst);
  __p = __dst;
  v44 = v55;
  v45 = v56;
  v10 = 1;
  v46 = 1;
  if (*(_BYTE *)(a1 + 64))
  {
    if (SHIBYTE(v44) < 0)
    {
      sub_20E860C04(&__dst, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      __dst = __p;
      v55 = v44;
    }
LABEL_17:
    LOBYTE(v56) = v10;
    if ((sub_20FF188A8(a1 + 16, (uint64_t)&__dst) & 1) == 0)
      v42 = 0;
    if ((_BYTE)v56 && SHIBYTE(v55) < 0)
      operator delete((void *)__dst);
  }
  if (!v42)
    goto LABEL_92;
LABEL_23:
  if (*(_BYTE *)(a1 + 80))
  {
    if (v10)
    {
      if (!*(_BYTE *)(a1 + 76) || *(_DWORD *)(a1 + 72) != v45)
        goto LABEL_92;
    }
    else if (*(_BYTE *)(a1 + 76))
    {
      goto LABEL_92;
    }
  }
  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_BYTE *)(a1 + 120) && v10)
    {
      v11 = *(unsigned __int8 *)(a1 + 111);
      if ((v11 & 0x80u) == 0)
        v12 = *(unsigned __int8 *)(a1 + 111);
      else
        v12 = *(_QWORD *)(a1 + 96);
      v13 = HIBYTE(v44);
      if (v44 < 0)
        v13 = *((_QWORD *)&__p + 1);
      if (v12 != v13)
        goto LABEL_92;
      v14 = (const void **)(a1 + 88);
      if (v44 >= 0)
        p_p = &__p;
      else
        p_p = (__int128 *)__p;
      if ((v11 & 0x80) != 0)
      {
        if (memcmp(*v14, p_p, *(_QWORD *)(a1 + 96)))
          goto LABEL_92;
      }
      else if (*(_BYTE *)(a1 + 111))
      {
        while (*(unsigned __int8 *)v14 == *(unsigned __int8 *)p_p)
        {
          v14 = (const void **)((char *)v14 + 1);
          p_p = (__int128 *)((char *)p_p + 1);
          if (!--v11)
            goto LABEL_50;
        }
        goto LABEL_92;
      }
LABEL_50:
      if (*(_DWORD *)(a1 + 112) != v45)
        goto LABEL_92;
    }
    else if ((*(_BYTE *)(a1 + 120) != 0) != (v10 != 0))
    {
      goto LABEL_92;
    }
  }
  if (*(_BYTE *)(a1 + 168) && !sub_20FF16D18((unsigned __int8 *)(a1 + 136), *(unsigned __int8 **)a2))
    goto LABEL_92;
  v17 = *(_QWORD *)(a2 + 24);
  v16 = *(std::__shared_weak_count **)(a2 + 32);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v17)
  {
    v21 = *(_QWORD *)(a2 + 24);
    if (!v21)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v21 = *(_QWORD *)(a2 + 24);
    }
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    if (!*(_BYTE *)(a1 + 240))
      goto LABEL_67;
  }
  else
  {
    v22 = 0;
    if (!*(_BYTE *)(a1 + 240))
      goto LABEL_67;
  }
  if ((sub_20FF16EEC(a1 + 176, *(_QWORD *)a2) & 1) == 0)
    goto LABEL_92;
LABEL_67:
  if (*(_BYTE *)(a1 + 272))
  {
    v24 = *(_QWORD *)(a2 + 24);
    v23 = *(std::__shared_weak_count **)(a2 + 32);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (!v24)
      goto LABEL_84;
    v29 = *(_QWORD *)(a1 + 256);
    v28 = *(std::__shared_weak_count **)(a1 + 264);
    if (v28)
    {
      v30 = (unint64_t *)&v28->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v29)
    {
      if ((sub_20FF1C9B4(a1 + 248, a2 + 16) & 1) == 0)
        goto LABEL_92;
    }
    else
    {
LABEL_84:
      v34 = *(_QWORD *)(a2 + 24);
      v33 = *(std::__shared_weak_count **)(a2 + 32);
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v34 || sub_20FF1721C(*(_QWORD *)(a1 + 256), *(std::__shared_weak_count **)(a1 + 264)))
        goto LABEL_92;
    }
  }
  v38 = v42;
  if (*(_BYTE *)(a1 + 328))
  {
    if (v17)
    {
      sub_20FF182FC(&__dst, (__int128 *)(v22 + 16));
    }
    else
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v56) = 0;
    }
    if ((sub_20FF188A8(a1 + 280, (uint64_t)&__dst) & 1) == 0)
    {
      v38 = 0;
      v42 = 0;
    }
    if ((_BYTE)v56 && SHIBYTE(v55) < 0)
      operator delete((void *)__dst);
    if (!v38)
      goto LABEL_93;
  }
  if (*(_BYTE *)(a1 + 432))
  {
    if (v17)
    {
      sub_20FF18384(&__dst, (__int128 *)(v22 + 112));
    }
    else
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v58) = 0;
    }
    if ((sub_20FF18B08(a1 + 336, (uint64_t)&__dst) & 1) == 0)
    {
      v38 = 0;
      v42 = 0;
    }
    if ((_BYTE)v58 && SHIBYTE(v55) < 0)
      operator delete((void *)__dst);
    if (!v38)
      goto LABEL_93;
  }
  if (*(_BYTE *)(a1 + 592))
  {
    if (v17 && (*(_BYTE *)(v22 + 40) || *(_BYTE *)(v22 + 160)))
    {
      sub_20FF1729C((uint64_t)&v47, v22);
      LOBYTE(__dst) = 0;
      LOBYTE(v56) = 0;
      if (v49)
      {
        __dst = v47;
        v55 = v48;
        v48 = 0;
        v47 = 0uLL;
        LOBYTE(v56) = 1;
      }
      LOBYTE(v57) = 0;
      v60 = 0;
      if (v53)
      {
        v57 = v50;
        v58 = v51;
        v51 = 0;
        v50 = 0uLL;
        do
          v40 = __ldaxp(&v52);
        while (__stlxp(v40, &v52));
        v59 = v40;
        v41 = 1;
        v60 = 1;
      }
      else
      {
        v41 = 1;
      }
    }
    else
    {
      v41 = 0;
      LOBYTE(__dst) = 0;
    }
    v61 = v41;
    if ((sub_20FF18E7C(a1 + 448, (uint64_t)&__dst) & 1) != 0)
    {
      sub_20FF18420((uint64_t)&__dst);
      if (!v41)
        goto LABEL_131;
    }
    else
    {
      v42 = 0;
      sub_20FF18420((uint64_t)&__dst);
      if (!v41)
      {
LABEL_131:
        v38 = v42;
        if (!v42)
          goto LABEL_93;
        goto LABEL_135;
      }
    }
    sub_20EB04E40((uint64_t)&v47);
    v38 = v42;
    if (!v42)
      goto LABEL_93;
  }
LABEL_135:
  if (*(_BYTE *)(a1 + 696))
  {
    if (v17)
    {
      sub_20FF182FC(&__dst, (__int128 *)(v22 + 48));
    }
    else
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v56) = 0;
    }
    if ((sub_20FF188A8(a1 + 648, (uint64_t)&__dst) & 1) == 0)
    {
      v38 = 0;
      v42 = 0;
    }
    if ((_BYTE)v56 && SHIBYTE(v55) < 0)
      operator delete((void *)__dst);
    if (!v38)
      goto LABEL_93;
  }
  if (*(_BYTE *)(a1 + 640))
  {
    if (v17)
    {
      sub_20EB0A0E8((uint64_t)&__dst, v22 + 176);
    }
    else
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v56) = 0;
    }
    sub_20FF18A60((uint64_t)&v42, a1 + 608, (uint64_t)&__dst);
    sub_20EB04EAC((uint64_t)&__dst);
    LOBYTE(v38) = v42;
    if (!v42)
      goto LABEL_93;
  }
  if (*(_BYTE *)(a1 + 728))
  {
    if (!v17)
    {
      if (*(_BYTE *)(a1 + 720) || *(_BYTE *)(a1 + 760) && *(_BYTE *)(a1 + 752))
        goto LABEL_92;
      goto LABEL_93;
    }
    if (*(_BYTE *)(v22 + 96) && *(_BYTE *)(a1 + 720))
    {
      if (*(_QWORD *)(a1 + 704) != *(_QWORD *)(v22 + 80)
        || *(unsigned __int8 *)(a1 + 712) != *(unsigned __int8 *)(v22 + 88))
      {
        goto LABEL_92;
      }
    }
    else if ((*(_BYTE *)(v22 + 96) != 0) != (*(_BYTE *)(a1 + 720) != 0))
    {
      goto LABEL_92;
    }
  }
  if (!*(_BYTE *)(a1 + 760))
    goto LABEL_93;
  if (!v17)
  {
    if (!*(_BYTE *)(a1 + 752))
      goto LABEL_93;
    goto LABEL_92;
  }
  if (!*(_BYTE *)(a1 + 752)
    || *(_QWORD *)(a1 + 736) != *(_QWORD *)v22
    || *(unsigned __int8 *)(a1 + 744) != *(unsigned __int8 *)(v22 + 8))
  {
LABEL_92:
    LOBYTE(v38) = 0;
  }
LABEL_93:
  if (v46 && SHIBYTE(v44) < 0)
    operator delete((void *)__p);
  return v38 & 1;
}

void sub_20FF17F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48)
{
  if (a46)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  sub_20FF1883C((uint64_t)&a29);
  sub_20FF1883C((uint64_t)&a20);
  sub_20FF17FDC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF17FDC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 72))
    return a1;
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (!*(_BYTE *)(a1 + 24) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

void sub_20FF18044(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v23[0] = v4;
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  sub_20E86A980((_QWORD *)(v4 + 16), v6, v7);
  v8 = *(_DWORD *)(v4 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v4 + 112);
    v12 = *(_QWORD *)(v4 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v4 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v4 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_20;
    }
    v13 = *(const void **)(v4 + 40);
    v9 = *(_QWORD *)(v4 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_20E860B7C();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_19;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_19:
    memmove(v10, v13, v9);
LABEL_20:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v23[0];
  if (v23[0])
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v23[0] = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)(v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    *(_QWORD *)(v16 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v16 + 16) = v19;
    if (*(char *)(v16 + 111) < 0)
      operator delete(*(void **)(v16 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v16 + 128);
    MEMORY[0x212BC6398](v16, 0x10B2C40EED050F3);
  }
  v23[0] = a1;
  v23[1] = __dst;
  v23[2] = a1;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v20 == -1)
    sub_20E877AB8();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24CA0BEC8[v20])(&v24, a1);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_20FF182A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FF182CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF182E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20FF182FC(_BYTE *__dst, __int128 *a2)
{
  __int128 v3;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v3;
    }
    __dst[24] = 1;
  }
  return __dst;
}

void sub_20FF18360(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20FF18384(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  unsigned __int128 *v5;
  unsigned __int128 v6;

  *__dst = 0;
  __dst[48] = 0;
  if (*((_BYTE *)a2 + 48))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    v5 = (unsigned __int128 *)(a2 + 2);
    do
      v6 = __ldaxp(v5);
    while (__stlxp(v6, v5));
    *((_OWORD *)__dst + 2) = v6;
    __dst[48] = 1;
  }
  return __dst;
}

void sub_20FF183FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF18420(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 96))
    return a1;
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (!*(_BYTE *)(a1 + 24) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FF18488(__int128 *a1)
{
  int v1;
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  if (*((_BYTE *)a1 + 24))
  {
    v5 = -1;
    if (*((char *)a1 + 23) < 0)
    {
      sub_20E860C04(&v3, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      v3 = *a1;
      v4 = *((_QWORD *)a1 + 2);
    }
    v1 = 1;
    v5 = 1;
  }
  else
  {
    sub_20E9737A0(&v3, "nullopt");
    v1 = v5;
    if (v5 == -1)
      sub_20E877AB8();
  }
  v7 = &v6;
  result = ((uint64_t (*)(char **, __int128 *))off_24CA0BEF8[v1])(&v7, &v3);
  if (v5 != -1)
    return ((uint64_t (*)(char **, __int128 *))off_24CA0BEE0[v5])(&v7, &v3);
  return result;
}

void sub_20FF1855C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FF18574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF18588(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  if (*(_BYTE *)(a1 + 680))
  {
    v2 = *(unsigned int *)(a1 + 672);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA0BF20[v2])(&v16, a1 + 640);
    *(_DWORD *)(a1 + 672) = -1;
  }
  if (*(_BYTE *)(a1 + 624))
  {
    if (*(_BYTE *)(a1 + 616))
    {
      v3 = *(_QWORD *)(a1 + 592);
      if (v3)
      {
        v4 = *(_QWORD *)(a1 + 600);
        v5 = *(void **)(a1 + 592);
        if (v4 == v3)
        {
LABEL_19:
          *(_QWORD *)(a1 + 600) = v3;
          operator delete(v5);
          goto LABEL_20;
        }
        while (1)
        {
          if (*(_BYTE *)(v4 - 16) && *(char *)(v4 - 41) < 0)
          {
            operator delete(*(void **)(v4 - 64));
            if (*(_BYTE *)(v4 - 72))
            {
LABEL_14:
              if (*(char *)(v4 - 73) < 0)
                operator delete(*(void **)(v4 - 96));
            }
          }
          else if (*(_BYTE *)(v4 - 72))
          {
            goto LABEL_14;
          }
          v4 -= 96;
          if (v4 == v3)
          {
            v5 = *(void **)(a1 + 592);
            goto LABEL_19;
          }
        }
      }
    }
  }
LABEL_20:
  if (*(_BYTE *)(a1 + 576))
  {
    v6 = *(unsigned int *)(a1 + 560);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t))off_24CA0BF10[v6])(&v17, a1 + 448);
    *(_DWORD *)(a1 + 560) = -1;
  }
  if (*(_BYTE *)(a1 + 416))
  {
    v7 = *(unsigned int *)(a1 + 400);
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, uint64_t))off_24CA0BF30[v7])(&v18, a1 + 336);
    *(_DWORD *)(a1 + 400) = -1;
  }
  if (*(_BYTE *)(a1 + 312))
  {
    v8 = *(unsigned int *)(a1 + 304);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, uint64_t))off_24CA0BF20[v8])(&v19, a1 + 272);
    *(_DWORD *)(a1 + 304) = -1;
  }
  if (!*(_BYTE *)(a1 + 256))
    goto LABEL_37;
  v9 = *(std::__shared_weak_count **)(a1 + 248);
  if (!v9)
    goto LABEL_37;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!*(_BYTE *)(a1 + 224))
      goto LABEL_41;
  }
  else
  {
LABEL_37:
    if (!*(_BYTE *)(a1 + 224))
      goto LABEL_41;
  }
  v12 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v12 != -1)
    ((void (*)(char *, uint64_t))off_24CA0BF40[v12])(&v20, a1 + 160);
  *(_DWORD *)(a1 + 216) = -1;
LABEL_41:
  if (*(_BYTE *)(a1 + 152))
  {
    v13 = *(unsigned int *)(a1 + 144);
    if ((_DWORD)v13 != -1)
      ((void (*)(char *, uint64_t))off_24CA0BF50[v13])(&v21, a1 + 120);
    *(_DWORD *)(a1 + 144) = -1;
  }
  if (*(_BYTE *)(a1 + 112) && *(_BYTE *)(a1 + 104) && *(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if (!*(_BYTE *)(a1 + 48))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 48))
  {
    return a1;
  }
  v14 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, uint64_t))off_24CA0BF20[v14])(&v22, a1 + 8);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20FF1883C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if (!*(_BYTE *)(a1 + 24))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 24))
  {
    return a1;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FF188A8(uint64_t a1, uint64_t a2)
{
  int v4;
  void *p_s1;
  size_t v6;
  char *v7;
  std::string::size_type v8;
  unsigned __int8 v9;
  size_t v10;
  unint64_t v11;
  int v12;
  void **v13;
  uint64_t v14;
  void **v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  uint64_t v22;
  void *__p[2];
  unsigned __int8 v25;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;

  v4 = *(_DWORD *)(a1 + 40);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
    if (v4 != 1)
      sub_20E877AB8();
    sub_20FF18488((__int128 *)a2);
    if ((v28 & 0x80u) == 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if ((v28 & 0x80u) == 0)
      v6 = v28;
    else
      v6 = __n;
    if (*(char *)(a1 + 31) < 0)
    {
      v7 = *(char **)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v7 = (char *)(a1 + 8);
      v8 = *(unsigned __int8 *)(a1 + 31);
    }
    v22 = sub_21023721C((uint64_t)p_s1, v6, v7, v8, 0);
    if ((char)v28 < 0)
      goto LABEL_43;
    return v22;
  }
  sub_20FF18488((__int128 *)(a1 + 8));
  sub_20FF18488((__int128 *)a2);
  v9 = v28;
  if ((v28 & 0x80u) == 0)
    v10 = v28;
  else
    v10 = __n;
  v11 = v25;
  v12 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v11 = (unint64_t)__p[1];
  if (v10 != v11)
  {
    v22 = 0;
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_42;
  }
  if ((v25 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((char)v28 < 0)
  {
    v22 = memcmp(__s1, v13, __n) == 0;
    goto LABEL_38;
  }
  if (v28)
  {
    v14 = v28 - 1;
    v15 = &__s1;
    do
    {
      v17 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v16 = v17;
      v19 = *(unsigned __int8 *)v13;
      v13 = (void **)((char *)v13 + 1);
      v18 = v19;
      v21 = v14-- != 0;
      v22 = v16 == v18;
    }
    while (v16 == v18 && v21);
LABEL_38:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_42:
    operator delete(__p[0]);
    if ((v28 & 0x80) == 0)
      return v22;
    goto LABEL_43;
  }
  v22 = 1;
  if ((char)v25 < 0)
    goto LABEL_42;
LABEL_39:
  if ((v9 & 0x80) == 0)
    return v22;
LABEL_43:
  operator delete(__s1);
  return v22;
}

void sub_20FF18A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF18A60(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  v3 = (_BYTE *)result;
  v4 = *(unsigned __int8 *)(a3 + 24);
  if (*(_BYTE *)(a2 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(a2 + 24) != 0) == (v4 != 0))
      return result;
LABEL_13:
    *v3 = 0;
    return result;
  }
  v6 = *(unsigned __int8 **)a2;
  v7 = *(unsigned __int8 **)(a2 + 8);
  v8 = *(unsigned __int8 **)a3;
  if (&v7[-*(_QWORD *)a2] != (unsigned __int8 *)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3))
    goto LABEL_13;
  if (v6 != v7)
  {
    while (1)
    {
      result = sub_20FF1C59C(v6, v8);
      if (!(_DWORD)result)
        break;
      v6 += 96;
      v8 += 96;
      if (v6 == v7)
        return result;
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_20FF18B08(uint64_t a1, uint64_t a2)
{
  int v4;
  void *p_s1;
  size_t v6;
  char *v7;
  std::string::size_type v8;
  uint64_t v9;
  unsigned __int8 v11;
  size_t v12;
  unint64_t v13;
  int v14;
  void **v15;
  uint64_t v16;
  void **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  void *__p[2];
  unsigned __int8 v25;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;
  char v29;
  char *v30;
  _DWORD v31[6];
  int v32;

  v4 = *(_DWORD *)(a1 + 80);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 48))
      return 0;
    if (v4 != 1)
      sub_20E877AB8();
    v32 = 0;
    sub_20FF18044((uint64_t)v31, a2);
    if (v32 == -1)
      sub_20E877AB8();
    __p[0] = &v30;
    ((void (*)(void **__return_ptr, void **, _DWORD *))off_24CA0BEF8[v32])(&__s1, __p, v31);
    if (v32 != -1)
      ((void (*)(void **, _DWORD *))off_24CA0BEE0[v32])(__p, v31);
    if ((v28 & 0x80u) == 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if ((v28 & 0x80u) == 0)
      v6 = v28;
    else
      v6 = __n;
    if (*(char *)(a1 + 39) < 0)
    {
      v7 = *(char **)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v7 = (char *)(a1 + 16);
      v8 = *(unsigned __int8 *)(a1 + 39);
    }
    v9 = sub_21023721C((uint64_t)p_s1, v6, v7, v8, 0);
    if ((char)v28 < 0)
      goto LABEL_58;
    return v9;
  }
  v32 = 0;
  if (*(_BYTE *)(a1 + 64))
    sub_20FF18044((uint64_t)v31, a1 + 16);
  else
    sub_20E9737A0(v31, "nullopt");
  if (v32 == -1)
    sub_20E877AB8();
  __p[0] = &v30;
  ((void (*)(void **__return_ptr, void **, _DWORD *))off_24CA0BEF8[v32])(&__s1, __p, v31);
  if (v32 != -1)
    ((void (*)(void **, _DWORD *))off_24CA0BEE0[v32])(__p, v31);
  v32 = 0;
  if (*(_BYTE *)(a2 + 48))
    sub_20FF18044((uint64_t)v31, a2);
  else
    sub_20E9737A0(v31, "nullopt");
  if (v32 == -1)
    sub_20E877AB8();
  v30 = &v29;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24CA0BEF8[v32])(__p, &v30, v31);
  if (v32 != -1)
    ((void (*)(char **, _DWORD *))off_24CA0BEE0[v32])(&v30, v31);
  v11 = v28;
  if ((v28 & 0x80u) == 0)
    v12 = v28;
  else
    v12 = __n;
  v13 = v25;
  v14 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v12 != v13)
  {
    v9 = 0;
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_57;
  }
  if ((v25 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((char)v28 < 0)
  {
    v9 = memcmp(__s1, v15, __n) == 0;
    goto LABEL_53;
  }
  if (v28)
  {
    v16 = v28 - 1;
    v17 = &__s1;
    do
    {
      v19 = *(unsigned __int8 *)v17;
      v17 = (void **)((char *)v17 + 1);
      v18 = v19;
      v21 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v20 = v21;
      v23 = v16-- != 0;
      v9 = v18 == v20;
    }
    while (v18 == v20 && v23);
LABEL_53:
    if ((v14 & 0x80000000) == 0)
      goto LABEL_54;
LABEL_57:
    operator delete(__p[0]);
    if ((v28 & 0x80) == 0)
      return v9;
    goto LABEL_58;
  }
  v9 = 1;
  if ((char)v25 < 0)
    goto LABEL_57;
LABEL_54:
  if ((v11 & 0x80) == 0)
    return v9;
LABEL_58:
  operator delete(__s1);
  return v9;
}

void sub_20FF18DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_20E877A60((uint64_t)&a20);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FF18E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF18E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF18E7C(uint64_t a1, uint64_t a2)
{
  int v4;
  void *p_s1;
  size_t v6;
  char *v7;
  std::string::size_type v8;
  uint64_t v9;
  unsigned __int8 v11;
  size_t v12;
  unint64_t v13;
  int v14;
  void **v15;
  uint64_t v16;
  void **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  void *__p[2];
  unsigned __int8 v25;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;
  char v29;
  char *v30;
  _DWORD v31[6];
  int v32;

  v4 = *(_DWORD *)(a1 + 128);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 96))
      return 0;
    if (v4 != 1)
      sub_20E877AB8();
    v32 = 0;
    sub_20FDD7E30((uint64_t)__p, (uint64_t)v31, a2);
    if (v32 == -1)
      sub_20E877AB8();
    __p[0] = &v30;
    ((void (*)(void **__return_ptr, void **, _DWORD *))off_24CA0BEF8[v32])(&__s1, __p, v31);
    if (v32 != -1)
      ((void (*)(void **, _DWORD *))off_24CA0BEE0[v32])(__p, v31);
    if ((v28 & 0x80u) == 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if ((v28 & 0x80u) == 0)
      v6 = v28;
    else
      v6 = __n;
    if (*(char *)(a1 + 39) < 0)
    {
      v7 = *(char **)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v7 = (char *)(a1 + 16);
      v8 = *(unsigned __int8 *)(a1 + 39);
    }
    v9 = sub_21023721C((uint64_t)p_s1, v6, v7, v8, 0);
    if ((char)v28 < 0)
      goto LABEL_58;
    return v9;
  }
  v32 = 0;
  if (*(_BYTE *)(a1 + 112))
    sub_20FDD7E30((uint64_t)__p, (uint64_t)v31, a1 + 16);
  else
    sub_20E9737A0(v31, "nullopt");
  if (v32 == -1)
    sub_20E877AB8();
  __p[0] = &v30;
  ((void (*)(void **__return_ptr, void **, _DWORD *))off_24CA0BEF8[v32])(&__s1, __p, v31);
  if (v32 != -1)
    ((void (*)(void **, _DWORD *))off_24CA0BEE0[v32])(__p, v31);
  v32 = 0;
  if (*(_BYTE *)(a2 + 96))
    sub_20FDD7E30((uint64_t)&v30, (uint64_t)v31, a2);
  else
    sub_20E9737A0(v31, "nullopt");
  if (v32 == -1)
    sub_20E877AB8();
  v30 = &v29;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24CA0BEF8[v32])(__p, &v30, v31);
  if (v32 != -1)
    ((void (*)(char **, _DWORD *))off_24CA0BEE0[v32])(&v30, v31);
  v11 = v28;
  if ((v28 & 0x80u) == 0)
    v12 = v28;
  else
    v12 = __n;
  v13 = v25;
  v14 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v12 != v13)
  {
    v9 = 0;
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_57;
  }
  if ((v25 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((char)v28 < 0)
  {
    v9 = memcmp(__s1, v15, __n) == 0;
    goto LABEL_53;
  }
  if (v28)
  {
    v16 = v28 - 1;
    v17 = &__s1;
    do
    {
      v19 = *(unsigned __int8 *)v17;
      v17 = (void **)((char *)v17 + 1);
      v18 = v19;
      v21 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v20 = v21;
      v23 = v16-- != 0;
      v9 = v18 == v20;
    }
    while (v18 == v20 && v23);
LABEL_53:
    if ((v14 & 0x80000000) == 0)
      goto LABEL_54;
LABEL_57:
    operator delete(__p[0]);
    if ((v28 & 0x80) == 0)
      return v9;
    goto LABEL_58;
  }
  v9 = 1;
  if ((char)v25 < 0)
    goto LABEL_57;
LABEL_54:
  if ((v11 & 0x80) == 0)
    return v9;
LABEL_58:
  operator delete(__s1);
  return v9;
}

void sub_20FF1917C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_20E877A60((uint64_t)&a20);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FF191D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF191E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FF191FC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  const char *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  void **v47;
  uint64_t v48;
  _QWORD *v49;
  void *__p[2];
  unsigned __int8 v52;
  char v53;
  char *v54;
  _BYTE v55[24];
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20E86A980(a1, (uint64_t)"{", 1);
  sub_20E86A980(v4, (uint64_t)"Device: ", 8);
  if (*(_BYTE *)(a2 + 200))
  {
    v5 = sub_20E86A980(a1, (uint64_t)"{", 1);
    v6 = sub_20E86A980(v5, (uint64_t)"Name: ", 6);
    v7 = *(char *)(a2 + 79);
    if (v7 >= 0)
      v8 = a2 + 56;
    else
      v8 = *(_QWORD *)(a2 + 56);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 79);
    else
      v9 = *(_QWORD *)(a2 + 64);
    v10 = sub_20E86A980(v6, v8, v9);
    v11 = sub_20E86A980(v10, (uint64_t)", ", 2);
    v12 = sub_20E86A980(v11, (uint64_t)"Product: ", 9);
    v13 = *(char *)(a2 + 103);
    if (v13 >= 0)
      v14 = a2 + 80;
    else
      v14 = *(_QWORD *)(a2 + 80);
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 103);
    else
      v15 = *(_QWORD *)(a2 + 88);
    v16 = sub_20E86A980(v12, v14, v15);
    v17 = sub_20E86A980(v16, (uint64_t)", ", 2);
    v18 = sub_20E86A980(v17, (uint64_t)"SN: ", 4);
    v19 = *(char *)(a2 + 151);
    if (v19 >= 0)
      v20 = a2 + 128;
    else
      v20 = *(_QWORD *)(a2 + 128);
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a2 + 151);
    else
      v21 = *(_QWORD *)(a2 + 136);
    v22 = sub_20E86A980(v18, v20, v21);
    v23 = sub_20E86A980(v22, (uint64_t)", ", 2);
    v24 = sub_20E86A980(v23, (uint64_t)"OS: ", 4);
    v25 = *(char *)(a2 + 199);
    if (v25 >= 0)
      v26 = a2 + 176;
    else
      v26 = *(_QWORD *)(a2 + 176);
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(a2 + 199);
    else
      v27 = *(_QWORD *)(a2 + 184);
    v28 = sub_20E86A980(v24, v26, v27);
    v29 = sub_20E86A980(v28, (uint64_t)" (", 2);
    v30 = *(char *)(a2 + 175);
    if (v30 >= 0)
      v31 = a2 + 152;
    else
      v31 = *(_QWORD *)(a2 + 152);
    if (v30 >= 0)
      v32 = *(unsigned __int8 *)(a2 + 175);
    else
      v32 = *(_QWORD *)(a2 + 160);
    v33 = sub_20E86A980(v29, v31, v32);
    v34 = ")}";
    v35 = 2;
  }
  else
  {
    v34 = "not available";
    v33 = a1;
    v35 = 13;
  }
  sub_20E86A980(v33, (uint64_t)v34, v35);
  v36 = sub_20E86A980(a1, (uint64_t)", ", 2);
  sub_20E86A980(v36, (uint64_t)"Process: ", 9);
  if (*(_BYTE *)(a2 + 48))
  {
    v37 = *(char *)(a2 + 47);
    if (v37 >= 0)
      v38 = a2 + 24;
    else
      v38 = *(_QWORD *)(a2 + 24);
    if (v37 >= 0)
      v39 = *(unsigned __int8 *)(a2 + 47);
    else
      v39 = *(_QWORD *)(a2 + 32);
    v40 = sub_20E86A980(a1, v38, v39);
    sub_20E86A980(v40, (uint64_t)" ", 1);
  }
  sub_20E86A980(a1, (uint64_t)"(", 1);
  v41 = (_QWORD *)std::ostream::operator<<();
  v42 = sub_20E86A980(v41, (uint64_t)"), ", 3);
  v43 = sub_20E86A980(v42, (uint64_t)"UUID: ", 6);
  sub_2102323F4((unsigned __int8 *)a2, v55);
  v44 = sub_20E86A980(v43, (uint64_t)v55, 36);
  v45 = sub_20E86A980(v44, (uint64_t)", ", 2);
  v46 = sub_20E86A980(v45, (uint64_t)"Protocol: ", 10);
  v56 = 0;
  sub_20FD20788((uint64_t)&v54, (uint64_t)v55, (uint64_t *)(a2 + 208));
  if (v56 == -1)
    sub_20E877AB8();
  v54 = &v53;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA0BFA0[v56])(__p, &v54, v55);
  if (v56 != -1)
    ((void (*)(char **, _BYTE *))off_24CA0BF88[v56])(&v54, v55);
  if ((v52 & 0x80u) == 0)
    v47 = __p;
  else
    v47 = (void **)__p[0];
  if ((v52 & 0x80u) == 0)
    v48 = v52;
  else
    v48 = (uint64_t)__p[1];
  v49 = sub_20E86A980(v46, (uint64_t)v47, v48);
  sub_20E86A980(v49, (uint64_t)"}", 1);
  if ((char)v52 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20FF19584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 sub_20FF195E4@<Q0>(uint64_t a1@<X0>, char a2@<W1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v7;
  int *v8;
  int v9;
  __int128 v10;
  __n128 result;
  int v12;
  char v13;
  uint64_t (**v14)();

  v7 = atomic_load((unsigned __int8 *)&qword_254A6D860);
  if ((v7 & 1) == 0)
  {
    v13 = a2;
    v12 = __cxa_guard_acquire(&qword_254A6D860);
    a2 = v13;
    if (v12)
    {
      v14 = &off_24C9B6C08;
      sub_20E9E5AC0((char *)xmmword_254A6D7D0, (uint64_t)&v14);
      __cxa_atexit((void (*)(void *))sub_20E9E5F54, xmmword_254A6D7D0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6D860);
      a2 = v13;
    }
  }
  if (a2)
  {
    *(_OWORD *)a4 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  v8 = sub_20E87C634();
  v9 = *v8;
  *(_BYTE *)(a4 + 24) = 0;
  *(_DWORD *)(a4 + 16) = v9;
  *(_BYTE *)(a4 + 48) = 0;
  if (*((_BYTE *)v8 + 32))
  {
    if (*((char *)v8 + 31) < 0)
    {
      sub_20E860C04((_BYTE *)(a4 + 24), *((void **)v8 + 1), *((_QWORD *)v8 + 2));
    }
    else
    {
      v10 = *(_OWORD *)(v8 + 2);
      *(_QWORD *)(a4 + 40) = *((_QWORD *)v8 + 3);
      *(_OWORD *)(a4 + 24) = v10;
    }
    *(_BYTE *)(a4 + 48) = 1;
  }
  sub_20FCF4B4C((char *)(a4 + 56), xmmword_254A6D7D0);
  *(_BYTE *)(a4 + 200) = 1;
  result = *a3;
  *(__n128 *)(a4 + 208) = *a3;
  *(_QWORD *)(a4 + 224) = a3[1].n128_u64[0];
  return result;
}

void sub_20FF19730(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D860);
  _Unwind_Resume(a1);
}

void sub_20FF19748(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FF19770(_QWORD *a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  int v20;
  char v21;
  char v22;
  std::string *p_dst;
  std::string::size_type size;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  uint64_t v32;
  uint64_t v33;
  std::string::size_type v34;
  void *p_p;
  uint64_t v36;
  _QWORD *v37;
  void *__p;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD v44[2];
  unsigned __int8 v45;
  int v46;
  std::string __dst;
  std::string *v48;
  std::string *v49;
  char *v50;
  std::string *v51;
  std::string *v52;
  std::string **v53;

  if (!*(_BYTE *)(a2 + 48))
  {
    v12 = sub_20E86A980(a1, (uint64_t)"Sync{", 5);
    if (*(_DWORD *)(a2 + 40))
      v13 = 2;
    else
      v13 = 1;
    if (*(_BYTE *)(a2 + 48))
      v14 = v13;
    else
      v14 = 0;
    LOBYTE(v53) = v14;
    LODWORD(v51) = 0;
    sub_20FF1A724((uint64_t)&v48, (char *)&v53);
    if ((_DWORD)v51 == -1)
      sub_20E877AB8();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    ((void (*)(_QWORD *__return_ptr, std::string *, std::string **))off_24CA0BFA0[v51])(v44, &__dst, &v48);
    if ((_DWORD)v51 != -1)
      ((void (*)(std::string *, std::string **))off_24CA0BF88[v51])(&__dst, &v48);
    if ((v45 & 0x80u) == 0)
      v15 = v44;
    else
      v15 = (_QWORD *)v44[0];
    if ((v45 & 0x80u) == 0)
      v16 = v45;
    else
      v16 = v44[1];
    v17 = sub_20E86A980(v12, (uint64_t)v15, v16);
    v18 = sub_20E86A980(v17, (uint64_t)"}", 1);
    if (((char)v45 & 0x80000000) == 0)
      return v18;
    v19 = (void *)v44[0];
    goto LABEL_87;
  }
  v3 = *(_DWORD *)(a2 + 40);
  v4 = sub_20E86A980(a1, (uint64_t)"Sync{", 5);
  if (!v3)
  {
    v20 = *(_DWORD *)(a2 + 40);
    if (v20)
      v21 = 2;
    else
      v21 = 1;
    if (*(_BYTE *)(a2 + 48))
      v22 = v21;
    else
      v22 = 0;
    v42 = v22;
    if (v20)
LABEL_92:
      sub_20E877AB8();
    __p = (void *)a2;
    v40 = a2 + 8;
    v41 = a2 + 24;
    v46 = 0;
    sub_20FF1A724((uint64_t)v44, &v42);
    v48 = (std::string *)v44;
    v49 = (std::string *)", ";
    v50 = (char *)v44;
    v51 = (std::string *)", ";
    v52 = (std::string *)", ";
    if (v46 == -1)
      sub_20E877AB8();
    v53 = &v48;
    ((void (*)(std::string ***, _QWORD *))off_24CA0BFB8[v46])(&v53, v44);
    v48 = (std::string *)v44;
    v49 = (std::string *)"{";
    v50 = (char *)v44;
    v51 = (std::string *)"{";
    v52 = (std::string *)"{";
    if (v46 == -1)
      goto LABEL_93;
    v53 = &v48;
    ((void (*)(std::string ***, _QWORD *))off_24CA0BFD0[v46])(&v53, v44);
    LOBYTE(v48) = 1;
    v49 = (std::string *)v44;
    v50 = &v43;
    sub_20FF1A9FC((uint64_t)&__p, (uint64_t)&v48);
    v48 = (std::string *)v44;
    v49 = (std::string *)"}";
    v50 = (char *)v44;
    v51 = (std::string *)"}";
    v52 = (std::string *)"}";
    if (v46 == -1)
LABEL_93:
      sub_20E877AB8();
    v53 = &v48;
    ((void (*)(std::string ***, _QWORD *))off_24CA0BFD0[v46])(&v53, v44);
    if (v46 == -1)
      sub_20E877AB8();
    v48 = (std::string *)&v53;
    ((void (*)(std::string *__return_ptr, std::string **, _QWORD *))off_24CA0BFA0[v46])(&__dst, &v48, v44);
    if (v46 != -1)
      ((void (*)(std::string **, _QWORD *))off_24CA0BF88[v46])(&v48, v44);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v25 = sub_20E86A980(v4, (uint64_t)p_dst, size);
    v18 = sub_20E86A980(v25, (uint64_t)"}", 1);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v18;
    v19 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_87:
    operator delete(v19);
    return v18;
  }
  v5 = *(_DWORD *)(a2 + 40);
  if (v5)
    v6 = 2;
  else
    v6 = 1;
  if (*(_BYTE *)(a2 + 48))
    v7 = v6;
  else
    v7 = 0;
  v43 = v7;
  if (v5 != 1)
    goto LABEL_92;
  v46 = 0;
  sub_20FF1A724((uint64_t)v44, &v43);
  v48 = (std::string *)v44;
  v49 = (std::string *)", ";
  v50 = (char *)v44;
  v51 = (std::string *)", ";
  v52 = (std::string *)", ";
  if (v46 == -1)
    sub_20E877AB8();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24CA0BFB8[v46])(&__dst, v44);
  v48 = (std::string *)v44;
  v49 = (std::string *)"{";
  v50 = (char *)v44;
  v51 = (std::string *)"{";
  v52 = (std::string *)"{";
  if (v46 == -1)
LABEL_91:
    sub_20E877AB8();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24CA0BFD0[v46])(&__dst, v44);
  v8 = operator new();
  *(_QWORD *)(v8 + 272) = 0;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  sub_20E863438(v8);
  v48 = (std::string *)v8;
  sub_20FDD5074((_QWORD *)(v8 + 16), (_BYTE *)a2);
  v9 = *(_DWORD *)(v8 + 120);
  if ((v9 & 0x10) != 0)
  {
    v26 = *(_QWORD *)(v8 + 112);
    v27 = *(_QWORD *)(v8 + 72);
    if (v26 < v27)
    {
      *(_QWORD *)(v8 + 112) = v27;
      v26 = v27;
    }
    v28 = *(const void **)(v8 + 64);
    v10 = v26 - (_QWORD)v28;
    if (v26 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_90;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      v11 = &__dst;
      goto LABEL_63;
    }
    v28 = *(const void **)(v8 + 40);
    v10 = *(_QWORD *)(v8 + 56) - (_QWORD)v28;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_90:
      sub_20E860B7C();
  }
  if (v10 >= 0x17)
  {
    v29 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v29 = v10 | 7;
    v30 = v29 + 1;
    v11 = (std::string *)operator new(v29 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    goto LABEL_62;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
  v11 = &__dst;
  if (v10)
LABEL_62:
    memmove(v11, v28, v10);
LABEL_63:
  v11->__r_.__value_.__s.__data_[v10] = 0;
  v31 = v48;
  if (v48)
  {
    v32 = MEMORY[0x24BEDB7F0];
    v33 = *MEMORY[0x24BEDB7F0];
    v48->__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v34 = *(_QWORD *)(v32 + 72);
    *(std::string::size_type *)((char *)v31->__r_.__value_.__r.__words + *(_QWORD *)(v33 - 24)) = *(_QWORD *)(v32 + 64);
    v31[1].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    v31->__r_.__value_.__r.__words[2] = v34;
    if (v31[4].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v31[3].__r_.__value_.__r.__words[2]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v31[5].__r_.__value_.__r.__words[1]);
    MEMORY[0x212BC6398](v31, 0x10B2C40EED050F3);
  }
  v48 = (std::string *)v44;
  v49 = &__dst;
  v50 = (char *)v44;
  v51 = &__dst;
  v52 = &__dst;
  if (v46 == -1)
    sub_20E877AB8();
  v53 = &v48;
  ((void (*)(std::string ***, _QWORD *))off_24CA0BF70[v46])(&v53, v44);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v48 = (std::string *)v44;
  v49 = (std::string *)",";
  v50 = (char *)v44;
  v51 = (std::string *)",";
  v52 = (std::string *)",";
  if (v46 == -1)
    goto LABEL_91;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24CA0BFD0[v46])(&__dst, v44);
  std::to_string(&__dst, *(_QWORD *)(a2 + 8));
  v48 = (std::string *)v44;
  v49 = &__dst;
  v50 = (char *)v44;
  v51 = &__dst;
  v52 = &__dst;
  if (v46 == -1)
    sub_20E877AB8();
  v53 = &v48;
  ((void (*)(std::string ***, _QWORD *))off_24CA0BF70[v46])(&v53, v44);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v48 = (std::string *)v44;
  v49 = (std::string *)",";
  v50 = (char *)v44;
  v51 = (std::string *)",";
  v52 = (std::string *)",";
  if (v46 == -1)
    goto LABEL_91;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24CA0BFD0[v46])(&__dst, v44);
  sub_20EF8D310((uint64_t)&v48, (uint64_t)v44, a2 + 16);
  v48 = (std::string *)v44;
  v49 = (std::string *)"}";
  v50 = (char *)v44;
  v51 = (std::string *)"}";
  v52 = (std::string *)"}";
  if (v46 == -1)
    goto LABEL_91;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24CA0BFD0[v46])(&__dst, v44);
  if (v46 == -1)
    sub_20E877AB8();
  v48 = &__dst;
  ((void (*)(void **__return_ptr, std::string **, _QWORD *))off_24CA0BFA0[v46])(&__p, &v48, v44);
  if (v46 != -1)
    ((void (*)(std::string **, _QWORD *))off_24CA0BF88[v46])(&v48, v44);
  if (v41 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v41 >= 0)
    v36 = HIBYTE(v41);
  else
    v36 = v40;
  v37 = sub_20E86A980(v4, (uint64_t)p_p, v36);
  v18 = sub_20E86A980(v37, (uint64_t)"}", 1);
  if (SHIBYTE(v41) < 0)
  {
    v19 = __p;
    goto LABEL_87;
  }
  return v18;
}

void sub_20FF19F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  sub_20E877A60((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF1A044(uint64_t a1)
{
  uint64_t result;
  char v3;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  char *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20E89FDB0(v4, "{");
  LOBYTE(v6) = 1;
  v7 = (const char *)v4;
  v8 = &v3;
  sub_20FF1A9FC(a1, (uint64_t)&v6);
  v6 = (_QWORD **)v4;
  v7 = "}";
  v8 = (char *)v4;
  v9 = "}";
  v10 = "}";
  if (v5 == -1)
    sub_20E877AB8();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24CA0BFD0[v5])(&v11, v4);
  if (v5 == -1)
    sub_20E877AB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA0BFA0[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA0BF88[v5])(&v6, v4);
  return result;
}

void sub_20FF1A154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF1A168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF1A17C(std::mutex *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  std::mutex *v5;
  uint64_t sig;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int sig_low;

  v5 = a1 + 1;
  std::mutex::lock(a1 + 1);
  sig = a1[2].__m_.__sig;
  v7 = *(_QWORD *)a1[2].__m_.__opaque;
  if (sig == v7)
  {
    v11 = 0;
    LOBYTE(v8) = 0;
    std::mutex::unlock(v5);
    if (!a1->__m_.__opaque[8])
      goto LABEL_16;
  }
  else
  {
    v8 = *(_QWORD *)(v7 - 40);
    if (*(_BYTE *)(v7 - 24))
    {
      v9 = *(_QWORD *)(v7 - 32);
      a1->__m_.__opaque[8] = *(_BYTE *)(v7 - 24);
      *(_QWORD *)a1->__m_.__opaque = v9;
    }
    if (*(_BYTE *)(v7 - 8))
    {
      v10 = *(_QWORD *)(v7 - 16);
      a1->__m_.__opaque[24] = *(_BYTE *)(v7 - 8);
      *(_QWORD *)&a1->__m_.__opaque[16] = v10;
    }
    if (a1->__m_.__opaque[8] || a1->__m_.__opaque[24])
    {
      *(_QWORD *)&a1->__m_.__opaque[32] = *(_QWORD *)(v7 - 40);
      a1->__m_.__opaque[40] = 1;
    }
    else
    {
      LOBYTE(a1->__m_.__sig) = 2;
    }
    v2 = v8 >> 8;
    *(_QWORD *)a1[2].__m_.__opaque = sig;
    v11 = 1;
    std::mutex::unlock(v5);
    if (!a1->__m_.__opaque[8])
      goto LABEL_16;
  }
  v12 = *(_QWORD *)a1->__m_.__opaque;
  if (!v12)
  {
    v11 = 1;
    LOBYTE(a1->__m_.__sig) = 1;
    a1->__m_.__opaque[0] = 0;
    a1->__m_.__opaque[8] = 0;
    if (sig == v7)
    {
      v8 = *(_QWORD *)&a1->__m_.__opaque[32];
      v2 = v8 >> 8;
      v11 = a1->__m_.__opaque[40];
      if (a1->__m_.__opaque[24])
        goto LABEL_17;
      goto LABEL_23;
    }
LABEL_16:
    if (a1->__m_.__opaque[24])
      goto LABEL_17;
LABEL_23:
    sig_low = LOBYTE(a1->__m_.__sig);
    v13 = *(_QWORD *)&a1->__m_.__opaque[48];
    if (sig_low != 1)
      goto LABEL_25;
    goto LABEL_24;
  }
  *(_QWORD *)a1->__m_.__opaque = v12 - 1;
  LOBYTE(a1->__m_.__sig) = 3;
  if (!a1->__m_.__opaque[24])
    goto LABEL_23;
LABEL_17:
  v13 = *(_QWORD *)&a1->__m_.__opaque[48];
  if (*(_QWORD *)&a1->__m_.__opaque[16] > v13)
  {
    LOBYTE(sig_low) = 3;
    LOBYTE(a1->__m_.__sig) = 3;
LABEL_25:
    *(_BYTE *)a2 = sig_low;
    *(_QWORD *)&a1->__m_.__opaque[48] = v13 + 1;
    goto LABEL_26;
  }
  LOBYTE(a1->__m_.__sig) = 1;
  a1->__m_.__opaque[16] = 0;
  a1->__m_.__opaque[24] = 0;
  if (!v11)
  {
    v8 = *(_QWORD *)&a1->__m_.__opaque[32];
    v2 = v8 >> 8;
    v11 = a1->__m_.__opaque[40];
  }
LABEL_24:
  a1->__m_.__opaque[32] = 0;
  a1->__m_.__opaque[40] = 0;
  *(_BYTE *)a2 = 1;
LABEL_26:
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v8 | (v2 << 8);
  *(_BYTE *)(a2 + 24) = v11;
}

uint64_t sub_20FF1A338(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  std::chrono::steady_clock::time_point v8;
  uint64_t v9;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v10;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  std::chrono::steady_clock::time_point v16;
  std::chrono::system_clock::time_point v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  std::unique_lock<std::mutex> v22;

  v22.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 64);
  v22.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (!a4)
  {
    if (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 136))
    {
      do
      {
        v19 = *(_QWORD *)(a2 + 24);
        if (!v19)
          sub_20E86D37C();
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19);
        if ((v20 & 1) != 0)
          break;
        std::condition_variable::wait((std::condition_variable *)(a1 + 152), &v22);
      }
      while (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 136));
      v9 = v20 ^ 1u;
      if (!v22.__owns_)
        return v9;
    }
    else
    {
      v9 = 1;
    }
LABEL_27:
    std::mutex::unlock(v22.__m_);
    return v9;
  }
  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + a3;
  do
  {
    v12 = *(_QWORD *)(a1 + 128);
    v13 = *(_QWORD *)(a1 + 136);
    v14 = v12 != v13;
    if (v12 != v13)
      goto LABEL_26;
    v15 = *(_QWORD *)(a2 + 24);
    if (!v15)
      goto LABEL_37;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15) & 1) != 0)
      goto LABEL_26;
    if (v8.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_)
      break;
    v16.__d_.__rep_ = v8.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v16.__d_.__rep_ < 1)
      continue;
    std::chrono::steady_clock::now();
    v17.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v17.__d_.__rep_)
    {
      if (v17.__d_.__rep_ < 1)
      {
        if ((unint64_t)v17.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v10 = 0x8000000000000000;
          goto LABEL_6;
        }
      }
      else if ((unint64_t)v17.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v10 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v16.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL) != 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_23;
        goto LABEL_6;
      }
      v10 = 1000 * v17.__d_.__rep_;
      if (1000 * v17.__d_.__rep_ > (v16.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
LABEL_23:
        v11.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_7;
      }
    }
    else
    {
      v10 = 0;
      if (v16.__d_.__rep_ < 0)
        goto LABEL_23;
    }
LABEL_6:
    v11.__d_.__rep_ = v10 + v16.__d_.__rep_;
LABEL_7:
    std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 152), &v22, v11);
    std::chrono::steady_clock::now();
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v8.__d_.__rep_);
  if (*(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 136))
  {
    v14 = 1;
LABEL_26:
    v9 = v14;
    if (!v22.__owns_)
      return v9;
    goto LABEL_27;
  }
  v21 = *(_QWORD *)(a2 + 24);
  if (!v21)
LABEL_37:
    sub_20E86D37C();
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21);
  v9 = 0;
  if (v22.__owns_)
    goto LABEL_27;
  return v9;
}

void sub_20FF1A564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_20FF1A58C(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v6 = *(char **)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  if ((unint64_t)v6 >= v5)
  {
    v10 = *(char **)(a1 + 128);
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v10) >> 3) + 1;
    if (v11 > 0x666666666666666)
      sub_20FF1A710();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v10) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0x666666666666666)
        sub_20E877A38();
      v14 = (char *)operator new(40 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * ((v6 - v10) >> 3)];
    v16 = a2[1];
    *(_OWORD *)v15 = *a2;
    *((_OWORD *)v15 + 1) = v16;
    *((_QWORD *)v15 + 4) = *((_QWORD *)a2 + 4);
    v9 = v15 + 40;
    if (v6 != v10)
    {
      do
      {
        v17 = *(_OWORD *)(v6 - 40);
        v18 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v15 - 24) = v18;
        *(_OWORD *)(v15 - 40) = v17;
        v15 -= 40;
        v6 -= 40;
      }
      while (v6 != v10);
      v6 = *(char **)(a1 + 128);
    }
    *(_QWORD *)(a1 + 128) = v15;
    *(_QWORD *)(a1 + 136) = v9;
    *(_QWORD *)(a1 + 144) = &v14[40 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *((_QWORD *)v6 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    v9 = v6 + 40;
  }
  *(_QWORD *)(a1 + 136) = v9;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 152));
  std::mutex::unlock(v4);
}

void sub_20FF1A6FC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20FF1A710()
{
  sub_20E860B90("vector");
}

void sub_20FF1A724(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v24[0] = v4;
  v5 = *a2;
  if (v5 > 2)
  {
    v7 = "invalid sync type";
    v8 = 17;
  }
  else
  {
    v6 = v5;
    v7 = off_24CA0BFE8[v6];
    v8 = *(_QWORD *)((char *)&unk_2103EEF88 + v6 * 8);
  }
  sub_20E86A980((_QWORD *)(v4 + 16), (uint64_t)v7, v8);
  v9 = *(_DWORD *)(v4 + 120);
  if ((v9 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v4 + 112);
    v13 = *(_QWORD *)(v4 + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v4 + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v4 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v23) = 0;
      v11 = __dst;
      goto LABEL_17;
    }
    v14 = *(const void **)(v4 + 40);
    v10 = *(_QWORD *)(v4 + 56) - (_QWORD)v14;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
      sub_20E860B7C();
  }
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v23 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_16;
  }
  HIBYTE(v23) = v10;
  v11 = __dst;
  if (v10)
LABEL_16:
    memmove(v11, v14, v10);
LABEL_17:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v24[0];
  if (v24[0])
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v20;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v17 + 128);
    MEMORY[0x212BC6398](v17, 0x10B2C40EED050F3);
  }
  v24[0] = a1;
  v24[1] = __dst;
  v24[2] = a1;
  v24[3] = __dst;
  v24[4] = __dst;
  v21 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v21 == -1)
    sub_20E877AB8();
  v25 = v24;
  ((void (*)(_QWORD **, uint64_t))off_24CA0BF70[v21])(&v25, a1);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
}

void sub_20FF1A9A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FF1A9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FF1A9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FF1A9FC(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v12;
  uint64_t v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  uint64_t *v18;

  v4 = *(unint64_t **)a1;
  if (!*(_BYTE *)a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v14 = (std::string *)",";
    v15 = v13;
    v16 = (std::string *)",";
    v17 = (std::string *)",";
    v5 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v5 == -1)
      goto LABEL_15;
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    ((void (*)(std::string *))off_24CA0BFD0[v5])(&v12);
  }
  *(_BYTE *)a2 = 0;
  v6 = *(_QWORD *)(a2 + 8);
  std::to_string(&v12, *v4);
  v13 = v6;
  v14 = &v12;
  v15 = v6;
  v16 = &v12;
  v17 = &v12;
  v7 = *(unsigned int *)(v6 + 24);
  if ((_DWORD)v7 == -1)
    sub_20E877AB8();
  v18 = &v13;
  ((void (*)(uint64_t **, uint64_t))off_24CA0BF70[v7])(&v18, v6);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    v8 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)a2)
      goto LABEL_11;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)a2)
      goto LABEL_11;
  }
  v13 = *(_QWORD *)(a2 + 8);
  v14 = (std::string *)",";
  v15 = v13;
  v16 = (std::string *)",";
  v17 = (std::string *)",";
  v9 = *(unsigned int *)(v13 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_15;
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  ((void (*)(std::string *))off_24CA0BFD0[v9])(&v12);
LABEL_11:
  *(_BYTE *)a2 = 0;
  sub_20EF8D310((uint64_t)&v13, *(_QWORD *)(a2 + 8), v8);
  v10 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v14 = (std::string *)",";
    v15 = v13;
    v16 = (std::string *)",";
    v17 = (std::string *)",";
    v11 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v11 != -1)
    {
      v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      ((void (*)(std::string *))off_24CA0BFD0[v11])(&v12);
      goto LABEL_14;
    }
LABEL_15:
    sub_20E877AB8();
  }
LABEL_14:
  *(_BYTE *)a2 = 0;
  sub_20EF8D310((uint64_t)&v13, *(_QWORD *)(a2 + 8), v10);
}

void sub_20FF1ABB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20FF1ABD0(uint64_t *a1, _BYTE *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t *v8;
  char v9;
  uint64_t v11;
  char v12;
  __int128 *v13;
  std::logic_error *exception;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  _QWORD v19[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;
  __int128 v24;
  uint64_t v25;

  v4 = atomic_load((unsigned __int8 *)&qword_254A6C7D0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C7D0))
  {
    LOWORD(v24) = 256;
    BYTE2(v24) = 2;
    sub_20FF1AFDC(&v24, 3uLL);
    __cxa_atexit((void (*)(void *))sub_20FF1B06C, &qword_254A6C7F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C7D0);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_254A6C7D8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C7D8))
  {
    *(_QWORD *)&xmmword_254A6C820 = qword_254A6C7F0;
    qword_254A6C830 = qword_254A6C7F8;
    __cxa_guard_release(&qword_254A6C7D8);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_254A6C7E0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C7E0))
  {
    xmmword_254A6C840 = xmmword_254A6C820;
    qword_254A6C850 = qword_254A6C7F0;
    *(_OWORD *)byte_254A6C858 = *(_OWORD *)&qword_254A6C830;
    *(_QWORD *)&byte_254A6C858[16] = qword_254A6C7F8;
    __cxa_guard_release(&qword_254A6C7E0);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_254A6C7E8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C7E8))
  {
    v24 = xmmword_254A6C840;
    v25 = qword_254A6C850;
    v23 = *(std::string *)byte_254A6C858;
    sub_20FF1B794((unsigned __int8 **)&v24, (unsigned __int8 **)&v23);
    __cxa_atexit((void (*)(void *))sub_20FF1B09C, &qword_254A6C808, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C7E8);
  }
  v24 = 0uLL;
  v25 = 0;
  sub_20EA94AF4(a1, (uint64_t)&v24);
  v8 = sub_20E8D4B64((uint64_t)&qword_254A6C808, (const void **)&v24);
  if (v8 == &qword_254A6C810)
  {
    v11 = HIBYTE(v25);
    v12 = HIBYTE(v25);
    if (v25 < 0)
      v11 = *((_QWORD *)&v24 + 1);
    if (v11 != 4)
      goto LABEL_24;
    v13 = (__int128 *)v24;
    if (v25 >= 0)
      v13 = &v24;
    if (*(_DWORD *)v13 != 1701736270)
    {
LABEL_24:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      sub_20E8B07EC("', expected ", &v21, &v22);
      sub_20FF1B0C4();
      if ((v20 & 0x80u) == 0)
        v15 = (const std::string::value_type *)v19;
      else
        v15 = (const std::string::value_type *)v19[0];
      if ((v20 & 0x80u) == 0)
        v16 = v20;
      else
        v16 = v19[1];
      v17 = std::string::append(&v22, v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v23);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    *a2 = 0;
    if ((v12 & 0x80) == 0)
      return a1;
  }
  else
  {
    v9 = HIBYTE(v25);
    *a2 = *((_BYTE *)v8 + 56);
    if ((v9 & 0x80) == 0)
      return a1;
  }
  operator delete((void *)v24);
  return a1;
}

void sub_20FF1AED0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C7E8);
  _Unwind_Resume(a1);
}

void sub_20FF1AEE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C7D0);
  _Unwind_Resume(a1);
}

void sub_20FF1AF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (a33 < 0)
  {
    operator delete(a28);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if (a21 < 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a22);
  if (a21 < 0)
  {
LABEL_5:
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_12:
      if (*(char *)(v35 - 41) < 0)
        operator delete(*(void **)(v35 - 64));
      _Unwind_Resume(a1);
    }
LABEL_11:
    __cxa_free_exception(v33);
    goto LABEL_12;
  }
LABEL_10:
  if (!v34)
    goto LABEL_12;
  goto LABEL_11;
}

void *sub_20FF1AFDC(void *result, size_t __sz)
{
  const void *v3;
  uint64_t v4;

  qword_254A6C7F0 = 0;
  qword_254A6C7F8 = 0;
  qword_254A6C800 = 0;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_20E867F44();
    v3 = result;
    qword_254A6C7F0 = (uint64_t)operator new(__sz);
    qword_254A6C7F8 = qword_254A6C7F0;
    v4 = qword_254A6C7F0 + __sz;
    qword_254A6C800 = qword_254A6C7F0 + __sz;
    result = memmove((void *)qword_254A6C7F0, v3, __sz);
    qword_254A6C7F8 = v4;
  }
  return result;
}

void sub_20FF1B048(_Unwind_Exception *exception_object)
{
  if (qword_254A6C7F0)
  {
    qword_254A6C7F8 = qword_254A6C7F0;
    operator delete((void *)qword_254A6C7F0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF1B06C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20FF1B09C(uint64_t a1)
{
  sub_20E866BE0(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_20FF1B0C4()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  _DWORD v4[6];
  int v5;
  void *__p[2];
  char v7;
  void **v8;
  const char *v9;
  _DWORD *v10;
  const char *v11;
  const char *v12;
  void ***v13;

  v5 = 0;
  if (qword_254A6C830 - (uint64_t)xmmword_254A6C820 <= 0)
  {
    sub_20EA5D220(v4, "{}");
    goto LABEL_16;
  }
  sub_20E89FDB0(v4, "{");
  v0 = xmmword_254A6C820;
  sub_20FF1BAE0((uint64_t)__p, (unsigned __int8 *)xmmword_254A6C820);
  v8 = (void **)v4;
  v9 = (const char *)__p;
  v10 = v4;
  v11 = (const char *)__p;
  v12 = (const char *)__p;
  if (v5 == -1)
    sub_20E877AB8();
  v13 = &v8;
  ((void (*)(void ****, _DWORD *))off_24CA0C0C0[v5])(&v13, v4);
  if (v7 < 0)
  {
    operator delete(__p[0]);
    v1 = qword_254A6C830;
    v2 = (unsigned __int8 *)(v0 + 1);
    if (v2 != (unsigned __int8 *)qword_254A6C830)
    {
LABEL_10:
      while (1)
      {
        v8 = (void **)v4;
        v9 = ",";
        v10 = v4;
        v11 = ",";
        v12 = ",";
        if (v5 == -1)
          break;
        __p[0] = &v8;
        ((void (*)(void **, _DWORD *))off_24CA0C0A8[v5])(__p, v4);
        sub_20FF1BAE0((uint64_t)__p, v2);
        v8 = (void **)v4;
        v9 = (const char *)__p;
        v10 = v4;
        v11 = (const char *)__p;
        v12 = (const char *)__p;
        if (v5 == -1)
          sub_20E877AB8();
        v13 = &v8;
        ((void (*)(void ****, _DWORD *))off_24CA0C0C0[v5])(&v13, v4);
        if (v7 < 0)
          operator delete(__p[0]);
        if (++v2 == (unsigned __int8 *)v1)
          goto LABEL_14;
      }
LABEL_20:
      sub_20E877AB8();
    }
  }
  else
  {
    v1 = qword_254A6C830;
    v2 = (unsigned __int8 *)(v0 + 1);
    if (v2 != (unsigned __int8 *)qword_254A6C830)
      goto LABEL_10;
  }
LABEL_14:
  v8 = (void **)v4;
  v9 = "}";
  v10 = v4;
  v11 = "}";
  v12 = "}";
  if (v5 == -1)
    goto LABEL_20;
  __p[0] = &v8;
  ((void (*)(void **, _DWORD *))off_24CA0C0A8[v5])(__p, v4);
LABEL_16:
  if (v5 == -1)
    sub_20E877AB8();
  v8 = __p;
  result = ((uint64_t (*)(void ***, _DWORD *))off_24CA0C090[v5])(&v8, v4);
  if (v5 != -1)
    return ((uint64_t (*)(void ***, _DWORD *))off_24CA0C078[v5])(&v8, v4);
  return result;
}

void sub_20FF1B33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20FF1B384(uint64_t a1, void *__src, size_t __len, char a4)
{
  __int128 *v8;
  size_t v9;
  size_t v10;
  __int128 v11;
  unint64_t v12;
  char **v13;
  char *v14[2];
  void *__p[2];
  unint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&v11 + 1) = __len;
    v12 = v10 | 0x8000000000000000;
    *(_QWORD *)&v11 = v8;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  v8 = &v11;
  if (__len)
LABEL_8:
    memmove(v8, __src, __len);
  *((_BYTE *)v8 + __len) = 0;
  *(_OWORD *)__p = v11;
  v16 = v12;
  v17 = a4;
  v14[0] = 0;
  v14[1] = 0;
  v13 = v14;
  sub_20FEE8CFC((uint64_t **)&v13, (uint64_t *)v14, (const void **)__p, (uint64_t)__p);
  (*(void (**)(uint64_t, char ***))(*(_QWORD *)a1 + 32))(a1, &v13);
  sub_20E866BE0((uint64_t)&v13, v14[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

void sub_20FF1B4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FF1B500(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  const void **v5;
  const void ***v6;
  BOOL v7;
  char **v8;
  char *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_20FEE8CFC((uint64_t **)&v8, (uint64_t *)v9, v4 + 4, (uint64_t)(v4 + 4));
      v5 = (const void **)v4[1];
      if (v5)
      {
        do
        {
          v6 = (const void ***)v5;
          v5 = (const void **)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (const void ***)v4[2];
          v7 = *v6 == v4;
          v4 = (const void **)v6;
        }
        while (!v7);
      }
      v4 = (const void **)v6;
    }
    while (v6 != v3);
  }
  (*(void (**)(uint64_t, char ***))(*(_QWORD *)a1 + 32))(a1, &v8);
  sub_20E866BE0((uint64_t)&v8, v9[0]);
}

void sub_20FF1B5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20FF1B5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF1B5EC(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  int v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void *__p[2];
  _BYTE v20[9];
  __int128 __dst;
  unint64_t v22;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (v9)
    return v6;
  if (a3)
  {
    v11 = a3;
    do
    {
      if (!v11)
        goto LABEL_8;
      v12 = a2[--v11];
    }
    while (v12 != 46);
    if (v11 == -1)
    {
LABEL_8:
      v7 = 0;
      v8 = 256;
      *(_WORD *)&v20[7] = 256;
      LOBYTE(__p[0]) = 0;
      goto LABEL_21;
    }
    if (a3 >= v11)
      a3 = v11;
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (a3 >= 0x17)
    {
      v14 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v14 = a3 | 7;
      v15 = v14 + 1;
      p_dst = (__int128 *)operator new(v14 + 1);
      *((_QWORD *)&__dst + 1) = a3;
      v22 = v15 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v22) = a3;
      p_dst = &__dst;
      if (!a3)
        goto LABEL_20;
    }
    memmove(p_dst, a2, a3);
LABEL_20:
    *((_BYTE *)p_dst + a3) = 0;
    *(_OWORD *)__p = __dst;
    *(_QWORD *)v20 = v22;
    v20[8] = 1;
    v7 = HIBYTE(v22);
    v8 = *((_QWORD *)&__dst + 1);
    goto LABEL_21;
  }
  LOBYTE(__p[0]) = 0;
  v20[8] = 0;
LABEL_21:
  if ((v7 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v17 = v7;
  else
    v17 = v8;
  v10 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 64))(a1, v16, v17);
  if (v20[8] && (v20[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  return v10;
}

void sub_20FF1B770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FF1B794(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  BOOL v4;
  void *v5;
  void *v6;
  size_t v7;
  int v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  const void *v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  uint64_t *v21;
  size_t v22;
  size_t v23;
  const void *v24;
  size_t v25;
  size_t v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  void *v32;
  _BYTE v33[15];
  unsigned __int8 v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x24BDAC8D0];
  qword_254A6C818 = 0;
  qword_254A6C810 = 0;
  qword_254A6C808 = (uint64_t)&qword_254A6C810;
  v2 = *a1;
  v3 = a1[2];
  v30 = *a2;
  v29 = a2[2];
  v4 = *a1 == *a2 && v3 == a2[2];
  if (!v4)
  {
    v5 = &unk_254A6C000;
    while (1)
    {
      sub_20FF1BAE0((uint64_t)&v32, v2);
      v6 = v32;
      v35[0] = *(_QWORD *)v33;
      *(_QWORD *)((char *)v35 + 7) = *(_QWORD *)&v33[7];
      v7 = v34;
      v8 = (char)v34;
      v9 = operator new(0x40uLL);
      v9[4] = v6;
      v9[5] = v35[0];
      *(_QWORD *)((char *)v9 + 47) = *(_QWORD *)((char *)v35 + 7);
      *((_BYTE *)v9 + 55) = v8;
      v35[0] = 0;
      *(_QWORD *)((char *)v35 + 7) = 0;
      *((_BYTE *)v9 + 56) = *v3;
      v10 = (uint64_t *)*((_QWORD *)v5 + 257);
      v12 = &qword_254A6C810;
      v11 = qword_254A6C810;
      v31 = v3;
      if (v10 != &qword_254A6C810)
      {
        v13 = qword_254A6C810;
        if (qword_254A6C810)
        {
          do
          {
            v12 = (uint64_t *)v13;
            v13 = *(_QWORD *)(v13 + 8);
          }
          while (v13);
        }
        else
        {
          v14 = &qword_254A6C810;
          do
          {
            v12 = (uint64_t *)v14[2];
            v4 = *v12 == (_QWORD)v14;
            v14 = v12;
          }
          while (v4);
        }
        v15 = *((char *)v12 + 55);
        if (v15 >= 0)
          v16 = v12 + 4;
        else
          v16 = (const void *)v12[4];
        if (v15 >= 0)
          v17 = *((unsigned __int8 *)v12 + 55);
        else
          v17 = v12[5];
        if (v8 >= 0)
          v18 = v9 + 4;
        else
          v18 = v6;
        if (v8 < 0)
          v7 = v9[5];
        if (v7 >= v17)
          v19 = v17;
        else
          v19 = v7;
        v20 = memcmp(v16, v18, v19);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            goto LABEL_28;
        }
        else if (v17 >= v7)
        {
LABEL_28:
          if (!v11)
          {
LABEL_57:
            v12 = &qword_254A6C810;
            v21 = &qword_254A6C810;
            goto LABEL_58;
          }
          while (1)
          {
            v12 = (uint64_t *)v11;
            v22 = *(unsigned __int8 *)(v11 + 55);
            v23 = *(_QWORD *)(v11 + 40);
            if ((v22 & 0x80u) == 0)
              v24 = (const void *)(v11 + 32);
            else
              v24 = *(const void **)(v11 + 32);
            if ((v22 & 0x80u) == 0)
              v25 = v22;
            else
              v25 = v23;
            if (v25 >= v7)
              v26 = v7;
            else
              v26 = v25;
            v27 = memcmp(v18, v24, v26);
            if (v27)
            {
              if (v27 < 0)
                goto LABEL_30;
            }
            else if (v7 < v25)
            {
LABEL_30:
              v11 = *v12;
              v21 = v12;
              if (!*v12)
                goto LABEL_58;
              continue;
            }
            v28 = memcmp(v24, v18, v26);
            if (v28)
            {
              if ((v28 & 0x80000000) == 0)
                goto LABEL_53;
            }
            else if (v25 >= v7)
            {
              goto LABEL_53;
            }
            v11 = v12[1];
            if (!v11)
            {
              v21 = v12 + 1;
              goto LABEL_58;
            }
          }
        }
      }
      if (!v11)
        goto LABEL_57;
      v21 = v12 + 1;
      if (v12[1])
      {
LABEL_53:
        if (v8 < 0)
          operator delete(v6);
        operator delete(v9);
        v5 = &unk_254A6C000;
        ++v2;
        v3 = v31 + 1;
        if (v2 == v30)
          goto LABEL_61;
      }
      else
      {
LABEL_58:
        *v9 = 0;
        v9[1] = 0;
        v9[2] = v12;
        *v21 = (uint64_t)v9;
        v5 = &unk_254A6C000;
        if (*(_QWORD *)qword_254A6C808)
        {
          qword_254A6C808 = *(_QWORD *)qword_254A6C808;
          v9 = (_QWORD *)*v21;
        }
        sub_20E868578((uint64_t *)qword_254A6C810, v9);
        ++qword_254A6C818;
        ++v2;
        v3 = v31 + 1;
        if (v2 == v30)
        {
LABEL_61:
          if (v3 == v29)
            return;
        }
      }
    }
  }
}

void sub_20FF1BA9C(_Unwind_Exception *a1)
{
  void *v1;
  int v2;

  if (v2 < 0)
  {
    operator delete(v1);
    sub_20E866BE0((uint64_t)&qword_254A6C808, (char *)qword_254A6C810);
    _Unwind_Resume(a1);
  }
  sub_20E866BE0((uint64_t)&qword_254A6C808, (char *)qword_254A6C810);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF1BAE0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _BYTE v20[24];
  int v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v21 = 0;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20E863438(v3);
  v24[0] = v3;
  v4 = (_QWORD *)(v3 + 16);
  v5 = *a2;
  if (v5 > 2)
  {
    sub_20E86A980(v4, (uint64_t)"Invalid(", 8);
    v6 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v6, (uint64_t)")", 1);
  }
  else
  {
    sub_20E86A980(v4, (uint64_t)(&off_24CA0C000)[2 * v5], (uint64_t)(&off_24CA0C000)[2 * v5 + 1]);
  }
  v7 = *(_DWORD *)(v3 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v3 + 112);
    v11 = *(_QWORD *)(v3 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v3 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v3 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v23) = 0;
      v9 = __dst;
      goto LABEL_17;
    }
    v12 = *(const void **)(v3 + 40);
    v8 = *(_QWORD *)(v3 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20E860B7C();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v23 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_16;
  }
  HIBYTE(v23) = v8;
  v9 = __dst;
  if (v8)
LABEL_16:
    memmove(v9, v12, v8);
LABEL_17:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v24[0];
  if (v24[0])
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v15 + 128);
    MEMORY[0x212BC6398](v15, 0x10B2C40EED050F3);
  }
  v24[0] = v20;
  v24[1] = __dst;
  v24[2] = v20;
  v24[3] = __dst;
  v24[4] = __dst;
  if (v21 == -1)
    sub_20E877AB8();
  v25 = v24;
  ((void (*)(_QWORD **, _BYTE *))off_24CA0C060[v21])(&v25, v20);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
  if (v21 == -1)
    sub_20E877AB8();
  v24[0] = __dst;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA0C090[v21])(v24, v20);
  if (v21 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA0C078[v21])(v24, v20);
  return result;
}

void sub_20FF1BDC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x212BC6398](v2, 0x10B2C40EED050F3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF1BDF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FF1BE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FF1BE48(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  char v15;
  char v16[8];
  _QWORD **v17;
  char *v18;

  v3 = a3 + 1;
  v4 = *a2;
  if ((_QWORD *)*a3 == a3 + 1)
    return sub_20E86A980(v4, (uint64_t)"{}", 2);
  sub_20E86A980(v4, (uint64_t)"{", 1);
  v7 = (_QWORD *)*a3;
  v8 = *a3 + 32;
  sub_20E86A980(*a2, (uint64_t)"{", 1);
  v16[0] = 1;
  v17 = a2;
  v18 = &v15;
  sub_20FF1C01C(v8, (uint64_t)v16);
  sub_20E86A980(*a2, (uint64_t)"}", 1);
  v9 = (_QWORD *)v7[1];
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  else
  {
    do
    {
      v10 = (_QWORD *)v7[2];
      v11 = *v10 == (_QWORD)v7;
      v7 = v10;
    }
    while (!v11);
  }
  if (v10 != v3)
  {
    do
    {
      sub_20E86A980(*a2, (uint64_t)",", 1);
      sub_20E86A980(*a2, (uint64_t)"{", 1);
      v16[0] = 1;
      v17 = a2;
      v18 = &v15;
      sub_20FF1C01C((uint64_t)(v10 + 4), (uint64_t)v16);
      sub_20E86A980(*a2, (uint64_t)"}", 1);
      v12 = (_QWORD *)v10[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v10[2];
          v11 = *v13 == (_QWORD)v10;
          v10 = v13;
        }
        while (!v11);
      }
      v10 = v13;
    }
    while (v13 != v3);
  }
  return sub_20E86A980(*a2, (uint64_t)"}", 1);
}

_QWORD *sub_20FF1C01C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char **v9;
  const char *v10;
  uint64_t v11;

  if (!*(_BYTE *)a2)
    sub_20E86A980(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(_QWORD *)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  sub_20E86A980(**(_QWORD ***)(a2 + 8), v5, v6);
  if (!*(_BYTE *)a2)
  {
    sub_20E86A980(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
    *(_BYTE *)a2 = 0;
    v7 = **(_QWORD ***)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 24);
    if (v8 <= 2)
      goto LABEL_11;
LABEL_14:
    sub_20E86A980(v7, (uint64_t)"Invalid(", 8);
    v7 = (_QWORD *)std::ostream::operator<<();
    v10 = ")";
    v11 = 1;
    return sub_20E86A980(v7, (uint64_t)v10, v11);
  }
  *(_BYTE *)a2 = 0;
  v7 = **(_QWORD ***)(a2 + 8);
  v8 = *(unsigned __int8 *)(a1 + 24);
  if (v8 > 2)
    goto LABEL_14;
LABEL_11:
  v9 = &(&off_24CA0C000)[2 * v8];
  v10 = *v9;
  v11 = (uint64_t)v9[1];
  return sub_20E86A980(v7, (uint64_t)v10, v11);
}

void sub_20FF1C114(_BYTE *__src@<X0>, uint64_t __len@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v3;
  int64_t v7;
  size_t v8;
  int v9;
  uint64_t v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  char v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  size_t *v22;
  unint64_t v23;
  size_t *v24;
  _BYTE *v25;
  unint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t *v31;
  int64_t v32;
  _QWORD *v33;
  __int128 v34;
  void **__dst;
  __int128 v36;
  size_t v37;
  _BYTE v38[15];
  unsigned __int8 v39;
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[3];

  v42[2] = *MEMORY[0x24BDAC8D0];
  if (!__len)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 80) = 0;
    return;
  }
  v7 = 0;
  v8 = __len;
  while (__src[v7] != 35)
  {
    if (__len == ++v7)
    {
      LOBYTE(v9) = 0;
      v10 = -1;
      goto LABEL_14;
    }
  }
  LOBYTE(v9) = 0;
  v10 = -1;
  if (__len != v7 && v7 != -1)
  {
    if (__len >= v7)
      v8 = v7;
    else
      v8 = __len;
    v9 = 1;
    if (!v8)
    {
      v32 = __len + ~v7;
      if (__len >= v32)
        v15 = v32;
      else
        v15 = __len;
      if (v15 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_25;
LABEL_81:
      sub_20E860B7C();
    }
    v10 = v7;
  }
LABEL_14:
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    *(_QWORD *)&v36 = v8;
    *((_QWORD *)&v36 + 1) = v13 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v36) = v8;
    p_dst = (void **)&__dst;
  }
  memmove(p_dst, __src, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v8 = (size_t)__dst;
  v42[0] = v36;
  *(_QWORD *)((char *)v42 + 7) = *(_QWORD *)((char *)&v36 + 7);
  v3 = HIBYTE(v36);
  __dst = 0;
  v36 = 0uLL;
  if ((v9 & 1) == 0)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_36;
  }
  v9 = 0;
  if (__len >= __len + ~v10)
    v15 = __len + ~v10;
  else
    v15 = __len;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_81;
LABEL_25:
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    v16 = operator new(v19 + 1);
    *(_QWORD *)&v34 = v15;
    *((_QWORD *)&v34 + 1) = v20 | 0x8000000000000000;
    v33 = v16;
  }
  else
  {
    HIBYTE(v34) = v15;
    v16 = &v33;
    if (!v15)
      goto LABEL_33;
  }
  memmove(v16, &__src[__len - v15], v15);
LABEL_33:
  *((_BYTE *)v16 + v15) = 0;
  v17 = v33;
  v40[0] = v34;
  *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)&v34 + 7);
  v14 = HIBYTE(v34);
  v34 = 0uLL;
  v33 = 0;
  v41[0] = v40[0];
  *(_QWORD *)((char *)v41 + 7) = *(_QWORD *)((char *)v40 + 7);
  v40[0] = 0;
  *(_QWORD *)((char *)v40 + 7) = 0;
  if (v9)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    v21 = 1;
    *(_BYTE *)(a3 + 80) = 0;
    goto LABEL_66;
  }
  v18 = 1;
LABEL_36:
  *(_QWORD *)&v38[7] = *(_QWORD *)((char *)v42 + 7);
  v37 = v8;
  *(_QWORD *)v38 = v42[0];
  v39 = v3;
  v42[0] = 0;
  *(_QWORD *)((char *)v42 + 7) = 0;
  if ((v3 & 0x80u) == 0)
    v22 = &v37;
  else
    v22 = (size_t *)v8;
  v23 = v3;
  if ((v3 & 0x80u) != 0)
    v23 = *(_QWORD *)v38;
  if (v23)
  {
    v24 = v22;
    if (v23 >= 8)
    {
      v24 = (size_t *)((char *)v22 + (v23 & 0xFFFFFFFFFFFFFFF8));
      v25 = (char *)v22 + 3;
      v26 = v23 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        v27 = vceq_s8(*(int8x8_t *)(v25 - 3), (int8x8_t)0x2323232323232323);
        if ((v27.i8[0] & 1) != 0)
        {
          *(v25 - 3) = 95;
          if ((v27.i8[1] & 1) == 0)
          {
LABEL_47:
            if ((v27.i8[2] & 1) == 0)
              goto LABEL_48;
            goto LABEL_56;
          }
        }
        else if ((v27.i8[1] & 1) == 0)
        {
          goto LABEL_47;
        }
        *(v25 - 2) = 95;
        if ((v27.i8[2] & 1) == 0)
        {
LABEL_48:
          if ((v27.i8[3] & 1) == 0)
            goto LABEL_49;
          goto LABEL_57;
        }
LABEL_56:
        *(v25 - 1) = 95;
        if ((v27.i8[3] & 1) == 0)
        {
LABEL_49:
          if ((v27.i8[4] & 1) == 0)
            goto LABEL_50;
          goto LABEL_58;
        }
LABEL_57:
        *v25 = 95;
        if ((v27.i8[4] & 1) == 0)
        {
LABEL_50:
          if ((v27.i8[5] & 1) == 0)
            goto LABEL_51;
          goto LABEL_59;
        }
LABEL_58:
        v25[1] = 95;
        if ((v27.i8[5] & 1) == 0)
        {
LABEL_51:
          if ((v27.i8[6] & 1) == 0)
            goto LABEL_52;
          goto LABEL_60;
        }
LABEL_59:
        v25[2] = 95;
        if ((v27.i8[6] & 1) == 0)
        {
LABEL_52:
          if ((v27.i8[7] & 1) != 0)
            goto LABEL_61;
          goto LABEL_44;
        }
LABEL_60:
        v25[3] = 95;
        if ((v27.i8[7] & 1) != 0)
LABEL_61:
          v25[4] = 95;
LABEL_44:
        v25 += 8;
        v26 -= 8;
        if (!v26)
        {
          if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_63;
          break;
        }
      }
    }
    v31 = (size_t *)((char *)v22 + v23);
    do
    {
      if (*(_BYTE *)v24 == 35)
        *(_BYTE *)v24 = 95;
      v24 = (size_t *)((char *)v24 + 1);
    }
    while (v24 != v31);
LABEL_63:
    v8 = v37;
    v3 = v39;
  }
  v28 = *(_QWORD *)v38;
  v29 = *(_QWORD *)&v38[7];
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v28;
  *(_QWORD *)(a3 + 15) = v29;
  *(_BYTE *)(a3 + 23) = v3;
  *(_BYTE *)(a3 + 24) = 1;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  if ((v18 & 1) == 0)
    goto LABEL_68;
  v8 = 0;
  v3 = 0;
  v21 = 0;
LABEL_66:
  v30 = v41[0];
  *(_QWORD *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = v30;
  *(_QWORD *)(a3 + 47) = *(_QWORD *)((char *)v41 + 7);
  *(_BYTE *)(a3 + 55) = v14;
  v41[0] = 0;
  *(_QWORD *)((char *)v41 + 7) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 80) = 1;
  if ((v21 & 1) != 0)
    return;
  if ((v3 & 0x80) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v36) & 0x80000000) == 0)
      return;
    goto LABEL_69;
  }
  operator delete((void *)v8);
  if (SHIBYTE(v36) < 0)
LABEL_69:
    operator delete(__dst);
}

void sub_20FF1C574(_Unwind_Exception *exception_object)
{
  void *v1;
  char v2;
  char v3;

  if ((v3 & 1) == 0 && v2 < 0)
  {
    operator delete(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF1C59C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;

  v2 = a2;
  v4 = a2[24];
  if (a1[24])
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((a1[24] != 0) != (v4 != 0))
      return 0;
  }
  else
  {
    v7 = a1[23];
    if ((v7 & 0x80u) == 0)
      v8 = a1[23];
    else
      v8 = *((_QWORD *)a1 + 1);
    v9 = a2[23];
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *((_QWORD *)a2 + 1);
    if (v8 != v9)
      return 0;
    if (v10 < 0)
      a2 = *(unsigned __int8 **)a2;
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
        return 0;
    }
    else if (a1[23])
    {
      v11 = a1;
      while (*v11 == *a2)
      {
        ++v11;
        ++a2;
        if (!--v7)
          goto LABEL_23;
      }
      return 0;
    }
  }
LABEL_23:
  result = (a1[80] != 0) == (v2[80] != 0);
  if (!a1[80] || !v2[80])
    return result;
  v12 = a1[55];
  if ((v12 & 0x80u) == 0)
    v13 = a1[55];
  else
    v13 = *((_QWORD *)a1 + 5);
  v14 = v2[55];
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)v2 + 5);
  if (v13 != v14)
    return 0;
  v16 = (const void **)(a1 + 32);
  if (v15 >= 0)
    v17 = v2 + 32;
  else
    v17 = (unsigned __int8 *)*((_QWORD *)v2 + 4);
  if ((v12 & 0x80) != 0)
    return memcmp(*v16, v17, *((_QWORD *)a1 + 5)) == 0;
  if (!a1[55])
    return 1;
  v18 = v12 - 1;
  do
  {
    v20 = *(unsigned __int8 *)v16;
    v16 = (const void **)((char *)v16 + 1);
    v19 = v20;
    v22 = *v17++;
    v21 = v22;
    v24 = v18-- != 0;
    result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

_QWORD *sub_20FF1C744(_QWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  int v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;

  sub_20E86A980(a1, (uint64_t)"{", 1);
  sub_2102339F4(a1, (uint64_t *)a2);
  sub_20E86A980(a1, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 40))
  {
    v4 = *(char *)(a2 + 39);
    if (v4 >= 0)
      v5 = (const char *)(a2 + 16);
    else
      v5 = *(const char **)(a2 + 16);
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(a2 + 39);
    else
      v6 = *(_QWORD *)(a2 + 24);
    v7 = a1;
  }
  else
  {
    v5 = "nullopt";
    v7 = a1;
    v6 = 7;
  }
  sub_20E86A980(v7, (uint64_t)v5, v6);
  sub_20E86A980(a1, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 72))
  {
    v8 = *(char *)(a2 + 71);
    if (v8 >= 0)
      v9 = (const char *)(a2 + 48);
    else
      v9 = *(const char **)(a2 + 48);
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 71);
    else
      v10 = *(_QWORD *)(a2 + 56);
    v11 = a1;
  }
  else
  {
    v9 = "nullopt";
    v11 = a1;
    v10 = 7;
  }
  sub_20E86A980(v11, (uint64_t)v9, v10);
  sub_20E86A980(a1, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 96))
    sub_2102339F4(a1, (uint64_t *)(a2 + 80));
  else
    sub_20E86A980(a1, (uint64_t)"nullopt", 7);
  sub_20E86A980(a1, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 160))
  {
    v14 = *(const char **)(a2 + 112);
    v13 = a2 + 112;
    v12 = v14;
    v15 = *(char *)(v13 + 23);
    if (v15 >= 0)
      v16 = (const char *)v13;
    else
      v16 = v12;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v13 + 23);
    else
      v17 = *(_QWORD *)(v13 + 8);
    v18 = a1;
  }
  else
  {
    v16 = "nullopt";
    v18 = a1;
    v17 = 7;
  }
  sub_20E86A980(v18, (uint64_t)v16, v17);
  sub_20E86A980(a1, (uint64_t)"}", 1);
  return a1;
}

void sub_20FF1C8DC(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_20FF1C8E4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20FF1C94C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF1C9B4(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 8))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 228, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_7;
  }
  if (*(_QWORD *)(a1 + 8))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_7:
    abort();
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_20FF1CA78(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

void sub_20FF1CAF4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::string *v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  std::string::size_type v26;
  char v27;
  _QWORD v28[3];
  int v29;
  std::string v30;
  const char *v31;
  const char *v32;
  std::string *v33;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v28[0] = v2;
  v28[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v2)
  {
    HIBYTE(v26) = 0;
    LOBYTE(__p[0]) = 0;
    if (!v3)
      goto LABEL_22;
    goto LABEL_18;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 8);
  v24 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v6 + 32))(&v30);
  v10 = std::string::insert(&v30, 0, ",", 1uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v26 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v3 = (std::__shared_weak_count *)v28[1];
  if (v28[1])
  {
LABEL_18:
    v14 = (unint64_t *)&v3->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_22:
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(std::__shared_weak_count **)(a1 + 16);
  v23 = v16;
  v24 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v22 = v16;
  strcpy((char *)v28, "viz::SharedData");
  v28[2] = 0xF00000000000000;
  v29 = 1;
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  v30.__r_.__value_.__l.__size_ = (std::string::size_type)"{";
  v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
  v31 = "{";
  v32 = "{";
  sub_20E89FEA0((uint64_t *)&v30.__r_.__value_.__r.__words[2], (uint64_t)v28);
  sub_20EA682C8((uint64_t)&v27, (uint64_t)v28, &v22);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  v30.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
  v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
  v31 = (const char *)__p;
  v32 = (const char *)__p;
  if (v29 == -1)
    sub_20E877AB8();
  v33 = &v30;
  ((void (*)(std::string **, _QWORD *))off_24CA0C1A0[v29])(&v33, v28);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  v30.__r_.__value_.__l.__size_ = (std::string::size_type)"}";
  v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
  v31 = "}";
  v32 = "}";
  if (v29 == -1)
    sub_20E877AB8();
  v33 = &v30;
  ((void (*)(std::string **, _QWORD *))off_24CA0C1B8[v29])(&v33, v28);
  if (v29 == -1)
    sub_20E877AB8();
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  ((void (*)(std::string *, _QWORD *))off_24CA0C188[v29])(&v30, v28);
  if (v29 != -1)
    ((void (*)(std::string *, _QWORD *))off_24CA0C170[v29])(&v30, v28);
  if (!v17)
    goto LABEL_34;
  v20 = (unint64_t *)&v17->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_34:
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
LABEL_37:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (SHIBYTE(v26) < 0)
    goto LABEL_37;
}

void sub_20FF1CE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  if (*(char *)(v3 - 57) < 0)
    operator delete(*(void **)(v3 - 80));
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20FF1CE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  sub_20E877A60((uint64_t)&a20);
  sub_20E86665C((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FF1CE74(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string *v12;
  void *v13;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p[2];
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string __dst;
  int v37;

  v4 = *(void **)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  __p[0] = v4;
  __p[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v4)
  {
    v13 = 0;
    v14 = 0;
    if (!v5)
      goto LABEL_22;
    goto LABEL_18;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  v34 = *(_QWORD *)(a1 + 8);
  v35 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v8 + 40))(&__dst);
  v12 = std::string::insert(&__dst, 0, ",", 1uLL);
  v13 = (void *)v12->__r_.__value_.__r.__words[0];
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v9)
  {
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v5 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
LABEL_18:
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_22:
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(std::__shared_weak_count **)(a1 + 16);
  v34 = v19;
  v35 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (v19)
  {
    v23 = *(_QWORD *)(a1 + 8);
    v24 = *(std::__shared_weak_count **)(a1 + 16);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v23 + 40))(__p);
    v37 = -1;
    if (SHIBYTE(v33) < 0)
    {
      sub_20E860C04(&__dst, __p[0], (unint64_t)__p[1]);
      v27 = SHIBYTE(v33);
      *(std::string *)a2 = __dst;
      if (v27 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 16) = v33;
    }
    if (v24)
    {
      v28 = (unint64_t *)&v24->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v20 = v35;
    if (!v35)
    {
LABEL_44:
      if ((v14 & 0x80) == 0)
        return;
LABEL_47:
      operator delete(v13);
      return;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 7;
    strcpy((char *)a2, "nullptr");
    if (!v20)
      goto LABEL_44;
  }
  v30 = (unint64_t *)&v20->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (v31)
    goto LABEL_44;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (v14 < 0)
    goto LABEL_47;
}

void sub_20FF1D118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;
  char v21;

  sub_20E877A60((uint64_t)&a20);
  if (a17 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a10);
    sub_20E86665C((uint64_t)&a18);
    if ((v21 & 0x80) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    sub_20E86665C((uint64_t)&a10);
    sub_20E86665C((uint64_t)&a18);
    if ((v21 & 0x80) == 0)
      goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_20FF1D190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a15);
    sub_20E86665C((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FF1D1D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v3 + 48))(a2);
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20FF1D260@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v3 + 56))(a2);
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20FF1D2E8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 **v29;
  BOOL v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  BOOL v42;

  if (*(_QWORD *)*a2 != *(_QWORD *)*a3 || *(unsigned __int8 *)(*a2 + 8) != *(unsigned __int8 *)(*a3 + 8))
    return 0;
  v5 = (unsigned __int8 *)a2[1];
  v6 = (unsigned __int8 **)a3[1];
  v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((v5[24] != 0) != (v7 != 0))
      return 0;
  }
  else
  {
    v10 = v5[23];
    if ((v10 & 0x80u) == 0)
      v11 = (unsigned __int8 *)v5[23];
    else
      v11 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    v12 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = v6[1];
    if (v11 != v12)
      return 0;
    if (v13 >= 0)
      v14 = (unsigned __int8 *)a3[1];
    else
      v14 = *v6;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v5, v14, *((_QWORD *)v5 + 1)))
        return 0;
    }
    else if (v5[23])
    {
      while (*v5 == *v14)
      {
        ++v5;
        ++v14;
        if (!--v10)
          goto LABEL_26;
      }
      return 0;
    }
  }
LABEL_26:
  v15 = (unsigned __int8 *)a2[2];
  v16 = (unsigned __int8 **)a3[2];
  v17 = *((unsigned __int8 *)v16 + 24);
  if (v15[24])
    v18 = v17 == 0;
  else
    v18 = 1;
  if (v18)
  {
    if ((v15[24] != 0) != (v17 != 0))
      return 0;
  }
  else
  {
    v23 = v15[23];
    if ((v23 & 0x80u) == 0)
      v24 = (unsigned __int8 *)v15[23];
    else
      v24 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
    v25 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
    v26 = (char)v25;
    if ((char)v25 < 0)
      v25 = v16[1];
    if (v24 != v25)
      return 0;
    if (v26 >= 0)
      v27 = (unsigned __int8 *)a3[2];
    else
      v27 = *v16;
    if ((v23 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v15, v27, *((_QWORD *)v15 + 1)))
        return 0;
    }
    else if (v15[23])
    {
      while (*v15 == *v27)
      {
        ++v15;
        ++v27;
        if (!--v23)
          goto LABEL_32;
      }
      return 0;
    }
  }
LABEL_32:
  v19 = a2[3];
  v20 = a3[3];
  v21 = *(unsigned __int8 *)(v20 + 16);
  if (*(_BYTE *)(v19 + 16))
    v22 = v21 == 0;
  else
    v22 = 1;
  if (v22)
  {
    if ((*(_BYTE *)(v19 + 16) != 0) == (v21 != 0))
      goto LABEL_55;
    return 0;
  }
  if (*(_QWORD *)v19 != *(_QWORD *)v20 || *(unsigned __int8 *)(v19 + 8) != *(unsigned __int8 *)(v20 + 8))
    return 0;
LABEL_55:
  v28 = (unsigned __int8 *)a2[4];
  v29 = (unsigned __int8 **)a3[4];
  if (v28[48])
    v30 = *((_BYTE *)v29 + 48) == 0;
  else
    v30 = 1;
  if (v30)
    return (v28[48] != 0) == (*((_BYTE *)v29 + 48) != 0);
  v31 = v28[23];
  if ((v31 & 0x80u) == 0)
    v32 = (unsigned __int8 *)v28[23];
  else
    v32 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
  v33 = (unsigned __int8 *)*((unsigned __int8 *)v29 + 23);
  v34 = (char)v33;
  if ((char)v33 < 0)
    v33 = v29[1];
  if (v32 != v33)
    return 0;
  if (v34 >= 0)
    v35 = (unsigned __int8 *)a3[4];
  else
    v35 = *v29;
  if ((v31 & 0x80) != 0)
    return memcmp(*(const void **)v28, v35, *((_QWORD *)v28 + 1)) == 0;
  if (!v28[23])
    return 1;
  v36 = v31 - 1;
  do
  {
    v38 = *v28++;
    v37 = v38;
    v40 = *v35++;
    v39 = v40;
    v42 = v36-- != 0;
    result = v37 == v39;
  }
  while (v37 == v39 && v42);
  return result;
}

void sub_20FF1D5CC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF1D5F0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20FF1D608(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d3kit3viz5IDataEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3viz5IDataEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d3kit3viz5IDataEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3viz5IDataEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_20FF1D678(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9F0E80;
  sub_20EB0580C((uint64_t)(a1 + 8));
  a1[1] = &off_24C9F0ED0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FF1D6FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9F0E80;
  sub_20EB0580C((uint64_t)(a1 + 8));
  a1[1] = &off_24C9F0ED0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF1D780(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t *v25;
  BOOL v26;
  int v27;
  uint64_t *v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  std::__shared_weak_count *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  _QWORD v68[2];
  std::__shared_weak_count *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  __int16 v74;

  if (*(uint64_t (***)())a2 != &off_24CA0C258)
    return 0;
  if (a1 == a2)
    return 1;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(std::__shared_weak_count **)(a1 + 24);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
      if (!v6)
        goto LABEL_26;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v6)
        goto LABEL_26;
    }
    v6 = *(_QWORD *)(a1 + 16);
    v11 = *(std::__shared_weak_count **)(a1 + 24);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (!v6)
  {
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 61))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v60, v6, 0);
    v15 = *(_QWORD *)(a2 + 16);
    v16 = *(std::__shared_weak_count **)(a2 + 24);
    if (v16)
      goto LABEL_27;
LABEL_24:
    if (!v15)
      goto LABEL_43;
    goto LABEL_40;
  }
LABEL_26:
  v60 = 0;
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(std::__shared_weak_count **)(a2 + 24);
  if (!v16)
    goto LABEL_24;
LABEL_27:
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (v19)
  {
    if (!v15)
      goto LABEL_43;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v15)
      goto LABEL_43;
  }
  v15 = *(_QWORD *)(a2 + 16);
  v20 = *(std::__shared_weak_count **)(a2 + 24);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_40:
  if (*(_BYTE *)(a2 + 61))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v15 + 96))(&v59, v15, 0);
    v24 = *(_DWORD *)(a1 + 56);
    if (v24 != *(_DWORD *)(a2 + 56))
      goto LABEL_64;
    goto LABEL_44;
  }
LABEL_43:
  v59 = 0;
  v24 = *(_DWORD *)(a1 + 56);
  if (v24 != *(_DWORD *)(a2 + 56))
    goto LABEL_64;
LABEL_44:
  v25 = (uint64_t *)(a1 + 32);
  if (*(_DWORD *)(a1 + 32))
    v26 = *(_DWORD *)(a1 + 36) == 0;
  else
    v26 = 1;
  v27 = v26;
  v28 = (uint64_t *)(a2 + 32);
  if (*(_DWORD *)(a2 + 32))
  {
    v29 = *(_DWORD *)(a2 + 36) == 0;
    if (((v27 ^ v29) & 1) == 0)
    {
      if ((v27 & v29) == 1)
        goto LABEL_53;
      goto LABEL_58;
    }
  }
  else if ((v27 & 1) != 0)
  {
    if ((v27 & 1) == 1)
    {
LABEL_53:
      v30 = *v25;
      v2 = (_DWORD)v30 == *v28 && HIDWORD(v30) == HIDWORD(*v28);
      goto LABEL_65;
    }
LABEL_58:
    v68[0] = &off_24C9C0338;
    v31 = *(_QWORD *)(a1 + 16);
    v32 = *(std::__shared_weak_count **)(a1 + 24);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v35 = *(_QWORD *)(a1 + 48);
      v36 = *(_DWORD *)(a1 + 56);
      v37 = *(_WORD *)(a1 + 60);
      do
        v38 = __ldxr(v33);
      while (__stxr(v38 + 1, v33));
    }
    else
    {
      v35 = *(_QWORD *)(a1 + 48);
      v37 = *(_WORD *)(a1 + 60);
      v36 = v24;
    }
    v68[1] = v31;
    v69 = v32;
    v70 = *v25;
    v71 = *(_DWORD *)(a1 + 40);
    v72 = v35;
    v73 = v36;
    v74 = v37;
    if (v32)
    {
      v41 = (unint64_t *)&v32->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v61[0] = &off_24C9C0338;
    v43 = *(_QWORD *)(a2 + 16);
    v44 = *(std::__shared_weak_count **)(a2 + 24);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      v47 = *(_QWORD *)(a2 + 48);
      v48 = *(_DWORD *)(a2 + 56);
      v49 = *(_WORD *)(a2 + 60);
      do
        v50 = __ldxr(v45);
      while (__stxr(v50 + 1, v45));
    }
    else
    {
      v47 = *(_QWORD *)(a2 + 48);
      v48 = *(_DWORD *)(a2 + 56);
      v49 = *(_WORD *)(a2 + 60);
    }
    v61[1] = v43;
    v62 = v44;
    v63 = *v28;
    v64 = *(_DWORD *)(a2 + 40);
    v65 = v47;
    v66 = v48;
    v67 = v49;
    if (v44)
    {
      v51 = (unint64_t *)&v44->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v2 = sub_210161770(v24, (uint64_t)v68, (uint64_t)v61);
    v53 = v62;
    if (v62)
    {
      v54 = (unint64_t *)&v62->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = v69;
    if (v69)
    {
      v57 = (unint64_t *)&v69->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    goto LABEL_65;
  }
LABEL_64:
  v2 = 0;
LABEL_65:
  v39 = v59;
  v59 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = v60;
  v60 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  return v2;
}

void sub_20FF1DC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (a20)
  {
    v23 = (unint64_t *)&a20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v25 = a10;
    if (!a10)
LABEL_13:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v25 = a10;
    if (!a10)
      goto LABEL_13;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20FF1DCF8(uint64_t *a1, uint64_t a2, void *__src, size_t __len, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  _QWORD *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  char v21;
  void *v22;
  BOOL v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  unint64_t v27;
  int8x8_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  size_t v32;
  __int128 *p_dst;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v47;
  __int128 v48;
  int v49;
  void *__p[3];
  __int128 *v51;
  __int128 *v52;
  void **v53;
  __int128 __dst;
  unint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  v6 = a1 + 1;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (__len >= 0x17)
  {
    v14 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v14 = __len | 7;
    v15 = v14 + 1;
    v12 = operator new(v14 + 1);
    *(_QWORD *)&v48 = __len;
    *((_QWORD *)&v48 + 1) = v15 | 0x8000000000000000;
    v47 = v12;
  }
  else
  {
    HIBYTE(v48) = __len;
    v12 = &v47;
    if (!__len)
    {
      LOBYTE(v47) = 0;
      v13 = *a1;
      if (*a1)
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  memmove(v12, __src, __len);
  *((_BYTE *)v12 + __len) = 0;
  v13 = *a1;
  if (*a1)
  {
LABEL_5:
    LOBYTE(__p[0]) = 0;
    LOBYTE(v51) = 0;
    if (*(_BYTE *)(v13 + 264))
    {
      if (*(char *)(v13 + 263) < 0)
      {
        sub_20E860C04(__p, *(void **)(v13 + 240), *(_QWORD *)(v13 + 248));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(v13 + 240);
        __p[2] = *(void **)(v13 + 256);
      }
      LOBYTE(v51) = 1;
    }
    goto LABEL_15;
  }
LABEL_12:
  LOBYTE(__p[0]) = 0;
  LOBYTE(v51) = 0;
LABEL_15:
  v16 = operator new();
  v17 = v16;
  v18 = v47;
  *(_QWORD *)&__dst = v48;
  *(_QWORD *)((char *)&__dst + 7) = *(_QWORD *)((char *)&v48 + 7);
  v19 = HIBYTE(v48);
  v20 = SHIBYTE(v48);
  v47 = 0;
  v48 = 0uLL;
  v21 = (char)v51;
  if ((_BYTE)v51)
  {
    v22 = __p[1];
    *(void **)(v16 + 24) = __p[0];
    *(_QWORD *)(v16 + 32) = v22;
    *(void **)(v16 + 39) = *(void **)((char *)&__p[1] + 7);
    LOBYTE(v22) = HIBYTE(__p[2]);
    memset(__p, 0, sizeof(__p));
    *(_QWORD *)(v16 + 8) = __dst;
    *(_QWORD *)(v16 + 15) = *(_QWORD *)((char *)&__dst + 7);
    v21 = 1;
    *(_BYTE *)(v16 + 47) = (_BYTE)v22;
  }
  else
  {
    *(_QWORD *)(v16 + 8) = __dst;
    *(_QWORD *)(v16 + 15) = *(_QWORD *)((char *)&__dst + 7);
    *(_BYTE *)(v16 + 24) = 0;
  }
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 23) = v20;
  *(_BYTE *)(v16 + 48) = v21;
  v23 = v20 < 0;
  if (v20 >= 0)
    v24 = (_BYTE *)v16;
  else
    v24 = v18;
  if (v23)
    v19 = *(_QWORD *)(v16 + 8);
  if (!v19)
    goto LABEL_45;
  v25 = v24;
  if (v19 < 8)
    goto LABEL_57;
  v25 = &v24[v19 & 0xFFFFFFFFFFFFFFF8];
  v26 = v24 + 3;
  v27 = v19 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v28 = vceq_s8(*(int8x8_t *)(v26 - 3), (int8x8_t)0x3A3A3A3A3A3A3A3ALL);
    if ((v28.i8[0] & 1) != 0)
    {
      *(v26 - 3) = 95;
      if ((v28.i8[1] & 1) == 0)
        goto LABEL_29;
    }
    else if ((v28.i8[1] & 1) == 0)
    {
LABEL_29:
      if ((v28.i8[2] & 1) != 0)
        goto LABEL_30;
      goto LABEL_38;
    }
    *(v26 - 2) = 95;
    if ((v28.i8[2] & 1) != 0)
    {
LABEL_30:
      *(v26 - 1) = 95;
      if ((v28.i8[3] & 1) == 0)
        goto LABEL_31;
      goto LABEL_39;
    }
LABEL_38:
    if ((v28.i8[3] & 1) == 0)
    {
LABEL_31:
      if ((v28.i8[4] & 1) != 0)
        goto LABEL_32;
      goto LABEL_40;
    }
LABEL_39:
    *v26 = 95;
    if ((v28.i8[4] & 1) != 0)
    {
LABEL_32:
      v26[1] = 95;
      if ((v28.i8[5] & 1) == 0)
        goto LABEL_33;
      goto LABEL_41;
    }
LABEL_40:
    if ((v28.i8[5] & 1) == 0)
    {
LABEL_33:
      if ((v28.i8[6] & 1) == 0)
        goto LABEL_42;
      goto LABEL_34;
    }
LABEL_41:
    v26[2] = 95;
    if ((v28.i8[6] & 1) == 0)
    {
LABEL_42:
      if ((v28.i8[7] & 1) == 0)
        goto LABEL_26;
      goto LABEL_43;
    }
LABEL_34:
    v26[3] = 95;
    if ((v28.i8[7] & 1) == 0)
      goto LABEL_26;
LABEL_43:
    v26[4] = 95;
LABEL_26:
    v26 += 8;
    v27 -= 8;
  }
  while (v27);
  if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_45;
LABEL_57:
  v37 = &v24[v19];
  do
  {
    if (*v25 == 58)
      *v25 = 95;
    ++v25;
  }
  while (v25 != v37);
LABEL_45:
  v53 = (void **)v16;
  *v6 = v16;
  v29 = (_QWORD *)operator new();
  *v29 = &off_24CA0C3F8;
  v29[1] = 0;
  v29[2] = 0;
  v29[3] = v17;
  a1[2] = (uint64_t)v29;
  if ((_BYTE)v51 && SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v49 = 0;
  v30 = operator new();
  *(_QWORD *)(v30 + 272) = 0;
  *(_OWORD *)(v30 + 240) = 0u;
  *(_OWORD *)(v30 + 256) = 0u;
  *(_OWORD *)(v30 + 208) = 0u;
  *(_OWORD *)(v30 + 224) = 0u;
  *(_OWORD *)(v30 + 176) = 0u;
  *(_OWORD *)(v30 + 192) = 0u;
  *(_OWORD *)(v30 + 144) = 0u;
  *(_OWORD *)(v30 + 160) = 0u;
  *(_OWORD *)(v30 + 112) = 0u;
  *(_OWORD *)(v30 + 128) = 0u;
  *(_OWORD *)(v30 + 80) = 0u;
  *(_OWORD *)(v30 + 96) = 0u;
  *(_OWORD *)(v30 + 48) = 0u;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  *(_OWORD *)v30 = 0u;
  sub_20E863438(v30);
  __p[0] = (void *)v30;
  std::ostream::operator<<();
  v31 = *(_DWORD *)(v30 + 120);
  if ((v31 & 0x10) != 0)
  {
    v34 = *(_QWORD *)(v30 + 112);
    v35 = *(_QWORD *)(v30 + 72);
    if (v34 < v35)
    {
      *(_QWORD *)(v30 + 112) = v35;
      v34 = v35;
    }
    v36 = *(const void **)(v30 + 64);
    v32 = v34 - (_QWORD)v36;
    if (v34 - (unint64_t)v36 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_80;
  }
  else
  {
    if ((v31 & 8) == 0)
    {
      v32 = 0;
      HIBYTE(v55) = 0;
      p_dst = &__dst;
      goto LABEL_65;
    }
    v36 = *(const void **)(v30 + 40);
    v32 = *(_QWORD *)(v30 + 56) - (_QWORD)v36;
    if (v32 > 0x7FFFFFFFFFFFFFF7)
LABEL_80:
      sub_20E860B7C();
  }
  if (v32 >= 0x17)
  {
    v38 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v38 = v32 | 7;
    v39 = v38 + 1;
    p_dst = (__int128 *)operator new(v38 + 1);
    *((_QWORD *)&__dst + 1) = v32;
    v55 = v39 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_64;
  }
  HIBYTE(v55) = v32;
  p_dst = &__dst;
  if (v32)
LABEL_64:
    memmove(p_dst, v36, v32);
LABEL_65:
  *((_BYTE *)p_dst + v32) = 0;
  v40 = (char *)__p[0];
  if (__p[0])
  {
    v41 = MEMORY[0x24BEDB7F0];
    v42 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)__p[0] = *MEMORY[0x24BEDB7F0];
    v43 = *(_QWORD *)(v41 + 72);
    *(_QWORD *)&v40[*(_QWORD *)(v42 - 24)] = *(_QWORD *)(v41 + 64);
    *((_QWORD *)v40 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v40 + 2) = v43;
    if (v40[111] < 0)
      operator delete(*((void **)v40 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v40 + 128);
    MEMORY[0x212BC6398](v40, 0x10B2C40EED050F3);
  }
  __p[0] = &v47;
  __p[1] = &__dst;
  __p[2] = &v47;
  v51 = &__dst;
  v52 = &__dst;
  if (v49 == -1)
    sub_20E877AB8();
  v53 = __p;
  ((void (*)(void ***, _QWORD **))off_24CA0C438[v49])(&v53, &v47);
  if (SHIBYTE(v55) < 0)
    operator delete((void *)__dst);
  if (v49 == -1)
    sub_20E877AB8();
  __p[0] = &__dst;
  ((void (*)(void **, _QWORD **))off_24CA0C468[v49])(__p, &v47);
  if (v49 != -1)
    ((void (*)(void **, _QWORD **))off_24CA0C450[v49])(__p, &v47);
  v44 = (char *)a1[1];
  if (v44[23] < 0)
  {
    v44 = *(char **)v44;
    v45 = *(_QWORD *)(a1[1] + 8);
  }
  else
  {
    v45 = v44[23];
  }
  sub_20E9E507C(v44, v45, ".", 1, 0, (uint64_t)(a1 + 6));
  a1[11] = 0;
  a1[10] = (uint64_t)(a1 + 11);
  a1[9] = a5;
  a1[12] = 0;
  sub_20FF22DD8(a1 + 10, *(_QWORD **)a6, (_QWORD *)(a6 + 8));
  return a1;
}

void sub_20FF1E31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a22 && a21 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FF1E3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  sub_20E877A60((uint64_t)&a9);
  sub_20E86665C(v24);
  _Unwind_Resume(a1);
}

void sub_20FF1E400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20FD0DE48((uint64_t *)va);
  JUMPOUT(0x20FF1E40CLL);
}

uint64_t sub_20FF1E424(uint64_t a1)
{
  return a1 + 240;
}

uint64_t *sub_20FF1E42C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 48) && *(char *)(v2 + 47) < 0)
    {
      operator delete(*(void **)(v2 + 24));
      if ((*(char *)(v2 + 23) & 0x80000000) == 0)
        goto LABEL_6;
    }
    else if ((*(char *)(v2 + 23) & 0x80000000) == 0)
    {
LABEL_6:
      MEMORY[0x212BC6398](v2, 0x1012C4045E9F9B4);
      return a1;
    }
    operator delete(*(void **)v2);
    goto LABEL_6;
  }
  return a1;
}

void sub_20FF1E4A4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void *v98;
  unint64_t v99;
  char *v100;
  void *v101;
  char *v102;
  char *v103;
  char *v104;
  void *v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  char *v110;
  int64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  int64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 *v149;
  _OWORD *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  unint64_t v156;
  _BYTE *v157;
  unint64_t v158;
  char *v159;
  int64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 *v167;
  _OWORD *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  void **v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  char *v176;
  void *v177;
  _QWORD *v179;
  void *__p[2];
  __int128 v181;
  __int128 v182;
  void *v183;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD **)(v1 + 80);
  v3 = (_QWORD *)(v1 + 88);
  *(_OWORD *)__p = 0u;
  v181 = 0u;
  v182 = 0u;
  if (v2 == v3)
    goto LABEL_207;
  v4 = 0;
  v5 = v2;
  do
  {
    v6 = v4;
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    ++v4;
    v5 = v8;
  }
  while (v8 != v3);
  v10 = v6 + 2;
  v11 = (unint64_t)(v6 + 2) >> 9;
  if ((v10 & 0x1FF) != 0)
    v12 = v11 + 1;
  else
    v12 = v11;
  if (!v12)
  {
    v64 = 0;
    v15 = 0;
    v65 = v4 + ((uint64_t)-MEMORY[0] >> 3);
    if (v65 < 1)
      goto LABEL_74;
    goto LABEL_71;
  }
  v13 = (char *)operator new(8 * v12);
  v14 = &v13[8 * v12];
  v15 = v13;
  v16 = v13;
  do
  {
    v17 = operator new(0x1000uLL);
    if (v16 != v14)
      goto LABEL_16;
    if (v15 > v13)
    {
      v18 = (v15 - v13) >> 3;
      if (v18 >= -1)
        v19 = v18 + 1;
      else
        v19 = v18 + 2;
      v20 = v19 >> 1;
      v21 = &v15[-8 * (v19 >> 1)];
      v22 = v14;
      if (v14 != v15)
      {
        memmove(v21, v15, v14 - v15);
        v22 = v15;
      }
      v16 = &v21[v14 - v15];
      v15 = &v22[-8 * v20];
      goto LABEL_16;
    }
    if (v14 == v13)
      v23 = 1;
    else
      v23 = (v14 - v13) >> 2;
    if (v23 >> 61)
      sub_20E877A38();
    v24 = (char *)operator new(8 * v23);
    v25 = v13;
    v26 = v23 >> 2;
    v27 = &v24[8 * (v23 >> 2)];
    v16 = v27;
    v28 = v14 - v15;
    if (v14 != v15)
    {
      v16 = &v27[v28 & 0xFFFFFFFFFFFFFFF8];
      v29 = v28 - 8;
      if (v29 >= 0x38 && (v30 = 8 * v26, (unint64_t)(&v24[8 * v26] - v15) >= 0x20))
      {
        v34 = (v29 >> 3) + 1;
        v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
        v31 = &v27[v35];
        v32 = &v15[v35];
        v36 = (__int128 *)(v15 + 16);
        v37 = &v24[v30 + 16];
        v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v39 = *v36;
          *((_OWORD *)v37 - 1) = *(v36 - 1);
          *(_OWORD *)v37 = v39;
          v36 += 2;
          v37 += 32;
          v38 -= 4;
        }
        while (v38);
        if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_33;
      }
      else
      {
        v31 = &v24[8 * (v23 >> 2)];
        v32 = v15;
      }
      do
      {
        v33 = *(_QWORD *)v32;
        v32 += 8;
        *(_QWORD *)v31 = v33;
        v31 += 8;
      }
      while (v31 != v16);
    }
LABEL_33:
    v14 = &v24[8 * v23];
    if (v25)
      operator delete(v25);
    v15 = &v24[8 * (v23 >> 2)];
    v13 = v24;
LABEL_16:
    *(_QWORD *)v16 = v17;
    v16 += 8;
    --v12;
  }
  while (v12);
  v40 = (char *)__p[1];
  v41 = (char *)v181;
  while (v41 != v40)
  {
    if (v15 == v13)
    {
      if (v16 >= v14)
      {
        if (v14 == v13)
          v47 = 1;
        else
          v47 = (v14 - v13) >> 2;
        if (v47 >> 61)
          sub_20E877A38();
        v48 = (char *)operator new(8 * v47);
        v49 = v48;
        v50 = (v47 + 3) >> 2;
        v15 = &v48[8 * v50];
        v51 = v16 - v13;
        v9 = v16 == v13;
        v16 = v15;
        if (!v9)
        {
          v16 = &v15[v51 & 0xFFFFFFFFFFFFFFF8];
          v52 = v51 - 8;
          v53 = &v48[8 * v50];
          v54 = v13;
          if (v52 < 0x38)
            goto LABEL_228;
          v55 = 8 * v50;
          v53 = &v48[8 * v50];
          v54 = v13;
          if ((unint64_t)(v53 - v13) < 0x20)
            goto LABEL_228;
          v56 = (v52 >> 3) + 1;
          v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
          v53 = &v15[v57];
          v54 = &v13[v57];
          v58 = (__int128 *)(v13 + 16);
          v59 = &v48[v55 + 16];
          v60 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61 = *v58;
            *((_OWORD *)v59 - 1) = *(v58 - 1);
            *(_OWORD *)v59 = v61;
            v58 += 2;
            v59 += 32;
            v60 -= 4;
          }
          while (v60);
          if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_228:
            do
            {
              v62 = *(_QWORD *)v54;
              v54 += 8;
              *(_QWORD *)v53 = v62;
              v53 += 8;
            }
            while (v53 != v16);
          }
        }
        v14 = &v48[8 * v47];
        if (v13)
          operator delete(v13);
        v13 = v49;
      }
      else
      {
        v43 = (v14 - v16) >> 3;
        if (v43 >= -1)
          v44 = v43 + 1;
        else
          v44 = v43 + 2;
        v45 = v44 >> 1;
        v15 = &v13[8 * (v44 >> 1)];
        v46 = v13;
        if (v16 != v13)
        {
          memmove(v15, v13, v16 - v13);
          v46 = v16;
        }
        v16 = &v46[8 * v45];
      }
    }
    v42 = *((_QWORD *)v41 - 1);
    v41 -= 8;
    *((_QWORD *)v15 - 1) = v42;
    v15 -= 8;
    v40 = (char *)__p[1];
  }
  v63 = __p[0];
  __p[0] = v13;
  __p[1] = v15;
  *(_QWORD *)&v181 = v16;
  *((_QWORD *)&v181 + 1) = v14;
  *(_QWORD *)&v182 = 0;
  if (v63)
    operator delete(v63);
  if (v16 == v15)
  {
    v64 = 0;
    v65 = v4 + ((uint64_t)-*(_QWORD *)v15 >> 3);
    if (v65 < 1)
      goto LABEL_74;
    goto LABEL_71;
  }
  v64 = *(_QWORD **)v15;
  v65 = v4;
  if (v4 >= 1)
  {
LABEL_71:
    v66 = &v15[8 * ((unint64_t)v65 >> 9)];
    v67 = *(_QWORD *)v66 + 8 * (v65 & 0x1FF);
    if (v64 == (_QWORD *)v67)
      goto LABEL_207;
LABEL_75:
    v68 = 0;
    do
    {
      v69 = v67;
      if (v15 != v66)
        v69 = *(_QWORD *)v15 + 4096;
      if (v64 == (_QWORD *)v69)
      {
        v69 = (uint64_t)v64;
      }
      else
      {
        v70 = v64;
        do
        {
          *v70++ = v2[4];
          v71 = (_QWORD *)v2[1];
          v72 = v2;
          if (v71)
          {
            do
            {
              v2 = v71;
              v71 = (_QWORD *)*v71;
            }
            while (v71);
          }
          else
          {
            do
            {
              v2 = (_QWORD *)v72[2];
              v9 = *v2 == (_QWORD)v72;
              v72 = v2;
            }
            while (!v9);
          }
        }
        while (v70 != (_QWORD *)v69);
      }
      v68 += (v69 - (uint64_t)v64) >> 3;
      if (v15 == v66)
        break;
      v73 = (_QWORD *)*((_QWORD *)v15 + 1);
      v15 += 8;
      v64 = v73;
    }
    while (v73 != (_QWORD *)v67);
    *((_QWORD *)&v182 + 1) = v68;
    if (!v68)
      goto LABEL_207;
    v74 = 0;
    v75 = (void **)__p[1];
    while (1)
    {
      v76 = *(uint64_t *)((char *)v75 + ((v74 >> 6) & 0x3FFFFFFFFFFFFF8));
      v77 = *(_QWORD *)(v76 + 8 * (v74 & 0x1FF));
      if (!**(_BYTE **)(v77 + 32))
      {
        v79 = *(unint64_t **)(v77 + 40);
        v80 = atomic_load(*(unint64_t **)(a1 + 40));
        do
          __ldaxr(v79);
        while (__stlxr(v80, v79));
        v81 = *(_QWORD *)(*(_QWORD *)(v76 + 8 * (v74 & 0x1FF)) + 48);
        v82 = *(_QWORD **)(v81 + 80);
        v68 = *((_QWORD *)&v182 + 1);
        v74 = v182;
        v179 = (_QWORD *)(v81 + 88);
        if (v82 != (_QWORD *)(v81 + 88))
          break;
      }
LABEL_94:
      v75 = (void **)__p[1];
      --v68;
      v78 = v74 + 1;
      *(_QWORD *)&v182 = v74 + 1;
      *((_QWORD *)&v182 + 1) = v68;
      if (v74 + 1 >= 0x400)
      {
        v75 = (void **)((char *)__p[1] + 8);
        operator delete(*(void **)__p[1]);
        v78 = v74 - 511;
        __p[1] = v75;
        *(_QWORD *)&v182 = v74 - 511;
      }
      v74 = v78;
      if (!v68)
        goto LABEL_208;
    }
    while (1)
    {
      v84 = (char *)__p[1];
      v83 = (char *)v181;
      v85 = v181 - (unint64_t)__p[1];
      if ((void *)v181 == __p[1])
        v86 = 0;
      else
        v86 = (((_QWORD)v181 - (unint64_t)__p[1]) << 6) - 1;
      v87 = v74 + v68;
      if (v86 != v74 + v68)
        goto LABEL_187;
      if (v74 >= 0x200)
      {
        *(_QWORD *)&v182 = v74 - 512;
        v88 = (char *)__p[1] + 8;
        v89 = *(_QWORD *)__p[1];
        __p[1] = (char *)__p[1] + 8;
        if ((_QWORD)v181 != *((_QWORD *)&v181 + 1))
        {
LABEL_184:
          *(_QWORD *)v83 = v89;
          goto LABEL_185;
        }
        v90 = __p[0];
        if (v88 > __p[0])
        {
          v91 = (v88 - (char *)__p[0]) >> 3;
          if (v91 >= -1)
            v92 = v91 + 1;
          else
            v92 = v91 + 2;
          v93 = v92 >> 1;
          v94 = &v88[-8 * (v92 >> 1)];
          v95 = v181 - (_QWORD)v88;
          if ((char *)v181 != v88)
          {
            memmove(&v88[-8 * (v92 >> 1)], v84 + 8, v181 - (_QWORD)v88);
            v83 = v84 + 8;
          }
          v96 = &v83[-8 * v93];
          v83 = &v94[v95];
          __p[1] = v96;
          *(_QWORD *)&v181 = &v94[v95];
          goto LABEL_184;
        }
        if ((void *)v181 == __p[0])
          v107 = 1;
        else
          v107 = (uint64_t)(v181 - (unint64_t)__p[0]) >> 2;
        if (v107 >> 61)
          goto LABEL_222;
        v108 = operator new(8 * v107);
        v109 = v107 >> 2;
        v110 = &v108[8 * (v107 >> 2)];
        v111 = v83 - v88;
        v9 = v83 == v88;
        v83 = v110;
        if (!v9)
        {
          v83 = &v110[v111 & 0xFFFFFFFFFFFFFFF8];
          v112 = v111 - 8;
          if (v112 < 0x38)
          {
            v113 = &v108[8 * (v107 >> 2)];
            goto LABEL_181;
          }
          v145 = 8 * v109;
          v146 = &v108[8 * v109] - v88;
          v113 = &v108[8 * (v107 >> 2)];
          if (v146 < 0x20)
            goto LABEL_229;
          v147 = (v112 >> 3) + 1;
          v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
          v113 = &v110[v148];
          v88 += v148;
          v149 = (__int128 *)(v84 + 24);
          v150 = &v108[v145 + 16];
          v151 = v147 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v152 = *v149;
            *(v150 - 1) = *(v149 - 1);
            *v150 = v152;
            v149 += 2;
            v150 += 2;
            v151 -= 4;
          }
          while (v151);
          if (v147 != (v147 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_229:
            do
            {
LABEL_181:
              v153 = *(_QWORD *)v88;
              v88 += 8;
              *(_QWORD *)v113 = v153;
              v113 += 8;
            }
            while (v113 != v83);
          }
        }
        __p[0] = v108;
        __p[1] = &v108[8 * (v107 >> 2)];
        *(_QWORD *)&v181 = v83;
        *((_QWORD *)&v181 + 1) = &v108[8 * v107];
        if (v90)
          operator delete(v90);
        goto LABEL_184;
      }
      v97 = v85 >> 3;
      v98 = __p[0];
      if (v85 >> 3 >= (unint64_t)((uint64_t)(*((_QWORD *)&v181 + 1) - (unint64_t)__p[0]) >> 3))
        break;
      if (*((_QWORD *)&v181 + 1) == (_QWORD)v181)
      {
        v183 = operator new(0x1000uLL);
        sub_20E8D0E10(__p, &v183);
        v115 = (char *)__p[1];
        v114 = (char *)v181;
        v116 = (char *)__p[1] + 8;
        v117 = *(_QWORD *)__p[1];
        __p[1] = (char *)__p[1] + 8;
        if ((_QWORD)v181 != *((_QWORD *)&v181 + 1))
          goto LABEL_138;
        v139 = __p[0];
        if (v116 > __p[0])
        {
          v140 = (v116 - (char *)__p[0]) >> 3;
          if (v140 >= -1)
            v141 = v140 + 1;
          else
            v141 = v140 + 2;
          v142 = v141 >> 1;
          v143 = &v116[-8 * v142];
          v144 = v181 - (_QWORD)v116;
          if ((char *)v181 != v116)
            memmove(&v116[-8 * v142], v116, v181 - (_QWORD)v116);
          __p[1] = v143;
          *(_QWORD *)&v181 = &v143[v144];
          *(_QWORD *)&v143[v144] = v117;
          goto LABEL_185;
        }
        if ((void *)v181 == __p[0])
          v156 = 1;
        else
          v156 = (uint64_t)(v181 - (unint64_t)__p[0]) >> 2;
        if (v156 >> 61)
          goto LABEL_222;
        v157 = operator new(8 * v156);
        v158 = v156 >> 2;
        v159 = &v157[8 * (v156 >> 2)];
        v160 = v114 - v116;
        v9 = v114 == v116;
        v114 = v159;
        if (!v9)
        {
          v114 = &v159[v160 & 0xFFFFFFFFFFFFFFF8];
          v161 = v160 - 8;
          if (v161 < 0x38)
          {
            v162 = &v157[8 * (v156 >> 2)];
            goto LABEL_204;
          }
          v163 = 8 * v158;
          v164 = &v157[8 * v158] - v116;
          v162 = &v157[8 * (v156 >> 2)];
          if (v164 < 0x20)
            goto LABEL_230;
          v165 = (v161 >> 3) + 1;
          v166 = 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
          v162 = &v159[v166];
          v116 += v166;
          v167 = (__int128 *)(v115 + 24);
          v168 = &v157[v163 + 16];
          v169 = v165 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v170 = *v167;
            *(v168 - 1) = *(v167 - 1);
            *v168 = v170;
            v167 += 2;
            v168 += 2;
            v169 -= 4;
          }
          while (v169);
          if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_230:
            do
            {
LABEL_204:
              v171 = *(_QWORD *)v116;
              v116 += 8;
              *(_QWORD *)v162 = v171;
              v162 += 8;
            }
            while (v162 != v114);
          }
        }
        __p[0] = v157;
        __p[1] = &v157[8 * (v156 >> 2)];
        *(_QWORD *)&v181 = v114;
        *((_QWORD *)&v181 + 1) = &v157[8 * v156];
        if (v139)
          operator delete(v139);
LABEL_138:
        *(_QWORD *)v114 = v117;
LABEL_185:
        *(_QWORD *)&v181 = v181 + 8;
        goto LABEL_186;
      }
      v183 = operator new(0x1000uLL);
      sub_20E8D0C84((char **)__p, &v183);
LABEL_186:
      v68 = *((_QWORD *)&v182 + 1);
      v74 = v182;
      v84 = (char *)__p[1];
      v87 = v182 + *((_QWORD *)&v182 + 1);
LABEL_187:
      *(_QWORD *)(*(_QWORD *)&v84[(v87 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v87 & 0x1FF)) = v82[4];
      *((_QWORD *)&v182 + 1) = ++v68;
      v154 = (_QWORD *)v82[1];
      if (v154)
      {
        do
        {
          v155 = v154;
          v154 = (_QWORD *)*v154;
        }
        while (v154);
      }
      else
      {
        do
        {
          v155 = (_QWORD *)v82[2];
          v9 = *v155 == (_QWORD)v82;
          v82 = v155;
        }
        while (!v9);
      }
      v82 = v155;
      if (v155 == v179)
        goto LABEL_94;
    }
    if (*((void **)&v181 + 1) == __p[0])
      v99 = 1;
    else
      v99 = (uint64_t)(*((_QWORD *)&v181 + 1) - (unint64_t)__p[0]) >> 2;
    if (v99 >> 61)
LABEL_222:
      sub_20E877A38();
    v100 = (char *)operator new(8 * v99);
    v101 = operator new(0x1000uLL);
    v102 = &v100[8 * v97];
    v103 = &v100[8 * v99];
    if (v97 != v99)
    {
      *(_QWORD *)v102 = v101;
      v104 = v102 + 8;
      if (v83 == v84)
        goto LABEL_123;
      do
      {
LABEL_147:
        if (v102 == v100)
        {
          if (v104 >= v103)
          {
            if (v103 == v102)
              v124 = 1;
            else
              v124 = (v103 - v102) >> 2;
            if (v124 >> 61)
              sub_20E877A38();
            v125 = (char *)operator new(8 * v124);
            v100 = v125;
            v126 = (v124 + 3) >> 2;
            v119 = &v125[8 * v126];
            v127 = v104 - v102;
            v9 = v104 == v102;
            v104 = v119;
            if (!v9)
            {
              v104 = &v119[v127 & 0xFFFFFFFFFFFFFFF8];
              v128 = v127 - 8;
              v129 = &v125[8 * v126];
              v130 = v102;
              if (v128 < 0x38)
                goto LABEL_231;
              v131 = 8 * v126;
              v129 = &v125[8 * v126];
              v130 = v102;
              if ((unint64_t)(v129 - v102) < 0x20)
                goto LABEL_231;
              v132 = (v128 >> 3) + 1;
              v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
              v129 = &v119[v133];
              v130 = &v102[v133];
              v134 = (__int128 *)(v102 + 16);
              v135 = &v125[v131 + 16];
              v136 = v132 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v137 = *v134;
                *((_OWORD *)v135 - 1) = *(v134 - 1);
                *(_OWORD *)v135 = v137;
                v134 += 2;
                v135 += 32;
                v136 -= 4;
              }
              while (v136);
              if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_231:
                do
                {
                  v138 = *(_QWORD *)v130;
                  v130 += 8;
                  *(_QWORD *)v129 = v138;
                  v129 += 8;
                }
                while (v129 != v104);
              }
            }
            v103 = &v125[8 * v124];
            operator delete(v102);
          }
          else
          {
            v121 = (v103 - v104) >> 3;
            if (v121 >= -1)
              v122 = v121 + 1;
            else
              v122 = v121 + 2;
            v123 = &v104[8 * (v122 >> 1)];
            v119 = &v102[8 * (v122 >> 1)];
            if (v104 == v102)
            {
              v100 = v104;
            }
            else
            {
              memmove(&v102[8 * (v122 >> 1)], v102, v104 - v102);
              v100 = v102;
            }
            v104 = v123;
          }
        }
        else
        {
          v119 = v102;
        }
        v120 = *((_QWORD *)v83 - 1);
        v83 -= 8;
        *((_QWORD *)v119 - 1) = v120;
        v102 = v119 - 8;
      }
      while (v83 != __p[1]);
      v98 = __p[0];
      __p[0] = v100;
      __p[1] = v102;
      *(_QWORD *)&v181 = v104;
      *((_QWORD *)&v181 + 1) = v103;
      if (!v98)
        goto LABEL_186;
LABEL_169:
      operator delete(v98);
      goto LABEL_186;
    }
    v105 = v101;
    if (v85 < 1)
    {
      if (v83 == v84)
        v118 = 1;
      else
        v118 = v85 >> 2;
      if (v118 >> 61)
        sub_20E877A38();
      v102 = (char *)operator new(8 * v118);
      v103 = &v102[8 * v118];
      operator delete(v100);
      v100 = v102;
      *(_QWORD *)v102 = v105;
      v104 = v102 + 8;
      if (v83 != v84)
        goto LABEL_147;
    }
    else
    {
      v106 = v97 + 2;
      if (v97 >= -1)
        v106 = v97 + 1;
      v102 -= 8 * (v106 >> 1);
      *(_QWORD *)v102 = v101;
      v104 = v102 + 8;
      if (v83 != v84)
        goto LABEL_147;
    }
LABEL_123:
    __p[0] = v100;
    __p[1] = v102;
    *(_QWORD *)&v181 = v104;
    *((_QWORD *)&v181 + 1) = v103;
    if (!v98)
      goto LABEL_186;
    goto LABEL_169;
  }
LABEL_74:
  v66 = &v15[-8 * ((unint64_t)(511 - v65) >> 9)];
  v67 = *(_QWORD *)v66 + 8 * (~(511 - (_WORD)v65) & 0x1FF);
  if (v64 != (_QWORD *)v67)
    goto LABEL_75;
LABEL_207:
  v75 = (void **)__p[1];
LABEL_208:
  v172 = (void **)v181;
  *((_QWORD *)&v182 + 1) = 0;
  v173 = v181 - (_QWORD)v75;
  if ((_QWORD)v181 - (_QWORD)v75 >= 0x11uLL)
  {
    do
    {
      v174 = *v75++;
      operator delete(v174);
      __p[1] = v75;
      v173 -= 8;
    }
    while (v173 > 0x10);
  }
  if (v173 >> 3 == 1)
  {
    v175 = 256;
LABEL_214:
    *(_QWORD *)&v182 = v175;
  }
  else if (v173 >> 3 == 2)
  {
    v175 = 512;
    goto LABEL_214;
  }
  v176 = (char *)((char *)v75 - (char *)v172);
  if (v75 != v172)
  {
    do
    {
      v177 = *v75++;
      operator delete(v177);
    }
    while (v75 != v172);
    *(_QWORD *)&v181 = (char *)v172 + ((unint64_t)(v176 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_20FF1F0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v14;

  if (a13 == a12)
  {
    v14 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v14 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_20FF1F0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;

  operator delete(v12);
  operator delete(v11);
  sub_20E8D41E8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20FF1F0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  void *v15;

  if (v13)
  {
    operator delete(v13);
    if (a13 == a12)
    {
LABEL_3:
      v15 = a11;
      if (!a11)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if (a13 == a12)
  {
    goto LABEL_3;
  }
  v15 = a11;
  if (!a11)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_20FF1F158()
{
  __cxa_end_catch();
  JUMPOUT(0x20FF1F160);
}

void sub_20FF1F1F8(_QWORD *a1, uint64_t a2, int a3)
{
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;

  if (**(_BYTE **)(a2 + 32))
  {
    v6 = *(unint64_t **)(a2 + 40);
    v7 = atomic_load(*(unint64_t **)(a1[9] + 40));
    do
      __ldaxr(v6);
    while (__stlxr(v7, v6));
    sub_20FF1E4A4(a2);
    v8 = (_BYTE *)operator new();
    *v8 = 0;
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v8;
    if (v9)
      MEMORY[0x212BC6398](v9, 0x1000C4077774924);
    if (a3)
    {
      v10 = *a1;
      v11 = *(std::mutex **)(*a1 + 8);
      std::mutex::lock(v11);
      v12 = *(_QWORD **)(v10 + 16);
      v13 = (_QWORD *)(v10 + 24);
      if (v12 != v13)
      {
        do
        {
          v14 = *(char *)(a2 + 31);
          if (v14 >= 0)
            v15 = a2 + 8;
          else
            v15 = *(_QWORD *)(a2 + 8);
          if (v14 >= 0)
            v16 = *(unsigned __int8 *)(a2 + 31);
          else
            v16 = *(_QWORD *)(a2 + 16);
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12[4] + 16))(v12[4], v15, v16, 0);
          v17 = (_QWORD *)v12[1];
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (_QWORD *)v12[2];
              v19 = *v18 == (_QWORD)v12;
              v12 = v18;
            }
            while (!v19);
          }
          v12 = v18;
        }
        while (v18 != v13);
      }
      std::mutex::unlock(v11);
    }
  }
}

void sub_20FF1F348(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20FF1F35C(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BYTE *v8;
  uint64_t v9;
  std::mutex *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;

  v8 = *(_BYTE **)(a2 + 32);
  if (*v8)
  {
    if (*v8 != (_DWORD)a3)
    {
      *v8 = a3;
      if (a4)
      {
        v9 = *a1;
        v10 = *(std::mutex **)(*a1 + 8);
        std::mutex::lock(v10);
        v11 = *(_QWORD **)(v9 + 16);
        v12 = (_QWORD *)(v9 + 24);
        if (v11 != v12)
        {
          do
          {
            v13 = *(char *)(a2 + 31);
            if (v13 >= 0)
              v14 = a2 + 8;
            else
              v14 = *(_QWORD *)(a2 + 8);
            if (v13 >= 0)
              v15 = *(unsigned __int8 *)(a2 + 31);
            else
              v15 = *(_QWORD *)(a2 + 16);
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[4] + 16))(v11[4], v14, v15, a3);
            v16 = (_QWORD *)v11[1];
            if (v16)
            {
              do
              {
                v17 = v16;
                v16 = (_QWORD *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v17 = (_QWORD *)v11[2];
                v18 = *v17 == (_QWORD)v11;
                v11 = v17;
              }
              while (!v18);
            }
            v11 = v17;
          }
          while (v17 != v12);
        }
LABEL_40:
        std::mutex::unlock(v10);
      }
    }
  }
  else
  {
    v19 = (_BYTE *)operator new();
    *v19 = a3;
    v20 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v19;
    if (v20)
    {
      MEMORY[0x212BC6398](v20, 0x1000C4077774924);
      v19 = *(_BYTE **)(a2 + 32);
    }
    v21 = (unint64_t *)operator new();
    *v21 = (unint64_t)v19;
    v22 = *(unint64_t **)(a2 + 40);
    v23 = atomic_load(v21);
    do
      __ldaxr(v22);
    while (__stlxr(v23, v22));
    MEMORY[0x212BC6398]();
    sub_20FF1E4A4(a2);
    if (a4)
    {
      v24 = *a1;
      v10 = *(std::mutex **)(*a1 + 8);
      std::mutex::lock(v10);
      v25 = *(_QWORD **)(v24 + 16);
      v26 = (_QWORD *)(v24 + 24);
      if (v25 != v26)
      {
        do
        {
          v27 = *(char *)(a2 + 31);
          if (v27 >= 0)
            v28 = a2 + 8;
          else
            v28 = *(_QWORD *)(a2 + 8);
          if (v27 >= 0)
            v29 = *(unsigned __int8 *)(a2 + 31);
          else
            v29 = *(_QWORD *)(a2 + 16);
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[4] + 16))(v25[4], v28, v29, a3);
          v30 = (_QWORD *)v25[1];
          if (v30)
          {
            do
            {
              v31 = v30;
              v30 = (_QWORD *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              v31 = (_QWORD *)v25[2];
              v18 = *v31 == (_QWORD)v25;
              v25 = v31;
            }
            while (!v18);
          }
          v25 = v31;
        }
        while (v31 != v26);
      }
      goto LABEL_40;
    }
  }
}

void sub_20FF1F57C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20FF1F590(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20FF1F5A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_mutex_base *v6;
  uint64_t v7;
  std::runtime_error *exception;

  if ((_DWORD)a3)
  {
    v6 = (std::__shared_mutex_base *)(*a1 + 72);
    std::__shared_mutex_base::lock(v6);
    sub_20FF1F35C(a1, a2, a3, 1);
  }
  else
  {
    v7 = *(unsigned __int8 *)(a2 + 31);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Cannot set root context to inherit its enable-state");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v6 = (std::__shared_mutex_base *)(*a1 + 72);
    std::__shared_mutex_base::lock(v6);
    sub_20FF1F1F8(a1, a2, 1);
  }
  std::__shared_mutex_base::unlock(v6);
}

void sub_20FF1F66C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FF1F684(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF1F69C(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_20FF1F6A4(uint64_t a1, void *__src, size_t __len, uint64_t *a4, char a5)
{
  void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;

  *(_QWORD *)a1 = off_24CA0C2A8;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    *(_QWORD *)(a1 + 16) = __len;
    *(_QWORD *)(a1 + 24) = v12 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v10;
  }
  else
  {
    *(_BYTE *)(a1 + 31) = __len;
    v10 = (void *)(a1 + 8);
    if (!__len)
      goto LABEL_9;
  }
  memmove(v10, __src, __len);
LABEL_9:
  *((_BYTE *)v10 + __len) = 0;
  v13 = (_BYTE *)operator new();
  *v13 = a5;
  *(_QWORD *)(a1 + 32) = v13;
  v14 = (_QWORD *)operator new();
  *v14 = v13;
  *(_QWORD *)(a1 + 40) = v14;
  v15 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 48) = v15;
  return a1;
}

void sub_20FF1F7BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v4)
  {
    MEMORY[0x212BC6398](v4, 0x1000C4077774924);
    if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF1F818(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    sub_20FF2209C(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    MEMORY[0x212BC6398](v3, 0x80C40B8603338);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    MEMORY[0x212BC6398](v4, 0x1000C4077774924);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20FF1F8A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    sub_20FF2209C(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    MEMORY[0x212BC6398](v3, 0x80C40B8603338);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    MEMORY[0x212BC6398](v4, 0x1000C4077774924);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

void sub_20FF1F938(uint64_t a1, uint64_t a2)
{
  sub_20FF1F5A4(*(uint64_t **)(a1 + 48), a1, a2);
}

uint64_t sub_20FF1F948(uint64_t a1)
{
  return **(_QWORD **)(a1 + 48);
}

uint64_t sub_20FF1F954(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) + 8;
}

uint64_t sub_20FF1F960(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) + 24;
}

uint64_t sub_20FF1F96C(uint64_t a1, char *a2, uint64_t a3)
{
  std::__shared_mutex_base *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[5];
  char v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v6 = (std::__shared_mutex_base *)(**(_QWORD **)(a1 + 48) + 72);
  std::__shared_mutex_base::lock_shared(v6);
  v7 = &a2[a3];
  v8 = 0;
  if (a3)
  {
    while (a2[v8] != 46)
    {
      if (a3 == ++v8)
      {
        v8 = a3;
        break;
      }
    }
  }
  v9 = 0;
  v15[0] = (uint64_t)a2;
  v15[1] = (uint64_t)&a2[a3];
  v15[2] = (uint64_t)a2;
  v15[3] = (uint64_t)a2;
  v15[4] = v8;
  v16 = 46;
  v17 = &unk_2103F1250;
  v18 = &unk_2103F1250;
  v19 = &unk_2103F1250;
  v20 = &unk_2103F1250;
  v21 = 0;
  v22 = 0;
  if (a3 && a2 != (char *)&unk_2103F1250)
  {
    v9 = 0;
    do
    {
      ++v9;
      v10 = &a2[v8];
      if (v10 == v7)
        break;
      a2 = v10 + 1;
      if (v10 + 1 == v7)
      {
        v8 = 0;
        a2 = v7;
      }
      else
      {
        v8 = 0;
        while (a2[v8] != 46)
        {
          if (v7 - a2 == ++v8)
          {
            v8 = v7 - a2;
            break;
          }
        }
      }
    }
    while (a2 != (char *)&unk_2103F1250);
  }
  v23 = v9;
  v13 = a1;
  LOBYTE(v14) = 0;
  sub_20FF22178(a1, v15, 0, (uint64_t)&v13);
  v11 = v13;
  std::__shared_mutex_base::unlock_shared(v6);
  return v11;
}

uint64_t **sub_20FF1FAB0(uint64_t a1, char *a2, size_t a3)
{
  std::__shared_mutex_base *v6;
  uint64_t v7;
  uint64_t **v8;

  v6 = (std::__shared_mutex_base *)(a1 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 72));
  v8 = sub_20FF1FC58(a1, v7, a2, a3, 1);
  std::__shared_mutex_base::unlock(v6);
  return v8;
}

void sub_20FF1FB10(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20FF1FB28(uint64_t a1, const void *a2, size_t a3)
{
  std::__shared_mutex_base *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;

  v6 = (std::__shared_mutex_base *)(a1 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 72));
  v9 = *(uint64_t **)(a1 + 56);
  v7 = (uint64_t *)(a1 + 56);
  v8 = v9;
  if (!v9)
    goto LABEL_32;
  v10 = v7;
  do
  {
    while (1)
    {
      v11 = *((char *)v8 + 55);
      v12 = v11 >= 0 ? v8 + 4 : (uint64_t *)v8[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v8 + 55) : v8[5];
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(a2, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v8 = (uint64_t *)v8[1];
      if (!v8)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v8;
    v8 = (uint64_t *)*v8;
  }
  while (v8);
LABEL_18:
  if (v10 == v7)
    goto LABEL_32;
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= a3)
    v19 = a3;
  else
    v19 = v18;
  v20 = memcmp(a2, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_30;
LABEL_32:
    v22 = 0;
    v21 = 0;
  }
  else
  {
    if (a3 < v18)
      goto LABEL_32;
LABEL_30:
    v21 = v10[7] & 0xFFFFFFFFFFFFFF00;
    v22 = v10[7];
  }
  std::__shared_mutex_base::unlock(v6);
  return v21 | v22;
}

uint64_t **sub_20FF1FC58(uint64_t a1, uint64_t a2, char *a3, size_t a4, int a5)
{
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t **v11;
  char *v12;
  char *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t **v23;
  BOOL v24;
  char *v25;
  int v26;
  int64_t v27;
  void *v28;
  size_t v29;
  char *v30;
  char *v31;
  size_t v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  const void *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  _QWORD *v59;
  unint64_t v60;
  size_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  std::mutex *v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t **v82;
  int v83;
  uint64_t *v84;
  uint64_t *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t **v89;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t **v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  __int128 v98;
  char *v99;
  __int128 v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  uint64_t v105;
  char v106;
  uint64_t v107;

  v8 = &a3[a4];
  v9 = 0;
  if (a4)
  {
    while (a3[v9] != 46)
    {
      if (a4 == ++v9)
      {
        v9 = a4;
        break;
      }
    }
  }
  v10 = 0;
  v11 = *(uint64_t ***)(a1 + 40);
  v97 = (uint64_t *)a3;
  *(_QWORD *)&v98 = &a3[a4];
  *((_QWORD *)&v98 + 1) = a3;
  v99 = a3;
  *(_QWORD *)&v100 = v9;
  BYTE8(v100) = 46;
  v101 = &unk_2103F1250;
  v102 = &unk_2103F1250;
  v103 = &unk_2103F1250;
  v104 = &unk_2103F1250;
  v105 = 0;
  v106 = 0;
  if (a4 && a3 != (char *)&unk_2103F1250)
  {
    v10 = 0;
    v12 = a3;
    do
    {
      ++v10;
      v13 = &v12[v9];
      if (v13 == v8)
        break;
      v12 = v13 + 1;
      if (v13 + 1 == v8)
      {
        v9 = 0;
        v12 = &a3[a4];
      }
      else
      {
        v9 = 0;
        while (v12[v9] != 46)
        {
          if (v8 - v12 == ++v9)
          {
            v9 = v8 - v12;
            break;
          }
        }
      }
    }
    while (v12 != (char *)&unk_2103F1250);
  }
  v91 = a1;
  v107 = v10;
  v94 = v11;
  LOBYTE(v95) = 0;
  sub_20FF22178((uint64_t)v11, (uint64_t *)&v97, 0, (uint64_t)&v94);
  v14 = v94;
  if ((_BYTE)v95)
    return v14;
  v89 = v94;
  v15 = v94[6];
  v95 = 0;
  v96 = 0;
  v92 = v15;
  v94 = &v95;
  v16 = (uint64_t *)v15[10];
  v17 = (uint64_t **)(v15 + 11);
  if (v16 != v15 + 11)
  {
    do
    {
      v19 = v16[4];
      if (*(char *)(v19 + 31) < 0)
      {
        v20 = *(char **)(v19 + 8);
        v21 = *(_QWORD *)(v19 + 16);
        if (v21 <= a4)
          goto LABEL_27;
      }
      else
      {
        v20 = (char *)(v19 + 8);
        v21 = *(unsigned __int8 *)(v19 + 31);
        if (v21 <= a4)
          goto LABEL_27;
      }
      if (!a4)
      {
LABEL_48:
        v33 = &v95;
        v34 = &v95;
        if (v95)
        {
          v35 = v95;
          while (1)
          {
            while (1)
            {
              v33 = (uint64_t **)v35;
              v36 = v35[4];
              if (v19 >= v36)
                break;
              v35 = *v33;
              v34 = v33;
              if (!*v33)
                goto LABEL_55;
            }
            if (v36 >= v19)
              break;
            v35 = v33[1];
            if (!v35)
            {
              v34 = v33 + 1;
              goto LABEL_55;
            }
          }
        }
        else
        {
LABEL_55:
          v37 = (uint64_t *)operator new(0x28uLL);
          v37[4] = v19;
          *v37 = 0;
          v37[1] = 0;
          v37[2] = (uint64_t)v33;
          *v34 = v37;
          if (*v94)
          {
            v94 = (uint64_t **)*v94;
            v37 = *v34;
          }
          sub_20E868578(v95, v37);
          ++v96;
        }
        v38 = (uint64_t *)v16[1];
        v39 = v16;
        if (v38)
        {
          do
          {
            v23 = (uint64_t **)v38;
            v38 = (uint64_t *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            v23 = (uint64_t **)v39[2];
            v24 = *v23 == v39;
            v39 = (uint64_t *)v23;
          }
          while (!v24);
        }
        if ((uint64_t *)v92[10] == v16)
          v92[10] = (uint64_t)v23;
        v18 = (uint64_t *)v92[11];
        --v92[12];
        sub_20E8D2134(v18, v16);
        operator delete(v16);
        goto LABEL_20;
      }
      if ((uint64_t)v21 >= (uint64_t)a4)
      {
        v25 = &v20[v21];
        v26 = *a3;
        v27 = v21;
        v28 = v20;
        do
        {
          v29 = v27 - a4;
          if (v29 == -1)
            break;
          v30 = (char *)memchr(v28, v26, v29 + 1);
          if (!v30)
            break;
          v31 = v30;
          if (!memcmp(v30, a3, a4))
          {
            if (v31 == v25 || v20 != v31 || v21 <= a4 + 1 || v20[a4] != 46)
              break;
            v32 = a4;
            while (v20[v32 + 1] == 46)
            {
              if (v21 - 1 == ++v32)
                goto LABEL_27;
            }
            if (v32 == -2)
              break;
            goto LABEL_48;
          }
          v28 = v31 + 1;
          v27 = v25 - (v31 + 1);
        }
        while (v27 >= (uint64_t)a4);
      }
LABEL_27:
      v22 = (uint64_t *)v16[1];
      if (v22)
      {
        do
        {
          v23 = (uint64_t **)v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (uint64_t **)v16[2];
          v24 = *v23 == v16;
          v16 = (uint64_t *)v23;
        }
        while (!v24);
      }
LABEL_20:
      v16 = (uint64_t *)v23;
    }
    while (v23 != v17);
  }
  v40 = (uint64_t *)operator new();
  v98 = 0uLL;
  v97 = (uint64_t *)&v98;
  sub_20FF22DD8((uint64_t *)&v97, v94, &v95);
  sub_20FF1DCF8(v40, v91, a3, a4, (uint64_t)v89, (uint64_t)&v97);
  sub_20E9BCAA8((_QWORD *)v98);
  v93 = v40;
  sub_20FF1F6A4((uint64_t)&v97, a3, a4, (uint64_t *)&v93, 0);
  v41 = operator new();
  *(_QWORD *)v41 = off_24CA0C2A8;
  *(_OWORD *)(v41 + 8) = v98;
  *(_QWORD *)(v41 + 24) = v99;
  v98 = 0uLL;
  *(_OWORD *)(v41 + 32) = v100;
  *(_QWORD *)(v41 + 48) = v101;
  v99 = 0;
  v100 = 0uLL;
  v101 = 0;
  v42 = (uint64_t)v93;
  v93 = 0;
  if (v42)
    sub_20FF2209C(v42);
  v43 = (char *)operator new(0x40uLL);
  v44 = v43;
  v45 = (uint64_t *)(v91 + 56);
  v97 = (uint64_t *)v43;
  *(_QWORD *)&v98 = v91 + 56;
  BYTE8(v98) = 0;
  v46 = v43 + 32;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (a4 >= 0x17)
  {
    v50 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v50 = a4 | 7;
    v51 = v50 + 1;
    v46 = operator new(v50 + 1);
    v44[5] = a4;
    v44[6] = v51 | 0x8000000000000000;
    v44[4] = v46;
LABEL_75:
    memmove(v46, a3, a4);
    v46[a4] = 0;
    v44[7] = v41;
    v47 = (uint64_t)v97;
    v48 = (uint64_t *)*v45;
    v49 = (uint64_t *)(v91 + 56);
    if (!*v45)
    {
LABEL_102:
      *(_QWORD *)v47 = 0;
      *(_QWORD *)(v47 + 8) = 0;
      *(_QWORD *)(v47 + 16) = v49;
      *v45 = v47;
      v64 = **(_QWORD **)(v91 + 48);
      if (v64)
      {
        *(_QWORD *)(v91 + 48) = v64;
        v47 = *v45;
      }
      sub_20E868578(*(uint64_t **)(v91 + 56), (uint64_t *)v47);
      ++*(_QWORD *)(v91 + 64);
      v49 = v97;
      goto LABEL_105;
    }
    goto LABEL_76;
  }
  v43[55] = a4;
  if (a4)
    goto LABEL_75;
  *v46 = 0;
  *((_QWORD *)v43 + 7) = v41;
  v47 = (uint64_t)v97;
  v48 = (uint64_t *)*v45;
  v49 = (uint64_t *)(v91 + 56);
  if (!*v45)
    goto LABEL_102;
LABEL_76:
  v52 = *(char *)(v47 + 55);
  if (v52 >= 0)
    v53 = (const void *)(v47 + 32);
  else
    v53 = *(const void **)(v47 + 32);
  if (v52 >= 0)
    v54 = *(unsigned __int8 *)(v47 + 55);
  else
    v54 = *(_QWORD *)(v47 + 40);
  while (1)
  {
    while (1)
    {
      v49 = v48;
      v57 = (_QWORD *)v48[4];
      v55 = v48 + 4;
      v56 = v57;
      v58 = *((char *)v55 + 23);
      v59 = v58 >= 0 ? v55 : v56;
      v60 = v58 >= 0 ? *((unsigned __int8 *)v55 + 23) : v55[1];
      v61 = v60 >= v54 ? v54 : v60;
      v62 = memcmp(v53, v59, v61);
      if (v62)
        break;
      if (v54 >= v60)
        goto LABEL_96;
LABEL_82:
      v48 = (uint64_t *)*v49;
      v45 = v49;
      if (!*v49)
        goto LABEL_102;
    }
    if (v62 < 0)
      goto LABEL_82;
LABEL_96:
    v63 = memcmp(v59, v53, v61);
    if (!v63)
      break;
    if ((v63 & 0x80000000) == 0)
      goto LABEL_107;
LABEL_100:
    v48 = (uint64_t *)v49[1];
    if (!v48)
    {
      v45 = v49 + 1;
      goto LABEL_102;
    }
  }
  if (v60 < v54)
    goto LABEL_100;
LABEL_107:
  if (!v47)
  {
LABEL_105:
    v65 = v89;
    v66 = v92;
    v14 = (uint64_t **)v49[7];
    v67 = *v17;
    v68 = v17;
    if (*v17)
      goto LABEL_123;
LABEL_127:
    v74 = (uint64_t *)operator new(0x28uLL);
    v74[4] = (uint64_t)v14;
    *v74 = 0;
    v74[1] = 0;
    v74[2] = (uint64_t)v68;
    *v17 = v74;
    v75 = *(_QWORD *)v66[10];
    if (v75)
    {
      v66[10] = v75;
      v74 = *v17;
    }
    sub_20E868578((uint64_t *)v66[11], v74);
    ++v66[12];
    goto LABEL_130;
  }
  v69 = *(_QWORD *)(v47 + 56);
  *(_QWORD *)(v47 + 56) = 0;
  if (v69)
  {
    v70 = *(_QWORD *)(v69 + 48);
    *(_QWORD *)(v69 + 48) = 0;
    if (v70)
      sub_20FF2209C(v70);
    v71 = *(_QWORD *)(v69 + 40);
    *(_QWORD *)(v69 + 40) = 0;
    if (v71)
      MEMORY[0x212BC6398](v71, 0x80C40B8603338);
    v72 = *(_QWORD *)(v69 + 32);
    *(_QWORD *)(v69 + 32) = 0;
    if (v72)
      MEMORY[0x212BC6398](v72, 0x1000C4077774924);
    if (*(char *)(v69 + 31) < 0)
      operator delete(*(void **)(v69 + 8));
    MEMORY[0x212BC6398](v69, 0x10B3C406DCED8F8);
    LOBYTE(v52) = *(_BYTE *)(v47 + 55);
  }
  v65 = v89;
  v66 = v92;
  if ((v52 & 0x80) != 0)
    operator delete(*(void **)(v47 + 32));
  operator delete((void *)v47);
  v14 = (uint64_t **)v49[7];
  v67 = *v17;
  v68 = v17;
  if (!*v17)
    goto LABEL_127;
  while (1)
  {
LABEL_123:
    while (1)
    {
      v68 = (uint64_t **)v67;
      v73 = v67[4];
      if ((unint64_t)v14 >= v73)
        break;
      v67 = *v68;
      v17 = v68;
      if (!*v68)
        goto LABEL_127;
    }
    if (v73 >= (unint64_t)v14)
      break;
    v67 = v68[1];
    if (!v67)
    {
      v17 = v68 + 1;
      goto LABEL_127;
    }
  }
LABEL_130:
  v76 = (uint64_t *)v94;
  if (v94 != &v95)
  {
    do
    {
      *(_QWORD *)(*(_QWORD *)(v76[4] + 48) + 72) = v14;
      v81 = (uint64_t *)v76[1];
      if (v81)
      {
        do
        {
          v82 = (uint64_t **)v81;
          v81 = (uint64_t *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          v82 = (uint64_t **)v76[2];
          v24 = *v82 == v76;
          v76 = (uint64_t *)v82;
        }
        while (!v24);
      }
      v76 = (uint64_t *)v82;
    }
    while (v82 != &v95);
  }
  v77 = (unint64_t *)v14[5];
  v78 = atomic_load((unint64_t *)v65[5]);
  do
    __ldaxr(v77);
  while (__stlxr(v78, v77));
  if (a5)
  {
    v79 = *(std::mutex **)(v91 + 8);
    std::mutex::lock(v79);
    v80 = *(_QWORD **)(v91 + 16);
    if (v80 != (_QWORD *)(v91 + 24))
    {
      do
      {
        v83 = *((char *)v14 + 31);
        if (v83 >= 0)
          v84 = (uint64_t *)(v14 + 1);
        else
          v84 = v14[1];
        if (v83 >= 0)
          v85 = (uint64_t *)*((unsigned __int8 *)v14 + 31);
        else
          v85 = v14[2];
        (*(void (**)(_QWORD, uint64_t *, uint64_t *, _QWORD))(*(_QWORD *)v80[4] + 16))(v80[4], v84, v85, 0);
        v86 = (_QWORD *)v80[1];
        if (v86)
        {
          do
          {
            v87 = v86;
            v86 = (_QWORD *)*v86;
          }
          while (v86);
        }
        else
        {
          do
          {
            v87 = (_QWORD *)v80[2];
            v24 = *v87 == (_QWORD)v80;
            v80 = v87;
          }
          while (!v24);
        }
        v80 = v87;
      }
      while (v87 != (_QWORD *)(v91 + 24));
    }
    std::mutex::unlock(v79);
  }
  sub_20E9BCAA8(v95);
  return v14;
}

void sub_20FF204D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  sub_20E9BCAA8(a17);
  _Unwind_Resume(a1);
}

void sub_20FF20570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20FF22F4C((uint64_t *)va);
  JUMPOUT(0x20FF2057CLL);
}

void sub_20FF20598(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E9BCAA8(v1);
  _Unwind_Resume(a1);
}

void sub_20FF205AC()
{
  std::mutex *v0;

  std::mutex::unlock(v0);
  JUMPOUT(0x20FF205B8);
}

uint64_t sub_20FF205CC(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  const void *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  char *v30;
  _BYTE *v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t **v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  std::mutex *v43;
  std::__shared_mutex_base *v44;
  _QWORD *v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;

  v44 = (std::__shared_mutex_base *)(a1 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 72));
  v43 = *(std::mutex **)(a1 + 8);
  std::mutex::lock(v43);
  v47 = 0;
  v48 = 0;
  v3 = *(_QWORD **)(a1 + 48);
  v41 = a1;
  v45 = (_QWORD *)(a1 + 56);
  v46 = &v47;
  if (v3 == (_QWORD *)(a1 + 56))
    goto LABEL_2;
  while (2)
  {
    v13 = *(char **)(v3[7] + 32);
    if (!v13)
      goto LABEL_49;
    v14 = *v13;
    v15 = v47;
    v16 = &v47;
    v17 = &v47;
    if (!v47)
      goto LABEL_43;
    v18 = *((char *)v3 + 55);
    if (v18 >= 0)
      v19 = v3 + 4;
    else
      v19 = (const void *)v3[4];
    if (v18 >= 0)
      v20 = *((unsigned __int8 *)v3 + 55);
    else
      v20 = v3[5];
    do
    {
      while (1)
      {
        v17 = (uint64_t **)v15;
        v23 = v15[4];
        v21 = v15 + 4;
        v22 = (uint64_t *)v23;
        v24 = *((char *)v21 + 23);
        v25 = v24 >= 0 ? v21 : v22;
        v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
        v27 = v26 >= v20 ? v20 : v26;
        v28 = memcmp(v19, v25, v27);
        if (v28)
          break;
        if (v20 >= v26)
          goto LABEL_37;
LABEL_23:
        v15 = *v17;
        v16 = v17;
        if (!*v17)
          goto LABEL_43;
      }
      if (v28 < 0)
        goto LABEL_23;
LABEL_37:
      v29 = memcmp(v25, v19, v27);
      if (v29)
      {
        if ((v29 & 0x80000000) == 0)
          goto LABEL_49;
      }
      else if (v26 >= v20)
      {
        goto LABEL_49;
      }
      v15 = v17[1];
    }
    while (v15);
    v16 = v17 + 1;
LABEL_43:
    v30 = (char *)operator new(0x40uLL);
    v31 = v30 + 32;
    if (*((char *)v3 + 55) < 0)
    {
      sub_20E860C04(v31, (void *)v3[4], v3[5]);
    }
    else
    {
      v32 = *((_OWORD *)v3 + 2);
      *((_QWORD *)v30 + 6) = v3[6];
      *(_OWORD *)v31 = v32;
    }
    v30[56] = v14;
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    *((_QWORD *)v30 + 2) = v17;
    *v16 = (uint64_t *)v30;
    if (*v46)
    {
      v46 = (uint64_t **)*v46;
      v30 = (char *)*v16;
    }
    sub_20E868578(v47, (uint64_t *)v30);
    ++v48;
LABEL_49:
    v33 = (_QWORD *)v3[1];
    if (v33)
    {
      do
      {
        v34 = v33;
        v33 = (_QWORD *)*v33;
      }
      while (v33);
    }
    else
    {
      do
      {
        v34 = (_QWORD *)v3[2];
        v35 = *v34 == (_QWORD)v3;
        v3 = v34;
      }
      while (!v35);
    }
    v3 = v34;
    if (v34 != v45)
      continue;
    break;
  }
LABEL_2:
  v5 = (uint64_t **)(v41 + 24);
  v4 = *(uint64_t **)(v41 + 24);
  if (!v4)
  {
    v36 = (uint64_t **)(v41 + 24);
    v8 = a2;
LABEL_61:
    v38 = (uint64_t *)operator new(0x28uLL);
    v38[4] = v8;
    *v38 = 0;
    v38[1] = 0;
    v38[2] = (uint64_t)v36;
    *v5 = v38;
    v39 = **(_QWORD **)(v41 + 16);
    if (v39)
    {
      *(_QWORD *)(v41 + 16) = v39;
      v38 = *v5;
    }
    sub_20E868578(*(uint64_t **)(v41 + 24), v38);
    ++*(_QWORD *)(v41 + 32);
    goto LABEL_64;
  }
  v6 = (uint64_t **)(v41 + 24);
  v7 = *(_QWORD **)(v41 + 24);
  v8 = a2;
  do
  {
    v9 = v7[4];
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v7;
    else
      v11 = v7 + 1;
    if (v10)
      v6 = (uint64_t **)v7;
    v7 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v6 == v5 || (unint64_t)v6[4] > a2)
  {
    while (1)
    {
      while (1)
      {
        v36 = (uint64_t **)v4;
        v37 = v4[4];
        if (v37 <= a2)
          break;
        v4 = *v36;
        v5 = v36;
        if (!*v36)
          goto LABEL_61;
      }
      if (v37 >= a2)
        break;
      v4 = v36[1];
      if (!v4)
      {
        v5 = v36 + 1;
        goto LABEL_61;
      }
    }
LABEL_64:
    (*(void (**)(uint64_t, uint64_t ***))(*(_QWORD *)v8 + 32))(v8, &v46);
    v12 = 1;
    goto LABEL_65;
  }
  v12 = 0;
LABEL_65:
  sub_20E866BE0((uint64_t)&v46, (char *)v47);
  std::mutex::unlock(v43);
  std::__shared_mutex_base::unlock(v44);
  return v12;
}

void sub_20FF208D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, std::__shared_mutex_base *a12, uint64_t a13, char a14, uint64_t a15)
{
  std::__shared_mutex_base::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF2091C(_QWORD *a1, unint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;

  v4 = (std::mutex *)a1[1];
  std::mutex::lock(v4);
  v6 = a1 + 3;
  v5 = (uint64_t *)a1[3];
  if (!v5)
    goto LABEL_12;
  v7 = a1 + 3;
  v8 = (_QWORD *)a1[3];
  do
  {
    v9 = v8[4];
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v10)
      v7 = v8;
    v8 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v7 != v6 && v7[4] <= a2)
  {
    v14 = a1 + 3;
    v15 = (_QWORD *)a1[3];
    do
    {
      v16 = v15[4];
      v17 = v16 >= a2;
      if (v16 >= a2)
        v18 = v15;
      else
        v18 = v15 + 1;
      if (v17)
        v14 = v15;
      v15 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v14 != v6 && v14[4] <= a2)
    {
      v19 = (uint64_t *)v14[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        v21 = v14;
        do
        {
          v20 = (uint64_t *)v21[2];
          v22 = *v20 == (_QWORD)v21;
          v21 = v20;
        }
        while (!v22);
      }
      if ((uint64_t *)a1[2] == v14)
        a1[2] = v20;
      --a1[4];
      sub_20E8D2134(v5, v14);
      operator delete(v14);
    }
    v12 = 1;
  }
  else
  {
LABEL_12:
    v12 = 0;
  }
  std::mutex::unlock(v4);
  return v12;
}

void sub_20FF20A40(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  std::__shared_mutex_base *v8;
  uint64_t v9;
  _QWORD *v10;
  std::mutex *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  size_t v15;
  uint64_t **v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  _QWORD *v32;
  _QWORD *v33;
  std::runtime_error *exception;
  void *__p[2];
  char v36;

  v36 = 0;
  LOBYTE(__p[0]) = 0;
  v4 = sub_20E8D4B64((uint64_t)a2, (const void **)__p);
  v5 = v4;
  if (v36 < 0)
  {
    operator delete(__p[0]);
    v6 = a2 + 1;
    if (a2 + 1 == v5)
      goto LABEL_8;
  }
  else
  {
    v6 = a2 + 1;
    if (a2 + 1 == v4)
      goto LABEL_8;
  }
  v36 = 0;
  LOBYTE(__p[0]) = 0;
  v7 = sub_20E8D4B64((uint64_t)a2, (const void **)__p);
  if (v36 < 0)
    operator delete(__p[0]);
  if (!*((_BYTE *)v7 + 56))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set root context to inherit its enable-state");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
LABEL_8:
  v8 = (std::__shared_mutex_base *)(a1 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 72));
  v10 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != v6)
  {
    do
    {
      if (*((char *)v10 + 55) < 0)
      {
        v14 = (char *)v10[4];
        v15 = v10[5];
      }
      else
      {
        v14 = (char *)(v10 + 4);
        v15 = *((unsigned __int8 *)v10 + 55);
      }
      v16 = sub_20FF1FC58(a1, v9, v14, v15, 0);
      v17 = (uint64_t)v16;
      v18 = *((unsigned __int8 *)v10 + 56);
      v19 = v16[4];
      if (*((_BYTE *)v10 + 56))
      {
        if (*(_BYTE *)v19)
        {
          if (*(unsigned __int8 *)v19 != v18)
            *(_BYTE *)v19 = v18;
        }
        else
        {
          v24 = (_BYTE *)operator new();
          *v24 = v18;
          v25 = *(_QWORD *)(v17 + 32);
          *(_QWORD *)(v17 + 32) = v24;
          if (v25)
          {
            MEMORY[0x212BC6398](v25, 0x1000C4077774924);
            v24 = *(_BYTE **)(v17 + 32);
          }
          v26 = (unint64_t *)operator new();
          *v26 = (unint64_t)v24;
          v27 = *(unint64_t **)(v17 + 40);
          v28 = atomic_load(v26);
          do
            __ldaxr(v27);
          while (__stlxr(v28, v27));
          MEMORY[0x212BC6398]();
          sub_20FF1E4A4(v17);
        }
      }
      else if (*(_BYTE *)v19)
      {
        v20 = (unint64_t *)v16[5];
        v21 = atomic_load(*(unint64_t **)(v16[6][9] + 40));
        do
          __ldaxr(v20);
        while (__stlxr(v21, v20));
        sub_20FF1E4A4((uint64_t)v16);
        v22 = (_BYTE *)operator new();
        *v22 = 0;
        v23 = *(_QWORD *)(v17 + 32);
        *(_QWORD *)(v17 + 32) = v22;
        if (v23)
          MEMORY[0x212BC6398](v23, 0x1000C4077774924);
      }
      v29 = (_QWORD *)v10[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v10[2];
          v31 = *v30 == (_QWORD)v10;
          v10 = v30;
        }
        while (!v31);
      }
      v10 = v30;
    }
    while (v30 != v6);
  }
  v11 = *(std::mutex **)(a1 + 8);
  std::mutex::lock(v11);
  v12 = *(_QWORD **)(a1 + 16);
  v13 = (_QWORD *)(a1 + 24);
  if (v12 != v13)
  {
    do
    {
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v12[4] + 24))(v12[4], a2);
      v32 = (_QWORD *)v12[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v12[2];
          v31 = *v33 == (_QWORD)v12;
          v12 = v33;
        }
        while (!v31);
      }
      v12 = v33;
    }
    while (v33 != v13);
  }
  std::mutex::unlock(v11);
  std::__shared_mutex_base::unlock(v8);
}

void sub_20FF20D3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FF20D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FF20DA0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _BYTE *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::mutex *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  _OWORD *v58;
  _OWORD v59[3];
  _BYTE *v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24CA0C358;
  v8 = (_QWORD *)operator new();
  v9 = (uint64_t)v8;
  v10 = *(unint64_t **)a3;
  v11 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v56 = *((unsigned __int8 *)a4 + 24);
  if (*((_BYTE *)a4 + 24))
  {
    v55 = *a4;
    *(_QWORD *)&v59[1] = a4[1];
    *(_QWORD *)((char *)&v59[1] + 7) = *(uint64_t *)((char *)a4 + 15);
    v54 = *((_BYTE *)a4 + 23);
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
  }
  else
  {
    v55 = 0;
  }
  v57 = a1;
  *v8 = &off_24CA0C300;
  v12 = operator new();
  *(_QWORD *)v12 = 850045863;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 8) = v12;
  *(_QWORD *)(v9 + 16) = v9 + 24;
  if (v10 != v11)
  {
    v13 = 0;
    v14 = v10;
    v15 = *v10;
    v16 = (uint64_t **)(v9 + 24);
LABEL_11:
    if (v13)
      v20 = v16;
    else
      v20 = (uint64_t **)(v9 + 24);
    if (v13)
      v21 = v16 + 1;
    else
      v21 = (uint64_t **)(v9 + 24);
    if (*v21)
      goto LABEL_29;
LABEL_26:
    v24 = (uint64_t *)operator new(0x28uLL);
    v24[4] = v15;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = (uint64_t)v20;
    *v21 = v24;
    v25 = **(_QWORD **)(v9 + 16);
    if (v25)
    {
      *(_QWORD *)(v9 + 16) = v25;
      v24 = *v21;
    }
    sub_20E868578(*(uint64_t **)(v9 + 24), v24);
    ++*(_QWORD *)(v9 + 32);
LABEL_29:
    while (++v14 != v11)
    {
      v13 = *(_QWORD *)(v9 + 24);
      v15 = *v14;
      v16 = (uint64_t **)(v9 + 24);
      if (*(_QWORD *)(v9 + 16) == v9 + 24)
        goto LABEL_11;
      v17 = *(uint64_t ***)(v9 + 24);
      v18 = (uint64_t *)(v9 + 24);
      if (v13)
      {
        do
        {
          v16 = v17;
          v17 = (uint64_t **)v17[1];
        }
        while (v17);
      }
      else
      {
        do
        {
          v16 = (uint64_t **)v18[2];
          v19 = *v16 == v18;
          v18 = (uint64_t *)v16;
        }
        while (v19);
      }
      if ((unint64_t)v16[4] < v15)
        goto LABEL_11;
      v21 = (uint64_t **)(v9 + 24);
      v20 = (uint64_t **)(v9 + 24);
      if (!v13)
        goto LABEL_26;
      v22 = *(uint64_t **)(v9 + 24);
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v22;
          v23 = v22[4];
          if (v23 <= v15)
            break;
          v22 = *v20;
          v21 = v20;
          if (!*v20)
            goto LABEL_26;
        }
        if (v23 >= v15)
          break;
        v22 = v20[1];
        if (!v22)
        {
          v21 = v20 + 1;
          goto LABEL_26;
        }
      }
    }
  }
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 48) = v9 + 56;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v9 + 72));
  *(_BYTE *)(v9 + 240) = 0;
  *(_BYTE *)(v9 + 264) = 0;
  if (v56)
  {
    v26 = *(_QWORD *)&v59[1];
    *(_QWORD *)(v9 + 240) = v55;
    *(_QWORD *)(v9 + 248) = v26;
    *(_QWORD *)(v9 + 255) = *(_QWORD *)((char *)&v59[1] + 7);
    *(_BYTE *)(v9 + 263) = v54;
    *(_BYTE *)(v9 + 264) = 1;
  }
  v57[1] = v9;
  if (v10)
  {
    operator delete(v10);
    v9 = v57[1];
  }
  v27 = (uint64_t *)operator new();
  v59[0] = 0uLL;
  v58 = v59;
  sub_20FF1DCF8(v27, v9, &unk_2102CCBA3, 0, 0, (uint64_t)&v58);
  sub_20E9BCAA8(*(_QWORD **)&v59[0]);
  *(_QWORD *)&v59[1] = off_24CA0C2A8;
  HIBYTE(v59[2]) = 0;
  BYTE8(v59[1]) = 0;
  v28 = (_BYTE *)operator new();
  *v28 = a2;
  v60 = v28;
  v29 = (_QWORD *)operator new();
  *v29 = v28;
  v61 = v29;
  v62 = v27;
  v30 = operator new();
  v31 = v30;
  *(_QWORD *)v30 = off_24CA0C2A8;
  *(_OWORD *)(v30 + 8) = *(_OWORD *)((char *)&v59[1] + 8);
  *(_QWORD *)(v30 + 24) = *((_QWORD *)&v59[2] + 1);
  *(_QWORD *)(v30 + 32) = v28;
  *(_QWORD *)(v30 + 40) = v29;
  *(_QWORD *)(v30 + 48) = v27;
  v32 = v57[1];
  if (v32)
  {
    *(_QWORD *)(v32 + 40) = v30;
    v33 = v57[1];
    if (v33)
      goto LABEL_38;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    *(_QWORD *)(v57[1] + 40) = v31;
    v33 = v57[1];
    if (v33)
    {
LABEL_38:
      BYTE7(v59[2]) = 0;
      LOBYTE(v59[1]) = 0;
      *((_QWORD *)&v59[2] + 1) = v31;
      v35 = (_QWORD *)(v33 + 56);
      v34 = *(_QWORD *)(v33 + 56);
      if (v34)
        goto LABEL_39;
      goto LABEL_43;
    }
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v33 = v57[1];
  BYTE7(v59[2]) = 0;
  LOBYTE(v59[1]) = 0;
  *((_QWORD *)&v59[2] + 1) = v31;
  v35 = (_QWORD *)(v33 + 56);
  v34 = *(_QWORD *)(v33 + 56);
  if (v34)
  {
    while (1)
    {
LABEL_39:
      v35 = (_QWORD *)v34;
      v36 = *(unsigned __int8 *)(v34 + 55);
      if ((v36 & 0x80u) != 0)
        v36 = v35[5];
      if (!v36)
        break;
      v34 = *v35;
      if (!*v35)
        goto LABEL_43;
    }
    *((_QWORD *)&v59[2] + 1) = 0;
    v37 = v35;
    v41 = *(_QWORD *)(v31 + 48);
    *(_QWORD *)(v31 + 48) = 0;
    if (!v41)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_43:
  v37 = operator new(0x40uLL);
  v37[2] = v59[1];
  v38 = *(_QWORD *)&v59[2];
  memset(&v59[1], 0, 32);
  *((_QWORD *)v37 + 6) = v38;
  *((_QWORD *)v37 + 7) = v31;
  *(_QWORD *)v37 = 0;
  *((_QWORD *)v37 + 1) = 0;
  *((_QWORD *)v37 + 2) = v35;
  *v35 = v37;
  v39 = **(_QWORD **)(v33 + 48);
  v40 = (uint64_t *)v37;
  if (v39)
  {
    *(_QWORD *)(v33 + 48) = v39;
    v40 = (uint64_t *)*v35;
  }
  sub_20E868578(*(uint64_t **)(v33 + 56), v40);
  ++*(_QWORD *)(v33 + 64);
  v31 = *((_QWORD *)&v59[2] + 1);
  if (*((_QWORD *)&v59[2] + 1))
  {
    v41 = *(_QWORD *)(*((_QWORD *)&v59[2] + 1) + 48);
    *(_QWORD *)(*((_QWORD *)&v59[2] + 1) + 48) = 0;
    if (!v41)
    {
LABEL_48:
      v42 = *(_QWORD *)(v31 + 40);
      *(_QWORD *)(v31 + 40) = 0;
      if (v42)
        MEMORY[0x212BC6398](v42, 0x80C40B8603338);
      v43 = *(_QWORD *)(v31 + 32);
      *(_QWORD *)(v31 + 32) = 0;
      if (v43)
        MEMORY[0x212BC6398](v43, 0x1000C4077774924);
      if (*(char *)(v31 + 31) < 0)
        operator delete(*(void **)(v31 + 8));
      MEMORY[0x212BC6398](v31, 0x10B3C406DCED8F8);
      goto LABEL_55;
    }
LABEL_47:
    sub_20FF2209C(v41);
    goto LABEL_48;
  }
LABEL_55:
  if (SBYTE7(v59[2]) < 0)
  {
    operator delete(*(void **)&v59[1]);
    v44 = v57[1];
    if (v44)
      goto LABEL_66;
  }
  else
  {
    v44 = v57[1];
    if (v44)
      goto LABEL_66;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v44 = v57[1];
LABEL_66:
  v45 = *((_QWORD *)v37 + 7);
  v46 = *(std::mutex **)(v44 + 8);
  std::mutex::lock(v46);
  v47 = *(_QWORD **)(v44 + 16);
  if (v47 != (_QWORD *)(v44 + 24))
  {
    do
    {
      v48 = *(char *)(v45 + 31);
      if (v48 >= 0)
        v49 = v45 + 8;
      else
        v49 = *(_QWORD *)(v45 + 8);
      if (v48 >= 0)
        v50 = *(unsigned __int8 *)(v45 + 31);
      else
        v50 = *(_QWORD *)(v45 + 16);
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47[4] + 16))(v47[4], v49, v50, a2);
      v51 = (_QWORD *)v47[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (_QWORD *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (_QWORD *)v47[2];
          v19 = *v52 == (_QWORD)v47;
          v47 = v52;
        }
        while (!v19);
      }
      v47 = v52;
    }
    while (v52 != (_QWORD *)(v44 + 24));
  }
  std::mutex::unlock(v46);
  return v57;
}

void sub_20FF2143C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *__p, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v24;

  sub_20FF21588((uint64_t)&a19);
  v24 = *(_QWORD *)(a15 + 8);
  *(_QWORD *)(a15 + 8) = 0;
  if (!v24)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF21588(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v3)
      sub_20FF2209C(v3);
    v4 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v4)
      MEMORY[0x212BC6398](v4, 0x80C40B8603338);
    v5 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (v5)
      MEMORY[0x212BC6398](v5, 0x1000C4077774924);
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10B3C406DCED8F8);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20FF2164C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24CA0C358;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20FF2168C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24CA0C358;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF216DC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return sub_20FF205CC(v4, a2);
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return sub_20FF205CC(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_20FF21754(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;

  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
    return sub_20FF2091C(v4, a2);
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return sub_20FF2091C(*(_QWORD **)(a1 + 8), a2);
}

uint64_t **sub_20FF217CC(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t **v8;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v5 + 72));
  v8 = sub_20FF1FC58(v5, v7, a2, a3, 1);
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v5 + 72));
  return v8;
}

void sub_20FF21870(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20FF21888(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    return sub_20FF1FB28(v6, a2, a3);
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return sub_20FF1FB28(*(_QWORD *)(a1 + 8), a2, a3);
}

void sub_20FF21918(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t **v10;

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v7 = *(_QWORD *)(a1 + 8);
  }
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v7 + 72));
  v10 = sub_20FF1FC58(v7, v9, a2, a3, 0);
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v7 + 72));
  sub_20FF1F5A4(v10[6], (uint64_t)v10, a4);
}

void sub_20FF219D0(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20FF219E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    sub_20FF20A40(v4, a2);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_20FF20A40(*(_QWORD *)(a1 + 8), a2);
  }
}

uint64_t sub_20FF21A60(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return v1 + 240;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return *(_QWORD *)(a1 + 8) + 240;
}

void sub_20FF21AD4(uint64_t a1, int a2, char a3)
{
  uint64_t v5;
  std::__shared_mutex_base *v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::mutex *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  char v33;
  _QWORD v34[2];

  v33 = a3;
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v6 = (std::__shared_mutex_base *)(v5 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v5 + 72));
  v31 = 0;
  v32 = 0;
  v7 = operator new(0x40uLL);
  v7[55] = 0;
  v7[32] = 0;
  v7[56] = a2;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = &v31;
  v30 = v7;
  v31 = v7;
  sub_20E868578((uint64_t *)v7, (uint64_t *)v7);
  ++v32;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(_QWORD **)(v8 + 40);
    v10 = (_BYTE *)v9[4];
    v11 = *v10;
    if (a2)
    {
LABEL_6:
      if (v11)
      {
        if (v11 != a2)
          *v10 = a2;
      }
      else
      {
        v16 = (_BYTE *)operator new();
        *v16 = a2;
        v17 = v9[4];
        v9[4] = v16;
        if (v17)
        {
          MEMORY[0x212BC6398](v17, 0x1000C4077774924);
          v16 = (_BYTE *)v9[4];
        }
        v18 = (unint64_t *)operator new();
        *v18 = (unint64_t)v16;
        v19 = (unint64_t *)v9[5];
        v20 = atomic_load(v18);
        do
          __ldaxr(v19);
        while (__stlxr(v20, v19));
        MEMORY[0x212BC6398](v18);
        sub_20FF1E4A4((uint64_t)v9);
      }
      goto LABEL_21;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 40);
    v10 = (_BYTE *)v9[4];
    v11 = *v10;
    if (a2)
      goto LABEL_6;
  }
  if (v11)
  {
    v12 = (unint64_t *)v9[5];
    v13 = atomic_load(*(unint64_t **)(*(_QWORD *)(v9[6] + 72) + 40));
    do
      __ldaxr(v12);
    while (__stlxr(v13, v12));
    sub_20FF1E4A4((uint64_t)v9);
    v14 = (_BYTE *)operator new();
    *v14 = 0;
    v15 = v9[4];
    v9[4] = v14;
    if (v15)
      MEMORY[0x212BC6398](v15, 0x1000C4077774924);
  }
LABEL_21:
  v21 = *(_QWORD *)(a1 + 8);
  if (!v21)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_36;
    }
    v21 = *(_QWORD *)(a1 + 8);
  }
  v22 = *(_QWORD *)(v21 + 40);
  v34[0] = &v33;
  v34[1] = &v30;
  sub_20FF228EC((uint64_t)v34, v22, (uint64_t)v34);
  v23 = *(_QWORD *)(a1 + 8);
  if (v23)
    goto LABEL_27;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_36:
    abort();
  }
  v23 = *(_QWORD *)(a1 + 8);
LABEL_27:
  v24 = *(std::mutex **)(v23 + 8);
  std::mutex::lock(v24);
  v25 = *(_QWORD **)(v23 + 16);
  v26 = (_QWORD *)(v23 + 24);
  if (v25 != v26)
  {
    do
    {
      (*(void (**)(_QWORD, _BYTE **))(*(_QWORD *)v25[4] + 24))(v25[4], &v30);
      v27 = (_QWORD *)v25[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v25[2];
          v29 = *v28 == (_QWORD)v25;
          v25 = v28;
        }
        while (!v29);
      }
      v25 = v28;
    }
    while (v28 != v26);
  }
  std::mutex::unlock(v24);
  sub_20E866BE0((uint64_t)&v30, v31);
  std::__shared_mutex_base::unlock(v6);
}

void sub_20FF21E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  std::__shared_mutex_base *v10;

  sub_20E866BE0((uint64_t)&a9, a10);
  std::__shared_mutex_base::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20FF21E84(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_mutex_base *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  __int128 *v13;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v5 = (std::__shared_mutex_base *)(v4 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v4 + 72));
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD **)(v6 + 48);
  v8 = (_QWORD *)(v6 + 56);
  if (v7 != (_QWORD *)(v6 + 56))
  {
    do
    {
      v9 = **(_BYTE **)(v7[7] + 32);
      v13 = (__int128 *)(v7 + 4);
      *((_BYTE *)sub_20FF23100((uint64_t **)a2, (const void **)v7 + 4, (uint64_t)&unk_2102DB95C, &v13) + 56) = v9;
      v10 = (_QWORD *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != v8);
  }
  std::__shared_mutex_base::unlock(v5);
}

void sub_20FF21FB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_mutex_base *v2;

  sub_20E866BE0(v1, *(char **)(v1 + 8));
  std::__shared_mutex_base::unlock(v2);
  _Unwind_Resume(a1);
}

BOOL sub_20FF21FD4(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)atomic_load(*(unint64_t **)(a1 + 40));
  return *v1 == 1;
}

uint64_t sub_20FF21FEC(uint64_t a1)
{
  return **(unsigned __int8 **)(a1 + 32);
}

void sub_20FF21FFC(uint64_t a1)
{
  sub_20FF22C38(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF22020(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  return sub_20FF1F96C(*(_QWORD *)(v5 + 40), a2, a3);
}

void sub_20FF2209C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  sub_20E9BCAA8(*(_QWORD **)(a1 + 88));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_17:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF22178(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unsigned __int8 *v10;
  int64_t v11;
  unsigned __int8 *v12;
  char *v13;
  char *v14;
  char *v15;
  size_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  unsigned __int8 *v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39[8];
  char *v40;
  char *v41;
  char *v42;
  size_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

uint64_t sub_20FF22440(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;

  v4 = 0;
  v5 = a2[1];
  v6 = a2[2];
  v8 = a2[3];
  v7 = a2[4];
  v9 = *((unsigned __int8 *)a2 + 40);
  v11 = a2[7];
  v10 = a2[8];
  v12 = a2[9];
  v13 = v8 == v5;
  v14 = v12 == v11;
  if (v12 != v11)
    v13 = 0;
  if (v13)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    if (v6 != v10)
    {
      v4 = 0;
      v16 = a2[2];
      v17 = a2[4];
      do
      {
        v18 = v16 + v17;
        if (v18 == v5)
        {
          v17 = 0;
          v16 = a2[1];
          ++v4;
          if (v12 == v11)
            break;
        }
        else
        {
          v16 = v18 + 1;
          if (v16 == v5)
          {
            v17 = 0;
            v16 = a2[1];
            ++v4;
          }
          else
          {
            v19 = 0;
            v17 = v5 - v16;
            while (*(unsigned __int8 *)(v16 + v19) != v9)
            {
              if (v17 == ++v19)
              {
                ++v4;
                goto LABEL_16;
              }
            }
            v17 = v19;
            ++v4;
          }
        }
LABEL_16:
        ;
      }
      while (v16 != v10);
      v15 = 0;
      v20 = a2[4];
      v21 = a2[2];
      do
      {
        v22 = v21 + v20;
        if (v22 == v5)
        {
          v20 = 0;
          v21 = a2[1];
          ++v15;
          if (v12 == v11)
            break;
        }
        else
        {
          v21 = v22 + 1;
          if (v21 == v5)
          {
            v20 = 0;
            v21 = a2[1];
            ++v15;
          }
          else
          {
            v23 = 0;
            v20 = v5 - v21;
            while (*(unsigned __int8 *)(v21 + v23) != v9)
            {
              if (v20 == ++v23)
              {
                ++v15;
                goto LABEL_28;
              }
            }
            v20 = v23;
            ++v15;
          }
        }
LABEL_28:
        ;
      }
      while (v21 != v10);
    }
  }
  v24 = v4 >= a3;
  v25 = v4 - a3;
  if (!v24)
    v25 = 0;
  if (v15 < v25)
    v25 = v15;
  v26 = v15 - v25;
  if (v26 >= 1)
  {
    do
    {
      v8 = v6 + v7;
      if (v6 + v7 == v5 || (v6 = v8 + 1, v8 + 1 == v5))
      {
        v7 = 0;
        v6 = a2[1];
      }
      else
      {
        v7 = 0;
        while (*(unsigned __int8 *)(v6 + v7) != v9)
        {
          if (v5 - v6 == ++v7)
          {
            v7 = v5 - v6;
            break;
          }
        }
      }
      v39 = (unint64_t)v26-- > 1;
    }
    while (v39);
  }
  v27 = 0;
  v28 = v12 == v11 && v8 == v5;
  if (!v28 && v6 != v10)
  {
    v27 = 0;
    v29 = v7;
    v30 = v6;
    do
    {
      v31 = v30 + v29;
      if (v31 == v5)
      {
        v29 = 0;
        v30 = a2[1];
        ++v27;
        if (v14)
          break;
      }
      else
      {
        v30 = v31 + 1;
        if (v30 == v5)
        {
          v29 = 0;
          v30 = a2[1];
          ++v27;
        }
        else
        {
          v32 = 0;
          v29 = v5 - v30;
          while (*(unsigned __int8 *)(v30 + v32) != v9)
          {
            if (v29 == ++v32)
            {
              ++v27;
              goto LABEL_52;
            }
          }
          v29 = v32;
          ++v27;
        }
      }
LABEL_52:
      ;
    }
    while (v30 != v10);
  }
  v33 = (int *)((char *)a2 + 41);
  v34 = *a2;
  if (v27 >= a4)
    v35 = a4;
  else
    v35 = v27;
  v36 = v6;
  v37 = v8;
  v38 = v7;
  if (v35 >= 1)
  {
    v36 = v6;
    v38 = v7;
    do
    {
      v37 = v36 + v38;
      if (v36 + v38 == v5 || (v36 = v37 + 1, v37 + 1 == v5))
      {
        v38 = 0;
        v36 = v5;
      }
      else
      {
        v38 = 0;
        while (*(unsigned __int8 *)(v36 + v38) != v9)
        {
          if (v5 - v36 == ++v38)
          {
            v38 = v5 - v36;
            break;
          }
        }
      }
      v39 = (unint64_t)v35-- > 1;
    }
    while (v39);
  }
  v40 = 0;
  v41 = v8 == v5;
  *(_QWORD *)result = v34;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = v7;
  *(_BYTE *)(result + 40) = v9;
  v42 = *v33;
  *(_DWORD *)(result + 41) = *v33;
  v43 = *(int *)((char *)v33 + 3);
  *(_DWORD *)(result + 44) = v43;
  *(_QWORD *)(result + 48) = v34;
  *(_QWORD *)(result + 56) = v5;
  *(_QWORD *)(result + 64) = v36;
  *(_QWORD *)(result + 72) = v37;
  *(_QWORD *)(result + 80) = v38;
  *(_BYTE *)(result + 88) = v9;
  *(_DWORD *)(result + 92) = v43;
  v44 = v37 == v5 && v41;
  *(_DWORD *)(result + 89) = v42;
  if (!v44 && v6 != v36)
  {
    v40 = 0;
    do
    {
      v45 = v6 + v7;
      if (v45 == v5)
      {
        v7 = 0;
        v6 = v5;
        ++v40;
        if (v37 == v5)
          break;
      }
      else
      {
        v6 = v45 + 1;
        if (v6 == v5)
        {
          v7 = 0;
          v6 = v5;
          ++v40;
        }
        else
        {
          v46 = 0;
          v7 = v5 - v6;
          while (*(unsigned __int8 *)(v6 + v46) != v9)
          {
            if (v7 == ++v46)
            {
              ++v40;
              goto LABEL_92;
            }
          }
          v7 = v46;
          ++v40;
        }
      }
LABEL_92:
      ;
    }
    while (v6 != v36);
  }
  *(_QWORD *)(result + 96) = v40;
  return result;
}

void sub_20FF2285C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    sub_20FF2209C(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    MEMORY[0x212BC6398](v3, 0x80C40B8603338);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    MEMORY[0x212BC6398](v4, 0x1000C4077774924);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF228EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 **v5;
  _QWORD *v6;
  int v7;
  _BYTE *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  const void *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  _QWORD *v30;
  unint64_t v31;
  size_t v32;
  int v33;
  int v34;
  _BYTE *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  unsigned __int8 **v42;
  _QWORD *v43;
  _BYTE *v45;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD **)(v3 + 80);
  v43 = (_QWORD *)(v3 + 88);
  if (v4 != (_QWORD *)(v3 + 88))
  {
    v5 = (unsigned __int8 **)result;
    v42 = (unsigned __int8 **)result;
    do
    {
      v6 = (_QWORD *)v4[4];
      v7 = **v5;
      v8 = (_BYTE *)v6[4];
      if (**v5)
      {
        if (*v8)
        {
          if (*v8 != v7)
            *v8 = v7;
        }
        else
        {
          v13 = (_BYTE *)operator new();
          *v13 = v7;
          v14 = v6[4];
          v6[4] = v13;
          if (v14)
          {
            MEMORY[0x212BC6398](v14, 0x1000C4077774924);
            v13 = (_BYTE *)v6[4];
          }
          v15 = (unint64_t *)operator new();
          *v15 = (unint64_t)v13;
          v16 = (unint64_t *)v6[5];
          v17 = atomic_load(v15);
          do
            __ldaxr(v16);
          while (__stlxr(v17, v16));
          MEMORY[0x212BC6398]();
          sub_20FF1E4A4((uint64_t)v6);
        }
      }
      else if (*v8)
      {
        v9 = (unint64_t *)v6[5];
        v10 = atomic_load(*(unint64_t **)(*(_QWORD *)(v6[6] + 72) + 40));
        do
          __ldaxr(v9);
        while (__stlxr(v10, v9));
        sub_20FF1E4A4((uint64_t)v6);
        v11 = (_BYTE *)operator new();
        *v11 = 0;
        v12 = v6[4];
        v6[4] = v11;
        if (v12)
          MEMORY[0x212BC6398](v12, 0x1000C4077774924);
      }
      v18 = v4[4];
      v19 = v5[1];
      v45 = *v5;
      v21 = v19 + 8;
      v20 = (_QWORD *)*((_QWORD *)v19 + 1);
      if (!v20)
      {
        v25 = v19 + 8;
        v35 = operator new(0x40uLL);
        v36 = v35 + 32;
        if ((*(char *)(v18 + 31) & 0x80000000) == 0)
          goto LABEL_46;
LABEL_48:
        sub_20E860C04(v36, *(void **)(v18 + 8), *(_QWORD *)(v18 + 16));
        goto LABEL_49;
      }
      v22 = *(char *)(v18 + 31);
      if (v22 >= 0)
        v23 = (const void *)(v18 + 8);
      else
        v23 = *(const void **)(v18 + 8);
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(v18 + 31);
      else
        v24 = *(_QWORD *)(v18 + 16);
      do
      {
        while (1)
        {
          v25 = v20;
          v28 = (_QWORD *)v20[4];
          v26 = v20 + 4;
          v27 = v28;
          v29 = *((char *)v26 + 23);
          v30 = v29 >= 0 ? v26 : v27;
          v31 = v29 >= 0 ? *((unsigned __int8 *)v26 + 23) : v26[1];
          v32 = v31 >= v24 ? v24 : v31;
          v33 = memcmp(v23, v30, v32);
          if (v33)
            break;
          if (v24 >= v31)
            goto LABEL_39;
LABEL_25:
          v20 = (_QWORD *)*v25;
          v21 = v25;
          if (!*v25)
            goto LABEL_45;
        }
        if (v33 < 0)
          goto LABEL_25;
LABEL_39:
        v34 = memcmp(v30, v23, v32);
        if (v34)
        {
          if ((v34 & 0x80000000) == 0)
            goto LABEL_52;
        }
        else if (v31 >= v24)
        {
          goto LABEL_52;
        }
        v20 = (_QWORD *)v25[1];
      }
      while (v20);
      v21 = v25 + 1;
LABEL_45:
      v35 = operator new(0x40uLL);
      v36 = v35 + 32;
      if (*(char *)(v18 + 31) < 0)
        goto LABEL_48;
LABEL_46:
      v37 = *(_OWORD *)(v18 + 8);
      *((_QWORD *)v36 + 2) = *(_QWORD *)(v18 + 24);
      *(_OWORD *)v36 = v37;
LABEL_49:
      v35[56] = *v45;
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = v25;
      *v21 = v35;
      v38 = **(_QWORD **)v19;
      if (v38)
      {
        *(_QWORD *)v19 = v38;
        v35 = (_BYTE *)*v21;
      }
      sub_20E868578(*((uint64_t **)v19 + 1), (uint64_t *)v35);
      ++*((_QWORD *)v19 + 2);
      v18 = v4[4];
LABEL_52:
      v5 = v42;
      result = sub_20FF228EC(a3, v18, a3);
      v39 = (_QWORD *)v4[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (_QWORD *)v4[2];
          v41 = *v40 == (_QWORD)v4;
          v4 = v40;
        }
        while (!v41);
      }
      v4 = v40;
    }
    while (v40 != v43);
  }
  return result;
}

void sub_20FF22C24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF22C38(uint64_t a1)
{
  std::mutex *v2;

  *(_QWORD *)a1 = &off_24CA0C300;
  if (*(_BYTE *)(a1 + 264) && *(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 184));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  sub_20FF23024(*(char **)(a1 + 56));
  sub_20E9BCAA8(*(_QWORD **)(a1 + 24));
  v2 = *(std::mutex **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    std::mutex::~mutex(v2);
    MEMORY[0x212BC6398]();
  }
  return a1;
}

void sub_20FF22CD0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF22CF4(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    {
      operator delete(*(void **)(v1 + 24));
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_10:
        JUMPOUT(0x212BC6398);
    }
    else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(*(void **)v1);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_20FF22D68(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d3kit3viz9ContextIDEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3viz9ContextIDEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d3kit3viz9ContextIDEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3viz9ContextIDEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_20FF22DD8(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_10;
      v9 = (uint64_t *)v5[1];
      v10 = v6;
      if (v7)
      {
        do
        {
          v8 = v9;
          v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = v4[4];
      if (v8[4] < v12)
      {
LABEL_10:
        if (v7)
          v13 = (uint64_t **)v8;
        else
          v13 = (uint64_t **)v6;
        if (v7)
          v14 = (uint64_t **)(v8 + 1);
        else
          v14 = (uint64_t **)v6;
        if (*v14)
          goto LABEL_29;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v13 = (uint64_t **)v6;
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v7;
              v15 = v7[4];
              if (v15 <= v12)
                break;
              v7 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_25;
            }
            if (v15 >= v12)
              goto LABEL_29;
            v7 = v13[1];
            if (!v7)
            {
              v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      v16 = (uint64_t *)operator new(0x28uLL);
      v16[4] = v4[4];
      *v16 = 0;
      v16[1] = 0;
      v16[2] = (uint64_t)v13;
      *v14 = v16;
      v17 = *(_QWORD *)*v5;
      if (v17)
      {
        *v5 = v17;
        v18 = *v14;
      }
      else
      {
        v18 = v16;
      }
      result = sub_20E868578((uint64_t *)v5[1], v18);
      ++v5[2];
LABEL_29:
      v19 = (_QWORD *)v4[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v4[2];
          v11 = *v20 == (_QWORD)v4;
          v4 = v20;
        }
        while (!v11);
      }
      v4 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

uint64_t *sub_20FF22F4C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 56);
      *(_QWORD *)(v2 + 56) = 0;
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 48);
        *(_QWORD *)(v3 + 48) = 0;
        if (v4)
          sub_20FF2209C(v4);
        v5 = *(_QWORD *)(v3 + 40);
        *(_QWORD *)(v3 + 40) = 0;
        if (v5)
          MEMORY[0x212BC6398](v5, 0x80C40B8603338);
        v6 = *(_QWORD *)(v3 + 32);
        *(_QWORD *)(v3 + 32) = 0;
        if (v6)
          MEMORY[0x212BC6398](v6, 0x1000C4077774924);
        if (*(char *)(v3 + 31) < 0)
          operator delete(*(void **)(v3 + 8));
        MEMORY[0x212BC6398](v3, 0x10B3C406DCED8F8);
      }
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_20FF23024(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    sub_20FF23024(*(_QWORD *)a1);
    sub_20FF23024(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 7) = 0;
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 48);
      *(_QWORD *)(v2 + 48) = 0;
      if (v3)
        sub_20FF2209C(v3);
      v4 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v4)
        MEMORY[0x212BC6398](v4, 0x80C40B8603338);
      v5 = *(_QWORD *)(v2 + 32);
      *(_QWORD *)(v2 + 32) = 0;
      if (v5)
        MEMORY[0x212BC6398](v5, 0x1000C4077774924);
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      MEMORY[0x212BC6398](v2, 0x10B3C406DCED8F8);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t **sub_20FF23100(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  char *v21;
  _BYTE *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = (char *)operator new(0x40uLL);
  v22 = v21 + 32;
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_20E860C04(v22, *(void **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    *((_QWORD *)v21 + 6) = *((_QWORD *)v23 + 2);
    *(_OWORD *)v22 = v24;
  }
  v21[56] = 0;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = v11;
  *v7 = (uint64_t *)v21;
  v25 = (uint64_t *)**a1;
  v26 = (uint64_t *)v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  sub_20E868578(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_20FF23278(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20FF2328C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  signed int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL4 v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  void **v12;
  uint64_t v13;
  std::chrono::steady_clock::time_point v14;
  signed int v15;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v17;
  std::condition_variable *v18;
  _QWORD *v19;
  char v20;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  __int128 *v28;
  uint64_t v29;
  char v30;
  size_t v31;
  void *v32;
  unint64_t v33;
  const void **v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  size_t v57;
  size_t v58;
  _BYTE *v59;
  void *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *shared_owners;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  std::chrono::system_clock::time_point v91;
  unsigned __int8 v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v96;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v97;
  void *v98;
  void *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  int v103;
  std::unique_lock<std::mutex> __lk;
  _QWORD v105[3];
  int v106;
  const char *v107;
  int v108;
  const char *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *__p[2];
  int64_t v113;
  void *__s2[2];
  uint64_t v115;
  uint64_t v116;
  char v117;
  _QWORD v118[3];
  uint64_t v119;
  unint64_t v120;
  void *v121;
  char v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  _QWORD v128[2];
  _BYTE v129[24];
  unint64_t v130;
  char v131;
  char v132;
  void **v133;
  void *v134;
  unint64_t v135;
  char v136;
  char v137;
  void *v138;
  char v139;
  char v140;
  char v141;
  __int128 v142;
  uint64_t v143;
  char v144;
  uint64_t v145;

  v2 = a2;
  v145 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 104))
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 184);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 184));
    if (!*(_BYTE *)(a1 + 96)
      || (v4 = atomic_load((unsigned int *)(a1 + 128)), *(_QWORD *)(a1 + 88) > (unint64_t)v4))
    {
LABEL_4:
      v5 = (unsigned int *)(a1 + 128);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v2 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 88, a2);
      if (__lk.__owns_)
        std::mutex::unlock(__lk.__m_);
      if (!*(_BYTE *)(a1 + 104))
        goto LABEL_195;
LABEL_11:
      v7 = *(_QWORD *)(v2 + 24);
      if (!v7)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v7 = *(_QWORD *)(v2 + 24);
      }
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v7 + 48))(v129);
      v8 = 0;
      strcpy((char *)__s2, "cv3d.net");
      HIBYTE(v115) = 8;
      LODWORD(v116) = 2;
      v117 = 1;
      v9 = v129[23];
      if (v129[23] >= 0)
        v10 = v129[23];
      else
        v10 = *(_QWORD *)&v129[8];
      if (v10 == 8)
      {
        if ((v129[23] & 0x80) != 0)
        {
          if (memcmp(*(const void **)v129, __s2, *(size_t *)&v129[8]))
          {
            operator delete(*(void **)v129);
            return;
          }
        }
        else if (v129[23])
        {
          v11 = v129;
          v12 = __s2;
          v13 = v129[23];
          while (*v11 == *(unsigned __int8 *)v12)
          {
            ++v11;
            v12 = (void **)((char *)v12 + 1);
            if (!--v13)
              goto LABEL_189;
          }
          v8 = 0;
          if ((v129[23] & 0x80) != 0)
          {
LABEL_194:
            operator delete(*(void **)v129);
            if (!v8)
              return;
            goto LABEL_195;
          }
LABEL_191:
          if (!v8)
            return;
          goto LABEL_195;
        }
LABEL_189:
        v8 = v130 == 2;
      }
      if (v9 < 0)
        goto LABEL_194;
      goto LABEL_191;
    }
    v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v15 = atomic_load((unsigned int *)(a1 + 128));
    if (!*(_BYTE *)(a1 + 96))
LABEL_197:
      sub_20E866B34();
    rep = v14.__d_.__rep_;
    v17 = 0;
    v99 = (void *)*MEMORY[0x24BEDB7F0];
    v98 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v100 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v18 = (std::condition_variable *)(a1 + 136);
    v19 = (_QWORD *)&unk_254A6C000;
    v96 = MEMORY[0x24BEDB848] + 16;
    v20 = 1;
    v97 = v14.__d_.__rep_;
    while (1)
    {
      if (*(_QWORD *)(a1 + 88) > (unint64_t)v15)
        goto LABEL_4;
      if ((v20 & 1) != 0 || std::chrono::steady_clock::now().__d_.__rep_ - (v17 + rep) >= 500000000)
        break;
LABEL_163:
      std::chrono::steady_clock::now();
      v91.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v21.__d_.__rep_ = 1000000000;
      if (v91.__d_.__rep_)
      {
        if (v91.__d_.__rep_ < 1)
        {
          if ((unint64_t)v91.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
            v21.__d_.__rep_ = 1000 * v91.__d_.__rep_ + 1000000000;
          else
            v21.__d_.__rep_ = 0x800000003B9ACA00;
        }
        else if ((unint64_t)v91.__d_.__rep_ >= 0x20C49BA5D411B8)
        {
          v21.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v21.__d_.__rep_ = 1000 * v91.__d_.__rep_ + 1000000000;
        }
      }
      std::condition_variable::__do_timed_wait(v18, &__lk, v21);
      std::chrono::steady_clock::now();
      v20 = 0;
      v15 = atomic_load((unsigned int *)(a1 + 128));
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_197;
    }
    v22 = atomic_load((unsigned __int8 *)qword_254A6C898);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(qword_254A6C898))
    {
      v92 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
      if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
      {
        sub_20E8BFCE4(&qword_254A6DDD8);
        __cxa_guard_release(&qword_254A6DDE0);
      }
      *(_QWORD *)v129 = qword_254A6DDD8;
      HIBYTE(v115) = 12;
      strcpy((char *)__s2, "cv3d.kit.viz");
      sub_20E8C4068((uint64_t **)v129, (uint64_t)__s2, &qword_254A6C890);
      if (SHIBYTE(v115) < 0)
        operator delete(__s2[0]);
      __cxa_guard_release(qword_254A6C898);
      v18 = (std::condition_variable *)(a1 + 136);
      rep = v97;
      v19 = (_QWORD *)&unk_254A6C000;
    }
    v23 = v19[274];
    v126 = v23;
    if (**(int **)(v23 + 56) > 4
      || ((v24 = *(unsigned __int8 *)(v23 + 72),
           v25 = sub_20E8C31DC(v23, "OSLogSurrogateAppender", 1, 0),
           v26 = v25,
           !v24)
        ? (v27 = v25 == 0)
        : (v27 = 0),
          v27))
    {
LABEL_162:
      v17 = std::chrono::steady_clock::now().__d_.__rep_ - rep;
      goto LABEL_163;
    }
    v103 = v24;
    sub_20E863438((uint64_t)__s2);
    v106 = 0;
    sub_20EA7737C(v105, "blocking caller while waiting for space in queue");
    if (v106 == -1)
      sub_20E877AB8();
    v128[0] = &v127;
    ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24CA0C4B0[v106])(__p, v128, v105);
    if (v106 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_24CA0C498[v106])(v128, v105);
    sub_20FF0120C((uint64_t *)__p, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), (uint64_t)v129);
    v106 = 0;
    sub_20FF0B374((uint64_t)v128, (std::string::size_type)v105, (uint64_t)v129);
    if (v106 == -1)
      sub_20E877AB8();
    v128[0] = &v127;
    ((void (*)(__int128 *__return_ptr, _QWORD *, _QWORD *))off_24CA0C4B0[v106])(&v142, v128, v105);
    if (v106 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_24CA0C498[v106])(v128, v105);
    if (v143 >= 0)
      v28 = &v142;
    else
      v28 = (__int128 *)v142;
    if (v143 >= 0)
      v29 = HIBYTE(v143);
    else
      v29 = *((_QWORD *)&v142 + 1);
    sub_20E86A980(&v115, (uint64_t)v28, v29);
    if (SHIBYTE(v143) < 0)
      operator delete((void *)v142);
    if (!v141)
    {
LABEL_58:
      if (SHIBYTE(v113) < 0)
      {
        operator delete(__p[0]);
        v30 = v124;
        if ((v124 & 0x10) == 0)
          goto LABEL_60;
      }
      else
      {
        v30 = v124;
        if ((v124 & 0x10) == 0)
        {
LABEL_60:
          if ((v30 & 8) == 0)
          {
            v31 = 0;
            HIBYTE(v113) = 0;
            v32 = __p;
            goto LABEL_74;
          }
          v33 = v118[2];
          v34 = (const void **)v118;
LABEL_66:
          v35 = *v34;
          v31 = v33 - (_QWORD)*v34;
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v31 >= 0x17)
          {
            v36 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v36 = v31 | 7;
            v37 = v36 + 1;
            v32 = operator new(v36 + 1);
            __p[1] = (void *)v31;
            v113 = v37 | 0x8000000000000000;
            __p[0] = v32;
          }
          else
          {
            HIBYTE(v113) = v33 - *(_BYTE *)v34;
            v32 = __p;
            if (!v31)
            {
LABEL_74:
              *((_BYTE *)v32 + v31) = 0;
              v105[0] = &v126;
              v105[1] = std::chrono::steady_clock::now().__d_.__rep_;
              v105[2] = std::chrono::system_clock::now().__d_.__rep_;
              v106 = 4;
              v107 = "unknown file";
              v108 = 203;
              v109 = "unknown function";
              v110 = 0;
              v111 = 0;
              if (v113 >= 0)
                v38 = __p;
              else
                v38 = (void **)__p[0];
              v39 = *(_QWORD *)v105[0];
              v40 = (const char *)(*(_QWORD *)v105[0] + 16);
              v101 = v40;
              if (*(char *)(*(_QWORD *)v105[0] + 39) < 0)
              {
                v40 = *(const char **)(v39 + 16);
                v41 = *(_QWORD *)(v39 + 24);
                v102 = *(_QWORD *)v105[0];
                v43 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v43 & 1) != 0)
                  goto LABEL_81;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)v105[0] + 39);
                v102 = *(_QWORD *)v105[0];
                v42 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v42 & 1) != 0)
                  goto LABEL_81;
              }
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)&v142);
                if (v144)
                {
                  *(_OWORD *)byte_254A4A4F8 = v142;
                  *(_QWORD *)&byte_254A4A4F8[16] = v143;
                }
                else
                {
                  byte_254A4A4F8[23] = 14;
                  strcpy(byte_254A4A4F8, "com.apple.cv3d");
                }
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
LABEL_81:
              if (byte_254A4A4F8[23] >= 0)
                v44 = byte_254A4A4F8;
              else
                v44 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v45 = byte_254A4A4F8[23];
              else
                v45 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)v129 = os_log_create(v44, v40);
              if (v45 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v45 >= 0x17)
              {
                v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v45 | 7) != 0x17)
                  v47 = v45 | 7;
                v48 = v47 + 1;
                v46 = operator new(v47 + 1);
                *(_QWORD *)&v129[16] = v45;
                v130 = v48 | 0x8000000000000000;
                *(_QWORD *)&v129[8] = v46;
              }
              else
              {
                HIBYTE(v130) = v45;
                v46 = &v129[8];
                if (!v45)
                {
LABEL_95:
                  v46[v45] = 0;
                  v131 = 1;
                  if (v41 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v19 = (_QWORD *)&unk_254A6C000;
                  if (v41 >= 0x17)
                  {
                    v51 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v41 | 7) != 0x17)
                      v51 = v41 | 7;
                    v52 = v51 + 1;
                    v49 = (void **)operator new(v51 + 1);
                    v134 = (void *)v41;
                    v135 = v52 | 0x8000000000000000;
                    v133 = v49;
                  }
                  else
                  {
                    HIBYTE(v135) = v41;
                    v49 = (void **)&v133;
                    if (!v41)
                    {
                      LOBYTE(v133) = 0;
                      v136 = 1;
                      v50 = *(NSObject **)v129;
                      if ((SHIBYTE(v135) & 0x80000000) == 0)
                        goto LABEL_99;
                      goto LABEL_105;
                    }
                  }
                  memmove(v49, v40, v41);
                  *((_BYTE *)v49 + v41) = 0;
                  v136 = 1;
                  v50 = *(NSObject **)v129;
                  if ((SHIBYTE(v135) & 0x80000000) == 0)
                  {
LABEL_99:
                    if (!v131)
                      goto LABEL_108;
                    goto LABEL_106;
                  }
LABEL_105:
                  operator delete(v133);
                  if (!v131)
                    goto LABEL_108;
LABEL_106:
                  if (SHIBYTE(v130) < 0)
                    operator delete(*(void **)&v129[8]);
LABEL_108:
                  if (*(_QWORD *)v129)
                    os_release(*(void **)v129);
                  if (!v26 || !*(_QWORD *)(v26 + 24))
                  {
                    os_log_type_enabled(v50, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v129 = 136315138;
                    *(_QWORD *)&v129[4] = v38;
                    v60 = (void *)_os_log_send_and_compose_impl();
                    v18 = (std::condition_variable *)(a1 + 136);
                    rep = v97;
                    v61 = v103;
                    if (v60)
                      free(v60);
LABEL_149:
                    if (v61)
                    {
                      v87 = __p;
                      if (v113 < 0)
                        v87 = (void **)__p[0];
                      sub_20E8C003C((uint64_t)v105, "%s", (const char *)v87);
                      sub_20E863570((uint64_t)v105);
                    }
                    sub_20E863570((uint64_t)v105);
                    v88 = v111;
                    if (!v111)
                      goto LABEL_157;
                    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
                    do
                      v90 = __ldaxr(p_shared_owners);
                    while (__stlxr(v90 - 1, p_shared_owners));
                    if (!v90)
                    {
                      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                      std::__shared_weak_count::__release_weak(v88);
                      if ((SHIBYTE(v113) & 0x80000000) == 0)
                        goto LABEL_159;
                    }
                    else
                    {
LABEL_157:
                      if ((SHIBYTE(v113) & 0x80000000) == 0)
                      {
LABEL_159:
                        __s2[0] = v99;
                        *(void **)((char *)__s2 + *((_QWORD *)v99 - 3)) = v98;
                        v115 = v100;
                        v116 = v96;
                        if (v122 < 0)
                          operator delete(v121);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](&v125);
                        goto LABEL_162;
                      }
                    }
                    operator delete(__p[0]);
                    goto LABEL_159;
                  }
                  v53 = _os_log_pack_size();
                  v54 = (std::__shared_weak_count_vtbl *)operator new(v53, (std::align_val_t)8uLL);
                  v55 = (std::__shared_weak_count *)operator new();
                  v55->__shared_owners_ = 0;
                  v56 = (unint64_t *)&v55->__shared_owners_;
                  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v55->__shared_weak_owners_ = 0;
                  v55[1].__vftable = v54;
                  v57 = strlen((const char *)v38);
                  v94 = v55;
                  if (v57 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v58 = v57;
                  if (v57 >= 0x17)
                  {
                    v62 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v57 | 7) != 0x17)
                      v62 = v57 | 7;
                    v63 = v62 + 1;
                    v59 = operator new(v62 + 1);
                    *(_QWORD *)&v129[8] = v58;
                    *(_QWORD *)&v129[16] = v63 | 0x8000000000000000;
                    *(_QWORD *)v129 = v59;
                  }
                  else
                  {
                    v129[23] = v57;
                    v59 = v129;
                    if (!v57)
                    {
LABEL_122:
                      v59[v58] = 0;
                      v64 = *(_QWORD *)v129;
                      *(_QWORD *)&v142 = *(_QWORD *)&v129[8];
                      *(_QWORD *)((char *)&v142 + 7) = *(_QWORD *)&v129[15];
                      v65 = v129[23];
                      v66 = operator new(0x38uLL);
                      v67 = (std::__shared_weak_count *)v66;
                      v66[1] = 0;
                      v68 = v66 + 1;
                      v66[2] = 0;
                      v66[3] = off_24C9ABC20;
                      v69 = (char *)(v66 + 3);
                      v66[4] = v64;
                      v70 = (char *)(v66 + 4);
                      *v66 = &off_24C9ABBD0;
                      v66[5] = v142;
                      *(_QWORD *)((char *)v66 + 47) = *(_QWORD *)((char *)&v142 + 7);
                      *((_BYTE *)v66 + 55) = v65;
                      do
                        v71 = __ldxr(v56);
                      while (__stxr(v71 + 1, v56));
                      v19 = &unk_254A6C000;
                      do
                        v72 = __ldxr(v68);
                      while (__stxr(v72 + 1, v68));
                      do
                        v73 = __ldaxr(v68);
                      while (__stlxr(v73 - 1, v68));
                      if (!v73)
                      {
                        (*(void (**)(_QWORD *))(*v66 + 16))(v66);
                        std::__shared_weak_count::__release_weak(v67);
                      }
                      do
                        v74 = __ldaxr(v56);
                      while (__stlxr(v74 - 1, v56));
                      if (!v74)
                      {
                        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                        std::__shared_weak_count::__release_weak(v94);
                      }
                      if (SHIBYTE(v67[2].__vftable) >= 0)
                        shared_owners = v70;
                      else
                        shared_owners = (char *)v67[1].__shared_owners_;
                      v76 = _os_log_pack_fill();
                      *(_DWORD *)v76 = 136315138;
                      *(_QWORD *)(v76 + 4) = shared_owners;
                      v77 = operator new();
                      v78 = *(unsigned __int8 *)(v102 + 39);
                      v79 = v101;
                      if ((v78 & 0x80u) != 0)
                      {
                        v79 = *(const char **)(v102 + 16);
                        v78 = *(_QWORD *)(v102 + 24);
                      }
                      *(_QWORD *)v77 = v54;
                      *(_QWORD *)(v77 + 8) = v54;
                      *(_QWORD *)(v77 + 16) = v94;
                      *(_QWORD *)(v77 + 24) = v69;
                      *(_QWORD *)(v77 + 32) = v67;
                      *(_QWORD *)(v77 + 40) = v79;
                      *(_QWORD *)(v77 + 48) = v78;
                      *(_BYTE *)(v77 + 56) = 16;
                      *(_QWORD *)v129 = v77;
                      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), v129);
                      v61 = v103;
                      v80 = *(_QWORD *)v129;
                      *(_QWORD *)v129 = 0;
                      v18 = (std::condition_variable *)(a1 + 136);
                      rep = v97;
                      if (v80)
                      {
                        v81 = *(std::__shared_weak_count **)(v80 + 32);
                        if (v81)
                        {
                          v82 = (unint64_t *)&v81->__shared_owners_;
                          do
                            v83 = __ldaxr(v82);
                          while (__stlxr(v83 - 1, v82));
                          if (!v83)
                          {
                            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                            std::__shared_weak_count::__release_weak(v81);
                          }
                        }
                        v84 = *(std::__shared_weak_count **)(v80 + 16);
                        if (v84)
                        {
                          v85 = (unint64_t *)&v84->__shared_owners_;
                          do
                            v86 = __ldaxr(v85);
                          while (__stlxr(v86 - 1, v85));
                          if (!v86)
                          {
                            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                            std::__shared_weak_count::__release_weak(v84);
                          }
                        }
                        MEMORY[0x212BC6398](v80, 0x10F0C40B62ED6C6);
                        v61 = v103;
                      }
                      goto LABEL_149;
                    }
                  }
                  memcpy(v59, v38, v58);
                  goto LABEL_122;
                }
              }
              memmove(v46, v44, v45);
              goto LABEL_95;
            }
          }
          memmove(v32, v35, v31);
          goto LABEL_74;
        }
      }
      v33 = v123;
      v34 = (const void **)&v119;
      if (v123 < v120)
      {
        v123 = v120;
        v33 = v120;
        v34 = (const void **)&v119;
      }
      goto LABEL_66;
    }
    if (!v140)
      goto LABEL_55;
    if (v139 < 0)
    {
      operator delete(v138);
      if ((v137 & 0x80000000) == 0)
      {
LABEL_55:
        if (!(_BYTE)v133)
          goto LABEL_58;
LABEL_56:
        if (v132 < 0)
          operator delete(*(void **)&v129[16]);
        goto LABEL_58;
      }
    }
    else if ((v137 & 0x80000000) == 0)
    {
      goto LABEL_55;
    }
    operator delete(v134);
    if (!(_BYTE)v133)
      goto LABEL_58;
    goto LABEL_56;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 88, a2);
  if (*(_BYTE *)(a1 + 104))
    goto LABEL_11;
LABEL_195:
  v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 72);
  (*(void (**)(uint64_t))(*(_QWORD *)v93 + 64))(v93);
}

void sub_20FF241A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::mutex *a34,char a35,int a36,__int16 a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a37);
  v69 = (std::__shared_weak_count *)a45;
  if (a45)
  {
    v70 = (unint64_t *)(a45 + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (a51 < 0)
    operator delete(__p);
  a52 = a28;
  *(void **)((char *)&a52 + *((_QWORD *)a28 - 3)) = a27;
  a54 = a29;
  a55 = MEMORY[0x24BEDB848] + 16;
  if (a68 < 0)
    operator delete(a63);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](a30);
  if (!a35)
    _Unwind_Resume(a1);
  std::mutex::unlock(a34);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF24594(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t sub_20FF24634(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[2];
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  mach_timebase_info info[2];
  int v29;
  __int128 __p;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  void *v35[2];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = mach_continuous_time();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6D7C8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7C8))
  {
    mach_timebase_info(info);
    LODWORD(v15) = info[0].numer;
    LODWORD(v16) = info[0].denom;
    *(double *)&qword_254A6D7C0 = (double)v15 / (double)v16;
    __cxa_guard_release(&qword_254A6D7C8);
  }
  v17[0] = llround(*(double *)&qword_254A6D7C0 * (double)v4);
  v17[1] = 2;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  *(_OWORD *)&info[0].numer = *(_OWORD *)a2;
  v29 = *(_DWORD *)(a2 + 16);
  LOBYTE(__p) = 0;
  v32 = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20E860C04(&__p, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      __p = *(_OWORD *)(a2 + 24);
      v31 = *(_QWORD *)(a2 + 40);
    }
    v32 = 1;
  }
  LOBYTE(v33) = 0;
  v45 = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    sub_20FCF4B4C((char *)&v33, (__int128 *)(a2 + 56));
    v45 = 1;
  }
  v46 = *(_OWORD *)(a2 + 208);
  v47 = *(_QWORD *)(a2 + 224);
  v6 = operator new();
  v7 = (_QWORD *)v6;
  *(_QWORD *)v6 = off_24CA08820;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)&info[0].numer;
  *(_DWORD *)(v6 + 24) = v29;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  if (v32)
  {
    *(_OWORD *)(v6 + 32) = __p;
    *(_QWORD *)(v6 + 48) = v31;
    v31 = 0;
    __p = 0uLL;
    *(_BYTE *)(v6 + 56) = 1;
  }
  *(_BYTE *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 208) = 0;
  if (v45)
  {
    *(_OWORD *)(v6 + 64) = v33;
    *(_QWORD *)(v6 + 80) = v34;
    v34 = 0;
    v33 = 0uLL;
    *(_OWORD *)(v6 + 88) = *(_OWORD *)v35;
    v8 = v38;
    *(_QWORD *)(v6 + 104) = v36;
    v35[0] = 0;
    v35[1] = 0;
    *(_QWORD *)(v6 + 128) = v8;
    *(_OWORD *)(v6 + 112) = v37;
    v36 = 0;
    v37 = 0uLL;
    v38 = 0;
    v9 = *(_OWORD *)v39;
    v10 = v42;
    *(_QWORD *)(v6 + 152) = v40;
    *(_OWORD *)(v6 + 136) = v9;
    v39[0] = 0;
    v39[1] = 0;
    v11 = v41;
    *(_QWORD *)(v6 + 176) = v10;
    *(_OWORD *)(v6 + 160) = v11;
    v40 = 0;
    v41 = 0uLL;
    v42 = 0;
    v12 = *(_OWORD *)v43;
    *(_QWORD *)(v6 + 200) = v44;
    *(_OWORD *)(v6 + 184) = v12;
    v43[0] = 0;
    v43[1] = 0;
    v44 = 0;
    *(_BYTE *)(v6 + 208) = 1;
  }
  *(_OWORD *)(v6 + 216) = v46;
  *(_QWORD *)(v6 + 232) = v47;
  sub_20EB09F3C(v6 + 240, (uint64_t)v17);
  *v7 = off_24CA087A0;
  *a1 = &off_24CA0C0E8;
  a1[1] = v7;
  v13 = (_QWORD *)operator new();
  *v13 = &off_24CA0C1E0;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v7;
  a1[2] = v13;
  if (!v45)
    goto LABEL_20;
  if (SHIBYTE(v44) < 0)
  {
    operator delete(v43[0]);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v40) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete((void *)v41);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v38) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v39[0]);
  if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v36) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)v37);
  if (SHIBYTE(v36) < 0)
  {
LABEL_28:
    operator delete(v35[0]);
    if (SHIBYTE(v34) < 0)
      goto LABEL_29;
LABEL_20:
    if (!v32)
      return sub_20EB0580C((uint64_t)v17);
    goto LABEL_21;
  }
LABEL_19:
  if ((SHIBYTE(v34) & 0x80000000) == 0)
    goto LABEL_20;
LABEL_29:
  operator delete((void *)v33);
  if (!v32)
    return sub_20EB0580C((uint64_t)v17);
LABEL_21:
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__p);
  return sub_20EB0580C((uint64_t)v17);
}

void sub_20FF24A04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D7C8);
  _Unwind_Resume(a1);
}

void sub_20FF24A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a44)
  {
    if (a43 < 0)
    {
      operator delete(__p);
      sub_20EB0580C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FF24AB4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20FF24B1C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF24B84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
}

uint64_t *sub_20FF24B98(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 24))
    return (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 24))(*(_QWORD *)(v1 + 16));
  v3 = atomic_load((unsigned __int8 *)qword_254A6C870);
  if ((v3 & 1) != 0 || !__cxa_guard_acquire(qword_254A6C870))
    return &qword_254A6C8A8;
  qword_254A6C8A8 = 0;
  unk_254A6C8B0 = 0;
  __cxa_guard_release(qword_254A6C870);
  return &qword_254A6C8A8;
}

void sub_20FF24C20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20FF2328C(*(_QWORD *)(a1 + 8), a2);
  *(_BYTE *)(a3 + 120) = 1;
}

uint64_t sub_20FF24C4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
}

uint64_t sub_20FF24C60(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
}

_QWORD *sub_20FF24C74(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p;
  char *v20;
  _QWORD *v21;

  __p = 0;
  v20 = 0;
  v21 = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v5 = 3 * a3;
    v6 = operator new(24 * a3);
    __p = v6;
    v20 = (char *)v6;
    v21 = &v6[v5];
    v7 = a2 + v5 * 8;
    do
    {
      v9 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(a2 + 16);
      *v6 = &off_24CA0C0E8;
      v6[1] = v9;
      v6[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      a2 += 24;
      v6 += 3;
    }
    while (a2 != v7);
    v20 = (char *)v6;
  }
  sub_20FF2B23C(a1, (uint64_t *)&__p);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v20;
    v14 = __p;
    if (v20 != __p)
    {
      do
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v20 = v12;
    operator delete(v14);
  }
  return a1;
}

void sub_20FF24DB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EF76610((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FF24DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11)
{
  void *v12;
  void *v13;

  if (__p)
  {
    v12 = a11;
    v13 = __p;
    if (a11 != __p)
    {
      do
        v12 = (void *)sub_20FF1C8E4((uint64_t)v12 - 24);
      while (v12 != __p);
      v13 = __p;
    }
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FF24E10(uint64_t a1)
{
  sub_20FCF4D74(a1 + 64);
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_20FF24E60(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  __n128 v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::mutex *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40[2];
  uint64_t v41;
  __int16 v42;
  void *__p[2];
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54[4];
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  void *v59;
  void *v60;
  void *v61;
  char *v62;
  char v63;
  _QWORD v64[3];
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;

  v64[0] = &off_24CA16588;
  v64[1] = 1;
  v64[2] = &unk_24CA166D8;
  v8 = (char *)operator new(0xAuLL);
  *(_QWORD *)v8 = 0;
  *((_WORD *)v8 + 4) = 0;
  v65 = v8;
  v66 = v8 + 10;
  v67 = v8 + 10;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  sub_20FF2B23C(__p, a2);
  BYTE8(v44) = 1;
  v55 = 0x500000001;
  v56 = 0;
  v57 = 1;
  v58 = 0;
  v9.n128_f64[0] = sub_20FF2B348((uint64_t)&v59, (uint64_t)__p);
  if (BYTE8(v44))
  {
    v10 = (char *)__p[0];
    if (__p[0])
    {
      v11 = (char *)__p[1];
      v12 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v9);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v11 -= 24;
        }
        while (v11 != v10);
        v12 = __p[0];
      }
      __p[1] = v10;
      operator delete(v12);
    }
  }
  LODWORD(__p[0]) = 1;
  sub_2100B8FD4((uint64_t)&v65, v66, (char *)__p, (char *)__p + 4, 4);
  sub_2100B6A04(v64);
  sub_20FF3021C((uint64_t)v64, (uint64_t)v54);
  *(_QWORD *)&v65[*((_QWORD *)v69 - 1) + 10] = v66 - &v65[*((_QWORD *)v69 - 1)] - 18;
  v69 -= 8;
  v16 = (std::mutex *)(*(_QWORD *)(a1 + 240) + 24);
  std::mutex::lock(v16);
  v17 = *(_QWORD **)(a1 + 240);
  v20 = (_QWORD *)*v17;
  v18 = v17 + 1;
  v19 = v20;
  if (v20 != v18)
  {
    while (1)
    {
      v21 = v19[8];
      v23 = *(_QWORD *)(v21 + 8);
      v22 = *(_QWORD *)(v21 + 16);
      v24 = v23 == *(_QWORD *)a3 && v22 == *(_QWORD *)(a3 + 8);
      if (v24)
        break;
      v25 = (_QWORD *)v19[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v19[2];
          v24 = *v26 == (_QWORD)v19;
          v19 = v26;
        }
        while (!v24);
      }
      v19 = v26;
      if (v26 == v18)
        goto LABEL_28;
    }
  }
  if (v19 == v18)
  {
LABEL_28:
    sub_20FF01EB8((unsigned __int8 *)a3, 0xDu, (uint64_t)"client not found", (uint64_t)__p);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v53)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v27 = v46;
      if (v46)
      {
        *(_OWORD *)(a4 + 16) = v44;
        *(_QWORD *)(a4 + 32) = v45;
        v45 = 0;
        v44 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v52)
      {
        v28 = v49;
        *(_QWORD *)(a4 + 64) = v48;
        *(_OWORD *)(a4 + 48) = v47;
        v47 = 0uLL;
        *(_QWORD *)(a4 + 72) = v28;
        *(_OWORD *)(a4 + 80) = v50;
        *(_QWORD *)(a4 + 96) = v51;
        v48 = 0;
        v50 = 0uLL;
        v51 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v27 && SHIBYTE(v45) < 0)
        operator delete((void *)v44);
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    std::mutex::unlock(v16);
  }
  else
  {
    if (*((char *)v19 + 55) < 0)
    {
      sub_20E860C04(v40, (void *)v19[4], v19[5]);
    }
    else
    {
      *(_OWORD *)v40 = *((_OWORD *)v19 + 2);
      v41 = v19[6];
    }
    v42 = *((_WORD *)v19 + 28);
    std::mutex::unlock(v16);
    if (((*(uint64_t (**)(_QWORD, void **, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320), v40, v64, 1) & 1) != 0)
    {
      *(_BYTE *)(a4 + 120) = 1;
      if ((SHIBYTE(v41) & 0x80000000) == 0)
        goto LABEL_52;
      goto LABEL_51;
    }
    sub_20FF01EB8((unsigned __int8 *)a3, 3u, 0, (uint64_t)__p);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v53)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v29 = v46;
      if (v46)
      {
        *(_OWORD *)(a4 + 16) = v44;
        *(_QWORD *)(a4 + 32) = v45;
        v45 = 0;
        v44 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v52)
      {
        v30 = v49;
        *(_QWORD *)(a4 + 64) = v48;
        *(_OWORD *)(a4 + 48) = v47;
        v47 = 0uLL;
        *(_QWORD *)(a4 + 72) = v30;
        *(_OWORD *)(a4 + 80) = v50;
        *(_QWORD *)(a4 + 96) = v51;
        v48 = 0;
        v50 = 0uLL;
        v51 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v29 && SHIBYTE(v45) < 0)
        operator delete((void *)v44);
      if (SHIBYTE(v41) < 0)
        goto LABEL_51;
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
      if (SHIBYTE(v41) < 0)
LABEL_51:
        operator delete(v40[0]);
    }
  }
LABEL_52:
  if (v63)
  {
    v31 = (char *)v61;
    if (v61)
    {
      v32 = v62;
      v33 = v61;
      if (v62 != v61)
      {
        do
        {
          v34 = (std::__shared_weak_count *)*((_QWORD *)v32 - 1);
          if (v34)
          {
            v35 = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v32 -= 16;
        }
        while (v32 != v31);
        v33 = v61;
      }
      v62 = v31;
      operator delete(v33);
    }
    v37 = v59;
    if (v59)
    {
      v38 = (uint64_t)v60;
      v39 = v59;
      if (v60 != v59)
      {
        do
        {
          v38 -= 88;
          sub_20FF2B9E4(v38);
        }
        while ((void *)v38 != v37);
        v39 = v59;
      }
      v60 = v37;
      operator delete(v39);
    }
  }
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
}

void sub_20FF253A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;

  std::mutex::unlock(v15);
  sub_20FF2BAD4(v14);
  sub_2100B68E8((_QWORD *)(v16 - 152));
  _Unwind_Resume(a1);
}

void sub_20FF253F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20FF2BAD4(v1);
  sub_2100B68E8((_QWORD *)(v2 - 152));
  _Unwind_Resume(a1);
}

void sub_20FF25414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20FF25460((char **)va);
  sub_2100B68E8((_QWORD *)(v6 - 152));
  _Unwind_Resume(a1);
}

void sub_20FF25430(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2100B68E8((_QWORD *)(v1 - 152));
  _Unwind_Resume(a1);
}

char **sub_20FF25460(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20FF25504(uint64_t a1)
{
  sub_20FF2B104(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FF2552C(uint64_t a1)
{
  sub_20FF2AF20(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FF25550(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24CA0C538;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20FF25590(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24CA0C538;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FF255E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20FF255F4(uint64_t a1)
{
  sub_20FF27B58(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FF25618(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  std::mutex **v32;
  uint64_t **v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t **v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count_vtbl *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count_vtbl *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  __int128 v75;
  uint64_t v76;
  __int128 *v77;
  _BYTE v78[24];
  _BYTE *v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0x40uLL);
    v5 = v4;
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA0C780;
    v7 = (uint64_t)a2[1];
    v4[1].__vftable = *a2;
    v8 = &v4[1].__vftable;
    v4[1].__shared_owners_ = v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v12 = a2[3];
    v11 = (uint64_t)a2[4];
    v4[1].__shared_weak_owners_ = (uint64_t)&off_24CA0C0E8;
    v4[2].__vftable = v12;
    v4[2].__shared_owners_ = v11;
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v74 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v17 = (uint64_t *)a1[18];
    v18 = (_QWORD *)operator new();
    *v18 = v17 + 7;
    std::mutex::lock((std::mutex *)(v17 + 7));
    *(_QWORD *)&v75 = v18;
    *((_QWORD *)&v75 + 1) = v17;
    if (!*((_BYTE *)v17 + 48))
      sub_20E866B34();
    v19 = v17[4];
    v20 = *v17;
    v21 = (_QWORD *)(*v17 + 16 * v19);
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *v21 = v8;
    v23 = v20 + 16 * v19;
    v24 = *(std::__shared_weak_count **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = v5;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (v17[1] - *v17) >> 4;
    v28 = v17[5];
    v29 = v17[4] + 1;
    if (v29 >= v27)
      v30 = (v17[1] - *v17) >> 4;
    else
      v30 = 0;
    v17[4] = v29 - v30;
    if (v28 == v27)
    {
      v31 = v17[3] + 1;
      if (v31 < v27)
        v27 = 0;
      v17[3] = v31 - v27;
      v32 = (std::mutex **)v75;
      if (!(_QWORD)v75)
      {
LABEL_39:
        v42 = (uint64_t **)a1[9];
        v75 = 0uLL;
        v43 = (std::__shared_weak_count *)a1[5];
        if (v43)
        {
          v44 = std::__shared_weak_count::lock(v43);
          if (v44)
          {
            v45 = v44;
            v46 = a1[4];
            v47 = (unint64_t *)&v44->__shared_weak_owners_;
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
            *(_QWORD *)&v75 = v46;
            *((_QWORD *)&v75 + 1) = v44;
            v49 = (unint64_t *)&v44->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          else
          {
            v75 = 0uLL;
          }
        }
        v51 = (char *)operator new(0x30uLL);
        *(_QWORD *)v51 = &off_24CA0C7D0;
        *(_OWORD *)(v51 + 8) = v75;
        v75 = 0uLL;
        *((_QWORD *)v51 + 3) = v8;
        *((_QWORD *)v51 + 4) = v5;
        v76 = 0;
        v77 = 0;
        v79 = v51;
        sub_210216F3C(*v42, (uint64_t)v78);
        v52 = v79;
        if (v79 == v78)
        {
          v53 = 4;
          v52 = v78;
        }
        else
        {
          if (!v79)
            goto LABEL_53;
          v53 = 5;
        }
        (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_53:
        if (v74)
        {
          v54 = (unint64_t *)&v74->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v17[5] = v28 + 1;
      v32 = (std::mutex **)v75;
      if (!(_QWORD)v75)
        goto LABEL_39;
    }
    std::mutex::unlock(*v32);
    MEMORY[0x212BC6398](v32, 0x20C4093837F09);
    goto LABEL_39;
  }
  v33 = (uint64_t **)a1[9];
  v73 = 0uLL;
  v34 = (std::__shared_weak_count *)a1[5];
  if (v34)
  {
    v35 = std::__shared_weak_count::lock(v34);
    if (v35)
    {
      v36 = v35;
      v37 = a1[4];
      v38 = (unint64_t *)&v35->__shared_weak_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      *(_QWORD *)&v73 = v37;
      *((_QWORD *)&v73 + 1) = v35;
      v40 = (unint64_t *)&v35->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    else
    {
      v73 = 0uLL;
    }
  }
  v56 = *a2;
  v57 = a2[1];
  if (v57)
  {
    v58 = (unint64_t *)&v57->~__shared_weak_count_0;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v61 = a2[3];
  v60 = a2[4];
  if (v60)
  {
    v62 = (unint64_t *)&v60->~__shared_weak_count_0;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = (char *)operator new(0x40uLL);
  *(_QWORD *)v64 = &off_24CA0C850;
  *(_OWORD *)(v64 + 8) = v73;
  *((_QWORD *)v64 + 3) = v56;
  *((_QWORD *)v64 + 4) = v57;
  *((_QWORD *)v64 + 5) = &off_24CA0C0E8;
  *((_QWORD *)v64 + 6) = v61;
  *((_QWORD *)v64 + 7) = v60;
  v77 = (__int128 *)v64;
  sub_210216F3C(*v33, (uint64_t)&v75);
  v71 = v77;
  if (v77 == &v75)
  {
    v72 = 4;
    v71 = &v75;
  }
  else
  {
    if (!v77)
      return;
    v72 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71 + 8 * v72))(v71, v65, v66, v67, v68, v69, v70);
}

