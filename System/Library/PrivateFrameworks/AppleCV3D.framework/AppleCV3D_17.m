void sub_20EED0028(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  unint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  BOOL v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  BOOL v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  BOOL v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  BOOL v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  double v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  double v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  double v198;
  double v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  BOOL v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  BOOL v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  BOOL v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  BOOL v316;
  double v317;
  double v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  BOOL v337;
  BOOL v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  BOOL v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  BOOL v374;
  double v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  double v381;
  double v382;
  double v383;
  double v384;
  double v385;
  double v386;
  double v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  double v426;
  double v427;
  double v428;
  double v429;
  double v430;
  double v431;
  double v432;
  double v433;
  double v434;
  double v435;
  double v436;

  v6 = *a3;
  v7 = a3[1];
  v8 = a3[2];
  v9 = a3[3];
  v10 = (double)(int)v6 - (double)(int)v8;
  v11 = (double)(int)v7 - (double)(int)v9;
  v12 = a4[2];
  v13 = a4[3];
  v15 = *a4;
  v14 = a4[1];
  v16 = v7 - v9;
  v17 = v6 - v8;
  v18 = v13 - v14;
  v19 = v12 - v15;
  if (v7 - v9 >= 0)
    v20 = v7 - v9;
  else
    v20 = v9 - v7;
  if (v17 >= 0)
    v21 = v6 - v8;
  else
    v21 = v8 - v6;
  if (v18 >= 0)
    v22 = v13 - v14;
  else
    v22 = v14 - v13;
  if (v19 >= 0)
    v23 = v12 - v15;
  else
    v23 = v15 - v12;
  v24 = v23 * v20;
  v25 = v22 * v21;
  v26 = v18 ^ v17;
  if ((v19 ^ v16) < 0)
  {
    if ((v26 & 0x8000000000000000) == 0)
    {
      v27 = v25 + v24;
      goto LABEL_19;
    }
    if (v24 > v25)
    {
      v28 = -(double)(v24 - v25);
      goto LABEL_26;
    }
    v29 = v25 - v24;
    goto LABEL_25;
  }
  if (v26 < 0)
  {
    v29 = v25 + v24;
LABEL_25:
    v28 = (double)v29;
    goto LABEL_26;
  }
  if (v24 < v25)
  {
    v27 = v25 - v24;
LABEL_19:
    v28 = -(double)v27;
    goto LABEL_26;
  }
  v28 = (double)(v24 - v25);
LABEL_26:
  v30 = (double)(int)v15;
  v31 = (double)(int)v14;
  v32 = v10 * v10 + v11 * v11;
  if (v28 != 0.0)
  {
    v40 = (double)(int)v12 - v30;
    v41 = (double)(int)v13 - v31;
    v42 = sqrt(v32);
    v43 = sqrt(v40 * v40 + v41 * v41);
    v44 = v14 - v13;
    if (v14 - v13 >= 0)
      v45 = v14 - v13;
    else
      v45 = v13 - v14;
    v46 = v23 * v21;
    v47 = v45 * v20;
    v48 = v44 ^ v16;
    if ((v19 ^ v17) < 0)
    {
      if (v48 < 0)
      {
        v50 = v46 - v47;
        if (v46 <= v47)
        {
          v95 = (double)(v47 - v46);
          v96 = v42 * v43;
          v97 = v42 * v43 + v95;
          v98 = 5.0;
          v99 = v42 * v43 <= 0.0;
          if (v42 * v43 >= 0.0)
            goto LABEL_277;
          goto LABEL_271;
        }
      }
      else
      {
        v50 = v47 + v46;
      }
    }
    else
    {
      if (v48 < 0)
      {
        v95 = (double)(v47 + v46);
        v96 = v42 * v43;
        v97 = v42 * v43 + v95;
        v98 = 5.0;
        v99 = v42 * v43 <= 0.0;
        if (v42 * v43 >= 0.0)
          goto LABEL_277;
        goto LABEL_271;
      }
      v49 = v46 - v47;
      if (v46 >= v47)
      {
        v95 = (double)v49;
        v96 = v42 * v43;
        v97 = v42 * v43 + (double)v49;
        v98 = 5.0;
        v99 = v42 * v43 <= 0.0;
        if (v42 * v43 >= 0.0)
          goto LABEL_277;
        goto LABEL_271;
      }
      v50 = v47 - v46;
    }
    v155 = (double)v50;
    if (v50)
    {
      v156 = v42 * v43 + v155;
      v157 = 5.0;
      if (v42 * v43 < 0.0)
      {
        v157 = (v42 * v43 * 5.0 - v155) / v156;
        if (v157 < 0.0)
          v157 = -v157;
      }
      v98 = v157 + 1.0 + 3.0;
      v97 = v28 * v28 / v156;
      goto LABEL_277;
    }
    v95 = -v155;
    v96 = v42 * v43;
    v97 = v42 * v43 - v155;
    v98 = 5.0;
    v99 = v42 * v43 <= 0.0;
    if (v42 * v43 >= 0.0)
      goto LABEL_277;
LABEL_271:
    if (!v99 || v95 > 0.0)
    {
      v170 = (v95 + v96 * -5.0) / v97;
      if (v170 >= 0.0)
        v98 = v170;
      else
        v98 = -v170;
    }
LABEL_277:
    v171 = *a2;
    v172 = a2[1];
    v173 = v6 - v171;
    if (v7 - v172 >= 0)
      v174 = v7 - v172;
    else
      v174 = v172 - v7;
    if (v173 >= 0)
      v175 = v6 - v171;
    else
      v175 = v171 - v6;
    v176 = v175 * v20;
    v177 = v174 * v21;
    v178 = (v7 - v172) ^ v17;
    if ((v173 ^ v16) < 0)
    {
      if ((v178 & 0x8000000000000000) == 0)
      {
        v179 = v176 + v177;
        goto LABEL_289;
      }
      if (v176 > v177)
      {
        v180 = -(double)(v176 - v177);
        goto LABEL_296;
      }
      v181 = v177 - v176;
    }
    else
    {
      if ((v178 & 0x8000000000000000) == 0)
      {
        if (v176 < v177)
        {
          v179 = v177 - v176;
LABEL_289:
          v180 = -(double)v179;
          goto LABEL_296;
        }
        v180 = (double)(v176 - v177);
LABEL_296:
        v182 = v13 - v172;
        if (v12 - v171 >= 0)
          v183 = v12 - v171;
        else
          v183 = v171 - v12;
        if (v182 >= 0)
          v184 = v13 - v172;
        else
          v184 = v172 - v13;
        v185 = v184 * v23;
        v186 = v183 * v22;
        v187 = (v12 - v171) ^ v18;
        if ((v182 ^ v19) < 0)
        {
          if ((v187 & 0x8000000000000000) == 0)
          {
            v188 = v186 + v185;
            goto LABEL_308;
          }
          if (v185 > v186)
          {
            v189 = -(double)(v185 - v186);
            goto LABEL_315;
          }
          v190 = v186 - v185;
        }
        else
        {
          if ((v187 & 0x8000000000000000) == 0)
          {
            if (v185 < v186)
            {
              v188 = v186 - v185;
LABEL_308:
              v189 = -(double)v188;
              goto LABEL_315;
            }
            v189 = (double)(v185 - v186);
LABEL_315:
            if (v7 >= 0)
              v191 = a3[1];
            else
              v191 = -v7;
            if (v6 >= 0)
              v192 = *a3;
            else
              v192 = -v6;
            v193 = v20 * v192;
            v194 = v191 * v21;
            v195 = v16 ^ v6;
            v196 = v17 ^ v7;
            if (v195 < 0)
            {
              v199 = (double)(v194 - v193);
              if (v193 > v194)
                v199 = -(double)(v193 - v194);
              if (v196 < 0)
                v198 = v199;
              else
                v198 = -(double)(v193 + v194);
            }
            else
            {
              if (v196 < 0)
              {
                v197 = v193 + v194;
              }
              else
              {
                v197 = v193 - v194;
                if (v193 < v194)
                {
                  v198 = -(double)(v194 - v193);
                  goto LABEL_332;
                }
              }
              v198 = (double)v197;
            }
LABEL_332:
            if (v12 >= 0)
              v200 = a4[2];
            else
              v200 = -v12;
            if (v13 >= 0)
              v201 = a4[3];
            else
              v201 = -v13;
            v202 = v201 * v23;
            v203 = v22 * v200;
            v204 = v18 ^ v12;
            if ((v19 ^ v13) < 0)
            {
              v206 = -(double)(v203 + v202);
              v209 = (double)(v203 - v202);
              if (v202 > v203)
                v209 = -(double)(v202 - v203);
              if (v204 < 0)
                v206 = v209;
              v207 = 1.0 / v28;
              v208 = 1.0 / v28 * (v40 * v198);
              if (v208 < 0.0)
                goto LABEL_360;
              goto LABEL_348;
            }
            if (v204 < 0)
            {
              v205 = v203 + v202;
            }
            else
            {
              v205 = v202 - v203;
              if (v202 < v203)
              {
                v206 = -(double)(v203 - v202);
                v207 = 1.0 / v28;
                v208 = 1.0 / v28 * (v40 * v198);
                if (v208 < 0.0)
                {
LABEL_360:
                  v211 = 0.0;
                  v210 = 0.0 - v208;
                  v220 = 5.0;
                  if (v208 > 0.0)
                  {
                    v221 = (v208 * 5.0 + 0.0) / v210;
                    v220 = -v221;
                    if (v221 >= 0.0)
                      v220 = v221;
                  }
                  v214 = v220 + 1.0;
                  v212 = v207 * (v10 * v206);
                  if (v212 < 0.0)
                  {
                    v213 = 0.0;
                    v215 = v210 - v212;
                    if (v212 > 0.0)
                      goto LABEL_367;
                    goto LABEL_365;
                  }
                  v217 = 0.0;
                  v216 = v212 + 0.0;
                  goto LABEL_375;
                }
LABEL_348:
                v210 = 0.0;
                v211 = v208 + 0.0;
                v212 = v207 * (v10 * v206);
                v213 = 6.0;
                if (v212 < 0.0)
                {
                  v214 = 0.0;
                  v215 = 0.0 - v212;
                  if (v212 > 0.0)
                    goto LABEL_367;
LABEL_365:
                  if (v210 >= 0.0)
                  {
                    v222 = 5.0;
                    v223 = v214 < 5.0;
                    goto LABEL_368;
                  }
LABEL_367:
                  v214 = (v212 * 5.0 + v210 * v214) / v215;
                  v222 = -v214;
                  v223 = v214 < 0.0;
LABEL_368:
                  if (v223)
                    v214 = v222;
                  v214 = v214 + 1.0;
                  v224 = v207 * (v11 * v206);
                  if (v224 >= 0.0)
                  {
LABEL_371:
                    v225 = 0.0;
                    v226 = v224 + 0.0;
                    v227 = v207 * (v41 * v198);
                    v228 = 6.0;
                    if (v227 < 0.0)
                    {
                      v229 = 0.0;
                      v230 = 0.0 - v227;
                      if (v227 > 0.0)
                        goto LABEL_385;
LABEL_383:
                      if (v225 >= 0.0)
                      {
                        v233 = 5.0;
                        v234 = v229 < 5.0;
LABEL_386:
                        if (v234)
                          v229 = v233;
                        v229 = v229 + 1.0;
LABEL_399:
                        v239 = v10 * v43;
                        v110 = v10 * v43 < 0.0;
                        v240 = v211;
                        v241 = v213;
                        v242 = v215;
                        v243 = v214;
                        if (v110)
                        {
                          v240 = -v215;
                          v242 = -v211;
                          v241 = v214;
                          v243 = v213;
                        }
                        v244 = v243 + 3.0 + 1.0;
                        v245 = v239 * v242;
                        v246 = v239 * v240 + 0.0;
                        v247 = v241 + 3.0 + 1.0;
                        if (v247 <= 0.0)
                          v248 = 1.0;
                        else
                          v248 = v247 + 1.0;
                        if (v244 <= 0.0)
                          v249 = 1.0;
                        else
                          v249 = v244 + 1.0;
                        v250 = v40 * v42;
                        v110 = v40 * v42 < 0.0;
                        v251 = v211;
                        v252 = v213;
                        v253 = v215;
                        v254 = v214;
                        if (v110)
                        {
                          v251 = -v215;
                          v253 = -v211;
                          v252 = v214;
                          v254 = v213;
                        }
                        v255 = v245 + 0.0;
                        v256 = v254 + 3.0;
                        v257 = v250 * v253;
                        v258 = v252 + 3.0 + 1.0;
                        v259 = v250 * v251;
                        v260 = v246 + v259;
                        if ((v246 < 0.0 || v259 < 0.0) && (v246 > 0.0 || v259 > 0.0))
                        {
                          v261 = (v246 * v248 - v259 * v258) / v260;
                          if (v261 < 0.0)
                            v261 = -v261;
                          v262 = v256 + 1.0;
                          v263 = v255 + v257;
                          if (v255 < 0.0)
                          {
LABEL_424:
                            if (v255 > 0.0 || v257 > 0.0)
                            {
                              v249 = (v255 * v249 - v257 * v262) / v263;
                              v262 = -v249;
                              v264 = v249 < 0.0;
LABEL_428:
                              if (v264)
                                v249 = v262;
                              v265 = v11 * v43;
                              v266 = v226;
                              v267 = v228;
                              v268 = v230;
                              v269 = v229;
                              if (v265 < 0.0)
                              {
                                v266 = -v230;
                                v268 = -v226;
                                v267 = v229;
                                v269 = v228;
                              }
                              v270 = v261 + 1.0;
                              v271 = v269 + 3.0;
                              v272 = v265 * v268;
                              v273 = v267 + 3.0 + 1.0;
                              v274 = v265 * v266;
                              v275 = v260 + v265 * v266;
                              if ((v260 < 0.0 || v274 < 0.0) && (v260 > 0.0 || v274 > 0.0))
                              {
                                v279 = (v260 * v270 - v274 * v273) / v275;
                                v270 = -v279;
                                if (v279 >= 0.0)
                                  v270 = v279;
                                v276 = v249 + 1.0;
                                v277 = v271 + 1.0;
                                v278 = v263 + v272;
                                if (v263 < 0.0)
                                {
LABEL_444:
                                  if (v263 > 0.0 || v272 > 0.0)
                                  {
                                    v281 = (v263 * v276 - v272 * v277) / v278;
                                    if (v281 >= 0.0)
                                      v280 = v281;
                                    else
                                      v280 = -v281;
LABEL_452:
                                    v282 = v42 * v41;
                                    v283 = v226;
                                    v284 = v228;
                                    v285 = v230;
                                    v286 = v229;
                                    if (v282 < 0.0)
                                    {
                                      v283 = -v230;
                                      v285 = -v226;
                                      v284 = v229;
                                      v286 = v228;
                                    }
                                    v287 = v98 + 1.0;
                                    v288 = v270 + 1.0;
                                    v289 = v286 + 3.0;
                                    v290 = v282 * v285;
                                    v291 = v284 + 3.0 + 1.0;
                                    v292 = v282 * v283;
                                    v293 = v275 + v282 * v283;
                                    if ((v275 < 0.0 || v292 < 0.0) && (v275 > 0.0 || v292 > 0.0))
                                    {
                                      v294 = (v275 * v288 - v292 * v291) / v293;
                                      if (v294 < 0.0)
                                        v294 = -v294;
                                      v295 = v287 + 1.0;
                                      v296 = v280 + 1.0;
                                      v297 = v289 + 1.0;
                                      v298 = v278 + v290;
                                      if (v278 < 0.0)
                                      {
LABEL_467:
                                        if (v278 > 0.0 || v290 > 0.0)
                                        {
                                          v300 = (v278 * v296 - v290 * v297) / v298;
                                          if (v300 >= 0.0)
                                            v299 = v300;
                                          else
                                            v299 = -v300;
                                          goto LABEL_475;
                                        }
LABEL_469:
                                        if (v296 >= v297)
                                          v299 = v296;
                                        else
                                          v299 = v297;
LABEL_475:
                                        v301 = -(int)v172;
                                        if (v301 >= 0)
                                          v302 = v301;
                                        else
                                          v302 = -v301;
                                        if (v171 >= 0)
                                          v303 = *a2;
                                        else
                                          v303 = -v171;
                                        v304 = v303 * v23;
                                        v305 = v302 * v22;
                                        v306 = v18 ^ v301;
                                        if ((v19 ^ v171) < 0)
                                        {
                                          if ((v306 & 0x8000000000000000) == 0)
                                          {
                                            v308 = v304 + v305;
                                            goto LABEL_489;
                                          }
                                          v308 = v304 - v305;
                                          if (v304 > v305)
                                            goto LABEL_489;
                                          v307 = v305 - v304;
                                        }
                                        else if (v306 < 0)
                                        {
                                          v307 = v304 + v305;
                                        }
                                        else
                                        {
                                          v307 = v304 - v305;
                                          if (v304 < v305)
                                          {
                                            v308 = v305 - v304;
LABEL_489:
                                            v309 = -(double)v308;
                                            goto LABEL_492;
                                          }
                                        }
                                        v309 = (double)v307;
LABEL_492:
                                        v310 = v294 + 1.0;
                                        v311 = v299 + 1.0;
                                        v312 = v42 * v309;
                                        if (v42 * v309 >= 0.0)
                                        {
                                          v314 = v298 + v312;
                                          if (v298 < 0.0 && (v298 > 0.0 || v312 > 0.0))
                                          {
                                            v311 = (v298 * v311 + v312 * -4.0) / v314;
                                            v315 = -v311;
                                            v316 = v311 < 0.0;
                                          }
                                          else
                                          {
                                            v315 = 4.0;
                                            v316 = v311 < 4.0;
                                          }
                                          if (v316)
                                            v311 = v315;
                                          v311 = v311 + 1.0;
                                        }
                                        else
                                        {
                                          if (v293 < 0.0 || v312 > 0.0)
                                          {
                                            v313 = (v293 * v310 + v312 * 4.0) / (v293 - v312);
                                            if (v313 < 0.0)
                                              v313 = -v313;
                                          }
                                          else
                                          {
                                            v313 = 4.0;
                                            if (v310 >= 4.0)
                                              v313 = v310;
                                          }
                                          v310 = v313 + 1.0;
                                          v314 = v298;
                                          v293 = v293 - v312;
                                        }
                                        v317 = (v97 + v97) * v180;
                                        v318 = v295 + 1.0 + 1.0 + 1.0;
                                        v319 = v303 * v21;
                                        v320 = v17 ^ v171;
                                        v321 = v16 ^ v301;
                                        v322 = v302 * v20;
                                        if (v320 < 0)
                                        {
                                          if ((v321 & 0x8000000000000000) == 0)
                                          {
                                            v323 = v319 + v322;
LABEL_515:
                                            v324 = v317 * v189;
                                            v325 = v318 + 1.0;
                                            v326 = v43 * -(double)v323;
                                            if (v326 < 0.0)
                                              goto LABEL_516;
LABEL_525:
                                            v328 = v314 + v326;
                                            if (v314 < 0.0 && (v314 > 0.0 || v326 > 0.0))
                                            {
                                              v329 = (v311 * v314 + v326 * -4.0) / v328;
                                              if (v329 < 0.0)
                                                v329 = -v329;
                                            }
                                            else
                                            {
                                              v329 = 4.0;
                                              if (v311 >= 4.0)
                                                v329 = v311;
                                            }
                                            v311 = v329 + 1.0;
LABEL_539:
                                            v330 = v328 + 0.0;
                                            v331 = v311 + 1.0;
                                            if (v311 <= 0.0)
                                              v331 = 1.0;
                                            v332 = v293 + 0.0;
                                            v333 = v310 + 1.0;
                                            if (v310 <= 0.0)
                                              v333 = 1.0;
                                            v334 = sqrt(v324);
                                            v335 = v325 * 0.5 + 1.0;
                                            if ((_DWORD)a5 == 2)
                                            {
                                              v336 = v334 + v330;
                                              if (v330 < 0.0 && (v334 > 0.0 || v330 > 0.0))
                                              {
                                                v331 = (v330 * v331 - v335 * v334) / v336;
                                                v335 = -v331;
                                                v337 = v331 < 0.0;
                                              }
                                              else
                                              {
                                                v337 = v331 < v335;
                                              }
                                              if (v337)
                                                v331 = v335;
                                              v331 = v331 + 1.0;
                                            }
                                            else
                                            {
                                              if (v332 < 0.0 && (v334 > 0.0 || v332 > 0.0))
                                              {
                                                v333 = (v332 * v333 - v335 * v334) / (v334 + v332);
                                                v335 = -v333;
                                                v338 = v333 < 0.0;
                                              }
                                              else
                                              {
                                                v338 = v333 < v335;
                                              }
                                              if (v338)
                                                v333 = v335;
                                              v333 = v333 + 1.0;
                                              v332 = v334 + v332;
                                              v336 = v330;
                                            }
                                            v339 = v97 * v97;
                                            v340 = v287 + v287 + 1.0 + 1.0;
                                            v341 = v340 + v331;
                                            v342 = v336 / v339;
                                            v343 = v340 + v333;
                                            v344 = v332 / v339;
                                            v345 = -(v332 / v339);
                                            v346 = -v342;
                                            if (v239 < 0.0)
                                              v347 = v345;
                                            else
                                              v347 = v342;
                                            if (v239 < 0.0)
                                              v348 = v343;
                                            else
                                              v348 = v341;
                                            if (v239 < 0.0)
                                              v349 = -v342;
                                            else
                                              v349 = v344;
                                            if (v239 < 0.0)
                                              v350 = v341;
                                            else
                                              v350 = v343;
                                            v351 = v350 + 3.0;
                                            v352 = v239 * v349;
                                            v353 = v348 + 3.0 + 1.0;
                                            v354 = v239 * v347;
                                            v355 = v211 + v354;
                                            if ((v211 < 0.0 || v354 < 0.0) && (v211 > 0.0 || v354 > 0.0))
                                            {
                                              v353 = (v213 * v211 - v354 * v353) / v355;
                                              if (v353 < 0.0)
                                                v353 = -v353;
                                              v356 = v351 + 1.0;
                                              v357 = v215 + v352;
                                              if (v215 < 0.0)
                                              {
LABEL_584:
                                                if (v215 > 0.0 || v352 > 0.0)
                                                {
                                                  v214 = (v214 * v215 - v352 * v356) / v357;
                                                  v356 = -v214;
                                                  v358 = v214 < 0.0;
LABEL_588:
                                                  if (v358)
                                                    v214 = v356;
                                                  v359 = v342;
                                                  v360 = v341;
                                                  v361 = v344;
                                                  v362 = v343;
                                                  if (v250 < 0.0)
                                                  {
                                                    v359 = v345;
                                                    v360 = v343;
                                                    v361 = -v342;
                                                    v362 = v341;
                                                  }
                                                  v363 = v353 + 1.0;
                                                  v364 = v362 + 3.0;
                                                  v365 = v360 + 3.0;
                                                  v366 = v250 * v361;
                                                  v367 = v365 + 1.0;
                                                  v368 = v250 * v359;
                                                  v369 = v355 + v368;
                                                  if ((v355 < 0.0 || v368 < 0.0) && (v355 > 0.0 || v368 > 0.0))
                                                  {
                                                    v373 = (v355 * v363 - v368 * v367) / v369;
                                                    if (v373 >= 0.0)
                                                      v363 = v373;
                                                    else
                                                      v363 = -v373;
                                                    v370 = v214 + 1.0;
                                                    v371 = v364 + 1.0;
                                                    v372 = v357 + v366;
                                                    if (v357 < 0.0)
                                                      goto LABEL_605;
                                                  }
                                                  else
                                                  {
                                                    if (v363 < v367)
                                                      v363 = v367;
                                                    v370 = v214 + 1.0;
                                                    v371 = v364 + 1.0;
                                                    v372 = v357 + v366;
                                                    if (v357 < 0.0)
                                                    {
LABEL_605:
                                                      if (v357 > 0.0 || v366 > 0.0)
                                                      {
                                                        v370 = (v357 * v370 - v366 * v371) / v372;
                                                        v371 = -v370;
                                                        v374 = v370 < 0.0;
LABEL_609:
                                                        if (v374)
                                                          v375 = v371;
                                                        else
                                                          v375 = v370;
                                                        if (v265 < 0.0)
                                                          v376 = v345;
                                                        else
                                                          v376 = v342;
                                                        if (v265 < 0.0)
                                                          v377 = v343;
                                                        else
                                                          v377 = v341;
                                                        if (v265 < 0.0)
                                                          v378 = -v342;
                                                        else
                                                          v378 = v344;
                                                        if (v265 < 0.0)
                                                          v379 = v341;
                                                        else
                                                          v379 = v343;
                                                        v380 = v379 + 3.0;
                                                        v381 = v377 + 3.0;
                                                        v382 = v265 * v378;
                                                        v383 = v381 + 1.0;
                                                        v384 = v265 * v376;
                                                        v385 = v226 + v384;
                                                        if ((v226 < 0.0 || v384 < 0.0) && (v226 > 0.0 || v384 > 0.0))
                                                        {
                                                          v386 = (v228 * v226 - v384 * v383) / v385;
                                                          if (v386 < 0.0)
                                                            v386 = -v386;
                                                          v387 = v380 + 1.0;
                                                          v388 = 1.0;
                                                          v389 = v230 + v382;
                                                          if (v230 < 0.0)
                                                          {
LABEL_637:
                                                            if (v230 > 0.0 || v382 > 0.0)
                                                            {
                                                              v391 = (v229 * v230 - v382 * v387) / v389;
                                                              v390 = -v391;
                                                              if (v391 >= 0.0)
                                                                v390 = v391;
LABEL_644:
                                                              v392 = v386 + v388;
                                                              if (v282 < 0.0)
                                                                v393 = v345;
                                                              else
                                                                v393 = v342;
                                                              if (v282 < 0.0)
                                                                v394 = v343;
                                                              else
                                                                v394 = v341;
                                                              if (v282 < 0.0)
                                                              {
                                                                v395 = v341;
                                                              }
                                                              else
                                                              {
                                                                v346 = v344;
                                                                v395 = v343;
                                                              }
                                                              v396 = v395 + 3.0;
                                                              v397 = v394 + 3.0;
                                                              v398 = v282 * v346;
                                                              v399 = v397 + 1.0;
                                                              v400 = v282 * v393;
                                                              v401 = v385 + v400;
                                                              if ((v385 < 0.0 || v400 < 0.0)
                                                                && (v385 > 0.0 || v400 > 0.0))
                                                              {
                                                                v405 = (v385 * v392 - v400 * v399) / v401;
                                                                v392 = -v405;
                                                                if (v405 >= 0.0)
                                                                  v392 = v405;
                                                                v402 = v390 + 1.0;
                                                                v403 = v396 + 1.0;
                                                                v404 = v389 + v398;
                                                                if (v389 < 0.0)
                                                                {
LABEL_665:
                                                                  if (v389 > 0.0 || v398 > 0.0)
                                                                  {
                                                                    v406 = (v389 * v402 - v398 * v403) / v404;
                                                                    if (v406 < 0.0)
                                                                      v406 = -v406;
                                                                    v407 = 1.0;
                                                                    v408 = 1.0;
                                                                    if (v342 < v344)
                                                                    {
LABEL_671:
                                                                      v409 = v342;
                                                                      v410 = v363 + v407;
                                                                      v411 = v375 + 1.0;
                                                                      v412 = v341 + v408;
                                                                      if (v28 >= 0.0)
                                                                        goto LABEL_672;
                                                                      goto LABEL_685;
                                                                    }
LABEL_684:
                                                                    v420 = v343;
                                                                    v409 = v344;
                                                                    v343 = v341;
                                                                    v344 = v342;
                                                                    v410 = v363 + v407;
                                                                    v411 = v375 + 1.0;
                                                                    v412 = v420 + v408;
                                                                    if (v28 >= 0.0)
                                                                    {
LABEL_672:
                                                                      v413 = v28 * v409;
                                                                      v414 = v343 + 1.0 + 1.0;
                                                                      v415 = v28 * v344;
                                                                      v416 = v369 + v415;
                                                                      if ((v369 < 0.0 || v415 < 0.0)
                                                                        && (v369 > 0.0 || v415 > 0.0))
                                                                      {
                                                                        v425 = (v369 * v410 - v415 * v414) / v416;
                                                                        if (v425 >= 0.0)
                                                                          v417 = v425;
                                                                        else
                                                                          v417 = -v425;
                                                                        v418 = v412 + 1.0;
                                                                        v419 = v372 + v413;
                                                                        if (v372 < 0.0)
                                                                          goto LABEL_699;
                                                                      }
                                                                      else
                                                                      {
                                                                        if (v410 >= v414)
                                                                          v417 = v410;
                                                                        else
                                                                          v417 = v414;
                                                                        v418 = v412 + 1.0;
                                                                        v419 = v372 + v413;
                                                                        if (v372 < 0.0)
                                                                        {
LABEL_699:
                                                                          if (v372 <= 0.0 && v413 <= 0.0)
                                                                            goto LABEL_701;
                                                                          v428 = v372 * v411 - v413 * v418;
                                                                          goto LABEL_718;
                                                                        }
                                                                      }
                                                                      if (v413 >= 0.0)
                                                                      {
LABEL_701:
                                                                        if (v411 >= v418)
                                                                          v424 = v411;
                                                                        else
                                                                          v424 = v418;
                                                                        v426 = 1.0;
                                                                        v162 = v369 - v372;
                                                                        if (v369 < 0.0)
                                                                          goto LABEL_722;
LABEL_721:
                                                                        if (v372 <= 0.0)
                                                                          goto LABEL_724;
                                                                        goto LABEL_722;
                                                                      }
                                                                      goto LABEL_699;
                                                                    }
LABEL_685:
                                                                    v421 = v343 + 1.0 + 1.0;
                                                                    v422 = -(v344 * v28);
                                                                    v423 = -(v409 * v28);
                                                                    v416 = v369 + v422;
                                                                    if ((v369 < 0.0 || v422 < 0.0)
                                                                      && (v369 > 0.0 || v422 > 0.0))
                                                                    {
                                                                      v427 = (v369 * v410 - v422 * v421) / v416;
                                                                      v417 = -v427;
                                                                      if (v427 >= 0.0)
                                                                        v417 = v427;
                                                                      v424 = v412 + 1.0;
                                                                      v419 = v372 + v423;
                                                                      if (v372 < 0.0)
                                                                      {
LABEL_710:
                                                                        if (v372 > 0.0 || v423 > 0.0)
                                                                        {
                                                                          v428 = v372 * v411 - v423 * v424;
LABEL_718:
                                                                          v429 = v428 / v419;
                                                                          v424 = -v429;
                                                                          if (v429 >= 0.0)
                                                                            v424 = v429;
                                                                          v426 = 1.0;
                                                                          v162 = v369 - v372;
                                                                          if (v369 >= 0.0)
                                                                            goto LABEL_721;
                                                                          goto LABEL_722;
                                                                        }
LABEL_712:
                                                                        if (v411 >= v424)
                                                                          v424 = v411;
                                                                        v426 = 1.0;
                                                                        v162 = v369 - v372;
                                                                        if (v369 >= 0.0)
                                                                          goto LABEL_721;
LABEL_722:
                                                                        if (v369 > 0.0 || v372 < 0.0)
                                                                        {
                                                                          v163 = (v369 * v410 + v372 * v411) / v162;
                                                                          if (v163 < 0.0)
                                                                            v163 = -v163;
LABEL_727:
                                                                          v430 = v392 + v426;
                                                                          v431 = v406 + v408;
                                                                          v166 = v401 - v404;
                                                                          if ((v401 < 0.0 || v404 > 0.0)
                                                                            && (v401 > 0.0 || v404 < 0.0))
                                                                          {
                                                                            v167 = (v401 * v430 + v404 * v431) / v166;
                                                                            if (v167 < 0.0)
                                                                              v167 = -v167;
                                                                          }
                                                                          else if (v430 >= v431)
                                                                          {
                                                                            v167 = v430;
                                                                          }
                                                                          else
                                                                          {
                                                                            v167 = v431;
                                                                          }
                                                                          v432 = v424 + 1.0;
                                                                          v433 = v417 + 1.0;
                                                                          v168 = v416 - v419;
                                                                          if (v416 >= 0.0 && v419 <= 0.0
                                                                            || v416 <= 0.0 && v419 >= 0.0)
                                                                          {
                                                                            if (v433 >= v432)
                                                                              v169 = v417 + 1.0;
                                                                            else
                                                                              v169 = v424 + 1.0;
                                                                            goto LABEL_747;
                                                                          }
                                                                          v169 = (v419 * v432 + v433 * v416) / v168;
                                                                          if (v169 >= 0.0)
                                                                            goto LABEL_747;
LABEL_746:
                                                                          v169 = -v169;
                                                                          goto LABEL_747;
                                                                        }
LABEL_724:
                                                                        if (v410 >= v411)
                                                                          v163 = v410;
                                                                        else
                                                                          v163 = v411;
                                                                        goto LABEL_727;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      if (v410 >= v421)
                                                                        v417 = v410;
                                                                      else
                                                                        v417 = v421;
                                                                      v424 = v412 + 1.0;
                                                                      v419 = v372 + v423;
                                                                      if (v372 < 0.0)
                                                                        goto LABEL_710;
                                                                    }
                                                                    if (v423 >= 0.0)
                                                                      goto LABEL_712;
                                                                    goto LABEL_710;
                                                                  }
LABEL_667:
                                                                  if (v402 >= v403)
                                                                    v406 = v402;
                                                                  else
                                                                    v406 = v403;
                                                                  v407 = 1.0;
                                                                  v408 = 1.0;
                                                                  if (v342 < v344)
                                                                    goto LABEL_671;
                                                                  goto LABEL_684;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                if (v392 < v399)
                                                                  v392 = v397 + 1.0;
                                                                v402 = v390 + 1.0;
                                                                v403 = v396 + 1.0;
                                                                v404 = v389 + v398;
                                                                if (v389 < 0.0)
                                                                  goto LABEL_665;
                                                              }
                                                              if (v398 >= 0.0)
                                                                goto LABEL_667;
                                                              goto LABEL_665;
                                                            }
LABEL_639:
                                                            if (v229 >= v387)
                                                              v390 = v229;
                                                            else
                                                              v390 = v387;
                                                            goto LABEL_644;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          if (v228 >= v383)
                                                            v386 = v228;
                                                          else
                                                            v386 = v381 + 1.0;
                                                          v387 = v380 + 1.0;
                                                          v388 = 1.0;
                                                          v389 = v230 + v382;
                                                          if (v230 < 0.0)
                                                            goto LABEL_637;
                                                        }
                                                        if (v382 >= 0.0)
                                                          goto LABEL_639;
                                                        goto LABEL_637;
                                                      }
LABEL_607:
                                                      v374 = v370 < v371;
                                                      goto LABEL_609;
                                                    }
                                                  }
                                                  if (v366 >= 0.0)
                                                    goto LABEL_607;
                                                  goto LABEL_605;
                                                }
LABEL_586:
                                                v358 = v214 < v356;
                                                goto LABEL_588;
                                              }
                                            }
                                            else
                                            {
                                              if (v213 >= v353)
                                                v353 = v213;
                                              v356 = v351 + 1.0;
                                              v357 = v215 + v352;
                                              if (v215 < 0.0)
                                                goto LABEL_584;
                                            }
                                            if (v352 >= 0.0)
                                              goto LABEL_586;
                                            goto LABEL_584;
                                          }
                                          if (v319 <= v322)
                                          {
                                            v324 = v317 * v189;
                                            v325 = v318 + 1.0;
                                            v326 = v43 * (double)(v322 - v319);
                                            if (v326 >= 0.0)
                                              goto LABEL_525;
                                          }
                                          else
                                          {
                                            v324 = v317 * v189;
                                            v325 = v318 + 1.0;
                                            v326 = v43 * -(double)(v319 - v322);
                                            if (v326 >= 0.0)
                                              goto LABEL_525;
                                          }
                                        }
                                        else if (v321 < 0)
                                        {
                                          v324 = v317 * v189;
                                          v325 = v318 + 1.0;
                                          v326 = v43 * (double)(v319 + v322);
                                          if (v326 >= 0.0)
                                            goto LABEL_525;
                                        }
                                        else
                                        {
                                          if (v319 < v322)
                                          {
                                            v323 = v322 - v319;
                                            goto LABEL_515;
                                          }
                                          v324 = v317 * v189;
                                          v325 = v318 + 1.0;
                                          v326 = v43 * (double)(v319 - v322);
                                          if (v326 >= 0.0)
                                            goto LABEL_525;
                                        }
LABEL_516:
                                        if (v293 < 0.0 || v326 > 0.0)
                                        {
                                          v327 = (v310 * v293 + v326 * 4.0) / (v293 - v326);
                                          if (v327 < 0.0)
                                            v327 = -v327;
                                        }
                                        else
                                        {
                                          v327 = 4.0;
                                          if (v310 >= 4.0)
                                            v327 = v310;
                                        }
                                        v310 = v327 + 1.0;
                                        v328 = v314;
                                        v293 = v293 - v326;
                                        goto LABEL_539;
                                      }
                                    }
                                    else
                                    {
                                      if (v288 >= v291)
                                        v294 = v288;
                                      else
                                        v294 = v291;
                                      v295 = v287 + 1.0;
                                      v296 = v280 + 1.0;
                                      v297 = v289 + 1.0;
                                      v298 = v278 + v290;
                                      if (v278 < 0.0)
                                        goto LABEL_467;
                                    }
                                    if (v290 >= 0.0)
                                      goto LABEL_469;
                                    goto LABEL_467;
                                  }
LABEL_446:
                                  if (v276 >= v277)
                                    v280 = v276;
                                  else
                                    v280 = v277;
                                  goto LABEL_452;
                                }
                              }
                              else
                              {
                                if (v270 < v273)
                                  v270 = v273;
                                v276 = v249 + 1.0;
                                v277 = v271 + 1.0;
                                v278 = v263 + v272;
                                if (v263 < 0.0)
                                  goto LABEL_444;
                              }
                              if (v272 >= 0.0)
                                goto LABEL_446;
                              goto LABEL_444;
                            }
LABEL_426:
                            v264 = v249 < v262;
                            goto LABEL_428;
                          }
                        }
                        else
                        {
                          if (v248 >= v258)
                            v261 = v248;
                          else
                            v261 = v252 + 3.0 + 1.0;
                          v262 = v256 + 1.0;
                          v263 = v255 + v257;
                          if (v255 < 0.0)
                            goto LABEL_424;
                        }
                        if (v257 >= 0.0)
                          goto LABEL_426;
                        goto LABEL_424;
                      }
LABEL_385:
                      v229 = (v227 * 5.0 + v225 * v229) / v230;
                      v233 = -v229;
                      v234 = v229 < 0.0;
                      goto LABEL_386;
                    }
                    v235 = v227 + v226;
                    v236 = 6.0;
                    v229 = 0.0;
                    if (v226 < 0.0 && (v227 > 0.0 || v226 > 0.0))
                    {
                      v237 = (v226 * 6.0 + v227 * -5.0) / v235;
                      v238 = -v237;
                      if (v237 >= 0.0)
                        v238 = v237;
                      v229 = 0.0;
LABEL_398:
                      v228 = v238 + 1.0;
                      v230 = v225;
                      v226 = v235;
                      goto LABEL_399;
                    }
LABEL_396:
                    v238 = 5.0;
                    if (v236 >= 5.0)
                      v238 = v236;
                    goto LABEL_398;
                  }
LABEL_378:
                  v226 = 0.0;
                  v225 = 0.0 - v224;
                  v231 = 5.0;
                  if (v224 > 0.0)
                  {
                    v232 = (v224 * 5.0 + 0.0) / v225;
                    v231 = -v232;
                    if (v232 >= 0.0)
                      v231 = v232;
                  }
                  v229 = v231 + 1.0;
                  v227 = v207 * (v41 * v198);
                  if (v227 < 0.0)
                  {
                    v228 = 0.0;
                    v230 = v225 - v227;
                    if (v227 > 0.0)
                      goto LABEL_385;
                    goto LABEL_383;
                  }
                  v236 = 0.0;
                  v235 = v227 + 0.0;
                  goto LABEL_396;
                }
                v216 = v211 + v212;
                v217 = 6.0;
                v214 = 0.0;
                if (v211 < 0.0 && (v211 > 0.0 || v212 > 0.0))
                {
                  v218 = (v211 * 6.0 + v212 * -5.0) / v216;
                  if (v218 >= 0.0)
                    v219 = (v211 * 6.0 + v212 * -5.0) / v216;
                  else
                    v219 = -v218;
                  v214 = 0.0;
                  v210 = 0.0;
                  goto LABEL_377;
                }
LABEL_375:
                v219 = 5.0;
                if (v217 >= 5.0)
                  v219 = v217;
LABEL_377:
                v213 = v219 + 1.0;
                v215 = v210;
                v211 = v216;
                v224 = v207 * (v11 * v206);
                if (v224 >= 0.0)
                  goto LABEL_371;
                goto LABEL_378;
              }
            }
            v206 = (double)v205;
            v207 = 1.0 / v28;
            v208 = 1.0 / v28 * (v40 * v198);
            if (v208 < 0.0)
              goto LABEL_360;
            goto LABEL_348;
          }
          v190 = v186 + v185;
        }
        v189 = (double)v190;
        goto LABEL_315;
      }
      v181 = v176 + v177;
    }
    v180 = (double)v181;
    goto LABEL_296;
  }
  v33 = v15 - v8;
  if (v14 - v9 >= 0)
    v34 = v14 - v9;
  else
    v34 = v9 - v14;
  if (v33 >= 0)
    v35 = v15 - v8;
  else
    v35 = v8 - v15;
  v36 = v35 * v20;
  v37 = v34 * v21;
  v38 = (v14 - v9) ^ v17;
  if ((v33 ^ v16) < 0)
  {
    v39 = -(double)(v37 + v36);
    v51 = (double)(v37 - v36);
    v99 = v36 > v37;
    v52 = v36 - v37;
    if (v99)
      v51 = -(double)v52;
    if (v38 < 0)
      v39 = v51;
  }
  else if (v38 < 0)
  {
    v39 = (double)(v37 + v36);
  }
  else if (v36 >= v37)
  {
    v39 = (double)(v36 - v37);
  }
  else
  {
    v39 = -(double)(v37 - v36);
  }
  v54 = *a2;
  v53 = a2[1];
  v55 = v53 - v9;
  if (v54 - v8 >= 0)
    v56 = v54 - v8;
  else
    v56 = v8 - v54;
  if (v55 >= 0)
    v57 = v53 - v9;
  else
    v57 = v9 - v53;
  v58 = v57 * v21;
  v59 = v56 * v20;
  v60 = v55 ^ v17;
  v61 = (double)(v58 - v59);
  v62 = (double)(v59 - v58);
  v63 = (v54 - v8) ^ v16;
  if (v58 < v59)
    v61 = -v62;
  if (v63 < 0)
    v61 = (double)(v58 + v59);
  if (v58 > v59)
    v62 = -(double)(v58 - v59);
  if (v63 >= 0)
    v62 = -(double)(v58 + v59);
  if (v60 < 0)
    v64 = v62;
  else
    v64 = v61;
  v65 = v53 - v14;
  v66 = v54 - v15;
  if (v53 - v14 >= 0)
    v67 = v53 - v14;
  else
    v67 = v14 - v53;
  if (v66 >= 0)
    v68 = v54 - v15;
  else
    v68 = v15 - v54;
  v69 = v68 * v20;
  v70 = v67 * v21;
  v71 = v66 ^ v16;
  v72 = (double)(v69 - v70);
  v73 = v65 ^ v17;
  v74 = (double)(v70 - v69);
  if (v69 < v70)
    v72 = -v74;
  if (v73 < 0)
    v72 = (double)(v70 + v69);
  if (v69 > v70)
    v74 = -(double)(v69 - v70);
  if (v73 >= 0)
    v74 = -(double)(v70 + v69);
  if (v71 < 0)
    v75 = v74;
  else
    v75 = v72;
  v76 = ((double)(int)v8 + v30) * 0.5;
  v77 = v10 * (v76 - (double)(int)v54);
  if (v77 >= 0.0)
  {
    v82 = 0.0;
    v83 = v77 + 0.0;
    v78 = 2.0;
    v79 = 0.0;
  }
  else
  {
    v78 = 0.0;
    v79 = 0.0 - v77;
    v80 = 1.0;
    if (v77 > 0.0)
    {
      v81 = (v77 + 0.0) / v79;
      v80 = -v81;
      if (v81 >= 0.0)
        v80 = v81;
    }
    v82 = v80 + 1.0;
    v83 = 0.0;
  }
  v84 = v64 * v75;
  v85 = ((double)(int)v9 + v31) * 0.5;
  v86 = v11 * (v85 - (double)(int)v53);
  if (v86 >= 0.0)
  {
    v88 = v86 + v83;
    if (v83 < 0.0 && (v86 > 0.0 || v83 > 0.0))
    {
      v100 = (v78 * v83 - v86) / v88;
      if (v100 < 0.0)
        v100 = -v100;
      v78 = v100 + 1.0;
      v90 = sqrt(v84);
      if ((_DWORD)a5 == 2)
        goto LABEL_115;
    }
    else
    {
      v89 = 1.0;
      if (v78 >= 1.0)
        v89 = v78;
      v78 = v89 + 1.0;
      v90 = sqrt(v84);
      if ((_DWORD)a5 == 2)
        goto LABEL_115;
    }
  }
  else
  {
    if (v86 > 0.0 || v79 < 0.0)
    {
      v87 = (v86 + v82 * v79) / (v79 - v86);
      if (v87 < 0.0)
        v87 = -v87;
    }
    else
    {
      v87 = 1.0;
      if (v82 >= 1.0)
        v87 = v82;
    }
    v82 = v87 + 1.0;
    v88 = v83;
    v79 = v79 - v86;
    v90 = sqrt(v84);
    if ((_DWORD)a5 == 2)
    {
LABEL_115:
      v93 = v90 + v79;
      if (v79 < 0.0 && (v90 > 0.0 || v79 > 0.0))
      {
        v94 = (v82 * v79 + v90 * -2.5) / v93;
        if (v94 < 0.0)
          v94 = -v94;
      }
      else
      {
        v94 = 2.5;
        if (v82 >= 2.5)
          v94 = v82;
      }
      v82 = v94 + 1.0;
      goto LABEL_133;
    }
  }
  v91 = v90 + v88;
  if (v88 < 0.0 && (v90 > 0.0 || v88 > 0.0))
  {
    v92 = (v78 * v88 + v90 * -2.5) / v91;
    if (v92 < 0.0)
      v92 = -v92;
  }
  else
  {
    v92 = 2.5;
    if (v78 >= 2.5)
      v92 = v78;
  }
  v78 = v92 + 1.0;
  v88 = v91;
  v93 = v79;
LABEL_133:
  v101 = v82 + 3.0;
  v102 = v93 / v32;
  v103 = v78 + 3.0;
  v104 = v88 / v32;
  if (v76 >= 0.0)
  {
    v108 = 0.0;
    v109 = v76 + 0.0;
    v105 = 1.0;
    v106 = 0.0;
  }
  else
  {
    v105 = 0.0;
    v106 = 0.0 - v76;
    v107 = 0.0;
    if (v76 > 0.0)
    {
      v107 = (v76 * 0.0 + 0.0) / v106;
      if (v107 < 0.0)
        v107 = -v107;
    }
    v108 = v107 + 1.0;
    v109 = 0.0;
  }
  v110 = v10 < 0.0;
  v111 = -(v10 * v104);
  v112 = -(v10 * v102);
  v113 = v10 * v102;
  v114 = v10 * v104;
  if (v110)
    v115 = v111;
  else
    v115 = v113;
  if (v110)
    v116 = v103;
  else
    v116 = v101;
  if (v110)
  {
    v117 = v101;
  }
  else
  {
    v112 = v114;
    v117 = v103;
  }
  v118 = v116 + 1.0;
  v119 = v109 + v115;
  if (v109 >= 0.0 && v115 >= 0.0 || v109 <= 0.0 && v115 <= 0.0)
  {
    if (v105 < v118)
      v105 = v118;
    v120 = v117 + 1.0;
    v121 = v106 + v112;
    if (v106 < 0.0)
      goto LABEL_160;
LABEL_159:
    if (v112 >= 0.0)
      goto LABEL_162;
    goto LABEL_160;
  }
  v105 = (v105 * v109 - v115 * v118) / v119;
  if (v105 < 0.0)
    v105 = -v105;
  v120 = v117 + 1.0;
  v121 = v106 + v112;
  if (v106 >= 0.0)
    goto LABEL_159;
LABEL_160:
  if (v106 > 0.0 || v112 > 0.0)
  {
    v131 = (v108 * v106 - v112 * v120) / v121;
    v122 = -v131;
    if (v131 >= 0.0)
      v122 = v131;
    v123 = 1.0;
    v124 = v85 <= 0.0;
    if (v85 < 0.0)
      goto LABEL_166;
LABEL_173:
    v129 = 0.0;
    v130 = v85 + 0.0;
    v126 = 0.0;
    v125 = 1.0;
    goto LABEL_174;
  }
LABEL_162:
  if (v108 >= v120)
    v122 = v108;
  else
    v122 = v120;
  v123 = 1.0;
  v124 = v85 <= 0.0;
  if (v85 >= 0.0)
    goto LABEL_173;
LABEL_166:
  v125 = 0.0;
  v126 = 0.0 - v85;
  v127 = 0.0;
  if (!v124)
  {
    v128 = (v85 * 0.0 + 0.0) / v126;
    v127 = -v128;
    if (v128 >= 0.0)
      v127 = v128;
  }
  v129 = v127 + 1.0;
  v130 = 0.0;
LABEL_174:
  v132 = v11 < 0.0;
  v133 = -(v11 * v104);
  v134 = -(v11 * v102);
  v135 = v11 * v102;
  v136 = v11 * v104;
  if (v132)
    v137 = v133;
  else
    v137 = v135;
  if (v132)
    v138 = v103;
  else
    v138 = v101;
  if (v132)
    v139 = v134;
  else
    v139 = v136;
  if (!v132)
    v101 = v103;
  v140 = v138 + 1.0;
  v141 = v130 + v137;
  if ((v130 < 0.0 || v137 < 0.0) && (v130 > 0.0 || v137 > 0.0))
  {
    v145 = (v125 * v130 - v137 * v140) / v141;
    v125 = -v145;
    if (v145 >= 0.0)
      v125 = v145;
    v142 = 1.0;
    v143 = v101 + 1.0;
    v144 = v126 + v139;
    if (v126 < 0.0)
      goto LABEL_197;
  }
  else
  {
    if (v125 < v140)
      v125 = v140;
    v142 = 1.0;
    v143 = v101 + 1.0;
    v144 = v126 + v139;
    if (v126 < 0.0)
      goto LABEL_197;
  }
  if (v139 >= 0.0)
    goto LABEL_199;
LABEL_197:
  if (v126 <= 0.0 && v139 <= 0.0)
  {
LABEL_199:
    if (v129 >= v143)
      v143 = v129;
    goto LABEL_204;
  }
  v143 = (v129 * v126 - v139 * v143) / v144;
  if (v143 < 0.0)
    v143 = -v143;
LABEL_204:
  v146 = v105 + v142;
  v147 = v122 + v123;
  v148 = v39 * 0.5 / sqrt(v32);
  if (v39 >= 0.0)
  {
    if (v148 >= 0.0)
    {
      v149 = v148 + v119;
      if (v119 < 0.0 && (v148 > 0.0 || v119 > 0.0))
      {
        v150 = v119 * v146 + v148 * -5.0;
LABEL_241:
        v154 = v150 / v149;
        if (v154 < 0.0)
          v154 = -v154;
        goto LABEL_243;
      }
LABEL_222:
      v154 = 5.0;
      if (v146 >= 5.0)
        v154 = v146;
LABEL_243:
      v159 = v154 + 1.0;
      v151 = v121;
      v158 = v147;
      v160 = 1.0;
      v161 = 1.0;
      v162 = v119 - v121;
      if (v119 < 0.0)
        goto LABEL_245;
      goto LABEL_244;
    }
    v151 = v121 - v148;
    if (v148 <= 0.0 && v121 >= 0.0)
      goto LABEL_216;
    v152 = v148 * 5.0 + v121 * v147;
  }
  else
  {
    if (v148 < 0.0)
    {
      v149 = v119 - v148;
      if (v148 > 0.0 || v119 < 0.0)
      {
        v150 = v148 * 5.0 + v119 * v146;
        goto LABEL_241;
      }
      goto LABEL_222;
    }
    v151 = v148 + v121;
    if (v121 >= 0.0 || v148 <= 0.0 && v121 <= 0.0)
    {
LABEL_216:
      v153 = 5.0;
      if (v147 >= 5.0)
        v153 = v122 + v123;
      goto LABEL_238;
    }
    v152 = v121 * v147 + v148 * -5.0;
  }
  v153 = v152 / v151;
  if (v153 < 0.0)
    v153 = -v153;
LABEL_238:
  v158 = v153 + 1.0;
  v149 = v119;
  v159 = v146;
  v160 = 1.0;
  v161 = 1.0;
  v162 = v119 - v121;
  if (v119 < 0.0)
    goto LABEL_245;
LABEL_244:
  if (v121 <= 0.0)
  {
LABEL_247:
    if (v146 >= v147)
      v163 = v146;
    else
      v163 = v147;
    goto LABEL_250;
  }
LABEL_245:
  if (v119 <= 0.0 && v121 >= 0.0)
    goto LABEL_247;
  v163 = (v119 * v146 + v121 * v147) / v162;
  if (v163 < 0.0)
    v163 = -v163;
LABEL_250:
  v164 = v125 + v160;
  v165 = v143 + v161;
  v166 = v141 - v144;
  if ((v141 < 0.0 || v144 > 0.0) && (v141 > 0.0 || v144 < 0.0))
  {
    v167 = (v141 * v164 + v144 * v165) / v166;
    if (v167 < 0.0)
      v167 = -v167;
  }
  else if (v164 >= v165)
  {
    v167 = v164;
  }
  else
  {
    v167 = v143 + v161;
  }
  v168 = v149 - v151;
  if (v149 >= 0.0 && v151 <= 0.0 || v149 <= 0.0 && v151 >= 0.0)
  {
    if (v159 >= v158)
      v169 = v159;
    else
      v169 = v158;
    goto LABEL_747;
  }
  v169 = (v151 * v158 + v149 * v159) / v168;
  if (v169 < 0.0)
    goto LABEL_746;
LABEL_747:
  *(double *)a6 = v162;
  *(double *)(a6 + 8) = v166;
  *(double *)(a6 + 16) = v168;
  *(_BYTE *)(a6 + 24) = 1;
  v434 = v163 + 1.0;
  v435 = v167 + 1.0;
  v436 = v169 + 1.0;
  if (v434 > 64.0 || v435 > 64.0 || v436 > 64.0)
    sub_20EEDA4E4(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, v434 > 64.0, v435 > 64.0, v436 > 64.0);
}

void sub_20EED1DA8(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  double v47;
  unint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  double v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  double v77;
  double v78;
  double v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  double v84;
  unint64_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  BOOL v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  BOOL v111;
  double v112;
  double v113;
  double v114;
  double v115;
  BOOL v116;
  double v117;
  double v118;
  double v119;
  BOOL v120;
  double v121;
  double v122;
  double v123;
  double v124;
  BOOL v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  BOOL v138;
  double v139;
  BOOL v140;
  double v141;
  double v142;
  BOOL v143;
  double v144;
  double v145;
  BOOL v146;
  double v147;
  BOOL v148;
  double v149;
  double v150;
  BOOL v151;
  double v152;
  BOOL v153;
  double v154;
  BOOL v155;
  double v156;
  double v157;
  BOOL v158;
  double v159;
  double v160;
  BOOL v161;
  double v162;
  BOOL v163;
  double v164;
  double v165;
  BOOL v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  BOOL v179;
  double v180;
  BOOL v181;
  double v182;
  double v183;
  BOOL v184;
  double v185;
  double v186;
  BOOL v187;
  double v188;
  BOOL v189;
  double v190;
  double v191;
  double v192;
  BOOL v193;
  double v194;
  double v195;
  double v196;
  BOOL v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  BOOL v213;
  BOOL v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;

  v5 = a2[2];
  v6 = a2[3];
  v8 = *a2;
  v7 = a2[1];
  if (v8 >= 0)
    v9 = *a2;
  else
    v9 = -v8;
  if (v7 >= 0)
    v10 = a2[1];
  else
    v10 = -v7;
  if (v5 >= 0)
    v11 = a2[2];
  else
    v11 = -v5;
  if (v6 >= 0)
    v12 = a2[3];
  else
    v12 = -v6;
  v13 = v12 * v9;
  v14 = v10 * v11;
  v15 = v7 ^ v5;
  if ((v6 ^ v8) < 0)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      v16 = v14 + v13;
      goto LABEL_19;
    }
    if (v13 > v14)
    {
      v17 = -(double)(v13 - v14);
      goto LABEL_26;
    }
    v18 = v14 - v13;
    goto LABEL_25;
  }
  if (v15 < 0)
  {
    v18 = v14 + v13;
LABEL_25:
    v17 = (double)v18;
    goto LABEL_26;
  }
  if (v13 < v14)
  {
    v16 = v14 - v13;
LABEL_19:
    v17 = -(double)v16;
    goto LABEL_26;
  }
  v17 = (double)(v13 - v14);
LABEL_26:
  v19 = a3[2];
  v20 = a3[3];
  v21 = *a3;
  v22 = a3[1];
  if (v21 >= 0)
    v23 = *a3;
  else
    v23 = -v21;
  if (v22 >= 0)
    v24 = a3[1];
  else
    v24 = -v22;
  if (v19 >= 0)
    v25 = a3[2];
  else
    v25 = -v19;
  if (v20 >= 0)
    v26 = a3[3];
  else
    v26 = -v20;
  v27 = v26 * v23;
  v28 = v24 * v25;
  v29 = v22 ^ v19;
  if ((v20 ^ v21) < 0)
  {
    if ((v29 & 0x8000000000000000) == 0)
    {
      v30 = v28 + v27;
      goto LABEL_44;
    }
    if (v27 > v28)
    {
      v31 = -(double)(v27 - v28);
      goto LABEL_51;
    }
    v32 = v28 - v27;
    goto LABEL_50;
  }
  if (v29 < 0)
  {
    v32 = v28 + v27;
LABEL_50:
    v31 = (double)v32;
    goto LABEL_51;
  }
  if (v27 < v28)
  {
    v30 = v28 - v27;
LABEL_44:
    v31 = -(double)v30;
    goto LABEL_51;
  }
  v31 = (double)(v27 - v28);
LABEL_51:
  v33 = a4[2];
  v34 = a4[3];
  v35 = *a4;
  v36 = a4[1];
  v37 = (double)(int)v33 - (double)(int)v35;
  v38 = (double)(int)v34 - (double)(int)v36;
  if (v35 >= 0)
    v39 = *a4;
  else
    v39 = -v35;
  if (v36 >= 0)
    v40 = a4[1];
  else
    v40 = -v36;
  if (v33 >= 0)
    v41 = a4[2];
  else
    v41 = -v33;
  if (v34 >= 0)
    v42 = a4[3];
  else
    v42 = -v34;
  v43 = v42 * v39;
  v44 = v40 * v41;
  v45 = v36 ^ v33;
  if ((v34 ^ v35) < 0)
  {
    if ((v45 & 0x8000000000000000) == 0)
    {
      v46 = v44 + v43;
      goto LABEL_69;
    }
    if (v43 > v44)
    {
      v47 = -(double)(v43 - v44);
      goto LABEL_76;
    }
    v48 = v44 - v43;
    goto LABEL_75;
  }
  if (v45 < 0)
  {
    v48 = v44 + v43;
LABEL_75:
    v47 = (double)v48;
    goto LABEL_76;
  }
  if (v43 < v44)
  {
    v46 = v44 - v43;
LABEL_69:
    v47 = -(double)v46;
    goto LABEL_76;
  }
  v47 = (double)(v43 - v44);
LABEL_76:
  v49 = (double)(int)v5 - (double)(int)v8;
  v50 = (double)(int)v6 - (double)(int)v7;
  v51 = (double)(int)v19 - (double)(int)v21;
  v52 = (double)(int)v20 - (double)(int)v22;
  v53 = v5 - v8;
  v54 = v6 - v7;
  v55 = v19 - v21;
  v56 = v20 - v22;
  if (v53 >= 0)
    v57 = v53;
  else
    v57 = -v53;
  if (v54 >= 0)
    v58 = v54;
  else
    v58 = -v54;
  if (v55 >= 0)
    v59 = v55;
  else
    v59 = -v55;
  if (v56 >= 0)
    v60 = v56;
  else
    v60 = -v56;
  v61 = v60 * v57;
  v62 = v59 * v58;
  v63 = v55 ^ v54;
  if ((v56 ^ v53) < 0)
  {
    if ((v63 & 0x8000000000000000) == 0)
    {
      v64 = v61 + v62;
      goto LABEL_94;
    }
    if (v61 > v62)
    {
      v65 = -(double)(v61 - v62);
      goto LABEL_101;
    }
    v66 = v62 - v61;
    goto LABEL_100;
  }
  if (v63 < 0)
  {
    v66 = v61 + v62;
LABEL_100:
    v65 = (double)v66;
    goto LABEL_101;
  }
  if (v61 < v62)
  {
    v64 = v62 - v61;
LABEL_94:
    v65 = -(double)v64;
    goto LABEL_101;
  }
  v65 = (double)(v61 - v62);
LABEL_101:
  v67 = v33 - v35;
  v68 = v34 - v36;
  if (v67 >= 0)
    v69 = v67;
  else
    v69 = -v67;
  if (v68 >= 0)
    v70 = v68;
  else
    v70 = -v68;
  v71 = v70 * v59;
  v72 = v69 * v60;
  v73 = v68 ^ v55;
  v74 = v67 ^ v56;
  if (v73 < 0)
  {
    if ((v74 & 0x8000000000000000) == 0)
    {
      v76 = v71 + v72;
      goto LABEL_115;
    }
    v76 = v71 - v72;
    if (v71 > v72)
      goto LABEL_115;
    v75 = v72 - v71;
  }
  else if (v74 < 0)
  {
    v75 = v71 + v72;
  }
  else
  {
    v75 = v71 - v72;
    if (v71 < v72)
    {
      v76 = v72 - v71;
LABEL_115:
      v77 = -(double)v76;
      goto LABEL_118;
    }
  }
  v77 = (double)v75;
LABEL_118:
  v78 = v49 * v49 + v50 * v50;
  v79 = v51 * v51 + v52 * v52;
  v80 = v69 * v58;
  v81 = v67 ^ v54;
  v82 = v68 ^ v53;
  v83 = v70 * v57;
  v84 = sqrt(v37 * v37 + v38 * v38);
  if (v81 < 0)
  {
    if (v82 < 0)
    {
      if (v80 <= v83)
      {
        v86 = (double)(v83 - v80);
        v87 = sqrt(v78);
        v88 = v84 * v65;
        v89 = sqrt(v79);
        if (v84 * v65 < 0.0)
          goto LABEL_125;
      }
      else
      {
        v86 = -(double)(v80 - v83);
        v87 = sqrt(v78);
        v88 = v84 * v65;
        v89 = sqrt(v79);
        if (v84 * v65 < 0.0)
          goto LABEL_125;
      }
      goto LABEL_131;
    }
    v85 = v83 + v80;
  }
  else
  {
    if (v82 < 0)
    {
      v86 = (double)(v83 + v80);
      v87 = sqrt(v78);
      v88 = v84 * v65;
      v89 = sqrt(v79);
      if (v84 * v65 < 0.0)
        goto LABEL_125;
      goto LABEL_131;
    }
    if (v80 >= v83)
    {
      v86 = (double)(v80 - v83);
      v87 = sqrt(v78);
      v88 = v84 * v65;
      v89 = sqrt(v79);
      if (v84 * v65 < 0.0)
        goto LABEL_125;
      goto LABEL_131;
    }
    v85 = v83 - v80;
  }
  v86 = -(double)v85;
  v87 = sqrt(v78);
  v88 = v84 * v65;
  v89 = sqrt(v79);
  if (v84 * v65 < 0.0)
  {
LABEL_125:
    v90 = 0.0;
    v91 = 0.0 - v88;
    v92 = 4.0;
    if (v88 > 0.0)
    {
      v93 = (v88 * 4.0 + 0.0) / v91;
      v92 = -v93;
      if (v93 >= 0.0)
        v92 = v93;
    }
    v94 = v92 + 1.0;
    v95 = v87 * v77;
    v96 = 0.0;
    if (v87 * v77 >= 0.0)
    {
      v97 = v95 + 0.0;
      goto LABEL_153;
    }
LABEL_133:
    v98 = v91 - v95;
    if (v95 > 0.0 || v91 < 0.0)
    {
      v101 = (v95 * 4.0 + v91 * v94) / v98;
      if (v101 < 0.0)
        v101 = -v101;
      v94 = v101 + 1.0;
      v99 = v89 * v86;
      v100 = v89 * v86 <= 0.0;
      if (v89 * v86 >= 0.0)
        goto LABEL_142;
    }
    else
    {
      if (v94 < 4.0)
        v94 = 4.0;
      v94 = v94 + 1.0;
      v99 = v89 * v86;
      v100 = v89 * v86 <= 0.0;
      if (v89 * v86 >= 0.0)
        goto LABEL_142;
    }
LABEL_156:
    v109 = v98 - v99;
    if (v100 && v98 >= 0.0)
    {
      v110 = 4.0;
      v111 = v94 < 4.0;
    }
    else
    {
      v94 = (v99 * 4.0 + v94 * v98) / v109;
      v110 = -v94;
      v111 = v94 < 0.0;
    }
    if (v111)
      v94 = v110;
    v94 = v94 + 1.0;
    v98 = v109;
    v102 = v90;
    v103 = v47 * v65;
    if (v103 < 0.0)
      goto LABEL_164;
LABEL_148:
    v104 = 0.0;
    v105 = v103 + 0.0;
    v106 = v17 * v77;
    v107 = 4.0;
    if (v106 < 0.0)
    {
      v108 = 0.0;
      goto LABEL_168;
    }
    v121 = v105 + v106;
    v108 = 0.0;
    if (v105 < 0.0 && (v105 > 0.0 || v106 > 0.0))
    {
      v122 = (v105 * 4.0 + v106 * -3.0) / v121;
      v107 = -v122;
      if (v122 >= 0.0)
        v107 = (v105 * 4.0 + v106 * -3.0) / v121;
      v108 = 0.0;
LABEL_190:
      v107 = v107 + 1.0;
      v105 = v121;
      v114 = v104;
      v115 = v31 * v86;
      v116 = v31 * v86 <= 0.0;
      if (v31 * v86 >= 0.0)
        goto LABEL_177;
      goto LABEL_191;
    }
LABEL_188:
    if (v107 < 3.0)
      v107 = 3.0;
    goto LABEL_190;
  }
LABEL_131:
  v91 = 0.0;
  v90 = v88 + 0.0;
  v95 = v87 * v77;
  v96 = 5.0;
  if (v87 * v77 < 0.0)
  {
    v94 = 0.0;
    goto LABEL_133;
  }
  v97 = v90 + v95;
  v94 = 0.0;
  if (v90 >= 0.0 || v90 <= 0.0 && v95 <= 0.0)
  {
LABEL_153:
    if (v96 < 4.0)
      v96 = 4.0;
    goto LABEL_155;
  }
  v226 = (v90 * 5.0 + v95 * -4.0) / v97;
  v96 = -v226;
  if (v226 >= 0.0)
    v96 = (v90 * 5.0 + v95 * -4.0) / v97;
  v94 = 0.0;
LABEL_155:
  v96 = v96 + 1.0;
  v98 = v91;
  v90 = v97;
  v99 = v89 * v86;
  v100 = v89 * v86 <= 0.0;
  if (v89 * v86 < 0.0)
    goto LABEL_156;
LABEL_142:
  v102 = v99 + v90;
  if (v90 < 0.0 && (v99 > 0.0 || v90 > 0.0))
  {
    v133 = (v96 * v90 + v99 * -4.0) / v102;
    if (v133 < 0.0)
      v133 = -v133;
    v96 = v133 + 1.0;
    v103 = v47 * v65;
    if (v103 >= 0.0)
      goto LABEL_148;
  }
  else
  {
    if (v96 < 4.0)
      v96 = 4.0;
    v96 = v96 + 1.0;
    v103 = v47 * v65;
    if (v103 >= 0.0)
      goto LABEL_148;
  }
LABEL_164:
  v105 = 0.0;
  v104 = 0.0 - v103;
  v112 = 3.0;
  if (v103 > 0.0)
  {
    v113 = (v103 * 3.0 + 0.0) / v104;
    v112 = -v113;
    if (v113 >= 0.0)
      v112 = v113;
  }
  v108 = v112 + 1.0;
  v106 = v17 * v77;
  v107 = 0.0;
  if (v106 >= 0.0)
  {
    v121 = v106 + 0.0;
    goto LABEL_188;
  }
LABEL_168:
  v114 = v104 - v106;
  if (v106 > 0.0 || v104 < 0.0)
  {
    v117 = (v106 * 3.0 + v104 * v108) / v114;
    if (v117 < 0.0)
      v117 = -v117;
    v108 = v117 + 1.0;
    v115 = v31 * v86;
    v116 = v31 * v86 <= 0.0;
    if (v31 * v86 >= 0.0)
    {
LABEL_177:
      v118 = v115 + v105;
      if (v105 < 0.0 && (v115 > 0.0 || v105 > 0.0))
      {
        v107 = (v107 * v105 + v115 * -3.0) / v118;
        v119 = -v107;
        v120 = v107 < 0.0;
      }
      else
      {
        v119 = 3.0;
        v120 = v107 < 3.0;
      }
      if (v120)
        v107 = v119;
      v107 = v107 + 1.0;
      v126 = v49 * v31 * v84;
      if (v126 < 0.0)
        goto LABEL_214;
      goto LABEL_199;
    }
  }
  else
  {
    if (v108 < 3.0)
      v108 = 3.0;
    v108 = v108 + 1.0;
    v115 = v31 * v86;
    v116 = v31 * v86 <= 0.0;
    if (v31 * v86 >= 0.0)
      goto LABEL_177;
  }
LABEL_191:
  v123 = v114 - v115;
  if (v116 && v114 >= 0.0)
  {
    v124 = 3.0;
    v125 = v108 < 3.0;
  }
  else
  {
    v108 = (v115 * 3.0 + v108 * v114) / v123;
    v124 = -v108;
    v125 = v108 < 0.0;
  }
  if (v125)
    v108 = v124;
  v108 = v108 + 1.0;
  v118 = v105;
  v114 = v123;
  v126 = v49 * v31 * v84;
  if (v126 < 0.0)
  {
LABEL_214:
    v128 = 0.0;
    v127 = 0.0 - v126;
    v134 = 5.0;
    if (v126 > 0.0)
    {
      v135 = (v126 * 5.0 + 0.0) / v127;
      v134 = -v135;
      if (v135 >= 0.0)
        v134 = v135;
    }
    v131 = v134 + 1.0;
    v129 = v17 * v51 * v84;
    if (v129 < 0.0)
    {
      v130 = 0.0;
      goto LABEL_219;
    }
    v132 = v129 + v127;
    v130 = 0.0;
    if (v127 < 0.0 && (v129 > 0.0 || v127 > 0.0))
    {
      v131 = (v127 * v131 + v129 * -5.0) / v132;
      if (v131 < 0.0)
        v131 = -v131;
      v130 = 0.0;
LABEL_235:
      v131 = v131 + 1.0;
      v127 = v132;
      v136 = v128;
      v139 = v87 * (v51 * v47);
      v140 = v139 <= 0.0;
      if (v139 >= 0.0)
        goto LABEL_226;
      goto LABEL_236;
    }
LABEL_233:
    if (v131 < 5.0)
      v131 = 5.0;
    goto LABEL_235;
  }
LABEL_199:
  v127 = 0.0;
  v128 = v126 + 0.0;
  v129 = v17 * v51 * v84;
  v130 = 6.0;
  v131 = 0.0;
  if (v129 >= 0.0)
  {
    v132 = v129 + 0.0;
    goto LABEL_233;
  }
LABEL_219:
  v136 = v128 - v129;
  if (v129 > 0.0 || v128 < 0.0)
  {
    v130 = (v129 * 5.0 + v128 * v130) / v136;
    v137 = -v130;
    v138 = v130 < 0.0;
  }
  else
  {
    v137 = 5.0;
    v138 = v130 < 5.0;
  }
  if (v138)
    v130 = v137;
  v130 = v130 + 1.0;
  v139 = v87 * (v51 * v47);
  v140 = v139 <= 0.0;
  if (v139 >= 0.0)
  {
LABEL_226:
    v141 = v139 + v136;
    if (v136 < 0.0 && (v139 > 0.0 || v136 > 0.0))
    {
      v130 = (v130 * v136 + v139 * -5.0) / v141;
      v142 = -v130;
      v143 = v130 < 0.0;
    }
    else
    {
      v142 = 5.0;
      v143 = v130 < 5.0;
    }
    if (v143)
      v130 = v142;
    v130 = v130 + 1.0;
    v147 = v87 * (v31 * v37);
    v148 = v147 <= 0.0;
    if (v147 < 0.0)
      goto LABEL_252;
    goto LABEL_244;
  }
LABEL_236:
  v144 = v127 - v139;
  if (v140 && v127 >= 0.0)
  {
    v145 = 5.0;
    v146 = v131 < 5.0;
  }
  else
  {
    v131 = (v139 * 5.0 + v131 * v127) / v144;
    v145 = -v131;
    v146 = v131 < 0.0;
  }
  if (v146)
    v131 = v145;
  v131 = v131 + 1.0;
  v127 = v144;
  v141 = v136;
  v147 = v87 * (v31 * v37);
  v148 = v147 <= 0.0;
  if (v147 < 0.0)
  {
LABEL_252:
    if (v148 && v141 >= 0.0)
    {
      v152 = 5.0;
      v153 = v130 < 5.0;
    }
    else
    {
      v130 = (v147 * 5.0 + v130 * v141) / (v141 - v147);
      v152 = -v130;
      v153 = v130 < 0.0;
    }
    if (v153)
      v130 = v152;
    v130 = v130 + 1.0;
    v149 = v127;
    v141 = v141 - v147;
    v154 = v89 * (v17 * v37);
    v155 = v154 <= 0.0;
    if (v154 >= 0.0)
      goto LABEL_260;
    goto LABEL_268;
  }
LABEL_244:
  v149 = v147 + v127;
  if (v127 < 0.0 && (v147 > 0.0 || v127 > 0.0))
  {
    v131 = (v131 * v127 + v147 * -5.0) / v149;
    v150 = -v131;
    v151 = v131 < 0.0;
  }
  else
  {
    v150 = 5.0;
    v151 = v131 < 5.0;
  }
  if (v151)
    v131 = v150;
  v131 = v131 + 1.0;
  v154 = v89 * (v17 * v37);
  v155 = v154 <= 0.0;
  if (v154 >= 0.0)
  {
LABEL_260:
    v156 = v154 + v141;
    if (v141 < 0.0 && (v154 > 0.0 || v141 > 0.0))
    {
      v130 = (v130 * v141 + v154 * -5.0) / v156;
      v157 = -v130;
      v158 = v130 < 0.0;
    }
    else
    {
      v157 = 5.0;
      v158 = v130 < 5.0;
    }
    if (v158)
      v130 = v157;
    v130 = v130 + 1.0;
    v162 = v89 * (v49 * v47);
    v163 = v162 <= 0.0;
    if (v162 < 0.0)
      goto LABEL_284;
    goto LABEL_276;
  }
LABEL_268:
  v159 = v149 - v154;
  if (v155 && v149 >= 0.0)
  {
    v160 = 5.0;
    v161 = v131 < 5.0;
  }
  else
  {
    v131 = (v154 * 5.0 + v131 * v149) / v159;
    v160 = -v131;
    v161 = v131 < 0.0;
  }
  if (v161)
    v131 = v160;
  v131 = v131 + 1.0;
  v149 = v159;
  v156 = v141;
  v162 = v89 * (v49 * v47);
  v163 = v162 <= 0.0;
  if (v162 < 0.0)
  {
LABEL_284:
    if (v163 && v156 >= 0.0)
    {
      v167 = 5.0;
      if (v130 >= 5.0)
        v167 = v130;
    }
    else
    {
      v167 = (v162 * 5.0 + v130 * v156) / (v156 - v162);
      if (v167 < 0.0)
        v167 = -v167;
    }
    v130 = v167 + 1.0;
    v164 = v149;
    v156 = v156 - v162;
    v168 = v50 * v31 * v84;
    if (v168 >= 0.0)
      goto LABEL_293;
    goto LABEL_299;
  }
LABEL_276:
  v164 = v162 + v149;
  if (v149 < 0.0 && (v162 > 0.0 || v149 > 0.0))
  {
    v131 = (v131 * v149 + v162 * -5.0) / v164;
    v165 = -v131;
    v166 = v131 < 0.0;
  }
  else
  {
    v165 = 5.0;
    v166 = v131 < 5.0;
  }
  if (v166)
    v131 = v165;
  v131 = v131 + 1.0;
  v168 = v50 * v31 * v84;
  if (v168 >= 0.0)
  {
LABEL_293:
    v169 = 0.0;
    v170 = v168 + 0.0;
    v171 = v17 * v52 * v84;
    v172 = 6.0;
    v173 = 0.0;
    if (v171 >= 0.0)
    {
      v174 = v171 + 0.0;
      goto LABEL_318;
    }
    goto LABEL_304;
  }
LABEL_299:
  v170 = 0.0;
  v169 = 0.0 - v168;
  v175 = 5.0;
  if (v168 > 0.0)
  {
    v176 = (v168 * 5.0 + 0.0) / v169;
    v175 = -v176;
    if (v176 >= 0.0)
      v175 = v176;
  }
  v173 = v175 + 1.0;
  v171 = v17 * v52 * v84;
  if (v171 >= 0.0)
  {
    v174 = v171 + v169;
    v172 = 0.0;
    if (v169 < 0.0 && (v171 > 0.0 || v169 > 0.0))
    {
      v227 = (v169 * v173 + v171 * -5.0) / v174;
      v173 = -v227;
      if (v227 >= 0.0)
        v173 = v227;
      v172 = 0.0;
LABEL_320:
      v173 = v173 + 1.0;
      v169 = v174;
      v177 = v170;
      v180 = v87 * (v52 * v47);
      v181 = v180 <= 0.0;
      if (v180 < 0.0)
        goto LABEL_321;
      goto LABEL_311;
    }
LABEL_318:
    if (v173 < 5.0)
      v173 = 5.0;
    goto LABEL_320;
  }
  v172 = 0.0;
LABEL_304:
  v177 = v170 - v171;
  if (v171 > 0.0 || v170 < 0.0)
  {
    v172 = (v171 * 5.0 + v170 * v172) / v177;
    v178 = -v172;
    v179 = v172 < 0.0;
  }
  else
  {
    v178 = 5.0;
    v179 = v172 < 5.0;
  }
  if (v179)
    v172 = v178;
  v172 = v172 + 1.0;
  v180 = v87 * (v52 * v47);
  v181 = v180 <= 0.0;
  if (v180 < 0.0)
  {
LABEL_321:
    v185 = v169 - v180;
    if (v181 && v169 >= 0.0)
    {
      v186 = 5.0;
      v187 = v173 < 5.0;
    }
    else
    {
      v173 = (v180 * 5.0 + v173 * v169) / v185;
      v186 = -v173;
      v187 = v173 < 0.0;
    }
    if (v187)
      v173 = v186;
    v173 = v173 + 1.0;
    v169 = v185;
    v182 = v177;
    v188 = v87 * (v31 * v38);
    v189 = v188 <= 0.0;
    if (v188 >= 0.0)
      goto LABEL_329;
LABEL_352:
    if (v189 && v182 >= 0.0)
    {
      v201 = 5.0;
      if (v172 >= 5.0)
        v201 = v172;
    }
    else
    {
      v201 = (v188 * 5.0 + v172 * v182) / (v182 - v188);
      if (v201 < 0.0)
        v201 = -v201;
    }
    v172 = v201 + 1.0;
    v190 = v169;
    v182 = v182 - v188;
    v192 = v89 * (v17 * v38);
    v193 = v192 <= 0.0;
    if (v192 >= 0.0)
      goto LABEL_335;
    goto LABEL_361;
  }
LABEL_311:
  v182 = v180 + v177;
  if (v177 < 0.0 && (v180 > 0.0 || v177 > 0.0))
  {
    v172 = (v172 * v177 + v180 * -5.0) / v182;
    v183 = -v172;
    v184 = v172 < 0.0;
  }
  else
  {
    v183 = 5.0;
    v184 = v172 < 5.0;
  }
  if (v184)
    v172 = v183;
  v172 = v172 + 1.0;
  v188 = v87 * (v31 * v38);
  v189 = v188 <= 0.0;
  if (v188 < 0.0)
    goto LABEL_352;
LABEL_329:
  v190 = v188 + v169;
  if (v169 < 0.0 && (v188 > 0.0 || v169 > 0.0))
  {
    v206 = (v173 * v169 + v188 * -5.0) / v190;
    if (v206 < 0.0)
      v206 = -v206;
    v173 = v206 + 1.0;
    v192 = v89 * (v17 * v38);
    v193 = v192 <= 0.0;
    if (v192 >= 0.0)
      goto LABEL_335;
LABEL_361:
    v202 = v190 - v192;
    if (v193 && v190 >= 0.0)
    {
      v203 = 5.0;
      if (v173 >= 5.0)
        v203 = v173;
    }
    else
    {
      v203 = (v192 * 5.0 + v173 * v190) / v202;
      if (v203 < 0.0)
        v203 = -v203;
    }
    v173 = v203 + 1.0;
    v190 = v202;
    v194 = v182;
    v196 = v89 * (v50 * v47);
    v197 = v196 <= 0.0;
    if (v196 < 0.0)
      goto LABEL_370;
    goto LABEL_341;
  }
  v191 = 5.0;
  if (v173 >= 5.0)
    v191 = v173;
  v173 = v191 + 1.0;
  v192 = v89 * (v17 * v38);
  v193 = v192 <= 0.0;
  if (v192 < 0.0)
    goto LABEL_361;
LABEL_335:
  v194 = v192 + v182;
  if (v182 >= 0.0 || v192 <= 0.0 && v182 <= 0.0)
  {
    v195 = 5.0;
    if (v172 >= 5.0)
      v195 = v172;
    v172 = v195 + 1.0;
    v196 = v89 * (v50 * v47);
    v197 = v196 <= 0.0;
    if (v196 >= 0.0)
      goto LABEL_341;
LABEL_370:
    v204 = v194 - v196;
    if (v197 && v194 >= 0.0)
    {
      v205 = 5.0;
      if (v172 >= 5.0)
        v205 = v172;
    }
    else
    {
      v205 = (v196 * 5.0 + v172 * v194) / v204;
      if (v205 < 0.0)
        v205 = -v205;
    }
    v172 = v205 + 1.0;
    v198 = v190;
    v194 = v204;
    v200 = v114 + v156;
    if (v114 < 0.0)
      goto LABEL_392;
    goto LABEL_391;
  }
  v207 = (v172 * v182 + v192 * -5.0) / v194;
  if (v207 < 0.0)
    v207 = -v207;
  v172 = v207 + 1.0;
  v196 = v89 * (v50 * v47);
  v197 = v196 <= 0.0;
  if (v196 < 0.0)
    goto LABEL_370;
LABEL_341:
  v198 = v196 + v190;
  if (v190 < 0.0 && (v196 > 0.0 || v190 > 0.0))
  {
    v208 = (v173 * v190 + v196 * -5.0) / v198;
    if (v208 < 0.0)
      v208 = -v208;
    v173 = v208 + 1.0;
    v200 = v114 + v156;
    if (v114 < 0.0)
      goto LABEL_392;
  }
  else
  {
    v199 = 5.0;
    if (v173 >= 5.0)
      v199 = v173;
    v173 = v199 + 1.0;
    v200 = v114 + v156;
    if (v114 < 0.0)
      goto LABEL_392;
  }
LABEL_391:
  if (v156 >= 0.0)
  {
LABEL_394:
    if (v130 >= v108)
      v209 = v130;
    else
      v209 = v108;
    goto LABEL_397;
  }
LABEL_392:
  if (v114 <= 0.0 && v156 <= 0.0)
    goto LABEL_394;
  v209 = (v130 * v156 - v108 * v114) / v200;
  if (v209 < 0.0)
    v209 = -v209;
LABEL_397:
  v210 = v118 + v164;
  if ((v164 < 0.0 || v118 < 0.0) && (v164 > 0.0 || v118 > 0.0))
  {
    v211 = (v131 * v164 - v107 * v118) / v210;
    if (v211 < 0.0)
      v211 = -v211;
  }
  else if (v131 >= v107)
  {
    v211 = v131;
  }
  else
  {
    v211 = v107;
  }
  v212 = v102 - v98;
  if ((v98 > 0.0 || v102 < 0.0) && (v98 < 0.0 || v102 > 0.0))
  {
    v94 = (v94 * v98 + v96 * v102) / v212;
    if (v94 < 0.0)
      v94 = -v94;
  }
  else if (v96 >= v94)
  {
    v94 = v96;
  }
  v213 = v164 < 0.0;
  if (v156 > 0.0)
    v213 = 1;
  v214 = v164 > 0.0 || v156 < 0.0;
  v215 = v94 + 1.0;
  v216 = v156 - v164;
  if (v214 && v213)
  {
    v217 = (v131 * v164 + v130 * v156) / v216;
    if (v217 < 0.0)
      v217 = -v217;
  }
  else if (v130 >= v131)
  {
    v217 = v130;
  }
  else
  {
    v217 = v131;
  }
  v218 = v215 + v217 + 1.0;
  v219 = v194 - v198;
  if ((v194 < 0.0 || v198 > 0.0) && (v194 > 0.0 || v198 < 0.0))
  {
    v220 = (v173 * v198 + v172 * v194) / v219;
    if (v220 < 0.0)
      v220 = -v220;
  }
  else if (v172 >= v173)
  {
    v220 = v172;
  }
  else
  {
    v220 = v173;
  }
  v221 = v209 + 1.0;
  v222 = v211 + 1.0;
  v223 = v200 - v210;
  if ((v200 < 0.0 || v210 > 0.0) && (v200 > 0.0 || v210 < 0.0))
  {
    v224 = (v200 * v221 + v210 * v222) / v223;
    if (v224 < 0.0)
      v224 = -v224;
  }
  else if (v221 >= v222)
  {
    v224 = v209 + 1.0;
  }
  else
  {
    v224 = v211 + 1.0;
  }
  v225 = v215 + v224 + 1.0 + 1.0;
  *(double *)a5 = v216 / v212;
  *(double *)(a5 + 8) = v219 / v212;
  *(double *)(a5 + 16) = v223 / v212;
  *(_BYTE *)(a5 + 24) = 1;
  if (v218 + 1.0 > 64.0 || v215 + v220 + 1.0 + 1.0 > 64.0 || v225 > 64.0)
    sub_20EEE254C();
}

void sub_20EED30F4()
{
  int *v0;
  int *v1;
  int *v2;
  uint64_t v3;
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  _DWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  double v69;
  _DWORD *v70;
  double v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int *v85;
  unint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int *v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  uint64_t *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int *v133;
  unint64_t v134;
  double v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unsigned int *v149;
  unint64_t v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  unsigned int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  int *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  int v171;
  double v172;
  int *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unsigned int *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unsigned int *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unsigned int *v216;
  unint64_t v217;
  int v218;
  int v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  int v225;
  _DWORD *v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unsigned int *v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unsigned int *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unsigned int *v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  int v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  _DWORD *v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  int *v271;
  unint64_t v272;
  uint64_t v273;
  int v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  int *v281;
  double v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  double v298;
  int v299;
  double v300;
  int *v301;
  double v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  double v306;
  uint64_t v307;
  int v308;
  double v309;
  int *v310;
  int v311;
  int v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  int v318;
  _DWORD *v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  int *v325;
  unint64_t v326;
  int v327;
  int v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  int v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unsigned int *v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  int v347;
  double v348;
  int *v349;
  int v350;
  unsigned int v351;
  int v352;
  unsigned int v353;
  int v354;
  int v355;
  char v356;
  int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367[64];
  int v368;
  int v369[64];
  int v370;
  _DWORD v371[64];
  int v372;
  int v373[64];
  int v374;
  int v375[64];
  int v376;
  _DWORD v377[64];
  int v378;
  int v379[64];
  int v380;
  int v381[64];
  int v382;
  _DWORD v383[64];
  int v384;
  int v385[64];
  int v386;
  int v387[64];
  int v388;
  int v389;
  int v390;
  int v391;
  int __src[64];
  int v393;
  _DWORD __dst[64];
  int v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  int v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  int v403;
  _DWORD v404[64];
  int v405;
  _DWORD v406[64];
  int v407;
  _DWORD v408[64];
  int v409;
  _DWORD v410[64];
  int v411;
  _DWORD v412[64];
  int v413;
  _DWORD v414[65];
  uint64_t v415;

  MEMORY[0x24BDAC7A8]();
  v358 = v5;
  v356 = v6;
  v415 = *MEMORY[0x24BDAC8D0];
  v7 = *v0;
  v8 = *v1;
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      v362 = 0;
      v363 = 1;
      v411 = 0;
      v11 = *v2;
      v12 = v8 - v11;
      if (v8 > v11)
        goto LABEL_4;
      goto LABEL_10;
    }
    v10 = v8 - v7;
    v362 = -1;
  }
  else
  {
    v362 = 1;
    v10 = v7 - v8;
  }
  v363 = 0;
  v410[0] = v10;
  v410[1] = 0;
  v411 = v362;
  v11 = *v2;
  v12 = v8 - v11;
  if (v8 > v11)
  {
LABEL_4:
    v13 = 1;
    LODWORD(v14) = v12;
    goto LABEL_5;
  }
LABEL_10:
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = 0;
    v364 = 1;
    v413 = 0;
    v15 = v7 - v11;
    if (v7 > v11)
      goto LABEL_6;
    goto LABEL_12;
  }
  v14 = -v12;
  v13 = -1;
LABEL_5:
  v364 = 0;
  v412[0] = v14;
  v412[1] = 0;
  v413 = v13;
  v15 = v7 - v11;
  if (v7 > v11)
  {
LABEL_6:
    v16 = 1;
LABEL_7:
    v355 = 0;
    v414[0] = v15;
    v414[1] = 0;
    goto LABEL_14;
  }
LABEL_12:
  if (v15 < 0)
  {
    v15 = -v15;
    v16 = -1;
    goto LABEL_7;
  }
  LODWORD(v15) = 0;
  v16 = 0;
  v355 = 1;
LABEL_14:
  v414[64] = v16;
  v17 = v0[1];
  v18 = v1[1];
  v353 = v15;
  v360 = v17 - v18;
  if (v17 <= v18)
  {
    if (((v17 - v18) & 0x8000000000000000) == 0)
    {
      v20 = 0;
      v19 = 0;
      v365 = 1;
      v405 = 0;
      v21 = v2[1];
      v22 = v18 - v21;
      v352 = v16;
      v357 = v4;
      if (v18 > v21)
        goto LABEL_17;
      goto LABEL_25;
    }
    v20 = v18 - v17;
    v19 = -1;
  }
  else
  {
    v19 = 1;
    v20 = v17 - v18;
  }
  v365 = 0;
  v404[0] = v20;
  v404[1] = 0;
  v405 = v19;
  v21 = v2[1];
  v22 = v18 - v21;
  v352 = v16;
  v357 = v4;
  if (v18 > v21)
  {
LABEL_17:
    v23 = 1;
    v24 = v22;
    goto LABEL_18;
  }
LABEL_25:
  if ((v22 & 0x8000000000000000) == 0)
  {
    v24 = 0;
    v23 = 0;
    v366 = 1;
    v407 = 0;
    v25 = v17 - v21;
    if (v17 > v21)
      goto LABEL_19;
    goto LABEL_27;
  }
  v24 = -v22;
  v23 = -1;
LABEL_18:
  v366 = 0;
  v406[0] = v24;
  v406[1] = 0;
  v407 = v23;
  v25 = v17 - v21;
  if (v17 > v21)
  {
LABEL_19:
    v26 = 1;
    goto LABEL_20;
  }
LABEL_27:
  if (v25 < 0)
  {
    v25 = -v25;
    v26 = -1;
LABEL_20:
    v354 = 0;
    v408[0] = v25;
    v408[1] = 0;
    v409 = v26;
    v27 = v8 + v7;
    if (v27 >= 1)
      goto LABEL_21;
    goto LABEL_29;
  }
  LODWORD(v25) = 0;
  v26 = 0;
  v354 = 1;
  v409 = 0;
  v27 = v8 + v7;
  if (v27 >= 1)
  {
LABEL_21:
    v400 = v27;
    v28 = 1;
    v401 = 1;
    v29 = v11 + v8;
    if (v29 < 1)
      goto LABEL_43;
    goto LABEL_31;
  }
LABEL_29:
  if (v27 < 0)
  {
    v400 = -v27;
    if ((unint64_t)-v27 >> 32)
      v28 = -2;
    else
      v28 = -1;
    v401 = v28;
    v29 = v11 + v8;
    if (v29 < 1)
    {
LABEL_43:
      if (v29 < 0)
      {
        v402 = -v29;
        if ((unint64_t)-v29 >> 32)
          v30 = -2;
        else
          v30 = -1;
        v403 = v30;
        v31 = v18 + v17;
        if (v18 + v17 >= 1)
          goto LABEL_45;
      }
      else
      {
        v30 = 0;
        v403 = 0;
        v31 = v18 + v17;
        if (v18 + v17 >= 1)
          goto LABEL_45;
      }
LABEL_50:
      if (v31 < 0)
      {
        v396 = -v31;
        if ((unint64_t)-v31 >> 32)
          v32 = -2;
        else
          v32 = -1;
      }
      else
      {
        v32 = 0;
      }
      goto LABEL_55;
    }
  }
  else
  {
    v28 = 0;
    v401 = 0;
    v29 = v11 + v8;
    if (v29 < 1)
      goto LABEL_43;
  }
LABEL_31:
  v402 = v29;
  v30 = 1;
  v403 = 1;
  v31 = v18 + v17;
  if (v18 + v17 < 1)
    goto LABEL_50;
LABEL_45:
  v396 = v31;
  v32 = 1;
LABEL_55:
  v397 = v32;
  v33 = v21 + v18;
  v359 = v3;
  v351 = v25;
  v350 = v26;
  if (v21 + v18 < 1)
  {
    if (v33 < 0)
    {
      v398 = -v33;
      if ((unint64_t)-v33 >> 32)
        v34 = -2;
      else
        v34 = -1;
    }
    else
    {
      v34 = 0;
    }
  }
  else
  {
    v398 = v33;
    v34 = 1;
  }
  v35 = v412;
  v399 = v34;
  if ((v363 | v366) == 1)
  {
    v393 = 0;
  }
  else
  {
    v36 = 0;
    v37 = 0;
    if (v362 >= 0)
      v38 = v362;
    else
      v38 = -v362;
    if (v23 >= 0)
      v39 = v23;
    else
      v39 = -v23;
    v40 = v38 - 1;
    v41 = v40 + v39;
    if (v40 + v39 >= 0x40)
      v41 = 64;
    v393 = v41;
    do
    {
      v43 = 0;
      v44 = 0;
      if (v36 >= v40)
        v45 = v40;
      else
        v45 = v36;
      v46 = ~v45;
      v47 = v410;
      do
      {
        if (v36 + v43 < v39)
        {
          v48 = v24 * *v47;
          v37 += v48;
          v44 += HIDWORD(v48);
        }
        --v43;
        ++v47;
      }
      while (v46 != v43);
      __src[v36] = v37;
      v37 = v44 + HIDWORD(v37);
      ++v36;
      v42 = v393;
    }
    while (v36 < v393);
    if (v37 && v393 != 64)
    {
      __src[v393] = v37;
      v42 = ++v393;
    }
    if (v9 > 0 != v22 > 0)
      v393 = -v42;
  }
  v361 = v19;
  if ((v364 | v365) == 1)
  {
    v49 = v12;
    v391 = 0;
  }
  else
  {
    v50 = 0;
    v51 = 0;
    if (v13 >= 0)
      v52 = v13;
    else
      v52 = -v13;
    if (v19 >= 0)
      v53 = v19;
    else
      v53 = -v19;
    v54 = v52 - 1;
    v55 = v54 + v53;
    if (v54 + v53 >= 0x40)
      v55 = 64;
    v391 = v55;
    do
    {
      v57 = 0;
      v58 = 0;
      if (v50 >= v54)
        v59 = v54;
      else
        v59 = v50;
      v60 = ~v59;
      v61 = v412;
      do
      {
        if (v50 + v57 < v53)
        {
          v62 = v20 * (unint64_t)*v61;
          v51 += v62;
          v58 += HIDWORD(v62);
        }
        --v57;
        ++v61;
      }
      while (v60 != v57);
      *(&v389 + v50) = v51;
      v51 = v58 + HIDWORD(v51);
      ++v50;
      v56 = v391;
    }
    while (v50 < v391);
    if (v51 && v391 != 64)
    {
      *(&v389 + v391) = v51;
      v56 = ++v391;
    }
    v49 = v12;
    if (v12 > 0 != v360 > 0)
      v391 = -v56;
  }
  sub_20EED4C8C(__dst, __src, &v389);
  if (v395 >= 0)
    v67 = v395;
  else
    v67 = -v395;
  if ((_DWORD)v67)
  {
    if (v67 == 1)
    {
      v68 = 0;
      LODWORD(v63) = __dst[0];
      v69 = (double)v63;
    }
    else if (v67 == 2)
    {
      v68 = 0;
      LODWORD(v63) = __dst[1];
      LODWORD(v64) = __dst[0];
      v69 = (double)v63 * 4294967300.0 + (double)v64;
    }
    else
    {
      v70 = &__dst[v67];
      LODWORD(v65) = *(v70 - 2);
      LODWORD(v63) = *(v70 - 1);
      LODWORD(v66) = *(v70 - 3);
      v69 = ((double)v63 * 4294967300.0 + (double)v65) * 4294967300.0 + (double)v66;
      v68 = 32 * v67 - 96;
    }
    if (v395 < 0)
      v69 = -v69;
  }
  else
  {
    v68 = 0;
    v69 = 0.0;
  }
  v71 = ldexp(v69, v68);
  v72 = v363;
  if (!v28)
    v72 = 1;
  if (v72 == 1)
  {
    v393 = 0;
  }
  else
  {
    v73 = 0;
    v74 = 0;
    if (v362 >= 0)
      v75 = v362;
    else
      v75 = -v362;
    if (v28 >= 0)
      v76 = v28;
    else
      v76 = -v28;
    v77 = v75 - 1;
    v78 = v77 + v76;
    if (v77 + v76 >= 0x40)
      v78 = 64;
    v393 = v78;
    v79 = &v400;
    do
    {
      v81 = 0;
      v82 = 0;
      if (v73 >= v77)
        v83 = v77;
      else
        v83 = v73;
      v84 = ~v83;
      v85 = v410;
      do
      {
        if (v73 + v81 < v76)
        {
          v86 = *((unsigned int *)v79 + v81) * (unint64_t)*v85;
          v74 += v86;
          v82 += HIDWORD(v86);
        }
        --v81;
        ++v85;
      }
      while (v84 != v81);
      __src[v73] = v74;
      v74 = v82 + HIDWORD(v74);
      ++v73;
      v80 = v393;
      v79 = (uint64_t *)((char *)v79 + 4);
    }
    while (v73 < v393);
    if (v74 && v393 != 64)
    {
      __src[v393] = v74;
      v80 = ++v393;
    }
    if (v9 > 0 != v28 > 0)
      v393 = -v80;
  }
  v87 = v365;
  if (!v32)
    v87 = 1;
  v88 = v13;
  if (v87 == 1)
  {
    v391 = 0;
  }
  else
  {
    v89 = 0;
    v90 = 0;
    if (v361 >= 0)
      v91 = v361;
    else
      v91 = -v361;
    if (v32 >= 0)
      v92 = v32;
    else
      v92 = -v32;
    v93 = v91 - 1;
    v94 = v93 + v92;
    if (v93 + v92 >= 0x40)
      v94 = 64;
    v391 = v94;
    v95 = &v396;
    do
    {
      v97 = 0;
      v98 = 0;
      if (v89 >= v93)
        v99 = v93;
      else
        v99 = v89;
      v100 = ~v99;
      v101 = v404;
      do
      {
        if (v89 + v97 < v92)
        {
          v102 = *((unsigned int *)v95 + v97) * (unint64_t)*v101;
          v90 += v102;
          v98 += HIDWORD(v102);
        }
        --v97;
        ++v101;
      }
      while (v100 != v97);
      *(&v389 + v89) = v90;
      v90 = v98 + HIDWORD(v90);
      ++v89;
      v96 = v391;
      v95 = (uint64_t *)((char *)v95 + 4);
    }
    while (v89 < v391);
    if (v90 && v391 != 64)
    {
      *(&v389 + v391) = v90;
      v96 = ++v391;
    }
    if (v360 > 0 != v32 > 0)
      v391 = -v96;
  }
  sub_20EED4F68(__dst, __src, &v389);
  v103 = v364;
  if (!v30)
    v103 = 1;
  if (v103 == 1)
  {
    v391 = 0;
    v104 = v23;
    v105 = v357;
  }
  else
  {
    v106 = 0;
    v107 = 0;
    v108 = &v402;
    if (v13 >= 0)
      v109 = v13;
    else
      v109 = -v13;
    if (v30 >= 0)
      v110 = v30;
    else
      v110 = -v30;
    v111 = v109 - 1;
    v112 = v111 + v110;
    if (v111 + v110 >= 0x40)
      v112 = 64;
    v391 = v112;
    do
    {
      v114 = 0;
      v115 = 0;
      if (v106 >= v111)
        v116 = v111;
      else
        v116 = v106;
      v117 = ~v116;
      v118 = v412;
      do
      {
        if (v106 + v114 < v110)
        {
          v119 = *((unsigned int *)v108 + v114) * (unint64_t)*v118;
          v107 += v119;
          v115 += HIDWORD(v119);
        }
        --v114;
        ++v118;
      }
      while (v117 != v114);
      *(&v389 + v106) = v107;
      v107 = v115 + HIDWORD(v107);
      ++v106;
      v113 = v391;
      v108 = (uint64_t *)((char *)v108 + 4);
    }
    while (v106 < v391);
    if (v107)
    {
      v104 = v23;
      if (v391 != 64)
      {
        *(&v389 + v391) = v107;
        v113 = ++v391;
      }
    }
    else
    {
      v104 = v23;
    }
    v105 = v357;
    if (v49 > 0 != v30 > 0)
      v391 = -v113;
  }
  v120 = v366;
  if (!v34)
    v120 = 1;
  if (v120 == 1)
  {
    v388 = 0;
  }
  else
  {
    v121 = 0;
    v122 = 0;
    if (v104 >= 0)
      v123 = v104;
    else
      v123 = -v104;
    if (v34 >= 0)
      v124 = v34;
    else
      v124 = -v34;
    v125 = v123 - 1;
    v126 = 64;
    if (v125 + v124 < 0x40)
      v126 = v125 + v124;
    v127 = &v398;
    v388 = v126;
    do
    {
      v129 = 0;
      v130 = 0;
      if (v121 >= v125)
        v131 = v125;
      else
        v131 = v121;
      v132 = ~v131;
      v133 = v406;
      do
      {
        if (v121 + v129 < v124)
        {
          v134 = *((unsigned int *)v127 + v129) * (unint64_t)*v133;
          v122 += v134;
          v130 += HIDWORD(v134);
        }
        --v129;
        ++v133;
      }
      while (v132 != v129);
      v387[v121] = v122;
      v122 = v130 + HIDWORD(v122);
      ++v121;
      v128 = v388;
      v127 = (uint64_t *)((char *)v127 + 4);
    }
    while (v121 < v388);
    if (v122 && v388 != 64)
    {
      v387[v388] = v122;
      v128 = ++v388;
    }
    if (v22 > 0 != v34 > 0)
      v388 = -v128;
  }
  v135 = 0.5 / v71;
  sub_20EED4F68(__src, &v389, v387);
  if ((v356 & 1) != 0 || v105)
  {
    v136 = v395;
    if (((v395 != 0) & ~v366) != 0)
    {
      v137 = 0;
      v138 = 0;
      if (v395 >= 0)
        v139 = v395;
      else
        v139 = -v395;
      if (v104 >= 0)
        v140 = v104;
      else
        v140 = -v104;
      v141 = v139 - 1;
      v142 = v141 + v140;
      if (v141 + v140 >= 0x40)
        v142 = 64;
      v388 = v142;
      v143 = v406[0];
      do
      {
        v145 = 0;
        v146 = 0;
        if (v137 >= v141)
          v147 = v141;
        else
          v147 = v137;
        v148 = ~v147;
        v149 = __dst;
        do
        {
          if (v137 + v145 < v140)
          {
            v150 = v143 * (unint64_t)*v149;
            v138 += v150;
            v146 += HIDWORD(v150);
          }
          --v145;
          ++v149;
        }
        while (v148 != v145);
        v387[v137] = v138;
        v138 = v146 + HIDWORD(v138);
        ++v137;
        v144 = v388;
      }
      while (v137 < v388);
      if (v138 && v388 != 64)
      {
        v387[v388] = v138;
        v144 = ++v388;
      }
      if (v22 > 0 != v136 > 0)
        v388 = -v144;
    }
    else
    {
      v388 = 0;
    }
    v151 = v393;
    if (((v393 != 0) & ~v365) != 0)
    {
      v152 = 0;
      v153 = 0;
      if (v393 >= 0)
        v154 = v393;
      else
        v154 = -v393;
      if (v361 >= 0)
        v155 = v361;
      else
        v155 = -v361;
      v156 = v154 - 1;
      v157 = v156 + v155;
      if (v156 + v155 >= 0x40)
        v157 = 64;
      v386 = v157;
      v158 = v404[0];
      do
      {
        v160 = 0;
        v161 = 0;
        if (v152 >= v156)
          v162 = v156;
        else
          v162 = v152;
        v163 = ~v162;
        v164 = __src;
        do
        {
          if (v152 + v160 < v155)
          {
            v165 = v158 * (unint64_t)*v164;
            v153 += v165;
            v161 += HIDWORD(v165);
          }
          --v160;
          ++v164;
        }
        while (v163 != v160);
        v385[v152] = v153;
        v153 = v161 + HIDWORD(v153);
        ++v152;
        v159 = v386;
      }
      while (v152 < v386);
      if (v153 && v386 != 64)
      {
        v385[v386] = v153;
        v159 = ++v386;
      }
      if (v360 > 0 != v151 > 0)
        v386 = -v159;
    }
    else
    {
      v386 = 0;
    }
    sub_20EED4C8C(&v389, v387, v385);
    if (v391 >= 0)
      v170 = v391;
    else
      v170 = -v391;
    if ((_DWORD)v170)
    {
      if (v170 == 1)
      {
        v171 = 0;
        LODWORD(v166) = v389;
        v172 = (double)v166;
      }
      else if (v170 == 2)
      {
        v171 = 0;
        LODWORD(v166) = v390;
        LODWORD(v167) = v389;
        v172 = (double)v166 * 4294967300.0 + (double)v167;
      }
      else
      {
        v173 = &v389 + v170;
        LODWORD(v168) = *(v173 - 2);
        LODWORD(v166) = *(v173 - 1);
        LODWORD(v169) = *(v173 - 3);
        v172 = ((double)v166 * 4294967300.0 + (double)v168) * 4294967300.0 + (double)v169;
        v171 = 32 * v170 - 96;
      }
      if (v391 < 0)
        v172 = -v172;
      *(long double *)v359 = v135 * ldexp(v172, v171);
      if (v105)
      {
LABEL_291:
        if (v363)
        {
          v382 = 0;
        }
        else
        {
          v174 = 0;
          v175 = 0;
          if (v362 >= 0)
            v176 = v362;
          else
            v176 = -v362;
          v177 = v176 - 1 + v176;
          if (v177 >= 0x40)
            LODWORD(v177) = 64;
          v382 = v177;
          v178 = v410[0];
          do
          {
            v179 = 0;
            v180 = 0;
            if (v174 >= v176 - 1)
              v181 = v176 - 1;
            else
              v181 = v174;
            v182 = ~v181;
            v183 = v410;
            do
            {
              if (v174 + v179 < v176)
              {
                v184 = v178 * (unint64_t)*v183;
                v175 += v184;
                v180 += HIDWORD(v184);
              }
              --v179;
              ++v183;
            }
            while (v182 != v179);
            v381[v174] = v175;
            v175 = v180 + HIDWORD(v175);
            ++v174;
          }
          while (v174 < v382);
          if (v175 && v382 != 64)
            v381[v382++] = v175;
        }
        if (v365)
        {
          v380 = 0;
        }
        else
        {
          v185 = 0;
          v186 = 0;
          if (v361 >= 0)
            v187 = v361;
          else
            v187 = -v361;
          v188 = v187 - 1 + v187;
          if (v188 >= 0x40)
            LODWORD(v188) = 64;
          v380 = v188;
          v189 = v404[0];
          do
          {
            v190 = 0;
            v191 = 0;
            if (v185 >= v187 - 1)
              v192 = v187 - 1;
            else
              v192 = v185;
            v193 = ~v192;
            v194 = v404;
            do
            {
              if (v185 + v190 < v187)
              {
                v195 = v189 * (unint64_t)*v194;
                v186 += v195;
                v191 += HIDWORD(v195);
              }
              --v190;
              ++v194;
            }
            while (v193 != v190);
            v379[v185] = v186;
            v186 = v191 + HIDWORD(v186);
            ++v185;
          }
          while (v185 < v380);
          if (v186 && v380 != 64)
            v379[v380++] = v186;
        }
        sub_20EED4F68(v383, v381, v379);
        if (v364)
        {
          v376 = 0;
        }
        else
        {
          v196 = 0;
          v197 = 0;
          if (v88 >= 0)
            v198 = v88;
          else
            v198 = -v88;
          v199 = v198 - 1 + v198;
          if (v199 >= 0x40)
            LODWORD(v199) = 64;
          v376 = v199;
          v200 = v412[0];
          do
          {
            v201 = 0;
            v202 = 0;
            if (v196 >= v198 - 1)
              v203 = v198 - 1;
            else
              v203 = v196;
            v204 = ~v203;
            v205 = v412;
            do
            {
              if (v196 + v201 < v198)
              {
                v206 = v200 * (unint64_t)*v205;
                v197 += v206;
                v202 += HIDWORD(v206);
              }
              --v201;
              ++v205;
            }
            while (v204 != v201);
            v375[v196] = v197;
            v197 = v202 + HIDWORD(v197);
            ++v196;
          }
          while (v196 < v376);
          if (v197 && v376 != 64)
            v375[v376++] = v197;
        }
        if (v366)
        {
          v374 = 0;
        }
        else
        {
          v207 = 0;
          v208 = 0;
          if (v104 >= 0)
            v209 = v104;
          else
            v209 = -v104;
          v210 = v209 - 1 + v209;
          if (v210 >= 0x40)
            LODWORD(v210) = 64;
          v374 = v210;
          v211 = v406[0];
          do
          {
            v212 = 0;
            v213 = 0;
            if (v207 >= v209 - 1)
              v214 = v209 - 1;
            else
              v214 = v207;
            v215 = ~v214;
            v216 = v406;
            do
            {
              if (v207 + v212 < v209)
              {
                v217 = v211 * (unint64_t)*v216;
                v208 += v217;
                v213 += HIDWORD(v217);
              }
              --v212;
              ++v216;
            }
            while (v215 != v212);
            v373[v207] = v208;
            v208 = v213 + HIDWORD(v208);
            ++v207;
          }
          while (v207 < v374);
          if (v208 && v374 != 64)
            v373[v374++] = v208;
        }
        sub_20EED4F68(v377, v375, v373);
        v218 = v384;
        if (v384 && (v219 = v378) != 0)
        {
          v220 = 0;
          v221 = 0;
          if (v384 >= 0)
            v222 = v384;
          else
            v222 = -v384;
          if (v378 >= 0)
            v223 = v378;
          else
            v223 = -v378;
          v224 = v222 - 1;
          v225 = v224 + v223;
          if (v224 + v223 >= 0x40)
            v225 = 64;
          v386 = v225;
          v226 = v377;
          do
          {
            v228 = 0;
            v229 = 0;
            if (v220 >= v224)
              v230 = v224;
            else
              v230 = v220;
            v231 = ~v230;
            v232 = v383;
            do
            {
              if (v220 + v228 < v223)
              {
                v233 = v226[v228] * (unint64_t)*v232;
                v221 += v233;
                v229 += HIDWORD(v233);
              }
              --v228;
              ++v232;
            }
            while (v231 != v228);
            v385[v220] = v221;
            v221 = v229 + HIDWORD(v221);
            ++v220;
            v227 = v386;
            ++v226;
          }
          while (v220 < v386);
          if (v221 && v386 != 64)
          {
            v385[v386] = v221;
            v227 = ++v386;
          }
          if (v218 > 0 != v219 > 0)
          {
            v227 = -v227;
            v386 = v227;
          }
        }
        else
        {
          v227 = 0;
          v386 = 0;
        }
        if (v355)
        {
          v370 = 0;
        }
        else
        {
          v234 = 0;
          v235 = 0;
          if (v352 >= 0)
            v236 = v352;
          else
            v236 = -v352;
          v237 = v236 - 1 + v236;
          if (v237 >= 0x40)
            LODWORD(v237) = 64;
          v370 = v237;
          do
          {
            v238 = 0;
            v239 = 0;
            if (v234 >= v236 - 1)
              v240 = v236 - 1;
            else
              v240 = v234;
            v241 = ~v240;
            v242 = v414;
            do
            {
              if (v234 + v238 < v236)
              {
                v243 = v353 * (unint64_t)*v242;
                v235 += v243;
                v239 += HIDWORD(v243);
              }
              --v238;
              ++v242;
            }
            while (v241 != v238);
            v369[v234] = v235;
            v235 = v239 + HIDWORD(v235);
            ++v234;
          }
          while (v234 < v370);
          if (v235 && v370 != 64)
            v369[v370++] = v235;
        }
        if (v354)
        {
          v368 = 0;
        }
        else
        {
          v244 = 0;
          v245 = 0;
          if (v350 >= 0)
            v246 = v350;
          else
            v246 = -v350;
          v247 = v246 - 1 + v246;
          if (v247 >= 0x40)
            LODWORD(v247) = 64;
          v368 = v247;
          do
          {
            v248 = 0;
            v249 = 0;
            if (v244 >= v246 - 1)
              v250 = v246 - 1;
            else
              v250 = v244;
            v251 = ~v250;
            v252 = v408;
            do
            {
              if (v244 + v248 < v246)
              {
                v253 = v351 * (unint64_t)*v252;
                v245 += v253;
                v249 += HIDWORD(v253);
              }
              --v248;
              ++v252;
            }
            while (v251 != v248);
            v367[v244] = v245;
            v245 = v249 + HIDWORD(v245);
            ++v244;
          }
          while (v244 < v368);
          if (v245 && v368 != 64)
            v367[v368++] = v245;
        }
        sub_20EED4F68(v371, v369, v367);
        if (v227 && (v258 = v372) != 0)
        {
          v259 = 0;
          v260 = 0;
          if (v227 >= 0)
            v261 = v227;
          else
            v261 = -v227;
          if (v372 >= 0)
            v262 = v372;
          else
            v262 = -v372;
          v263 = v261 - 1;
          v264 = v261 - 1 + v262;
          if (v264 >= 0x40)
            LODWORD(v264) = 64;
          v388 = v264;
          v265 = v371;
          do
          {
            v267 = 0;
            v268 = 0;
            if (v259 >= v263)
              v269 = v263;
            else
              v269 = v259;
            v270 = ~v269;
            v271 = v385;
            do
            {
              if (v259 + v267 < v262)
              {
                v272 = v265[v267] * (unint64_t)*v271;
                v260 += v272;
                v268 += HIDWORD(v272);
              }
              --v267;
              ++v271;
            }
            while (v270 != v267);
            v387[v259] = v260;
            v260 = v268 + HIDWORD(v260);
            ++v259;
            v266 = v388;
            ++v265;
          }
          while (v259 < v388);
          if (v260 && v388 != 64)
          {
            v387[v388] = v260;
            v266 = ++v388;
          }
          if (v227 > 0 != v258 > 0)
          {
            v266 = -v266;
            v388 = v266;
          }
        }
        else
        {
          v266 = 0;
          v388 = 0;
        }
        if (v266 >= 0)
          v273 = v266;
        else
          v273 = -v266;
        if ((_DWORD)v273)
        {
          if (v273 == 1)
          {
            v274 = 0;
            LODWORD(v254) = v387[0];
            v275 = (double)v254;
          }
          else if (v273 == 2)
          {
            v274 = 0;
            LODWORD(v254) = v387[1];
            LODWORD(v255) = v387[0];
            v275 = (double)v254 * 4294967300.0 + (double)v255;
          }
          else
          {
            v281 = &v387[v273];
            LODWORD(v256) = *(v281 - 2);
            LODWORD(v254) = *(v281 - 1);
            LODWORD(v257) = *(v281 - 3);
            v275 = ((double)v254 * 4294967300.0 + (double)v256) * 4294967300.0 + (double)v257;
            v274 = 32 * v273 - 96;
          }
          if (v266 < 0)
            v275 = -v275;
          v282 = ldexp(v275, v274);
          v277 = *(double *)v359;
          v278 = sqrt(v282);
          if (*(double *)v359 < 0.0)
            goto LABEL_470;
        }
        else
        {
          v276 = ldexp(0.0, 0);
          v277 = *(double *)v359;
          v278 = sqrt(v276);
          if (*(double *)v359 < 0.0)
          {
LABEL_470:
            if (v391)
            {
              v283 = 0;
              v284 = 0;
              if (v391 >= 0)
                v285 = v391;
              else
                v285 = -v391;
              v286 = v285 - 1 + v285;
              if (v286 >= 0x40)
                LODWORD(v286) = 64;
              v384 = v286;
              do
              {
                v287 = 0;
                v288 = 0;
                if (v283 >= v285 - 1)
                  v289 = v285 - 1;
                else
                  v289 = v283;
                v290 = v289 + 1;
                v291 = v283;
                do
                {
                  if (v291 < v285)
                  {
                    v292 = *(&v389 + v291) * (unint64_t)*(&v389 + v287);
                    v284 += v292;
                    v288 += HIDWORD(v292);
                  }
                  ++v287;
                  --v291;
                }
                while (v290 != v287);
                v383[v283] = v284;
                v284 = v288 + HIDWORD(v284);
                ++v283;
              }
              while (v283 < v384);
              if (v284 && v384 != 64)
                v383[v384++] = v284;
            }
            else
            {
              v384 = 0;
            }
            sub_20EED4C8C(v385, v383, v387);
            if (v386 >= 0)
              v297 = v386;
            else
              v297 = -v386;
            v298 = 0.0;
            if ((_DWORD)v297)
            {
              if (v297 == 1)
              {
                v299 = 0;
                LODWORD(v293) = v385[0];
                v300 = (double)v293;
              }
              else if (v297 == 2)
              {
                v299 = 0;
                LODWORD(v293) = v385[1];
                LODWORD(v294) = v385[0];
                v300 = (double)v293 * 4294967300.0 + (double)v294;
              }
              else
              {
                v301 = &v385[v297];
                LODWORD(v295) = *(v301 - 2);
                LODWORD(v293) = *(v301 - 1);
                LODWORD(v296) = *(v301 - 3);
                v300 = ((double)v293 * 4294967300.0 + (double)v295) * 4294967300.0 + (double)v296;
                v299 = 32 * v297 - 96;
              }
              if (v386 < 0)
                v300 = -v300;
            }
            else
            {
              v299 = 0;
              v300 = 0.0;
            }
            v302 = ldexp(v300, v299);
            v306 = v135 * v302;
            if (v391 >= 0)
              v307 = v391;
            else
              v307 = -v391;
            if ((_DWORD)v307)
            {
              if (v307 == 1)
              {
                v308 = 0;
                LODWORD(v302) = v389;
                v309 = (double)*(unint64_t *)&v302;
              }
              else if (v307 == 2)
              {
                v308 = 0;
                LODWORD(v302) = v390;
                LODWORD(v303) = v389;
                v309 = (double)*(unint64_t *)&v302 * 4294967300.0 + (double)v303;
              }
              else
              {
                v310 = &v389 + v307;
                LODWORD(v304) = *(v310 - 2);
                LODWORD(v302) = *(v310 - 1);
                LODWORD(v305) = *(v310 - 3);
                v309 = ((double)*(unint64_t *)&v302 * 4294967300.0 + (double)v304) * 4294967300.0 + (double)v305;
                v308 = 32 * v307 - 96;
              }
              if (v391 >= 0)
                v298 = v309;
              else
                v298 = -v309;
            }
            else
            {
              v308 = 0;
            }
            v280 = v306 / (v278 + ldexp(v298, v308));
            goto LABEL_516;
          }
        }
        v279 = v135 * v278;
        if (v135 >= 0.0)
          v280 = v277 + v279;
        else
          v280 = v277 - v279;
LABEL_516:
        *(double *)(v359 + 16) = v280;
      }
    }
    else
    {
      *(long double *)v359 = v135 * ldexp(0.0, 0);
      if (v105)
        goto LABEL_291;
    }
  }
  if (v358)
  {
    v311 = v393;
    if (v393 && (v312 = v411) != 0)
    {
      v313 = 0;
      v314 = 0;
      if (v393 >= 0)
        v315 = v393;
      else
        v315 = -v393;
      if (v411 >= 0)
        v316 = v411;
      else
        v316 = -v411;
      v317 = v315 - 1;
      v318 = v317 + v316;
      if (v317 + v316 >= 0x40)
        v318 = 64;
      v388 = v318;
      v319 = v410;
      do
      {
        v321 = 0;
        v322 = 0;
        if (v313 >= v317)
          v323 = v317;
        else
          v323 = v313;
        v324 = ~v323;
        v325 = __src;
        do
        {
          if (v313 + v321 < v316)
          {
            v326 = v319[v321] * (unint64_t)*v325;
            v314 += v326;
            v322 += HIDWORD(v326);
          }
          --v321;
          ++v325;
        }
        while (v324 != v321);
        v387[v313] = v314;
        v314 = v322 + HIDWORD(v314);
        ++v313;
        v320 = v388;
        ++v319;
      }
      while (v313 < v388);
      if (v314 && v388 != 64)
      {
        v387[v388] = v314;
        v320 = ++v388;
      }
      if (v311 > 0 != v312 > 0)
        v388 = -v320;
    }
    else
    {
      v388 = 0;
    }
    v327 = v395;
    if (v395 && (v328 = v413) != 0)
    {
      v329 = 0;
      v330 = 0;
      if (v395 >= 0)
        v331 = v395;
      else
        v331 = -v395;
      if (v413 >= 0)
        v332 = v413;
      else
        v332 = -v413;
      v333 = v331 - 1;
      v334 = v333 + v332;
      if (v333 + v332 >= 0x40)
        v334 = 64;
      v386 = v334;
      do
      {
        v336 = 0;
        v337 = 0;
        if (v329 >= v333)
          v338 = v333;
        else
          v338 = v329;
        v339 = ~v338;
        v340 = __dst;
        do
        {
          if (v329 + v336 < v332)
          {
            v341 = v35[v336] * (unint64_t)*v340;
            v330 += v341;
            v337 += HIDWORD(v341);
          }
          --v336;
          ++v340;
        }
        while (v339 != v336);
        v385[v329] = v330;
        v330 = v337 + HIDWORD(v330);
        ++v329;
        v335 = v386;
        ++v35;
      }
      while (v329 < v386);
      if (v330 && v386 != 64)
      {
        v385[v386] = v330;
        v335 = ++v386;
      }
      if (v327 > 0 != v328 > 0)
        v386 = -v335;
    }
    else
    {
      v386 = 0;
    }
    sub_20EED4C8C(&v389, v387, v385);
    if (v391 >= 0)
      v346 = v391;
    else
      v346 = -v391;
    if ((_DWORD)v346)
    {
      if (v346 == 1)
      {
        v347 = 0;
        LODWORD(v342) = v389;
        v348 = (double)v342;
      }
      else if (v346 == 2)
      {
        v347 = 0;
        LODWORD(v342) = v390;
        LODWORD(v343) = v389;
        v348 = (double)v342 * 4294967300.0 + (double)v343;
      }
      else
      {
        v349 = &v389 + v346;
        LODWORD(v344) = *(v349 - 2);
        LODWORD(v342) = *(v349 - 1);
        LODWORD(v345) = *(v349 - 3);
        v348 = ((double)v342 * 4294967300.0 + (double)v344) * 4294967300.0 + (double)v345;
        v347 = 32 * v346 - 96;
      }
      if (v391 < 0)
        v348 = -v348;
    }
    else
    {
      v347 = 0;
      v348 = 0.0;
    }
    *(long double *)(v359 + 8) = v135 * ldexp(v348, v347);
  }
}

_DWORD *sub_20EED4C8C(_DWORD *__dst, _DWORD *__src, int *a3)
{
  int *v3;
  _DWORD *v4;
  int v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;

  v3 = a3;
  v4 = __dst;
  v5 = __src[64];
  if (!v5)
  {
    __dst = memcpy(__dst, a3, 0x104uLL);
LABEL_24:
    v4[64] = -v4[64];
    return __dst;
  }
  v7 = a3[64];
  if (!v7)
    return memcpy(__dst, __src, 0x104uLL);
  if (v5 >= 0)
    v8 = v5;
  else
    v8 = -v5;
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = -v7;
  if (v5 > 0 == v7 > 0)
  {
    __dst = (_DWORD *)sub_20EED4DE8((uint64_t)__dst, (uint64_t)__src, v8, (uint64_t)v3, v9, 0);
  }
  else
  {
    v10 = __src;
    do
    {
      v11 = v9;
      v12 = v3;
      v9 = v8;
      v3 = v10;
      v10 = v12;
      v8 = v11;
    }
    while (v9 < v11);
    v13 = 0;
    v14 = 0;
    __dst[64] = v9;
    do
    {
      v15 = v14 + v3[v13] + v12[v13];
      __dst[v13] = v15;
      v14 = HIDWORD(v15);
      ++v13;
    }
    while (v11 != v13);
    v16 = v9 - v11;
    if (v9 > v11)
    {
      v17 = v11;
      v18 = &__dst[v11];
      v19 = (unsigned int *)&v3[v17];
      do
      {
        v20 = *v19++;
        v21 = v14 + v20;
        *v18++ = v21;
        v14 = HIDWORD(v21);
        --v16;
      }
      while (v16);
    }
    if (v14)
    {
      v22 = (int)__dst[64];
      if ((_DWORD)v22 != 64)
      {
        __dst[v22] = 1;
        ++__dst[64];
      }
    }
  }
  if ((__src[64] & 0x80000000) != 0)
    goto LABEL_24;
  return __dst;
}

uint64_t sub_20EED4DE8(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  _DWORD *v21;
  int *v22;
  int v23;
  uint64_t v24;

  v6 = a3;
  v8 = result;
  if (a3 >= a5)
  {
    if (a3 != a5 || (a6 & 1) != 0)
    {
      v14 = (_DWORD *)(result + 256);
      *(_DWORD *)(result + 256) = a3 - 1;
      if (a5)
      {
LABEL_16:
        v16 = 0;
        v15 = 0;
        do
        {
          *(_DWORD *)(result + 4 * v16) = *(_DWORD *)(a2 + 4 * v16) - (v15 & 1) - *(_DWORD *)(a4 + 4 * v16);
          v17 = *(_DWORD *)(a2 + 4 * v16);
          v18 = *(_DWORD *)(a4 + 4 * v16);
          v15 &= v17 == v18;
          if (v17 < v18)
            v15 = 1;
          ++v16;
        }
        while (a5 != v16);
      }
      else
      {
        v15 = 0;
      }
      v19 = v6 > a5;
      v20 = v6 - a5;
      if (v19)
      {
        v21 = (_DWORD *)(result + 4 * a5);
        v22 = (int *)(a2 + 4 * a5);
        do
        {
          *v21++ = *v22 - (v15 & 1);
          v23 = *v22++;
          v15 &= v23 == 0;
          --v20;
        }
        while (v20);
      }
      v24 = *(int *)(result + 256);
      if (*(_DWORD *)(result + 4 * v24))
        *v14 = v24 + 1;
    }
    else
    {
      while (1)
      {
        v11 = v6 - 1;
        v12 = *(_DWORD *)(a2 - 4 + 4 * v6);
        v13 = *(_DWORD *)(a4 - 4 + 4 * v6);
        if (v12 < v13)
        {
          v9 = a4;
          v10 = v6;
          goto LABEL_3;
        }
        if (v12 > v13)
          break;
        --v6;
        if (!v11)
          goto LABEL_26;
      }
      if (v6)
      {
        v14 = (_DWORD *)(result + 256);
        *(_DWORD *)(result + 256) = v6 - 1;
        a5 = v6;
        goto LABEL_16;
      }
LABEL_26:
      *(_DWORD *)(result + 256) = 0;
    }
  }
  else
  {
    v9 = a4;
    v10 = a5;
LABEL_3:
    result = sub_20EED4DE8(result, v9, v10, a2, v6, 1);
    *(_DWORD *)(v8 + 256) = -*(_DWORD *)(v8 + 256);
  }
  return result;
}

_DWORD *sub_20EED4F68(_DWORD *__dst, int *__src, int *a3)
{
  int *v3;
  _DWORD *v4;
  int v5;
  int *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;

  v3 = a3;
  v4 = __dst;
  v5 = __src[64];
  if (!v5)
  {
    __src = a3;
    return memcpy(__dst, __src, 0x104uLL);
  }
  v6 = __src;
  v7 = a3[64];
  if (!v7)
    return memcpy(__dst, __src, 0x104uLL);
  if (v5 >= 0)
    v8 = v5;
  else
    v8 = -v5;
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = -v7;
  if (v5 > 0 != v7 > 0)
  {
    __dst = (_DWORD *)sub_20EED4DE8((uint64_t)__dst, (uint64_t)__src, v8, (uint64_t)v3, v9, 0);
  }
  else
  {
    v10 = __src;
    do
    {
      v11 = v9;
      v12 = v3;
      v9 = v8;
      v3 = v10;
      v10 = v12;
      v8 = v11;
    }
    while (v9 < v11);
    v13 = 0;
    v14 = 0;
    __dst[64] = v9;
    do
    {
      v15 = v14 + v3[v13] + v12[v13];
      __dst[v13] = v15;
      v14 = HIDWORD(v15);
      ++v13;
    }
    while (v11 != v13);
    v16 = v9 - v11;
    if (v9 > v11)
    {
      v17 = v11;
      v18 = &__dst[v11];
      v19 = (unsigned int *)&v3[v17];
      do
      {
        v20 = *v19++;
        v21 = v14 + v20;
        *v18++ = v21;
        v14 = HIDWORD(v21);
        --v16;
      }
      while (v16);
    }
    if (v14)
    {
      v22 = (int)__dst[64];
      if ((_DWORD)v22 != 64)
      {
        __dst[v22] = 1;
        ++__dst[64];
      }
    }
  }
  if (v6[64] < 0)
    v4[64] = -v4[64];
  return __dst;
}

void sub_20EED50C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int *v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unsigned int *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unsigned int *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unsigned int *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  int v238;
  int v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  int *v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  int *v252;
  unint64_t v253;
  int v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  int *v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  int *v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  int v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unsigned int v288;
  _DWORD *v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unsigned int *v295;
  unint64_t v296;
  int v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  _QWORD *v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unsigned int *v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  int v333;
  unint64_t v334;
  int v335;
  double v336;
  long double v337;
  double v338;
  _DWORD *v339;
  long double v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  _DWORD *v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unsigned int *v352;
  unint64_t v353;
  int v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  int v359;
  _DWORD *v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  int *v366;
  unint64_t v367;
  int v368;
  unint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  _DWORD *v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unsigned int *v381;
  unint64_t v382;
  int v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  int v389;
  _OWORD *v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  int *v396;
  unint64_t v397;
  int v398;
  double v399;
  double v400;
  double v401;
  double v402;
  uint64_t v403;
  int v404;
  int v405;
  int v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  _DWORD *v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t v418;
  unsigned int *v419;
  unint64_t v420;
  int v421;
  int v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  _DWORD *v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unsigned int *v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  int v441;
  _DWORD *v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  unint64_t v447;
  int *v448;
  unint64_t v449;
  int v450;
  unint64_t v451;
  unint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  int v456;
  _OWORD *v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  unsigned int *v463;
  unint64_t v464;
  int v465;
  double v466;
  double v467;
  double v468;
  double v469;
  uint64_t v470;
  int v471;
  int v472;
  int v473;
  unint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  unint64_t v478;
  int v479;
  _DWORD *v480;
  int v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  int *v486;
  unint64_t v487;
  int v488;
  int v489;
  unint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  int v495;
  _DWORD *v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  unsigned int *v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  int v524;
  int v525;
  unint64_t v526;
  unint64_t v527;
  uint64_t v528;
  unint64_t v529;
  unint64_t v530;
  int v531;
  int *v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  unint64_t v536;
  unint64_t v537;
  unsigned int *v538;
  unint64_t v539;
  int v540;
  double v541;
  double v542;
  double v543;
  double v544;
  uint64_t v545;
  int v546;
  long double v547;
  unint64_t v548;
  unint64_t v549;
  double v550;
  double v551;
  double v552;
  int v553;
  uint64_t v554;
  int v555;
  double v556;
  _DWORD *v557;
  int v558;
  unint64_t v559;
  unint64_t v560;
  uint64_t v561;
  unint64_t v562;
  int v563;
  _OWORD *v564;
  int v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  unint64_t v569;
  unsigned int *v570;
  unint64_t v571;
  int v572;
  int v573;
  unint64_t v574;
  unint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  _DWORD *v580;
  int v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  unint64_t v585;
  unsigned int *v586;
  unint64_t v587;
  int v588;
  unint64_t v589;
  unint64_t v590;
  unint64_t v591;
  unint64_t v592;
  int v593;
  uint64_t v594;
  uint64_t v595;
  unint64_t v596;
  unint64_t v597;
  unint64_t v598;
  int v599;
  unint64_t v600;
  unint64_t v601;
  uint64_t v602;
  unint64_t v603;
  unint64_t v604;
  int v605;
  _OWORD *v606;
  int v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t v610;
  unint64_t v611;
  unsigned int *v612;
  unint64_t v613;
  int v614;
  int v615;
  unint64_t v616;
  unint64_t v617;
  uint64_t v618;
  unint64_t v619;
  unint64_t v620;
  unint64_t v621;
  _QWORD *v622;
  int v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  unint64_t v627;
  unsigned int *v628;
  unint64_t v629;
  unint64_t v630;
  unint64_t v631;
  unint64_t v632;
  unint64_t v633;
  int v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  unint64_t v638;
  unint64_t v639;
  int v640;
  int v641;
  unint64_t v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t v645;
  unint64_t v646;
  int v647;
  _OWORD *v648;
  int v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  unint64_t v653;
  unsigned int *v654;
  unint64_t v655;
  unint64_t v656;
  unint64_t v657;
  unint64_t v658;
  unint64_t v659;
  uint64_t v660;
  int v661;
  double v662;
  double v663;
  double v664;
  double v665;
  double v666;
  double v667;
  uint64_t v668;
  int v669;
  double v670;
  _DWORD *v671;
  uint64_t v672;
  int v673;
  double v674;
  long double v675;
  _DWORD *v676;
  long double v677;
  unsigned int *v678;
  long double v679;
  uint64_t v680;
  int v681;
  long double v682;
  int v683;
  _DWORD *v684;
  int v685;
  int *v686;
  int v687;
  int v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  int *v692;
  int v693;
  int v694;
  _DWORD v695[64];
  int v696;
  int v697[64];
  int v698;
  int v699[64];
  int v700;
  int v701[64];
  int v702;
  int v703[65];
  _DWORD __src[65];
  _DWORD v705[64];
  int v706;
  int v707[64];
  int v708;
  int v709[64];
  int v710;
  _DWORD __dst[65];
  _OWORD v712[16];
  int v713;
  _QWORD v714[32];
  int v715;
  _QWORD v716[32];
  int v717;
  _OWORD v718[16];
  int v719;
  _OWORD v720[16];
  int v721;
  _DWORD v722[65];
  _DWORD v723[64];
  int v724;
  _DWORD v725[64];
  int v726;
  int v727[65];
  _DWORD v728[65];
  int v729[64];
  int v730;
  _BYTE v731[260];
  unsigned int v732[65];
  _BYTE v733[260];
  _DWORD v734[65];
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  int v751;
  uint64_t v752;

  v9 = MEMORY[0x24BDAC7A8]();
  v13 = v12;
  v687 = v14;
  v16 = v15;
  v685 = v17;
  v18 = v11;
  v20 = v19;
  v684 = (_DWORD *)v9;
  v752 = *MEMORY[0x24BDAC8D0];
  v21 = v11[3];
  v22 = v11[1];
  v23 = v21 - v22;
  if (v21 <= v22)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      v25 = 0;
      v24 = 0;
      v693 = 1;
      v726 = 0;
      v31 = *v11;
      v32 = v11[2];
      v28 = v31 - v32;
      v691 = v23;
      if (v31 > v32)
        goto LABEL_4;
      goto LABEL_9;
    }
    v25 = v22 - v21;
    v24 = -1;
  }
  else
  {
    v24 = 1;
    v25 = v21 - v22;
  }
  v693 = 0;
  v725[0] = v25;
  v725[1] = 0;
  v726 = v24;
  v26 = *v11;
  v27 = v11[2];
  v28 = v26 - v27;
  v691 = v23;
  if (v26 > v27)
  {
LABEL_4:
    v29 = 1;
    LODWORD(v30) = v28;
    goto LABEL_5;
  }
LABEL_9:
  if ((v28 & 0x8000000000000000) == 0)
  {
    LODWORD(v30) = 0;
    v29 = 0;
    v694 = 1;
    v724 = 0;
    v692 = v10;
    if (v693)
      goto LABEL_6;
    goto LABEL_11;
  }
  v30 = -v28;
  v29 = -1;
LABEL_5:
  v694 = 0;
  v723[0] = v30;
  v723[1] = 0;
  v724 = v29;
  v692 = v10;
  if (v693)
  {
LABEL_6:
    v732[64] = 0;
    goto LABEL_28;
  }
LABEL_11:
  v33 = 0;
  v34 = 0;
  if (v24 >= 0)
    v35 = v24;
  else
    v35 = -v24;
  v36 = v35 - 1 + v35;
  if (v36 >= 0x40)
    LODWORD(v36) = 64;
  v732[64] = v36;
  do
  {
    v37 = 0;
    v38 = 0;
    if (v33 >= v35 - 1)
      v39 = v35 - 1;
    else
      v39 = v33;
    v40 = ~v39;
    v41 = v725;
    do
    {
      if (v33 + v37 < v35)
      {
        v42 = v25 * *v41;
        v34 += v42;
        v38 += HIDWORD(v42);
      }
      --v37;
      ++v41;
    }
    while (v40 != v37);
    v732[v33] = v34;
    v34 = v38 + HIDWORD(v34);
    ++v33;
  }
  while (v33 < (int)v732[64]);
  if (v34 && v732[64] != 64)
    v732[v732[64]++] = v34;
LABEL_28:
  if (v694)
  {
    v727[64] = 0;
  }
  else
  {
    v43 = 0;
    v44 = 0;
    if (v29 >= 0)
      v45 = v29;
    else
      v45 = -v29;
    v46 = v45 - 1 + v45;
    if (v46 >= 0x40)
      LODWORD(v46) = 64;
    v727[64] = v46;
    do
    {
      v47 = 0;
      v48 = 0;
      if (v43 >= v45 - 1)
        v49 = v45 - 1;
      else
        v49 = v43;
      v50 = ~v49;
      v51 = v723;
      do
      {
        if (v43 + v47 < v45)
        {
          v52 = v30 * (unint64_t)*v51;
          v44 += v52;
          v48 += HIDWORD(v52);
        }
        --v47;
        ++v51;
      }
      while (v50 != v47);
      v727[v43] = v44;
      v44 = v48 + HIDWORD(v44);
      ++v43;
    }
    while (v43 < v727[64]);
    if (v44 && v727[64] != 64)
      v727[v727[64]++] = v44;
  }
  sub_20EED4F68(v722, (int *)v732, v727);
  v53 = v20[1];
  v54 = v692[1];
  v55 = v53 - v54;
  v688 = v13;
  if (v53 > v54)
  {
    v56 = 1;
    v57 = v53 - v54;
LABEL_49:
    v58 = 0;
    *(_QWORD *)&v720[0] = v57;
    goto LABEL_52;
  }
  if (v55 < 0)
  {
    v57 = v54 - v53;
    v56 = -1;
    goto LABEL_49;
  }
  v57 = 0;
  v56 = 0;
  v58 = 1;
LABEL_52:
  v721 = v56;
  v59 = *v692;
  v60 = *v20;
  v61 = v59 - v60;
  v689 = v16;
  v686 = v20;
  if (v59 > v60)
  {
    v62 = 1;
    v63 = v59 - v60;
    goto LABEL_54;
  }
  if (v61 < 0)
  {
    v63 = v60 - v59;
    v62 = -1;
LABEL_54:
    v64 = 0;
    *(_QWORD *)&v718[0] = v63;
    v719 = v62;
    v65 = v60 + v59;
    if (v65 >= 1)
      goto LABEL_55;
    goto LABEL_60;
  }
  v63 = 0;
  v62 = 0;
  v64 = 1;
  v719 = 0;
  v65 = v60 + v59;
  if (v65 >= 1)
  {
LABEL_55:
    v716[0] = v65;
    v66 = 1;
    v717 = 1;
    v67 = v54 + v53;
    if (v67 >= 1)
      goto LABEL_56;
LABEL_62:
    if (v67 < 0)
    {
      v714[0] = -v67;
      if ((unint64_t)-v67 >> 32)
        v141 = -2;
      else
        v141 = -1;
      v715 = v141;
      v690 = v56;
      if ((v693 | v58) == 1)
        goto LABEL_57;
    }
    else
    {
      v715 = 0;
      v690 = v56;
      if ((v693 | v58) == 1)
        goto LABEL_57;
    }
    goto LABEL_64;
  }
LABEL_60:
  if (v65 < 0)
  {
    v716[0] = -v65;
    if ((unint64_t)-v65 >> 32)
      v66 = -2;
    else
      v66 = -1;
    v717 = v66;
    v67 = v54 + v53;
    if (v67 < 1)
      goto LABEL_62;
  }
  else
  {
    v66 = 0;
    v717 = 0;
    v67 = v54 + v53;
    if (v67 < 1)
      goto LABEL_62;
  }
LABEL_56:
  v714[0] = v67;
  v715 = 1;
  v690 = v56;
  if ((v693 | v58) == 1)
  {
LABEL_57:
    v732[64] = 0;
    goto LABEL_86;
  }
LABEL_64:
  v68 = 0;
  v69 = 0;
  if (v24 >= 0)
    v70 = v24;
  else
    v70 = -v24;
  if (v56 >= 0)
    v71 = v56;
  else
    v71 = -v56;
  v72 = v70 - 1;
  v73 = v72 + v71;
  if (v72 + v71 >= 0x40)
    v73 = 64;
  v732[64] = v73;
  do
  {
    v75 = 0;
    v76 = 0;
    if (v68 >= v72)
      v77 = v72;
    else
      v77 = v68;
    v78 = ~v77;
    v79 = v725;
    do
    {
      if (v68 + v75 < v71)
      {
        v80 = v57 * *v79;
        v69 += v80;
        v76 += HIDWORD(v80);
      }
      --v75;
      ++v79;
    }
    while (v78 != v75);
    v732[v68] = v69;
    v69 = v76 + HIDWORD(v69);
    ++v68;
    v74 = v732[64];
  }
  while (v68 < (int)v732[64]);
  if (v69 && v732[64] != 64)
  {
    v732[v732[64]] = v69;
    v74 = ++v732[64];
  }
  if (v691 > 0 != v55 > 0)
    v732[64] = -v74;
LABEL_86:
  v683 = v66;
  if ((v694 | v64) == 1)
  {
    v727[64] = 0;
  }
  else
  {
    v81 = 0;
    v82 = 0;
    if (v29 >= 0)
      v83 = v29;
    else
      v83 = -v29;
    if (v62 >= 0)
      v84 = v62;
    else
      v84 = -v62;
    v85 = v83 - 1;
    v86 = v85 + v84;
    if (v85 + v84 >= 0x40)
      v86 = 64;
    v727[64] = v86;
    do
    {
      v88 = 0;
      v89 = 0;
      if (v81 >= v85)
        v90 = v85;
      else
        v90 = v81;
      v91 = ~v90;
      v92 = v723;
      do
      {
        if (v81 + v88 < v84)
        {
          v93 = v63 * (unint64_t)*v92;
          v82 += v93;
          v89 += HIDWORD(v93);
        }
        --v88;
        ++v92;
      }
      while (v91 != v88);
      v727[v81] = v82;
      v82 = v89 + HIDWORD(v82);
      ++v81;
      v87 = v727[64];
    }
    while (v81 < v727[64]);
    if (v82 && v727[64] != 64)
    {
      v727[v727[64]] = v82;
      v87 = ++v727[64];
    }
    if (v28 > 0 != v61 > 0)
      v727[64] = -v87;
  }
  sub_20EED4F68(v712, (int *)v732, v727);
  if ((v694 | v58) == 1)
  {
    v732[64] = 0;
    v94 = v687;
    goto LABEL_134;
  }
  v95 = 0;
  v96 = 0;
  if (v690 >= 0)
    v97 = v690;
  else
    v97 = -v690;
  if (v29 >= 0)
    v98 = v29;
  else
    v98 = -v29;
  v99 = v97 - 1;
  v100 = v99 + v98;
  if (v99 + v98 >= 0x40)
    v100 = 64;
  v732[64] = v100;
  v101 = v723[0];
  do
  {
    v103 = 0;
    v104 = 0;
    if (v95 >= v99)
      v105 = v99;
    else
      v105 = v95;
    v106 = ~v105;
    v107 = (unsigned int *)v720;
    do
    {
      if (v95 + v103 < v98)
      {
        v108 = v101 * (unint64_t)*v107;
        v96 += v108;
        v104 += HIDWORD(v108);
      }
      --v103;
      ++v107;
    }
    while (v106 != v103);
    v732[v95] = v96;
    v96 = v104 + HIDWORD(v96);
    ++v95;
    v102 = v732[64];
  }
  while (v95 < (int)v732[64]);
  if (v96)
  {
    v94 = v687;
    if (v732[64] != 64)
    {
      v732[v732[64]] = v96;
      v102 = ++v732[64];
    }
    if (v28 > 0 != v55 > 0)
      goto LABEL_133;
  }
  else
  {
    v94 = v687;
    if (v28 > 0 != v55 > 0)
LABEL_133:
      v732[64] = -v102;
  }
LABEL_134:
  if ((v693 | v64) == 1)
  {
    v727[64] = 0;
    v109 = v689;
    v110 = v28;
    v111 = v29;
    v112 = v686;
    v113 = v691;
    goto LABEL_158;
  }
  v114 = 0;
  v115 = 0;
  if (v62 >= 0)
    v116 = v62;
  else
    v116 = -v62;
  if (v24 >= 0)
    v117 = v24;
  else
    v117 = -v24;
  v118 = v116 - 1;
  v119 = v118 + v117;
  if (v118 + v117 >= 0x40)
    v119 = 64;
  v727[64] = v119;
  v120 = v725[0];
  v110 = v28;
  v111 = v29;
  v112 = v686;
  v113 = v691;
  do
  {
    v122 = 0;
    v123 = 0;
    if (v114 >= v118)
      v124 = v118;
    else
      v124 = v114;
    v125 = ~v124;
    v126 = (unsigned int *)v718;
    do
    {
      if (v114 + v122 < v117)
      {
        v127 = v120 * (unint64_t)*v126;
        v115 += v127;
        v123 += HIDWORD(v127);
      }
      --v122;
      ++v126;
    }
    while (v125 != v122);
    v727[v114] = v115;
    v115 = v123 + HIDWORD(v115);
    ++v114;
    v121 = v727[64];
  }
  while (v114 < v727[64]);
  if (v115)
  {
    v109 = v689;
    if (v727[64] != 64)
    {
      v727[v727[64]] = v115;
      v121 = ++v727[64];
    }
    if (v691 > 0 != v61 > 0)
      goto LABEL_157;
  }
  else
  {
    v109 = v689;
    if (v691 > 0 != v61 > 0)
LABEL_157:
      v727[64] = -v121;
  }
LABEL_158:
  sub_20EED4C8C(__dst, v732, v727);
  v128 = v18[3];
  v129 = v692[1];
  v130 = v128 <= v129;
  v131 = v128 - v129;
  if (v130)
  {
    if (v131 < 0)
    {
      v55 = -v131;
      LODWORD(v132) = -1;
      v133 = 0;
      v142 = *v692;
      v143 = v18[2];
      v130 = v142 <= v143;
      v136 = v142 - v143;
      if (v130)
        goto LABEL_165;
    }
    else
    {
      LODWORD(v132) = 0;
      v133 = 1;
      v139 = *v692;
      v140 = v18[2];
      v130 = v139 <= v140;
      v136 = v139 - v140;
      if (v130)
        goto LABEL_165;
    }
LABEL_160:
    LODWORD(v137) = 1;
    v138 = v136;
    if ((v693 & 1) != 0)
    {
LABEL_161:
      v24 = 0;
      goto LABEL_166;
    }
LABEL_186:
    v144 = 0;
    v145 = 0;
    if (v24 >= 0)
      v146 = v24;
    else
      v146 = -v24;
    if ((v137 & 0x80000000) == 0)
      v137 = v137;
    else
      v137 = -(int)v137;
    v147 = v146 - 1;
    v148 = v147 + v137;
    if (v147 + v137 >= 0x40)
      v148 = 64;
    v732[64] = v148;
    do
    {
      v150 = 0;
      v151 = 0;
      if (v144 >= v147)
        v152 = v147;
      else
        v152 = v144;
      v153 = ~v152;
      v154 = v725;
      do
      {
        if (v144 + v150 < v137)
        {
          v155 = v138 * *v154;
          v145 += v155;
          v151 += HIDWORD(v155);
        }
        --v150;
        ++v154;
      }
      while (v153 != v150);
      v732[v144] = v145;
      v145 = v151 + HIDWORD(v145);
      ++v144;
      v149 = v732[64];
    }
    while (v144 < (int)v732[64]);
    if (v145 && v732[64] != 64)
    {
      v732[v732[64]] = v145;
      v149 = ++v732[64];
    }
    if (v113 > 0 == v136 > 0)
    {
      LOBYTE(v693) = 0;
      if ((v694 | v133) == 1)
        goto LABEL_167;
    }
    else
    {
      LOBYTE(v693) = 0;
      v732[64] = -v149;
      if ((v694 | v133) == 1)
        goto LABEL_167;
    }
    goto LABEL_210;
  }
  LODWORD(v132) = 1;
  LODWORD(v55) = v131;
  v133 = 0;
  v134 = *v692;
  v135 = v18[2];
  v130 = v134 <= v135;
  v136 = v134 - v135;
  if (!v130)
    goto LABEL_160;
LABEL_165:
  if (v136 < 0)
  {
    v138 = -v136;
    LODWORD(v137) = -1;
    if ((v693 & 1) != 0)
      goto LABEL_161;
    goto LABEL_186;
  }
LABEL_166:
  v732[64] = 0;
  if ((v694 | v133) == 1)
  {
LABEL_167:
    v727[64] = 0;
    goto LABEL_232;
  }
LABEL_210:
  v156 = 0;
  v157 = 0;
  if (v111 >= 0)
    v158 = v111;
  else
    v158 = -v111;
  if ((v132 & 0x80000000) == 0)
    v132 = v132;
  else
    v132 = -(int)v132;
  v159 = v158 - 1;
  v160 = v159 + v132;
  if (v159 + v132 >= 0x40)
    v160 = 64;
  v727[64] = v160;
  do
  {
    v162 = 0;
    v163 = 0;
    if (v156 >= v159)
      v164 = v159;
    else
      v164 = v156;
    v165 = ~v164;
    v166 = v723;
    do
    {
      if (v156 + v162 < v132)
      {
        v167 = *v166 * (unint64_t)v55;
        v157 += v167;
        v163 += HIDWORD(v167);
      }
      --v162;
      ++v166;
    }
    while (v165 != v162);
    v727[v156] = v157;
    v157 = v163 + HIDWORD(v157);
    ++v156;
    v161 = v727[64];
  }
  while (v156 < v727[64]);
  if (v157 && v727[64] != 64)
  {
    v727[v727[64]] = v157;
    v161 = ++v727[64];
  }
  if (v110 > 0 != v131 > 0)
    v727[64] = -v161;
LABEL_232:
  sub_20EED4C8C(v709, v732, v727);
  v168 = v18[3];
  v169 = v112[1];
  v130 = v168 <= v169;
  v170 = v168 - v169;
  if (!v130)
  {
    LODWORD(v171) = 1;
    LODWORD(v55) = v170;
    v172 = 0;
    v173 = *v112;
    v174 = v18[2];
    v130 = v173 <= v174;
    v175 = v173 - v174;
    if (!v130)
      goto LABEL_234;
LABEL_262:
    if (v175 < 0)
    {
      v177 = -v175;
      LODWORD(v176) = -1;
      if ((v693 & 1) == 0)
        goto LABEL_235;
    }
    goto LABEL_264;
  }
  if (v170 < 0)
  {
    v55 = -v170;
    LODWORD(v171) = -1;
    v172 = 0;
    v279 = *v112;
    v280 = v18[2];
    v130 = v279 <= v280;
    v175 = v279 - v280;
    if (v130)
      goto LABEL_262;
  }
  else
  {
    LODWORD(v171) = 0;
    v172 = 1;
    v190 = *v112;
    v191 = v18[2];
    v130 = v190 <= v191;
    v175 = v190 - v191;
    if (v130)
      goto LABEL_262;
  }
LABEL_234:
  LODWORD(v176) = 1;
  v177 = v175;
  if ((v693 & 1) == 0)
  {
LABEL_235:
    v178 = 0;
    v179 = 0;
    if (v24 >= 0)
      v180 = v24;
    else
      v180 = -v24;
    if ((v176 & 0x80000000) == 0)
      v176 = v176;
    else
      v176 = -(int)v176;
    v181 = v180 - 1;
    v182 = v181 + v176;
    if (v181 + v176 >= 0x40)
      v182 = 64;
    v732[64] = v182;
    do
    {
      v184 = 0;
      v185 = 0;
      if (v178 >= v181)
        v186 = v181;
      else
        v186 = v178;
      v187 = ~v186;
      v188 = v725;
      do
      {
        if (v178 + v184 < v176)
        {
          v189 = v177 * *v188;
          v179 += v189;
          v185 += HIDWORD(v189);
        }
        --v184;
        ++v188;
      }
      while (v187 != v184);
      v732[v178] = v179;
      v179 = v185 + HIDWORD(v179);
      ++v178;
      v183 = v732[64];
    }
    while (v178 < (int)v732[64]);
    if (v179 && v732[64] != 64)
    {
      v732[v732[64]] = v179;
      v183 = ++v732[64];
    }
    if (v24 > 0 != v175 > 0)
      v732[64] = -v183;
    if ((v694 | v172) == 1)
      goto LABEL_258;
    goto LABEL_265;
  }
LABEL_264:
  v732[64] = 0;
  if ((v694 | v172) == 1)
  {
LABEL_258:
    v727[64] = 0;
    goto LABEL_287;
  }
LABEL_265:
  v192 = 0;
  v193 = 0;
  if (v111 >= 0)
    v194 = v111;
  else
    v194 = -v111;
  if ((v171 & 0x80000000) == 0)
    v171 = v171;
  else
    v171 = -(int)v171;
  v195 = v194 - 1;
  v196 = v195 + v171;
  if (v195 + v171 >= 0x40)
    v196 = 64;
  v727[64] = v196;
  do
  {
    v198 = 0;
    v199 = 0;
    if (v192 >= v195)
      v200 = v195;
    else
      v200 = v192;
    v201 = ~v200;
    v202 = v723;
    do
    {
      if (v192 + v198 < v171)
      {
        v203 = *v202 * (unint64_t)v55;
        v193 += v203;
        v199 += HIDWORD(v203);
      }
      --v198;
      ++v202;
    }
    while (v201 != v198);
    v727[v192] = v193;
    v193 = v199 + HIDWORD(v193);
    ++v192;
    v197 = v727[64];
  }
  while (v192 < v727[64]);
  if (v193 && v727[64] != 64)
  {
    v727[v727[64]] = v193;
    v197 = ++v727[64];
  }
  if (v110 > 0 != v170 > 0)
    v727[64] = -v197;
LABEL_287:
  sub_20EED4C8C(v707, v732, v727);
  sub_20EED4F68(v705, v709, v707);
  LODWORD(v204) = __dst[64];
  if (__dst[64])
  {
    if (v713)
    {
      v205 = 0;
      v206 = 0;
      if (v713 >= 0)
        v207 = v713;
      else
        v207 = -v713;
      v208 = v207 - 1 + v207;
      if (v208 >= 0x40)
        LODWORD(v208) = 64;
      v702 = v208;
      do
      {
        v209 = 0;
        v210 = 0;
        if (v205 >= v207 - 1)
          v211 = v207 - 1;
        else
          v211 = v205;
        v212 = v211 + 1;
        v213 = v205;
        do
        {
          if (v213 < v207)
          {
            v214 = *((unsigned int *)v712 + v213) * (unint64_t)*((unsigned int *)v712 + v209);
            v206 += v214;
            v210 += HIDWORD(v214);
          }
          ++v209;
          --v213;
        }
        while (v212 != v209);
        v701[v205] = v206;
        v206 = v210 + HIDWORD(v206);
        ++v205;
      }
      while (v205 < v702);
      if (v206 && v702 != 64)
        v701[v702++] = v206;
    }
    else
    {
      v702 = 0;
    }
    v225 = 0;
    v226 = 0;
    if ((v204 & 0x80000000) == 0)
      v204 = v204;
    else
      v204 = -(int)v204;
    v227 = v204 - 1 + v204;
    if (v227 >= 0x40)
      LODWORD(v227) = 64;
    v700 = v227;
    do
    {
      v228 = 0;
      v229 = 0;
      if (v225 >= v204 - 1)
        v230 = v204 - 1;
      else
        v230 = v225;
      v231 = v230 + 1;
      v232 = v225;
      do
      {
        if (v232 < v204)
        {
          v233 = __dst[v232] * (unint64_t)__dst[v228];
          v226 += v233;
          v229 += HIDWORD(v233);
        }
        ++v228;
        --v232;
      }
      while (v231 != v228);
      v699[v225] = v226;
      v226 = v229 + HIDWORD(v226);
      ++v225;
    }
    while (v225 < v700);
    if (v226 && v700 != 64)
      v699[v700++] = v226;
    sub_20EED4F68(v703, v701, v699);
    v238 = v703[64];
    if (!v703[64])
      goto LABEL_502;
    v239 = v710;
    if (!v710)
      goto LABEL_502;
    v240 = 0;
    v241 = 0;
    if (v703[64] >= 0)
      v242 = v703[64];
    else
      v242 = -v703[64];
    if (v710 >= 0)
      v243 = v710;
    else
      v243 = -v710;
    v244 = v242 - 1;
    v245 = v242 - 1 + v243;
    if (v245 >= 0x40)
      LODWORD(v245) = 64;
    v727[64] = v245;
    v246 = v709;
    do
    {
      v248 = 0;
      v249 = 0;
      if (v240 >= v244)
        v250 = v244;
      else
        v250 = v240;
      v251 = ~v250;
      v252 = v703;
      do
      {
        if (v240 + v248 < v243)
        {
          v253 = v246[v248] * (unint64_t)*v252;
          v241 += v253;
          v249 += HIDWORD(v253);
        }
        --v248;
        ++v252;
      }
      while (v251 != v248);
      v727[v240] = v241;
      v241 = v249 + HIDWORD(v241);
      ++v240;
      v247 = v727[64];
      ++v246;
    }
    while (v240 < v727[64]);
    if (v241 && v727[64] != 64)
    {
      v727[v727[64]] = v241;
      v247 = ++v727[64];
    }
    if (v238 > 0 != v239 > 0)
    {
      v247 = -v247;
      v727[64] = v247;
    }
    if (!v247)
      goto LABEL_502;
    v254 = v708;
    if (!v708)
      goto LABEL_502;
    v255 = 0;
    v256 = 0;
    if (v247 >= 0)
      v257 = v247;
    else
      v257 = -v247;
    if (v708 >= 0)
      v258 = v708;
    else
      v258 = -v708;
    v259 = v257 - 1;
    v260 = v257 - 1 + v258;
    if (v260 >= 0x40)
      LODWORD(v260) = 64;
    v732[64] = v260;
    v261 = v707;
    do
    {
      v263 = 0;
      v264 = 0;
      if (v255 >= v259)
        v265 = v259;
      else
        v265 = v255;
      v266 = ~v265;
      v267 = v727;
      do
      {
        if (v255 + v263 < v258)
        {
          v268 = v261[v263] * (unint64_t)*v267;
          v256 += v268;
          v264 += HIDWORD(v268);
        }
        --v263;
        ++v267;
      }
      while (v266 != v263);
      v732[v255] = v256;
      v256 = v264 + HIDWORD(v256);
      ++v255;
      v262 = v732[64];
      ++v261;
    }
    while (v255 < (int)v732[64]);
    if (v256 && v732[64] != 64)
    {
      v732[v732[64]] = v256;
      v262 = ++v732[64];
    }
    if (v247 > 0 != v254 > 0)
    {
      v262 = -v262;
      v732[64] = v262;
    }
    if (v262)
    {
      v323 = 0;
      v324 = 0;
      if (v262 >= 0)
        v325 = v262;
      else
        v325 = -v262;
      v326 = v325 - 1;
      if (v325 >= 0x40)
        LODWORD(v325) = 64;
      __src[64] = v325;
      do
      {
        v328 = 0;
        v329 = 0;
        if (v323 >= v326)
          v330 = v326;
        else
          v330 = v323;
        v331 = v330 + 1;
        do
        {
          if (v323 == v328)
          {
            v332 = v732[v323];
            v324 += (4 * v332);
            v329 += v332 >> 30;
          }
          ++v328;
        }
        while (v331 != v328);
        __src[v323] = v324;
        v324 = v329 + HIDWORD(v324);
        ++v323;
        v327 = __src[64];
      }
      while (v323 < __src[64]);
      if (v324 && __src[64] != 64)
      {
        __src[__src[64]] = v324;
        v327 = ++__src[64];
      }
      if (v262 <= 0)
        __src[64] = -v327;
    }
    else
    {
LABEL_502:
      __src[64] = 0;
    }
    v333 = __dst[64];
    if (__dst[64] >= 0)
      v334 = __dst[64];
    else
      v334 = -__dst[64];
    if ((_DWORD)v334)
    {
      if (v334 == 1)
      {
        v335 = 0;
        LODWORD(v234) = __dst[0];
        v336 = (double)v234;
      }
      else if (v334 == 2)
      {
        v335 = 0;
        LODWORD(v234) = __dst[1];
        LODWORD(v235) = __dst[0];
        v336 = (double)v234 * 4294967300.0 + (double)v235;
      }
      else
      {
        v339 = &__dst[v334];
        LODWORD(v236) = *(v339 - 2);
        LODWORD(v234) = *(v339 - 1);
        LODWORD(v237) = *(v339 - 3);
        v336 = ((double)v234 * 4294967300.0 + (double)v236) * 4294967300.0 + (double)v237;
        v335 = 32 * v334 - 96;
      }
      if (__dst[64] < 0)
        v336 = -v336;
      v340 = ldexp(v336, v335);
      v338 = 1.0 / v340 * (1.0 / v340);
      if ((v94 & 1) != 0)
        goto LABEL_518;
    }
    else
    {
      v337 = ldexp(0.0, 0);
      v338 = 1.0 / v337 * (1.0 / v337);
      if ((v94 & 1) != 0)
        goto LABEL_518;
    }
    if (!a9)
      goto LABEL_616;
LABEL_518:
    if (v683 && v333)
    {
      v341 = 0;
      v342 = 0;
      if (v683 >= 0)
        v343 = v683;
      else
        v343 = -v683;
      v344 = v343 - 1;
      v345 = v343 - 1 + v334;
      if (v345 >= 0x40)
        LODWORD(v345) = 64;
      v702 = v345;
      v346 = __dst;
      do
      {
        v348 = 0;
        v349 = 0;
        if (v341 >= v344)
          v350 = v344;
        else
          v350 = v341;
        v351 = ~v350;
        v352 = (unsigned int *)v716;
        do
        {
          if (v341 + v348 < v334)
          {
            v353 = v346[v348] * (unint64_t)*v352;
            v342 += v353;
            v349 += HIDWORD(v353);
          }
          --v348;
          ++v352;
        }
        while (v351 != v348);
        v701[v341] = v342;
        v342 = v349 + HIDWORD(v342);
        ++v341;
        v347 = v702;
        ++v346;
      }
      while (v341 < v702);
      if (v342 && v702 != 64)
      {
        v701[v702] = v342;
        v347 = ++v702;
      }
      if (v333 > 0 != v683 > 0)
      {
        v347 = -v347;
        v702 = v347;
      }
      if (v347)
      {
        v355 = 0;
        v356 = 0;
        if (v347 >= 0)
          v357 = v347;
        else
          v357 = -v347;
        v358 = v357 - 1;
        v359 = v358 + v334;
        if (v358 + v334 >= 0x40)
          v359 = 64;
        v703[64] = v359;
        v360 = __dst;
        do
        {
          v362 = 0;
          v363 = 0;
          if (v355 >= v358)
            v364 = v358;
          else
            v364 = v355;
          v365 = ~v364;
          v366 = v701;
          do
          {
            if (v355 + v362 < v334)
            {
              v367 = v360[v362] * (unint64_t)*v366;
              v356 += v367;
              v363 += HIDWORD(v367);
            }
            --v362;
            ++v366;
          }
          while (v365 != v362);
          v703[v355] = v356;
          v356 = v363 + HIDWORD(v356);
          ++v355;
          v361 = v703[64];
          ++v360;
        }
        while (v355 < v703[64]);
        if (v356 && v703[64] != 64)
        {
          v703[v703[64]] = v356;
          v361 = ++v703[64];
        }
        if (v333 > 0 != v347 > 0)
          v703[64] = -v361;
        v354 = v713;
        if (!v713)
          goto LABEL_611;
      }
      else
      {
        v703[64] = 0;
        v354 = v713;
        if (!v713)
          goto LABEL_611;
      }
    }
    else
    {
      v702 = 0;
      v703[64] = 0;
      v354 = v713;
      if (!v713)
        goto LABEL_611;
    }
    v368 = v706;
    if (v706)
    {
      v369 = 0;
      v370 = 0;
      if (v354 >= 0)
        v371 = v354;
      else
        v371 = -v354;
      if (v706 >= 0)
        v372 = v706;
      else
        v372 = -v706;
      v373 = v371 - 1;
      v374 = v371 - 1 + v372;
      if (v374 >= 0x40)
        LODWORD(v374) = 64;
      v698 = v374;
      v375 = v705;
      do
      {
        v377 = 0;
        v378 = 0;
        if (v369 >= v373)
          v379 = v373;
        else
          v379 = v369;
        v380 = ~v379;
        v381 = (unsigned int *)v712;
        do
        {
          if (v369 + v377 < v372)
          {
            v382 = v375[v377] * (unint64_t)*v381;
            v370 += v382;
            v378 += HIDWORD(v382);
          }
          --v377;
          ++v381;
        }
        while (v380 != v377);
        v697[v369] = v370;
        v370 = v378 + HIDWORD(v370);
        ++v369;
        v376 = v698;
        ++v375;
      }
      while (v369 < v698);
      if (v370 && v698 != 64)
      {
        v697[v698] = v370;
        v376 = ++v698;
      }
      if (v354 > 0 != v368 > 0)
      {
        v376 = -v376;
        v698 = v376;
      }
      if (v376)
      {
        v383 = v721;
        if (v721)
        {
          v384 = 0;
          v385 = 0;
          if (v376 >= 0)
            v386 = v376;
          else
            v386 = -v376;
          if (v721 >= 0)
            v387 = v721;
          else
            v387 = -v721;
          v388 = v386 - 1;
          v389 = v388 + v387;
          if (v388 + v387 >= 0x40)
            v389 = 64;
          v700 = v389;
          v390 = v720;
          do
          {
            v392 = 0;
            v393 = 0;
            if (v384 >= v388)
              v394 = v388;
            else
              v394 = v384;
            v395 = ~v394;
            v396 = v697;
            do
            {
              if (v384 + v392 < v387)
              {
                v397 = *((unsigned int *)v390 + v392) * (unint64_t)*v396;
                v385 += v397;
                v393 += HIDWORD(v397);
              }
              --v392;
              ++v396;
            }
            while (v395 != v392);
            v699[v384] = v385;
            v385 = v393 + HIDWORD(v385);
            ++v384;
            v391 = v700;
            v390 = (_OWORD *)((char *)v390 + 4);
          }
          while (v384 < v700);
          if (v385 && v700 != 64)
          {
            v699[v700] = v385;
            v391 = ++v700;
          }
          if (v376 > 0 != v383 > 0)
            v700 = -v391;
          goto LABEL_612;
        }
      }
    }
LABEL_611:
    v700 = 0;
LABEL_612:
    sub_20EED4F68(v727, v703, v699);
    memcpy(v732, v727, sizeof(v732));
    v727[0] = 1;
    v727[64] = 1;
    *(_OWORD *)&v733[192] = v720[12];
    *(_OWORD *)&v733[208] = v720[13];
    *(_OWORD *)&v733[224] = v720[14];
    *(_OWORD *)&v733[240] = v720[15];
    *(_OWORD *)&v733[128] = v720[8];
    *(_OWORD *)&v733[144] = v720[9];
    *(_OWORD *)&v733[160] = v720[10];
    *(_OWORD *)&v733[176] = v720[11];
    *(_OWORD *)&v733[64] = v720[4];
    *(_OWORD *)&v733[80] = v720[5];
    *(_OWORD *)&v733[96] = v720[6];
    *(_OWORD *)&v733[112] = v720[7];
    *(_OWORD *)v733 = v720[0];
    *(_OWORD *)&v733[16] = v720[1];
    *(_OWORD *)&v733[32] = v720[2];
    *(_OWORD *)&v733[48] = v720[3];
    v398 = v721;
    if (v685 == 2)
      v398 = -v721;
    *(_DWORD *)&v733[256] = v398;
    memcpy(v728, __src, sizeof(v728));
    if (v94)
    {
      v403 = sub_20EED840C((uint64_t)v684, v732, v727, v399, v400, v401, v402);
      *(long double *)v109 = v338 * (ldexp(*(long double *)&v403, v404) * 0.5);
    }
LABEL_616:
    if ((v688 & 1) == 0 && !a9)
      goto LABEL_707;
    v405 = v715;
    if (v715 && (v406 = __dst[64]) != 0)
    {
      v407 = 0;
      v408 = 0;
      if (v715 >= 0)
        v409 = v715;
      else
        v409 = -v715;
      if (__dst[64] >= 0)
        v410 = __dst[64];
      else
        v410 = -__dst[64];
      v411 = v409 - 1;
      v412 = v409 - 1 + v410;
      if (v412 >= 0x40)
        LODWORD(v412) = 64;
      v700 = v412;
      v413 = __dst;
      do
      {
        v415 = 0;
        v416 = 0;
        if (v407 >= v411)
          v417 = v411;
        else
          v417 = v407;
        v418 = ~v417;
        v419 = (unsigned int *)v714;
        do
        {
          if (v407 + v415 < v410)
          {
            v420 = v413[v415] * (unint64_t)*v419;
            v408 += v420;
            v416 += HIDWORD(v420);
          }
          --v415;
          ++v419;
        }
        while (v418 != v415);
        v699[v407] = v408;
        v408 = v416 + HIDWORD(v408);
        ++v407;
        v414 = v700;
        ++v413;
      }
      while (v407 < v700);
      if (v408 && v700 != 64)
      {
        v699[v700] = v408;
        v414 = ++v700;
      }
      if (v405 > 0 != v406 > 0)
      {
        v414 = -v414;
        v700 = v414;
      }
      if (v414)
      {
        v437 = 0;
        v438 = 0;
        if (v414 >= 0)
          v439 = v414;
        else
          v439 = -v414;
        v440 = v439 - 1;
        v441 = v440 + v410;
        if (v440 + v410 >= 0x40)
          v441 = 64;
        v702 = v441;
        v442 = __dst;
        do
        {
          v444 = 0;
          v445 = 0;
          if (v437 >= v440)
            v446 = v440;
          else
            v446 = v437;
          v447 = ~v446;
          v448 = v699;
          do
          {
            if (v437 + v444 < v410)
            {
              v449 = v442[v444] * (unint64_t)*v448;
              v438 += v449;
              v445 += HIDWORD(v449);
            }
            --v444;
            ++v448;
          }
          while (v447 != v444);
          v701[v437] = v438;
          v438 = v445 + HIDWORD(v438);
          ++v437;
          v443 = v702;
          ++v442;
        }
        while (v437 < v702);
        if (v438 && v702 != 64)
        {
          v701[v702] = v438;
          v443 = ++v702;
        }
        if (v406 > 0 != v414 > 0)
          v702 = -v443;
        goto LABEL_639;
      }
    }
    else
    {
      v700 = 0;
    }
    v702 = 0;
LABEL_639:
    v421 = v713;
    if (!v713)
      goto LABEL_702;
    v422 = v706;
    if (!v706)
      goto LABEL_702;
    v423 = 0;
    v424 = 0;
    if (v713 >= 0)
      v425 = v713;
    else
      v425 = -v713;
    if (v706 >= 0)
      v426 = v706;
    else
      v426 = -v706;
    v427 = v425 - 1;
    v428 = v425 - 1 + v426;
    if (v428 >= 0x40)
      LODWORD(v428) = 64;
    v696 = v428;
    v429 = v705;
    do
    {
      v431 = 0;
      v432 = 0;
      if (v423 >= v427)
        v433 = v427;
      else
        v433 = v423;
      v434 = ~v433;
      v435 = (unsigned int *)v712;
      do
      {
        if (v423 + v431 < v426)
        {
          v436 = v429[v431] * (unint64_t)*v435;
          v424 += v436;
          v432 += HIDWORD(v436);
        }
        --v431;
        ++v435;
      }
      while (v434 != v431);
      v695[v423] = v424;
      v424 = v432 + HIDWORD(v424);
      ++v423;
      v430 = v696;
      ++v429;
    }
    while (v423 < v696);
    if (v424 && v696 != 64)
    {
      v695[v696] = v424;
      v430 = ++v696;
    }
    if (v421 > 0 != v422 > 0)
    {
      v430 = -v430;
      v696 = v430;
    }
    if (v430 && (v450 = v719) != 0)
    {
      v451 = 0;
      v452 = 0;
      if (v430 >= 0)
        v453 = v430;
      else
        v453 = -v430;
      if (v719 >= 0)
        v454 = v719;
      else
        v454 = -v719;
      v455 = v453 - 1;
      v456 = v455 + v454;
      if (v455 + v454 >= 0x40)
        v456 = 64;
      v698 = v456;
      v457 = v718;
      do
      {
        v459 = 0;
        v460 = 0;
        if (v451 >= v455)
          v461 = v455;
        else
          v461 = v451;
        v462 = ~v461;
        v463 = v695;
        do
        {
          if (v451 + v459 < v454)
          {
            v464 = *((unsigned int *)v457 + v459) * (unint64_t)*v463;
            v452 += v464;
            v460 += HIDWORD(v464);
          }
          --v459;
          ++v463;
        }
        while (v462 != v459);
        v697[v451] = v452;
        v452 = v460 + HIDWORD(v452);
        ++v451;
        v458 = v698;
        v457 = (_OWORD *)((char *)v457 + 4);
      }
      while (v451 < v698);
      if (v452 && v698 != 64)
      {
        v697[v698] = v452;
        v458 = ++v698;
      }
      if (v430 > 0 != v450 > 0)
        v698 = -v458;
    }
    else
    {
LABEL_702:
      v698 = 0;
    }
    sub_20EED4F68(v703, v701, v697);
    memcpy(v734, v703, sizeof(v734));
    v729[0] = 1;
    v730 = 1;
    v747 = v718[12];
    v748 = v718[13];
    v749 = v718[14];
    v750 = v718[15];
    v743 = v718[8];
    v744 = v718[9];
    v745 = v718[10];
    v746 = v718[11];
    v739 = v718[4];
    v740 = v718[5];
    v741 = v718[6];
    v742 = v718[7];
    v735 = v718[0];
    v736 = v718[1];
    v737 = v718[2];
    v738 = v718[3];
    v465 = v719;
    if (v685 == 2)
      v465 = -v719;
    v751 = v465;
    memcpy(v731, __src, sizeof(v731));
    if (v688)
    {
      v470 = sub_20EED840C((uint64_t)v684, v734, v729, v466, v467, v468, v469);
      *(long double *)(v109 + 8) = v338 * (ldexp(*(long double *)&v470, v471) * 0.5);
    }
LABEL_707:
    if (!a9)
      return;
    v472 = v727[64];
    if (v727[64] && (v473 = v722[64]) != 0)
    {
      v474 = 0;
      v475 = 0;
      if (v727[64] >= 0)
        v476 = v727[64];
      else
        v476 = -v727[64];
      if (v722[64] >= 0)
        v477 = v722[64];
      else
        v477 = -v722[64];
      v478 = v476 - 1;
      v479 = v478 + v477;
      if (v478 + v477 >= 0x40)
        v479 = 64;
      v703[64] = v479;
      v480 = v722;
      do
      {
        v482 = 0;
        v483 = 0;
        if (v474 >= v478)
          v484 = v478;
        else
          v484 = v474;
        v485 = ~v484;
        v486 = v727;
        do
        {
          if (v474 + v482 < v477)
          {
            v487 = v480[v482] * (unint64_t)*v486;
            v475 += v487;
            v483 += HIDWORD(v487);
          }
          --v482;
          ++v486;
        }
        while (v485 != v482);
        v703[v474] = v475;
        v475 = v483 + HIDWORD(v475);
        ++v474;
        v481 = v703[64];
        ++v480;
      }
      while (v474 < v703[64]);
      if (v475 && v703[64] != 64)
      {
        v703[v703[64]] = v475;
        v481 = ++v703[64];
      }
      if (v472 > 0 != v473 > 0)
        v703[64] = -v481;
    }
    else
    {
      v703[64] = 0;
    }
    memcpy(v727, v703, sizeof(v727));
    v488 = v728[64];
    if (v728[64] && (v489 = v722[64]) != 0)
    {
      v490 = 0;
      v491 = 0;
      if (v728[64] >= 0)
        v492 = v728[64];
      else
        v492 = -v728[64];
      if (v722[64] >= 0)
        v493 = v722[64];
      else
        v493 = -v722[64];
      v494 = v492 - 1;
      v495 = v494 + v493;
      if (v494 + v493 >= 0x40)
        v495 = 64;
      v703[64] = v495;
      v496 = v722;
      do
      {
        v498 = 0;
        v499 = 0;
        if (v490 >= v494)
          v500 = v494;
        else
          v500 = v490;
        v501 = ~v500;
        v502 = v728;
        do
        {
          if (v490 + v498 < v493)
          {
            v503 = v496[v498] * (unint64_t)*v502;
            v491 += v503;
            v499 += HIDWORD(v503);
          }
          --v498;
          ++v502;
        }
        while (v501 != v498);
        v703[v490] = v491;
        v491 = v499 + HIDWORD(v491);
        ++v490;
        v497 = v703[64];
        ++v496;
      }
      while (v490 < v703[64]);
      if (v491 && v703[64] != 64)
      {
        v703[v703[64]] = v491;
        v497 = ++v703[64];
      }
      if (v488 > 0 != v489 > 0)
        v703[64] = -v497;
    }
    else
    {
      v703[64] = 0;
    }
    memcpy(v728, v703, sizeof(v728));
    if (__dst[64])
    {
      v504 = 0;
      v505 = 0;
      if (__dst[64] >= 0)
        v506 = __dst[64];
      else
        v506 = -__dst[64];
      v507 = v506 - 1 + v506;
      if (v507 >= 0x40)
        LODWORD(v507) = 64;
      v700 = v507;
      do
      {
        v508 = 0;
        v509 = 0;
        if (v504 >= v506 - 1)
          v510 = v506 - 1;
        else
          v510 = v504;
        v511 = v510 + 1;
        v512 = v504;
        do
        {
          if (v512 < v506)
          {
            v513 = __dst[v512] * (unint64_t)__dst[v508];
            v505 += v513;
            v509 += HIDWORD(v513);
          }
          ++v508;
          --v512;
        }
        while (v511 != v508);
        v699[v504] = v505;
        v505 = v509 + HIDWORD(v505);
        ++v504;
      }
      while (v504 < v700);
      if (v505 && v700 != 64)
        v699[v700++] = v505;
      LODWORD(v514) = v713;
      if (v713)
      {
LABEL_777:
        v515 = 0;
        v516 = 0;
        if ((v514 & 0x80000000) == 0)
          v514 = v514;
        else
          v514 = -(int)v514;
        v517 = v514 - 1 + v514;
        if (v517 >= 0x40)
          LODWORD(v517) = 64;
        v698 = v517;
        do
        {
          v518 = 0;
          v519 = 0;
          if (v515 >= v514 - 1)
            v520 = v514 - 1;
          else
            v520 = v515;
          v521 = v520 + 1;
          v522 = v515;
          do
          {
            if (v522 < v514)
            {
              v523 = *((unsigned int *)v712 + v522) * (unint64_t)*((unsigned int *)v712 + v518);
              v516 += v523;
              v519 += HIDWORD(v523);
            }
            ++v518;
            --v522;
          }
          while (v521 != v518);
          v697[v515] = v516;
          v516 = v519 + HIDWORD(v516);
          ++v515;
        }
        while (v515 < v698);
        if (v516 && v698 != 64)
          v697[v698++] = v516;
        sub_20EED4F68(v701, v699, v697);
        v524 = v706;
        if (!v706)
          goto LABEL_816;
LABEL_798:
        v525 = v702;
        if (v702)
        {
          v526 = 0;
          v527 = 0;
          if (v524 >= 0)
            v528 = v524;
          else
            v528 = -v524;
          if (v702 >= 0)
            v529 = v702;
          else
            v529 = -v702;
          v530 = v528 - 1;
          v531 = v530 + v529;
          if (v530 + v529 >= 0x40)
            v531 = 64;
          v703[64] = v531;
          v532 = v701;
          do
          {
            v534 = 0;
            v535 = 0;
            if (v526 >= v530)
              v536 = v530;
            else
              v536 = v526;
            v537 = ~v536;
            v538 = v705;
            do
            {
              if (v526 + v534 < v529)
              {
                v539 = v532[v534] * (unint64_t)*v538;
                v527 += v539;
                v535 += HIDWORD(v539);
              }
              --v534;
              ++v538;
            }
            while (v537 != v534);
            v703[v526] = v527;
            v527 = v535 + HIDWORD(v527);
            ++v526;
            v533 = v703[64];
            ++v532;
          }
          while (v526 < v703[64]);
          if (v527 && v703[64] != 64)
          {
            v703[v703[64]] = v527;
            v533 = ++v703[64];
          }
          if (v524 > 0 != v525 > 0)
            v703[64] = -v533;
LABEL_822:
          memcpy(v734, v703, sizeof(v734));
          v729[0] = 1;
          v730 = 1;
          v747 = v712[12];
          v748 = v712[13];
          v749 = v712[14];
          v750 = v712[15];
          v743 = v712[8];
          v744 = v712[9];
          v745 = v712[10];
          v746 = v712[11];
          v739 = v712[4];
          v740 = v712[5];
          v741 = v712[6];
          v742 = v712[7];
          v735 = v712[0];
          v736 = v712[1];
          v737 = v712[2];
          v738 = v712[3];
          v540 = v713;
          if (v685 == 2)
            v540 = -v713;
          v751 = v540;
          memcpy(v731, __src, sizeof(v731));
          v545 = sub_20EED8944(v684, v732, v727, v541, v542, v543, v544);
          v547 = ldexp(*(long double *)&v545, v546);
          v550 = 0.5;
          v551 = v547 * 0.5;
          v552 = v338 * v551;
          v553 = v722[64];
          if (v722[64] >= 0)
            v554 = v722[64];
          else
            v554 = -v722[64];
          if ((_DWORD)v554)
            goto LABEL_828;
          goto LABEL_1067;
        }
LABEL_816:
        v703[64] = 0;
        goto LABEL_822;
      }
    }
    else
    {
      v700 = 0;
      LODWORD(v514) = v713;
      if (v713)
        goto LABEL_777;
    }
    v698 = 0;
    sub_20EED4F68(v701, v699, v697);
    v524 = v706;
    if (!v706)
      goto LABEL_816;
    goto LABEL_798;
  }
  if (v713)
  {
    v215 = 0;
    v216 = 0;
    if (v713 >= 0)
      v217 = v713;
    else
      v217 = -v713;
    v218 = v217 - 1 + v217;
    if (v218 >= 0x40)
      LODWORD(v218) = 64;
    v732[64] = v218;
    do
    {
      v219 = 0;
      v220 = 0;
      if (v215 >= v217 - 1)
        v221 = v217 - 1;
      else
        v221 = v215;
      v222 = v221 + 1;
      v223 = v215;
      do
      {
        if (v223 < v217)
        {
          v224 = *((unsigned int *)v712 + v223) * (unint64_t)*((unsigned int *)v712 + v219);
          v216 += v224;
          v220 += HIDWORD(v224);
        }
        ++v219;
        --v223;
      }
      while (v222 != v219);
      v732[v215] = v216;
      v216 = v220 + HIDWORD(v216);
      ++v215;
    }
    while (v215 < (int)v732[64]);
    if (v216 && v732[64] != 64)
      v732[v732[64]++] = v216;
    LODWORD(v269) = v706;
    if (v706)
      goto LABEL_386;
LABEL_407:
    v727[64] = 0;
    goto LABEL_408;
  }
  v732[64] = 0;
  LODWORD(v269) = v706;
  if (!v706)
    goto LABEL_407;
LABEL_386:
  v270 = 0;
  v271 = 0;
  if ((v269 & 0x80000000) == 0)
    v269 = v269;
  else
    v269 = -(int)v269;
  v272 = v269 - 1 + v269;
  if (v272 >= 0x40)
    LODWORD(v272) = 64;
  v727[64] = v272;
  do
  {
    v273 = 0;
    v274 = 0;
    if (v270 >= v269 - 1)
      v275 = v269 - 1;
    else
      v275 = v270;
    v276 = v275 + 1;
    v277 = v270;
    do
    {
      if (v277 < v269)
      {
        v278 = v705[v277] * (unint64_t)v705[v273];
        v271 += v278;
        v274 += HIDWORD(v278);
      }
      ++v273;
      --v277;
    }
    while (v276 != v273);
    v727[v270] = v271;
    v271 = v274 + HIDWORD(v271);
    ++v270;
  }
  while (v270 < v727[64]);
  if (v271 && v727[64] != 64)
    v727[v727[64]++] = v271;
LABEL_408:
  sub_20EED4C8C(__src, v732, v727);
  v281 = v713;
  if (v713 && (v282 = v706) != 0)
  {
    v283 = 0;
    v284 = 0;
    if (v713 >= 0)
      v285 = v713;
    else
      v285 = -v713;
    if (v706 >= 0)
      v286 = v706;
    else
      v286 = -v706;
    v287 = v285 - 1;
    v288 = v287 + v286;
    if (v287 + v286 >= 0x40)
      v288 = 64;
    v732[64] = v288;
    v289 = v705;
    do
    {
      v291 = 0;
      v292 = 0;
      if (v283 >= v287)
        v293 = v287;
      else
        v293 = v283;
      v294 = ~v293;
      v295 = (unsigned int *)v712;
      do
      {
        if (v283 + v291 < v286)
        {
          v296 = v289[v291] * (unint64_t)*v295;
          v284 += v296;
          v292 += HIDWORD(v296);
        }
        --v291;
        ++v295;
      }
      while (v294 != v291);
      v732[v283] = v284;
      v284 = v292 + HIDWORD(v284);
      ++v283;
      v290 = v732[64];
      ++v289;
    }
    while (v283 < (int)v732[64]);
    if (v284 && v732[64] != 64)
    {
      v732[v732[64]] = v284;
      v290 = ++v732[64];
    }
    if (v281 > 0 != v282 > 0)
      v732[64] = -v290;
  }
  else
  {
    v732[64] = 0;
  }
  memcpy(__dst, v732, sizeof(__dst));
  v297 = __dst[64];
  if (__dst[64] && v683)
  {
    v298 = 0;
    v299 = 0;
    if (__dst[64] >= 0)
      v300 = __dst[64];
    else
      v300 = -__dst[64];
    if (v683 >= 0)
      v301 = v683;
    else
      v301 = -v683;
    v302 = v300 - 1;
    v303 = v300 - 1 + v301;
    if (v303 >= 0x40)
      LODWORD(v303) = 64;
    v702 = v303;
    v304 = v716;
    do
    {
      v306 = 0;
      v307 = 0;
      if (v298 >= v302)
        v308 = v302;
      else
        v308 = v298;
      v309 = ~v308;
      v310 = __dst;
      do
      {
        if (v298 + v306 < v301)
        {
          v311 = *((unsigned int *)v304 + v306) * (unint64_t)*v310;
          v299 += v311;
          v307 += HIDWORD(v311);
        }
        --v306;
        ++v310;
      }
      while (v309 != v306);
      v701[v298] = v299;
      v299 = v307 + HIDWORD(v299);
      ++v298;
      v305 = v702;
      v304 = (_QWORD *)((char *)v304 + 4);
    }
    while (v298 < v702);
    if (v299 && v702 != 64)
    {
      v701[v702] = v299;
      v305 = ++v702;
    }
    if (v297 > 0 != v683 > 0)
    {
      v305 = -v305;
      v702 = v305;
    }
    LODWORD(v312) = v690;
    if (v305)
    {
      v313 = 0;
      v314 = 0;
      if (v305 >= 0)
        v315 = v305;
      else
        v315 = -v305;
      v316 = v315 - 1;
      if (v315 >= 0x40)
        LODWORD(v315) = 64;
      v703[64] = v315;
      do
      {
        v318 = 0;
        v319 = 0;
        if (v313 >= v316)
          v320 = v316;
        else
          v320 = v313;
        v321 = v320 + 1;
        do
        {
          if (v313 == v318)
          {
            v322 = v701[v313];
            v314 += (2 * v322);
            v319 += v322 >> 31;
          }
          ++v318;
        }
        while (v321 != v318);
        v703[v313] = v314;
        v314 = v319 + HIDWORD(v314);
        ++v313;
        v317 = v703[64];
      }
      while (v313 < v703[64]);
      if (v314)
      {
        LODWORD(v312) = v690;
        if (v703[64] != 64)
        {
          v703[v703[64]] = v314;
          v317 = ++v703[64];
        }
        if (v305 <= 0)
          goto LABEL_852;
      }
      else
      {
        LODWORD(v312) = v690;
        if (v305 <= 0)
LABEL_852:
          v703[64] = -v317;
      }
    }
    else
    {
      v703[64] = 0;
    }
  }
  else
  {
    v702 = 0;
    LODWORD(v312) = v690;
    v703[64] = 0;
  }
  v558 = __src[64];
  if (__src[64] && (_DWORD)v312)
  {
    v559 = 0;
    v560 = 0;
    if (__src[64] >= 0)
      v561 = __src[64];
    else
      v561 = -__src[64];
    if ((v312 & 0x80000000) == 0)
      v312 = v312;
    else
      v312 = -(int)v312;
    v562 = v561 - 1;
    v563 = v562 + v312;
    if (v562 + v312 >= 0x40)
      v563 = 64;
    v700 = v563;
    v564 = v720;
    do
    {
      v566 = 0;
      v567 = 0;
      if (v559 >= v562)
        v568 = v562;
      else
        v568 = v559;
      v569 = ~v568;
      v570 = __src;
      do
      {
        if (v559 + v566 < v312)
        {
          v571 = *((unsigned int *)v564 + v566) * (unint64_t)*v570;
          v560 += v571;
          v567 += HIDWORD(v571);
        }
        --v566;
        ++v570;
      }
      while (v569 != v566);
      v699[v559] = v560;
      v560 = v567 + HIDWORD(v560);
      ++v559;
      v565 = v700;
      v564 = (_OWORD *)((char *)v564 + 4);
    }
    while (v559 < v700);
    if (v560 && v700 != 64)
    {
      v699[v700] = v560;
      v565 = ++v700;
    }
    if (v558 > 0 != v690 > 0)
      v700 = -v565;
  }
  else
  {
    v700 = 0;
  }
  sub_20EED4F68(v727, v703, v699);
  memcpy(v732, v727, sizeof(v732));
  memcpy(v727, v722, sizeof(v727));
  v572 = __dst[64];
  if (__dst[64] && (v573 = v706) != 0)
  {
    v574 = 0;
    v575 = 0;
    if (__dst[64] >= 0)
      v576 = __dst[64];
    else
      v576 = -__dst[64];
    if (v706 >= 0)
      v577 = v706;
    else
      v577 = -v706;
    v578 = v576 - 1;
    v579 = v576 - 1 + v577;
    if (v579 >= 0x40)
      LODWORD(v579) = 64;
    v700 = v579;
    v580 = v705;
    do
    {
      v582 = 0;
      v583 = 0;
      if (v574 >= v578)
        v584 = v578;
      else
        v584 = v574;
      v585 = ~v584;
      v586 = __dst;
      do
      {
        if (v574 + v582 < v577)
        {
          v587 = v580[v582] * (unint64_t)*v586;
          v575 += v587;
          v583 += HIDWORD(v587);
        }
        --v582;
        ++v586;
      }
      while (v585 != v582);
      v699[v574] = v575;
      v575 = v583 + HIDWORD(v575);
      ++v574;
      v581 = v700;
      ++v580;
    }
    while (v574 < v700);
    if (v575 && v700 != 64)
    {
      v699[v700] = v575;
      v581 = ++v700;
    }
    if (v572 > 0 != v573 > 0)
    {
      v581 = -v581;
      v700 = v581;
    }
    if (v581)
    {
      v589 = 0;
      v590 = 0;
      if (v581 >= 0)
        v591 = v581;
      else
        v591 = -v581;
      v592 = v591 - 1;
      if (v591 >= 0x40)
        LODWORD(v591) = 64;
      v702 = v591;
      do
      {
        v594 = 0;
        v595 = 0;
        if (v589 >= v592)
          v596 = v592;
        else
          v596 = v589;
        v597 = v596 + 1;
        do
        {
          if (v589 == v594)
          {
            v598 = v699[v589];
            v590 += (2 * v598);
            v595 += v598 >> 31;
          }
          ++v594;
        }
        while (v597 != v594);
        v701[v589] = v590;
        v590 = v595 + HIDWORD(v590);
        ++v589;
        v593 = v702;
      }
      while (v589 < v702);
      if (v590 && v702 != 64)
      {
        v701[v702] = v590;
        v593 = ++v702;
      }
      if (v581 <= 0)
        v702 = -v593;
      v588 = __src[64];
      if (!__src[64])
        goto LABEL_949;
    }
    else
    {
      v702 = 0;
      v588 = __src[64];
      if (!__src[64])
        goto LABEL_949;
    }
  }
  else
  {
    v700 = 0;
    v702 = 0;
    v588 = __src[64];
    if (!__src[64])
      goto LABEL_949;
  }
  v599 = v713;
  if (!v713)
  {
LABEL_949:
    v698 = 0;
    goto LABEL_950;
  }
  v600 = 0;
  v601 = 0;
  if (v588 >= 0)
    v602 = v588;
  else
    v602 = -v588;
  if (v713 >= 0)
    v603 = v713;
  else
    v603 = -v713;
  v604 = v602 - 1;
  v605 = v604 + v603;
  if (v604 + v603 >= 0x40)
    v605 = 64;
  v698 = v605;
  v606 = v712;
  do
  {
    v608 = 0;
    v609 = 0;
    if (v600 >= v604)
      v610 = v604;
    else
      v610 = v600;
    v611 = ~v610;
    v612 = __src;
    do
    {
      if (v600 + v608 < v603)
      {
        v613 = *((unsigned int *)v606 + v608) * (unint64_t)*v612;
        v601 += v613;
        v609 += HIDWORD(v613);
      }
      --v608;
      ++v612;
    }
    while (v611 != v608);
    v697[v600] = v601;
    v601 = v609 + HIDWORD(v601);
    ++v600;
    v607 = v698;
    v606 = (_OWORD *)((char *)v606 + 4);
  }
  while (v600 < v698);
  if (v601 && v698 != 64)
  {
    v697[v698] = v601;
    v607 = ++v698;
  }
  if (v588 > 0 != v599 > 0)
    v698 = -v607;
LABEL_950:
  sub_20EED4F68(v703, v701, v697);
  memcpy(v733, v703, sizeof(v733));
  v728[0] = 1;
  v728[64] = 1;
  v614 = __dst[64];
  if (!__dst[64])
    goto LABEL_989;
  v615 = v715;
  if (!v715)
    goto LABEL_989;
  v616 = 0;
  v617 = 0;
  if (__dst[64] >= 0)
    v618 = __dst[64];
  else
    v618 = -__dst[64];
  if (v715 >= 0)
    v619 = v715;
  else
    v619 = -v715;
  v620 = v618 - 1;
  v621 = v618 - 1 + v619;
  if (v621 >= 0x40)
    LODWORD(v621) = 64;
  v700 = v621;
  v622 = v714;
  do
  {
    v624 = 0;
    v625 = 0;
    if (v616 >= v620)
      v626 = v620;
    else
      v626 = v616;
    v627 = ~v626;
    v628 = __dst;
    do
    {
      if (v616 + v624 < v619)
      {
        v629 = *((unsigned int *)v622 + v624) * (unint64_t)*v628;
        v617 += v629;
        v625 += HIDWORD(v629);
      }
      --v624;
      ++v628;
    }
    while (v627 != v624);
    v699[v616] = v617;
    v617 = v625 + HIDWORD(v617);
    ++v616;
    v623 = v700;
    v622 = (_QWORD *)((char *)v622 + 4);
  }
  while (v616 < v700);
  if (v617 && v700 != 64)
  {
    v699[v700] = v617;
    v623 = ++v700;
  }
  if (v614 > 0 != v615 > 0)
  {
    v623 = -v623;
    v700 = v623;
  }
  if (v623)
  {
    v630 = 0;
    v631 = 0;
    if (v623 >= 0)
      v632 = v623;
    else
      v632 = -v623;
    v633 = v632 - 1;
    if (v632 >= 0x40)
      LODWORD(v632) = 64;
    v702 = v632;
    do
    {
      v635 = 0;
      v636 = 0;
      if (v630 >= v633)
        v637 = v633;
      else
        v637 = v630;
      v638 = v637 + 1;
      do
      {
        if (v630 == v635)
        {
          v639 = v699[v630];
          v631 += (2 * v639);
          v636 += v639 >> 31;
        }
        ++v635;
      }
      while (v638 != v635);
      v701[v630] = v631;
      v631 = v636 + HIDWORD(v631);
      ++v630;
      v634 = v702;
    }
    while (v630 < v702);
    if (v631 && v702 != 64)
    {
      v701[v702] = v631;
      v634 = ++v702;
    }
    if (v623 <= 0)
      v702 = -v634;
  }
  else
  {
LABEL_989:
    v702 = 0;
  }
  v640 = __src[64];
  if (__src[64] && (v641 = v719) != 0)
  {
    v642 = 0;
    v643 = 0;
    if (__src[64] >= 0)
      v644 = __src[64];
    else
      v644 = -__src[64];
    if (v719 >= 0)
      v645 = v719;
    else
      v645 = -v719;
    v646 = v644 - 1;
    v647 = v646 + v645;
    if (v646 + v645 >= 0x40)
      v647 = 64;
    v698 = v647;
    v648 = v718;
    do
    {
      v650 = 0;
      v651 = 0;
      if (v642 >= v646)
        v652 = v646;
      else
        v652 = v642;
      v653 = ~v652;
      v654 = __src;
      do
      {
        if (v642 + v650 < v645)
        {
          v655 = *((unsigned int *)v648 + v650) * (unint64_t)*v654;
          v643 += v655;
          v651 += HIDWORD(v655);
        }
        --v650;
        ++v654;
      }
      while (v653 != v650);
      v697[v642] = v643;
      v643 = v651 + HIDWORD(v643);
      ++v642;
      v649 = v698;
      v648 = (_OWORD *)((char *)v648 + 4);
    }
    while (v642 < v698);
    if (v643 && v698 != 64)
    {
      v697[v698] = v643;
      v649 = ++v698;
    }
    if (v640 > 0 != v641 > 0)
      v698 = -v649;
  }
  else
  {
    v698 = 0;
  }
  sub_20EED4F68(v703, v701, v697);
  memcpy(v734, v703, sizeof(v734));
  if (__dst[64] >= 0)
    v660 = __dst[64];
  else
    v660 = -__dst[64];
  if (!(_DWORD)v660)
  {
    v663 = ldexp(0.0, 0);
    v666 = 1.0;
    v667 = 1.0 / v663;
    if (v94)
      goto LABEL_1036;
LABEL_1023:
    if (!v688)
      goto LABEL_1062;
    goto LABEL_1024;
  }
  if (v660 == 1)
  {
    v661 = 0;
    LODWORD(v656) = __dst[0];
    v662 = (double)v656;
  }
  else if (v660 == 2)
  {
    v661 = 0;
    LODWORD(v656) = __dst[1];
    LODWORD(v657) = __dst[0];
    v662 = (double)v656 * 4294967300.0 + (double)v657;
  }
  else
  {
    v671 = &__dst[v660];
    LODWORD(v658) = *(v671 - 2);
    LODWORD(v656) = *(v671 - 1);
    LODWORD(v659) = *(v671 - 3);
    v662 = ((double)v656 * 4294967300.0 + (double)v658) * 4294967300.0 + (double)v659;
    v661 = 32 * v660 - 96;
  }
  if (__dst[64] < 0)
    v662 = -v662;
  v663 = ldexp(v662, v661);
  v666 = 1.0;
  v667 = 1.0 / v663;
  if (!v94)
    goto LABEL_1023;
LABEL_1036:
  if ((v732[64] & 0x80000000) == 0)
    v672 = v732[64];
  else
    v672 = -v732[64];
  if ((_DWORD)v672)
  {
    if (v672 == 1)
    {
      v673 = 0;
      LODWORD(v663) = v732[0];
      v674 = (double)*(unint64_t *)&v663;
    }
    else if (v672 == 2)
    {
      v673 = 0;
      LODWORD(v663) = v732[1];
      LODWORD(v666) = v732[0];
      v674 = (double)*(unint64_t *)&v663 * 4294967300.0 + (double)*(unint64_t *)&v666;
    }
    else
    {
      v678 = &v732[v672];
      LODWORD(v664) = *(v678 - 2);
      LODWORD(v663) = *(v678 - 1);
      LODWORD(v665) = *(v678 - 3);
      v674 = ((double)*(unint64_t *)&v663 * 4294967300.0 + (double)*(unint64_t *)&v664) * 4294967300.0
           + (double)*(unint64_t *)&v665;
      v673 = 32 * v672 - 96;
    }
    if ((v732[64] & 0x80000000) != 0)
      v674 = -v674;
  }
  else
  {
    v673 = 0;
    v674 = 0.0;
  }
  v679 = ldexp(v674, v673);
  v666 = 0.25;
  v663 = v667 * (v679 * 0.25);
  *(double *)v109 = v663;
  if (!v688)
  {
LABEL_1062:
    if (!a9)
      return;
LABEL_1063:
    v680 = sub_20EED840C((uint64_t)v684, v732, v727, v663, v666, v664, v665);
    v682 = ldexp(*(long double *)&v680, v681);
    v550 = 0.25;
    v551 = v682 * 0.25;
    v552 = v667 * v551;
    v553 = v722[64];
    if (v722[64] >= 0)
      v554 = v722[64];
    else
      v554 = -v722[64];
    if ((_DWORD)v554)
    {
LABEL_828:
      if (v554 == 1)
      {
        v555 = 0;
        LODWORD(v551) = v722[0];
        v556 = (double)*(unint64_t *)&v551;
      }
      else if (v554 == 2)
      {
        v555 = 0;
        LODWORD(v551) = v722[1];
        LODWORD(v550) = v722[0];
        v556 = (double)*(unint64_t *)&v551 * 4294967300.0 + (double)*(unint64_t *)&v550;
      }
      else
      {
        v557 = &v722[v554];
        LODWORD(v548) = *(v557 - 2);
        LODWORD(v551) = *(v557 - 1);
        LODWORD(v549) = *(v557 - 3);
        v556 = ((double)*(unint64_t *)&v551 * 4294967300.0 + (double)v548) * 4294967300.0 + (double)v549;
        v555 = 32 * v554 - 96;
      }
      if (v553 < 0)
        v556 = -v556;
      goto LABEL_1068;
    }
LABEL_1067:
    v555 = 0;
    v556 = 0.0;
LABEL_1068:
    *(double *)(v109 + 16) = v552 / sqrt(ldexp(v556, v555));
    return;
  }
LABEL_1024:
  if (v734[64] >= 0)
    v668 = v734[64];
  else
    v668 = -v734[64];
  if (!(_DWORD)v668)
  {
    v675 = ldexp(0.0, 0);
    v666 = 0.25;
    v663 = v667 * (v675 * 0.25);
    *(double *)(v109 + 8) = v663;
    if (!a9)
      return;
    goto LABEL_1063;
  }
  if (v668 == 1)
  {
    v669 = 0;
    LODWORD(v663) = v734[0];
    v670 = (double)*(unint64_t *)&v663;
  }
  else if (v668 == 2)
  {
    v669 = 0;
    LODWORD(v663) = v734[1];
    v670 = (double)*(unint64_t *)&v663 * 4294967300.0 + (double)(v734[0] | 0x41F0000000000000uLL);
  }
  else
  {
    v676 = &v734[v668];
    LODWORD(v664) = *(v676 - 2);
    LODWORD(v663) = *(v676 - 1);
    LODWORD(v665) = *(v676 - 3);
    v670 = ((double)*(unint64_t *)&v663 * 4294967300.0 + (double)*(unint64_t *)&v664) * 4294967300.0
         + (double)*(unint64_t *)&v665;
    v669 = 32 * v668 - 96;
  }
  if (v734[64] < 0)
    v670 = -v670;
  v677 = ldexp(v670, v669);
  v666 = 0.25;
  v663 = v667 * (v677 * 0.25);
  *(double *)(v109 + 8) = v663;
  if (a9)
    goto LABEL_1063;
}

uint64_t sub_20EED840C(uint64_t a1, _DWORD *a2, _DWORD *a3, double a4, double a5, double a6, double a7)
{
  double v10;
  double v11;
  double v12;
  double v13;
  _DWORD *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  double v79;
  _DWORD *v80;
  double v81;
  double v82;
  _DWORD v83[64];
  int v84;
  int v85[64];
  int v86;
  _DWORD v87[64];
  int v88;
  _DWORD __src[64];
  int v90;
  _DWORD __dst[64];
  int v92;
  long double v93[2];
  double v94[2];
  int v95;

  v10 = sub_20EED979C(a4, a5, a6, a7, a1, a2, a3);
  v12 = v11;
  v94[0] = v11;
  v94[1] = v13;
  v14 = a3 + 65;
  sub_20EED979C(v10, v15, v16, v17, a1, a2 + 65, a3 + 65);
  v93[0] = v18;
  v93[1] = v19;
  if (v12 >= 0.0 && v18 >= 0.0 || v12 <= 0.0 && v18 <= 0.0)
    return sub_20EED9994(v94, v93);
  v21 = a2[64];
  if (!v21)
    goto LABEL_43;
  v22 = 0;
  v23 = 0;
  if (v21 >= 0)
    v24 = v21;
  else
    v24 = -v21;
  v25 = v24 - 1 + v24;
  if (v25 >= 0x40)
    LODWORD(v25) = 64;
  v88 = v25;
  do
  {
    v27 = 0;
    v28 = 0;
    if (v22 >= v24 - 1)
      v29 = v24 - 1;
    else
      v29 = v22;
    v30 = v29 + 1;
    v31 = v22;
    do
    {
      if (v31 < v24)
      {
        v32 = a2[v31] * (unint64_t)a2[v27];
        v23 += v32;
        v28 += HIDWORD(v32);
      }
      ++v27;
      --v31;
    }
    while (v30 != v27);
    v87[v22] = v23;
    v23 = v28 + HIDWORD(v23);
    ++v22;
    v26 = v88;
  }
  while (v22 < v88);
  if (v23 && v88 != 64)
  {
    v87[v88] = v23;
    v26 = ++v88;
  }
  if (v26 && (v33 = a3[64]) != 0)
  {
    v34 = 0;
    v35 = 0;
    if (v26 >= 0)
      v36 = v26;
    else
      v36 = -v26;
    if (v33 >= 0)
      v37 = v33;
    else
      v37 = -v33;
    v38 = v36 - 1;
    v39 = v38 + v37;
    if (v38 + v37 >= 0x40)
      v39 = 64;
    v90 = v39;
    v40 = a3;
    do
    {
      v42 = 0;
      v43 = 0;
      if (v34 >= v38)
        v44 = v38;
      else
        v44 = v34;
      v45 = ~v44;
      v46 = v87;
      do
      {
        if (v34 + v42 < v37)
        {
          v47 = v40[v42] * (unint64_t)*v46;
          v35 += v47;
          v43 += HIDWORD(v47);
        }
        --v42;
        ++v46;
      }
      while (v45 != v42);
      __src[v34] = v35;
      v35 = v43 + HIDWORD(v35);
      ++v34;
      v41 = v90;
      ++v40;
    }
    while (v34 < v90);
    if (v35 && v90 != 64)
    {
      __src[v90] = v35;
      v41 = ++v90;
    }
    if (v26 > 0 != v33 > 0)
      v90 = -v41;
  }
  else
  {
LABEL_43:
    v90 = 0;
  }
  v48 = a2[129];
  if (!v48)
    goto LABEL_81;
  v49 = 0;
  v50 = 0;
  if (v48 >= 0)
    v51 = v48;
  else
    v51 = -v48;
  v52 = v51 - 1 + v51;
  if (v52 >= 0x40)
    LODWORD(v52) = 64;
  v84 = v52;
  do
  {
    v54 = 0;
    v55 = 0;
    if (v49 >= v51 - 1)
      v56 = v51 - 1;
    else
      v56 = v49;
    v57 = v56 + 1;
    v58 = v49;
    do
    {
      if (v58 < v51)
      {
        v59 = a2[v58 + 65] * (unint64_t)a2[v54 + 65];
        v50 += v59;
        v55 += HIDWORD(v59);
      }
      ++v54;
      --v58;
    }
    while (v57 != v54);
    v83[v49] = v50;
    v50 = v55 + HIDWORD(v50);
    ++v49;
    v53 = v84;
  }
  while (v49 < v84);
  if (v50 && v84 != 64)
  {
    v83[v84] = v50;
    v53 = ++v84;
  }
  if (v53 && (v60 = a3[129]) != 0)
  {
    v61 = 0;
    v62 = 0;
    if (v53 >= 0)
      v63 = v53;
    else
      v63 = -v53;
    if (v60 >= 0)
      v64 = v60;
    else
      v64 = -v60;
    v65 = v63 - 1;
    v66 = v65 + v64;
    if (v65 + v64 >= 0x40)
      v66 = 64;
    v86 = v66;
    do
    {
      v68 = 0;
      v69 = 0;
      if (v61 >= v65)
        v70 = v65;
      else
        v70 = v61;
      v71 = ~v70;
      v72 = v83;
      do
      {
        if (v61 + v68 < v64)
        {
          v73 = v14[v68] * (unint64_t)*v72;
          v62 += v73;
          v69 += HIDWORD(v73);
        }
        --v68;
        ++v72;
      }
      while (v71 != v68);
      v85[v61] = v62;
      v62 = v69 + HIDWORD(v62);
      ++v61;
      v67 = v86;
      ++v14;
    }
    while (v61 < v86);
    if (v62 && v86 != 64)
    {
      v85[v86] = v62;
      v67 = ++v86;
    }
    if (v53 > 0 != v60 > 0)
      v86 = -v67;
  }
  else
  {
LABEL_81:
    v86 = 0;
  }
  sub_20EED4C8C(__dst, __src, v85);
  if (v92 >= 0)
    v78 = v92;
  else
    v78 = -v92;
  if ((_DWORD)v78)
  {
    if (v78 == 1)
    {
      LODWORD(v74) = __dst[0];
      v79 = (double)v74;
    }
    else if (v78 == 2)
    {
      LODWORD(v74) = __dst[1];
      LODWORD(v75) = __dst[0];
      v79 = (double)v74 * 4294967300.0 + (double)v75;
    }
    else
    {
      v80 = &__dst[v78];
      LODWORD(v76) = *(v80 - 2);
      LODWORD(v74) = *(v80 - 1);
      LODWORD(v77) = *(v80 - 3);
      v79 = ((double)v74 * 4294967300.0 + (double)v76) * 4294967300.0 + (double)v77;
    }
    if (v92 < 0)
      v79 = -v79;
  }
  else
  {
    v79 = 0.0;
  }
  v81 = frexp(v79, &v95);
  v82 = COERCE_DOUBLE(sub_20EED9A6C(v94, (uint64_t)v93));
  return frexp(v81 / v82, &v95);
}

uint64_t sub_20EED8944(_DWORD *a1, unsigned int *a2, _DWORD *a3, double a4, double a5, double a6, double a7)
{
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  long double v17;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int *v44;
  unint64_t v45;
  _DWORD *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  _DWORD *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int *v100;
  unint64_t v101;
  _DWORD *v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _DWORD *v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  _DWORD *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int *v129;
  unint64_t v130;
  int v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int *v169;
  unint64_t v170;
  int v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  int v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unsigned int *v209;
  unint64_t v210;
  double v211;
  double v212;
  double v213;
  double v214;
  uint64_t v215;
  int v216;
  int v217;
  double v218;
  double v219;
  int v220;
  int v221;
  long double v222;
  _DWORD v223[64];
  int v224;
  int v225[64];
  int v226;
  _DWORD v227[64];
  int v228;
  int v229[64];
  int v230;
  _DWORD v231[64];
  int v232;
  int v233[64];
  int v234;
  _DWORD v235[64];
  int v236;
  int v237[64];
  int v238;
  _DWORD __dst[65];
  _DWORD v240[64];
  int v241;
  _QWORD __src[33];
  long double v243[2];
  _QWORD v244[2];

  v10 = COERCE_DOUBLE(sub_20EED840C((uint64_t)a1, a2, a3, a4, a5, a6, a7));
  *(double *)v244 = v10;
  v244[1] = v11;
  v16 = COERCE_DOUBLE(sub_20EED840C((uint64_t)a1, a2 + 130, a3 + 130, v12, v13, v14, v15));
  v243[0] = v16;
  v243[1] = v17;
  if (v10 >= 0.0 && v16 >= 0.0 || v10 <= 0.0 && v16 <= 0.0)
    return sub_20EED9994(v244, v243);
  v19 = a2[64];
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    if (v19 >= 0)
      v22 = v19;
    else
      v22 = -v19;
    v23 = v22 - 1 + v22;
    if (v23 >= 0x40)
      LODWORD(v23) = 64;
    v236 = v23;
    do
    {
      v25 = 0;
      v26 = 0;
      if (v20 >= v22 - 1)
        v27 = v22 - 1;
      else
        v27 = v20;
      v28 = v27 + 1;
      v29 = v20;
      do
      {
        if (v29 < v22)
        {
          v30 = a2[v29] * (unint64_t)a2[v25];
          v21 += v30;
          v26 += HIDWORD(v30);
        }
        ++v25;
        --v29;
      }
      while (v28 != v25);
      v235[v20] = v21;
      v21 = v26 + HIDWORD(v21);
      ++v20;
      v24 = v236;
    }
    while (v20 < v236);
    if (v21 && v236 != 64)
    {
      v235[v236] = v21;
      v24 = ++v236;
    }
    if (v24 && (v31 = a3[64]) != 0)
    {
      v32 = 0;
      v33 = 0;
      if (v24 >= 0)
        v34 = v24;
      else
        v34 = -v24;
      if (v31 >= 0)
        v35 = v31;
      else
        v35 = -v31;
      v36 = v34 - 1;
      v37 = v36 + v35;
      if (v36 + v35 >= 0x40)
        v37 = 64;
      v238 = v37;
      v38 = a3;
      do
      {
        v40 = 0;
        v41 = 0;
        if (v32 >= v36)
          v42 = v36;
        else
          v42 = v32;
        v43 = ~v42;
        v44 = v235;
        do
        {
          if (v32 + v40 < v35)
          {
            v45 = v38[v40] * (unint64_t)*v44;
            v33 += v45;
            v41 += HIDWORD(v45);
          }
          --v40;
          ++v44;
        }
        while (v43 != v40);
        v237[v32] = v33;
        v33 = v41 + HIDWORD(v33);
        ++v32;
        v39 = v238;
        ++v38;
      }
      while (v32 < v238);
      if (v33 && v238 != 64)
      {
        v237[v238] = v33;
        v39 = ++v238;
      }
      if (v24 > 0 != v31 > 0)
        v238 = -v39;
    }
    else
    {
      v238 = 0;
    }
  }
  else
  {
    v236 = 0;
    v238 = 0;
  }
  v46 = a2 + 65;
  v47 = a2[129];
  if (v47)
  {
    v48 = 0;
    v49 = 0;
    if (v47 >= 0)
      v50 = v47;
    else
      v50 = -v47;
    v51 = v50 - 1 + v50;
    if (v51 >= 0x40)
      LODWORD(v51) = 64;
    v232 = v51;
    do
    {
      v53 = 0;
      v54 = 0;
      if (v48 >= v50 - 1)
        v55 = v50 - 1;
      else
        v55 = v48;
      v56 = v55 + 1;
      v57 = v48;
      do
      {
        if (v57 < v50)
        {
          v58 = v46[v57] * (unint64_t)v46[v53];
          v49 += v58;
          v54 += HIDWORD(v58);
        }
        ++v53;
        --v57;
      }
      while (v56 != v53);
      v231[v48] = v49;
      v49 = v54 + HIDWORD(v49);
      ++v48;
      v52 = v232;
    }
    while (v48 < v232);
    if (v49 && v232 != 64)
    {
      v231[v232] = v49;
      v52 = ++v232;
    }
    v59 = a3 + 65;
    if (v52 && (v60 = a3[129]) != 0)
    {
      v61 = 0;
      v62 = 0;
      if (v52 >= 0)
        v63 = v52;
      else
        v63 = -v52;
      if (v60 >= 0)
        v64 = v60;
      else
        v64 = -v60;
      v65 = v63 - 1;
      v66 = v65 + v64;
      if (v65 + v64 >= 0x40)
        v66 = 64;
      v234 = v66;
      v67 = a3 + 65;
      do
      {
        v69 = 0;
        v70 = 0;
        if (v61 >= v65)
          v71 = v65;
        else
          v71 = v61;
        v72 = ~v71;
        v73 = v231;
        do
        {
          if (v61 + v69 < v64)
          {
            v74 = v67[v69] * (unint64_t)*v73;
            v62 += v74;
            v70 += HIDWORD(v74);
          }
          --v69;
          ++v73;
        }
        while (v72 != v69);
        v233[v61] = v62;
        v62 = v70 + HIDWORD(v62);
        ++v61;
        v68 = v234;
        ++v67;
      }
      while (v61 < v234);
      if (v62 && v234 != 64)
      {
        v233[v234] = v62;
        v68 = ++v234;
      }
      if (v52 > 0 != v60 > 0)
        v234 = -v68;
    }
    else
    {
      v234 = 0;
    }
  }
  else
  {
    v232 = 0;
    v59 = a3 + 65;
    v234 = 0;
  }
  sub_20EED4F68(__dst, v237, v233);
  v75 = a2[194];
  if (v75)
  {
    v76 = 0;
    v77 = 0;
    if (v75 >= 0)
      v78 = v75;
    else
      v78 = -v75;
    v79 = v78 - 1 + v78;
    if (v79 >= 0x40)
      LODWORD(v79) = 64;
    v228 = v79;
    do
    {
      v81 = 0;
      v82 = 0;
      if (v76 >= v78 - 1)
        v83 = v78 - 1;
      else
        v83 = v76;
      v84 = v83 + 1;
      v85 = v76;
      do
      {
        if (v85 < v78)
        {
          v86 = a2[v85 + 130] * (unint64_t)a2[v81 + 130];
          v77 += v86;
          v82 += HIDWORD(v86);
        }
        ++v81;
        --v85;
      }
      while (v84 != v81);
      v227[v76] = v77;
      v77 = v82 + HIDWORD(v77);
      ++v76;
      v80 = v228;
    }
    while (v76 < v228);
    if (v77 && v228 != 64)
    {
      v227[v228] = v77;
      v80 = ++v228;
    }
    if (v80 && (v87 = a3[194]) != 0)
    {
      v88 = 0;
      v89 = 0;
      if (v80 >= 0)
        v90 = v80;
      else
        v90 = -v80;
      if (v87 >= 0)
        v91 = v87;
      else
        v91 = -v87;
      v92 = v90 - 1;
      v93 = v92 + v91;
      if (v92 + v91 >= 0x40)
        v93 = 64;
      v230 = v93;
      v94 = a3 + 130;
      do
      {
        v96 = 0;
        v97 = 0;
        if (v88 >= v92)
          v98 = v92;
        else
          v98 = v88;
        v99 = ~v98;
        v100 = v227;
        do
        {
          if (v88 + v96 < v91)
          {
            v101 = v94[v96] * (unint64_t)*v100;
            v89 += v101;
            v97 += HIDWORD(v101);
          }
          --v96;
          ++v100;
        }
        while (v99 != v96);
        v229[v88] = v89;
        v89 = v97 + HIDWORD(v89);
        ++v88;
        v95 = v230;
        ++v94;
      }
      while (v88 < v230);
      if (v89 && v230 != 64)
      {
        v229[v230] = v89;
        v95 = ++v230;
      }
      if (v80 > 0 != v87 > 0)
        v230 = -v95;
    }
    else
    {
      v230 = 0;
    }
  }
  else
  {
    v228 = 0;
    v230 = 0;
  }
  sub_20EED4C8C(v240, __dst, v229);
  v102 = a2 + 195;
  v103 = a2[259];
  if (v103)
  {
    v104 = 0;
    v105 = 0;
    if (v103 >= 0)
      v106 = v103;
    else
      v106 = -v103;
    v107 = v106 - 1 + v106;
    if (v107 >= 0x40)
      LODWORD(v107) = 64;
    v224 = v107;
    do
    {
      v109 = 0;
      v110 = 0;
      if (v104 >= v106 - 1)
        v111 = v106 - 1;
      else
        v111 = v104;
      v112 = v111 + 1;
      v113 = v104;
      do
      {
        if (v113 < v106)
        {
          v114 = v102[v113] * (unint64_t)v102[v109];
          v105 += v114;
          v110 += HIDWORD(v114);
        }
        ++v109;
        --v113;
      }
      while (v112 != v109);
      v223[v104] = v105;
      v105 = v110 + HIDWORD(v105);
      ++v104;
      v108 = v224;
    }
    while (v104 < v224);
    if (v105 && v224 != 64)
    {
      v223[v224] = v105;
      v108 = ++v224;
    }
    v115 = a3 + 195;
    if (v108 && (v116 = a3[259]) != 0)
    {
      v117 = 0;
      v118 = 0;
      if (v108 >= 0)
        v119 = v108;
      else
        v119 = -v108;
      if (v116 >= 0)
        v120 = v116;
      else
        v120 = -v116;
      v121 = v119 - 1;
      v122 = v121 + v120;
      if (v121 + v120 >= 0x40)
        v122 = 64;
      v226 = v122;
      v123 = a3 + 195;
      do
      {
        v125 = 0;
        v126 = 0;
        if (v117 >= v121)
          v127 = v121;
        else
          v127 = v117;
        v128 = ~v127;
        v129 = v223;
        do
        {
          if (v117 + v125 < v120)
          {
            v130 = v123[v125] * (unint64_t)*v129;
            v118 += v130;
            v126 += HIDWORD(v130);
          }
          --v125;
          ++v129;
        }
        while (v128 != v125);
        v225[v117] = v118;
        v118 = v126 + HIDWORD(v118);
        ++v117;
        v124 = v226;
        ++v123;
      }
      while (v117 < v226);
      if (v118 && v226 != 64)
      {
        v225[v226] = v118;
        v124 = ++v226;
      }
      if (v108 > 0 != v116 > 0)
        v226 = -v124;
    }
    else
    {
      v226 = 0;
    }
  }
  else
  {
    v115 = a3 + 195;
    v226 = 0;
  }
  sub_20EED4C8C(__src, v240, v225);
  memcpy(a1, __src, 0x104uLL);
  a1[325] = 1;
  a1[389] = 1;
  v131 = a2[64];
  if (!v131)
    goto LABEL_221;
  v132 = a2[129];
  if (!v132)
    goto LABEL_221;
  v133 = 0;
  v134 = 0;
  if (v131 >= 0)
    v135 = v131;
  else
    v135 = -v131;
  if (v132 >= 0)
    v136 = v132;
  else
    v136 = -v132;
  v137 = v135 - 1;
  v138 = v135 - 1 + v136;
  if (v138 >= 0x40)
    LODWORD(v138) = 64;
  v241 = v138;
  do
  {
    v140 = 0;
    v141 = 0;
    if (v133 >= v137)
      v142 = v137;
    else
      v142 = v133;
    v143 = ~v142;
    v144 = a2;
    do
    {
      if (v133 + v140 < v136)
      {
        v145 = v46[v140] * (unint64_t)*v144;
        v134 += v145;
        v141 += HIDWORD(v145);
      }
      --v140;
      ++v144;
    }
    while (v143 != v140);
    v240[v133] = v134;
    v134 = v141 + HIDWORD(v134);
    ++v133;
    v139 = v241;
    ++v46;
  }
  while (v133 < v241);
  if (v134 && v241 != 64)
  {
    v240[v241] = v134;
    v139 = ++v241;
  }
  if (v131 > 0 != v132 > 0)
  {
    v139 = -v139;
    v241 = v139;
  }
  if (v139)
  {
    v146 = 0;
    v147 = 0;
    if (v139 >= 0)
      v148 = v139;
    else
      v148 = -v139;
    v149 = v148 - 1;
    if (v148 >= 0x40)
      LODWORD(v148) = 64;
    LODWORD(__src[32]) = v148;
    do
    {
      v151 = 0;
      v152 = 0;
      if (v146 >= v149)
        v153 = v149;
      else
        v153 = v146;
      v154 = v153 + 1;
      do
      {
        if (v146 == v151)
        {
          v155 = v240[v146];
          v147 += (2 * v155);
          v152 += v155 >> 31;
        }
        ++v151;
      }
      while (v154 != v151);
      *((_DWORD *)__src + v146) = v147;
      v147 = v152 + HIDWORD(v147);
      ++v146;
      v150 = __src[32];
    }
    while (v146 < SLODWORD(__src[32]));
    if (v147 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v147;
      v150 = ++LODWORD(__src[32]);
    }
    if (v139 <= 0)
      LODWORD(__src[32]) = -v150;
  }
  else
  {
LABEL_221:
    LODWORD(__src[32]) = 0;
  }
  memcpy(a1 + 65, __src, 0x104uLL);
  v156 = a3[64];
  if (v156 && (v157 = a3[129]) != 0)
  {
    v158 = 0;
    v159 = 0;
    if (v156 >= 0)
      v160 = v156;
    else
      v160 = -v156;
    if (v157 >= 0)
      v161 = v157;
    else
      v161 = -v157;
    v162 = v160 - 1;
    v163 = v162 + v161;
    if (v162 + v161 >= 0x40)
      v163 = 64;
    LODWORD(__src[32]) = v163;
    do
    {
      v165 = 0;
      v166 = 0;
      if (v158 >= v162)
        v167 = v162;
      else
        v167 = v158;
      v168 = ~v167;
      v169 = a3;
      do
      {
        if (v158 + v165 < v161)
        {
          v170 = v59[v165] * (unint64_t)*v169;
          v159 += v170;
          v166 += HIDWORD(v170);
        }
        --v165;
        ++v169;
      }
      while (v168 != v165);
      *((_DWORD *)__src + v158) = v159;
      v159 = v166 + HIDWORD(v159);
      ++v158;
      v164 = __src[32];
      ++v59;
    }
    while (v158 < SLODWORD(__src[32]));
    if (v159 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v159;
      v164 = ++LODWORD(__src[32]);
    }
    if (v156 > 0 != v157 > 0)
      LODWORD(__src[32]) = -v164;
  }
  else
  {
    LODWORD(__src[32]) = 0;
  }
  memcpy(a1 + 390, __src, 0x104uLL);
  v171 = a2[194];
  if (!v171)
    goto LABEL_286;
  v172 = a2[259];
  if (!v172)
    goto LABEL_286;
  v173 = 0;
  v174 = 0;
  if (v171 >= 0)
    v175 = v171;
  else
    v175 = -v171;
  if (v172 >= 0)
    v176 = v172;
  else
    v176 = -v172;
  v177 = v175 - 1;
  v178 = v175 - 1 + v176;
  if (v178 >= 0x40)
    LODWORD(v178) = 64;
  v241 = v178;
  do
  {
    v180 = 0;
    v181 = 0;
    if (v173 >= v177)
      v182 = v177;
    else
      v182 = v173;
    v183 = ~v182;
    v184 = a2 + 130;
    do
    {
      if (v173 + v180 < v176)
      {
        v185 = v102[v180] * (unint64_t)*v184;
        v174 += v185;
        v181 += HIDWORD(v185);
      }
      --v180;
      ++v184;
    }
    while (v183 != v180);
    v240[v173] = v174;
    v174 = v181 + HIDWORD(v174);
    ++v173;
    v179 = v241;
    ++v102;
  }
  while (v173 < v241);
  if (v174 && v241 != 64)
  {
    v240[v241] = v174;
    v179 = ++v241;
  }
  if (v171 > 0 != v172 > 0)
  {
    v179 = -v179;
    v241 = v179;
  }
  if (v179)
  {
    v186 = 0;
    v187 = 0;
    if (v179 >= 0)
      v188 = v179;
    else
      v188 = -v179;
    v189 = v188 - 1;
    if (v188 >= 0x40)
      LODWORD(v188) = 64;
    LODWORD(__src[32]) = v188;
    do
    {
      v191 = 0;
      v192 = 0;
      if (v186 >= v189)
        v193 = v189;
      else
        v193 = v186;
      v194 = v193 + 1;
      do
      {
        if (v186 == v191)
        {
          v195 = v240[v186];
          v187 += (2 * v195);
          v192 += v195 >> 31;
        }
        ++v191;
      }
      while (v194 != v191);
      *((_DWORD *)__src + v186) = v187;
      v187 = v192 + HIDWORD(v187);
      ++v186;
      v190 = __src[32];
    }
    while (v186 < SLODWORD(__src[32]));
    if (v187 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v187;
      v190 = ++LODWORD(__src[32]);
    }
    if (v179 >= 1)
      LODWORD(__src[32]) = -v190;
  }
  else
  {
LABEL_286:
    LODWORD(__src[32]) = 0;
  }
  memcpy(a1 + 130, __src, 0x104uLL);
  v196 = a3[194];
  if (v196 && (v197 = a3[259]) != 0)
  {
    v198 = 0;
    v199 = 0;
    if (v196 >= 0)
      v200 = v196;
    else
      v200 = -v196;
    if (v197 >= 0)
      v201 = v197;
    else
      v201 = -v197;
    v202 = v200 - 1;
    v203 = v202 + v201;
    if (v202 + v201 >= 0x40)
      v203 = 64;
    LODWORD(__src[32]) = v203;
    do
    {
      v205 = 0;
      v206 = 0;
      if (v198 >= v202)
        v207 = v202;
      else
        v207 = v198;
      v208 = ~v207;
      v209 = a3 + 130;
      do
      {
        if (v198 + v205 < v201)
        {
          v210 = v115[v205] * (unint64_t)*v209;
          v199 += v210;
          v206 += HIDWORD(v210);
        }
        --v205;
        ++v209;
      }
      while (v208 != v205);
      *((_DWORD *)__src + v198) = v199;
      v199 = v206 + HIDWORD(v199);
      ++v198;
      v204 = __src[32];
      ++v115;
    }
    while (v198 < SLODWORD(__src[32]));
    if (v199 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v199;
      v204 = ++LODWORD(__src[32]);
    }
    if (v196 > 0 != v197 > 0)
      LODWORD(__src[32]) = -v204;
  }
  else
  {
    LODWORD(__src[32]) = 0;
  }
  memcpy(a1 + 455, __src, 0x104uLL);
  *(double *)&v215 = COERCE_DOUBLE(sub_20EED9B58(a1, a1, a1 + 325, v211, v212, v213, v214));
  v217 = v216;
  v218 = *(double *)&v215;
  v219 = COERCE_DOUBLE(sub_20EED9A6C(v244, (uint64_t)v243));
  v221 = v217 - v220;
  v222 = frexp(v218 / v219, (int *)&__src[1]);
  LODWORD(__src[1]) += v221;
  return *(_QWORD *)&v222;
}

long double sub_20EED979C(double a1, double a2, double a3, double a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  int v8;
  uint64_t v9;
  double v10;
  int v11;
  double v12;
  _DWORD *v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  int v19;
  uint64_t v20;
  int v21;
  double v22;
  _DWORD *v23;
  double v24;
  long double v25;
  uint64_t v27;

  v8 = a6[64];
  if (v8 >= 0)
    v9 = v8;
  else
    v9 = -v8;
  v10 = 0.0;
  if ((_DWORD)v9)
  {
    if (v9 == 1)
    {
      v11 = 0;
      LODWORD(a1) = *a6;
      v12 = (double)*(unint64_t *)&a1;
    }
    else if (v9 == 2)
    {
      v11 = 0;
      LODWORD(a2) = *a6;
      LODWORD(a1) = a6[1];
      v12 = (double)*(unint64_t *)&a1 * 4294967300.0 + (double)*(unint64_t *)&a2;
    }
    else
    {
      v13 = &a6[v9];
      LODWORD(a3) = *(v13 - 2);
      LODWORD(a1) = *(v13 - 1);
      LODWORD(a4) = *(v13 - 3);
      v12 = ((double)*(unint64_t *)&a1 * 4294967300.0 + (double)*(unint64_t *)&a3) * 4294967300.0
          + (double)*(unint64_t *)&a4;
      v11 = 32 * v9 - 96;
    }
    if (v8 < 0)
      v12 = -v12;
  }
  else
  {
    v11 = 0;
    v12 = 0.0;
  }
  v14 = frexp(v12, (int *)&v27);
  v18 = v14;
  LODWORD(v27) = v27 + v11;
  v19 = a7[64];
  if (v19 >= 0)
    v20 = v19;
  else
    v20 = -v19;
  if ((_DWORD)v20)
  {
    if (v20 == 1)
    {
      v21 = 0;
      LODWORD(v14) = *a7;
      v22 = (double)*(unint64_t *)&v14;
    }
    else if (v20 == 2)
    {
      v21 = 0;
      LODWORD(v15) = *a7;
      LODWORD(v14) = a7[1];
      v22 = (double)*(unint64_t *)&v14 * 4294967300.0 + (double)v15;
    }
    else
    {
      v23 = &a7[v20];
      LODWORD(v16) = *(v23 - 2);
      LODWORD(v14) = *(v23 - 1);
      LODWORD(v17) = *(v23 - 3);
      v22 = ((double)*(unint64_t *)&v14 * 4294967300.0 + (double)v16) * 4294967300.0 + (double)v17;
      v21 = 32 * v20 - 96;
    }
    if (v19 >= 0)
      v10 = v22;
    else
      v10 = -v22;
  }
  else
  {
    v21 = 0;
  }
  v24 = frexp(v10, (int *)&v27);
  if ((((_DWORD)v27 + v21) & 1) != 0)
    v24 = v24 + v24;
  v25 = frexp(sqrt(v24), (int *)&v27);
  return frexp(v18 * v25, (int *)&v27);
}

uint64_t sub_20EED9994(_DWORD *a1, long double *a2)
{
  long double v2;
  int v3;
  int v4;
  double v7;
  long double v9;
  int v10;
  long double v11;
  __int128 v12;

  v2 = *(double *)a1;
  if (*(double *)a1 == 0.0)
    return *(_OWORD *)a2;
  v3 = *((_DWORD *)a2 + 2);
  v4 = a1[2];
  if (v3 > v4 + 54)
    return *(_OWORD *)a2;
  v7 = *a2;
  if (*a2 == 0.0 || v4 > v3 + 54)
    return *(_OWORD *)a1;
  if (v4 >= v3)
  {
    v11 = ldexp(v2, v4 - v3);
    *(_QWORD *)&v12 = frexp(v7 + v11, (int *)&v12 + 2);
    v10 = DWORD2(v12) + v3;
  }
  else
  {
    v9 = ldexp(*a2, v3 - v4);
    *(_QWORD *)&v12 = frexp(v2 + v9, (int *)&v12 + 2);
    v10 = DWORD2(v12) + v4;
  }
  DWORD2(v12) = v10;
  return v12;
}

uint64_t sub_20EED9A6C(_DWORD *a1, uint64_t a2)
{
  long double v2;
  int v3;
  int v4;
  long double v5;
  double v6;
  int v7;
  double v9;
  long double v11;
  __int128 v12;

  v2 = *(double *)a1;
  v3 = *(_DWORD *)(a2 + 8);
  if (*(double *)a1 == 0.0 || (v4 = a1[2], v3 > v4 + 54))
  {
    v5 = -*(double *)a2;
    goto LABEL_4;
  }
  v9 = *(double *)a2;
  if (*(double *)a2 != 0.0 && v4 <= v3 + 54)
  {
    if (v4 < v3)
    {
      v11 = ldexp(-v9, v3 - v4);
      v6 = frexp(v2 + v11, (int *)&v12 + 2);
      v7 = DWORD2(v12) + v4;
      goto LABEL_5;
    }
    v5 = ldexp(v2, v4 - v3) - v9;
LABEL_4:
    v6 = frexp(v5, (int *)&v12 + 2);
    v7 = DWORD2(v12) + v3;
LABEL_5:
    DWORD2(v12) = v7;
    return *(_QWORD *)&v6;
  }
  return *(_QWORD *)a1;
}

uint64_t sub_20EED9B58(_DWORD *a1, unsigned int *a2, _DWORD *a3, double a4, double a5, double a6, double a7)
{
  double v10;
  double v11;
  _DWORD *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  long double v18;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int *v45;
  unint64_t v46;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _DWORD *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  _DWORD *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int *v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int *v100;
  unint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int *v140;
  unint64_t v141;
  double v142;
  double v143;
  double v144;
  double v145;
  uint64_t v146;
  int v147;
  int v148;
  double v149;
  double v150;
  int v151;
  int v152;
  long double v153;
  _DWORD v154[64];
  int v155;
  int v156[64];
  int v157;
  _DWORD v158[64];
  int v159;
  int v160[64];
  int v161;
  _DWORD v162[64];
  int v163;
  int v164[64];
  int v165;
  _DWORD __dst[64];
  int v167;
  int __src[66];
  long double v169[2];
  double v170[2];

  v10 = COERCE_DOUBLE(sub_20EED840C((uint64_t)a1, a2, a3, a4, a5, a6, a7));
  v170[0] = v10;
  v170[1] = v11;
  v12 = a3 + 130;
  sub_20EED979C(v13, v14, v15, v16, (uint64_t)a1, a2 + 130, a3 + 130);
  v169[0] = v17;
  v169[1] = v18;
  if (v10 >= 0.0 && v17 >= 0.0 || v10 <= 0.0 && v17 <= 0.0)
    return sub_20EED9994(v170, v169);
  v20 = a2[64];
  if (v20)
  {
    v21 = 0;
    v22 = 0;
    if (v20 >= 0)
      v23 = v20;
    else
      v23 = -v20;
    v24 = v23 - 1 + v23;
    if (v24 >= 0x40)
      LODWORD(v24) = 64;
    v163 = v24;
    do
    {
      v26 = 0;
      v27 = 0;
      if (v21 >= v23 - 1)
        v28 = v23 - 1;
      else
        v28 = v21;
      v29 = v28 + 1;
      v30 = v21;
      do
      {
        if (v30 < v23)
        {
          v31 = a2[v30] * (unint64_t)a2[v26];
          v22 += v31;
          v27 += HIDWORD(v31);
        }
        ++v26;
        --v30;
      }
      while (v29 != v26);
      v162[v21] = v22;
      v22 = v27 + HIDWORD(v22);
      ++v21;
      v25 = v163;
    }
    while (v21 < v163);
    if (v22 && v163 != 64)
    {
      v162[v163] = v22;
      v25 = ++v163;
    }
    if (v25 && (v32 = a3[64]) != 0)
    {
      v33 = 0;
      v34 = 0;
      if (v25 >= 0)
        v35 = v25;
      else
        v35 = -v25;
      if (v32 >= 0)
        v36 = v32;
      else
        v36 = -v32;
      v37 = v35 - 1;
      v38 = v37 + v36;
      if (v37 + v36 >= 0x40)
        v38 = 64;
      v165 = v38;
      v39 = a3;
      do
      {
        v41 = 0;
        v42 = 0;
        if (v33 >= v37)
          v43 = v37;
        else
          v43 = v33;
        v44 = ~v43;
        v45 = v162;
        do
        {
          if (v33 + v41 < v36)
          {
            v46 = v39[v41] * (unint64_t)*v45;
            v34 += v46;
            v42 += HIDWORD(v46);
          }
          --v41;
          ++v45;
        }
        while (v44 != v41);
        v164[v33] = v34;
        v34 = v42 + HIDWORD(v34);
        ++v33;
        v40 = v165;
        ++v39;
      }
      while (v33 < v165);
      if (v34 && v165 != 64)
      {
        v164[v165] = v34;
        v40 = ++v165;
      }
      if (v25 > 0 != v32 > 0)
        v165 = -v40;
    }
    else
    {
      v165 = 0;
    }
  }
  else
  {
    v163 = 0;
    v165 = 0;
  }
  v47 = a2 + 65;
  v48 = a2[129];
  if (v48)
  {
    v49 = 0;
    v50 = 0;
    if (v48 >= 0)
      v51 = v48;
    else
      v51 = -v48;
    v52 = v51 - 1 + v51;
    if (v52 >= 0x40)
      LODWORD(v52) = 64;
    v159 = v52;
    do
    {
      v54 = 0;
      v55 = 0;
      if (v49 >= v51 - 1)
        v56 = v51 - 1;
      else
        v56 = v49;
      v57 = v56 + 1;
      v58 = v49;
      do
      {
        if (v58 < v51)
        {
          v59 = v47[v58] * (unint64_t)v47[v54];
          v50 += v59;
          v55 += HIDWORD(v59);
        }
        ++v54;
        --v58;
      }
      while (v57 != v54);
      v158[v49] = v50;
      v50 = v55 + HIDWORD(v50);
      ++v49;
      v53 = v159;
    }
    while (v49 < v159);
    if (v50 && v159 != 64)
    {
      v158[v159] = v50;
      v53 = ++v159;
    }
    v60 = a3 + 65;
    if (v53 && (v61 = a3[129]) != 0)
    {
      v62 = 0;
      v63 = 0;
      if (v53 >= 0)
        v64 = v53;
      else
        v64 = -v53;
      if (v61 >= 0)
        v65 = v61;
      else
        v65 = -v61;
      v66 = v64 - 1;
      v67 = v66 + v65;
      if (v66 + v65 >= 0x40)
        v67 = 64;
      v161 = v67;
      v68 = a3 + 65;
      do
      {
        v70 = 0;
        v71 = 0;
        if (v62 >= v66)
          v72 = v66;
        else
          v72 = v62;
        v73 = ~v72;
        v74 = v158;
        do
        {
          if (v62 + v70 < v65)
          {
            v75 = v68[v70] * (unint64_t)*v74;
            v63 += v75;
            v71 += HIDWORD(v75);
          }
          --v70;
          ++v74;
        }
        while (v73 != v70);
        v160[v62] = v63;
        v63 = v71 + HIDWORD(v63);
        ++v62;
        v69 = v161;
        ++v68;
      }
      while (v62 < v161);
      if (v63 && v161 != 64)
      {
        v160[v161] = v63;
        v69 = ++v161;
      }
      if (v53 > 0 != v61 > 0)
        v161 = -v69;
    }
    else
    {
      v161 = 0;
    }
  }
  else
  {
    v159 = 0;
    v60 = a3 + 65;
    v161 = 0;
  }
  sub_20EED4F68(__dst, v164, v160);
  v76 = a2[194];
  if (!v76)
    goto LABEL_131;
  v77 = 0;
  v78 = 0;
  if (v76 >= 0)
    v79 = v76;
  else
    v79 = -v76;
  v80 = v79 - 1 + v79;
  if (v80 >= 0x40)
    LODWORD(v80) = 64;
  v155 = v80;
  do
  {
    v82 = 0;
    v83 = 0;
    if (v77 >= v79 - 1)
      v84 = v79 - 1;
    else
      v84 = v77;
    v85 = v84 + 1;
    v86 = v77;
    do
    {
      if (v86 < v79)
      {
        v87 = a2[v86 + 130] * (unint64_t)a2[v82 + 130];
        v78 += v87;
        v83 += HIDWORD(v87);
      }
      ++v82;
      --v86;
    }
    while (v85 != v82);
    v154[v77] = v78;
    v78 = v83 + HIDWORD(v78);
    ++v77;
    v81 = v155;
  }
  while (v77 < v155);
  if (v78 && v155 != 64)
  {
    v154[v155] = v78;
    v81 = ++v155;
  }
  if (v81 && (v88 = a3[194]) != 0)
  {
    v89 = 0;
    v90 = 0;
    if (v81 >= 0)
      v91 = v81;
    else
      v91 = -v81;
    if (v88 >= 0)
      v92 = v88;
    else
      v92 = -v88;
    v93 = v91 - 1;
    v94 = v93 + v92;
    if (v93 + v92 >= 0x40)
      v94 = 64;
    v157 = v94;
    do
    {
      v96 = 0;
      v97 = 0;
      if (v89 >= v93)
        v98 = v93;
      else
        v98 = v89;
      v99 = ~v98;
      v100 = v154;
      do
      {
        if (v89 + v96 < v92)
        {
          v101 = v12[v96] * (unint64_t)*v100;
          v90 += v101;
          v97 += HIDWORD(v101);
        }
        --v96;
        ++v100;
      }
      while (v99 != v96);
      v156[v89] = v90;
      v90 = v97 + HIDWORD(v90);
      ++v89;
      v95 = v157;
      ++v12;
    }
    while (v89 < v157);
    if (v90 && v157 != 64)
    {
      v156[v157] = v90;
      v95 = ++v157;
    }
    if (v81 > 0 != v88 > 0)
      v157 = -v95;
  }
  else
  {
LABEL_131:
    v157 = 0;
  }
  sub_20EED4C8C(__src, __dst, v156);
  memcpy(a1 + 195, __src, 0x104uLL);
  a1[520] = 1;
  a1[584] = 1;
  v102 = a2[64];
  if (!v102)
    goto LABEL_171;
  v103 = a2[129];
  if (!v103)
    goto LABEL_171;
  v104 = 0;
  v105 = 0;
  if (v102 >= 0)
    v106 = v102;
  else
    v106 = -v102;
  if (v103 >= 0)
    v107 = v103;
  else
    v107 = -v103;
  v108 = v106 - 1;
  v109 = v106 - 1 + v107;
  if (v109 >= 0x40)
    LODWORD(v109) = 64;
  v167 = v109;
  do
  {
    v111 = 0;
    v112 = 0;
    if (v104 >= v108)
      v113 = v108;
    else
      v113 = v104;
    v114 = ~v113;
    v115 = a2;
    do
    {
      if (v104 + v111 < v107)
      {
        v116 = v47[v111] * (unint64_t)*v115;
        v105 += v116;
        v112 += HIDWORD(v116);
      }
      --v111;
      ++v115;
    }
    while (v114 != v111);
    __dst[v104] = v105;
    v105 = v112 + HIDWORD(v105);
    ++v104;
    v110 = v167;
    ++v47;
  }
  while (v104 < v167);
  if (v105 && v167 != 64)
  {
    __dst[v167] = v105;
    v110 = ++v167;
  }
  if (v102 > 0 != v103 > 0)
  {
    v110 = -v110;
    v167 = v110;
  }
  if (v110)
  {
    v117 = 0;
    v118 = 0;
    if (v110 >= 0)
      v119 = v110;
    else
      v119 = -v110;
    v120 = v119 - 1;
    if (v119 >= 0x40)
      LODWORD(v119) = 64;
    __src[64] = v119;
    do
    {
      v122 = 0;
      v123 = 0;
      if (v117 >= v120)
        v124 = v120;
      else
        v124 = v117;
      v125 = v124 + 1;
      do
      {
        if (v117 == v122)
        {
          v126 = __dst[v117];
          v118 += (2 * v126);
          v123 += v126 >> 31;
        }
        ++v122;
      }
      while (v125 != v122);
      __src[v117] = v118;
      v118 = v123 + HIDWORD(v118);
      ++v117;
      v121 = __src[64];
    }
    while (v117 < __src[64]);
    if (v118 && __src[64] != 64)
    {
      __src[__src[64]] = v118;
      v121 = ++__src[64];
    }
    if (v110 <= 0)
      __src[64] = -v121;
  }
  else
  {
LABEL_171:
    __src[64] = 0;
  }
  memcpy(a1 + 260, __src, 0x104uLL);
  v127 = a3[64];
  if (v127 && (v128 = a3[129]) != 0)
  {
    v129 = 0;
    v130 = 0;
    if (v127 >= 0)
      v131 = v127;
    else
      v131 = -v127;
    if (v128 >= 0)
      v132 = v128;
    else
      v132 = -v128;
    v133 = v131 - 1;
    v134 = v133 + v132;
    if (v133 + v132 >= 0x40)
      v134 = 64;
    __src[64] = v134;
    do
    {
      v136 = 0;
      v137 = 0;
      if (v129 >= v133)
        v138 = v133;
      else
        v138 = v129;
      v139 = ~v138;
      v140 = a3;
      do
      {
        if (v129 + v136 < v132)
        {
          v141 = v60[v136] * (unint64_t)*v140;
          v130 += v141;
          v137 += HIDWORD(v141);
        }
        --v136;
        ++v140;
      }
      while (v139 != v136);
      __src[v129] = v130;
      v130 = v137 + HIDWORD(v130);
      ++v129;
      v135 = __src[64];
      ++v60;
    }
    while (v129 < __src[64]);
    if (v130 && __src[64] != 64)
    {
      __src[__src[64]] = v130;
      v135 = ++__src[64];
    }
    if (v127 > 0 != v128 > 0)
      __src[64] = -v135;
  }
  else
  {
    __src[64] = 0;
  }
  memcpy(a1 + 585, __src, 0x104uLL);
  *(double *)&v146 = COERCE_DOUBLE(sub_20EED840C((uint64_t)a1, a1 + 195, a1 + 520, v142, v143, v144, v145));
  v148 = v147;
  v149 = *(double *)&v146;
  v150 = COERCE_DOUBLE(sub_20EED9A6C(v170, (uint64_t)v169));
  v152 = v148 - v151;
  v153 = frexp(v149 / v150, &__src[2]);
  __src[2] += v152;
  return *(_QWORD *)&v153;
}

void sub_20EEDA4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  _DWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int *v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  unsigned int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  unsigned int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int *v121;
  unint64_t v122;
  int v123;
  unint64_t v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unsigned int *v137;
  unint64_t v138;
  _DWORD *v139;
  int v140;
  unint64_t v141;
  unsigned int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _DWORD *v166;
  int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unsigned int v174;
  _DWORD *v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unsigned int *v181;
  unint64_t v182;
  int v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  _BYTE *v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unsigned int *v197;
  unint64_t v198;
  int v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unsigned int *v212;
  unint64_t v213;
  int v214;
  int v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  _BYTE *v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unsigned int *v228;
  unint64_t v229;
  int v230;
  unint64_t v231;
  unsigned int v232;
  int v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unsigned int *v244;
  unint64_t v245;
  int v246;
  unint64_t v247;
  unsigned int v248;
  int v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unsigned int *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  double v267;
  int v268;
  double v269;
  int v270;
  int v271;
  int v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  int v278;
  double v279;
  int v280;
  int v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unsigned int v287;
  int *v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unsigned int *v294;
  unint64_t v295;
  int v296;
  int v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  int v303;
  int *v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unsigned int *v310;
  unint64_t v311;
  int v312;
  int v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unsigned int v319;
  int *v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unsigned int *v326;
  unint64_t v327;
  int v328;
  int v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  int v335;
  int *v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unsigned int *v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  int v384;
  int v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  int v391;
  _DWORD *v392;
  int v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unsigned int *v398;
  unint64_t v399;
  int v400;
  int v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  unint64_t v406;
  int v407;
  _DWORD *v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unsigned int *v414;
  unint64_t v415;
  int v416;
  int v417;
  unint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  int v423;
  int *v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  unsigned int *v430;
  unint64_t v431;
  int v432;
  int v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  int v439;
  _DWORD *v440;
  int v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  unint64_t v445;
  unsigned int *v446;
  unint64_t v447;
  int v448;
  int v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  int v455;
  int *v456;
  int v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unsigned int *v462;
  unint64_t v463;
  int v464;
  int v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  int v471;
  _DWORD *v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unsigned int *v478;
  unint64_t v479;
  int v480;
  int v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  int *v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  unint64_t v493;
  int *v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  unint64_t v498;
  unint64_t v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  uint64_t v506;
  int v507;
  double v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  double v512;
  uint64_t v513;
  int v514;
  double v515;
  unsigned int *v516;
  double v517;
  int v518;
  int v519;
  unint64_t v520;
  unint64_t v521;
  uint64_t v522;
  unint64_t v523;
  unint64_t v524;
  unsigned int v525;
  _DWORD *v526;
  unsigned int v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  unint64_t v531;
  int *v532;
  unint64_t v533;
  double v534;
  int v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t v539;
  unint64_t v540;
  int v541;
  int v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unsigned int *v547;
  unint64_t v548;
  double v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  double v553;
  int v554;
  uint64_t v555;
  int v556;
  double v557;
  int *v558;
  double v559;
  int *v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unint64_t v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  unint64_t v580;
  int v581;
  int *v582;
  double v583;
  unint64_t v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t v587;
  double v588;
  int v589;
  double v590;
  _DWORD *v591;
  long double v592;
  unint64_t v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  unint64_t v601;
  unint64_t v602;
  int v603;
  int v604;
  unint64_t v605;
  unint64_t v606;
  uint64_t v607;
  unint64_t v608;
  unint64_t v609;
  int v610;
  unsigned int *v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  unint64_t v616;
  unsigned int *v617;
  unint64_t v618;
  unint64_t v619;
  unint64_t v620;
  unint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  unint64_t v625;
  unint64_t v626;
  unint64_t v627;
  unint64_t v628;
  double v629;
  double v630;
  double v631;
  double v632;
  uint64_t v633;
  int v634;
  int v635;
  unint64_t v636;
  unint64_t v637;
  unint64_t v638;
  uint64_t v639;
  unint64_t v640;
  int v641;
  int v642;
  uint64_t v643;
  uint64_t v644;
  unint64_t v645;
  unint64_t v646;
  unsigned int *v647;
  unint64_t v648;
  unint64_t v649;
  unint64_t v650;
  unint64_t v651;
  unint64_t v652;
  uint64_t v653;
  uint64_t v654;
  unint64_t v655;
  unint64_t v656;
  unint64_t v657;
  unint64_t v658;
  int v659;
  int v660;
  unint64_t v661;
  unint64_t v662;
  uint64_t v663;
  unint64_t v664;
  unint64_t v665;
  int v666;
  unsigned int *v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  unint64_t v672;
  unsigned int *v673;
  unint64_t v674;
  unint64_t v675;
  unint64_t v676;
  unint64_t v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  double v685;
  double v686;
  double v687;
  double v688;
  uint64_t v689;
  int v690;
  int v691;
  unint64_t v692;
  unint64_t v693;
  unint64_t v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  unint64_t v699;
  unint64_t v700;
  unint64_t v701;
  int v702;
  unint64_t v703;
  unint64_t v704;
  uint64_t v705;
  unint64_t v706;
  unint64_t v707;
  int v708;
  int *v709;
  int v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  unint64_t v714;
  unsigned int *v715;
  unint64_t v716;
  int v717;
  int v718;
  unint64_t v719;
  unint64_t v720;
  uint64_t v721;
  unint64_t v722;
  unint64_t v723;
  int v724;
  _DWORD *v725;
  int v726;
  uint64_t v727;
  uint64_t v728;
  unint64_t v729;
  unint64_t v730;
  unsigned int *v731;
  unint64_t v732;
  int v733;
  unint64_t v734;
  unint64_t v735;
  uint64_t v736;
  unint64_t v737;
  unint64_t v738;
  int v739;
  _DWORD *v740;
  int v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  unint64_t v745;
  int *v746;
  unint64_t v747;
  int v748;
  int v749;
  unint64_t v750;
  unint64_t v751;
  uint64_t v752;
  unint64_t v753;
  unint64_t v754;
  int v755;
  _DWORD *v756;
  int v757;
  uint64_t v758;
  uint64_t v759;
  unint64_t v760;
  unint64_t v761;
  unsigned int *v762;
  unint64_t v763;
  unint64_t v764;
  unint64_t v765;
  unint64_t v766;
  unint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  unint64_t v771;
  unint64_t v772;
  unint64_t v773;
  unint64_t v774;
  unint64_t v775;
  unint64_t v776;
  unint64_t v777;
  uint64_t v778;
  uint64_t v779;
  unint64_t v780;
  unint64_t v781;
  unint64_t v782;
  unint64_t v783;
  int v784;
  unint64_t v785;
  unint64_t v786;
  unint64_t v787;
  unint64_t v788;
  uint64_t v789;
  uint64_t v790;
  unint64_t v791;
  unint64_t v792;
  unint64_t v793;
  unint64_t v794;
  int v795;
  unint64_t v796;
  unint64_t v797;
  uint64_t v798;
  unint64_t v799;
  unint64_t v800;
  int v801;
  int *v802;
  int v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  unint64_t v807;
  unsigned int *v808;
  unint64_t v809;
  int v810;
  int v811;
  unint64_t v812;
  unint64_t v813;
  uint64_t v814;
  unint64_t v815;
  unint64_t v816;
  int v817;
  unsigned int *v818;
  int v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  unint64_t v823;
  unsigned int *v824;
  unint64_t v825;
  int v826;
  unint64_t v827;
  unint64_t v828;
  uint64_t v829;
  unint64_t v830;
  unint64_t v831;
  int v832;
  unsigned int *v833;
  int v834;
  uint64_t v835;
  uint64_t v836;
  unint64_t v837;
  unint64_t v838;
  int *v839;
  unint64_t v840;
  int v841;
  int v842;
  unint64_t v843;
  unint64_t v844;
  uint64_t v845;
  unint64_t v846;
  unint64_t v847;
  int v848;
  _DWORD *v849;
  int v850;
  uint64_t v851;
  uint64_t v852;
  unint64_t v853;
  unint64_t v854;
  unsigned int *v855;
  unint64_t v856;
  int v857;
  int v858;
  unint64_t v859;
  unint64_t v860;
  uint64_t v861;
  unint64_t v862;
  unint64_t v863;
  unsigned int v864;
  int *v865;
  unsigned int v866;
  uint64_t v867;
  uint64_t v868;
  unint64_t v869;
  unint64_t v870;
  unsigned int *v871;
  unint64_t v872;
  uint64_t v873;
  int v874;
  unint64_t v875;
  unint64_t v876;
  unint64_t v877;
  unint64_t v878;
  uint64_t v879;
  uint64_t v880;
  unint64_t v881;
  unint64_t v882;
  unint64_t v883;
  unint64_t v884;
  unint64_t v885;
  unint64_t v886;
  unint64_t v887;
  unint64_t v888;
  uint64_t v889;
  uint64_t v890;
  unint64_t v891;
  unint64_t v892;
  unint64_t v893;
  unint64_t v894;
  int v895;
  int v896;
  unint64_t v897;
  unint64_t v898;
  uint64_t v899;
  unint64_t v900;
  unint64_t v901;
  int v902;
  int *v903;
  int v904;
  uint64_t v905;
  uint64_t v906;
  unint64_t v907;
  unint64_t v908;
  unsigned int *v909;
  unint64_t v910;
  int v911;
  unint64_t v912;
  unint64_t v913;
  uint64_t v914;
  unint64_t v915;
  unint64_t v916;
  int v917;
  int v918;
  uint64_t v919;
  uint64_t v920;
  unint64_t v921;
  unint64_t v922;
  unsigned int *v923;
  unint64_t v924;
  int v925;
  int v926;
  unint64_t v927;
  unint64_t v928;
  uint64_t v929;
  unint64_t v930;
  unint64_t v931;
  int v932;
  int v933;
  uint64_t v934;
  uint64_t v935;
  unint64_t v936;
  unint64_t v937;
  int *v938;
  unint64_t v939;
  int v940;
  int v941;
  unint64_t v942;
  unint64_t v943;
  uint64_t v944;
  unint64_t v945;
  unint64_t v946;
  int v947;
  _DWORD *v948;
  int v949;
  uint64_t v950;
  uint64_t v951;
  unint64_t v952;
  unint64_t v953;
  int *v954;
  unint64_t v955;
  unint64_t v956;
  unint64_t v957;
  unint64_t v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  unint64_t v962;
  unint64_t v963;
  unint64_t v964;
  unint64_t v965;
  unint64_t v966;
  unint64_t v967;
  unint64_t v968;
  unint64_t v969;
  uint64_t v970;
  uint64_t v971;
  unint64_t v972;
  unint64_t v973;
  unint64_t v974;
  unint64_t v975;
  int v976;
  int v977;
  unint64_t v978;
  unint64_t v979;
  uint64_t v980;
  unint64_t v981;
  unint64_t v982;
  int v983;
  int *v984;
  int v985;
  uint64_t v986;
  uint64_t v987;
  unint64_t v988;
  unint64_t v989;
  unsigned int *v990;
  unint64_t v991;
  int v992;
  unint64_t v993;
  unint64_t v994;
  uint64_t v995;
  unint64_t v996;
  unint64_t v997;
  int v998;
  unsigned int *v999;
  int v1000;
  uint64_t v1001;
  uint64_t v1002;
  unint64_t v1003;
  unint64_t v1004;
  unsigned int *v1005;
  unint64_t v1006;
  int v1007;
  int v1008;
  unint64_t v1009;
  unint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  unint64_t v1013;
  int v1014;
  unsigned int *v1015;
  int v1016;
  uint64_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  unint64_t v1020;
  int *v1021;
  unint64_t v1022;
  int v1023;
  int v1024;
  unint64_t v1025;
  unint64_t v1026;
  uint64_t v1027;
  unint64_t v1028;
  unint64_t v1029;
  int v1030;
  _DWORD *v1031;
  int v1032;
  uint64_t v1033;
  uint64_t v1034;
  unint64_t v1035;
  unint64_t v1036;
  int *v1037;
  unint64_t v1038;
  int v1039;
  int v1040;
  unint64_t v1041;
  unint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  unint64_t v1045;
  unsigned int v1046;
  int *v1047;
  unsigned int v1048;
  uint64_t v1049;
  uint64_t v1050;
  unint64_t v1051;
  unint64_t v1052;
  int *v1053;
  unint64_t v1054;
  double v1055;
  double v1056;
  double v1057;
  double v1058;
  uint64_t v1059;
  int v1060;
  double v1061;
  uint64_t v1062;
  int v1063;
  unint64_t v1064;
  unint64_t v1065;
  unint64_t v1066;
  unint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  unint64_t v1070;
  unint64_t v1071;
  unint64_t v1072;
  unint64_t v1073;
  unint64_t v1074;
  unint64_t v1075;
  unint64_t v1076;
  unint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  unint64_t v1080;
  unint64_t v1081;
  unint64_t v1082;
  unint64_t v1083;
  int v1084;
  int v1085;
  unint64_t v1086;
  unint64_t v1087;
  uint64_t v1088;
  unint64_t v1089;
  unint64_t v1090;
  unint64_t v1091;
  int *v1092;
  int v1093;
  uint64_t v1094;
  uint64_t v1095;
  unint64_t v1096;
  unint64_t v1097;
  unsigned int *v1098;
  unint64_t v1099;
  unint64_t v1100;
  unint64_t v1101;
  unint64_t v1102;
  uint64_t v1103;
  unint64_t v1104;
  unsigned int v1105;
  unsigned int v1106;
  uint64_t v1107;
  unint64_t v1108;
  unint64_t v1109;
  int *v1110;
  uint64_t v1111;
  int v1112;
  int v1113[64];
  int v1114;
  int v1115[64];
  int v1116;
  _DWORD v1117[64];
  int v1118;
  int v1119[64];
  int v1120;
  unsigned int v1121[64];
  int v1122;
  int v1123[65];
  unsigned int v1124[64];
  int v1125;
  int __dst[65];
  unsigned int v1127[65];
  int v1128[65];
  int v1129[65];
  _DWORD __src[65];
  _DWORD v1131[64];
  int v1132;
  int v1133[64];
  int v1134;
  int v1135;
  int v1136;
  int v1137;
  int v1138[65];
  _DWORD v1139[65];
  _BYTE v1140[260];
  _BYTE v1141[260];
  unsigned int v1142[65];
  _BYTE v1143[260];
  _BYTE v1144[260];
  _DWORD v1145[65];
  _BYTE v1146[260];
  _DWORD v1147[65];
  unsigned int v1148[64];
  int v1149;
  _DWORD v1150[64];
  int v1151;
  unsigned int v1152[64];
  int v1153;
  _DWORD v1154[64];
  int v1155;
  uint64_t v1156;

  v9 = MEMORY[0x24BDAC7A8]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = v11;
  v21 = v10;
  v23 = v22;
  v24 = (_DWORD *)v9;
  v1156 = *MEMORY[0x24BDAC8D0];
  v25 = *v10;
  v26 = v10[2];
  v27 = v25 <= v26;
  v28 = v25 - v26;
  if (v27)
  {
    if ((v28 & 0x8000000000000000) == 0)
    {
      v29 = 0;
      v31 = 1;
      v1153 = 0;
      v45 = v10[1];
      v46 = v10[3];
      v34 = __OFSUB__(v45, v46);
      v35 = v45 - v46;
      if (!((v35 < 0) ^ v34 | (v35 == 0)))
        goto LABEL_4;
      goto LABEL_11;
    }
    v30 = -v28;
    v29 = -1;
  }
  else
  {
    v29 = 1;
    LODWORD(v30) = v28;
  }
  v31 = 0;
  v1152[0] = v30;
  v1152[1] = 0;
  v1153 = v29;
  v32 = v10[1];
  v33 = v10[3];
  v34 = __OFSUB__(v32, v33);
  v35 = v32 - v33;
  if (!((v35 < 0) ^ v34 | (v35 == 0)))
  {
LABEL_4:
    LODWORD(v36) = 1;
    v37 = v35;
    goto LABEL_5;
  }
LABEL_11:
  if ((v35 & 0x8000000000000000) == 0)
  {
    v37 = 0;
    LODWORD(v36) = 0;
    v38 = 1;
    v1149 = 0;
    v47 = v11[2];
    v48 = *v11;
    v34 = __OFSUB__(v47, v48);
    v41 = v47 - v48;
    if (!((v41 < 0) ^ v34 | (v41 == 0)))
      goto LABEL_6;
    goto LABEL_14;
  }
  v37 = -v35;
  LODWORD(v36) = -1;
LABEL_5:
  v38 = 0;
  v1148[0] = v37;
  v1148[1] = 0;
  v1149 = v36;
  v39 = v11[2];
  v40 = *v11;
  v34 = __OFSUB__(v39, v40);
  v41 = v39 - v40;
  if (!((v41 < 0) ^ v34 | (v41 == 0)))
  {
LABEL_6:
    LODWORD(v42) = 1;
    LODWORD(v43) = v41;
LABEL_7:
    v44 = 0;
    v1154[0] = v43;
    v1154[1] = 0;
    goto LABEL_16;
  }
LABEL_14:
  if (v41 < 0)
  {
    v43 = -v41;
    LODWORD(v42) = -1;
    goto LABEL_7;
  }
  LODWORD(v42) = 0;
  v44 = 1;
LABEL_16:
  v1155 = v42;
  v49 = v11[3];
  v50 = v11[1];
  v27 = v49 <= v50;
  v51 = v49 - v50;
  if (v27)
  {
    if ((v51 & 0x8000000000000000) == 0)
    {
      v52 = 0;
      v54 = 1;
      v55 = v1154;
      v1151 = 0;
      if ((v38 | v44) == 1)
        goto LABEL_19;
      goto LABEL_22;
    }
    v53 = -v51;
    v52 = -1;
  }
  else
  {
    v52 = 1;
    LODWORD(v53) = v51;
  }
  v54 = 0;
  v1150[0] = v53;
  v1150[1] = 0;
  v55 = v1154;
  v1151 = v52;
  if ((v38 | v44) == 1)
  {
LABEL_19:
    v1142[64] = 0;
    goto LABEL_44;
  }
LABEL_22:
  v56 = 0;
  v57 = 0;
  if ((int)v42 >= 0)
    v42 = v42;
  else
    v42 = -(int)v42;
  if ((v36 & 0x80000000) == 0)
    v36 = v36;
  else
    v36 = -(int)v36;
  v58 = v42 - 1;
  v59 = v58 + v36;
  if (v58 + v36 >= 0x40)
    v59 = 64;
  v1142[64] = v59;
  do
  {
    v61 = 0;
    v62 = 0;
    if (v56 >= v58)
      v63 = v58;
    else
      v63 = v56;
    v64 = ~v63;
    v65 = v1154;
    do
    {
      if (v56 + v61 < v36)
      {
        v66 = v37 * *v65;
        v57 += v66;
        v62 += HIDWORD(v66);
      }
      --v61;
      ++v65;
    }
    while (v64 != v61);
    v1142[v56] = v57;
    v57 = v62 + HIDWORD(v57);
    ++v56;
    v60 = v1142[64];
  }
  while (v56 < (int)v1142[64]);
  if (v57 && v1142[64] != 64)
  {
    v1142[v1142[64]] = v57;
    v60 = ++v1142[64];
  }
  if (v35 > 0 != v41 > 0)
    v1142[64] = -v60;
LABEL_44:
  if ((v31 | v54) == 1)
  {
    v1138[64] = 0;
  }
  else
  {
    v67 = 0;
    v68 = 0;
    if (v29 >= 0)
      v69 = v29;
    else
      v69 = -v29;
    if (v52 >= 0)
      v70 = v52;
    else
      v70 = -v52;
    v71 = v69 - 1;
    v72 = v71 + v70;
    if (v71 + v70 >= 0x40)
      v72 = 64;
    v1138[64] = v72;
    v73 = v1150[0];
    do
    {
      v75 = 0;
      v76 = 0;
      if (v67 >= v71)
        v77 = v71;
      else
        v77 = v67;
      v78 = ~v77;
      v79 = v1152;
      do
      {
        if (v67 + v75 < v70)
        {
          v80 = v73 * (unint64_t)*v79;
          v68 += v80;
          v76 += HIDWORD(v80);
        }
        --v75;
        ++v79;
      }
      while (v78 != v75);
      v1138[v67] = v68;
      v68 = v76 + HIDWORD(v68);
      ++v67;
      v74 = v1138[64];
    }
    while (v67 < v1138[64]);
    if (v68 && v1138[64] != 64)
    {
      v1138[v1138[64]] = v68;
      v74 = ++v1138[64];
    }
    if (v28 > 0 != v51 > 0)
      v1138[64] = -v74;
  }
  sub_20EED4C8C(&v1135, v1142, v1138);
  if (v1137)
  {
    v81 = *v21;
    if (*v21 <= 0)
    {
      if (v81 < 0)
      {
        v83 = -v81;
        LODWORD(v82) = -1;
        v84 = v1149;
        if (v1149)
          goto LABEL_71;
      }
    }
    else
    {
      LODWORD(v82) = 1;
      v83 = *v21;
      v84 = v1149;
      if (v1149)
      {
LABEL_71:
        v85 = 0;
        v86 = 0;
        if (v84 >= 0)
          v87 = v84;
        else
          v87 = -v84;
        if ((v82 & 0x80000000) == 0)
          v82 = v82;
        else
          v82 = -(int)v82;
        v88 = v87 - 1;
        v89 = v88 + v82;
        if (v88 + v82 >= 0x40)
          v89 = 64;
        v1138[64] = v89;
        do
        {
          v91 = 0;
          v92 = 0;
          if (v85 >= v88)
            v93 = v88;
          else
            v93 = v85;
          v94 = ~v93;
          v95 = v1148;
          do
          {
            if (v85 + v91 < v82)
            {
              v96 = *v95 * (unint64_t)v83;
              v86 += v96;
              v92 += HIDWORD(v96);
            }
            --v91;
            ++v95;
          }
          while (v94 != v91);
          v1138[v85] = v86;
          v86 = v92 + HIDWORD(v86);
          ++v85;
          v90 = v1138[64];
        }
        while (v85 < v1138[64]);
        if (v86 && v1138[64] != 64)
        {
          v1138[v1138[64]] = v86;
          v90 = ++v1138[64];
        }
        if (v81 > 0 != v84 > 0)
          v1138[64] = -v90;
        v107 = v21[1];
        if (v107 > 0)
        {
LABEL_109:
          LODWORD(v108) = 1;
          v109 = v107;
          v110 = v1153;
          if (v1153)
            goto LABEL_110;
          goto LABEL_135;
        }
LABEL_134:
        if (v107 < 0)
        {
          v109 = -v107;
          LODWORD(v108) = -1;
          v110 = v1153;
          if (v1153)
          {
LABEL_110:
            v111 = 0;
            v112 = 0;
            if (v110 >= 0)
              v113 = v110;
            else
              v113 = -v110;
            if ((v108 & 0x80000000) == 0)
              v108 = v108;
            else
              v108 = -(int)v108;
            v114 = v113 - 1;
            v115 = v114 + v108;
            if (v114 + v108 >= 0x40)
              v115 = 64;
            v1134 = v115;
            do
            {
              v117 = 0;
              v118 = 0;
              if (v111 >= v114)
                v119 = v114;
              else
                v119 = v111;
              v120 = ~v119;
              v121 = v1152;
              do
              {
                if (v111 + v117 < v108)
                {
                  v122 = *v121 * (unint64_t)v109;
                  v112 += v122;
                  v118 += HIDWORD(v122);
                }
                --v117;
                ++v121;
              }
              while (v120 != v117);
              v1133[v111] = v112;
              v112 = v118 + HIDWORD(v112);
              ++v111;
              v116 = v1134;
            }
            while (v111 < v1134);
            if (v112 && v1134 != 64)
            {
              v1133[v1134] = v112;
              v116 = ++v1134;
            }
            if (v107 > 0 != v110 > 0)
              v1134 = -v116;
LABEL_136:
            sub_20EED4C8C(v1142, v1138, v1133);
            memcpy(v1146, v1142, sizeof(v1146));
            v123 = v20[3];
            if (v123 <= 0)
            {
              if (v123 < 0)
              {
                v125 = -v123;
                LODWORD(v124) = -1;
                v126 = v1155;
                if (v1155)
                  goto LABEL_138;
              }
            }
            else
            {
              LODWORD(v124) = 1;
              v125 = v20[3];
              v126 = v1155;
              if (v1155)
              {
LABEL_138:
                v127 = 0;
                v128 = 0;
                if (v126 >= 0)
                  v129 = v126;
                else
                  v129 = -v126;
                if ((v124 & 0x80000000) == 0)
                  v124 = v124;
                else
                  v124 = -(int)v124;
                v130 = v129 - 1;
                v131 = v130 + v124;
                if (v130 + v124 >= 0x40)
                  v131 = 64;
                v1138[64] = v131;
                do
                {
                  v133 = 0;
                  v134 = 0;
                  if (v127 >= v130)
                    v135 = v130;
                  else
                    v135 = v127;
                  v136 = ~v135;
                  v137 = v1154;
                  do
                  {
                    if (v127 + v133 < v124)
                    {
                      v138 = *v137 * (unint64_t)v125;
                      v128 += v138;
                      v134 += HIDWORD(v138);
                    }
                    --v133;
                    ++v137;
                  }
                  while (v136 != v133);
                  v1138[v127] = v128;
                  v128 = v134 + HIDWORD(v128);
                  ++v127;
                  v132 = v1138[64];
                }
                while (v127 < v1138[64]);
                if (v128 && v1138[64] != 64)
                {
                  v1138[v1138[64]] = v128;
                  v132 = ++v1138[64];
                }
                if (v123 > 0 != v126 > 0)
                  v1138[64] = -v132;
                v139 = v1150;
                v140 = v20[2];
                if (v140 > 0)
                {
LABEL_161:
                  LODWORD(v141) = 1;
                  v142 = v140;
                  v143 = v1151;
                  if (v1151)
                    goto LABEL_162;
                  goto LABEL_205;
                }
LABEL_204:
                if (v140 < 0)
                {
                  v142 = -v140;
                  LODWORD(v141) = -1;
                  v143 = v1151;
                  if (v1151)
                  {
LABEL_162:
                    v144 = 0;
                    v145 = 0;
                    if (v143 >= 0)
                      v146 = v143;
                    else
                      v146 = -v143;
                    if ((v141 & 0x80000000) == 0)
                      v141 = v141;
                    else
                      v141 = -(int)v141;
                    v147 = v146 - 1;
                    v148 = v147 + v141;
                    if (v147 + v141 >= 0x40)
                      v148 = 64;
                    v1134 = v148;
                    do
                    {
                      v150 = 0;
                      v151 = 0;
                      if (v144 >= v147)
                        v152 = v147;
                      else
                        v152 = v144;
                      v153 = ~v152;
                      v154 = v1150;
                      do
                      {
                        if (v144 + v150 < v141)
                        {
                          v155 = *v154 * (unint64_t)v142;
                          v145 += v155;
                          v151 += HIDWORD(v155);
                        }
                        --v150;
                        ++v154;
                      }
                      while (v153 != v150);
                      v1133[v144] = v145;
                      v145 = v151 + HIDWORD(v145);
                      ++v144;
                      v149 = v1134;
                    }
                    while (v144 < v1134);
                    if (v145 && v1134 != 64)
                    {
                      v1133[v1134] = v145;
                      v149 = ++v1134;
                    }
                    if (v140 > 0 != v143 > 0)
                      v1134 = -v149;
LABEL_206:
                    sub_20EED4C8C(v1142, v1138, v1133);
                    v166 = v1147;
                    memcpy(v1147, v1142, sizeof(v1147));
                    v167 = v1153;
                    if (v1153 && (v168 = v1147[64]) != 0)
                    {
                      v169 = 0;
                      v170 = 0;
                      if (v1153 >= 0)
                        v171 = v1153;
                      else
                        v171 = -v1153;
                      if (v1147[64] >= 0)
                        v172 = v1147[64];
                      else
                        v172 = -v1147[64];
                      v173 = v171 - 1;
                      v174 = v173 + v172;
                      if (v173 + v172 >= 0x40)
                        v174 = 64;
                      v1142[64] = v174;
                      v175 = v1147;
                      do
                      {
                        v177 = 0;
                        v178 = 0;
                        if (v169 >= v173)
                          v179 = v173;
                        else
                          v179 = v169;
                        v180 = ~v179;
                        v181 = v1152;
                        do
                        {
                          if (v169 + v177 < v172)
                          {
                            v182 = v175[v177] * (unint64_t)*v181;
                            v170 += v182;
                            v178 += HIDWORD(v182);
                          }
                          --v177;
                          ++v181;
                        }
                        while (v180 != v177);
                        v1142[v169] = v170;
                        v170 = v178 + HIDWORD(v170);
                        ++v169;
                        v176 = v1142[64];
                        ++v175;
                      }
                      while (v169 < (int)v1142[64]);
                      if (v170 && v1142[64] != 64)
                      {
                        v1142[v1142[64]] = v170;
                        v176 = ++v1142[64];
                      }
                      if (v167 > 0 != v168 > 0)
                        v1142[64] = -v176;
                    }
                    else
                    {
                      v1142[64] = 0;
                    }
                    v183 = v1155;
                    if (v1155 && (v184 = *(_DWORD *)&v1146[256]) != 0)
                    {
                      v185 = 0;
                      v186 = 0;
                      if (v1155 >= 0)
                        v187 = v1155;
                      else
                        v187 = -v1155;
                      if (*(int *)&v1146[256] >= 0)
                        v188 = *(unsigned int *)&v1146[256];
                      else
                        v188 = -*(_DWORD *)&v1146[256];
                      v189 = v187 - 1;
                      v190 = v189 + v188;
                      if (v189 + v188 >= 0x40)
                        v190 = 64;
                      v1138[64] = v190;
                      v191 = v1146;
                      do
                      {
                        v193 = 0;
                        v194 = 0;
                        if (v185 >= v189)
                          v195 = v189;
                        else
                          v195 = v185;
                        v196 = ~v195;
                        v197 = v1154;
                        do
                        {
                          if (v185 + v193 < v188)
                          {
                            v198 = *(unsigned int *)&v191[4 * v193] * (unint64_t)*v197;
                            v186 += v198;
                            v194 += HIDWORD(v198);
                          }
                          --v193;
                          ++v197;
                        }
                        while (v196 != v193);
                        v1138[v185] = v186;
                        v186 = v194 + HIDWORD(v186);
                        ++v185;
                        v192 = v1138[64];
                        v191 += 4;
                      }
                      while (v185 < v1138[64]);
                      if (v186 && v1138[64] != 64)
                      {
                        v1138[v1138[64]] = v186;
                        v192 = ++v1138[64];
                      }
                      if (v183 > 0 != v184 > 0)
                        v1138[64] = -v192;
                    }
                    else
                    {
                      v1138[64] = 0;
                    }
                    sub_20EED4F68(v1133, (int *)v1142, v1138);
                    v199 = v1149;
                    if (v1149 && (v200 = v1147[64]) != 0)
                    {
                      v201 = 0;
                      v202 = 0;
                      if (v1149 >= 0)
                        v203 = v1149;
                      else
                        v203 = -v1149;
                      if (v1147[64] >= 0)
                        v204 = v1147[64];
                      else
                        v204 = -v1147[64];
                      v205 = v203 - 1;
                      v206 = v205 + v204;
                      if (v205 + v204 >= 0x40)
                        v206 = 64;
                      v1142[64] = v206;
                      do
                      {
                        v208 = 0;
                        v209 = 0;
                        if (v201 >= v205)
                          v210 = v205;
                        else
                          v210 = v201;
                        v211 = ~v210;
                        v212 = v1148;
                        do
                        {
                          if (v201 + v208 < v204)
                          {
                            v213 = v166[v208] * (unint64_t)*v212;
                            v202 += v213;
                            v209 += HIDWORD(v213);
                          }
                          --v208;
                          ++v212;
                        }
                        while (v211 != v208);
                        v1142[v201] = v202;
                        v202 = v209 + HIDWORD(v202);
                        ++v201;
                        v207 = v1142[64];
                        ++v166;
                      }
                      while (v201 < (int)v1142[64]);
                      if (v202 && v1142[64] != 64)
                      {
                        v1142[v1142[64]] = v202;
                        v207 = ++v1142[64];
                      }
                      if (v199 > 0 != v200 > 0)
                        v1142[64] = -v207;
                    }
                    else
                    {
                      v1142[64] = 0;
                    }
                    v214 = v1151;
                    if (v1151 && (v215 = *(_DWORD *)&v1146[256]) != 0)
                    {
                      v216 = 0;
                      v217 = 0;
                      if (v1151 >= 0)
                        v218 = v1151;
                      else
                        v218 = -v1151;
                      if (*(int *)&v1146[256] >= 0)
                        v219 = *(unsigned int *)&v1146[256];
                      else
                        v219 = -*(_DWORD *)&v1146[256];
                      v220 = v218 - 1;
                      v221 = v220 + v219;
                      if (v220 + v219 >= 0x40)
                        v221 = 64;
                      v1138[64] = v221;
                      v222 = v1146;
                      do
                      {
                        v224 = 0;
                        v225 = 0;
                        if (v216 >= v220)
                          v226 = v220;
                        else
                          v226 = v216;
                        v227 = ~v226;
                        v228 = v1150;
                        do
                        {
                          if (v216 + v224 < v219)
                          {
                            v229 = *(unsigned int *)&v222[4 * v224] * (unint64_t)*v228;
                            v217 += v229;
                            v225 += HIDWORD(v229);
                          }
                          --v224;
                          ++v228;
                        }
                        while (v227 != v224);
                        v1138[v216] = v217;
                        v217 = v225 + HIDWORD(v217);
                        ++v216;
                        v223 = v1138[64];
                        v222 += 4;
                      }
                      while (v216 < v1138[64]);
                      if (v217 && v1138[64] != 64)
                      {
                        v1138[v1138[64]] = v217;
                        v223 = ++v1138[64];
                      }
                      if (v214 > 0 != v215 > 0)
                        v1138[64] = -v223;
                    }
                    else
                    {
                      v1138[64] = 0;
                    }
                    sub_20EED4F68(v1131, (int *)v1142, v1138);
                    v230 = *v23;
                    if (*v23 <= 0)
                    {
                      if (v230 < 0)
                      {
                        v232 = -v230;
                        LODWORD(v231) = -1;
                        v233 = v1137;
                        if (v1137)
                        {
LABEL_308:
                          v234 = 0;
                          v235 = 0;
                          if (v233 >= 0)
                            v236 = v233;
                          else
                            v236 = -v233;
                          if ((v231 & 0x80000000) == 0)
                            v231 = v231;
                          else
                            v231 = -(int)v231;
                          v237 = v236 - 1;
                          v238 = v237 + v231;
                          if (v237 + v231 >= 0x40)
                            v238 = 64;
                          v1142[64] = v238;
                          do
                          {
                            v240 = 0;
                            v241 = 0;
                            if (v234 >= v237)
                              v242 = v237;
                            else
                              v242 = v234;
                            v243 = ~v242;
                            v244 = (unsigned int *)&v1135;
                            do
                            {
                              if (v234 + v240 < v231)
                              {
                                v245 = *v244 * (unint64_t)v232;
                                v235 += v245;
                                v241 += HIDWORD(v245);
                              }
                              --v240;
                              ++v244;
                            }
                            while (v243 != v240);
                            v1142[v234] = v235;
                            v235 = v241 + HIDWORD(v235);
                            ++v234;
                            v239 = v1142[64];
                          }
                          while (v234 < (int)v1142[64]);
                          if (v235 && v1142[64] != 64)
                          {
                            v1142[v1142[64]] = v235;
                            v239 = ++v1142[64];
                          }
                          if (v230 > 0 != v233 > 0)
                            v1142[64] = -v239;
LABEL_335:
                          sub_20EED4C8C(__src, v1133, (int *)v1142);
                          v246 = v23[1];
                          if (v246 <= 0)
                          {
                            if (v246 < 0)
                            {
                              v248 = -v246;
                              LODWORD(v247) = -1;
                              v249 = v1137;
                              if (v1137)
                              {
LABEL_337:
                                v250 = 0;
                                v251 = 0;
                                if (v249 >= 0)
                                  v252 = v249;
                                else
                                  v252 = -v249;
                                if ((v247 & 0x80000000) == 0)
                                  v247 = v247;
                                else
                                  v247 = -(int)v247;
                                v253 = v252 - 1;
                                v254 = v253 + v247;
                                if (v253 + v247 >= 0x40)
                                  v254 = 64;
                                v1142[64] = v254;
                                do
                                {
                                  v256 = 0;
                                  v257 = 0;
                                  if (v250 >= v253)
                                    v258 = v253;
                                  else
                                    v258 = v250;
                                  v259 = ~v258;
                                  v260 = (unsigned int *)&v1135;
                                  do
                                  {
                                    if (v250 + v256 < v247)
                                    {
                                      v261 = *v260 * (unint64_t)v248;
                                      v251 += v261;
                                      v257 += HIDWORD(v261);
                                    }
                                    --v256;
                                    ++v260;
                                  }
                                  while (v259 != v256);
                                  v1142[v250] = v251;
                                  v251 = v257 + HIDWORD(v251);
                                  ++v250;
                                  v255 = v1142[64];
                                }
                                while (v250 < (int)v1142[64]);
                                if (v251 && v1142[64] != 64)
                                {
                                  v1142[v1142[64]] = v251;
                                  v255 = ++v1142[64];
                                }
                                if (v246 > 0 != v249 > 0)
                                  v1142[64] = -v255;
LABEL_361:
                                sub_20EED4C8C(v1129, v1131, (int *)v1142);
                                if (!(__src[64] | v1129[64]))
                                {
                                  if (v1137 >= 0)
                                    v266 = v1137;
                                  else
                                    v266 = -v1137;
                                  v267 = 0.0;
                                  if ((_DWORD)v266)
                                  {
                                    if (v266 == 1)
                                    {
                                      v268 = 0;
                                      LODWORD(v262) = v1135;
                                      v269 = (double)v262;
                                    }
                                    else if (v266 == 2)
                                    {
                                      v268 = 0;
                                      LODWORD(v262) = v1136;
                                      LODWORD(v263) = v1135;
                                      v269 = (double)v262 * 4294967300.0 + (double)v263;
                                    }
                                    else
                                    {
                                      v558 = &v1135 + v266;
                                      LODWORD(v264) = *(v558 - 2);
                                      LODWORD(v262) = *(v558 - 1);
                                      LODWORD(v265) = *(v558 - 3);
                                      v269 = ((double)v262 * 4294967300.0 + (double)v264) * 4294967300.0 + (double)v265;
                                      v268 = 32 * v266 - 96;
                                    }
                                    if (v1137 < 0)
                                      v269 = -v269;
                                    v549 = ldexp(v269, v268);
                                    v553 = v549;
                                    v554 = v1134;
                                    if (v1134 >= 0)
                                      v555 = v1134;
                                    else
                                      v555 = -v1134;
                                    if ((_DWORD)v555)
                                      goto LABEL_850;
                                  }
                                  else
                                  {
                                    v549 = ldexp(0.0, 0);
                                    v553 = v549;
                                    v554 = v1134;
                                    if (v1134 >= 0)
                                      v555 = v1134;
                                    else
                                      v555 = -v1134;
                                    if ((_DWORD)v555)
                                    {
LABEL_850:
                                      if (v555 == 1)
                                      {
                                        v556 = 0;
                                        LODWORD(v549) = v1133[0];
                                        v559 = (double)*(unint64_t *)&v549;
                                      }
                                      else if (v555 == 2)
                                      {
                                        v556 = 0;
                                        LODWORD(v549) = v1133[1];
                                        LODWORD(v550) = v1133[0];
                                        v559 = (double)*(unint64_t *)&v549 * 4294967300.0 + (double)v550;
                                      }
                                      else
                                      {
                                        v582 = &v1133[v555];
                                        LODWORD(v551) = *(v582 - 2);
                                        LODWORD(v549) = *(v582 - 1);
                                        LODWORD(v552) = *(v582 - 3);
                                        v559 = ((double)*(unint64_t *)&v549 * 4294967300.0 + (double)v551)
                                             * 4294967300.0
                                             + (double)v552;
                                        v556 = 32 * v555 - 96;
                                      }
                                      if (v554 >= 0)
                                        v267 = v559;
                                      else
                                        v267 = -v559;
                                      goto LABEL_900;
                                    }
                                  }
                                  v556 = 0;
LABEL_900:
                                  v583 = ldexp(v267, v556);
                                  if (v1132 >= 0)
                                    v587 = v1132;
                                  else
                                    v587 = -v1132;
                                  v588 = v583 / v553;
                                  if ((_DWORD)v587)
                                  {
                                    if (v587 == 1)
                                    {
                                      v589 = 0;
                                      LODWORD(v583) = v1131[0];
                                      v590 = (double)*(unint64_t *)&v583;
                                    }
                                    else if (v587 == 2)
                                    {
                                      v589 = 0;
                                      LODWORD(v583) = v1131[1];
                                      LODWORD(v584) = v1131[0];
                                      v590 = (double)*(unint64_t *)&v583 * 4294967300.0 + (double)v584;
                                    }
                                    else
                                    {
                                      v591 = &v1131[v587];
                                      LODWORD(v585) = *(v591 - 2);
                                      LODWORD(v583) = *(v591 - 1);
                                      LODWORD(v586) = *(v591 - 3);
                                      v590 = ((double)*(unint64_t *)&v583 * 4294967300.0 + (double)v585)
                                           * 4294967300.0
                                           + (double)v586;
                                      v589 = 32 * v587 - 96;
                                    }
                                    if (v1132 < 0)
                                      v590 = -v590;
                                  }
                                  else
                                  {
                                    v589 = 0;
                                    v590 = 0.0;
                                  }
                                  v592 = ldexp(v590, v589);
                                  *(double *)v17 = v588;
                                  *(long double *)(v17 + 8) = v592 / v553;
                                  *(double *)(v17 + 16) = v588;
                                  *(_BYTE *)(v17 + 24) = 1;
                                  return;
                                }
                                if (v1137 >= 0)
                                  v270 = -1;
                                else
                                  v270 = 1;
                                if (v19 == 2)
                                  v271 = v270;
                                else
                                  v271 = -v270;
                                v272 = 1;
                                if (v271 <= 0)
                                {
                                  if ((v271 & 0x80000000) == 0)
                                  {
                                    v272 = 0;
                                    goto LABEL_392;
                                  }
                                  v272 = -1;
                                }
                                v1128[0] = 1;
LABEL_392:
                                v1128[64] = v272;
                                memcpy(__dst, __src, sizeof(__dst));
                                v280 = __dst[64];
                                __dst[64] = -__dst[64];
                                v281 = v1155;
                                if (v1155 && v280)
                                {
                                  v282 = 0;
                                  v283 = 0;
                                  if (v1155 >= 0)
                                    v284 = v1155;
                                  else
                                    v284 = -v1155;
                                  if (v280 >= 0)
                                    v285 = v280;
                                  else
                                    v285 = -v280;
                                  v286 = v284 - 1;
                                  v287 = v286 + v285;
                                  if (v286 + v285 >= 0x40)
                                    v287 = 64;
                                  v1127[64] = v287;
                                  v288 = __dst;
                                  do
                                  {
                                    v290 = 0;
                                    v291 = 0;
                                    if (v282 >= v286)
                                      v292 = v286;
                                    else
                                      v292 = v282;
                                    v293 = ~v292;
                                    v294 = v1154;
                                    do
                                    {
                                      if (v282 + v290 < v285)
                                      {
                                        v295 = v288[v290] * (unint64_t)*v294;
                                        v283 += v295;
                                        v291 += HIDWORD(v295);
                                      }
                                      --v290;
                                      ++v294;
                                    }
                                    while (v293 != v290);
                                    v1127[v282] = v283;
                                    v283 = v291 + HIDWORD(v283);
                                    ++v282;
                                    v289 = v1127[64];
                                    ++v288;
                                  }
                                  while (v282 < (int)v1127[64]);
                                  if (v283 && v1127[64] != 64)
                                  {
                                    v1127[v1127[64]] = v283;
                                    v289 = ++v1127[64];
                                  }
                                  if (v280 < 0 != v281 > 0)
                                    v1127[64] = -v289;
                                }
                                else
                                {
                                  v1127[64] = 0;
                                }
                                memcpy(v1123, v1129, sizeof(v1123));
                                v296 = v1123[64];
                                v1123[64] = -v1123[64];
                                v297 = v1151;
                                if (v1151 && v296)
                                {
                                  v298 = 0;
                                  v299 = 0;
                                  if (v1151 >= 0)
                                    v300 = v1151;
                                  else
                                    v300 = -v1151;
                                  if (v296 >= 0)
                                    v301 = v296;
                                  else
                                    v301 = -v296;
                                  v302 = v300 - 1;
                                  v303 = v302 + v301;
                                  if (v302 + v301 >= 0x40)
                                    v303 = 64;
                                  v1125 = v303;
                                  v304 = v1123;
                                  do
                                  {
                                    v306 = 0;
                                    v307 = 0;
                                    if (v298 >= v302)
                                      v308 = v302;
                                    else
                                      v308 = v298;
                                    v309 = ~v308;
                                    v310 = v1150;
                                    do
                                    {
                                      if (v298 + v306 < v301)
                                      {
                                        v311 = v304[v306] * (unint64_t)*v310;
                                        v299 += v311;
                                        v307 += HIDWORD(v311);
                                      }
                                      --v306;
                                      ++v310;
                                    }
                                    while (v309 != v306);
                                    v1124[v298] = v299;
                                    v299 = v307 + HIDWORD(v299);
                                    ++v298;
                                    v305 = v1125;
                                    ++v304;
                                  }
                                  while (v298 < v1125);
                                  if (v299 && v1125 != 64)
                                  {
                                    v1124[v1125] = v299;
                                    v305 = ++v1125;
                                  }
                                  if (v296 < 0 != v297 > 0)
                                    v1125 = -v305;
                                }
                                else
                                {
                                  v1125 = 0;
                                }
                                sub_20EED4F68(v1138, (int *)v1127, (int *)v1124);
                                memcpy(v1142, v1138, sizeof(v1142));
                                memcpy(__dst, __src, sizeof(__dst));
                                v312 = __dst[64];
                                __dst[64] = -__dst[64];
                                v313 = v1153;
                                if (v1153 && v312)
                                {
                                  v314 = 0;
                                  v315 = 0;
                                  if (v1153 >= 0)
                                    v316 = v1153;
                                  else
                                    v316 = -v1153;
                                  if (v312 >= 0)
                                    v317 = v312;
                                  else
                                    v317 = -v312;
                                  v318 = v316 - 1;
                                  v319 = v318 + v317;
                                  if (v318 + v317 >= 0x40)
                                    v319 = 64;
                                  v1127[64] = v319;
                                  v320 = __dst;
                                  do
                                  {
                                    v322 = 0;
                                    v323 = 0;
                                    if (v314 >= v318)
                                      v324 = v318;
                                    else
                                      v324 = v314;
                                    v325 = ~v324;
                                    v326 = v1152;
                                    do
                                    {
                                      if (v314 + v322 < v317)
                                      {
                                        v327 = v320[v322] * (unint64_t)*v326;
                                        v315 += v327;
                                        v323 += HIDWORD(v327);
                                      }
                                      --v322;
                                      ++v326;
                                    }
                                    while (v325 != v322);
                                    v1127[v314] = v315;
                                    v315 = v323 + HIDWORD(v315);
                                    ++v314;
                                    v321 = v1127[64];
                                    ++v320;
                                  }
                                  while (v314 < (int)v1127[64]);
                                  if (v315 && v1127[64] != 64)
                                  {
                                    v1127[v1127[64]] = v315;
                                    v321 = ++v1127[64];
                                  }
                                  if (v312 < 0 != v313 > 0)
                                    v1127[64] = -v321;
                                }
                                else
                                {
                                  v1127[64] = 0;
                                }
                                memcpy(v1123, v1129, sizeof(v1123));
                                v328 = v1123[64];
                                v1123[64] = -v1123[64];
                                v329 = v1149;
                                if (v1149 && v328)
                                {
                                  v330 = 0;
                                  v331 = 0;
                                  if (v1149 >= 0)
                                    v332 = v1149;
                                  else
                                    v332 = -v1149;
                                  if (v328 >= 0)
                                    v333 = v328;
                                  else
                                    v333 = -v328;
                                  v334 = v332 - 1;
                                  v335 = v334 + v333;
                                  if (v334 + v333 >= 0x40)
                                    v335 = 64;
                                  v1125 = v335;
                                  v336 = v1123;
                                  do
                                  {
                                    v338 = 0;
                                    v339 = 0;
                                    if (v330 >= v334)
                                      v340 = v334;
                                    else
                                      v340 = v330;
                                    v341 = ~v340;
                                    v342 = v1148;
                                    do
                                    {
                                      if (v330 + v338 < v333)
                                      {
                                        v343 = v336[v338] * (unint64_t)*v342;
                                        v331 += v343;
                                        v339 += HIDWORD(v343);
                                      }
                                      --v338;
                                      ++v342;
                                    }
                                    while (v341 != v338);
                                    v1124[v330] = v331;
                                    v331 = v339 + HIDWORD(v331);
                                    ++v330;
                                    v337 = v1125;
                                    ++v336;
                                  }
                                  while (v330 < v1125);
                                  if (v331 && v1125 != 64)
                                  {
                                    v1124[v1125] = v331;
                                    v337 = ++v1125;
                                  }
                                  if (v328 < 0 != v329 > 0)
                                    v1125 = -v337;
                                }
                                else
                                {
                                  v1125 = 0;
                                }
                                sub_20EED4F68(v1138, (int *)v1127, (int *)v1124);
                                memcpy(v1143, v1138, sizeof(v1143));
                                memcpy(v1144, v1128, sizeof(v1144));
                                v1145[64] = 0;
                                if (v1153)
                                {
                                  v344 = 0;
                                  v345 = 0;
                                  if (v1153 >= 0)
                                    v346 = v1153;
                                  else
                                    v346 = -v1153;
                                  v347 = v346 - 1 + v346;
                                  if (v347 >= 0x40)
                                    LODWORD(v347) = 64;
                                  __dst[64] = v347;
                                  do
                                  {
                                    v348 = 0;
                                    v349 = 0;
                                    if (v344 >= v346 - 1)
                                      v350 = v346 - 1;
                                    else
                                      v350 = v344;
                                    v351 = v350 + 1;
                                    v352 = v344;
                                    do
                                    {
                                      if (v352 < v346)
                                      {
                                        v353 = v1152[v352] * (unint64_t)v1152[v348];
                                        v345 += v353;
                                        v349 += HIDWORD(v353);
                                      }
                                      ++v348;
                                      --v352;
                                    }
                                    while (v351 != v348);
                                    __dst[v344] = v345;
                                    v345 = v349 + HIDWORD(v345);
                                    ++v344;
                                  }
                                  while (v344 < __dst[64]);
                                  if (v345 && __dst[64] != 64)
                                    __dst[__dst[64]++] = v345;
                                  LODWORD(v354) = v1149;
                                  if (v1149)
                                    goto LABEL_511;
                                }
                                else
                                {
                                  __dst[64] = 0;
                                  LODWORD(v354) = v1149;
                                  if (v1149)
                                  {
LABEL_511:
                                    v355 = 0;
                                    v356 = 0;
                                    if ((v354 & 0x80000000) == 0)
                                      v354 = v354;
                                    else
                                      v354 = -(int)v354;
                                    v357 = v354 - 1 + v354;
                                    if (v357 >= 0x40)
                                      LODWORD(v357) = 64;
                                    v1125 = v357;
                                    do
                                    {
                                      v358 = 0;
                                      v359 = 0;
                                      if (v355 >= v354 - 1)
                                        v360 = v354 - 1;
                                      else
                                        v360 = v355;
                                      v361 = v360 + 1;
                                      v362 = v355;
                                      do
                                      {
                                        if (v362 < v354)
                                        {
                                          v363 = v1148[v362] * (unint64_t)v1148[v358];
                                          v356 += v363;
                                          v359 += HIDWORD(v363);
                                        }
                                        ++v358;
                                        --v362;
                                      }
                                      while (v361 != v358);
                                      v1124[v355] = v356;
                                      v356 = v359 + HIDWORD(v356);
                                      ++v355;
                                    }
                                    while (v355 < v1125);
                                    if (v356 && v1125 != 64)
                                      v1124[v1125++] = v356;
LABEL_530:
                                    sub_20EED4F68(v1127, __dst, (int *)v1124);
                                    memcpy(v1138, v1127, sizeof(v1138));
                                    if (v1155)
                                    {
                                      v364 = 0;
                                      v365 = 0;
                                      if (v1155 >= 0)
                                        v366 = v1155;
                                      else
                                        v366 = -v1155;
                                      v367 = v366 - 1 + v366;
                                      if (v367 >= 0x40)
                                        LODWORD(v367) = 64;
                                      __dst[64] = v367;
                                      do
                                      {
                                        v368 = 0;
                                        v369 = 0;
                                        if (v364 >= v366 - 1)
                                          v370 = v366 - 1;
                                        else
                                          v370 = v364;
                                        v371 = v370 + 1;
                                        v372 = v364;
                                        do
                                        {
                                          if (v372 < v366)
                                          {
                                            v373 = v1154[v372]
                                                 * (unint64_t)v1154[v368];
                                            v365 += v373;
                                            v369 += HIDWORD(v373);
                                          }
                                          ++v368;
                                          --v372;
                                        }
                                        while (v371 != v368);
                                        __dst[v364] = v365;
                                        v365 = v369 + HIDWORD(v365);
                                        ++v364;
                                      }
                                      while (v364 < __dst[64]);
                                      if (v365 && __dst[64] != 64)
                                        __dst[__dst[64]++] = v365;
                                      LODWORD(v374) = v1151;
                                      if (v1151)
                                        goto LABEL_549;
                                    }
                                    else
                                    {
                                      __dst[64] = 0;
                                      LODWORD(v374) = v1151;
                                      if (v1151)
                                      {
LABEL_549:
                                        v375 = 0;
                                        v376 = 0;
                                        if ((v374 & 0x80000000) == 0)
                                          v374 = v374;
                                        else
                                          v374 = -(int)v374;
                                        v377 = v374 - 1 + v374;
                                        if (v377 >= 0x40)
                                          LODWORD(v377) = 64;
                                        v1125 = v377;
                                        do
                                        {
                                          v378 = 0;
                                          v379 = 0;
                                          if (v375 >= v374 - 1)
                                            v380 = v374 - 1;
                                          else
                                            v380 = v375;
                                          v381 = v380 + 1;
                                          v382 = v375;
                                          do
                                          {
                                            if (v382 < v374)
                                            {
                                              v383 = v1150[v382]
                                                   * (unint64_t)v1150[v378];
                                              v376 += v383;
                                              v379 += HIDWORD(v383);
                                            }
                                            ++v378;
                                            --v382;
                                          }
                                          while (v381 != v378);
                                          v1124[v375] = v376;
                                          v376 = v379 + HIDWORD(v376);
                                          ++v375;
                                        }
                                        while (v375 < v1125);
                                        if (v376 && v1125 != 64)
                                          v1124[v1125++] = v376;
LABEL_568:
                                        sub_20EED4F68(v1127, __dst, (int *)v1124);
                                        memcpy(v1139, v1127, sizeof(v1139));
                                        v384 = v1153;
                                        if (v1153 && (v385 = v1155) != 0)
                                        {
                                          v386 = 0;
                                          v387 = 0;
                                          if (v1153 >= 0)
                                            v388 = v1153;
                                          else
                                            v388 = -v1153;
                                          if (v1155 >= 0)
                                            v389 = v1155;
                                          else
                                            v389 = -v1155;
                                          v390 = v388 - 1;
                                          v391 = v390 + v389;
                                          if (v390 + v389 >= 0x40)
                                            v391 = 64;
                                          __dst[64] = v391;
                                          v392 = v1154;
                                          do
                                          {
                                            v394 = 0;
                                            v395 = 0;
                                            if (v386 >= v390)
                                              v396 = v390;
                                            else
                                              v396 = v386;
                                            v397 = ~v396;
                                            v398 = v1152;
                                            do
                                            {
                                              if (v386 + v394 < v389)
                                              {
                                                v399 = v392[v394] * (unint64_t)*v398;
                                                v387 += v399;
                                                v395 += HIDWORD(v399);
                                              }
                                              --v394;
                                              ++v398;
                                            }
                                            while (v397 != v394);
                                            __dst[v386] = v387;
                                            v387 = v395 + HIDWORD(v387);
                                            ++v386;
                                            v393 = __dst[64];
                                            ++v392;
                                          }
                                          while (v386 < __dst[64]);
                                          if (v387 && __dst[64] != 64)
                                          {
                                            __dst[__dst[64]] = v387;
                                            v393 = ++__dst[64];
                                          }
                                          if (v384 > 0 != v385 > 0)
                                            __dst[64] = -v393;
                                        }
                                        else
                                        {
                                          __dst[64] = 0;
                                        }
                                        v400 = v1149;
                                        if (v1149 && (v401 = v1151) != 0)
                                        {
                                          v402 = 0;
                                          v403 = 0;
                                          if (v1149 >= 0)
                                            v404 = v1149;
                                          else
                                            v404 = -v1149;
                                          if (v1151 >= 0)
                                            v405 = v1151;
                                          else
                                            v405 = -v1151;
                                          v406 = v404 - 1;
                                          v407 = v406 + v405;
                                          if (v406 + v405 >= 0x40)
                                            v407 = 64;
                                          v1125 = v407;
                                          v408 = v1150;
                                          do
                                          {
                                            v410 = 0;
                                            v411 = 0;
                                            if (v402 >= v406)
                                              v412 = v406;
                                            else
                                              v412 = v402;
                                            v413 = ~v412;
                                            v414 = v1148;
                                            do
                                            {
                                              if (v402 + v410 < v405)
                                              {
                                                v415 = v408[v410] * (unint64_t)*v414;
                                                v403 += v415;
                                                v411 += HIDWORD(v415);
                                              }
                                              --v410;
                                              ++v414;
                                            }
                                            while (v413 != v410);
                                            v1124[v402] = v403;
                                            v403 = v411 + HIDWORD(v403);
                                            ++v402;
                                            v409 = v1125;
                                            ++v408;
                                          }
                                          while (v402 < v1125);
                                          if (v403 && v1125 != 64)
                                          {
                                            v1124[v1125] = v403;
                                            v409 = ++v1125;
                                          }
                                          if (v400 > 0 != v401 > 0)
                                            v1125 = -v409;
                                        }
                                        else
                                        {
                                          v1125 = 0;
                                        }
                                        sub_20EED4F68(v1127, __dst, (int *)v1124);
                                        memcpy(v1140, v1127, sizeof(v1140));
                                        v416 = v1153;
                                        if (v1153 && (v417 = v1129[64]) != 0)
                                        {
                                          v418 = 0;
                                          v419 = 0;
                                          if (v1153 >= 0)
                                            v420 = v1153;
                                          else
                                            v420 = -v1153;
                                          if (v1129[64] >= 0)
                                            v421 = v1129[64];
                                          else
                                            v421 = -v1129[64];
                                          v422 = v420 - 1;
                                          v423 = v422 + v421;
                                          if (v422 + v421 >= 0x40)
                                            v423 = 64;
                                          v1123[64] = v423;
                                          v424 = v1129;
                                          do
                                          {
                                            v426 = 0;
                                            v427 = 0;
                                            if (v418 >= v422)
                                              v428 = v422;
                                            else
                                              v428 = v418;
                                            v429 = ~v428;
                                            v430 = v1152;
                                            do
                                            {
                                              if (v418 + v426 < v421)
                                              {
                                                v431 = v424[v426] * (unint64_t)*v430;
                                                v419 += v431;
                                                v427 += HIDWORD(v431);
                                              }
                                              --v426;
                                              ++v430;
                                            }
                                            while (v429 != v426);
                                            v1123[v418] = v419;
                                            v419 = v427 + HIDWORD(v419);
                                            ++v418;
                                            v425 = v1123[64];
                                            ++v424;
                                          }
                                          while (v418 < v1123[64]);
                                          if (v419 && v1123[64] != 64)
                                          {
                                            v1123[v1123[64]] = v419;
                                            v425 = ++v1123[64];
                                          }
                                          if (v416 > 0 != v417 > 0)
                                            v1123[64] = -v425;
                                        }
                                        else
                                        {
                                          v1123[64] = 0;
                                        }
                                        v432 = v1149;
                                        if (v1149 && (v433 = __src[64]) != 0)
                                        {
                                          v434 = 0;
                                          v435 = 0;
                                          if (v1149 >= 0)
                                            v436 = v1149;
                                          else
                                            v436 = -v1149;
                                          if (__src[64] >= 0)
                                            v437 = __src[64];
                                          else
                                            v437 = -__src[64];
                                          v438 = v436 - 1;
                                          v439 = v438 + v437;
                                          if (v438 + v437 >= 0x40)
                                            v439 = 64;
                                          v1122 = v439;
                                          v440 = __src;
                                          do
                                          {
                                            v442 = 0;
                                            v443 = 0;
                                            if (v434 >= v438)
                                              v444 = v438;
                                            else
                                              v444 = v434;
                                            v445 = ~v444;
                                            v446 = v1148;
                                            do
                                            {
                                              if (v434 + v442 < v437)
                                              {
                                                v447 = v440[v442] * (unint64_t)*v446;
                                                v435 += v447;
                                                v443 += HIDWORD(v447);
                                              }
                                              --v442;
                                              ++v446;
                                            }
                                            while (v445 != v442);
                                            v1121[v434] = v435;
                                            v435 = v443 + HIDWORD(v435);
                                            ++v434;
                                            v441 = v1122;
                                            ++v440;
                                          }
                                          while (v434 < v1122);
                                          if (v435 && v1122 != 64)
                                          {
                                            v1121[v1122] = v435;
                                            v441 = ++v1122;
                                          }
                                          if (v432 > 0 != v433 > 0)
                                            v1122 = -v441;
                                        }
                                        else
                                        {
                                          v1122 = 0;
                                        }
                                        sub_20EED4C8C(v1124, v1123, (int *)v1121);
                                        v448 = v1155;
                                        if (v1155 && (v449 = v1129[64]) != 0)
                                        {
                                          v450 = 0;
                                          v451 = 0;
                                          if (v1155 >= 0)
                                            v452 = v1155;
                                          else
                                            v452 = -v1155;
                                          if (v1129[64] >= 0)
                                            v453 = v1129[64];
                                          else
                                            v453 = -v1129[64];
                                          v454 = v452 - 1;
                                          v455 = v454 + v453;
                                          if (v454 + v453 >= 0x40)
                                            v455 = 64;
                                          v1118 = v455;
                                          v456 = v1129;
                                          do
                                          {
                                            v458 = 0;
                                            v459 = 0;
                                            if (v450 >= v454)
                                              v460 = v454;
                                            else
                                              v460 = v450;
                                            v461 = ~v460;
                                            v462 = v1154;
                                            do
                                            {
                                              if (v450 + v458 < v453)
                                              {
                                                v463 = v456[v458] * (unint64_t)*v462;
                                                v451 += v463;
                                                v459 += HIDWORD(v463);
                                              }
                                              --v458;
                                              ++v462;
                                            }
                                            while (v461 != v458);
                                            v1117[v450] = v451;
                                            v451 = v459 + HIDWORD(v451);
                                            ++v450;
                                            v457 = v1118;
                                            ++v456;
                                          }
                                          while (v450 < v1118);
                                          if (v451 && v1118 != 64)
                                          {
                                            v1117[v1118] = v451;
                                            v457 = ++v1118;
                                          }
                                          if (v448 > 0 != v449 > 0)
                                            v1118 = -v457;
                                        }
                                        else
                                        {
                                          v1118 = 0;
                                        }
                                        v464 = v1151;
                                        if (v1151 && (v465 = __src[64]) != 0)
                                        {
                                          v466 = 0;
                                          v467 = 0;
                                          if (v1151 >= 0)
                                            v468 = v1151;
                                          else
                                            v468 = -v1151;
                                          if (__src[64] >= 0)
                                            v469 = __src[64];
                                          else
                                            v469 = -__src[64];
                                          v470 = v468 - 1;
                                          v471 = v470 + v469;
                                          if (v470 + v469 >= 0x40)
                                            v471 = 64;
                                          v1116 = v471;
                                          v472 = __src;
                                          do
                                          {
                                            v474 = 0;
                                            v475 = 0;
                                            if (v466 >= v470)
                                              v476 = v470;
                                            else
                                              v476 = v466;
                                            v477 = ~v476;
                                            v478 = v1150;
                                            do
                                            {
                                              if (v466 + v474 < v469)
                                              {
                                                v479 = v472[v474] * (unint64_t)*v478;
                                                v467 += v479;
                                                v475 += HIDWORD(v479);
                                              }
                                              --v474;
                                              ++v478;
                                            }
                                            while (v477 != v474);
                                            v1115[v466] = v467;
                                            v467 = v475 + HIDWORD(v467);
                                            ++v466;
                                            v473 = v1116;
                                            ++v472;
                                          }
                                          while (v466 < v1116);
                                          if (v467 && v1116 != 64)
                                          {
                                            v1115[v1116] = v467;
                                            v473 = ++v1116;
                                          }
                                          if (v464 > 0 != v465 > 0)
                                            v1116 = -v473;
                                        }
                                        else
                                        {
                                          v1116 = 0;
                                        }
                                        sub_20EED4C8C(v1119, v1117, v1115);
                                        v480 = v1125;
                                        if (!v1125)
                                          goto LABEL_757;
                                        v481 = v1120;
                                        if (!v1120)
                                          goto LABEL_757;
                                        v482 = 0;
                                        v483 = 0;
                                        if (v1125 >= 0)
                                          v484 = v1125;
                                        else
                                          v484 = -v1125;
                                        if (v1120 >= 0)
                                          v485 = v1120;
                                        else
                                          v485 = -v1120;
                                        v486 = v484 - 1;
                                        v487 = v484 - 1 + v485;
                                        if (v487 >= 0x40)
                                          LODWORD(v487) = 64;
                                        __dst[64] = v487;
                                        v488 = v1119;
                                        do
                                        {
                                          v490 = 0;
                                          v491 = 0;
                                          if (v482 >= v486)
                                            v492 = v486;
                                          else
                                            v492 = v482;
                                          v493 = ~v492;
                                          v494 = (int *)v1124;
                                          do
                                          {
                                            if (v482 + v490 < v485)
                                            {
                                              v495 = v488[v490] * (unint64_t)*v494;
                                              v483 += v495;
                                              v491 += HIDWORD(v495);
                                            }
                                            --v490;
                                            ++v494;
                                          }
                                          while (v493 != v490);
                                          __dst[v482] = v483;
                                          v483 = v491 + HIDWORD(v483);
                                          ++v482;
                                          v489 = __dst[64];
                                          ++v488;
                                        }
                                        while (v482 < __dst[64]);
                                        if (v483 && __dst[64] != 64)
                                        {
                                          __dst[__dst[64]] = v483;
                                          v489 = ++__dst[64];
                                        }
                                        if (v480 > 0 != v481 > 0)
                                        {
                                          v489 = -v489;
                                          __dst[64] = v489;
                                        }
                                        if (v489)
                                        {
                                          v496 = 0;
                                          v497 = 0;
                                          if (v489 >= 0)
                                            v498 = v489;
                                          else
                                            v498 = -v489;
                                          v499 = v498 - 1;
                                          if (v498 >= 0x40)
                                            LODWORD(v498) = 64;
                                          v1127[64] = v498;
                                          do
                                          {
                                            v501 = 0;
                                            v502 = 0;
                                            if (v496 >= v499)
                                              v503 = v499;
                                            else
                                              v503 = v496;
                                            v504 = v503 + 1;
                                            do
                                            {
                                              if (v496 == v501)
                                              {
                                                v505 = __dst[v496];
                                                v497 += (2 * v505);
                                                v502 += v505 >> 31;
                                              }
                                              ++v501;
                                            }
                                            while (v504 != v501);
                                            v1127[v496] = v497;
                                            v497 = v502 + HIDWORD(v497);
                                            ++v496;
                                            v500 = v1127[64];
                                          }
                                          while (v496 < (int)v1127[64]);
                                          if (v497 && v1127[64] != 64)
                                          {
                                            v1127[v1127[64]] = v497;
                                            v500 = ++v1127[64];
                                          }
                                          if (v489 >= 1)
                                            v1127[64] = -v500;
                                        }
                                        else
                                        {
LABEL_757:
                                          v1127[64] = 0;
                                        }
                                        memcpy(v1141, v1127, sizeof(v1141));
                                        v506 = sub_20EEDF874();
                                        v508 = ldexp(*(long double *)&v506, v507);
                                        v512 = v508;
                                        if (v1137 >= 0)
                                          v513 = v1137;
                                        else
                                          v513 = -v1137;
                                        if ((_DWORD)v513)
                                        {
                                          if (v513 == 1)
                                          {
                                            v514 = 0;
                                            LODWORD(v508) = v1135;
                                            v515 = (double)*(unint64_t *)&v508;
                                          }
                                          else if (v513 == 2)
                                          {
                                            v514 = 0;
                                            LODWORD(v508) = v1136;
                                            LODWORD(v509) = v1135;
                                            v515 = (double)*(unint64_t *)&v508 * 4294967300.0 + (double)v509;
                                          }
                                          else
                                          {
                                            v560 = &v1135 + v513;
                                            LODWORD(v510) = *(v560 - 2);
                                            LODWORD(v508) = *(v560 - 1);
                                            LODWORD(v511) = *(v560 - 3);
                                            v515 = ((double)*(unint64_t *)&v508 * 4294967300.0 + (double)v510)
                                                 * 4294967300.0
                                                 + (double)v511;
                                            v514 = 32 * v513 - 96;
                                          }
                                          if (v1137 < 0)
                                            v515 = -v515;
                                          v557 = v512 * ldexp(v515, v514);
                                          if (!v13)
                                          {
LABEL_1380:
                                            if ((v15 & 1) == 0 && !a9)
                                              return;
                                            if (__src[64])
                                            {
                                              v875 = 0;
                                              v876 = 0;
                                              if (__src[64] >= 0)
                                                v877 = __src[64];
                                              else
                                                v877 = -__src[64];
                                              v878 = v877 - 1 + v877;
                                              if (v878 >= 0x40)
                                                LODWORD(v878) = 64;
                                              v1123[64] = v878;
                                              do
                                              {
                                                v879 = 0;
                                                v880 = 0;
                                                if (v875 >= v877 - 1)
                                                  v881 = v877 - 1;
                                                else
                                                  v881 = v875;
                                                v882 = v881 + 1;
                                                v883 = v875;
                                                do
                                                {
                                                  if (v883 < v877)
                                                  {
                                                    v884 = __src[v883]
                                                         * (unint64_t)__src[v879];
                                                    v876 += v884;
                                                    v880 += HIDWORD(v884);
                                                  }
                                                  ++v879;
                                                  --v883;
                                                }
                                                while (v882 != v879);
                                                v1123[v875] = v876;
                                                v876 = v880 + HIDWORD(v876);
                                                ++v875;
                                              }
                                              while (v875 < v1123[64]);
                                              if (v876 && v1123[64] != 64)
                                                v1123[v1123[64]++] = v876;
                                              LODWORD(v885) = v1129[64];
                                              if (v1129[64])
                                              {
LABEL_1401:
                                                v886 = 0;
                                                v887 = 0;
                                                if ((v885 & 0x80000000) == 0)
                                                  v885 = v885;
                                                else
                                                  v885 = -(int)v885;
                                                v888 = v885 - 1 + v885;
                                                if (v888 >= 0x40)
                                                  LODWORD(v888) = 64;
                                                v1122 = v888;
                                                do
                                                {
                                                  v889 = 0;
                                                  v890 = 0;
                                                  if (v886 >= v885 - 1)
                                                    v891 = v885 - 1;
                                                  else
                                                    v891 = v886;
                                                  v892 = v891 + 1;
                                                  v893 = v886;
                                                  do
                                                  {
                                                    if (v893 < v885)
                                                    {
                                                      v894 = v1129[v893]
                                                           * (unint64_t)v1129[v889];
                                                      v887 += v894;
                                                      v890 += HIDWORD(v894);
                                                    }
                                                    ++v889;
                                                    --v893;
                                                  }
                                                  while (v892 != v889);
                                                  v1121[v886] = v887;
                                                  v887 = v890 + HIDWORD(v887);
                                                  ++v886;
                                                }
                                                while (v886 < v1122);
                                                if (v887 && v1122 != 64)
                                                  v1121[v1122++] = v887;
                                                sub_20EED4F68(v1124, v1123, (int *)v1121);
                                                v895 = v1155;
                                                if (!v1155)
                                                  goto LABEL_1443;
LABEL_1425:
                                                v896 = v1125;
                                                if (v1125)
                                                {
                                                  v897 = 0;
                                                  v898 = 0;
                                                  if (v895 >= 0)
                                                    v899 = v895;
                                                  else
                                                    v899 = -v895;
                                                  if (v1125 >= 0)
                                                    v900 = v1125;
                                                  else
                                                    v900 = -v1125;
                                                  v901 = v899 - 1;
                                                  v902 = v901 + v900;
                                                  if (v901 + v900 >= 0x40)
                                                    v902 = 64;
                                                  __dst[64] = v902;
                                                  v903 = (int *)v1124;
                                                  do
                                                  {
                                                    v905 = 0;
                                                    v906 = 0;
                                                    if (v897 >= v901)
                                                      v907 = v901;
                                                    else
                                                      v907 = v897;
                                                    v908 = ~v907;
                                                    v909 = v1154;
                                                    do
                                                    {
                                                      if (v897 + v905 < v900)
                                                      {
                                                        v910 = v903[v905] * (unint64_t)*v909;
                                                        v898 += v910;
                                                        v906 += HIDWORD(v910);
                                                      }
                                                      --v905;
                                                      ++v909;
                                                    }
                                                    while (v908 != v905);
                                                    __dst[v897] = v898;
                                                    v898 = v906 + HIDWORD(v898);
                                                    ++v897;
                                                    v904 = __dst[64];
                                                    ++v903;
                                                  }
                                                  while (v897 < __dst[64]);
                                                  if (v898 && __dst[64] != 64)
                                                  {
                                                    __dst[__dst[64]] = v898;
                                                    v904 = ++__dst[64];
                                                  }
                                                  if (v895 > 0 != v896 > 0)
                                                    __dst[64] = -v904;
LABEL_1449:
                                                  if (v895 && (v911 = __src[64]) != 0)
                                                  {
                                                    v912 = 0;
                                                    v913 = 0;
                                                    if (__src[64] >= 0)
                                                      v914 = __src[64];
                                                    else
                                                      v914 = -__src[64];
                                                    if (v895 >= 0)
                                                      v915 = v895;
                                                    else
                                                      v915 = -v895;
                                                    v916 = v914 - 1;
                                                    v917 = v916 + v915;
                                                    if (v916 + v915 >= 0x40)
                                                      v917 = 64;
                                                    v1116 = v917;
                                                    do
                                                    {
                                                      v919 = 0;
                                                      v920 = 0;
                                                      if (v912 >= v916)
                                                        v921 = v916;
                                                      else
                                                        v921 = v912;
                                                      v922 = ~v921;
                                                      v923 = __src;
                                                      do
                                                      {
                                                        if (v912 + v919 < v915)
                                                        {
                                                          v924 = v55[v919] * (unint64_t)*v923;
                                                          v913 += v924;
                                                          v920 += HIDWORD(v924);
                                                        }
                                                        --v919;
                                                        ++v923;
                                                      }
                                                      while (v922 != v919);
                                                      v1115[v912] = v913;
                                                      v913 = v920 + HIDWORD(v913);
                                                      ++v912;
                                                      v918 = v1116;
                                                      ++v55;
                                                    }
                                                    while (v912 < v1116);
                                                    if (v913 && v1116 != 64)
                                                    {
                                                      v1115[v1116] = v913;
                                                      v918 = ++v1116;
                                                    }
                                                    if (v895 > 0 != v911 > 0)
                                                      v1116 = -v918;
                                                  }
                                                  else
                                                  {
                                                    v1116 = 0;
                                                  }
                                                  v925 = v1129[64];
                                                  if (v1129[64] && (v926 = v1151) != 0)
                                                  {
                                                    v927 = 0;
                                                    v928 = 0;
                                                    if (v1129[64] >= 0)
                                                      v929 = v1129[64];
                                                    else
                                                      v929 = -v1129[64];
                                                    if (v1151 >= 0)
                                                      v930 = v1151;
                                                    else
                                                      v930 = -v1151;
                                                    v931 = v929 - 1;
                                                    v932 = v931 + v930;
                                                    if (v931 + v930 >= 0x40)
                                                      v932 = 64;
                                                    v1114 = v932;
                                                    do
                                                    {
                                                      v934 = 0;
                                                      v935 = 0;
                                                      if (v927 >= v931)
                                                        v936 = v931;
                                                      else
                                                        v936 = v927;
                                                      v937 = ~v936;
                                                      v938 = v1129;
                                                      do
                                                      {
                                                        if (v927 + v934 < v930)
                                                        {
                                                          v939 = v139[v934]
                                                               * (unint64_t)*v938;
                                                          v928 += v939;
                                                          v935 += HIDWORD(v939);
                                                        }
                                                        --v934;
                                                        ++v938;
                                                      }
                                                      while (v937 != v934);
                                                      v1113[v927] = v928;
                                                      v928 = v935 + HIDWORD(v928);
                                                      ++v927;
                                                      v933 = v1114;
                                                      ++v139;
                                                    }
                                                    while (v927 < v1114);
                                                    if (v928 && v1114 != 64)
                                                    {
                                                      v1113[v1114] = v928;
                                                      v933 = ++v1114;
                                                    }
                                                    if (v925 > 0 != v926 > 0)
                                                      v1114 = -v933;
                                                  }
                                                  else
                                                  {
                                                    v1114 = 0;
                                                  }
                                                  sub_20EED4F68(v1117, v1115, v1113);
                                                  v940 = v1134;
                                                  if (v1134 && (v941 = v1118) != 0)
                                                  {
                                                    v942 = 0;
                                                    v943 = 0;
                                                    if (v1134 >= 0)
                                                      v944 = v1134;
                                                    else
                                                      v944 = -v1134;
                                                    if (v1118 >= 0)
                                                      v945 = v1118;
                                                    else
                                                      v945 = -v1118;
                                                    v946 = v944 - 1;
                                                    v947 = v946 + v945;
                                                    if (v946 + v945 >= 0x40)
                                                      v947 = 64;
                                                    v1120 = v947;
                                                    v948 = v1117;
                                                    do
                                                    {
                                                      v950 = 0;
                                                      v951 = 0;
                                                      if (v942 >= v946)
                                                        v952 = v946;
                                                      else
                                                        v952 = v942;
                                                      v953 = ~v952;
                                                      v954 = v1133;
                                                      do
                                                      {
                                                        if (v942 + v950 < v945)
                                                        {
                                                          v955 = v948[v950]
                                                               * (unint64_t)*v954;
                                                          v943 += v955;
                                                          v951 += HIDWORD(v955);
                                                        }
                                                        --v950;
                                                        ++v954;
                                                      }
                                                      while (v953 != v950);
                                                      v1119[v942] = v943;
                                                      v943 = v951 + HIDWORD(v943);
                                                      ++v942;
                                                      v949 = v1120;
                                                      ++v948;
                                                    }
                                                    while (v942 < v1120);
                                                    if (v943 && v1120 != 64)
                                                    {
                                                      v1119[v1120] = v943;
                                                      v949 = ++v1120;
                                                    }
                                                    if (v940 > 0 != v941 > 0)
                                                      v1120 = -v949;
                                                  }
                                                  else
                                                  {
                                                    v1120 = 0;
                                                  }
                                                  sub_20EED4C8C(v1127, __dst, v1119);
                                                  memcpy(v1142, v1127, sizeof(v1142));
                                                  if (__src[64])
                                                  {
                                                    v956 = 0;
                                                    v957 = 0;
                                                    if (__src[64] >= 0)
                                                      v958 = __src[64];
                                                    else
                                                      v958 = -__src[64];
                                                    v959 = v958 - 1 + v958;
                                                    if (v959 >= 0x40)
                                                      LODWORD(v959) = 64;
                                                    v1123[64] = v959;
                                                    do
                                                    {
                                                      v960 = 0;
                                                      v961 = 0;
                                                      if (v956 >= v958 - 1)
                                                        v962 = v958 - 1;
                                                      else
                                                        v962 = v956;
                                                      v963 = v962 + 1;
                                                      v964 = v956;
                                                      do
                                                      {
                                                        if (v964 < v958)
                                                        {
                                                          v965 = __src[v964]
                                                               * (unint64_t)__src[v960];
                                                          v957 += v965;
                                                          v961 += HIDWORD(v965);
                                                        }
                                                        ++v960;
                                                        --v964;
                                                      }
                                                      while (v963 != v960);
                                                      v1123[v956] = v957;
                                                      v957 = v961 + HIDWORD(v957);
                                                      ++v956;
                                                    }
                                                    while (v956 < v1123[64]);
                                                    if (v957 && v1123[64] != 64)
                                                      v1123[v1123[64]++] = v957;
                                                    LODWORD(v966) = v1129[64];
                                                    if (v1129[64])
                                                    {
LABEL_1543:
                                                      v967 = 0;
                                                      v968 = 0;
                                                      if ((v966 & 0x80000000) == 0)
                                                        v966 = v966;
                                                      else
                                                        v966 = -(int)v966;
                                                      v969 = v966 - 1 + v966;
                                                      if (v969 >= 0x40)
                                                        LODWORD(v969) = 64;
                                                      v1122 = v969;
                                                      do
                                                      {
                                                        v970 = 0;
                                                        v971 = 0;
                                                        if (v967 >= v966 - 1)
                                                          v972 = v966 - 1;
                                                        else
                                                          v972 = v967;
                                                        v973 = v972 + 1;
                                                        v974 = v967;
                                                        do
                                                        {
                                                          if (v974 < v966)
                                                          {
                                                            v975 = v1129[v974]
                                                                 * (unint64_t)v1129[v970];
                                                            v968 += v975;
                                                            v971 += HIDWORD(v975);
                                                          }
                                                          ++v970;
                                                          --v974;
                                                        }
                                                        while (v973 != v970);
                                                        v1121[v967] = v968;
                                                        v968 = v971 + HIDWORD(v968);
                                                        ++v967;
                                                      }
                                                      while (v967 < v1122);
                                                      if (v968 && v1122 != 64)
                                                        v1121[v1122++] = v968;
                                                      sub_20EED4F68(v1124, v1123, (int *)v1121);
                                                      v976 = v1153;
                                                      if (!v1153)
                                                        goto LABEL_1582;
LABEL_1564:
                                                      v977 = v1125;
                                                      if (v1125)
                                                      {
                                                        v978 = 0;
                                                        v979 = 0;
                                                        if (v976 >= 0)
                                                          v980 = v976;
                                                        else
                                                          v980 = -v976;
                                                        if (v1125 >= 0)
                                                          v981 = v1125;
                                                        else
                                                          v981 = -v1125;
                                                        v982 = v980 - 1;
                                                        v983 = v982 + v981;
                                                        if (v982 + v981 >= 0x40)
                                                          v983 = 64;
                                                        __dst[64] = v983;
                                                        v984 = (int *)v1124;
                                                        do
                                                        {
                                                          v986 = 0;
                                                          v987 = 0;
                                                          if (v978 >= v982)
                                                            v988 = v982;
                                                          else
                                                            v988 = v978;
                                                          v989 = ~v988;
                                                          v990 = v1152;
                                                          do
                                                          {
                                                            if (v978 + v986 < v981)
                                                            {
                                                              v991 = v984[v986] * (unint64_t)*v990;
                                                              v979 += v991;
                                                              v987 += HIDWORD(v991);
                                                            }
                                                            --v986;
                                                            ++v990;
                                                          }
                                                          while (v989 != v986);
                                                          __dst[v978] = v979;
                                                          v979 = v987 + HIDWORD(v979);
                                                          ++v978;
                                                          v985 = __dst[64];
                                                          ++v984;
                                                        }
                                                        while (v978 < __dst[64]);
                                                        if (v979 && __dst[64] != 64)
                                                        {
                                                          __dst[__dst[64]] = v979;
                                                          v985 = ++__dst[64];
                                                        }
                                                        if (v976 > 0 != v977 > 0)
                                                          __dst[64] = -v985;
LABEL_1588:
                                                        if (v976 && (v992 = __src[64]) != 0)
                                                        {
                                                          v993 = 0;
                                                          v994 = 0;
                                                          if (__src[64] >= 0)
                                                            v995 = __src[64];
                                                          else
                                                            v995 = -__src[64];
                                                          if (v976 >= 0)
                                                            v996 = v976;
                                                          else
                                                            v996 = -v976;
                                                          v997 = v995 - 1;
                                                          v998 = v997 + v996;
                                                          if (v997 + v996 >= 0x40)
                                                            v998 = 64;
                                                          v1116 = v998;
                                                          v999 = v1152;
                                                          do
                                                          {
                                                            v1001 = 0;
                                                            v1002 = 0;
                                                            if (v993 >= v997)
                                                              v1003 = v997;
                                                            else
                                                              v1003 = v993;
                                                            v1004 = ~v1003;
                                                            v1005 = __src;
                                                            do
                                                            {
                                                              if (v993 + v1001 < v996)
                                                              {
                                                                v1006 = v999[v1001] * (unint64_t)*v1005;
                                                                v994 += v1006;
                                                                v1002 += HIDWORD(v1006);
                                                              }
                                                              --v1001;
                                                              ++v1005;
                                                            }
                                                            while (v1004 != v1001);
                                                            v1115[v993] = v994;
                                                            v994 = v1002 + HIDWORD(v994);
                                                            ++v993;
                                                            v1000 = v1116;
                                                            ++v999;
                                                          }
                                                          while (v993 < v1116);
                                                          if (v994 && v1116 != 64)
                                                          {
                                                            v1115[v1116] = v994;
                                                            v1000 = ++v1116;
                                                          }
                                                          if (v976 > 0 != v992 > 0)
                                                            v1116 = -v1000;
                                                        }
                                                        else
                                                        {
                                                          v1116 = 0;
                                                        }
                                                        v1007 = v1129[64];
                                                        if (v1129[64] && (v1008 = v1149) != 0)
                                                        {
                                                          v1009 = 0;
                                                          v1010 = 0;
                                                          if (v1129[64] >= 0)
                                                            v1011 = v1129[64];
                                                          else
                                                            v1011 = -v1129[64];
                                                          if (v1149 >= 0)
                                                            v1012 = v1149;
                                                          else
                                                            v1012 = -v1149;
                                                          v1013 = v1011 - 1;
                                                          v1014 = v1013 + v1012;
                                                          if (v1013 + v1012 >= 0x40)
                                                            v1014 = 64;
                                                          v1114 = v1014;
                                                          v1015 = v1148;
                                                          do
                                                          {
                                                            v1017 = 0;
                                                            v1018 = 0;
                                                            if (v1009 >= v1013)
                                                              v1019 = v1013;
                                                            else
                                                              v1019 = v1009;
                                                            v1020 = ~v1019;
                                                            v1021 = v1129;
                                                            do
                                                            {
                                                              if (v1009 + v1017 < v1012)
                                                              {
                                                                v1022 = v1015[v1017]
                                                                      * (unint64_t)*v1021;
                                                                v1010 += v1022;
                                                                v1018 += HIDWORD(v1022);
                                                              }
                                                              --v1017;
                                                              ++v1021;
                                                            }
                                                            while (v1020 != v1017);
                                                            v1113[v1009] = v1010;
                                                            v1010 = v1018 + HIDWORD(v1010);
                                                            ++v1009;
                                                            v1016 = v1114;
                                                            ++v1015;
                                                          }
                                                          while (v1009 < v1114);
                                                          if (v1010 && v1114 != 64)
                                                          {
                                                            v1113[v1114] = v1010;
                                                            v1016 = ++v1114;
                                                          }
                                                          if (v1007 > 0 != v1008 > 0)
                                                            v1114 = -v1016;
                                                        }
                                                        else
                                                        {
                                                          v1114 = 0;
                                                        }
                                                        sub_20EED4F68(v1117, v1115, v1113);
                                                        v1023 = v1134;
                                                        if (v1134 && (v1024 = v1118) != 0)
                                                        {
                                                          v1025 = 0;
                                                          v1026 = 0;
                                                          if (v1134 >= 0)
                                                            v1027 = v1134;
                                                          else
                                                            v1027 = -v1134;
                                                          if (v1118 >= 0)
                                                            v1028 = v1118;
                                                          else
                                                            v1028 = -v1118;
                                                          v1029 = v1027 - 1;
                                                          v1030 = v1029 + v1028;
                                                          if (v1029 + v1028 >= 0x40)
                                                            v1030 = 64;
                                                          v1120 = v1030;
                                                          v1031 = v1117;
                                                          do
                                                          {
                                                            v1033 = 0;
                                                            v1034 = 0;
                                                            if (v1025 >= v1029)
                                                              v1035 = v1029;
                                                            else
                                                              v1035 = v1025;
                                                            v1036 = ~v1035;
                                                            v1037 = v1133;
                                                            do
                                                            {
                                                              if (v1025 + v1033 < v1028)
                                                              {
                                                                v1038 = v1031[v1033]
                                                                      * (unint64_t)*v1037;
                                                                v1026 += v1038;
                                                                v1034 += HIDWORD(v1038);
                                                              }
                                                              --v1033;
                                                              ++v1037;
                                                            }
                                                            while (v1036 != v1033);
                                                            v1119[v1025] = v1026;
                                                            v1026 = v1034 + HIDWORD(v1026);
                                                            ++v1025;
                                                            v1032 = v1120;
                                                            ++v1031;
                                                          }
                                                          while (v1025 < v1120);
                                                          if (v1026 && v1120 != 64)
                                                          {
                                                            v1119[v1120] = v1026;
                                                            v1032 = ++v1120;
                                                          }
                                                          if (v1023 > 0 != v1024 > 0)
                                                            v1120 = -v1032;
                                                        }
                                                        else
                                                        {
                                                          v1120 = 0;
                                                        }
                                                        sub_20EED4C8C(v1127, __dst, v1119);
                                                        memcpy(v1143, v1127, sizeof(v1143));
                                                        v1039 = v1134;
                                                        if (v1134 && (v1040 = v1128[64]) != 0)
                                                        {
                                                          v1041 = 0;
                                                          v1042 = 0;
                                                          if (v1134 >= 0)
                                                            v1043 = v1134;
                                                          else
                                                            v1043 = -v1134;
                                                          if (v1128[64] >= 0)
                                                            v1044 = v1128[64];
                                                          else
                                                            v1044 = -v1128[64];
                                                          v1045 = v1043 - 1;
                                                          v1046 = v1045 + v1044;
                                                          if (v1045 + v1044 >= 0x40)
                                                            v1046 = 64;
                                                          v1127[64] = v1046;
                                                          v1047 = v1128;
                                                          do
                                                          {
                                                            v1049 = 0;
                                                            v1050 = 0;
                                                            if (v1041 >= v1045)
                                                              v1051 = v1045;
                                                            else
                                                              v1051 = v1041;
                                                            v1052 = ~v1051;
                                                            v1053 = v1133;
                                                            do
                                                            {
                                                              if (v1041 + v1049 < v1044)
                                                              {
                                                                v1054 = v1047[v1049]
                                                                      * (unint64_t)*v1053;
                                                                v1042 += v1054;
                                                                v1050 += HIDWORD(v1054);
                                                              }
                                                              --v1049;
                                                              ++v1053;
                                                            }
                                                            while (v1052 != v1049);
                                                            v1127[v1041] = v1042;
                                                            v1042 = v1050 + HIDWORD(v1042);
                                                            ++v1041;
                                                            v1048 = v1127[64];
                                                            ++v1047;
                                                          }
                                                          while (v1041 < (int)v1127[64]);
                                                          if (v1042 && v1127[64] != 64)
                                                          {
                                                            v1127[v1127[64]] = v1042;
                                                            v1048 = ++v1127[64];
                                                          }
                                                          if (v1039 > 0 == v1040 > 0)
                                                          {
                                                            memcpy(v1144, v1127, sizeof(v1144));
                                                            if (!v15)
                                                              goto LABEL_1689;
                                                          }
                                                          else
                                                          {
                                                            v1127[64] = -v1048;
                                                            memcpy(v1144, v1127, sizeof(v1144));
                                                            if (!v15)
                                                            {
LABEL_1689:
                                                              if (!a9)
                                                                return;
LABEL_1697:
                                                              if (__src[64])
                                                              {
                                                                v1064 = 0;
                                                                v1065 = 0;
                                                                if (__src[64] >= 0)
                                                                  v1066 = __src[64];
                                                                else
                                                                  v1066 = -__src[64];
                                                                v1067 = v1066 - 1 + v1066;
                                                                if (v1067 >= 0x40)
                                                                  LODWORD(v1067) = 64;
                                                                v1123[64] = v1067;
                                                                do
                                                                {
                                                                  v1068 = 0;
                                                                  v1069 = 0;
                                                                  if (v1064 >= v1066 - 1)
                                                                    v1070 = v1066 - 1;
                                                                  else
                                                                    v1070 = v1064;
                                                                  v1071 = v1070 + 1;
                                                                  v1072 = v1064;
                                                                  do
                                                                  {
                                                                    if (v1072 < v1066)
                                                                    {
                                                                      v1073 = __src[v1072]
                                                                            * (unint64_t)__src[v1068];
                                                                      v1065 += v1073;
                                                                      v1069 += HIDWORD(v1073);
                                                                    }
                                                                    ++v1068;
                                                                    --v1072;
                                                                  }
                                                                  while (v1071 != v1068);
                                                                  v1123[v1064] = v1065;
                                                                  v1065 = v1069 + HIDWORD(v1065);
                                                                  ++v1064;
                                                                }
                                                                while (v1064 < v1123[64]);
                                                                if (v1065 && v1123[64] != 64)
                                                                  v1123[v1123[64]++] = v1065;
                                                              }
                                                              else
                                                              {
                                                                v1123[64] = 0;
                                                              }
                                                              if (v1129[64])
                                                              {
                                                                v1074 = 0;
                                                                v1075 = 0;
                                                                if (v1129[64] >= 0)
                                                                  v1076 = v1129[64];
                                                                else
                                                                  v1076 = -v1129[64];
                                                                v1077 = v1076 - 1 + v1076;
                                                                if (v1077 >= 0x40)
                                                                  LODWORD(v1077) = 64;
                                                                v1122 = v1077;
                                                                do
                                                                {
                                                                  v1078 = 0;
                                                                  v1079 = 0;
                                                                  if (v1074 >= v1076 - 1)
                                                                    v1080 = v1076 - 1;
                                                                  else
                                                                    v1080 = v1074;
                                                                  v1081 = v1080 + 1;
                                                                  v1082 = v1074;
                                                                  do
                                                                  {
                                                                    if (v1082 < v1076)
                                                                    {
                                                                      v1083 = v1129[v1082]
                                                                            * (unint64_t)v1129[v1078];
                                                                      v1075 += v1083;
                                                                      v1079 += HIDWORD(v1083);
                                                                    }
                                                                    ++v1078;
                                                                    --v1082;
                                                                  }
                                                                  while (v1081 != v1078);
                                                                  v1121[v1074] = v1075;
                                                                  v1075 = v1079 + HIDWORD(v1075);
                                                                  ++v1074;
                                                                }
                                                                while (v1074 < v1122);
                                                                if (v1075 && v1122 != 64)
                                                                  v1121[v1122++] = v1075;
                                                              }
                                                              else
                                                              {
                                                                v1122 = 0;
                                                              }
                                                              sub_20EED4F68(v1124, v1123, (int *)v1121);
                                                              v1084 = v1137;
                                                              if (!v1137)
                                                                goto LABEL_1780;
                                                              v1085 = v1125;
                                                              if (!v1125)
                                                                goto LABEL_1780;
                                                              v1086 = 0;
                                                              v1087 = 0;
                                                              if (v1137 >= 0)
                                                                v1088 = v1137;
                                                              else
                                                                v1088 = -v1137;
                                                              if (v1125 >= 0)
                                                                v1089 = v1125;
                                                              else
                                                                v1089 = -v1125;
                                                              v1090 = v1088 - 1;
                                                              v1091 = v1088 - 1 + v1089;
                                                              if (v1091 >= 0x40)
                                                                LODWORD(v1091) = 64;
                                                              __dst[64] = v1091;
                                                              v1092 = (int *)v1124;
                                                              do
                                                              {
                                                                v1094 = 0;
                                                                v1095 = 0;
                                                                if (v1086 >= v1090)
                                                                  v1096 = v1090;
                                                                else
                                                                  v1096 = v1086;
                                                                v1097 = ~v1096;
                                                                v1098 = (unsigned int *)&v1135;
                                                                do
                                                                {
                                                                  if (v1086 + v1094 < v1089)
                                                                  {
                                                                    v1099 = v1092[v1094]
                                                                          * (unint64_t)*v1098;
                                                                    v1087 += v1099;
                                                                    v1095 += HIDWORD(v1099);
                                                                  }
                                                                  --v1094;
                                                                  ++v1098;
                                                                }
                                                                while (v1097 != v1094);
                                                                __dst[v1086] = v1087;
                                                                v1087 = v1095 + HIDWORD(v1087);
                                                                ++v1086;
                                                                v1093 = __dst[64];
                                                                ++v1092;
                                                              }
                                                              while (v1086 < __dst[64]);
                                                              if (v1087 && __dst[64] != 64)
                                                              {
                                                                __dst[__dst[64]] = v1087;
                                                                v1093 = ++__dst[64];
                                                              }
                                                              if (v1084 > 0 != v1085 > 0)
                                                              {
                                                                v1093 = -v1093;
                                                                __dst[64] = v1093;
                                                              }
                                                              if (v1093)
                                                              {
                                                                v1100 = 0;
                                                                v1101 = 0;
                                                                if (v512 >= 0.0)
                                                                  LODWORD(v1102) = 1;
                                                                else
                                                                  LODWORD(v1102) = -1;
                                                                if (v1093 >= 0)
                                                                  v1103 = v1093;
                                                                else
                                                                  v1103 = -v1093;
                                                                if ((v1102 & 0x80000000) == 0)
                                                                  v1102 = v1102;
                                                                else
                                                                  v1102 = -(int)v1102;
                                                                v1104 = v1103 - 1;
                                                                v1105 = v1104 + v1102;
                                                                if (v1104 + v1102 >= 0x40)
                                                                  v1105 = 64;
                                                                v1127[64] = v1105;
                                                                do
                                                                {
                                                                  v1107 = 0;
                                                                  if (v1100 >= v1104)
                                                                    v1108 = v1104;
                                                                  else
                                                                    v1108 = v1100;
                                                                  v1109 = ~v1108;
                                                                  v1110 = __dst;
                                                                  do
                                                                  {
                                                                    if (v1100 + v1107 < v1102)
                                                                      v1101 += *v1110;
                                                                    --v1107;
                                                                    ++v1110;
                                                                  }
                                                                  while (v1109 != v1107);
                                                                  v1127[v1100] = v1101;
                                                                  v1101 >>= 32;
                                                                  ++v1100;
                                                                  v1106 = v1127[64];
                                                                }
                                                                while (v1100 < (int)v1127[64]);
                                                                if (v1101 && v1127[64] != 64)
                                                                {
                                                                  v1127[v1127[64]] = v1101;
                                                                  v1106 = ++v1127[64];
                                                                }
                                                                if (v512 >= 0.0 != v1093 > 0)
                                                                  v1127[64] = -v1106;
                                                              }
                                                              else
                                                              {
LABEL_1780:
                                                                v1127[64] = 0;
                                                              }
                                                              memcpy(v1145, v1127, sizeof(v1145));
                                                              v1111 = sub_20EEDF874();
                                                              v1061 = ldexp(*(long double *)&v1111, v1112) / v557;
                                                              goto LABEL_1782;
                                                            }
                                                          }
                                                        }
                                                        else
                                                        {
                                                          v1127[64] = 0;
                                                          memcpy(v1144, v1127, sizeof(v1144));
                                                          if (!v15)
                                                            goto LABEL_1689;
                                                        }
                                                        v1062 = sub_20EEDF874();
                                                        *(long double *)v17 = ldexp(*(long double *)&v1062, v1063)
                                                                            / v557;
                                                        if (!a9)
                                                          return;
                                                        goto LABEL_1697;
                                                      }
LABEL_1582:
                                                      __dst[64] = 0;
                                                      goto LABEL_1588;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v1123[64] = 0;
                                                    LODWORD(v966) = v1129[64];
                                                    if (v1129[64])
                                                      goto LABEL_1543;
                                                  }
                                                  v1122 = 0;
                                                  sub_20EED4F68(v1124, v1123, (int *)v1121);
                                                  v976 = v1153;
                                                  if (!v1153)
                                                    goto LABEL_1582;
                                                  goto LABEL_1564;
                                                }
LABEL_1443:
                                                __dst[64] = 0;
                                                goto LABEL_1449;
                                              }
                                            }
                                            else
                                            {
                                              v1123[64] = 0;
                                              LODWORD(v885) = v1129[64];
                                              if (v1129[64])
                                                goto LABEL_1401;
                                            }
                                            v1122 = 0;
                                            sub_20EED4F68(v1124, v1123, (int *)v1121);
                                            v895 = v1155;
                                            if (!v1155)
                                              goto LABEL_1443;
                                            goto LABEL_1425;
                                          }
                                        }
                                        else
                                        {
                                          v557 = v508 * ldexp(0.0, 0);
                                          if (!v13)
                                            goto LABEL_1380;
                                        }
                                        if (__src[64])
                                        {
                                          v561 = 0;
                                          v562 = 0;
                                          if (__src[64] >= 0)
                                            v563 = __src[64];
                                          else
                                            v563 = -__src[64];
                                          v564 = v563 - 1 + v563;
                                          if (v564 >= 0x40)
                                            LODWORD(v564) = 64;
                                          v1123[64] = v564;
                                          do
                                          {
                                            v565 = 0;
                                            v566 = 0;
                                            if (v561 >= v563 - 1)
                                              v567 = v563 - 1;
                                            else
                                              v567 = v561;
                                            v568 = v567 + 1;
                                            v569 = v561;
                                            do
                                            {
                                              if (v569 < v563)
                                              {
                                                v570 = __src[v569]
                                                     * (unint64_t)__src[v565];
                                                v562 += v570;
                                                v566 += HIDWORD(v570);
                                              }
                                              ++v565;
                                              --v569;
                                            }
                                            while (v568 != v565);
                                            v1123[v561] = v562;
                                            v562 = v566 + HIDWORD(v562);
                                            ++v561;
                                          }
                                          while (v561 < v1123[64]);
                                          if (v562 && v1123[64] != 64)
                                            v1123[v1123[64]++] = v562;
                                          LODWORD(v571) = v1129[64];
                                          if (v1129[64])
                                          {
LABEL_877:
                                            v572 = 0;
                                            v573 = 0;
                                            if ((v571 & 0x80000000) == 0)
                                              v571 = v571;
                                            else
                                              v571 = -(int)v571;
                                            v574 = v571 - 1 + v571;
                                            if (v574 >= 0x40)
                                              LODWORD(v574) = 64;
                                            v1122 = v574;
                                            do
                                            {
                                              v575 = 0;
                                              v576 = 0;
                                              if (v572 >= v571 - 1)
                                                v577 = v571 - 1;
                                              else
                                                v577 = v572;
                                              v578 = v577 + 1;
                                              v579 = v572;
                                              do
                                              {
                                                if (v579 < v571)
                                                {
                                                  v580 = v1129[v579]
                                                       * (unint64_t)v1129[v575];
                                                  v573 += v580;
                                                  v576 += HIDWORD(v580);
                                                }
                                                ++v575;
                                                --v579;
                                              }
                                              while (v578 != v575);
                                              v1121[v572] = v573;
                                              v573 = v576 + HIDWORD(v573);
                                              ++v572;
                                            }
                                            while (v572 < v1122);
                                            if (v573 && v1122 != 64)
                                              v1121[v1122++] = v573;
                                            sub_20EED4F68(v1124, v1123, (int *)v1121);
                                            v581 = v1151;
                                            if (!v1151)
                                              goto LABEL_1116;
LABEL_1098:
                                            v702 = v1125;
                                            if (v1125)
                                            {
                                              v703 = 0;
                                              v704 = 0;
                                              if (v581 >= 0)
                                                v705 = v581;
                                              else
                                                v705 = -v581;
                                              if (v1125 >= 0)
                                                v706 = v1125;
                                              else
                                                v706 = -v1125;
                                              v707 = v705 - 1;
                                              v708 = v707 + v706;
                                              if (v707 + v706 >= 0x40)
                                                v708 = 64;
                                              __dst[64] = v708;
                                              v709 = (int *)v1124;
                                              do
                                              {
                                                v711 = 0;
                                                v712 = 0;
                                                if (v703 >= v707)
                                                  v713 = v707;
                                                else
                                                  v713 = v703;
                                                v714 = ~v713;
                                                v715 = v1150;
                                                do
                                                {
                                                  if (v703 + v711 < v706)
                                                  {
                                                    v716 = v709[v711] * (unint64_t)*v715;
                                                    v704 += v716;
                                                    v712 += HIDWORD(v716);
                                                  }
                                                  --v711;
                                                  ++v715;
                                                }
                                                while (v714 != v711);
                                                __dst[v703] = v704;
                                                v704 = v712 + HIDWORD(v704);
                                                ++v703;
                                                v710 = __dst[64];
                                                ++v709;
                                              }
                                              while (v703 < __dst[64]);
                                              if (v704 && __dst[64] != 64)
                                              {
                                                __dst[__dst[64]] = v704;
                                                v710 = ++__dst[64];
                                              }
                                              if (v581 > 0 != v702 > 0)
                                                __dst[64] = -v710;
LABEL_1122:
                                              v717 = __src[64];
                                              if (__src[64] && (v718 = v1155) != 0)
                                              {
                                                v719 = 0;
                                                v720 = 0;
                                                if (__src[64] >= 0)
                                                  v721 = __src[64];
                                                else
                                                  v721 = -__src[64];
                                                if (v1155 >= 0)
                                                  v722 = v1155;
                                                else
                                                  v722 = -v1155;
                                                v723 = v721 - 1;
                                                v724 = v723 + v722;
                                                if (v723 + v722 >= 0x40)
                                                  v724 = 64;
                                                v1116 = v724;
                                                v725 = v1154;
                                                do
                                                {
                                                  v727 = 0;
                                                  v728 = 0;
                                                  if (v719 >= v723)
                                                    v729 = v723;
                                                  else
                                                    v729 = v719;
                                                  v730 = ~v729;
                                                  v731 = __src;
                                                  do
                                                  {
                                                    if (v719 + v727 < v722)
                                                    {
                                                      v732 = v725[v727] * (unint64_t)*v731;
                                                      v720 += v732;
                                                      v728 += HIDWORD(v732);
                                                    }
                                                    --v727;
                                                    ++v731;
                                                  }
                                                  while (v730 != v727);
                                                  v1115[v719] = v720;
                                                  v720 = v728 + HIDWORD(v720);
                                                  ++v719;
                                                  v726 = v1116;
                                                  ++v725;
                                                }
                                                while (v719 < v1116);
                                                if (v720 && v1116 != 64)
                                                {
                                                  v1115[v1116] = v720;
                                                  v726 = ++v1116;
                                                }
                                                if (v717 > 0 != v718 > 0)
                                                  v1116 = -v726;
                                              }
                                              else
                                              {
                                                v1116 = 0;
                                              }
                                              if (v581 && (v733 = v1129[64]) != 0)
                                              {
                                                v734 = 0;
                                                v735 = 0;
                                                if (v1129[64] >= 0)
                                                  v736 = v1129[64];
                                                else
                                                  v736 = -v1129[64];
                                                if (v581 >= 0)
                                                  v737 = v581;
                                                else
                                                  v737 = -v581;
                                                v738 = v736 - 1;
                                                v739 = v738 + v737;
                                                if (v738 + v737 >= 0x40)
                                                  v739 = 64;
                                                v1114 = v739;
                                                v740 = v1150;
                                                do
                                                {
                                                  v742 = 0;
                                                  v743 = 0;
                                                  if (v734 >= v738)
                                                    v744 = v738;
                                                  else
                                                    v744 = v734;
                                                  v745 = ~v744;
                                                  v746 = v1129;
                                                  do
                                                  {
                                                    if (v734 + v742 < v737)
                                                    {
                                                      v747 = v740[v742]
                                                           * (unint64_t)*v746;
                                                      v735 += v747;
                                                      v743 += HIDWORD(v747);
                                                    }
                                                    --v742;
                                                    ++v746;
                                                  }
                                                  while (v745 != v742);
                                                  v1113[v734] = v735;
                                                  v735 = v743 + HIDWORD(v735);
                                                  ++v734;
                                                  v741 = v1114;
                                                  ++v740;
                                                }
                                                while (v734 < v1114);
                                                if (v735 && v1114 != 64)
                                                {
                                                  v1113[v1114] = v735;
                                                  v741 = ++v1114;
                                                }
                                                if (v581 > 0 != v733 > 0)
                                                  v1114 = -v741;
                                              }
                                              else
                                              {
                                                v1114 = 0;
                                              }
                                              sub_20EED4F68(v1117, v1115, v1113);
                                              v748 = v1132;
                                              if (v1132 && (v749 = v1118) != 0)
                                              {
                                                v750 = 0;
                                                v751 = 0;
                                                if (v1132 >= 0)
                                                  v752 = v1132;
                                                else
                                                  v752 = -v1132;
                                                if (v1118 >= 0)
                                                  v753 = v1118;
                                                else
                                                  v753 = -v1118;
                                                v754 = v752 - 1;
                                                v755 = v754 + v753;
                                                if (v754 + v753 >= 0x40)
                                                  v755 = 64;
                                                v1120 = v755;
                                                v756 = v1117;
                                                do
                                                {
                                                  v758 = 0;
                                                  v759 = 0;
                                                  if (v750 >= v754)
                                                    v760 = v754;
                                                  else
                                                    v760 = v750;
                                                  v761 = ~v760;
                                                  v762 = v1131;
                                                  do
                                                  {
                                                    if (v750 + v758 < v753)
                                                    {
                                                      v763 = v756[v758] * (unint64_t)*v762;
                                                      v751 += v763;
                                                      v759 += HIDWORD(v763);
                                                    }
                                                    --v758;
                                                    ++v762;
                                                  }
                                                  while (v761 != v758);
                                                  v1119[v750] = v751;
                                                  v751 = v759 + HIDWORD(v751);
                                                  ++v750;
                                                  v757 = v1120;
                                                  ++v756;
                                                }
                                                while (v750 < v1120);
                                                if (v751 && v1120 != 64)
                                                {
                                                  v1119[v1120] = v751;
                                                  v757 = ++v1120;
                                                }
                                                if (v748 > 0 != v749 > 0)
                                                  v1120 = -v757;
                                              }
                                              else
                                              {
                                                v1120 = 0;
                                              }
                                              sub_20EED4C8C(v1127, __dst, v1119);
                                              memcpy(v1142, v1127, sizeof(v1142));
                                              if (__src[64])
                                              {
                                                v764 = 0;
                                                v765 = 0;
                                                if (__src[64] >= 0)
                                                  v766 = __src[64];
                                                else
                                                  v766 = -__src[64];
                                                v767 = v766 - 1 + v766;
                                                if (v767 >= 0x40)
                                                  LODWORD(v767) = 64;
                                                v1123[64] = v767;
                                                do
                                                {
                                                  v768 = 0;
                                                  v769 = 0;
                                                  if (v764 >= v766 - 1)
                                                    v770 = v766 - 1;
                                                  else
                                                    v770 = v764;
                                                  v771 = v770 + 1;
                                                  v772 = v764;
                                                  do
                                                  {
                                                    if (v772 < v766)
                                                    {
                                                      v773 = __src[v772]
                                                           * (unint64_t)__src[v768];
                                                      v765 += v773;
                                                      v769 += HIDWORD(v773);
                                                    }
                                                    ++v768;
                                                    --v772;
                                                  }
                                                  while (v771 != v768);
                                                  v1123[v764] = v765;
                                                  v765 = v769 + HIDWORD(v765);
                                                  ++v764;
                                                }
                                                while (v764 < v1123[64]);
                                                if (v765 && v1123[64] != 64)
                                                  v1123[v1123[64]++] = v765;
                                                LODWORD(v774) = v1129[64];
                                                if (v1129[64])
                                                {
LABEL_1216:
                                                  v775 = 0;
                                                  v776 = 0;
                                                  if ((v774 & 0x80000000) == 0)
                                                    v774 = v774;
                                                  else
                                                    v774 = -(int)v774;
                                                  v777 = v774 - 1 + v774;
                                                  if (v777 >= 0x40)
                                                    LODWORD(v777) = 64;
                                                  v1122 = v777;
                                                  do
                                                  {
                                                    v778 = 0;
                                                    v779 = 0;
                                                    if (v775 >= v774 - 1)
                                                      v780 = v774 - 1;
                                                    else
                                                      v780 = v775;
                                                    v781 = v780 + 1;
                                                    v782 = v775;
                                                    do
                                                    {
                                                      if (v782 < v774)
                                                      {
                                                        v783 = v1129[v782]
                                                             * (unint64_t)v1129[v778];
                                                        v776 += v783;
                                                        v779 += HIDWORD(v783);
                                                      }
                                                      ++v778;
                                                      --v782;
                                                    }
                                                    while (v781 != v778);
                                                    v1121[v775] = v776;
                                                    v776 = v779 + HIDWORD(v776);
                                                    ++v775;
                                                  }
                                                  while (v775 < v1122);
                                                  if (v776 && v1122 != 64)
                                                    v1121[v1122++] = v776;
                                                  sub_20EED4F68(v1124, v1123, (int *)v1121);
                                                  v784 = v1149;
                                                  if (!v1149)
                                                    goto LABEL_1273;
LABEL_1255:
                                                  v795 = v1125;
                                                  if (v1125)
                                                  {
                                                    v796 = 0;
                                                    v797 = 0;
                                                    if (v784 >= 0)
                                                      v798 = v784;
                                                    else
                                                      v798 = -v784;
                                                    if (v1125 >= 0)
                                                      v799 = v1125;
                                                    else
                                                      v799 = -v1125;
                                                    v800 = v798 - 1;
                                                    v801 = v800 + v799;
                                                    if (v800 + v799 >= 0x40)
                                                      v801 = 64;
                                                    __dst[64] = v801;
                                                    v802 = (int *)v1124;
                                                    do
                                                    {
                                                      v804 = 0;
                                                      v805 = 0;
                                                      if (v796 >= v800)
                                                        v806 = v800;
                                                      else
                                                        v806 = v796;
                                                      v807 = ~v806;
                                                      v808 = v1148;
                                                      do
                                                      {
                                                        if (v796 + v804 < v799)
                                                        {
                                                          v809 = v802[v804] * (unint64_t)*v808;
                                                          v797 += v809;
                                                          v805 += HIDWORD(v809);
                                                        }
                                                        --v804;
                                                        ++v808;
                                                      }
                                                      while (v807 != v804);
                                                      __dst[v796] = v797;
                                                      v797 = v805 + HIDWORD(v797);
                                                      ++v796;
                                                      v803 = __dst[64];
                                                      ++v802;
                                                    }
                                                    while (v796 < __dst[64]);
                                                    if (v797 && __dst[64] != 64)
                                                    {
                                                      __dst[__dst[64]] = v797;
                                                      v803 = ++__dst[64];
                                                    }
                                                    if (v784 > 0 != v795 > 0)
                                                      __dst[64] = -v803;
                                                    goto LABEL_1279;
                                                  }
LABEL_1273:
                                                  __dst[64] = 0;
LABEL_1279:
                                                  v810 = __src[64];
                                                  if (__src[64] && (v811 = v1153) != 0)
                                                  {
                                                    v812 = 0;
                                                    v813 = 0;
                                                    if (__src[64] >= 0)
                                                      v814 = __src[64];
                                                    else
                                                      v814 = -__src[64];
                                                    if (v1153 >= 0)
                                                      v815 = v1153;
                                                    else
                                                      v815 = -v1153;
                                                    v816 = v814 - 1;
                                                    v817 = v816 + v815;
                                                    if (v816 + v815 >= 0x40)
                                                      v817 = 64;
                                                    v1116 = v817;
                                                    v818 = v1152;
                                                    do
                                                    {
                                                      v820 = 0;
                                                      v821 = 0;
                                                      if (v812 >= v816)
                                                        v822 = v816;
                                                      else
                                                        v822 = v812;
                                                      v823 = ~v822;
                                                      v824 = __src;
                                                      do
                                                      {
                                                        if (v812 + v820 < v815)
                                                        {
                                                          v825 = v818[v820] * (unint64_t)*v824;
                                                          v813 += v825;
                                                          v821 += HIDWORD(v825);
                                                        }
                                                        --v820;
                                                        ++v824;
                                                      }
                                                      while (v823 != v820);
                                                      v1115[v812] = v813;
                                                      v813 = v821 + HIDWORD(v813);
                                                      ++v812;
                                                      v819 = v1116;
                                                      ++v818;
                                                    }
                                                    while (v812 < v1116);
                                                    if (v813 && v1116 != 64)
                                                    {
                                                      v1115[v1116] = v813;
                                                      v819 = ++v1116;
                                                    }
                                                    if (v810 > 0 != v811 > 0)
                                                      v1116 = -v819;
                                                  }
                                                  else
                                                  {
                                                    v1116 = 0;
                                                  }
                                                  if (v784 && (v826 = v1129[64]) != 0)
                                                  {
                                                    v827 = 0;
                                                    v828 = 0;
                                                    if (v1129[64] >= 0)
                                                      v829 = v1129[64];
                                                    else
                                                      v829 = -v1129[64];
                                                    if (v784 >= 0)
                                                      v830 = v784;
                                                    else
                                                      v830 = -v784;
                                                    v831 = v829 - 1;
                                                    v832 = v831 + v830;
                                                    if (v831 + v830 >= 0x40)
                                                      v832 = 64;
                                                    v1114 = v832;
                                                    v833 = v1148;
                                                    do
                                                    {
                                                      v835 = 0;
                                                      v836 = 0;
                                                      if (v827 >= v831)
                                                        v837 = v831;
                                                      else
                                                        v837 = v827;
                                                      v838 = ~v837;
                                                      v839 = v1129;
                                                      do
                                                      {
                                                        if (v827 + v835 < v830)
                                                        {
                                                          v840 = v833[v835] * (unint64_t)*v839;
                                                          v828 += v840;
                                                          v836 += HIDWORD(v840);
                                                        }
                                                        --v835;
                                                        ++v839;
                                                      }
                                                      while (v838 != v835);
                                                      v1113[v827] = v828;
                                                      v828 = v836 + HIDWORD(v828);
                                                      ++v827;
                                                      v834 = v1114;
                                                      ++v833;
                                                    }
                                                    while (v827 < v1114);
                                                    if (v828 && v1114 != 64)
                                                    {
                                                      v1113[v1114] = v828;
                                                      v834 = ++v1114;
                                                    }
                                                    if (v784 > 0 != v826 > 0)
                                                      v1114 = -v834;
                                                  }
                                                  else
                                                  {
                                                    v1114 = 0;
                                                  }
                                                  sub_20EED4F68(v1117, v1115, v1113);
                                                  v841 = v1132;
                                                  if (v1132 && (v842 = v1118) != 0)
                                                  {
                                                    v843 = 0;
                                                    v844 = 0;
                                                    if (v1132 >= 0)
                                                      v845 = v1132;
                                                    else
                                                      v845 = -v1132;
                                                    if (v1118 >= 0)
                                                      v846 = v1118;
                                                    else
                                                      v846 = -v1118;
                                                    v847 = v845 - 1;
                                                    v848 = v847 + v846;
                                                    if (v847 + v846 >= 0x40)
                                                      v848 = 64;
                                                    v1120 = v848;
                                                    v849 = v1117;
                                                    do
                                                    {
                                                      v851 = 0;
                                                      v852 = 0;
                                                      if (v843 >= v847)
                                                        v853 = v847;
                                                      else
                                                        v853 = v843;
                                                      v854 = ~v853;
                                                      v855 = v1131;
                                                      do
                                                      {
                                                        if (v843 + v851 < v846)
                                                        {
                                                          v856 = v849[v851] * (unint64_t)*v855;
                                                          v844 += v856;
                                                          v852 += HIDWORD(v856);
                                                        }
                                                        --v851;
                                                        ++v855;
                                                      }
                                                      while (v854 != v851);
                                                      v1119[v843] = v844;
                                                      v844 = v852 + HIDWORD(v844);
                                                      ++v843;
                                                      v850 = v1120;
                                                      ++v849;
                                                    }
                                                    while (v843 < v1120);
                                                    if (v844 && v1120 != 64)
                                                    {
                                                      v1119[v1120] = v844;
                                                      v850 = ++v1120;
                                                    }
                                                    if (v841 > 0 != v842 > 0)
                                                      v1120 = -v850;
                                                  }
                                                  else
                                                  {
                                                    v1120 = 0;
                                                  }
                                                  sub_20EED4C8C(v1127, __dst, v1119);
                                                  memcpy(v1143, v1127, sizeof(v1143));
                                                  v857 = v1132;
                                                  if (v1132 && (v858 = v1128[64]) != 0)
                                                  {
                                                    v859 = 0;
                                                    v860 = 0;
                                                    if (v1132 >= 0)
                                                      v861 = v1132;
                                                    else
                                                      v861 = -v1132;
                                                    if (v1128[64] >= 0)
                                                      v862 = v1128[64];
                                                    else
                                                      v862 = -v1128[64];
                                                    v863 = v861 - 1;
                                                    v864 = v863 + v862;
                                                    if (v863 + v862 >= 0x40)
                                                      v864 = 64;
                                                    v1127[64] = v864;
                                                    v865 = v1128;
                                                    do
                                                    {
                                                      v867 = 0;
                                                      v868 = 0;
                                                      if (v859 >= v863)
                                                        v869 = v863;
                                                      else
                                                        v869 = v859;
                                                      v870 = ~v869;
                                                      v871 = v1131;
                                                      do
                                                      {
                                                        if (v859 + v867 < v862)
                                                        {
                                                          v872 = v865[v867] * (unint64_t)*v871;
                                                          v860 += v872;
                                                          v868 += HIDWORD(v872);
                                                        }
                                                        --v867;
                                                        ++v871;
                                                      }
                                                      while (v870 != v867);
                                                      v1127[v859] = v860;
                                                      v860 = v868 + HIDWORD(v860);
                                                      ++v859;
                                                      v866 = v1127[64];
                                                      ++v865;
                                                    }
                                                    while (v859 < (int)v1127[64]);
                                                    if (v860 && v1127[64] != 64)
                                                    {
                                                      v1127[v1127[64]] = v860;
                                                      v866 = ++v1127[64];
                                                    }
                                                    if (v857 > 0 != v858 > 0)
                                                      v1127[64] = -v866;
                                                  }
                                                  else
                                                  {
                                                    v1127[64] = 0;
                                                  }
                                                  memcpy(v1144, v1127, sizeof(v1144));
                                                  v873 = sub_20EEDF874();
                                                  *(long double *)(v17 + 8) = ldexp(*(long double *)&v873, v874) / v557;
                                                  goto LABEL_1380;
                                                }
                                              }
                                              else
                                              {
                                                v1123[64] = 0;
                                                LODWORD(v774) = v1129[64];
                                                if (v1129[64])
                                                  goto LABEL_1216;
                                              }
                                              v1122 = 0;
                                              sub_20EED4F68(v1124, v1123, (int *)v1121);
                                              v784 = v1149;
                                              if (!v1149)
                                                goto LABEL_1273;
                                              goto LABEL_1255;
                                            }
LABEL_1116:
                                            __dst[64] = 0;
                                            goto LABEL_1122;
                                          }
                                        }
                                        else
                                        {
                                          v1123[64] = 0;
                                          LODWORD(v571) = v1129[64];
                                          if (v1129[64])
                                            goto LABEL_877;
                                        }
                                        v1122 = 0;
                                        sub_20EED4F68(v1124, v1123, (int *)v1121);
                                        v581 = v1151;
                                        if (!v1151)
                                          goto LABEL_1116;
                                        goto LABEL_1098;
                                      }
                                    }
                                    v1125 = 0;
                                    goto LABEL_568;
                                  }
                                }
                                v1125 = 0;
                                goto LABEL_530;
                              }
                            }
                          }
                          else
                          {
                            LODWORD(v247) = 1;
                            v248 = v23[1];
                            v249 = v1137;
                            if (v1137)
                              goto LABEL_337;
                          }
                          v1142[64] = 0;
                          goto LABEL_361;
                        }
                      }
                    }
                    else
                    {
                      LODWORD(v231) = 1;
                      v232 = *v23;
                      v233 = v1137;
                      if (v1137)
                        goto LABEL_308;
                    }
                    v1142[64] = 0;
                    goto LABEL_335;
                  }
                }
LABEL_205:
                v1134 = 0;
                goto LABEL_206;
              }
            }
            v1138[64] = 0;
            v139 = v1150;
            v140 = v20[2];
            if (v140 > 0)
              goto LABEL_161;
            goto LABEL_204;
          }
        }
LABEL_135:
        v1134 = 0;
        goto LABEL_136;
      }
    }
    v1138[64] = 0;
    v107 = v21[1];
    if (v107 > 0)
      goto LABEL_109;
    goto LABEL_134;
  }
  if (v1153)
  {
    v97 = 0;
    v98 = 0;
    if (v1153 >= 0)
      v99 = v1153;
    else
      v99 = -v1153;
    v100 = v99 - 1 + v99;
    if (v100 >= 0x40)
      LODWORD(v100) = 64;
    v1138[64] = v100;
    do
    {
      v101 = 0;
      v102 = 0;
      if (v97 >= v99 - 1)
        v103 = v99 - 1;
      else
        v103 = v97;
      v104 = v103 + 1;
      v105 = v97;
      do
      {
        if (v105 < v99)
        {
          v106 = v1152[v105] * (unint64_t)v1152[v101];
          v98 += v106;
          v102 += HIDWORD(v106);
        }
        ++v101;
        --v105;
      }
      while (v104 != v101);
      v1138[v97] = v98;
      v98 = v102 + HIDWORD(v98);
      ++v97;
    }
    while (v97 < v1138[64]);
    if (v98 && v1138[64] != 64)
      v1138[v1138[64]++] = v98;
    LODWORD(v156) = v1149;
    if (v1149)
      goto LABEL_188;
LABEL_382:
    *(_DWORD *)&v1146[256] = 0;
    goto LABEL_383;
  }
  v1138[64] = 0;
  LODWORD(v156) = v1149;
  if (!v1149)
    goto LABEL_382;
LABEL_188:
  v157 = 0;
  v158 = 0;
  if ((v156 & 0x80000000) == 0)
    v156 = v156;
  else
    v156 = -(int)v156;
  v159 = v156 - 1 + v156;
  if (v159 >= 0x40)
    LODWORD(v159) = 64;
  *(_DWORD *)&v1146[256] = v159;
  do
  {
    v160 = 0;
    v161 = 0;
    if (v157 >= v156 - 1)
      v162 = v156 - 1;
    else
      v162 = v157;
    v163 = v162 + 1;
    v164 = v157;
    do
    {
      if (v164 < v156)
      {
        v165 = v1148[v164] * (unint64_t)v1148[v160];
        v158 += v165;
        v161 += HIDWORD(v165);
      }
      ++v160;
      --v164;
    }
    while (v163 != v160);
    *(_DWORD *)&v1146[4 * v157] = v158;
    v158 = v161 + HIDWORD(v158);
    ++v157;
  }
  while (v157 < *(int *)&v1146[256]);
  if (v158 && *(_DWORD *)&v1146[256] != 64)
  {
    *(_DWORD *)&v1146[4 * *(int *)&v1146[256]] = v158;
    ++*(_DWORD *)&v1146[256];
  }
LABEL_383:
  sub_20EED4F68(v1142, v1138, (int *)v1146);
  if ((v1142[64] & 0x80000000) == 0)
    v277 = v1142[64];
  else
    v277 = -v1142[64];
  if ((_DWORD)v277)
  {
    if (v277 == 1)
    {
      v278 = 0;
      LODWORD(v273) = v1142[0];
      v279 = (double)v273;
    }
    else if (v277 == 2)
    {
      v278 = 0;
      LODWORD(v273) = v1142[1];
      LODWORD(v274) = v1142[0];
      v279 = (double)v273 * 4294967300.0 + (double)v274;
    }
    else
    {
      v516 = &v1142[v277];
      LODWORD(v275) = *(v516 - 2);
      LODWORD(v273) = *(v516 - 1);
      LODWORD(v276) = *(v516 - 3);
      v279 = ((double)v273 * 4294967300.0 + (double)v275) * 4294967300.0 + (double)v276;
      v278 = 32 * v277 - 96;
    }
    if ((v1142[64] & 0x80000000) != 0)
      v279 = -v279;
  }
  else
  {
    v278 = 0;
    v279 = 0.0;
  }
  v517 = ldexp(v279, v278);
  sub_20EEDF71C(v1148, *v20 - (uint64_t)v21[2], (uint64_t)v1142);
  sub_20EEDF71C(v1152, v20[1] - (uint64_t)v21[3], (uint64_t)v1138);
  sub_20EED4C8C(v1146, v1142, v1138);
  sub_20EEDF71C(v1152, v23[1] - (uint64_t)v21[3], (uint64_t)v1142);
  sub_20EEDF71C(v1148, *v23 - (uint64_t)v21[2], (uint64_t)v1138);
  sub_20EED4C8C(v1133, v1142, v1138);
  sub_20EEDF71C(v1148, *v23 - (uint64_t)*v20, (uint64_t)v1142);
  sub_20EEDF71C(v1152, v23[1] - (uint64_t)v20[1], (uint64_t)v1138);
  sub_20EED4C8C(v1131, v1142, v1138);
  v518 = v1134;
  if (v1134 && (v519 = v1132) != 0)
  {
    v520 = 0;
    v521 = 0;
    if (v1134 >= 0)
      v522 = v1134;
    else
      v522 = -v1134;
    if (v1132 >= 0)
      v523 = v1132;
    else
      v523 = -v1132;
    v524 = v522 - 1;
    v525 = v524 + v523;
    if (v524 + v523 >= 0x40)
      v525 = 64;
    v1142[64] = v525;
    v526 = v1131;
    do
    {
      v528 = 0;
      v529 = 0;
      if (v520 >= v524)
        v530 = v524;
      else
        v530 = v520;
      v531 = ~v530;
      v532 = v1133;
      do
      {
        if (v520 + v528 < v523)
        {
          v533 = v526[v528] * (unint64_t)*v532;
          v521 += v533;
          v529 += HIDWORD(v533);
        }
        --v528;
        ++v532;
      }
      while (v531 != v528);
      v1142[v520] = v521;
      v521 = v529 + HIDWORD(v521);
      ++v520;
      v527 = v1142[64];
      ++v526;
    }
    while (v520 < (int)v1142[64]);
    if (v521 && v1142[64] != 64)
    {
      v1142[v1142[64]] = v521;
      v527 = ++v1142[64];
    }
    if (v518 > 0 != v519 > 0)
      v1142[64] = -v527;
  }
  else
  {
    v1142[64] = 0;
  }
  v534 = v517 + v517;
  memcpy(v1138, v1142, sizeof(v1138));
  v1139[0] = 1;
  v1139[64] = 1;
  if (v13)
  {
    v535 = v1149;
    if (v1149)
    {
      v536 = 0;
      v537 = 0;
      if (v19 == 2)
        LODWORD(v538) = 1;
      else
        LODWORD(v538) = -1;
      if (v1149 >= 0)
        v539 = v1149;
      else
        v539 = -v1149;
      if ((v538 & 0x80000000) == 0)
        v538 = v538;
      else
        v538 = -(int)v538;
      v540 = v539 - 1;
      v541 = v540 + v538;
      if (v540 + v538 >= 0x40)
        v541 = 64;
      __src[64] = v541;
      do
      {
        v543 = 0;
        v544 = 0;
        if (v536 >= v540)
          v545 = v540;
        else
          v545 = v536;
        v546 = ~v545;
        v547 = v1148;
        do
        {
          if (v536 + v543 < v538)
          {
            v548 = *v547;
            v537 += (2 * v548);
            v544 += v548 >> 31;
          }
          --v543;
          ++v547;
        }
        while (v546 != v543);
        __src[v536] = v537;
        v537 = v544 + HIDWORD(v537);
        ++v536;
        v542 = __src[64];
      }
      while (v536 < __src[64]);
      if (v537 && __src[64] != 64)
      {
        __src[__src[64]] = v537;
        v542 = ++__src[64];
      }
      if ((v19 == 2) != v535 > 0)
        __src[64] = -v542;
    }
    else
    {
      __src[64] = 0;
    }
    memcpy(v1142, __src, sizeof(v1142));
    if (v1153)
    {
      v593 = 0;
      v594 = 0;
      if (v1153 >= 0)
        v595 = v1153;
      else
        v595 = -v1153;
      v596 = v595 - 1 + v595;
      if (v596 >= 0x40)
        LODWORD(v596) = 64;
      v1127[64] = v596;
      do
      {
        v597 = 0;
        v598 = 0;
        if (v593 >= v595 - 1)
          v599 = v595 - 1;
        else
          v599 = v593;
        v600 = v599 + 1;
        v601 = v593;
        do
        {
          if (v601 < v595)
          {
            v602 = v1152[v601] * (unint64_t)v1152[v597];
            v594 += v602;
            v598 += HIDWORD(v602);
          }
          ++v597;
          --v601;
        }
        while (v600 != v597);
        v1127[v593] = v594;
        v594 = v598 + HIDWORD(v594);
        ++v593;
      }
      while (v593 < (int)v1127[64]);
      if (v594 && v1127[64] != 64)
        v1127[v1127[64]++] = v594;
    }
    else
    {
      v1127[64] = 0;
    }
    sub_20EEDF71C(v1127, v20[1] + (uint64_t)v21[3], (uint64_t)v1128);
    v603 = v1153;
    if (v1153 && (v604 = v1149) != 0)
    {
      v605 = 0;
      v606 = 0;
      if (v1153 >= 0)
        v607 = v1153;
      else
        v607 = -v1153;
      if (v1149 >= 0)
        v608 = v1149;
      else
        v608 = -v1149;
      v609 = v607 - 1;
      v610 = v609 + v608;
      if (v609 + v608 >= 0x40)
        v610 = 64;
      v1125 = v610;
      v611 = v1148;
      do
      {
        v613 = 0;
        v614 = 0;
        if (v605 >= v609)
          v615 = v609;
        else
          v615 = v605;
        v616 = ~v615;
        v617 = v1152;
        do
        {
          if (v605 + v613 < v608)
          {
            v618 = v611[v613] * (unint64_t)*v617;
            v606 += v618;
            v614 += HIDWORD(v618);
          }
          --v613;
          ++v617;
        }
        while (v616 != v613);
        v1124[v605] = v606;
        v606 = v614 + HIDWORD(v606);
        ++v605;
        v612 = v1125;
        ++v611;
      }
      while (v605 < v1125);
      if (v606 && v1125 != 64)
      {
        v1124[v1125] = v606;
        v612 = ++v1125;
      }
      if (v603 > 0 != v604 > 0)
        v1125 = -v612;
    }
    else
    {
      v1125 = 0;
    }
    sub_20EEDF71C(v1124, *v20 + (uint64_t)v21[2] - 2 * *v23, (uint64_t)__dst);
    sub_20EED4C8C(v1129, v1128, __dst);
    if (v1149)
    {
      v619 = 0;
      v620 = 0;
      if (v1149 >= 0)
        v621 = v1149;
      else
        v621 = -v1149;
      v622 = v621 - 1 + v621;
      if (v622 >= 0x40)
        LODWORD(v622) = 64;
      v1122 = v622;
      do
      {
        v623 = 0;
        v624 = 0;
        if (v619 >= v621 - 1)
          v625 = v621 - 1;
        else
          v625 = v619;
        v626 = v625 + 1;
        v627 = v619;
        do
        {
          if (v627 < v621)
          {
            v628 = v1148[v627] * (unint64_t)v1148[v623];
            v620 += v628;
            v624 += HIDWORD(v628);
          }
          ++v623;
          --v627;
        }
        while (v626 != v623);
        v1121[v619] = v620;
        v620 = v624 + HIDWORD(v620);
        ++v619;
      }
      while (v619 < v1122);
      if (v620 && v1122 != 64)
        v1121[v1122++] = v620;
    }
    else
    {
      v1122 = 0;
    }
    sub_20EEDF71C(v1121, 2 * v23[1], (uint64_t)v1123);
    sub_20EED4F68(__src, v1129, v1123);
    memcpy(v1143, __src, sizeof(v1143));
    v633 = sub_20EED840C((uint64_t)v24, v1142, v1138, v629, v630, v631, v632);
    *(long double *)(v17 + 8) = ldexp(*(long double *)&v633, v634) / v534;
  }
  if ((v15 & 1) != 0 || a9)
  {
    v635 = v1153;
    if (v1153)
    {
      v636 = 0;
      v637 = 0;
      if (v19 == 2)
        LODWORD(v638) = 1;
      else
        LODWORD(v638) = -1;
      if (v1153 >= 0)
        v639 = v1153;
      else
        v639 = -v1153;
      if ((v638 & 0x80000000) == 0)
        v638 = v638;
      else
        v638 = -(int)v638;
      v640 = v639 - 1;
      v641 = v640 + v638;
      if (v640 + v638 >= 0x40)
        v641 = 64;
      __src[64] = v641;
      do
      {
        v643 = 0;
        v644 = 0;
        if (v636 >= v640)
          v645 = v640;
        else
          v645 = v636;
        v646 = ~v645;
        v647 = v1152;
        do
        {
          if (v636 + v643 < v638)
          {
            v648 = *v647;
            v637 += (2 * v648);
            v644 += v648 >> 31;
          }
          --v643;
          ++v647;
        }
        while (v646 != v643);
        __src[v636] = v637;
        v637 = v644 + HIDWORD(v637);
        ++v636;
        v642 = __src[64];
      }
      while (v636 < __src[64]);
      if (v637 && __src[64] != 64)
      {
        __src[__src[64]] = v637;
        v642 = ++__src[64];
      }
      if ((v19 == 2) != v635 > 0)
        __src[64] = -v642;
    }
    else
    {
      __src[64] = 0;
    }
    memcpy(v1142, __src, sizeof(v1142));
    if (v1149)
    {
      v649 = 0;
      v650 = 0;
      if (v1149 >= 0)
        v651 = v1149;
      else
        v651 = -v1149;
      v652 = v651 - 1 + v651;
      if (v652 >= 0x40)
        LODWORD(v652) = 64;
      v1127[64] = v652;
      do
      {
        v653 = 0;
        v654 = 0;
        if (v649 >= v651 - 1)
          v655 = v651 - 1;
        else
          v655 = v649;
        v656 = v655 + 1;
        v657 = v649;
        do
        {
          if (v657 < v651)
          {
            v658 = v1148[v657] * (unint64_t)v1148[v653];
            v650 += v658;
            v654 += HIDWORD(v658);
          }
          ++v653;
          --v657;
        }
        while (v656 != v653);
        v1127[v649] = v650;
        v650 = v654 + HIDWORD(v650);
        ++v649;
      }
      while (v649 < (int)v1127[64]);
      if (v650 && v1127[64] != 64)
        v1127[v1127[64]++] = v650;
    }
    else
    {
      v1127[64] = 0;
    }
    sub_20EEDF71C(v1127, *v20 + (uint64_t)v21[2], (uint64_t)v1128);
    v659 = v1153;
    if (v1153 && (v660 = v1149) != 0)
    {
      v661 = 0;
      v662 = 0;
      if (v1153 >= 0)
        v663 = v1153;
      else
        v663 = -v1153;
      if (v1149 >= 0)
        v664 = v1149;
      else
        v664 = -v1149;
      v665 = v663 - 1;
      v666 = v665 + v664;
      if (v665 + v664 >= 0x40)
        v666 = 64;
      v1125 = v666;
      v667 = v1148;
      do
      {
        v669 = 0;
        v670 = 0;
        if (v661 >= v665)
          v671 = v665;
        else
          v671 = v661;
        v672 = ~v671;
        v673 = v1152;
        do
        {
          if (v661 + v669 < v664)
          {
            v674 = v667[v669] * (unint64_t)*v673;
            v662 += v674;
            v670 += HIDWORD(v674);
          }
          --v669;
          ++v673;
        }
        while (v672 != v669);
        v1124[v661] = v662;
        v662 = v670 + HIDWORD(v662);
        ++v661;
        v668 = v1125;
        ++v667;
      }
      while (v661 < v1125);
      if (v662 && v1125 != 64)
      {
        v1124[v1125] = v662;
        v668 = ++v1125;
      }
      if (v659 > 0 != v660 > 0)
        v1125 = -v668;
    }
    else
    {
      v1125 = 0;
    }
    sub_20EEDF71C(v1124, v20[1] + (uint64_t)v21[3] - 2 * v23[1], (uint64_t)__dst);
    sub_20EED4C8C(v1129, v1128, __dst);
    if (v1153)
    {
      v675 = 0;
      v676 = 0;
      if (v1153 >= 0)
        v677 = v1153;
      else
        v677 = -v1153;
      v678 = v677 - 1 + v677;
      if (v678 >= 0x40)
        LODWORD(v678) = 64;
      v1122 = v678;
      do
      {
        v679 = 0;
        v680 = 0;
        if (v675 >= v677 - 1)
          v681 = v677 - 1;
        else
          v681 = v675;
        v682 = v681 + 1;
        v683 = v675;
        do
        {
          if (v683 < v677)
          {
            v684 = v1152[v683] * (unint64_t)v1152[v679];
            v676 += v684;
            v680 += HIDWORD(v684);
          }
          ++v679;
          --v683;
        }
        while (v682 != v679);
        v1121[v675] = v676;
        v676 = v680 + HIDWORD(v676);
        ++v675;
      }
      while (v675 < v1122);
      if (v676 && v1122 != 64)
        v1121[v1122++] = v676;
    }
    else
    {
      v1122 = 0;
    }
    sub_20EEDF71C(v1121, 2 * *v23, (uint64_t)v1123);
    sub_20EED4F68(__src, v1129, v1123);
    memcpy(v1143, __src, sizeof(v1143));
    if (v15)
    {
      v689 = sub_20EED840C((uint64_t)v24, v1142, v1138, v685, v686, v687, v688);
      *(long double *)v17 = ldexp(*(long double *)&v689, v690) / v534;
    }
    if (a9)
    {
      *(_OWORD *)&v1144[192] = *(_OWORD *)&v1146[192];
      *(_OWORD *)&v1144[208] = *(_OWORD *)&v1146[208];
      *(_OWORD *)&v1144[224] = *(_OWORD *)&v1146[224];
      *(_OWORD *)&v1144[240] = *(_OWORD *)&v1146[240];
      *(_OWORD *)&v1144[128] = *(_OWORD *)&v1146[128];
      *(_OWORD *)&v1144[144] = *(_OWORD *)&v1146[144];
      *(_OWORD *)&v1144[160] = *(_OWORD *)&v1146[160];
      *(_OWORD *)&v1144[176] = *(_OWORD *)&v1146[176];
      *(_OWORD *)&v1144[64] = *(_OWORD *)&v1146[64];
      *(_OWORD *)&v1144[80] = *(_OWORD *)&v1146[80];
      *(_OWORD *)&v1144[96] = *(_OWORD *)&v1146[96];
      *(_OWORD *)&v1144[112] = *(_OWORD *)&v1146[112];
      *(_OWORD *)v1144 = *(_OWORD *)v1146;
      *(_OWORD *)&v1144[16] = *(_OWORD *)&v1146[16];
      *(_OWORD *)&v1144[32] = *(_OWORD *)&v1146[32];
      *(_OWORD *)&v1144[48] = *(_OWORD *)&v1146[48];
      if (*(int *)&v1146[256] >= 0)
        v691 = *(_DWORD *)&v1146[256];
      else
        v691 = -*(_DWORD *)&v1146[256];
      *(_DWORD *)&v1144[256] = v691;
      if (v1153)
      {
        v692 = 0;
        v693 = 0;
        if (v1153 >= 0)
          v694 = v1153;
        else
          v694 = -v1153;
        v695 = v694 - 1 + v694;
        if (v695 >= 0x40)
          LODWORD(v695) = 64;
        v1129[64] = v695;
        do
        {
          v696 = 0;
          v697 = 0;
          if (v692 >= v694 - 1)
            v698 = v694 - 1;
          else
            v698 = v692;
          v699 = v698 + 1;
          v700 = v692;
          do
          {
            if (v700 < v694)
            {
              v701 = v1152[v700] * (unint64_t)v1152[v696];
              v693 += v701;
              v697 += HIDWORD(v701);
            }
            ++v696;
            --v700;
          }
          while (v699 != v696);
          v1129[v692] = v693;
          v693 = v697 + HIDWORD(v693);
          ++v692;
        }
        while (v692 < v1129[64]);
        if (v693 && v1129[64] != 64)
          v1129[v1129[64]++] = v693;
        LODWORD(v785) = v1149;
        if (v1149)
          goto LABEL_1239;
      }
      else
      {
        v1129[64] = 0;
        LODWORD(v785) = v1149;
        if (v1149)
        {
LABEL_1239:
          v786 = 0;
          v787 = 0;
          if ((v785 & 0x80000000) == 0)
            v785 = v785;
          else
            v785 = -(int)v785;
          v788 = v785 - 1 + v785;
          if (v788 >= 0x40)
            LODWORD(v788) = 64;
          v1128[64] = v788;
          do
          {
            v789 = 0;
            v790 = 0;
            if (v786 >= v785 - 1)
              v791 = v785 - 1;
            else
              v791 = v786;
            v792 = v791 + 1;
            v793 = v786;
            do
            {
              if (v793 < v785)
              {
                v794 = v1148[v793] * (unint64_t)v1148[v789];
                v787 += v794;
                v790 += HIDWORD(v794);
              }
              ++v789;
              --v793;
            }
            while (v792 != v789);
            v1128[v786] = v787;
            v787 = v790 + HIDWORD(v787);
            ++v786;
          }
          while (v786 < v1128[64]);
          if (v787 && v1128[64] != 64)
            v1128[v1128[64]++] = v787;
          goto LABEL_1694;
        }
      }
      v1128[64] = 0;
LABEL_1694:
      sub_20EED4F68(__src, v1129, v1128);
      memcpy(v1140, __src, sizeof(v1140));
      v1059 = sub_20EED9B58(v24, v1142, v1138, v1055, v1056, v1057, v1058);
      v1061 = ldexp(*(long double *)&v1059, v1060) / v534;
LABEL_1782:
      *(double *)(v17 + 16) = v1061;
    }
  }
}

unsigned int *sub_20EEDF71C@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;

  if (a2 < 1)
  {
    if (a2 < 0)
    {
      v19 = -a2;
      v3 = (unint64_t)-a2 >> 32 ? -2 : -1;
      v20 = v3;
      v4 = result[64];
      if (v4)
        goto LABEL_6;
    }
LABEL_34:
    *(_DWORD *)(a3 + 256) = 0;
    return result;
  }
  v19 = a2;
  if (HIDWORD(a2))
    v3 = 2;
  else
    v3 = 1;
  v20 = v3;
  v4 = result[64];
  if (!v4)
    goto LABEL_34;
LABEL_6:
  v5 = 0;
  v6 = 0;
  if (v4 >= 0)
    v7 = v4;
  else
    v7 = -v4;
  if (v3 >= 0)
    v8 = v3;
  else
    v8 = -v3;
  v9 = v7 - 1;
  v10 = v9 + v8;
  if (v9 + v8 >= 0x40)
    v10 = 64;
  *(_DWORD *)(a3 + 256) = v10;
  v11 = &v19;
  do
  {
    v13 = 0;
    v14 = 0;
    if (v5 >= v9)
      v15 = v9;
    else
      v15 = v5;
    v16 = ~v15;
    v17 = result;
    do
    {
      if (v5 + v13 < v8)
      {
        v18 = *((unsigned int *)v11 + v13) * (unint64_t)*v17;
        v6 += v18;
        v14 += HIDWORD(v18);
      }
      --v13;
      ++v17;
    }
    while (v16 != v13);
    *(_DWORD *)(a3 + 4 * v5) = v6;
    v6 = v14 + HIDWORD(v6);
    ++v5;
    v12 = *(_DWORD *)(a3 + 256);
    v11 = (uint64_t *)((char *)v11 + 4);
  }
  while (v5 < v12);
  if (v6 && v12 != 64)
  {
    *(_DWORD *)(a3 + 4 * v12) = v6;
    v12 = *(_DWORD *)(a3 + 256) + 1;
    *(_DWORD *)(a3 + 256) = v12;
  }
  if (v3 > 0 != v4 > 0)
    *(_DWORD *)(a3 + 256) = -v12;
  return result;
}

uint64_t sub_20EEDF874()
{
  uint64_t v0;
  _DWORD *v1;
  unsigned int *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  unsigned int *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  double v27;
  _DWORD *v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  unint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  int v52;
  int v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  unsigned int *v60;
  _DWORD *v61;
  int v62;
  int v63;
  double v64;
  long double v65;
  int v66;
  long double v67;
  unsigned int *v68;
  _DWORD *v69;
  unsigned int *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  uint64_t v76;
  double *v77;
  long double *v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _DWORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  unint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  int v103;
  int v104;
  double v105;
  double v106;
  uint64_t v107;
  double v108;
  double v109;
  double v110;
  double v111;
  int v112;
  int v113;
  double v114;
  long double v115;
  int v116;
  double v117;
  int v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _DWORD *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  int v184;
  unsigned int *v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  int *v191;
  unint64_t v192;
  int v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  int v199;
  unsigned int *v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  int *v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  int v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  int v226;
  unsigned int *v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  int *v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  int v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  int v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unsigned int *v269;
  unint64_t v270;
  int v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  int v277;
  _DWORD *v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  double *v284;
  unint64_t v285;
  int v286;
  int v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unsigned int *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  int v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  int v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  int v329;
  _DWORD *v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  int *v336;
  unint64_t v337;
  int v338;
  int v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  int v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unsigned int *v351;
  unint64_t v352;
  double v353;
  double v354;
  double v355;
  double v356;
  uint64_t v357;
  int v358;
  int v359;
  double v360;
  double *v361;
  double *v362;
  _DWORD *v363;
  int v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  int v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  int v382;
  _DWORD *v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  int *v389;
  unint64_t v390;
  int v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  int v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  int v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  _DWORD *v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  int *v416;
  unint64_t v417;
  int v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t v423;
  int v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  int *v430;
  unint64_t v431;
  int v432;
  int v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  int v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unsigned int *v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  int v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  int v469;
  unint64_t v470;
  unint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unint64_t v474;
  int v475;
  int v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  unint64_t v480;
  int *v481;
  unint64_t v482;
  unsigned int *v483;
  int v484;
  int v485;
  unint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t v489;
  unint64_t v490;
  int v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  unint64_t v495;
  unint64_t v496;
  unsigned int *v497;
  unint64_t v498;
  double v499;
  double v500;
  double v501;
  double v502;
  uint64_t v503;
  int v504;
  double v505;
  int v506;
  int v507;
  long double v508;
  _DWORD *v509;
  unsigned int *v510;
  unsigned int *v511;
  _QWORD v512[32];
  int v513;
  double v514[32];
  int v515;
  _QWORD v516[2];
  double v517[2];
  int v518[64];
  int v519;
  int v520[64];
  int v521;
  int v522[64];
  int v523;
  int v524[64];
  int v525;
  int v526[64];
  int v527;
  int v528[64];
  int v529;
  int v530[64];
  int v531;
  _DWORD v532[64];
  int v533;
  _QWORD __src[33];
  _DWORD __dst[65];
  _DWORD v536[130];
  _BYTE v537[260];
  unsigned int v538[65];
  _BYTE v539[260];
  _BYTE v540[260];
  _BYTE v541[260];
  uint64_t v542;

  v0 = MEMORY[0x24BDAC7A8]();
  v7 = v2;
  v8 = v1;
  v9 = v0;
  v542 = *MEMORY[0x24BDAC8D0];
  if (v1[259])
  {
    v10 = v1 + 195;
    v538[0] = 1;
    v538[64] = 1;
    v11 = v2[64];
    v510 = v2 + 65;
    if (v11 && (v12 = v2[129]) != 0)
    {
      v13 = 0;
      v14 = 0;
      if (v11 >= 0)
        v15 = v11;
      else
        v15 = -v11;
      if (v12 >= 0)
        v16 = v12;
      else
        v16 = -v12;
      v17 = v15 - 1;
      v18 = v17 + v16;
      if (v17 + v16 >= 0x40)
        v18 = 64;
      LODWORD(__src[32]) = v18;
      v19 = v2 + 65;
      do
      {
        v21 = 0;
        v22 = 0;
        if (v13 >= v17)
          v23 = v17;
        else
          v23 = v13;
        v24 = ~v23;
        v25 = v7;
        do
        {
          if (v13 + v21 < v16)
          {
            v26 = v19[v21] * (unint64_t)*v25;
            v14 += v26;
            v22 += HIDWORD(v26);
          }
          --v21;
          ++v25;
        }
        while (v24 != v21);
        *((_DWORD *)__src + v13) = v14;
        v14 = v22 + HIDWORD(v14);
        ++v13;
        v20 = __src[32];
        ++v19;
      }
      while (v13 < SLODWORD(__src[32]));
      if (v14 && LODWORD(__src[32]) != 64)
      {
        *((_DWORD *)__src + SLODWORD(__src[32])) = v14;
        v20 = ++LODWORD(__src[32]);
      }
      if (v11 > 0 != v12 > 0)
        LODWORD(__src[32]) = -v20;
    }
    else
    {
      LODWORD(__src[32]) = 0;
    }
    memcpy(__dst, __src, sizeof(__dst));
    v45 = v7 + 130;
    memcpy(v539, v7 + 130, sizeof(v539));
    v536[0] = 1;
    v536[64] = 1;
    v46 = v8 + 130;
    v509 = v7 + 195;
    v51 = sub_20EED979C(v47, v48, v49, v50, v9, v8 + 130, v7 + 195);
    v53 = v52;
    v55 = v54;
    v59 = COERCE_DOUBLE(sub_20EED840C(v9, v538, __dst, v51, v56, v57, v58));
    v60 = v7;
    v61 = (_DWORD *)v9;
    v63 = v62;
    v64 = v59;
    if ((v62 & 1) != 0)
      v64 = v59 + v59;
    v65 = frexp(sqrt(v64), (int *)&__src[1]);
    v66 = LODWORD(__src[1]) + (v63 >> 1);
    v67 = frexp(v65 * v55, (int *)&__src[1]);
    v68 = v60;
    LODWORD(__src[1]) += v66 + v53;
    v517[0] = v67;
    v517[1] = *(double *)&__src[1];
    memcpy(v538, v8, sizeof(v538));
    memcpy(__dst, v60, sizeof(__dst));
    v69 = v8 + 65;
    memcpy(v539, v8 + 65, sizeof(v539));
    v70 = v510;
    memcpy(v536, v510, 0x104uLL);
    memcpy(v540, v8 + 195, sizeof(v540));
    v536[65] = 1;
    v536[129] = 1;
    v75 = COERCE_DOUBLE(sub_20EED9B58(v61, v538, __dst, v71, v72, v73, v74));
    *(double *)v516 = v75;
    v516[1] = v76;
    if (v75 >= 0.0 && v517[0] >= 0.0 || v75 <= 0.0 && v517[0] <= 0.0)
    {
      v77 = (double *)v516;
      v78 = v517;
      return sub_20EED9994(v77, v78);
    }
    v79 = v8[259];
    if (!v79)
      goto LABEL_121;
    v80 = v8[64];
    if (!v80)
      goto LABEL_121;
    v81 = 0;
    v82 = 0;
    if (v79 >= 0)
      v83 = v79;
    else
      v83 = -v79;
    if (v80 >= 0)
      v84 = v80;
    else
      v84 = -v80;
    v85 = v83 - 1;
    v86 = v83 - 1 + v84;
    if (v86 >= 0x40)
      LODWORD(v86) = 64;
    v533 = v86;
    v87 = v8;
    do
    {
      v89 = 0;
      v90 = 0;
      if (v81 >= v85)
        v91 = v85;
      else
        v91 = v81;
      v92 = ~v91;
      v93 = v8 + 195;
      do
      {
        if (v81 + v89 < v84)
        {
          v94 = v87[v89] * (unint64_t)*v93;
          v82 += v94;
          v90 += HIDWORD(v94);
        }
        --v89;
        ++v93;
      }
      while (v92 != v89);
      v532[v81] = v82;
      v82 = v90 + HIDWORD(v82);
      ++v81;
      v88 = v533;
      ++v87;
    }
    while (v81 < v533);
    if (v82 && v533 != 64)
    {
      v532[v533] = v82;
      v88 = ++v533;
    }
    if (v79 > 0 != v80 > 0)
    {
      v88 = -v88;
      v533 = v88;
    }
    if (v88)
    {
      v131 = 0;
      v132 = 0;
      if (v88 >= 0)
        v133 = v88;
      else
        v133 = -v88;
      v134 = v133 - 1;
      if (v133 >= 0x40)
        LODWORD(v133) = 64;
      LODWORD(__src[32]) = v133;
      do
      {
        v136 = 0;
        v137 = 0;
        if (v131 >= v134)
          v138 = v134;
        else
          v138 = v131;
        v139 = v138 + 1;
        do
        {
          if (v131 == v136)
          {
            v140 = v532[v131];
            v132 += (2 * v140);
            v137 += v140 >> 31;
          }
          ++v136;
        }
        while (v139 != v136);
        *((_DWORD *)__src + v131) = v132;
        v132 = v137 + HIDWORD(v132);
        ++v131;
        v135 = __src[32];
      }
      while (v131 < SLODWORD(__src[32]));
      if (v132 && LODWORD(__src[32]) != 64)
      {
        *((_DWORD *)__src + SLODWORD(__src[32])) = v132;
        v135 = ++LODWORD(__src[32]);
      }
      if (v88 <= 0)
        LODWORD(__src[32]) = -v135;
    }
    else
    {
LABEL_121:
      LODWORD(__src[32]) = 0;
    }
    memcpy(v538, __src, sizeof(v538));
    if (!v79)
      goto LABEL_161;
    v141 = v8[129];
    if (!v141)
      goto LABEL_161;
    v142 = 0;
    v143 = 0;
    if (v79 >= 0)
      v144 = v79;
    else
      v144 = -v79;
    if (v141 >= 0)
      v145 = v141;
    else
      v145 = -v141;
    v146 = v144 - 1;
    v147 = v144 - 1 + v145;
    if (v147 >= 0x40)
      LODWORD(v147) = 64;
    v533 = v147;
    v148 = v8 + 65;
    do
    {
      v150 = 0;
      v151 = 0;
      if (v142 >= v146)
        v152 = v146;
      else
        v152 = v142;
      v153 = ~v152;
      v154 = v8 + 195;
      do
      {
        if (v142 + v150 < v145)
        {
          v155 = v148[v150] * (unint64_t)*v154;
          v143 += v155;
          v151 += HIDWORD(v155);
        }
        --v150;
        ++v154;
      }
      while (v153 != v150);
      v532[v142] = v143;
      v143 = v151 + HIDWORD(v143);
      ++v142;
      v149 = v533;
      ++v148;
    }
    while (v142 < v533);
    if (v143 && v533 != 64)
    {
      v532[v533] = v143;
      v149 = ++v533;
    }
    if (v79 > 0 != v141 > 0)
    {
      v149 = -v149;
      v533 = v149;
    }
    if (v149)
    {
      v156 = 0;
      v157 = 0;
      if (v149 >= 0)
        v158 = v149;
      else
        v158 = -v149;
      v159 = v158 - 1;
      if (v158 >= 0x40)
        LODWORD(v158) = 64;
      LODWORD(__src[32]) = v158;
      do
      {
        v161 = 0;
        v162 = 0;
        if (v156 >= v159)
          v163 = v159;
        else
          v163 = v156;
        v164 = v163 + 1;
        do
        {
          if (v156 == v161)
          {
            v165 = v532[v156];
            v157 += (2 * v165);
            v162 += v165 >> 31;
          }
          ++v161;
        }
        while (v164 != v161);
        *((_DWORD *)__src + v156) = v157;
        v157 = v162 + HIDWORD(v157);
        ++v156;
        v160 = __src[32];
      }
      while (v156 < SLODWORD(__src[32]));
      if (v157 && LODWORD(__src[32]) != 64)
      {
        *((_DWORD *)__src + SLODWORD(__src[32])) = v157;
        v160 = ++LODWORD(__src[32]);
      }
      if (v149 <= 0)
        LODWORD(__src[32]) = -v160;
    }
    else
    {
LABEL_161:
      LODWORD(__src[32]) = 0;
    }
    memcpy(v539, __src, sizeof(v539));
    v166 = v8[64];
    if (v166)
    {
      v167 = 0;
      v168 = 0;
      if (v166 >= 0)
        v169 = v166;
      else
        v169 = -v166;
      v170 = v169 - 1 + v169;
      if (v170 >= 0x40)
        LODWORD(v170) = 64;
      v527 = v170;
      do
      {
        v172 = 0;
        v173 = 0;
        if (v167 >= v169 - 1)
          v174 = v169 - 1;
        else
          v174 = v167;
        v175 = v174 + 1;
        v176 = v167;
        do
        {
          if (v176 < v169)
          {
            v177 = v8[v176] * (unint64_t)v8[v172];
            v168 += v177;
            v173 += HIDWORD(v177);
          }
          ++v172;
          --v176;
        }
        while (v175 != v172);
        v526[v167] = v168;
        v168 = v173 + HIDWORD(v168);
        ++v167;
        v171 = v527;
      }
      while (v167 < v527);
      if (v168 && v527 != 64)
      {
        v526[v527] = v168;
        v171 = ++v527;
      }
      if (v171 && (v178 = v68[64]) != 0)
      {
        v179 = 0;
        v180 = 0;
        if (v171 >= 0)
          v181 = v171;
        else
          v181 = -v171;
        if (v178 >= 0)
          v182 = v178;
        else
          v182 = -v178;
        v183 = v181 - 1;
        v184 = v183 + v182;
        if (v183 + v182 >= 0x40)
          v184 = 64;
        v529 = v184;
        v185 = v68;
        do
        {
          v187 = 0;
          v188 = 0;
          if (v179 >= v183)
            v189 = v183;
          else
            v189 = v179;
          v190 = ~v189;
          v191 = v526;
          do
          {
            if (v179 + v187 < v182)
            {
              v192 = v185[v187] * (unint64_t)*v191;
              v180 += v192;
              v188 += HIDWORD(v192);
            }
            --v187;
            ++v191;
          }
          while (v190 != v187);
          v528[v179] = v180;
          v180 = v188 + HIDWORD(v180);
          ++v179;
          v186 = v529;
          ++v185;
        }
        while (v179 < v529);
        if (v180 && v529 != 64)
        {
          v528[v529] = v180;
          v186 = ++v529;
        }
        if (v171 > 0 != v178 > 0)
          v529 = -v186;
      }
      else
      {
        v529 = 0;
      }
    }
    else
    {
      v527 = 0;
      v529 = 0;
    }
    v208 = v8[129];
    if (v208)
    {
      v209 = 0;
      v210 = 0;
      if (v208 >= 0)
        v211 = v208;
      else
        v211 = -v208;
      v212 = v211 - 1 + v211;
      if (v212 >= 0x40)
        LODWORD(v212) = 64;
      v523 = v212;
      do
      {
        v214 = 0;
        v215 = 0;
        if (v209 >= v211 - 1)
          v216 = v211 - 1;
        else
          v216 = v209;
        v217 = v216 + 1;
        v218 = v209;
        do
        {
          if (v218 < v211)
          {
            v219 = v69[v218] * (unint64_t)v69[v214];
            v210 += v219;
            v215 += HIDWORD(v219);
          }
          ++v214;
          --v218;
        }
        while (v217 != v214);
        v522[v209] = v210;
        v210 = v215 + HIDWORD(v210);
        ++v209;
        v213 = v523;
      }
      while (v209 < v523);
      if (v210 && v523 != 64)
      {
        v522[v523] = v210;
        v213 = ++v523;
      }
      if (v213 && (v220 = v68[129]) != 0)
      {
        v221 = 0;
        v222 = 0;
        if (v213 >= 0)
          v223 = v213;
        else
          v223 = -v213;
        if (v220 >= 0)
          v224 = v220;
        else
          v224 = -v220;
        v225 = v223 - 1;
        v226 = v225 + v224;
        if (v225 + v224 >= 0x40)
          v226 = 64;
        v525 = v226;
        v227 = v510;
        do
        {
          v229 = 0;
          v230 = 0;
          if (v221 >= v225)
            v231 = v225;
          else
            v231 = v221;
          v232 = ~v231;
          v233 = v522;
          do
          {
            if (v221 + v229 < v224)
            {
              v234 = v227[v229] * (unint64_t)*v233;
              v222 += v234;
              v230 += HIDWORD(v234);
            }
            --v229;
            ++v233;
          }
          while (v232 != v229);
          v524[v221] = v222;
          v222 = v230 + HIDWORD(v222);
          ++v221;
          v228 = v525;
          ++v227;
        }
        while (v221 < v525);
        if (v222 && v525 != 64)
        {
          v524[v525] = v222;
          v228 = ++v525;
        }
        if (v213 > 0 != v220 > 0)
          v525 = -v228;
      }
      else
      {
        v525 = 0;
      }
    }
    else
    {
      v523 = 0;
      v525 = 0;
    }
    sub_20EED4F68(v530, v528, v524);
    LODWORD(v235) = v8[259];
    if ((_DWORD)v235)
    {
      v236 = 0;
      v237 = 0;
      if ((v235 & 0x80000000) == 0)
        v235 = v235;
      else
        v235 = -(int)v235;
      v238 = v235 - 1 + v235;
      if (v238 >= 0x40)
        LODWORD(v238) = 64;
      v521 = v238;
      do
      {
        v239 = 0;
        v240 = 0;
        if (v236 >= v235 - 1)
          v241 = v235 - 1;
        else
          v241 = v236;
        v242 = v241 + 1;
        v243 = v236;
        do
        {
          if (v243 < v235)
          {
            v244 = v10[v243] * (unint64_t)v10[v239];
            v237 += v244;
            v240 += HIDWORD(v244);
          }
          ++v239;
          --v243;
        }
        while (v242 != v239);
        v520[v236] = v237;
        v237 = v240 + HIDWORD(v237);
        ++v236;
      }
      while (v236 < v521);
      if (v237 && v521 != 64)
        v520[v521++] = v237;
      sub_20EED4F68(v532, v530, v520);
      v245 = v8[194];
      if (!v245)
        goto LABEL_361;
    }
    else
    {
      v521 = 0;
      sub_20EED4F68(v532, v530, v520);
      v245 = v8[194];
      if (!v245)
        goto LABEL_361;
    }
    v246 = 0;
    v247 = 0;
    if (v245 >= 0)
      v248 = v245;
    else
      v248 = -v245;
    v249 = v248 - 1 + v248;
    if (v249 >= 0x40)
      LODWORD(v249) = 64;
    v513 = v249;
    do
    {
      v251 = 0;
      v252 = 0;
      if (v246 >= v248 - 1)
        v253 = v248 - 1;
      else
        v253 = v246;
      v254 = v253 + 1;
      v255 = v246;
      do
      {
        if (v255 < v248)
        {
          v256 = v46[v255] * (unint64_t)v46[v251];
          v247 += v256;
          v252 += HIDWORD(v256);
        }
        ++v251;
        --v255;
      }
      while (v254 != v251);
      *((_DWORD *)v512 + v246) = v247;
      v247 = v252 + HIDWORD(v247);
      ++v246;
      v250 = v513;
    }
    while (v246 < v513);
    if (v247 && v513 != 64)
    {
      *((_DWORD *)v512 + v513) = v247;
      v250 = ++v513;
    }
    if (v250)
    {
      v257 = v68[194];
      if (v257)
      {
        v258 = 0;
        v259 = 0;
        if (v250 >= 0)
          v260 = v250;
        else
          v260 = -v250;
        if (v257 >= 0)
          v261 = v257;
        else
          v261 = -v257;
        v262 = v260 - 1;
        v263 = v260 - 1 + v261;
        if (v263 >= 0x40)
          LODWORD(v263) = 64;
        v515 = v263;
        do
        {
          v265 = 0;
          v266 = 0;
          if (v258 >= v262)
            v267 = v262;
          else
            v267 = v258;
          v268 = ~v267;
          v269 = (unsigned int *)v512;
          do
          {
            if (v258 + v265 < v261)
            {
              v270 = v45[v265] * (unint64_t)*v269;
              v259 += v270;
              v266 += HIDWORD(v270);
            }
            --v265;
            ++v269;
          }
          while (v268 != v265);
          *((_DWORD *)v514 + v258) = v259;
          v259 = v266 + HIDWORD(v259);
          ++v258;
          v264 = v515;
          ++v45;
        }
        while (v258 < v515);
        if (v259 && v515 != 64)
        {
          *((_DWORD *)v514 + v515) = v259;
          v264 = ++v515;
        }
        if (v250 > 0 != v257 > 0)
        {
          v264 = -v264;
          v515 = v264;
        }
        if (v264)
        {
          v271 = v68[259];
          if (v271)
          {
            v272 = 0;
            v273 = 0;
            if (v264 >= 0)
              v274 = v264;
            else
              v274 = -v264;
            if (v271 >= 0)
              v275 = v271;
            else
              v275 = -v271;
            v276 = v274 - 1;
            v277 = v276 + v275;
            if (v276 + v275 >= 0x40)
              v277 = 64;
            v519 = v277;
            v278 = v509;
            do
            {
              v280 = 0;
              v281 = 0;
              if (v272 >= v276)
                v282 = v276;
              else
                v282 = v272;
              v283 = ~v282;
              v284 = v514;
              do
              {
                if (v272 + v280 < v275)
                {
                  v285 = v278[v280] * (unint64_t)*(unsigned int *)v284;
                  v273 += v285;
                  v281 += HIDWORD(v285);
                }
                --v280;
                v284 = (double *)((char *)v284 + 4);
              }
              while (v283 != v280);
              v518[v272] = v273;
              v273 = v281 + HIDWORD(v273);
              ++v272;
              v279 = v519;
              ++v278;
            }
            while (v272 < v519);
            if (v273 && v519 != 64)
            {
              v518[v519] = v273;
              v279 = ++v519;
            }
            if (v264 > 0 != v271 > 0)
              v519 = -v279;
            goto LABEL_362;
          }
        }
      }
    }
LABEL_361:
    v519 = 0;
LABEL_362:
    sub_20EED4C8C(__src, v532, v518);
    memcpy(v540, __src, sizeof(v540));
    v286 = v8[64];
    if (!v286)
      goto LABEL_401;
    v287 = v8[129];
    if (!v287)
      goto LABEL_401;
    v288 = 0;
    v289 = 0;
    if (v286 >= 0)
      v290 = v286;
    else
      v290 = -v286;
    if (v287 >= 0)
      v291 = v287;
    else
      v291 = -v287;
    v292 = v290 - 1;
    v293 = v290 - 1 + v291;
    if (v293 >= 0x40)
      LODWORD(v293) = 64;
    v531 = v293;
    do
    {
      v295 = 0;
      v296 = 0;
      if (v288 >= v292)
        v297 = v292;
      else
        v297 = v288;
      v298 = ~v297;
      v299 = v8;
      do
      {
        if (v288 + v295 < v291)
        {
          v300 = v69[v295] * (unint64_t)*v299;
          v289 += v300;
          v296 += HIDWORD(v300);
        }
        --v295;
        ++v299;
      }
      while (v298 != v295);
      v530[v288] = v289;
      v289 = v296 + HIDWORD(v289);
      ++v288;
      v294 = v531;
      ++v69;
    }
    while (v288 < v531);
    if (v289 && v531 != 64)
    {
      v530[v531] = v289;
      v294 = ++v531;
    }
    if (v286 > 0 != v287 > 0)
    {
      v294 = -v294;
      v531 = v294;
    }
    if (v294)
    {
      v301 = 0;
      v302 = 0;
      if (v294 >= 0)
        v303 = v294;
      else
        v303 = -v294;
      v304 = v303 - 1;
      if (v303 >= 0x40)
        LODWORD(v303) = 64;
      v533 = v303;
      do
      {
        v306 = 0;
        v307 = 0;
        if (v301 >= v304)
          v308 = v304;
        else
          v308 = v301;
        v309 = v308 + 1;
        do
        {
          if (v301 == v306)
          {
            v310 = v530[v301];
            v302 += (2 * v310);
            v307 += v310 >> 31;
          }
          ++v306;
        }
        while (v309 != v306);
        v532[v301] = v302;
        v302 = v307 + HIDWORD(v302);
        ++v301;
        v305 = v533;
      }
      while (v301 < v533);
      if (v302 && v533 != 64)
      {
        v532[v533] = v302;
        v305 = ++v533;
      }
      if (v294 <= 0)
        v533 = -v305;
    }
    else
    {
LABEL_401:
      v533 = 0;
    }
    v311 = v8[194];
    if (!v311)
      goto LABEL_439;
    v312 = 0;
    v313 = 0;
    if (v311 >= 0)
      v314 = v311;
    else
      v314 = -v311;
    v315 = v314 - 1 + v314;
    if (v315 >= 0x40)
      LODWORD(v315) = 64;
    v527 = v315;
    do
    {
      v317 = 0;
      v318 = 0;
      if (v312 >= v314 - 1)
        v319 = v314 - 1;
      else
        v319 = v312;
      v320 = v319 + 1;
      v321 = v312;
      do
      {
        if (v321 < v314)
        {
          v322 = v46[v321] * (unint64_t)v46[v317];
          v313 += v322;
          v318 += HIDWORD(v322);
        }
        ++v317;
        --v321;
      }
      while (v320 != v317);
      v526[v312] = v313;
      v313 = v318 + HIDWORD(v313);
      ++v312;
      v316 = v527;
    }
    while (v312 < v527);
    if (v313 && v527 != 64)
    {
      v526[v527] = v313;
      v316 = ++v527;
    }
    if (v316 && (v323 = v68[259]) != 0)
    {
      v324 = 0;
      v325 = 0;
      if (v316 >= 0)
        v326 = v316;
      else
        v326 = -v316;
      if (v323 >= 0)
        v327 = v323;
      else
        v327 = -v323;
      v328 = v326 - 1;
      v329 = v328 + v327;
      if (v328 + v327 >= 0x40)
        v329 = 64;
      v529 = v329;
      v330 = v509;
      do
      {
        v332 = 0;
        v333 = 0;
        if (v324 >= v328)
          v334 = v328;
        else
          v334 = v324;
        v335 = ~v334;
        v336 = v526;
        do
        {
          if (v324 + v332 < v327)
          {
            v337 = v330[v332] * (unint64_t)*v336;
            v325 += v337;
            v333 += HIDWORD(v337);
          }
          --v332;
          ++v336;
        }
        while (v335 != v332);
        v528[v324] = v325;
        v325 = v333 + HIDWORD(v325);
        ++v324;
        v331 = v529;
        ++v330;
      }
      while (v324 < v529);
      if (v325 && v529 != 64)
      {
        v528[v529] = v325;
        v331 = ++v529;
      }
      if (v316 > 0 != v323 > 0)
        v529 = -v331;
    }
    else
    {
LABEL_439:
      v529 = 0;
    }
    sub_20EED4C8C(__src, v532, v528);
    memcpy(v541, __src, sizeof(v541));
    v338 = v68[64];
    if (v338 && (v339 = v68[129]) != 0)
    {
      v340 = 0;
      v341 = 0;
      if (v338 >= 0)
        v342 = v338;
      else
        v342 = -v338;
      if (v339 >= 0)
        v343 = v339;
      else
        v343 = -v339;
      v344 = v342 - 1;
      v345 = v344 + v343;
      if (v344 + v343 >= 0x40)
        v345 = 64;
      LODWORD(__src[32]) = v345;
      do
      {
        v347 = 0;
        v348 = 0;
        if (v340 >= v344)
          v349 = v344;
        else
          v349 = v340;
        v350 = ~v349;
        v351 = v68;
        do
        {
          if (v340 + v347 < v343)
          {
            v352 = v70[v347] * (unint64_t)*v351;
            v341 += v352;
            v348 += HIDWORD(v352);
          }
          --v347;
          ++v351;
        }
        while (v350 != v347);
        *((_DWORD *)__src + v340) = v341;
        v341 = v348 + HIDWORD(v341);
        ++v340;
        v346 = __src[32];
        ++v70;
      }
      while (v340 < SLODWORD(__src[32]));
      if (v341 && LODWORD(__src[32]) != 64)
      {
        *((_DWORD *)__src + SLODWORD(__src[32])) = v341;
        v346 = ++LODWORD(__src[32]);
      }
      if (v338 > 0 != v339 > 0)
        LODWORD(__src[32]) = -v346;
    }
    else
    {
      LODWORD(__src[32]) = 0;
    }
    memcpy(v537, __src, sizeof(v537));
    *(double *)&v357 = COERCE_DOUBLE(sub_20EEE19AC((uint64_t)v61, v538, __dst, v353, v354, v355, v356));
    v359 = v358;
    v360 = *(double *)&v357;
    v361 = (double *)v516;
    v362 = v517;
    goto LABEL_693;
  }
  *(_QWORD *)&v514[0] = sub_20EED840C(v0, v1, v2, v3, v4, v5, v6);
  v514[1] = v27;
  v538[0] = 1;
  v538[64] = 1;
  v28 = v7 + 65;
  v29 = v7[64];
  if (v29 && (v30 = v7[129]) != 0)
  {
    v31 = 0;
    v32 = 0;
    if (v29 >= 0)
      v33 = v29;
    else
      v33 = -v29;
    if (v30 >= 0)
      v34 = v30;
    else
      v34 = -v30;
    v35 = v33 - 1;
    v36 = v35 + v34;
    if (v35 + v34 >= 0x40)
      v36 = 64;
    LODWORD(__src[32]) = v36;
    v37 = v7 + 65;
    do
    {
      v39 = 0;
      v40 = 0;
      if (v31 >= v35)
        v41 = v35;
      else
        v41 = v31;
      v42 = ~v41;
      v43 = v7;
      do
      {
        if (v31 + v39 < v34)
        {
          v44 = v37[v39] * (unint64_t)*v43;
          v32 += v44;
          v40 += HIDWORD(v44);
        }
        --v39;
        ++v43;
      }
      while (v42 != v39);
      *((_DWORD *)__src + v31) = v32;
      v32 = v40 + HIDWORD(v32);
      ++v31;
      v38 = __src[32];
      ++v37;
    }
    while (v31 < SLODWORD(__src[32]));
    if (v32 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v32;
      v38 = ++LODWORD(__src[32]);
    }
    if (v29 > 0 != v30 > 0)
      LODWORD(__src[32]) = -v38;
  }
  else
  {
    LODWORD(__src[32]) = 0;
  }
  memcpy(__dst, __src, sizeof(__dst));
  v95 = v7 + 130;
  memcpy(v539, v7 + 130, sizeof(v539));
  v536[0] = 1;
  v536[64] = 1;
  v96 = v8 + 130;
  v511 = v7;
  v97 = v7 + 195;
  v102 = sub_20EED979C(v98, v99, v100, v101, v9, v8 + 130, v97);
  v104 = v103;
  v106 = v105;
  v107 = v9;
  v111 = COERCE_DOUBLE(sub_20EED840C(v9, v538, __dst, v102, v108, v109, v110));
  v113 = v112;
  v114 = v111;
  if ((v112 & 1) != 0)
    v114 = v111 + v111;
  v115 = frexp(sqrt(v114), (int *)&__src[1]);
  v116 = LODWORD(__src[1]) + (v113 >> 1);
  v117 = frexp(v115 * v106, (int *)&__src[1]);
  LODWORD(__src[1]) += v116 + v104;
  *(double *)v512 = v117;
  v512[1] = __src[1];
  if (v514[0] >= 0.0 && v117 >= 0.0 || v514[0] <= 0.0 && v117 <= 0.0)
  {
    v77 = v514;
    v78 = (long double *)v512;
    return sub_20EED9994(v77, v78);
  }
  v119 = v8[64];
  if (v119)
  {
    v120 = 0;
    v121 = 0;
    if (v119 >= 0)
      v122 = v119;
    else
      v122 = -v119;
    v123 = v122 - 1 + v122;
    if (v123 >= 0x40)
      LODWORD(v123) = 64;
    v529 = v123;
    do
    {
      v125 = 0;
      v126 = 0;
      if (v120 >= v122 - 1)
        v127 = v122 - 1;
      else
        v127 = v120;
      v128 = v127 + 1;
      v129 = v120;
      do
      {
        if (v129 < v122)
        {
          v130 = v8[v129] * (unint64_t)v8[v125];
          v121 += v130;
          v126 += HIDWORD(v130);
        }
        ++v125;
        --v129;
      }
      while (v128 != v125);
      v528[v120] = v121;
      v121 = v126 + HIDWORD(v121);
      ++v120;
      v124 = v529;
    }
    while (v120 < v529);
    if (v121 && v529 != 64)
    {
      v528[v529] = v121;
      v124 = ++v529;
    }
    if (v124 && (v193 = v511[64]) != 0)
    {
      v194 = 0;
      v195 = 0;
      if (v124 >= 0)
        v196 = v124;
      else
        v196 = -v124;
      if (v193 >= 0)
        v197 = v193;
      else
        v197 = -v193;
      v198 = v196 - 1;
      v199 = v198 + v197;
      if (v198 + v197 >= 0x40)
        v199 = 64;
      v531 = v199;
      v200 = v511;
      do
      {
        v202 = 0;
        v203 = 0;
        if (v194 >= v198)
          v204 = v198;
        else
          v204 = v194;
        v205 = ~v204;
        v206 = v528;
        do
        {
          if (v194 + v202 < v197)
          {
            v207 = v200[v202] * (unint64_t)*v206;
            v195 += v207;
            v203 += HIDWORD(v207);
          }
          --v202;
          ++v206;
        }
        while (v205 != v202);
        v530[v194] = v195;
        v195 = v203 + HIDWORD(v195);
        ++v194;
        v201 = v531;
        ++v200;
      }
      while (v194 < v531);
      if (v195 && v531 != 64)
      {
        v530[v531] = v195;
        v201 = ++v531;
      }
      if (v124 > 0 != v193 > 0)
        v531 = -v201;
    }
    else
    {
      v531 = 0;
    }
  }
  else
  {
    v529 = 0;
    v531 = 0;
  }
  v363 = v8 + 65;
  v364 = v8[129];
  if (v364)
  {
    v365 = 0;
    v366 = 0;
    if (v364 >= 0)
      v367 = v364;
    else
      v367 = -v364;
    v368 = v367 - 1 + v367;
    if (v368 >= 0x40)
      LODWORD(v368) = 64;
    v525 = v368;
    do
    {
      v370 = 0;
      v371 = 0;
      if (v365 >= v367 - 1)
        v372 = v367 - 1;
      else
        v372 = v365;
      v373 = v372 + 1;
      v374 = v365;
      do
      {
        if (v374 < v367)
        {
          v375 = v363[v374] * (unint64_t)v363[v370];
          v366 += v375;
          v371 += HIDWORD(v375);
        }
        ++v370;
        --v374;
      }
      while (v373 != v370);
      v524[v365] = v366;
      v366 = v371 + HIDWORD(v366);
      ++v365;
      v369 = v525;
    }
    while (v365 < v525);
    if (v366 && v525 != 64)
    {
      v524[v525] = v366;
      v369 = ++v525;
    }
    if (v369 && (v376 = v511[129]) != 0)
    {
      v377 = 0;
      v378 = 0;
      if (v369 >= 0)
        v379 = v369;
      else
        v379 = -v369;
      if (v376 >= 0)
        v380 = v376;
      else
        v380 = -v376;
      v381 = v379 - 1;
      v382 = v381 + v380;
      if (v381 + v380 >= 0x40)
        v382 = 64;
      v527 = v382;
      v383 = v28;
      do
      {
        v385 = 0;
        v386 = 0;
        if (v377 >= v381)
          v387 = v381;
        else
          v387 = v377;
        v388 = ~v387;
        v389 = v524;
        do
        {
          if (v377 + v385 < v380)
          {
            v390 = v383[v385] * (unint64_t)*v389;
            v378 += v390;
            v386 += HIDWORD(v390);
          }
          --v385;
          ++v389;
        }
        while (v388 != v385);
        v526[v377] = v378;
        v378 = v386 + HIDWORD(v378);
        ++v377;
        v384 = v527;
        ++v383;
      }
      while (v377 < v527);
      if (v378 && v527 != 64)
      {
        v526[v527] = v378;
        v384 = ++v527;
      }
      if (v369 > 0 != v376 > 0)
        v527 = -v384;
    }
    else
    {
      v527 = 0;
    }
  }
  else
  {
    v525 = 0;
    v527 = 0;
  }
  sub_20EED4F68(v532, v530, v526);
  v391 = v8[194];
  if (!v391)
    goto LABEL_588;
  v392 = 0;
  v393 = 0;
  if (v391 >= 0)
    v394 = v391;
  else
    v394 = -v391;
  v395 = v394 - 1 + v394;
  if (v395 >= 0x40)
    LODWORD(v395) = 64;
  v519 = v395;
  do
  {
    v397 = 0;
    v398 = 0;
    if (v392 >= v394 - 1)
      v399 = v394 - 1;
    else
      v399 = v392;
    v400 = v399 + 1;
    v401 = v392;
    do
    {
      if (v401 < v394)
      {
        v402 = v96[v401] * (unint64_t)v96[v397];
        v393 += v402;
        v398 += HIDWORD(v402);
      }
      ++v397;
      --v401;
    }
    while (v400 != v397);
    v518[v392] = v393;
    v393 = v398 + HIDWORD(v393);
    ++v392;
    v396 = v519;
  }
  while (v392 < v519);
  if (v393 && v519 != 64)
  {
    v518[v519] = v393;
    v396 = ++v519;
  }
  if (!v396)
    goto LABEL_588;
  v403 = v511[259];
  if (!v403)
    goto LABEL_588;
  v404 = 0;
  v405 = 0;
  if (v396 >= 0)
    v406 = v396;
  else
    v406 = -v396;
  if (v403 >= 0)
    v407 = v403;
  else
    v407 = -v403;
  v408 = v406 - 1;
  v409 = v406 - 1 + v407;
  if (v409 >= 0x40)
    LODWORD(v409) = 64;
  v521 = v409;
  v410 = v97;
  do
  {
    v412 = 0;
    v413 = 0;
    if (v404 >= v408)
      v414 = v408;
    else
      v414 = v404;
    v415 = ~v414;
    v416 = v518;
    do
    {
      if (v404 + v412 < v407)
      {
        v417 = v410[v412] * (unint64_t)*v416;
        v405 += v417;
        v413 += HIDWORD(v417);
      }
      --v412;
      ++v416;
    }
    while (v415 != v412);
    v520[v404] = v405;
    v405 = v413 + HIDWORD(v405);
    ++v404;
    v411 = v521;
    ++v410;
  }
  while (v404 < v521);
  if (v405 && v521 != 64)
  {
    v520[v521] = v405;
    v411 = ++v521;
  }
  if (v396 > 0 != v403 > 0)
  {
    v411 = -v411;
    v521 = v411;
  }
  if (v411 && (v418 = v511[194]) != 0)
  {
    v419 = 0;
    v420 = 0;
    if (v411 >= 0)
      v421 = v411;
    else
      v421 = -v411;
    if (v418 >= 0)
      v422 = v418;
    else
      v422 = -v418;
    v423 = v421 - 1;
    v424 = v423 + v422;
    if (v423 + v422 >= 0x40)
      v424 = 64;
    v523 = v424;
    do
    {
      v426 = 0;
      v427 = 0;
      if (v419 >= v423)
        v428 = v423;
      else
        v428 = v419;
      v429 = ~v428;
      v430 = v520;
      do
      {
        if (v419 + v426 < v422)
        {
          v431 = v95[v426] * (unint64_t)*v430;
          v420 += v431;
          v427 += HIDWORD(v431);
        }
        --v426;
        ++v430;
      }
      while (v429 != v426);
      v522[v419] = v420;
      v420 = v427 + HIDWORD(v420);
      ++v419;
      v425 = v523;
      ++v95;
    }
    while (v419 < v523);
    if (v420 && v523 != 64)
    {
      v522[v523] = v420;
      v425 = ++v523;
    }
    if (v411 > 0 != v418 > 0)
      v523 = -v425;
  }
  else
  {
LABEL_588:
    v523 = 0;
  }
  sub_20EED4C8C(__src, v532, v522);
  memcpy(v538, __src, sizeof(v538));
  __dst[0] = 1;
  __dst[64] = 1;
  v432 = v8[64];
  if (!v432)
    goto LABEL_628;
  v433 = v8[129];
  if (!v433)
    goto LABEL_628;
  v434 = 0;
  v435 = 0;
  if (v432 >= 0)
    v436 = v432;
  else
    v436 = -v432;
  if (v433 >= 0)
    v437 = v433;
  else
    v437 = -v433;
  v438 = v436 - 1;
  v439 = v436 - 1 + v437;
  if (v439 >= 0x40)
    LODWORD(v439) = 64;
  v531 = v439;
  do
  {
    v441 = 0;
    v442 = 0;
    if (v434 >= v438)
      v443 = v438;
    else
      v443 = v434;
    v444 = ~v443;
    v445 = v8;
    do
    {
      if (v434 + v441 < v437)
      {
        v446 = v363[v441] * (unint64_t)*v445;
        v435 += v446;
        v442 += HIDWORD(v446);
      }
      --v441;
      ++v445;
    }
    while (v444 != v441);
    v530[v434] = v435;
    v435 = v442 + HIDWORD(v435);
    ++v434;
    v440 = v531;
    ++v363;
  }
  while (v434 < v531);
  if (v435 && v531 != 64)
  {
    v530[v531] = v435;
    v440 = ++v531;
  }
  if (v432 > 0 != v433 > 0)
  {
    v440 = -v440;
    v531 = v440;
  }
  if (v440)
  {
    v447 = 0;
    v448 = 0;
    if (v440 >= 0)
      v449 = v440;
    else
      v449 = -v440;
    v450 = v449 - 1;
    if (v449 >= 0x40)
      LODWORD(v449) = 64;
    v533 = v449;
    do
    {
      v452 = 0;
      v453 = 0;
      if (v447 >= v450)
        v454 = v450;
      else
        v454 = v447;
      v455 = v454 + 1;
      do
      {
        if (v447 == v452)
        {
          v456 = v530[v447];
          v448 += (2 * v456);
          v453 += v456 >> 31;
        }
        ++v452;
      }
      while (v455 != v452);
      v532[v447] = v448;
      v448 = v453 + HIDWORD(v448);
      ++v447;
      v451 = v533;
    }
    while (v447 < v533);
    if (v448 && v533 != 64)
    {
      v532[v533] = v448;
      v451 = ++v533;
    }
    if (v440 <= 0)
      v533 = -v451;
  }
  else
  {
LABEL_628:
    v533 = 0;
  }
  v457 = v8[194];
  if (!v457)
    goto LABEL_666;
  v458 = 0;
  v459 = 0;
  if (v457 >= 0)
    v460 = v457;
  else
    v460 = -v457;
  v461 = v460 - 1 + v460;
  if (v461 >= 0x40)
    LODWORD(v461) = 64;
  v527 = v461;
  do
  {
    v463 = 0;
    v464 = 0;
    if (v458 >= v460 - 1)
      v465 = v460 - 1;
    else
      v465 = v458;
    v466 = v465 + 1;
    v467 = v458;
    do
    {
      if (v467 < v460)
      {
        v468 = v96[v467] * (unint64_t)v96[v463];
        v459 += v468;
        v464 += HIDWORD(v468);
      }
      ++v463;
      --v467;
    }
    while (v466 != v463);
    v526[v458] = v459;
    v459 = v464 + HIDWORD(v459);
    ++v458;
    v462 = v527;
  }
  while (v458 < v527);
  if (v459 && v527 != 64)
  {
    v526[v527] = v459;
    v462 = ++v527;
  }
  if (v462 && (v469 = v511[259]) != 0)
  {
    v470 = 0;
    v471 = 0;
    if (v462 >= 0)
      v472 = v462;
    else
      v472 = -v462;
    if (v469 >= 0)
      v473 = v469;
    else
      v473 = -v469;
    v474 = v472 - 1;
    v475 = v474 + v473;
    if (v474 + v473 >= 0x40)
      v475 = 64;
    v529 = v475;
    do
    {
      v477 = 0;
      v478 = 0;
      if (v470 >= v474)
        v479 = v474;
      else
        v479 = v470;
      v480 = ~v479;
      v481 = v526;
      do
      {
        if (v470 + v477 < v473)
        {
          v482 = v97[v477] * (unint64_t)*v481;
          v471 += v482;
          v478 += HIDWORD(v482);
        }
        --v477;
        ++v481;
      }
      while (v480 != v477);
      v528[v470] = v471;
      v471 = v478 + HIDWORD(v471);
      ++v470;
      v476 = v529;
      ++v97;
    }
    while (v470 < v529);
    if (v471)
    {
      v483 = v511;
      if (v529 != 64)
      {
        v528[v529] = v471;
        v476 = ++v529;
      }
    }
    else
    {
      v483 = v511;
    }
    if (v462 > 0 != v469 > 0)
      v529 = -v476;
  }
  else
  {
LABEL_666:
    v529 = 0;
    v483 = v511;
  }
  sub_20EED4C8C(__src, v532, v528);
  memcpy(v539, __src, sizeof(v539));
  v484 = v483[64];
  if (v484 && (v485 = v483[129]) != 0)
  {
    v486 = 0;
    v487 = 0;
    if (v484 >= 0)
      v488 = v484;
    else
      v488 = -v484;
    if (v485 >= 0)
      v489 = v485;
    else
      v489 = -v485;
    v490 = v488 - 1;
    v491 = v490 + v489;
    if (v490 + v489 >= 0x40)
      v491 = 64;
    LODWORD(__src[32]) = v491;
    do
    {
      v493 = 0;
      v494 = 0;
      if (v486 >= v490)
        v495 = v490;
      else
        v495 = v486;
      v496 = ~v495;
      v497 = v483;
      do
      {
        if (v486 + v493 < v489)
        {
          v498 = v28[v493] * (unint64_t)*v497;
          v487 += v498;
          v494 += HIDWORD(v498);
        }
        --v493;
        ++v497;
      }
      while (v496 != v493);
      *((_DWORD *)__src + v486) = v487;
      v487 = v494 + HIDWORD(v487);
      ++v486;
      v492 = __src[32];
      ++v28;
    }
    while (v486 < SLODWORD(__src[32]));
    if (v487 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v487;
      v492 = ++LODWORD(__src[32]);
    }
    if (v484 > 0 != v485 > 0)
      LODWORD(__src[32]) = -v492;
  }
  else
  {
    LODWORD(__src[32]) = 0;
  }
  memcpy(v536, __src, 0x104uLL);
  *(double *)&v503 = COERCE_DOUBLE(sub_20EED840C(v107, v538, __dst, v499, v500, v501, v502));
  v359 = v504;
  v360 = *(double *)&v503;
  v361 = v514;
  v362 = (double *)v512;
LABEL_693:
  v505 = COERCE_DOUBLE(sub_20EED9A6C(v361, (uint64_t)v362));
  v507 = v359 - v506;
  v508 = frexp(v360 / v505, (int *)&__src[1]);
  LODWORD(__src[1]) += v507;
  return *(_QWORD *)&v508;
}

uint64_t sub_20EEE19AC(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4, double a5, double a6, double a7)
{
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  long double v17;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int *v44;
  unint64_t v45;
  _DWORD *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _DWORD *v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _DWORD *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int *v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int *v125;
  unint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int *v140;
  unint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unsigned int *v155;
  unint64_t v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  double v168;
  double v169;
  double v170;
  double v171;
  uint64_t v172;
  int v173;
  int v174;
  double v175;
  double v176;
  int v177;
  int v178;
  long double v179;
  _DWORD v180[64];
  int v181;
  _DWORD v182[64];
  int v183;
  int v184[64];
  int v185;
  int v186[64];
  int v187;
  _DWORD v188[64];
  int v189;
  int v190[64];
  int v191;
  _DWORD v192[64];
  int v193;
  int v194[64];
  int v195;
  _QWORD __src[33];
  long double v197[2];
  _QWORD v198[2];
  _DWORD __dst[65];
  _BYTE v200[260];
  _DWORD v201[65];
  _BYTE v202[260];
  uint64_t v203;

  v203 = *MEMORY[0x24BDAC8D0];
  v10 = COERCE_DOUBLE(sub_20EED840C(a1, a2, a3, a4, a5, a6, a7));
  *(double *)v198 = v10;
  v198[1] = v11;
  v16 = COERCE_DOUBLE(sub_20EED840C(a1, a2 + 130, a3 + 130, v12, v13, v14, v15));
  v197[0] = v16;
  v197[1] = v17;
  if (v10 >= 0.0 && v16 >= 0.0 || v10 <= 0.0 && v16 <= 0.0)
    return sub_20EED9994(v198, v197);
  v19 = a2[64];
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    if (v19 >= 0)
      v22 = v19;
    else
      v22 = -v19;
    v23 = v22 - 1 + v22;
    if (v23 >= 0x40)
      LODWORD(v23) = 64;
    v193 = v23;
    do
    {
      v25 = 0;
      v26 = 0;
      if (v20 >= v22 - 1)
        v27 = v22 - 1;
      else
        v27 = v20;
      v28 = v27 + 1;
      v29 = v20;
      do
      {
        if (v29 < v22)
        {
          v30 = a2[v29] * (unint64_t)a2[v25];
          v21 += v30;
          v26 += HIDWORD(v30);
        }
        ++v25;
        --v29;
      }
      while (v28 != v25);
      v192[v20] = v21;
      v21 = v26 + HIDWORD(v21);
      ++v20;
      v24 = v193;
    }
    while (v20 < v193);
    if (v21 && v193 != 64)
    {
      v192[v193] = v21;
      v24 = ++v193;
    }
    if (v24 && (v31 = a3[64]) != 0)
    {
      v32 = 0;
      v33 = 0;
      if (v24 >= 0)
        v34 = v24;
      else
        v34 = -v24;
      if (v31 >= 0)
        v35 = v31;
      else
        v35 = -v31;
      v36 = v34 - 1;
      v37 = v36 + v35;
      if (v36 + v35 >= 0x40)
        v37 = 64;
      v195 = v37;
      v38 = a3;
      do
      {
        v40 = 0;
        v41 = 0;
        if (v32 >= v36)
          v42 = v36;
        else
          v42 = v32;
        v43 = ~v42;
        v44 = v192;
        do
        {
          if (v32 + v40 < v35)
          {
            v45 = v38[v40] * (unint64_t)*v44;
            v33 += v45;
            v41 += HIDWORD(v45);
          }
          --v40;
          ++v44;
        }
        while (v43 != v40);
        v194[v32] = v33;
        v33 = v41 + HIDWORD(v33);
        ++v32;
        v39 = v195;
        ++v38;
      }
      while (v32 < v195);
      if (v33 && v195 != 64)
      {
        v194[v195] = v33;
        v39 = ++v195;
      }
      if (v24 > 0 != v31 > 0)
        v195 = -v39;
    }
    else
    {
      v195 = 0;
    }
  }
  else
  {
    v193 = 0;
    v195 = 0;
  }
  v46 = a2 + 65;
  v47 = a2[129];
  if (v47)
  {
    v48 = 0;
    v49 = 0;
    if (v47 >= 0)
      v50 = v47;
    else
      v50 = -v47;
    v51 = v50 - 1 + v50;
    if (v51 >= 0x40)
      LODWORD(v51) = 64;
    v189 = v51;
    do
    {
      v53 = 0;
      v54 = 0;
      if (v48 >= v50 - 1)
        v55 = v50 - 1;
      else
        v55 = v48;
      v56 = v55 + 1;
      v57 = v48;
      do
      {
        if (v57 < v50)
        {
          v58 = v46[v57] * (unint64_t)v46[v53];
          v49 += v58;
          v54 += HIDWORD(v58);
        }
        ++v53;
        --v57;
      }
      while (v56 != v53);
      v188[v48] = v49;
      v49 = v54 + HIDWORD(v49);
      ++v48;
      v52 = v189;
    }
    while (v48 < v189);
    if (v49 && v189 != 64)
    {
      v188[v189] = v49;
      v52 = ++v189;
    }
    v59 = a3 + 65;
    if (v52 && (v60 = a3[129]) != 0)
    {
      v61 = 0;
      v62 = 0;
      if (v52 >= 0)
        v63 = v52;
      else
        v63 = -v52;
      if (v60 >= 0)
        v64 = v60;
      else
        v64 = -v60;
      v65 = v63 - 1;
      v66 = v65 + v64;
      if (v65 + v64 >= 0x40)
        v66 = 64;
      v191 = v66;
      v67 = a3 + 65;
      do
      {
        v69 = 0;
        v70 = 0;
        if (v61 >= v65)
          v71 = v65;
        else
          v71 = v61;
        v72 = ~v71;
        v73 = v188;
        do
        {
          if (v61 + v69 < v64)
          {
            v74 = v67[v69] * (unint64_t)*v73;
            v62 += v74;
            v70 += HIDWORD(v74);
          }
          --v69;
          ++v73;
        }
        while (v72 != v69);
        v190[v61] = v62;
        v62 = v70 + HIDWORD(v62);
        ++v61;
        v68 = v191;
        ++v67;
      }
      while (v61 < v191);
      if (v62 && v191 != 64)
      {
        v190[v191] = v62;
        v68 = ++v191;
      }
      if (v52 > 0 != v60 > 0)
        v191 = -v68;
    }
    else
    {
      v191 = 0;
    }
  }
  else
  {
    v189 = 0;
    v59 = a3 + 65;
    v191 = 0;
  }
  sub_20EED4F68(__src, v194, v190);
  LODWORD(v75) = a2[194];
  if ((_DWORD)v75)
  {
    v76 = 0;
    v77 = 0;
    if ((v75 & 0x80000000) == 0)
      v75 = v75;
    else
      v75 = -(int)v75;
    v78 = v75 - 1 + v75;
    if (v78 >= 0x40)
      LODWORD(v78) = 64;
    v187 = v78;
    do
    {
      v79 = 0;
      v80 = 0;
      if (v76 >= v75 - 1)
        v81 = v75 - 1;
      else
        v81 = v76;
      v82 = v81 + 1;
      v83 = v76;
      do
      {
        if (v83 < v75)
        {
          v84 = a2[v83 + 130] * (unint64_t)a2[v79 + 130];
          v77 += v84;
          v80 += HIDWORD(v84);
        }
        ++v79;
        --v83;
      }
      while (v82 != v79);
      v186[v76] = v77;
      v77 = v80 + HIDWORD(v77);
      ++v76;
    }
    while (v76 < v187);
    if (v77 && v187 != 64)
      v186[v187++] = v77;
  }
  else
  {
    v187 = 0;
  }
  sub_20EED4C8C(__dst, __src, v186);
  v85 = a2 + 195;
  v86 = a2[259];
  if (!v86)
    goto LABEL_174;
  v87 = 0;
  v88 = 0;
  if (v86 >= 0)
    v89 = v86;
  else
    v89 = -v86;
  v90 = v89 - 1 + v89;
  if (v90 >= 0x40)
    LODWORD(v90) = 64;
  v181 = v90;
  do
  {
    v92 = 0;
    v93 = 0;
    if (v87 >= v89 - 1)
      v94 = v89 - 1;
    else
      v94 = v87;
    v95 = v94 + 1;
    v96 = v87;
    do
    {
      if (v96 < v89)
      {
        v97 = v85[v96] * (unint64_t)v85[v92];
        v88 += v97;
        v93 += HIDWORD(v97);
      }
      ++v92;
      --v96;
    }
    while (v95 != v92);
    v180[v87] = v88;
    v88 = v93 + HIDWORD(v88);
    ++v87;
    v91 = v181;
  }
  while (v87 < v181);
  if (v88 && v181 != 64)
  {
    v180[v181] = v88;
    v91 = ++v181;
  }
  if (!v91)
    goto LABEL_174;
  v98 = a3[64];
  if (!v98)
    goto LABEL_174;
  v99 = 0;
  v100 = 0;
  if (v91 >= 0)
    v101 = v91;
  else
    v101 = -v91;
  if (v98 >= 0)
    v102 = v98;
  else
    v102 = -v98;
  v103 = v101 - 1;
  v104 = v101 - 1 + v102;
  if (v104 >= 0x40)
    LODWORD(v104) = 64;
  v183 = v104;
  v105 = a3;
  do
  {
    v107 = 0;
    v108 = 0;
    if (v99 >= v103)
      v109 = v103;
    else
      v109 = v99;
    v110 = ~v109;
    v111 = v180;
    do
    {
      if (v99 + v107 < v102)
      {
        v112 = v105[v107] * (unint64_t)*v111;
        v100 += v112;
        v108 += HIDWORD(v112);
      }
      --v107;
      ++v111;
    }
    while (v110 != v107);
    v182[v99] = v100;
    v100 = v108 + HIDWORD(v100);
    ++v99;
    v106 = v183;
    ++v105;
  }
  while (v99 < v183);
  if (v100 && v183 != 64)
  {
    v182[v183] = v100;
    v106 = ++v183;
  }
  if (v91 > 0 != v98 > 0)
  {
    v106 = -v106;
    v183 = v106;
  }
  if (v106 && (v113 = a3[129]) != 0)
  {
    v114 = 0;
    v115 = 0;
    if (v106 >= 0)
      v116 = v106;
    else
      v116 = -v106;
    if (v113 >= 0)
      v117 = v113;
    else
      v117 = -v113;
    v118 = v116 - 1;
    v119 = v118 + v117;
    if (v118 + v117 >= 0x40)
      v119 = 64;
    v185 = v119;
    do
    {
      v121 = 0;
      v122 = 0;
      if (v114 >= v118)
        v123 = v118;
      else
        v123 = v114;
      v124 = ~v123;
      v125 = v182;
      do
      {
        if (v114 + v121 < v117)
        {
          v126 = v59[v121] * (unint64_t)*v125;
          v115 += v126;
          v122 += HIDWORD(v126);
        }
        --v121;
        ++v125;
      }
      while (v124 != v121);
      v184[v114] = v115;
      v115 = v122 + HIDWORD(v115);
      ++v114;
      v120 = v185;
      ++v59;
    }
    while (v114 < v185);
    if (v115 && v185 != 64)
    {
      v184[v185] = v115;
      v120 = ++v185;
    }
    if (v106 > 0 != v113 > 0)
      v185 = -v120;
  }
  else
  {
LABEL_174:
    v185 = 0;
  }
  sub_20EED4C8C(v201, __dst, v184);
  __dst[0] = 1;
  __dst[64] = 1;
  v127 = a2[64];
  if (v127 && (v128 = a2[129]) != 0)
  {
    v129 = 0;
    v130 = 0;
    if (v127 >= 0)
      v131 = v127;
    else
      v131 = -v127;
    if (v128 >= 0)
      v132 = v128;
    else
      v132 = -v128;
    v133 = v131 - 1;
    v134 = v133 + v132;
    if (v133 + v132 >= 0x40)
      v134 = 64;
    v193 = v134;
    do
    {
      v136 = 0;
      v137 = 0;
      if (v129 >= v133)
        v138 = v133;
      else
        v138 = v129;
      v139 = ~v138;
      v140 = a2;
      do
      {
        if (v129 + v136 < v132)
        {
          v141 = v46[v136] * (unint64_t)*v140;
          v130 += v141;
          v137 += HIDWORD(v141);
        }
        --v136;
        ++v140;
      }
      while (v139 != v136);
      v192[v129] = v130;
      v130 = v137 + HIDWORD(v130);
      ++v129;
      v135 = v193;
      ++v46;
    }
    while (v129 < v193);
    if (v130 && v193 != 64)
    {
      v192[v193] = v130;
      v135 = ++v193;
    }
    if (v127 > 0 != v128 > 0)
      v193 = -v135;
  }
  else
  {
    v193 = 0;
  }
  v142 = a2[194];
  if (v142 && (v143 = a2[259]) != 0)
  {
    v144 = 0;
    v145 = 0;
    if (v142 >= 0)
      v146 = v142;
    else
      v146 = -v142;
    if (v143 >= 0)
      v147 = v143;
    else
      v147 = -v143;
    v148 = v146 - 1;
    v149 = v148 + v147;
    if (v148 + v147 >= 0x40)
      v149 = 64;
    v191 = v149;
    do
    {
      v151 = 0;
      v152 = 0;
      if (v144 >= v148)
        v153 = v148;
      else
        v153 = v144;
      v154 = ~v153;
      v155 = a2 + 130;
      do
      {
        if (v144 + v151 < v147)
        {
          v156 = v85[v151] * (unint64_t)*v155;
          v145 += v156;
          v152 += HIDWORD(v156);
        }
        --v151;
        ++v155;
      }
      while (v154 != v151);
      v190[v144] = v145;
      v145 = v152 + HIDWORD(v145);
      ++v144;
      v150 = v191;
      ++v85;
    }
    while (v144 < v191);
    if (v145 && v191 != 64)
    {
      v190[v191] = v145;
      v150 = ++v191;
    }
    if (v142 > 0 != v143 > 0)
      v191 = -v150;
  }
  else
  {
    v191 = 0;
  }
  sub_20EED4C8C(v194, v192, v190);
  v157 = v195;
  if (v195)
  {
    v158 = 0;
    v159 = 0;
    if (v195 >= 0)
      v160 = v195;
    else
      v160 = -v195;
    v161 = v160 - 1;
    if (v160 >= 0x40)
      LODWORD(v160) = 64;
    LODWORD(__src[32]) = v160;
    do
    {
      v163 = 0;
      v164 = 0;
      if (v158 >= v161)
        v165 = v161;
      else
        v165 = v158;
      v166 = v165 + 1;
      do
      {
        if (v158 == v163)
        {
          v167 = v194[v158];
          v159 += (2 * v167);
          v164 += v167 >> 31;
        }
        ++v163;
      }
      while (v166 != v163);
      *((_DWORD *)__src + v158) = v159;
      v159 = v164 + HIDWORD(v159);
      ++v158;
      v162 = __src[32];
    }
    while (v158 < SLODWORD(__src[32]));
    if (v159 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v159;
      v162 = ++LODWORD(__src[32]);
    }
    if (v157 <= 0)
      LODWORD(__src[32]) = -v162;
  }
  else
  {
    LODWORD(__src[32]) = 0;
  }
  memcpy(v202, __src, sizeof(v202));
  memcpy(v200, a3 + 195, sizeof(v200));
  *(double *)&v172 = COERCE_DOUBLE(sub_20EED840C(a1, v201, __dst, v168, v169, v170, v171));
  v174 = v173;
  v175 = *(double *)&v172;
  v176 = COERCE_DOUBLE(sub_20EED9A6C(v198, (uint64_t)v197));
  v178 = v174 - v177;
  v179 = frexp(v175 / v176, (int *)&__src[1]);
  LODWORD(__src[1]) += v178;
  return *(_QWORD *)&v179;
}

void sub_20EEE254C()
{
  uint64_t v0;
  int *v1;
  int *v2;
  int *v3;
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int *v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int *v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  double v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v90;
  unint64_t v91;
  unsigned int *v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int *v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  double v111;
  uint64_t v112;
  int v113;
  double v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unsigned int *v135;
  unint64_t v136;
  unsigned int *v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int *v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  _DWORD *v157;
  unsigned int *v158;
  int v159;
  double v160;
  double v161;
  double v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unsigned int *v181;
  unint64_t v182;
  unsigned int *v183;
  int v184;
  int v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unsigned int *v198;
  unint64_t v199;
  int v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  int v207;
  _DWORD *v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unsigned int *v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  int v219;
  int v220;
  uint64_t v221;
  char v222;
  _DWORD *v223;
  int v224;
  int v225[64];
  int v226;
  int v227[64];
  int v228;
  int __dst[65];
  _DWORD v230[260];
  unsigned int __src[195];
  int v232[65];
  _QWORD v233[32];
  int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  int v238;
  _DWORD v239[64];
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  _DWORD v247[64];
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  uint64_t v255;

  v0 = MEMORY[0x24BDAC7A8]();
  v224 = v4;
  v220 = v5;
  v222 = v6;
  v221 = v7;
  v223 = (_DWORD *)v0;
  v255 = *MEMORY[0x24BDAC8D0];
  v8 = v1[2];
  v9 = *v1;
  v10 = v8 - v9;
  if (v8 <= v9)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      v248 = 0;
      v12 = v2[2];
      v13 = *v2;
      v14 = v12 - v13;
      if (v12 > v13)
        goto LABEL_4;
      goto LABEL_27;
    }
    LODWORD(v10) = v9 - v8;
    v11 = -1;
  }
  else
  {
    v11 = 1;
  }
  v247[0] = v10;
  v247[1] = 0;
  v248 = v11;
  v12 = v2[2];
  v13 = *v2;
  v14 = v12 - v13;
  if (v12 > v13)
  {
LABEL_4:
    v15 = 1;
    goto LABEL_5;
  }
LABEL_27:
  if ((v14 & 0x8000000000000000) == 0)
  {
    v251 = 0;
    v16 = v3[2];
    v17 = *v3;
    v18 = v16 - v17;
    if (v16 > v17)
      goto LABEL_6;
    goto LABEL_29;
  }
  v14 = -v14;
  v15 = -1;
LABEL_5:
  v249 = v14;
  v250 = 0;
  v251 = v15;
  v16 = v3[2];
  v17 = *v3;
  v18 = v16 - v17;
  if (v16 > v17)
  {
LABEL_6:
    v19 = 1;
    goto LABEL_7;
  }
LABEL_29:
  if ((v18 & 0x8000000000000000) == 0)
  {
    v254 = 0;
    v20 = v1[3];
    v21 = v1[1];
    v22 = v20 - v21;
    if (v20 > v21)
      goto LABEL_8;
    goto LABEL_31;
  }
  v18 = -v18;
  v19 = -1;
LABEL_7:
  v252 = v18;
  v253 = 0;
  v254 = v19;
  v20 = v1[3];
  v21 = v1[1];
  v22 = v20 - v21;
  if (v20 > v21)
  {
LABEL_8:
    v23 = 1;
    goto LABEL_9;
  }
LABEL_31:
  if ((v22 & 0x8000000000000000) == 0)
  {
    v240 = 0;
    v24 = v2[3];
    v25 = v2[1];
    v26 = v24 - v25;
    if (v24 > v25)
      goto LABEL_10;
    goto LABEL_33;
  }
  v22 = -v22;
  v23 = -1;
LABEL_9:
  v239[0] = v22;
  v239[1] = 0;
  v240 = v23;
  v24 = v2[3];
  v25 = v2[1];
  v26 = v24 - v25;
  if (v24 > v25)
  {
LABEL_10:
    v27 = 1;
    goto LABEL_11;
  }
LABEL_33:
  if ((v26 & 0x8000000000000000) == 0)
  {
    v243 = 0;
    v28 = v3[3];
    v29 = v3[1];
    v30 = v28 - v29;
    if (v28 > v29)
      goto LABEL_12;
    goto LABEL_35;
  }
  v26 = -v26;
  v27 = -1;
LABEL_11:
  v241 = v26;
  v242 = 0;
  v243 = v27;
  v28 = v3[3];
  v29 = v3[1];
  v30 = v28 - v29;
  if (v28 > v29)
  {
LABEL_12:
    v31 = 1;
    goto LABEL_13;
  }
LABEL_35:
  if (v30 < 0)
  {
    v30 = -v30;
    v31 = -1;
LABEL_13:
    v244 = v30;
    v245 = 0;
    v246 = v31;
    v32 = (int)v20 * (uint64_t)(int)v9 - (int)v21 * (uint64_t)(int)v8;
    if (v32 >= 1)
      goto LABEL_14;
    goto LABEL_37;
  }
  v246 = 0;
  v32 = (int)v20 * (uint64_t)(int)v9 - (int)v21 * (uint64_t)(int)v8;
  if (v32 >= 1)
  {
LABEL_14:
    v233[0] = v32;
    if (HIDWORD(v32))
      v33 = 2;
    else
      v33 = 1;
    v234 = v33;
    v34 = (int)v24 * (uint64_t)(int)v13 - (int)v25 * (uint64_t)(int)v12;
    if (v34 >= 1)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_37:
  if (v32 < 0)
  {
    v233[0] = -v32;
    if ((unint64_t)-v32 >> 32)
      v38 = -2;
    else
      v38 = -1;
    v234 = v38;
    v34 = (int)v24 * (uint64_t)(int)v13 - (int)v25 * (uint64_t)(int)v12;
    if (v34 >= 1)
    {
LABEL_18:
      v235 = v34;
      if (HIDWORD(v34))
        v35 = 2;
      else
        v35 = 1;
      v236 = v35;
      v36 = (int)v28 * (uint64_t)(int)v17 - (int)v29 * (uint64_t)(int)v16;
      if (v36 >= 1)
        goto LABEL_22;
LABEL_41:
      if (v36 < 0)
      {
        v237 = -v36;
        if ((unint64_t)-v36 >> 32)
          v37 = -2;
        else
          v37 = -1;
      }
      else
      {
        v37 = 0;
      }
      goto LABEL_62;
    }
  }
  else
  {
    v234 = 0;
    v34 = (int)v24 * (uint64_t)(int)v13 - (int)v25 * (uint64_t)(int)v12;
    if (v34 >= 1)
      goto LABEL_18;
  }
LABEL_39:
  if (v34 < 0)
  {
    v235 = -v34;
    if ((unint64_t)-v34 >> 32)
      v39 = -2;
    else
      v39 = -1;
    v236 = v39;
    v36 = (int)v28 * (uint64_t)(int)v17 - (int)v29 * (uint64_t)(int)v16;
    if (v36 >= 1)
      goto LABEL_22;
    goto LABEL_41;
  }
  v236 = 0;
  v36 = (int)v28 * (uint64_t)(int)v17 - (int)v29 * (uint64_t)(int)v16;
  if (v36 < 1)
    goto LABEL_41;
LABEL_22:
  v237 = v36;
  if (HIDWORD(v36))
    v37 = 2;
  else
    v37 = 1;
LABEL_62:
  v40 = 0;
  v238 = v37;
  v41 = v239;
  v42 = v247;
  do
  {
    LODWORD(v44) = v247[65 * v40 + 64];
    if (!(_DWORD)v44)
    {
      v55 = 0;
      goto LABEL_85;
    }
    v45 = 0;
    v46 = 0;
    if ((v44 & 0x80000000) == 0)
      v44 = v44;
    else
      v44 = -(int)v44;
    v47 = v44 - 1 + v44;
    if (v47 >= 0x40)
      LODWORD(v47) = 64;
    __dst[64] = v47;
    v48 = v42;
    do
    {
      v49 = 0;
      v50 = 0;
      if (v45 >= v44 - 1)
        v51 = v44 - 1;
      else
        v51 = v45;
      v52 = ~v51;
      v53 = v42;
      do
      {
        if (v45 + v49 < v44)
        {
          v54 = v48[v49] * (unint64_t)*v53;
          v46 += v54;
          v50 += HIDWORD(v54);
        }
        --v49;
        ++v53;
      }
      while (v52 != v49);
      __dst[v45] = v46;
      v46 = v50 + HIDWORD(v46);
      ++v45;
      ++v48;
    }
    while (v45 < __dst[64]);
    if (v46 && __dst[64] != 64)
    {
      __dst[__dst[64]] = v46;
      v55 = __dst[64] + 1;
LABEL_85:
      __dst[64] = v55;
    }
    LODWORD(v56) = v239[65 * v40 + 64];
    if (!(_DWORD)v56)
    {
      v43 = 0;
LABEL_64:
      v228 = v43;
      goto LABEL_65;
    }
    v57 = 0;
    v58 = 0;
    if ((v56 & 0x80000000) == 0)
      v56 = v56;
    else
      v56 = -(int)v56;
    v59 = v56 - 1 + v56;
    if (v59 >= 0x40)
      LODWORD(v59) = 64;
    v228 = v59;
    v60 = v41;
    do
    {
      v61 = 0;
      v62 = 0;
      if (v57 >= v56 - 1)
        v63 = v56 - 1;
      else
        v63 = v57;
      v64 = ~v63;
      v65 = v41;
      do
      {
        if (v57 + v61 < v56)
        {
          v66 = v60[v61] * (unint64_t)*v65;
          v58 += v66;
          v62 += HIDWORD(v66);
        }
        --v61;
        ++v65;
      }
      while (v64 != v61);
      v227[v57] = v58;
      v58 = v62 + HIDWORD(v58);
      ++v57;
      ++v60;
    }
    while (v57 < v228);
    if (v58 && v228 != 64)
    {
      v227[v228] = v58;
      v43 = v228 + 1;
      goto LABEL_64;
    }
LABEL_65:
    sub_20EED4F68(__src, __dst, v227);
    memcpy(&v230[65 * v40++], __src, 0x104uLL);
    v42 += 65;
    v41 += 65;
  }
  while (v40 != 3);
  v67 = 0;
  do
  {
    v73 = v67 + 1;
    v74 = (int)v67 - 1;
    if (v67 == 2)
      v75 = 0;
    else
      v75 = v67 + 1;
    if (!v67)
      v74 = 2;
    v76 = v247[65 * v75 + 64];
    if (!v76)
      goto LABEL_138;
    v77 = v239[65 * v74 + 64];
    if (!v77)
    {
      v76 = 0;
      goto LABEL_138;
    }
    v78 = 0;
    v79 = 0;
    v80 = &v239[65 * v74];
    if (v76 >= 0)
      v81 = v76;
    else
      v81 = -v76;
    if (v77 >= 0)
      v82 = v77;
    else
      v82 = -v77;
    v83 = v81 - 1;
    v84 = v83 + v82;
    if (v83 + v82 >= 0x40)
      v84 = 64;
    v228 = v84;
    do
    {
      v86 = 0;
      v87 = 0;
      if (v78 >= v83)
        v88 = v83;
      else
        v88 = v78;
      v89 = ~v88;
      v90 = &v247[65 * v75];
      do
      {
        if (v78 + v86 < v82)
        {
          v91 = v80[v86] * (unint64_t)*v90;
          v79 += v91;
          v87 += HIDWORD(v91);
        }
        --v86;
        ++v90;
      }
      while (v89 != v86);
      v227[v78] = v79;
      v79 = v87 + HIDWORD(v79);
      ++v78;
      v85 = v228;
      ++v80;
    }
    while (v78 < v228);
    if (v79 && v228 != 64)
    {
      v227[v228] = v79;
      v85 = ++v228;
    }
    if (v76 > 0 != v77 > 0)
    {
      v76 = -v85;
LABEL_138:
      v228 = v76;
    }
    v92 = &v247[65 * v74];
    v93 = v92[64];
    if (!v93 || (v94 = v239[65 * v75 + 64]) == 0)
    {
      v68 = 0;
LABEL_106:
      v226 = v68;
      goto LABEL_107;
    }
    v95 = 0;
    v96 = 0;
    v97 = &v239[65 * v75];
    if (v93 >= 0)
      v98 = v93;
    else
      v98 = -v93;
    if (v94 >= 0)
      v99 = v94;
    else
      v99 = -v94;
    v100 = v98 - 1;
    v101 = v100 + v99;
    if (v100 + v99 >= 0x40)
      v101 = 64;
    v226 = v101;
    do
    {
      v103 = 0;
      v104 = 0;
      if (v95 >= v100)
        v105 = v100;
      else
        v105 = v95;
      v106 = ~v105;
      v107 = v92;
      do
      {
        if (v95 + v103 < v99)
        {
          v108 = v97[v103] * (unint64_t)*v107;
          v96 += v108;
          v104 += HIDWORD(v108);
        }
        --v103;
        ++v107;
      }
      while (v106 != v103);
      v225[v95] = v96;
      v96 = v104 + HIDWORD(v96);
      ++v95;
      v102 = v226;
      ++v97;
    }
    while (v95 < v226);
    if (v96 && v226 != 64)
    {
      v225[v226] = v96;
      v102 = ++v226;
    }
    if (v93 > 0 != v94 > 0)
    {
      v68 = -v102;
      goto LABEL_106;
    }
LABEL_107:
    sub_20EED4C8C(__dst, v227, v225);
    memcpy(&__src[65 * v67++], __dst, 0x104uLL);
  }
  while (v73 != 3);
  v109 = sub_20EED9B58(v223, __src, v230, v69, v70, v71, v72);
  v111 = ldexp(*(long double *)&v109, v110);
  if (v220)
  {
    v112 = 0;
    while (1)
    {
      v118 = v112 + 1;
      v119 = (int)v112 - 1;
      if (v112 == 2)
        v120 = 0;
      else
        v120 = v112 + 1;
      if (!v112)
        v119 = 2;
      v121 = v239[65 * v120 + 64];
      if (!v121)
        goto LABEL_198;
      v122 = *((_DWORD *)&v233[32] + 65 * v119);
      if (!v122)
        break;
      v123 = 0;
      v124 = 0;
      v125 = (char *)v233 + 260 * v119;
      if (v121 >= 0)
        v126 = v121;
      else
        v126 = -v121;
      if (v122 >= 0)
        v127 = v122;
      else
        v127 = -v122;
      v128 = v126 - 1;
      v129 = v128 + v127;
      if (v128 + v127 >= 0x40)
        v129 = 64;
      v228 = v129;
      do
      {
        v131 = 0;
        v132 = 0;
        if (v123 >= v128)
          v133 = v128;
        else
          v133 = v123;
        v134 = ~v133;
        v135 = &v239[65 * v120];
        do
        {
          if (v123 + v131 < v127)
          {
            v136 = *(unsigned int *)&v125[4 * v131] * (unint64_t)*v135;
            v124 += v136;
            v132 += HIDWORD(v136);
          }
          --v131;
          ++v135;
        }
        while (v134 != v131);
        v227[v123] = v124;
        v124 = v132 + HIDWORD(v124);
        ++v123;
        v130 = v228;
        v125 += 4;
      }
      while (v123 < v228);
      if (v124 && v228 != 64)
      {
        v227[v228] = v124;
        v130 = ++v228;
      }
      if (v121 > 0 != v122 > 0)
      {
        v121 = -v130;
LABEL_198:
        v228 = v121;
      }
      v137 = &v239[65 * v119];
      v138 = v137[64];
      if (v138 && (v139 = *((_DWORD *)&v233[32] + 65 * v120)) != 0)
      {
        v140 = 0;
        v141 = 0;
        v142 = (char *)v233 + 260 * v120;
        if (v138 >= 0)
          v143 = v138;
        else
          v143 = -v138;
        if (v139 >= 0)
          v144 = v139;
        else
          v144 = -v139;
        v145 = v143 - 1;
        v146 = v145 + v144;
        if (v145 + v144 >= 0x40)
          v146 = 64;
        v226 = v146;
        do
        {
          v148 = 0;
          v149 = 0;
          if (v140 >= v145)
            v150 = v145;
          else
            v150 = v140;
          v151 = ~v150;
          v152 = v137;
          do
          {
            if (v140 + v148 < v144)
            {
              v153 = *(unsigned int *)&v142[4 * v148] * (unint64_t)*v152;
              v141 += v153;
              v149 += HIDWORD(v153);
            }
            --v148;
            ++v152;
          }
          while (v151 != v148);
          v225[v140] = v141;
          v141 = v149 + HIDWORD(v141);
          ++v140;
          v147 = v226;
          v142 += 4;
        }
        while (v140 < v226);
        if (v141 && v226 != 64)
        {
          v225[v226] = v141;
          v147 = ++v226;
        }
        if (v138 > 0 == v139 > 0)
          goto LABEL_167;
        v113 = -v147;
      }
      else
      {
        v113 = 0;
      }
      v226 = v113;
LABEL_167:
      sub_20EED4C8C(__dst, v227, v225);
      memcpy(&__src[65 * v112++], __dst, 0x104uLL);
      if (v118 == 3)
      {
        v154 = sub_20EED9B58(v223, __src, v230, v114, v115, v116, v117);
        *(long double *)(v221 + 8) = ldexp(*(long double *)&v154, v155) / v111;
        goto LABEL_224;
      }
    }
    v121 = 0;
    goto LABEL_198;
  }
LABEL_224:
  if ((v222 & 1) == 0 && !v224)
    return;
  v156 = 0;
  v232[64] = 0;
  v157 = v239;
  v158 = __src;
  while (2)
  {
    v164 = v156 + 1;
    v165 = (int)v156 - 1;
    if (v156 == 2)
      v166 = 0;
    else
      v166 = v156 + 1;
    if (!v156)
      v165 = 2;
    v167 = v247[65 * v166 + 64];
    if (!v167)
      goto LABEL_261;
    v168 = *((_DWORD *)&v233[32] + 65 * v165);
    if (!v168)
    {
      v167 = 0;
LABEL_261:
      v228 = v167;
      goto LABEL_262;
    }
    v169 = 0;
    v170 = 0;
    v171 = (char *)v233 + 260 * v165;
    if (v167 >= 0)
      v172 = v167;
    else
      v172 = -v167;
    if (v168 >= 0)
      v173 = v168;
    else
      v173 = -v168;
    v174 = v172 - 1;
    v175 = v174 + v173;
    if (v174 + v173 >= 0x40)
      v175 = 64;
    v228 = v175;
    do
    {
      v177 = 0;
      v178 = 0;
      if (v169 >= v174)
        v179 = v174;
      else
        v179 = v169;
      v180 = ~v179;
      v181 = &v247[65 * v166];
      do
      {
        if (v169 + v177 < v173)
        {
          v182 = *(unsigned int *)&v171[4 * v177] * (unint64_t)*v181;
          v170 += v182;
          v178 += HIDWORD(v182);
        }
        --v177;
        ++v181;
      }
      while (v180 != v177);
      v227[v169] = v170;
      v170 = v178 + HIDWORD(v170);
      ++v169;
      v176 = v228;
      v171 += 4;
    }
    while (v169 < v228);
    if (v170 && v228 != 64)
    {
      v227[v228] = v170;
      v176 = ++v228;
    }
    if (v167 > 0 != v168 > 0)
    {
      v167 = -v176;
      goto LABEL_261;
    }
LABEL_262:
    v183 = &v247[65 * v165];
    v184 = v183[64];
    if (!v184 || (v185 = *((_DWORD *)&v233[32] + 65 * v166)) == 0)
    {
      v200 = 0;
      goto LABEL_287;
    }
    v186 = 0;
    v187 = 0;
    v188 = (char *)v233 + 260 * v166;
    if (v184 >= 0)
      v189 = v184;
    else
      v189 = -v184;
    if (v185 >= 0)
      v190 = v185;
    else
      v190 = -v185;
    v191 = v189 - 1;
    v192 = v191 + v190;
    if (v191 + v190 >= 0x40)
      v192 = 64;
    v226 = v192;
    do
    {
      v194 = 0;
      v195 = 0;
      if (v186 >= v191)
        v196 = v191;
      else
        v196 = v186;
      v197 = ~v196;
      v198 = v183;
      do
      {
        if (v186 + v194 < v190)
        {
          v199 = *(unsigned int *)&v188[4 * v194] * (unint64_t)*v198;
          v187 += v199;
          v195 += HIDWORD(v199);
        }
        --v194;
        ++v198;
      }
      while (v197 != v194);
      v225[v186] = v187;
      v187 = v195 + HIDWORD(v187);
      ++v186;
      v193 = v226;
      v188 += 4;
    }
    while (v186 < v226);
    if (v187 && v226 != 64)
    {
      v225[v226] = v187;
      v193 = ++v226;
    }
    if (v184 > 0 != v185 > 0)
    {
      v200 = -v193;
LABEL_287:
      v226 = v200;
    }
    sub_20EED4C8C(__dst, v227, v225);
    memcpy(&__src[65 * v156], __dst, 0x104uLL);
    if (v224)
    {
      v159 = __src[65 * v156 + 64];
      if (!v159)
        goto LABEL_228;
      v201 = v239[65 * v156 + 64];
      if (!v201)
      {
        v159 = 0;
        goto LABEL_228;
      }
      v202 = 0;
      v203 = 0;
      if (v159 >= 0)
        v204 = v159;
      else
        v204 = -v159;
      if (v201 >= 0)
        v205 = v201;
      else
        v205 = -v201;
      v206 = v204 - 1;
      v207 = v206 + v205;
      if (v206 + v205 >= 0x40)
        v207 = 64;
      v228 = v207;
      v208 = v157;
      do
      {
        v210 = 0;
        v211 = 0;
        if (v202 >= v206)
          v212 = v206;
        else
          v212 = v202;
        v213 = ~v212;
        v214 = v158;
        do
        {
          if (v202 + v210 < v205)
          {
            v215 = v208[v210] * (unint64_t)*v214;
            v203 += v215;
            v211 += HIDWORD(v215);
          }
          --v210;
          ++v214;
        }
        while (v213 != v210);
        v227[v202] = v203;
        v203 = v211 + HIDWORD(v203);
        ++v202;
        v209 = v228;
        ++v208;
      }
      while (v202 < v228);
      if (v203 && v228 != 64)
      {
        v227[v228] = v203;
        v209 = ++v228;
      }
      if (v159 > 0 != v201 > 0)
      {
        v159 = -v209;
LABEL_228:
        v228 = v159;
      }
      sub_20EED4F68(__dst, v232, v227);
      memcpy(v232, __dst, sizeof(v232));
    }
    v158 += 65;
    v157 += 65;
    ++v156;
    if (v164 != 3)
      continue;
    break;
  }
  if ((v222 & 1) != 0)
  {
    v216 = sub_20EED9B58(v223, __src, v230, v160, v161, v162, v163);
    v160 = ldexp(*(long double *)&v216, v217) / v111;
    *(double *)v221 = v160;
  }
  if (v224)
  {
    v230[195] = 1;
    v230[259] = 1;
    v218 = sub_20EED8944(v223, __src, v230, v160, v161, v162, v163);
    *(long double *)(v221 + 16) = ldexp(*(long double *)&v218, v219) / v111;
  }
}

void sub_20EEE345C(void **a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  double v32;
  double v33;
  _BOOL4 v34;
  double v35;
  BOOL v36;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = v5 - (_BYTE *)*a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      sub_20E867F44();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_20E877A38();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_37;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_37;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_37:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
      v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  a1[1] = v7;
  v24 = (char *)*a1;
  v25 = (char *)v7 - (_BYTE *)*a1;
  if (v25 >= 9)
  {
    v26 = (((unint64_t)v25 >> 3) - 2) >> 1;
    v29 = *(v7 - 1);
    v28 = (char *)(v7 - 1);
    v27 = v29;
    v30 = &v24[8 * v26];
    v31 = *(_QWORD *)v30;
    v32 = *(double *)(v29 + 32);
    v33 = *(double *)(*(_QWORD *)v30 + 32);
    v34 = *(double *)(v29 + 24) < *(double *)(*(_QWORD *)v30 + 24);
    if (v32 != v33)
      v34 = v32 < v33;
    if (v34)
    {
      do
      {
        *(_QWORD *)v28 = v31;
        v28 = v30;
        if (!v26)
          break;
        v26 = (v26 - 1) >> 1;
        v30 = &v24[8 * v26];
        v31 = *(_QWORD *)v30;
        v35 = *(double *)(*(_QWORD *)v30 + 32);
        v36 = *(double *)(v27 + 24) < *(double *)(*(_QWORD *)v30 + 24);
        if (v32 != v35)
          v36 = v32 < v35;
      }
      while (v36);
      *(_QWORD *)v28 = v27;
    }
  }
}

char *sub_20EEE364C(_QWORD *a1, int *a2, int *a3, uint64_t *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  char **v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _BOOL4 v31;
  int v32;
  int v33;
  _BOOL4 v34;
  int v35;
  int v36;
  _BOOL4 v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  _BOOL4 v44;
  BOOL v45;
  char **v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v80;
  uint64_t v81;

  v12 = *a4;
  v11 = a4[1];
  v14 = (char *)a1[4];
  v13 = a1[5];
  if ((unint64_t)v14 >= v13)
  {
    v16 = (char **)(a1 + 3);
    v17 = (char *)a1[3];
    v18 = (v14 - v17) >> 5;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 59)
      sub_20E867F44();
    v20 = v13 - (_QWORD)v17;
    if (v20 >> 4 > v19)
      v19 = v20 >> 4;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
      v21 = 0x7FFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 59)
        goto LABEL_112;
      v22 = (char *)operator new(32 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[32 * v18];
    *(_QWORD *)v23 = v12;
    *((_QWORD *)v23 + 1) = v11;
    *((_QWORD *)v23 + 2) = 0;
    *((_QWORD *)v23 + 3) = 0;
    v15 = v23 + 32;
    if (v14 != v17)
    {
      do
      {
        v24 = *((_OWORD *)v14 - 1);
        *((_OWORD *)v23 - 2) = *((_OWORD *)v14 - 2);
        *((_OWORD *)v23 - 1) = v24;
        v23 -= 32;
        v14 -= 32;
      }
      while (v14 != v17);
      v14 = *v16;
    }
    a1[3] = v23;
    a1[4] = v15;
    a1[5] = &v22[32 * v21];
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_QWORD *)v14 = v12;
    *((_QWORD *)v14 + 1) = v11;
    v15 = v14 + 32;
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = 0;
  }
  a1[4] = v15;
  v25 = v15 - 4;
  a5[1] = v15 - 4;
  *(_QWORD *)(a6 + 8) = v15 - 4;
  v27 = *a2;
  v26 = a2[1];
  v28 = a2[2];
  v29 = a2[3];
  v31 = *a2 != v28 || v26 != v29;
  v32 = *a3;
  v33 = a3[2];
  if (*a3 == v33)
  {
    v36 = a3[1];
    v40 = a3[3];
    v41 = v36 == v40;
    v34 = v36 != v40;
    if (v31 && v41)
    {
      if (v27 == v32 && v26 == v36)
      {
LABEL_47:
        v39 = 1;
        v35 = a2[1];
        if (v32 == v33)
          goto LABEL_48;
        goto LABEL_62;
      }
      v35 = a3[1];
      if (v28 != v32 || v29 != v36)
        goto LABEL_28;
      v39 = 1;
      v35 = a2[3];
      if (v32 == v33)
        goto LABEL_48;
LABEL_62:
      v44 = 1;
LABEL_63:
      if (v31 || !v44)
      {
LABEL_64:
        v46 = (char **)(a1 + 6);
        v47 = v39;
LABEL_65:
        v47 |= 2uLL;
        goto LABEL_69;
      }
      if (v32 == v27 && v35 == v26)
        goto LABEL_68;
      if (v33 != v27)
        goto LABEL_64;
      v46 = (char **)(a1 + 6);
      v47 = v39;
      if (a3[3] != v26)
        goto LABEL_65;
      goto LABEL_69;
    }
  }
  else
  {
    v34 = 1;
  }
  if (!v31 && v34)
  {
    v35 = a3[1];
    if (v32 == v27 && v35 == v26)
      goto LABEL_47;
    v36 = a3[3];
    if (v33 != v27 || v36 != v26)
      goto LABEL_28;
    v39 = 1;
    if (v32 == v33)
      goto LABEL_48;
    goto LABEL_62;
  }
  v35 = a3[1];
  v36 = a3[3];
LABEL_28:
  v38 = v32 != v33 || v35 != v36;
  v39 = v31 ^ v38 ^ 1;
  if (v32 != v33)
    goto LABEL_62;
LABEL_48:
  v42 = a3[3];
  v43 = v35 == v42;
  v44 = v35 != v42;
  if (!v31 || !v43)
    goto LABEL_63;
  if (v27 == v32 && v26 == v35)
  {
LABEL_68:
    v46 = (char **)(a1 + 6);
    v47 = v39;
    goto LABEL_69;
  }
  v45 = v29 == v35 && v28 == v32;
  v46 = (char **)(a1 + 6);
  v47 = v39;
  if (!v45)
    goto LABEL_65;
LABEL_69:
  v80 = a5;
  v81 = a6;
  v49 = v46[1];
  v48 = (unint64_t)v46[2];
  if ((unint64_t)v49 >= v48)
  {
    v51 = *v46;
    v52 = 0xAAAAAAAAAAAAAAABLL * ((v49 - *v46) >> 4);
    v53 = v52 + 1;
    if (v52 + 1 > 0x555555555555555)
      goto LABEL_111;
    v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)v51) >> 4);
    if (2 * v54 > v53)
      v53 = 2 * v54;
    if (v54 >= 0x2AAAAAAAAAAAAAALL)
      v55 = 0x555555555555555;
    else
      v55 = v53;
    if (v55)
    {
      if (v55 > 0x555555555555555)
        goto LABEL_112;
      v56 = v25;
      v57 = (char *)operator new(48 * v55);
    }
    else
    {
      v56 = v25;
      v57 = 0;
    }
    v58 = &v57[48 * v52];
    *(_OWORD *)v58 = 0u;
    *((_OWORD *)v58 + 1) = 0u;
    *((_QWORD *)v58 + 4) = 0;
    *((_QWORD *)v58 + 5) = v47;
    v50 = v58 + 48;
    if (v49 != v51)
    {
      do
      {
        v59 = *((_OWORD *)v49 - 3);
        v60 = *((_OWORD *)v49 - 1);
        *((_OWORD *)v58 - 2) = *((_OWORD *)v49 - 2);
        *((_OWORD *)v58 - 1) = v60;
        *((_OWORD *)v58 - 3) = v59;
        v58 -= 48;
        v49 -= 48;
      }
      while (v49 != v51);
      v49 = *v46;
    }
    *v46 = v58;
    v46[1] = v50;
    v46[2] = &v57[48 * v55];
    if (v49)
      operator delete(v49);
    v25 = v56;
    a5 = v80;
  }
  else
  {
    *(_OWORD *)v49 = 0u;
    *((_OWORD *)v49 + 1) = 0u;
    *((_QWORD *)v49 + 4) = 0;
    *((_QWORD *)v49 + 5) = v47;
    v50 = v49 + 48;
  }
  v46[1] = v50;
  *((_QWORD *)v50 - 6) = *a1 + 24 * *((_QWORD *)a2 + 2);
  v61 = v50 - 48;
  v62 = (unint64_t)v46[2];
  if ((unint64_t)v50 >= v62)
  {
    v64 = *v46;
    v65 = 0xAAAAAAAAAAAAAAABLL * ((v50 - *v46) >> 4);
    v66 = v65 + 1;
    if (v65 + 1 <= 0x555555555555555)
    {
      v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (_QWORD)v64) >> 4);
      if (2 * v67 > v66)
        v66 = 2 * v67;
      if (v67 >= 0x2AAAAAAAAAAAAAALL)
        v68 = 0x555555555555555;
      else
        v68 = v66;
      if (!v68)
      {
        v69 = v25;
        v70 = 0;
LABEL_102:
        v71 = &v70[48 * v65];
        *(_OWORD *)v71 = 0u;
        *((_OWORD *)v71 + 1) = 0u;
        v72 = &v70[48 * v68];
        *((_QWORD *)v71 + 4) = 0;
        *((_QWORD *)v71 + 5) = v47;
        v63 = v71 + 48;
        if (v50 == v64)
        {
          *v46 = v71;
          v46[1] = v63;
          v76 = v50;
          v46[2] = v72;
        }
        else
        {
          v73 = v50;
          do
          {
            v74 = *((_OWORD *)v73 - 3);
            v75 = *((_OWORD *)v73 - 1);
            *((_OWORD *)v71 - 2) = *((_OWORD *)v73 - 2);
            *((_OWORD *)v71 - 1) = v75;
            *((_OWORD *)v71 - 3) = v74;
            v71 -= 48;
            v73 -= 48;
          }
          while (v73 != v64);
          v76 = *v46;
          *v46 = v71;
          v46[1] = v63;
          v46[2] = v72;
          if (!v76)
            goto LABEL_109;
        }
        operator delete(v76);
LABEL_109:
        v25 = v69;
        a5 = v80;
        goto LABEL_110;
      }
      if (v68 <= 0x555555555555555)
      {
        v69 = v25;
        v70 = (char *)operator new(48 * v68);
        goto LABEL_102;
      }
LABEL_112:
      sub_20E877A38();
    }
LABEL_111:
    sub_20E867F44();
  }
  *(_OWORD *)v50 = 0u;
  *((_OWORD *)v50 + 1) = 0u;
  *((_QWORD *)v50 + 4) = 0;
  *((_QWORD *)v50 + 5) = v47;
  v63 = v50 + 48;
LABEL_110:
  v46[1] = v63;
  *((_QWORD *)v63 - 6) = *a1 + 24 * *((_QWORD *)a3 + 2);
  *((_QWORD *)v50 - 4) = v63 - 48;
  *((_QWORD *)v63 - 5) = v25;
  *((_QWORD *)v63 - 4) = v61;
  a5[4] = v61;
  *((_QWORD *)v50 - 3) = a5;
  v77 = a5[2];
  *(_QWORD *)(v77 + 24) = v81;
  *(_QWORD *)(v81 + 32) = v77;
  v78 = *(_QWORD *)(v81 + 16);
  *(_QWORD *)(v78 + 24) = v63 - 48;
  *((_QWORD *)v63 - 2) = v78;
  return v50 - 48;
}

unint64_t sub_20EEE3B9C@<X0>(unint64_t result@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unsigned int v6;
  int v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t *v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  float32x2_t *v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  float v22;
  float32x2_t *v23;
  uint64_t v24;
  float32x2_t v25;
  uint64_t v26;
  float32x2_t v27;
  int64_t v28;
  int64_t v29;
  int64x2_t *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  int64x2_t *v34;
  unint64_t v35;
  int64x2_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  int64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  float v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  int64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  uint64_t *v117;
  uint64_t v118;
  int64_t v119;
  char *v120;
  char *v121;
  char *v122;
  int32x2_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  float *v129;
  float32x4_t *v130;
  unint64_t v131;
  float *v132;
  float *v133;
  unint64_t v134;
  uint64_t v135;
  float32x4_t *v136;
  float32x4_t *v137;
  uint64_t v138;
  float32x4_t v139;
  float v140;
  float v141;
  unsigned int v142;
  int32x4_t *v143;
  uint64_t v144;
  uint64_t v145;
  float32x4_t v146;
  unint64_t v147;
  __int128 *v148;
  char *v149;
  uint64_t v150;
  int32x4_t *v151;
  uint64_t v152;
  int32x4_t *v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  uint64_t v158;
  __int128 v159;
  int64x2_t *v160;
  float32x4_t v161;
  float32x4_t v162;
  char *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  __int128 v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  int32x2_t v177;
  float v178;
  float v179;
  uint64_t v180;
  float32x4_t v181;
  int8x16_t v182;
  float32x4_t v183;
  _DWORD *v184;
  _DWORD *v185;
  char *v186;
  char *v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  _DWORD *v196;
  unsigned int v197;
  size_t v198;
  unsigned int v199;
  size_t v200;
  float32x2_t v201;
  float32x2_t v202;
  float32x2_t *v203;
  uint64_t v204;
  _QWORD *v205;
  float32x4_t *v206;
  float32x4_t *v207;
  float *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  float *v215;
  char *v216;
  float32x2_t *v217;
  float *v218;
  float *v219;
  float *v220;
  float *v221;
  float *v222;
  float *v223;
  float *v224;
  float *v225;
  unsigned int *v226;
  int64_t v227;
  float v228;
  _DWORD *v229;
  uint64_t v230;
  float32x2_t v231;
  float32x2_t v232;
  unsigned int v233;
  float v234;
  float v235;
  uint64_t v236;
  unsigned int v237;
  float v238;
  char *v239;
  char *i;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int64x2_t v245;
  unint64_t v246;
  uint64_t __sz;
  uint64_t v248;
  size_t v249;
  char *v250;
  float32x2_t *v251;
  float32x2_t *v252;
  size_t v253;
  size_t v254;
  uint64_t v255;
  unint64_t v256;
  unsigned int v257;
  char *v258;
  float32x2_t *v259;
  char *v260;
  float32x2_t *v261;
  _QWORD *v262;
  float32x4_t *v263;
  uint64_t v264;
  float32x4_t *v265;
  char *v266;
  int v267;
  void *__p;
  size_t v269;
  char *v270;
  void *v271;
  char *v272;
  char *v273;
  float32x4_t v274;
  _QWORD v275[2];
  unsigned int v276;
  int64x2_t *v277;
  float32x4_t *p_p;
  _QWORD *v279;
  __int128 v280;
  int v281;
  float *v282;
  _QWORD *v283;
  float32x4_t **v284;
  int v285;
  uint64_t v286;

  v3 = result;
  v286 = *MEMORY[0x24BDAC8D0];
  if (result <= 1)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (result)
    {
      result = (unint64_t)operator new(0x24uLL);
      *(_QWORD *)(a3 + 8) = result + 36;
      *(_QWORD *)(a3 + 16) = result + 36;
      *(_QWORD *)(result + 8) = 0xFFFFFFFF00000000;
      *(_QWORD *)(result + 16) = 0xFFFFFFFF00000000;
      *(_QWORD *)(result + 24) = 0xFFFFFFFF00000000;
      *(_DWORD *)(result + 32) = 0;
      *(_QWORD *)a3 = result;
      *(_DWORD *)(a3 + 24) = 1065353216;
      *(_QWORD *)(a3 + 28) = 0;
      *(_DWORD *)(a3 + 36) = 1065353216;
      *(_QWORD *)result = 0xFFFFFFFF00000000;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1065353216;
      *(_QWORD *)(a3 + 28) = 0;
      *(_DWORD *)(a3 + 36) = 1065353216;
    }
    return result;
  }
  v6 = result - 1;
  if ((result - 1) >= 2)
    v7 = 2;
  else
    v7 = result - 1;
  v8 = result;
  v9 = (((8 * result) & 0x3FFFFFFF8) + 31) & 0x7FFFFFFE0;
  v275[1] = v9 >> 2;
  v10 = operator new(v9, (std::align_val_t)0x20uLL);
  v11 = 0;
  v275[0] = v10;
  v276 = v3;
  v252 = &a2[v8];
  v255 = 8 * v3;
  v12 = 8 * v3;
  v13 = a2;
  do
  {
    v14 = (uint64_t)*v13++;
    *(_QWORD *)(v275[0] + 4 * (v11 & 0xFFFFFFFE)) = v14;
    v11 += 2;
    v12 -= 8;
  }
  while (v12);
  if (v6 >= 5)
    v15 = 5;
  else
    v15 = v6;
  v271 = 0;
  v272 = 0;
  v273 = 0;
  v243 = v3;
  v244 = a3;
  v3 = v3;
  v246 = v3;
  v257 = v7;
  if ((_DWORD)v3)
  {
    v16 = (char *)operator new(48 * v3);
    v271 = v16;
    v272 = v16;
    v273 = &v16[48 * v3];
    v17 = (float32x2_t *)operator new(8 * v3);
    v18 = 4 * v3;
    v3 = (unint64_t)operator new(v18);
    bzero((void *)v3, v18);
    v19 = (char *)(v3 + v18);
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v19 = 0;
  }
  v20 = 0;
  v256 = (unint64_t)&v19[-v3];
  __sz = 2 * (_QWORD)&v19[-v3];
  v21 = (unint64_t)(v15 - 2) >> 1;
  v254 = (8 * (_BYTE)v15 + 31) & 0x60;
  v248 = (uint64_t)&v19[-v3] >> 2;
  v249 = v254 >> 2;
  v253 = (4 * (_BYTE)v7 * (_BYTE)v7 + 31) & 0x60;
  v22 = 2.0;
  v245 = vdupq_n_s64(4uLL);
  v23 = a2;
  v261 = v17;
  v250 = v19;
  v251 = a2;
  do
  {
    v24 = 0;
    v259 = v23;
    v25 = *v23;
    v26 = v255;
    do
    {
      while (1)
      {
        v27 = vsub_f32(a2[v24], v25);
        v17[v24] = v27;
        if (v20 == v24)
          break;
        *(_DWORD *)(v3 + 4 * v24++) = vmla_lane_f32(vmul_f32(v27, v27), (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1), v27, 1).u32[0];
        v26 -= 8;
        if (!v26)
          goto LABEL_22;
      }
      *(_DWORD *)(v3 + 4 * v24++) = 2139095040;
      v26 -= 8;
    }
    while (v26);
LABEL_22:
    v277 = 0;
    p_p = 0;
    v279 = 0;
    if (v19 == (char *)v3)
    {
      v33 = 0;
      v31 = 0;
      v29 = v15 - 1;
      v28 = v15 - 2;
      goto LABEL_31;
    }
    v29 = v15 - 1;
    v28 = v15 - 2;
    if (v256 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_20E867F44();
    v30 = (int64x2_t *)operator new(__sz);
    v31 = (uint64_t *)v30;
    v277 = v30;
    if (v256 < 0x10)
    {
      v32 = 0;
      v33 = (uint64_t *)v30;
      do
LABEL_30:
        *v33++ = v32++;
      while (v248 != v32);
      goto LABEL_31;
    }
    v33 = &v30->i64[v248 & 0xFFFFFFFFFFFFFFFCLL];
    v34 = v30 + 1;
    v35 = v248 & 0xFFFFFFFFFFFFFFFCLL;
    v36 = (int64x2_t)xmmword_2102E3FA0;
    do
    {
      v34[-1] = v36;
      *v34 = vaddq_s64(v36, vdupq_n_s64(2uLL));
      v36 = vaddq_s64(v36, v245);
      v34 += 2;
      v35 -= 4;
    }
    while (v35);
    v32 = v248 & 0xFFFFFFFFFFFFFFFCLL;
    if (v248 != (v248 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_30;
LABEL_31:
    if (!(_DWORD)v15)
      goto LABEL_120;
    if ((_DWORD)v15 != 1)
    {
      v41 = (unint64_t)(v15 - 2) >> 1;
      do
      {
        if (v21 >= v41)
        {
          v43 = (2 * v41) | 1;
          v44 = &v31[v43];
          if (2 * v41 + 2 < (unint64_t)v15 && *(float *)(v3 + 4 * *v44) < *(float *)(v3 + 4 * v44[1]))
          {
            ++v44;
            v43 = 2 * v41 + 2;
          }
          v45 = &v31[v41];
          v46 = *v44;
          v47 = *v45;
          v48 = *(float *)(v3 + 4 * *v45);
          if (*(float *)(v3 + 4 * *v44) >= v48)
          {
            do
            {
              *v45 = v46;
              v45 = v44;
              if (v21 < v43)
                break;
              v49 = 2 * v43;
              v43 = (2 * v43) | 1;
              v44 = &v31[v43];
              v50 = v49 + 2;
              if (v50 < v15 && *(float *)(v3 + 4 * *v44) < *(float *)(v3 + 4 * v44[1]))
              {
                ++v44;
                v43 = v50;
              }
              v46 = *v44;
            }
            while (*(float *)(v3 + 4 * *v44) >= v48);
            *v45 = v47;
          }
        }
      }
      while (v41-- > 0);
    }
    v37 = &v31[v15];
    if (v37 != v33)
    {
      if (v15 < 2)
      {
        v38 = *v31;
        v39 = &v31[v15];
        do
        {
          v40 = *v39;
          if (*(float *)(v3 + 4 * *v39) < *(float *)(v3 + 4 * v38))
          {
            *v39 = v38;
            *v31 = v40;
            v38 = v40;
          }
          ++v39;
        }
        while (v39 != v33);
        goto LABEL_68;
      }
      v51 = v31 + 1;
      v52 = v31 + 2;
      v53 = &v31[v15];
      while (2)
      {
        v54 = *v53;
        v55 = *(float *)(v3 + 4 * *v53);
        if (v55 < *(float *)(v3 + 4 * *v31))
        {
          *v53 = *v31;
          *v31 = v54;
          if ((_DWORD)v15 == 2 || *(float *)(v3 + 4 * *v51) >= *(float *)(v3 + 4 * *v52))
          {
            v56 = v31 + 1;
            v57 = 1;
            v58 = *v51;
            if (*(float *)(v3 + 4 * *v51) >= v55)
            {
LABEL_62:
              v59 = v31;
              do
              {
                *v59 = v58;
                v59 = v56;
                if (v21 < v57)
                  break;
                v60 = 2 * v57;
                v57 = (2 * v57) | 1;
                v56 = &v31[v57];
                v61 = v60 + 2;
                if (v61 < v15 && *(float *)(v3 + 4 * *v56) < *(float *)(v3 + 4 * v56[1]))
                {
                  ++v56;
                  v57 = v61;
                }
                v58 = *v56;
              }
              while (*(float *)(v3 + 4 * *v56) >= v55);
              *v59 = v54;
            }
          }
          else
          {
            v56 = v31 + 2;
            v57 = 2;
            v58 = *v52;
            if (*(float *)(v3 + 4 * *v52) >= v55)
              goto LABEL_62;
          }
        }
        if (++v53 == v33)
          break;
        continue;
      }
    }
LABEL_68:
    if ((_DWORD)v15 != 1)
    {
      v62 = 0;
      v63 = *v31;
      v64 = v31;
      do
      {
        v65 = v64;
        v64 += v62 + 1;
        v66 = 2 * v62;
        v62 = (2 * v62) | 1;
        v67 = v66 + 2;
        if (v67 < v15 && *(float *)(v3 + 4 * *v64) < *(float *)(v3 + 4 * v64[1]))
        {
          ++v64;
          v62 = v67;
        }
        *v65 = *v64;
      }
      while (v62 <= v21);
      v68 = v37 - 1;
      if (v64 == v37 - 1)
      {
        *v64 = v63;
      }
      else
      {
        *v64 = *v68;
        *v68 = v63;
        v69 = (char *)v64 - (char *)v31 + 8;
        if (v69 >= 9)
        {
          v70 = (((unint64_t)v69 >> 3) - 2) >> 1;
          v71 = &v31[v70];
          v72 = *v71;
          v73 = *v64;
          v74 = *(float *)(v3 + 4 * *v64);
          if (*(float *)(v3 + 4 * *v71) < v74)
          {
            do
            {
              v75 = v71;
              *v64 = v72;
              if (!v70)
                break;
              v70 = (v70 - 1) >> 1;
              v71 = &v31[v70];
              v72 = *v71;
              v64 = v75;
            }
            while (*(float *)(v3 + 4 * *v71) < v74);
            *v75 = v73;
          }
        }
      }
      if (v15 >= 3)
      {
        v76 = 0;
        v77 = *v31;
        v78 = v31;
        do
        {
          v79 = v78;
          v78 += v76 + 1;
          v80 = 2 * v76;
          v76 = (2 * v76) | 1;
          v81 = v80 + 2;
          if (v81 < v29 && *(float *)(v3 + 4 * *v78) < *(float *)(v3 + 4 * v78[1]))
          {
            ++v78;
            v76 = v81;
          }
          *v79 = *v78;
        }
        while (v76 <= (uint64_t)((unint64_t)(v15 - 3) >> 1));
        v82 = v37 - 2;
        if (v78 == v37 - 2)
        {
          *v78 = v77;
        }
        else
        {
          *v78 = *v82;
          *v82 = v77;
          v83 = (char *)v78 - (char *)v31 + 8;
          if (v83 >= 9)
          {
            v84 = (((unint64_t)v83 >> 3) - 2) >> 1;
            v85 = &v31[v84];
            v86 = *v85;
            v87 = *v78;
            v88 = *(float *)(v3 + 4 * *v78);
            if (*(float *)(v3 + 4 * *v85) < v88)
            {
              do
              {
                v89 = v85;
                *v78 = v86;
                if (!v84)
                  break;
                v84 = (v84 - 1) >> 1;
                v85 = &v31[v84];
                v86 = *v85;
                v78 = v89;
              }
              while (*(float *)(v3 + 4 * *v85) < v88);
              *v89 = v87;
            }
          }
        }
        if (v15 >= 4)
        {
          v90 = 0;
          v91 = *v31;
          v92 = v31;
          do
          {
            v93 = v92;
            v92 += v90 + 1;
            v94 = 2 * v90;
            v90 = (2 * v90) | 1;
            v95 = v94 + 2;
            if (v95 < v28 && *(float *)(v3 + 4 * *v92) < *(float *)(v3 + 4 * v92[1]))
            {
              ++v92;
              v90 = v95;
            }
            *v93 = *v92;
          }
          while (v90 <= (uint64_t)((unint64_t)(v15 - 4) >> 1));
          v96 = v37 - 3;
          if (v92 == v37 - 3)
          {
            *v92 = v91;
          }
          else
          {
            *v92 = *v96;
            *v96 = v91;
            v97 = (char *)v92 - (char *)v31 + 8;
            if (v97 >= 9)
            {
              v98 = (((unint64_t)v97 >> 3) - 2) >> 1;
              v99 = &v31[v98];
              v100 = *v99;
              v101 = *v92;
              v102 = *(float *)(v3 + 4 * *v92);
              if (*(float *)(v3 + 4 * *v99) < v102)
              {
                do
                {
                  v103 = v99;
                  *v92 = v100;
                  if (!v98)
                    break;
                  v98 = (v98 - 1) >> 1;
                  v99 = &v31[v98];
                  v100 = *v99;
                  v92 = v103;
                }
                while (*(float *)(v3 + 4 * *v99) < v102);
                *v103 = v101;
              }
            }
          }
          if (v15 >= 5)
          {
            v104 = 0;
            v105 = *v31;
            v106 = v31;
            do
            {
              v107 = v106;
              v106 += v104 + 1;
              v108 = 2 * v104;
              v104 = (2 * v104) | 1;
              v109 = v108 + 2;
              if (v109 < v15 - 3 && *(float *)(v3 + 4 * *v106) < *(float *)(v3 + 4 * v106[1]))
              {
                ++v106;
                v104 = v109;
              }
              *v107 = *v106;
            }
            while (v104 <= (uint64_t)((unint64_t)(v15 - 5) >> 1));
            v110 = v37 - 4;
            if (v106 == v110)
            {
              *v106 = v105;
            }
            else
            {
              *v106 = *v110;
              *v110 = v105;
              v111 = (char *)v106 - (char *)v31 + 8;
              if (v111 >= 9)
              {
                v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                v113 = &v31[v112];
                v114 = *v113;
                v115 = *v106;
                v116 = *(float *)(v3 + 4 * *v106);
                if (*(float *)(v3 + 4 * *v113) < v116)
                {
                  do
                  {
                    v117 = v113;
                    *v106 = v114;
                    if (!v112)
                      break;
                    v112 = (v112 - 1) >> 1;
                    v113 = &v31[v112];
                    v114 = *v113;
                    v106 = v117;
                  }
                  while (*(float *)(v3 + 4 * *v113) < v116);
                  *v117 = v115;
                }
              }
            }
          }
        }
      }
    }
LABEL_120:
    v118 = v33 - v31;
    if (v118 >= v15)
      v119 = v15;
    else
      v119 = v118;
    __p = 0;
    v269 = 0;
    v270 = 0;
    if (v119)
    {
      if (v119 < 0)
        sub_20E867F44();
      v120 = (char *)operator new(8 * v119);
      v121 = &v120[8 * v119];
      __p = v120;
      v270 = v121;
      v260 = v120;
      memcpy(v120, v31, 8 * v119);
      v269 = (size_t)v121;
      v17 = v261;
      if (v31)
LABEL_126:
        operator delete(v31);
    }
    else
    {
      v121 = 0;
      v260 = 0;
      v17 = v261;
      if (v31)
        goto LABEL_126;
    }
    v122 = (char *)operator new(v254, (std::align_val_t)0x20uLL);
    v124 = v122;
    v258 = v16;
    if (v260 != v121)
    {
      v125 = 0;
      v126 = v260;
      do
      {
        v127 = *(_QWORD *)v126;
        v126 += 8;
        *(float *)v123.i32 = sqrtf(*(float *)(v3 + 4 * v127));
        v123 = (int32x2_t)vdiv_f32(v17[v127], (float32x2_t)vdup_lane_s32(v123, 0));
        *(int32x2_t *)&v122[4 * (v125 & 0xFFFFFFFE)] = v123;
        v125 += 2;
      }
      while (v126 != v121);
    }
    LODWORD(v265) = 2;
    HIDWORD(v265) = v257;
    v266 = v122;
    v267 = 0;
    v263 = (float32x4_t *)&v265;
    v279 = (_QWORD *)(v253 >> 2);
    p_p = (float32x4_t *)operator new(v253, (std::align_val_t)0x20uLL);
    LODWORD(v280) = v257;
    DWORD1(v280) = v257;
    v283 = &v263;
    v284 = &v265;
    v285 = 1065353216;
    sub_20EEE5310((uint64_t)&p_p, (uint64_t)&v282);
    v128 = (DWORD1(v280) * v280);
    v129 = (float *)operator new((4 * v128 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
    v130 = p_p;
    if ((_DWORD)v128)
    {
      v131 = (v128 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      v132 = v129;
      v133 = (float *)p_p;
      if (v131 < 7)
        goto LABEL_257;
      v132 = v129;
      v133 = (float *)p_p;
      if ((unint64_t)((char *)v129 - (char *)p_p) < 0x20)
        goto LABEL_257;
      v134 = v131 + 1;
      v135 = v134 & 0x7FFFFFFFFFFFFFF8;
      v132 = &v129[v135];
      v133 = &p_p->f32[v135];
      v136 = p_p + 1;
      v137 = (float32x4_t *)(v129 + 4);
      v138 = v134 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v139 = vabsq_f32(*v136);
        v137[-1] = vabsq_f32(v136[-1]);
        *v137 = v139;
        v136 += 2;
        v137 += 2;
        v138 -= 8;
      }
      while (v138);
      if (v134 != (v134 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_257:
        do
        {
          v140 = *v133++;
          *v132++ = fabsf(v140);
        }
        while (v132 != &v129[v128]);
      }
    }
    if (v130)
      MEMORY[0x212BC6368](v130, 0x1000C8052888210);
    v141 = *v129;
    if ((_DWORD)v128 == 1)
    {
      v142 = 0;
      v143 = (int32x4_t *)v260;
    }
    else
    {
      v142 = 0;
      v144 = 4 * v128 - 4;
      v145 = 1;
      v143 = (int32x4_t *)v260;
      do
      {
        if (v129[v145] < v141)
        {
          v142 = v145;
          v141 = v129[v145];
        }
        ++v145;
        v144 -= 4;
      }
      while (v144);
    }
    if (v141 < v22)
    {
      v146.i64[0] = *(_QWORD *)&v124[8 * (v142 % v257)];
      v146.i64[1] = *(_QWORD *)&v124[8 * (v142 / v257)];
      v274 = v146;
      v22 = v141;
    }
    LODWORD(v279) = v15;
    if (v143 != (int32x4_t *)v121)
    {
      v147 = v121 - (char *)v143 - 8;
      v148 = &v280;
      v149 = (char *)v143;
      if (v147 < 0x38)
        goto LABEL_258;
      v150 = (v147 >> 3) + 1;
      v148 = (__int128 *)((char *)&v280 + 4 * (v150 & 0x3FFFFFFFFFFFFFF8));
      v149 = &v143->i8[8 * (v150 & 0x3FFFFFFFFFFFFFF8)];
      v151 = v143 + 2;
      v152 = v150 & 0x3FFFFFFFFFFFFFF8;
      v153 = (int32x4_t *)&v281;
      do
      {
        v155 = v151[-2];
        v154 = v151[-1];
        v157 = *v151;
        v156 = v151[1];
        v151 += 4;
        v153[-1] = vuzp1q_s32(v155, v154);
        *v153 = vuzp1q_s32(v157, v156);
        v153 += 2;
        v152 -= 8;
      }
      while (v152);
      if (v150 != (v150 & 0x3FFFFFFFFFFFFFF8))
      {
LABEL_258:
        do
        {
          v158 = *(_QWORD *)v149;
          v149 += 8;
          *(_DWORD *)v148 = v158;
          v148 = (__int128 *)((char *)v148 + 4);
        }
        while (v149 != v121);
      }
    }
    if (v16 < v273)
    {
      v19 = v250;
      *(_QWORD *)v16 = v124;
      *((_QWORD *)v16 + 1) = v249;
      v277 = 0;
      p_p = 0;
      *((_DWORD *)v16 + 4) = (_DWORD)v279;
      v159 = v280;
      *((_DWORD *)v16 + 10) = v281;
      *(_OWORD *)(v16 + 24) = v159;
      v16 += 48;
      a2 = v251;
      v272 = v258 + 48;
      v160 = v277;
      if (!v277)
        goto LABEL_156;
LABEL_155:
      MEMORY[0x212BC6368](v160, 0x1000C8052888210);
      goto LABEL_156;
    }
    v163 = (char *)v271;
    v164 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (_BYTE *)v271) >> 4);
    v165 = v164 + 1;
    if (v164 + 1 > 0x555555555555555)
      sub_20E867F44();
    if (0x5555555555555556 * ((v273 - (_BYTE *)v271) >> 4) > v165)
      v165 = 0x5555555555555556 * ((v273 - (_BYTE *)v271) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((v273 - (_BYTE *)v271) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v166 = 0x555555555555555;
    else
      v166 = v165;
    if (v166)
    {
      if (v166 > 0x555555555555555)
        sub_20E877A38();
      v167 = (char *)operator new(48 * v166);
    }
    else
    {
      v167 = 0;
    }
    v168 = &v167[48 * v164];
    v277 = 0;
    p_p = 0;
    *(_QWORD *)v168 = v124;
    *((_QWORD *)v168 + 1) = v249;
    *((_DWORD *)v168 + 4) = (_DWORD)v279;
    LODWORD(v279) = 0;
    *(_OWORD *)(v168 + 24) = v280;
    *((_DWORD *)v168 + 10) = v281;
    v169 = v168 + 48;
    if (v16 == v163)
    {
      v271 = v168;
      v272 = v168 + 48;
      v273 = &v167[48 * v166];
      v17 = v261;
    }
    else
    {
      v170 = 0;
      do
      {
        v171 = &v168[v170];
        v172 = &v16[v170];
        *((_QWORD *)v171 - 5) = 0;
        *((_QWORD *)v171 - 6) = *(_QWORD *)&v16[v170 - 48];
        *((_QWORD *)v172 - 6) = 0;
        *((_QWORD *)v171 - 5) = *(_QWORD *)&v16[v170 - 40];
        *((_QWORD *)v172 - 5) = 0;
        *((_DWORD *)v171 - 8) = *(_DWORD *)&v16[v170 - 32];
        *((_DWORD *)v172 - 8) = 0;
        v173 = *(_OWORD *)&v16[v170 - 24];
        *((_DWORD *)v171 - 2) = *(_DWORD *)&v16[v170 - 8];
        *(_OWORD *)(v171 - 24) = v173;
        v170 -= 48;
      }
      while (&v16[v170] != v163);
      v16 = (char *)v271;
      v174 = v272;
      v271 = &v168[v170];
      v272 = v168 + 48;
      v273 = &v167[48 * v166];
      v17 = v261;
      while (v174 != v16)
      {
        v176 = *((_QWORD *)v174 - 6);
        v174 -= 48;
        v175 = v176;
        if (v176)
          MEMORY[0x212BC6368](v175, 0x1000C8052888210);
      }
    }
    v19 = v250;
    if (v16)
      operator delete(v16);
    v16 = v169;
    a2 = v251;
    v272 = v16;
    v160 = v277;
    if (v277)
      goto LABEL_155;
LABEL_156:
    MEMORY[0x212BC6368](v129, 0x1000C8052888210);
    if (__p)
      operator delete(__p);
    v23 = v259 + 1;
    ++v20;
  }
  while (&v259[1] != v252);
  v161.i64[0] = v274.i64[1];
  v177 = *(int32x2_t *)v274.f32;
  v178 = fabsf(vmla_lane_f32(vmul_f32(*(float32x2_t *)v274.f32, *(float32x2_t *)&v274.u32[2]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v274.u32[2], 1), *(float32x2_t *)v274.f32, 1).f32[0]);
  if (v178 == 1.0 || (v178 <= 1.0 ? (v179 = 1.0 - v178) : (v179 = v178 + -1.0), v179 <= 0.000001))
  {
    v177 = vrev64_s32(*(int32x2_t *)&v274.u32[2]);
    *(int32x2_t *)v274.f32 = v177;
  }
  if (fabsf(*(float *)v177.i32) >= fabsf(v274.f32[2]))
  {
    v162.i64[0] = v274.i64[1];
    *(int32x2_t *)v161.f32 = v177;
    if (*(float *)v177.i32 >= 0.0)
      goto LABEL_194;
    goto LABEL_193;
  }
  v180 = v274.i64[1];
  *(int32x2_t *)&v162.u32[2] = v177;
  v274 = v162;
  *(int32x2_t *)v162.f32 = v177;
  if (v161.f32[0] < 0.0)
  {
LABEL_193:
    v181.i64[0] = vnegq_f32(v161).u64[0];
    v182 = (int8x16_t)v274;
    v181.i64[1] = v274.i64[1];
    v274 = v181;
    v162 = (float32x4_t)vextq_s8(v182, v182, 8uLL);
  }
LABEL_194:
  if (v162.f32[1] >= 0.0)
  {
    *(_QWORD *)v244 = 0;
    *(_QWORD *)(v244 + 8) = 0;
    *(_QWORD *)(v244 + 16) = 0;
    if (v246)
      goto LABEL_198;
LABEL_196:
    v184 = 0;
    *(float32x4_t *)(v244 + 24) = v274;
  }
  else
  {
    v183.i64[0] = v274.i64[0];
    v183.i64[1] = vnegq_f32(v162).u64[0];
    v274 = v183;
    *(_QWORD *)v244 = 0;
    *(_QWORD *)(v244 + 8) = 0;
    *(_QWORD *)(v244 + 16) = 0;
    if (!v246)
      goto LABEL_196;
LABEL_198:
    v185 = operator new(36 * v246);
    v184 = v185;
    *(_QWORD *)v244 = v185;
    *(_QWORD *)(v244 + 8) = v185;
    v186 = (char *)&v185[9 * v246];
    *(_QWORD *)(v244 + 16) = v186;
    v187 = (char *)v185;
    if (36 * v246 - 36 < 0x24)
      goto LABEL_259;
    v188 = (36 * v246 - 36) / 0x24 + 1;
    v187 = (char *)&v185[9 * (v188 & 0xFFFFFFFFFFFFFFELL)];
    v189 = (char *)(v185 + 9);
    v190 = v188 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v189 - 36) = 0xFFFFFFFF00000000;
      *(_QWORD *)v189 = 0xFFFFFFFF00000000;
      *((_DWORD *)v189 - 7) = 0;
      *((_DWORD *)v189 + 2) = 0;
      *(_QWORD *)(v189 + 12) = 0xFFFFFFFFLL;
      *((_QWORD *)v189 - 3) = 0xFFFFFFFFLL;
      *((_QWORD *)v189 - 2) = 0xFFFFFFFFLL;
      *(_QWORD *)(v189 + 20) = 0xFFFFFFFFLL;
      *((_QWORD *)v189 - 1) = 0xFFFFFFFFLL;
      *(_QWORD *)(v189 + 28) = 0xFFFFFFFFLL;
      v189 += 72;
      v190 -= 2;
    }
    while (v190);
    if (v188 != (v188 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_259:
      do
      {
        *(_QWORD *)v187 = 0xFFFFFFFF00000000;
        *((_QWORD *)v187 + 1) = 0xFFFFFFFF00000000;
        *((_QWORD *)v187 + 2) = 0xFFFFFFFF00000000;
        *((_QWORD *)v187 + 3) = 0xFFFFFFFF00000000;
        *((_DWORD *)v187 + 8) = 0;
        v187 += 36;
      }
      while (v187 != v186);
    }
    *(_QWORD *)(v244 + 8) = v186;
    *(float32x4_t *)(v244 + 24) = v274;
    v191 = 36 * v246 - 36;
    if (v191 < 0x24)
    {
      LODWORD(v192) = 0;
      v193 = (char *)v185;
      goto LABEL_208;
    }
    v194 = 0;
    v195 = v191 / 0x24 + 1;
    v192 = v195 & 0xFFFFFFFFFFFFFFELL;
    v193 = (char *)&v185[9 * (v195 & 0xFFFFFFFFFFFFFFELL)];
    v196 = v185;
    do
    {
      *v196 = v194;
      v196[9] = v194 + 1;
      v194 += 2;
      v196 += 18;
    }
    while (v192 != v194);
    if (v195 != v192)
    {
      do
      {
LABEL_208:
        *(_DWORD *)v193 = v192;
        v193 += 36;
        LODWORD(v192) = v192 + 1;
      }
      while (v193 != v186);
    }
  }
  v265 = &v274;
  v266 = 0;
  v263 = &v274;
  v264 = 0x100000000;
  __p = v275;
  v197 = v276;
  v198 = (4 * v276 + 31) & 0x7FFFFFFE0;
  v283 = (_QWORD *)(v198 >> 2);
  v282 = (float *)operator new(v198, (std::align_val_t)0x20uLL);
  LODWORD(v284) = v197;
  p_p = (float32x4_t *)&__p;
  v279 = &v265;
  LODWORD(v280) = 1065353216;
  sub_20EEE5480((uint64_t)&v282, (uint64_t)&v277);
  v262 = v275;
  v199 = v276;
  v200 = (4 * v276 + 31) & 0x7FFFFFFE0;
  v269 = v200 >> 2;
  __p = operator new(v200, (std::align_val_t)0x20uLL);
  LODWORD(v270) = v199;
  p_p = (float32x4_t *)&v262;
  v279 = &v263;
  LODWORD(v280) = 1065353216;
  sub_20EEE5480((uint64_t)&__p, (uint64_t)&v277);
  v203 = v261;
  if (v243 && (_DWORD)v15)
  {
    v204 = 0;
    v205 = v271;
    v206 = v263;
    v207 = v265;
    v208 = v282;
    v209 = 2 * HIDWORD(v266);
    v210 = v209 + v266;
    v211 = v209 + ((_DWORD)v266 + 1);
    v212 = 2 * HIDWORD(v264);
    v213 = v212 + v264;
    v214 = v212 + (v264 + 1);
    v215 = (float *)__p;
    v216 = (char *)v271 + 24;
    do
    {
      v217 = (float32x2_t *)v205[6 * v204];
      v218 = (float *)&v184[9 * v204];
      v219 = v218 + 1;
      v220 = v218 + 3;
      v221 = v218 + 4;
      v222 = v218 + 7;
      v223 = v218 + 8;
      v224 = v218 + 5;
      v225 = v218 + 6;
      v226 = (unsigned int *)v216;
      v227 = v15;
      do
      {
        v231 = *v217;
        v201.i32[0] = v207->i32[v210];
        v232 = vmul_f32(*v217, v201);
        v201.i32[0] = v207->i32[v211];
        v232.f32[0] = vmla_lane_f32(v232, v201, *v217, 1).f32[0];
        v202.i32[0] = v206->i32[v213];
        v201.i32[0] = v206->i32[v214];
        if (v232.f32[0] <= 0.98481)
          goto LABEL_226;
        v233 = *v226;
        v234 = v208[*v226] - v208[v204];
        if (v234 <= 0.0)
        {
          if (*(_DWORD *)v219 == -1 || fabsf(v234) < fabsf(v219[1]))
          {
            *(_DWORD *)v219 = v233;
            v219[1] = v234;
            v235 = -v234;
            v236 = (uint64_t)&v184[9 * v233 + 3];
            goto LABEL_225;
          }
        }
        else if (*(_DWORD *)v220 == -1 || fabsf(v234) < fabsf(*v221))
        {
          *(_DWORD *)v220 = v233;
          v220[1] = v234;
          v235 = -v234;
          v236 = (uint64_t)&v184[9 * v233 + 1];
LABEL_225:
          *(_DWORD *)v236 = v204;
          *(float *)(v236 + 4) = v235;
        }
LABEL_226:
        v202 = vmla_lane_f32(vmul_f32(v231, v202), v201, v231, 1);
        if (v202.f32[0] > 0.98481)
        {
          v237 = *v226;
          v238 = v215[*v226] - v215[v204];
          if (v238 <= 0.0)
          {
            if (*(_DWORD *)v222 == -1 || fabsf(v238) < fabsf(*v223))
            {
              *(_DWORD *)v222 = v237;
              v222[1] = v238;
              v228 = -v238;
              v229 = &v184[9 * v237 + 5];
              v230 = 2;
LABEL_215:
              *v229 = v204;
              *(float *)&v184[9 * v237 + 2 + 2 * v230] = v228;
              v203 = v261;
            }
          }
          else if (*(_DWORD *)v224 == -1 || fabsf(v238) < fabsf(*v225))
          {
            *(_DWORD *)v224 = v237;
            v224[1] = v238;
            v228 = -v238;
            v229 = &v184[9 * v237 + 7];
            v230 = 3;
            goto LABEL_215;
          }
        }
        ++v226;
        ++v217;
        --v227;
      }
      while (v227);
      ++v204;
      v216 += 48;
    }
    while (v204 != v246);
  }
  if (__p)
    MEMORY[0x212BC6368](__p, 0x1000C8052888210);
  if (v282)
    MEMORY[0x212BC6368](v282, 0x1000C8052888210);
  if (v3)
    operator delete((void *)v3);
  if (v203)
    operator delete(v203);
  v239 = (char *)v271;
  if (v271)
  {
    for (i = v272; i != v239; i -= 48)
    {
      v242 = *((_QWORD *)i - 6);
      v241 = v242;
      if (v242)
        MEMORY[0x212BC6368](v241, 0x1000C8052888210);
    }
    operator delete(v239);
  }
  result = v275[0];
  if (v275[0])
    return MEMORY[0x212BC6368](v275[0], 0x1000C8052888210);
  return result;
}

void sub_20EEE50C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52)
{
  void *v52;
  uint64_t v53;
  void *v55;
  uint64_t v56;

  if (v52)
  {
    operator delete(v52);
    v55 = __p;
    if (!__p)
    {
LABEL_3:
      sub_20EEE5298(&a52);
      v56 = *(_QWORD *)(v53 - 216);
      if (!v56)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v55 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v55);
  sub_20EEE5298(&a52);
  v56 = *(_QWORD *)(v53 - 216);
  if (!v56)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_4:
  MEMORY[0x212BC6368](v56, 0x1000C8052888210);
  goto LABEL_5;
}

void **sub_20EEE5298(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 6);
        v3 -= 48;
        v5 = v6;
        if (v6)
          MEMORY[0x212BC6368](v5, 0x1000C8052888210);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EEE5310(uint64_t a1, uint64_t a2)
{
  float *v4;
  uint64_t v5;
  uint64_t v6;
  const float *v7;
  float *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  size_t v13;
  float *v14;
  size_t v15;
  int v16;
  void *v17;
  size_t v18;
  unint64_t v19;

  v4 = *(float **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(_QWORD **)(a2 + 8);
  v7 = *(const float **)(v6 + 8);
  if (&v7[-*(unsigned int *)(v6 + 16)] == v4 || (v8 = *(float **)(v5 + 8), &v8[-*(unsigned int *)(v5 + 16)] == v4))
  {
    v11 = *(_DWORD *)(v6 + 4);
    v12 = *(_DWORD *)(v5 + 4);
    v13 = (4 * v12 * v11 + 31) & 0x7FFFFFFE0;
    v18 = v13 >> 2;
    v17 = operator new(v13, (std::align_val_t)0x20uLL);
    v19 = __PAIR64__(v12, v11);
    sub_20EEE5310(&v17, a2);
    v14 = *(float **)a1;
    v15 = v18;
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v19;
    if (v14)
      MEMORY[0x212BC6368](v14, 0x1000C8052888210);
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 4);
    if (*(_DWORD *)v6 * v9 && (v10 = *(_DWORD *)(v5 + 4), v10 * *(_DWORD *)v5))
    {
      sub_20E8BE588(1, 0, v9, v10, *(_DWORD *)v6, v7, 2, v8, *(float *)(a2 + 24), 0.0, 2, v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v16 = *(_DWORD *)(a1 + 20);
      if (v16 * *(_DWORD *)(a1 + 16))
        bzero(v4, 4 * (v16 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20EEE5458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void sub_20EEE5480(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  int v16;

  v4 = **(_QWORD **)(a2 + 8);
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v9 = *(unsigned int *)(v4 + 16);
    v10 = (4 * v9 + 31) & 0x7FFFFFFE0;
    v15 = v10 >> 2;
    v14 = operator new(v10, (std::align_val_t)0x20uLL);
    v16 = v9;
    sub_20EEE5480(&v14, a2);
    v11 = *(void **)a1;
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 16) = v16;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8052888210);
  }
  else if ((*(_DWORD *)(v4 + 16) & 0x7FFFFFFF) != 0)
  {
    v5 = *(uint64_t **)(a2 + 16);
    v6 = *((unsigned int *)v5 + 2);
    v7 = 2 * *((unsigned int *)v5 + 3);
    v8 = *v5;
    LODWORD(v14) = *(_DWORD *)(v8 + 4 * (v7 + v6));
    HIDWORD(v14) = *(_DWORD *)(v8 + 4 * (v7 + (v6 + 1)));
    sub_20E8BE600();
  }
  else
  {
    v13 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v13)
      bzero(*(void **)a1, 4 * v13);
  }
}

void sub_20EEE55C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x212BC6368](a10, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void sub_20EEE55E8(uint64_t *a1, uint64_t a2, uint64_t a3, float32x2_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  float v15;
  float v16;
  _BOOL4 v17;
  unint64_t v18;
  float *v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  float32x2_t *v26;
  uint64_t v27;
  float32x2_t *v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  _BOOL4 v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float v38;
  float v39;
  float32x2_t v40;
  float v41;
  BOOL v42;
  float *v43;
  float v44;
  float v45;
  BOOL v46;
  float v47;
  float v48;
  float v49;
  float v50;
  BOOL v51;
  float v52;
  float v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  float32x2_t *v61;
  float *v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float v70;
  float *v72;
  float v73;
  float v75;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  float *v81;
  uint64_t v82;
  __int128 v83;
  float v84;
  float v86;
  BOOL v87;
  float v88;
  float v89;
  float v90;
  BOOL v91;
  float v92;
  float v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  BOOL v106;
  float v107;
  float v108;
  float v109;
  BOOL v110;
  float v111;
  float v112;
  unint64_t v113;
  float *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  char *v122;
  float *v123;
  float v124;
  BOOL v125;
  float v126;
  float v127;
  float v128;
  BOOL v129;
  float v130;
  float v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  float *v137;
  uint64_t v138;
  __int128 v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  float32x2_t *v150;
  unint64_t v151;
  float *v152;
  float32x2_t v153;
  float *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  float *v166;
  uint64_t v167;
  __int128 v168;
  __n128 v169;
  __n128 v170;
  uint64_t v171;
  uint64_t v172;
  _BOOL4 v173;

  v15 = a4->f32[0];
  v16 = a4[1].f32[0];
  if (a4->f32[0] == v16)
    v17 = a4->f32[1] > a4[1].f32[1];
  else
    v17 = a4->f32[0] < v16;
  a1[1] = 0;
  a1[2] = 0;
  v18 = 2 * a2;
  *a1 = 0;
  v173 = v17;
  if (!(2 * a2))
  {
    v19 = 0;
    if (!a2)
      return;
    goto LABEL_9;
  }
  if (v18 >> 61)
    sub_20E969238();
  v19 = (float *)operator new(16 * a2);
  *a1 = (uint64_t)v19;
  a1[1] = (uint64_t)v19;
  a1[2] = (uint64_t)&v19[2 * v18];
  v17 = v173;
  if (a2)
  {
LABEL_9:
    v20 = 0;
    v21 = v15 != v16;
    v22 = 4 * v21;
    v23 = v19;
    v171 = a3;
    v172 = 4 * v21;
    do
    {
      v25 = v20;
      v26 = (float32x2_t *)(a3 + 8 * v20++);
      if (v20 == a2)
        v27 = 0;
      else
        v27 = v25 + 1;
      v28 = (float32x2_t *)(a3 + 8 * v27);
      v29 = *(float *)((char *)a4->f32 + v22);
      if (((v17 ^ (*(float *)((char *)v26->f32 + v22) <= v29)) & 1) != 0)
      {
        if (((v17 ^ (v28->f32[v21] <= v29)) & 1) != 0)
          goto LABEL_32;
        a11.n128_u64[0] = (unint64_t)*a4;
        v30 = a4[1];
        v31 = vsub_f32(v30, *a4);
        LODWORD(v32) = HIDWORD(*(unint64_t *)a4);
        v33 = sqrtf(vmla_lane_f32(vmul_f32(v31, v31), (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1), v31, 1).f32[0]);
        v34 = 1;
        v35 = *a4;
      }
      else
      {
        v35 = *a4;
        v30 = a4[1];
        v36 = vsub_f32(v30, *a4);
        v37 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*a4, *v26)), v36);
        v38 = vsub_f32(v37, (float32x2_t)vdup_lane_s32((int32x2_t)v37, 1)).f32[0];
        a11.n128_u64[0] = (unint64_t)vmla_lane_f32(vmul_f32(v36, v36), (float32x2_t)vdup_lane_s32((int32x2_t)v36, 1), v36, 1);
        v33 = sqrtf(a11.n128_f32[0]);
        v39 = v38 / v33;
        v34 = (float)(v38 / v33) == 0.0;
        if ((float)(v38 / v33) < 0.0)
          v39 = 0.0 - v39;
        if (v39 <= 0.000001)
          v34 = 1;
        LODWORD(v32) = HIDWORD(*(unint64_t *)a4);
        a11.n128_u32[0] = (unsigned __int32)*a4;
        if (((v17 ^ (v28->f32[v21] <= v29)) & 1) != 0)
        {
          if (v34)
          {
LABEL_32:
            v43 = (float *)*a1;
            if ((float *)*a1 != v23)
            {
              v44 = *(v23 - 2);
              v45 = v28->f32[0];
              v46 = v44 < v28->f32[0];
              if (v44 == v28->f32[0])
                goto LABEL_37;
              v47 = v44 - v45;
              v48 = v45 - v44;
              if (!v46)
                v48 = v47;
              if (v48 <= 0.000001)
              {
LABEL_37:
                v49 = *(v23 - 1);
                v50 = v28->f32[1];
                v51 = v49 < v50;
                if (v49 == v50)
                  continue;
                v52 = v49 - v50;
                v53 = v50 - v49;
                if (!v51)
                  v53 = v52;
                if (v53 <= 0.000001)
                  continue;
              }
            }
            v54 = a1[2];
            if ((unint64_t)v23 >= v54)
            {
              v55 = (char *)((char *)v23 - (char *)v43);
              v56 = ((char *)v23 - (char *)v43) >> 3;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 61)
                sub_20E969238();
              v58 = v54 - (_QWORD)v43;
              if (v58 >> 2 > v57)
                v57 = v58 >> 2;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                if (v59 >> 61)
                  sub_20E877A38();
                v60 = (char *)operator new(8 * v59);
                v61 = (float32x2_t *)&v60[8 * v56];
                *v61 = *v28;
                v24 = (uint64_t)&v61[1];
                if (v43 != v23)
                {
LABEL_51:
                  if ((unint64_t)(v55 - 8) < 0x168
                    || (v77 = ((char *)(v23 - 2) - (char *)v43) & 0xFFFFFFFFFFFFFFF8,
                        &v55[(_QWORD)v60 - 8 - v77] > &v55[(_QWORD)v60 - 8])
                    || (float *)((char *)v23 - v77 - 8) > v23 - 2
                    || (unint64_t)((char *)v43 - v60) < 0x20)
                  {
                    v62 = v23;
                    a3 = v171;
                  }
                  else
                  {
                    v78 = ((unint64_t)(v55 - 8) >> 3) + 1;
                    v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
                    v62 = &v23[v79 / 0xFFFFFFFFFFFFFFFCLL];
                    v61 = (float32x2_t *)((char *)v61 - v79);
                    v80 = &v60[8 * v56 - 16];
                    v81 = v23 - 4;
                    v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
                    a3 = v171;
                    do
                    {
                      v83 = *(_OWORD *)v81;
                      *((_OWORD *)v80 - 1) = *((_OWORD *)v81 - 1);
                      *(_OWORD *)v80 = v83;
                      v80 -= 32;
                      v81 -= 8;
                      v82 -= 4;
                    }
                    while (v82);
                    if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_54;
                  }
                  do
                  {
                    v63 = *(float32x2_t *)(v62 - 2);
                    v62 -= 2;
                    v61[-1] = v63;
                    --v61;
                  }
                  while (v62 != v43);
LABEL_54:
                  v23 = (float *)*a1;
                  *a1 = (uint64_t)v61;
                  a1[1] = v24;
                  a1[2] = (uint64_t)&v60[8 * v59];
                  if (!v23)
                    goto LABEL_196;
LABEL_194:
                  v154 = v23;
                  goto LABEL_195;
                }
              }
              else
              {
                v60 = 0;
                v61 = (float32x2_t *)(8 * v56);
                *(float32x2_t *)(8 * v56) = *v28;
                v24 = 8 * v56 + 8;
                if (v43 != v23)
                  goto LABEL_51;
              }
              a3 = v171;
              *a1 = (uint64_t)v61;
              a1[1] = v24;
              a1[2] = (uint64_t)&v60[8 * v59];
              if (!v23)
                goto LABEL_196;
              goto LABEL_194;
            }
LABEL_10:
            *(float32x2_t *)v23 = *v28;
            v24 = (uint64_t)(v23 + 2);
            goto LABEL_11;
          }
LABEL_64:
          v67 = *v26;
          v68 = *v28;
          v69 = vsub_f32(*v28, *v26);
          if (v15 == v16)
          {
            v73 = fabsf(v69.f32[0]);
            if (v69.f32[0] != 0.0 && v73 > 0.000001)
            {
              LODWORD(v32) = HIDWORD(*(unint64_t *)v26);
              v84 = fabsf(v69.f32[1]);
              if (v69.f32[1] != 0.0 && v84 > 0.000001)
                v32 = v67.f32[1] + (float)((float)(a11.n128_f32[0] - v67.f32[0]) * (float)(v69.f32[1] / v69.f32[0]));
              v72 = (float *)*a1;
              if ((float *)*a1 != v23)
                goto LABEL_100;
            }
            else
            {
              LODWORD(v32) = HIDWORD(*(unint64_t *)v28);
              v72 = (float *)*a1;
              if ((float *)*a1 != v23)
                goto LABEL_100;
            }
          }
          else
          {
            v70 = fabsf(v69.f32[1]);
            if (v69.f32[1] != 0.0 && v70 > 0.000001)
            {
              v75 = fabsf(v69.f32[0]);
              if (v69.f32[0] != 0.0 && v75 > 0.000001)
              {
                a11.n128_f32[0] = v67.f32[0] + (float)((float)(v32 - v67.f32[1]) * (float)(v69.f32[0] / v69.f32[1]));
                v72 = (float *)*a1;
                if ((float *)*a1 == v23)
                  goto LABEL_110;
                goto LABEL_100;
              }
              a11.n128_u32[0] = (unsigned __int32)*v26;
              v72 = (float *)*a1;
              if ((float *)*a1 != v23)
                goto LABEL_100;
            }
            else
            {
              a11.n128_u32[0] = (unsigned __int32)*v28;
              v72 = (float *)*a1;
              if ((float *)*a1 == v23)
                goto LABEL_110;
LABEL_100:
              v86 = *(v23 - 2);
              v87 = v86 < a11.n128_f32[0];
              if (v86 == a11.n128_f32[0])
                goto LABEL_107;
              v88 = v86 - a11.n128_f32[0];
              v89 = a11.n128_f32[0] - v86;
              if (!v87)
                v89 = v88;
              if (v89 <= 0.000001)
              {
LABEL_107:
                v90 = *(v23 - 1);
                v91 = v90 < v32;
                if (v90 == v32)
                  goto LABEL_128;
                v92 = v90 - v32;
                v93 = v32 - v90;
                if (!v91)
                  v93 = v92;
                if (v93 <= 0.000001)
                {
LABEL_128:
                  v106 = a11.n128_f32[0] < v68.f32[0];
                  if (a11.n128_f32[0] == v68.f32[0])
                    goto LABEL_135;
                  v107 = a11.n128_f32[0] - v68.f32[0];
                  v108 = v68.f32[0] - a11.n128_f32[0];
                  if (!v106)
                    v108 = v107;
                  if (v108 <= 0.000001)
                  {
LABEL_135:
                    v109 = v28->f32[1];
                    v110 = v32 < v109;
                    if (v32 == v109)
                      continue;
                    v111 = v32 - v109;
                    v112 = v109 - v32;
                    if (!v110)
                      v112 = v111;
                    if (v112 <= 0.000001)
                      continue;
                  }
                  v113 = a1[2];
                  if ((unint64_t)v23 >= v113)
                  {
                    v114 = (float *)*a1;
                    v115 = (uint64_t)v23 - *a1;
                    v116 = v115 >> 3;
                    v117 = (v115 >> 3) + 1;
                    if (v117 >> 61)
LABEL_219:
                      sub_20E969238();
                    v118 = v113 - (_QWORD)v114;
                    if (v118 >> 2 > v117)
                      v117 = v118 >> 2;
                    if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
                      v119 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v119 = v117;
                    if (v119)
                    {
                      if (v119 >> 61)
LABEL_221:
                        sub_20E877A38();
                      v120 = v119;
                      v121 = operator new(8 * v119);
                      v119 = v120;
                    }
                    else
                    {
                      v121 = 0;
                    }
                    v150 = (float32x2_t *)&v121[8 * v116];
                    *v150 = *v28;
                    v24 = (uint64_t)&v150[1];
                    a3 = v171;
                    if (v23 != v114)
                    {
                      v151 = (char *)v23 - (char *)v114 - 8;
                      if (v151 < 0x168)
                      {
                        v152 = v23;
                        goto LABEL_191;
                      }
                      v155 = ((char *)(v23 - 2) - (char *)v114) & 0xFFFFFFFFFFFFFFF8;
                      if (&v121[v115 - 8 - v155] > &v121[v115 - 8])
                      {
                        v152 = v23;
                        goto LABEL_191;
                      }
                      if ((float *)((char *)v23 - v155 - 8) > v23 - 2)
                      {
                        v152 = v23;
                        goto LABEL_191;
                      }
                      if ((unint64_t)((char *)v23 - v121 - v115) < 0x20)
                      {
                        v152 = v23;
                        goto LABEL_191;
                      }
                      v163 = (v151 >> 3) + 1;
                      v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v152 = &v23[v164 / 0xFFFFFFFFFFFFFFFCLL];
                      v150 = (float32x2_t *)((char *)v150 - v164);
                      v165 = &v121[8 * v116 - 16];
                      v166 = v23 - 4;
                      v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        *v165 = v168;
                        v165 -= 2;
                        v166 -= 8;
                        v167 -= 4;
                      }
                      while (v167);
                      if (v163 != (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        do
                        {
LABEL_191:
                          v153 = *(float32x2_t *)(v152 - 2);
                          v152 -= 2;
                          v150[-1] = v153;
                          --v150;
                        }
                        while (v152 != v114);
                      }
                      v23 = (float *)*a1;
                    }
                    *a1 = (uint64_t)v150;
                    a1[1] = v24;
                    a1[2] = (uint64_t)&v121[8 * v119];
                    if (!v23)
                      goto LABEL_196;
                    goto LABEL_194;
                  }
                  goto LABEL_10;
                }
              }
            }
          }
LABEL_110:
          v94 = a1[2];
          if ((unint64_t)v23 < v94)
          {
            *v23 = a11.n128_f32[0];
            v23[1] = v32;
            v19 = v23 + 2;
LABEL_127:
            a1[1] = (uint64_t)v19;
            v68.i32[0] = v28->i32[0];
            v23 = v19;
            goto LABEL_128;
          }
          v95 = (char *)((char *)v23 - (char *)v72);
          v96 = ((char *)v23 - (char *)v72) >> 3;
          v97 = v96 + 1;
          if ((unint64_t)(v96 + 1) >> 61)
            goto LABEL_219;
          v98 = v94 - (_QWORD)v72;
          if (v98 >> 2 > v97)
            v97 = v98 >> 2;
          if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
            v99 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v99 = v97;
          v169 = a11;
          if (v99)
          {
            if (v99 >> 61)
              goto LABEL_221;
            v100 = (char *)operator new(8 * v99);
            a11 = v169;
            v101 = (uint64_t)&v100[8 * v96];
            *(_DWORD *)v101 = v169.n128_u32[0];
            *(float *)(v101 + 4) = v32;
            if (v72 != v23)
            {
LABEL_121:
              if ((unint64_t)(v95 - 8) < 0x168
                || (v133 = ((char *)(v23 - 2) - (char *)v72) & 0xFFFFFFFFFFFFFFF8,
                    &v95[(_QWORD)v100 - 8 - v133] > &v95[(_QWORD)v100 - 8])
                || (float *)((char *)v23 - v133 - 8) > v23 - 2
                || (unint64_t)((char *)v72 - v100) < 0x20)
              {
                v102 = v23;
                v103 = v101;
                a3 = v171;
              }
              else
              {
                v134 = ((unint64_t)(v95 - 8) >> 3) + 1;
                v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
                v102 = &v23[v135 / 0xFFFFFFFFFFFFFFFCLL];
                v103 = v101 - v135;
                v136 = &v100[8 * v96 - 16];
                v137 = v23 - 4;
                v138 = v134 & 0x3FFFFFFFFFFFFFFCLL;
                a3 = v171;
                do
                {
                  v139 = *(_OWORD *)v137;
                  *((_OWORD *)v136 - 1) = *((_OWORD *)v137 - 1);
                  *(_OWORD *)v136 = v139;
                  v136 -= 32;
                  v137 -= 8;
                  v138 -= 4;
                }
                while (v138);
                if (v134 == (v134 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_124:
                  v23 = (float *)*a1;
                  v105 = &v100[8 * v99];
                  v19 = (float *)(v101 + 8);
                  *a1 = v103;
                  a1[1] = v101 + 8;
                  a1[2] = (uint64_t)v105;
                  if (v23)
                    goto LABEL_125;
                  goto LABEL_126;
                }
              }
              do
              {
                v104 = *((_QWORD *)v102 - 1);
                v102 -= 2;
                *(_QWORD *)(v103 - 8) = v104;
                v103 -= 8;
              }
              while (v102 != v72);
              goto LABEL_124;
            }
          }
          else
          {
            v100 = 0;
            v101 = 8 * v96;
            *(_DWORD *)v101 = a11.n128_u32[0];
            *(float *)(v101 + 4) = v32;
            if (v72 != v23)
              goto LABEL_121;
          }
          a3 = v171;
          v122 = &v100[8 * v99];
          v19 = (float *)(v101 + 8);
          *a1 = v101;
          a1[1] = v101 + 8;
          a1[2] = (uint64_t)v122;
          if (v23)
          {
LABEL_125:
            operator delete(v23);
            a11 = v169;
          }
LABEL_126:
          v17 = v173;
          v22 = v172;
          v21 = v15 != v16;
          goto LABEL_127;
        }
      }
      v40 = vmul_f32(vsub_f32(v35, *v28), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v30, v35)));
      v41 = vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v40, 1), v40).f32[0] / v33;
      v42 = v41 != 0.0;
      if (v41 < 0.0)
        v41 = 0.0 - v41;
      if (v41 <= 0.000001)
        v42 = 0;
      if (v34 && !v42)
        goto LABEL_32;
      if (!v42)
        goto LABEL_64;
      if (!v34)
        continue;
      v64 = *v26;
      v65 = vsub_f32(*v28, *v26);
      if (v15 == v16)
      {
        LODWORD(v66) = HIDWORD(*(unint64_t *)v28);
        if (v65.f32[0] != 0.0 && fabsf(v65.f32[0]) > 0.000001)
        {
          LODWORD(v66) = HIDWORD(*(unint64_t *)v26);
          if (v65.f32[1] != 0.0 && fabsf(v65.f32[1]) > 0.000001)
            v66 = v64.f32[1] + (float)((float)(v65.f32[1] / v65.f32[0]) * vsub_f32(v35, v64).f32[0]);
        }
      }
      else
      {
        a11.n128_u32[0] = (unsigned __int32)*v28;
        v66 = v35.f32[1];
        if (v65.f32[1] != 0.0 && fabsf(v65.f32[1]) > 0.000001)
        {
          a11.n128_u32[0] = (unsigned __int32)*v26;
          if (v65.f32[0] != 0.0 && fabsf(v65.f32[0]) > 0.000001)
            a11.n128_f32[0] = v64.f32[0] + vmuls_lane_f32(v65.f32[0] / v65.f32[1], vsub_f32(v35, v64), 1);
        }
      }
      v123 = (float *)*a1;
      if ((float *)*a1 != v19)
      {
        v124 = *(v19 - 2);
        v125 = v124 < a11.n128_f32[0];
        if (v124 == a11.n128_f32[0])
          goto LABEL_159;
        v126 = v124 - a11.n128_f32[0];
        v127 = a11.n128_f32[0] - v124;
        if (!v125)
          v127 = v126;
        if (v127 <= 0.000001)
        {
LABEL_159:
          v128 = *(v19 - 1);
          v129 = v128 < v66;
          if (v128 == v66)
            goto LABEL_165;
          v130 = v128 - v66;
          v131 = v66 - v128;
          if (!v129)
            v131 = v130;
          if (v131 <= 0.000001)
          {
LABEL_165:
            v23 = v19;
            continue;
          }
        }
      }
      v132 = a1[2];
      if ((unint64_t)v19 >= v132)
      {
        v140 = (char *)((char *)v19 - (char *)v123);
        v141 = ((char *)v19 - (char *)v123) >> 3;
        v142 = v141 + 1;
        if ((unint64_t)(v141 + 1) >> 61)
          sub_20E969238();
        v143 = v132 - (_QWORD)v123;
        if (v143 >> 2 > v142)
          v142 = v143 >> 2;
        if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8)
          v144 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v144 = v142;
        if (v144)
        {
          v170 = a11;
          if (v144 >> 61)
            sub_20E877A38();
          v145 = (char *)operator new(8 * v144);
          a11.n128_u64[1] = v170.n128_u64[1];
          v146 = (uint64_t)&v145[8 * v141];
          *(_DWORD *)v146 = v170.n128_u32[0];
          *(float *)(v146 + 4) = v66;
          if (v123 != v19)
          {
LABEL_182:
            if ((unint64_t)(v140 - 8) < 0x168
              || (v156 = ((char *)(v19 - 2) - (char *)v123) & 0xFFFFFFFFFFFFFFF8,
                  &v140[(_QWORD)v145 - 8 - v156] > &v140[(_QWORD)v145 - 8])
              || (float *)((char *)v19 - v156 - 8) > v19 - 2
              || (unint64_t)((char *)v123 - v145) < 0x20)
            {
              v147 = (char *)v19;
              v148 = v146;
            }
            else
            {
              v157 = ((unint64_t)(v140 - 8) >> 3) + 1;
              v158 = 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
              v147 = (char *)&v19[v158 / 0xFFFFFFFFFFFFFFFCLL];
              v148 = v146 - v158;
              v159 = &v145[8 * v141 - 16];
              v160 = (char *)(v19 - 4);
              v161 = v157 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v162 = *(_OWORD *)v160;
                *((_OWORD *)v159 - 1) = *((_OWORD *)v160 - 1);
                *(_OWORD *)v159 = v162;
                v159 -= 32;
                v160 -= 32;
                v161 -= 4;
              }
              while (v161);
              if (v157 == (v157 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_185:
                v19 = (float *)*a1;
                v24 = v146 + 8;
                *a1 = v148;
                a1[1] = v146 + 8;
                a1[2] = (uint64_t)&v145[8 * v144];
                if (!v19)
                  goto LABEL_196;
LABEL_203:
                v154 = v19;
LABEL_195:
                operator delete(v154);
LABEL_196:
                v17 = v173;
                v22 = v172;
                v21 = v15 != v16;
                goto LABEL_11;
              }
            }
            do
            {
              v149 = *((_QWORD *)v147 - 1);
              v147 -= 8;
              *(_QWORD *)(v148 - 8) = v149;
              v148 -= 8;
            }
            while (v147 != (char *)v123);
            goto LABEL_185;
          }
        }
        else
        {
          v145 = 0;
          v146 = 8 * v141;
          *(_DWORD *)v146 = a11.n128_u32[0];
          *(float *)(v146 + 4) = v66;
          if (v123 != v19)
            goto LABEL_182;
        }
        v24 = v146 + 8;
        *a1 = v146;
        a1[1] = v146 + 8;
        a1[2] = (uint64_t)&v145[8 * v144];
        if (v19)
          goto LABEL_203;
        goto LABEL_196;
      }
      *v19 = a11.n128_f32[0];
      v19[1] = v66;
      v24 = (uint64_t)(v19 + 2);
LABEL_11:
      a1[1] = v24;
      v19 = (float *)v24;
      v23 = (float *)v24;
    }
    while (v20 != a2);
  }
}

void sub_20EEE6140(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_20EEE6174@<D0>(uint64_t a1@<X0>, char *a2@<X1>, float32x2_t *a3@<X2>, uint64_t *a4@<X8>, double a5@<D4>, double a6@<D5>, __n128 a7@<Q6>)
{
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  _OWORD *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  _OWORD *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  __n128 v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  __n128 v127;
  uint64_t v128;
  uint64_t v129;
  double result;
  float32x2_t *v131;
  float32x2_t v132;
  uint64_t v133;
  double v134;
  unint64_t v135;
  unint64_t v136;
  _BYTE v137[24];

  v11 = 2 * a1;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!(2 * a1))
  {
    v13 = 0;
    v12 = 0;
    v14 = 0;
    v15 = 8 * a1;
    if (8 * a1 < 1)
      goto LABEL_69;
LABEL_6:
    v16 = (8 * a1) >> 3;
    v17 = v14 - v12;
    v18 = (uint64_t)(v14 - v12) >> 3;
    v19 = (uint64_t *)(v12 + ((v14 - v12) & 0xFFFFFFFFFFFFFFF8));
    v20 = (uint64_t)&v13[-v12];
    if (v16 > v20 >> 3)
    {
      v133 = (uint64_t)(v14 - v12) >> 3;
      v131 = a3;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)v16)
        v21 = (8 * a1) >> 3;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22 >> 61)
        sub_20E877A38();
      v23 = (char *)operator new(8 * v22);
      v24 = &v23[8 * v133];
      memcpy(v24, a2, v15);
      v25 = &v24[8 * v16];
      v26 = v17 - 8;
      if (v17 >= 8)
      {
        v66 = v19;
        if (v26 < 0x18)
          goto LABEL_82;
        v67 = (v26 >> 3) + 1;
        v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
        v66 = &v19[v68 / 0xFFFFFFFFFFFFFFF8];
        v24 -= v68;
        v69 = 8 * v133 - 16;
        v70 = &v23[v69];
        v71 = (__int128 *)(v12 + v69);
        v72 = v67 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v73 = *v71;
          *((_OWORD *)v70 - 1) = *(v71 - 1);
          *(_OWORD *)v70 = v73;
          v70 -= 32;
          v71 -= 2;
          v72 -= 4;
        }
        while (v72);
        if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_82:
          do
          {
            v74 = *--v66;
            *((_QWORD *)v24 - 1) = v74;
            v24 -= 8;
          }
          while (v66 != (uint64_t *)v12);
        }
        v27 = (uint64_t *)a4[1];
        v28 = &v23[8 * v22];
        if (v27 == v19)
          goto LABEL_55;
      }
      else
      {
        v27 = (uint64_t *)v12;
        v28 = &v23[8 * v22];
        if ((uint64_t *)v12 == v19)
        {
LABEL_55:
          v83 = (void *)*a4;
          *a4 = (uint64_t)v24;
          a4[1] = (uint64_t)v25;
          a4[2] = (uint64_t)v28;
          a3 = v131;
          if (v83)
            operator delete(v83);
          goto LABEL_69;
        }
      }
      v75 = (unint64_t)v27 + -v12 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8;
      if (v75 < 0x18)
        goto LABEL_83;
      v76 = (v75 >> 3) + 1;
      v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
      v19 = (uint64_t *)((char *)v19 + v77);
      v25 += v77;
      v78 = &v23[8 * v133 + 16 + 8 * v16];
      v79 = (__int128 *)(8 * v133 + v12 + 16);
      v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v81 = *v79;
        *((_OWORD *)v78 - 1) = *(v79 - 1);
        *(_OWORD *)v78 = v81;
        v78 += 32;
        v79 += 2;
        v80 -= 4;
      }
      while (v80);
      if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_83:
        do
        {
          v82 = *v19++;
          *(_QWORD *)v25 = v82;
          v25 += 8;
        }
        while (v19 != v27);
      }
      goto LABEL_55;
    }
    v29 = v17 & 0xFFFFFFFFFFFFFFF8;
    v30 = -(uint64_t)(v17 & 0xFFFFFFFFFFFFFFF8);
    v31 = v30 >> 3;
    if (v30 >> 3 >= v16)
    {
      v32 = &a2[8 * v16];
      v33 = (_QWORD *)v12;
    }
    else
    {
      v32 = &a2[8 * v31];
      v33 = (_QWORD *)v12;
      if (v31 != a1)
      {
        v34 = v29 + 8 * a1 - 8;
        v35 = &a2[8 * v31];
        v33 = (_QWORD *)v12;
        if (v34 < 0x38)
          goto LABEL_84;
        v35 = &a2[8 * v31];
        v33 = (_QWORD *)v12;
        if (v29 - (_QWORD)a2 + v12 < 0x20)
          goto LABEL_84;
        v36 = (v34 >> 3) + 1;
        v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        v35 = &v32[v37];
        v33 = (_QWORD *)(v12 + v37);
        v38 = (_OWORD *)(v12 + 16);
        v39 = (__int128 *)&a2[8 * v31 + 16];
        v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v41 = *v39;
          *(v38 - 1) = *(v39 - 1);
          *v38 = v41;
          v38 += 2;
          v39 += 2;
          v40 -= 4;
        }
        while (v40);
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_84:
          do
          {
            v42 = *(_QWORD *)v35;
            v35 += 8;
            *v33++ = v42;
          }
          while (v35 != &a2[v15]);
        }
      }
      a4[1] = (uint64_t)v33;
      if (v30 < 1)
        goto LABEL_69;
    }
    v43 = (char *)&v19[v16];
    v44 = (char *)((char *)v33 - v43);
    v45 = ((char *)v33 - v43) >> 3;
    v46 = &v33[-v16];
    v47 = v33;
    if ((unint64_t)v46 < v12)
    {
      v48 = &v44[v17 & 0xFFFFFFFFFFFFFFF8];
      v49 = (unint64_t)&v48[v12 + 8];
      if (v12 > v49)
        v49 = v12;
      v50 = v49 + ~v12 - (_QWORD)v48;
      v51 = &v33[-v16];
      v47 = v33;
      if (v50 < 0x58)
        goto LABEL_85;
      v51 = &v33[-v16];
      v47 = v33;
      if ((unint64_t)&v43[-(v17 & 0xFFFFFFFFFFFFFFF8) - v12] < 0x20)
        goto LABEL_85;
      v52 = (v50 >> 3) + 1;
      v53 = v52 & 0x3FFFFFFFFFFFFFFCLL;
      v51 = &v46[v53];
      v47 = &v33[v53];
      v54 = v33 + 2;
      v55 = (__int128 *)(8 * v45 + 8 * v18 + v12 + 16);
      v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v57 = *v55;
        *(v54 - 1) = *(v55 - 1);
        *v54 = v57;
        v54 += 2;
        v55 += 2;
        v56 -= 4;
      }
      while (v56);
      if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_85:
        do
        {
          v58 = *v51++;
          *v47++ = v58;
        }
        while ((unint64_t)v51 < v12);
      }
    }
    a4[1] = (uint64_t)v47;
    if (v33 != (_QWORD *)v43)
    {
      v59 = v44 - 8;
      if ((unint64_t)(v44 - 8) < 0x1A8
        || (_QWORD *)((char *)v33 - ((unint64_t)v59 & 0xFFFFFFFFFFFFFFF8) - 8) > v33 - 1
        || &v44[(v17 & 0xFFFFFFFFFFFFFFF8) - 8 + v12 - ((unint64_t)v59 & 0xFFFFFFFFFFFFFFF8)] > &v44[(v17 & 0xFFFFFFFFFFFFFFF8) - 8 + v12]
        || (unint64_t)(&v44[(v17 & 0xFFFFFFFFFFFFFFF8) + v12] - (char *)v33) < 0x20)
      {
        v60 = v33;
      }
      else
      {
        v84 = ((unint64_t)v59 >> 3) + 1;
        v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
        v60 = &v33[v85 / 0xFFFFFFFFFFFFFFF8];
        v46 = (uint64_t *)((char *)v46 - v85);
        v86 = (__int128 *)(8 * v45 + 8 * v18 + v12 - 16);
        v87 = v33 - 2;
        v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v89 = *v86;
          *(v87 - 1) = *(v86 - 1);
          *v87 = v89;
          v86 -= 2;
          v87 -= 2;
          v88 -= 4;
        }
        while (v88);
        if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_41;
      }
      v61 = v60 - 1;
      do
      {
        v62 = *--v46;
        *v61-- = v62;
      }
      while (v46 != v19);
    }
LABEL_41:
    v63 = v32 - a2;
    if (v32 == a2)
      goto LABEL_69;
    v64 = v63 - 8;
    if ((unint64_t)(v63 - 8) >= 0x38)
    {
      v65 = a2;
      if ((v17 & 0xFFFFFFFFFFFFFFF8) + v12 - (unint64_t)a2 >= 0x20)
      {
        v90 = (v64 >> 3) + 1;
        v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
        v19 = (uint64_t *)((char *)v19 + v91);
        v65 = &a2[v91];
        v92 = (__int128 *)(a2 + 16);
        v93 = (_OWORD *)(v12 + 8 * v18 + 16);
        v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v95 = *v92;
          *(v93 - 1) = *(v92 - 1);
          *v93 = v95;
          v92 += 2;
          v93 += 2;
          v94 -= 4;
        }
        while (v94);
        if (v90 == (v90 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_69;
      }
    }
    else
    {
      v65 = a2;
    }
    do
    {
      v96 = *(_QWORD *)v65;
      v65 += 8;
      *v19++ = v96;
    }
    while (v65 != v32);
    goto LABEL_69;
  }
  if (v11 >> 61)
    sub_20E969238();
  v12 = (unint64_t)operator new(16 * a1);
  v13 = (char *)(v12 + 8 * v11);
  *a4 = v12;
  a4[1] = v12;
  a4[2] = (uint64_t)v13;
  v14 = v12;
  v15 = 8 * a1;
  if (8 * a1 >= 1)
    goto LABEL_6;
LABEL_69:
  v97 = a3[1];
  v98 = vmul_f32(vadd_f32(*a3, v97), (float32x2_t)0x3F0000003F000000);
  v99 = vsub_f32(v98, v97);
  v100 = v98.f32[1];
  v101 = v99.f32[1];
  v102 = v98.f32[1] + v99.f32[1];
  v103 = *a4;
  v104 = a4[1];
  v132 = vadd_f32(v98, v99);
  *(float32x2_t *)&v134 = vsub_f32(v98, v99);
  v135 = (unint64_t)v132;
  LODWORD(v136) = LODWORD(v134);
  *((float *)&v136 + 1) = v98.f32[1] + v99.f32[1];
  sub_20EEE55E8((uint64_t *)v137, (v104 - v103) >> 3, v103, (float32x2_t *)&v135, *(double *)&v98, *(double *)&v99, *(double *)&v132, v134, a5, a6, a7);
  v111 = v100 - v101;
  if (*a4)
  {
    operator delete((void *)*a4);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  v112 = *(_QWORD *)v137;
  *a4 = *(_QWORD *)v137;
  v113 = *(_QWORD *)&v137[8];
  *(_OWORD *)(a4 + 1) = *(_OWORD *)&v137[8];
  v135 = __PAIR64__(LODWORD(v102), LODWORD(v134));
  v136 = __PAIR64__(LODWORD(v111), LODWORD(v134));
  sub_20EEE55E8((uint64_t *)v137, (v113 - v112) >> 3, v112, (float32x2_t *)&v135, v134, v105, v106, v107, v108, v109, v110);
  if (*a4)
  {
    operator delete((void *)*a4);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  v120 = *(_QWORD *)v137;
  *a4 = *(_QWORD *)v137;
  v121 = *(_QWORD *)&v137[8];
  *(_OWORD *)(a4 + 1) = *(_OWORD *)&v137[8];
  v135 = __PAIR64__(LODWORD(v111), LODWORD(v134));
  v136 = __PAIR64__(LODWORD(v111), v132.u32[0]);
  sub_20EEE55E8((uint64_t *)v137, (v121 - v120) >> 3, v120, (float32x2_t *)&v135, *(double *)&v132, v114, v115, v116, v117, v118, v119);
  if (*a4)
  {
    operator delete((void *)*a4);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  v128 = *(_QWORD *)v137;
  *a4 = *(_QWORD *)v137;
  v129 = *(_QWORD *)&v137[8];
  *(_OWORD *)(a4 + 1) = *(_OWORD *)&v137[8];
  v135 = __PAIR64__(LODWORD(v111), v132.u32[0]);
  v136 = (unint64_t)v132;
  sub_20EEE55E8((uint64_t *)v137, (v129 - v128) >> 3, v128, (float32x2_t *)&v135, *(double *)&v132, v122, v123, v124, v125, v126, v127);
  if (*a4)
  {
    operator delete((void *)*a4);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  result = *(double *)v137;
  *(_OWORD *)a4 = *(_OWORD *)v137;
  a4[2] = *(_QWORD *)&v137[16];
  return result;
}

void sub_20EEE682C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEE6850@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int64x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int8 *v10;
  int64x2_t v11;
  int64x2_t *v12;
  int64x2_t v13;
  int64x2_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  uint64_t *v20[2];

  v4 = a1[1];
  v5 = v4 - *a1;
  if (v4 == *a1)
  {
    v10 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_20E867F44();
    v6 = (int64x2_t *)operator new(2 * v5);
    v7 = (uint64_t)v6;
    v8 = v5 >> 2;
    if ((unint64_t)v5 >= 0x10)
    {
      v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      v5 = (uint64_t)&v6->i64[v8 & 0xFFFFFFFFFFFFFFFCLL];
      v11 = (int64x2_t)xmmword_2102E3FA0;
      v12 = v6 + 1;
      v13 = vdupq_n_s64(2uLL);
      v14 = vdupq_n_s64(4uLL);
      v15 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v12[-1] = v11;
        *v12 = vaddq_s64(v11, v13);
        v11 = vaddq_s64(v11, v14);
        v12 += 2;
        v15 -= 4;
      }
      while (v15);
      goto LABEL_11;
    }
    v9 = 0;
    v5 = (uint64_t)v6;
    do
    {
      *(_QWORD *)v5 = v9;
      v5 += 8;
      ++v9;
LABEL_11:
      ;
    }
    while (v8 != v9);
    v10 = &v6->i8[8 * v8];
  }
  v16 = 126 - 2 * __clz((v5 - v7) >> 3);
  v20[0] = a1;
  v20[1] = (uint64_t *)&v19;
  if (v5 == v7)
    v17 = 0;
  else
    v17 = v16;
  result = sub_20EEE69AC(v7, (char *)v5, v20, v17, 1);
  *a2 = v7;
  a2[1] = v5;
  a2[2] = (uint64_t)v10;
  return result;
}

void sub_20EEE6994()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x20EEE69A0);
  JUMPOUT(0x20EEE69A4);
}

uint64_t sub_20EEE69AC(uint64_t result, char *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  uint64_t v92;
  float v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  uint64_t *v100;
  float v101;
  float v102;
  uint64_t *v103;
  uint64_t **v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  uint64_t v126;
  uint64_t v127;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v85 = *((_QWORD *)a2 - 1);
        v86 = *v10;
        if (*(float *)(**a3 + 4 * v85) < *(float *)(**a3 + 4 * *v10))
        {
          *v10 = v85;
          *((_QWORD *)a2 - 1) = v86;
        }
        return result;
      case 3uLL:
        v87 = *v10;
        v88 = v10[1];
        v89 = **a3;
        v90 = *(float *)(v89 + 4 * v88);
        v91 = *(float *)(v89 + 4 * *v10);
        v92 = *((_QWORD *)a2 - 1);
        v93 = *(float *)(v89 + 4 * v92);
        if (v90 >= v91)
        {
          if (v93 < v90)
          {
            v10[1] = v92;
            *((_QWORD *)a2 - 1) = v88;
            v116 = *v10;
            v115 = v10[1];
            if (*(float *)(v89 + 4 * v115) < *(float *)(v89 + 4 * *v10))
            {
              *v10 = v115;
              v10[1] = v116;
            }
          }
        }
        else
        {
          if (v93 >= v90)
          {
            *v10 = v88;
            v10[1] = v87;
            v127 = *((_QWORD *)a2 - 1);
            if (*(float *)(v89 + 4 * v127) >= v91)
              return result;
            v10[1] = v127;
          }
          else
          {
            *v10 = v92;
          }
          *((_QWORD *)a2 - 1) = v87;
        }
        return result;
      case 4uLL:
        v94 = v10 + 1;
        v95 = v10[1];
        v96 = v10 + 2;
        v97 = v10[2];
        v98 = **a3;
        v99 = *(float *)(v98 + 4 * v95);
        v100 = (uint64_t *)*v10;
        v101 = *(float *)(v98 + 4 * *v10);
        v102 = *(float *)(v98 + 4 * v97);
        if (v99 >= v101)
        {
          if (v102 >= v99)
          {
LABEL_140:
            v95 = v97;
            v117 = *((_QWORD *)a2 - 1);
            if (*(float *)(v98 + 4 * v117) >= *(float *)(v98 + 4 * v95))
              return result;
LABEL_141:
            *v96 = v117;
            *((_QWORD *)a2 - 1) = v95;
            v123 = *v96;
            v124 = *v94;
            v125 = *(float *)(v98 + 4 * v123);
            if (v125 < *(float *)(v98 + 4 * v124))
            {
              v10[1] = v123;
              v10[2] = v124;
              v126 = *v10;
              if (v125 < *(float *)(v98 + 4 * *v10))
              {
                *v10 = v123;
                v10[1] = v126;
              }
            }
            return result;
          }
          *v94 = v97;
          *v96 = v95;
          v103 = v10;
          v104 = (uint64_t **)(v10 + 1);
          result = v95;
          if (v102 >= v101)
          {
LABEL_131:
            v117 = *((_QWORD *)a2 - 1);
            if (*(float *)(v98 + 4 * v117) >= *(float *)(v98 + 4 * v95))
              return result;
            goto LABEL_141;
          }
        }
        else
        {
          v103 = v10;
          v104 = (uint64_t **)(v10 + 2);
          result = *v10;
          if (v102 >= v99)
          {
            *v10 = v95;
            v10[1] = (uint64_t)v100;
            v103 = v10 + 1;
            v104 = (uint64_t **)(v10 + 2);
            result = (uint64_t)v100;
            if (v102 >= v101)
              goto LABEL_140;
          }
        }
        *v103 = v97;
        *v104 = v100;
        v95 = result;
        goto LABEL_131;
      case 5uLL:
        return (uint64_t)sub_20EEE761C(v10, v10 + 1, v10 + 2, v10 + 3, (uint64_t *)a2 - 1, a3);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (uint64_t *)a2)
              return (uint64_t)sub_20EEE77C0((char *)v10, a2, a2, a3);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = **a3;
          v16 = *((_QWORD *)a2 - 1);
          v17 = *(float *)(v15 + 4 * v16);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(float *)(v15 + 4 * *v10);
            v25 = *(float *)(v15 + 4 * *v14);
            if (v24 >= v25)
            {
              if (v17 < v24)
              {
                *v10 = v16;
                *((_QWORD *)a2 - 1) = v22;
                v27 = *v14;
                if (*(float *)(v15 + 4 * *v10) < *(float *)(v15 + 4 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 < v24)
              {
                *v14 = v16;
                goto LABEL_31;
              }
              *v14 = v22;
              *v10 = v23;
              v40 = *((_QWORD *)a2 - 1);
              if (*(float *)(v15 + 4 * v40) < v25)
              {
                *v10 = v40;
LABEL_31:
                *((_QWORD *)a2 - 1) = v23;
              }
            }
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(float *)(v15 + 4 * *v14);
          v21 = *(float *)(v15 + 4 * *v10);
          if (v20 >= v21)
          {
            if (v17 < v20)
            {
              *v14 = v16;
              *((_QWORD *)a2 - 1) = v18;
              v26 = *v10;
              if (*(float *)(v15 + 4 * *v14) < *(float *)(v15 + 4 * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 >= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *((_QWORD *)a2 - 1);
              if (*(float *)(v15 + 4 * v29) >= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *((_QWORD *)a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(float *)(v15 + 4 * v33);
          v36 = *(float *)(v15 + 4 * v34);
          v37 = *((_QWORD *)a2 - 2);
          v38 = *(float *)(v15 + 4 * v37);
          if (v35 >= v36)
          {
            if (v38 < v35)
            {
              *v31 = v37;
              *((_QWORD *)a2 - 2) = v32;
              v39 = v10[1];
              if (*(float *)(v15 + 4 * *v31) < *(float *)(v15 + 4 * v39))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v42 = *((_QWORD *)a2 - 2);
              if (*(float *)(v15 + 4 * v42) >= v36)
                goto LABEL_37;
              *v31 = v42;
            }
            else
            {
              v10[1] = v37;
            }
            *((_QWORD *)a2 - 2) = v34;
          }
LABEL_37:
          v43 = &v10[v13];
          v46 = v43[1];
          v44 = v43 + 1;
          v45 = v46;
          v47 = v10[2];
          v48 = *(float *)(v15 + 4 * v46);
          v49 = *(float *)(v15 + 4 * v47);
          v50 = *((_QWORD *)a2 - 3);
          v51 = *(float *)(v15 + 4 * v50);
          if (v48 >= v49)
          {
            if (v51 < v48)
            {
              *v44 = v50;
              *((_QWORD *)a2 - 3) = v45;
              v52 = v10[2];
              if (*(float *)(v15 + 4 * *v44) < *(float *)(v15 + 4 * v52))
              {
                v10[2] = *v44;
                *v44 = v52;
              }
            }
          }
          else
          {
            if (v51 >= v48)
            {
              v10[2] = v45;
              *v44 = v47;
              v53 = *((_QWORD *)a2 - 3);
              if (*(float *)(v15 + 4 * v53) >= v49)
                goto LABEL_46;
              *v44 = v53;
            }
            else
            {
              v10[2] = v50;
            }
            *((_QWORD *)a2 - 3) = v47;
          }
LABEL_46:
          v54 = *v14;
          v55 = *v31;
          v56 = *(float *)(v15 + 4 * *v14);
          v57 = *(float *)(v15 + 4 * *v31);
          v58 = *v44;
          v59 = *(float *)(v15 + 4 * *v44);
          if (v56 < v57)
          {
            if (v59 >= v56)
            {
              *v31 = v54;
              *v14 = v55;
              v31 = v14;
              v54 = v58;
              if (v59 >= v57)
              {
                v60 = *v10;
                *v10 = v55;
                *v14 = v60;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v59 >= v56)
            goto LABEL_54;
          *v14 = v58;
          *v44 = v54;
          v44 = v14;
          v54 = v55;
          if (v59 < v57)
          {
LABEL_53:
            *v31 = v58;
            *v44 = v55;
LABEL_54:
            v61 = *v10;
            *v10 = v54;
            *v14 = v61;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_55:
            v41 = *(float *)(v15 + 4 * v28);
            if (*(float *)(v15 + 4 * *(v10 - 1)) < v41)
              goto LABEL_56;
            if (v41 >= *(float *)(v15 + 4 * *((_QWORD *)a2 - 1)))
            {
              v77 = v10 + 1;
              do
              {
                v10 = v77;
                if (v77 >= (uint64_t *)a2)
                  break;
                ++v77;
              }
              while (v41 >= *(float *)(v15 + 4 * *v10));
            }
            else
            {
              do
              {
                v76 = v10[1];
                ++v10;
              }
              while (v41 >= *(float *)(v15 + 4 * v76));
            }
            v78 = (uint64_t *)a2;
            if (v10 < (uint64_t *)a2)
            {
              v78 = (uint64_t *)a2;
              do
                v79 = *--v78;
              while (v41 < *(float *)(v15 + 4 * v79));
            }
            if (v10 < v78)
            {
              v80 = *v10;
              v81 = *v78;
              do
              {
                *v10 = v81;
                *v78 = v80;
                do
                {
                  v82 = v10[1];
                  ++v10;
                  v80 = v82;
                }
                while (v41 >= *(float *)(v15 + 4 * v82));
                do
                {
                  v83 = *--v78;
                  v81 = v83;
                }
                while (v41 < *(float *)(v15 + 4 * v83));
              }
              while (v10 < v78);
            }
            v84 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v84;
            a5 = 0;
            *v84 = v28;
            continue;
          }
          v75 = *v10;
          *v10 = v58;
          *v14 = v75;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_33:
          v41 = *(float *)(v15 + 4 * v28);
LABEL_56:
          v62 = 0;
          do
            v63 = v10[++v62];
          while (*(float *)(v15 + 4 * v63) < v41);
          v64 = &v10[v62];
          v65 = a2;
          if (v62 == 1)
          {
            v65 = a2;
            do
            {
              if (v64 >= (uint64_t *)v65)
                break;
              v67 = *((_QWORD *)v65 - 1);
              v65 -= 8;
            }
            while (*(float *)(v15 + 4 * v67) >= v41);
          }
          else
          {
            do
            {
              v66 = *((_QWORD *)v65 - 1);
              v65 -= 8;
            }
            while (*(float *)(v15 + 4 * v66) >= v41);
          }
          if (v64 >= (uint64_t *)v65)
          {
            v73 = v64 - 1;
            if (v64 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v68 = *(_QWORD *)v65;
            v69 = &v10[v62];
            v70 = (uint64_t *)v65;
            do
            {
              *v69 = v68;
              *v70 = v63;
              do
              {
                v71 = v69[1];
                ++v69;
                v63 = v71;
              }
              while (*(float *)(v15 + 4 * v71) < v41);
              do
              {
                v72 = *--v70;
                v68 = v72;
              }
              while (*(float *)(v15 + 4 * v72) >= v41);
            }
            while (v69 < v70);
            v73 = v69 - 1;
            if (v69 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v73;
          }
LABEL_74:
          *v73 = v28;
          if (v64 < (uint64_t *)v65)
            goto LABEL_77;
          v74 = sub_20EEE728C(v10, v73, a3);
          v10 = v73 + 1;
          result = sub_20EEE728C(v73 + 1, (uint64_t *)a2, a3);
          if (!(_DWORD)result)
          {
            if (v74)
              continue;
LABEL_77:
            result = sub_20EEE69AC(v9, v73, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v73 + 1;
            continue;
          }
          a2 = (char *)v73;
          if (v74)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v10 != (uint64_t *)a2)
          {
            v105 = v10 + 1;
            if (v10 + 1 != (uint64_t *)a2)
            {
              v106 = **a3;
              v107 = 8;
              v108 = v10;
              do
              {
                v111 = *v108;
                v110 = v108[1];
                v108 = v105;
                v112 = *(float *)(v106 + 4 * v110);
                if (v112 < *(float *)(v106 + 4 * v111))
                {
                  v113 = v107;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v113) = v111;
                    v114 = v113 - 8;
                    if (v113 == 8)
                    {
                      v109 = v10;
                      goto LABEL_116;
                    }
                    v111 = *(uint64_t *)((char *)v10 + v113 - 16);
                    v113 -= 8;
                  }
                  while (v112 < *(float *)(v106 + 4 * v111));
                  v109 = (uint64_t *)((char *)v10 + v114);
LABEL_116:
                  *v109 = v110;
                }
                v105 = v108 + 1;
                v107 += 8;
              }
              while (v108 + 1 != (uint64_t *)a2);
            }
          }
        }
        else if (v10 != (uint64_t *)a2)
        {
          v118 = v10 + 1;
          if (v10 + 1 != (uint64_t *)a2)
          {
            v119 = **a3;
            do
            {
              v121 = *v9;
              v120 = v9[1];
              v9 = v118;
              v122 = *(float *)(v119 + 4 * v120);
              if (v122 < *(float *)(v119 + 4 * v121))
              {
                do
                {
                  *v118 = v121;
                  v121 = *(v118 - 2);
                  --v118;
                }
                while (v122 < *(float *)(v119 + 4 * v121));
                *v118 = v120;
              }
              v118 = v9 + 1;
            }
            while (v9 + 1 != (uint64_t *)a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_20EEE728C(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v14 = *(a2 - 1);
      v15 = *a1;
      if (*(float *)(**a3 + 4 * v14) >= *(float *)(**a3 + 4 * *a1))
        return 1;
      *a1 = v14;
      *(a2 - 1) = v15;
      return 1;
    case 3:
      v16 = *a1;
      v17 = a1[1];
      v18 = **a3;
      v19 = *(float *)(v18 + 4 * v17);
      v20 = *(float *)(v18 + 4 * *a1);
      v21 = *(a2 - 1);
      v22 = *(float *)(v18 + 4 * v21);
      if (v19 >= v20)
      {
        if (v22 >= v19)
          return 1;
        a1[1] = v21;
        *(a2 - 1) = v17;
        v44 = *a1;
        v43 = a1[1];
        if (*(float *)(v18 + 4 * v43) >= *(float *)(v18 + 4 * *a1))
          return 1;
        *a1 = v43;
        a1[1] = v44;
        return 1;
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        v50 = *(a2 - 1);
        if (*(float *)(v18 + 4 * v50) >= v20)
          return 1;
        a1[1] = v50;
        *(a2 - 1) = v16;
        return 1;
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
        return 1;
      }
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = **a3;
      v28 = *(float *)(v27 + 4 * v24);
      v29 = *a1;
      v30 = *(float *)(v27 + 4 * *a1);
      v31 = *(float *)(v27 + 4 * v26);
      if (v28 < v30)
      {
        v32 = a1;
        v33 = a1 + 2;
        v34 = *a1;
        if (v31 >= v28)
        {
          *a1 = v24;
          a1[1] = v29;
          v32 = a1 + 1;
          v33 = a1 + 2;
          v34 = v29;
          if (v31 >= v30)
            goto LABEL_38;
        }
LABEL_35:
        *v32 = v26;
        *v33 = v29;
        v24 = v34;
LABEL_36:
        v45 = *(a2 - 1);
        if (*(float *)(v27 + 4 * v45) >= *(float *)(v27 + 4 * v24))
          return 1;
        goto LABEL_39;
      }
      if (v31 < v28)
      {
        *v23 = v26;
        *v25 = v24;
        v32 = a1;
        v33 = a1 + 1;
        v34 = v24;
        if (v31 >= v30)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v24 = v26;
      v45 = *(a2 - 1);
      if (*(float *)(v27 + 4 * v45) >= *(float *)(v27 + 4 * v24))
        return 1;
LABEL_39:
      *v25 = v45;
      *(a2 - 1) = v24;
      v46 = *v25;
      v47 = *v23;
      v48 = *(float *)(v27 + 4 * v46);
      if (v48 >= *(float *)(v27 + 4 * v47))
        return 1;
      a1[1] = v46;
      a1[2] = v47;
      v49 = *a1;
      if (v48 >= *(float *)(v27 + 4 * *a1))
        return 1;
      *a1 = v46;
      a1[1] = v49;
      return 1;
    case 5:
      sub_20EEE761C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v5 = a1 + 2;
      v4 = a1[2];
      v6 = a1[1];
      v7 = **a3;
      v8 = *(float *)(v7 + 4 * v6);
      v9 = *a1;
      v10 = *(float *)(v7 + 4 * *a1);
      v11 = *(float *)(v7 + 4 * v4);
      if (v8 >= v10)
      {
        if (v11 >= v8 || (a1[1] = v4, *v5 = v6, v12 = a1, v13 = a1 + 1, v11 >= v10))
        {
LABEL_20:
          v35 = a1 + 3;
          if (a1 + 3 == a2)
            return 1;
          v36 = 0;
          for (i = 24; ; i += 8)
          {
            v38 = *v35;
            v39 = *v5;
            v40 = *(float *)(v7 + 4 * *v35);
            if (v40 < *(float *)(v7 + 4 * v39))
              break;
LABEL_23:
            v5 = v35++;
            if (v35 == a2)
              return 1;
          }
          v41 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v41) = v39;
            v42 = v41 - 8;
            if (v41 == 8)
            {
              *a1 = v38;
              if (++v36 != 8)
                goto LABEL_23;
              return v35 + 1 == a2;
            }
            v39 = *(uint64_t *)((char *)a1 + v41 - 16);
            v41 -= 8;
          }
          while (v40 < *(float *)(v7 + 4 * v39));
          *(uint64_t *)((char *)a1 + v42) = v38;
          if (++v36 != 8)
            goto LABEL_23;
          return v35 + 1 == a2;
        }
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 >= v8)
        {
          *a1 = v6;
          a1[1] = v9;
          v12 = a1 + 1;
          v13 = a1 + 2;
          if (v11 >= v10)
            goto LABEL_20;
        }
      }
      *v12 = v4;
      *v13 = v9;
      goto LABEL_20;
  }
}

uint64_t *sub_20EEE761C(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t **a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  v7 = *result;
  v8 = **a6;
  v9 = *(float *)(v8 + 4 * *a2);
  v10 = *(float *)(v8 + 4 * *result);
  v11 = *a3;
  v12 = *(float *)(v8 + 4 * *a3);
  if (v9 >= v10)
  {
    if (v12 >= v9)
    {
      v6 = *a3;
      v14 = *a4;
      if (*(float *)(v8 + 4 * *a4) >= *(float *)(v8 + 4 * v11))
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v11;
    *a3 = v6;
    v13 = *result;
    if (*(float *)(v8 + 4 * *a2) < *(float *)(v8 + 4 * *result))
    {
      *result = *a2;
      *a2 = v13;
      v6 = *a3;
      v14 = *a4;
      if (*(float *)(v8 + 4 * *a4) >= *(float *)(v8 + 4 * *a3))
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 >= v9)
    {
      *result = v6;
      *a2 = v7;
      v6 = *a3;
      if (*(float *)(v8 + 4 * *a3) >= v10)
        goto LABEL_11;
      *a2 = v6;
    }
    else
    {
      *result = v11;
    }
    *a3 = v7;
    v6 = v7;
  }
LABEL_11:
  v14 = *a4;
  if (*(float *)(v8 + 4 * *a4) >= *(float *)(v8 + 4 * v6))
    goto LABEL_17;
LABEL_14:
  *a3 = v14;
  *a4 = v6;
  v15 = *a2;
  if (*(float *)(v8 + 4 * *a3) < *(float *)(v8 + 4 * *a2))
  {
    *a2 = *a3;
    *a3 = v15;
    v16 = *result;
    if (*(float *)(v8 + 4 * *a2) < *(float *)(v8 + 4 * *result))
    {
      *result = *a2;
      *a2 = v16;
    }
  }
LABEL_17:
  v17 = *a4;
  if (*(float *)(v8 + 4 * *a5) < *(float *)(v8 + 4 * *a4))
  {
    *a4 = *a5;
    *a5 = v17;
    v18 = *a3;
    if (*(float *)(v8 + 4 * *a4) < *(float *)(v8 + 4 * *a3))
    {
      *a3 = *a4;
      *a4 = v18;
      v19 = *a2;
      if (*(float *)(v8 + 4 * *a3) < *(float *)(v8 + 4 * *a2))
      {
        *a2 = *a3;
        *a3 = v19;
        v20 = *result;
        if (*(float *)(v8 + 4 * *a2) < *(float *)(v8 + 4 * *result))
        {
          *result = *a2;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

char *sub_20EEE77C0(char *a1, char *a2, char *a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  float v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  char *v39;
  int64_t v41;
  uint64_t *v42;
  int64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  if (a1 == a2)
    return a3;
  v4 = a2 - a1;
  v5 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9 && (unint64_t)v4 >= 0x10)
  {
    v41 = (unint64_t)(v5 - 2) >> 1;
    v42 = *a4;
    v43 = v41;
    do
    {
      if (v41 >= v43)
      {
        v44 = (2 * v43) | 1;
        v45 = &a1[8 * v44];
        v46 = *v42;
        if (2 * v43 + 2 < v5 && *(float *)(v46 + 4 * *(_QWORD *)v45) < *(float *)(v46 + 4 * *((_QWORD *)v45 + 1)))
        {
          v45 += 8;
          v44 = 2 * v43 + 2;
        }
        v47 = &a1[8 * v43];
        v48 = *(_QWORD *)v45;
        v49 = *(_QWORD *)v47;
        v50 = *(float *)(v46 + 4 * *(_QWORD *)v47);
        if (*(float *)(v46 + 4 * *(_QWORD *)v45) >= v50)
        {
          do
          {
            v51 = v45;
            *(_QWORD *)v47 = v48;
            if (v41 < v44)
              break;
            v52 = 2 * v44;
            v44 = (2 * v44) | 1;
            v45 = &a1[8 * v44];
            v53 = v52 + 2;
            if (v53 < v5 && *(float *)(v46 + 4 * *(_QWORD *)v45) < *(float *)(v46 + 4 * *((_QWORD *)v45 + 1)))
            {
              v45 += 8;
              v44 = v53;
            }
            v48 = *(_QWORD *)v45;
            v47 = v51;
          }
          while (*(float *)(v46 + 4 * *(_QWORD *)v45) >= v50);
          *(_QWORD *)v51 = v49;
        }
      }
      v24 = v43-- <= 0;
    }
    while (!v24);
  }
  v6 = a2;
  if (a2 != a3)
  {
    v7 = **a4;
    if (v4 < 16)
    {
      v8 = *(_QWORD *)a1;
      v9 = a2;
      do
      {
        v10 = *(_QWORD *)v9;
        if (*(float *)(v7 + 4 * *(_QWORD *)v9) < *(float *)(v7 + 4 * v8))
        {
          *(_QWORD *)v9 = v8;
          *(_QWORD *)a1 = v10;
          v8 = v10;
        }
        v9 += 8;
      }
      while (v9 != a3);
LABEL_25:
      v6 = a3;
      goto LABEL_26;
    }
    v11 = (uint64_t *)(a1 + 8);
    v12 = (uint64_t *)(a1 + 16);
    v13 = a2;
    while (1)
    {
      v14 = *(_QWORD *)v13;
      v15 = *(float *)(v7 + 4 * *(_QWORD *)v13);
      if (v15 < *(float *)(v7 + 4 * *(_QWORD *)a1))
      {
        *(_QWORD *)v13 = *(_QWORD *)a1;
        *(_QWORD *)a1 = v14;
        if (v4 == 16 || *(float *)(v7 + 4 * *v11) >= *(float *)(v7 + 4 * *v12))
        {
          v16 = a1 + 8;
          v17 = 1;
          v18 = *v11;
          if (*(float *)(v7 + 4 * *v11) >= v15)
          {
LABEL_19:
            v19 = a1;
            do
            {
              v20 = v16;
              *(_QWORD *)v19 = v18;
              if ((uint64_t)((unint64_t)(v5 - 2) >> 1) < v17)
                break;
              v21 = 2 * v17;
              v17 = (2 * v17) | 1;
              v16 = &a1[8 * v17];
              v22 = v21 + 2;
              if (v22 < v5 && *(float *)(v7 + 4 * *(_QWORD *)v16) < *(float *)(v7 + 4 * *((_QWORD *)v16 + 1)))
              {
                v16 += 8;
                v17 = v22;
              }
              v18 = *(_QWORD *)v16;
              v19 = v20;
            }
            while (*(float *)(v7 + 4 * *(_QWORD *)v16) >= v15);
            *(_QWORD *)v20 = v14;
          }
        }
        else
        {
          v16 = a1 + 16;
          v17 = 2;
          v18 = *v12;
          if (*(float *)(v7 + 4 * *v12) >= v15)
            goto LABEL_19;
        }
      }
      v13 += 8;
      if (v13 == a3)
        goto LABEL_25;
    }
  }
LABEL_26:
  if (v4 >= 9)
  {
    v23 = (unint64_t)v4 >> 3;
    do
    {
      v25 = 0;
      v26 = *(_QWORD *)a1;
      v27 = *a4;
      v28 = a1;
      do
      {
        v29 = v28;
        v28 += 8 * v25 + 8;
        v30 = 2 * v25;
        v25 = (2 * v25) | 1;
        v31 = v30 + 2;
        if (v31 < v23 && *(float *)(*v27 + 4 * *(_QWORD *)v28) < *(float *)(*v27 + 4 * *((_QWORD *)v28 + 1)))
        {
          v28 += 8;
          v25 = v31;
        }
        *(_QWORD *)v29 = *(_QWORD *)v28;
      }
      while (v25 <= (uint64_t)((unint64_t)(v23 - 2) >> 1));
      a2 -= 8;
      if (v28 == a2)
      {
        *(_QWORD *)v28 = v26;
      }
      else
      {
        *(_QWORD *)v28 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v26;
        v32 = v28 - a1 + 8;
        if (v32 >= 9)
        {
          v33 = (((unint64_t)v32 >> 3) - 2) >> 1;
          v34 = &a1[8 * v33];
          v35 = *(_QWORD *)v34;
          v36 = *(_QWORD *)v28;
          v37 = *v27;
          v38 = *(float *)(v37 + 4 * *(_QWORD *)v28);
          if (*(float *)(v37 + 4 * *(_QWORD *)v34) < v38)
          {
            do
            {
              v39 = v34;
              *(_QWORD *)v28 = v35;
              if (!v33)
                break;
              v33 = (v33 - 1) >> 1;
              v34 = &a1[8 * v33];
              v35 = *(_QWORD *)v34;
              v28 = v39;
            }
            while (*(float *)(v37 + 4 * *(_QWORD *)v34) < v38);
            *(_QWORD *)v39 = v36;
          }
        }
      }
      v24 = v23-- <= 2;
    }
    while (!v24);
  }
  return v6;
}

void sub_20EEE7B8C(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v3;
  unint64_t v6;
  size_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = a2;
  v6 = (unint64_t)a2 >> 61;
  v7 = 8 * (_QWORD)a2;
  if (!a2)
  {
    v9 = 0;
    v8 = 0;
    v10 = *(_QWORD **)a1;
    v11 = *(_QWORD **)(a1 + 8);
    if (*(_QWORD **)a1 == v11)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v6)
    sub_20E867F44();
  v8 = (char *)operator new(8 * (_QWORD)a2);
  v9 = &v8[8 * (_QWORD)v3];
  bzero(v8, v7);
  v10 = *(_QWORD **)a1;
  v11 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_6:
      v12 = v10[1];
      v13 = v10[2];
      ++*(_QWORD *)&v8[8 * *v10];
      ++*(_QWORD *)&v8[8 * v12];
      ++*(_QWORD *)&v8[8 * v13];
      v10 += 10;
    }
    while (v10 != v11);
  }
LABEL_7:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!v3)
  {
    v14 = 0;
    v15 = v9 - v8;
    if (v9 != v8)
      goto LABEL_10;
LABEL_19:
    v17 = 0;
    v19 = (v3 - v14) >> 3;
    goto LABEL_20;
  }
  if (v6)
    sub_20E867F44();
  v14 = (char *)operator new(v7);
  *a3 = v14;
  v3 = &v14[8 * (_QWORD)v3];
  a3[2] = v3;
  bzero(v14, v7);
  a3[1] = v3;
  v15 = v9 - v8;
  if (v9 == v8)
    goto LABEL_19;
LABEL_10:
  v16 = 0;
  v17 = 0;
  v18 = v15 >> 3;
  if (v18 <= 1)
    v18 = 1;
  do
  {
    if (*(_QWORD *)&v8[8 * v16])
      *(_QWORD *)&v14[8 * v17++] = v16;
    ++v16;
  }
  while (v18 != v16);
  v19 = (v3 - v14) >> 3;
  if (v17 > v19)
  {
    sub_20EAC9ECC((uint64_t)a3, v17 - v19);
LABEL_23:
    operator delete(v8);
    return;
  }
LABEL_20:
  if (v19 > v17)
    a3[1] = &v14[8 * v17];
  if (v8)
    goto LABEL_23;
}

void sub_20EEE7D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  uint64_t v12;
  void *v14;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

double sub_20EEE7DB0@<D0>(unint64_t a1@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  float32x4_t *v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t v44;
  uint64_t v45;
  char *v46;
  double result;
  float32x2_t *v49;
  uint64_t v50;
  uint64_t v51;
  __int32 v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  char *v56;

  v55 = 0uLL;
  v56 = 0;
  if (a1)
  {
    if (a1 >> 61)
      sub_20E969238();
    *(_QWORD *)&v55 = operator new(8 * a1);
    *((_QWORD *)&v55 + 1) = v55;
    v56 = (char *)(v55 + 8 * a1);
  }
  v53 = 0;
  v54 = 0uLL;
  sub_20E8B3B5C(&v53, a1);
  if (a1)
  {
    v49 = (float32x2_t *)((char *)a2 + 12 * a1);
    __asm { FMOV            V8.2S, #-1.0 }
    while (1)
    {
      v9.i32[0] = a3[1].i32[0];
      v10.i32[0] = a3[3].i32[0];
      v11.i32[0] = a3[5].i32[0];
      v12.i32[0] = a2[1].i32[0];
      *(float32x2_t *)v18.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a3, COERCE_FLOAT(*a2)), a3[2], *a2, 1), a3[4], v12.f32[0]);
      *(float32x2_t *)&v18.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.f32, *a2), v10, *a2, 1), v12, v11);
      *(float32x2_t *)v9.f32 = a3[6];
      v9.i32[2] = a3[7].i32[0];
      v19 = vaddq_f32(v18, v9);
      v52 = v19.i32[2];
      v50 = _D8;
      v51 = v19.i64[0];
      v20 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a4 + 64))(a4, &v51, &v50);
      v21 = (_BYTE *)*((_QWORD *)&v55 + 1);
      if (*((_QWORD *)&v55 + 1) >= (unint64_t)v56)
      {
        v23 = (_BYTE *)v55;
        v24 = *((_QWORD *)&v55 + 1) - v55;
        v25 = (uint64_t)(*((_QWORD *)&v55 + 1) - v55) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          sub_20E969238();
        v27 = (uint64_t)&v56[-v55];
        if ((uint64_t)&v56[-v55] >> 2 > v26)
          v26 = v27 >> 2;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          if (v28 >> 61)
            sub_20E877A38();
          v29 = operator new(8 * v28);
          v30 = &v29[8 * v25];
          *v30 = v50;
          v22 = (uint64_t)(v30 + 1);
          v31 = (char *)(v21 - v23);
          if (v21 != v23)
          {
LABEL_32:
            v37 = (unint64_t)(v31 - 8);
            if (v37 < 0x58)
              goto LABEL_47;
            if ((unint64_t)(v21 - v29 - v24) < 0x20)
              goto LABEL_47;
            v38 = (v37 >> 3) + 1;
            v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
            v40 = &v21[-v39];
            v30 = (_QWORD *)((char *)v30 - v39);
            v41 = (float32x4_t *)&v29[8 * v25 - 16];
            v42 = (float32x4_t *)(v21 - 16);
            v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v9 = v42[-1];
              v44 = *v42;
              v41[-1] = v9;
              *v41 = v44;
              v41 -= 2;
              v42 -= 2;
              v43 -= 4;
            }
            while (v43);
            v21 = v40;
            if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_47:
              do
              {
                v45 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *--v30 = v45;
              }
              while (v21 != v23);
            }
            v21 = (_BYTE *)v55;
            *(_QWORD *)&v55 = v30;
            *((_QWORD *)&v55 + 1) = v22;
            v56 = &v29[8 * v28];
            if (!v21)
              goto LABEL_20;
LABEL_19:
            operator delete(v21);
            goto LABEL_20;
          }
        }
        else
        {
          v29 = 0;
          v30 = (_QWORD *)(8 * v25);
          *(_QWORD *)(8 * v25) = v50;
          v22 = 8 * v25 + 8;
          v31 = (char *)(v21 - v23);
          if (v21 != v23)
            goto LABEL_32;
        }
        *(_QWORD *)&v55 = v30;
        *((_QWORD *)&v55 + 1) = v22;
        v56 = &v29[8 * v28];
        if (v21)
          goto LABEL_19;
      }
      else
      {
        **((_QWORD **)&v55 + 1) = v50;
        v22 = (uint64_t)(v21 + 8);
      }
LABEL_20:
      *((_QWORD *)&v55 + 1) = v22;
      v32 = v54;
      if ((_QWORD)v54 == *((_QWORD *)&v54 + 1) << 6)
      {
        if ((uint64_t)v54 + 1 < 0)
          sub_20E867F44();
        v33 = *((_QWORD *)&v54 + 1) << 7;
        if (*((_QWORD *)&v54 + 1) << 7 <= ((unint64_t)v54 & 0xFFFFFFFFFFFFFFC0) + 64)
          v33 = (v54 & 0xFFFFFFFFFFFFFFC0) + 64;
        if ((unint64_t)v54 <= 0x3FFFFFFFFFFFFFFELL)
          v34 = v33;
        else
          v34 = 0x7FFFFFFFFFFFFFFFLL;
        sub_20E8B3B5C(&v53, v34);
        v32 = v54;
      }
      *(_QWORD *)&v54 = v32 + 1;
      v35 = v32 >> 6;
      v36 = 1 << v32;
      if (v20)
      {
        *(_QWORD *)&v53[8 * v35] |= v36;
        a2 = (float32x2_t *)((char *)a2 + 12);
        if (a2 == v49)
          break;
      }
      else
      {
        *(_QWORD *)&v53[8 * v35] &= ~v36;
        a2 = (float32x2_t *)((char *)a2 + 12);
        if (a2 == v49)
          break;
      }
    }
  }
  *(_OWORD *)a5 = v55;
  v46 = v53;
  *(_QWORD *)(a5 + 16) = v56;
  *(_QWORD *)(a5 + 24) = v46;
  result = *(double *)&v54;
  *(_OWORD *)(a5 + 32) = v54;
  return result;
}

void sub_20EEE8108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void ***sub_20EEE8140(void ***a1, _QWORD *a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = (char *)(*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = (char *)*v4;
    v10 = v6 - (_BYTE *)*v4;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_20E969238();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20E877A38();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_28;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = (__int128 *)(v6 - 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
      v7 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[8 * v14];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

float64_t sub_20EEE82B4@<D0>(uint64_t a1@<X0>, float32x4_t *a2@<X8>, float32x4_t a3@<Q0>)
{
  float64x2_t v3;
  float32x4_t v4;
  float64x2_t v5;
  unsigned __int8 v6;
  float *v7;
  float64x2_t v8;
  float64x2_t v9;
  unsigned __int8 v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v15;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v26;
  float64x2_t v27;
  unint64_t v29;
  float64x2_t v31;
  int64x2_t v32;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v39;
  float64x2_t v41;
  int v43;
  int v44;
  int v45;
  int v46;
  float64x2_t v48;
  float32x4_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t *v56;
  uint64_t v57;
  uint64_t v58;

  v4.i64[0] = *(_QWORD *)a1;
  v4.i32[2] = *(_DWORD *)(a1 + 8);
  a3.i64[0] = *(_QWORD *)(a1 + 12);
  a3.i32[2] = *(_DWORD *)(a1 + 20);
  v5 = vcvtq_f64_f32(*(float32x2_t *)a3.f32);
  v6 = atomic_load((unsigned __int8 *)&qword_254A516F8);
  v7 = (float *)&unk_254A51000;
  if ((v6 & 1) == 0)
  {
    v55 = a2;
    v57 = a1;
    v53 = v4;
    v49 = a3;
    v51 = v5;
    v43 = __cxa_guard_acquire(&qword_254A516F8);
    a3 = v49;
    v5 = v51;
    v4 = v53;
    v7 = (float *)&unk_254A51000;
    v44 = v43;
    a2 = v55;
    a1 = v57;
    if (v44)
    {
      dword_254A516F0 = 1065098332;
      __cxa_guard_release(&qword_254A516F8);
      a3 = v49;
      v5 = v51;
      v4 = v53;
      v7 = (float *)&unk_254A51000;
      a2 = v55;
      a1 = v57;
    }
  }
  v8 = vcvt_hight_f64_f32(a3);
  v9 = (float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL);
  v10 = atomic_load((unsigned __int8 *)&qword_254A51708);
  if ((v10 & 1) == 0)
  {
    v56 = a2;
    v58 = a1;
    v54 = v4;
    v50 = v8;
    v52 = v5;
    v48 = v9;
    v45 = __cxa_guard_acquire(&qword_254A51708);
    v9 = v48;
    v8 = v50;
    v5 = v52;
    v4 = v54;
    v7 = (float *)&unk_254A51000;
    v46 = v45;
    a2 = v56;
    a1 = v58;
    if (v46)
    {
      dword_254A51700 = 1043452119;
      __cxa_guard_release(&qword_254A51708);
      v9 = v48;
      v8 = v50;
      v5 = v52;
      v4 = v54;
      v7 = (float *)&unk_254A51000;
      a2 = v56;
      a1 = v58;
    }
  }
  v11.f64[1] = 1.0;
  if (fabsf(*(float *)(a1 + 20)) >= v7[444])
  {
    v31.f64[0] = v5.f64[0];
    v31.f64[1] = v9.f64[0];
    v32 = (int64x2_t)vmulq_f64(v31, (float64x2_t)0);
    _Q16.f64[0] = v8.f64[0];
    *(_QWORD *)&_Q16.f64[1] = v32.i64[0];
    _Q7 = (float64x2_t)vdupq_laneq_s64(v32, 1);
    v34 = vmulq_f64(v31, (float64x2_t)xmmword_21030D320);
    v35 = (float64x2_t)vextq_s8((int8x16_t)v34, (int8x16_t)vmulq_f64(v8, (float64x2_t)0), 8uLL);
    v36 = vsubq_f64(_Q7, v34);
    _Q5 = vsubq_f64(_Q16, v35);
    _Q6 = vmulq_f64(_Q5, _Q5);
    _Q7.f64[0] = _Q5.f64[1];
    __asm { FMLA            D6, D7, V5.D[1] }
    _Q6.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q6.f64[0], v36.f64[0], v36.f64[0]));
    v27 = vmulq_n_f64(_Q5, _Q6.f64[0]);
    _Q4 = vmulq_f64(v36, _Q6);
    _Q6.f64[0] = v9.f64[0];
    _Q6.f64[1] = v8.f64[0];
    _Q16.f64[0] = v8.f64[0];
    _Q16.f64[1] = v5.f64[0];
    v39.f64[0] = _Q4.f64[0];
    v39.f64[1] = v27.f64[0];
    _Q6 = vmlsq_f64(vmulq_f64(_Q6, v39), _Q16, (float64x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)_Q4, 8uLL));
    v41 = vmlsq_f64(vmulq_laneq_f64(v5, v27, 1), v9, v27);
    _D17 = _Q6.f64[1];
    __asm { FMLA            D16, D17, V6.D[1] }
    _Q7.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q16.f64[0], v41.f64[0], v41.f64[0]));
    v23 = vmulq_n_f64(_Q6, _Q7.f64[0]);
    v24 = (float64x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)vmulq_f64(v41, _Q7), 8uLL);
    *(_QWORD *)&_Q7.f64[0] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    v29 = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  }
  else
  {
    v12.f64[0] = v9.f64[0];
    v12.f64[1] = v8.f64[0];
    v13.f64[0] = v8.f64[0];
    v13.f64[1] = v5.f64[0];
    v3.f64[0] = -0.0;
    _Q17 = vmlaq_f64(vmulq_f64(v13, (float64x2_t)xmmword_210389940), v12, (float64x2_t)xmmword_21030D320);
    v15 = vmlaq_f64(vmulq_f64(v9, v3), v5, (float64x2_t)0);
    _Q6 = vmulq_f64(_Q17, _Q17);
    _D7 = _Q17.f64[1];
    __asm { FMLA            D6, D7, V17.D[1] }
    _Q6.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q6.f64[0], v15.f64[0], v15.f64[0]));
    _Q18 = vmulq_f64(v15, _Q6);
    v23 = vmulq_n_f64(_Q17, _Q6.f64[0]);
    v24 = (float64x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)_Q18, 8uLL);
    _Q18.f64[1] = v23.f64[0];
    _Q5 = vmlsq_f64(vmulq_f64(v13, v24), v12, _Q18);
    v26 = vmlsq_laneq_f64(vmulq_f64(v9, v23), v5, v23, 1);
    _Q4 = vmulq_f64(_Q5, _Q5);
    _Q18.f64[0] = _Q5.f64[1];
    __asm { FMLA            D4, D18, V5.D[1] }
    _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v26.f64[0], v26.f64[0]));
    v27 = vmulq_n_f64(_Q5, _Q4.f64[0]);
    *(_QWORD *)&_Q4.f64[0] = *(_OWORD *)&vmulq_f64(v26, _Q4);
    v29 = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
    *(_QWORD *)&_Q7.f64[0] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  }
  v23.f64[1] = v24.f64[0];
  v5.f64[1] = v9.f64[0];
  *(_QWORD *)&v27.f64[1] = v29;
  *(_QWORD *)&_Q4.f64[1] = vextq_s8((int8x16_t)xmmword_210389990, (int8x16_t)xmmword_210389990, 8uLL).u64[0];
  *(_QWORD *)&_Q7.f64[1] = vextq_s8((int8x16_t)xmmword_2103899B0, (int8x16_t)xmmword_2103899B0, 8uLL).u64[0];
  *(_QWORD *)&v8.f64[1] = vextq_s8((int8x16_t)xmmword_2103899D0, (int8x16_t)xmmword_2103899D0, 8uLL).u64[0];
  *(_QWORD *)&v11.f64[0] = *(_OWORD *)&vcvt_hight_f64_f32(v4);
  *a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27), _Q4);
  a2[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v23), _Q7);
  a2[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v8);
  a2[3] = vcvt_hight_f32_f64(*(int32x2_t *)v4.f32, v11);
  return v11.f64[0];
}

__n128 sub_20EEE85BC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q4>)
{
  float64x2_t v3;
  uint64_t v4;
  int8x16_t v5;
  float64x2_t v6;
  unsigned __int8 v7;
  double *v8;
  unint64_t v9;
  float64x2_t v10;
  unsigned __int8 v11;
  float64x2_t v13;
  float64x2_t v15;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  __n128 result;
  unint64_t v28;
  unint64_t v29;
  float64x2_t v30;
  int64x2_t v31;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v38;
  float64x2_t v40;
  int v42;
  int v43;
  int v44;
  int v45;
  float64x2_t v46;
  unint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x16_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(int8x16_t *)a1;
  v3.f64[0] = *(float64_t *)(a1 + 40);
  v6 = *(float64x2_t *)(a1 + 24);
  v7 = atomic_load((unsigned __int8 *)&qword_254A51718);
  v8 = (double *)&unk_254A51000;
  if ((v7 & 1) == 0)
  {
    v56 = a2;
    v58 = a1;
    v52 = *(_QWORD *)(a1 + 16);
    v54 = *(int8x16_t *)a1;
    v48 = *(float64x2_t *)(a1 + 24);
    v50 = v3;
    v42 = __cxa_guard_acquire(&qword_254A51718);
    v6 = v48;
    v3 = v50;
    v4 = v52;
    v5 = v54;
    v8 = (double *)&unk_254A51000;
    v43 = v42;
    a2 = v56;
    a1 = v58;
    if (v43)
    {
      qword_254A51710 = 0x3FEF838B8C811C17;
      __cxa_guard_release(&qword_254A51718);
      v6 = v48;
      v3 = v50;
      v4 = v52;
      v5 = v54;
      v8 = (double *)&unk_254A51000;
      a2 = v56;
      a1 = v58;
    }
  }
  v9 = vextq_s8(v5, v5, 8uLL).u64[0];
  v10 = (float64x2_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL);
  v11 = atomic_load((unsigned __int8 *)&qword_254A51728);
  if ((v11 & 1) == 0)
  {
    v57 = a2;
    v59 = a1;
    v53 = v4;
    v55 = v5.i64[0];
    v49 = v6;
    v51 = v3;
    v46 = v10;
    v47 = v9;
    v44 = __cxa_guard_acquire(&qword_254A51728);
    v10 = v46;
    v9 = v47;
    v6 = v49;
    v3 = v51;
    v4 = v53;
    v5.i64[0] = v55;
    v8 = (double *)&unk_254A51000;
    v45 = v44;
    a2 = v57;
    a1 = v59;
    if (v45)
    {
      qword_254A51720 = 0x3FC63A1A7E0B738CLL;
      __cxa_guard_release(&qword_254A51728);
      v10 = v46;
      v9 = v47;
      v6 = v49;
      v3 = v51;
      v4 = v53;
      v5.i64[0] = v55;
      v8 = (double *)&unk_254A51000;
      a2 = v57;
      a1 = v59;
    }
  }
  if (fabs(*(double *)(a1 + 40)) >= v8[226])
  {
    v30.f64[0] = v6.f64[0];
    v30.f64[1] = v10.f64[0];
    v31 = (int64x2_t)vmulq_f64(v30, (float64x2_t)0);
    _Q4.f64[0] = v3.f64[0];
    *(_QWORD *)&_Q4.f64[1] = v31.i64[0];
    _Q3 = (float64x2_t)vdupq_laneq_s64(v31, 1);
    v34 = vmulq_f64(v30, (float64x2_t)xmmword_21030D320);
    v35 = vsubq_f64(_Q3, v34);
    _Q0 = vsubq_f64(_Q4, (float64x2_t)vextq_s8((int8x16_t)v34, (int8x16_t)vmulq_f64(v3, (float64x2_t)0), 8uLL));
    _Q1 = vmulq_f64(_Q0, _Q0);
    _Q3.f64[0] = _Q0.f64[1];
    __asm { FMLA            D1, D3, V0.D[1] }
    _Q1.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q1.f64[0], v35.f64[0], v35.f64[0]));
    result = (__n128)vmulq_n_f64(_Q0, _Q1.f64[0]);
    _Q1 = vmulq_f64(v35, _Q1);
    v35.f64[0] = v10.f64[0];
    v35.f64[1] = v3.f64[0];
    _Q4.f64[0] = v3.f64[0];
    _Q4.f64[1] = v6.f64[0];
    v38.f64[0] = _Q1.f64[0];
    *(_QWORD *)&v38.f64[1] = result.n128_u64[0];
    _Q2 = vmlsq_f64(vmulq_f64(v35, v38), _Q4, (float64x2_t)vextq_s8((int8x16_t)result, (int8x16_t)_Q1, 8uLL));
    v40 = vmlsq_f64(vmulq_laneq_f64(v6, (float64x2_t)result, 1), v10, (float64x2_t)result);
    _D5 = _Q2.f64[1];
    __asm { FMLA            D4, D5, V2.D[1] }
    _Q3.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v40.f64[0], v40.f64[0]));
    v23 = vmulq_n_f64(_Q2, _Q3.f64[0]);
    v24 = (float64x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)vmulq_f64(v40, _Q3), 8uLL);
    v29 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    v28 = vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
  }
  else
  {
    _Q0.f64[0] = v10.f64[0];
    _Q0.f64[1] = v3.f64[0];
    v13.f64[0] = v3.f64[0];
    v13.f64[1] = v6.f64[0];
    a3.f64[0] = -0.0;
    _Q5 = vmlaq_f64(vmulq_f64(v13, (float64x2_t)xmmword_210389940), _Q0, (float64x2_t)xmmword_21030D320);
    v15 = vmlaq_f64(vmulq_f64(v10, a3), v6, (float64x2_t)0);
    _Q2 = vmulq_f64(_Q5, _Q5);
    _D3 = _Q5.f64[1];
    __asm { FMLA            D2, D3, V5.D[1] }
    _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v15.f64[0], v15.f64[0]));
    _Q4 = vmulq_f64(v15, _Q2);
    v23 = vmulq_n_f64(_Q5, _Q2.f64[0]);
    v24 = (float64x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)_Q4, 8uLL);
    _Q4.f64[1] = v23.f64[0];
    _Q1 = vmlsq_f64(vmulq_f64(v13, v24), _Q0, _Q4);
    v25 = vmlsq_laneq_f64(vmulq_f64(v10, v23), v6, v23, 1);
    _Q4.f64[0] = _Q1.f64[1];
    __asm { FMLA            D0, D4, V1.D[1] }
    _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q0.f64[0], v25.f64[0], v25.f64[0]));
    result = (__n128)vmulq_n_f64(_Q1, _Q4.f64[0]);
    *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vmulq_f64(v25, _Q4);
    v28 = vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    v29 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  }
  result.n128_u64[1] = v28;
  v23.f64[1] = v24.f64[0];
  v6.f64[1] = v10.f64[0];
  *(float64_t *)(a2 + 16) = _Q1.f64[0];
  *(__n128 *)a2 = result;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 48) = v29;
  *(float64x2_t *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 56) = 0;
  *(float64_t *)(a2 + 80) = v3.f64[0];
  *(float64x2_t *)(a2 + 64) = v6;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 112) = v4;
  v5.i64[1] = v9;
  *(int8x16_t *)(a2 + 96) = v5;
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  return result;
}

uint64_t *sub_20EEE88A0(unint64_t *a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  _OWORD *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  __int128 *v92;
  _OWORD *v93;
  uint64_t v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;
  __int128 *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;

  v5 = *a1;
  v6 = a2 - *a1;
  v7 = (uint64_t *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  v8 = a5 - 1;
  if (a5 < 1)
    return v7;
  v10 = a3;
  v12 = v6 >> 3;
  v14 = a1[1];
  v13 = a1[2];
  if (a5 <= (uint64_t)(v13 - v14) >> 3)
  {
    v19 = v14 - (_QWORD)v7;
    v20 = (uint64_t)(v14 - (_QWORD)v7) >> 3;
    if (v20 >= a5)
    {
      v21 = &a3[8 * a5];
      v24 = (char *)a1[1];
      goto LABEL_48;
    }
    v21 = &a3[8 * v20];
    if (v21 == a4)
    {
      v24 = (char *)a1[1];
      goto LABEL_47;
    }
    v22 = a4 - a3 - v19 - 8;
    if (v22 >= 0x38)
    {
      v23 = &a3[8 * v20];
      v24 = (char *)a1[1];
      if ((unint64_t)((char *)v7 - a3) >= 0x20)
      {
        v60 = (v22 >> 3) + 1;
        v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
        v23 = &v21[v61];
        v24 = (char *)(v14 + v61);
        v62 = (_OWORD *)(v14 + 16);
        v63 = (__int128 *)&a3[8 * v20 + 16];
        v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v65 = *v63;
          *(v62 - 1) = *(v63 - 1);
          *v62 = v65;
          v62 += 2;
          v63 += 2;
          v64 -= 4;
        }
        while (v64);
        if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_47:
          a1[1] = (unint64_t)v24;
          if (v19 < 1)
            return v7;
LABEL_48:
          v67 = (char *)&v7[a5];
          v68 = (char *)(v24 - v67);
          v69 = (v24 - v67) >> 3;
          v70 = &v24[-8 * a5];
          v71 = v24;
          if ((unint64_t)v70 < v14)
          {
            v72 = &v68[v6 & 0xFFFFFFFFFFFFFFF8];
            v73 = (unint64_t)&v72[v5 + 8];
            if (v14 > v73)
              v73 = v14;
            v74 = v73 + ~v5 - (_QWORD)v72;
            v75 = (uint64_t *)&v24[-8 * a5];
            v71 = v24;
            if (v74 < 0x58)
              goto LABEL_82;
            v75 = (uint64_t *)&v24[-8 * a5];
            v71 = v24;
            if ((unint64_t)&v67[-(v6 & 0xFFFFFFFFFFFFFFF8) - v5] < 0x20)
              goto LABEL_82;
            v76 = (v74 >> 3) + 1;
            v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
            v75 = (uint64_t *)&v70[v77];
            v71 = &v24[v77];
            v78 = v24 + 16;
            v79 = (__int128 *)(8 * v69 + 8 * v12 + v5 + 16);
            v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v81 = *v79;
              *(v78 - 1) = *(v79 - 1);
              *v78 = v81;
              v78 += 2;
              v79 += 2;
              v80 -= 4;
            }
            while (v80);
            if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_82:
              do
              {
                v82 = *v75++;
                *(_QWORD *)v71 = v82;
                v71 += 8;
              }
              while ((unint64_t)v75 < v14);
            }
          }
          a1[1] = (unint64_t)v71;
          if (v24 != v67)
          {
            if ((unint64_t)(v68 - 8) < 0x78 || (v6 & 0xFFFFFFFFFFFFFFF8) + v5 - (unint64_t)v67 < 0x20)
            {
              v83 = v24;
LABEL_61:
              v84 = v83 - 8;
              do
              {
                v85 = *((_QWORD *)v70 - 1);
                v70 -= 8;
                *(_QWORD *)v84 = v85;
                v84 -= 8;
              }
              while (v70 != (char *)v7);
              goto LABEL_63;
            }
            v96 = ((unint64_t)(v68 - 8) >> 3) + 1;
            v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
            v83 = &v24[-v97];
            v70 -= v97;
            v98 = (__int128 *)(8 * v69 + 8 * v12 + v5 - 16);
            v99 = v24 - 16;
            v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v101 = *v98;
              *((_OWORD *)v99 - 1) = *(v98 - 1);
              *(_OWORD *)v99 = v101;
              v98 -= 2;
              v99 -= 32;
              v100 -= 4;
            }
            while (v100);
            if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_61;
          }
LABEL_63:
          v86 = v21 - v10;
          if (v21 != v10)
          {
            v87 = v86 - 8;
            if ((unint64_t)(v86 - 8) < 0x18)
            {
              v88 = v7;
            }
            else
            {
              v88 = v7;
              if ((unint64_t)((char *)v7 - v10) >= 0x20)
              {
                v89 = (v87 >> 3) + 1;
                v90 = v89 & 0x3FFFFFFFFFFFFFFCLL;
                v88 = &v7[v90];
                v91 = &v10[v90 * 8];
                v92 = (__int128 *)(v10 + 16);
                v93 = (_OWORD *)(v5 + 8 * v12 + 16);
                v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v95 = *v92;
                  *(v93 - 1) = *(v92 - 1);
                  *v93 = v95;
                  v92 += 2;
                  v93 += 2;
                  v94 -= 4;
                }
                while (v94);
                v10 = v91;
                if (v89 == (v89 & 0x3FFFFFFFFFFFFFFCLL))
                  return v7;
              }
            }
            do
            {
              v102 = *(_QWORD *)v10;
              v10 += 8;
              *v88++ = v102;
            }
            while (v10 != v21);
          }
          return v7;
        }
      }
    }
    else
    {
      v23 = &a3[8 * v20];
      v24 = (char *)a1[1];
    }
    do
    {
      v66 = *(_QWORD *)v23;
      v23 += 8;
      *(_QWORD *)v24 = v66;
      v24 += 8;
    }
    while (v23 != a4);
    goto LABEL_47;
  }
  v15 = a5 + ((uint64_t)(v14 - v5) >> 3);
  if (v15 >> 61)
    sub_20E969238();
  v16 = v13 - v5;
  if (v16 >> 2 > v15)
    v15 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 61)
      sub_20E877A38();
    v18 = operator new(8 * v17);
    v12 = v6 >> 3;
  }
  else
  {
    v18 = 0;
  }
  v25 = &v18[8 * v12];
  v26 = &v25[a5];
  v27 = v25;
  v28 = v10;
  if ((v8 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
    goto LABEL_83;
  v27 = &v18[8 * v12];
  v28 = v10;
  if ((unint64_t)(&v18[v6 & 0xFFFFFFFFFFFFFFF8] - v10) < 0x20)
    goto LABEL_83;
  v29 = (v8 & 0x1FFFFFFFFFFFFFFFLL) + 1;
  v30 = v29 & 0x3FFFFFFFFFFFFFFCLL;
  v27 = &v25[v30];
  v28 = &v10[v30 * 8];
  v31 = (__int128 *)(v10 + 16);
  v32 = &v18[8 * v12 + 16];
  v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v34 = *v31;
    *(v32 - 1) = *(v31 - 1);
    *v32 = v34;
    v31 += 2;
    v32 += 2;
    v33 -= 4;
  }
  while (v33);
  if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_83:
    do
    {
      v35 = *(_QWORD *)v28;
      v28 += 8;
      *v27++ = v35;
    }
    while (v27 != v26);
  }
  v36 = (char *)*a1;
  v37 = &v18[8 * v12];
  if ((uint64_t *)*a1 != v7)
  {
    v38 = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + v5);
    v39 = v38 - v36 - 8;
    v40 = (char *)v7;
    v37 = &v18[8 * v12];
    if (v39 < 0x68)
      goto LABEL_84;
    v40 = (char *)v7;
    v37 = &v18[8 * v12];
    if ((unint64_t)(v38 - &v18[v6 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_84;
    v41 = (v39 >> 3) + 1;
    v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
    v40 = (char *)&v7[v42 / 0xFFFFFFFFFFFFFFF8];
    v37 = (char *)&v25[v42 / 0xFFFFFFFFFFFFFFF8];
    v43 = 8 * v12 - 16;
    v44 = &v18[v43];
    v45 = (__int128 *)(v5 + v43);
    v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v47 = *v45;
      *(v44 - 1) = *(v45 - 1);
      *v44 = v47;
      v44 -= 2;
      v45 -= 2;
      v46 -= 4;
    }
    while (v46);
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_84:
      do
      {
        v48 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v37 - 1) = v48;
        v37 -= 8;
      }
      while (v40 != v36);
    }
    v14 = a1[1];
  }
  v49 = &v18[8 * v17];
  if ((uint64_t *)v14 != v7)
  {
    v50 = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + v5);
    v51 = v14 - (_QWORD)v50 - 8;
    if (v51 < 0x68)
      goto LABEL_85;
    if ((unint64_t)(&v18[8 * a5 + (v6 & 0xFFFFFFFFFFFFFFF8)] - v50) < 0x20)
      goto LABEL_85;
    v52 = (v51 >> 3) + 1;
    v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = (uint64_t *)((char *)v7 + v53);
    v26 = (_QWORD *)((char *)v26 + v53);
    v54 = &v18[8 * v12 + 16 + 8 * a5];
    v55 = (__int128 *)(8 * v12 + v5 + 16);
    v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v57 = *v55;
      *(v54 - 1) = *(v55 - 1);
      *v54 = v57;
      v54 += 2;
      v55 += 2;
      v56 -= 4;
    }
    while (v56);
    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_85:
      do
      {
        v58 = *v7++;
        *v26++ = v58;
      }
      while (v7 != (uint64_t *)v14);
    }
  }
  v59 = (_QWORD *)*a1;
  *a1 = (unint64_t)v37;
  a1[1] = (unint64_t)v26;
  a1[2] = (unint64_t)v49;
  if (v59)
    operator delete(v59);
  return v25;
}

float32x2_t *sub_20EEE8E24@<X0>(float32x2_t *result@<X0>, int a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x2_t v7;

  v4 = result->u32[0];
  v3 = result->u32[1];
  v6 = result[1].u32[0];
  v5 = result[1].u32[1];
  v7 = vmul_f32(vadd_f32(*result, result[1]), (float32x2_t)0x3F0000003F000000);
  switch(a2)
  {
    case 0:
      *a3 = (float32x2_t)(v4 | (v3 << 32));
      a3[1] = v7;
      LODWORD(v5) = v7.i32[1];
      if (*(float *)&v4 > v7.f32[0])
      {
        a3->i32[0] = v7.i32[0];
        a3[1].i32[0] = v4;
      }
      if (*(float *)&v3 <= v7.f32[1])
        return result;
      goto LABEL_9;
    case 1:
      LODWORD(v5) = v7.i32[1];
      *a3 = (float32x2_t)(v7.u32[0] | (unint64_t)(v3 << 32));
      a3[1] = (float32x2_t)(v6 | ((unint64_t)v7.u32[1] << 32));
      if (v7.f32[0] > *(float *)&v6)
      {
        a3->i32[0] = v6;
        a3[1].i32[0] = v7.i32[0];
      }
      if (*(float *)&v3 <= v7.f32[1])
        return result;
      goto LABEL_9;
    case 2:
      LODWORD(v3) = v7.i32[1];
      *a3 = (float32x2_t)(v4 | ((unint64_t)v7.u32[1] << 32));
      a3[1] = (float32x2_t)(v7.u32[0] | (unint64_t)(v5 << 32));
      if (*(float *)&v4 > v7.f32[0])
      {
        a3->i32[0] = v7.i32[0];
        a3[1].i32[0] = v4;
      }
      if (v7.f32[1] > *(float *)&v5)
        goto LABEL_9;
      return result;
    case 3:
      *a3 = v7;
      a3[1] = (float32x2_t)(v6 | (v5 << 32));
      LODWORD(v3) = v7.i32[1];
      if (v7.f32[0] > *(float *)&v6)
      {
        a3->i32[0] = v6;
        a3[1].i32[0] = v7.i32[0];
      }
      if (v7.f32[1] <= *(float *)&v5)
        return result;
LABEL_9:
      a3->i32[1] = v5;
      a3[1].i32[1] = v3;
      return result;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Geometry/QuadTree.cpp", 51, (uint64_t)"", 0, (uint64_t)"Invalid quadrant index", 22, (void (*)(void **))sub_21023DDB0);
      abort();
  }
}

uint64_t sub_20EEE8F98(unint64_t a1, float32x2_t *a2, int32x2_t a3)
{
  _BOOL8 v3;
  uint64_t v6;
  float32x2_t v7;
  char *v8;
  BOOL v10;
  char *v12;
  char *v13;
  char *v14;
  int32x2_t v15;
  char **v16;

  if (a1 < 2)
    return 1;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  if (a1 >> 61)
    sub_20EEC13DC();
  v6 = 8 * a1;
  v12 = (char *)operator new(8 * a1);
  v13 = v12;
  v14 = &v12[v6];
  v16 = &v12;
  v7 = (float32x2_t)vdup_lane_s32(a3, 0);
  do
  {
    v15 = vcvt_s32_f32(vrndm_f32(vdiv_f32(*a2, v7)));
    sub_20EEE90CC((void ***)&v16, &v15);
    ++a2;
    v6 -= 8;
  }
  while (v6);
  if (v12 + 8 == v13)
  {
    v3 = 1;
    if (!v12)
      return v3;
  }
  else
  {
    v8 = v12 + 16;
    do
    {
      v3 = *((_DWORD *)v8 - 2) == *((_DWORD *)v8 - 4) && *((_DWORD *)v8 - 1) == *((_DWORD *)v8 - 3);
      v10 = !v3 || v8 == v13;
      v8 += 8;
    }
    while (!v10);
    if (!v12)
      return v3;
  }
  operator delete(v12);
  return v3;
}

void sub_20EEE90AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ***sub_20EEE90CC(void ***a1, _QWORD *a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = (char *)(*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = (char *)*v4;
    v10 = v6 - (_BYTE *)*v4;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_20EEC13DC();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20E877A38();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_28;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = (__int128 *)(v6 - 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
      v7 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[8 * v14];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

void sub_20EEE9240(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unint64_t StatusReg;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _BOOL8 v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  unint64_t v33;
  int v34;
  void *v35;
  void *v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _BOOL8 v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  size_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  BOOL v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  int v64;
  _BOOL4 v65;
  unint64_t v66;
  float64x2_t *v67;
  BOOL v68;
  BOOL v69;
  _BOOL4 v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  _BOOL4 v75;
  unint64_t v76;
  uint64_t v77;
  __int16 *v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  _BOOL4 v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v96;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  float64x2_t *v108;
  uint64_t v109;
  float64x2_t *v110;
  float64x2_t v111;
  double v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  uint64_t v118;
  int v119;
  int v120;
  BOOL v121;
  BOOL v122;
  int v123;
  unint64_t v124;
  int v125;
  BOOL v126;
  BOOL v127;
  int v128;
  unint64_t v129;
  int v130;
  _BOOL4 v131;
  unsigned int v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned int v146;
  float64x2_t v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int v152;
  uint64_t v153;
  int8x16_t v154;
  double v155;
  double v156;
  uint64_t v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  float64x2_t v161;
  float32x2_t v162;
  float32x2_t v163;
  float32x4_t v164;
  float32x4_t v165;
  unsigned int v166;
  float64x2_t *v167;
  float64x2_t *v168;
  float64x2_t v169;
  float64x2_t *v170;
  float64x2_t v171;
  float64x2_t *v172;
  int8x16_t v173;
  double v174;
  double v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int i;
  int v179;
  uint64_t v180;
  int v181;
  float64x2_t *v182;
  double v183;
  float64x2_t v184;
  float64x2_t v185;
  double v186;
  float64x2_t v187;
  double v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  unsigned int v192;
  uint64_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  unsigned int v197;
  float64x2_t *v198;
  uint64_t v199;
  uint64_t v200;
  float64x2_t *v201;
  float64x2_t v202;
  double v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  uint64_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t *v212;
  float64x2_t *v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t *v218;
  float64x2_t *v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t *v223;
  uint64_t v224;
  unsigned int v225;
  int v226;
  unsigned int v227;
  int v228;
  uint64_t v229;
  unsigned int v230;
  int v231;
  unsigned int v232;
  int v233;
  int v234;
  int v235;
  float64x2_t v236;
  float32x2_t v237;
  float32x2_t v238;
  float32x4_t v239;
  float32x4_t v240;
  int v241;
  int v242;
  float64x2_t *v243;
  float64x2_t v244;
  int v245;
  float64x2_t *v246;
  float64x2_t *v247;
  float64x2_t v248;
  float64x2_t *v249;
  int8x16_t v250;
  double v251;
  double v252;
  uint64_t v253;
  int v254;
  int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  float64x2_t v259;
  float32x2_t v260;
  float32x2_t v261;
  float32x4_t v262;
  float32x4_t v263;
  int v264;
  int v265;
  float64x2_t *v266;
  float64x2_t v267;
  int v268;
  float64x2_t *v269;
  float64x2_t *v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t *v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t *v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t *v280;
  float64x2_t v281;
  float64x2_t *v282;
  float64x2_t v283;
  float64x2_t *v284;
  int8x16_t v285;
  double v286;
  double v287;
  uint64_t v288;
  int v289;
  int v290;
  int v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  unsigned int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  unsigned int v306;
  int v307;
  int v308;
  uint64_t v309;
  unsigned int v310;
  int v311;
  int v312;
  int v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  double v319;
  double v320;
  double v321;
  double v322;
  unint64_t v323;
  double v324;
  double v325;
  double v326;
  double v327;
  unsigned int v328;
  double v329;
  double v330;
  double v331;
  double v332;
  uint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  int v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  void *memptr[2];
  double v344;
  float64x2_t v345;
  double v346;
  float64x2_t v347;
  double v348;

  if ((*((_DWORD *)a2 + 3) != *(_DWORD *)(a3 + 8) || *((_DWORD *)a2 + 4) != *(_DWORD *)(a3 + 12))
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Geometry/SurfaceNormalComputation.cpp", 320, (uint64_t)"normals.Shape(1) == depths.Shape(0) && normals.Shape(2) == depths.Shape(1)", 74, (uint64_t)"Output dimension must be equal to the input depth image's dimension.", 68, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_234;
  }
  if ((a5 & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Geometry/SurfaceNormalComputation.cpp", 321, (uint64_t)"(kernelSize % 2) == 1", 21, (uint64_t)"Kernel size must be an odd number.", 34, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_234;
  }
  v335 = a3;
  v333 = a2;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = HIDWORD(v9);
  v328 = a5;
  v11 = v9 > a5 && HIDWORD(v9) > a5;
  if (!v11
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Geometry/SurfaceNormalComputation.cpp", 324, (uint64_t)"w > kernelSize && h > kernelSize", 32, (uint64_t)"Invalid image or kernel size is used.", 37, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_234;
  }
  if (*(_DWORD *)a1
    && (v12 = *((_DWORD *)a1 + 1)) != 0
    && (v13 = *((_DWORD *)a1 + 2), __PAIR64__(v13, v12) == v9)
    && *(_DWORD *)a1 == 9
    && v13)
  {
    v14 = *((_DWORD *)a1 + 22);
    if (!v14)
      goto LABEL_60;
  }
  else
  {
    if ((_DWORD)v9)
      _ZF = HIDWORD(v9) == 0;
    else
      _ZF = 1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
    if (_ZF)
      v17 = 0;
    else
      v17 = (v9 << 32) | 9;
    if (_ZF)
      v18 = 0;
    else
      v18 = HIDWORD(v9);
    if (_ZF)
      v19 = 0;
    else
      v19 = HIDWORD(v17) * v17;
    v20 = (_DWORD)v17 != 0;
    if (HIDWORD(v17))
      v21 = v17 << 32;
    else
      v21 = 0;
    if (HIDWORD(v17))
      v22 = v17 == 0;
    else
      v22 = 1;
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
    if (!HIDWORD(v17))
      v22 = 1;
    if (v22)
      v23 = 0;
    else
      v23 = v17;
    if (v22)
      v24 = 0;
    else
      v24 = v18;
    v25 = 8 * v19;
    v26 = v25 - 1;
    v27 = 8 * v24 * v19;
    _ZF = (v25 & (v25 - 1)) == 0;
    v28 = 7;
    if (_ZF)
      v28 = v26;
    v29 = v28 | (v28 >> 1) | ((v28 | (v28 >> 1)) >> 2);
    v30 = v29 | (v29 >> 4) | ((v29 | (v29 >> 4)) >> 8);
    v31 = v30 | (v30 >> 16) | ((v30 | (v30 >> 16)) >> 32);
    if (v31 + 1 > 8)
      v32 = v31 + 1;
    else
      v32 = 8;
    if (v24 * v19)
    {
      v317 = v21;
      v339 = v23;
      memptr[0] = 0;
      v33 = 8 * v24 * v19;
      v34 = malloc_type_posix_memalign(memptr, v32, v27, 0x1F88E90uLL);
      if (v34)
        goto LABEL_235;
      v35 = memptr[0];
      v23 = v339;
      v27 = 8 * v24 * v19;
      v20 = (_DWORD)v17 != 0;
      v21 = v317;
    }
    else
    {
      v35 = 0;
    }
    *a1 = v17;
    *((_DWORD *)a1 + 2) = v18;
    *(uint64_t *)((char *)a1 + 12) = v21 | v20;
    *((_DWORD *)a1 + 5) = v19;
    *((_BYTE *)a1 + 24) = 0;
    *((_BYTE *)a1 + 36) = 0;
    a1[8] = v23;
    *((_DWORD *)a1 + 18) = v24;
    *(uint64_t *)((char *)a1 + 76) = 8 * (v21 | v20);
    *((_DWORD *)a1 + 21) = 8 * v19;
    a1[5] = v27;
    v36 = (void *)a1[6];
    if (v36)
      free(v36);
    a1[6] = (uint64_t)v35;
    a1[7] = v32;
    v14 = *((_DWORD *)a1 + 22);
    if (!v14)
      goto LABEL_60;
  }
  v37 = *((_DWORD *)a1 + 23);
  if (v37)
  {
    v38 = *((_DWORD *)a1 + 24);
    if (__PAIR64__(v38, v37) == v9 && v14 == 3 && v38)
      goto LABEL_95;
  }
LABEL_60:
  if ((_DWORD)v9)
    v39 = HIDWORD(v9) == 0;
  else
    v39 = 1;
  v40 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  if (v39)
    v41 = 0;
  else
    v41 = (v9 << 32) | 3;
  if (v39)
  {
    LODWORD(v10) = 0;
    v42 = 0;
  }
  else
  {
    v42 = HIDWORD(v41) * v41;
  }
  v43 = (_DWORD)v41 != 0;
  if (HIDWORD(v41))
    v44 = v41 << 32;
  else
    v44 = 0;
  if (HIDWORD(v41))
    v45 = v41 == 0;
  else
    v45 = 1;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v40);
  if (!HIDWORD(v41))
    v45 = 1;
  if (v45)
    v46 = 0;
  else
    v46 = v41;
  if (v45)
    v47 = 0;
  else
    v47 = v10;
  v48 = 8 * v42;
  v49 = v48 - 1;
  v50 = 8 * v47 * v42;
  _ZF = (v48 & (v48 - 1)) == 0;
  v51 = 7;
  if (_ZF)
    v51 = v49;
  v52 = v51 | (v51 >> 1) | ((v51 | (v51 >> 1)) >> 2);
  v53 = v52 | (v52 >> 4) | ((v52 | (v52 >> 4)) >> 8);
  v54 = v53 | (v53 >> 16) | ((v53 | (v53 >> 16)) >> 32);
  if (v54 + 1 > 8)
    v32 = v54 + 1;
  else
    v32 = 8;
  if (!(v47 * v42))
  {
    v55 = 0;
    goto LABEL_92;
  }
  v340 = v44;
  memptr[0] = 0;
  v33 = 8 * v47 * v42;
  v34 = malloc_type_posix_memalign(memptr, v32, v50, 0x1F88E90uLL);
  if (v34)
LABEL_235:
    sub_210207B94(v34, v32, v33);
  v55 = memptr[0];
  v44 = v340;
  v50 = 8 * v47 * v42;
LABEL_92:
  a1[11] = v41;
  *((_DWORD *)a1 + 24) = v10;
  *(uint64_t *)((char *)a1 + 100) = v44 | v43;
  *((_DWORD *)a1 + 27) = v42;
  *((_BYTE *)a1 + 112) = 0;
  *((_BYTE *)a1 + 124) = 0;
  a1[19] = v46;
  *((_DWORD *)a1 + 40) = v47;
  *(uint64_t *)((char *)a1 + 164) = 8 * (v44 | v43);
  *((_DWORD *)a1 + 43) = 8 * v42;
  a1[16] = v50;
  v56 = (void *)a1[17];
  if (v56)
    free(v56);
  a1[17] = (uint64_t)v55;
  a1[18] = v32;
LABEL_95:
  v57 = a1[6];
  if (*(_DWORD *)a1)
    v58 = *((_DWORD *)a1 + 1) == 0;
  else
    v58 = 1;
  v59 = v58 || *((_DWORD *)a1 + 2) == 0;
  v60 = v59;
  v61 = *a1;
  if (v59)
    v62 = 0;
  else
    v62 = *((_DWORD *)a1 + 2);
  v63 = *(uint64_t *)((char *)a1 + 12);
  v64 = *((_DWORD *)a1 + 5);
  v341 = v62;
  if (v62 * v64 == -1)
  {
    v65 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0);
    v62 = v341;
    if (v65)
      goto LABEL_234;
  }
  v323 = v63;
  v66 = v60 ? 0 : v61;
  v67 = (float64x2_t *)a1[17];
  v68 = !*((_DWORD *)a1 + 22) || *((_DWORD *)a1 + 23) == 0;
  v69 = v68 || *((_DWORD *)a1 + 24) == 0;
  v70 = v69;
  v71 = a1[11];
  v72 = v69 ? 0 : *((_DWORD *)a1 + 24);
  v318 = *(uint64_t *)((char *)a1 + 100);
  v73 = *((_DWORD *)a1 + 27);
  if (v72 * v73 == -1)
  {
    v74 = v72;
    v75 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0);
    v72 = v74;
    v62 = v341;
    if (v75)
      goto LABEL_234;
  }
  v76 = HIDWORD(v66);
  v77 = v70 ? 0 : v71;
  v78 = *(__int16 **)v335;
  v80 = *(_DWORD *)(v335 + 8);
  v79 = *(_DWORD *)(v335 + 12);
  v81 = *(_DWORD *)(v335 + 16);
  v336 = *(_DWORD *)(v335 + 20);
  if ((_DWORD)v66 != 9 || __PAIR64__(v62, HIDWORD(v66)) != __PAIR64__(v79, v80))
  {
    v82 = v72;
    v83 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Geometry/SurfaceNormalComputation.cpp", 127, (uint64_t)"c == kElementLength && w == depths.Shape(0) && h == depths.Shape(1)", 67, (uint64_t)"Invalid output outer product array dimension.", 45, (void (*)(void **))sub_21023DDB0);
    v72 = v82;
    v62 = v341;
    if (v83)
      goto LABEL_234;
  }
  if ((v62 != v72 || v77 != 3 || (_DWORD)v76 != HIDWORD(v77))
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Geometry/SurfaceNormalComputation.cpp", 129, (uint64_t)"arr::Shape3(3, w, h) == pointsSums.Shape()", 42, (uint64_t)"Invalid output point integral image dimension.", 46, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_234;
  }
  sub_20E8BE424((uint64_t)memptr);
  v100 = vaddq_f64(v347, vmlaq_f64(vmulq_f64(*(float64x2_t *)memptr, (float64x2_t)0), (float64x2_t)0, v345));
  v101.f64[0] = v348 + v344 * 0.0 + v346 * 0.0;
  _H3 = *v78;
  __asm { FCVT            D3, H3 }
  v96.f64[0] = _D3 / v101.f64[0];
  _Q5 = vmulq_f64(v101, v96);
  v98 = vmulq_n_f64(v100, v96.f64[0]);
  *v67 = v98;
  v67[1].f64[0] = _Q5.f64[0];
  v99.f64[0] = v96.f64[0] * v100.f64[0];
  v100.f64[0] = vmuld_lane_f64(v96.f64[0], v100, 1);
  v101.f64[0] = v101.f64[0] * v96.f64[0];
  _Q3 = vmulq_n_f64(v98, v99.f64[0]);
  *(double *)(v57 + 16) = v99.f64[0] * _Q5.f64[0];
  *(float64x2_t *)v57 = _Q3;
  *(double *)(v57 + 40) = v100.f64[0] * _Q5.f64[0];
  *(float64x2_t *)(v57 + 24) = vmulq_n_f64(v98, v100.f64[0]);
  *(double *)(v57 + 64) = v101.f64[0] * _Q5.f64[0];
  *(float64x2_t *)(v57 + 48) = vmulq_n_f64(v98, v101.f64[0]);
  if ((_DWORD)v76 != 1)
  {
    v103 = 0;
    v104 = 0;
    v105 = 1;
    v106 = v81;
    do
    {
      v107 = v57 + 8 * v103;
      v103 += HIDWORD(v323);
      v108 = (float64x2_t *)((char *)v67 + 8 * v104);
      v104 += HIDWORD(v318);
      v109 = v57 + 8 * v103;
      v110 = (float64x2_t *)((char *)v67 + 8 * v104);
      v111 = vaddq_f64(v347, vmlaq_f64(vmulq_n_f64(*(float64x2_t *)memptr, (double)v105), (float64x2_t)0, v345));
      v101.f64[0] = v348 + v344 * (double)v105 + v346 * 0.0;
      LOWORD(_Q3.f64[0]) = v78[v106];
      __asm { FCVT            D3, H3 }
      _Q3.f64[0] = _Q3.f64[0] / v101.f64[0];
      v112 = vmulq_f64(v101, _Q3).f64[0];
      v113 = vmulq_n_f64(v111, _Q3.f64[0]);
      *v110 = v113;
      v110[1].f64[0] = v112;
      v99.f64[0] = _Q3.f64[0] * v111.f64[0];
      v111.f64[0] = vmuld_lane_f64(_Q3.f64[0], v111, 1);
      v101.f64[0] = v101.f64[0] * _Q3.f64[0];
      v114 = vmulq_n_f64(v113, v99.f64[0]);
      v99.f64[0] = v99.f64[0] * v112;
      v115 = vmulq_n_f64(v113, v111.f64[0]);
      v111.f64[0] = v111.f64[0] * v112;
      v116 = vmulq_n_f64(v113, v101.f64[0]);
      v101.f64[0] = v101.f64[0] * v112;
      *(float64_t *)(v109 + 16) = v99.f64[0];
      *(float64x2_t *)v109 = v114;
      *(float64_t *)(v109 + 40) = v111.f64[0];
      *(float64x2_t *)(v109 + 24) = v115;
      *(float64_t *)(v109 + 64) = v101.f64[0];
      *(float64x2_t *)(v109 + 48) = v116;
      v84.f64[0] = *(float64_t *)(v107 + 16);
      v85 = *(float64x2_t *)(v107 + 24);
      v86.f64[0] = *(float64_t *)(v107 + 40);
      v87 = *(float64x2_t *)(v107 + 48);
      v88.f64[0] = *(float64_t *)(v107 + 64);
      v99 = vaddq_f64(v84, v99);
      v117 = vaddq_f64(*(float64x2_t *)v107, v114);
      _Q5 = vaddq_f64(v85, v115);
      *(float64x2_t *)v109 = v117;
      *(float64_t *)(v109 + 16) = v99.f64[0];
      *(float64x2_t *)(v109 + 24) = _Q5;
      *(_QWORD *)(v109 + 40) = *(_OWORD *)&vaddq_f64(v86, v111);
      *(float64x2_t *)(v109 + 48) = vaddq_f64(v87, v116);
      *(_QWORD *)(v109 + 64) = *(_OWORD *)&vaddq_f64(v88, v101);
      v117.f64[0] = v110[1].f64[0];
      v100 = *v108;
      _Q5.f64[0] = v108[1].f64[0];
      _Q3 = vaddq_f64(v117, _Q5);
      v101 = vaddq_f64(*v110, *v108);
      *v110 = v101;
      v110[1].f64[0] = _Q3.f64[0];
      v106 += v81;
      ++v105;
    }
    while ((_DWORD)v76 != v105);
  }
  if (v341 != 1)
  {
    for (i = 1; i != v341; ++i)
    {
      v179 = v64 * i;
      v180 = v57 + 8 * v64 * i;
      v181 = v73 * i;
      v182 = (float64x2_t *)((char *)v67 + 8 * v73 * i);
      v183 = (double)i;
      v184.f64[1] = v347.f64[1];
      v185 = vaddq_f64(v347, vmlaq_n_f64(vmulq_f64(*(float64x2_t *)memptr, (float64x2_t)0), v345, (double)i));
      LOWORD(_Q5.f64[0]) = v78[v336 * i];
      _Q3.f64[0] = v348 + v344 * 0.0 + v346 * (double)i;
      __asm { FCVT            D5, H5 }
      _Q5.f64[0] = _Q5.f64[0] / _Q3.f64[0];
      v186 = vmulq_f64(_Q3, _Q5).f64[0];
      v187 = vmulq_n_f64(v185, _Q5.f64[0]);
      *v182 = v187;
      v182[1].f64[0] = v186;
      v188 = _Q5.f64[0] * v185.f64[0];
      v185.f64[0] = vmuld_lane_f64(_Q5.f64[0], v185, 1);
      _Q3.f64[0] = _Q3.f64[0] * _Q5.f64[0];
      v189 = vmulq_n_f64(v187, v188);
      v184.f64[0] = v188 * v186;
      v190 = vmulq_n_f64(v187, v185.f64[0]);
      v185.f64[0] = v185.f64[0] * v186;
      v191 = vmulq_n_f64(v187, _Q3.f64[0]);
      _Q3.f64[0] = _Q3.f64[0] * v186;
      *(float64_t *)(v180 + 16) = v184.f64[0];
      *(float64x2_t *)v180 = v189;
      *(float64_t *)(v180 + 40) = v185.f64[0];
      *(float64x2_t *)(v180 + 24) = v190;
      *(float64_t *)(v180 + 64) = _Q3.f64[0];
      *(float64x2_t *)(v180 + 48) = v191;
      v192 = (i - 1) * v64;
      v193 = v57 + 8 * v192;
      v85.f64[0] = *(float64_t *)(v193 + 16);
      v86 = *(float64x2_t *)(v193 + 24);
      v87.f64[0] = *(float64_t *)(v193 + 40);
      v194 = *(float64x2_t *)(v193 + 48);
      v89.f64[0] = *(float64_t *)(v193 + 64);
      v195 = vaddq_f64(v87, v185);
      v196 = vaddq_f64(v86, v190);
      *(float64x2_t *)v180 = vaddq_f64(*(float64x2_t *)v193, v189);
      *(_QWORD *)(v180 + 16) = *(_OWORD *)&vaddq_f64(v85, v184);
      *(float64x2_t *)(v180 + 24) = v196;
      *(float64_t *)(v180 + 40) = v195.f64[0];
      *(float64x2_t *)(v180 + 48) = vaddq_f64(v194, v191);
      *(_QWORD *)(v180 + 64) = *(_OWORD *)&vaddq_f64(v89, _Q3);
      v197 = (i - 1) * v73;
      v198 = (float64x2_t *)((char *)v67 + 8 * v197);
      v195.f64[0] = v182[1].f64[0];
      _Q5 = *v198;
      v196.f64[0] = v198[1].f64[0];
      v100 = vaddq_f64(v195, v196);
      _Q3 = vaddq_f64(*v182, *v198);
      *v182 = _Q3;
      v182[1].f64[0] = v100.f64[0];
      if ((_DWORD)v76 != 1)
      {
        _Q3 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v183, 0);
        v199 = 1;
        do
        {
          v200 = v57 + 8 * (v199 * HIDWORD(v323) + v179);
          v201 = (float64x2_t *)((char *)v67 + 8 * (v199 * HIDWORD(v318) + v181));
          v100.f64[0] = v348 + v344 * (double)v199 + v346 * v183;
          LOWORD(_Q5.f64[0]) = v78[v336 * i + v81 * (_DWORD)v199];
          v202 = vaddq_f64(v347, vmlaq_f64(vmulq_n_f64(*(float64x2_t *)memptr, (double)v199), _Q3, v345));
          __asm { FCVT            D5, H5 }
          _Q5.f64[0] = _Q5.f64[0] / v100.f64[0];
          v203 = vmulq_f64(v100, _Q5).f64[0];
          v204 = vmulq_n_f64(v202, _Q5.f64[0]);
          *v201 = v204;
          v201[1].f64[0] = v203;
          v190.f64[0] = _Q5.f64[0] * v202.f64[0];
          v202.f64[0] = vmuld_lane_f64(_Q5.f64[0], v202, 1);
          v100.f64[0] = v100.f64[0] * _Q5.f64[0];
          v205 = vmulq_n_f64(v204, v190.f64[0]);
          v190.f64[0] = v190.f64[0] * v203;
          v206 = vmulq_n_f64(v204, v202.f64[0]);
          v202.f64[0] = v202.f64[0] * v203;
          v207 = vmulq_n_f64(v204, v100.f64[0]);
          v100.f64[0] = v100.f64[0] * v203;
          *(float64_t *)(v200 + 16) = v190.f64[0];
          *(float64x2_t *)v200 = v205;
          *(float64_t *)(v200 + 40) = v202.f64[0];
          *(float64x2_t *)(v200 + 24) = v206;
          *(float64_t *)(v200 + 64) = v100.f64[0];
          *(float64x2_t *)(v200 + 48) = v207;
          v208 = v57 + 8 * ((_DWORD)v199 * HIDWORD(v323) + v192);
          v86.f64[0] = *(float64_t *)(v208 + 16);
          v194.f64[0] = *(float64_t *)(v208 + 40);
          v89 = *(float64x2_t *)(v208 + 48);
          v90.f64[0] = *(float64_t *)(v208 + 64);
          v209 = vaddq_f64(*(float64x2_t *)v208, v205);
          v210 = vaddq_f64(*(float64x2_t *)(v208 + 24), v206);
          v211 = vaddq_f64(v89, v207);
          *(float64x2_t *)v200 = v209;
          *(_QWORD *)(v200 + 16) = *(_OWORD *)&vaddq_f64(v86, v190);
          *(float64x2_t *)(v200 + 24) = v210;
          *(_QWORD *)(v200 + 40) = *(_OWORD *)&vaddq_f64(v194, v202);
          *(float64x2_t *)(v200 + 48) = v211;
          *(_QWORD *)(v200 + 64) = *(_OWORD *)&vaddq_f64(v90, v100);
          v212 = (float64x2_t *)((char *)v67 + 8 * (_DWORD)v199 * HIDWORD(v318) + 8 * v197);
          v209.f64[0] = v201[1].f64[0];
          v210.f64[0] = v212[1].f64[0];
          *v201 = vaddq_f64(*v201, *v212);
          LODWORD(v208) = (v199 - 1) * HIDWORD(v323);
          *(_QWORD *)&v201[1].f64[0] = *(_OWORD *)&vaddq_f64(v209, v210);
          v213 = (float64x2_t *)(v57 + 8 * (v208 + v179));
          v211.f64[0] = *(float64_t *)(v200 + 64);
          v194.f64[0] = v213[4].f64[0];
          v214 = vaddq_f64(v211, v194);
          v215 = vaddq_f64(*(float64x2_t *)(v200 + 48), v213[3]);
          v216 = vaddq_f64(*(float64x2_t *)(v200 + 32), v213[2]);
          v217 = vaddq_f64(*(float64x2_t *)(v200 + 16), v213[1]);
          *(float64x2_t *)v200 = vaddq_f64(*(float64x2_t *)v200, *v213);
          *(float64x2_t *)(v200 + 16) = v217;
          *(float64x2_t *)(v200 + 32) = v216;
          *(float64x2_t *)(v200 + 48) = v215;
          LODWORD(v212) = (v199 - 1) * HIDWORD(v318);
          v218 = (float64x2_t *)((char *)v67 + 8 * ((_DWORD)v212 + v181));
          *(float64_t *)(v200 + 64) = v214.f64[0];
          v217.f64[0] = v201[1].f64[0];
          v215.f64[0] = v218[1].f64[0];
          *v201 = vaddq_f64(*v201, *v218);
          *(_QWORD *)&v201[1].f64[0] = *(_OWORD *)&vaddq_f64(v217, v215);
          v219 = (float64x2_t *)(v57 + 8 * (v208 + v192));
          v214.f64[0] = *(float64_t *)(v200 + 64);
          v190 = *v219;
          v85 = v219[1];
          v86 = v219[2];
          v87 = v219[3];
          v194.f64[0] = v219[4].f64[0];
          v220 = vsubq_f64(*(float64x2_t *)(v200 + 48), v87);
          v221 = vsubq_f64(*(float64x2_t *)(v200 + 32), v86);
          v222 = vsubq_f64(*(float64x2_t *)(v200 + 16), v85);
          *(float64x2_t *)v200 = vsubq_f64(*(float64x2_t *)v200, *v219);
          *(float64x2_t *)(v200 + 16) = v222;
          *(float64x2_t *)(v200 + 32) = v221;
          *(float64x2_t *)(v200 + 48) = v220;
          *(_QWORD *)(v200 + 64) = *(_OWORD *)&vsubq_f64(v214, v194);
          v223 = (float64x2_t *)((char *)v67 + 8 * v212 + 8 * v197);
          v222.f64[0] = v201[1].f64[0];
          v220.f64[0] = v223[1].f64[0];
          _Q5 = vsubq_f64(v222, v220);
          v100 = vsubq_f64(*v201, *v223);
          *v201 = v100;
          v201[1].f64[0] = _Q5.f64[0];
          ++v199;
        }
        while ((_DWORD)v199 != (_DWORD)v76);
      }
    }
  }
  v118 = *v333;
  v119 = *((_DWORD *)v333 + 4);
  v300 = *((_DWORD *)v333 + 3);
  v120 = *((_DWORD *)v333 + 6);
  v297 = *((_DWORD *)v333 + 7);
  v342 = a1[6];
  v121 = !*((_DWORD *)a1 + 2) || *((_DWORD *)a1 + 1) == 0;
  v122 = v121 || *(_DWORD *)a1 == 0;
  v123 = v122 ? 0 : *((_DWORD *)a1 + 2);
  v124 = *(uint64_t *)((char *)a1 + 12);
  v125 = *((_DWORD *)a1 + 5);
  if (v123 * v125 == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_234;
  }
  v338 = a1[17];
  v126 = !*((_DWORD *)a1 + 24) || *((_DWORD *)a1 + 23) == 0;
  v127 = v126 || *((_DWORD *)a1 + 22) == 0;
  v128 = v127 ? 0 : *((_DWORD *)a1 + 24);
  v129 = *(uint64_t *)((char *)a1 + 100);
  v130 = *((_DWORD *)a1 + 27);
  v298 = v130;
  if (v128 * v130 == -1)
  {
    v131 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0);
    v130 = v298;
    if (v131)
LABEL_234:
      abort();
  }
  v132 = 0;
  v133 = 0;
  v134 = HIDWORD(v124);
  v135 = HIDWORD(v129);
  v290 = v119;
  v295 = v119 - 1;
  v136 = v328 >> 1;
  v137 = v300 - 1;
  v289 = ~(_DWORD)v136;
  v314 = v136 + 1;
  v304 = v300 - 1 - v136;
  v299 = (v328 >> 1) + 1;
  v312 = v120 * v299;
  v302 = v328 | 1;
  v138 = v328 >> 1;
  v334 = HIDWORD(v129);
  v337 = HIDWORD(v124);
  v311 = v120;
  v296 = v125;
  v316 = v136;
  do
  {
    v139 = 0;
    v306 = v138;
    v308 = v133;
    if (v138 >= v295)
      v140 = v295;
    else
      v140 = v138;
    v141 = v130 * v140;
    v142 = v125 * v140;
    v143 = v133 + v136;
    if (v133 + (int)v136 >= v295)
      v143 = v295;
    v144 = v143 * v125;
    v145 = v143 * v130;
    v310 = v132;
    v146 = v132;
    do
    {
      while (1)
      {
        v152 = v316 + v139;
        if ((int)v316 + (int)v139 >= v137)
          v152 = v300 - 1;
        v153 = v338 + 8 * (v145 + v152 * v135);
        v154 = *(int8x16_t *)v153;
        v155 = *(double *)(v153 + 16);
        *(_QWORD *)&v156 = vextq_s8(v154, v154, 8uLL).u64[0];
        v157 = v118 + 4 * v146;
        if ((*(double *)v153 == 0.0 || fabs(*(double *)v154.i64) <= 0.00000001)
          && (v156 == 0.0 || fabs(v156) <= 0.00000001)
          && (v155 == 0.0 || fabs(v155) <= 0.00000001))
        {
          break;
        }
        v324 = v156;
        v329 = *(double *)(v153 + 16);
        v319 = *(double *)v153;
        sub_20E8BE424((uint64_t)memptr);
        LODWORD(v135) = v334;
        LODWORD(v134) = v337;
        _Q5.f64[1] = v347.f64[1];
        v147.f64[0] = v344 * v319 + v346 * v324 + v348 * v329;
        v148 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)memptr, v319), v345, v324), v347, v329));
        v149 = vmla_lane_f32(vmul_f32(v148, v148), (float32x2_t)vdup_lane_s32((int32x2_t)v148, 1), v148, 1);
        v150 = vcvt_hight_f32_f64((int32x2_t)v148, v147);
        *(float32x2_t *)&v147.f64[0] = vcvt_f32_f64(v147);
        *(float *)v147.f64 = 1.0
                           / sqrtf(vmla_f32(v149, *(float32x2_t *)&v147.f64[0], *(float32x2_t *)&v147.f64[0]).f32[0]);
        v151 = vmulq_f32(v150, vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v147.f64[0], 0)));
        *(_DWORD *)(v157 + 8) = v151.i32[2];
        *(_QWORD *)v157 = v151.i64[0];
        ++v139;
        v146 += v120;
        if (v314 == v139)
          goto LABEL_180;
      }
      *(_DWORD *)(v157 + 8) = 0;
      *(_QWORD *)v157 = 0;
      ++v139;
      v146 += v120;
    }
    while (v314 != v139);
LABEL_180:
    v158 = v302;
    v159 = v304;
    v160 = v312;
    if (v299 != v300)
    {
      do
      {
        if (v158 >= v137)
          v166 = v300 - 1;
        else
          v166 = v158;
        v167 = (float64x2_t *)(v342 + 8 * (v144 + v166 * v134));
        v100.f64[0] = v167[4].f64[0];
        v168 = (float64x2_t *)(v338 + 8 * (v145 + v166 * v135));
        _Q5.f64[0] = v168[1].f64[0];
        v169 = *v168;
        v170 = (float64x2_t *)(v342 + 8 * v142);
        v86.f64[0] = v170[4].f64[0];
        v100 = vsubq_f64(v100, v86);
        v171 = vsubq_f64(v167[2], v170[2]);
        v172 = (float64x2_t *)(v338 + 8 * v141);
        v171.f64[0] = v172[1].f64[0];
        v173 = (int8x16_t)vsubq_f64(v169, *v172);
        *(_QWORD *)&v174 = *(_OWORD *)&vsubq_f64(_Q5, v171);
        *(_QWORD *)&v175 = vextq_s8(v173, v173, 8uLL).u64[0];
        v176 = v118;
        v177 = v118 + 4 * v160;
        if ((*(double *)v173.i64 == 0.0 || fabs(*(double *)v173.i64) <= 0.00000001)
          && (v175 == 0.0 || fabs(v175) <= 0.00000001)
          && (v174 == 0.0 || fabs(v174) <= 0.00000001))
        {
          *(_DWORD *)(v177 + 8) = 0;
          *(_QWORD *)v177 = 0;
        }
        else
        {
          v325 = v175;
          v330 = v174;
          v320 = *(double *)v173.i64;
          sub_20E8BE424((uint64_t)memptr);
          LODWORD(v135) = v334;
          LODWORD(v134) = v337;
          _Q5.f64[1] = v347.f64[1];
          v161.f64[0] = v344 * v320 + v346 * v325 + v348 * v330;
          v162 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)memptr, v320), v345, v325), v347, v330));
          v163 = vmla_lane_f32(vmul_f32(v162, v162), (float32x2_t)vdup_lane_s32((int32x2_t)v162, 1), v162, 1);
          v164 = vcvt_hight_f32_f64((int32x2_t)v162, v161);
          *(float32x2_t *)&v161.f64[0] = vcvt_f32_f64(v161);
          *(float *)v161.f64 = 1.0
                             / sqrtf(vmla_f32(v163, *(float32x2_t *)&v161.f64[0], *(float32x2_t *)&v161.f64[0]).f32[0]);
          v165 = vmulq_f32(v164, vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v161.f64[0], 0)));
          *(_DWORD *)(v177 + 8) = v165.i32[2];
          *(_QWORD *)v177 = v165.i64[0];
        }
        v160 += v311;
        ++v158;
        v141 += v135;
        v142 += v134;
        --v159;
        v118 = v176;
      }
      while (v159);
    }
    v133 = v308 + 1;
    v125 = v296;
    v132 = v310 + v297;
    v120 = v311;
    v312 += v297;
    v138 = v306 + 1;
    LODWORD(v136) = v316;
    v130 = v298;
  }
  while (v308 != (_DWORD)v316);
  if (v299 != v290)
  {
    v309 = 0;
    v224 = v316 + 1;
    v225 = v297 * v299;
    v226 = v298;
    v294 = (v297 + v311) * v299;
    v227 = (2 * v316) | 1;
    v228 = v299;
    do
    {
      v229 = 0;
      v291 = v228;
      v292 = v227;
      if (v227 >= v295)
        v230 = v295;
      else
        v230 = v227;
      v305 = v125 * v230;
      v307 = v226 * v230;
      v231 = v228 + v289;
      v232 = v228 + v136;
      if (v228 + (int)v136 >= v295)
        v232 = v295;
      v233 = v232 * v125;
      v234 = v231 * v125;
      v235 = v232 * v226;
      v293 = v225;
      v313 = v231 * v226;
      v315 = v234;
      do
      {
        while (1)
        {
          v241 = v136 + v229;
          if ((int)v136 + (int)v229 >= v137)
            v241 = v300 - 1;
          v242 = v241 * v134;
          v243 = (float64x2_t *)(v342 + 8 * (v241 * v134 + v233));
          v244 = v243[2];
          v100.f64[0] = v243[4].f64[0];
          v245 = v241 * v135;
          v246 = (float64x2_t *)(v338 + 8 * (v245 + v235));
          _Q5.f64[0] = v246[1].f64[0];
          v247 = (float64x2_t *)(v342 + 8 * (v242 + v315));
          v86.f64[0] = v247[4].f64[0];
          v100 = vsubq_f64(v100, v86);
          v248 = vsubq_f64(v244, v247[2]);
          v249 = (float64x2_t *)(v338 + 8 * (v245 + v313));
          v248.f64[0] = v249[1].f64[0];
          v250 = (int8x16_t)vsubq_f64(*v246, *v249);
          *(_QWORD *)&v251 = *(_OWORD *)&vsubq_f64(_Q5, v248);
          *(_QWORD *)&v252 = vextq_s8(v250, v250, 8uLL).u64[0];
          v253 = v118 + 4 * v225;
          if ((*(double *)v250.i64 == 0.0 || fabs(*(double *)v250.i64) <= 0.00000001)
            && (v252 == 0.0 || fabs(v252) <= 0.00000001)
            && (v251 == 0.0 || fabs(v251) <= 0.00000001))
          {
            break;
          }
          v326 = v252;
          v331 = v251;
          v321 = *(double *)v250.i64;
          sub_20E8BE424((uint64_t)memptr);
          LODWORD(v135) = v334;
          LODWORD(v134) = v337;
          _Q5.f64[1] = v347.f64[1];
          v236.f64[0] = v344 * v321 + v346 * v326 + v348 * v331;
          v237 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)memptr, v321), v345, v326), v347, v331));
          v238 = vmla_lane_f32(vmul_f32(v237, v237), (float32x2_t)vdup_lane_s32((int32x2_t)v237, 1), v237, 1);
          v239 = vcvt_hight_f32_f64((int32x2_t)v237, v236);
          *(float32x2_t *)&v236.f64[0] = vcvt_f32_f64(v236);
          *(float *)v236.f64 = 1.0
                             / sqrtf(vmla_f32(v238, *(float32x2_t *)&v236.f64[0], *(float32x2_t *)&v236.f64[0]).f32[0]);
          v240 = vmulq_f32(v239, vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v236.f64[0], 0)));
          *(_DWORD *)(v253 + 8) = v240.i32[2];
          *(_QWORD *)v253 = v240.i64[0];
          ++v229;
          v225 += v311;
          if (v224 == v229)
            goto LABEL_220;
        }
        *(_DWORD *)(v253 + 8) = 0;
        *(_QWORD *)v253 = 0;
        ++v229;
        v225 += v311;
      }
      while (v224 != v229);
LABEL_220:
      v301 = v235;
      v303 = v233;
      if (v299 != v300)
      {
        v254 = 0;
        v255 = 0;
        v257 = (2 * v316) | 1;
        v256 = ~(_DWORD)v316 + v300;
        v258 = v294;
        do
        {
          while (1)
          {
            v264 = v257 >= v137 ? v300 - 1 : v257;
            v265 = v264 * v134;
            v266 = (float64x2_t *)(v342 + 8 * (v264 * v134 + v303));
            v267 = v266[2];
            v100.f64[0] = v266[4].f64[0];
            v268 = v264 * v135;
            v269 = (float64x2_t *)(v338 + 8 * (v268 + v301));
            _Q5.f64[0] = v269[1].f64[0];
            v270 = (float64x2_t *)(v342 + 8 * (v265 + v315));
            v271 = v270[2];
            v86.f64[0] = v270[4].f64[0];
            v272 = vsubq_f64(v100, v86);
            v273 = vsubq_f64(v267, v271);
            v274 = (float64x2_t *)(v338 + 8 * (v268 + v313));
            v271.f64[0] = v274[1].f64[0];
            v275 = vsubq_f64(*v269, *v274);
            v276 = vsubq_f64(_Q5, v271);
            v277 = (float64x2_t *)(v342 + 8 * (v305 + v254));
            v271.f64[0] = v277[4].f64[0];
            v278 = v277[3];
            v86 = v277[1];
            v279 = vsubq_f64(v273, v277[2]);
            v280 = (float64x2_t *)(v338 + 8 * (v307 + v255));
            v278.f64[0] = v280[1].f64[0];
            _Q5 = vsubq_f64(v276, v278);
            v281 = vsubq_f64(v275, *v280);
            v282 = (float64x2_t *)(v342 + 8 * (HIDWORD(v309) + v254));
            v86.f64[0] = v282[4].f64[0];
            v100 = vaddq_f64(vsubq_f64(v272, v271), v86);
            v283 = vaddq_f64(v279, v282[2]);
            v284 = (float64x2_t *)(v338 + 8 * (v309 + v255));
            v283.f64[0] = v284[1].f64[0];
            v285 = (int8x16_t)vaddq_f64(v281, *v284);
            *(_QWORD *)&v286 = *(_OWORD *)&vaddq_f64(_Q5, v283);
            *(_QWORD *)&v287 = vextq_s8(v285, v285, 8uLL).u64[0];
            v288 = v118 + 4 * v258;
            if ((*(double *)v285.i64 == 0.0 || fabs(*(double *)v285.i64) <= 0.00000001)
              && (v287 == 0.0 || fabs(v287) <= 0.00000001)
              && (v286 == 0.0 || fabs(v286) <= 0.00000001))
            {
              break;
            }
            v327 = v287;
            v332 = v286;
            v322 = *(double *)v285.i64;
            sub_20E8BE424((uint64_t)memptr);
            LODWORD(v135) = v334;
            LODWORD(v134) = v337;
            _Q5.f64[1] = v347.f64[1];
            v259.f64[0] = v344 * v322 + v346 * v327 + v348 * v332;
            v260 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)memptr, v322), v345, v327), v347, v332));
            v261 = vmla_lane_f32(vmul_f32(v260, v260), (float32x2_t)vdup_lane_s32((int32x2_t)v260, 1), v260, 1);
            v262 = vcvt_hight_f32_f64((int32x2_t)v260, v259);
            *(float32x2_t *)&v259.f64[0] = vcvt_f32_f64(v259);
            *(float *)v259.f64 = 1.0
                               / sqrtf(vmla_f32(v261, *(float32x2_t *)&v259.f64[0], *(float32x2_t *)&v259.f64[0]).f32[0]);
            v263 = vmulq_f32(v262, vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v259.f64[0], 0)));
            *(_DWORD *)(v288 + 8) = v263.i32[2];
            *(_QWORD *)v288 = v263.i64[0];
            v258 += v311;
            ++v257;
            v255 += v334;
            v254 += v337;
            if (!--v256)
              goto LABEL_203;
          }
          *(_DWORD *)(v288 + 8) = 0;
          *(_QWORD *)v288 = 0;
          v258 += v311;
          ++v257;
          v255 += v135;
          v254 += v134;
          --v256;
        }
        while (v256);
      }
LABEL_203:
      v228 = v291 + 1;
      v226 = v298;
      v225 = v293 + v297;
      v294 += v297;
      LODWORD(v309) = v309 + v298;
      v227 = v292 + 1;
      v125 = v296;
      HIDWORD(v309) += v296;
      LODWORD(v136) = v316;
    }
    while (v291 + 1 != v290);
  }
}

float32x4_t sub_20EEEA740@<Q0>(float32x2_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float32x4_t result@<Q0>, double a5@<D2>, double a6@<D4>, float32x2_t a7@<D7>)
{
  float32x2_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  _BOOL4 v22;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  uint64_t v27;
  float v29;
  float v30;
  float32x2_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x2_t v41;
  float v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  int8x16_t v48;
  float v49;
  int8x16_t v50;
  float v51;
  float v52;
  float v53;
  float v57;
  float v58;
  float32x4_t v59;
  float32x2_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63[3];

  v12 = a1[1];
  a7.i32[0] = a1[2].i32[0];
  v13 = a1[3];
  v7.i32[0] = a1[4].i32[0];
  v14 = a1[5];
  v8.i32[0] = a1[6].i32[0];
  LODWORD(a5) = *(_DWORD *)(a2 + 8);
  result.i64[0] = *(_QWORD *)a2;
  v15 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v12, COERCE_FLOAT(*(_QWORD *)a2)), v13, *(float32x2_t *)a2, 1), v14, *(float *)&a5);
  *(float32x2_t *)&v17.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a7, *(float32x2_t *)a2), v7, *(float32x2_t *)a2, 1), *(float32x2_t *)&a5, *(float32x2_t *)v8.i8);
  *(float32x2_t *)v9.f32 = a1[7];
  v9.i32[2] = a1[8].i32[0];
  v16 = vaddq_f32(v17, v9);
  LODWORD(a6) = *(_DWORD *)(a2 + 20);
  v17.i64[0] = *(_QWORD *)(a2 + 12);
  *(float32x2_t *)v18.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v12, v17.f32[0]), v13, *(float32x2_t *)v17.f32, 1), v14, *(float *)&a6);
  *(float32x2_t *)&v18.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a7, *(float32x2_t *)v17.f32), v7, *(float32x2_t *)v17.f32, 1), *(float32x2_t *)&a6, *(float32x2_t *)v8.i8);
  v19 = vaddq_f32(v9, v18);
  if (v16.f32[2] < 0.0)
  {
    if (v19.f32[2] < 0.0)
      goto LABEL_16;
    v20 = a1->f32[0];
    if (v16.f32[2] > a1->f32[0] && v19.f32[2] > v20)
      goto LABEL_16;
    goto LABEL_8;
  }
  v20 = a1->f32[0];
  if (v16.f32[2] > a1->f32[0])
  {
    if (v19.f32[2] > v20)
    {
LABEL_16:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 24) = 0;
      return result;
    }
LABEL_8:
    v22 = 0;
    if (v19.f32[2] < 0.0 || v19.f32[2] > v20)
      goto LABEL_12;
    goto LABEL_22;
  }
  v22 = sqrtf(vmla_lane_f32(vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.f32, 1), *(float32x2_t *)v16.f32, 1).f32[0]) < (float)((float)(v20 - v16.f32[2]) * a1->f32[1]);
  if (v19.f32[2] < 0.0 || v19.f32[2] > v20)
  {
LABEL_12:
    v24 = vsubq_f32(v19, v16);
    v26 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.f32, 1);
    v25 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    v26.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), v26, *(float32x2_t *)v24.f32, 1), v25, v25).f32[0]);
    if (!v22)
    {
LABEL_13:
      v27 = 0;
      goto LABEL_30;
    }
    goto LABEL_28;
  }
LABEL_22:
  v29 = sqrtf(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1), *(float32x2_t *)v19.f32, 1).f32[0]);
  v30 = (float)(v20 - v19.f32[2]) * a1->f32[1];
  if (v29 < v30 && v22)
  {
    *(_QWORD *)a3 = *(_QWORD *)a2;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(a3 + 12) = *(_QWORD *)(a2 + 12);
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(a3 + 24) = 1;
    return result;
  }
  v24 = vsubq_f32(v19, v16);
  v26 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.f32, 1);
  v32 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  v26.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), v26, *(float32x2_t *)v24.f32, 1), v32, v32).f32[0]);
  if (v22)
  {
LABEL_28:
    v63[0] = 0.0;
    goto LABEL_29;
  }
  if (v29 >= v30)
    goto LABEL_13;
  v63[0] = v26.f32[0];
LABEL_29:
  v27 = 1;
LABEL_30:
  v33 = (int8x16_t)vdivq_f32(v24, (float32x4_t)vdupq_lane_s32((int32x2_t)v26, 0));
  v34.i64[0] = 0;
  v34.i64[1] = LODWORD(v20);
  v35 = (int8x16_t)vsubq_f32(v16, v34);
  v48 = vextq_s8(v33, v33, 8uLL);
  __asm { FMOV            V21.2S, #-1.0 }
  v41 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v33.i8, 0), 0, *(float32x2_t *)v33.i8, 1), _D21, *(float32x2_t *)v48.i8);
  v42 = a1[9].f32[0];
  v43 = vmul_f32(v41, v41).f32[0] - v42;
  v44 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1);
  v45 = (float32x2_t)vextq_s8(v35, v35, 8uLL).u64[0];
  v46 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.i8, 0), 0, *(float32x2_t *)v35.i8, 1), _D21, v45);
  v47 = vmul_f32(v46, v41).f32[0];
  v41.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v35.i8), v44, *(float32x2_t *)v33.i8, 1), v45, *(float32x2_t *)v48.i8).f32[0];
  *(float *)v48.i32 = (float)(v47 - (float)(v42 * v41.f32[0])) + (float)(v47 - (float)(v42 * v41.f32[0]));
  *(float32x2_t *)v8.i8 = vmul_f32(v46, v46);
  v49 = *(float *)v8.i32
      - (float)(v42
              * vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), v44, *(float32x2_t *)v35.i8, 1), v45, v45).f32[0]);
  *(float *)v8.i32 = (float)(*(float *)v48.i32 * *(float *)v48.i32) + (float)(v49 * (float)(v43 * -4.0));
  if (*(float *)v8.i32 <= 0.000001)
    goto LABEL_55;
  *(float *)v8.i32 = sqrtf(*(float *)v8.i32);
  v50.i64[0] = 0x8000000080000000;
  v50.i64[1] = 0x8000000080000000;
  v51 = (float)(*(float *)v48.i32 + *(float *)vbslq_s8(v50, v8, v48).i32) * -0.5;
  v52 = v51 / v43;
  v53 = v49 / v51;
  if (v52 > 0.0 && v26.f32[0] > v52)
  {
    v63[v27++] = v52;
    if (v53 > 0.0 && v26.f32[0] > v53)
      goto LABEL_47;
LABEL_41:
    if (!v27)
      goto LABEL_55;
    goto LABEL_48;
  }
  if (v53 <= 0.0 || v26.f32[0] <= v53)
    goto LABEL_41;
LABEL_47:
  v63[v27++] = v53;
  if (!v27)
    goto LABEL_55;
LABEL_48:
  result.i32[2] = LODWORD(a5);
  v17.i32[2] = LODWORD(a6);
  if (v27 == 1)
  {
    if (v16.f32[2] < 0.0 || v19.f32[2] < 0.0)
    {
      v57 = (float)-v16.f32[2] / *(float *)&v33.i32[2];
      goto LABEL_58;
    }
LABEL_55:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return result;
  }
  if (v27 == 3)
  {
    std::__sort<std::__less<float,float> &,float *>();
    v57 = v63[2];
    v17.i64[0] = *(_QWORD *)(a2 + 12);
    v17.i32[2] = *(_DWORD *)(a2 + 20);
    result.i64[0] = *(_QWORD *)a2;
    result.i32[2] = *(_DWORD *)(a2 + 8);
  }
  else
  {
    v57 = v63[1];
  }
LABEL_58:
  if (v63[0] <= v57)
    v58 = v57;
  else
    v58 = v63[0];
  if (v63[0] <= v57)
    v57 = v63[0];
  v59 = vsubq_f32(v17, result);
  v60 = (float32x2_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
  v61 = vmulq_n_f32(v59, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.f32, 1), *(float32x2_t *)v59.f32, 1), v60, v60).f32[0]));
  v62 = vmlaq_n_f32(result, v61, v57);
  result = vmlaq_n_f32(result, v61, v58);
  *(_DWORD *)(a3 + 8) = v62.i32[2];
  *(_QWORD *)a3 = v62.i64[0];
  *(_DWORD *)(a3 + 20) = result.i32[2];
  *(_QWORD *)(a3 + 12) = result.i64[0];
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

uint64_t sub_20EEEAB40(float32x2_t *a1, uint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  __int128 v16;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  int8x16_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float v37;
  float32x4_t v38;
  int8x16_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v46;
  float v47;
  float v48;
  float v49;
  BOOL v50;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  BOOL v58;
  float32x2_t v60;
  int32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x2_t v64;
  float32x4_t v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v70;
  int8x16_t v71;
  float v72;
  float32x4_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float v77;
  float v78;
  int8x16_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x2_t *v85;
  float32x2_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int8x16_t v90;
  float32x2_t v91;
  float32x2_t v92;
  int8x16_t v93;
  float32x4_t v94;
  int8x16_t v95;
  float32x2_t v96;
  int8x16_t v97;
  unint64_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t v103;
  float32x4_t v104;
  __int128 v105;
  char *v106;
  uint64_t v107;
  void *v108;
  float v109;
  __int128 v110;
  int32x4_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  int32x4_t v116;
  float32x2_t v117;
  float32x2_t v118;
  int32x4_t v119;
  float32x2_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x2_t v123;
  int32x4_t v124;
  float32x2_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  __int128 v129;
  void *__p;
  float32x2_t *v131;
  float32x2_t v132;
  float v133;
  float v134;
  _DWORD v135[6];
  float v136;
  char v137;
  __int128 v138;
  char *v139;
  uint64_t v140;
  __int32 v141;
  char **v142;

  v19 = a1[1];
  v13.i32[0] = a1[2].i32[0];
  v20 = a1[3];
  v12.i32[0] = a1[4].i32[0];
  v21 = a1[5];
  v11.i32[0] = a1[6].i32[0];
  v15.i64[0] = *(_QWORD *)a2;
  v15.i32[2] = *(_DWORD *)(a2 + 8);
  *(float32x2_t *)v14.f32 = a1[7];
  v14.i32[2] = a1[8].i32[0];
  v22 = *(float32x2_t *)(a2 + 12);
  LODWORD(a5) = *(_DWORD *)(a2 + 20);
  v23 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v19, v22.f32[0]), v20, v22, 1), v21, *(float *)&a5);
  *(float32x2_t *)&v16 = vmla_f32(vmla_lane_f32(vmul_f32(v13, v22), v12, v22, 1), *(float32x2_t *)&a5, v11);
  *(float32x2_t *)v24.f32 = v23;
  v24.i64[1] = v16;
  v25 = (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1);
  v26 = vmla_f32(vmla_lane_f32(vmul_f32(v23, v23), v25, v23, 1), *(float32x2_t *)&v16, *(float32x2_t *)&v16).f32[0];
  if (v26 == 1.0 || (v26 >= 1.0 ? (v27 = v26 + -1.0) : (v27 = 1.0 - v26), v27 <= 0.000001))
  {
    *(float32x2_t *)v38.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v19, v15.f32[0]), v20, *(float32x2_t *)v15.f32, 1), v21, v15, 2);
    *(float32x2_t *)&v38.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v13, *(float32x2_t *)v15.f32), v12, *(float32x2_t *)v15.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), v11);
    v39 = (int8x16_t)vaddq_f32(v38, v14);
    v37 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v39.i8, v23), v25, *(float32x2_t *)v39.i8, 1), *(float32x2_t *)&v16, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)).f32[0];
    v28 = v24;
  }
  else
  {
    *(float *)&a6 = 1.0 / sqrtf(v26);
    v28 = vmulq_n_f32(v24, *(float *)&a6);
    a11 = COERCE_DOUBLE(vmul_f32(*(float32x2_t *)&v16, *(float32x2_t *)&a6));
    v29 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.f32, 1);
    v30 = vmla_lane_f32(vmul_f32(vmul_f32(v23, *(float32x2_t *)&a6), *(float32x2_t *)v28.f32), vmul_lane_f32(*(float32x2_t *)&a6, v23, 1), *(float32x2_t *)v28.f32, 1);
    v31 = (float32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
    v32 = vmla_f32(v30, v31, *(float32x2_t *)&a11).f32[0];
    if (v32 == 1.0 || (v32 >= 1.0 ? (v33 = v32 + -1.0) : (v33 = 1.0 - v32), v33 <= 0.000001))
    {
      *(float32x2_t *)v70.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v19, v15.f32[0]), v20, *(float32x2_t *)v15.f32, 1), v21, v15, 2);
      *(float32x2_t *)&v70.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v13, *(float32x2_t *)v15.f32), v12, *(float32x2_t *)v15.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), v11);
      v71 = (int8x16_t)vaddq_f32(v70, v14);
      v37 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v71.i8, *(float32x2_t *)v28.f32), v29, *(float32x2_t *)v71.i8, 1), v31, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)).f32[0];
    }
    else
    {
      v29.f32[0] = sqrtf(v32);
      v34 = (int8x16_t)vmulq_n_f32(v28, 1.0 / v29.f32[0]);
      *(float32x2_t *)v35.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v19, v15.f32[0]), v20, *(float32x2_t *)v15.f32, 1), v21, v15, 2);
      *(float32x2_t *)&v35.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v13, *(float32x2_t *)v15.f32), v12, *(float32x2_t *)v15.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), v11);
      v36 = (int8x16_t)vaddq_f32(v35, v14);
      a11 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)v34.i8, 1));
      v37 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v34.i8), *(float32x2_t *)&a11, *(float32x2_t *)v36.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)).f32[0];
      v28 = vdivq_f32(v28, (float32x4_t)vdupq_lane_s32((int32x2_t)v29, 0));
    }
  }
  v40 = 1.0 / (float)(a1->f32[1] * a1->f32[1]);
  v41 = v28.f32[0] / v28.f32[2];
  v42 = v40 - (float)(v41 * v41);
  v43 = fabs(v42);
  if ((LODWORD(v43) - 0x800000) >> 24 > 0x7E
    && (LODWORD(v43) - 1) > 0x7FFFFE
    && COERCE_INT(v40 - (float)(v41 * v41)) != 0)
  {
    goto LABEL_44;
  }
  v46 = vmuls_lane_f32(-2.0 * v28.f32[0], *(float32x2_t *)v28.f32, 1) / vmuls_lane_f32(v28.f32[2], v28, 2);
  if ((LODWORD(v46) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_44;
  v47 = v28.f32[1] / v28.f32[2];
  v48 = v40 - (float)(v47 * v47);
  v49 = fabs(v48);
  v50 = (LODWORD(v49) - 0x800000) >> 24 > 0x7E && (LODWORD(v49) - 1) > 0x7FFFFE;
  if (v50 && COERCE_INT(v40 - (float)(v47 * v47)) != 0)
    goto LABEL_44;
  v52 = v37 / v28.f32[2];
  v53 = a1->f32[0] + (float)(v37 / v28.f32[2]);
  v54 = (float)(v41 * -2.0) * v53;
  if (COERCE_INT(fabs(v54)) > 2139095039)
    goto LABEL_44;
  v55 = (float)(v47 * -2.0) * v53;
  if ((LODWORD(v55) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_44;
  v56 = (float)((float)(a1->f32[0] + a1->f32[0]) * v52) + (float)((float)(a1->f32[0] * a1->f32[0]) + (float)(v52 * v52));
  v57 = fabs(v56);
  v58 = (LODWORD(v57) - 0x800000) >> 24 > 0x7E && (LODWORD(v57) - 1) > 0x7FFFFE;
  if (v58 && LODWORD(v56) != 0)
    goto LABEL_44;
  *(float *)&a11 = v48 * (float)(v42 * -4.0);
  *(float *)v135 = v42;
  *(float *)&v135[1] = v46;
  *(float *)&v135[2] = v48;
  *(float *)&v135[3] = v54;
  *(float *)&v135[4] = v55;
  *(float *)&v135[5] = -v56;
  v136 = (float)(v46 * v46) + *(float *)&a11;
  v137 = 1;
  if (v136 < 0.0)
  {
    v109 = v26;
    v110 = v16;
    v112 = v23;
    v115 = v19;
    v118 = v20;
    v121 = v14;
    v123 = v21;
    v126 = v15;
    v128 = v24;
    sub_20EEEBAC8((uint64_t)v135, &v132, a11);
    if (*((_BYTE *)a3 + 8))
    {
      *(float32x2_t *)v61.i8 = a1[1];
      *(float32x2_t *)v62.i8 = a1[3];
      if (v109 == 1.0)
      {
        *(float32x2_t *)v63.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v115, v126.f32[0]), v118, *(float32x2_t *)v126.f32, 1), v123, v126, 2);
        *(float32x2_t *)&v63.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v13, *(float32x2_t *)v126.f32), v12, *(float32x2_t *)v126.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL), v11);
        v65 = vaddq_f32(v63, v121);
        v64 = (float32x2_t)vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
        v65.i64[1] = *((_QWORD *)&v110 + 1);
        v66 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v65.f32, v112), v25, *(float32x2_t *)v65.f32, 1), *(float32x2_t *)&v110, v64).f32[0];
      }
      else
      {
        if (v109 >= 1.0)
          v72 = v109 + -1.0;
        else
          v72 = 1.0 - v109;
        if (v72 <= 0.000001)
        {
          *(float32x2_t *)v82.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v115, v126.f32[0]), v118, *(float32x2_t *)v126.f32, 1), v123, v126, 2);
          *(float32x2_t *)&v82.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v13, *(float32x2_t *)v126.f32), v12, *(float32x2_t *)v126.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL), v11);
          v65 = vaddq_f32(v82, v121);
          v66 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v65.f32, v112), v25, *(float32x2_t *)v65.f32, 1), *(float32x2_t *)&v110, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)).f32[0];
        }
        else
        {
          v60.f32[0] = 1.0 / sqrtf(v109);
          v73 = vmulq_n_f32(v128, v60.f32[0]);
          v74 = vmul_f32(*(float32x2_t *)&v110, v60);
          v75 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.f32, 1);
          v76 = vmla_lane_f32(vmul_f32(vmul_f32(v112, v60), *(float32x2_t *)v73.f32), vmul_lane_f32(v60, v112, 1), *(float32x2_t *)v73.f32, 1);
          v65 = (float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL);
          v77 = vmla_f32(v76, *(float32x2_t *)v65.f32, v74).f32[0];
          if (v77 == 1.0 || (v77 >= 1.0 ? (v78 = v77 + -1.0) : (v78 = 1.0 - v77), v78 <= 0.000001))
          {
            *(float32x2_t *)v83.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v115, v126.f32[0]), v118, *(float32x2_t *)v126.f32, 1), v123, v126, 2);
            *(float32x2_t *)&v83.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v13, *(float32x2_t *)v126.f32), v12, *(float32x2_t *)v126.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL), v11);
            v84 = (int8x16_t)vaddq_f32(v83, v121);
            v128 = v73;
            v66 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v73.f32), v75, *(float32x2_t *)v84.i8, 1), *(float32x2_t *)v65.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL)).f32[0];
          }
          else
          {
            v65.f32[0] = sqrtf(v77);
            v79 = (int8x16_t)vmulq_n_f32(v73, 1.0 / v65.f32[0]);
            *(float32x2_t *)v80.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v115, v126.f32[0]), v118, *(float32x2_t *)v126.f32, 1), v123, v126, 2);
            *(float32x2_t *)&v80.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v13, *(float32x2_t *)v126.f32), v12, *(float32x2_t *)v126.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL), v11);
            v81 = (int8x16_t)vaddq_f32(v80, v121);
            v66 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v81.i8, *(float32x2_t *)v79.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.i8, 1), *(float32x2_t *)v81.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL)).f32[0];
            v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 0);
            v128 = vdivq_f32(v73, v65);
          }
        }
      }
      *(float32x2_t *)v65.f32 = a1[5];
      v116 = v62;
      v119 = v61;
      v61.i32[2] = a1[2].i32[0];
      v124 = v61;
      v127 = v65;
      v62.i32[2] = a1[4].i32[0];
      v65.i32[0] = a1[6].i32[0];
      v111 = v62;
      v113 = *(float32x2_t *)v65.f32;
      sub_20EEEB75C(&v132, 0x32uLL, (uint64_t)&__p);
      v85 = (float32x2_t *)__p;
      v86 = v131;
      v138 = 0uLL;
      v139 = 0;
      v87 = (char *)v131 - (_BYTE *)__p;
      if (v131 == __p)
      {
        v106 = 0;
        v105 = 0uLL;
      }
      else
      {
        if (v87 < 0)
          sub_20E867F44();
        v88 = v87 >> 3;
        v89 = (char *)operator new(12 * (v87 >> 3));
        v90 = (int8x16_t)vnegq_f32(v121);
        v91 = (float32x2_t)vtrn2q_s32(v124, v111).u64[0];
        v92 = (float32x2_t)vzip2q_s32(v124, v111).u64[0];
        v93 = (int8x16_t)v127;
        *(float32x2_t *)v94.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v119.i8, *(int32x2_t *)v116.i8), *(float *)v90.i32), v91, *(float32x2_t *)v121.f32, 1), v92, v121, 2);
        v95 = (int8x16_t)vdupq_lane_s32((int32x2_t)v91, 1);
        v96 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v90.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.f32, 1), *(float32x2_t *)v121.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL), v113);
        v97 = (int8x16_t)vdupq_lane_s32((int32x2_t)v91, 0);
        v93.i32[2] = v113.i32[0];
        v98 = vzip1q_s32(v119, v116).u64[0];
        v117 = (float32x2_t)vextq_s8(v97, v95, 0xCuLL).u64[0];
        v120 = (float32x2_t)v98;
        *(float32x2_t *)&v94.u32[2] = v96;
        v122 = v94;
        v125 = v92;
        *(_QWORD *)&v138 = v89;
        *((_QWORD *)&v138 + 1) = v89;
        v139 = &v89[12 * v88];
        v142 = (char **)&v138;
        v99.i32[1] = v128.i32[1];
        v99.f32[0] = -v128.f32[0];
        v100 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.f32, 1);
        *(float32x2_t *)v128.f32 = v99;
        v114 = (float32x2_t)vextq_s8(v93, v93, 8uLL).u64[0];
        do
        {
          v101 = vmul_f32(*v85, v99);
          v102 = vsub_f32(v101, (float32x2_t)vdup_lane_s32((int32x2_t)v101, 1));
          v102.f32[0] = (float)(v102.f32[0] - v66) / v128.f32[2];
          *(float32x2_t *)v103.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v120, COERCE_FLOAT(*v85)), v117, *v85, 1), v125, v102.f32[0]);
          *(float32x2_t *)&v103.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v127.f32, *v85), v100, *v85, 1), v102, v114);
          v104 = vaddq_f32(v122, v103);
          v141 = v104.i32[2];
          v140 = v104.i64[0];
          sub_20EEEB61C(&v142, &v140);
          ++v85;
          v99 = *(float32x2_t *)v128.f32;
        }
        while (v85 != v86);
        v105 = v138;
        v106 = v139;
      }
      v107 = *a3;
      v108 = *(void **)v107;
      if (*(_QWORD *)v107)
      {
        *(_QWORD *)(v107 + 8) = v108;
        v129 = v105;
        operator delete(v108);
        v105 = v129;
        *(_QWORD *)v107 = 0;
        *(_QWORD *)(v107 + 8) = 0;
        *(_QWORD *)(v107 + 16) = 0;
      }
      *(_OWORD *)v107 = v105;
      *(_QWORD *)(v107 + 16) = v106;
      if (__p)
      {
        v131 = (float32x2_t *)__p;
        operator delete(__p);
      }
    }
    v67 = COERCE_UNSIGNED_INT((float)(v133 * 3.1416) * v134);
    v68 = 0x100000000;
  }
  else
  {
LABEL_44:
    v67 = 0;
    v68 = 0;
  }
  return v68 | v67;
}

void sub_20EEEB2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;
  void *v31;

  v30 = *(void **)(v28 - 144);
  if (v30)
  {
    *(_QWORD *)(v28 - 136) = v30;
    operator delete(v30);
    v31 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v31 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v31);
  _Unwind_Resume(exception_object);
}

float sub_20EEEB2F0@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>)
{
  float v5;
  float32x4_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  unsigned __int8 v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  int32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x2_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float v27;
  int8x16_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  float result;
  int v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  float32x2_t v40;
  float32x2_t v41;
  float v42;
  float32x4_t v43;
  int v44;
  float32x4_t v45;

  a3.i64[0] = *(_QWORD *)(a1 + 12);
  a3.i32[2] = *(_DWORD *)(a1 + 20);
  a4.i64[0] = *(_QWORD *)a1;
  a4.i32[2] = *(_DWORD *)(a1 + 8);
  v5 = *(float *)(a1 + 24);
  v43 = vmlaq_n_f32(a4, a3, *(float *)(a1 + 28));
  v44 = *(_DWORD *)(a1 + 28);
  v6 = vsubq_f32(v43, a4);
  v7 = (float32x2_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.f32, 1), *(float32x2_t *)v6.f32, 1), v7, v7);
  v9 = vnegq_f32(v6);
  v10 = vmulq_n_f32(v9, 1.0 / sqrtf(v8.f32[0]));
  v11 = atomic_load((unsigned __int8 *)&qword_254A60068);
  v45 = v10;
  if ((v11 & 1) == 0)
  {
    v42 = *(float *)(a1 + 24);
    v33 = __cxa_guard_acquire(&qword_254A60068);
    v10 = v45;
    v5 = v42;
    if (v33)
    {
      dword_254A60060 = 1065098332;
      __cxa_guard_release(&qword_254A60068);
      v10 = v45;
      v5 = v42;
    }
  }
  v9.i32[0] = v10.i32[2];
  v41 = *(float32x2_t *)v9.f32;
  v8.i32[0] = v10.i32[1];
  v40 = v8;
  if (fabsf(v10.f32[2]) >= *(float *)&dword_254A60060)
  {
    v19 = (int32x4_t)vmulq_f32(v10, (float32x4_t)xmmword_210389930);
    v20 = (int8x16_t)vmulq_f32(v10, (float32x4_t)xmmword_210389A10);
    v21 = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v20, v20, 0xCuLL), v20, 8uLL));
    v22 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
    v23 = (int32x4_t)vmulq_n_f32(v21, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.f32, 1), *(float32x2_t *)v21.f32, 1), v22, v22).f32[0]));
    v24 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v10, (int8x16_t)v10, 0xCuLL), (int8x16_t)v10, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v23, (int8x16_t)v23, 0xCuLL), (int8x16_t)v23, 8uLL));
    v25 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    v26 = vmulq_n_f32(v24, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.f32, 1), *(float32x2_t *)v24.f32, 1), v25, v25).f32[0]));
    v37 = v26.i32[2];
    v35 = v26.i32[1];
    v38 = v26.i32[0];
    v36 = v23.i32[2];
    v34 = v23.i32[1];
    v39 = v23.i32[0];
  }
  else
  {
    v12 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v10, (int8x16_t)v10, 0xCuLL), (int8x16_t)v10, 8uLL);
    v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL);
    v14 = vaddq_f32(vmulq_f32(v12, (float32x4_t)xmmword_210389A10), vmulq_f32(v13, (float32x4_t)xmmword_2102DD700));
    v15 = (float32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
    v16 = (int32x4_t)vmulq_n_f32(v14, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.f32, 1), *(float32x2_t *)v14.f32, 1), v15, v15).f32[0]));
    v17 = vmlsq_f32(vmulq_f32(v13, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v16, (int8x16_t)v16, 0xCuLL), (int8x16_t)v16, 8uLL)), v12, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL));
    v14.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    v18 = vmulq_n_f32(v17, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1), *(float32x2_t *)v17.f32, 1), *(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32).f32[0]));
    v38 = v16.i32[0];
    v34 = v18.i32[1];
    v39 = v18.i32[0];
    v36 = v18.i32[2];
    v37 = v16.i32[2];
    v35 = v16.i32[1];
  }
  v27 = tanf((float)(v5 * 0.5) * 0.017453);
  v28 = (int8x16_t)vnegq_f32(v43);
  *(float32x2_t *)&v29 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(v38, v39), *(float *)v28.i32), (float32x2_t)__PAIR64__(v35, v34), *(float32x2_t *)v43.f32, 1), (float32x2_t)__PAIR64__(v37, v36), v43, 2);
  *((_QWORD *)&v29 + 1) = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v28.i8), v40, *(float32x2_t *)v43.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), v41).u32[0]);
  v28.i64[0] = __PAIR64__(v35, v34);
  v28.i64[1] = v40.u32[0];
  *(_QWORD *)&v30 = __PAIR64__(v38, v39);
  *((_QWORD *)&v30 + 1) = v45.u32[0];
  *(_QWORD *)&v31 = __PAIR64__(v37, v36);
  *((_QWORD *)&v31 + 1) = v41.u32[0];
  *(_DWORD *)a2 = v44;
  *(float *)(a2 + 4) = v27;
  *(_OWORD *)(a2 + 8) = v30;
  *(int8x16_t *)(a2 + 24) = v28;
  *(_OWORD *)(a2 + 40) = v31;
  *(_OWORD *)(a2 + 56) = v29;
  result = *((float *)&v29 + 3) / (float)((float)(v27 * v27) + *((float *)&v29 + 3));
  *(float *)(a2 + 72) = result;
  return result;
}

char ***sub_20EEEB61C(char ***a1, uint64_t *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v9 = *v4;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 2);
    v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555)
      sub_20E867F44();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v9) >> 2);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0xAAAAAAAAAAAAAAALL)
      v13 = 0x1555555555555555;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0x1555555555555555)
        sub_20E877A38();
      v14 = (char *)operator new(12 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[12 * v10];
    *(_QWORD *)v15 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    v8 = v15 + 12;
    if (v6 != v9)
    {
      do
      {
        v16 = *(_QWORD *)(v6 - 12);
        v6 -= 12;
        v17 = *((_DWORD *)v6 + 2);
        *(_QWORD *)(v15 - 12) = v16;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v17;
      }
      while (v6 != v9);
      v6 = *v4;
    }
    *v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[12 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    *((_DWORD *)v6 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v6 = v7;
    v8 = v6 + 12;
  }
  v4[1] = v8;
  return a1;
}

void sub_20EEEB75C(float32x2_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float32x2_t *v4;
  float v5;
  float v6;
  __float2 v7;
  float32x2_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  float32x2_t *v14;
  float32x2_t *v15;
  unint64_t v16;
  float32x2_t *v17;
  float32x2_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  float32x2_t *v23;
  uint64_t v24;
  __int128 v25;
  __float2 v26;
  uint64_t v27;
  char *v28;
  float32x2_t v29;
  float32x2_t *v30;
  char *v31;
  float32x2_t v33;
  float32x2_t *v34;
  float32x2_t *v35;
  __int128 v36;
  char *v37;
  float32x2_t v38;
  void **v39;

  v4 = 0;
  v34 = 0;
  v35 = 0;
  v5 = 6.2832 / (float)a2;
  v6 = 0.0;
  do
  {
    while (1)
    {
      v7 = __sincosf_stret(v6);
      v8 = vmul_f32(a1[1], (float32x2_t)__PAIR64__(LODWORD(v7.__sinval), LODWORD(v7.__cosval)));
      if (v4 >= v35)
        break;
      *v4++ = vadd_f32(v8, *a1);
      v6 = v5 + v6;
      if (v6 >= 6.2832)
        goto LABEL_33;
    }
    v9 = v4 - v34;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_20E969238();
    v11 = (char *)v35 - (char *)v34;
    if (((char *)v35 - (char *)v34) >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = (float32x2_t *)&v13[8 * v9];
    *v14 = vadd_f32(v8, *a1);
    v15 = v14 + 1;
    if (v4 != v34)
    {
      v16 = (char *)v4 - (char *)v34 - 8;
      if (v16 >= 0x168)
      {
        v19 = ((char *)&v4[-1] - (char *)v34) & 0xFFFFFFFFFFFFFFF8;
        if (&v13[(char *)v4 - (char *)v34 - 8 - v19] > &v13[(char *)v4 - (char *)v34 - 8])
        {
          v17 = v4;
        }
        else if ((float32x2_t *)((char *)&v4[-1] - v19) > &v4[-1])
        {
          v17 = v4;
        }
        else if ((unint64_t)((char *)v34 - v13) >= 0x20)
        {
          v20 = (v16 >> 3) + 1;
          v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          v17 = &v4[v21 / 0xFFFFFFFFFFFFFFF8];
          v14 = (float32x2_t *)((char *)v14 - v21);
          v22 = &v13[8 * v9 - 16];
          v23 = v4 - 2;
          v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v25 = *(_OWORD *)v23->f32;
            *(v22 - 1) = *(_OWORD *)v23[-2].f32;
            *v22 = v25;
            v22 -= 2;
            v23 -= 4;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_18;
        }
        else
        {
          v17 = v4;
        }
      }
      else
      {
        v17 = v4;
      }
      do
      {
        v18 = v17[-1];
        --v17;
        v14[-1] = v18;
        --v14;
      }
      while (v17 != v34);
LABEL_18:
      v4 = v34;
    }
    v34 = v14;
    v35 = (float32x2_t *)&v13[8 * v12];
    if (v4)
      operator delete(v4);
    v4 = v15;
    v6 = v5 + v6;
  }
  while (v6 < 6.2832);
LABEL_33:
  v26 = __sincosf_stret(a1[2].f32[0]);
  v36 = 0uLL;
  v37 = 0;
  v27 = (char *)v4 - (char *)v34;
  if (v4 == v34)
  {
    *(_OWORD *)a3 = 0u;
    *(_QWORD *)(a3 + 16) = 0;
    if (v34)
      goto LABEL_38;
  }
  else
  {
    if (v27 < 0)
      sub_20E969238();
    v28 = (char *)operator new((char *)v4 - (char *)v34);
    v29.f32[0] = -v26.__sinval;
    v29.i32[1] = LODWORD(v26.__cosval);
    v33 = v29;
    *(_QWORD *)&v36 = v28;
    *((_QWORD *)&v36 + 1) = v28;
    v37 = &v28[8 * (v27 >> 3)];
    v39 = (void **)&v36;
    v30 = v34;
    do
    {
      v38 = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v26.__sinval), LODWORD(v26.__cosval)), COERCE_FLOAT(*v30)), v33, *v30, 1);
      sub_20EEE8140(&v39, &v38);
      ++v30;
    }
    while (v30 != v4);
    v31 = v37;
    *(_OWORD *)a3 = v36;
    *(_QWORD *)(a3 + 16) = v31;
    if (v34)
LABEL_38:
      operator delete(v34);
  }
}

void sub_20EEEBA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void *v20;

  if (__p)
  {
    operator delete(__p);
    if (!v20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v20)
  {
    goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

float sub_20EEEBAC8@<S0>(uint64_t a1@<X0>, float32x2_t *a2@<X8>, double a3@<D7>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;
  float v13;
  float32x2_t v14;
  double v15;

  v4 = *(float *)(a1 + 8);
  v5 = *(float *)(a1 + 12);
  v7 = *(float *)a1;
  v6 = *(float *)(a1 + 4);
  v8 = *(float *)(a1 + 20);
  LODWORD(a3) = *(_DWORD *)(a1 + 24);
  v9 = *(float *)(a1 + 16);
  v10 = sqrtf((float)((float)(*(float *)a1 - v4) * (float)(*(float *)a1 - v4)) + (float)(v6 * v6));
  if (v6 == 0.0)
    goto LABEL_6;
  v11 = 0.0 - v6;
  if (v6 >= 0.0)
    v11 = *(float *)(a1 + 4);
  if (v11 <= 0.000001)
  {
LABEL_6:
    result = 0.0;
    if (v7 > v4)
      result = 1.5708;
  }
  else
  {
    v15 = a3;
    result = atanf((float)((float)(v4 - v7) - v10) / v6);
    a3 = v15;
  }
  v13 = (float)((float)((float)(v9 * (float)(v7 * v9)) + (float)(v5 * (float)(v4 * v5))) - (float)(v9 * (float)(v5 * v6)))
      + (float)(*(float *)&a3 * v8);
  v14.f32[0] = (float)(v7 + v4) + v10;
  a2->f32[0] = (float)((float)((float)(v4 + v4) * v5) - (float)(v9 * v6)) / *(float *)&a3;
  a2->f32[1] = (float)((float)((float)(v7 + v7) * v9) - (float)(v5 * v6)) / *(float *)&a3;
  v14.f32[1] = (float)(v7 + v4) - v10;
  a2[1] = vdiv_f32(vneg_f32(vsqrt_f32(vmul_n_f32(v14, v13 + v13))), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  a2[2].f32[0] = result;
  return result;
}

double sub_20EEEBC0C(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  char *i;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t **v29;
  void *v30;
  double result;
  __int128 v32;
  char *v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  __int128 v37;
  int v38;

  v2 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(uint64_t **)a1;
    v3 = *(uint64_t **)(a1 + 8);
    v5 = ((uint64_t)v3 - *(_QWORD *)a1) >> 6;
    if (!*(_BYTE *)(a1 + 144))
    {
      v6 = 0;
      v7 = 0;
      goto LABEL_7;
    }
LABEL_6:
    v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 2);
    v6 = 1;
    goto LABEL_7;
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v5 = 0;
    v4 = *(uint64_t **)a1;
    v3 = *(uint64_t **)(a1 + 8);
    goto LABEL_6;
  }
  if (!*(_BYTE *)(a1 + 112))
    return result;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v4 = *(uint64_t **)a1;
  v3 = *(uint64_t **)(a1 + 8);
LABEL_7:
  v32 = 0uLL;
  v33 = 0;
  v8 = v7 + v5;
  if (v7 + v5)
  {
    if (v8 > 0x4EC4EC4EC4EC4ECLL)
      sub_20E867F44();
    *(_QWORD *)&v32 = operator new(52 * v8);
    *((_QWORD *)&v32 + 1) = v32;
    v33 = (char *)(v32 + 52 * v8);
  }
  if (v2)
  {
    sub_20EEEBFB4((char **)&v32, v4, v3, 0);
    v6 = *(unsigned __int8 *)(a1 + 144);
  }
  if (v6)
  {
    v9 = *(uint64_t **)(a1 + 120);
    v10 = *(uint64_t **)(a1 + 128);
    if (v9 != v10)
    {
      v11 = (char *)*((_QWORD *)&v32 + 1);
      do
      {
        while (1)
        {
          v34 = *v9;
          v35 = *((_DWORD *)v9 + 2);
          v14 = *(_OWORD *)((char *)v9 + 28);
          v36 = *(_OWORD *)((char *)v9 + 12);
          v37 = v14;
          v38 = *((_DWORD *)v9 + 11);
          if (v11 >= v33)
            break;
          v12 = *v9;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v9 + 2);
          *(_QWORD *)v11 = v12;
          v13 = v36;
          LODWORD(v12) = v38;
          *(_OWORD *)(v11 + 28) = v37;
          *(_OWORD *)(v11 + 12) = v13;
          *(_QWORD *)(v11 + 44) = v12;
          v11 += 52;
          *((_QWORD *)&v32 + 1) = v11;
          v9 = (uint64_t *)((char *)v9 + 52);
          if (v9 == v10)
            goto LABEL_29;
        }
        v15 = (char *)v32;
        v16 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v11[-v32] >> 2);
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) > 0x4EC4EC4EC4EC4ECLL)
          sub_20E867F44();
        if (0x9D89D89D89D89D8ALL * ((uint64_t)&v33[-v32] >> 2) > v17)
          v17 = 0x9D89D89D89D89D8ALL * ((uint64_t)&v33[-v32] >> 2);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v33[-v32] >> 2)) >= 0x276276276276276)
          v18 = 0x4EC4EC4EC4EC4ECLL;
        else
          v18 = v17;
        if (v18 > 0x4EC4EC4EC4EC4ECLL)
          sub_20E877A38();
        v19 = (char *)operator new(52 * v18);
        v20 = *v9;
        v21 = &v19[52 * v16];
        *((_DWORD *)v21 + 2) = *((_DWORD *)v9 + 2);
        *(_QWORD *)v21 = v20;
        v22 = v37;
        *(_OWORD *)(v21 + 12) = v36;
        *(_OWORD *)(v21 + 28) = v22;
        *((_DWORD *)v21 + 11) = v38;
        *((_DWORD *)v21 + 12) = 0;
        for (i = v21; v11 != v15; *((_DWORD *)i + 12) = *((_DWORD *)v11 + 12))
        {
          v24 = *(_QWORD *)(v11 - 52);
          v11 -= 52;
          v25 = *((_DWORD *)v11 + 2);
          *(_QWORD *)(i - 52) = v24;
          i -= 52;
          *((_DWORD *)i + 2) = v25;
          v26 = *(_OWORD *)(v11 + 12);
          v27 = *(_OWORD *)(v11 + 28);
          *((_DWORD *)i + 11) = *((_DWORD *)v11 + 11);
          *(_OWORD *)(i + 28) = v27;
          *(_OWORD *)(i + 12) = v26;
        }
        v11 = v21 + 52;
        *(_QWORD *)&v32 = i;
        *((_QWORD *)&v32 + 1) = v21 + 52;
        v33 = &v19[52 * v18];
        if (v15)
          operator delete(v15);
        *((_QWORD *)&v32 + 1) = v11;
        v9 = (uint64_t *)((char *)v9 + 52);
      }
      while (v9 != v10);
    }
  }
LABEL_29:
  if (*(_BYTE *)(a1 + 112) && *(_QWORD *)(a1 + 104))
  {
    v28 = 0;
    do
    {
      v29 = *(uint64_t ***)(*(_QWORD *)(a1 + 64)
                         + 16
                         * ((v28 + *(_QWORD *)(a1 + 88))
                          % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 4)));
      sub_20EEEBFB4((char **)&v32, *v29, v29[1], 1);
      ++v28;
    }
    while (v28 != *(_QWORD *)(a1 + 104));
  }
  if (*(_BYTE *)(a1 + 176))
  {
    v30 = *(void **)(a1 + 152);
    if (v30)
    {
      *(_QWORD *)(a1 + 160) = v30;
      operator delete(v30);
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = 0;
    }
    result = *(double *)&v32;
    *(_OWORD *)(a1 + 152) = v32;
    *(_QWORD *)(a1 + 168) = v33;
  }
  else
  {
    result = *(double *)&v32;
    *(_OWORD *)(a1 + 152) = v32;
    *(_QWORD *)(a1 + 168) = v33;
    *(_BYTE *)(a1 + 176) = 1;
  }
  return result;
}

void sub_20EEEBF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EEEBFB4(char **a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t *v6;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *i;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;

  if (a2 != a3)
  {
    v6 = a2;
    v8 = a1[1];
    do
    {
      while (1)
      {
        v24 = *(_OWORD *)((char *)v6 + 12);
        v25 = *(_OWORD *)((char *)v6 + 28);
        v26 = *((_DWORD *)v6 + 11);
        v10 = (unint64_t)a1[2];
        if ((unint64_t)v8 >= v10)
          break;
        v9 = *v6;
        *((_DWORD *)v8 + 2) = *((_DWORD *)v6 + 2);
        *(_QWORD *)v8 = v9;
        *(_OWORD *)(v8 + 28) = v25;
        *(_OWORD *)(v8 + 12) = v24;
        *((_DWORD *)v8 + 11) = v26;
        *((_DWORD *)v8 + 12) = a4;
        v8 += 52;
        a1[1] = v8;
        v6 += 8;
        if (v6 == a3)
          return;
      }
      v11 = *a1;
      v12 = 0x4EC4EC4EC4EC4EC5 * ((v8 - *a1) >> 2);
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) > 0x4EC4EC4EC4EC4ECLL)
        sub_20E867F44();
      v14 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v10 - (_QWORD)v11) >> 2);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x276276276276276)
        v15 = 0x4EC4EC4EC4EC4ECLL;
      else
        v15 = v13;
      if (v15 > 0x4EC4EC4EC4EC4ECLL)
        sub_20E877A38();
      v16 = 52 * v15;
      v17 = (char *)operator new(52 * v15);
      v18 = &v17[52 * v12];
      *(_QWORD *)v18 = *v6;
      *((_DWORD *)v18 + 2) = *((_DWORD *)v6 + 2);
      *(_OWORD *)(v18 + 12) = v24;
      *(_OWORD *)(v18 + 28) = v25;
      *((_DWORD *)v18 + 11) = v26;
      *((_DWORD *)v18 + 12) = a4;
      for (i = v18; v8 != v11; *((_DWORD *)i + 12) = *((_DWORD *)v8 + 12))
      {
        v20 = *(_QWORD *)(v8 - 52);
        v8 -= 52;
        v21 = *((_DWORD *)v8 + 2);
        *(_QWORD *)(i - 52) = v20;
        i -= 52;
        *((_DWORD *)i + 2) = v21;
        v22 = *(_OWORD *)(v8 + 12);
        v23 = *(_OWORD *)(v8 + 28);
        *((_DWORD *)i + 11) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(i + 28) = v23;
        *(_OWORD *)(i + 12) = v22;
      }
      v8 = v18 + 52;
      *a1 = i;
      a1[1] = v18 + 52;
      a1[2] = &v17[v16];
      if (v11)
        operator delete(v11);
      a1[1] = v8;
      v6 += 8;
    }
    while (v6 != a3);
  }
}

uint64_t sub_20EEEC1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  float64_t *v6;
  float64_t *v7;
  float64x2_t v8;
  int64x2_t v9;
  float64x2_t v13;
  float64x2_t v14;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  char *v23;
  int8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  float64_t *v27;
  float64_t *v28;
  unint64_t v29;
  float64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  void **v46;
  char *v47;
  unint64_t v49;
  uint64_t v51;
  float v52;
  float v53;
  _BOOL8 v54;
  unint64_t v55;
  unint64_t v56;
  size_t prime;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  float32x4_t v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v7 = (float64_t *)(a1 + 16);
  v6 = *(float64_t **)(a1 + 16);
  if (!v6)
  {
    if (*(_QWORD *)(a2 + 24))
      goto LABEL_44;
    return 0;
  }
  v8.f64[0] = *(float64_t *)(a3 + 16);
  v9 = *(int64x2_t *)(a3 + 32);
  _D3 = *(_QWORD *)(a3 + 80);
  _D5 = *(double *)(a3 + 112);
  _Q6 = *(float64x2_t *)(a3 + 96);
  v13 = vnegq_f64(_Q6);
  _Q1 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v9);
  v8.f64[1] = *(float64_t *)(a3 + 48);
  v14 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v9), v13.f64[0]), _Q1, _Q6, 1), v8, _D5, 0);
  _Q0 = vmulq_f64(*(float64x2_t *)(a3 + 64), v13);
  _Q1.f64[0] = *(float64_t *)(a3 + 72);
  __asm
  {
    FMLS            D0, D1, V6.D[1]
    FMLS            D0, D3, V5.D[0]
  }
  v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v14), _Q0);
  v3 = *(_QWORD *)(a1 + 24);
  v21.i64[0] = 0x3F0000003F000000;
  v21.i64[1] = 0x3F0000003F000000;
  v76 = v20;
  do
  {
    _Q0.f64[0] = v6[4];
    LODWORD(_Q0.f64[1]) = *((_DWORD *)v6 + 10);
    _Q1.f64[0] = *(float64_t *)((char *)v6 + 44);
    LODWORD(_Q1.f64[1]) = *((_DWORD *)v6 + 13);
    _Q0 = (float64x2_t)vsubq_f32(vmulq_f32(vaddq_f32((float32x4_t)_Q0, (float32x4_t)_Q1), v21), v20);
    v22 = (float32x2_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
    v23 = *(char **)v6;
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&_Q0.f64[0], *(float32x2_t *)&_Q0.f64[0]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&_Q0.f64[0], 1), *(float32x2_t *)&_Q0.f64[0], 1), v22, v22).f32[0] <= 100.0)goto LABEL_4;
    v24 = *(int8x8_t *)(a1 + 8);
    v25 = *((_QWORD *)v6 + 1);
    v26 = (uint8x8_t)vcnt_s8(v24);
    v26.i16[0] = vaddlv_u8(v26);
    if (v26.u32[0] > 1uLL)
    {
      if (v25 >= *(_QWORD *)&v24)
        v25 %= *(_QWORD *)&v24;
    }
    else
    {
      v25 &= *(_QWORD *)&v24 - 1;
    }
    v27 = *(float64_t **)(*(_QWORD *)a1 + 8 * v25);
    do
    {
      v28 = v27;
      v27 = *(float64_t **)v27;
    }
    while (v27 != v6);
    if (v28 == v7)
      goto LABEL_134;
    v29 = *((_QWORD *)v28 + 1);
    if (v26.u32[0] > 1uLL)
    {
      if (v29 >= *(_QWORD *)&v24)
        v29 %= *(_QWORD *)&v24;
    }
    else
    {
      v29 &= *(_QWORD *)&v24 - 1;
    }
    v30 = *v6;
    if (v29 != v25)
    {
LABEL_134:
      if (v23)
      {
        v31 = *((_QWORD *)v23 + 1);
        if (v26.u32[0] > 1uLL)
        {
          if (v31 >= *(_QWORD *)&v24)
            v31 %= *(_QWORD *)&v24;
        }
        else
        {
          v31 &= *(_QWORD *)&v24 - 1;
        }
        v30 = *v6;
        if (v31 == v25)
        {
LABEL_26:
          v32 = *(_QWORD *)(*(_QWORD *)&v30 + 8);
          if (v26.u32[0] > 1uLL)
          {
            if (v32 >= *(_QWORD *)&v24)
              v32 %= *(_QWORD *)&v24;
          }
          else
          {
            v32 &= *(_QWORD *)&v24 - 1;
          }
          if (v32 != v25)
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v28;
            v30 = *v6;
          }
          goto LABEL_32;
        }
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = 0;
      v30 = *v6;
    }
    if (v30 != 0.0)
      goto LABEL_26;
LABEL_32:
    *v28 = v30;
    *v6 = 0.0;
    --*(_QWORD *)(a1 + 24);
    v33 = (std::__shared_weak_count *)*((_QWORD *)v6 + 8);
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    operator delete(v6);
    v20 = v76;
    v21.i64[0] = 0x3F0000003F000000;
    v21.i64[1] = 0x3F0000003F000000;
LABEL_4:
    v6 = (float64_t *)v23;
  }
  while (v23);
  if (v3 <= *(_QWORD *)(a1 + 24) && *(_QWORD *)(a2 + 24) == 0)
    return 0;
LABEL_44:
  v38 = *(uint64_t **)(a2 + 16);
  v37 = 1;
  if (v38)
  {
    while (1)
    {
      v77 = *((_OWORD *)v38 + 1);
      v78 = v38[4];
      v79 = *((_DWORD *)v38 + 10);
      v80 = *(uint64_t *)((char *)v38 + 44);
      v81 = *((_DWORD *)v38 + 13);
      v39 = (std::__shared_weak_count *)v38[8];
      v82 = v38[7];
      v83 = v39;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v42 = sub_2102322B4((unsigned __int8 *)&v77);
      v43 = v42;
      v44 = *(_QWORD *)(a1 + 8);
      if (v44)
      {
        v45 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
        v45.i16[0] = vaddlv_u8(v45);
        if (v45.u32[0] > 1uLL)
        {
          v3 = v42;
          if (v42 >= v44)
            v3 = v42 % v44;
        }
        else
        {
          v3 = (v44 - 1) & v42;
        }
        v46 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
        if (v46)
        {
          v47 = (char *)*v46;
          if (*v46)
          {
            if (v45.u32[0] < 2uLL)
            {
              while (1)
              {
                v51 = *((_QWORD *)v47 + 1);
                if (v51 == v42)
                {
                  if (*((_QWORD *)v47 + 2) == (_QWORD)v77 && *((_QWORD *)v47 + 3) == *((_QWORD *)&v77 + 1))
                    goto LABEL_116;
                }
                else if ((v51 & (v44 - 1)) != v3)
                {
                  goto LABEL_76;
                }
                v47 = *(char **)v47;
                if (!v47)
                  goto LABEL_76;
              }
            }
            do
            {
              v49 = *((_QWORD *)v47 + 1);
              if (v49 == v42)
              {
                if (*((_QWORD *)v47 + 2) == (_QWORD)v77 && *((_QWORD *)v47 + 3) == *((_QWORD *)&v77 + 1))
                  goto LABEL_116;
              }
              else
              {
                if (v49 >= v44)
                  v49 %= v44;
                if (v49 != v3)
                  break;
              }
              v47 = *(char **)v47;
            }
            while (v47);
          }
        }
      }
LABEL_76:
      v47 = (char *)operator new(0x48uLL);
      *(_QWORD *)v47 = 0;
      *((_QWORD *)v47 + 1) = v43;
      *((_OWORD *)v47 + 1) = v77;
      *((_OWORD *)v47 + 2) = 0u;
      *((_OWORD *)v47 + 3) = 0u;
      *((_QWORD *)v47 + 8) = 0;
      v52 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v53 = *(float *)(a1 + 32);
      if (v44 && (float)(v53 * (float)v44) >= v52)
        goto LABEL_105;
      v54 = v44 < 3 || (v44 & (v44 - 1)) != 0;
      v55 = v54 | (2 * v44);
      v56 = vcvtps_u32_f32(v52 / v53);
      if (v55 <= v56)
        prime = v56;
      else
        prime = v55;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v44 = *(_QWORD *)(a1 + 8);
      }
      if (prime > v44)
        goto LABEL_89;
      if (prime < v44)
      {
        v58 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v44 < 3 || (v59 = (uint8x8_t)vcnt_s8((int8x8_t)v44), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
        {
          v58 = std::__next_prime(v58);
        }
        else
        {
          v60 = 1 << -(char)__clz(v58 - 1);
          if (v58 >= 2)
            v58 = v60;
        }
        if (prime <= v58)
          prime = v58;
        if (prime < v44)
LABEL_89:
          sub_20E8D2B3C(a1, prime);
      }
      v44 = *(_QWORD *)(a1 + 8);
      v61 = v44 - 1;
      if ((v44 & (v44 - 1)) == 0)
      {
        v3 = v61 & v43;
        v62 = *(_QWORD *)a1;
        v63 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v61 & v43));
        if (v63)
          goto LABEL_106;
        goto LABEL_108;
      }
      if (v43 < v44)
        break;
      v3 = v43 % v44;
      v62 = *(_QWORD *)a1;
      v63 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v43 % v44));
      if (v63)
      {
LABEL_106:
        *(_QWORD *)v47 = *v63;
LABEL_114:
        *v63 = v47;
        goto LABEL_115;
      }
LABEL_108:
      *(float64_t *)v47 = *v7;
      *(_QWORD *)v7 = v47;
      *(_QWORD *)(v62 + 8 * v3) = v7;
      if (*(_QWORD *)v47)
      {
        v64 = *(_QWORD *)(*(_QWORD *)v47 + 8);
        if ((v44 & (v44 - 1)) != 0)
        {
          if (v64 >= v44)
            v64 %= v44;
        }
        else
        {
          v64 &= v44 - 1;
        }
        v63 = (_QWORD *)(*(_QWORD *)a1 + 8 * v64);
        goto LABEL_114;
      }
LABEL_115:
      ++*(_QWORD *)(a1 + 24);
LABEL_116:
      *((_DWORD *)v47 + 10) = v79;
      *((_QWORD *)v47 + 4) = v78;
      *(_QWORD *)(v47 + 44) = v80;
      *((_DWORD *)v47 + 13) = v81;
      v66 = v82;
      v65 = v83;
      if (v83)
      {
        v67 = (unint64_t *)&v83->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = (std::__shared_weak_count *)*((_QWORD *)v47 + 8);
      *((_QWORD *)v47 + 7) = v66;
      *((_QWORD *)v47 + 8) = v65;
      if (!v69)
        goto LABEL_123;
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        v72 = v83;
        if (v83)
        {
LABEL_124:
          v73 = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
      }
      else
      {
LABEL_123:
        v72 = v83;
        if (v83)
          goto LABEL_124;
      }
      v38 = (uint64_t *)*v38;
      if (!v38)
        return 1;
    }
    v3 = v43;
LABEL_105:
    v62 = *(_QWORD *)a1;
    v63 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v63)
      goto LABEL_106;
    goto LABEL_108;
  }
  return v37;
}

void sub_20EEEC898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20E96CD10((uint64_t)va);
  sub_20EEF0364((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EEEC8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20EEF0364((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEEC8C8(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if ((a2 & 1) == 0)
    goto LABEL_7;
  v5 = operator new(0x40uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_24C9F10D8;
  v6 = sub_20EA4EBA8((uint64_t)(v5 + 3), a1);
  v7 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_7:
    v5 = *(_QWORD **)(a1 + 48);
    *a3 = *(_QWORD *)(a1 + 40);
    a3[1] = (uint64_t)v5;
    if (!v5)
      return;
    goto LABEL_10;
  }
  *a3 = v6;
  a3[1] = (uint64_t)v5;
LABEL_10:
  v10 = v5 + 2;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
}

void sub_20EEEC97C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20EEEC994(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  uint64_t *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  _OWORD *v16;
  int32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x2_t v22;
  float32x2_t v23;
  _QWORD **v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v31;
  int *v32;
  int *v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  int *v41;
  int v42;
  _BOOL4 v43;
  int v44;
  _BOOL4 v45;
  int v46;
  _BOOL4 v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  unint64_t *v67;
  void *v68;
  unint64_t v69;
  unint64_t v70;
  float *v71;
  unint64_t v73;
  unint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v81;
  uint64_t *v83;
  unsigned __int16 *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD **v95;
  _QWORD *v96;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _BYTE *v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  float *v148;
  unsigned int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float *v153;
  uint64_t v154;
  float *v155;
  uint64_t *v156;
  _QWORD **v157;
  _QWORD **v158;
  _QWORD *v159;
  uint64_t v160;
  unsigned __int8 *v161;
  _QWORD ***v162;
  _QWORD *v163;
  _QWORD **v164;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  _QWORD *v196;
  _QWORD *v197;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _QWORD *v260;
  _QWORD *v261;
  __int128 v262;
  _QWORD *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  _BYTE *v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD **v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  unsigned __int16 *v280;
  unint64_t v281;
  uint64_t v282;
  float *v283;
  float v284;
  float v285;
  float v286;
  float v287;
  BOOL v288;
  BOOL v289;
  BOOL v290;
  char v291;
  float *v292;
  float v293;
  float v294;
  float v295;
  BOOL v296;
  BOOL v297;
  BOOL v298;
  float *v299;
  float v300;
  float v301;
  float v302;
  BOOL v303;
  BOOL v304;
  BOOL v305;
  unint64_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  unint64_t v310;
  _QWORD *v311;
  unint64_t v313;
  uint64_t *v315;
  unsigned __int16 *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int8x16_t v323;
  int8x16_t v324;
  _QWORD *v325;
  _QWORD **v326;
  _QWORD *v327;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  _QWORD *v360;
  _QWORD *v361;
  uint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  _BYTE *v365;
  int v366;
  uint64_t v367;
  int v368;
  uint64_t *v369;
  uint64_t v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  _QWORD **v374;
  uint64_t v375;
  _QWORD *v376;
  _QWORD *v377;
  _QWORD **v378;
  int v379;
  _QWORD *v380;
  _QWORD *v381;
  uint64_t v382;
  _QWORD *v383;
  _QWORD *v384;
  _QWORD **v385;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  unsigned int v418;
  unsigned int v419;
  _QWORD **v420;
  unsigned int v421;
  unsigned int v422;
  _QWORD **v423;
  unsigned int v424;
  unsigned int v425;
  _QWORD **v426;
  unsigned int v427;
  unsigned int v428;
  _QWORD **v429;
  unsigned int v430;
  unsigned int v431;
  _QWORD **v432;
  unsigned int v433;
  unsigned int v434;
  _QWORD **v435;
  unsigned int v436;
  unsigned int v437;
  _QWORD **v438;
  unsigned int v439;
  unsigned int v440;
  _QWORD **v441;
  unsigned int v442;
  unsigned int v443;
  _QWORD **v444;
  unsigned int v445;
  unsigned int v446;
  _QWORD **v447;
  unsigned int v448;
  unsigned int v449;
  _QWORD **v450;
  unsigned int v451;
  unsigned int v452;
  _QWORD **v453;
  unsigned int v454;
  unsigned int v455;
  _QWORD **v456;
  unsigned int v457;
  unsigned int v458;
  _QWORD **v459;
  unsigned int v460;
  unsigned int v461;
  _QWORD *v462;
  _QWORD **v463;
  _QWORD *v464;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v470;
  unsigned int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  unsigned int v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  unsigned int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  unsigned int v494;
  unsigned int v495;
  unsigned int v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  unsigned int v503;
  unsigned int v504;
  unsigned int v505;
  unsigned int v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v509;
  unsigned int v510;
  unsigned int v511;
  unsigned int v512;
  unsigned int v513;
  unsigned int v514;
  unsigned int v515;
  unsigned int v516;
  unsigned int v517;
  unsigned int v518;
  unsigned int v519;
  unsigned int v520;
  unsigned int v521;
  unsigned int v522;
  unsigned int v523;
  unsigned int v524;
  unsigned int v525;
  unsigned int v526;
  _QWORD *v527;
  __int128 v528;
  _QWORD *v529;
  uint64_t v530;
  _QWORD *v531;
  uint64_t v532;
  _BYTE *v533;
  int v534;
  uint64_t v535;
  int v536;
  uint64_t *v537;
  uint64_t v538;
  uint64_t v539;
  _QWORD *v540;
  _QWORD *v541;
  _QWORD **v542;
  uint64_t v543;
  _QWORD **v544;
  _QWORD *v545;
  _QWORD *v546;
  _QWORD *v547;
  _QWORD **v548;
  unsigned int v550;
  unsigned int v551;
  unsigned int v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int v556;
  unsigned int v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int v560;
  unsigned int v561;
  unsigned int v562;
  unsigned int v563;
  unsigned int v564;
  unsigned int v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  unsigned int v570;
  unsigned int v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  unsigned int v575;
  unsigned int v576;
  unsigned int v577;
  unsigned int v578;
  unsigned int v579;
  unsigned int v581;
  unsigned int v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int v585;
  unsigned int v586;
  unsigned int v587;
  unsigned int v588;
  unsigned int v589;
  unsigned int v590;
  unsigned int v591;
  unsigned int v592;
  unsigned int v593;
  unsigned int v594;
  unsigned int v595;
  unsigned int v596;
  unsigned int v597;
  unsigned int v598;
  unsigned int v599;
  unsigned int v600;
  unsigned int v601;
  unsigned int v602;
  unsigned int v603;
  unsigned int v604;
  unsigned int v605;
  unsigned int v606;
  unsigned int v607;
  unsigned int v608;
  unsigned int v609;
  unsigned int v610;
  _QWORD *v611;
  __int128 v612;
  _QWORD *v613;
  uint64_t v614;
  _QWORD *v615;
  uint64_t v616;
  _BYTE *v617;
  int v618;
  uint64_t v619;
  int v620;
  uint64_t *v621;
  uint64_t v622;
  uint64_t v623;
  _QWORD *v624;
  _QWORD *v625;
  _QWORD **v626;
  uint64_t v627;
  _QWORD **v628;
  uint64_t v629;
  _QWORD *v630;
  _QWORD *v631;
  _QWORD **v632;
  _QWORD *v633;
  unsigned int v635;
  unsigned int v636;
  unsigned int v637;
  unsigned int v638;
  unsigned int v639;
  unsigned int v640;
  unsigned int v641;
  unsigned int v642;
  unsigned int v643;
  unsigned int v644;
  unsigned int v645;
  unsigned int v646;
  unsigned int v647;
  unsigned int v648;
  unsigned int v649;
  unsigned int v650;
  unsigned int v651;
  unsigned int v652;
  unsigned int v653;
  unsigned int v654;
  unsigned int v655;
  unsigned int v656;
  unsigned int v657;
  unsigned int v658;
  unsigned int v659;
  unsigned int v660;
  unsigned int v661;
  unsigned int v662;
  unsigned int v663;
  unsigned int v664;
  unsigned int v666;
  unsigned int v667;
  unsigned int v668;
  unsigned int v669;
  unsigned int v670;
  unsigned int v671;
  unsigned int v672;
  unsigned int v673;
  unsigned int v674;
  unsigned int v675;
  unsigned int v676;
  unsigned int v677;
  unsigned int v678;
  unsigned int v679;
  unsigned int v680;
  unsigned int v681;
  unsigned int v682;
  unsigned int v683;
  unsigned int v684;
  unsigned int v685;
  unsigned int v686;
  unsigned int v687;
  unsigned int v688;
  unsigned int v689;
  unsigned int v690;
  unsigned int v691;
  unsigned int v692;
  unsigned int v693;
  unsigned int v694;
  unsigned int v695;
  _QWORD *v696;
  __int128 v697;
  _QWORD *v698;
  uint64_t v699;
  _QWORD *v700;
  uint64_t v701;
  _BYTE *v702;
  int v703;
  uint64_t v704;
  int v705;
  uint64_t *v706;
  uint64_t v707;
  uint64_t v708;
  _QWORD *v709;
  _QWORD *v710;
  _QWORD **v711;
  uint64_t v712;
  _QWORD *v713;
  uint64_t v714;
  _QWORD *v715;
  uint64_t v716;
  unint64_t v717;
  uint64_t v718;
  float *v719;
  char *v720;
  char **v721;
  char **v722;
  float v723;
  float v724;
  float v725;
  float v726;
  float v727;
  float v728;
  char *v729;
  uint64_t v730;
  char *v731;
  uint64_t v732;
  char *v733;
  uint64_t v734;
  _BYTE *v735;
  int v736;
  uint64_t v737;
  int v738;
  uint64_t *v739;
  uint64_t v740;
  uint64_t *v741;
  uint64_t v742;
  uint64_t v743;
  _QWORD *v744;
  _QWORD **v745;
  _OWORD *v746;
  unint64_t v747;
  _OWORD *v748;
  unint64_t v749;
  _QWORD *v750;
  _OWORD *v751;
  _DWORD *v752;
  uint64_t v753;
  _QWORD *v754;
  _OWORD *v755;
  uint64_t v757;
  uint64_t v758;
  float *v759;
  float *v760;
  _QWORD **v761;
  unsigned __int16 *v762;
  _QWORD *v763;
  int *v764;
  uint64_t *v765;
  float32x2_t v766;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  _QWORD **v770;
  _QWORD *v771;
  uint64_t v772;
  _QWORD **v773;
  _QWORD *v774;
  uint64_t v775;
  _QWORD **v776;
  _QWORD *v777;
  uint64_t v778;
  _QWORD *v779;
  _QWORD *v780;
  uint64_t v781;
  _QWORD **v782;
  _QWORD *v783;
  uint64_t v784;
  _QWORD *v785;
  char *v786;
  char *v787;
  __int128 v788;
  _QWORD *v789;
  __int128 v790;
  _QWORD *v791;
  __int128 v792;
  unint64_t v793;
  uint64_t v794;

  v8 = a1;
  v794 = *MEMORY[0x24BDAC8D0];
  v9 = (uint64_t *)sub_20EEF0588(a1, (uint64_t)a2)[7];
  v10 = (unsigned __int16 *)(v9[8] + 12 * a3);
  v11 = *v9;
  v12 = v11 + 12 * *v10;
  v13 = v11 + 12 * v10[2];
  v14 = v11 + 12 * v10[4];
  v15.i64[0] = *(_QWORD *)v13;
  v15.i32[2] = *(_DWORD *)(v13 + 8);
  v769 = v15;
  v15.i64[0] = *(_QWORD *)v12;
  v15.i32[2] = *(_DWORD *)(v12 + 8);
  v768 = v15;
  v15.i64[0] = *(_QWORD *)v14;
  v15.i32[2] = *(_DWORD *)(v14 + 8);
  v767 = v15;
  v780 = 0;
  v781 = 0;
  v778 = 0;
  v779 = &v780;
  v776 = &v777;
  v777 = 0;
  v792 = *a2;
  v16 = operator new(0x38uLL);
  v16[2] = v792;
  *((_QWORD *)v16 + 6) = a3;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = &v777;
  v776 = (_QWORD **)v16;
  v777 = v16;
  sub_20E868578((uint64_t *)v16, (uint64_t *)v16);
  ++v778;
  v763 = v8;
  if (a4)
  {
    v758 = 0;
    v17 = (int32x4_t)vsubq_f32(v769, v768);
    v18 = (int32x4_t)vsubq_f32(v767, v768);
    v19 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v17, (int8x16_t)v17, 0xCuLL), (int8x16_t)v17, 8uLL);
    v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL);
    v21 = (int8x16_t)vmlsq_f32(vmulq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL)), v20, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL), (int8x16_t)v18, 8uLL));
    *(int32x2_t *)v20.f32 = vdup_lane_s32(*(int32x2_t *)v21.i8, 1);
    v18.i64[0] = vextq_s8(v21, v21, 8uLL).u64[0];
    v20.f32[0] = 1.0
               / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), *(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8, 1), *(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8).f32[0]);
    v766 = (float32x2_t)vmulq_f32((float32x4_t)v21, v20).u64[0];
    v22 = vmul_lane_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8, 1);
    v23 = vmul_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v20.f32);
    v757 = a4;
    while (1)
    {
      v774 = 0;
      v775 = 0;
      v773 = &v774;
      v24 = v776;
      if (v776 != &v777)
        break;
LABEL_3:
      sub_20E9BCAA8(v774);
      if (++v758 == v757)
        goto LABEL_1071;
    }
    while (1)
    {
      v788 = *((_OWORD *)v24 + 2);
      v789 = v24[6];
      v25 = sub_2102322B4((unsigned __int8 *)&v788);
      v26 = v8[1];
      if ((v26 & (v26 - 1)) != 0)
      {
        v29 = v25;
        if (v25 >= v26)
          v29 = v25 % v26;
        v27 = *(_QWORD **)(*v8 + 8 * v29);
        do
        {
          do
            v27 = (_QWORD *)*v27;
          while (v25 != v27[1]);
        }
        while (v27[2] != (_QWORD)v788 || v27[3] != *((_QWORD *)&v788 + 1));
      }
      else
      {
        v27 = *(_QWORD **)(*v8 + 8 * ((v26 - 1) & v25));
        do
        {
          do
            v27 = (_QWORD *)*v27;
          while (v25 != v27[1]);
          v28 = v27[2] == (_QWORD)v788 && v27[3] == *((_QWORD *)&v788 + 1);
        }
        while (!v28);
      }
      v761 = v24;
      v31 = v27[7];
      v33 = *(int **)(v31 + 64);
      v32 = *(int **)(v31 + 72);
      v786 = 0;
      v787 = 0;
      v785 = 0;
      if (v33 == v32)
      {
        v36 = 0;
        v35 = 0;
        v783 = 0;
        v784 = 0;
        v782 = &v783;
        goto LABEL_68;
      }
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = &v33[3 * (_QWORD)v789];
      v764 = v32;
      do
      {
        v42 = *v33;
        v43 = *v41 == *v33;
        if (*v41 != *v33)
        {
          v43 = v41[1] == v42;
          if (v41[1] != v42)
            v43 = v41[2] == v42;
        }
        v44 = v33[1];
        v45 = *v41 == v44;
        if (*v41 != v44)
        {
          v45 = v41[1] == v44;
          if (v41[1] != v44)
            v45 = v41[2] == v44;
        }
        v46 = v33[2];
        v47 = *v41 == v46;
        if (*v41 != v46)
        {
          v47 = v41[1] == v46;
          if (v41[1] != v46)
            v47 = v41[2] == v46;
        }
        if (v45 + (unint64_t)v43 + v47 >= 2)
        {
          if ((unint64_t)v39 < v38)
          {
            *(_QWORD *)v39 = v40;
            v39 += 8;
            v35 = v39;
            goto LABEL_28;
          }
          v48 = v35;
          v49 = v39 - v37;
          v50 = (v39 - v37) >> 3;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61)
          {
            v785 = v36;
            v786 = v48;
            v787 = v34;
            sub_20E867F44();
          }
          v52 = v38 - (_QWORD)v37;
          if (v52 >> 2 > v51)
            v51 = v52 >> 2;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            if (v53 >> 61)
            {
              v785 = v36;
              v787 = v34;
              sub_20E877A38();
            }
            v54 = operator new(8 * v53);
            v36 = &v54[8 * v50];
            *v36 = v40;
            v55 = (uint64_t)(v36 + 1);
            v56 = v39 - v37;
            if (v39 != v37)
            {
LABEL_49:
              v57 = v56 - 8;
              if (v57 < 0x168
                || (v60 = (v39 - 8 - v37) & 0xFFFFFFFFFFFFFFF8, &v54[v49 - 8 - v60] > &v54[v49 - 8])
                || &v39[-v60 - 8] > v39 - 8
                || (unint64_t)(v37 - v54) < 0x20)
              {
                v58 = v39;
                v35 = (char *)v55;
              }
              else
              {
                v61 = (v57 >> 3) + 1;
                v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
                v58 = &v39[-v62];
                v36 = (_QWORD *)((char *)v36 - v62);
                v63 = &v54[v49 - 16];
                v64 = v39 - 16;
                v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v66 = *(_OWORD *)v64;
                  *(v63 - 1) = *((_OWORD *)v64 - 1);
                  *v63 = v66;
                  v63 -= 2;
                  v64 -= 32;
                  v65 -= 4;
                }
                while (v65);
                v35 = (char *)v55;
                if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_52:
                  v34 = &v54[8 * v53];
                  if (v37)
                    goto LABEL_53;
                  goto LABEL_54;
                }
              }
              do
              {
                v59 = *((_QWORD *)v58 - 1);
                v58 -= 8;
                *--v36 = v59;
              }
              while (v58 != v37);
              goto LABEL_52;
            }
          }
          else
          {
            v54 = 0;
            v36 = (_QWORD *)(8 * v50);
            *(_QWORD *)(8 * v50) = v40;
            v55 = 8 * v50 + 8;
            v56 = v39 - v37;
            if (v39 != v37)
              goto LABEL_49;
          }
          v35 = (char *)v55;
          v34 = &v54[8 * v53];
          if (v37)
LABEL_53:
            operator delete(v37);
LABEL_54:
          v37 = (char *)v36;
          v38 = (unint64_t)v34;
          v39 = v35;
          v32 = v764;
        }
LABEL_28:
        v33 += 3;
        ++v40;
      }
      while (v33 != v32);
      v785 = v36;
      v786 = v35;
      v787 = v34;
      v783 = 0;
      v784 = 0;
      v67 = v36;
      v782 = &v783;
      v8 = v763;
      if (v36 == (_QWORD *)v35)
      {
        v36 = v35;
        goto LABEL_68;
      }
      while (2)
      {
        v73 = *v67;
        if ((_QWORD *)*v67 == v789)
          goto LABEL_85;
        v74 = sub_2102322B4((unsigned __int8 *)&v788);
        v78 = v763[1];
        if ((v78 & (v78 - 1)) != 0)
        {
          v81 = v74;
          if (v74 >= v78)
            v81 = v74 % v78;
          v79 = *(_QWORD **)(*v763 + 8 * v81);
          do
          {
            do
              v79 = (_QWORD *)*v79;
            while (v74 != v79[1]);
          }
          while (v79[2] != (_QWORD)v788 || v79[3] != *((_QWORD *)&v788 + 1));
        }
        else
        {
          v79 = *(_QWORD **)(*v763 + 8 * ((v78 - 1) & v74));
          do
          {
            do
              v79 = (_QWORD *)*v79;
            while (v74 != v79[1]);
          }
          while (v79[2] != (_QWORD)v788 || v79[3] != *((_QWORD *)&v788 + 1));
        }
        v83 = (uint64_t *)v79[7];
        v84 = (unsigned __int16 *)(v83[8] + 12 * v73);
        v85 = *v83;
        v86 = v85 + 12 * *v84;
        v87 = v85 + 12 * v84[2];
        v88 = v85 + 12 * v84[4];
        v75.i64[0] = *(_QWORD *)v87;
        v75.i32[2] = *(_DWORD *)(v87 + 8);
        v76.i64[0] = *(_QWORD *)v86;
        v76.i32[2] = *(_DWORD *)(v86 + 8);
        v89 = (int32x4_t)vsubq_f32(v75, v76);
        v77.i64[0] = *(_QWORD *)v88;
        v77.i32[2] = *(_DWORD *)(v88 + 8);
        v90 = (int32x4_t)vsubq_f32(v77, v76);
        v91 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v89, (int8x16_t)v89, 0xCuLL), (int8x16_t)v89, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v90, v90), (int8x16_t)v90, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v89, v89), (int8x16_t)v89, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v90, (int8x16_t)v90, 0xCuLL), (int8x16_t)v90, 8uLL));
        v90.i64[0] = vextq_s8(v91, v91, 8uLL).u64[0];
        v92 = (int8x16_t)vmulq_n_f32((float32x4_t)v91, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v91.i8, *(float32x2_t *)v91.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v91.i8, 1), *(float32x2_t *)v91.i8, 1), *(float32x2_t *)v90.i8, *(float32x2_t *)v90.i8).f32[0]));
        if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(v766, *(float32x2_t *)v92.i8), v22, *(float32x2_t *)v92.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL), v23).f32[0]) < 0.99)goto LABEL_85;
        v792 = v788;
        v93 = *v67;
        v793 = *v67;
        v94 = v783;
        v95 = &v783;
        v96 = &v783;
        if (!v783)
          goto LABEL_185;
        do
        {
          while (2)
          {
            v95 = (_QWORD **)v94;
            if ((_QWORD)v792 == v94[4] && *((_QWORD *)&v792 + 1) == v94[5])
            {
              if (v93 < v94[6])
                goto LABEL_108;
            }
            else
            {
              v98 = *((unsigned __int8 *)v94 + 32);
              if (v792 < v98)
                goto LABEL_108;
              if (v98 >= v792)
              {
                v99 = *((unsigned __int8 *)v95 + 33);
                if (BYTE1(v792) < v99)
                  goto LABEL_108;
                if (v99 >= BYTE1(v792))
                {
                  v100 = *((unsigned __int8 *)v95 + 34);
                  if (BYTE2(v792) < v100)
                    goto LABEL_108;
                  if (v100 >= BYTE2(v792))
                  {
                    v101 = *((unsigned __int8 *)v95 + 35);
                    if (BYTE3(v792) < v101)
                      goto LABEL_108;
                    if (v101 >= BYTE3(v792))
                    {
                      v102 = *((unsigned __int8 *)v95 + 36);
                      if (BYTE4(v792) < v102)
                        goto LABEL_108;
                      if (v102 >= BYTE4(v792))
                      {
                        v103 = *((unsigned __int8 *)v95 + 37);
                        if (BYTE5(v792) < v103)
                          goto LABEL_108;
                        if (v103 >= BYTE5(v792))
                        {
                          v104 = *((unsigned __int8 *)v95 + 38);
                          if (BYTE6(v792) < v104)
                            goto LABEL_108;
                          if (v104 >= BYTE6(v792))
                          {
                            v105 = *((unsigned __int8 *)v95 + 39);
                            if (BYTE7(v792) < v105
                              || v105 >= BYTE7(v792)
                              && ((v106 = *((unsigned __int8 *)v95 + 40), BYTE8(v792) < v106)
                               || v106 >= BYTE8(v792)
                               && ((v107 = *((unsigned __int8 *)v95 + 41), BYTE9(v792) < v107)
                                || v107 >= BYTE9(v792)
                                && ((v108 = *((unsigned __int8 *)v95 + 42), BYTE10(v792) < v108)
                                 || v108 >= BYTE10(v792)
                                 && ((v109 = *((unsigned __int8 *)v95 + 43), BYTE11(v792) < v109)
                                  || v109 >= BYTE11(v792)
                                  && ((v110 = *((unsigned __int8 *)v95 + 44), BYTE12(v792) < v110)
                                   || v110 >= BYTE12(v792)
                                   && ((v111 = *((unsigned __int8 *)v95 + 45), BYTE13(v792) < v111)
                                    || v111 >= BYTE13(v792)
                                    && ((v112 = *((unsigned __int8 *)v95 + 46), BYTE14(v792) < v112)
                                     || v112 >= BYTE14(v792)
                                     && HIBYTE(v792) < *((unsigned __int8 *)v95 + 47)))))))))
                            {
LABEL_108:
                              v94 = *v95;
                              v96 = v95;
                              if (!*v95)
                                goto LABEL_185;
                              continue;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            break;
          }
          if (v95[4] == (_QWORD *)v792 && v95[5] == *((_QWORD **)&v792 + 1))
          {
            if ((unint64_t)v95[6] >= v93)
              goto LABEL_85;
          }
          else
          {
            v114 = *((unsigned __int8 *)v95 + 32);
            if (v114 >= v792)
            {
              if (v792 < v114)
                goto LABEL_85;
              v115 = *((unsigned __int8 *)v95 + 33);
              if (v115 >= BYTE1(v792))
              {
                if (BYTE1(v792) < v115)
                  goto LABEL_85;
                v116 = *((unsigned __int8 *)v95 + 34);
                if (v116 >= BYTE2(v792))
                {
                  if (BYTE2(v792) < v116)
                    goto LABEL_85;
                  v117 = *((unsigned __int8 *)v95 + 35);
                  if (v117 >= BYTE3(v792))
                  {
                    if (BYTE3(v792) < v117)
                      goto LABEL_85;
                    v118 = *((unsigned __int8 *)v95 + 36);
                    if (v118 >= BYTE4(v792))
                    {
                      if (BYTE4(v792) < v118)
                        goto LABEL_85;
                      v119 = *((unsigned __int8 *)v95 + 37);
                      if (v119 >= BYTE5(v792))
                      {
                        if (BYTE5(v792) < v119)
                          goto LABEL_85;
                        v120 = *((unsigned __int8 *)v95 + 38);
                        if (v120 >= BYTE6(v792))
                        {
                          if (BYTE6(v792) < v120)
                            goto LABEL_85;
                          v121 = *((unsigned __int8 *)v95 + 39);
                          if (v121 >= BYTE7(v792))
                          {
                            if (BYTE7(v792) < v121)
                              goto LABEL_85;
                            v122 = *((unsigned __int8 *)v95 + 40);
                            if (v122 >= BYTE8(v792))
                            {
                              if (BYTE8(v792) < v122)
                                goto LABEL_85;
                              v123 = *((unsigned __int8 *)v95 + 41);
                              if (v123 >= BYTE9(v792))
                              {
                                if (BYTE9(v792) < v123)
                                  goto LABEL_85;
                                v124 = *((unsigned __int8 *)v95 + 42);
                                if (v124 >= BYTE10(v792))
                                {
                                  if (BYTE10(v792) < v124)
                                    goto LABEL_85;
                                  v125 = *((unsigned __int8 *)v95 + 43);
                                  if (v125 >= BYTE11(v792))
                                  {
                                    if (BYTE11(v792) < v125)
                                      goto LABEL_85;
                                    v126 = *((unsigned __int8 *)v95 + 44);
                                    if (v126 >= BYTE12(v792))
                                    {
                                      if (BYTE12(v792) < v126)
                                        goto LABEL_85;
                                      v127 = *((unsigned __int8 *)v95 + 45);
                                      if (v127 >= BYTE13(v792))
                                      {
                                        if (BYTE13(v792) < v127)
                                          goto LABEL_85;
                                        v128 = *((unsigned __int8 *)v95 + 46);
                                        if (v128 >= BYTE14(v792)
                                          && (BYTE14(v792) < v128
                                           || *((unsigned __int8 *)v95 + 47) >= HIBYTE(v792)))
                                        {
                                          goto LABEL_85;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v94 = v95[1];
        }
        while (v94);
        v96 = v95 + 1;
LABEL_185:
        v129 = operator new(0x38uLL);
        *((_OWORD *)v129 + 2) = v792;
        v129[6] = v793;
        *v129 = 0;
        v129[1] = 0;
        v129[2] = v95;
        *v96 = v129;
        if (*v782)
        {
          v782 = (_QWORD **)*v782;
          v129 = (_QWORD *)*v96;
        }
        v130 = v783;
        v28 = v129 == v783;
        *((_BYTE *)v129 + 24) = v129 == v783;
        if (!v28)
        {
          do
          {
            v131 = v129[2];
            if (*(_BYTE *)(v131 + 24))
              break;
            v132 = *(_QWORD **)(v131 + 16);
            v133 = *v132;
            if (*v132 == v131)
            {
              v136 = v132[1];
              if (!v136 || (v137 = *(unsigned __int8 *)(v136 + 24), v134 = (_BYTE *)(v136 + 24), v137))
              {
                if (*(_QWORD **)v131 == v129)
                {
                  *(_BYTE *)(v131 + 24) = 1;
                  *((_BYTE *)v132 + 24) = 0;
                  v140 = *(_QWORD *)(v131 + 8);
                  *v132 = v140;
                  if (v140)
                    goto LABEL_202;
                }
                else
                {
                  v138 = *(uint64_t **)(v131 + 8);
                  v139 = *v138;
                  *(_QWORD *)(v131 + 8) = *v138;
                  if (v139)
                  {
                    *(_QWORD *)(v139 + 16) = v131;
                    v132 = *(_QWORD **)(v131 + 16);
                  }
                  v138[2] = (uint64_t)v132;
                  *(_QWORD *)(*(_QWORD *)(v131 + 16) + 8 * (**(_QWORD **)(v131 + 16) != v131)) = v138;
                  *v138 = v131;
                  *(_QWORD *)(v131 + 16) = v138;
                  v132 = (_QWORD *)v138[2];
                  v131 = *v132;
                  *((_BYTE *)v138 + 24) = 1;
                  *((_BYTE *)v132 + 24) = 0;
                  v140 = *(_QWORD *)(v131 + 8);
                  *v132 = v140;
                  if (v140)
LABEL_202:
                    *(_QWORD *)(v140 + 16) = v132;
                }
                *(_QWORD *)(v131 + 16) = v132[2];
                *(_QWORD *)(v132[2] + 8 * (*(_QWORD *)v132[2] != (_QWORD)v132)) = v131;
                *(_QWORD *)(v131 + 8) = v132;
LABEL_83:
                v132[2] = v131;
                break;
              }
            }
            else if (!v133 || (v135 = *(unsigned __int8 *)(v133 + 24), v134 = (_BYTE *)(v133 + 24), v135))
            {
              if (*(_QWORD **)v131 == v129)
              {
                v142 = v129[1];
                *(_QWORD *)v131 = v142;
                if (v142)
                {
                  *(_QWORD *)(v142 + 16) = v131;
                  v132 = *(_QWORD **)(v131 + 16);
                }
                v129[2] = v132;
                *(_QWORD *)(*(_QWORD *)(v131 + 16) + 8 * (**(_QWORD **)(v131 + 16) != v131)) = v129;
                v129[1] = v131;
                *(_QWORD *)(v131 + 16) = v129;
                v132 = (_QWORD *)v129[2];
                *((_BYTE *)v129 + 24) = 1;
                *((_BYTE *)v132 + 24) = 0;
                v131 = v132[1];
                v141 = *(_QWORD **)v131;
                v132[1] = *(_QWORD *)v131;
                if (!v141)
                  goto LABEL_82;
              }
              else
              {
                *(_BYTE *)(v131 + 24) = 1;
                *((_BYTE *)v132 + 24) = 0;
                v131 = v132[1];
                v141 = *(_QWORD **)v131;
                v132[1] = *(_QWORD *)v131;
                if (!v141)
                  goto LABEL_82;
              }
              v141[2] = v132;
LABEL_82:
              *(_QWORD *)(v131 + 16) = v132[2];
              *(_QWORD *)(v132[2] + 8 * (*(_QWORD *)v132[2] != (_QWORD)v132)) = v131;
              *(_QWORD *)v131 = v132;
              goto LABEL_83;
            }
            *(_BYTE *)(v131 + 24) = 1;
            v129 = v132;
            *((_BYTE *)v132 + 24) = v132 == v130;
            *v134 = 1;
          }
          while (v132 != v130);
        }
        ++v784;
LABEL_85:
        if (++v67 != (unint64_t *)v35)
          continue;
        break;
      }
LABEL_68:
      if (v35 - (char *)v36 != 24)
      {
        v790 = v788;
        v791 = v789;
        v69 = sub_2102322B4((unsigned __int8 *)&v790);
        v70 = v8[1];
        if ((v70 & (v70 - 1)) != 0)
        {
          v143 = v69;
          if (v69 >= v70)
            v143 = v69 % v70;
          v71 = *(float **)(*v8 + 8 * v143);
          do
          {
            do
              v71 = *(float **)v71;
            while (v69 != *((_QWORD *)v71 + 1));
          }
          while (*((_QWORD *)v71 + 2) != (_QWORD)v790 || *((_QWORD *)v71 + 3) != *((_QWORD *)&v790 + 1));
        }
        else
        {
          v71 = *(float **)(*v8 + 8 * ((v70 - 1) & v69));
          do
          {
            do
              v71 = *(float **)v71;
            while (v69 != *((_QWORD *)v71 + 1));
          }
          while (*((_QWORD *)v71 + 2) != (_QWORD)v790 || *((_QWORD *)v71 + 3) != *((_QWORD *)&v790 + 1));
        }
        v145 = (_QWORD *)*((_QWORD *)v71 + 7);
        v146 = (uint64_t)v791;
        v147 = v145[8];
        v148 = (float *)operator new(0x24uLL);
        v149 = (unsigned int *)(v147 + 12 * v146);
        v150 = *v145 + 12 * *v149;
        v151 = *(_QWORD *)v150;
        v148[2] = *(float *)(v150 + 8);
        *(_QWORD *)v148 = v151;
        v152 = *v145 + 12 * v149[1];
        LODWORD(v151) = *(_DWORD *)(v152 + 8);
        *(_QWORD *)(v148 + 3) = *(_QWORD *)v152;
        v153 = v148 + 3;
        *((_DWORD *)v148 + 5) = v151;
        v154 = *v145 + 12 * v149[2];
        LODWORD(v152) = *(_DWORD *)(v154 + 8);
        *((_QWORD *)v148 + 3) = *(_QWORD *)v154;
        v155 = v148 + 6;
        *((_DWORD *)v148 + 8) = v152;
        v156 = (uint64_t *)v8[2];
        if (!v156)
        {
LABEL_223:
          v157 = &v771;
          v771 = 0;
          v772 = 0;
          v770 = &v771;
          v158 = v782;
          if (v782 == &v783)
          {
LABEL_585:
            operator delete(v148);
            sub_20E9BCAA8(v783);
            v68 = v785;
            if (!v785)
              goto LABEL_587;
            goto LABEL_586;
          }
          v159 = 0;
          v160 = 0;
          v161 = (unsigned __int8 *)(v782 + 4);
          v162 = (_QWORD ***)&v771;
LABEL_345:
          if (v159)
          {
            v157 = v162;
            v196 = v162 + 1;
          }
          else
          {
            v162 = &v770;
            v196 = &v771;
          }
          if (v162[1])
          {
LABEL_349:
            v157 = &v771;
            v260 = v158[1];
            if (!v260)
              goto LABEL_377;
            do
            {
LABEL_371:
              v274 = (_QWORD **)v260;
              v260 = (_QWORD *)*v260;
            }
            while (v260);
            goto LABEL_379;
          }
LABEL_351:
          v261 = operator new(0x38uLL);
          v262 = *(_OWORD *)v161;
          v261[6] = *((_QWORD *)v161 + 2);
          *((_OWORD *)v261 + 2) = v262;
          *v261 = 0;
          v261[1] = 0;
          v261[2] = v157;
          *v196 = v261;
          if (*v770)
          {
            v770 = (_QWORD **)*v770;
            v261 = (_QWORD *)*v196;
          }
          v263 = v771;
          v28 = v261 == v771;
          *((_BYTE *)v261 + 24) = v261 == v771;
          v157 = &v771;
          if (v28)
          {
LABEL_370:
            v772 = ++v160;
            v260 = v158[1];
            if (!v260)
              goto LABEL_377;
            goto LABEL_371;
          }
          while (1)
          {
            v264 = v261[2];
            if (*(_BYTE *)(v264 + 24))
              goto LABEL_370;
            v265 = *(_QWORD **)(v264 + 16);
            v266 = *v265;
            if (*v265 == v264)
            {
              v269 = v265[1];
              if (!v269 || (v270 = *(unsigned __int8 *)(v269 + 24), v267 = (_BYTE *)(v269 + 24), v270))
              {
                if (*(_QWORD **)v264 == v261)
                {
                  *(_BYTE *)(v264 + 24) = 1;
                  *((_BYTE *)v265 + 24) = 0;
                  v273 = *(_QWORD *)(v264 + 8);
                  *v265 = v273;
                  if (v273)
                    goto LABEL_368;
                }
                else
                {
                  v271 = *(uint64_t **)(v264 + 8);
                  v272 = *v271;
                  *(_QWORD *)(v264 + 8) = *v271;
                  if (v272)
                  {
                    *(_QWORD *)(v272 + 16) = v264;
                    v265 = *(_QWORD **)(v264 + 16);
                  }
                  v271[2] = (uint64_t)v265;
                  *(_QWORD *)(*(_QWORD *)(v264 + 16) + 8 * (**(_QWORD **)(v264 + 16) != v264)) = v271;
                  *v271 = v264;
                  *(_QWORD *)(v264 + 16) = v271;
                  v265 = (_QWORD *)v271[2];
                  v264 = *v265;
                  *((_BYTE *)v271 + 24) = 1;
                  *((_BYTE *)v265 + 24) = 0;
                  v273 = *(_QWORD *)(v264 + 8);
                  *v265 = v273;
                  if (v273)
LABEL_368:
                    *(_QWORD *)(v273 + 16) = v265;
                }
                *(_QWORD *)(v264 + 16) = v265[2];
                *(_QWORD *)(v265[2] + 8 * (*(_QWORD *)v265[2] != (_QWORD)v265)) = v264;
                *(_QWORD *)(v264 + 8) = v265;
                v265[2] = v264;
                goto LABEL_370;
              }
            }
            else if (!v266 || (v268 = *(unsigned __int8 *)(v266 + 24), v267 = (_BYTE *)(v266 + 24), v268))
            {
              if (*(_QWORD **)v264 == v261)
              {
                v277 = v261[1];
                *(_QWORD *)v264 = v277;
                if (v277)
                {
                  *(_QWORD *)(v277 + 16) = v264;
                  v265 = *(_QWORD **)(v264 + 16);
                }
                v261[2] = v265;
                *(_QWORD *)(*(_QWORD *)(v264 + 16) + 8 * (**(_QWORD **)(v264 + 16) != v264)) = v261;
                v261[1] = v264;
                *(_QWORD *)(v264 + 16) = v261;
                v265 = (_QWORD *)v261[2];
                *((_BYTE *)v261 + 24) = 1;
                *((_BYTE *)v265 + 24) = 0;
                v275 = (uint64_t *)v265[1];
                v276 = *v275;
                v265[1] = *v275;
                if (v276)
LABEL_375:
                  *(_QWORD *)(v276 + 16) = v265;
              }
              else
              {
                *(_BYTE *)(v264 + 24) = 1;
                *((_BYTE *)v265 + 24) = 0;
                v275 = (uint64_t *)v265[1];
                v276 = *v275;
                v265[1] = *v275;
                if (v276)
                  goto LABEL_375;
              }
              v275[2] = v265[2];
              *(_QWORD *)(v265[2] + 8 * (*(_QWORD *)v265[2] != (_QWORD)v265)) = v275;
              *v275 = (uint64_t)v265;
              v265[2] = v275;
              v772 = ++v160;
              v260 = v158[1];
              if (v260)
                goto LABEL_371;
              do
              {
LABEL_377:
                v274 = (_QWORD **)v158[2];
                v28 = *v274 == v158;
                v158 = v274;
              }
              while (!v28);
LABEL_379:
              if (v274 == &v783)
                goto LABEL_585;
              v159 = v771;
              v158 = v274;
              v161 = (unsigned __int8 *)(v274 + 4);
              v162 = (_QWORD ***)&v771;
              if (v770 != &v771)
              {
                v163 = v771;
                v164 = &v771;
                if (v771)
                {
                  do
                  {
                    v162 = (_QWORD ***)v163;
                    v163 = (_QWORD *)v163[1];
                  }
                  while (v163);
                }
                else
                {
                  do
                  {
                    v162 = (_QWORD ***)v164[2];
                    v28 = *v162 == v164;
                    v164 = v162;
                  }
                  while (v28);
                }
                if (v162[4] == *(_QWORD ***)v161 && v162[5] == *((_QWORD ***)v161 + 1))
                {
                  if (v162[6] >= v158[6])
                    goto LABEL_264;
                }
                else
                {
                  v166 = *((unsigned __int8 *)v162 + 32);
                  v167 = *v161;
                  if (v166 >= v167)
                  {
                    if (v167 < v166)
                      goto LABEL_264;
                    v168 = *((unsigned __int8 *)v162 + 33);
                    v169 = *((unsigned __int8 *)v158 + 33);
                    if (v168 >= v169)
                    {
                      if (v169 < v168)
                        goto LABEL_264;
                      v170 = *((unsigned __int8 *)v162 + 34);
                      v171 = *((unsigned __int8 *)v158 + 34);
                      if (v170 >= v171)
                      {
                        if (v171 < v170)
                          goto LABEL_264;
                        v172 = *((unsigned __int8 *)v162 + 35);
                        v173 = *((unsigned __int8 *)v158 + 35);
                        if (v172 >= v173)
                        {
                          if (v173 < v172)
                            goto LABEL_264;
                          v174 = *((unsigned __int8 *)v162 + 36);
                          v175 = *((unsigned __int8 *)v158 + 36);
                          if (v174 >= v175)
                          {
                            if (v175 < v174)
                              goto LABEL_264;
                            v176 = *((unsigned __int8 *)v162 + 37);
                            v177 = *((unsigned __int8 *)v158 + 37);
                            if (v176 >= v177)
                            {
                              if (v177 < v176)
                                goto LABEL_264;
                              v178 = *((unsigned __int8 *)v162 + 38);
                              v179 = *((unsigned __int8 *)v158 + 38);
                              if (v178 >= v179)
                              {
                                if (v179 < v178)
                                  goto LABEL_264;
                                v180 = *((unsigned __int8 *)v162 + 39);
                                v181 = *((unsigned __int8 *)v158 + 39);
                                if (v180 >= v181)
                                {
                                  if (v181 < v180)
                                    goto LABEL_264;
                                  v182 = *((unsigned __int8 *)v162 + 40);
                                  v183 = *((unsigned __int8 *)v158 + 40);
                                  if (v182 >= v183)
                                  {
                                    if (v183 < v182)
                                      goto LABEL_264;
                                    v184 = *((unsigned __int8 *)v162 + 41);
                                    v185 = *((unsigned __int8 *)v158 + 41);
                                    if (v184 >= v185)
                                    {
                                      if (v185 < v184)
                                        goto LABEL_264;
                                      v186 = *((unsigned __int8 *)v162 + 42);
                                      v187 = *((unsigned __int8 *)v158 + 42);
                                      if (v186 >= v187)
                                      {
                                        if (v187 < v186)
                                          goto LABEL_264;
                                        v188 = *((unsigned __int8 *)v162 + 43);
                                        v189 = *((unsigned __int8 *)v158 + 43);
                                        if (v188 >= v189)
                                        {
                                          if (v189 < v188)
                                            goto LABEL_264;
                                          v190 = *((unsigned __int8 *)v162 + 44);
                                          v191 = *((unsigned __int8 *)v158 + 44);
                                          if (v190 >= v191)
                                          {
                                            if (v191 < v190)
                                              goto LABEL_264;
                                            v192 = *((unsigned __int8 *)v162 + 45);
                                            v193 = *((unsigned __int8 *)v158 + 45);
                                            if (v192 < v193)
                                              goto LABEL_262;
                                            v8 = v763;
                                            v157 = &v771;
                                            if (v193 < v192)
                                              goto LABEL_264;
                                            v194 = *((unsigned __int8 *)v162 + 46);
                                            v195 = *((unsigned __int8 *)v158 + 46);
                                            if (v194 >= v195)
                                            {
                                              v8 = v763;
                                              v157 = &v771;
                                              if (v195 < v194
                                                || *((unsigned __int8 *)v162 + 47) >= *((unsigned __int8 *)v158 + 47))
                                              {
LABEL_264:
                                                v196 = &v771;
                                                if (!v771)
                                                  goto LABEL_351;
                                                v197 = v771;
                                                while (1)
                                                {
                                                  v157 = (_QWORD **)v197;
                                                  if (*(_QWORD *)v161 == v197[4] && *((_QWORD *)v161 + 1) == v197[5])
                                                  {
                                                    if ((unint64_t)v158[6] < v197[6])
                                                      goto LABEL_266;
                                                  }
                                                  else
                                                  {
                                                    v199 = *v161;
                                                    v200 = *((unsigned __int8 *)v157 + 32);
                                                    if (v199 < v200)
                                                      goto LABEL_266;
                                                    if (v200 >= v199)
                                                    {
                                                      v201 = *((unsigned __int8 *)v158 + 33);
                                                      v202 = *((unsigned __int8 *)v157 + 33);
                                                      if (v201 < v202)
                                                        goto LABEL_266;
                                                      if (v202 >= v201)
                                                      {
                                                        v203 = *((unsigned __int8 *)v158 + 34);
                                                        v204 = *((unsigned __int8 *)v157 + 34);
                                                        if (v203 < v204)
                                                          goto LABEL_266;
                                                        if (v204 >= v203)
                                                        {
                                                          v205 = *((unsigned __int8 *)v158 + 35);
                                                          v206 = *((unsigned __int8 *)v157 + 35);
                                                          if (v205 < v206)
                                                            goto LABEL_266;
                                                          if (v206 >= v205)
                                                          {
                                                            v207 = *((unsigned __int8 *)v158 + 36);
                                                            v208 = *((unsigned __int8 *)v157 + 36);
                                                            if (v207 < v208)
                                                              goto LABEL_266;
                                                            if (v208 >= v207)
                                                            {
                                                              v209 = *((unsigned __int8 *)v158 + 37);
                                                              v210 = *((unsigned __int8 *)v157 + 37);
                                                              if (v209 < v210)
                                                                goto LABEL_266;
                                                              if (v210 >= v209)
                                                              {
                                                                v211 = *((unsigned __int8 *)v158 + 38);
                                                                v212 = *((unsigned __int8 *)v157 + 38);
                                                                if (v211 < v212)
                                                                  goto LABEL_266;
                                                                if (v212 >= v211)
                                                                {
                                                                  v213 = *((unsigned __int8 *)v158 + 39);
                                                                  v214 = *((unsigned __int8 *)v157 + 39);
                                                                  if (v213 < v214)
                                                                    goto LABEL_266;
                                                                  if (v214 >= v213)
                                                                  {
                                                                    v215 = *((unsigned __int8 *)v158 + 40);
                                                                    v216 = *((unsigned __int8 *)v157 + 40);
                                                                    if (v215 < v216)
                                                                      goto LABEL_266;
                                                                    if (v216 >= v215)
                                                                    {
                                                                      v217 = *((unsigned __int8 *)v158 + 41);
                                                                      v218 = *((unsigned __int8 *)v157 + 41);
                                                                      if (v217 < v218)
                                                                        goto LABEL_266;
                                                                      if (v218 >= v217)
                                                                      {
                                                                        v219 = *((unsigned __int8 *)v158 + 42);
                                                                        v220 = *((unsigned __int8 *)v157 + 42);
                                                                        if (v219 < v220)
                                                                          goto LABEL_266;
                                                                        if (v220 >= v219)
                                                                        {
                                                                          v221 = *((unsigned __int8 *)v158 + 43);
                                                                          v222 = *((unsigned __int8 *)v157 + 43);
                                                                          if (v221 < v222
                                                                            || v222 >= v221
                                                                            && ((v223 = *((unsigned __int8 *)v158 + 44),
                                                                                 v224 = *((unsigned __int8 *)v157 + 44),
                                                                                 v223 < v224)
                                                                             || v224 >= v223
                                                                             && ((v225 = *((unsigned __int8 *)v158 + 45),
                                                                                  v226 = *((unsigned __int8 *)v157 + 45),
                                                                                  v225 < v226)
                                                                              || v226 >= v225
                                                                              && ((v227 = *((unsigned __int8 *)v158 + 46),
                                                                                   v228 = *((unsigned __int8 *)v157 + 46),
                                                                                   v227 < v228)
                                                                               || v228 >= v227
                                                                               && *((unsigned __int8 *)v158 + 47) < *((unsigned __int8 *)v157 + 47)))))
                                                                          {
LABEL_266:
                                                                            v197 = *v157;
                                                                            v196 = v157;
                                                                            if (!*v157)
                                                                              goto LABEL_351;
                                                                            continue;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                  if (v157[4] == *(_QWORD **)v161 && v157[5] == *((_QWORD **)v161 + 1))
                                                  {
                                                    if (v157[6] >= v158[6])
                                                      goto LABEL_349;
                                                  }
                                                  else
                                                  {
                                                    v230 = *((unsigned __int8 *)v157 + 32);
                                                    v231 = *v161;
                                                    if (v230 >= v231)
                                                    {
                                                      if (v231 < v230)
                                                        goto LABEL_349;
                                                      v232 = *((unsigned __int8 *)v157 + 33);
                                                      v233 = *((unsigned __int8 *)v158 + 33);
                                                      if (v232 >= v233)
                                                      {
                                                        if (v233 < v232)
                                                          goto LABEL_349;
                                                        v234 = *((unsigned __int8 *)v157 + 34);
                                                        v235 = *((unsigned __int8 *)v158 + 34);
                                                        if (v234 >= v235)
                                                        {
                                                          if (v235 < v234)
                                                            goto LABEL_349;
                                                          v236 = *((unsigned __int8 *)v157 + 35);
                                                          v237 = *((unsigned __int8 *)v158 + 35);
                                                          if (v236 >= v237)
                                                          {
                                                            if (v237 < v236)
                                                              goto LABEL_349;
                                                            v238 = *((unsigned __int8 *)v157 + 36);
                                                            v239 = *((unsigned __int8 *)v158 + 36);
                                                            if (v238 >= v239)
                                                            {
                                                              if (v239 < v238)
                                                                goto LABEL_349;
                                                              v240 = *((unsigned __int8 *)v157 + 37);
                                                              v241 = *((unsigned __int8 *)v158 + 37);
                                                              if (v240 >= v241)
                                                              {
                                                                if (v241 < v240)
                                                                  goto LABEL_349;
                                                                v242 = *((unsigned __int8 *)v157 + 38);
                                                                v243 = *((unsigned __int8 *)v158 + 38);
                                                                if (v242 >= v243)
                                                                {
                                                                  if (v243 < v242)
                                                                    goto LABEL_349;
                                                                  v244 = *((unsigned __int8 *)v157 + 39);
                                                                  v245 = *((unsigned __int8 *)v158 + 39);
                                                                  if (v244 >= v245)
                                                                  {
                                                                    if (v245 < v244)
                                                                      goto LABEL_349;
                                                                    v246 = *((unsigned __int8 *)v157 + 40);
                                                                    v247 = *((unsigned __int8 *)v158 + 40);
                                                                    if (v246 >= v247)
                                                                    {
                                                                      if (v247 < v246)
                                                                        goto LABEL_349;
                                                                      v248 = *((unsigned __int8 *)v157 + 41);
                                                                      v249 = *((unsigned __int8 *)v158 + 41);
                                                                      if (v248 >= v249)
                                                                      {
                                                                        if (v249 < v248)
                                                                          goto LABEL_349;
                                                                        v250 = *((unsigned __int8 *)v157 + 42);
                                                                        v251 = *((unsigned __int8 *)v158 + 42);
                                                                        if (v250 >= v251)
                                                                        {
                                                                          if (v251 < v250)
                                                                            goto LABEL_349;
                                                                          v252 = *((unsigned __int8 *)v157 + 43);
                                                                          v253 = *((unsigned __int8 *)v158 + 43);
                                                                          if (v252 >= v253)
                                                                          {
                                                                            if (v253 < v252)
                                                                              goto LABEL_349;
                                                                            v254 = *((unsigned __int8 *)v157 + 44);
                                                                            v255 = *((unsigned __int8 *)v158 + 44);
                                                                            if (v254 >= v255)
                                                                            {
                                                                              if (v255 < v254)
                                                                                goto LABEL_349;
                                                                              v256 = *((unsigned __int8 *)v157 + 45);
                                                                              v257 = *((unsigned __int8 *)v158 + 45);
                                                                              if (v256 >= v257)
                                                                              {
                                                                                if (v257 < v256)
                                                                                  goto LABEL_349;
                                                                                v258 = *((unsigned __int8 *)v157 + 46);
                                                                                v259 = *((unsigned __int8 *)v158 + 46);
                                                                                if (v258 >= v259
                                                                                  && (v259 < v258
                                                                                   || *((unsigned __int8 *)v157 + 47) >= *((unsigned __int8 *)v158 + 47)))
                                                                                {
                                                                                  goto LABEL_349;
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                  v197 = v157[1];
                                                  if (!v197)
                                                  {
                                                    v196 = v157 + 1;
                                                    goto LABEL_351;
                                                  }
                                                }
                                              }
                                            }
                                            else
                                            {
LABEL_262:
                                              v8 = v763;
                                              v157 = &v771;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_345;
            }
            *(_BYTE *)(v264 + 24) = 1;
            v261 = v265;
            *((_BYTE *)v265 + 24) = v265 == v263;
            *v267 = 1;
            if (v265 == v263)
              goto LABEL_370;
          }
        }
        while (1)
        {
          v278 = v156 + 2;
          if (((_QWORD)v790 != v156[2] || *((_QWORD *)&v790 + 1) != v156[3])
            && v71[8] <= *((float *)v156 + 11)
            && v71[9] <= *((float *)v156 + 12)
            && v71[10] <= *((float *)v156 + 13)
            && v71[11] >= *((float *)v156 + 8)
            && v71[12] >= *((float *)v156 + 9)
            && v71[13] >= *((float *)v156 + 10))
          {
            v765 = (uint64_t *)v156[7];
            v280 = (unsigned __int16 *)v765[8];
            v762 = (unsigned __int16 *)v765[9];
            if (v280 != v762)
              break;
          }
LABEL_388:
          v156 = (uint64_t *)*v156;
          if (!v156)
            goto LABEL_223;
        }
        v281 = 0;
        v759 = v155;
        v760 = v153;
        while (2)
        {
          v282 = *v765;
          v283 = (float *)(*v765 + 12 * *v280);
          v285 = *v283;
          v284 = v283[1];
          v286 = v283[2];
          v287 = *v148;
          v291 = 1;
          if (*v283 != *v148 || (v284 == v148[1] ? (v288 = v286 == v148[2]) : (v288 = 0), !v288))
          {
            if (v285 != *v153 || (v284 == v148[4] ? (v289 = v286 == v148[5]) : (v289 = 0), !v289))
            {
              if (v285 != *v155 || (v284 == v148[7] ? (v290 = v286 == v148[8]) : (v290 = 0), !v290))
                v291 = 0;
            }
          }
          v292 = (float *)(v282 + 12 * v280[2]);
          v294 = *v292;
          v293 = v292[1];
          v295 = v292[2];
          if (*v292 == v287 && (v293 == v148[1] ? (v296 = v295 == v148[2]) : (v296 = 0), v296)
            || v294 == *v153 && (v293 == v148[4] ? (v297 = v295 == v148[5]) : (v297 = 0), v297)
            || v294 == *v155 && (v293 == v148[7] ? (v298 = v295 == v148[8]) : (v298 = 0), v298))
          {
            ++v291;
          }
          v299 = (float *)(v282 + 12 * v280[4]);
          v301 = *v299;
          v300 = v299[1];
          v302 = v299[2];
          if (*v299 == v287 && (v300 == v148[1] ? (v303 = v302 == v148[2]) : (v303 = 0), v303)
            || v301 == *v153 && (v300 == v148[4] ? (v304 = v302 == v148[5]) : (v304 = 0), v304)
            || v301 == *v155 && (v300 == v148[7] ? (v305 = v302 == v148[8]) : (v305 = 0), v305))
          {
            ++v291;
          }
          if ((v291 & 6) != 0)
          {
            v306 = sub_2102322B4((unsigned __int8 *)v156 + 16);
            v310 = v8[1];
            if ((v310 & (v310 - 1)) != 0)
            {
              v313 = v306;
              if (v306 >= v310)
                v313 = v306 % v310;
              v311 = *(_QWORD **)(*v8 + 8 * v313);
              do
              {
                do
                  v311 = (_QWORD *)*v311;
                while (v306 != v311[1]);
              }
              while (v311[2] != *v278 || v311[3] != v156[3]);
            }
            else
            {
              v311 = *(_QWORD **)(*v8 + 8 * ((v310 - 1) & v306));
              do
              {
                do
                  v311 = (_QWORD *)*v311;
                while (v306 != v311[1]);
              }
              while (v311[2] != *v278 || v311[3] != v156[3]);
            }
            v315 = (uint64_t *)v311[7];
            v316 = (unsigned __int16 *)(v315[8] + 12 * v281);
            v317 = *v315;
            v318 = v317 + 12 * *v316;
            v319 = v317 + 12 * v316[2];
            v320 = v317 + 12 * v316[4];
            v307.i64[0] = *(_QWORD *)v319;
            v307.i32[2] = *(_DWORD *)(v319 + 8);
            v308.i64[0] = *(_QWORD *)v318;
            v308.i32[2] = *(_DWORD *)(v318 + 8);
            v321 = (int32x4_t)vsubq_f32(v307, v308);
            v309.i64[0] = *(_QWORD *)v320;
            v309.i32[2] = *(_DWORD *)(v320 + 8);
            v322 = (int32x4_t)vsubq_f32(v309, v308);
            v323 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v321, (int8x16_t)v321, 0xCuLL), (int8x16_t)v321, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v322, v322), (int8x16_t)v322, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v321, v321), (int8x16_t)v321, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v322, (int8x16_t)v322, 0xCuLL), (int8x16_t)v322, 8uLL));
            v322.i64[0] = vextq_s8(v323, v323, 8uLL).u64[0];
            v324 = (int8x16_t)vmulq_n_f32((float32x4_t)v323, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v323.i8, *(float32x2_t *)v323.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v323.i8, 1), *(float32x2_t *)v323.i8, 1), *(float32x2_t *)v322.i8, *(float32x2_t *)v322.i8).f32[0]));
            if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(v766, *(float32x2_t *)v324.i8), v22, *(float32x2_t *)v324.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v324, v324, 8uLL), v23).f32[0]) >= 0.99)
            {
              v792 = *(_OWORD *)v278;
              v793 = v281;
              v325 = v783;
              v326 = &v783;
              v327 = &v783;
              if (v783)
              {
                while (1)
                {
                  while (1)
                  {
                    v326 = (_QWORD **)v325;
                    if ((_QWORD)v792 != v325[4] || *((_QWORD *)&v792 + 1) != v325[5])
                      break;
                    if (v281 >= v325[6])
                      goto LABEL_518;
LABEL_480:
                    v325 = *v326;
                    v327 = v326;
                    if (!*v326)
                      goto LABEL_557;
                  }
                  v329 = *((unsigned __int8 *)v325 + 32);
                  if (v792 < v329)
                    goto LABEL_480;
                  if (v329 >= v792)
                  {
                    v330 = *((unsigned __int8 *)v326 + 33);
                    if (BYTE1(v792) < v330)
                      goto LABEL_480;
                    if (v330 >= BYTE1(v792))
                    {
                      v331 = *((unsigned __int8 *)v326 + 34);
                      if (BYTE2(v792) < v331)
                        goto LABEL_480;
                      if (v331 >= BYTE2(v792))
                      {
                        v332 = *((unsigned __int8 *)v326 + 35);
                        if (BYTE3(v792) < v332)
                          goto LABEL_480;
                        if (v332 >= BYTE3(v792))
                        {
                          v333 = *((unsigned __int8 *)v326 + 36);
                          if (BYTE4(v792) < v333)
                            goto LABEL_480;
                          if (v333 >= BYTE4(v792))
                          {
                            v334 = *((unsigned __int8 *)v326 + 37);
                            if (BYTE5(v792) < v334)
                              goto LABEL_480;
                            if (v334 >= BYTE5(v792))
                            {
                              v335 = *((unsigned __int8 *)v326 + 38);
                              if (BYTE6(v792) < v335)
                                goto LABEL_480;
                              if (v335 >= BYTE6(v792))
                              {
                                v336 = *((unsigned __int8 *)v326 + 39);
                                if (BYTE7(v792) < v336)
                                  goto LABEL_480;
                                if (v336 >= BYTE7(v792))
                                {
                                  v337 = *((unsigned __int8 *)v326 + 40);
                                  if (BYTE8(v792) < v337)
                                    goto LABEL_480;
                                  if (v337 >= BYTE8(v792))
                                  {
                                    v338 = *((unsigned __int8 *)v326 + 41);
                                    if (BYTE9(v792) < v338)
                                      goto LABEL_480;
                                    if (v338 >= BYTE9(v792))
                                    {
                                      v339 = *((unsigned __int8 *)v326 + 42);
                                      if (BYTE10(v792) < v339)
                                        goto LABEL_480;
                                      if (v339 >= BYTE10(v792))
                                      {
                                        v340 = *((unsigned __int8 *)v326 + 43);
                                        if (BYTE11(v792) < v340)
                                          goto LABEL_480;
                                        if (v340 >= BYTE11(v792))
                                        {
                                          v341 = *((unsigned __int8 *)v326 + 44);
                                          if (BYTE12(v792) < v341)
                                            goto LABEL_480;
                                          if (v341 >= BYTE12(v792))
                                          {
                                            v342 = *((unsigned __int8 *)v326 + 45);
                                            if (BYTE13(v792) < v342)
                                              goto LABEL_480;
                                            if (v342 >= BYTE13(v792))
                                            {
                                              v343 = *((unsigned __int8 *)v326 + 46);
                                              if (BYTE14(v792) < v343
                                                || v343 >= BYTE14(v792)
                                                && HIBYTE(v792) < *((unsigned __int8 *)v326 + 47))
                                              {
                                                goto LABEL_480;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_518:
                  if (v326[4] == (_QWORD *)v792 && v326[5] == *((_QWORD **)&v792 + 1))
                  {
                    if ((unint64_t)v326[6] >= v281)
                      goto LABEL_405;
                  }
                  else
                  {
                    v345 = *((unsigned __int8 *)v326 + 32);
                    if (v345 >= v792)
                    {
                      if (v792 < v345)
                        goto LABEL_405;
                      v346 = *((unsigned __int8 *)v326 + 33);
                      if (v346 >= BYTE1(v792))
                      {
                        if (BYTE1(v792) < v346)
                          goto LABEL_405;
                        v347 = *((unsigned __int8 *)v326 + 34);
                        if (v347 >= BYTE2(v792))
                        {
                          if (BYTE2(v792) < v347)
                            goto LABEL_405;
                          v348 = *((unsigned __int8 *)v326 + 35);
                          if (v348 >= BYTE3(v792))
                          {
                            if (BYTE3(v792) < v348)
                              goto LABEL_405;
                            v349 = *((unsigned __int8 *)v326 + 36);
                            if (v349 >= BYTE4(v792))
                            {
                              if (BYTE4(v792) < v349)
                                goto LABEL_405;
                              v350 = *((unsigned __int8 *)v326 + 37);
                              if (v350 >= BYTE5(v792))
                              {
                                if (BYTE5(v792) < v350)
                                  goto LABEL_405;
                                v351 = *((unsigned __int8 *)v326 + 38);
                                if (v351 >= BYTE6(v792))
                                {
                                  if (BYTE6(v792) < v351)
                                    goto LABEL_405;
                                  v352 = *((unsigned __int8 *)v326 + 39);
                                  if (v352 >= BYTE7(v792))
                                  {
                                    if (BYTE7(v792) < v352)
                                      goto LABEL_405;
                                    v353 = *((unsigned __int8 *)v326 + 40);
                                    if (v353 >= BYTE8(v792))
                                    {
                                      if (BYTE8(v792) < v353)
                                        goto LABEL_405;
                                      v354 = *((unsigned __int8 *)v326 + 41);
                                      if (v354 >= BYTE9(v792))
                                      {
                                        if (BYTE9(v792) < v354)
                                          goto LABEL_405;
                                        v355 = *((unsigned __int8 *)v326 + 42);
                                        if (v355 >= BYTE10(v792))
                                        {
                                          if (BYTE10(v792) < v355)
                                            goto LABEL_405;
                                          v356 = *((unsigned __int8 *)v326 + 43);
                                          if (v356 >= BYTE11(v792))
                                          {
                                            if (BYTE11(v792) < v356)
                                              goto LABEL_405;
                                            v357 = *((unsigned __int8 *)v326 + 44);
                                            if (v357 >= BYTE12(v792))
                                            {
                                              if (BYTE12(v792) < v357)
                                                goto LABEL_405;
                                              v358 = *((unsigned __int8 *)v326 + 45);
                                              if (v358 >= BYTE13(v792))
                                              {
                                                if (BYTE13(v792) < v358)
                                                  goto LABEL_405;
                                                v359 = *((unsigned __int8 *)v326 + 46);
                                                if (v359 >= BYTE14(v792)
                                                  && (BYTE14(v792) < v359
                                                   || *((unsigned __int8 *)v326 + 47) >= HIBYTE(v792)))
                                                {
                                                  goto LABEL_405;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  v325 = v326[1];
                  if (!v325)
                  {
                    v327 = v326 + 1;
                    break;
                  }
                }
              }
LABEL_557:
              v360 = operator new(0x38uLL);
              *((_OWORD *)v360 + 2) = v792;
              v360[6] = v793;
              *v360 = 0;
              v360[1] = 0;
              v360[2] = v326;
              *v327 = v360;
              if (*v782)
              {
                v782 = (_QWORD **)*v782;
                v360 = (_QWORD *)*v327;
              }
              v361 = v783;
              v28 = v360 == v783;
              *((_BYTE *)v360 + 24) = v360 == v783;
              if (!v28)
              {
                do
                {
                  v362 = v360[2];
                  if (*(_BYTE *)(v362 + 24))
                    break;
                  v363 = *(_QWORD **)(v362 + 16);
                  v364 = *v363;
                  if (*v363 == v362)
                  {
                    v367 = v363[1];
                    if (!v367 || (v368 = *(unsigned __int8 *)(v367 + 24), v365 = (_BYTE *)(v367 + 24), v368))
                    {
                      if (*(_QWORD **)v362 == v360)
                      {
                        *(_BYTE *)(v362 + 24) = 1;
                        *((_BYTE *)v363 + 24) = 0;
                        v371 = *(_QWORD *)(v362 + 8);
                        *v363 = v371;
                        if (v371)
                          goto LABEL_574;
                      }
                      else
                      {
                        v369 = *(uint64_t **)(v362 + 8);
                        v370 = *v369;
                        *(_QWORD *)(v362 + 8) = *v369;
                        if (v370)
                        {
                          *(_QWORD *)(v370 + 16) = v362;
                          v363 = *(_QWORD **)(v362 + 16);
                        }
                        v369[2] = (uint64_t)v363;
                        *(_QWORD *)(*(_QWORD *)(v362 + 16) + 8 * (**(_QWORD **)(v362 + 16) != v362)) = v369;
                        *v369 = v362;
                        *(_QWORD *)(v362 + 16) = v369;
                        v363 = (_QWORD *)v369[2];
                        v362 = *v363;
                        *((_BYTE *)v369 + 24) = 1;
                        *((_BYTE *)v363 + 24) = 0;
                        v371 = *(_QWORD *)(v362 + 8);
                        *v363 = v371;
                        if (v371)
LABEL_574:
                          *(_QWORD *)(v371 + 16) = v363;
                      }
                      *(_QWORD *)(v362 + 16) = v363[2];
                      *(_QWORD *)(v363[2] + 8 * (*(_QWORD *)v363[2] != (_QWORD)v363)) = v362;
                      *(_QWORD *)(v362 + 8) = v363;
LABEL_403:
                      v363[2] = v362;
                      break;
                    }
                  }
                  else if (!v364 || (v366 = *(unsigned __int8 *)(v364 + 24), v365 = (_BYTE *)(v364 + 24), v366))
                  {
                    if (*(_QWORD **)v362 == v360)
                    {
                      v373 = v360[1];
                      *(_QWORD *)v362 = v373;
                      if (v373)
                      {
                        *(_QWORD *)(v373 + 16) = v362;
                        v363 = *(_QWORD **)(v362 + 16);
                      }
                      v360[2] = v363;
                      *(_QWORD *)(*(_QWORD *)(v362 + 16) + 8 * (**(_QWORD **)(v362 + 16) != v362)) = v360;
                      v360[1] = v362;
                      *(_QWORD *)(v362 + 16) = v360;
                      v363 = (_QWORD *)v360[2];
                      *((_BYTE *)v360 + 24) = 1;
                      *((_BYTE *)v363 + 24) = 0;
                      v362 = v363[1];
                      v372 = *(_QWORD **)v362;
                      v363[1] = *(_QWORD *)v362;
                      if (!v372)
                        goto LABEL_402;
                    }
                    else
                    {
                      *(_BYTE *)(v362 + 24) = 1;
                      *((_BYTE *)v363 + 24) = 0;
                      v362 = v363[1];
                      v372 = *(_QWORD **)v362;
                      v363[1] = *(_QWORD *)v362;
                      if (!v372)
                        goto LABEL_402;
                    }
                    v372[2] = v363;
LABEL_402:
                    *(_QWORD *)(v362 + 16) = v363[2];
                    *(_QWORD *)(v363[2] + 8 * (*(_QWORD *)v363[2] != (_QWORD)v363)) = v362;
                    *(_QWORD *)v362 = v363;
                    goto LABEL_403;
                  }
                  *(_BYTE *)(v362 + 24) = 1;
                  v360 = v363;
                  *((_BYTE *)v363 + 24) = v363 == v361;
                  *v365 = 1;
                }
                while (v363 != v361);
              }
              ++v784;
LABEL_405:
              v8 = v763;
              v155 = v759;
              v153 = v760;
            }
          }
          v280 += 6;
          ++v281;
          if (v280 == v762)
            goto LABEL_388;
          continue;
        }
      }
      v770 = v782;
      v771 = v783;
      v772 = v784;
      if (v784)
      {
        v783[2] = &v771;
        v782 = &v783;
        v783 = 0;
        v784 = 0;
        sub_20E9BCAA8(0);
        v68 = v785;
        if (!v785)
          goto LABEL_587;
LABEL_586:
        operator delete(v68);
        goto LABEL_587;
      }
      v770 = &v771;
      sub_20E9BCAA8(v783);
      v68 = v785;
      if (v785)
        goto LABEL_586;
LABEL_587:
      v374 = v770;
      if (v770 != &v771)
      {
        v375 = v775;
        do
        {
          v376 = v374 + 4;
          v377 = v780;
          if (!v780)
            goto LABEL_714;
          v378 = &v780;
          do
          {
            while (1)
            {
              v380 = v377;
              v381 = v377;
              v382 = v377[4];
              v384 = (_QWORD *)v377[5];
              v383 = v381 + 4;
              v385 = v378;
              if (v382 != *v376 || v384 != v374[5])
                break;
              if (v380[6] >= (unint64_t)v374[6])
                goto LABEL_630;
LABEL_592:
              v379 = 1;
              v377 = (_QWORD *)v380[1];
              if (!v377)
                goto LABEL_631;
            }
            v387 = *(unsigned __int8 *)v383;
            v388 = *(unsigned __int8 *)v376;
            if (v387 < v388)
              goto LABEL_592;
            if (v388 >= v387)
            {
              v389 = *((unsigned __int8 *)v380 + 33);
              v390 = *((unsigned __int8 *)v374 + 33);
              if (v389 < v390)
                goto LABEL_592;
              if (v390 >= v389)
              {
                v391 = *((unsigned __int8 *)v380 + 34);
                v392 = *((unsigned __int8 *)v374 + 34);
                if (v391 < v392)
                  goto LABEL_592;
                if (v392 >= v391)
                {
                  v393 = *((unsigned __int8 *)v380 + 35);
                  v394 = *((unsigned __int8 *)v374 + 35);
                  if (v393 < v394)
                    goto LABEL_592;
                  if (v394 >= v393)
                  {
                    v395 = *((unsigned __int8 *)v380 + 36);
                    v396 = *((unsigned __int8 *)v374 + 36);
                    if (v395 < v396)
                      goto LABEL_592;
                    if (v396 >= v395)
                    {
                      v397 = *((unsigned __int8 *)v380 + 37);
                      v398 = *((unsigned __int8 *)v374 + 37);
                      if (v397 < v398)
                        goto LABEL_592;
                      if (v398 >= v397)
                      {
                        v399 = *((unsigned __int8 *)v380 + 38);
                        v400 = *((unsigned __int8 *)v374 + 38);
                        if (v399 < v400)
                          goto LABEL_592;
                        if (v400 >= v399)
                        {
                          v401 = *((unsigned __int8 *)v380 + 39);
                          v402 = *((unsigned __int8 *)v374 + 39);
                          if (v401 < v402)
                            goto LABEL_592;
                          if (v402 >= v401)
                          {
                            v403 = *((unsigned __int8 *)v380 + 40);
                            v404 = *((unsigned __int8 *)v374 + 40);
                            if (v403 < v404)
                              goto LABEL_592;
                            if (v404 >= v403)
                            {
                              v405 = *((unsigned __int8 *)v380 + 41);
                              v406 = *((unsigned __int8 *)v374 + 41);
                              if (v405 < v406)
                                goto LABEL_592;
                              if (v406 >= v405)
                              {
                                v407 = *((unsigned __int8 *)v380 + 42);
                                v408 = *((unsigned __int8 *)v374 + 42);
                                if (v407 < v408)
                                  goto LABEL_592;
                                if (v408 >= v407)
                                {
                                  v409 = *((unsigned __int8 *)v380 + 43);
                                  v410 = *((unsigned __int8 *)v374 + 43);
                                  if (v409 < v410)
                                    goto LABEL_592;
                                  if (v410 >= v409)
                                  {
                                    v411 = *((unsigned __int8 *)v380 + 44);
                                    v412 = *((unsigned __int8 *)v374 + 44);
                                    if (v411 < v412)
                                      goto LABEL_592;
                                    if (v412 >= v411)
                                    {
                                      v413 = *((unsigned __int8 *)v380 + 45);
                                      v414 = *((unsigned __int8 *)v374 + 45);
                                      if (v413 < v414)
                                        goto LABEL_592;
                                      if (v414 >= v413)
                                      {
                                        v415 = *((unsigned __int8 *)v380 + 46);
                                        v416 = *((unsigned __int8 *)v374 + 46);
                                        if (v415 < v416
                                          || v416 >= v415
                                          && *((unsigned __int8 *)v380 + 47) < *((unsigned __int8 *)v374
                                                                                             + 47))
                                        {
                                          goto LABEL_592;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_630:
            v379 = 0;
            v378 = (_QWORD **)v380;
            v377 = (_QWORD *)*v380;
          }
          while (*v380);
LABEL_631:
          if (v378 == &v780)
            goto LABEL_714;
          if (v379)
            v383 = v385 + 4;
          if (*v376 == *v383 && v374[5] == (_QWORD *)v383[1])
          {
            if (v379)
              v380 = v385;
            if ((unint64_t)v374[6] >= v380[6])
              goto LABEL_818;
LABEL_714:
            v462 = v774;
            v463 = &v774;
LABEL_716:
            v464 = v463;
            if (v462)
            {
              do
              {
                v463 = (_QWORD **)v462;
                if (*v376 == v462[4] && v374[5] == (_QWORD *)v462[5])
                {
                  if ((unint64_t)v374[6] < v462[6])
                    goto LABEL_715;
                }
                else
                {
                  v466 = *(unsigned __int8 *)v376;
                  v467 = *((unsigned __int8 *)v463 + 32);
                  if (v466 < v467)
                    goto LABEL_715;
                  if (v467 >= v466)
                  {
                    v468 = *((unsigned __int8 *)v374 + 33);
                    v469 = *((unsigned __int8 *)v463 + 33);
                    if (v468 < v469)
                      goto LABEL_715;
                    if (v469 >= v468)
                    {
                      v470 = *((unsigned __int8 *)v374 + 34);
                      v471 = *((unsigned __int8 *)v463 + 34);
                      if (v470 < v471)
                        goto LABEL_715;
                      if (v471 >= v470)
                      {
                        v472 = *((unsigned __int8 *)v374 + 35);
                        v473 = *((unsigned __int8 *)v463 + 35);
                        if (v472 < v473)
                          goto LABEL_715;
                        if (v473 >= v472)
                        {
                          v474 = *((unsigned __int8 *)v374 + 36);
                          v475 = *((unsigned __int8 *)v463 + 36);
                          if (v474 < v475)
                            goto LABEL_715;
                          if (v475 >= v474)
                          {
                            v476 = *((unsigned __int8 *)v374 + 37);
                            v477 = *((unsigned __int8 *)v463 + 37);
                            if (v476 < v477)
                              goto LABEL_715;
                            if (v477 >= v476)
                            {
                              v478 = *((unsigned __int8 *)v374 + 38);
                              v479 = *((unsigned __int8 *)v463 + 38);
                              if (v478 < v479)
                                goto LABEL_715;
                              if (v479 >= v478)
                              {
                                v480 = *((unsigned __int8 *)v374 + 39);
                                v481 = *((unsigned __int8 *)v463 + 39);
                                if (v480 < v481)
                                  goto LABEL_715;
                                if (v481 >= v480)
                                {
                                  v482 = *((unsigned __int8 *)v374 + 40);
                                  v483 = *((unsigned __int8 *)v463 + 40);
                                  if (v482 < v483)
                                    goto LABEL_715;
                                  if (v483 >= v482)
                                  {
                                    v484 = *((unsigned __int8 *)v374 + 41);
                                    v485 = *((unsigned __int8 *)v463 + 41);
                                    if (v484 < v485)
                                      goto LABEL_715;
                                    if (v485 >= v484)
                                    {
                                      v486 = *((unsigned __int8 *)v374 + 42);
                                      v487 = *((unsigned __int8 *)v463 + 42);
                                      if (v486 < v487)
                                        goto LABEL_715;
                                      if (v487 >= v486)
                                      {
                                        v488 = *((unsigned __int8 *)v374 + 43);
                                        v489 = *((unsigned __int8 *)v463 + 43);
                                        if (v488 < v489
                                          || v489 >= v488
                                          && ((v490 = *((unsigned __int8 *)v374 + 44),
                                               v491 = *((unsigned __int8 *)v463 + 44),
                                               v490 < v491)
                                           || v491 >= v490
                                           && ((v492 = *((unsigned __int8 *)v374 + 45),
                                                v493 = *((unsigned __int8 *)v463 + 45),
                                                v492 < v493)
                                            || v493 >= v492
                                            && ((v494 = *((unsigned __int8 *)v374 + 46),
                                                 v495 = *((unsigned __int8 *)v463 + 46),
                                                 v494 < v495)
                                             || v495 >= v494
                                             && *((unsigned __int8 *)v374 + 47) < *((unsigned __int8 *)v463
                                                                                                + 47)))))
                                        {
LABEL_715:
                                          v462 = *v463;
                                          goto LABEL_716;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (v463[4] == (_QWORD *)*v376 && v463[5] == v374[5])
                {
                  if (v463[6] >= v374[6])
                    goto LABEL_818;
                }
                else
                {
                  v497 = *((unsigned __int8 *)v463 + 32);
                  v498 = *(unsigned __int8 *)v376;
                  if (v497 >= v498)
                  {
                    if (v498 < v497)
                      goto LABEL_818;
                    v499 = *((unsigned __int8 *)v463 + 33);
                    v500 = *((unsigned __int8 *)v374 + 33);
                    if (v499 >= v500)
                    {
                      if (v500 < v499)
                        goto LABEL_818;
                      v501 = *((unsigned __int8 *)v463 + 34);
                      v502 = *((unsigned __int8 *)v374 + 34);
                      if (v501 >= v502)
                      {
                        if (v502 < v501)
                          goto LABEL_818;
                        v503 = *((unsigned __int8 *)v463 + 35);
                        v504 = *((unsigned __int8 *)v374 + 35);
                        if (v503 >= v504)
                        {
                          if (v504 < v503)
                            goto LABEL_818;
                          v505 = *((unsigned __int8 *)v463 + 36);
                          v506 = *((unsigned __int8 *)v374 + 36);
                          if (v505 >= v506)
                          {
                            if (v506 < v505)
                              goto LABEL_818;
                            v507 = *((unsigned __int8 *)v463 + 37);
                            v508 = *((unsigned __int8 *)v374 + 37);
                            if (v507 >= v508)
                            {
                              if (v508 < v507)
                                goto LABEL_818;
                              v509 = *((unsigned __int8 *)v463 + 38);
                              v510 = *((unsigned __int8 *)v374 + 38);
                              if (v509 >= v510)
                              {
                                if (v510 < v509)
                                  goto LABEL_818;
                                v511 = *((unsigned __int8 *)v463 + 39);
                                v512 = *((unsigned __int8 *)v374 + 39);
                                if (v511 >= v512)
                                {
                                  if (v512 < v511)
                                    goto LABEL_818;
                                  v513 = *((unsigned __int8 *)v463 + 40);
                                  v514 = *((unsigned __int8 *)v374 + 40);
                                  if (v513 >= v514)
                                  {
                                    if (v514 < v513)
                                      goto LABEL_818;
                                    v515 = *((unsigned __int8 *)v463 + 41);
                                    v516 = *((unsigned __int8 *)v374 + 41);
                                    if (v515 >= v516)
                                    {
                                      if (v516 < v515)
                                        goto LABEL_818;
                                      v517 = *((unsigned __int8 *)v463 + 42);
                                      v518 = *((unsigned __int8 *)v374 + 42);
                                      if (v517 >= v518)
                                      {
                                        if (v518 < v517)
                                          goto LABEL_818;
                                        v519 = *((unsigned __int8 *)v463 + 43);
                                        v520 = *((unsigned __int8 *)v374 + 43);
                                        if (v519 >= v520)
                                        {
                                          if (v520 < v519)
                                            goto LABEL_818;
                                          v521 = *((unsigned __int8 *)v463 + 44);
                                          v522 = *((unsigned __int8 *)v374 + 44);
                                          if (v521 >= v522)
                                          {
                                            if (v522 < v521)
                                              goto LABEL_818;
                                            v523 = *((unsigned __int8 *)v463 + 45);
                                            v524 = *((unsigned __int8 *)v374 + 45);
                                            if (v523 >= v524)
                                            {
                                              if (v524 < v523)
                                                goto LABEL_818;
                                              v525 = *((unsigned __int8 *)v463 + 46);
                                              v526 = *((unsigned __int8 *)v374 + 46);
                                              if (v525 >= v526
                                                && (v526 < v525
                                                 || *((unsigned __int8 *)v463 + 47) >= *((unsigned __int8 *)v374 + 47)))
                                              {
                                                goto LABEL_818;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v462 = v463[1];
              }
              while (v462);
              v464 = v463 + 1;
            }
            v527 = operator new(0x38uLL);
            v528 = *(_OWORD *)v376;
            v527[6] = v374[6];
            *((_OWORD *)v527 + 2) = v528;
            *v527 = 0;
            v527[1] = 0;
            v527[2] = v463;
            *v464 = v527;
            if (*v773)
            {
              v773 = (_QWORD **)*v773;
              v527 = (_QWORD *)*v464;
            }
            v529 = v774;
            v28 = v527 == v774;
            *((_BYTE *)v527 + 24) = v527 == v774;
            if (!v28)
            {
              do
              {
                v530 = v527[2];
                if (*(_BYTE *)(v530 + 24))
                  break;
                v531 = *(_QWORD **)(v530 + 16);
                v532 = *v531;
                if (*v531 == v530)
                {
                  v535 = v531[1];
                  if (!v535 || (v536 = *(unsigned __int8 *)(v535 + 24), v533 = (_BYTE *)(v535 + 24), v536))
                  {
                    if (*(_QWORD **)v530 == v527)
                    {
                      *(_BYTE *)(v530 + 24) = 1;
                      *((_BYTE *)v531 + 24) = 0;
                      v539 = *(_QWORD *)(v530 + 8);
                      *v531 = v539;
                      if (v539)
                        goto LABEL_810;
                    }
                    else
                    {
                      v537 = *(uint64_t **)(v530 + 8);
                      v538 = *v537;
                      *(_QWORD *)(v530 + 8) = *v537;
                      if (v538)
                      {
                        *(_QWORD *)(v538 + 16) = v530;
                        v531 = *(_QWORD **)(v530 + 16);
                      }
                      v537[2] = (uint64_t)v531;
                      *(_QWORD *)(*(_QWORD *)(v530 + 16) + 8 * (**(_QWORD **)(v530 + 16) != v530)) = v537;
                      *v537 = v530;
                      *(_QWORD *)(v530 + 16) = v537;
                      v531 = (_QWORD *)v537[2];
                      v530 = *v531;
                      *((_BYTE *)v537 + 24) = 1;
                      *((_BYTE *)v531 + 24) = 0;
                      v539 = *(_QWORD *)(v530 + 8);
                      *v531 = v539;
                      if (v539)
LABEL_810:
                        *(_QWORD *)(v539 + 16) = v531;
                    }
                    *(_QWORD *)(v530 + 16) = v531[2];
                    *(_QWORD *)(v531[2] + 8 * (*(_QWORD *)v531[2] != (_QWORD)v531)) = v530;
                    *(_QWORD *)(v530 + 8) = v531;
LABEL_816:
                    v531[2] = v530;
                    break;
                  }
                }
                else if (!v532 || (v534 = *(unsigned __int8 *)(v532 + 24), v533 = (_BYTE *)(v532 + 24), v534))
                {
                  if (*(_QWORD **)v530 == v527)
                  {
                    v543 = v527[1];
                    *(_QWORD *)v530 = v543;
                    if (v543)
                    {
                      *(_QWORD *)(v543 + 16) = v530;
                      v531 = *(_QWORD **)(v530 + 16);
                    }
                    v527[2] = v531;
                    *(_QWORD *)(*(_QWORD *)(v530 + 16) + 8 * (**(_QWORD **)(v530 + 16) != v530)) = v527;
                    v527[1] = v530;
                    *(_QWORD *)(v530 + 16) = v527;
                    v531 = (_QWORD *)v527[2];
                    *((_BYTE *)v527 + 24) = 1;
                    *((_BYTE *)v531 + 24) = 0;
                    v530 = v531[1];
                    v540 = *(_QWORD **)v530;
                    v531[1] = *(_QWORD *)v530;
                    if (v540)
LABEL_814:
                      v540[2] = v531;
                  }
                  else
                  {
                    *(_BYTE *)(v530 + 24) = 1;
                    *((_BYTE *)v531 + 24) = 0;
                    v530 = v531[1];
                    v540 = *(_QWORD **)v530;
                    v531[1] = *(_QWORD *)v530;
                    if (v540)
                      goto LABEL_814;
                  }
                  *(_QWORD *)(v530 + 16) = v531[2];
                  *(_QWORD *)(v531[2] + 8 * (*(_QWORD *)v531[2] != (_QWORD)v531)) = v530;
                  *(_QWORD *)v530 = v531;
                  goto LABEL_816;
                }
                *(_BYTE *)(v530 + 24) = 1;
                v527 = v531;
                *((_BYTE *)v531 + 24) = v531 == v529;
                *v533 = 1;
              }
              while (v531 != v529);
            }
            v775 = ++v375;
            goto LABEL_818;
          }
          v418 = *(unsigned __int8 *)v376;
          v419 = *(unsigned __int8 *)v383;
          if (v418 < v419)
            goto LABEL_714;
          if (v419 < v418)
            goto LABEL_818;
          v420 = v379 ? v385 : (_QWORD **)v380;
          v421 = *((unsigned __int8 *)v374 + 33);
          v422 = *((unsigned __int8 *)v420 + 33);
          if (v421 < v422)
            goto LABEL_714;
          if (v422 < v421)
            goto LABEL_818;
          v423 = v379 ? v385 : (_QWORD **)v380;
          v424 = *((unsigned __int8 *)v374 + 34);
          v425 = *((unsigned __int8 *)v423 + 34);
          if (v424 < v425)
            goto LABEL_714;
          if (v425 < v424)
            goto LABEL_818;
          v426 = v379 ? v385 : (_QWORD **)v380;
          v427 = *((unsigned __int8 *)v374 + 35);
          v428 = *((unsigned __int8 *)v426 + 35);
          if (v427 < v428)
            goto LABEL_714;
          if (v428 < v427)
            goto LABEL_818;
          v429 = v379 ? v385 : (_QWORD **)v380;
          v430 = *((unsigned __int8 *)v374 + 36);
          v431 = *((unsigned __int8 *)v429 + 36);
          if (v430 < v431)
            goto LABEL_714;
          if (v431 < v430)
            goto LABEL_818;
          v432 = v379 ? v385 : (_QWORD **)v380;
          v433 = *((unsigned __int8 *)v374 + 37);
          v434 = *((unsigned __int8 *)v432 + 37);
          if (v433 < v434)
            goto LABEL_714;
          if (v434 < v433)
            goto LABEL_818;
          v435 = v379 ? v385 : (_QWORD **)v380;
          v436 = *((unsigned __int8 *)v374 + 38);
          v437 = *((unsigned __int8 *)v435 + 38);
          if (v436 < v437)
            goto LABEL_714;
          if (v437 < v436)
            goto LABEL_818;
          v438 = v379 ? v385 : (_QWORD **)v380;
          v439 = *((unsigned __int8 *)v374 + 39);
          v440 = *((unsigned __int8 *)v438 + 39);
          if (v439 < v440)
            goto LABEL_714;
          if (v440 < v439)
            goto LABEL_818;
          v441 = v379 ? v385 : (_QWORD **)v380;
          v442 = *((unsigned __int8 *)v374 + 40);
          v443 = *((unsigned __int8 *)v441 + 40);
          if (v442 < v443)
            goto LABEL_714;
          if (v443 < v442)
            goto LABEL_818;
          v444 = v379 ? v385 : (_QWORD **)v380;
          v445 = *((unsigned __int8 *)v374 + 41);
          v446 = *((unsigned __int8 *)v444 + 41);
          if (v445 < v446)
            goto LABEL_714;
          if (v446 < v445)
            goto LABEL_818;
          v447 = v379 ? v385 : (_QWORD **)v380;
          v448 = *((unsigned __int8 *)v374 + 42);
          v449 = *((unsigned __int8 *)v447 + 42);
          if (v448 < v449)
            goto LABEL_714;
          if (v449 < v448)
            goto LABEL_818;
          v450 = v379 ? v385 : (_QWORD **)v380;
          v451 = *((unsigned __int8 *)v374 + 43);
          v452 = *((unsigned __int8 *)v450 + 43);
          if (v451 < v452)
            goto LABEL_714;
          if (v452 < v451)
            goto LABEL_818;
          v453 = v379 ? v385 : (_QWORD **)v380;
          v454 = *((unsigned __int8 *)v374 + 44);
          v455 = *((unsigned __int8 *)v453 + 44);
          if (v454 < v455)
            goto LABEL_714;
          if (v455 < v454)
            goto LABEL_710;
          v456 = v379 ? v385 : (_QWORD **)v380;
          v457 = *((unsigned __int8 *)v374 + 45);
          v458 = *((unsigned __int8 *)v456 + 45);
          v8 = v763;
          if (v457 < v458)
            goto LABEL_714;
          if (v458 < v457)
            goto LABEL_710;
          v459 = v379 ? v385 : (_QWORD **)v380;
          v460 = *((unsigned __int8 *)v374 + 46);
          v461 = *((unsigned __int8 *)v459 + 46);
          v8 = v763;
          if (v460 < v461)
            goto LABEL_714;
          if (v461 < v460)
          {
LABEL_710:
            v8 = v763;
            goto LABEL_818;
          }
          if (v379)
            v380 = v385;
          v8 = v763;
          if (*((unsigned __int8 *)v374 + 47) < *((unsigned __int8 *)v380 + 47))
            goto LABEL_714;
LABEL_818:
          v541 = v374[1];
          if (v541)
          {
            do
            {
              v542 = (_QWORD **)v541;
              v541 = (_QWORD *)*v541;
            }
            while (v541);
          }
          else
          {
            do
            {
              v542 = (_QWORD **)v374[2];
              v28 = *v542 == v374;
              v374 = v542;
            }
            while (!v28);
          }
          v374 = v542;
        }
        while (v542 != &v771);
      }
      v544 = v761;
      v545 = v761 + 4;
      sub_20E9BCAA8(v771);
      v546 = v780;
      v547 = &v780;
      v548 = &v780;
      if (!v780)
        goto LABEL_913;
      do
      {
        while (2)
        {
          v548 = (_QWORD **)v546;
          if (*v545 == v546[4] && v761[5] == (_QWORD *)v546[5])
          {
            if ((unint64_t)v761[6] < v546[6])
              goto LABEL_836;
          }
          else
          {
            v550 = *(unsigned __int8 *)v545;
            v551 = *((unsigned __int8 *)v548 + 32);
            if (v550 < v551)
              goto LABEL_836;
            if (v551 >= v550)
            {
              v552 = *((unsigned __int8 *)v761 + 33);
              v553 = *((unsigned __int8 *)v548 + 33);
              if (v552 < v553)
                goto LABEL_836;
              if (v553 >= v552)
              {
                v554 = *((unsigned __int8 *)v761 + 34);
                v555 = *((unsigned __int8 *)v548 + 34);
                if (v554 < v555)
                  goto LABEL_836;
                if (v555 >= v554)
                {
                  v556 = *((unsigned __int8 *)v761 + 35);
                  v557 = *((unsigned __int8 *)v548 + 35);
                  if (v556 < v557)
                    goto LABEL_836;
                  if (v557 >= v556)
                  {
                    v558 = *((unsigned __int8 *)v761 + 36);
                    v559 = *((unsigned __int8 *)v548 + 36);
                    if (v558 < v559)
                      goto LABEL_836;
                    if (v559 >= v558)
                    {
                      v560 = *((unsigned __int8 *)v761 + 37);
                      v561 = *((unsigned __int8 *)v548 + 37);
                      if (v560 < v561)
                        goto LABEL_836;
                      if (v561 >= v560)
                      {
                        v562 = *((unsigned __int8 *)v761 + 38);
                        v563 = *((unsigned __int8 *)v548 + 38);
                        if (v562 < v563)
                          goto LABEL_836;
                        if (v563 >= v562)
                        {
                          v564 = *((unsigned __int8 *)v761 + 39);
                          v565 = *((unsigned __int8 *)v548 + 39);
                          if (v564 < v565)
                            goto LABEL_836;
                          if (v565 >= v564)
                          {
                            v566 = *((unsigned __int8 *)v761 + 40);
                            v567 = *((unsigned __int8 *)v548 + 40);
                            if (v566 < v567)
                              goto LABEL_836;
                            if (v567 >= v566)
                            {
                              v568 = *((unsigned __int8 *)v761 + 41);
                              v569 = *((unsigned __int8 *)v548 + 41);
                              if (v568 < v569)
                                goto LABEL_836;
                              if (v569 >= v568)
                              {
                                v570 = *((unsigned __int8 *)v761 + 42);
                                v571 = *((unsigned __int8 *)v548 + 42);
                                if (v570 < v571)
                                  goto LABEL_836;
                                if (v571 >= v570)
                                {
                                  v572 = *((unsigned __int8 *)v761 + 43);
                                  v573 = *((unsigned __int8 *)v548 + 43);
                                  if (v572 < v573
                                    || v573 >= v572
                                    && ((v574 = *((unsigned __int8 *)v761 + 44),
                                         v575 = *((unsigned __int8 *)v548 + 44),
                                         v574 < v575)
                                     || v575 >= v574
                                     && ((v576 = *((unsigned __int8 *)v761 + 45),
                                          v577 = *((unsigned __int8 *)v548 + 45),
                                          v576 < v577)
                                      || v577 >= v576
                                      && ((v578 = *((unsigned __int8 *)v761 + 46),
                                           v579 = *((unsigned __int8 *)v548 + 46),
                                           v578 < v579)
                                       || v579 >= v578
                                       && *((unsigned __int8 *)v761 + 47) < *((unsigned __int8 *)v548 + 47)))))
                                  {
LABEL_836:
                                    v546 = *v548;
                                    v547 = v548;
                                    if (!*v548)
                                      goto LABEL_913;
                                    continue;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        }
        if (v548[4] == (_QWORD *)*v545 && v548[5] == v761[5])
        {
          if (v548[6] >= v761[6])
            goto LABEL_940;
        }
        else
        {
          v581 = *((unsigned __int8 *)v548 + 32);
          v582 = *(unsigned __int8 *)v545;
          if (v581 >= v582)
          {
            if (v582 < v581)
              goto LABEL_940;
            v583 = *((unsigned __int8 *)v548 + 33);
            v584 = *((unsigned __int8 *)v761 + 33);
            if (v583 >= v584)
            {
              if (v584 < v583)
                goto LABEL_940;
              v585 = *((unsigned __int8 *)v548 + 34);
              v586 = *((unsigned __int8 *)v761 + 34);
              if (v585 >= v586)
              {
                if (v586 < v585)
                  goto LABEL_940;
                v587 = *((unsigned __int8 *)v548 + 35);
                v588 = *((unsigned __int8 *)v761 + 35);
                if (v587 >= v588)
                {
                  if (v588 < v587)
                    goto LABEL_940;
                  v589 = *((unsigned __int8 *)v548 + 36);
                  v590 = *((unsigned __int8 *)v761 + 36);
                  if (v589 >= v590)
                  {
                    if (v590 < v589)
                      goto LABEL_940;
                    v591 = *((unsigned __int8 *)v548 + 37);
                    v592 = *((unsigned __int8 *)v761 + 37);
                    if (v591 >= v592)
                    {
                      if (v592 < v591)
                        goto LABEL_940;
                      v593 = *((unsigned __int8 *)v548 + 38);
                      v594 = *((unsigned __int8 *)v761 + 38);
                      if (v593 >= v594)
                      {
                        if (v594 < v593)
                          goto LABEL_940;
                        v595 = *((unsigned __int8 *)v548 + 39);
                        v596 = *((unsigned __int8 *)v761 + 39);
                        if (v595 >= v596)
                        {
                          if (v596 < v595)
                            goto LABEL_940;
                          v597 = *((unsigned __int8 *)v548 + 40);
                          v598 = *((unsigned __int8 *)v761 + 40);
                          if (v597 >= v598)
                          {
                            if (v598 < v597)
                              goto LABEL_940;
                            v599 = *((unsigned __int8 *)v548 + 41);
                            v600 = *((unsigned __int8 *)v761 + 41);
                            if (v599 >= v600)
                            {
                              if (v600 < v599)
                                goto LABEL_940;
                              v601 = *((unsigned __int8 *)v548 + 42);
                              v602 = *((unsigned __int8 *)v761 + 42);
                              if (v601 >= v602)
                              {
                                if (v602 < v601)
                                  goto LABEL_940;
                                v603 = *((unsigned __int8 *)v548 + 43);
                                v604 = *((unsigned __int8 *)v761 + 43);
                                if (v603 >= v604)
                                {
                                  if (v604 < v603)
                                    goto LABEL_940;
                                  v605 = *((unsigned __int8 *)v548 + 44);
                                  v606 = *((unsigned __int8 *)v761 + 44);
                                  if (v605 >= v606)
                                  {
                                    if (v606 < v605)
                                      goto LABEL_940;
                                    v607 = *((unsigned __int8 *)v548 + 45);
                                    v608 = *((unsigned __int8 *)v761 + 45);
                                    if (v607 >= v608)
                                    {
                                      if (v608 < v607)
                                        goto LABEL_940;
                                      v609 = *((unsigned __int8 *)v548 + 46);
                                      v610 = *((unsigned __int8 *)v761 + 46);
                                      if (v609 >= v610
                                        && (v610 < v609
                                         || *((unsigned __int8 *)v548 + 47) >= *((unsigned __int8 *)v761
                                                                                             + 47)))
                                      {
                                        goto LABEL_940;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v546 = v548[1];
      }
      while (v546);
      v547 = v548 + 1;
LABEL_913:
      v611 = operator new(0x38uLL);
      v612 = *(_OWORD *)v545;
      v611[6] = v761[6];
      *((_OWORD *)v611 + 2) = v612;
      *v611 = 0;
      v611[1] = 0;
      v611[2] = v548;
      *v547 = v611;
      if (*v779)
      {
        v779 = (_QWORD *)*v779;
        v611 = (_QWORD *)*v547;
      }
      v613 = v780;
      v28 = v611 == v780;
      *((_BYTE *)v611 + 24) = v611 == v780;
      if (!v28)
      {
        do
        {
          v614 = v611[2];
          if (*(_BYTE *)(v614 + 24))
            break;
          v615 = *(_QWORD **)(v614 + 16);
          v616 = *v615;
          if (*v615 == v614)
          {
            v619 = v615[1];
            if (!v619 || (v620 = *(unsigned __int8 *)(v619 + 24), v617 = (_BYTE *)(v619 + 24), v620))
            {
              if (*(_QWORD **)v614 == v611)
              {
                *(_BYTE *)(v614 + 24) = 1;
                *((_BYTE *)v615 + 24) = 0;
                v623 = *(_QWORD *)(v614 + 8);
                *v615 = v623;
                if (v623)
                  goto LABEL_930;
              }
              else
              {
                v621 = *(uint64_t **)(v614 + 8);
                v622 = *v621;
                *(_QWORD *)(v614 + 8) = *v621;
                if (v622)
                {
                  *(_QWORD *)(v622 + 16) = v614;
                  v615 = *(_QWORD **)(v614 + 16);
                }
                v621[2] = (uint64_t)v615;
                *(_QWORD *)(*(_QWORD *)(v614 + 16) + 8 * (**(_QWORD **)(v614 + 16) != v614)) = v621;
                *v621 = v614;
                *(_QWORD *)(v614 + 16) = v621;
                v615 = (_QWORD *)v621[2];
                v614 = *v615;
                *((_BYTE *)v621 + 24) = 1;
                *((_BYTE *)v615 + 24) = 0;
                v623 = *(_QWORD *)(v614 + 8);
                *v615 = v623;
                if (v623)
LABEL_930:
                  *(_QWORD *)(v623 + 16) = v615;
              }
              *(_QWORD *)(v614 + 16) = v615[2];
              *(_QWORD *)(v615[2] + 8 * (*(_QWORD *)v615[2] != (_QWORD)v615)) = v614;
              *(_QWORD *)(v614 + 8) = v615;
LABEL_938:
              v615[2] = v614;
              break;
            }
          }
          else if (!v616 || (v618 = *(unsigned __int8 *)(v616 + 24), v617 = (_BYTE *)(v616 + 24), v618))
          {
            if (*(_QWORD **)v614 == v611)
            {
              v627 = v611[1];
              *(_QWORD *)v614 = v627;
              if (v627)
              {
                *(_QWORD *)(v627 + 16) = v614;
                v615 = *(_QWORD **)(v614 + 16);
              }
              v611[2] = v615;
              *(_QWORD *)(*(_QWORD *)(v614 + 16) + 8 * (**(_QWORD **)(v614 + 16) != v614)) = v611;
              v611[1] = v614;
              *(_QWORD *)(v614 + 16) = v611;
              v615 = (_QWORD *)v611[2];
              *((_BYTE *)v611 + 24) = 1;
              *((_BYTE *)v615 + 24) = 0;
              v614 = v615[1];
              v624 = *(_QWORD **)v614;
              v615[1] = *(_QWORD *)v614;
              if (v624)
LABEL_936:
                v624[2] = v615;
            }
            else
            {
              *(_BYTE *)(v614 + 24) = 1;
              *((_BYTE *)v615 + 24) = 0;
              v614 = v615[1];
              v624 = *(_QWORD **)v614;
              v615[1] = *(_QWORD *)v614;
              if (v624)
                goto LABEL_936;
            }
            *(_QWORD *)(v614 + 16) = v615[2];
            *(_QWORD *)(v615[2] + 8 * (*(_QWORD *)v615[2] != (_QWORD)v615)) = v614;
            *(_QWORD *)v614 = v615;
            goto LABEL_938;
          }
          *(_BYTE *)(v614 + 24) = 1;
          v611 = v615;
          *((_BYTE *)v615 + 24) = v615 == v613;
          *v617 = 1;
        }
        while (v615 != v613);
      }
      ++v781;
LABEL_940:
      v625 = v761[1];
      if (v625)
      {
        do
        {
          v626 = (_QWORD **)v625;
          v625 = (_QWORD *)*v625;
        }
        while (v625);
      }
      else
      {
        do
        {
          v626 = (_QWORD **)v544[2];
          v28 = *v626 == v544;
          v544 = v626;
        }
        while (!v28);
      }
      v24 = v626;
      if (v626 == &v777)
      {
        v628 = v773;
        if (v773 != &v774)
        {
          v629 = v778;
          do
          {
            v630 = v628 + 4;
            v631 = v777;
            v632 = &v777;
LABEL_957:
            v633 = v632;
            if (v631)
            {
              do
              {
                v632 = (_QWORD **)v631;
                if (*v630 == v631[4] && v628[5] == (_QWORD *)v631[5])
                {
                  if ((unint64_t)v628[6] < v631[6])
                    goto LABEL_956;
                }
                else
                {
                  v635 = *(unsigned __int8 *)v630;
                  v636 = *((unsigned __int8 *)v632 + 32);
                  if (v635 < v636)
                    goto LABEL_956;
                  if (v636 >= v635)
                  {
                    v637 = *((unsigned __int8 *)v628 + 33);
                    v638 = *((unsigned __int8 *)v632 + 33);
                    if (v637 < v638)
                      goto LABEL_956;
                    if (v638 >= v637)
                    {
                      v639 = *((unsigned __int8 *)v628 + 34);
                      v640 = *((unsigned __int8 *)v632 + 34);
                      if (v639 < v640)
                        goto LABEL_956;
                      if (v640 >= v639)
                      {
                        v641 = *((unsigned __int8 *)v628 + 35);
                        v642 = *((unsigned __int8 *)v632 + 35);
                        if (v641 < v642)
                          goto LABEL_956;
                        if (v642 >= v641)
                        {
                          v643 = *((unsigned __int8 *)v628 + 36);
                          v644 = *((unsigned __int8 *)v632 + 36);
                          if (v643 < v644)
                            goto LABEL_956;
                          if (v644 >= v643)
                          {
                            v645 = *((unsigned __int8 *)v628 + 37);
                            v646 = *((unsigned __int8 *)v632 + 37);
                            if (v645 < v646)
                              goto LABEL_956;
                            if (v646 >= v645)
                            {
                              v647 = *((unsigned __int8 *)v628 + 38);
                              v648 = *((unsigned __int8 *)v632 + 38);
                              if (v647 < v648)
                                goto LABEL_956;
                              if (v648 >= v647)
                              {
                                v649 = *((unsigned __int8 *)v628 + 39);
                                v650 = *((unsigned __int8 *)v632 + 39);
                                if (v649 < v650)
                                  goto LABEL_956;
                                if (v650 >= v649)
                                {
                                  v651 = *((unsigned __int8 *)v628 + 40);
                                  v652 = *((unsigned __int8 *)v632 + 40);
                                  if (v651 < v652)
                                    goto LABEL_956;
                                  if (v652 >= v651)
                                  {
                                    v653 = *((unsigned __int8 *)v628 + 41);
                                    v654 = *((unsigned __int8 *)v632 + 41);
                                    if (v653 < v654)
                                      goto LABEL_956;
                                    if (v654 >= v653)
                                    {
                                      v655 = *((unsigned __int8 *)v628 + 42);
                                      v656 = *((unsigned __int8 *)v632 + 42);
                                      if (v655 < v656)
                                        goto LABEL_956;
                                      if (v656 >= v655)
                                      {
                                        v657 = *((unsigned __int8 *)v628 + 43);
                                        v658 = *((unsigned __int8 *)v632 + 43);
                                        if (v657 < v658
                                          || v658 >= v657
                                          && ((v659 = *((unsigned __int8 *)v628 + 44),
                                               v660 = *((unsigned __int8 *)v632 + 44),
                                               v659 < v660)
                                           || v660 >= v659
                                           && ((v661 = *((unsigned __int8 *)v628 + 45),
                                                v662 = *((unsigned __int8 *)v632 + 45),
                                                v661 < v662)
                                            || v662 >= v661
                                            && ((v663 = *((unsigned __int8 *)v628 + 46),
                                                 v664 = *((unsigned __int8 *)v632 + 46),
                                                 v663 < v664)
                                             || v664 >= v663
                                             && *((unsigned __int8 *)v628 + 47) < *((unsigned __int8 *)v632
                                                                                                + 47)))))
                                        {
LABEL_956:
                                          v631 = *v632;
                                          goto LABEL_957;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (v632[4] == (_QWORD *)*v630 && v632[5] == v628[5])
                {
                  if (v632[6] >= v628[6])
                    goto LABEL_1059;
                }
                else
                {
                  v666 = *((unsigned __int8 *)v632 + 32);
                  v667 = *(unsigned __int8 *)v630;
                  if (v666 >= v667)
                  {
                    if (v667 < v666)
                      goto LABEL_1059;
                    v668 = *((unsigned __int8 *)v632 + 33);
                    v669 = *((unsigned __int8 *)v628 + 33);
                    if (v668 >= v669)
                    {
                      if (v669 < v668)
                        goto LABEL_1059;
                      v670 = *((unsigned __int8 *)v632 + 34);
                      v671 = *((unsigned __int8 *)v628 + 34);
                      if (v670 >= v671)
                      {
                        if (v671 < v670)
                          goto LABEL_1059;
                        v672 = *((unsigned __int8 *)v632 + 35);
                        v673 = *((unsigned __int8 *)v628 + 35);
                        if (v672 >= v673)
                        {
                          if (v673 < v672)
                            goto LABEL_1059;
                          v674 = *((unsigned __int8 *)v632 + 36);
                          v675 = *((unsigned __int8 *)v628 + 36);
                          if (v674 >= v675)
                          {
                            if (v675 < v674)
                              goto LABEL_1059;
                            v676 = *((unsigned __int8 *)v632 + 37);
                            v677 = *((unsigned __int8 *)v628 + 37);
                            if (v676 >= v677)
                            {
                              if (v677 < v676)
                                goto LABEL_1059;
                              v678 = *((unsigned __int8 *)v632 + 38);
                              v679 = *((unsigned __int8 *)v628 + 38);
                              if (v678 >= v679)
                              {
                                if (v679 < v678)
                                  goto LABEL_1059;
                                v680 = *((unsigned __int8 *)v632 + 39);
                                v681 = *((unsigned __int8 *)v628 + 39);
                                if (v680 >= v681)
                                {
                                  if (v681 < v680)
                                    goto LABEL_1059;
                                  v682 = *((unsigned __int8 *)v632 + 40);
                                  v683 = *((unsigned __int8 *)v628 + 40);
                                  if (v682 >= v683)
                                  {
                                    if (v683 < v682)
                                      goto LABEL_1059;
                                    v684 = *((unsigned __int8 *)v632 + 41);
                                    v685 = *((unsigned __int8 *)v628 + 41);
                                    if (v684 >= v685)
                                    {
                                      if (v685 < v684)
                                        goto LABEL_1059;
                                      v686 = *((unsigned __int8 *)v632 + 42);
                                      v687 = *((unsigned __int8 *)v628 + 42);
                                      if (v686 >= v687)
                                      {
                                        if (v687 < v686)
                                          goto LABEL_1059;
                                        v688 = *((unsigned __int8 *)v632 + 43);
                                        v689 = *((unsigned __int8 *)v628 + 43);
                                        if (v688 >= v689)
                                        {
                                          if (v689 < v688)
                                            goto LABEL_1059;
                                          v690 = *((unsigned __int8 *)v632 + 44);
                                          v691 = *((unsigned __int8 *)v628 + 44);
                                          if (v690 >= v691)
                                          {
                                            if (v691 < v690)
                                              goto LABEL_1059;
                                            v692 = *((unsigned __int8 *)v632 + 45);
                                            v693 = *((unsigned __int8 *)v628 + 45);
                                            if (v692 >= v693)
                                            {
                                              if (v693 < v692)
                                                goto LABEL_1059;
                                              v694 = *((unsigned __int8 *)v632 + 46);
                                              v695 = *((unsigned __int8 *)v628 + 46);
                                              if (v694 >= v695
                                                && (v695 < v694
                                                 || *((unsigned __int8 *)v632 + 47) >= *((unsigned __int8 *)v628 + 47)))
                                              {
                                                goto LABEL_1059;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v631 = v632[1];
              }
              while (v631);
              v633 = v632 + 1;
            }
            v696 = operator new(0x38uLL);
            v697 = *(_OWORD *)v630;
            v696[6] = v628[6];
            *((_OWORD *)v696 + 2) = v697;
            *v696 = 0;
            v696[1] = 0;
            v696[2] = v632;
            *v633 = v696;
            if (*v776)
            {
              v776 = (_QWORD **)*v776;
              v696 = (_QWORD *)*v633;
            }
            v698 = v777;
            v28 = v696 == v777;
            *((_BYTE *)v696 + 24) = v696 == v777;
            if (!v28)
            {
              do
              {
                v699 = v696[2];
                if (*(_BYTE *)(v699 + 24))
                  break;
                v700 = *(_QWORD **)(v699 + 16);
                v701 = *v700;
                if (*v700 == v699)
                {
                  v704 = v700[1];
                  if (!v704 || (v705 = *(unsigned __int8 *)(v704 + 24), v702 = (_BYTE *)(v704 + 24), v705))
                  {
                    if (*(_QWORD **)v699 == v696)
                    {
                      *(_BYTE *)(v699 + 24) = 1;
                      *((_BYTE *)v700 + 24) = 0;
                      v708 = *(_QWORD *)(v699 + 8);
                      *v700 = v708;
                      if (v708)
                        goto LABEL_1051;
                    }
                    else
                    {
                      v706 = *(uint64_t **)(v699 + 8);
                      v707 = *v706;
                      *(_QWORD *)(v699 + 8) = *v706;
                      if (v707)
                      {
                        *(_QWORD *)(v707 + 16) = v699;
                        v700 = *(_QWORD **)(v699 + 16);
                      }
                      v706[2] = (uint64_t)v700;
                      *(_QWORD *)(*(_QWORD *)(v699 + 16) + 8 * (**(_QWORD **)(v699 + 16) != v699)) = v706;
                      *v706 = v699;
                      *(_QWORD *)(v699 + 16) = v706;
                      v700 = (_QWORD *)v706[2];
                      v699 = *v700;
                      *((_BYTE *)v706 + 24) = 1;
                      *((_BYTE *)v700 + 24) = 0;
                      v708 = *(_QWORD *)(v699 + 8);
                      *v700 = v708;
                      if (v708)
LABEL_1051:
                        *(_QWORD *)(v708 + 16) = v700;
                    }
                    *(_QWORD *)(v699 + 16) = v700[2];
                    *(_QWORD *)(v700[2] + 8 * (*(_QWORD *)v700[2] != (_QWORD)v700)) = v699;
                    *(_QWORD *)(v699 + 8) = v700;
LABEL_1057:
                    v700[2] = v699;
                    break;
                  }
                }
                else if (!v701 || (v703 = *(unsigned __int8 *)(v701 + 24), v702 = (_BYTE *)(v701 + 24), v703))
                {
                  if (*(_QWORD **)v699 == v696)
                  {
                    v712 = v696[1];
                    *(_QWORD *)v699 = v712;
                    if (v712)
                    {
                      *(_QWORD *)(v712 + 16) = v699;
                      v700 = *(_QWORD **)(v699 + 16);
                    }
                    v696[2] = v700;
                    *(_QWORD *)(*(_QWORD *)(v699 + 16) + 8 * (**(_QWORD **)(v699 + 16) != v699)) = v696;
                    v696[1] = v699;
                    *(_QWORD *)(v699 + 16) = v696;
                    v700 = (_QWORD *)v696[2];
                    *((_BYTE *)v696 + 24) = 1;
                    *((_BYTE *)v700 + 24) = 0;
                    v699 = v700[1];
                    v709 = *(_QWORD **)v699;
                    v700[1] = *(_QWORD *)v699;
                    if (v709)
LABEL_1055:
                      v709[2] = v700;
                  }
                  else
                  {
                    *(_BYTE *)(v699 + 24) = 1;
                    *((_BYTE *)v700 + 24) = 0;
                    v699 = v700[1];
                    v709 = *(_QWORD **)v699;
                    v700[1] = *(_QWORD *)v699;
                    if (v709)
                      goto LABEL_1055;
                  }
                  *(_QWORD *)(v699 + 16) = v700[2];
                  *(_QWORD *)(v700[2] + 8 * (*(_QWORD *)v700[2] != (_QWORD)v700)) = v699;
                  *(_QWORD *)v699 = v700;
                  goto LABEL_1057;
                }
                *(_BYTE *)(v699 + 24) = 1;
                v696 = v700;
                *((_BYTE *)v700 + 24) = v700 == v698;
                *v702 = 1;
              }
              while (v700 != v698);
            }
            v778 = ++v629;
LABEL_1059:
            v710 = v628[1];
            if (v710)
            {
              do
              {
                v711 = (_QWORD **)v710;
                v710 = (_QWORD *)*v710;
              }
              while (v710);
            }
            else
            {
              do
              {
                v711 = (_QWORD **)v628[2];
                v28 = *v711 == v628;
                v628 = v711;
              }
              while (!v28);
            }
            v628 = v711;
          }
          while (v711 != &v774);
        }
        goto LABEL_3;
      }
    }
  }
LABEL_1071:
  *((_QWORD *)&v792 + 1) = 0;
  v793 = 0;
  *(_QWORD *)&v792 = (char *)&v792 + 8;
  v713 = v776;
  if (v776 == &v777)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_1144;
  }
  while (2)
  {
    v714 = 0;
    v715 = (_QWORD *)sub_20EEF0588(v8, (uint64_t)(v713 + 4))[7];
    v716 = v715[8] + 12 * v713[6];
    v717 = v793;
LABEL_1079:
    while (2)
    {
      while (2)
      {
        v719 = (float *)(*v715 + 12 * *(unsigned int *)(v716 + 4 * v714));
        v720 = (char *)*((_QWORD *)&v792 + 1);
        v721 = (char **)&v792 + 1;
        v722 = (char **)&v792 + 1;
        if (*((_QWORD *)&v792 + 1))
        {
          v723 = *v719;
          v724 = v719[1];
          v725 = v719[2];
          while (1)
          {
            v722 = (char **)v720;
            v726 = *((float *)v720 + 7);
            if (v723 < v726)
              goto LABEL_1081;
            if (v726 < v723)
              goto LABEL_1084;
            v727 = *((float *)v720 + 8);
            if (v724 < v727)
              goto LABEL_1081;
            if (v727 < v724)
              goto LABEL_1084;
            v728 = *((float *)v720 + 9);
            if (v725 < v728)
            {
LABEL_1081:
              v720 = *(char **)v720;
              v721 = v722;
              if (!*v722)
                break;
            }
            else
            {
              if (v728 >= v725)
              {
                v8 = v763;
                if (++v714 == 3)
                  goto LABEL_1118;
                goto LABEL_1079;
              }
LABEL_1084:
              v720 = (char *)*((_QWORD *)v720 + 1);
              if (!v720)
              {
                v721 = v722 + 1;
                break;
              }
            }
          }
        }
        v729 = (char *)operator new(0x28uLL);
        v730 = *(_QWORD *)v719;
        *((float *)v729 + 9) = v719[2];
        *(_QWORD *)(v729 + 28) = v730;
        *(_QWORD *)v729 = 0;
        *((_QWORD *)v729 + 1) = 0;
        *((_QWORD *)v729 + 2) = v722;
        *v721 = v729;
        if (*(_QWORD *)v792)
        {
          *(_QWORD *)&v792 = *(_QWORD *)v792;
          v729 = *v721;
        }
        v731 = (char *)*((_QWORD *)&v792 + 1);
        v729[24] = v729 == *((char **)&v792 + 1);
        v8 = v763;
        if (v729 == v731)
        {
LABEL_1078:
          v793 = ++v717;
          if (++v714 == 3)
            goto LABEL_1118;
          continue;
        }
        break;
      }
      while (1)
      {
        v732 = *((_QWORD *)v729 + 2);
        if (*(_BYTE *)(v732 + 24))
          goto LABEL_1078;
        v733 = *(char **)(v732 + 16);
        v734 = *(_QWORD *)v733;
        if (*(_QWORD *)v733 != v732)
          break;
        v737 = *((_QWORD *)v733 + 1);
        if (!v737 || (v738 = *(unsigned __int8 *)(v737 + 24), v735 = (_BYTE *)(v737 + 24), v738))
        {
          if (*(char **)v732 == v729)
          {
            *(_BYTE *)(v732 + 24) = 1;
            v733[24] = 0;
            v718 = *(_QWORD *)(v732 + 8);
            *(_QWORD *)v733 = v718;
            if (v718)
              goto LABEL_1076;
          }
          else
          {
            v739 = *(uint64_t **)(v732 + 8);
            v740 = *v739;
            *(_QWORD *)(v732 + 8) = *v739;
            if (v740)
            {
              *(_QWORD *)(v740 + 16) = v732;
              v733 = *(char **)(v732 + 16);
            }
            v739[2] = (uint64_t)v733;
            *(_QWORD *)(*(_QWORD *)(v732 + 16) + 8 * (**(_QWORD **)(v732 + 16) != v732)) = v739;
            *v739 = v732;
            *(_QWORD *)(v732 + 16) = v739;
            v733 = (char *)v739[2];
            v732 = *(_QWORD *)v733;
            *((_BYTE *)v739 + 24) = 1;
            v733[24] = 0;
            v718 = *(_QWORD *)(v732 + 8);
            *(_QWORD *)v733 = v718;
            if (!v718)
              goto LABEL_1077;
LABEL_1076:
            *(_QWORD *)(v718 + 16) = v733;
          }
LABEL_1077:
          *(_QWORD *)(v732 + 16) = *((_QWORD *)v733 + 2);
          *(_QWORD *)(*((_QWORD *)v733 + 2) + 8 * (**((_QWORD **)v733 + 2) != (_QWORD)v733)) = v732;
          *(_QWORD *)(v732 + 8) = v733;
          *((_QWORD *)v733 + 2) = v732;
          goto LABEL_1078;
        }
LABEL_1096:
        *(_BYTE *)(v732 + 24) = 1;
        v729 = v733;
        v733[24] = v733 == v731;
        *v735 = 1;
        if (v733 == v731)
          goto LABEL_1078;
      }
      if (v734)
      {
        v736 = *(unsigned __int8 *)(v734 + 24);
        v735 = (_BYTE *)(v734 + 24);
        if (!v736)
          goto LABEL_1096;
      }
      if (*(char **)v732 == v729)
      {
        v743 = *((_QWORD *)v729 + 1);
        *(_QWORD *)v732 = v743;
        if (v743)
        {
          *(_QWORD *)(v743 + 16) = v732;
          v733 = *(char **)(v732 + 16);
        }
        *((_QWORD *)v729 + 2) = v733;
        *(_QWORD *)(*(_QWORD *)(v732 + 16) + 8 * (**(_QWORD **)(v732 + 16) != v732)) = v729;
        *((_QWORD *)v729 + 1) = v732;
        *(_QWORD *)(v732 + 16) = v729;
        v733 = (char *)*((_QWORD *)v729 + 2);
        v729[24] = 1;
        v733[24] = 0;
        v741 = (uint64_t *)*((_QWORD *)v733 + 1);
        v742 = *v741;
        *((_QWORD *)v733 + 1) = *v741;
        if (v742)
LABEL_1111:
          *(_QWORD *)(v742 + 16) = v733;
      }
      else
      {
        *(_BYTE *)(v732 + 24) = 1;
        v733[24] = 0;
        v741 = (uint64_t *)*((_QWORD *)v733 + 1);
        v742 = *v741;
        *((_QWORD *)v733 + 1) = *v741;
        if (v742)
          goto LABEL_1111;
      }
      v741[2] = *((_QWORD *)v733 + 2);
      *(_QWORD *)(*((_QWORD *)v733 + 2) + 8 * (**((_QWORD **)v733 + 2) != (_QWORD)v733)) = v741;
      *v741 = (uint64_t)v733;
      *((_QWORD *)v733 + 2) = v741;
      v793 = ++v717;
      if (++v714 != 3)
        continue;
      break;
    }
LABEL_1118:
    v744 = (_QWORD *)v713[1];
    if (v744)
    {
      do
      {
        v745 = (_QWORD **)v744;
        v744 = (_QWORD *)*v744;
      }
      while (v744);
    }
    else
    {
      do
      {
        v745 = (_QWORD **)v713[2];
        v28 = *v745 == v713;
        v713 = v745;
      }
      while (!v28);
    }
    v713 = v745;
    if (v745 != &v777)
      continue;
    break;
  }
  v746 = (_OWORD *)v792;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  if (v746 != (__int128 *)((char *)&v792 + 8))
  {
    v747 = 0;
    v748 = v746;
    do
    {
      v749 = v747;
      v750 = (_QWORD *)*((_QWORD *)v748 + 1);
      if (v750)
      {
        do
        {
          v751 = v750;
          v750 = (_QWORD *)*v750;
        }
        while (v750);
      }
      else
      {
        do
        {
          v751 = (_OWORD *)*((_QWORD *)v748 + 2);
          v28 = *(_QWORD *)v751 == (_QWORD)v748;
          v748 = v751;
        }
        while (!v28);
      }
      ++v747;
      v748 = v751;
    }
    while (v751 != (__int128 *)((char *)&v792 + 8));
    if (v749 >= 0x1555555555555555)
      sub_20E867F44();
    v752 = operator new(12 * v747);
    *a5 = v752;
    a5[1] = v752;
    a5[2] = &v752[3 * v747];
    do
    {
      v753 = *(_QWORD *)((char *)v746 + 28);
      v752[2] = *((_DWORD *)v746 + 9);
      *(_QWORD *)v752 = v753;
      v754 = (_QWORD *)*((_QWORD *)v746 + 1);
      if (v754)
      {
        do
        {
          v755 = v754;
          v754 = (_QWORD *)*v754;
        }
        while (v754);
      }
      else
      {
        do
        {
          v755 = (_OWORD *)*((_QWORD *)v746 + 2);
          v28 = *(_QWORD *)v755 == (_QWORD)v746;
          v746 = v755;
        }
        while (!v28);
      }
      v752 += 3;
      v746 = v755;
    }
    while (v755 != (__int128 *)((char *)&v792 + 8));
    a5[1] = v752;
  }
LABEL_1144:
  sub_20E9BCAA8(*((_QWORD **)&v792 + 1));
  sub_20E9BCAA8(v777);
  sub_20E9BCAA8(v780);
}

void sub_20EEF0250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,_QWORD *a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  void **v39;
  uint64_t v40;
  void *v42;

  v42 = *v39;
  if (*v39)
  {
    *(_QWORD *)(a9 + 8) = v42;
    operator delete(v42);
  }
  sub_20E9BCAA8(*(_QWORD **)(v40 - 152));
  sub_20E9BCAA8(a36);
  sub_20E9BCAA8(a39);
  _Unwind_Resume(a1);
}

void sub_20EEF02D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,uint64_t a35,_QWORD *a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  void *v39;
  uint64_t v40;
  uint64_t v41;

  *(_QWORD *)(v41 - 248) = v39;
  *(_QWORD *)(v41 - 232) = v40;
  if (v39)
  {
    *(_QWORD *)(v41 - 240) = v39;
    operator delete(v39);
  }
  sub_20E9BCAA8(a33);
  sub_20E9BCAA8(a36);
  sub_20E9BCAA8(a39);
  _Unwind_Resume(a1);
}

void sub_20EEF02E8()
{
  _QWORD *v0;

  sub_20E9BCAA8(v0);
  JUMPOUT(0x20EEF02F4);
}

void sub_20EEF0300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,uint64_t a35,_QWORD *a36,uint64_t a37,uint64_t a38,_QWORD *a39,uint64_t a40,uint64_t a41,_QWORD *a42)
{
  uint64_t v42;
  void *v44;

  sub_20E9BCAA8(a42);
  v44 = *(void **)(v42 - 248);
  if (v44)
    operator delete(v44);
  sub_20E9BCAA8(a33);
  sub_20E9BCAA8(a36);
  sub_20E9BCAA8(a39);
  _Unwind_Resume(a1);
}

void sub_20EEF031C()
{
  JUMPOUT(0x20EEF0324);
}

void sub_20EEF0338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30)
{
  sub_20E9BCAA8(a30);
  JUMPOUT(0x20EEF0344);
}

uint64_t sub_20EEF0364(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EEF03CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F10D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EEF03DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F10D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EEF040C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD **)(a1 + 40);
  while (v2)
  {
    v4 = v2;
    v2 = (_QWORD *)*v2;
    v5 = (std::__shared_weak_count *)v4[8];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(v4);
  }
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    operator delete(v3);
}

uint64_t sub_20EEF04A8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (result)
  {
    v1 = result;
    v2 = *(std::__shared_weak_count **)(result + 48);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(_QWORD **)(v1 + 16);
    while (v5)
    {
      v7 = v5;
      v5 = (_QWORD *)*v5;
      v8 = (std::__shared_weak_count *)v7[8];
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      operator delete(v7);
    }
    v6 = *(void **)v1;
    *(_QWORD *)v1 = 0;
    if (v6)
      operator delete(v6);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

_QWORD *sub_20EEF0588(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v12;
  uint64_t v14;

  v4 = sub_2102322B4((unsigned __int8 *)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return v8;
  v8 = (_QWORD *)*v8;
  if (!v8)
    return v8;
  if (v6.u32[0] >= 2uLL)
  {
    while (1)
    {
      v12 = v8[1];
      if (v4 == v12)
      {
        if (v8[2] == *(_QWORD *)a2 && v8[3] == *(_QWORD *)(a2 + 8))
          return v8;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v7)
          return 0;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        return v8;
    }
  }
  v10 = *(_QWORD *)&v5 - 1;
  while (1)
  {
    v14 = v8[1];
    if (v4 != v14)
      break;
    if (v8[2] == *(_QWORD *)a2 && v8[3] == *(_QWORD *)(a2 + 8))
      return v8;
LABEL_26:
    v8 = (_QWORD *)*v8;
    if (!v8)
      return v8;
  }
  if ((v14 & v10) == v7)
    goto LABEL_26;
  return 0;
}

BOOL sub_20EEF06B8(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  char v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;
  float v10;
  float *v12[3];

  v12[0] = (float *)a1;
  v12[1] = (float *)a2;
  result = sub_20EEF0B20(v12);
  if (!result)
    return result;
  if (*(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
    return 0;
  if (*(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68) || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
    return 0;
  v5 = (*(_BYTE *)(a1 + 112) != 0) ^ (*(_BYTE *)(a2 + 112) != 0);
  if (*(_BYTE *)(a1 + 112) && *(_BYTE *)(a2 + 112))
  {
    if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80) || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88))
      return 0;
    v5 = (*(_BYTE *)(a1 + 100) != 0) ^ (*(_BYTE *)(a2 + 100) != 0);
    if (*(_BYTE *)(a1 + 100))
    {
      if (*(_BYTE *)(a2 + 100))
      {
        v6 = *(float *)(a1 + 96);
        v7 = *(float *)(a2 + 96);
        v8 = v6 < v7;
        if (v6 == v7)
          goto LABEL_15;
        v9 = v6 - v7;
        v10 = v7 - v6;
        if (!v8)
          v10 = v9;
        if (v10 <= 0.000001)
          goto LABEL_15;
        return 0;
      }
    }
  }
  if ((v5 & 1) != 0)
    return 0;
LABEL_15:
  result = (*(_BYTE *)(a1 + 136) != 0) == (*(_BYTE *)(a2 + 136) != 0);
  if (*(_BYTE *)(a1 + 136) && *(_BYTE *)(a2 + 136))
    return *(_QWORD *)(a1 + 120) == *(_QWORD *)(a2 + 120) && *(_QWORD *)(a1 + 128) == *(_QWORD *)(a2 + 128);
  return result;
}

uint64_t sub_20EEF0820@<X0>(uint64_t result@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>, float32x4_t a5@<Q2>, double a6@<D7>)
{
  float32x4_t v6;
  __int128 v7;
  float32x4_t v8;
  unsigned int v9;
  float32x2_t v10;
  float32x4_t v11;
  float32x2_t v12;
  float v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  float32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;

  v7 = *(_OWORD *)(a3 + 16);
  a4.i32[0] = *(_DWORD *)(result + 8);
  a5.i64[0] = *(_QWORD *)result;
  v8 = a5;
  v8.i32[2] = a4.i32[0];
  v9 = HIDWORD(*(_QWORD *)result);
  *((_QWORD *)&v7 + 1) = *(_QWORD *)result;
  *(_DWORD *)(a3 + 32) = a4.i32[0];
  *(_OWORD *)(a3 + 16) = v7;
  if (fabsf(vadd_f32(*(float32x2_t *)a4.f32, vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.f32, 0), 0, *(float32x2_t *)a5.f32, 1)).f32[0]) <= 0.70711)
  {
    v22 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL);
    v23 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL);
    v24 = vaddq_f32(vmulq_f32(v22, (float32x4_t)xmmword_210389A10), vmulq_f32(v23, (float32x4_t)xmmword_2102DD700));
    v25 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    v21 = (int32x4_t)vmulq_n_f32(v24, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.f32, 1), *(float32x2_t *)v24.f32, 1), v25, v25).f32[0]));
    v30 = vmlsq_f32(vmulq_f32(v23, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v21, (int8x16_t)v21, 0xCuLL), (int8x16_t)v21, 8uLL)), v22, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL));
    v26 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
    v18 = (int32x4_t)vmulq_n_f32(v30, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.f32, 1), *(float32x2_t *)v30.f32, 1), v26, v26).f32[0]));
    v27 = v18.i32[2];
    v28 = v18.i32[1];
    v29 = v21.i32[2];
    v30.i32[0] = v21.i32[1];
  }
  else
  {
    v10 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 1);
    LODWORD(a6) = a2[1].i32[0];
    *(int32x2_t *)v6.f32 = *a2;
    v11 = v6;
    v12 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32), (float32x2_t)vdup_lane_s32(*a2, 1), (float32x2_t)*a2, 1), *(float32x2_t *)&a6, *(float32x2_t *)&a6);
    v12.f32[0] = 1.0 / sqrtf(v12.f32[0]);
    *(float *)&a6 = fabsf(vmla_f32(vmla_f32(vmul_f32(vmul_f32((float32x2_t)*a2, v12), *(float32x2_t *)a5.f32), v10, vmul_lane_f32(v12, (float32x2_t)*a2, 1)), *(float32x2_t *)a4.f32, vmul_f32(*(float32x2_t *)&a6, v12)).f32[0]);
    if (*(float *)&a6 == 1.0
      || (*(float *)&a6 >= 1.0 ? (v13 = *(float *)&a6 + -1.0) : (v13 = 1.0 - *(float *)&a6), v13 <= 0.000001))
    {
      *(_QWORD *)(a3 + 12) = 0x3F80000000000000;
      v31 = (int32x4_t)vmulq_f32(v8, (float32x4_t)xmmword_210389930);
      v32 = (int8x16_t)vmulq_f32(v8, (float32x4_t)xmmword_210389A10);
      a4 = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v32, v32, 0xCuLL), v32, 8uLL));
      *(_DWORD *)(a3 + 20) = 0;
      a5.i64[0] = vextq_s8((int8x16_t)a4, (int8x16_t)a4, 8uLL).u64[0];
      v18 = (int32x4_t)vmulq_n_f32(a4, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)a4.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4.f32, 1), *(float32x2_t *)a4.f32, 1), *(float32x2_t *)a5.f32, *(float32x2_t *)a5.f32).f32[0]));
      a4.i32[0] = *(_DWORD *)(a3 + 32);
      v33 = (int32x4_t)vextq_s8(*(int8x16_t *)(a3 + 16), (int8x16_t)a4, 8uLL);
      v9 = HIDWORD(*(_OWORD *)(a3 + 16));
      v34 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v33, (int8x16_t)v33, 0xCuLL), (int8x16_t)v33, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL), (int8x16_t)v18, 8uLL));
      a5.i32[0] = *(_QWORD *)(a3 + 24);
      v35 = (float32x2_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
      v21 = (int32x4_t)vmulq_n_f32(v34, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.f32, 1), *(float32x2_t *)v34.f32, 1), v35, v35).f32[0]));
    }
    else
    {
      v11.i32[2] = a2[1].i32[0];
      v14 = vnegq_f32(v11);
      v15 = (float32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
      v11.f32[0] = 1.0
                 / sqrtf(vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.f32, 1), *(float32x2_t *)v11.f32, 1), v15, v15).f32[0]);
      v16 = vmulq_n_f32(v14, v11.f32[0]);
      v17 = vmlsq_lane_f32(v16, v8, vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v8.f32), v10, vmul_lane_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v14.f32, 1)), *(float32x2_t *)a4.f32, vmul_f32(*(float32x2_t *)v11.f32, v15)), 0);
      v14.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
      v18 = (int32x4_t)vmulq_n_f32(vnegq_f32(v17), 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1), *(float32x2_t *)v17.f32, 1), *(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32).f32[0]));
      v19 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL), (int8x16_t)v18, 8uLL));
      v20 = (float32x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      v21 = (int32x4_t)vmulq_n_f32(v19, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1), *(float32x2_t *)v19.f32, 1), v20, v20).f32[0]));
    }
    v29 = v21.i32[2];
    v30.i32[0] = v21.i32[1];
    v27 = v18.i32[2];
    v28 = v18.i32[1];
  }
  v18.i32[1] = v28;
  v18.i64[1] = __PAIR64__(v21.u32[0], v27);
  *(_DWORD *)(a3 + 32) = a4.i32[0];
  v30.i32[1] = v29;
  v30.i64[1] = __PAIR64__(v9, a5.u32[0]);
  *(int32x4_t *)a3 = v18;
  *(float32x4_t *)(a3 + 16) = v30;
  return result;
}

BOOL sub_20EEF0B20(float **a1)
{
  float *v1;
  float *v2;

  v1 = *a1;
  v2 = a1[1];
  return **a1 == *v2
      && v1[1] == v2[1]
      && v1[2] == v2[2]
      && v1[3] == v2[3]
      && v1[4] == v2[4]
      && v1[5] == v2[5]
      && v1[6] == v2[6]
      && v1[7] == v2[7]
      && v1[8] == v2[8]
      && v1[9] == v2[9]
      && v1[10] == v2[10]
      && v1[11] == v2[11]
      && v1[12] == v2[12]
      && v1[13] == v2[13]
      && v1[14] == v2[14]
      && v1[15] == v2[15];
}

uint64_t sub_20EEF0C34(uint64_t a1, uint64_t a2, int a3)
{
  _OWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;

  v6 = (_OWORD *)operator new();
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = (uint64_t *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 32) = v8;
  if (a3)
  {
    v9 = operator new();
    *(_QWORD *)(v9 + 64) = 0;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    v10 = *v7;
    *v7 = v9;
    if (v10)
    {
      v11 = *(void **)(v10 + 48);
      if (v11)
      {
        *(_QWORD *)(v10 + 56) = v11;
        operator delete(v11);
      }
      v12 = *(void **)(v10 + 24);
      if (v12)
      {
        *(_QWORD *)(v10 + 32) = v12;
        operator delete(v12);
      }
      v13 = *(void **)v10;
      if (*(_QWORD *)v10)
      {
        *(_QWORD *)(v10 + 8) = v13;
        operator delete(v13);
      }
      MEMORY[0x212BC6398](v10, 0x20C40D91ED9E0);
    }
  }
  return a1;
}

void sub_20EEF0D24(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v4;

  sub_20EEF0D4C(v2);
  v4 = (_QWORD *)*v1;
  *v1 = 0;
  if (v4)
    sub_20EEF2E84((uint64_t)v1, v4);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EEF0D4C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 48);
    if (v3)
    {
      *(_QWORD *)(v2 + 56) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 24);
    if (v4)
    {
      *(_QWORD *)(v2 + 32) = v4;
      operator delete(v4);
    }
    v5 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x20C40D91ED9E0);
  }
  return a1;
}

_QWORD *sub_20EEF0DC0(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = a1[1];
  a1[1] = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 48);
    if (v3)
    {
      *(_QWORD *)(v2 + 56) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 24);
    if (v4)
    {
      *(_QWORD *)(v2 + 32) = v4;
      operator delete(v4);
    }
    v5 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x20C40D91ED9E0);
  }
  v6 = (_QWORD *)*a1;
  *a1 = 0;
  if (v6)
    sub_20EEF2E84((uint64_t)a1, v6);
  return a1;
}

double sub_20EEF0E48@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, simd_float3x3 a4@<0:Q0, 16:Q1, 32:Q2>, __n128 a5@<Q3>, float32x4_t a6@<Q5>, float32x4_t a7@<Q6>, int32x4_t a8@<Q7>)
{
  _QWORD *v10;
  _QWORD *v11;
  float32x4_t v12;
  double v13;
  double v14;
  double v15;
  float32x4_t v16;
  __n128 v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  double result;
  _QWORD *v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  __int16 *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  __int16 v34;

  if (*a1)
  {
    v10 = (_QWORD *)a1[1];
    if (v10)
    {
      v10[1] = *v10;
      v10[4] = v10[3];
      v10[7] = v10[6];
      v11 = a1 + 2;
      sub_20EEFE924(*a1, a2, (unint64_t *)a1 + 2, (_QWORD *)a1[1], 1, a3, a4, a5, a6, a7, a8);
      v17 = *(__n128 *)(a2 + 44);
      *(__n128 *)(a3 + 24) = v17;
      v34 = 0;
      v33 = 0;
      v31 = a2;
      v32 = v11;
      v18 = *(_OWORD **)a3;
      v19 = *(_QWORD *)(a3 + 8);
      v20 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((uint64_t)(v19 - *(_QWORD *)a3) >> 4));
      v21 = v19 == *(_QWORD *)a3;
      v26 = &v33;
      v27 = &v31;
      v28 = &v34;
      v29 = (char *)&v34 + 1;
      v30 = &v32;
      if (v21)
        v22 = 0;
      else
        v22 = v20;
    }
    else
    {
      v24 = a1 + 2;
      sub_20EEFE924(*a1, a2, (unint64_t *)a1 + 2, 0, 0, a3, a4, a5, a6, a7, a8);
      v17 = *(__n128 *)(a2 + 44);
      *(__n128 *)(a3 + 24) = v17;
      v34 = 0;
      v33 = 0;
      v31 = a2;
      v32 = v24;
      v18 = *(_OWORD **)a3;
      v19 = *(_QWORD *)(a3 + 8);
      v25 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((uint64_t)(v19 - *(_QWORD *)a3) >> 4));
      v21 = v19 == *(_QWORD *)a3;
      v26 = &v33;
      v27 = &v31;
      v28 = &v34;
      v29 = (char *)&v34 + 1;
      v30 = &v32;
      if (v21)
        v22 = 0;
      else
        v22 = v25;
    }
    return sub_20EEFECD4(v18, v19, (uint64_t)&v26, v22, 1, v17, v12, v13, v14, v15, v16);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

void sub_20EEF0FEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEF100C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x212BC6398](v2, 0x20C40960023A9);
  }
  v4 = *(_QWORD **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v4)
    sub_20EEF2E84(a1 + 128, v4);
  *(_QWORD *)(a1 + 24) = &off_24C9F15F0;
  sub_20EEF2F9C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_20EEF108C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _OWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_24C9F15F0;
  *(_QWORD *)(a1 + 32) = &off_24C9F1578;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 100) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 96);
  v7 = (_OWORD *)operator new();
  v7[2] = 0u;
  v7[3] = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  v8 = (uint64_t *)(a1 + 136);
  *v7 = 0u;
  v7[1] = 0u;
  *(_QWORD *)(a1 + 128) = v7;
  v9 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 160) = v9;
  if ((a4 & 1) != 0)
  {
    v10 = (_QWORD *)operator new();
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    v11 = *v8;
    *v8 = (uint64_t)v10;
    if (v11)
    {
      v12 = *(void **)v11;
      if (*(_QWORD *)v11)
      {
        *(_QWORD *)(v11 + 8) = v12;
        operator delete(v12);
      }
      MEMORY[0x212BC6398](v11, 0x20C40960023A9);
    }
  }
  return a1;
}

void sub_20EEF11C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v6;

  sub_20EB0BFD8(v3);
  v6 = (_QWORD *)*v2;
  *v2 = 0;
  if (v6)
  {
    sub_20EEF2E84((uint64_t)v2, v6);
    *(_QWORD *)(v1 + 24) = v4;
    sub_20EEF2F9C(v1, *(_QWORD **)(v1 + 8));
    _Unwind_Resume(a1);
  }
  *(_QWORD *)(v1 + 24) = v4;
  sub_20EEF2F9C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20EEF1218(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  int v24;
  _BYTE v25[28];
  void *__p;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v18 = *(_OWORD *)((char *)a2 + 44);
  v19 = *a2;
  v20 = *((_DWORD *)a2 + 2);
  v21 = *(uint64_t *)((char *)a2 + 12);
  v22 = *((_DWORD *)a2 + 5);
  v23 = *(_OWORD *)(a2 + 3);
  v24 = *((_DWORD *)a2 + 10);
  *(_OWORD *)&v25[12] = *(_OWORD *)(a2 + 7);
  *(_OWORD *)v25 = *(_OWORD *)((char *)a2 + 44);
  v27 = 0;
  v28 = 0;
  __p = 0;
  v4 = a2[9];
  v5 = a2[10];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0x8E38E38E38E38E39 * (v6 >> 4);
    if (v7 >= 0x1C71C71C71C71C8)
      sub_20E969238();
    v8 = (char *)operator new(v6);
    v9 = 0;
    __p = v8;
    v28 = &v8[144 * v7];
    do
    {
      v10 = v4 + v9;
      v11 = &v8[v9];
      v12 = *(_OWORD *)(v4 + v9);
      v13 = *(_OWORD *)(v4 + v9 + 16);
      v14 = *(_OWORD *)(v4 + v9 + 48);
      *((_OWORD *)v11 + 2) = *(_OWORD *)(v4 + v9 + 32);
      *((_OWORD *)v11 + 3) = v14;
      *(_OWORD *)v11 = v12;
      *((_OWORD *)v11 + 1) = v13;
      v16 = *(_OWORD *)(v4 + v9 + 96);
      v15 = *(_OWORD *)(v4 + v9 + 112);
      v17 = *(_OWORD *)(v4 + v9 + 80);
      *(_OWORD *)(v11 + 121) = *(_OWORD *)(v4 + v9 + 121);
      *((_OWORD *)v11 + 6) = v16;
      *((_OWORD *)v11 + 7) = v15;
      *((_OWORD *)v11 + 5) = v17;
      *((_OWORD *)v11 + 4) = *(_OWORD *)(v4 + v9 + 64);
      v9 += 144;
    }
    while (v10 + 144 != v5);
    v27 = &v8[v9];
  }
  v29 = *((_OWORD *)a2 + 6);
  sub_20EEF2FEC(a1, (unsigned __int8 *)&v18, (uint64_t)&v18);
  if (__p)
  {
    v27 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20EEF13A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EEF13C8(uint64_t a1@<X0>, float32x4_t *a2@<X1>, uint64_t **a3@<X8>, double a4@<D0>, double a5@<D1>, float32x2_t a6@<D2>, float32x2_t a7@<D3>, float32x2_t a8@<D4>, float32x4_t a9@<Q5>, double a10@<D6>, float32x4_t a11@<Q7>)
{
  uint64_t *v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  uint64_t v16;
  _QWORD *v18;
  unint64_t v19;
  float v20;
  unint64_t v21;
  float32x2_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  char *v36;
  simd_float3x3 v37;
  __n128 v38;
  float32x2_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  _QWORD *v52;
  unint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t **v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  int8x16_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float v71;
  float32x2_t v73;
  float v74;
  float v75;
  float v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  BOOL v88;
  float32x2_t v89;
  BOOL v90;
  float32x2_t v91;
  BOOL v92;
  float32x2_t v93;
  float32x2_t v94;
  BOOL v95;
  float32x2_t v96;
  float v98;
  BOOL v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  float32x4_t v118;
  double v119;
  double v120;
  double v121;
  float32x4_t v122;
  __n128 v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  unint64_t v128;
  char *v129;
  __int128 v130;
  float32x4_t v131;
  float32x4_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  float32x4_t v141;
  int8x16_t v142;
  int8x16_t v143;
  uint64_t v144;
  unint64_t v145;
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  simd_float3 v165;
  int v166;
  char v167;
  unint64_t v168;
  __int128 v169;
  __int128 v170;
  char *v171;
  char *v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  float v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __n128 v186;
  char *v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  unint64_t v194;
  uint64_t v195;
  _OWORD *v196;
  _OWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t **v202;
  unint64_t v203;
  uint64_t v204;
  char *v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  char *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  _BYTE *v214;
  _OWORD *v215;
  _OWORD *v216;
  __n128 v217;
  __int128 v218;
  __int128 v219;
  char *v220;
  char *v221;
  __n128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  _OWORD *v227;
  __n128 v228;
  __int128 v229;
  __int128 v230;
  unsigned int v231;
  unsigned int v232;
  BOOL v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  char *v237;
  __int128 v238;
  uint64_t *v239;
  uint64_t *v240;
  void *v241;
  _QWORD *v242;
  _QWORD *v243;
  BOOL v244;
  float32x4_t v245;
  simd_float3 v246;
  simd_float3 v247;
  uint64_t **v248;
  uint64_t *v249;
  uint64_t v250;
  _QWORD *v251;
  unint64_t *v252;
  float32x4_t v253;
  float v254;
  char **v255;
  float v256;
  float32x2_t v257;
  __int32 v258;
  float v259;
  float32x2_t v260;
  __int32 v261;
  float v262;
  float32x2_t v263;
  __int32 v264;
  float v265;
  float32x2_t v266;
  __int32 v267;
  float v268;
  float32x2_t v269;
  __int32 v270;
  float v271;
  float32x2_t v272;
  __int32 v273;
  _BYTE v274[240];
  _QWORD v275[5];
  _QWORD *v276;
  unint64_t *v277;
  char v278;
  __int16 v279;
  __int128 v280;
  char *v281;
  simd_float3 v282;
  char v283;
  void *__p;
  char *v285;
  __n128 v286;
  __n128 v287;
  int8x16_t v288;
  __n128 v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  __int128 v303;
  __int128 v304;
  _OWORD v305[2];
  char *v306;
  _OWORD *v307;
  char *v308;
  __n128 v309;
  uint64_t v310;

  v16 = a1;
  v310 = *MEMORY[0x24BDAC8D0];
  v18 = *(_QWORD **)(a1 + 136);
  if (v18)
    v18[1] = *v18;
  a3[1] = 0;
  a3[2] = 0;
  v248 = a3;
  v249 = (uint64_t *)(a3 + 1);
  *a3 = (uint64_t *)(a3 + 1);
  v19 = sub_20EF052C4(*(_QWORD *)(a1 + 128), a2, a4, a5, a6, a7, a8, a9, a10, a11);
  v20 = 10.0;
  if ((v19 & 0xFF00000000) != 0)
    v20 = *(float *)&v19;
  sub_20EEC8250((uint64_t)v274, (float32x2_t *)(v16 + 24), 0.0001, v20);
  v21 = 0;
  v25.i64[0] = a2->i64[0];
  v28.i64[0] = a2[1].i64[0];
  v22 = (float32x2_t)vzip1_s32(*(int32x2_t *)a2->f32, *(int32x2_t *)v28.i8);
  v23 = v25;
  v23.i32[2] = a2->i32[2];
  v24 = v28;
  v24.i32[2] = a2[1].i32[2];
  v25.i32[0] = a2[2].i32[2];
  v29.i64[0] = a2[2].i64[0];
  v26.i64[0] = a2[3].i64[0];
  v26.i32[2] = a2[3].i32[2];
  v27 = (int8x16_t)vnegq_f32(v26);
  *(int32x2_t *)v28.i8 = vdup_lane_s32(*(int32x2_t *)v29.f32, 1);
  v29.i32[2] = v25.i32[0];
  v30 = (float32x2_t)vtrn2q_s32(v23, v24).u64[0];
  v31 = (float32x2_t)vzip2q_s32(v23, v24).u64[0];
  *(float32x2_t *)v32.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v22, *(float *)v27.i32), v30, *(float32x2_t *)v26.f32, 1), v31, v26, 2);
  *(float32x2_t *)&v32.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v27.i8), *(float32x2_t *)v28.i8, *(float32x2_t *)v26.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), *(float32x2_t *)v25.i8);
  v33 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v30, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v30, 1), 0xCuLL).u64[0];
  v287 = 0uLL;
  v288 = (int8x16_t)0x3F80000000000000uLL;
  v289.n128_u64[0] = 0;
  v289.n128_u64[1] = 0x3F80000000000000;
  v291 = 0;
  v290 = 0;
  v292 = 0x3F80000000000000;
  v293 = 0;
  v294 = 0;
  v295 = 0x3F80000000000000;
  v297 = 0;
  v296 = 0;
  v298 = 0x3F80000000000000;
  v299 = 0;
  v300 = 0;
  v301 = 0;
  v302 = 1065353216;
  do
  {
    v27.i32[0] = *(_DWORD *)&v274[v21 + 104];
    v34 = *(float32x2_t *)&v274[v21 + 96];
    *(float32x2_t *)v35.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v22, v34.f32[0]), v33, v34, 1), v31, *(float *)v27.i32);
    *(float32x2_t *)&v35.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.f32, v34), *(float32x2_t *)v28.i8, v34, 1), *(float32x2_t *)v27.i8, *(float32x2_t *)v25.i8);
    v27 = (int8x16_t)vaddq_f32(v32, v35);
    v34.i32[0] = *(_DWORD *)&v274[v21 + 116];
    v35.i64[0] = *(_QWORD *)&v274[v21 + 108];
    v36 = (char *)&v287 + v21;
    v287.n128_u32[v21 / 4 + 2] = v27.u32[2];
    *(_QWORD *)v36 = v27.i64[0];
    *(float32x2_t *)(v36 + 12) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v22, v35.f32[0]), v33, *(float32x2_t *)v35.f32, 1), v31, v34.f32[0]);
    *((_DWORD *)v36 + 5) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v35.f32), *(float32x2_t *)v28.i8, *(float32x2_t *)v35.f32, 1), v34, *(float32x2_t *)v25.i8).u32[0];
    v21 += 24;
  }
  while (v21 != 144);
  sub_20EEC8B1C((uint64_t)&v256, (uint64_t)&v287, *(double *)&v22, *(double *)v25.i64, v28, v29, *(double *)&v31, *(double *)v32.i64);
  v52 = *(_QWORD **)v16;
  v251 = (_QWORD *)(v16 + 8);
  if (*(_QWORD *)v16 != v16 + 8)
  {
    v53 = (unint64_t *)(v16 + 144);
    v250 = v16;
    v252 = (unint64_t *)(v16 + 144);
    do
    {
      v54 = (_QWORD *)((char *)v52 + 60);
      v55 = v52 + 6;
      if (!*((_BYTE *)v52 + 160))
      {
        v61 = 0;
        v37.columns[0].i64[0] = *(_QWORD *)((char *)v52 + 60);
        v37.columns[0].i32[2] = *((_DWORD *)v52 + 17);
        v43.i64[0] = v52[6];
        v43.i32[2] = *((_DWORD *)v52 + 14);
        *(float32x2_t *)v48.i8 = v257;
        v62 = (float32x2_t)vdup_lane_s32((int32x2_t)v257, 1);
        v37.columns[1].i32[0] = *((_DWORD *)v52 + 19);
        v246 = v37.columns[1];
        v247 = v37.columns[0];
        v245 = vmulq_n_f32((float32x4_t)v37.columns[0], v37.columns[1].f32[0]);
        v37.columns[0] = (simd_float3)vaddq_f32((float32x4_t)v43, v245);
        v49.i32[0] = v258;
        v48.i32[2] = v258;
        *(float32x2_t *)v47.i8 = v260;
        v63 = (float32x2_t)vdup_lane_s32((int32x2_t)v260, 1);
        v50.i32[0] = v261;
        v47.i32[2] = v261;
        *(float32x2_t *)v46.i8 = v263;
        v64 = (float32x2_t)vdup_lane_s32((int32x2_t)v263, 1);
        v51.i32[0] = v264;
        v46.i32[2] = v264;
        *(float32x2_t *)v45.i8 = v266;
        v65 = (float32x2_t)vdup_lane_s32((int32x2_t)v266, 1);
        v66 = (int8x16_t)vsubq_f32((float32x4_t)v37.columns[0], (float32x4_t)v43);
        v12.i32[0] = v267;
        v45.i32[2] = v267;
        *(float32x2_t *)v44.i8 = v269;
        v67 = (float32x2_t)vdup_lane_s32((int32x2_t)v269, 1);
        v13.i32[0] = v270;
        v254 = v268;
        v44.i32[2] = v270;
        v14.i32[0] = v273;
        *(float32x2_t *)v41.i8 = v272;
        v68 = (float32x2_t)vdup_lane_s32((int32x2_t)v272, 1);
        v41.i32[2] = v273;
        v69 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1);
        v70 = (float32x2_t)vextq_s8(v66, v66, 8uLL).u64[0];
        *(int32x2_t *)v42.i8 = vdup_lane_s32(*(int32x2_t *)v43.i8, 1);
        v40 = (float32x4_t)vextq_s8(v43, v43, 8uLL);
        do
        {
          v37.columns[0].i32[0] = *(__int32 *)((char *)&v258 + v61);
          v37.columns[2].i64[0] = *(_QWORD *)((char *)&v256 + v61 + 4);
          LODWORD(v71) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.columns[2].f32, *(float32x2_t *)v66.i8), v69, *(float32x2_t *)v37.columns[2].f32, 1), v70, *(float32x2_t *)v37.columns[0].f32).u32[0];
          if (fabsf(v71) >= 0.00000011921)
          {
            v37.columns[2].i32[2] = *(__int32 *)((char *)&v258 + v61);
            v39.f32[0] = -*(float *)((char *)&v256 + v61);
            v37.columns[1] = (simd_float3)vmlsq_lane_f32((float32x4_t)v43, (float32x4_t)v37.columns[2], v39, 0);
            *(float32x2_t *)v37.columns[2].f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.columns[2].f32, *(float32x2_t *)v37.columns[1].f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.columns[2].f32, 1), *(float32x2_t *)v37.columns[1].f32, 1);
            v37.columns[1] = (simd_float3)vextq_s8((int8x16_t)v37.columns[1], (int8x16_t)v37.columns[1], 8uLL);
            v37.columns[0].f32[0] = (float)-vmla_f32(*(float32x2_t *)v37.columns[2].f32, *(float32x2_t *)v37.columns[1].f32, *(float32x2_t *)v37.columns[0].f32).f32[0]/ v71;
            if (v37.columns[0].f32[0] >= 0.0 && v37.columns[0].f32[0] <= 1.0)
            {
              *(float32x2_t *)v37.columns[1].f32 = vmla_lane_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v37.columns[0].f32, *(float32x2_t *)v66.i8, 1);
              *(float32x2_t *)v37.columns[2].f32 = vmla_f32(*(float32x2_t *)v40.f32, v70, *(float32x2_t *)v37.columns[0].f32);
              v73 = vmla_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v66.i8, *(float32x2_t *)v37.columns[0].f32);
              *(float32x2_t *)v37.columns[0].f32 = vmla_f32(vmla_f32(vmul_f32(v73, v257), v62, *(float32x2_t *)v37.columns[1].f32), v49, *(float32x2_t *)v37.columns[2].f32);
              v39 = vmla_f32(vmla_f32(vmul_f32(v73, v260), v63, *(float32x2_t *)v37.columns[1].f32), v50, *(float32x2_t *)v37.columns[2].f32);
              LODWORD(v74) = vmla_f32(vmla_f32(vmul_f32(v73, v263), v64, *(float32x2_t *)v37.columns[1].f32), v51, *(float32x2_t *)v37.columns[2].f32).u32[0];
              LODWORD(v75) = vmla_f32(vmla_f32(vmul_f32(v73, v266), v65, *(float32x2_t *)v37.columns[1].f32), v12, *(float32x2_t *)v37.columns[2].f32).u32[0];
              LODWORD(v76) = vmla_f32(vmla_f32(vmul_f32(v73, v269), v67, *(float32x2_t *)v37.columns[1].f32), v13, *(float32x2_t *)v37.columns[2].f32).u32[0];
              v38.n128_u64[0] = (unint64_t)vmla_f32(vmla_f32(vmul_f32(v73, v272), v68, *(float32x2_t *)v37.columns[1].f32), v14, *(float32x2_t *)v37.columns[2].f32);
              v37.columns[1].i32[0] = 1008981770;
              v77 = (float)(v256 + v37.columns[0].f32[0]) > 0.01 || (float)(v259 + v39.f32[0]) > 0.01;
              v78 = v77 || (float)(v262 + v74) > 0.01;
              v79 = v78 || (float)(v265 + v75) > 0.01;
              v80 = v79 || (float)(v268 + v76) > 0.01;
              v37.columns[0].f32[0] = v271 + v38.n128_f32[0];
              if (!v80 && v37.columns[0].f32[0] <= 0.01)
                goto LABEL_11;
            }
          }
          v61 += 16;
        }
        while (v61 != 96);
        v82 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1);
        v83 = (float32x2_t)vextq_s8(v48, v48, 8uLL).u64[0];
        *(float32x2_t *)v37.columns[0].f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v48.i8), v82, *(float32x2_t *)v43.i8, 1), v83, *(float32x2_t *)v40.f32);
        v49 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1);
        v84 = (float32x2_t)vextq_s8(v47, v47, 8uLL).u64[0];
        v37.columns[1].f32[0] = v259
                              + vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v47.i8), v49, *(float32x2_t *)v43.i8, 1), v84, *(float32x2_t *)v40.f32).f32[0];
        v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1);
        v85 = (float32x2_t)vextq_s8(v46, v46, 8uLL).u64[0];
        *(float32x2_t *)v37.columns[2].f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v46.i8), v50, *(float32x2_t *)v43.i8, 1), v85, *(float32x2_t *)v40.f32);
        v37.columns[2].f32[0] = v262 + v37.columns[2].f32[0];
        v51 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1);
        v86 = (float32x2_t)vextq_s8(v45, v45, 8uLL).u64[0];
        v38.n128_u64[0] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v45.i8), v51, *(float32x2_t *)v43.i8, 1), v86, *(float32x2_t *)v40.f32);
        v38.n128_f32[0] = v265 + v38.n128_f32[0];
        v12 = (float32x2_t)vdup_lane_s32((int32x2_t)v269, 1);
        v87 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v43.i8, v269), v12, *(float32x2_t *)v43.i8, 1);
        v88 = (float)(v256 + v37.columns[0].f32[0]) > 0.00000001 || v37.columns[1].f32[0] > 0.00000001;
        v89 = (float32x2_t)vextq_s8(v44, v44, 8uLL).u64[0];
        v39 = vmla_f32(v87, v89, *(float32x2_t *)v40.f32);
        v90 = v88 || v37.columns[2].f32[0] > 0.00000001;
        v91 = vmul_f32(*(float32x2_t *)v43.i8, v272);
        v92 = v90 || v38.n128_f32[0] > 0.00000001;
        v93 = (float32x2_t)vdup_lane_s32((int32x2_t)v272, 1);
        v94 = vmla_lane_f32(v91, v93, *(float32x2_t *)v43.i8, 1);
        v95 = v92 || (float)(v268 + v39.f32[0]) > 0.00000001;
        v96 = (float32x2_t)vextq_s8(v41, v41, 8uLL).u64[0];
        *(float32x2_t *)v37.columns[1].f32 = vmla_f32(v94, v96, *(float32x2_t *)v40.f32);
        v37.columns[0].f32[0] = v271 + v37.columns[1].f32[0];
        if (v95 || v37.columns[0].f32[0] > 0.00000001)
          goto LABEL_73;
        v38.n128_u64[1] = v246.u64[1];
        v37.columns[2] = v247;
        v37.columns[0] = (simd_float3)vextq_s8((int8x16_t)v37.columns[2], (int8x16_t)v37.columns[2], 8uLL);
        v37.columns[1].i64[1] = v245.i64[1];
        *(float32x2_t *)v37.columns[1].f32 = vadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v245.f32);
        *(float32x2_t *)v42.i8 = vmla_lane_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v246.f32, *(float32x2_t *)v247.f32, 1);
        *(float32x2_t *)v40.f32 = vmla_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v37.columns[0].f32, *(float32x2_t *)v246.f32);
        *(float32x2_t *)v37.columns[0].f32 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v37.columns[1].f32, v257), v82, *(float32x2_t *)v42.i8), v83, *(float32x2_t *)v40.f32);
        v37.columns[0].f32[0] = v256 + v37.columns[0].f32[0];
        *(float32x2_t *)v37.columns[2].f32 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v37.columns[1].f32, v260), v49, *(float32x2_t *)v42.i8), v84, *(float32x2_t *)v40.f32);
        v37.columns[2].f32[0] = v259 + v37.columns[2].f32[0];
        v38.n128_u64[0] = (unint64_t)vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v37.columns[1].f32, v263), v50, *(float32x2_t *)v42.i8), v85, *(float32x2_t *)v40.f32);
        v38.n128_f32[0] = v262 + v38.n128_f32[0];
        v39 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v37.columns[1].f32, v266), v51, *(float32x2_t *)v42.i8), v86, *(float32x2_t *)v40.f32);
        v39.f32[0] = v265 + v39.f32[0];
        v98 = v268
            + vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v37.columns[1].f32, v269), v12, *(float32x2_t *)v42.i8), v89, *(float32x2_t *)v40.f32).f32[0];
        *(float32x2_t *)v37.columns[1].f32 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v37.columns[1].f32, v272), v93, *(float32x2_t *)v42.i8), v96, *(float32x2_t *)v40.f32);
        v37.columns[1].f32[0] = v271 + v37.columns[1].f32[0];
        v40.i32[0] = 841731191;
        v99 = v37.columns[0].f32[0] > 0.00000001 || v37.columns[2].f32[0] > 0.00000001;
        v100 = v99 || v38.n128_f32[0] > 0.00000001;
        v101 = v100 || v39.f32[0] > 0.00000001;
        v102 = v101 || v98 > 0.00000001;
        if (v102 || v37.columns[1].f32[0] > 0.00000001)
        {
LABEL_73:
          if ((*((_BYTE *)v52 + 84) & 1) == 0 || (v52[10] & 1) == 0)
          {
            v104 = (_QWORD *)v52[1];
            if (!v104)
              goto LABEL_256;
            goto LABEL_254;
          }
        }
      }
LABEL_11:
      v56 = *(uint64_t ***)(v16 + 136);
      if (v56)
      {
        v11 = v56[1];
        v57 = (unint64_t)v56[2];
        if ((unint64_t)v11 >= v57)
        {
          v105 = *v56;
          v106 = 0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)*v56) >> 2);
          v107 = v106 + 1;
          if ((unint64_t)(v106 + 1) > 0x5D1745D1745D174)
            sub_20EA45E94();
          v108 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v57 - (_QWORD)v105) >> 2);
          if (2 * v108 > v107)
            v107 = 2 * v108;
          if (v108 >= 0x2E8BA2E8BA2E8BALL)
            v109 = 0x5D1745D1745D174;
          else
            v109 = v107;
          if (v109)
          {
            if (v109 > 0x5D1745D1745D174)
              sub_20E877A38();
            v110 = (char *)operator new(44 * v109);
          }
          else
          {
            v110 = 0;
          }
          v111 = &v110[44 * v106];
          v112 = *v55;
          *((_DWORD *)v111 + 2) = *((_DWORD *)v52 + 14);
          *(_QWORD *)v111 = v112;
          v113 = *v54;
          *((_DWORD *)v111 + 5) = *((_DWORD *)v52 + 17);
          *(_QWORD *)(v111 + 12) = v113;
          v37.columns[0] = *(simd_float3 *)(v52 + 9);
          *((_DWORD *)v111 + 10) = *((_DWORD *)v52 + 22);
          *(simd_float3 *)(v111 + 24) = v37.columns[0];
          v114 = v111;
          if (v11 != v105)
          {
            do
            {
              v115 = *(uint64_t *)((char *)v11 - 44);
              v11 = (uint64_t *)((char *)v11 - 44);
              v116 = *((_DWORD *)v11 + 2);
              *(_QWORD *)(v114 - 44) = v115;
              v114 -= 44;
              *((_DWORD *)v114 + 2) = v116;
              v117 = *(uint64_t *)((char *)v11 + 12);
              *((_DWORD *)v114 + 5) = *((_DWORD *)v11 + 5);
              *(_QWORD *)(v114 + 12) = v117;
              v37.columns[0] = *(simd_float3 *)(v11 + 3);
              *((_DWORD *)v114 + 10) = *((_DWORD *)v11 + 10);
              *(simd_float3 *)(v114 + 24) = v37.columns[0];
            }
            while (v11 != v105);
            v11 = *v56;
          }
          v60 = v111 + 44;
          *v56 = (uint64_t *)v114;
          v56[1] = (uint64_t *)(v111 + 44);
          v56[2] = (uint64_t *)&v110[44 * v109];
          if (v11)
            operator delete(v11);
          v53 = v252;
        }
        else
        {
          v58 = *v55;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v52 + 14);
          *v11 = v58;
          v59 = *v54;
          *((_DWORD *)v11 + 5) = *((_DWORD *)v52 + 17);
          *(uint64_t *)((char *)v11 + 12) = v59;
          v37.columns[0] = *(simd_float3 *)(v52 + 9);
          *((_DWORD *)v11 + 10) = *((_DWORD *)v52 + 22);
          *(simd_float3 *)(v11 + 3) = v37.columns[0];
          v60 = (char *)v11 + 44;
        }
        v56[1] = (uint64_t *)v60;
      }
      sub_20EEFE924(*(_QWORD *)(v16 + 128), (uint64_t)(v52 + 6), v53, 0, 0, (uint64_t)&__p, v37, v38, v40, (float32x4_t)v41, v42);
      v123 = *(__n128 *)((char *)v52 + 92);
      v124 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((v285 - (_BYTE *)__p) >> 4));
      v286 = v123;
      LOBYTE(v275[0]) = 0;
      LOBYTE(v306) = 0;
      LOBYTE(v303) = 0;
      *(_QWORD *)&v280 = v53;
      *(_QWORD *)&v304 = v52 + 6;
      v287.n128_u64[0] = (unint64_t)&v303;
      v287.n128_u64[1] = (unint64_t)&v304;
      v288.i64[0] = (uint64_t)&v306;
      v288.i64[1] = (uint64_t)v275;
      v289.n128_u64[0] = (unint64_t)&v280;
      if (v285 == __p)
        v125 = 0;
      else
        v125 = v124;
      *(double *)v37.columns[0].i64 = sub_20EEFECD4(__p, (unint64_t)v285, (uint64_t)&v287, v125, 1, v123, v118, v119, v120, v121, v122);
      v126 = (char *)__p;
      v127 = v285;
      if (__p == v285)
      {
        if (!*((_BYTE *)v52 + 160))
          goto LABEL_251;
        *((_BYTE *)v52 + 160) = 0;
        v281 = 0;
        v280 = 0uLL;
        v154 = v52[15];
        v155 = v52[16];
        v156 = v155 - v154;
        if (v155 != v154)
        {
          v157 = 0x8E38E38E38E38E39 * (v156 >> 4);
          if (v157 > 0x1C71C71C71C71C7)
            sub_20E969238();
          v158 = (char *)operator new(v156);
          v159 = 0;
          *(_QWORD *)&v280 = v158;
          v281 = &v158[144 * v157];
          do
          {
            v160 = v154 + v159;
            v161 = &v158[v159];
            v162 = *(_OWORD *)(v154 + v159);
            v163 = *(_OWORD *)(v154 + v159 + 16);
            v164 = *(_OWORD *)(v154 + v159 + 48);
            *((_OWORD *)v161 + 2) = *(_OWORD *)(v154 + v159 + 32);
            *((_OWORD *)v161 + 3) = v164;
            *(_OWORD *)v161 = v162;
            *((_OWORD *)v161 + 1) = v163;
            v37.columns[2] = *(simd_float3 *)(v154 + v159 + 96);
            v37.columns[0] = *(simd_float3 *)(v154 + v159 + 112);
            v37.columns[1] = *(simd_float3 *)(v154 + v159 + 121);
            v38 = *(__n128 *)(v154 + v159 + 80);
            *(simd_float3 *)(v161 + 121) = v37.columns[1];
            *((_OWORD *)v161 + 6) = v37.columns[2];
            *((_OWORD *)v161 + 7) = v37.columns[0];
            *((__n128 *)v161 + 5) = v38;
            *((_OWORD *)v161 + 4) = *(_OWORD *)(v154 + v159 + 64);
            v159 += 144;
          }
          while (v160 + 144 != v155);
          *((_QWORD *)&v280 + 1) = &v158[v159];
        }
        v165 = *((simd_float3 *)v52 + 9);
        goto LABEL_205;
      }
      v306 = 0;
      v307 = 0;
      v308 = 0;
      v128 = 0x8E38E38E38E38E39 * ((v285 - (_BYTE *)__p) >> 4);
      if (v128 > 0x1C71C71C71C71C7)
        sub_20E969238();
      v129 = (char *)operator new(v285 - (_BYTE *)__p);
      v133 = v129;
      v134 = 0;
      v306 = v129;
      v308 = &v129[144 * v128];
      do
      {
        v135 = &v126[v134];
        v136 = &v129[v134];
        v137 = *(_OWORD *)&v126[v134];
        v138 = *(_OWORD *)&v126[v134 + 16];
        v139 = *(_OWORD *)&v126[v134 + 48];
        *((_OWORD *)v136 + 2) = *(_OWORD *)&v126[v134 + 32];
        *((_OWORD *)v136 + 3) = v139;
        *(_OWORD *)v136 = v137;
        *((_OWORD *)v136 + 1) = v138;
        v141 = *(float32x4_t *)&v126[v134 + 96];
        v140 = *(_OWORD *)&v126[v134 + 112];
        v142 = *(int8x16_t *)&v126[v134 + 121];
        v143 = *(int8x16_t *)&v126[v134 + 80];
        *(int8x16_t *)(v136 + 121) = v142;
        *((float32x4_t *)v136 + 6) = v141;
        *((_OWORD *)v136 + 7) = v140;
        *((int8x16_t *)v136 + 5) = v143;
        *((_OWORD *)v136 + 4) = *(_OWORD *)&v126[v134 + 64];
        v134 += 144;
      }
      while (v135 + 144 != v127);
      v144 = v134 / 144;
      v145 = (unint64_t)&v129[144 * (v134 / 144)];
      v307 = (_OWORD *)v145;
      v146 = v286;
      v309 = v286;
      v148 = v52[15];
      v147 = v52[16];
      if (v148 == v147)
      {
LABEL_104:
        v151 = 0;
        v152 = 1;
        if (!v134)
          goto LABEL_117;
      }
      else
      {
        v149 = v148 + 60;
        while (!*(_BYTE *)(v149 + 52))
        {
          v150 = v149 + 84;
          v149 += 144;
          if (v150 == v147)
            goto LABEL_104;
        }
        v152 = 0;
        v151 = *(_BYTE *)(v149 - 60);
        v304 = *(_OWORD *)(v149 - 59);
        v305[0] = *(_OWORD *)(v149 - 43);
        *(_OWORD *)((char *)v305 + 15) = *(_OWORD *)(v149 - 28);
        v132.i64[0] = *(_QWORD *)(v149 - 12);
        v132.i32[2] = *(_DWORD *)(v149 - 4);
        v254 = *(float *)v149;
        v303 = *(_OWORD *)(v149 + 4);
        v11 = *(uint64_t **)(v149 + 20);
        v287 = *(__n128 *)(v149 + 28);
        v288 = *(int8x16_t *)(v149 + 44);
        v146 = *(__n128 *)(v149 + 60);
        v289 = v146;
        LOBYTE(v290) = *(_BYTE *)(v149 + 76);
        if (!v134)
        {
LABEL_117:
          v166 = 1;
          if (!*((_BYTE *)v52 + 160))
            goto LABEL_144;
          goto LABEL_118;
        }
      }
      v153 = 0;
      while (1)
      {
        LODWORD(v134) = v129[v153 + 112] != 0;
        if (v129[v153 + 112])
          break;
        v153 += 144;
        if (144 * v144 == v153)
          goto LABEL_121;
      }
      if ((v152 & 1) != 0)
        goto LABEL_121;
      v177 = 0;
      v142.i64[0] = *v55;
      v142.i32[2] = *((_DWORD *)v52 + 14);
      v146 = (__n128)vsubq_f32((float32x4_t)v142, v132);
      *(int32x2_t *)v141.f32 = vdup_lane_s32((int32x2_t)v146.n128_u64[0], 1);
      v143 = vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL);
      *(float32x2_t *)&v130 = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)v146.n128_u64[0], (float32x2_t)v146.n128_u64[0]), *(float32x2_t *)v141.f32, (float32x2_t)v146.n128_u64[0], 1), *(float32x2_t *)v143.i8, *(float32x2_t *)v143.i8);
      v146.n128_f32[0] = sqrtf(*(float *)&v130);
      v141.f32[0] = *(float *)(v250 + 160) * v146.n128_f32[0];
      v178 = 144 * v144 - 144;
      v179 = v129 + 256;
      while (1)
      {
        if (v129[v177 + 112])
        {
          if (*(_QWORD *)&v129[v177 + 80] <= (unint64_t)v11)
            break;
          v143.i64[0] = *(_QWORD *)&v129[v177 + 48];
          v143.i32[2] = *(_DWORD *)&v129[v177 + 56];
          v143 = (int8x16_t)vsubq_f32((float32x4_t)v142, (float32x4_t)v143);
          *(int32x2_t *)&v130 = vdup_lane_s32(*(int32x2_t *)v143.i8, 1);
          v131 = (float32x4_t)vextq_s8(v143, v143, 8uLL);
          *(float *)v143.i32 = vabds_f32(v146.n128_f32[0], sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v143.i8, *(float32x2_t *)v143.i8), *(float32x2_t *)&v130, *(float32x2_t *)v143.i8, 1), *(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32).f32[0]));
          if (*(float *)v143.i32 > v141.f32[0])
            break;
        }
        v177 += 144;
        v178 -= 144;
        v179 += 144;
        if (144 * v144 == v177)
          goto LABEL_121;
      }
      if (144 * v144 == v177)
        goto LABEL_121;
      v180 = &v129[v177];
      if (144 * v144 - 144 != v177)
      {
        do
        {
          if (!*v179)
            goto LABEL_146;
          if (*((_QWORD *)v179 - 4) > (unint64_t)v11)
          {
            v142.i64[0] = *v55;
            v142.i32[2] = *((_DWORD *)v52 + 14);
            v141.i64[0] = *((_QWORD *)v179 - 8);
            v141.i32[2] = *((_DWORD *)v179 - 14);
            v142 = (int8x16_t)vsubq_f32((float32x4_t)v142, v141);
            *(int32x2_t *)v141.f32 = vdup_lane_s32(*(int32x2_t *)v142.i8, 1);
            v143.i64[0] = vextq_s8(v142, v142, 8uLL).u64[0];
            *(float32x2_t *)&v130 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v142.i8, *(float32x2_t *)v142.i8), *(float32x2_t *)v141.f32, *(float32x2_t *)v142.i8, 1), *(float32x2_t *)v143.i8, *(float32x2_t *)v143.i8);
            v141.f32[0] = v146.n128_f32[0] * *(float *)(v250 + 160);
            *(float *)v142.i32 = vabds_f32(v146.n128_f32[0], sqrtf(*(float *)&v130));
            if (*(float *)v142.i32 <= v141.f32[0])
            {
LABEL_146:
              v181 = *((_OWORD *)v179 - 7);
              v182 = *((_OWORD *)v179 - 6);
              v183 = *((_OWORD *)v179 - 4);
              *((_OWORD *)v180 + 2) = *((_OWORD *)v179 - 5);
              *((_OWORD *)v180 + 3) = v183;
              *(_OWORD *)v180 = v181;
              *((_OWORD *)v180 + 1) = v182;
              v143 = *((int8x16_t *)v179 - 1);
              v184 = *(_OWORD *)v179;
              v141 = *(float32x4_t *)(v179 + 9);
              v130 = *((_OWORD *)v179 - 2);
              *(float32x4_t *)(v180 + 121) = v141;
              *((int8x16_t *)v180 + 6) = v143;
              *((_OWORD *)v180 + 7) = v184;
              *((_OWORD *)v180 + 5) = v130;
              v142 = *((int8x16_t *)v179 - 3);
              *((int8x16_t *)v180 + 4) = v142;
              v180 += 144;
            }
          }
          v179 += 144;
          v178 -= 144;
        }
        while (v178);
      }
      if (v180 == (char *)v145)
      {
LABEL_121:
        v166 = 1;
        if (v129 == (char *)v145)
          goto LABEL_143;
      }
      else
      {
        v166 = 0;
        v307 = v180;
        v145 = (unint64_t)v180;
        if (v129 == v180)
        {
LABEL_143:
          v145 = (unint64_t)v129;
          if (!*((_BYTE *)v52 + 160))
          {
LABEL_144:
            LOBYTE(v280) = 0;
            v283 = 0;
            v16 = v250;
            v307 = v129;
            operator delete(v129);
            if (!v283)
              goto LABEL_251;
            goto LABEL_171;
          }
LABEL_118:
          v167 = 1;
          v168 = (unint64_t)v129;
          v255 = (char **)(v52 + 15);
          if (((v152 | v166 & v134) & 1) == 0)
            goto LABEL_123;
          goto LABEL_158;
        }
      }
      v167 = 0;
      v168 = v145;
      v255 = (char **)(v52 + 15);
      if (((v152 | v166 & v134) & 1) == 0)
      {
LABEL_123:
        if (v168 >= (unint64_t)&v129[144 * v128])
        {
          v173 = 0x8E38E38E38E38E39 * ((uint64_t)(v168 - (_QWORD)v129) >> 4) + 1;
          if (v173 > 0x1C71C71C71C71C7)
            goto LABEL_266;
          if (2 * v128 > v173)
            v173 = 2 * v128;
          if (v128 >= 0xE38E38E38E38E3)
            v174 = 0x1C71C71C71C71C7;
          else
            v174 = v173;
          if (v174)
          {
            v253 = v132;
            if (v174 > 0x1C71C71C71C71C7)
              sub_20E877A38();
            v175 = (char *)operator new(144 * v174);
            v176 = v254;
            v132 = v253;
          }
          else
          {
            v175 = 0;
            v176 = v254;
          }
          v185 = v305[0];
          v171 = &v175[16 * ((uint64_t)(v168 - (_QWORD)v133) >> 4)];
          *(_OWORD *)(v171 + 1) = v304;
          *v171 = v151;
          *(_OWORD *)(v171 + 17) = v185;
          *((_OWORD *)v171 + 2) = *(_OWORD *)((char *)v305 + 15);
          *((_QWORD *)v171 + 6) = v132.i64[0];
          *((_DWORD *)v171 + 14) = v132.i32[2];
          *((float *)v171 + 15) = v176;
          *((_OWORD *)v171 + 4) = v303;
          *((_QWORD *)v171 + 10) = v11;
          v171[136] = v290;
          *(__n128 *)(v171 + 120) = v289;
          v186 = v287;
          *(int8x16_t *)(v171 + 104) = v288;
          v172 = v171;
          *(__n128 *)(v171 + 88) = v186;
          if ((v167 & 1) == 0)
          {
            v187 = &v175[16 * ((uint64_t)(v168 - (_QWORD)v133) >> 4)];
            do
            {
              v172 = v187 - 144;
              v188 = *(_OWORD *)(v168 - 144);
              v189 = *(_OWORD *)(v168 - 128);
              v190 = *(_OWORD *)(v168 - 96);
              *((_OWORD *)v187 - 7) = *(_OWORD *)(v168 - 112);
              *((_OWORD *)v187 - 6) = v190;
              *((_OWORD *)v187 - 9) = v188;
              *((_OWORD *)v187 - 8) = v189;
              v192 = *(_OWORD *)(v168 - 48);
              v191 = *(_OWORD *)(v168 - 32);
              v193 = *(_OWORD *)(v168 - 64);
              *(_OWORD *)(v187 - 23) = *(_OWORD *)(v168 - 23);
              *((_OWORD *)v187 - 3) = v192;
              *((_OWORD *)v187 - 2) = v191;
              *((_OWORD *)v187 - 4) = v193;
              *((_OWORD *)v187 - 5) = *(_OWORD *)(v168 - 80);
              v168 -= 144;
              v187 -= 144;
            }
            while ((char *)v168 != v133);
          }
          v306 = v172;
          v308 = &v175[144 * v174];
          operator delete(v133);
        }
        else
        {
          *(_BYTE *)v168 = v151;
          v169 = *(_OWORD *)((char *)v305 + 15);
          v170 = v305[0];
          *(_OWORD *)(v168 + 1) = v304;
          *(_OWORD *)(v168 + 32) = v169;
          *(_OWORD *)(v168 + 17) = v170;
          *(_QWORD *)(v168 + 48) = v132.i64[0];
          *(_DWORD *)(v168 + 56) = v132.i32[2];
          *(float *)(v168 + 60) = v254;
          *(_OWORD *)(v168 + 64) = v303;
          *(_QWORD *)(v168 + 80) = v11;
          v146 = v287;
          v142 = v288;
          v141 = (float32x4_t)v289;
          *(_BYTE *)(v168 + 136) = v290;
          *(float32x4_t *)(v168 + 120) = v141;
          *(int8x16_t *)(v168 + 104) = v142;
          *(__n128 *)(v168 + 88) = v146;
          v171 = (char *)v168;
          v172 = v306;
        }
        v145 = (unint64_t)(v171 + 144);
        v307 = v171 + 144;
        v133 = v172;
      }
LABEL_158:
      v279 = 0;
      v278 = 0;
      v277 = v252;
      v276 = v52 + 6;
      v275[0] = &v278;
      v275[1] = &v276;
      v275[2] = &v279;
      v275[3] = (char *)&v279 + 1;
      v275[4] = &v277;
      v194 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((uint64_t)(v145 - (_QWORD)v133) >> 4));
      if ((char *)v145 == v133)
        v195 = 0;
      else
        v195 = v194;
      *(double *)v37.columns[0].i64 = sub_20EEFECD4(v133, v145, (uint64_t)v275, v195, 1, v146, (float32x4_t)v142, *(double *)v141.i64, *(double *)v143.i64, *(double *)&v130, v131);
      v196 = v306;
      v197 = v307;
      if (*((_BYTE *)v52 + 160))
      {
        a3 = v248;
        v16 = v250;
        v11 = (uint64_t *)v255;
        if (v255 == &v306)
          goto LABEL_204;
LABEL_176:
        v203 = 0x8E38E38E38E38E39 * (v197 - v196);
        v204 = v52[17];
        v205 = (char *)v52[15];
        if (0x8E38E38E38E38E39 * ((v204 - (uint64_t)v205) >> 4) >= v203)
        {
          v214 = (_BYTE *)v52[16];
          if (0x8E38E38E38E38E39 * ((v214 - v205) >> 4) >= v203)
          {
            v225 = v52[15];
            if (v196 != v197)
            {
              v226 = v52[15];
              v227 = v196;
              do
              {
                v228 = *(__n128 *)v227;
                v229 = v227[1];
                v230 = v227[3];
                *(_OWORD *)(v226 + 32) = v227[2];
                *(_OWORD *)(v226 + 48) = v230;
                *(__n128 *)v226 = v228;
                *(_OWORD *)(v226 + 16) = v229;
                v37.columns[2] = (simd_float3)v227[6];
                v37.columns[0] = (simd_float3)v227[7];
                v37.columns[1] = *(simd_float3 *)((char *)v227 + 121);
                v38 = *((__n128 *)v227 + 5);
                *(simd_float3 *)(v226 + 121) = v37.columns[1];
                *(simd_float3 *)(v226 + 96) = v37.columns[2];
                *(simd_float3 *)(v226 + 112) = v37.columns[0];
                *(__n128 *)(v226 + 80) = v38;
                *(_OWORD *)(v226 + 64) = v227[4];
                v225 += 144;
                v227 += 9;
                v226 += 144;
              }
              while (v227 != v197);
            }
            v213 = v225 - (_QWORD)v205;
          }
          else
          {
            v215 = &v196[(v214 - v205) >> 4];
            if (v214 != v205)
            {
              v216 = v196;
              do
              {
                v217 = *(__n128 *)v216;
                v218 = v216[1];
                v219 = v216[3];
                *((_OWORD *)v205 + 2) = v216[2];
                *((_OWORD *)v205 + 3) = v219;
                *(__n128 *)v205 = v217;
                *((_OWORD *)v205 + 1) = v218;
                v37.columns[2] = (simd_float3)v216[6];
                v37.columns[0] = (simd_float3)v216[7];
                v37.columns[1] = *(simd_float3 *)((char *)v216 + 121);
                v38 = *((__n128 *)v216 + 5);
                *(simd_float3 *)(v205 + 121) = v37.columns[1];
                *((_OWORD *)v205 + 6) = v37.columns[2];
                *((_OWORD *)v205 + 7) = v37.columns[0];
                *((__n128 *)v205 + 5) = v38;
                *((_OWORD *)v205 + 4) = v216[4];
                v216 += 9;
                v205 += 144;
              }
              while (v216 != v215);
              v205 = (char *)v52[16];
            }
            v220 = v205;
            if (v215 != v197)
            {
              v220 = v205;
              v221 = v205;
              do
              {
                v222 = *(__n128 *)v215;
                v223 = v215[1];
                v224 = v215[3];
                *((_OWORD *)v221 + 2) = v215[2];
                *((_OWORD *)v221 + 3) = v224;
                *(__n128 *)v221 = v222;
                *((_OWORD *)v221 + 1) = v223;
                v37.columns[2] = (simd_float3)v215[6];
                v37.columns[0] = (simd_float3)v215[7];
                v37.columns[1] = *(simd_float3 *)((char *)v215 + 121);
                v38 = *((__n128 *)v215 + 5);
                *(simd_float3 *)(v221 + 121) = v37.columns[1];
                *((_OWORD *)v221 + 6) = v37.columns[2];
                *((_OWORD *)v221 + 7) = v37.columns[0];
                *((__n128 *)v221 + 5) = v38;
                *((_OWORD *)v221 + 4) = v215[4];
                v220 += 144;
                v215 += 9;
                v221 += 144;
              }
              while (v215 != v197);
            }
            v213 = v220 - v205;
          }
        }
        else
        {
          if (v205)
          {
            v52[16] = v205;
            operator delete(v205);
            v204 = 0;
            *v11 = 0;
            v11[1] = 0;
            v11[2] = 0;
          }
          if (v203 > 0x1C71C71C71C71C7)
            goto LABEL_266;
          v206 = 0x8E38E38E38E38E39 * (v204 >> 4);
          v207 = 2 * v206;
          if (2 * v206 <= v203)
            v207 = 0x8E38E38E38E38E39 * (v197 - v196);
          v208 = v206 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v207;
          if (v208 > 0x1C71C71C71C71C7)
LABEL_266:
            sub_20E969238();
          v205 = (char *)operator new(144 * v208);
          v52[15] = v205;
          v52[16] = v205;
          v52[17] = &v205[144 * v208];
          v209 = v205;
          a3 = v248;
          v16 = v250;
          if (v196 != v197)
          {
            v209 = v205;
            do
            {
              v210 = *v196;
              v211 = v196[1];
              v212 = v196[3];
              *((_OWORD *)v209 + 2) = v196[2];
              *((_OWORD *)v209 + 3) = v212;
              *(_OWORD *)v209 = v210;
              *((_OWORD *)v209 + 1) = v211;
              v37.columns[2] = (simd_float3)v196[6];
              v37.columns[0] = (simd_float3)v196[7];
              v37.columns[1] = *(simd_float3 *)((char *)v196 + 121);
              v38 = *((__n128 *)v196 + 5);
              *(simd_float3 *)(v209 + 121) = v37.columns[1];
              *((_OWORD *)v209 + 6) = v37.columns[2];
              *((_OWORD *)v209 + 7) = v37.columns[0];
              *((__n128 *)v209 + 5) = v38;
              *((_OWORD *)v209 + 4) = v196[4];
              v209 += 144;
              v196 += 9;
            }
            while (v196 != v197);
          }
          v213 = v209 - v205;
          v196 = v306;
          v197 = v307;
        }
        v52[16] = &v205[v213];
LABEL_204:
        v165 = (simd_float3)v309;
        *((__n128 *)v52 + 9) = v309;
        *((_BYTE *)v52 + 160) = 0;
        *(_QWORD *)&v280 = v196;
        *((_QWORD *)&v280 + 1) = v197;
        v281 = v308;
LABEL_205:
        v282 = v165;
        v283 = 1;
        v200 = v249;
        v201 = (uint64_t *)*v249;
        v202 = (uint64_t **)v249;
        if (*v249)
        {
LABEL_206:
          v231 = *((unsigned __int8 *)v52 + 32);
          while (1)
          {
            while (1)
            {
              v200 = v201;
              v232 = *((unsigned __int8 *)v201 + 32);
              v233 = v231 >= v232;
              if (v231 == v232)
                break;
              v234 = *((unsigned __int8 *)v52 + 32);
LABEL_241:
              if (v233)
                goto LABEL_243;
LABEL_207:
              v201 = (uint64_t *)*v200;
              v202 = (uint64_t **)v200;
              if (!*v200)
                goto LABEL_246;
            }
            v234 = *((unsigned __int8 *)v52 + 33);
            v232 = *((unsigned __int8 *)v200 + 33);
            v233 = v234 >= v232;
            if (v234 != v232)
              goto LABEL_241;
            v235 = *((unsigned __int8 *)v52 + 34);
            v236 = *((unsigned __int8 *)v200 + 34);
            if (v235 != v236)
              goto LABEL_224;
            v235 = *((unsigned __int8 *)v52 + 35);
            v236 = *((unsigned __int8 *)v200 + 35);
            if (v235 != v236)
              goto LABEL_224;
            v235 = *((unsigned __int8 *)v52 + 36);
            v236 = *((unsigned __int8 *)v200 + 36);
            if (v235 != v236)
              goto LABEL_224;
            v235 = *((unsigned __int8 *)v52 + 37);
            v236 = *((unsigned __int8 *)v200 + 37);
            if (v235 != v236)
              goto LABEL_224;
            v235 = *((unsigned __int8 *)v52 + 38);
            v236 = *((unsigned __int8 *)v200 + 38);
            if (v235 != v236)
              goto LABEL_224;
            v235 = *((unsigned __int8 *)v52 + 39);
            v236 = *((unsigned __int8 *)v200 + 39);
            if (v235 != v236)
              goto LABEL_224;
            v235 = *((unsigned __int8 *)v52 + 40);
            v236 = *((unsigned __int8 *)v200 + 40);
            if (v235 != v236)
              goto LABEL_224;
            v235 = *((unsigned __int8 *)v52 + 41);
            v236 = *((unsigned __int8 *)v200 + 41);
            if (v235 != v236)
              goto LABEL_224;
            v235 = *((unsigned __int8 *)v52 + 42);
            v236 = *((unsigned __int8 *)v200 + 42);
            if (v235 != v236)
              goto LABEL_224;
            v235 = *((unsigned __int8 *)v52 + 43);
            v236 = *((unsigned __int8 *)v200 + 43);
            if (v235 != v236)
              goto LABEL_224;
            v235 = *((unsigned __int8 *)v52 + 44);
            v236 = *((unsigned __int8 *)v200 + 44);
            if (v235 != v236
              || (v235 = *((unsigned __int8 *)v52 + 45), v236 = *((unsigned __int8 *)v200 + 45), v235 != v236)
              || (v235 = *((unsigned __int8 *)v52 + 46), v236 = *((unsigned __int8 *)v200 + 46), v235 != v236)
              || (v235 = *((unsigned __int8 *)v52 + 47), v236 = *((unsigned __int8 *)v200 + 47), v235 != v236))
            {
LABEL_224:
              if (v235 < v236)
                goto LABEL_207;
            }
            v232 = *((unsigned __int8 *)v200 + 34);
            v234 = *((unsigned __int8 *)v52 + 34);
            if (v232 == v234)
            {
              v232 = *((unsigned __int8 *)v200 + 35);
              v234 = *((unsigned __int8 *)v52 + 35);
              if (v232 == v234)
              {
                v232 = *((unsigned __int8 *)v200 + 36);
                v234 = *((unsigned __int8 *)v52 + 36);
                if (v232 == v234)
                {
                  v232 = *((unsigned __int8 *)v200 + 37);
                  v234 = *((unsigned __int8 *)v52 + 37);
                  if (v232 == v234)
                  {
                    v232 = *((unsigned __int8 *)v200 + 38);
                    v234 = *((unsigned __int8 *)v52 + 38);
                    if (v232 == v234)
                    {
                      v232 = *((unsigned __int8 *)v200 + 39);
                      v234 = *((unsigned __int8 *)v52 + 39);
                      if (v232 == v234)
                      {
                        v232 = *((unsigned __int8 *)v200 + 40);
                        v234 = *((unsigned __int8 *)v52 + 40);
                        if (v232 == v234)
                        {
                          v232 = *((unsigned __int8 *)v200 + 41);
                          v234 = *((unsigned __int8 *)v52 + 41);
                          if (v232 == v234)
                          {
                            v232 = *((unsigned __int8 *)v200 + 42);
                            v234 = *((unsigned __int8 *)v52 + 42);
                            if (v232 == v234)
                            {
                              v232 = *((unsigned __int8 *)v200 + 43);
                              v234 = *((unsigned __int8 *)v52 + 43);
                              if (v232 == v234)
                              {
                                v232 = *((unsigned __int8 *)v200 + 44);
                                v234 = *((unsigned __int8 *)v52 + 44);
                                if (v232 == v234)
                                {
                                  v232 = *((unsigned __int8 *)v200 + 45);
                                  v234 = *((unsigned __int8 *)v52 + 45);
                                  if (v232 == v234)
                                  {
                                    v232 = *((unsigned __int8 *)v200 + 46);
                                    v234 = *((unsigned __int8 *)v52 + 46);
                                    if (v232 == v234)
                                    {
                                      v232 = *((unsigned __int8 *)v200 + 47);
                                      v234 = *((unsigned __int8 *)v52 + 47);
                                      if (v232 == v234)
                                      {
LABEL_259:
                                        v237 = (char *)v200;
                                        v242 = v200 + 6;
                                        v241 = (void *)v200[6];
                                        if (!v241)
                                          goto LABEL_250;
LABEL_249:
                                        *((_QWORD *)v237 + 7) = v241;
                                        operator delete(v241);
                                        *v242 = 0;
                                        v242[1] = 0;
                                        v242[2] = 0;
                                        goto LABEL_250;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_243:
            if (v232 >= v234)
              goto LABEL_259;
            v201 = (uint64_t *)v200[1];
            if (!v201)
            {
              v202 = (uint64_t **)(v200 + 1);
              goto LABEL_246;
            }
          }
        }
        goto LABEL_246;
      }
      v199 = v52[15];
      v198 = v52[16];
      a3 = v248;
      v16 = v250;
      v11 = (uint64_t *)v255;
      if (v198 - v199 != (char *)v307 - v306)
      {
        if (v255 != &v306)
          goto LABEL_176;
        goto LABEL_204;
      }
      if (v199 != v198)
      {
        while (sub_20EEF06B8(v199, (uint64_t)v196))
        {
          v199 += 144;
          v196 += 9;
          if (v199 == v198)
          {
            v196 = v306;
            goto LABEL_169;
          }
        }
        v196 = v306;
        v197 = v307;
        if (v255 != &v306)
          goto LABEL_176;
        goto LABEL_204;
      }
LABEL_169:
      LOBYTE(v280) = 0;
      v283 = 0;
      if (!v196)
        goto LABEL_251;
      v307 = v196;
      operator delete(v196);
      if (!v283)
        goto LABEL_251;
LABEL_171:
      v200 = v249;
      v201 = (uint64_t *)*v249;
      v202 = (uint64_t **)v249;
      if (*v249)
        goto LABEL_206;
LABEL_246:
      v237 = (char *)operator new(0x58uLL);
      v238 = *((_OWORD *)v52 + 2);
      *(_QWORD *)v237 = 0;
      *((_QWORD *)v237 + 1) = 0;
      *((_OWORD *)v237 + 2) = v238;
      *((_OWORD *)v237 + 3) = 0u;
      *((_OWORD *)v237 + 4) = 0u;
      *((_QWORD *)v237 + 10) = 0;
      *((_QWORD *)v237 + 2) = v200;
      *v202 = (uint64_t *)v237;
      v239 = (uint64_t *)**a3;
      v240 = (uint64_t *)v237;
      if (v239)
      {
        *a3 = v239;
        v240 = *v202;
      }
      sub_20E868578(a3[1], v240);
      a3[2] = (uint64_t *)((char *)a3[2] + 1);
      v242 = v237 + 48;
      v241 = (void *)*((_QWORD *)v237 + 6);
      if (v241)
        goto LABEL_249;
LABEL_250:
      *((_OWORD *)v237 + 3) = v280;
      *((_QWORD *)v237 + 8) = v281;
      v37.columns[0] = v282;
      *(simd_float3 *)(v237 + 72) = v282;
LABEL_251:
      if (__p)
      {
        v285 = (char *)__p;
        operator delete(__p);
      }
      v53 = v252;
      v104 = (_QWORD *)v52[1];
      if (!v104)
      {
        do
        {
LABEL_256:
          v243 = (_QWORD *)v52[2];
          v244 = *v243 == (_QWORD)v52;
          v52 = v243;
        }
        while (!v244);
        goto LABEL_9;
      }
      do
      {
LABEL_254:
        v243 = v104;
        v104 = (_QWORD *)*v104;
      }
      while (v104);
LABEL_9:
      v52 = v243;
    }
    while (v243 != v251);
  }
}

void sub_20EEF2A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_20E96C574(a15, *(_QWORD **)(a15 + 8));
  _Unwind_Resume(a1);
}

void sub_20EEF2A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_20E96C574(a15, *(_QWORD **)(a15 + 8));
  _Unwind_Resume(a1);
}

void sub_20EEF2A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_20E96C574(a15, *(_QWORD **)(a15 + 8));
  _Unwind_Resume(a1);
}

void sub_20EEF2AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v16;
  void *v17;

  v16 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v16;
    operator delete(v16);
  }
  v17 = (void *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    STACK[0x300] = (unint64_t)v17;
    operator delete(v17);
    sub_20E96C574(a15, *(_QWORD **)(a15 + 8));
    _Unwind_Resume(a1);
  }
  sub_20E96C574(a15, *(_QWORD **)(a15 + 8));
  _Unwind_Resume(a1);
}

void sub_20EEF2B7C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x8_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  _BYTE v37[32];
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;

  v3 = a1 + 8;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 8;
    do
    {
      v8 = sub_20E96C45C((unsigned __int8 *)(v4 + 32), a2);
      if (v8 >= 0)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (v8 >= 0)
        v7 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v7 != v3 && (sub_20E96C45C(a2, (unsigned __int8 *)(v7 + 32)) & 0x80) == 0)
    {
      v12.i64[0] = *(_QWORD *)(v7 + 48);
      v12.i32[2] = *(_DWORD *)(v7 + 56);
      v13.i64[0] = *(_QWORD *)(v7 + 60);
      v13.i32[2] = *(_DWORD *)(v7 + 68);
      v10.i64[0] = *(_QWORD *)(a3 + 48);
      v10.i32[2] = *(_DWORD *)(a3 + 56);
      v14 = (int32x4_t)vsubq_f32(v10, v12);
      v11.i64[0] = *(_QWORD *)(a3 + 32);
      v11.i32[2] = *(_DWORD *)(a3 + 40);
      v15 = (int32x4_t)vsubq_f32(v11, v13);
      v16 = (float32x4_t)vextq_s8((int8x16_t)vzip1q_s32(v14, v14), (int8x16_t)vuzp1q_s32(v14, v15), 0xCuLL);
      v17 = (float32x4_t)vdupq_n_s32(0x358637BDu);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v17, vabsq_f32(v16))))) & 1) != 0
        || (v18 = vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v17.f32, vabs_f32((float32x2_t)__PAIR64__(v15.u32[1], v15.u32[2])))), (v18.i8[4] & 1) != 0)|| (v18.i8[0] & 1) != 0)
      {
        *(_DWORD *)(v7 + 56) = v10.i32[2];
        *(_QWORD *)(v7 + 48) = v10.i64[0];
        v19 = *(_QWORD *)(a3 + 32);
        v10.i32[0] = *(_DWORD *)(a3 + 40);
        *(_DWORD *)(v7 + 68) = v10.i32[0];
        *(_QWORD *)(v7 + 60) = v19;
        v20 = *(_QWORD *)(v7 + 120);
        v21 = *(_QWORD *)(v7 + 128);
        if (v20 != v21)
        {
          v31 = v13;
          v32 = v12;
          do
          {
            *(_DWORD *)&v37[8] = v12.i32[2];
            *(_QWORD *)v37 = v12.i64[0];
            *(_DWORD *)&v37[20] = v13.i32[2];
            *(_QWORD *)&v37[12] = v13.i64[0];
            sub_20EEE82B4((uint64_t)v37, (float32x4_t *)&v40, v10);
            v22.i64[0] = vzip1q_s32(v40, v41).u64[0];
            v23 = (int8x16_t)vnegq_f32(v43);
            v22.i64[1] = v42.u32[0];
            v24 = (int8x16_t)vtrn2q_s32(v40, v41);
            v24.i32[2] = v42.i32[1];
            v25 = vzip2q_s32(v40, v41);
            *(float32x2_t *)v26.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v22.f32, *(float *)v23.i32), *(float32x2_t *)v24.i8, *(float32x2_t *)v43.f32, 1), *(float32x2_t *)v25.i8, v43, 2);
            v25.i32[2] = v42.i32[2];
            v26.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v23.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), *(float32x2_t *)v43.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)).u32[0]);
            v27.i32[3] = 0;
            v27.i32[0] = v24.i32[0];
            v28 = vextq_s8(vextq_s8(v24, v24, 0xCuLL), (int8x16_t)v25, 8uLL);
            v24.i64[0] = v28.i64[1];
            *(uint64_t *)((char *)v27.i64 + 4) = v28.i64[0];
            v24.i64[1] = vdupq_laneq_s32(v25, 2).u32[0];
            v35 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)(v20 + 16))), v27, *(float32x2_t *)(v20 + 16), 1), (float32x4_t)v24, *(float32x4_t *)(v20 + 16), 2), v26, *(float32x4_t *)(v20 + 16), 3);
            v36 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)v20)), v27, *(float32x2_t *)v20, 1), (float32x4_t)v24, *(float32x4_t *)v20, 2), v26, *(float32x4_t *)v20, 3);
            v34 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)(v20 + 32))), v27, *(float32x2_t *)(v20 + 32), 1), (float32x4_t)v24, *(float32x4_t *)(v20 + 32), 2), v26, *(float32x4_t *)(v20 + 32), 3);
            v33 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)(v20 + 48))), v27, *(float32x2_t *)(v20 + 48), 1), (float32x4_t)v24, *(float32x4_t *)(v20 + 48), 2), v26, *(float32x4_t *)(v20 + 48), 3);
            v44 = *(_QWORD *)(v7 + 48);
            v45 = *(_DWORD *)(v7 + 56);
            v46 = *(_QWORD *)(v7 + 60);
            v47 = *(_DWORD *)(v7 + 68);
            sub_20EEE82B4((uint64_t)&v44, (float32x4_t *)v37, v33);
            v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v37, v35.f32[0]), *(float32x4_t *)&v37[16], *(float32x2_t *)v35.f32, 1), v38, v35, 2), v39, v35, 3);
            v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v37, v34.f32[0]), *(float32x4_t *)&v37[16], *(float32x2_t *)v34.f32, 1), v38, v34, 2), v39, v34, 3);
            v10 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v37, v33.f32[0]), *(float32x4_t *)&v37[16], *(float32x2_t *)v33.f32, 1), v38, v33, 2), v39, v33, 3);
            *(float32x4_t *)v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v37, v36.f32[0]), *(float32x4_t *)&v37[16], *(float32x2_t *)v36.f32, 1), v38, v36, 2), v39, v36, 3);
            *(float32x4_t *)(v20 + 16) = v29;
            v13 = v31;
            v12 = v32;
            *(float32x4_t *)(v20 + 32) = v30;
            *(float32x4_t *)(v20 + 48) = v10;
            v20 += 144;
          }
          while (v20 != v21);
        }
        *(_BYTE *)(v7 + 160) = 1;
      }
    }
  }
}

void sub_20EEF2E84(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  if (a2)
  {
    v3 = (std::__shared_weak_count *)a2[7];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (std::__shared_weak_count *)a2[5];
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)a2[3];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)a2[1];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    JUMPOUT(0x212BC6398);
  }
}

void sub_20EEF2F9C(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_20EEF2F9C(a1, *a2);
    sub_20EEF2F9C(a1, a2[1]);
    v4 = (void *)a2[15];
    if (v4)
    {
      a2[16] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t *sub_20EEF2FEC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  uint64_t *result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (!v5)
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_20EEF30F8(a1, a3, (uint64_t)&v13);
    v11 = v13;
    *v13 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v6 = v11;
    v12 = **(_QWORD **)a1;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v11 = *v6;
    }
    sub_20E868578(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
    return v13;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (unsigned __int8 *)(v5 + 4);
      if ((sub_20E96C45C(a2, (unsigned __int8 *)v5 + 32) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if ((sub_20E96C45C(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  result = *v6;
  if (!*v6)
    goto LABEL_10;
  return result;
}

__n128 sub_20EEF30F8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xA8uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *((_OWORD *)v6 + 2) = *(_OWORD *)a2;
  *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(v6 + 60) = *(_QWORD *)(a2 + 28);
  *((_DWORD *)v6 + 17) = *(_DWORD *)(a2 + 36);
  *((_DWORD *)v6 + 22) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v6 + 104) = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v6 + 15) = 0;
  *(_OWORD *)(v6 + 92) = v7;
  *((_QWORD *)v6 + 16) = 0;
  *((_QWORD *)v6 + 17) = 0;
  v8 = *(_QWORD *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 96);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    v11 = 0x8E38E38E38E38E39 * (v10 >> 4);
    if (v11 >= 0x1C71C71C71C71C8)
      sub_20E969238();
    v12 = (char *)operator new(v10);
    v13 = 0;
    *((_QWORD *)v6 + 15) = v12;
    *((_QWORD *)v6 + 16) = v12;
    *((_QWORD *)v6 + 17) = &v12[144 * v11];
    do
    {
      v14 = v8 + v13;
      v15 = &v12[v13];
      v16 = *(_OWORD *)(v8 + v13);
      v17 = *(_OWORD *)(v8 + v13 + 16);
      v18 = *(_OWORD *)(v8 + v13 + 48);
      *((_OWORD *)v15 + 2) = *(_OWORD *)(v8 + v13 + 32);
      *((_OWORD *)v15 + 3) = v18;
      *(_OWORD *)v15 = v16;
      *((_OWORD *)v15 + 1) = v17;
      v20 = *(_OWORD *)(v8 + v13 + 96);
      v19 = *(_OWORD *)(v8 + v13 + 112);
      v21 = *(_OWORD *)(v8 + v13 + 80);
      *(_OWORD *)(v15 + 121) = *(_OWORD *)(v8 + v13 + 121);
      *((_OWORD *)v15 + 6) = v20;
      *((_OWORD *)v15 + 7) = v19;
      *((_OWORD *)v15 + 5) = v21;
      *((_OWORD *)v15 + 4) = *(_OWORD *)(v8 + v13 + 64);
      v13 += 144;
    }
    while (v14 + 144 != v9);
    *((_QWORD *)v6 + 16) = &v12[v13];
  }
  result = *(__n128 *)(a2 + 112);
  *((__n128 *)v6 + 9) = result;
  v6[160] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20EEF3260(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 128) = v5;
    operator delete(v5);
  }
  sub_20EEF3284(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEF3284(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[15];
      if (v3)
      {
        v2[16] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20EEF32D0(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v6;
  char v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  BOOL v13;
  uint64_t *v14;
  void *v15;

  v2 = (unsigned __int8 *)(a1 + 1);
  v3 = a1[1];
  if (!v3)
    return 0;
  v6 = (unsigned __int8 *)(a1 + 1);
  do
  {
    v7 = sub_20E96C45C(v3 + 32, a2);
    if (v7 >= 0)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7 >= 0)
      v6 = v3;
    v3 = (unsigned __int8 *)*v8;
  }
  while (*v8);
  if (v6 == v2 || (sub_20E96C45C(a2, v6 + 32) & 0x80) != 0)
    return 0;
  v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = *(unsigned __int8 **)v9;
    }
    while (v9);
  }
  else
  {
    v12 = v6;
    do
    {
      v10 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
      v13 = *(_QWORD *)v10 == (_QWORD)v12;
      v12 = v10;
    }
    while (!v13);
  }
  if (*a1 == v6)
    *a1 = v10;
  v14 = (uint64_t *)a1[1];
  --a1[2];
  sub_20E8D2134(v14, (uint64_t *)v6);
  v15 = (void *)*((_QWORD *)v6 + 15);
  if (v15)
  {
    *((_QWORD *)v6 + 16) = v15;
    operator delete(v15);
  }
  operator delete(v6);
  return 1;
}

void sub_20EEF33D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, unsigned __int8 a5@<W4>, _QWORD *a6@<X8>, float32x4_t a7@<Q1>, float32x4_t a8@<Q2>)
{
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  double v17;
  double v18;
  double v19;
  float32x2_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  int32x4_t v39;
  float v40;
  float32x4_t v41;
  float32x2_t v42;
  float v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  int32x4_t v48;
  float32x2_t v49;
  float v50;
  float v51;
  int8x16_t v52;
  float32x2_t v53;
  float v54;
  int8x16_t v55;
  float v56;
  BOOL v57;
  char v58;
  int v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  float32x4_t v64;
  __int128 v65;
  unsigned int v66;
  __int128 v67;
  float v68;
  float32x4_t v69;
  float32x4_t v70;
  _QWORD *v71;
  char v72;
  _BYTE v73[20];
  __int32 v74;
  _BYTE v75[32];
  int v76;
  void *__p;
  void *v78;
  void *v79[2];
  void *v80;
  void *v81;
  char v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  _BYTE v87[20];
  __int32 v88;
  float32x2_t v89[9];
  _OWORD v90[2];
  unsigned int v91;

  sub_20EEEB2F0(a2, (uint64_t)v89, a7, a8);
  v14.i64[0] = *(_QWORD *)(a2 + 12);
  v14.i32[2] = *(_DWORD *)(a2 + 20);
  v15 = vmulq_n_f32(v14, COERCE_FLOAT(*(_QWORD *)(a2 + 28)));
  *(_QWORD *)v87 = *(_QWORD *)a2;
  v14.i64[0] = *(_QWORD *)v87;
  v14.i32[2] = *(_DWORD *)(a2 + 8);
  v16 = vaddq_f32(v14, v15);
  *(_DWORD *)&v87[8] = v14.i32[2];
  v88 = v16.i32[2];
  *(_QWORD *)&v87[12] = v16.i64[0];
  sub_20EEFAF68((uint64_t)v79, a1, v89, a4, a5, *(double *)v16.i64, v14, v17, v18, v19, v20, v21, v22);
  sub_20EEF5AF0(v79, a3, (uint64_t)v87, *(_DWORD *)(a2 + 40), (uint64_t)a4, a5, &__p);
  v29 = __p;
  if (__p == v78)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    if (!v29)
      goto LABEL_31;
LABEL_30:
    v78 = v29;
    operator delete(v29);
    goto LABEL_31;
  }
  v30 = *(_QWORD *)__p;
  *(_DWORD *)&v73[8] = *((_DWORD *)__p + 2);
  *(_QWORD *)v73 = v30;
  v31 = *(_QWORD *)((char *)__p + 12);
  v74 = *((_DWORD *)__p + 5);
  *(_QWORD *)&v73[12] = v31;
  LODWORD(v31) = *((_DWORD *)__p + 14);
  v32 = *(_OWORD *)((char *)__p + 40);
  v33 = *(_OWORD *)((char *)__p + 24);
  *(_OWORD *)v75 = v33;
  *(_OWORD *)&v75[16] = v32;
  v76 = v31;
  if (a5)
  {
    v71 = a4 + 6;
    v34 = 1;
  }
  else
  {
    v34 = 0;
    LOBYTE(v71) = 0;
  }
  v72 = v34;
  v35 = sub_20EEEAB40(v89, (uint64_t)v73, (uint64_t *)&v71, *(double *)&v32, *(double *)&v33, v23, v24, v25, v26, v27, v28);
  if ((v35 & 0xFF00000000) != 0)
  {
    if (!v75[20])
      v75[20] = 1;
    v40 = (double)*(unint64_t *)v75 / (*(float *)&v35 * 10000.0);
    *(float *)&v75[16] = v40;
  }
  v36.i32[0] = v74;
  v37.i64[0] = *(_QWORD *)&v73[12];
  v41 = v37;
  v41.i32[2] = v74;
  v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v73[12], 1);
  v43 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32), v42, *(float32x2_t *)&v73[12], 1), *(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32).f32[0];
  if (v43 == 1.0 || (v43 >= 1.0 ? (v44 = v43 + -1.0) : (v44 = 1.0 - v43), v44 <= 0.000001))
  {
    v46 = *(float32x4_t *)v73;
    v46.f32[0] = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v73, *(float32x2_t *)&v73[12]), v42, *(float32x2_t *)v73, 1), *(float32x2_t *)v36.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL)).f32[0];
  }
  else
  {
    v38.f32[0] = 1.0 / sqrtf(v43);
    v45 = vmulq_n_f32(v41, v38.f32[0]);
    v46 = *(float32x4_t *)v73;
    v47 = vmul_lane_f32(v38, *(float32x2_t *)&v73[12], 1);
    *(float32x2_t *)v39.i8 = vmul_f32(*(float32x2_t *)v36.f32, v38);
    v48.i64[0] = v45.i64[0];
    v48.u64[1] = (unint64_t)v47;
    v41 = (float32x4_t)vuzp1q_s32(v48, v39);
    v49 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.f32, 1);
    v36 = (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL);
    v50 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), v47, *(float32x2_t *)v45.f32, 1), *(float32x2_t *)v36.f32, *(float32x2_t *)v39.i8).f32[0];
    if (v50 == 1.0 || (v50 >= 1.0 ? (v51 = v50 + -1.0) : (v51 = 1.0 - v50), v51 <= 0.000001))
    {
      v46.f32[0] = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v73, *(float32x2_t *)v45.f32), v49, *(float32x2_t *)v73, 1), *(float32x2_t *)v36.f32, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v73, *(int8x16_t *)v73, 8uLL)).f32[0];
      goto LABEL_24;
    }
    v41.f32[0] = sqrtf(v50);
    v36 = vmulq_n_f32(v45, 1.0 / v41.f32[0]);
    v46 = (float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL);
    v46.f32[0] = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v73, *(float32x2_t *)v36.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.f32, 1), *(float32x2_t *)v73, 1), *(float32x2_t *)v46.f32, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v73, *(int8x16_t *)v73, 8uLL)).f32[0];
    v41 = vdivq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 0));
  }
  v45 = v41;
LABEL_24:
  v36.i64[0] = *(_QWORD *)&v87[12];
  v36.i32[2] = v88;
  v52 = (int8x16_t)vsubq_f32(v36, *(float32x4_t *)v87);
  v53 = (float32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
  LODWORD(v54) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v52.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 1), *(float32x2_t *)v41.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), v53).u32[0];
  if (fabsf(v54) < 0.00000011921
    || ((v46.f32[0] = -v46.f32[0],
         v55 = (int8x16_t)vmlsq_lane_f32(*(float32x4_t *)v87, v45, *(float32x2_t *)v46.f32, 0),
         *(float32x2_t *)v41.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v55.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.f32, 1), *(float32x2_t *)v55.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), v53), v56 = (float)-v41.f32[0] / v54, v41.i32[0] = 1.0, v56 >= 0.0)? (v57 = v56 <= 1.0): (v57 = 0), !v57))
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    v29 = __p;
    if (!__p)
      goto LABEL_31;
    goto LABEL_30;
  }
  v68 = v56;
  v69 = (float32x4_t)v52;
  v70 = *(float32x4_t *)v87;
  sub_20EEF0820((unint64_t)v73 | 0xC, (int32x2_t *)(a2 + 12), (uint64_t)v90, v41, v46, *(double *)v87);
  v67 = v90[0];
  v65 = v90[1];
  v66 = v91;
  v58 = v75[0];
  v59 = v76;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  v60 = operator new(0x90uLL);
  HIDWORD(v61) = 0;
  v62 = v67;
  LODWORD(v61) = HIDWORD(v67);
  *(_QWORD *)&v63 = *((_QWORD *)&v65 + 1);
  *(_QWORD *)((char *)&v61 + 4) = v65;
  HIDWORD(v62) = 0;
  *((_QWORD *)&v63 + 1) = v66;
  v64 = vmlaq_n_f32(v70, v69, v68);
  v64.i32[3] = 1.0;
  a6[1] = v60 + 9;
  a6[2] = v60 + 9;
  *v60 = v62;
  v60[1] = v61;
  v60[2] = v63;
  v60[3] = v64;
  *((_QWORD *)v60 + 8) = 2;
  *((_DWORD *)v60 + 18) = v59;
  *((_BYTE *)v60 + 80) = v58;
  *(_OWORD *)((char *)v60 + 81) = *(_OWORD *)&v75[1];
  v60[6] = *(_OWORD *)&v75[16];
  *((_BYTE *)v60 + 112) = 1;
  *((_BYTE *)v60 + 120) = 0;
  *((_BYTE *)v60 + 136) = 0;
  *a6 = v60;
  v29 = __p;
  if (__p)
    goto LABEL_30;
LABEL_31:
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v82)
  {
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
  }
}

void sub_20EEF385C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  if (__p)
  {
    operator delete(__p);
    sub_20EEF389C((uint64_t)&a35);
    _Unwind_Resume(a1);
  }
  sub_20EEF389C((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEF389C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v4 = *(void **)(a1 + 16);
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20EEF38F4(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, _QWORD *a5@<X8>, float32x4_t a6@<Q0>, int8x16_t a7@<Q1>)
{
  float32x4_t v7;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  float32x4_t v12;
  int8x16_t v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float32x4_t v27;
  int8x16_t v28;
  float v29;
  BOOL v30;
  float v31;
  BOOL v32;
  float v33;
  BOOL v34;
  int32x4_t v35;
  float v36;
  BOOL v37;
  float v38;
  _QWORD *v40;
  unsigned int *v41;
  uint64_t v42;
  __int128 *v43;
  _QWORD *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float32x4_t v57;
  int8x16_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int v66;
  unsigned int v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  float v70;
  int8x16_t v71;
  float32x2_t v72;
  float32x2_t v73;
  uint64_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float v79;
  float v80;
  float32x4_t v81;
  float v82;
  float32x2_t v83;
  int32x4_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float v88;
  float v89;
  int8x16_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float v94;
  float v95;
  float32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  int32x4_t v103;
  int8x16_t v104;
  int32x4_t v105;
  int32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int8x16_t v110;
  int32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  float32x2_t v116;
  __int128 *v117;
  float32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int32x4_t v122;
  float32x2_t v123;
  float v124;
  float v125;
  int8x16_t v126;
  float32x2_t v127;
  float32x2_t v128;
  int32x4_t v129;
  int8x16_t v130;
  float32x2_t v131;
  float v132;
  float v133;
  float v134;
  int8x16_t v135;
  float v136;
  int8x16_t v137;
  float v138;
  int8x16_t v140;
  float32x2_t v141;
  int8x16_t v142;
  float32x2_t v143;
  float32x4_t v144;
  float v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x2_t v148;
  float v149;
  void *v150;
  int v151;
  int v152;
  char *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  int v158;
  __int16 v159;
  uint64_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  uint64_t v165;
  uint64_t v166;
  float32x4_t v167;
  float32x4_t v168;
  int8x16_t v169;
  int8x16_t v170;
  float32x4_t v171;
  __int128 *v172;
  __int128 *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  __int8 v180;
  char v181;
  char v182;
  char v183;
  char v184;
  char v185;
  char v186;
  char v187;
  char v188;
  char v189;
  char v190;
  char v191;
  char v192;
  char v193;
  char v194;
  char v195;
  char v196;
  char v197;
  char v198;
  char v199;
  char v200;
  char v201;
  char v202;
  char v203;
  char v204;
  char v205;
  char v206;
  char v207;
  char v208;
  char v209;
  char v210;
  char v211;
  char v212;
  char v213;
  char v214;
  __int8 v215;
  __int8 v216;
  char v217;
  __int8 v218;
  char v219;
  __int8 v220;
  char v221;
  __int8 v222;
  char v223;
  __int8 v224;
  char v225;
  __int8 v226;
  char v227;
  __int8 v228;
  char v229;
  __int8 v230;
  char v231;
  __int8 v232;
  char v233;
  __int8 v234;
  char v235;
  __int8 v236;
  char v237;
  __int8 v238;
  char v239;
  __int8 v240;
  char v241;
  __int8 v242;
  unsigned int v243;
  uint64_t v245;
  uint64_t v246;
  float v247;
  char v248;
  int v249;
  float v250;
  float32x2_t v251;
  float32x2_t v252;
  float32x4_t v253;
  int32x2_t *v254;
  unsigned int *v256;
  float32x4_t v257;
  int32x4_t v258;
  void *__p[2];
  uint64_t v260;
  _BYTE v261[7];
  uint64_t v262;
  __int32 v263;
  _BYTE v264[20];
  unsigned __int32 v265;
  char v266;
  _BYTE v267[28];
  unsigned __int32 v268;
  char v269;
  char v270;
  char v271;
  char v272;
  _BYTE v273[15];
  _BYTE v274[31];
  uint64_t v275;

  v275 = *MEMORY[0x24BDAC8D0];
  v9 = (uint64_t *)a1[2];
  if (!v9)
    goto LABEL_107;
  v10 = a2;
  v11 = a1;
  v249 = 0;
  v248 = 0;
  v254 = (int32x2_t *)(a2 + 12);
  v7.i64[0] = *(_QWORD *)a2;
  v7.i32[2] = *(_DWORD *)(a2 + 8);
  a6.i64[0] = *(_QWORD *)(a2 + 12);
  a6.i32[2] = *(_DWORD *)(a2 + 20);
  v12 = vmlaq_n_f32(v7, a6, COERCE_FLOAT(*(_QWORD *)(a2 + 28)));
  v13 = (int8x16_t)vsubq_f32(v12, v7);
  v252 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1);
  v251 = (float32x2_t)vextq_s8(v13, v13, 8uLL).u64[0];
  v14 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), v252, *(float32x2_t *)v13.i8, 1), v251, v251).f32[0]);
  v15 = v14 * 0.5;
  v16.i64[0] = 0x3F0000003F000000;
  v16.i64[1] = 0x3F0000003F000000;
  v253 = (float32x4_t)v13;
  v17 = vmulq_n_f32((float32x4_t)v13, 1.0 / v14);
  v18 = fabsf(v17.f32[0]);
  v19 = v15 * v18;
  v20 = v17.f32[1];
  v21 = fabsf(v17.f32[1]);
  v22 = v15 * v21;
  v258 = (int32x4_t)v17;
  v23 = v17.f32[2];
  v245 = a4;
  v246 = a3 + 24;
  v247 = INFINITY;
  v24 = fabsf(v17.f32[2]);
  v25 = v15 * v24;
  _Q0 = (int32x4_t)vnegq_f32(vmulq_f32(vaddq_f32(v7, v12), v16));
  v257 = (float32x4_t)_Q0;
  do
  {
    _Q0.i64[0] = *(uint64_t *)((char *)v9 + 44);
    _Q0.i32[2] = *((_DWORD *)v9 + 13);
    a7.i64[0] = v9[4];
    a7.i32[2] = *((_DWORD *)v9 + 10);
    v27.i64[0] = 0x3F0000003F000000;
    v27.i64[1] = 0x3F0000003F000000;
    v28 = (int8x16_t)vmulq_f32(vsubq_f32((float32x4_t)_Q0, (float32x4_t)a7), v27);
    _Q0 = (int32x4_t)vaddq_f32((float32x4_t)_Q0, (float32x4_t)a7);
    a7 = (int8x16_t)vmlaq_f32(v257, (float32x4_t)_Q0, v27);
    v29 = fabsf(*(float *)&a7.i32[1]);
    v30 = fabsf(*(float *)a7.i32) <= (float)((float)(v19 + *(float *)v28.i32) + 0.000001)
       && v29 <= (float)((float)(v22 + *(float *)&v28.i32[1]) + 0.000001);
    v31 = fabsf(*(float *)&a7.i32[2]);
    v32 = v30 && v31 <= (float)((float)(v25 + *(float *)&v28.i32[2]) + 0.000001);
    v33 = vabds_f32(v23 * *(float *)&a7.i32[1], v20 * *(float *)&a7.i32[2]);
    v34 = v32
       && v33 <= (float)((float)((float)(v21 * *(float *)&v28.i32[2]) + (float)(v24 * *(float *)&v28.i32[1])) + 0.000001);
    v35 = v258;
    v36 = vabds_f32(*(float *)v258.i32 * *(float *)&a7.i32[2], v23 * *(float *)a7.i32);
    v37 = v34
       && v36 <= (float)((float)((float)(v18 * *(float *)&v28.i32[2]) + (float)(v24 * *(float *)v28.i32)) + 0.000001);
    v38 = vabds_f32(v20 * *(float *)a7.i32, *(float *)v258.i32 * *(float *)&a7.i32[1]);
    if (v37
      && v38 <= (float)((float)((float)(v18 * *(float *)&v28.i32[1]) + (float)(v21 * *(float *)v28.i32)) + 0.000001))
    {
      v40 = (_QWORD *)v9[7];
      v41 = (unsigned int *)v40[8];
      v256 = (unsigned int *)v40[9];
      if (v41 != v256)
      {
        v42 = 0;
        v43 = (__int128 *)(v9 + 2);
        do
        {
          v44 = a5;
          v45 = v41[1];
          v46 = *v40 + 12 * *v41;
          v47 = *v40 + 12 * v45;
          v48 = v41[2];
          v49 = *v40 + 12 * v48;
          _Q0.i64[0] = *(_QWORD *)v47;
          _Q0.i32[2] = *(_DWORD *)(v47 + 8);
          a7.i64[0] = *(_QWORD *)v46;
          a7.i32[2] = *(_DWORD *)(v46 + 8);
          v50 = (int32x4_t)vsubq_f32((float32x4_t)_Q0, (float32x4_t)a7);
          v28.i64[0] = *(_QWORD *)v49;
          v28.i32[2] = *(_DWORD *)(v49 + 8);
          v51 = (int32x4_t)vsubq_f32((float32x4_t)v28, (float32x4_t)a7);
          v52 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v50, (int8x16_t)v50, 0xCuLL), (int8x16_t)v50, 8uLL);
          _Q0 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v50, v50), (int8x16_t)v50, 0xCuLL);
          v28 = (int8x16_t)vmlsq_f32(vmulq_f32(v52, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v51, v51), (int8x16_t)v51, 0xCuLL)), (float32x4_t)_Q0, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v51, (int8x16_t)v51, 0xCuLL), (int8x16_t)v51, 8uLL));
          a7 = vextq_s8(v28, v28, 8uLL);
          if ((float)(sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), *(float32x2_t *)v28.i8, 1), *(float32x2_t *)a7.i8, *(float32x2_t *)a7.i8).f32[0])* 0.5) < 0.00000001)
          {
            a5 = v44;
            goto LABEL_24;
          }
          v53 = v40[4];
          v54 = v53 + 12 * *v41;
          v55 = v53 + 12 * v45;
          _Q0.i64[0] = *(_QWORD *)v54;
          _Q0.i32[2] = *(_DWORD *)(v54 + 8);
          v56 = v53 + 12 * v48;
          a7.i64[0] = *(_QWORD *)v55;
          a7.i32[2] = *(_DWORD *)(v55 + 8);
          v57 = vaddq_f32((float32x4_t)_Q0, (float32x4_t)a7);
          a7.i64[0] = *(_QWORD *)v56;
          a7.i32[2] = *(_DWORD *)(v56 + 8);
          _Q0 = (int32x4_t)vaddq_f32(v57, (float32x4_t)a7);
          __asm { FMOV            V7.4S, #3.0 }
          v63 = (int8x16_t)vdivq_f32((float32x4_t)_Q0, _Q7);
          *(int32x2_t *)_Q0.i8 = vdup_lane_s32(*(int32x2_t *)v63.i8, 1);
          v64 = (int32x4_t)vextq_s8(v63, v63, 8uLL);
          *(float *)v35.i32 = 1.0
                            / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), *(float32x2_t *)_Q0.i8, *(float32x2_t *)v63.i8, 1), *(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8).f32[0]);
          v65 = (int8x16_t)vmulq_n_f32((float32x4_t)v63, *(float *)v35.i32);
          if (*(_DWORD *)(v10 + 40) == 3)
          {
            v66 = 1;
            v67 = 3;
          }
          else
          {
            v68 = atomic_load((unsigned __int8 *)&qword_254A60078);
            if ((v68 & 1) == 0)
            {
              v175 = v11;
              v178 = v7;
              v172 = v43;
              v167 = _Q7;
              v169 = v65;
              v163 = v64;
              v165 = v63.i64[0];
              v161 = v35;
              v151 = __cxa_guard_acquire(&qword_254A60078);
              v35 = v161;
              v64 = v163;
              v63.i64[0] = v165;
              _Q7 = v167;
              v65 = v169;
              v43 = v172;
              v7 = v178;
              v11 = v175;
              if (v151)
              {
                dword_254A60070 = 1065289374;
                __cxa_guard_release(&qword_254A60078);
                v35 = v161;
                v64 = v163;
                v63.i64[0] = v165;
                _Q7 = v167;
                v65 = v169;
                v43 = v172;
                v7 = v178;
                v11 = v175;
              }
            }
            v69 = atomic_load((unsigned __int8 *)&qword_254A60080);
            if ((v69 & 1) == 0)
            {
              v176 = v11;
              v179 = v7;
              v173 = v43;
              v168 = _Q7;
              v170 = v65;
              v164 = v64;
              v166 = v63.i64[0];
              v162 = v35;
              v152 = __cxa_guard_acquire(&qword_254A60080);
              v35 = v162;
              v64 = v164;
              v63.i64[0] = v166;
              _Q7 = v168;
              v65 = v170;
              v43 = v173;
              v7 = v179;
              v11 = v176;
              if (v152)
              {
                dword_254A60074 = 1035108030;
                __cxa_guard_release(&qword_254A60080);
                v35 = v162;
                v64 = v164;
                v63.i64[0] = v166;
                _Q7 = v168;
                v65 = v170;
                v43 = v173;
                v7 = v179;
                v11 = v176;
              }
            }
            v70 = fabsf(*(float *)&v65.i32[2]);
            if (v70 <= *(float *)&dword_254A60074)
              v66 = 1;
            else
              v66 = 2;
            if (v70 >= *(float *)&dword_254A60070)
              v66 = 0;
            v67 = *(_DWORD *)(v10 + 40);
            if (v67)
            {
              if (v67 == 3)
                goto LABEL_42;
              if (v67 != 2)
                goto LABEL_40;
            }
            if (v70 < *(float *)&dword_254A60070)
            {
LABEL_40:
              if (v67 - 1 > 2 || v66 != 1)
              {
LABEL_43:
                a5 = v44;
                v10 = a2;
                goto LABEL_24;
              }
              goto LABEL_42;
            }
            v66 = 0;
          }
LABEL_42:
          _Q0.i32[0] = v254[1].i32[0];
          *(int32x2_t *)a7.i8 = *v254;
          v28 = a7;
          v28.i32[2] = _Q0.i32[0];
          v71 = (int8x16_t)vmulq_n_f32((float32x4_t)v28, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)vdup_lane_s32(*v254, 1), (float32x2_t)*v254, 1), *(float32x2_t *)_Q0.i8, *(float32x2_t *)_Q0.i8).f32[0]));
          v72 = vmul_lane_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v63.i8, 1);
          *(float32x2_t *)v64.i8 = vmul_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v35.i8);
          v73 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v71.i8), v72, *(float32x2_t *)v71.i8, 1);
          _Q0 = (int32x4_t)vextq_s8(v71, v71, 8uLL);
          if (vmla_f32(v73, *(float32x2_t *)_Q0.i8, *(float32x2_t *)v64.i8).f32[0] > 0.0)
            goto LABEL_43;
          v74 = v65.i64[0];
          _Q0.u64[1] = (unint64_t)v72;
          v75 = (int8x16_t)vuzp1q_s32(_Q0, v64);
          _Q0.i64[0] = *(_QWORD *)v46;
          _Q0.i32[2] = *(_DWORD *)(v46 + 8);
          a7.i64[0] = *(_QWORD *)v47;
          a7.i32[2] = *(_DWORD *)(v47 + 8);
          v28.i64[0] = *(_QWORD *)v49;
          v28.i32[2] = *(_DWORD *)(v49 + 8);
          v76 = (int8x16_t)vdivq_f32(vaddq_f32(vaddq_f32((float32x4_t)_Q0, (float32x4_t)a7), (float32x4_t)v28), _Q7);
          v77 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1);
          v78 = (float32x2_t)vextq_s8(v65, v65, 8uLL).u64[0];
          v79 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v65.i8), v72, *(float32x2_t *)v65.i8, 1), v78, *(float32x2_t *)v64.i8).f32[0];
          if (v79 == 1.0)
          {
            v80 = 1.0;
            *(float *)v76.i32 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v65.i8), v77, *(float32x2_t *)v76.i8, 1), v78, (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)).f32[0];
            a5 = v44;
          }
          else
          {
            v81 = v7;
            v82 = v79 + -1.0;
            if (v79 < 1.0)
              v82 = 1.0 - v79;
            a5 = v44;
            if (v82 <= 0.000001)
            {
              v80 = 1.0;
              *(float *)v76.i32 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v65.i8), v77, *(float32x2_t *)v76.i8, 1), v78, (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)).f32[0];
              v7 = v81;
            }
            else
            {
              *(float *)v75.i32 = 1.0 / sqrtf(v79);
              v65 = (int8x16_t)vmulq_n_f32((float32x4_t)v65, *(float *)v75.i32);
              v83 = vmul_f32(v72, *(float32x2_t *)v75.i8);
              *(float32x2_t *)v35.i8 = vmul_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v75.i8);
              v84.i64[0] = v65.i64[0];
              v84.u64[1] = (unint64_t)v83;
              v75 = (int8x16_t)vuzp1q_s32(v84, v35);
              v85 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1);
              v86 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v65.i8), v83, *(float32x2_t *)v65.i8, 1);
              v87 = (float32x2_t)vextq_s8(v65, v65, 8uLL).u64[0];
              v88 = vmla_f32(v86, v87, *(float32x2_t *)v35.i8).f32[0];
              v7 = v81;
              if (v88 == 1.0)
                goto LABEL_55;
              v89 = v88 + -1.0;
              if (v88 < 1.0)
                v89 = 1.0 - v88;
              if (v89 <= 0.000001)
              {
LABEL_55:
                v80 = 1.0;
                *(float *)v76.i32 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v65.i8), v85, *(float32x2_t *)v76.i8, 1), v87, (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)).f32[0];
              }
              else
              {
                *(float *)v75.i32 = sqrtf(v88);
                v80 = 1.0;
                v90 = (int8x16_t)vmulq_n_f32((float32x4_t)v65, 1.0 / *(float *)v75.i32);
                v91 = (float32x2_t)vextq_s8(v76, v76, 8uLL).u64[0];
                v92 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v90.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.i8, 1), *(float32x2_t *)v76.i8, 1);
                v76.i64[0] = vextq_s8(v90, v90, 8uLL).u64[0];
                *(float *)v76.i32 = -vmla_f32(v92, *(float32x2_t *)v76.i8, v91).f32[0];
                v75 = (int8x16_t)vdivq_f32((float32x4_t)v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.i8, 0));
                v65 = v75;
              }
            }
          }
          v93 = (float32x2_t)vextq_s8(v75, v75, 8uLL).u64[0];
          LODWORD(v94) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v253.f32), v252, *(float32x2_t *)v75.i8, 1), v251, v93).u32[0];
          v35.i32[1] = 872415232;
          if (fabsf(v94) < 0.00000011921)
            goto LABEL_63;
          *(float *)v76.i32 = -*(float *)v76.i32;
          v35 = (int32x4_t)vmlsq_lane_f32(v7, (float32x4_t)v65, *(float32x2_t *)v76.i8, 0);
          v95 = (float)-vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v35.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1), *(float32x2_t *)v35.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), v93).f32[0]/ v94;
          if (v95 < 0.0 || v95 > v80)
            goto LABEL_63;
          v97 = vmlaq_n_f32(v7, v253, v95);
          v98 = (int32x4_t)vsubq_f32((float32x4_t)v28, (float32x4_t)a7);
          v99 = (int32x4_t)vsubq_f32(v97, (float32x4_t)a7);
          v100 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v98, (int8x16_t)v98, 0xCuLL), (int8x16_t)v98, 8uLL);
          v101 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v98, v98), (int8x16_t)v98, 0xCuLL);
          v102 = (int8x16_t)vmlsq_f32(vmulq_f32(v100, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v99, v99), (int8x16_t)v99, 0xCuLL)), v101, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v99, (int8x16_t)v99, 0xCuLL), (int8x16_t)v99, 8uLL));
          v103 = (int32x4_t)vsubq_f32((float32x4_t)_Q0, (float32x4_t)a7);
          v35 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v103, v103), (int8x16_t)v103, 0xCuLL);
          v104 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)v35, v100), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v103, (int8x16_t)v103, 0xCuLL), (int8x16_t)v103, 8uLL), v101);
          *(int32x2_t *)v35.i8 = vdup_lane_s32(*(int32x2_t *)v104.i8, 1);
          if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v104.i8), *(float32x2_t *)v35.i8, *(float32x2_t *)v102.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL)).f32[0] >= 0.0)
          {
            v177 = v7;
            v105 = (int32x4_t)vsubq_f32((float32x4_t)v28, (float32x4_t)_Q0);
            v106 = (int32x4_t)vsubq_f32(v97, (float32x4_t)_Q0);
            v107 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v105, (int8x16_t)v105, 0xCuLL), (int8x16_t)v105, 8uLL);
            v28 = vextq_s8((int8x16_t)vuzp1q_s32(v106, v106), (int8x16_t)v106, 0xCuLL);
            v108 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v105, v105), (int8x16_t)v105, 0xCuLL);
            v109 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v106, (int8x16_t)v106, 0xCuLL), (int8x16_t)v106, 8uLL);
            v110 = (int8x16_t)vmlsq_f32(vmulq_f32(v107, (float32x4_t)v28), v108, v109);
            v111 = (int32x4_t)vsubq_f32((float32x4_t)a7, (float32x4_t)_Q0);
            _Q0 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v111, v111), (int8x16_t)v111, 0xCuLL);
            v112 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v111, (int8x16_t)v111, 0xCuLL), (int8x16_t)v111, 8uLL);
            a7 = (int8x16_t)vmulq_f32((float32x4_t)_Q0, v107);
            v113 = vmulq_f32(v112, v108);
            v114 = (int8x16_t)vsubq_f32((float32x4_t)a7, v113);
            v35 = (int32x4_t)vextq_s8(v110, v110, 8uLL);
            if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v110.i8, *(float32x2_t *)v114.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v114.i8, 1), *(float32x2_t *)v110.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL), *(float32x2_t *)v35.i8).f32[0] >= 0.0)
            {
              v28 = (int8x16_t)vmlsq_f32(vmulq_f32(v112, (float32x4_t)v28), (float32x4_t)_Q0, v109);
              v115 = (int8x16_t)vsubq_f32(v113, (float32x4_t)a7);
              a7 = vextq_s8(v28, v28, 8uLL);
              v116 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v115.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.i8, 1), *(float32x2_t *)v28.i8, 1);
              _Q0 = (int32x4_t)vextq_s8(v115, v115, 8uLL);
              if (vmla_f32(v116, *(float32x2_t *)_Q0.i8, *(float32x2_t *)a7.i8).f32[0] >= 0.0)
              {
                if (v67 == 2)
                {
                  v67 = v66 != 0;
                }
                else if (v67 >= 2)
                {
                  v67 = 2;
                }
                v174 = v11;
                v117 = v43;
                sub_20EEEC994(v11, v43, v42, 3, __p);
                sub_20EEF5640(0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 2), (float32x2_t *)__p[0], v67, (uint64_t)v264, v118, v119);
                if (v266)
                {
                  a7.i32[0] = v265;
                  v120.i64[0] = *(_QWORD *)&v264[12];
                  _Q0 = v120;
                  _Q0.i32[2] = v265;
                  v123 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v264[12], 1);
                  v124 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8), v123, *(float32x2_t *)&v264[12], 1), *(float32x2_t *)a7.i8, *(float32x2_t *)a7.i8).f32[0];
                  if (v124 == 1.0)
                    goto LABEL_81;
                  v125 = v124 + -1.0;
                  if (v124 < 1.0)
                    v125 = 1.0 - v124;
                  if (v125 <= 0.000001)
                  {
LABEL_81:
                    v134 = 1.0;
                    v127 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v264, *(float32x2_t *)_Q0.i8), v123, *(float32x2_t *)v264, 1), *(float32x2_t *)a7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v264, *(int8x16_t *)v264, 8uLL));
                    v127.f32[0] = -v127.f32[0];
                    v130 = (int8x16_t)_Q0;
                    v126 = (int8x16_t)_Q0;
                  }
                  else
                  {
                    *(float *)v121.i32 = 1.0 / sqrtf(v124);
                    v126 = (int8x16_t)vmulq_n_f32((float32x4_t)_Q0, *(float *)v121.i32);
                    v127.i32[1] = *(_DWORD *)&v264[4];
                    v128 = vmul_lane_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)&v264[12], 1);
                    *(float32x2_t *)v122.i8 = vmul_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)v121.i8);
                    v129.i64[0] = v126.i64[0];
                    v129.u64[1] = (unint64_t)v128;
                    v130 = (int8x16_t)vuzp1q_s32(v129, v122);
                    v131 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v126.i8, 1);
                    v121 = vextq_s8(v126, v126, 8uLL);
                    v132 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v126.i8, *(float32x2_t *)v126.i8), v128, *(float32x2_t *)v126.i8, 1), *(float32x2_t *)v121.i8, *(float32x2_t *)v122.i8).f32[0];
                    if (v132 == 1.0)
                      goto LABEL_95;
                    v133 = v132 + -1.0;
                    if (v132 < 1.0)
                      v133 = 1.0 - v132;
                    if (v133 <= 0.000001)
                    {
LABEL_95:
                      v134 = 1.0;
                      v35 = (int32x4_t)vextq_s8(*(int8x16_t *)v264, *(int8x16_t *)v264, 8uLL);
                      v127.f32[0] = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v264, *(float32x2_t *)v126.i8), v131, *(float32x2_t *)v264, 1), *(float32x2_t *)v121.i8, *(float32x2_t *)v35.i8).f32[0];
                    }
                    else
                    {
                      *(float *)v130.i32 = sqrtf(v132);
                      v134 = 1.0;
                      v121 = (int8x16_t)vmulq_n_f32((float32x4_t)v126, 1.0 / *(float *)v130.i32);
                      v127 = (float32x2_t)vextq_s8(v121, v121, 8uLL).u64[0];
                      v127.f32[0] = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v264, *(float32x2_t *)v121.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v121.i8, 1), *(float32x2_t *)v264, 1), v127, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v264, *(int8x16_t *)v264, 8uLL)).f32[0];
                      v130 = (int8x16_t)vdivq_f32((float32x4_t)v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.i8, 0));
                      v126 = v130;
                    }
                  }
                  v35.i64[0] = *(_QWORD *)(a2 + 12);
                  v35.i32[2] = *(_DWORD *)(a2 + 20);
                  v121.i64[0] = *(_QWORD *)a2;
                  v121.i32[2] = *(_DWORD *)(a2 + 8);
                  v135 = (int8x16_t)vsubq_f32(vmlaq_n_f32((float32x4_t)v121, (float32x4_t)v35, COERCE_FLOAT(*(_QWORD *)(a2 + 28))), (float32x4_t)v121);
                  v35 = (int32x4_t)vextq_s8(v130, v130, 8uLL);
                  LODWORD(v136) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v135.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v135.i8, 1), *(float32x2_t *)v130.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL), *(float32x2_t *)v35.i8).u32[0];
                  if (fabsf(v136) >= 0.00000011921)
                  {
                    v127.f32[0] = -v127.f32[0];
                    v137 = (int8x16_t)vmlsq_lane_f32((float32x4_t)v121, (float32x4_t)v126, v127, 0);
                    v138 = (float)-vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v137.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v130.i8, 1), *(float32x2_t *)v137.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL), *(float32x2_t *)v35.i8).f32[0]/ v136;
                    if (v138 >= 0.0 && v138 <= v134)
                    {
                      v171 = vmlaq_n_f32((float32x4_t)v121, (float32x4_t)v135, v138);
                      v140 = (int8x16_t)vsubq_f32(v171, (float32x4_t)v121);
                      v141 = (float32x2_t)vextq_s8(v140, v140, 8uLL).u64[0];
                      v142 = (int8x16_t)vmulq_n_f32((float32x4_t)v140, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v140.i8, *(float32x2_t *)v140.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v140.i8, 1), *(float32x2_t *)v140.i8, 1), v141, v141).f32[0]));
                      v143 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q0.i8, *(float32x2_t *)v142.i8), v123, *(float32x2_t *)v142.i8, 1);
                      v144 = (float32x4_t)vextq_s8(v142, v142, 8uLL);
                      v143.f32[0] = vmla_f32(v143, *(float32x2_t *)v144.f32, *(float32x2_t *)a7.i8).f32[0];
                      v145 = -1.0;
                      if (v143.f32[0] <= 0.0)
                        v145 = 1.0;
                      v146 = vmulq_n_f32((float32x4_t)_Q0, v145);
                      v263 = v146.i32[2];
                      v262 = v146.i64[0];
                      sub_20EEF0820((uint64_t)&v262, v254, (uint64_t)v267, v146, v144, *(double *)v135.i64);
                      __asm { FMOV            V0.4S, #1.0 }
                      v147.i32[3] = v171.i32[3];
                      _Q0.i64[0] = v171.i64[0];
                      _Q0.i32[2] = v171.i32[2];
                      v147.i64[0] = *(_QWORD *)a2;
                      v147.i32[2] = *(_DWORD *)(a2 + 8);
                      a7 = (int8x16_t)vsubq_f32(v147, (float32x4_t)_Q0);
                      v148 = (float32x2_t)vextq_s8(a7, a7, 8uLL).u64[0];
                      v149 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)a7.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.i8, 1), *(float32x2_t *)a7.i8, 1), v148, v148).f32[0];
                      if (v149 <= v247)
                      {
                        a7.i32[3] = v268;
                        v28.i32[3] = 0;
                        v248 = v267[0];
                        v214 = 0;
                        v213 = 0;
                        v211 = 0;
                        v212 = 0;
                        v209 = v267[10];
                        v210 = v267[11];
                        v207 = v267[8];
                        v208 = v267[9];
                        v205 = v267[6];
                        v206 = v267[7];
                        v203 = v267[4];
                        v204 = v267[5];
                        v201 = v267[2];
                        v202 = v267[3];
                        v199 = 0;
                        v200 = v267[1];
                        v197 = 0;
                        v198 = 0;
                        v195 = v267[23];
                        v196 = 0;
                        v193 = v267[21];
                        v194 = v267[22];
                        v191 = v267[19];
                        v192 = v267[20];
                        v189 = v267[17];
                        v190 = v267[18];
                        v187 = v267[15];
                        v188 = v267[16];
                        v185 = v267[13];
                        v186 = v267[14];
                        v184 = v267[12];
                        v241 = 0;
                        v239 = 0;
                        v237 = 0;
                        v235 = 0;
                        v233 = v272;
                        v231 = v271;
                        v229 = v270;
                        v227 = v269;
                        v225 = HIBYTE(v268);
                        v223 = BYTE2(v268);
                        v221 = BYTE1(v268);
                        v219 = v268;
                        v217 = v267[27];
                        v182 = v267[25];
                        v183 = v267[26];
                        v181 = v267[24];
                        v242 = _Q0.i8[15];
                        v240 = _Q0.i8[14];
                        v238 = _Q0.i8[13];
                        v236 = _Q0.i8[12];
                        v234 = v171.i8[11];
                        v232 = v171.i8[10];
                        v230 = v171.i8[9];
                        v228 = v171.i8[8];
                        v226 = v171.i8[7];
                        v224 = v171.i8[6];
                        v222 = v171.i8[5];
                        v220 = v171.i8[4];
                        v218 = v171.i8[3];
                        v216 = v171.i8[2];
                        v180 = v171.i8[1];
                        v215 = v171.i8[0];
                        if (v245)
                        {
                          v150 = *(void **)v246;
                          if (*(_QWORD *)v246)
                          {
                            *(_QWORD *)(a3 + 32) = v150;
                            v250 = v149;
                            operator delete(v150);
                            v149 = v250;
                            *(_QWORD *)v246 = 0;
                            *(_QWORD *)(v246 + 8) = 0;
                            *(_QWORD *)(v246 + 16) = 0;
                          }
                          _Q0.i32[3] = HIDWORD(__p[1]);
                          *(_OWORD *)(a3 + 24) = *(_OWORD *)__p;
                          *(_QWORD *)(a3 + 40) = v260;
                          v249 = 1;
                          goto LABEL_100;
                        }
                        v249 = 1;
                        v243 = v67;
                        v247 = v149;
                      }
                    }
                  }
                }
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                v149 = v247;
                v67 = v243;
LABEL_100:
                v243 = v67;
                v247 = v149;
                v10 = a2;
                v11 = v174;
                v7 = v177;
                v43 = v117;
                goto LABEL_24;
              }
            }
            v10 = a2;
          }
          else
          {
LABEL_63:
            v10 = a2;
          }
LABEL_24:
          ++v42;
          v41 += 3;
        }
        while (v41 != v256);
      }
    }
    v9 = (uint64_t *)*v9;
  }
  while (v9);
  if (v249)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v153 = (char *)operator new(0x90uLL);
    *v153 = v248;
    LOBYTE(v154) = v200;
    BYTE1(v154) = v201;
    BYTE2(v154) = v202;
    BYTE3(v154) = v203;
    BYTE4(v154) = v204;
    BYTE5(v154) = v205;
    BYTE6(v154) = v206;
    BYTE7(v154) = v207;
    BYTE8(v154) = v208;
    BYTE9(v154) = v209;
    BYTE10(v154) = v210;
    BYTE11(v154) = v211;
    BYTE12(v154) = v212;
    BYTE13(v154) = v213;
    BYTE14(v154) = v214;
    HIBYTE(v154) = v184;
    *((_DWORD *)v153 + 18) = v243;
    LOBYTE(v155) = v185;
    BYTE1(v155) = v186;
    BYTE2(v155) = v187;
    BYTE3(v155) = v188;
    BYTE4(v155) = v189;
    BYTE5(v155) = v190;
    BYTE6(v155) = v191;
    BYTE7(v155) = v192;
    BYTE8(v155) = v193;
    BYTE9(v155) = v194;
    BYTE10(v155) = v195;
    BYTE11(v155) = v196;
    BYTE12(v155) = v197;
    BYTE13(v155) = v198;
    BYTE14(v155) = v199;
    HIBYTE(v155) = v181;
    LOBYTE(v156) = v182;
    LOBYTE(v157) = v180;
    BYTE1(v156) = v183;
    *(_OWORD *)(v153 + 1) = v154;
    BYTE2(v156) = v217;
    BYTE3(v156) = v219;
    BYTE4(v156) = v221;
    BYTE5(v156) = v223;
    BYTE6(v156) = v225;
    BYTE7(v156) = v227;
    BYTE8(v156) = v229;
    BYTE9(v156) = v231;
    BYTE10(v156) = v233;
    BYTE11(v156) = v235;
    BYTE12(v156) = v237;
    BYTE13(v156) = v239;
    BYTE14(v156) = v241;
    HIBYTE(v156) = v215;
    *(_OWORD *)(v153 + 17) = v155;
    *(_OWORD *)(v153 + 33) = v156;
    a5[2] = v153 + 144;
    BYTE1(v157) = v216;
    BYTE2(v157) = v218;
    BYTE3(v157) = v220;
    BYTE4(v157) = v222;
    BYTE5(v157) = v224;
    BYTE6(v157) = v226;
    HIBYTE(v157) = v228;
    LOBYTE(v158) = v230;
    BYTE1(v158) = v232;
    BYTE2(v158) = v234;
    HIBYTE(v158) = v236;
    LOBYTE(v159) = v238;
    HIBYTE(v159) = v240;
    v153[63] = v242;
    *(_WORD *)(v153 + 61) = v159;
    *(_DWORD *)(v153 + 57) = v158;
    *(_QWORD *)(v153 + 49) = v157;
    *((_QWORD *)v153 + 8) = 0x400000004;
    v153[80] = 0;
    *(_OWORD *)(v153 + 81) = *(_OWORD *)v274;
    *((_OWORD *)v153 + 6) = *(_OWORD *)&v274[15];
    v153[112] = 0;
    *(_DWORD *)(v153 + 113) = *(_DWORD *)v261;
    *((_DWORD *)v153 + 29) = *(_DWORD *)&v261[3];
    v153[120] = 0;
    v160 = *(_QWORD *)v273;
    *((_QWORD *)v153 + 16) = *(_QWORD *)&v273[7];
    *(_QWORD *)(v153 + 121) = v160;
    *a5 = v153;
    a5[1] = v153 + 144;
    v153[136] = 0;
    return;
  }
LABEL_107:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
}

void sub_20EEF49A0(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v2;
    operator delete(v2);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EEF49C8(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>, simd_float3x3 a7@<0:Q0, 16:Q1, 32:Q2>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x2_t v26;
  int8x16_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int8x16_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  int32x2_t v34;
  int32x4_t v35;
  float32x2_t v36;
  unint64_t v37;
  float32x2_t v38;
  _DWORD *v39;
  float v40;
  float32x4_t v42;
  int8x16_t v43;
  float v44;
  float32x4_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  int8x16_t v67;
  int8x16_t v68;
  float32x2_t v69;
  int32x4_t v70;
  void *v71;
  uint64_t v72;
  float32x2_t v73;
  int v74;
  __int128 v75;
  int8x16_t v76;
  float32x2_t v77;
  float v78;
  float v79;
  int8x16_t v80;
  int8x16_t v81;
  float32x2_t v82;
  int32x4_t v83;
  float32x2_t v84;
  float v85;
  float v86;
  int8x16_t v87;
  float32x2_t v88;
  float v89;
  int8x16_t v90;
  float v91;
  uint64_t v93;
  int v94;
  _OWORD *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  float32x4_t v99;
  int32x2_t *v100;
  char v104;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x2_t v125;
  simd_float3 v126;
  float32x2_t v127;
  int8x16_t v128;
  float32x2_t v129;
  int32x4_t v130;
  float32x4_t v131;
  int32x4_t v132;
  float32x2_t v133;
  int32x4_t v134;
  float v135;
  int8x16_t v136;
  float32x2_t v137;
  unsigned int v138;
  float32x2_t v139;
  float32x4_t v140;
  __int128 v141;
  float32x2_t v142;
  float32x4_t v143;
  float v144;
  float32x2_t v145;
  int8x16_t v146;
  int8x16_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int32x2_t v150;
  float32x4_t v151;
  __int128 v152;
  float32x4_t v153;
  _BYTE v154[20];
  __int32 v155;
  __int128 v156;
  __int128 v157;
  int v158;
  void *__p;
  void *v160;
  __int128 v161;
  void *v162;
  void *v163;
  char v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  char *v170;
  char *v171;
  _BYTE v172[20];
  __int32 v173;
  float32x2_t v174;
  __int32 v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  _BYTE v182[20];
  __int32 v183;
  _OWORD v184[2];
  unsigned int v185;

  v100 = (int32x2_t *)(a2 + 12);
  v9 = *(_QWORD *)(a2 + 28);
  a7.columns[0].i64[0] = *(_QWORD *)(a2 + 12);
  a7.columns[0].i32[2] = *(_DWORD *)(a2 + 20);
  *(_QWORD *)v182 = *(_QWORD *)a2;
  a7.columns[2].i64[0] = *(_QWORD *)v182;
  a7.columns[1].i32[1] = HIDWORD(v9);
  *(_DWORD *)&v182[8] = *(_DWORD *)(a2 + 8);
  a7.columns[2].i32[2] = *(_DWORD *)&v182[8];
  a7.columns[2] = (simd_float3)vmlaq_n_f32((float32x4_t)a7.columns[2], (float32x4_t)a7.columns[0], *(float *)&v9);
  v183 = a7.columns[2].i32[2];
  *(_QWORD *)&v182[12] = a7.columns[2].i64[0];
  a7.columns[0].i32[0] = a1[64];
  v142 = *(float32x2_t *)a7.columns[0].f32;
  a7.columns[0].i64[0] = *((_QWORD *)a1 + 31);
  v132 = (int32x4_t)a7.columns[0];
  a7.columns[0].i32[0] = a1[68];
  v139 = *(float32x2_t *)a7.columns[0].f32;
  a7.columns[0].i64[0] = *((_QWORD *)a1 + 33);
  v128 = (int8x16_t)a7.columns[2];
  v130 = (int32x4_t)a7.columns[0];
  a7.columns[0].i32[0] = a1[72];
  v145 = *(float32x2_t *)a7.columns[0].f32;
  a7.columns[0].i64[0] = *((_QWORD *)a1 + 35);
  v126 = a7.columns[0];
  a7.columns[0].i64[0] = *((_QWORD *)a1 + 37);
  a7.columns[0].i32[2] = a1[76];
  v149 = (float32x4_t)a7.columns[0];
  a7.columns[0].i64[1] = *(_QWORD *)&v182[8];
  v136 = *(int8x16_t *)v182;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v181 = 1065353216;
  a7.columns[1].i32[0] = a1[41];
  v176 = a1[40];
  HIDWORD(v178) = a7.columns[1].i32[0];
  v180 = *((_QWORD *)a1 + 21);
  a7.columns[0].i64[0] = v180;
  sub_20E8BE3D8((uint64_t)&v176, (uint64_t)v172, a7);
  v11 = *a1;
  v10 = a1[1];
  v170 = 0;
  v169 = 0;
  v135 = 0.0;
  v171 = 0;
  v106 = v10;
  v104 = a5;
  if ((_DWORD)v10 && (_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = v132;
    v16.i32[2] = v142.i32[0];
    v35 = v130;
    v35.i32[2] = v139.i32[0];
    v17 = (int32x4_t)v126;
    v17.i32[2] = v145.i32[0];
    *(float32x2_t *)v18.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v132.i8, *(float *)v128.i32), *(float32x2_t *)v130.i8, *(float32x2_t *)v128.i8, 1), *(float32x2_t *)v126.f32, (float32x4_t)v128, 2);
    *(float32x2_t *)&v18.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v142, *(float32x2_t *)v128.i8), v139, *(float32x2_t *)v128.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL), v145);
    v19 = (float32x2_t)vzip1q_s32(v132, v130).u64[0];
    v30 = (int8x16_t)vtrn2q_s32(v16, v35);
    v30.i32[2] = v126.i32[1];
    v20 = (float32x2_t)vzip2q_s32(v16, v35).u64[0];
    v21.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v30, 0).i32[3];
    v21.i32[1] = vextq_s8(v30, (int8x16_t)v35, 4uLL).u32[0];
    *(float32x2_t *)v22.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v132.i8, *(float *)v136.i32), *(float32x2_t *)v130.i8, *(float32x2_t *)v136.i8, 1), *(float32x2_t *)v126.f32, (float32x4_t)v136, 2);
    *(float32x2_t *)&v22.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v142, *(float32x2_t *)v136.i8), v139, *(float32x2_t *)v136.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL), v145);
    v33 = vaddq_f32(v22, v149);
    v23 = vaddq_f32(v18, v149);
    v24 = (int8x16_t)vnegq_f32(v149);
    *(float32x2_t *)v25.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v19, *(float *)v24.i32), (float32x2_t)*(_OWORD *)&vtrn2q_s32(v132, v130), *(float32x2_t *)v149.f32, 1), (float32x2_t)__PAIR64__(v139.u32[0], v142.u32[0]), v149, 2);
    v26 = (float32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    v121 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v126.f32, 1);
    *(float32x2_t *)&v25.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v24.i8), v121, *(float32x2_t *)v149.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), v26);
    v123 = v25;
    v27 = (int8x16_t)vsubq_f32(v23, v33);
    v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1);
    v140 = (float32x4_t)v27;
    v143 = v33;
    v131 = v23;
    v133 = (float32x2_t)vextq_s8(v27, v27, 8uLL).u64[0];
    v29 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), v28, *(float32x2_t *)v27.i8, 1), v133, v133);
    *(int32x2_t *)v27.i8 = vdup_n_s32(0x38D1B717u);
    *(float32x2_t *)v30.i8 = vmla_f32(vmla_f32(vmul_f32(v19, *(float32x2_t *)v27.i8), 0, v21), 0, v20);
    v33.i32[0] = 953267991;
    *(float32x2_t *)v23.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v33.f32), 0, *(float32x2_t *)v126.f32, 1), 0, v26);
    v125 = v20;
    v127 = v19;
    v31 = vmul_f32(v19, 0);
    *(float32x2_t *)v25.f32 = vmla_f32(vmla_f32(v31, *(float32x2_t *)v27.i8, v21), 0, v20);
    v32 = vmul_f32(*(float32x2_t *)v17.i8, 0);
    v122 = v26;
    *(float32x2_t *)v27.i8 = vmla_f32(vmla_lane_f32(v32, *(float32x2_t *)v33.f32, *(float32x2_t *)v17.i8, 1), 0, v26);
    v124 = v21;
    v119 = vmla_lane_f32(v32, 0, *(float32x2_t *)v17.i8, 1);
    v120 = vmla_f32(v31, 0, v21);
    v118 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v30.i8, *(float *)v16.i32), *(float32x2_t *)v25.f32, *(float32x2_t *)v16.i8, 1);
    *(int32x2_t *)v33.f32 = vdup_laneq_s32(v16, 2);
    v116 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v16.i8), *(float32x2_t *)v27.i8, *(float32x2_t *)v16.i8, 1);
    v117 = *(float32x2_t *)v33.f32;
    v115 = (float32x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
    v114 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v30.i8, *(float *)v35.i32), *(float32x2_t *)v25.f32, *(float32x2_t *)v35.i8, 1);
    v34 = vdup_laneq_s32(v35, 2);
    v112 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v35.i8), *(float32x2_t *)v27.i8, *(float32x2_t *)v35.i8, 1);
    v113 = (float32x2_t)v34;
    v111 = (float32x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    v110 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v30.i8, *(float *)v17.i32), *(float32x2_t *)v25.f32, *(float32x2_t *)v17.i8, 1);
    *(int32x2_t *)v35.i8 = vdup_laneq_s32(v17, 2);
    v109 = *(float32x2_t *)v35.i8;
    v129 = *(float32x2_t *)v17.i8;
    v36 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v17.i8), *(float32x2_t *)v27.i8, *(float32x2_t *)v17.i8, 1);
    v135 = 0.0;
    do
    {
      v37 = 0;
      *(float *)v35.i32 = (float)v15;
      v137 = *(float32x2_t *)v35.i8;
      v38 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 0);
      do
      {
        v34.i32[0] = *(_DWORD *)(*((_QWORD *)a1 + 5) + 4 * (a1[2] * (_DWORD)v37 + a1[3] * (_DWORD)v15));
        v40 = *(float *)(*((_QWORD *)a1 + 14) + 4 * (a1[20] * (_DWORD)v37 + a1[21] * (_DWORD)v15));
        if (*(float *)v34.i32 > 0.3 && v40 > 0.5)
        {
          *(float *)v35.i32 = (float)v37;
          v30.i32[0] = v173;
          v150 = v34;
          v33.i32[0] = v175;
          *(float32x2_t *)v42.f32 = vadd_f32(v174, vmla_f32(vmul_n_f32(*(float32x2_t *)v172, (float)v37), v38, *(float32x2_t *)&v172[12]));
          *(float32x2_t *)&v42.u32[2] = vadd_f32(*(float32x2_t *)v33.f32, vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v172, *(int8x16_t *)v172, 8uLL), *(float32x2_t *)v35.i8), v137, *(float32x2_t *)v30.i8));
          v146 = (int8x16_t)vmulq_n_f32(v42, *(float *)v34.i32);
          v43 = (int8x16_t)vsubq_f32((float32x4_t)v146, v143);
          v44 = vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v140.f32, *(float32x2_t *)v43.i8), v28, *(float32x2_t *)v43.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), v133), v29).f32[0];
          v45 = v143;
          if (v44 >= 0.0)
          {
            v45 = v131;
            if (v44 <= 1.0)
              v45 = vmlaq_n_f32(v143, v140, v44);
          }
          v35 = (int32x4_t)vsubq_f32((float32x4_t)v146, v45);
          v46 = (float32x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
          *(float32x2_t *)v30.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1), *(float32x2_t *)v35.i8, 1), v46, v46);
          if (*(float *)v30.i32 < 0.0025)
          {
            if (*(float *)v34.i32 <= 0.0)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/SensorData/src/JasperNoiseModel.cpp", 32, (uint64_t)"z > 0", 5, (uint64_t)&unk_21024F075, 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v12 = v170;
            }
            *(float32x2_t *)v35.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v127, *(float *)v146.i32), v124, *(float32x2_t *)v146.i8, 1), v125, (float32x4_t)v146, 2);
            v34.i32[1] = v122.i32[1];
            v35.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v129, *(float32x2_t *)v146.i8), v121, *(float32x2_t *)v146.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL), v122);
            v33 = vaddq_f32(v123, (float32x4_t)v35);
            v35.i32[1] = v150.i32[1];
            if ((float)(5.0 - *(float *)v150.i32) >= 0.0)
              *(float *)v35.i32 = (float)(1.0 - (float)((float)(5.0 - *(float *)v150.i32) / 5.0)) * 0.01;
            else
              *(float *)v35.i32 = 0.01;
            v47 = vmla_n_f32(v120, v125, *(float *)v35.i32);
            v48 = vmla_f32(v119, *(float32x2_t *)v35.i8, v122);
            *(float32x2_t *)&v49 = vmla_f32(v118, v117, v47);
            *((float32x2_t *)&v49 + 1) = vmla_f32(v116, v115, v48);
            *(float32x2_t *)&v50 = vmla_f32(v114, v113, v47);
            *((float32x2_t *)&v50 + 1) = vmla_f32(v112, v111, v48);
            *(float32x2_t *)v30.i8 = vmla_f32(v110, v109, v47);
            *(float32x2_t *)v35.i8 = vmla_f32(v36, v122, v48);
            v30.i64[1] = v35.i64[0];
            if (v12 < v171)
            {
              *((_DWORD *)v12 + 2) = v33.i32[2];
              *((_DWORD *)v12 + 5) = DWORD2(v49);
              *(_QWORD *)v12 = v33.i64[0];
              *(_QWORD *)(v12 + 12) = v49;
              *((_DWORD *)v12 + 8) = DWORD2(v50);
              *((_QWORD *)v12 + 3) = v50;
              v39 = v12 + 44;
              *(_QWORD *)(v12 + 36) = v30.i64[0];
              *((_DWORD *)v12 + 12) = 0;
              v12 += 52;
              *v39 = v35.i32[0];
            }
            else
            {
              v51 = (char *)v169;
              v52 = 0x4EC4EC4EC4EC4EC5 * ((v12 - (_BYTE *)v169) >> 2);
              v53 = v52 + 1;
              if ((unint64_t)(v52 + 1) > 0x4EC4EC4EC4EC4ECLL)
                sub_20E867F44();
              v107 = v50;
              v108 = v49;
              v147 = v30;
              v151 = v33;
              if (0x9D89D89D89D89D8ALL * ((v171 - (_BYTE *)v169) >> 2) > v53)
                v53 = 0x9D89D89D89D89D8ALL * ((v171 - (_BYTE *)v169) >> 2);
              if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v171 - (_BYTE *)v169) >> 2)) >= 0x276276276276276)
                v54 = 0x4EC4EC4EC4EC4ECLL;
              else
                v54 = v53;
              if (v54 > 0x4EC4EC4EC4EC4ECLL)
                sub_20E877A38();
              v55 = (char *)operator new(52 * v54);
              v56 = &v55[4 * ((v12 - (_BYTE *)v169) >> 2)];
              *(_QWORD *)v56 = v151.i64[0];
              *((_DWORD *)v56 + 2) = v151.i32[2];
              *(_QWORD *)(v56 + 12) = v108;
              *((_DWORD *)v56 + 5) = DWORD2(v108);
              *((_QWORD *)v56 + 3) = v107;
              *((_DWORD *)v56 + 8) = DWORD2(v107);
              v35.i32[1] = v147.i32[1];
              *(_QWORD *)(v56 + 36) = v147.i64[0];
              *((_DWORD *)v56 + 11) = v147.i32[2];
              *((_DWORD *)v56 + 12) = 0;
              v57 = &v55[52 * v52];
              while (v12 != v51)
              {
                v58 = *(_QWORD *)(v12 - 52);
                v12 -= 52;
                v59 = *((_DWORD *)v12 + 2);
                *(_QWORD *)(v57 - 52) = v58;
                v57 -= 52;
                *((_DWORD *)v57 + 2) = v59;
                v35 = *(int32x4_t *)(v12 + 12);
                v60 = *(_OWORD *)(v12 + 28);
                *((_DWORD *)v57 + 11) = *((_DWORD *)v12 + 11);
                *(_OWORD *)(v57 + 28) = v60;
                *(int32x4_t *)(v57 + 12) = v35;
                *((_DWORD *)v57 + 12) = *((_DWORD *)v12 + 12);
              }
              v12 = v56 + 52;
              v169 = v57;
              v170 = v56 + 52;
              v171 = &v55[52 * v54];
              if (v51)
                operator delete(v51);
            }
            v170 = v12;
            v135 = v135 + v40;
            ++v14;
            v13 = v12;
          }
        }
        ++v37;
      }
      while (v37 != v11);
      ++v15;
    }
    while (v15 != v106);
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  if (v104)
  {
    v61 = (char *)v169;
    v161 = 0uLL;
    v162 = 0;
    if (v13 == v169)
    {
      v64 = 0;
      v63 = 0uLL;
      v66 = a4 + 3;
      v65 = (void *)a4[3];
      if (!v65)
        goto LABEL_45;
    }
    else
    {
      if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v13 - (_BYTE *)v169) >> 2)) >= 0x1555555555555556)
        sub_20E867F44();
      *(_QWORD *)&v161 = operator new(0xB13B13B13B13B13CLL * ((v13 - (_BYTE *)v169) >> 2));
      *((_QWORD *)&v161 + 1) = v161;
      v162 = (void *)(v161 - 0x4EC4EC4EC4EC4EC4 * ((v13 - (_BYTE *)v169) >> 2));
      *(_QWORD *)&v184[0] = &v161;
      do
      {
        v62 = *(_QWORD *)v61;
        *(_DWORD *)&v154[8] = *((_DWORD *)v61 + 2);
        *(_QWORD *)v154 = v62;
        sub_20EEEB61C((char ***)v184, (uint64_t *)v154);
        v61 += 52;
      }
      while (v61 != v13);
      v63 = v161;
      v64 = v162;
      v66 = a4 + 3;
      v65 = (void *)a4[3];
      if (!v65)
        goto LABEL_45;
    }
    a4[4] = v65;
    v152 = v63;
    operator delete(v65);
    v63 = v152;
    *v66 = 0;
    v66[1] = 0;
    v66[2] = 0;
LABEL_45:
    *(_OWORD *)(a4 + 3) = v63;
    a4[5] = v64;
  }
  if (v14 <= 2)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    goto LABEL_76;
  }
  sub_20EEFBA68((uint64_t)&v161, &v169);
  sub_20EEF5AF0(&v161, a3, (uint64_t)v182, *(_DWORD *)(a2 + 40), (uint64_t)a4, v104, &__p);
  v71 = __p;
  if (__p == v160)
    goto LABEL_67;
  v72 = *(_QWORD *)__p;
  *(_DWORD *)&v154[8] = *((_DWORD *)__p + 2);
  *(_QWORD *)v154 = v72;
  v73 = *(float32x2_t *)((char *)__p + 12);
  v155 = *((_DWORD *)__p + 5);
  *(float32x2_t *)&v154[12] = v73;
  v74 = *((_DWORD *)__p + 14);
  v75 = *(_OWORD *)((char *)__p + 40);
  v156 = *(_OWORD *)((char *)__p + 24);
  v157 = v75;
  *(float32x2_t *)v68.i8 = v73;
  v67.i32[0] = v155;
  v76 = v68;
  v76.i32[2] = v155;
  v77 = (float32x2_t)vdup_lane_s32((int32x2_t)v73, 1);
  v158 = v74;
  v78 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v68.i8, *(float32x2_t *)v68.i8), v77, v73, 1), *(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8).f32[0];
  if (v78 == 1.0 || (v78 >= 1.0 ? (v79 = v78 + -1.0) : (v79 = 1.0 - v78), v79 <= 0.000001))
  {
    v81 = *(int8x16_t *)v154;
    *(float *)v81.i32 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v154, v73), v77, *(float32x2_t *)v154, 1), *(float32x2_t *)v67.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL)).f32[0];
  }
  else
  {
    v69.f32[0] = 1.0 / sqrtf(v78);
    v80 = (int8x16_t)vmulq_n_f32((float32x4_t)v76, v69.f32[0]);
    v81 = *(int8x16_t *)v154;
    v82 = vmul_lane_f32(v69, v73, 1);
    *(float32x2_t *)v70.i8 = vmul_f32(*(float32x2_t *)v67.i8, v69);
    v83.i64[0] = v80.i64[0];
    v83.u64[1] = (unint64_t)v82;
    v76 = (int8x16_t)vuzp1q_s32(v83, v70);
    v84 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.i8, 1);
    v67 = vextq_s8(v80, v80, 8uLL);
    v85 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v80.i8, *(float32x2_t *)v80.i8), v82, *(float32x2_t *)v80.i8, 1), *(float32x2_t *)v67.i8, *(float32x2_t *)v70.i8).f32[0];
    if (v85 == 1.0 || (v85 >= 1.0 ? (v86 = v85 + -1.0) : (v86 = 1.0 - v85), v86 <= 0.000001))
    {
      *(float *)v81.i32 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v154, *(float32x2_t *)v80.i8), v84, *(float32x2_t *)v154, 1), *(float32x2_t *)v67.i8, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v154, *(int8x16_t *)v154, 8uLL)).f32[0];
      goto LABEL_62;
    }
    *(float *)v76.i32 = sqrtf(v85);
    v67 = (int8x16_t)vmulq_n_f32((float32x4_t)v80, 1.0 / *(float *)v76.i32);
    v81 = vextq_s8(v67, v67, 8uLL);
    *(float *)v81.i32 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v154, *(float32x2_t *)v67.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.i8, 1), *(float32x2_t *)v154, 1), *(float32x2_t *)v81.i8, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v154, *(int8x16_t *)v154, 8uLL)).f32[0];
    v76 = (int8x16_t)vdivq_f32((float32x4_t)v80, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.i8, 0));
  }
  v80 = v76;
LABEL_62:
  v67.i64[0] = *(_QWORD *)&v182[12];
  v67.i32[2] = v183;
  v87 = (int8x16_t)vsubq_f32((float32x4_t)v67, *(float32x4_t *)v182);
  v88 = (float32x2_t)vextq_s8(v76, v76, 8uLL).u64[0];
  LODWORD(v89) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v87.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), *(float32x2_t *)v76.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL), v88).u32[0];
  if (fabsf(v89) >= 0.00000011921)
  {
    *(float *)v81.i32 = -*(float *)v81.i32;
    v90 = (int8x16_t)vmlsq_lane_f32(*(float32x4_t *)v182, (float32x4_t)v80, *(float32x2_t *)v81.i8, 0);
    *(float32x2_t *)v76.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v90.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.i8, 1), *(float32x2_t *)v90.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL), v88);
    v91 = (float)-*(float *)v76.i32 / v89;
    v76.i32[0] = 1.0;
    if (v91 >= 0.0 && v91 <= 1.0)
    {
      v144 = v91;
      v148 = (float32x4_t)v87;
      v153 = *(float32x4_t *)v182;
      sub_20EEF0820((unint64_t)v154 | 0xC, v100, (uint64_t)v184, (float32x4_t)v76, (float32x4_t)v81, *(double *)v182);
      v134 = (int32x4_t)v184[1];
      v138 = v185;
      v141 = v184[0];
      v93 = v156;
      v94 = v158;
      a6[1] = 0;
      a6[2] = 0;
      *a6 = 0;
      v95 = operator new(0x90uLL);
      HIDWORD(v96) = 0;
      v97 = v141;
      LODWORD(v96) = HIDWORD(v141);
      *(_QWORD *)&v98 = v134.i64[1];
      *(_QWORD *)((char *)&v96 + 4) = v134.i64[0];
      HIDWORD(v97) = 0;
      *((_QWORD *)&v98 + 1) = v138;
      v99 = vmlaq_n_f32(v153, v148, v144);
      v99.i32[3] = 1.0;
      a6[2] = v95 + 9;
      *v95 = v97;
      v95[1] = v96;
      v95[2] = v98;
      v95[3] = v99;
      *((_QWORD *)v95 + 8) = 8;
      *((_DWORD *)v95 + 18) = v94;
      *((_QWORD *)v95 + 10) = v93;
      *((_QWORD *)v95 + 11) = v14;
      *((_BYTE *)v95 + 96) = 0;
      *((_BYTE *)v95 + 100) = 0;
      *((float *)v95 + 26) = v135 / (float)v14;
      *((_BYTE *)v95 + 108) = 1;
      *((_BYTE *)v95 + 112) = 1;
      *((_BYTE *)v95 + 120) = 0;
      *((_BYTE *)v95 + 136) = 0;
      *a6 = v95;
      a6[1] = v95 + 9;
      v71 = __p;
      if (!__p)
        goto LABEL_69;
      goto LABEL_68;
    }
  }
LABEL_67:
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (v71)
  {
LABEL_68:
    v160 = v71;
    operator delete(v71);
  }
LABEL_69:
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (v164 && v162)
  {
    v163 = v162;
    operator delete(v162);
  }
LABEL_76:
  if (v169)
  {
    v170 = (char *)v169;
    operator delete(v169);
  }
}

void sub_20EEF55B0(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v2;
    operator delete(v2);
  }
  sub_20EEF389C((uint64_t)&STACK[0x220]);
  v3 = (void *)STACK[0x288];
  if (!STACK[0x288])
    _Unwind_Resume(a1);
  STACK[0x290] = (unint64_t)v3;
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20EEF5640(unint64_t a1@<X0>, float32x2_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, float32x4_t a5@<Q1>, float32x4_t a6@<Q2>)
{
  float32x4_t v6;
  float32x4_t v7;
  float v9;
  float32x2_t *v11;
  uint64_t v13;
  float32x4_t v14;
  float32x2_t *v15;
  float32x4_t v16;
  uint64_t v17;
  __int32 v18;
  float32x2_t *v19;
  __int32 v20;
  float32x4_t v21;
  unsigned __int32 v22;
  float32x4_t v23;
  __int32 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float v34;
  float32x4_t v35;
  int v36;
  uint64_t v37;
  float32x4_t v38;
  float32x2_t *v39;
  int v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x2_t *v46;
  uint64_t v47;
  float32x2_t v48;
  float32x2_t *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x2_t *v52;
  float32x2_t v53;
  float32x2_t v54;
  int8x16_t v55;
  __int8 v56;
  int8x16_t v57;
  unint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t *v61;
  float32x2_t *v62;
  char *v63;
  unsigned int v64;
  _BYTE v65[12];
  __int32 v66;
  __int32 v67;
  __int32 v68;
  unsigned __int8 v69;
  unsigned __int16 v70;
  unsigned __int8 v71;
  float v72;
  uint64_t v73;
  char v74;
  _OWORD v75[2];
  unsigned __int32 v76;
  float32x2_t v77;

  if (a3 == 2)
    v9 = 0.025;
  else
    v9 = 0.05;
  if (!a1)
    goto LABEL_23;
  v11 = a2;
  v13 = 12 * a1;
  v14 = 0uLL;
  v15 = a2;
  do
  {
    *(float32x2_t *)a5.f32 = *v15;
    a5.i32[2] = v15[1].i32[0];
    v14 = vaddq_f32(v14, a5);
    v15 = (float32x2_t *)((char *)v15 + 12);
    v13 -= 12;
  }
  while (v13);
  a5.f32[0] = (float)a1;
  v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
  v59 = v23;
  v16 = vdivq_f32(v14, v23);
  v14.i32[0] = 0;
  v17 = 12 * a1;
  v18 = 0;
  v19 = a2;
  v20 = 0;
  a6.i32[0] = 0;
  v21.i32[0] = 0;
  v22 = 0;
  v23.i32[0] = 0;
  v24 = 0;
  v6.i32[0] = 0;
  do
  {
    *(float32x2_t *)v7.f32 = *v19;
    v7.i32[2] = v19[1].i32[0];
    v25 = vsubq_f32(v7, v16);
    *(float32x2_t *)v26.f32 = vmul_n_f32(*(float32x2_t *)v25.f32, v25.f32[0]);
    v27 = (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL);
    *(float32x2_t *)&v26.u32[2] = vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v25.f32);
    *(float32x2_t *)v28.f32 = vmul_lane_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32, 1);
    *(float32x2_t *)&v28.u32[2] = vmul_lane_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v25.f32, 1);
    *(float32x2_t *)v27.f32 = vmul_laneq_f32(*(float32x2_t *)v25.f32, v25, 2);
    v7 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v25, v25), 2);
    v27.i32[2] = v7.i32[0];
    v14.i32[1] = v18;
    v14.i32[2] = v20;
    a6.i32[1] = v21.i32[0];
    a6.i32[2] = v22;
    v23.i32[1] = v24;
    v23.i32[2] = v6.i32[0];
    v14 = vaddq_f32(v14, v26);
    a6 = vaddq_f32(a6, v28);
    v23 = vaddq_f32(v23, v27);
    v22 = a6.u32[2];
    v21.i32[0] = a6.i32[1];
    v20 = v14.i32[2];
    v18 = v14.i32[1];
    v6.i32[0] = v23.i32[2];
    v24 = v23.i32[1];
    v19 = (float32x2_t *)((char *)v19 + 12);
    v17 -= 12;
  }
  while (v17);
  v16.f32[0] = (float)((12 * a1 - 12) / 0xC + 1);
  v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 0);
  v14.i64[1] = __PAIR64__(a6.u32[0], v14.u32[2]);
  v21.i32[1] = a6.i32[2];
  v21.i64[1] = v23.i64[0];
  v74 = 0;
  v73 = 0x300000003;
  v75[0] = vdivq_f32(v14, v29);
  v75[1] = vdivq_f32(v21, v29);
  v76 = vdivq_f32(v6, v16).u32[0];
  sub_20EEFE4C4((uint64_t)&v61);
  if (v74)
  {
    v36 = v69;
    v30 = v70 | (v71 << 16);
    v34 = v72;
    v31.i64[0] = *(_QWORD *)&v65[4];
    v31.i32[2] = v66;
    v33.i32[0] = v67;
    v32.i32[0] = v68;
  }
  else
  {
    v36 = 0;
  }
  v37 = 12 * a1;
  v38 = 0uLL;
  v39 = v11;
  do
  {
    *(float32x2_t *)v35.f32 = *v39;
    v35.i32[2] = v39[1].i32[0];
    v38 = vaddq_f32(v38, v35);
    v39 = (float32x2_t *)((char *)v39 + 12);
    v37 -= 12;
  }
  while (v37);
  if (!v74
    || (v40 = v36 | (v30 << 8), *(float *)&v40 == 0.0)
    || fabsf(*(float *)&v40) <= 0.000001
    || (float)(v34 / *(float *)&v40) < v9)
  {
LABEL_23:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
    return;
  }
  if (a3 == 1)
  {
    v44 = 12 * a1;
    v45 = 0uLL;
    v46 = v11;
    do
    {
      *(float32x2_t *)v31.f32 = *v46;
      v31.i32[2] = v46[1].i32[0];
      v45 = vaddq_f32(v45, v31);
      v46 = (float32x2_t *)((char *)v46 + 12);
      v44 -= 12;
    }
    while (v44);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    if (a1 >> 61)
      sub_20E969238();
    v60 = vdivq_f32(v45, v59);
    v61 = (float32x2_t *)operator new(8 * a1);
    v62 = v61;
    v63 = (char *)&v61[a1];
    *(_QWORD *)&v75[0] = &v61;
    v47 = 12 * a1;
    do
    {
      v77 = vsub_f32(*v11, *(float32x2_t *)v60.f32);
      sub_20EEE8140((void ***)v75, &v77);
      v11 = (float32x2_t *)((char *)v11 + 12);
      v47 -= 12;
    }
    while (v47);
    v49 = v61;
    if (v61 == v62)
    {
      v48.i32[0] = 0;
      v51 = 0uLL;
    }
    else
    {
      v50 = 0;
      v51 = 0uLL;
      v52 = v61;
      do
      {
        v53 = *v52++;
        v48 = v53;
        v54 = (float32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
        *(float32x2_t *)v51.f32 = vmla_n_f32(*(float32x2_t *)v51.f32, v48, v48.f32[0]);
        *(float32x2_t *)&v51.u32[2] = vmla_lane_f32(v54, v48, v48, 1);
        --v50;
      }
      while (v52 != v62);
      v48.f32[0] = (float)(unint64_t)-v50;
    }
    v65[8] = 0;
    *(_QWORD *)v65 = 0x200000002;
    v75[0] = vdivq_f32(v51, (float32x4_t)vdupq_lane_s32((int32x2_t)v48, 0));
    sub_20EEFC384((uint64_t)&v61);
    if (v65[8])
    {
      v58 = __PAIR64__(v64, HIDWORD(v63));
      *(_DWORD *)(a4 + 8) = v60.i32[2];
      *(_QWORD *)a4 = v60.i64[0];
      *(_QWORD *)(a4 + 12) = v58;
      *(_DWORD *)(a4 + 20) = 0;
      *(_BYTE *)(a4 + 24) = 1;
      if (!v49)
        return;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 24) = 0;
      if (!v49)
        return;
    }
    operator delete(v49);
    return;
  }
  if (a3)
  {
    v55 = (int8x16_t)vdivq_f32(v38, v59);
    v56 = v55.i8[0];
    v57 = vextq_s8(v55, (int8x16_t)v31, 1uLL);
    *(_BYTE *)a4 = v56;
    *(_BYTE *)(a4 + 11) = v57.i8[10];
    *(_WORD *)(a4 + 9) = v57.i16[4];
    *(_QWORD *)(a4 + 1) = v57.i64[0];
    *(_DWORD *)(a4 + 20) = v32.i32[0];
    *(_QWORD *)(a4 + 12) = vzip1q_s32((int32x4_t)v31, v33).u64[0];
  }
  else
  {
    v41 = 12 * a1;
    v42 = 0uLL;
    do
    {
      *(float32x2_t *)v32.f32 = *v11;
      v32.i32[2] = v11[1].i32[0];
      v42 = vaddq_f32(v42, v32);
      v11 = (float32x2_t *)((char *)v11 + 12);
      v41 -= 12;
    }
    while (v41);
    v43 = vdivq_f32(v42, v59);
    *(_DWORD *)(a4 + 8) = v43.i32[2];
    *(_QWORD *)a4 = v43.i64[0];
    *(_DWORD *)(a4 + 12) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 20) = 1065353216;
  }
  *(_BYTE *)(a4 + 24) = 1;
}

void sub_20EEF5AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_20EEF5AF0(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v21;
  float32x4_t v22;
  float32x4_t v23;
  double v24;
  _QWORD *v25;
  uint64_t v26;
  float v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  char *v34;
  char *v35;
  unint64_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t *v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  float32x4_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  unsigned int v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  unint64_t v57;
  unint64_t v58;
  float v59;
  float v60;
  int v61;
  void *v62;
  int v64;
  float v65;
  unsigned int v66;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  unint64_t *v73;
  unint64_t v74;
  char *v75;
  unint64_t *v76;
  uint64_t v77;
  float32x4_t *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  float32x4_t v82;
  unsigned int v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v88;
  int8x16_t v89;
  unint64_t v90;
  unint64_t v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  float v96;
  float v97;
  unsigned int v99;
  uint64_t v100;
  int8x16_t v101;
  unint64_t v102;
  uint64_t *v103;
  int8x16_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float v113;
  uint64_t v114;
  float32x2_t v115;
  uint64_t v116;
  uint64_t v117;
  float32x2_t v118;
  float32x2_t v119;
  uint64_t v120;
  float32x2_t v121;
  int v122;
  char *v123;
  int v125;
  int v126;
  unint64_t v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int *v131;
  unint64_t v132;
  _OWORD *v133;
  void *v134;
  unint64_t v135;
  unsigned int *v136;
  _QWORD *v137;
  uint64_t v138;
  _OWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  unsigned int v145;
  void **v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int8x16_t v150;
  float32x2_t v151;
  float32x4_t v152;
  int8x16_t v153;
  int32x2_t v154;
  int32x4_t v155;
  float32x2_t v156;
  float32x2_t v157;
  float32x2_t v158;
  int8x16_t v159;
  int v160;
  float32x4_t v161;
  float64x2_t v162;
  float32x4_t v163;
  int8x16_t v164;
  int8x16_t v165;
  float64x2_t v166;
  float64x2_t v167;
  unint64_t v168;
  unint64_t v169;
  float v170;
  float v171;
  int v172;
  void *v173;
  unsigned __int8 v175;
  unsigned __int8 v176;
  float32x4_t v177;
  float32x2_t v178;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v184;
  float64x2_t v186;
  int8x16_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  unint64_t v195;
  float64x2_t v197;
  int64x2_t v198;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  unint64_t v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  unsigned int *v218;
  _OWORD *v219;
  void *v220;
  unint64_t v221;
  unsigned int *v222;
  _QWORD *v223;
  uint64_t v224;
  _OWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  unsigned int v231;
  float64x2_t v232;
  float32x4_t v233;
  float32x4_t v234;
  int32x4_t v235;
  float32x2_t v236;
  _BOOL4 v237;
  float32x4_t v238;
  int8x16_t v239;
  float32x4_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v252;
  float64x2_t v254;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v261;
  unint64_t v263;
  unint64_t v264;
  float v265;
  float v266;
  int v267;
  void *v268;
  char *v270;
  char *v271;
  char *v272;
  char v273;
  int v274;
  void *v275;
  char *v276;
  char *v277;
  unint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  _BYTE *v284;
  unint64_t *v285;
  int64_t v286;
  unint64_t v287;
  char *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  float32x4_t *v293;
  float32x4_t *v294;
  uint64_t v295;
  char *v296;
  char *v297;
  unint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  _BYTE *v304;
  unint64_t *v305;
  int64_t v306;
  unint64_t v307;
  char *v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  float32x4_t *v313;
  float32x4_t *v314;
  uint64_t v315;
  char v316;
  int v317;
  void *v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  _BYTE *v324;
  unint64_t *v325;
  int64_t v326;
  unint64_t v327;
  char *v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  float32x4_t *v333;
  float32x4_t *v334;
  uint64_t v335;
  char *v336;
  char *v337;
  unint64_t v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  _BYTE *v344;
  unint64_t *v345;
  int64_t v346;
  unint64_t v347;
  char *v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  float32x4_t *v353;
  float32x4_t *v354;
  uint64_t v355;
  char v356;
  int v357;
  void *v358;
  char v359;
  uint64_t v360;
  int v361;
  int v362;
  float v363;
  unsigned int v364;
  char *v365;
  char *v366;
  _OWORD *v367;
  void *v368;
  unint64_t v369;
  char *v370;
  _QWORD *v371;
  uint64_t v372;
  _OWORD *v373;
  _QWORD *v374;
  uint64_t v375;
  uint64_t v376;
  __int128 v377;
  __int128 v378;
  unsigned int v379;
  float64x2_t v380;
  float32x4_t v381;
  float32x4_t v382;
  int32x4_t v383;
  float32x2_t v384;
  _BOOL4 v385;
  float32x4_t v386;
  float32x4_t v387;
  int8x16_t v388;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  float32x4_t v394;
  unint64_t v395;
  float32x4_t v396;
  float32x4_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v403;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v410;
  float64x2_t v412;
  float64x2_t v413;
  int v414;
  char *v415;
  unint64_t v416;
  unint64_t v417;
  float v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  float32x2_t v422;
  float v423;
  float v424;
  unsigned int v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t *v429;
  int8x16_t v430;
  float32x2_t v431;
  float32x2_t v432;
  float32x2_t v433;
  float v434;
  uint64_t v435;
  float32x2_t v436;
  uint64_t v437;
  uint64_t v438;
  float32x2_t v439;
  float32x2_t v440;
  uint64_t v441;
  float32x2_t v442;
  __int128 v443;
  char *v445;
  char *v446;
  unint64_t v447;
  char *v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  unint64_t v452;
  _BYTE *v453;
  unint64_t *v454;
  int64_t v455;
  unint64_t v456;
  char *v457;
  unint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  float32x4_t *v462;
  float32x4_t *v463;
  uint64_t v464;
  int64_t v465;
  char *v466;
  char *v467;
  __int8 v468;
  int v469;
  void *v470;
  void *v471;
  int64_t v472;
  char *v473;
  char *v474;
  void *v475;
  float32x4_t v476;
  float32x4_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  char *v481;
  float32x4_t v482;
  float32x2_t v483;
  float32x4_t v484;
  float32x2_t v485;
  float32x2_t v486;
  int8x16_t v487;
  const void *v488;
  __int128 v489;
  float v490;
  int64_t v491;
  char *v492;
  float *v493;
  unint64_t v494;
  float v495;
  unint64_t v496;
  float v497;
  float *v498;
  float v499;
  uint64_t v500;
  char *v501;
  uint64_t v502;
  float v503;
  uint64_t v504;
  char *v505;
  char *v506;
  char *v507;
  _QWORD *v508;
  uint64_t v509;
  unint64_t v510;
  unint64_t v511;
  _BYTE *v512;
  char *v513;
  int64_t v514;
  unint64_t v515;
  char *v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v520;
  _OWORD *v521;
  char *v522;
  uint64_t v523;
  __int128 v524;
  unint64_t v525;
  void *v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x2_t v529;
  float32x4_t v530;
  float64x2_t v531;
  int32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x2_t v535;
  float32x2_t v536;
  int8x16_t v537;
  float32x4_t v538;
  float32x2_t v539;
  float32x2_t v540;
  float32x2_t v541;
  float v542;
  float32x4_t v543;
  float32x4_t v544;
  float32x2_t v545;
  int32x4_t v546;
  int8x16_t v547;
  float32x2_t v548;
  float32x2_t v549;
  float v550;
  float v551;
  int8x16_t v552;
  float v553;
  float32x2_t v554;
  float v555;
  int8x16_t v556;
  float v557;
  unsigned __int8 v559;
  unsigned __int8 v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v567;
  int8x16_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v574;
  float64x2_t v575;
  unint64_t v577;
  float64x2_t v579;
  int64x2_t v580;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v591;
  float64x2_t v592;
  int32x4_t v593;
  int32x4_t v594;
  float32x4_t v595;
  int8x16_t v596;
  float32x2_t *v597;
  unint64_t *v598;
  float32x2_t *v599;
  uint64_t v600;
  BOOL v601;
  float32x4_t v602;
  _BOOL4 v603;
  unint64_t v604;
  unint64_t v605;
  unsigned int v606;
  unint64_t *v607;
  void *v608;
  void **v609;
  void **v610;
  uint64_t v611;
  unint64_t v612;
  uint64_t *v613;
  uint64_t v614;
  unint64_t v615;
  _QWORD *v616;
  unint64_t *v617;
  unint64_t *v618;
  uint64_t v619;
  unint64_t v620;
  uint64_t v621;
  unint64_t v622;
  unint64_t v623;
  _QWORD *v624;
  _QWORD *v625;
  unint64_t v626;
  uint64_t v627;
  _BYTE *v628;
  int64_t v629;
  uint64_t v630;
  unint64_t v631;
  uint64_t v632;
  unint64_t v633;
  _BYTE *v634;
  unint64_t *v635;
  int64_t v636;
  unint64_t v637;
  _QWORD *v638;
  unint64_t v639;
  unint64_t v640;
  uint64_t v641;
  uint64_t v642;
  float32x4_t *v643;
  float32x4_t *v644;
  uint64_t v645;
  char *v646;
  unint64_t *v647;
  unint64_t *v648;
  uint64_t v649;
  unint64_t v650;
  char *v651;
  unint64_t v652;
  unint64_t v653;
  _QWORD *v654;
  _QWORD *v655;
  unint64_t v656;
  uint64_t v657;
  uint64_t v658;
  char *v659;
  char *v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t v663;
  unint64_t v664;
  void *v665;
  unint64_t *v666;
  int64_t v667;
  unint64_t v668;
  char *v669;
  unint64_t v670;
  unint64_t v671;
  uint64_t v672;
  uint64_t v673;
  float32x4_t *v674;
  float32x4_t *v675;
  uint64_t v676;
  _QWORD *v677;
  _QWORD *v678;
  void *v679;
  _QWORD *v680;
  _QWORD *v681;
  void *v682;
  char v683;
  unint64_t *v684;
  uint64_t v685;
  uint64_t v686;
  uint64x2_t v687;
  uint64x2_t *v688;
  int32x4_t v689;
  uint64_t v690;
  int32x4_t v691;
  int8x16_t v692;
  uint64x2_t v693;
  uint64x2_t v694;
  uint64x2_t v695;
  uint64x2_t v696;
  int32x4_t v697;
  int32x4_t v698;
  unint64_t v699;
  int v700;
  char *v701;
  unint64_t v702;
  unint64_t v703;
  unsigned int v704;
  unint64_t *v705;
  int v706;
  int64_t v707;
  unint64_t v708;
  uint64_t v709;
  uint64x2_t v710;
  uint64x2_t *v711;
  int32x4_t v712;
  uint64_t v713;
  int32x4_t v714;
  int8x16_t v715;
  uint64x2_t v716;
  uint64x2_t v717;
  uint64x2_t v718;
  uint64x2_t v719;
  int32x4_t v720;
  int32x4_t v721;
  unint64_t v722;
  int v723;
  unint64_t v724;
  unint64_t v725;
  unsigned int v726;
  unint64_t *v727;
  unint64_t v728;
  uint64_t v729;
  uint64x2_t v730;
  uint64x2_t *v731;
  int32x4_t v732;
  uint64_t v733;
  int32x4_t v734;
  int8x16_t v735;
  uint64x2_t v736;
  uint64x2_t v737;
  uint64x2_t v738;
  uint64x2_t v739;
  int32x4_t v740;
  int32x4_t v741;
  unint64_t v742;
  int v743;
  char *v744;
  char *v745;
  uint64_t v746;
  char *v747;
  int v748;
  int v749;
  std::__shared_weak_count *v750;
  unint64_t *v751;
  unint64_t v752;
  char v753;
  int v754;
  _QWORD *v755;
  char v756;
  __int8 v757;
  unint64_t v758;
  int v759;
  int v760;
  char *v761;
  char *v762;
  unint64_t v763;
  _QWORD *v764;
  _QWORD *v765;
  void **v766;
  __int32 v767;
  unsigned __int32 v768;
  __int32 v769;
  __int32 v770;
  unsigned __int32 v771;
  __int32 v772;
  int v773;
  float v774;
  float32x4_t v775;
  _QWORD *v776;
  int8x16_t v777;
  uint64_t v778;
  int v782;
  int v783;
  float32x4_t v784;
  float32x4_t v785;
  float32x2_t v786;
  uint64_t v788;
  float32x2_t v789;
  float32x4_t v790;
  float32x4_t v791;
  uint64_t v792;
  float32x2_t v793;
  float32x2_t v794;
  float32x4_t v795;
  float32x4_t v796;
  float32x4_t v797;
  float32x2_t v798;
  uint64_t v799;
  float32x4_t v800;
  float32x4_t v801;
  float32x2_t v802;
  float32x4_t v803;
  char *v804;
  float32x2_t v805;
  float32x4_t v806;
  float32x4_t v807;
  uint64_t v808;
  int v809;
  float32x2_t v810;
  float32x4_t v811;
  float32x2_t v812;
  uint64_t v813;
  float32x2_t v814;
  float32x4_t v815;
  float32x4_t v816;
  _BYTE v817[40];
  __int128 v818;
  unsigned __int32 v819;
  char v820;
  void *__src;
  int v822[2];
  char *v823;
  float v824;
  int v825;
  _DWORD v826[624];
  uint64_t v827;
  uint64_t (**v828)();
  std::__shared_weak_count *v829;
  std::__shared_weak_count *v830;
  unsigned int v831;
  uint64_t v832;
  unint64_t v833;
  char v834;
  float v835;
  char v836;
  _BYTE v837[20];
  float v838;
  __int128 v839;
  __int128 v840;
  unsigned __int32 v841;
  unsigned __int8 v842;
  void *v843;
  __int128 v844;
  float v845;
  void *__p;
  __int128 v847;
  char v848;
  float v849;
  char v850;
  void *v851;
  void **v852;
  float *v853;
  char v854;
  float v855;
  char v856;
  void *v857;
  char *v858;
  uint64_t v859;
  unsigned int v860;
  _BYTE v861[56];
  unsigned __int32 v862;
  char v863;
  char *v864;
  char *v865;
  char *v866;
  float v867;
  void *v868;
  char *v869;
  uint64_t v870;
  _BYTE v871[11];
  uint64_t v872;
  int v873;
  _BYTE v874[32];
  unsigned __int32 v875;
  _BYTE v876[11];
  uint64_t v877;
  int v878;
  _BYTE v879[40];
  _BYTE v880[24];
  unint64_t *v881[6];

  v881[3] = *(unint64_t **)MEMORY[0x24BDAC8D0];
  v763 = ((uint64_t)(a1[10] - a1[9]) >> 3) + ((uint64_t)(a1[7] - a1[6]) >> 3);
  if (v763 < *(_QWORD *)a2)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    return;
  }
  v9 = (uint64_t)a1;
  v765 = a1 + 9;
  v766 = (void **)(a1 + 6);
  v837[0] = 0;
  v842 = 0;
  v843 = 0;
  v844 = 0uLL;
  v845 = 0.0;
  if (a4)
    v10 = 3;
  else
    v10 = 1;
  if (a4 == 1)
    v10 = 2;
  v831 = v10;
  v832 = 0x6400000000;
  LOBYTE(v833) = 0;
  v834 = 0;
  LOBYTE(v835) = 0;
  v11 = 5489;
  v836 = 0;
  v12 = 1;
  v826[0] = 5489;
  do
  {
    v11 = v12 + 1812433253 * (v11 ^ (v11 >> 30));
    v826[v12++] = v11;
  }
  while (v12 != 624);
  v827 = 0;
  v13 = (std::__shared_weak_count *)operator new(0x28uLL);
  v14 = v13;
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F558;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F5A8;
  LODWORD(v13[1].__shared_owners_) = 5489;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v828 = &off_24CA1F4F8;
  v829 = v13 + 1;
  v830 = v13;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  v782 = 0;
  v778 = 0;
  v776 = (_QWORD *)((unint64_t)v861 | 0xC);
  v764 = (_QWORD *)((unint64_t)v837 | 0xC);
  v755 = (_QWORD *)(a5 + 24);
  if (a6)
    _ZF = a5 + 24 == (_QWORD)v881;
  else
    _ZF = 1;
  v21 = _ZF;
  v756 = v21;
  v22 = (float32x4_t)xmmword_2103899D0;
  v23 = (float32x4_t)xmmword_210389990;
  v24 = 0.5;
  v25 = a7;
  v788 = v9;
  while (2)
  {
    v26 = ((uint64_t)(*(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72)) >> 3)
        + ((uint64_t)(*(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48)) >> 3);
    switch(a4)
    {
      case 0:
        v817[0] = 0;
        v820 = 0;
        *(_QWORD *)v822 = 0;
        v823 = 0;
        __src = 0;
        v824 = 0.0;
        LODWORD(v881[0]) = v26;
        v27 = 0.0;
        if (v831 > v26)
          goto LABEL_338;
        v28 = HIDWORD(v832);
        if (!HIDWORD(v832))
          goto LABEL_338;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        while (1)
        {
          v33 = v881[0];
          if (v831 > LODWORD(v881[0]))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v33 = v881[0];
          }
          if (v33)
          {
            v23.i32[0] = v831;
            if ((double)v33 * v24 >= (double)v23.u64[0])
              sub_20EEFC704((uint64_t)v826, (unsigned int *)v881, &v831, (uint64_t)&__p);
            else
              sub_20EEFC500((uint64_t)v826, (unsigned int *)v881, &v831, (int32x4_t **)&__p);
          }
          else
          {
            v847 = 0uLL;
            __p = 0;
          }
          v34 = (char *)__p;
          v35 = (char *)v847;
          v852 = 0;
          v851 = 0;
          v853 = 0;
          if (__p == (void *)v847)
          {
            *(double *)v23.i64 = sub_20EEFBDD0((uint64_t)v861, v9, (unint64_t **)&v851, v23, v22);
            if (!v863)
              goto LABEL_63;
          }
          else
          {
            v36 = -(((uint64_t)__p - (uint64_t)v847) >> 2);
            if (v36 >> 61)
              sub_20E867F44();
            v37 = (float32x4_t *)operator new(-8 * (((uint64_t)__p - (uint64_t)v847) >> 2));
            v40 = v37;
            v851 = v37;
            v853 = &v37->f32[2 * v36];
            v41 = v35 - v34 - 4;
            v42 = v34;
            v43 = (uint64_t *)v37;
            v9 = v788;
            if (v41 < 0xC)
              goto LABEL_954;
            v44 = (v41 >> 2) + 1;
            v42 = &v34[4 * (v44 & 0x7FFFFFFFFFFFFFFCLL)];
            v43 = (uint64_t *)v37 + (v44 & 0x7FFFFFFFFFFFFFFCLL);
            v45 = v37 + 1;
            v46 = v34 + 8;
            v47 = v44 & 0x7FFFFFFFFFFFFFFCLL;
            do
            {
              v48 = *(v46 - 1);
              v49.i64[0] = v48;
              v49.i64[1] = HIDWORD(v48);
              v38 = v49;
              v49.i64[0] = *v46;
              v49.i64[1] = HIDWORD(*v46);
              v39 = v49;
              v45[-1] = v38;
              *v45 = v49;
              v45 += 2;
              v46 += 2;
              v47 -= 4;
            }
            while (v47);
            if (v44 != (v44 & 0x7FFFFFFFFFFFFFFCLL))
            {
LABEL_954:
              do
              {
                v50 = *(_DWORD *)v42;
                v42 += 4;
                *v43++ = v50;
              }
              while (v42 != v35);
            }
            v852 = (void **)v43;
            sub_20EEFBDD0((uint64_t)v861, v788, (unint64_t **)&v851, v38, v39);
            operator delete(v40);
            if (!v863)
              goto LABEL_63;
          }
          v57 = 0;
          if (v26)
          {
            v58 = 0;
            v59 = 0.0;
            v60 = *(float *)&v832;
            do
            {
              v23.f32[0] = sub_20EEFBFB8(v9, (uint64_t)v861, v58, *(float32x2_t *)v23.f32, v22, v51, v52, v53, v54, v55, v56);
              if (v23.f32[0] <= v60)
              {
                ++v57;
                v23.f32[0] = expf(-v23.f32[0]);
                v59 = v59 + v23.f32[0];
              }
              ++v58;
            }
            while (v26 != v58);
          }
          else
          {
            v59 = 0.0;
          }
          if (v59 > v27)
          {
            *(_QWORD *)v817 = *(_QWORD *)v861;
            *(_DWORD *)&v817[8] = *(_DWORD *)&v861[8];
            *(_QWORD *)&v817[12] = *(_QWORD *)&v861[12];
            *(_DWORD *)&v817[20] = *(_DWORD *)&v861[20];
            v23 = *(float32x4_t *)&v861[24];
            v22 = *(float32x4_t *)&v861[40];
            *(_OWORD *)&v817[24] = *(_OWORD *)&v861[24];
            v818 = *(_OWORD *)&v861[40];
            v819 = v862;
            if (v30 != 1)
            {
              v29 = 1;
              v820 = 1;
            }
            v824 = v59;
            if (v834 && v57 >= v833)
            {
              v61 = 2;
              v30 = 1;
              v27 = v59;
              v31 = v57;
              v62 = __p;
              if (!__p)
                goto LABEL_65;
            }
            else
            {
              v23.f32[0] = v835;
              if (v59 < v835 || v836 == 0)
                v61 = 0;
              else
                v61 = 2;
              v30 = 1;
              v27 = v59;
              v31 = v57;
              v62 = __p;
              if (!__p)
                goto LABEL_65;
            }
LABEL_64:
            *(_QWORD *)&v847 = v62;
            operator delete(v62);
            goto LABEL_65;
          }
LABEL_63:
          v61 = 3;
          v62 = __p;
          if (__p)
            goto LABEL_64;
LABEL_65:
          if ((v61 == 3 || !v61) && ++v32 != v28)
            continue;
          if (v29)
          {
            memset(v861, 0, 24);
            if (v31)
            {
              if (v31 >> 61)
                sub_20E867F44();
              v296 = (char *)operator new(8 * v31);
              v297 = &v296[8 * v31];
              __src = v296;
              *(_QWORD *)v822 = v296;
              v823 = v297;
              if (v26)
              {
LABEL_307:
                v298 = 0;
                v299 = v296;
                while (2)
                {
                  v23.f32[0] = sub_20EEFBFB8(v9, (uint64_t)v817, v298, *(float32x2_t *)v23.f32, v22, v51, v52, v53, v54, v55, v56);
                  v22.i32[0] = v832;
                  if (v23.f32[0] > *(float *)&v832)
                    goto LABEL_310;
                  if (v299 < v297)
                  {
                    *(_QWORD *)v299 = v298;
                    v300 = (uint64_t)(v299 + 8);
                  }
                  else
                  {
                    v301 = (v299 - v296) >> 3;
                    v302 = v301 + 1;
                    if ((unint64_t)(v301 + 1) >> 61)
                      sub_20E867F44();
                    if ((v297 - v296) >> 2 > v302)
                      v302 = (v297 - v296) >> 2;
                    if ((unint64_t)(v297 - v296) >= 0x7FFFFFFFFFFFFFF8)
                      v303 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v303 = v302;
                    if (v303)
                    {
                      if (v303 >> 61)
                        sub_20E877A38();
                      v304 = operator new(8 * v303);
                      v305 = (unint64_t *)&v304[8 * v301];
                      *v305 = v298;
                      v300 = (uint64_t)(v305 + 1);
                      v306 = v299 - v296;
                      if (v299 != v296)
                      {
LABEL_322:
                        v307 = v306 - 8;
                        if (v307 < 0x168
                          || (v310 = (v299 - 8 - v296) & 0xFFFFFFFFFFFFFFF8,
                              &v304[v299 - v296 - 8 - v310] > &v304[v299 - v296 - 8])
                          || &v299[-v310 - 8] > v299 - 8
                          || (unint64_t)(v296 - v304) < 0x20)
                        {
                          v308 = v299;
                          v9 = v788;
                        }
                        else
                        {
                          v311 = (v307 >> 3) + 1;
                          v312 = 8 * (v311 & 0x3FFFFFFFFFFFFFFCLL);
                          v308 = &v299[-v312];
                          v305 = (unint64_t *)((char *)v305 - v312);
                          v313 = (float32x4_t *)&v304[8 * v301 - 16];
                          v314 = (float32x4_t *)(v299 - 16);
                          v315 = v311 & 0x3FFFFFFFFFFFFFFCLL;
                          v9 = v788;
                          do
                          {
                            v22 = v314[-1];
                            v23 = *v314;
                            v313[-1] = v22;
                            *v313 = v23;
                            v313 -= 2;
                            v314 -= 2;
                            v315 -= 4;
                          }
                          while (v315);
                          if (v311 == (v311 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_325:
                            v297 = &v304[8 * v303];
                            __src = v305;
                            v823 = v297;
                            if (v296)
                              goto LABEL_326;
                            goto LABEL_327;
                          }
                        }
                        do
                        {
                          v309 = *((_QWORD *)v308 - 1);
                          v308 -= 8;
                          *--v305 = v309;
                        }
                        while (v308 != v296);
                        goto LABEL_325;
                      }
                    }
                    else
                    {
                      v304 = 0;
                      v305 = (unint64_t *)(8 * v301);
                      *(_QWORD *)(8 * v301) = v298;
                      v300 = 8 * v301 + 8;
                      v306 = v299 - v296;
                      if (v299 != v296)
                        goto LABEL_322;
                    }
                    v9 = v788;
                    v297 = &v304[8 * v303];
                    __src = v305;
                    v823 = v297;
                    if (v296)
LABEL_326:
                      operator delete(v296);
LABEL_327:
                    v296 = (char *)v305;
                  }
                  *(_QWORD *)v822 = v300;
                  v299 = (char *)v300;
LABEL_310:
                  if (++v298 == v26)
                    goto LABEL_551;
                  continue;
                }
              }
            }
            else
            {
              v297 = 0;
              v296 = 0;
              __src = 0;
              *(_QWORD *)v822 = 0;
              v823 = 0;
              if (v26)
                goto LABEL_307;
            }
            v299 = v296;
LABEL_551:
            v316 = v817[0];
            *(_QWORD *)v874 = *(_QWORD *)&v817[1];
            *(_DWORD *)&v874[7] = *(_DWORD *)&v817[8];
            *(_QWORD *)&v874[11] = *(_QWORD *)&v817[12];
            *(_DWORD *)&v874[19] = *(_DWORD *)&v817[20];
            *(_DWORD *)&v879[32] = v819;
            *(_OWORD *)v879 = *(_OWORD *)&v817[24];
            *(_OWORD *)&v879[16] = v818;
            v317 = v842;
            if (v842 != 1)
            {
LABEL_552:
              if (v317)
              {
                v842 = 0;
LABEL_554:
                v318 = v843;
                if (v843)
                  goto LABEL_555;
              }
              else
              {
                v837[0] = v316;
                *(_QWORD *)&v837[1] = *(_QWORD *)v874;
                *(_DWORD *)&v837[8] = *(_DWORD *)&v874[7];
                *v764 = *(_QWORD *)&v874[11];
                *(_DWORD *)(((unint64_t)v837 | 0xC) + 8) = *(_DWORD *)&v874[19];
                v839 = *(_OWORD *)v879;
                v840 = *(_OWORD *)&v879[16];
                v841 = *(_DWORD *)&v879[32];
                v842 = 1;
                v318 = v843;
                if (v843)
                  goto LABEL_555;
              }
              goto LABEL_556;
            }
          }
          else
          {
LABEL_338:
            v316 = 0;
            v297 = 0;
            v299 = 0;
            v296 = 0;
            v317 = v842;
            if (v842)
              goto LABEL_552;
          }
          if (!v317)
            goto LABEL_554;
          v837[0] = v316;
          *(_QWORD *)&v837[1] = *(_QWORD *)v874;
          *(_DWORD *)&v837[8] = *(_DWORD *)&v874[7];
          *v764 = *(_QWORD *)&v874[11];
          *(_DWORD *)(((unint64_t)v837 | 0xC) + 8) = *(_DWORD *)&v874[19];
          v839 = *(_OWORD *)v879;
          v840 = *(_OWORD *)&v879[16];
          v841 = *(_DWORD *)&v879[32];
          v318 = v843;
          if (v843)
          {
LABEL_555:
            *(_QWORD *)&v844 = v318;
            operator delete(v318);
          }
LABEL_556:
          v782 = 0;
          v843 = v296;
          *(_QWORD *)&v844 = v299;
          *((_QWORD *)&v844 + 1) = v297;
          goto LABEL_578;
        }
      case 1:
        v817[0] = 0;
        v820 = 0;
        *(_QWORD *)v822 = 0;
        v823 = 0;
        __src = 0;
        v824 = 0.0;
        LODWORD(v868) = v26;
        v27 = 0.0;
        if (v831 > v26)
          goto LABEL_412;
        v211 = HIDWORD(v832);
        if (!HIDWORD(v832))
          goto LABEL_412;
        v212 = 0;
        v213 = 0;
        v214 = 0;
        v215 = 0;
        do
        {
          v216 = v868;
          if (v831 > v868)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v216 = v868;
          }
          if (v216)
          {
            v23.i32[0] = v831;
            if ((double)v216 * v24 >= (double)v23.u64[0])
              sub_20EEFC704((uint64_t)v826, (unsigned int *)&v868, &v831, (uint64_t)v874);
            else
              sub_20EEFC500((uint64_t)v826, (unsigned int *)&v868, &v831, (int32x4_t **)v874);
          }
          else
          {
            memset(v874, 0, 24);
          }
          v217 = *(_QWORD *)v874;
          v218 = *(unsigned int **)&v874[8];
          v847 = 0uLL;
          __p = 0;
          if (*(_QWORD *)v874 == *(_QWORD *)&v874[8])
          {
            v223 = 0;
            v220 = 0;
          }
          else
          {
            if ((unint64_t)-((uint64_t)(*(_QWORD *)v874 - *(_QWORD *)&v874[8]) >> 2) >> 61)
              sub_20E867F44();
            v219 = operator new(-8 * ((uint64_t)(*(_QWORD *)v874 - *(_QWORD *)&v874[8]) >> 2));
            v220 = v219;
            v221 = (unint64_t)v218 - v217 - 4;
            v222 = (unsigned int *)v217;
            v223 = v219;
            if (v221 < 0xC)
              goto LABEL_955;
            v224 = (v221 >> 2) + 1;
            v222 = (unsigned int *)(v217 + 4 * (v224 & 0x7FFFFFFFFFFFFFFCLL));
            v223 = (_QWORD *)v219 + (v224 & 0x7FFFFFFFFFFFFFFCLL);
            v225 = v219 + 1;
            v226 = (_QWORD *)(v217 + 8);
            v227 = v224 & 0x7FFFFFFFFFFFFFFCLL;
            do
            {
              v228 = *(v226 - 1);
              *(_QWORD *)&v229 = v228;
              *((_QWORD *)&v229 + 1) = HIDWORD(v228);
              v230 = v229;
              *(_QWORD *)&v229 = *v226;
              *((_QWORD *)&v229 + 1) = HIDWORD(*v226);
              *(v225 - 1) = v230;
              *v225 = v229;
              v225 += 2;
              v226 += 2;
              v227 -= 4;
            }
            while (v227);
            if (v224 != (v224 & 0x7FFFFFFFFFFFFFFCLL))
            {
LABEL_955:
              do
              {
                v231 = *v222++;
                *v223++ = v231;
              }
              while (v222 != v218);
            }
          }
          sub_20EEFBBC0(&v851, v9, (uint64_t)v220, (uint64_t)v223, 2uLL);
          v233.i64[0] = *(_QWORD *)((char *)v851 + 12);
          v233.i32[2] = *((_DWORD *)v851 + 5);
          v234.i64[0] = *(_QWORD *)v851;
          v234.i32[2] = *((_DWORD *)v851 + 2);
          v235 = (int32x4_t)vsubq_f32(v233, v234);
          v236 = vabs_f32(*(float32x2_t *)v235.i8);
          v237 = v236.f32[1] <= 0.000001 && v236.f32[0] <= 0.000001;
          if (v237)
          {
            v861[0] = 0;
            v863 = 0;
            v852 = (void **)v851;
            operator delete(v851);
            if (!v220)
              goto LABEL_236;
LABEL_235:
            operator delete(v220);
            goto LABEL_236;
          }
          *(float32x2_t *)v235.i8 = vmul_n_f32(*(float32x2_t *)v235.i8, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(*(float32x2_t *)v235.i8, *(float32x2_t *)v235.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v235.i8, 1), *(float32x2_t *)v235.i8, 1).f32[0]));
          v245 = vaddq_f32(v233, v234);
          v246.i64[0] = 0x3F0000003F000000;
          v246.i64[1] = 0x3F0000003F000000;
          v247 = vmulq_f32(v245, v246);
          v248 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-*(float *)&v235.i32[1]), v235);
          v249 = vcvt_hight_f64_f32(v248);
          v250 = vcvtq_f64_f32(*(float32x2_t *)v248.f32);
          _Q3 = (float64x2_t)vextq_s8((int8x16_t)v250, (int8x16_t)v249, 8uLL);
          v252 = (float64x2_t)*(unint64_t *)&v249.f64[0];
          v249.f64[1] = v250.f64[0];
          v232.f64[0] = -0.0;
          _Q7 = vmlaq_f64(vmulq_f64(v249, (float64x2_t)xmmword_210389940), _Q3, (float64x2_t)xmmword_21030D320);
          v254 = vmlaq_f64(vmulq_laneq_f64(v232, v250, 1), v250, (float64x2_t)0);
          _Q6 = vmulq_f64(_Q7, _Q7);
          _D17 = _Q7.f64[1];
          __asm { FMLA            D6, D17, V7.D[1] }
          _Q6.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q6.f64[0], v254.f64[0], v254.f64[0]));
          v257 = vmulq_f64(v254, _Q6);
          v258 = vmulq_n_f64(_Q7, _Q6.f64[0]);
          v259 = (float64x2_t)vextq_s8((int8x16_t)v258, (int8x16_t)v257, 8uLL);
          v257.f64[1] = v258.f64[0];
          _Q4 = vmlsq_f64(vmulq_f64(v249, v259), _Q3, v257);
          v261 = vmlsq_laneq_f64(vmulq_laneq_f64(v258, v250, 1), v250, v258, 1);
          _Q2 = vmulq_f64(_Q4, _Q4);
          _Q3.f64[0] = _Q4.f64[1];
          __asm { FMLA            D2, D3, V4.D[1] }
          _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v261.f64[0], v261.f64[0]));
          *(_DWORD *)&v861[8] = v247.i32[2];
          *(_QWORD *)v861 = v247.i64[0];
          *(_DWORD *)&v861[20] = 0;
          *(_QWORD *)&v861[12] = v248.i64[0];
          *(float32x2_t *)&v861[24] = vcvt_f32_f64(vmulq_n_f64(_Q4, _Q2.f64[0]));
          *(float32x2_t *)&v861[36] = vcvt_f32_f64(v258);
          *(_DWORD *)&v861[32] = vcvt_f32_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(v261, _Q2)).u32[0];
          *(_DWORD *)&v861[44] = vcvt_f32_f64((float64x2_t)*(unint64_t *)&v257.f64[0]).u32[0];
          *(_QWORD *)&v861[48] = v248.i64[0];
          v862 = vcvt_f32_f64(v252).u32[0];
          v863 = 1;
          v852 = (void **)v851;
          operator delete(v851);
          if (v220)
            goto LABEL_235;
LABEL_236:
          if (v237)
            goto LABEL_250;
          v263 = 0;
          if (v26)
          {
            v264 = 0;
            v265 = 0.0;
            v266 = *(float *)&v832;
            do
            {
              v23.f32[0] = sub_20EEFBFB8(v9, (uint64_t)v861, v264, *(float32x2_t *)v23.f32, v238, v239, v240, v241, v242, v243, v244);
              if (v23.f32[0] <= v266)
              {
                ++v263;
                v23.f32[0] = expf(-v23.f32[0]);
                v265 = v265 + v23.f32[0];
              }
              ++v264;
            }
            while (v26 != v264);
          }
          else
          {
            v265 = 0.0;
          }
          if (v265 <= v27)
          {
LABEL_250:
            v267 = 3;
            v268 = *(void **)v874;
            if (!*(_QWORD *)v874)
              goto LABEL_252;
LABEL_251:
            *(_QWORD *)&v874[8] = v268;
            operator delete(v268);
            goto LABEL_252;
          }
          *(_QWORD *)v817 = *(_QWORD *)v861;
          *(_DWORD *)&v817[8] = *(_DWORD *)&v861[8];
          *(_QWORD *)&v817[12] = *v776;
          *(_DWORD *)&v817[20] = *(_DWORD *)(((unint64_t)v861 | 0xC) + 8);
          v23.i64[0] = *(_QWORD *)&v861[24];
          v238 = *(float32x4_t *)&v861[40];
          *(_OWORD *)&v817[24] = *(_OWORD *)&v861[24];
          v818 = *(_OWORD *)&v861[40];
          v819 = v862;
          if (v213 != 1)
          {
            v212 = 1;
            v820 = 1;
          }
          v824 = v265;
          if (v834 && v263 >= v833)
          {
            v267 = 2;
            v213 = 1;
            v27 = v265;
            v214 = v263;
            v268 = *(void **)v874;
            if (*(_QWORD *)v874)
              goto LABEL_251;
          }
          else
          {
            v23.f32[0] = v835;
            if (v265 < v835 || v836 == 0)
              v267 = 0;
            else
              v267 = 2;
            v213 = 1;
            v27 = v265;
            v214 = v263;
            v268 = *(void **)v874;
            if (*(_QWORD *)v874)
              goto LABEL_251;
          }
LABEL_252:
          if (v267 != 3 && v267)
            break;
          ++v215;
        }
        while (v215 != v211);
        if (v212)
        {
          memset(v861, 0, 24);
          if (v214)
          {
            if (v214 >> 61)
              sub_20E867F44();
            v336 = (char *)operator new(8 * v214);
            v337 = &v336[8 * v214];
            __src = v336;
            *(_QWORD *)v822 = v336;
            v823 = v337;
            if (v26)
            {
LABEL_381:
              v338 = 0;
              v339 = v336;
              while (2)
              {
                v23.f32[0] = sub_20EEFBFB8(v9, (uint64_t)v817, v338, *(float32x2_t *)v23.f32, v238, v239, v240, v241, v242, v243, v244);
                v238.i32[0] = v832;
                if (v23.f32[0] > *(float *)&v832)
                  goto LABEL_384;
                if (v339 < v337)
                {
                  *(_QWORD *)v339 = v338;
                  v340 = (uint64_t)(v339 + 8);
                }
                else
                {
                  v341 = (v339 - v336) >> 3;
                  v342 = v341 + 1;
                  if ((unint64_t)(v341 + 1) >> 61)
                    sub_20E867F44();
                  if ((v337 - v336) >> 2 > v342)
                    v342 = (v337 - v336) >> 2;
                  if ((unint64_t)(v337 - v336) >= 0x7FFFFFFFFFFFFFF8)
                    v343 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v343 = v342;
                  if (v343)
                  {
                    if (v343 >> 61)
                      sub_20E877A38();
                    v344 = operator new(8 * v343);
                    v345 = (unint64_t *)&v344[8 * v341];
                    *v345 = v338;
                    v340 = (uint64_t)(v345 + 1);
                    v346 = v339 - v336;
                    if (v339 != v336)
                    {
LABEL_396:
                      v347 = v346 - 8;
                      if (v347 < 0x168
                        || (v350 = (v339 - 8 - v336) & 0xFFFFFFFFFFFFFFF8,
                            &v344[v339 - v336 - 8 - v350] > &v344[v339 - v336 - 8])
                        || &v339[-v350 - 8] > v339 - 8
                        || (unint64_t)(v336 - v344) < 0x20)
                      {
                        v348 = v339;
                        v9 = v788;
                      }
                      else
                      {
                        v351 = (v347 >> 3) + 1;
                        v352 = 8 * (v351 & 0x3FFFFFFFFFFFFFFCLL);
                        v348 = &v339[-v352];
                        v345 = (unint64_t *)((char *)v345 - v352);
                        v353 = (float32x4_t *)&v344[8 * v341 - 16];
                        v354 = (float32x4_t *)(v339 - 16);
                        v355 = v351 & 0x3FFFFFFFFFFFFFFCLL;
                        v9 = v788;
                        do
                        {
                          v238 = v354[-1];
                          v23 = *v354;
                          v353[-1] = v238;
                          *v353 = v23;
                          v353 -= 2;
                          v354 -= 2;
                          v355 -= 4;
                        }
                        while (v355);
                        if (v351 == (v351 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_399:
                          v337 = &v344[8 * v343];
                          __src = v345;
                          v823 = v337;
                          if (v336)
                            goto LABEL_400;
                          goto LABEL_401;
                        }
                      }
                      do
                      {
                        v349 = *((_QWORD *)v348 - 1);
                        v348 -= 8;
                        *--v345 = v349;
                      }
                      while (v348 != v336);
                      goto LABEL_399;
                    }
                  }
                  else
                  {
                    v344 = 0;
                    v345 = (unint64_t *)(8 * v341);
                    *(_QWORD *)(8 * v341) = v338;
                    v340 = 8 * v341 + 8;
                    v346 = v339 - v336;
                    if (v339 != v336)
                      goto LABEL_396;
                  }
                  v9 = v788;
                  v337 = &v344[8 * v343];
                  __src = v345;
                  v823 = v337;
                  if (v336)
LABEL_400:
                    operator delete(v336);
LABEL_401:
                  v336 = (char *)v345;
                }
                *(_QWORD *)v822 = v340;
                v339 = (char *)v340;
LABEL_384:
                if (++v338 == v26)
                  goto LABEL_571;
                continue;
              }
            }
          }
          else
          {
            v337 = 0;
            v336 = 0;
            __src = 0;
            *(_QWORD *)v822 = 0;
            v823 = 0;
            if (v26)
              goto LABEL_381;
          }
          v339 = v336;
LABEL_571:
          v356 = v817[0];
          v881[0] = *(unint64_t **)&v817[1];
          *(_DWORD *)((char *)v881 + 7) = *(_DWORD *)&v817[8];
          *(unint64_t **)((char *)&v881[1] + 3) = *(unint64_t **)&v817[12];
          *(_DWORD *)((char *)&v881[2] + 3) = *(_DWORD *)&v817[20];
          *(_DWORD *)&v879[32] = v819;
          *(_OWORD *)v879 = *(_OWORD *)&v817[24];
          *(_OWORD *)&v879[16] = v818;
          v357 = v842;
          if (v842 != 1)
          {
LABEL_572:
            if (v357)
            {
              v842 = 0;
LABEL_574:
              v358 = v843;
              if (v843)
                goto LABEL_575;
            }
            else
            {
              v837[0] = v356;
              *(unint64_t **)&v837[1] = v881[0];
              *(_DWORD *)&v837[8] = *(_DWORD *)((char *)v881 + 7);
              *v764 = *(unint64_t **)((char *)&v881[1] + 3);
              *(_DWORD *)(((unint64_t)v837 | 0xC) + 8) = *(_DWORD *)((char *)&v881[2] + 3);
              v839 = *(_OWORD *)v879;
              v840 = *(_OWORD *)&v879[16];
              v841 = *(_DWORD *)&v879[32];
              v842 = 1;
              v358 = v843;
              if (v843)
                goto LABEL_575;
            }
            goto LABEL_576;
          }
        }
        else
        {
LABEL_412:
          v356 = 0;
          v337 = 0;
          v339 = 0;
          v336 = 0;
          v357 = v842;
          if (v842)
            goto LABEL_572;
        }
        if (!v357)
          goto LABEL_574;
        v837[0] = v356;
        *(unint64_t **)&v837[1] = v881[0];
        *(_DWORD *)&v837[8] = *(_DWORD *)((char *)v881 + 7);
        *v764 = *(unint64_t **)((char *)&v881[1] + 3);
        *(_DWORD *)(((unint64_t)v837 | 0xC) + 8) = *(_DWORD *)((char *)&v881[2] + 3);
        v839 = *(_OWORD *)v879;
        v840 = *(_OWORD *)&v879[16];
        v841 = *(_DWORD *)&v879[32];
        v358 = v843;
        if (v843)
        {
LABEL_575:
          *(_QWORD *)&v844 = v358;
          operator delete(v358);
        }
LABEL_576:
        v843 = v336;
        *(_QWORD *)&v844 = v339;
        *((_QWORD *)&v844 + 1) = v337;
        v469 = 1;
LABEL_577:
        v782 = v469;
LABEL_578:
        v845 = v27;
        v25 = a7;
LABEL_579:
        if (!v842)
          goto LABEL_900;
        v470 = (void *)v844;
        v471 = v843;
        v472 = v844 - (_QWORD)v843;
        if ((_QWORD)v844 - (_QWORD)v843 <= 0xFuLL)
        {
          v847 = 0uLL;
          __p = 0;
          if ((void *)v844 != v843)
          {
            v473 = (char *)operator new(v844 - (_QWORD)v843);
            v474 = &v473[8 * (v472 >> 3)];
            __p = v473;
            *((_QWORD *)&v847 + 1) = v474;
            memcpy(v473, v471, v472);
            *(_QWORD *)&v847 = v474;
            v25 = a7;
            v470 = v471;
          }
          goto LABEL_646;
        }
        sub_20EEFAE30((uint64_t *)v817, v9, (char *)v843, (unint64_t *)v844);
        v475 = *(void **)v817;
        sub_20EEFAC58((uint64_t)v861, (uint64_t **)v9, *(unint64_t **)v817, *(unint64_t **)&v817[8]);
        if (v475)
          operator delete(v475);
        v476.i64[0] = *(_QWORD *)(a3 + 12);
        v476.i32[2] = *(_DWORD *)(a3 + 20);
        v477.i64[0] = *(_QWORD *)a3;
        v477.i32[2] = *(_DWORD *)(a3 + 8);
        v478 = *(_QWORD *)v861;
        v479 = *(_QWORD *)&v861[8];
        memset(v817, 0, 24);
        if (*(_QWORD *)&v861[8] == *(_QWORD *)v861)
        {
          v488 = 0;
          v489 = 0uLL;
        }
        else
        {
          v803 = v477;
          v811 = v476;
          v480 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v861[8] - *(_QWORD *)v861) >> 2);
          if (v480 >> 62)
            sub_20E867F44();
          v481 = (char *)operator new(0xAAAAAAAAAAAAAAACLL * ((uint64_t)(*(_QWORD *)&v861[8] - *(_QWORD *)v861) >> 2));
          v484.i64[1] = v803.i64[1];
          v482 = vsubq_f32(v811, v803);
          *(int32x2_t *)v484.f32 = vdup_lane_s32(*(int32x2_t *)v482.f32, 1);
          v483 = (float32x2_t)vextq_s8((int8x16_t)v482, (int8x16_t)v482, 8uLL).u64[0];
          v484.f32[0] = 1.0
                      / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v482.f32, *(float32x2_t *)v482.f32), *(float32x2_t *)v484.f32, *(float32x2_t *)v482.f32, 1), v483, v483).f32[0]);
          *(_QWORD *)v817 = v481;
          *(_QWORD *)&v817[8] = v481;
          *(_QWORD *)&v817[16] = &v481[4 * v480];
          v851 = v817;
          v812 = (float32x2_t)vmulq_f32(v482, v484).u64[0];
          v485 = vmul_lane_f32(*(float32x2_t *)v484.f32, *(float32x2_t *)v482.f32, 1);
          v486 = vmul_f32(v483, *(float32x2_t *)v484.f32);
          do
          {
            v482.i64[0] = *(_QWORD *)v478;
            v482.i32[2] = *(_DWORD *)(v478 + 8);
            v484.i64[0] = *(_QWORD *)a3;
            v484.i32[2] = *(_DWORD *)(a3 + 8);
            v487 = (int8x16_t)vsubq_f32(v482, v484);
            *(_DWORD *)v874 = vmla_f32(vmla_lane_f32(vmul_f32(v812, *(float32x2_t *)v487.i8), v485, *(float32x2_t *)v487.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v487, v487, 8uLL), v486).u32[0];
            sub_20EEC5978((uint64_t *)&v851, v874);
            v478 += 12;
          }
          while (v478 != v479);
          v488 = *(const void **)v817;
          v489 = *(_OWORD *)&v817[8];
        }
        *(_QWORD *)v879 = v488;
        *(_OWORD *)&v879[8] = v489;
        v852 = 0;
        v851 = 0;
        v490 = 0.0;
        v853 = 0;
        v491 = v489 - (_QWORD)v488;
        v25 = a7;
        if ((const void *)v489 == v488)
        {
          v492 = 0;
          v495 = 0.0;
        }
        else
        {
          if (v491 < 0)
            sub_20E867F44();
          v492 = (char *)operator new(v489 - (_QWORD)v488);
          v851 = v492;
          v852 = (void **)v492;
          v493 = (float *)&v492[4 * (v491 >> 2)];
          v853 = v493;
          memcpy(v492, v488, v491);
          v494 = (unint64_t)(v491 >> 2) >> 1;
          sub_20EEFCFA8((float *)v492, (float *)&v492[4 * v494], v493);
          v495 = *(float *)&v492[4 * v494];
          if ((v491 & 4) == 0)
          {
            v496 = v494 - 1;
            if (v494 - 1 != v491 >> 2)
              sub_20EEFCFA8((float *)v492, (float *)&v492[4 * v496], v493);
            v495 = (float)(v495 + *(float *)&v492[4 * v496]) * 0.5;
          }
          v25 = a7;
          if (*(_QWORD *)v879 != *(_QWORD *)&v879[8])
          {
            sub_20EEFD350((uint64_t *)v879, (uint64_t)v817, v495);
            if (*(_QWORD *)v817 != *(_QWORD *)&v817[8])
            {
              v497 = 0.0;
              v498 = *(float **)v817;
              do
              {
                v499 = *v498++;
                v497 = v497 + v499;
              }
              while (v498 != *(float **)&v817[8]);
              v490 = v497 / (float)(unint64_t)((uint64_t)(*(_QWORD *)&v817[8] - *(_QWORD *)v817) >> 2);
            }
            if (*(_QWORD *)v817)
            {
              *(_QWORD *)&v817[8] = *(_QWORD *)v817;
              operator delete(*(void **)v817);
            }
          }
        }
        __p = 0;
        v847 = 0uLL;
        v500 = v844 - (_QWORD)v843;
        if ((void *)v844 != v843)
        {
          v804 = v492;
          if (v500 < 0)
            sub_20E867F44();
          v501 = (char *)operator new(v844 - (_QWORD)v843);
          v502 = 0;
          v503 = sqrtf(v490) * 1.5;
          v504 = v500 >> 3;
          v505 = &v501[8 * (v500 >> 3)];
          v506 = v501;
          v507 = v501;
          v813 = v504;
          while (1)
          {
            if (vabds_f32(*(float *)(*(_QWORD *)v879 + 4 * v502), v495) <= v503)
            {
              v508 = v843;
              if (v507 >= v505)
              {
                v509 = (v507 - v506) >> 3;
                v510 = v509 + 1;
                if ((unint64_t)(v509 + 1) >> 61)
                {
                  *((_QWORD *)&v847 + 1) = v505;
                  __p = v506;
                  *(_QWORD *)&v847 = v501;
                  sub_20E867F44();
                }
                if ((v505 - v506) >> 2 > v510)
                  v510 = (v505 - v506) >> 2;
                if ((unint64_t)(v505 - v506) >= 0x7FFFFFFFFFFFFFF8)
                  v511 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v511 = v510;
                if (v511)
                {
                  if (v511 >> 61)
                  {
                    *((_QWORD *)&v847 + 1) = v505;
                    __p = v506;
                    *(_QWORD *)&v847 = v501;
                    sub_20E877A38();
                  }
                  v512 = operator new(8 * v511);
                  v513 = &v512[8 * v509];
                  *(_QWORD *)v513 = v508[v502];
                  v501 = v513 + 8;
                  v514 = v507 - v506;
                  if (v507 != v506)
                  {
LABEL_622:
                    v515 = v514 - 8;
                    if (v515 < 0x168
                      || (v518 = (v507 - 8 - v506) & 0xFFFFFFFFFFFFFFF8,
                          &v512[v507 - v506 - 8 - v518] > &v512[v507 - v506 - 8])
                      || &v507[-v518 - 8] > v507 - 8
                      || (unint64_t)(v506 - v512) < 0x20)
                    {
                      v516 = v507;
                      v9 = v788;
                    }
                    else
                    {
                      v519 = (v515 >> 3) + 1;
                      v520 = 8 * (v519 & 0x3FFFFFFFFFFFFFFCLL);
                      v516 = &v507[-v520];
                      v513 -= v520;
                      v521 = &v512[8 * v509 - 16];
                      v522 = v507 - 16;
                      v523 = v519 & 0x3FFFFFFFFFFFFFFCLL;
                      v9 = v788;
                      do
                      {
                        v524 = *(_OWORD *)v522;
                        *(v521 - 1) = *((_OWORD *)v522 - 1);
                        *v521 = v524;
                        v521 -= 2;
                        v522 -= 32;
                        v523 -= 4;
                      }
                      while (v523);
                      if (v519 == (v519 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_625:
                        v505 = &v512[8 * v511];
                        if (v506)
                          goto LABEL_626;
                        goto LABEL_627;
                      }
                    }
                    do
                    {
                      v517 = *((_QWORD *)v516 - 1);
                      v516 -= 8;
                      *((_QWORD *)v513 - 1) = v517;
                      v513 -= 8;
                    }
                    while (v516 != v506);
                    goto LABEL_625;
                  }
                }
                else
                {
                  v512 = 0;
                  v513 = (char *)(8 * v509);
                  *(_QWORD *)(8 * v509) = *((_QWORD *)v843 + v502);
                  v501 = (char *)(8 * v509 + 8);
                  v514 = v507 - v506;
                  if (v507 != v506)
                    goto LABEL_622;
                }
                v9 = v788;
                v505 = &v512[8 * v511];
                if (v506)
LABEL_626:
                  operator delete(v506);
LABEL_627:
                v506 = v513;
                v507 = v501;
                v504 = v813;
                goto LABEL_610;
              }
              *(_QWORD *)v507 = *((_QWORD *)v843 + v502);
              v507 += 8;
              v501 = v507;
            }
LABEL_610:
            if (++v502 == v504)
            {
              *((_QWORD *)&v847 + 1) = v505;
              __p = v506;
              *(_QWORD *)&v847 = v501;
              v25 = a7;
              v492 = v804;
              break;
            }
          }
        }
        if (v492)
          operator delete(v492);
        if (*(_QWORD *)v879)
        {
          *(_QWORD *)&v879[8] = *(_QWORD *)v879;
          operator delete(*(void **)v879);
        }
        if (*(_QWORD *)v861)
        {
          *(_QWORD *)&v861[8] = *(_QWORD *)v861;
          operator delete(*(void **)v861);
        }
        v470 = v843;
LABEL_646:
        if (v470)
        {
          *(_QWORD *)&v844 = v470;
          operator delete(v470);
        }
        v843 = __p;
        v844 = v847;
        if (v842)
        {
          v525 = (uint64_t)(v847 - (_QWORD)__p) >> 3;
          if (v525 >= *(_QWORD *)a2 && (float)((float)v525 / (float)v763) >= *(float *)(a2 + 12))
          {
            sub_20EEFAE30((uint64_t *)v817, v9, (char *)__p, (unint64_t *)v847);
            v526 = *(void **)v817;
            sub_20EEFAC58((uint64_t)v881, (uint64_t **)v9, *(unint64_t **)v817, *(unint64_t **)&v817[8]);
            if (v526)
              operator delete(v526);
            sub_20EEF5640(0xAAAAAAAAAAAAAAABLL * (((char *)v881[1] - (char *)v881[0]) >> 2), (float32x2_t *)v881[0], v782, (uint64_t)v879, v527, v528);
            if (!v879[24])
              goto LABEL_832;
            v23.i64[0] = *(_QWORD *)(a3 + 12);
            v23.i32[2] = *(_DWORD *)(a3 + 20);
            v533.i64[0] = *(_QWORD *)a3;
            v533.i32[2] = *(_DWORD *)(a3 + 8);
            v534 = vsubq_f32(v23, v533);
            v535 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v534.f32, 1);
            v536 = (float32x2_t)vextq_s8((int8x16_t)v534, (int8x16_t)v534, 8uLL).u64[0];
            v537 = (int8x16_t)vmulq_n_f32(v534, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v534.f32, *(float32x2_t *)v534.f32), v535, *(float32x2_t *)v534.f32, 1), v536, v536).f32[0]));
            v529.f32[0] = v838;
            v530.i64[0] = *(_QWORD *)&v837[12];
            v538 = v530;
            v538.f32[2] = v838;
            if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v837[12], *(float32x2_t *)v537.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v537.i8, 1), *(float32x2_t *)&v837[12], 1), (float32x2_t)*(_OWORD *)&vextq_s8(v537, v537, 8uLL), v529).f32[0] > 0.0)
            {
              v538 = vnegq_f32(v538);
              v838 = v538.f32[2];
              *(_QWORD *)&v837[12] = v538.i64[0];
            }
            v539 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v538.f32, 1);
            v540 = (float32x2_t)vextq_s8((int8x16_t)v538, (int8x16_t)v538, 8uLL).u64[0];
            v541 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v538.f32, *(float32x2_t *)v538.f32), v539, *(float32x2_t *)v538.f32, 1), v540, v540);
            if (v541.f32[0] == 1.0)
              goto LABEL_665;
            v542 = v541.f32[0] + -1.0;
            if (v541.f32[0] < 1.0)
              v542 = 1.0 - v541.f32[0];
            if (v542 <= 0.000001)
            {
LABEL_665:
              v544 = *(float32x4_t *)v837;
              v553 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v837, *(float32x2_t *)v538.f32), v539, *(float32x2_t *)v837, 1), v540, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v544, (int8x16_t)v544, 8uLL)).f32[0];
              v547 = (int8x16_t)v538;
              v543 = v538;
            }
            else
            {
              v541.f32[0] = 1.0 / sqrtf(v541.f32[0]);
              v543 = vmulq_n_f32(v538, v541.f32[0]);
              v544 = *(float32x4_t *)v837;
              v545 = vmul_lane_f32(v541, *(float32x2_t *)v538.f32, 1);
              *(float32x2_t *)v532.i8 = vmul_f32(v540, v541);
              v546.i64[0] = v543.i64[0];
              v546.u64[1] = (unint64_t)v545;
              v547 = (int8x16_t)vuzp1q_s32(v546, v532);
              v548 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v543.f32, 1);
              v549 = (float32x2_t)vextq_s8((int8x16_t)v543, (int8x16_t)v543, 8uLL).u64[0];
              v550 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v543.f32, *(float32x2_t *)v543.f32), v545, *(float32x2_t *)v543.f32, 1), v549, *(float32x2_t *)v532.i8).f32[0];
              if (v550 == 1.0)
                goto LABEL_676;
              v551 = v550 + -1.0;
              if (v550 < 1.0)
                v551 = 1.0 - v550;
              if (v551 <= 0.000001)
              {
LABEL_676:
                v531 = (float64x2_t)vextq_s8(*(int8x16_t *)v837, *(int8x16_t *)v837, 8uLL);
                v553 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v837, *(float32x2_t *)v543.f32), v548, *(float32x2_t *)v837, 1), v549, *(float32x2_t *)&v531.f64[0]).f32[0];
              }
              else
              {
                *(float *)v547.i32 = sqrtf(v550);
                v552 = (int8x16_t)vmulq_n_f32(v543, 1.0 / *(float *)v547.i32);
                v553 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v837, *(float32x2_t *)v552.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v552.i8, 1), *(float32x2_t *)v837, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v552, v552, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v837, *(int8x16_t *)v837, 8uLL)).f32[0];
                v547 = (int8x16_t)vdivq_f32(v543, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v547.i8, 0));
                v543 = (float32x4_t)v547;
              }
            }
            v554 = (float32x2_t)vextq_s8(v547, v547, 8uLL).u64[0];
            LODWORD(v555) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v547.i8, *(float32x2_t *)v534.f32), v535, *(float32x2_t *)v547.i8, 1), v536, v554).u32[0];
            v535.i32[1] = 872415232;
            if (fabsf(v555) < 0.00000011921)
              goto LABEL_699;
            v535.f32[0] = -v553;
            v556 = (int8x16_t)vmlsq_lane_f32(v533, v543, v535, 0);
            v557 = (float)-vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v547.i8, *(float32x2_t *)v556.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v547.i8, 1), *(float32x2_t *)v556.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v556, v556, 8uLL), v554).f32[0]/ v555;
            if (v557 < 0.0 || v557 > 1.0)
              goto LABEL_699;
            v559 = atomic_load((unsigned __int8 *)&qword_254A516F8);
            v777 = (int8x16_t)v533;
            v774 = v557;
            v775 = v534;
            if ((v559 & 1) == 0)
            {
              v806 = v538;
              v815 = v544;
              v748 = __cxa_guard_acquire(&qword_254A516F8);
              v538 = v806;
              v544 = v815;
              if (v748)
              {
                dword_254A516F0 = 1065098332;
                __cxa_guard_release(&qword_254A516F8);
                v538 = v806;
                v544 = v815;
              }
            }
            v560 = atomic_load((unsigned __int8 *)&qword_254A51708);
            if ((v560 & 1) == 0)
            {
              v807 = v538;
              v816 = v544;
              v749 = __cxa_guard_acquire(&qword_254A51708);
              v538 = v807;
              v544 = v816;
              if (v749)
              {
                dword_254A51700 = 1043452119;
                __cxa_guard_release(&qword_254A51708);
                v538 = v807;
                v544 = v816;
              }
            }
            v561 = vcvt_hight_f64_f32(v538);
            v562 = vcvtq_f64_f32(*(float32x2_t *)v538.f32);
            v563 = (float64x2_t)vextq_s8((int8x16_t)v562, (int8x16_t)v562, 8uLL);
            if (fabsf(v838) >= *(float *)&dword_254A516F0)
            {
              v579.f64[0] = v562.f64[0];
              v579.f64[1] = v563.f64[0];
              v580 = (int64x2_t)vmulq_f64(v579, (float64x2_t)0);
              _Q7.f64[0] = v561.f64[0];
              *(_QWORD *)&_Q7.f64[1] = v580.i64[0];
              v582 = vmulq_f64(v579, (float64x2_t)xmmword_21030D320);
              v583 = (float64x2_t)vextq_s8((int8x16_t)v582, (int8x16_t)vmulq_f64(v561, (float64x2_t)0), 8uLL);
              v584 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v580, 1), v582);
              _Q4 = vsubq_f64(_Q7, v583);
              _Q5 = vmulq_f64(_Q4, _Q4);
              _D6 = _Q4.f64[1];
              __asm { FMLA            D5, D6, V4.D[1] }
              _Q5.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q5.f64[0], v584.f64[0], v584.f64[0]));
              v575 = vmulq_n_f64(_Q4, _Q5.f64[0]);
              _Q3 = vmulq_f64(v584, _Q5);
              _Q5.f64[0] = v563.f64[0];
              _Q5.f64[1] = v561.f64[0];
              v588.f64[0] = v561.f64[0];
              v588.f64[1] = v562.f64[0];
              v589.f64[0] = _Q3.f64[0];
              v589.f64[1] = v575.f64[0];
              _Q5 = vmlsq_f64(vmulq_f64(_Q5, v589), v588, (float64x2_t)vextq_s8((int8x16_t)v575, (int8x16_t)_Q3, 8uLL));
              v591 = vmlsq_f64(vmulq_laneq_f64(v562, v575, 1), v563, v575);
              _Q6 = vmulq_f64(_Q5, _Q5);
              _Q7.f64[0] = _Q5.f64[1];
              __asm { FMLA            D6, D7, V5.D[1] }
              _Q6.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q6.f64[0], v591.f64[0], v591.f64[0]));
              v571 = vmulq_n_f64(_Q5, _Q6.f64[0]);
              v572 = (float64x2_t)vextq_s8((int8x16_t)v571, (int8x16_t)vmulq_f64(v591, _Q6), 8uLL);
              *(_QWORD *)&_Q6.f64[0] = vextq_s8((int8x16_t)v572, (int8x16_t)v572, 8uLL).u64[0];
              v577 = vextq_s8((int8x16_t)v575, (int8x16_t)v575, 8uLL).u64[0];
            }
            else
            {
              v564.f64[0] = v563.f64[0];
              v564.f64[1] = v561.f64[0];
              v565.f64[0] = v561.f64[0];
              v565.f64[1] = v562.f64[0];
              v531.f64[0] = -0.0;
              _Q7 = vmlaq_f64(vmulq_f64(v565, (float64x2_t)xmmword_210389940), v564, (float64x2_t)xmmword_21030D320);
              v567 = vmlaq_f64(vmulq_f64(v563, v531), v562, (float64x2_t)0);
              _Q5 = vmulq_f64(_Q7, _Q7);
              _D16 = _Q7.f64[1];
              __asm { FMLA            D5, D16, V7.D[1] }
              _Q5.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q5.f64[0], v567.f64[0], v567.f64[0]));
              v570 = (int8x16_t)vmulq_f64(v567, _Q5);
              v571 = vmulq_n_f64(_Q7, _Q5.f64[0]);
              v572 = (float64x2_t)vextq_s8((int8x16_t)v571, v570, 8uLL);
              _Q6.f64[1] = v571.f64[0];
              _Q4 = vmlsq_f64(vmulq_f64(v565, v572), v564, _Q6);
              v574 = vmlsq_laneq_f64(vmulq_f64(v563, v571), v562, v571, 1);
              _Q3 = vmulq_f64(_Q4, _Q4);
              _Q6.f64[0] = _Q4.f64[1];
              __asm { FMLA            D3, D6, V4.D[1] }
              _Q3.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q3.f64[0], v574.f64[0], v574.f64[0]));
              v575 = vmulq_n_f64(_Q4, _Q3.f64[0]);
              *(_QWORD *)&_Q3.f64[0] = *(_OWORD *)&vmulq_f64(v574, _Q3);
              v577 = vextq_s8((int8x16_t)v575, (int8x16_t)v575, 8uLL).u64[0];
              *(_QWORD *)&_Q6.f64[0] = vextq_s8((int8x16_t)v572, (int8x16_t)v572, 8uLL).u64[0];
            }
            v571.f64[1] = v572.f64[0];
            v562.f64[1] = v563.f64[0];
            *(_QWORD *)&v575.f64[1] = v577;
            *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)xmmword_210389990, (int8x16_t)xmmword_210389990, 8uLL).u64[0];
            *(_QWORD *)&_Q6.f64[1] = vextq_s8((int8x16_t)xmmword_2103899B0, (int8x16_t)xmmword_2103899B0, 8uLL).u64[0];
            v592.f64[1] = 1.0;
            *(_QWORD *)&v592.f64[0] = *(_OWORD *)&vcvt_hight_f64_f32(v544);
            v593 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v575), _Q3);
            v594 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v571), _Q6);
            v595 = vcvt_hight_f32_f64(*(int32x2_t *)v544.f32, v592);
            *(float32x2_t *)&v562.f64[0] = vcvt_f32_f64(v562);
            v596 = (int8x16_t)vtrn2q_s32(v593, v594);
            v814 = (float32x2_t)vzip1q_s32(v593, v594).u64[0];
            v596.i32[2] = HIDWORD(v562.f64[0]);
            v593.i64[0] = vzip2q_s32(v593, v594).u64[0];
            v594.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v596, 0).i32[3];
            v594.i32[1] = vextq_s8(v596, (int8x16_t)v562, 4uLL).u32[0];
            v793 = *(float32x2_t *)v594.i8;
            v798 = *(float32x2_t *)v593.i8;
            v805 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v814, COERCE_FLOAT(v595.i32[0] ^ 0x80000000)), *(float32x2_t *)v596.i8, (float32x2_t)(v595.i64[0] ^ 0x8000000080000000), 1), *(float32x2_t *)v593.i8, COERCE_FLOAT(v595.i32[2] ^ 0x80000000));
            v597 = (float32x2_t *)v881[0];
            v598 = v881[1];
            memset(v817, 0, 24);
            if (v881[1] == v881[0])
            {
              v599 = 0;
              v600 = 0;
            }
            else
            {
              if ((0xAAAAAAAAAAAAAAABLL * (((char *)v881[1] - (char *)v881[0]) >> 2)) >> 61)
                sub_20E969238();
              *(_QWORD *)v817 = operator new(0x5555555555555558 * (((char *)v881[1] - (char *)v881[0]) >> 2));
              *(_QWORD *)&v817[8] = *(_QWORD *)v817;
              *(_QWORD *)&v817[16] = *(_QWORD *)v817 + 0x5555555555555558 * (((char *)v598 - (char *)v597) >> 2);
              v851 = v817;
              do
              {
                __p = (void *)vadd_f32(v805, vmla_n_f32(vmla_lane_f32(vmul_n_f32(v814, COERCE_FLOAT(*v597)), v793, *v597, 1), v798, v597[1].f32[0]));
                sub_20EEE8140((void ***)&v851, &__p);
                v597 = (float32x2_t *)((char *)v597 + 12);
              }
              while (v597 != (float32x2_t *)v598);
              v599 = *(float32x2_t **)v817;
              v600 = *(_QWORD *)&v817[8];
              if (*(_QWORD *)v817)
                v601 = 1;
              else
                v601 = *(_QWORD *)&v817[8] == 0;
              if (!v601)
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                v599 = 0;
              }
            }
            sub_20FDC59E8((v600 - (uint64_t)v599) >> 3, v599, (uint64_t)v817);
            *(_OWORD *)v861 = *(_OWORD *)v817;
            *(_QWORD *)&v861[16] = *(_QWORD *)&v817[16];
            if (v599)
              operator delete(v599);
            v602 = vmlaq_n_f32((float32x4_t)v777, v775, v774);
            *(float32x2_t *)v817 = vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v814, v602.f32[0]), v793, *(float32x2_t *)v602.f32, 1), v798, v602, 2), v805);
            v603 = sub_20FDC57E8((float32x2_t **)v861, (float *)v817, 0, 0.000001);
            if (*(_QWORD *)v861)
            {
              *(_QWORD *)&v861[8] = *(_QWORD *)v861;
              operator delete(*(void **)v861);
            }
            if (!v603)
            {
LABEL_699:
              sub_20EEFAE30((uint64_t *)&v851, v9, (char *)v843, (unint64_t *)v844);
              v23 = 0uLL;
              memset(v817, 0, 32);
              *(_DWORD *)&v817[32] = 1065353216;
              memset(v861, 0, 32);
              *(_DWORD *)&v861[32] = 1065353216;
              v608 = v851;
              v609 = v852;
              v610 = (void **)v851;
              if (v851 == v852)
              {
                v611 = 0;
LABEL_709:
                v616 = 0;
                v618 = *(unint64_t **)(v9 + 48);
                v617 = *(unint64_t **)(v9 + 56);
                v619 = v617 - v618;
                __p = 0;
                v847 = 0uLL;
                v620 = v619 - v611;
                if (v619 != v611)
                {
                  if (v620 >> 61)
                    sub_20E867F44();
                  v616 = operator new(8 * v620);
                  __p = v616;
                  *(_QWORD *)&v847 = v616;
                  *((_QWORD *)&v847 + 1) = &v616[v620];
                }
                while (2)
                {
                  if (v618 != v617)
                  {
                    v622 = *v618;
                    if (*(_QWORD *)&v817[8])
                    {
                      *(int8x8_t *)v23.f32 = vcnt_s8(*(int8x8_t *)&v817[8]);
                      v23.i16[0] = vaddlv_u8(*(uint8x8_t *)v23.f32);
                      if (v23.u32[0] > 1uLL)
                      {
                        v623 = *v618;
                        if (v622 >= *(_QWORD *)&v817[8])
                          v623 = v622 % *(_QWORD *)&v817[8];
                      }
                      else
                      {
                        v623 = (*(_QWORD *)&v817[8] - 1) & v622;
                      }
                      v624 = *(_QWORD **)(*(_QWORD *)v817 + 8 * v623);
                      if (v624)
                      {
                        v625 = (_QWORD *)*v624;
                        if (v625)
                        {
                          if (v23.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v627 = v625[1];
                              if (v627 == v622)
                              {
                                if (v625[2] == v622)
                                  goto LABEL_714;
                              }
                              else if ((v627 & (*(_QWORD *)&v817[8] - 1)) != v623)
                              {
                                goto LABEL_736;
                              }
                              v625 = (_QWORD *)*v625;
                              if (!v625)
                                goto LABEL_736;
                            }
                          }
                          do
                          {
                            v626 = v625[1];
                            if (v626 == v622)
                            {
                              if (v625[2] == v622)
                                goto LABEL_714;
                            }
                            else
                            {
                              if (v626 >= *(_QWORD *)&v817[8])
                                v626 %= *(_QWORD *)&v817[8];
                              if (v626 != v623)
                                break;
                            }
                            v625 = (_QWORD *)*v625;
                          }
                          while (v625);
                        }
                      }
                    }
LABEL_736:
                    if ((unint64_t)v616 < *((_QWORD *)&v847 + 1))
                    {
                      *v616 = v622;
                      v621 = (uint64_t)(v616 + 1);
                      goto LABEL_713;
                    }
                    v628 = __p;
                    v629 = (char *)v616 - (_BYTE *)__p;
                    v630 = ((char *)v616 - (_BYTE *)__p) >> 3;
                    v631 = v630 + 1;
                    if ((unint64_t)(v630 + 1) >> 61)
                      sub_20E867F44();
                    v632 = *((_QWORD *)&v847 + 1) - (_QWORD)__p;
                    if ((uint64_t)(*((_QWORD *)&v847 + 1) - (_QWORD)__p) >> 2 > v631)
                      v631 = v632 >> 2;
                    if ((unint64_t)v632 >= 0x7FFFFFFFFFFFFFF8)
                      v633 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v633 = v631;
                    if (v633)
                    {
                      if (v633 >> 61)
                        sub_20E877A38();
                      v634 = operator new(8 * v633);
                      v635 = (unint64_t *)&v634[8 * v630];
                      *v635 = v622;
                      v621 = (uint64_t)(v635 + 1);
                      v636 = (char *)v616 - v628;
                      if (v616 != (_QWORD *)v628)
                      {
LABEL_746:
                        v637 = v636 - 8;
                        if (v637 < 0x168
                          || (v640 = ((char *)(v616 - 1) - v628) & 0xFFFFFFFFFFFFFFF8,
                              &v634[v629 - 8 - v640] > &v634[v629 - 8])
                          || (_QWORD *)((char *)v616 - v640 - 8) > v616 - 1
                          || (unint64_t)((char *)v616 - &v634[v629]) < 0x20)
                        {
                          v638 = v616;
                          v9 = v788;
                        }
                        else
                        {
                          v641 = (v637 >> 3) + 1;
                          v642 = 8 * (v641 & 0x3FFFFFFFFFFFFFFCLL);
                          v638 = &v616[v642 / 0xFFFFFFFFFFFFFFF8];
                          v635 = (unint64_t *)((char *)v635 - v642);
                          v643 = (float32x4_t *)&v634[8 * v630 - 16];
                          v644 = (float32x4_t *)(v616 - 2);
                          v645 = v641 & 0x3FFFFFFFFFFFFFFCLL;
                          v9 = v788;
                          do
                          {
                            v22 = v644[-1];
                            v23 = *v644;
                            v643[-1] = v22;
                            *v643 = v23;
                            v643 -= 2;
                            v644 -= 2;
                            v645 -= 4;
                          }
                          while (v645);
                          if (v641 == (v641 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_749:
                            __p = v635;
                            *(_QWORD *)&v847 = v621;
                            *((_QWORD *)&v847 + 1) = &v634[8 * v633];
                            if (!v628)
                            {
LABEL_713:
                              *(_QWORD *)&v847 = v621;
                              v616 = (_QWORD *)v621;
LABEL_714:
                              ++v618;
                              continue;
                            }
LABEL_753:
                            operator delete(v628);
                            goto LABEL_713;
                          }
                        }
                        do
                        {
                          v639 = *--v638;
                          *--v635 = v639;
                        }
                        while (v638 != (_QWORD *)v628);
                        goto LABEL_749;
                      }
                    }
                    else
                    {
                      v634 = 0;
                      v635 = (unint64_t *)(8 * v630);
                      *(_QWORD *)(8 * v630) = v622;
                      v621 = 8 * v630 + 8;
                      v636 = (char *)v616 - v628;
                      if (v616 != (_QWORD *)v628)
                        goto LABEL_746;
                    }
                    v9 = v788;
                    __p = v635;
                    *(_QWORD *)&v847 = v621;
                    *((_QWORD *)&v847 + 1) = &v634[8 * v633];
                    if (!v628)
                      goto LABEL_713;
                    goto LABEL_753;
                  }
                  break;
                }
                if (v766 != &__p)
                  sub_20E86811C(v766, (char *)__p, (char *)v616, ((char *)v616 - (_BYTE *)__p) >> 3);
                v646 = 0;
                v648 = *(unint64_t **)(v9 + 72);
                v647 = *(unint64_t **)(v9 + 80);
                v649 = v647 - v648;
                memset(v874, 0, 24);
                v650 = v649 - *(_QWORD *)&v861[24];
                if (v649 != *(_QWORD *)&v861[24])
                {
                  if (v650 >> 61)
                    sub_20E867F44();
                  v646 = (char *)operator new(8 * v650);
                  *(_QWORD *)v874 = v646;
                  *(_QWORD *)&v874[8] = v646;
                  *(_QWORD *)&v874[16] = &v646[8 * v650];
                }
                v651 = v646;
                if (v648 != v647)
                {
                  while (2)
                  {
                    v652 = *v648;
                    if (*(_QWORD *)&v861[8])
                    {
                      *(int8x8_t *)v23.f32 = vcnt_s8(*(int8x8_t *)&v861[8]);
                      v23.i16[0] = vaddlv_u8(*(uint8x8_t *)v23.f32);
                      if (v23.u32[0] > 1uLL)
                      {
                        v653 = *v648;
                        if (v652 >= *(_QWORD *)&v861[8])
                          v653 = v652 % *(_QWORD *)&v861[8];
                      }
                      else
                      {
                        v653 = (*(_QWORD *)&v861[8] - 1) & v652;
                      }
                      v654 = *(_QWORD **)(*(_QWORD *)v861 + 8 * v653);
                      if (v654)
                      {
                        v655 = (_QWORD *)*v654;
                        if (v655)
                        {
                          if (v23.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v657 = v655[1];
                              if (v657 == v652)
                              {
                                if (v655[2] == v652)
                                  goto LABEL_804;
                              }
                              else if ((v657 & (*(_QWORD *)&v861[8] - 1)) != v653)
                              {
                                goto LABEL_787;
                              }
                              v655 = (_QWORD *)*v655;
                              if (!v655)
                                goto LABEL_787;
                            }
                          }
                          do
                          {
                            v656 = v655[1];
                            if (v656 == v652)
                            {
                              if (v655[2] == v652)
                                goto LABEL_804;
                            }
                            else
                            {
                              if (v656 >= *(_QWORD *)&v861[8])
                                v656 %= *(_QWORD *)&v861[8];
                              if (v656 != v653)
                                break;
                            }
                            v655 = (_QWORD *)*v655;
                          }
                          while (v655);
                        }
                      }
                    }
LABEL_787:
                    if ((unint64_t)v651 < *(_QWORD *)&v874[16])
                    {
                      *(_QWORD *)v651 = v652;
                      v658 = (uint64_t)(v651 + 8);
LABEL_803:
                      *(_QWORD *)&v874[8] = v658;
                      v651 = (char *)v658;
LABEL_804:
                      if (++v648 == v647)
                      {
                        v646 = *(char **)v874;
                        goto LABEL_816;
                      }
                      continue;
                    }
                    break;
                  }
                  v659 = *(char **)v874;
                  v660 = &v651[-*(_QWORD *)v874];
                  v661 = (uint64_t)&v651[-*(_QWORD *)v874] >> 3;
                  v662 = v661 + 1;
                  if ((unint64_t)(v661 + 1) >> 61)
                    sub_20E867F44();
                  v663 = *(_QWORD *)&v874[16] - *(_QWORD *)v874;
                  if ((uint64_t)(*(_QWORD *)&v874[16] - *(_QWORD *)v874) >> 2 > v662)
                    v662 = v663 >> 2;
                  if ((unint64_t)v663 >= 0x7FFFFFFFFFFFFFF8)
                    v664 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v664 = v662;
                  if (v664)
                  {
                    if (v664 >> 61)
                      sub_20E877A38();
                    v665 = operator new(8 * v664);
                    v666 = (unint64_t *)((char *)v665 + 8 * v661);
                    *v666 = v652;
                    v658 = (uint64_t)(v666 + 1);
                    v667 = v651 - v659;
                    if (v651 != v659)
                    {
LABEL_798:
                      v668 = v667 - 8;
                      if (v668 < 0x168
                        || (v671 = (v651 - 8 - v659) & 0xFFFFFFFFFFFFFFF8,
                            &v660[(_QWORD)v665 - 8 - v671] > &v660[(_QWORD)v665 - 8])
                        || &v651[-v671 - 8] > v651 - 8
                        || (unint64_t)(v651 - &v660[(_QWORD)v665]) < 0x20)
                      {
                        v669 = v651;
                        v9 = v788;
                      }
                      else
                      {
                        v672 = (v668 >> 3) + 1;
                        v673 = 8 * (v672 & 0x3FFFFFFFFFFFFFFCLL);
                        v669 = &v651[-v673];
                        v666 = (unint64_t *)((char *)v666 - v673);
                        v674 = (float32x4_t *)((char *)v665 + 8 * v661 - 16);
                        v675 = (float32x4_t *)(v651 - 16);
                        v676 = v672 & 0x3FFFFFFFFFFFFFFCLL;
                        v9 = v788;
                        do
                        {
                          v22 = v675[-1];
                          v23 = *v675;
                          v674[-1] = v22;
                          *v674 = v23;
                          v674 -= 2;
                          v675 -= 2;
                          v676 -= 4;
                        }
                        while (v676);
                        if (v672 == (v672 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_801;
                      }
                      do
                      {
                        v670 = *((_QWORD *)v669 - 1);
                        v669 -= 8;
                        *--v666 = v670;
                      }
                      while (v669 != v659);
LABEL_801:
                      *(_QWORD *)v874 = v666;
                      *(_QWORD *)&v874[8] = v658;
                      *(_QWORD *)&v874[16] = (char *)v665 + 8 * v664;
                      if (!v659)
                        goto LABEL_803;
LABEL_802:
                      operator delete(v659);
                      goto LABEL_803;
                    }
                  }
                  else
                  {
                    v665 = 0;
                    v666 = (unint64_t *)(8 * v661);
                    *(_QWORD *)(8 * v661) = v652;
                    v658 = 8 * v661 + 8;
                    v667 = v651 - v659;
                    if (v651 != v659)
                      goto LABEL_798;
                  }
                  v9 = v788;
                  *(_QWORD *)v874 = v666;
                  *(_QWORD *)&v874[8] = v658;
                  *(_QWORD *)&v874[16] = (char *)v665 + 8 * v664;
                  if (!v659)
                    goto LABEL_803;
                  goto LABEL_802;
                }
LABEL_816:
                if (v765 == (_QWORD *)v874)
                {
                  v25 = a7;
                  if (v646)
                  {
LABEL_818:
                    *(_QWORD *)&v874[8] = v646;
                    operator delete(v646);
                  }
                }
                else
                {
                  sub_20E86811C(v765, v646, v651, (v651 - v646) >> 3);
                  v25 = a7;
                  v646 = *(char **)v874;
                  if (*(_QWORD *)v874)
                    goto LABEL_818;
                }
                if (__p)
                {
                  *(_QWORD *)&v847 = __p;
                  operator delete(__p);
                }
                v677 = *(_QWORD **)&v861[16];
                if (*(_QWORD *)&v861[16])
                {
                  do
                  {
                    v678 = (_QWORD *)*v677;
                    operator delete(v677);
                    v677 = v678;
                  }
                  while (v678);
                }
                v679 = *(void **)v861;
                *(_QWORD *)v861 = 0;
                if (v679)
                  operator delete(v679);
                v680 = *(_QWORD **)&v817[16];
                if (*(_QWORD *)&v817[16])
                {
                  do
                  {
                    v681 = (_QWORD *)*v680;
                    operator delete(v680);
                    v680 = v681;
                  }
                  while (v681);
                }
                v682 = *(void **)v817;
                *(_QWORD *)v817 = 0;
                if (v682)
                  operator delete(v682);
                if (v608)
                  operator delete(v608);
                if ((unint64_t)(((uint64_t)(*(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72)) >> 3)
                                      + ((uint64_t)(*(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48)) >> 3)) >= *(_QWORD *)a2)
                {
                  v683 = 1;
                  v684 = v881[0];
                  if (!v881[0])
                    goto LABEL_834;
                }
                else
                {
LABEL_832:
                  v683 = 0;
                  *v25 = 0;
                  v25[1] = 0;
                  v25[2] = 0;
                  v684 = v881[0];
                  if (!v881[0])
                    goto LABEL_834;
                }
LABEL_833:
                v881[1] = v684;
                operator delete(v684);
                goto LABEL_834;
              }
              while (2)
              {
                v612 = (unint64_t)*v610;
                __p = *v610;
                if (*(_BYTE *)(v9 + 8))
                {
                  v613 = *(uint64_t **)v9;
                  v614 = *(_QWORD *)(*(_QWORD *)v9 + 8);
                  if (v612 >= 0x4EC4EC4EC4EC4EC5 * ((v614 - **(_QWORD **)v9) >> 2))
                  {
                    *(_QWORD *)v874 = 0;
                    v615 = 0xB13B13B13B13B13BLL * ((v614 - *v613) >> 2);
                    goto LABEL_707;
                  }
                  sub_20EDC9EA8((uint64_t)v817, (unint64_t *)&__p, &__p);
                }
                else
                {
                  v615 = 0;
LABEL_707:
                  *(_QWORD *)v874 = v615 + v612;
                  sub_20EDC9EA8((uint64_t)v861, (unint64_t *)v874, v874);
                }
                if (++v610 == v609)
                {
                  v611 = *(_QWORD *)&v817[24];
                  goto LABEL_709;
                }
                continue;
              }
            }
            if ((v756 & 1) == 0)
              sub_20EDB523C(v755, (char *)v881[0], (char *)v881[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v881[1] - (char *)v881[0]) >> 2));
            if (v843 == (void *)v844)
            {
              v685 = 0;
            }
            else
            {
              v604 = (uint64_t)(*(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48)) >> 3;
              v605 = v844 - (_QWORD)v843 - 8;
              if (v605 < 0x38)
              {
                v606 = 0;
                v607 = (unint64_t *)v843;
                goto LABEL_847;
              }
              v686 = (v605 >> 3) + 1;
              v607 = (unint64_t *)((char *)v843 + 8 * (v686 & 0x3FFFFFFFFFFFFFF8));
              v687 = (uint64x2_t)vdupq_n_s64(v604);
              v688 = (uint64x2_t *)((char *)v843 + 32);
              v689 = 0uLL;
              v690 = v686 & 0x3FFFFFFFFFFFFFF8;
              v691 = 0uLL;
              v692.i64[0] = 0x200000002;
              v692.i64[1] = 0x200000002;
              do
              {
                v693 = v688[-2];
                v694 = v688[-1];
                v695 = *v688;
                v696 = v688[1];
                v688 += 4;
                v697 = vuzp1q_s32((int32x4_t)vcgtq_u64(v687, v693), (int32x4_t)vcgtq_u64(v687, v694));
                v698 = vuzp1q_s32((int32x4_t)vcgtq_u64(v687, v695), (int32x4_t)vcgtq_u64(v687, v696));
                v689 = vaddq_s32(vsubq_s32((int32x4_t)vbicq_s8(v692, (int8x16_t)v697), v697), v689);
                v691 = vaddq_s32(vsubq_s32((int32x4_t)vbicq_s8(v692, (int8x16_t)v698), v698), v691);
                v690 -= 8;
              }
              while (v690);
              v606 = vaddvq_s32(vaddq_s32(v691, v689));
              if (v686 != (v686 & 0x3FFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_847:
                  v699 = *v607++;
                  if (v604 > v699)
                    v700 = 1;
                  else
                    v700 = 2;
                  v606 += v700;
                }
                while (v607 != (unint64_t *)v844);
              }
              v685 = v606;
            }
            *a7 = 0;
            a7[1] = 0;
            a7[2] = 0;
            v701 = (char *)operator new(0x40uLL);
            v683 = 0;
            *(_QWORD *)v701 = *(_QWORD *)v837;
            *((_DWORD *)v701 + 2) = *(_DWORD *)&v837[8];
            *(_QWORD *)(v701 + 12) = *v764;
            *((_DWORD *)v701 + 5) = *(_DWORD *)(((unint64_t)v837 | 0xC) + 8);
            a7[1] = v701 + 64;
            a7[2] = v701 + 64;
            *((_QWORD *)v701 + 3) = v685;
            *((_QWORD *)v701 + 4) = v763;
            v701[40] = 0;
            v701[44] = 0;
            v701[48] = 0;
            v701[52] = 0;
            *((_DWORD *)v701 + 14) = v782;
            *a7 = v701;
            v25 = a7;
            v684 = v881[0];
            if (v881[0])
              goto LABEL_833;
LABEL_834:
            if ((v683 & 1) == 0)
              goto LABEL_901;
            if (++v778 == 3)
              goto LABEL_900;
            continue;
          }
        }
LABEL_900:
        *v25 = 0;
        v25[1] = 0;
        v25[2] = 0;
LABEL_901:
        v750 = v830;
        if (v830)
        {
          v751 = (unint64_t *)&v830->__shared_owners_;
          do
            v752 = __ldaxr(v751);
          while (__stlxr(v752 - 1, v751));
          if (!v752)
          {
            ((void (*)(std::__shared_weak_count *))v750->__on_zero_shared)(v750);
            std::__shared_weak_count::__release_weak(v750);
          }
        }
        if (v843)
        {
          *(_QWORD *)&v844 = v843;
          operator delete(v843);
        }
        return;
      case 2:
        v851 = (void *)1;
        LODWORD(v852) = 100;
        LOBYTE(v853) = 0;
        v854 = 0;
        LOBYTE(v855) = 0;
        v856 = 0;
        __p = (void *)2;
        LODWORD(v847) = 100;
        BYTE8(v847) = 0;
        v848 = 0;
        LOBYTE(v849) = 0;
        v850 = 0;
        v861[0] = 0;
        v863 = 0;
        v865 = 0;
        v866 = 0;
        v864 = 0;
        v867 = 0.0;
        LODWORD(v857) = v26;
        if (!(_DWORD)v26)
        {
          v276 = 0;
          v279 = 0;
          v65 = 0.0;
          goto LABEL_532;
        }
        v773 = 0;
        v783 = 0;
        v777.i64[0] = 0;
        v64 = 0;
        v65 = 0.0;
        while (1)
        {
          v66 = v857;
          if (v851 > v857)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v66 = v857;
          }
          if (v66)
          {
            v23.i32[0] = (int)v851;
            if ((double)v66 * v24 >= (double)v23.u64[0])
              sub_20EEFC704((uint64_t)v826, (unsigned int *)&v857, (unsigned int *)&v851, (uint64_t)&v868);
            else
              sub_20EEFC500((uint64_t)v826, (unsigned int *)&v857, (unsigned int *)&v851, (int32x4_t **)&v868);
          }
          else
          {
            v869 = 0;
            v868 = 0;
            v870 = 0;
          }
          v67 = (char *)v868;
          v68 = v869;
          memset(v881, 0, 24);
          if (v868 == v869)
          {
            *(double *)v23.i64 = sub_20EEFBDD0((uint64_t)v879, v9, v881, v23, v22);
            if (!v880[20])
              goto LABEL_124;
          }
          else
          {
            v69 = -(((_BYTE *)v868 - v869) >> 2);
            if (v69 >> 61)
              sub_20E867F44();
            v70 = (unint64_t *)operator new(-8 * (((_BYTE *)v868 - v869) >> 2));
            v73 = v70;
            v881[0] = v70;
            v881[2] = &v70[v69];
            v74 = v68 - v67 - 4;
            v75 = v67;
            v76 = v70;
            v9 = v788;
            if (v74 < 0xC)
              goto LABEL_956;
            v77 = (v74 >> 2) + 1;
            v75 = &v67[4 * (v77 & 0x7FFFFFFFFFFFFFFCLL)];
            v76 = &v70[v77 & 0x7FFFFFFFFFFFFFFCLL];
            v78 = (float32x4_t *)(v70 + 2);
            v79 = v67 + 8;
            v80 = v77 & 0x7FFFFFFFFFFFFFFCLL;
            do
            {
              v81 = *(v79 - 1);
              v82.i64[0] = v81;
              v82.i64[1] = HIDWORD(v81);
              v71 = v82;
              v82.i64[0] = *v79;
              v82.i64[1] = HIDWORD(*v79);
              v72 = v82;
              v78[-1] = v71;
              *v78 = v82;
              v78 += 2;
              v79 += 2;
              v80 -= 4;
            }
            while (v80);
            if (v77 != (v77 & 0x7FFFFFFFFFFFFFFCLL))
            {
LABEL_956:
              do
              {
                v83 = *(_DWORD *)v75;
                v75 += 4;
                *v76++ = v83;
              }
              while (v75 != v68);
            }
            v881[1] = v76;
            sub_20EEFBDD0((uint64_t)v879, v788, v881, v71, v72);
            operator delete(v73);
            if (!v880[20])
              goto LABEL_124;
          }
          v90 = 0;
          if (v26)
          {
            v91 = 0;
            v92 = *((float *)&v851 + 1);
            v93 = *(_QWORD *)(v9 + 48);
            v94 = *(_QWORD *)(v9 + 56) - v93;
            v95 = v94 >> 3;
            v23.i32[0] = *(_DWORD *)&v879[20];
            v22.i64[0] = *(_QWORD *)&v879[12];
            v84 = v22;
            v84.i32[2] = *(_DWORD *)&v879[20];
            v96 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v879[12], 1), *(float32x2_t *)&v879[12], 1), *(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32).f32[0];
            v97 = v96 + -1.0;
            if (v96 < 1.0)
              v97 = 1.0 - v96;
            if (v97 <= 0.000001 || v96 == 1.0)
              v99 = -1;
            else
              v99 = 0;
            v100 = *(_QWORD *)(v9 + 16);
            v101 = *(int8x16_t *)&v880[8];
            v22.f32[0] = 1.0 / sqrtf(v96);
            v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0);
            v85 = *(float32x4_t *)v879;
            v86 = vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL);
            v102 = *(_QWORD *)(v9 + 72) - (v94 & 0xFFFFFFFFFFFFFFF8);
            v103 = *(uint64_t **)v9;
            __asm { FMOV            V5.4S, #1.0 }
            v23 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v99), _Q5, (int8x16_t)v22);
            v107 = (int8x16_t)vmulq_f32(v84, v23);
            v108 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v107.i8, 1);
            v109 = (float32x2_t)vextq_s8(v107, v107, 8uLL).u64[0];
            v110 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v879, *(float32x2_t *)v107.i8), v108, *(float32x2_t *)v879, 1), v109, *(float32x2_t *)v86.i8);
            v111 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v880[8], 1);
            v112 = (float32x2_t)vextq_s8(v101, v101, 8uLL).u64[0];
            v113 = 0.0;
            v799 = v107.i64[0];
            v808 = *(_QWORD *)&v880[8];
            v789 = v112;
            v794 = v109;
            do
            {
              if (v95 <= v91)
              {
                v116 = *(_QWORD *)(v102 + 8 * v91);
                v117 = v100 + 112 * v116;
                v22.i32[0] = *(_DWORD *)(v117 + 8);
                v84.i32[0] = *(_DWORD *)(v117 + 32);
                v86.i32[0] = *(_DWORD *)(v117 + 44);
                _Q5.i64[0] = *(_QWORD *)(v117 + 36);
                v88.i32[0] = *(_DWORD *)(v117 + 56);
                v89.i64[0] = *(_QWORD *)(v117 + 48);
                v118 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)(v117 + 24)), v111, *(float32x2_t *)(v117 + 24), 1), *(float32x2_t *)v84.f32, v112);
                *(float32x2_t *)v85.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v89.i8), v111, *(float32x2_t *)v89.i8, 1), *(float32x2_t *)v88.i8, v112);
                *(float32x2_t *)v86.i8 = vmla_f32(vmla_f32(vmul_f32(v118, *(float32x2_t *)v101.i8), v111, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)_Q5.i8), v111, *(float32x2_t *)_Q5.i8, 1), *(float32x2_t *)v86.i8, v112)), v112, *(float32x2_t *)v85.f32);
                *(float32x2_t *)v84.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v117, *(float32x2_t *)v107.i8), v108, *(float32x2_t *)v117, 1), v109, *(float32x2_t *)v22.f32);
                v119 = vsub_f32(*(float32x2_t *)v84.f32, v110);
                *(float32x2_t *)v23.f32 = vmul_f32(v119, v119);
                *(float32x2_t *)v22.f32 = vdiv_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v86.i8);
                v23.i32[0] = 1.0;
                if (v22.f32[0] < 0.25)
                {
                  v120 = v100 + 112 * v116;
                  v22.i32[0] = *(_DWORD *)(v120 + 68);
                  v85.i32[0] = *(_DWORD *)(v120 + 80);
                  v86.i64[0] = *(_QWORD *)(v120 + 72);
                  _Q5.i32[0] = *(_DWORD *)(v120 + 92);
                  v88.i64[0] = *(_QWORD *)(v120 + 84);
                  v89.i64[0] = *(_QWORD *)(v117 + 12);
                  v118.i32[0] = *(_DWORD *)(v117 + 20);
                  *(float32x2_t *)v84.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v88.i8), v111, *(float32x2_t *)v88.i8, 1), *(float32x2_t *)_Q5.i8, v112);
                  *(float32x2_t *)v85.f32 = vmla_f32(vmla_f32(vmul_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)(v120 + 60)), v111, *(float32x2_t *)(v120 + 60), 1), *(float32x2_t *)v22.f32, v112), *(float32x2_t *)v101.i8), v111, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v86.i8), v111, *(float32x2_t *)v86.i8, 1), *(float32x2_t *)v85.f32,
                                                  v112)),
                                              v112,
                                              *(float32x2_t *)v84.f32);
                  v121 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v107.i8), v108, *(float32x2_t *)v89.i8, 1), v109, v118), v110);
                  *(float32x2_t *)v22.f32 = vdiv_f32(vmul_f32(v121, v121), *(float32x2_t *)v85.f32);
                  if (v22.f32[0] < 0.25)
                    v23.i32[0] = -1087278568;
                }
              }
              else
              {
                v114 = *v103 + 52 * *(_QWORD *)(v93 + 8 * v91);
                v22.i32[0] = *(_DWORD *)(v114 + 8);
                v84.i32[0] = *(_DWORD *)(v114 + 20);
                v86.i32[0] = *(_DWORD *)(v114 + 32);
                _Q5.i64[0] = *(_QWORD *)(v114 + 24);
                v88.i32[0] = *(_DWORD *)(v114 + 44);
                v89.i64[0] = *(_QWORD *)(v114 + 36);
                *(float32x2_t *)v85.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v89.i8), v111, *(float32x2_t *)v89.i8, 1), *(float32x2_t *)v88.i8, v112);
                *(float32x2_t *)v86.i8 = vmla_f32(vmla_f32(vmul_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)(v114 + 12)), v111, *(float32x2_t *)(v114 + 12), 1), *(float32x2_t *)v84.f32, v112), *(float32x2_t *)v101.i8), v111, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)_Q5.i8), v111, *(float32x2_t *)_Q5.i8, 1), *(float32x2_t *)v86.i8,
                                               v112)),
                                           v112,
                                           *(float32x2_t *)v85.f32);
                *(float32x2_t *)v84.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v114, *(float32x2_t *)v107.i8), v108, *(float32x2_t *)v114, 1), v109, *(float32x2_t *)v22.f32);
                v115 = vsub_f32(*(float32x2_t *)v84.f32, v110);
                *(float32x2_t *)v23.f32 = vmul_f32(v115, v115);
                *(float32x2_t *)v22.f32 = vdiv_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v86.i8);
                v23.i32[0] = 1.0;
                if (v22.f32[0] < 0.25)
                  v23.i64[0] = 0x8000000080000000;
              }
              if (v23.f32[0] <= v92)
              {
                ++v90;
                v23.f32[0] = expf(-v23.f32[0]);
                v112 = v789;
                v109 = v794;
                v107.i64[0] = v799;
                v101.i64[0] = v808;
                v113 = v113 + v23.f32[0];
              }
              ++v91;
            }
            while (v26 != v91);
          }
          else
          {
            v113 = 0.0;
          }
          v24 = 0.5;
          if (v113 > v65)
          {
            *(_QWORD *)v861 = *(_QWORD *)v879;
            *(_DWORD *)&v861[8] = *(_DWORD *)&v879[8];
            *(_QWORD *)&v861[12] = *(_QWORD *)((unint64_t)v879 | 0xC);
            *(_DWORD *)&v861[20] = *(_DWORD *)(((unint64_t)v879 | 0xC) + 8);
            v23 = *(float32x4_t *)&v879[24];
            v22 = *(float32x4_t *)v880;
            *(_OWORD *)&v861[24] = *(_OWORD *)&v879[24];
            *(_OWORD *)&v861[40] = *(_OWORD *)v880;
            v862 = *(_DWORD *)&v880[16];
            if (v783 != 1)
            {
              v773 = 1;
              v863 = 1;
            }
            v867 = v113;
            if (v854 && v90 >= (unint64_t)v853)
            {
              v122 = 2;
              v783 = 1;
              v65 = v113;
              v777.i64[0] = v90;
              v123 = (char *)v868;
              if (!v868)
                goto LABEL_126;
            }
            else
            {
              v23.f32[0] = v855;
              if (v113 < v855 || v856 == 0)
                v122 = 0;
              else
                v122 = 2;
              v783 = 1;
              v65 = v113;
              v777.i64[0] = v90;
              v123 = (char *)v868;
              if (!v868)
                goto LABEL_126;
            }
LABEL_125:
            v869 = v123;
            operator delete(v123);
            goto LABEL_126;
          }
LABEL_124:
          v122 = 3;
          v123 = (char *)v868;
          if (v868)
            goto LABEL_125;
LABEL_126:
          if ((v122 == 3 || !v122) && ++v64 != 100)
            continue;
          if (v773)
          {
            memset(v879, 0, 24);
            v25 = a7;
            if (v777.i64[0])
            {
              if ((unint64_t)v777.i64[0] >> 61)
                sub_20E867F44();
              v276 = (char *)operator new(8 * v777.i64[0]);
              v277 = &v276[8 * v777.i64[0]];
              v864 = v276;
              v865 = v276;
              v866 = v277;
              if (v26)
              {
LABEL_271:
                v278 = 0;
                v279 = v276;
                while (2)
                {
                  v23.f32[0] = sub_20EEFBFB8(v9, (uint64_t)v861, v278, *(float32x2_t *)v23.f32, v22, (int8x16_t)v84, v85, v86, _Q5, v88, v89);
                  v22.i32[0] = HIDWORD(v851);
                  if (v23.f32[0] > *((float *)&v851 + 1))
                    goto LABEL_274;
                  if (v279 < v277)
                  {
                    *(_QWORD *)v279 = v278;
                    v280 = (uint64_t)(v279 + 8);
                  }
                  else
                  {
                    v281 = (v279 - v276) >> 3;
                    v282 = v281 + 1;
                    if ((unint64_t)(v281 + 1) >> 61)
                      sub_20E867F44();
                    if ((v277 - v276) >> 2 > v282)
                      v282 = (v277 - v276) >> 2;
                    if ((unint64_t)(v277 - v276) >= 0x7FFFFFFFFFFFFFF8)
                      v283 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v283 = v282;
                    if (v283)
                    {
                      if (v283 >> 61)
                        sub_20E877A38();
                      v284 = operator new(8 * v283);
                      v285 = (unint64_t *)&v284[8 * v281];
                      *v285 = v278;
                      v280 = (uint64_t)(v285 + 1);
                      v286 = v279 - v276;
                      if (v279 != v276)
                      {
LABEL_286:
                        v287 = v286 - 8;
                        if (v287 < 0x168
                          || (v290 = (v279 - 8 - v276) & 0xFFFFFFFFFFFFFFF8,
                              &v284[v279 - v276 - 8 - v290] > &v284[v279 - v276 - 8])
                          || &v279[-v290 - 8] > v279 - 8
                          || (unint64_t)(v276 - v284) < 0x20)
                        {
                          v288 = v279;
                          v9 = v788;
                        }
                        else
                        {
                          v291 = (v287 >> 3) + 1;
                          v292 = 8 * (v291 & 0x3FFFFFFFFFFFFFFCLL);
                          v288 = &v279[-v292];
                          v285 = (unint64_t *)((char *)v285 - v292);
                          v293 = (float32x4_t *)&v284[8 * v281 - 16];
                          v294 = (float32x4_t *)(v279 - 16);
                          v295 = v291 & 0x3FFFFFFFFFFFFFFCLL;
                          v9 = v788;
                          do
                          {
                            v22 = v294[-1];
                            v23 = *v294;
                            v293[-1] = v22;
                            *v293 = v23;
                            v293 -= 2;
                            v294 -= 2;
                            v295 -= 4;
                          }
                          while (v295);
                          if (v291 == (v291 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_289:
                            v277 = &v284[8 * v283];
                            v864 = (char *)v285;
                            v865 = (char *)v280;
                            v866 = v277;
                            if (v276)
                              goto LABEL_290;
                            goto LABEL_291;
                          }
                        }
                        do
                        {
                          v289 = *((_QWORD *)v288 - 1);
                          v288 -= 8;
                          *--v285 = v289;
                        }
                        while (v288 != v276);
                        goto LABEL_289;
                      }
                    }
                    else
                    {
                      v284 = 0;
                      v285 = (unint64_t *)(8 * v281);
                      *(_QWORD *)(8 * v281) = v278;
                      v280 = 8 * v281 + 8;
                      v286 = v279 - v276;
                      if (v279 != v276)
                        goto LABEL_286;
                    }
                    v9 = v788;
                    v277 = &v284[8 * v283];
                    v864 = (char *)v285;
                    v865 = (char *)v280;
                    v866 = v277;
                    if (v276)
LABEL_290:
                      operator delete(v276);
LABEL_291:
                    v276 = (char *)v285;
                  }
                  v865 = (char *)v280;
                  v279 = (char *)v280;
                  v25 = a7;
LABEL_274:
                  if (++v278 == v26)
                  {
                    v276 = v864;
                    goto LABEL_420;
                  }
                  continue;
                }
              }
            }
            else
            {
              v277 = 0;
              v276 = 0;
              v864 = 0;
              v865 = 0;
              v866 = 0;
              if (v26)
                goto LABEL_271;
            }
            v279 = v276;
LABEL_420:
            v359 = v861[0];
            *(_QWORD *)v876 = *(_QWORD *)&v861[1];
            *(_DWORD *)&v876[7] = *(_DWORD *)&v861[8];
            v877 = *(_QWORD *)&v861[12];
            v878 = *(_DWORD *)&v861[20];
            v23 = *(float32x4_t *)&v861[24];
            *(_OWORD *)v874 = *(_OWORD *)&v861[24];
            *(_OWORD *)&v874[16] = *(_OWORD *)&v861[40];
            v875 = v862;
          }
          else
          {
            v276 = 0;
            v279 = 0;
            v359 = 0;
            v25 = a7;
          }
          v360 = ((uint64_t)(*(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72)) >> 3)
               + ((uint64_t)(*(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48)) >> 3);
          v861[0] = 0;
          v863 = 0;
          v865 = 0;
          v866 = 0;
          v864 = 0;
          v867 = 0.0;
          v860 = v360;
          v761 = v276;
          if (__p <= v360)
          {
            v361 = v847;
            if ((_DWORD)v847)
            {
              v753 = v359;
              v757 = 0;
              v754 = 0;
              v759 = 0;
              v760 = v847;
              v758 = 0;
              v362 = 0;
              v363 = 0.0;
              v772 = v23.i32[0];
              v770 = v23.i32[0];
              v771 = v23.i32[0];
              v769 = v23.i32[0];
              v767 = v23.i32[0];
              v768 = v23.i32[0];
              v810 = *(float32x2_t *)v23.f32;
              v797 = v23;
              v802 = *(float32x2_t *)v23.f32;
              v762 = v279;
              while (1)
              {
                v364 = v860;
                if (__p > v860)
                {
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    abort();
                  }
                  v364 = v860;
                }
                if (v364)
                {
                  v23.i32[0] = (int)__p;
                  if ((double)v364 * v24 >= (double)v23.u64[0])
                    sub_20EEFC704((uint64_t)v826, &v860, (unsigned int *)&__p, (uint64_t)&v857);
                  else
                    sub_20EEFC500((uint64_t)v826, &v860, (unsigned int *)&__p, (int32x4_t **)&v857);
                }
                else
                {
                  v858 = 0;
                  v857 = 0;
                  v859 = 0;
                }
                v365 = (char *)v857;
                v366 = v858;
                v869 = 0;
                v868 = 0;
                v870 = 0;
                if (v857 == v858)
                {
                  v371 = 0;
                  v368 = 0;
                }
                else
                {
                  if ((unint64_t)-(((_BYTE *)v857 - v858) >> 2) >> 61)
                    sub_20E867F44();
                  v367 = operator new(-8 * (((_BYTE *)v857 - v858) >> 2));
                  v368 = v367;
                  v369 = v366 - v365 - 4;
                  v370 = v365;
                  v371 = v367;
                  if (v369 < 0xC)
                    goto LABEL_957;
                  v372 = (v369 >> 2) + 1;
                  v370 = &v365[4 * (v372 & 0x7FFFFFFFFFFFFFFCLL)];
                  v371 = (_QWORD *)v367 + (v372 & 0x7FFFFFFFFFFFFFFCLL);
                  v373 = v367 + 1;
                  v374 = v365 + 8;
                  v375 = v372 & 0x7FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v376 = *(v374 - 1);
                    *(_QWORD *)&v377 = v376;
                    *((_QWORD *)&v377 + 1) = HIDWORD(v376);
                    v378 = v377;
                    *(_QWORD *)&v377 = *v374;
                    *((_QWORD *)&v377 + 1) = HIDWORD(*v374);
                    *(v373 - 1) = v378;
                    *v373 = v377;
                    v373 += 2;
                    v374 += 2;
                    v375 -= 4;
                  }
                  while (v375);
                  if (v372 != (v372 & 0x7FFFFFFFFFFFFFFCLL))
                  {
LABEL_957:
                    do
                    {
                      v379 = *(_DWORD *)v370;
                      v370 += 4;
                      *v371++ = v379;
                    }
                    while (v370 != v366);
                  }
                }
                sub_20EEFBBC0((void **)v881, v9, (uint64_t)v368, (uint64_t)v371, 2uLL);
                v381.i64[0] = *(unint64_t *)((char *)v881[0] + 12);
                v381.i32[2] = *((_DWORD *)v881[0] + 5);
                v382.i64[0] = *v881[0];
                v382.i32[2] = *((_DWORD *)v881[0] + 2);
                v383 = (int32x4_t)vsubq_f32(v381, v382);
                v384 = vabs_f32(*(float32x2_t *)v383.i8);
                v385 = v384.f32[1] <= 0.000001 && v384.f32[0] <= 0.000001;
                if (!v385)
                  break;
                v386 = (float32x4_t)v777;
                v386.i8[0] = 0;
                v777 = (int8x16_t)v386;
                v881[1] = v881[0];
                operator delete(v881[0]);
                if (v368)
                  goto LABEL_449;
LABEL_450:
                if (!v385)
                {
                  v416 = 0;
                  if (v360)
                  {
                    v417 = 0;
                    v418 = *((float *)&__p + 1);
                    v419 = *(_QWORD *)(v9 + 48);
                    v420 = *(_QWORD *)(v9 + 56) - v419;
                    v421 = v420 >> 3;
                    v390 = (int8x16_t)v775;
                    v422 = (float32x2_t)vextq_s8(v390, v390, 8uLL).u64[0];
                    v423 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v390.i8, *(float32x2_t *)v390.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v775.f32, 1), *(float32x2_t *)v775.f32, 1), v422, v422).f32[0];
                    v424 = v423 + -1.0;
                    if (v423 < 1.0)
                      v424 = 1.0 - v423;
                    if (v424 <= 0.000001 || v423 == 1.0)
                      v426 = -1;
                    else
                      v426 = 0;
                    v427 = *(_QWORD *)(v9 + 16);
                    v422.f32[0] = 1.0 / sqrtf(v423);
                    v387 = (float32x4_t)vdupq_lane_s32((int32x2_t)v422, 0);
                    v391 = v777;
                    v388 = vextq_s8(v391, v391, 8uLL);
                    v428 = *(_QWORD *)(v9 + 72) - (v420 & 0xFFFFFFFFFFFFFFF8);
                    v429 = *(uint64_t **)v9;
                    __asm { FMOV            V3.4S, #1.0 }
                    v430 = (int8x16_t)vmulq_f32(v775, (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v426), (int8x16_t)_Q3, (int8x16_t)v387));
                    v431 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v430.i8, 1);
                    v432 = (float32x2_t)vextq_s8(v430, v430, 8uLL).u64[0];
                    v433 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v430.i8, *(float32x2_t *)v777.i8), v431, *(float32x2_t *)v777.i8, 1), v432, *(float32x2_t *)v388.i8);
                    v434 = 0.0;
                    v792 = v430.i64[0];
                    v786 = v432;
                    do
                    {
                      if (v421 <= v417)
                      {
                        v437 = *(_QWORD *)(v428 + 8 * v417);
                        v438 = v427 + 112 * v437;
                        v387.i32[0] = *(_DWORD *)(v438 + 8);
                        v388.i32[0] = *(_DWORD *)(v438 + 32);
                        v390.i32[0] = *(_DWORD *)(v438 + 44);
                        v391.i64[0] = *(_QWORD *)(v438 + 36);
                        v392.i32[0] = *(_DWORD *)(v438 + 56);
                        v393.i64[0] = *(_QWORD *)(v438 + 48);
                        v439 = vmla_f32(vmla_lane_f32(vmul_f32(v810, *(float32x2_t *)(v438 + 24)), *(float32x2_t *)v797.f32, *(float32x2_t *)(v438 + 24), 1), *(float32x2_t *)v388.i8, v802);
                        *(float32x2_t *)_Q3.f32 = vmla_f32(vmla_lane_f32(vmul_f32(v810, *(float32x2_t *)v393.i8), *(float32x2_t *)v797.f32, *(float32x2_t *)v393.i8, 1), *(float32x2_t *)v392.i8, v802);
                        *(float32x2_t *)v390.i8 = vmla_f32(vmla_f32(vmul_f32(v439, v810), *(float32x2_t *)v797.f32, vmla_f32(vmla_lane_f32(vmul_f32(v810, *(float32x2_t *)v391.i8), *(float32x2_t *)v797.f32, *(float32x2_t *)v391.i8, 1), *(float32x2_t *)v390.i8, v802)), v802, *(float32x2_t *)_Q3.f32);
                        *(float32x2_t *)v388.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v438, *(float32x2_t *)v430.i8), v431, *(float32x2_t *)v438, 1), v432, *(float32x2_t *)v387.f32);
                        v440 = vsub_f32(*(float32x2_t *)v388.i8, v433);
                        *(float32x2_t *)v23.f32 = vmul_f32(v440, v440);
                        *(float32x2_t *)v387.f32 = vdiv_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v390.i8);
                        v23.i32[0] = 1.0;
                        if (v387.f32[0] < 0.25)
                        {
                          v441 = v427 + 112 * v437;
                          v387.i32[0] = *(_DWORD *)(v441 + 68);
                          _Q3.i32[0] = *(_DWORD *)(v441 + 80);
                          v390.i64[0] = *(_QWORD *)(v441 + 72);
                          v391.i32[0] = *(_DWORD *)(v441 + 92);
                          v392.i64[0] = *(_QWORD *)(v441 + 84);
                          v393.i64[0] = *(_QWORD *)(v438 + 12);
                          v439.i32[0] = *(_DWORD *)(v438 + 20);
                          *(float32x2_t *)v388.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v810, *(float32x2_t *)v392.i8), *(float32x2_t *)v797.f32, *(float32x2_t *)v392.i8, 1), *(float32x2_t *)v391.i8, v802);
                          *(float32x2_t *)_Q3.f32 = vmla_f32(vmla_f32(vmul_f32(vmla_f32(vmla_lane_f32(vmul_f32(v810, *(float32x2_t *)(v441 + 60)), *(float32x2_t *)v797.f32, *(float32x2_t *)(v441 + 60), 1), *(float32x2_t *)v387.f32, v802), v810), *(float32x2_t *)v797.f32, vmla_f32(vmla_lane_f32(vmul_f32(v810, *(float32x2_t *)v390.i8), *(float32x2_t *)v797.f32, *(float32x2_t *)v390.i8, 1), *(float32x2_t *)_Q3.f32,
                                                          v802)),
                                                      v802,
                                                      *(float32x2_t *)v388.i8);
                          v442 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v393.i8, *(float32x2_t *)v430.i8), v431, *(float32x2_t *)v393.i8, 1), v432, v439), v433);
                          *(float32x2_t *)v387.f32 = vdiv_f32(vmul_f32(v442, v442), *(float32x2_t *)_Q3.f32);
                          if (v387.f32[0] < 0.25)
                            v23.i32[0] = -1087278568;
                        }
                      }
                      else
                      {
                        v435 = *v429 + 52 * *(_QWORD *)(v419 + 8 * v417);
                        v387.i32[0] = *(_DWORD *)(v435 + 8);
                        v388.i32[0] = *(_DWORD *)(v435 + 20);
                        v390.i32[0] = *(_DWORD *)(v435 + 32);
                        v391.i64[0] = *(_QWORD *)(v435 + 24);
                        v392.i32[0] = *(_DWORD *)(v435 + 44);
                        v393.i64[0] = *(_QWORD *)(v435 + 36);
                        *(float32x2_t *)_Q3.f32 = vmla_f32(vmla_lane_f32(vmul_f32(v810, *(float32x2_t *)v393.i8), *(float32x2_t *)v797.f32, *(float32x2_t *)v393.i8, 1), *(float32x2_t *)v392.i8, v802);
                        *(float32x2_t *)v390.i8 = vmla_f32(vmla_f32(vmul_f32(vmla_f32(vmla_lane_f32(vmul_f32(v810, *(float32x2_t *)(v435 + 12)), *(float32x2_t *)v797.f32, *(float32x2_t *)(v435 + 12), 1), *(float32x2_t *)v388.i8, v802), v810), *(float32x2_t *)v797.f32, vmla_f32(vmla_lane_f32(vmul_f32(v810, *(float32x2_t *)v391.i8), *(float32x2_t *)v797.f32, *(float32x2_t *)v391.i8, 1), *(float32x2_t *)v390.i8,
                                                        v802)),
                                                    v802,
                                                    *(float32x2_t *)_Q3.f32);
                        *(float32x2_t *)v388.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v435, *(float32x2_t *)v430.i8), v431, *(float32x2_t *)v435, 1), v432, *(float32x2_t *)v387.f32);
                        v436 = vsub_f32(*(float32x2_t *)v388.i8, v433);
                        *(float32x2_t *)v23.f32 = vmul_f32(v436, v436);
                        *(float32x2_t *)v387.f32 = vdiv_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v390.i8);
                        v23.i32[0] = 1.0;
                        if (v387.f32[0] < 0.25)
                          v23.i64[0] = 0x8000000080000000;
                      }
                      if (v23.f32[0] <= v418)
                      {
                        ++v416;
                        v23.f32[0] = expf(-v23.f32[0]);
                        v432 = v786;
                        v430.i64[0] = v792;
                        v434 = v434 + v23.f32[0];
                      }
                      ++v417;
                    }
                    while (v360 != v417);
                  }
                  else
                  {
                    v434 = 0.0;
                  }
                  if (v434 <= v363)
                  {
                    v414 = 3;
                    v24 = 0.5;
                    v276 = v761;
                    v279 = v762;
                    v361 = v760;
                    v415 = (char *)v857;
                    if (!v857)
                      goto LABEL_453;
                  }
                  else
                  {
                    v361 = v760;
                    v24 = 0.5;
                    v276 = v761;
                    v279 = v762;
                    if (v759 != 1)
                    {
                      v754 = 1;
                      v863 = 1;
                    }
                    v757 = v777.i8[0];
                    *(_DWORD *)&v861[8] = v777.i32[2];
                    *(_QWORD *)v861 = v777.i64[0];
                    *(_DWORD *)&v861[20] = v775.i32[2];
                    *(_QWORD *)&v861[12] = v775.i64[0];
                    *(_QWORD *)&v443 = __PAIR64__(v770, v772);
                    *((_QWORD *)&v443 + 1) = __PAIR64__(v769, v771);
                    *(_OWORD *)&v861[24] = v443;
                    *(_QWORD *)&v443 = __PAIR64__(v768, v767);
                    v23.i64[1] = __PAIR64__(v797.u32[0], v810.u32[0]);
                    v387 = v797;
                    *(float32x4_t *)&v861[40] = v23;
                    *(float32x2_t *)v23.f32 = v802;
                    v862 = v802.i32[0];
                    v867 = v434;
                    if (v848 && v416 >= *((_QWORD *)&v847 + 1))
                    {
                      v414 = 2;
                      v759 = 1;
                      v363 = v434;
                      v758 = v416;
                      v415 = (char *)v857;
                      if (!v857)
                        goto LABEL_453;
                    }
                    else
                    {
                      v23.f32[0] = v849;
                      if (v434 < v849 || v850 == 0)
                        v414 = 0;
                      else
                        v414 = 2;
                      v759 = 1;
                      v363 = v434;
                      v758 = v416;
                      v415 = (char *)v857;
                      if (!v857)
                        goto LABEL_453;
                    }
                  }
LABEL_452:
                  v858 = v415;
                  operator delete(v415);
                  goto LABEL_453;
                }
                v414 = 3;
                v415 = (char *)v857;
                if (v857)
                  goto LABEL_452;
LABEL_453:
                if ((v414 == 3 || !v414) && ++v362 != v361)
                  continue;
                v25 = a7;
                v359 = v753;
                if (!v754)
                  goto LABEL_528;
                memset(v881, 0, 24);
                if (v758)
                {
                  if (v758 >> 61)
                    sub_20E867F44();
                  v445 = (char *)operator new(8 * v758);
                  v446 = &v445[8 * v758];
                  v864 = v445;
                  v865 = v445;
                  v866 = v446;
                  if (v360)
                  {
LABEL_497:
                    v447 = 0;
                    v448 = v445;
                    while (2)
                    {
                      v23.f32[0] = sub_20EEFBFB8(v9, (uint64_t)v861, v447, *(float32x2_t *)v23.f32, v387, v388, _Q3, v390, v391, v392, v393);
                      v387.i32[0] = HIDWORD(__p);
                      if (v23.f32[0] > *((float *)&__p + 1))
                        goto LABEL_500;
                      if (v448 < v446)
                      {
                        *(_QWORD *)v448 = v447;
                        v449 = (uint64_t)(v448 + 8);
                      }
                      else
                      {
                        v450 = (v448 - v445) >> 3;
                        v451 = v450 + 1;
                        if ((unint64_t)(v450 + 1) >> 61)
                          sub_20E867F44();
                        if ((v446 - v445) >> 2 > v451)
                          v451 = (v446 - v445) >> 2;
                        if ((unint64_t)(v446 - v445) >= 0x7FFFFFFFFFFFFFF8)
                          v452 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v452 = v451;
                        if (v452)
                        {
                          if (v452 >> 61)
                            sub_20E877A38();
                          v453 = operator new(8 * v452);
                          v454 = (unint64_t *)&v453[8 * v450];
                          *v454 = v447;
                          v449 = (uint64_t)(v454 + 1);
                          v455 = v448 - v445;
                          if (v448 != v445)
                          {
LABEL_512:
                            v456 = v455 - 8;
                            if (v456 < 0x168
                              || (v459 = (v448 - 8 - v445) & 0xFFFFFFFFFFFFFFF8,
                                  &v453[v448 - v445 - 8 - v459] > &v453[v448 - v445 - 8])
                              || &v448[-v459 - 8] > v448 - 8
                              || (unint64_t)(v445 - v453) < 0x20)
                            {
                              v457 = v448;
                              v9 = v788;
                              v279 = v762;
                            }
                            else
                            {
                              v460 = (v456 >> 3) + 1;
                              v461 = 8 * (v460 & 0x3FFFFFFFFFFFFFFCLL);
                              v457 = &v448[-v461];
                              v454 = (unint64_t *)((char *)v454 - v461);
                              v462 = (float32x4_t *)&v453[8 * v450 - 16];
                              v463 = (float32x4_t *)(v448 - 16);
                              v464 = v460 & 0x3FFFFFFFFFFFFFFCLL;
                              v9 = v788;
                              do
                              {
                                v387 = v463[-1];
                                v23 = *v463;
                                v462[-1] = v387;
                                *v462 = v23;
                                v462 -= 2;
                                v463 -= 2;
                                v464 -= 4;
                              }
                              while (v464);
                              v279 = v762;
                              if (v460 == (v460 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_515:
                                v446 = &v453[8 * v452];
                                v864 = (char *)v454;
                                v866 = v446;
                                if (v445)
                                  goto LABEL_516;
                                goto LABEL_517;
                              }
                            }
                            do
                            {
                              v458 = *((_QWORD *)v457 - 1);
                              v457 -= 8;
                              *--v454 = v458;
                            }
                            while (v457 != v445);
                            goto LABEL_515;
                          }
                        }
                        else
                        {
                          v453 = 0;
                          v454 = (unint64_t *)(8 * v450);
                          *(_QWORD *)(8 * v450) = v447;
                          v449 = 8 * v450 + 8;
                          v455 = v448 - v445;
                          if (v448 != v445)
                            goto LABEL_512;
                        }
                        v9 = v788;
                        v279 = v762;
                        v446 = &v453[8 * v452];
                        v864 = (char *)v454;
                        v866 = v446;
                        if (v445)
LABEL_516:
                          operator delete(v445);
LABEL_517:
                        v445 = (char *)v454;
                      }
                      v865 = (char *)v449;
                      v448 = (char *)v449;
LABEL_500:
                      if (++v447 == v360)
                      {
                        v468 = v861[0];
                        v359 = v753;
                        goto LABEL_856;
                      }
                      continue;
                    }
                  }
                }
                else
                {
                  v446 = 0;
                  v445 = 0;
                  v864 = 0;
                  v865 = 0;
                  v866 = 0;
                  if (v360)
                    goto LABEL_497;
                }
                v448 = v445;
                v468 = v757;
LABEL_856:
                *(_QWORD *)v871 = *(_QWORD *)&v861[1];
                *(_DWORD *)&v871[7] = *(_DWORD *)&v861[8];
                v872 = *v776;
                v873 = *(_DWORD *)(((unint64_t)v861 | 0xC) + 8);
                *(_OWORD *)v879 = *(_OWORD *)&v861[24];
                *(_OWORD *)&v879[16] = *(_OWORD *)&v861[40];
                *(_DWORD *)&v879[32] = v862;
                if (v773)
                {
                  if (v276 == v279)
                  {
                    v708 = 0;
                  }
                  else
                  {
                    v702 = (uint64_t)(*(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48)) >> 3;
                    v703 = v279 - v276 - 8;
                    if (v703 < 0x38)
                    {
                      v704 = 0;
                      v705 = (unint64_t *)v276;
                      goto LABEL_867;
                    }
                    v709 = (v703 >> 3) + 1;
                    v705 = (unint64_t *)&v276[8 * (v709 & 0x3FFFFFFFFFFFFFF8)];
                    v710 = (uint64x2_t)vdupq_n_s64(v702);
                    v711 = (uint64x2_t *)(v276 + 32);
                    v712 = 0uLL;
                    v713 = v709 & 0x3FFFFFFFFFFFFFF8;
                    v714 = 0uLL;
                    v715.i64[0] = 0x200000002;
                    v715.i64[1] = 0x200000002;
                    do
                    {
                      v716 = v711[-2];
                      v717 = v711[-1];
                      v718 = *v711;
                      v719 = v711[1];
                      v711 += 4;
                      v720 = vuzp1q_s32((int32x4_t)vcgtq_u64(v710, v716), (int32x4_t)vcgtq_u64(v710, v717));
                      v721 = vuzp1q_s32((int32x4_t)vcgtq_u64(v710, v718), (int32x4_t)vcgtq_u64(v710, v719));
                      v712 = vaddq_s32(vsubq_s32((int32x4_t)vbicq_s8(v715, (int8x16_t)v720), v720), v712);
                      v714 = vaddq_s32(vsubq_s32((int32x4_t)vbicq_s8(v715, (int8x16_t)v721), v721), v714);
                      v713 -= 8;
                    }
                    while (v713);
                    v704 = vaddvq_s32(vaddq_s32(v714, v712));
                    if (v709 != (v709 & 0x3FFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_867:
                        v722 = *v705++;
                        if (v702 > v722)
                          v723 = 1;
                        else
                          v723 = 2;
                        v704 += v723;
                      }
                      while (v705 != (unint64_t *)v279);
                    }
                    v708 = v704;
                  }
                  if (v445 == v448)
                  {
                    v728 = 0;
                  }
                  else
                  {
                    v724 = (uint64_t)(*(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48)) >> 3;
                    v725 = v448 - v445 - 8;
                    if (v725 < 0x38)
                    {
                      v726 = 0;
                      v727 = (unint64_t *)v445;
                      goto LABEL_879;
                    }
                    v729 = (v725 >> 3) + 1;
                    v727 = (unint64_t *)&v445[8 * (v729 & 0x3FFFFFFFFFFFFFF8)];
                    v730 = (uint64x2_t)vdupq_n_s64(v724);
                    v731 = (uint64x2_t *)(v445 + 32);
                    v732 = 0uLL;
                    v733 = v729 & 0x3FFFFFFFFFFFFFF8;
                    v734 = 0uLL;
                    v735.i64[0] = 0x200000002;
                    v735.i64[1] = 0x200000002;
                    do
                    {
                      v736 = v731[-2];
                      v737 = v731[-1];
                      v738 = *v731;
                      v739 = v731[1];
                      v731 += 4;
                      v740 = vuzp1q_s32((int32x4_t)vcgtq_u64(v730, v736), (int32x4_t)vcgtq_u64(v730, v737));
                      v741 = vuzp1q_s32((int32x4_t)vcgtq_u64(v730, v738), (int32x4_t)vcgtq_u64(v730, v739));
                      v732 = vaddq_s32(vsubq_s32((int32x4_t)vbicq_s8(v735, (int8x16_t)v740), v740), v732);
                      v734 = vaddq_s32(vsubq_s32((int32x4_t)vbicq_s8(v735, (int8x16_t)v741), v741), v734);
                      v733 -= 8;
                    }
                    while (v733);
                    v726 = vaddvq_s32(vaddq_s32(v734, v732));
                    if (v729 != (v729 & 0x3FFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_879:
                        v742 = *v727++;
                        if (v724 > v742)
                          v743 = 1;
                        else
                          v743 = 2;
                        v726 += v743;
                      }
                      while (v727 != (unint64_t *)v448);
                    }
                    v728 = v726;
                  }
                  if (v708 < v728)
                  {
                    v817[0] = v468;
                    *(_QWORD *)&v817[1] = *(_QWORD *)v871;
                    *(_DWORD *)&v817[8] = *(_DWORD *)&v871[7];
                    *(_QWORD *)&v817[12] = v872;
                    *(_DWORD *)&v817[20] = v873;
                    *(_OWORD *)&v817[24] = *(_OWORD *)v879;
                    v818 = *(_OWORD *)&v879[16];
                    v819 = *(_DWORD *)&v879[32];
                    v706 = 1;
                    v820 = 1;
                    __src = 0;
                    *(_QWORD *)v822 = 0;
                    v823 = 0;
                    v707 = v448 - v445;
                    if (v448 != v445)
                    {
                      if (v707 < 0)
                        sub_20E867F44();
                      goto LABEL_887;
                    }
LABEL_892:
                    v25 = a7;
                    v824 = v363;
                    v825 = v706;
                    if (v445)
LABEL_893:
                      operator delete(v445);
LABEL_536:
                    if (v276)
                      operator delete(v276);
                    if (v842 == v820)
                    {
                      if (v842)
                      {
                        *(_QWORD *)v837 = *(_QWORD *)v817;
                        *(_DWORD *)&v837[8] = *(_DWORD *)&v817[8];
                        *v764 = *(_QWORD *)&v817[12];
                        *(_DWORD *)(((unint64_t)v837 | 0xC) + 8) = *(_DWORD *)&v817[20];
                        v839 = *(_OWORD *)&v817[24];
                        v840 = v818;
                        v841 = v819;
                      }
                    }
                    else if (v842)
                    {
                      v842 = 0;
                    }
                    else
                    {
                      *(_QWORD *)v837 = *(_QWORD *)v817;
                      *(_DWORD *)&v837[8] = *(_DWORD *)&v817[8];
                      *v764 = *(_QWORD *)&v817[12];
                      *(_DWORD *)(((unint64_t)v837 | 0xC) + 8) = *(_DWORD *)&v817[20];
                      v839 = *(_OWORD *)&v817[24];
                      v840 = v818;
                      v841 = v819;
                      v842 = 1;
                    }
                    sub_20E86811C(&v843, (char *)__src, *(char **)v822, (uint64_t)(*(_QWORD *)v822 - (_QWORD)__src) >> 3);
                    v845 = v824;
                    v782 = v825;
                    if (__src)
                    {
                      *(_QWORD *)v822 = __src;
                      operator delete(__src);
                    }
                    goto LABEL_579;
                  }
                  v817[0] = v359;
                  *(_QWORD *)&v817[1] = *(_QWORD *)v876;
                  *(_DWORD *)&v817[8] = *(_DWORD *)&v876[7];
                  *(_QWORD *)&v817[12] = v877;
                  *(_DWORD *)&v817[20] = v878;
                  *(_OWORD *)&v817[24] = *(_OWORD *)v874;
                  v818 = *(_OWORD *)&v874[16];
                  v819 = v875;
                  v820 = 1;
                  __src = 0;
                  *(_QWORD *)v822 = 0;
                  v823 = 0;
                  v746 = v279 - v276;
                  v25 = a7;
                  if (v279 == v276)
                  {
                    v824 = v65;
                    v825 = 0;
                    if (v445)
                      goto LABEL_893;
                    goto LABEL_536;
                  }
                  if (v746 < 0)
                    sub_20E867F44();
                  v747 = (char *)operator new(v279 - v276);
                  v745 = &v747[8 * (v746 >> 3)];
                  __src = v747;
                  v823 = v745;
                  memcpy(v747, v276, v279 - v276);
                  v706 = 0;
                  v363 = v65;
                }
                else
                {
                  v817[0] = v468;
                  *(_QWORD *)&v817[1] = *(_QWORD *)v871;
                  *(_DWORD *)&v817[8] = *(_DWORD *)&v871[7];
                  *(_QWORD *)&v817[12] = v872;
                  *(_DWORD *)&v817[20] = v873;
                  *(_OWORD *)&v817[24] = *(_OWORD *)v879;
                  v818 = *(_OWORD *)&v879[16];
                  v819 = *(_DWORD *)&v879[32];
                  v706 = 1;
                  v820 = 1;
                  __src = 0;
                  *(_QWORD *)v822 = 0;
                  v823 = 0;
                  v707 = v448 - v445;
                  if (v448 == v445)
                    goto LABEL_892;
                  if (v707 < 0)
                    sub_20E867F44();
LABEL_887:
                  v744 = (char *)operator new(v448 - v445);
                  v745 = &v744[8 * (v707 >> 3)];
                  __src = v744;
                  v823 = v745;
                  memcpy(v744, v445, v707);
                  v706 = 1;
                }
                *(_QWORD *)v822 = v745;
                goto LABEL_892;
              }
              *(float32x2_t *)v383.i8 = vmul_n_f32(*(float32x2_t *)v383.i8, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(*(float32x2_t *)v383.i8, *(float32x2_t *)v383.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v383.i8, 1), *(float32x2_t *)v383.i8, 1).f32[0]));
              v394 = vaddq_f32(v381, v382);
              *(float *)&v395 = -*(float *)&v383.i32[1];
              v396 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-*(float *)&v383.i32[1]), v383);
              HIDWORD(v395) = v383.i32[0];
              v775 = (float32x4_t)v395;
              v397.i64[0] = 0x3F0000003F000000;
              v397.i64[1] = 0x3F0000003F000000;
              v777 = (int8x16_t)vmulq_f32(v394, v397);
              v398 = vcvt_hight_f64_f32(v396);
              v399 = vcvtq_f64_f32(*(float32x2_t *)v396.f32);
              v400 = (float64x2_t)*(unint64_t *)&v398.f64[0];
              _Q3 = (float64x2_t)vextq_s8((int8x16_t)v399, (int8x16_t)v398, 8uLL);
              v398.f64[1] = v399.f64[0];
              v380.f64[0] = -0.0;
              _Q5 = vmlaq_f64(vmulq_f64(v398, (float64x2_t)xmmword_210389940), _Q3, (float64x2_t)xmmword_21030D320);
              v403 = vmlaq_f64(vmulq_laneq_f64(v380, v399, 1), v399, (float64x2_t)0);
              _Q4 = vmulq_f64(_Q5, _Q5);
              _Q7.f64[0] = _Q5.f64[1];
              __asm { FMLA            D4, D7, V5.D[1] }
              _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v403.f64[0], v403.f64[0]));
              v406 = vmulq_f64(v403, _Q4);
              v407 = vmulq_n_f64(_Q5, _Q4.f64[0]);
              v408 = (float64x2_t)vextq_s8((int8x16_t)v407, (int8x16_t)v406, 8uLL);
              _Q7 = (float64x2_t)*(unint64_t *)&_Q7.f64[0];
              _Q7.f64[0] = v406.f64[0];
              v406.f64[1] = v407.f64[0];
              _Q1 = vmlsq_f64(vmulq_f64(v398, v408), _Q3, v406);
              v410 = vmlsq_laneq_f64(vmulq_laneq_f64(v407, v399, 1), v399, v407, 1);
              _Q0 = vmulq_f64(_Q1, _Q1);
              _Q3.f64[0] = _Q1.f64[1];
              __asm { FMLA            D0, D3, V1.D[1] }
              _Q0.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q0.f64[0], v410.f64[0], v410.f64[0]));
              v412 = vmulq_n_f64(_Q1, _Q0.f64[0]);
              v413 = (float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(v410, _Q0);
              v771 = vcvt_f32_f64(v413).u32[0];
              *(float32x2_t *)&v413.f64[0] = vcvt_f32_f64(v412);
              v768 = vcvt_f32_f64(_Q7).u32[0];
              *(float32x2_t *)&v412.f64[0] = vcvt_f32_f64(v407);
              v802 = vcvt_f32_f64(v400);
              v810 = *(float32x2_t *)v396.f32;
              v772 = LODWORD(v413.f64[0]);
              v769 = LODWORD(v412.f64[0]);
              v770 = HIDWORD(v413.f64[0]);
              v767 = HIDWORD(v412.f64[0]);
              LODWORD(v413.f64[0]) = v396.i32[1];
              v797 = (float32x4_t)v413;
              v881[1] = v881[0];
              operator delete(v881[0]);
              if (!v368)
                goto LABEL_450;
LABEL_449:
              operator delete(v368);
              goto LABEL_450;
            }
          }
LABEL_528:
          if (v773)
          {
            v817[0] = v359;
            *(_QWORD *)&v817[1] = *(_QWORD *)v876;
            *(_DWORD *)&v817[8] = *(_DWORD *)&v876[7];
            *(_QWORD *)&v817[12] = v877;
            *(_DWORD *)&v817[20] = v878;
            *(_OWORD *)&v817[24] = *(_OWORD *)v874;
            v818 = *(_OWORD *)&v874[16];
            v819 = v875;
            v820 = 1;
            __src = 0;
            *(_QWORD *)v822 = 0;
            v823 = 0;
            v465 = v279 - v276;
            if (v279 != v276)
            {
              if (v465 < 0)
                sub_20E867F44();
              goto LABEL_534;
            }
            goto LABEL_535;
          }
LABEL_532:
          v817[0] = 0;
          v820 = 0;
          *(_QWORD *)v822 = 0;
          v823 = 0;
          __src = 0;
          v465 = v279 - v276;
          if (v279 != v276)
          {
            if (v465 < 0)
              sub_20E867F44();
LABEL_534:
            v466 = (char *)operator new(v279 - v276);
            v467 = &v466[8 * (v465 >> 3)];
            __src = v466;
            v823 = v467;
            memcpy(v466, v276, v465);
            *(_QWORD *)v822 = v467;
            v25 = a7;
          }
LABEL_535:
          v824 = v65;
          v825 = 0;
          goto LABEL_536;
        }
      case 3:
        v817[0] = 0;
        v820 = 0;
        *(_QWORD *)v822 = 0;
        v823 = 0;
        __src = 0;
        v824 = 0.0;
        LODWORD(v868) = v26;
        v27 = 0.0;
        if (v831 > v26 || (v125 = HIDWORD(v832)) == 0)
        {
          v270 = 0;
          v271 = 0;
          v272 = 0;
          v273 = 0;
          v274 = v842;
          if (!v842)
            goto LABEL_264;
          goto LABEL_562;
        }
        v809 = 0;
        v126 = 0;
        v127 = 0;
        v128 = 0;
        while (1)
        {
          v129 = v868;
          if (v831 > v868)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v129 = v868;
          }
          if (v129)
          {
            v23.i32[0] = v831;
            if ((double)v129 * v24 >= (double)v23.u64[0])
              sub_20EEFC704((uint64_t)v826, (unsigned int *)&v868, &v831, (uint64_t)v874);
            else
              sub_20EEFC500((uint64_t)v826, (unsigned int *)&v868, &v831, (int32x4_t **)v874);
          }
          else
          {
            memset(v874, 0, 24);
          }
          v130 = *(_QWORD *)v874;
          v131 = *(unsigned int **)&v874[8];
          v847 = 0uLL;
          __p = 0;
          if (*(_QWORD *)v874 == *(_QWORD *)&v874[8])
          {
            v137 = 0;
            v134 = 0;
          }
          else
          {
            v132 = -((uint64_t)(*(_QWORD *)v874 - *(_QWORD *)&v874[8]) >> 2);
            if (v132 >> 61)
              sub_20E867F44();
            v133 = operator new(-8 * ((uint64_t)(*(_QWORD *)v874 - *(_QWORD *)&v874[8]) >> 2));
            v134 = v133;
            __p = v133;
            *((_QWORD *)&v847 + 1) = (char *)v133 + 8 * v132;
            v135 = (unint64_t)v131 - v130 - 4;
            v136 = (unsigned int *)v130;
            v137 = v133;
            if (v135 < 0xC)
              goto LABEL_958;
            v138 = (v135 >> 2) + 1;
            v136 = (unsigned int *)(v130 + 4 * (v138 & 0x7FFFFFFFFFFFFFFCLL));
            v137 = (_QWORD *)v133 + (v138 & 0x7FFFFFFFFFFFFFFCLL);
            v139 = v133 + 1;
            v140 = (_QWORD *)(v130 + 8);
            v141 = v138 & 0x7FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *(v140 - 1);
              *(_QWORD *)&v143 = v142;
              *((_QWORD *)&v143 + 1) = HIDWORD(v142);
              v144 = v143;
              *(_QWORD *)&v143 = *v140;
              *((_QWORD *)&v143 + 1) = HIDWORD(*v140);
              *(v139 - 1) = v144;
              *v139 = v143;
              v139 += 2;
              v140 += 2;
              v141 -= 4;
            }
            while (v141);
            if (v138 != (v138 & 0x7FFFFFFFFFFFFFFCLL))
            {
LABEL_958:
              do
              {
                v145 = *v136++;
                *v137++ = v145;
              }
              while (v136 != v131);
            }
            *(_QWORD *)&v847 = v137;
          }
          sub_20EEFBBC0(&v851, v9, (uint64_t)v134, (uint64_t)v137, 3uLL);
          v146 = (void **)v851;
          v147.i64[0] = *(_QWORD *)((char *)v851 + 12);
          v147.i32[2] = *((_DWORD *)v851 + 5);
          v148.i64[0] = *(_QWORD *)v851;
          v148.i32[2] = *((_DWORD *)v851 + 2);
          v149.i64[0] = *((_QWORD *)v851 + 3);
          v149.i32[2] = *((_DWORD *)v851 + 8);
          v150 = (int8x16_t)vabdq_f32(v147, v148);
          v151 = (float32x2_t)vdup_n_s32(0x358637BDu);
          if (*(float *)v150.i32 <= 0.000001)
          {
            v150.i32[0] = vextq_s8(v150, v150, 8uLL).u32[0];
            *(int32x2_t *)v150.i8 = vcge_f32(v151, *(float32x2_t *)v150.i8);
            if ((v150.i8[4] & 1) != 0 && (v150.i8[0] & 1) != 0)
              break;
          }
          v152 = vsubq_f32(v149, v148);
          v153 = (int8x16_t)vabsq_f32(v152);
          if (*(float *)v153.i32 <= 0.000001)
          {
            v153.i32[0] = vextq_s8(v153, v153, 8uLL).u32[0];
            v154 = vcge_f32(v151, *(float32x2_t *)v153.i8);
            if ((v154.i8[4] & 1) != 0 && (v154.i8[0] & 1) != 0)
              break;
          }
          v155 = (int32x4_t)vsubq_f32(v147, v148);
          v156 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v155.i8, 1);
          v157 = (float32x2_t)vextq_s8((int8x16_t)v155, (int8x16_t)v155, 8uLL).u64[0];
          v156.f32[0] = 1.0
                      / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v155.i8, *(float32x2_t *)v155.i8), v156, *(float32x2_t *)v155.i8, 1), v157, v157).f32[0]);
          v158 = (float32x2_t)vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u64[0];
          v159 = (int8x16_t)vmulq_n_f32(v152, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v152.f32, *(float32x2_t *)v152.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v152.f32, 1), *(float32x2_t *)v152.f32, 1), v158, v158).f32[0]));
          if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(vmul_f32(*(float32x2_t *)v155.i8, v156), *(float32x2_t *)v159.i8), vmul_lane_f32(v156, *(float32x2_t *)v155.i8, 1), *(float32x2_t *)v159.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v159, v159, 8uLL), vmul_f32(v157, v156)).f32[0]) > 0.99985)break;
          v175 = atomic_load((unsigned __int8 *)&qword_254A516F8);
          if ((v175 & 1) == 0)
          {
            v795 = v148;
            v800 = v147;
            v790 = v149;
            v784 = v152;
            v777 = (int8x16_t)v155;
            v209 = __cxa_guard_acquire(&qword_254A516F8);
            v155 = (int32x4_t)v777;
            v152 = v784;
            v149 = v790;
            v148 = v795;
            v147 = v800;
            if (v209)
            {
              dword_254A516F0 = 1065098332;
              __cxa_guard_release(&qword_254A516F8);
              v155 = (int32x4_t)v777;
              v152 = v784;
              v149 = v790;
              v148 = v795;
              v147 = v800;
            }
          }
          v176 = atomic_load((unsigned __int8 *)&qword_254A51708);
          if ((v176 & 1) == 0)
          {
            v796 = v148;
            v801 = v147;
            v791 = v149;
            v785 = v152;
            v777 = (int8x16_t)v155;
            v210 = __cxa_guard_acquire(&qword_254A51708);
            v155 = (int32x4_t)v777;
            v152 = v785;
            v149 = v791;
            v148 = v796;
            v147 = v801;
            if (v210)
            {
              dword_254A51700 = 1043452119;
              __cxa_guard_release(&qword_254A51708);
              v155 = (int32x4_t)v777;
              v152 = v785;
              v149 = v791;
              v148 = v796;
              v147 = v801;
            }
          }
          v177 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v155, (int8x16_t)v155, 0xCuLL), (int8x16_t)v155, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v152, (int32x4_t)v152), (int8x16_t)v152, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v155, v155), (int8x16_t)v155, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v152, (int8x16_t)v152, 0xCuLL), (int8x16_t)v152, 8uLL));
          v178 = (float32x2_t)vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL).u64[0];
          v23 = vmulq_n_f32(v177, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v177.f32, *(float32x2_t *)v177.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v177.f32, 1), *(float32x2_t *)v177.f32, 1), v178, v178).f32[0]));
          __asm { FMOV            V2.4S, #3.0 }
          v161 = vdivq_f32(vaddq_f32(v149, vaddq_f32(v147, v148)), _Q2);
          v180 = vcvt_hight_f64_f32(v23);
          v181 = vcvtq_f64_f32(*(float32x2_t *)v23.f32);
          v182 = (float64x2_t)vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL);
          if (fabsf(v23.f32[2]) >= *(float *)&dword_254A516F0)
          {
            v197.f64[0] = v181.f64[0];
            v197.f64[1] = v182.f64[0];
            v198 = (int64x2_t)vmulq_f64(v197, (float64x2_t)0);
            _Q17.f64[0] = v180.f64[0];
            *(_QWORD *)&_Q17.f64[1] = v198.i64[0];
            v200 = vmulq_f64(v197, (float64x2_t)xmmword_21030D320);
            v201 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v198, 1), v200);
            _Q5 = vsubq_f64(_Q17, (float64x2_t)vextq_s8((int8x16_t)v200, (int8x16_t)vmulq_f64(v180, (float64x2_t)0), 8uLL));
            _Q6 = vmulq_f64(_Q5, _Q5);
            _D16 = _Q5.f64[1];
            __asm { FMLA            D6, D16, V5.D[1] }
            _Q6.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q6.f64[0], v201.f64[0], v201.f64[0]));
            v193 = vmulq_n_f64(_Q5, _Q6.f64[0]);
            _Q6 = vmulq_f64(v201, _Q6);
            v201.f64[0] = v182.f64[0];
            v201.f64[1] = v180.f64[0];
            v205.f64[0] = v180.f64[0];
            v205.f64[1] = v181.f64[0];
            v206.f64[0] = _Q6.f64[0];
            v206.f64[1] = v193.f64[0];
            _Q7 = vmlsq_f64(vmulq_f64(v201, v206), v205, (float64x2_t)vextq_s8((int8x16_t)v193, (int8x16_t)_Q6, 8uLL));
            v208 = vmlsq_f64(vmulq_laneq_f64(v181, v193, 1), v182, v193);
            _Q16 = vmulq_f64(_Q7, _Q7);
            _Q17.f64[0] = _Q7.f64[1];
            __asm { FMLA            D16, D17, V7.D[1] }
            _Q16.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q16.f64[0], v208.f64[0], v208.f64[0]));
            v190 = vmulq_n_f64(_Q7, _Q16.f64[0]);
            v191 = (float64x2_t)vextq_s8((int8x16_t)v190, (int8x16_t)vmulq_f64(v208, _Q16), 8uLL);
            *(_QWORD *)&_Q16.f64[0] = vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL).u64[0];
            v195 = vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL).u64[0];
          }
          else
          {
            _Q5.f64[0] = v182.f64[0];
            _Q5.f64[1] = v180.f64[0];
            v184.f64[0] = v180.f64[0];
            v184.f64[1] = v181.f64[0];
            v152.i64[0] = 0x8000000000000000;
            _Q17 = vmlaq_f64(vmulq_f64(v184, (float64x2_t)xmmword_210389940), _Q5, (float64x2_t)xmmword_21030D320);
            v186 = vmlaq_f64(vmulq_f64(v182, (float64x2_t)v152), v181, (float64x2_t)0);
            _Q7 = vmulq_f64(_Q17, _Q17);
            _D18 = _Q17.f64[1];
            __asm { FMLA            D7, D18, V17.D[1] }
            _Q7.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q7.f64[0], v186.f64[0], v186.f64[0]));
            v189 = (int8x16_t)vmulq_f64(v186, _Q7);
            v190 = vmulq_n_f64(_Q17, _Q7.f64[0]);
            v191 = (float64x2_t)vextq_s8((int8x16_t)v190, v189, 8uLL);
            _Q16.f64[1] = v190.f64[0];
            _Q6 = vmlsq_f64(vmulq_f64(v184, v191), _Q5, _Q16);
            v192 = vmlsq_laneq_f64(vmulq_f64(v182, v190), v181, v190, 1);
            _Q16.f64[0] = _Q6.f64[1];
            __asm { FMLA            D5, D16, V6.D[1] }
            _Q16.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q5.f64[0], v192.f64[0], v192.f64[0]));
            v193 = vmulq_n_f64(_Q6, _Q16.f64[0]);
            *(_QWORD *)&_Q6.f64[0] = *(_OWORD *)&vmulq_f64(v192, _Q16);
            v195 = vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL).u64[0];
            *(_QWORD *)&_Q16.f64[0] = vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL).u64[0];
          }
          v167.f64[1] = v191.f64[0];
          v181.f64[1] = v182.f64[0];
          *(_QWORD *)&v193.f64[1] = v195;
          *(_QWORD *)&v166.f64[1] = vextq_s8((int8x16_t)xmmword_210389990, (int8x16_t)xmmword_210389990, 8uLL).u64[0];
          *(_QWORD *)&_Q16.f64[1] = vextq_s8((int8x16_t)xmmword_2103899B0, (int8x16_t)xmmword_2103899B0, 8uLL).u64[0];
          *(_QWORD *)&v162.f64[1] = vextq_s8((int8x16_t)xmmword_2103899D0, (int8x16_t)xmmword_2103899D0, 8uLL).u64[0];
          *(_DWORD *)&v861[8] = v161.i32[2];
          *(_DWORD *)&v861[20] = v23.i32[2];
          v163 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v181), v162);
          v164 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v167), _Q16);
          v165 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v193), v166);
          *(float32x2_t *)&v162.f64[0] = vcvt_f32_f64(v162);
          *(float32x2_t *)&v167.f64[0] = vcvt_f32_f64(_Q16);
          *(float32x2_t *)&v166.f64[0] = vcvt_f32_f64(v166);
          *(_QWORD *)&v861[12] = v23.i64[0];
          *(_QWORD *)v861 = v161.i64[0];
          *(_QWORD *)&v861[24] = v165.i64[0];
          *(_DWORD *)&v861[32] = LODWORD(v166.f64[0]);
          *(_DWORD *)&v861[44] = LODWORD(v167.f64[0]);
          *(_QWORD *)&v861[36] = v164.i64[0];
          v862 = LODWORD(v162.f64[0]);
          *(_QWORD *)&v861[48] = v163.i64[0];
          v160 = 1;
          v863 = 1;
          v146 = (void **)v851;
          if (v851)
            goto LABEL_166;
LABEL_167:
          if (v134)
            operator delete(v134);
          if (v160)
          {
            v168 = 0;
            if (v26)
            {
              v169 = 0;
              v170 = 0.0;
              v171 = *(float *)&v832;
              do
              {
                v23.f32[0] = sub_20EEFBFB8(v9, (uint64_t)v861, v169, *(float32x2_t *)v23.f32, v161, (int8x16_t)v162, v163, v164, v165, (int8x16_t)v166, (int8x16_t)v167);
                if (v23.f32[0] <= v171)
                {
                  ++v168;
                  v23.f32[0] = expf(-v23.f32[0]);
                  v170 = v170 + v23.f32[0];
                }
                ++v169;
              }
              while (v26 != v169);
            }
            else
            {
              v170 = 0.0;
            }
            if (v170 > v27)
            {
              *(_QWORD *)v817 = *(_QWORD *)v861;
              *(_DWORD *)&v817[8] = *(_DWORD *)&v861[8];
              *(_QWORD *)&v817[12] = *v776;
              *(_DWORD *)&v817[20] = *(_DWORD *)(((unint64_t)v861 | 0xC) + 8);
              v23.i64[0] = *(_QWORD *)&v861[24];
              v161 = *(float32x4_t *)&v861[40];
              *(_OWORD *)&v817[24] = *(_OWORD *)&v861[24];
              v818 = *(_OWORD *)&v861[40];
              v819 = v862;
              if (v126 != 1)
              {
                v809 = 1;
                v820 = 1;
              }
              v824 = v170;
              if (v834 && v168 >= v833)
              {
                v172 = 2;
                v126 = 1;
                v27 = v170;
                v127 = v168;
                v173 = *(void **)v874;
                if (!*(_QWORD *)v874)
                  goto LABEL_185;
              }
              else
              {
                v23.f32[0] = v835;
                if (v170 < v835 || v836 == 0)
                  v172 = 0;
                else
                  v172 = 2;
                v126 = 1;
                v27 = v170;
                v127 = v168;
                v173 = *(void **)v874;
                if (!*(_QWORD *)v874)
                  goto LABEL_185;
              }
LABEL_184:
              *(_QWORD *)&v874[8] = v173;
              operator delete(v173);
              goto LABEL_185;
            }
          }
          v172 = 3;
          v173 = *(void **)v874;
          if (*(_QWORD *)v874)
            goto LABEL_184;
LABEL_185:
          if ((v172 == 3 || !v172) && ++v128 != v125)
            continue;
          v273 = v809;
          if (!v809)
          {
            v270 = 0;
            v271 = 0;
            v272 = 0;
            v274 = v842;
            if (!v842)
              goto LABEL_264;
            goto LABEL_562;
          }
          memset(v861, 0, 24);
          if (v127)
          {
            if (v127 >> 61)
              sub_20E867F44();
            v270 = (char *)operator new(8 * v127);
            v272 = &v270[8 * v127];
            __src = v270;
            *(_QWORD *)v822 = v270;
            v823 = v272;
            if (v26)
            {
LABEL_346:
              v319 = 0;
              v271 = v270;
              while (2)
              {
                v23.f32[0] = sub_20EEFBFB8(v9, (uint64_t)v817, v319, *(float32x2_t *)v23.f32, v161, (int8x16_t)v162, v163, v164, v165, (int8x16_t)v166, (int8x16_t)v167);
                v161.i32[0] = v832;
                if (v23.f32[0] > *(float *)&v832)
                  goto LABEL_349;
                if (v271 < v272)
                {
                  *(_QWORD *)v271 = v319;
                  v320 = (uint64_t)(v271 + 8);
                }
                else
                {
                  v321 = (v271 - v270) >> 3;
                  v322 = v321 + 1;
                  if ((unint64_t)(v321 + 1) >> 61)
                    sub_20E867F44();
                  if ((v272 - v270) >> 2 > v322)
                    v322 = (v272 - v270) >> 2;
                  if ((unint64_t)(v272 - v270) >= 0x7FFFFFFFFFFFFFF8)
                    v323 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v323 = v322;
                  if (v323)
                  {
                    if (v323 >> 61)
                      sub_20E877A38();
                    v324 = operator new(8 * v323);
                    v325 = (unint64_t *)&v324[8 * v321];
                    *v325 = v319;
                    v320 = (uint64_t)(v325 + 1);
                    v326 = v271 - v270;
                    if (v271 != v270)
                    {
LABEL_361:
                      v327 = v326 - 8;
                      if (v327 < 0x168
                        || (v330 = (v271 - 8 - v270) & 0xFFFFFFFFFFFFFFF8,
                            &v324[v271 - v270 - 8 - v330] > &v324[v271 - v270 - 8])
                        || &v271[-v330 - 8] > v271 - 8
                        || (unint64_t)(v270 - v324) < 0x20)
                      {
                        v328 = v271;
                        v9 = v788;
                      }
                      else
                      {
                        v331 = (v327 >> 3) + 1;
                        v332 = 8 * (v331 & 0x3FFFFFFFFFFFFFFCLL);
                        v328 = &v271[-v332];
                        v325 = (unint64_t *)((char *)v325 - v332);
                        v333 = (float32x4_t *)&v324[8 * v321 - 16];
                        v334 = (float32x4_t *)(v271 - 16);
                        v335 = v331 & 0x3FFFFFFFFFFFFFFCLL;
                        v9 = v788;
                        do
                        {
                          v161 = v334[-1];
                          v23 = *v334;
                          v333[-1] = v161;
                          *v333 = v23;
                          v333 -= 2;
                          v334 -= 2;
                          v335 -= 4;
                        }
                        while (v335);
                        if (v331 == (v331 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_364:
                          v272 = &v324[8 * v323];
                          __src = v325;
                          v823 = v272;
                          if (v270)
                            goto LABEL_365;
                          goto LABEL_366;
                        }
                      }
                      do
                      {
                        v329 = *((_QWORD *)v328 - 1);
                        v328 -= 8;
                        *--v325 = v329;
                      }
                      while (v328 != v270);
                      goto LABEL_364;
                    }
                  }
                  else
                  {
                    v324 = 0;
                    v325 = (unint64_t *)(8 * v321);
                    *(_QWORD *)(8 * v321) = v319;
                    v320 = 8 * v321 + 8;
                    v326 = v271 - v270;
                    if (v271 != v270)
                      goto LABEL_361;
                  }
                  v9 = v788;
                  v272 = &v324[8 * v323];
                  __src = v325;
                  v823 = v272;
                  if (v270)
LABEL_365:
                    operator delete(v270);
LABEL_366:
                  v270 = (char *)v325;
                }
                *(_QWORD *)v822 = v320;
                v271 = (char *)v320;
LABEL_349:
                if (++v319 == v26)
                  goto LABEL_561;
                continue;
              }
            }
          }
          else
          {
            v272 = 0;
            v270 = 0;
            __src = 0;
            *(_QWORD *)v822 = 0;
            v823 = 0;
            if (v26)
              goto LABEL_346;
          }
          v271 = v270;
LABEL_561:
          v273 = v817[0];
          v881[0] = *(unint64_t **)&v817[1];
          *(_DWORD *)((char *)v881 + 7) = *(_DWORD *)&v817[8];
          *(unint64_t **)((char *)&v881[1] + 3) = *(unint64_t **)&v817[12];
          *(_DWORD *)((char *)&v881[2] + 3) = *(_DWORD *)&v817[20];
          *(_DWORD *)&v879[32] = v819;
          *(_OWORD *)v879 = *(_OWORD *)&v817[24];
          *(_OWORD *)&v879[16] = v818;
          v274 = v842;
          if (v842 == 1)
          {
LABEL_264:
            if (!v274)
              goto LABEL_564;
            v837[0] = v273;
            *(unint64_t **)&v837[1] = v881[0];
            *(_DWORD *)&v837[8] = *(_DWORD *)((char *)v881 + 7);
            *v764 = *(unint64_t **)((char *)&v881[1] + 3);
            *(_DWORD *)(((unint64_t)v837 | 0xC) + 8) = *(_DWORD *)((char *)&v881[2] + 3);
            v839 = *(_OWORD *)v879;
            v840 = *(_OWORD *)&v879[16];
            v841 = *(_DWORD *)&v879[32];
            v275 = v843;
            if (!v843)
              goto LABEL_566;
          }
          else
          {
LABEL_562:
            if (!v274)
            {
              v837[0] = v273;
              *(unint64_t **)&v837[1] = v881[0];
              *(_DWORD *)&v837[8] = *(_DWORD *)((char *)v881 + 7);
              *v764 = *(unint64_t **)((char *)&v881[1] + 3);
              *(_DWORD *)(((unint64_t)v837 | 0xC) + 8) = *(_DWORD *)((char *)&v881[2] + 3);
              v839 = *(_OWORD *)v879;
              v840 = *(_OWORD *)&v879[16];
              v841 = *(_DWORD *)&v879[32];
              v842 = 1;
              v275 = v843;
              if (v843)
                goto LABEL_565;
LABEL_566:
              v843 = v270;
              *(_QWORD *)&v844 = v271;
              *((_QWORD *)&v844 + 1) = v272;
              v469 = 2;
              goto LABEL_577;
            }
            v842 = 0;
LABEL_564:
            v275 = v843;
            if (!v843)
              goto LABEL_566;
          }
LABEL_565:
          *(_QWORD *)&v844 = v275;
          operator delete(v275);
          goto LABEL_566;
        }
        v160 = 0;
        v861[0] = 0;
        v863 = 0;
LABEL_166:
        v852 = v146;
        operator delete(v146);
        goto LABEL_167;
      default:
        goto LABEL_579;
    }
  }
}

void sub_20EEFA724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;
  void *v30;
  void *v31;

  v30 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v30;
    operator delete(v30);
  }
  if (v28)
    operator delete(v28);
  if (a28)
    operator delete(a28);
  sub_210231620(a10);
  v31 = (void *)STACK[0xD10];
  if (STACK[0xD10])
  {
    STACK[0xD18] = (unint64_t)v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void sub_20EEFAC58(uint64_t a1, uint64_t **a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  int v18;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a3 != a4)
  {
    v5 = a3;
    while (1)
    {
      v8 = *v5;
      if (!*((_BYTE *)a2 + 8))
        break;
      v9 = **a2;
      v10 = ((*a2)[1] - v9) >> 2;
      if (0x4EC4EC4EC4EC4EC5 * v10 <= v8)
      {
        v14 = 0xB13B13B13B13B13BLL * v10;
        goto LABEL_8;
      }
      v11 = (uint64_t *)(v9 + 52 * v8);
      v16 = *v11;
      v18 = *((_DWORD *)v11 + 2);
      v12 = (char *)operator new(0xCuLL);
      v13 = (uint64_t *)(v12 + 12);
      *(_QWORD *)v12 = v16;
      *((_DWORD *)v12 + 2) = v18;
LABEL_9:
      sub_20EEFE640((void **)a1, *(_QWORD *)(a1 + 8), (uint64_t *)v12, v13, 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - v12) >> 2));
      operator delete(v12);
      if (++v5 == a4)
        return;
    }
    v14 = 0;
LABEL_8:
    v15 = (uint64_t)&a2[2][14 * v14 + 14 * v8];
    *(_QWORD *)v17 = *(_QWORD *)v15;
    *(_DWORD *)&v17[8] = *(_DWORD *)(v15 + 8);
    *(_QWORD *)&v17[12] = *(_QWORD *)(v15 + 12);
    *(_DWORD *)&v17[20] = *(_DWORD *)(v15 + 20);
    v12 = (char *)operator new(0x18uLL);
    v13 = (uint64_t *)(v12 + 24);
    *(_OWORD *)v12 = *(_OWORD *)v17;
    *((_QWORD *)v12 + 2) = *(_QWORD *)&v17[16];
    goto LABEL_9;
  }
}

void sub_20EEFAE04(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  operator delete(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20EEFAE30(uint64_t *result, uint64_t a2, char *a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t *v7;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;

  v4 = result;
  v17 = 0uLL;
  v18 = 0;
  v5 = (char *)a4 - a3;
  if (a4 == (unint64_t *)a3)
  {
    v16 = 0;
    v15 = 0uLL;
  }
  else
  {
    if (v5 < 0)
      sub_20E867F44();
    v7 = (unint64_t *)a3;
    *(_QWORD *)&v17 = operator new((char *)a4 - a3);
    *((_QWORD *)&v17 + 1) = v17;
    v18 = v17 + 8 * (v5 >> 3);
    v20 = &v17;
    do
    {
      v9 = *(_QWORD *)(a2 + 48);
      v10 = (*(_QWORD *)(a2 + 56) - v9) >> 3;
      v11 = *v7 >= v10;
      v12 = *v7 - v10;
      if (v11)
      {
        if (*(_BYTE *)(a2 + 8))
          v14 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
        else
          v14 = 0;
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v12) + v14;
      }
      else
      {
        v13 = *(_QWORD *)(v9 + 8 * *v7);
      }
      v19 = v13;
      result = sub_20EDA6C78((uint64_t *)&v20, &v19);
      ++v7;
    }
    while (v7 != a4);
    v15 = v17;
    v16 = v18;
  }
  *(_OWORD *)v4 = v15;
  v4[2] = v16;
  return result;
}

void sub_20EEFAF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEFAF68(uint64_t a1, uint64_t a2, float32x2_t *a3, _QWORD *a4, unsigned __int8 a5, double a6, float32x4_t a7, double a8, double a9, double a10, float32x2_t a11, double a12, double a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x2_t *v17;
  float32x2_t *v18;
  float v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  float v24;
  void **v25;
  float32x2_t v26;
  char *v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _BYTE *v36;
  char *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  _BYTE *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t *v54;
  float32x4_t *v55;
  uint64_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  __int32 v62;
  char *v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  unint64_t v69;
  char *v70;
  double v71;
  double v72;
  float32x2_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  float32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  _QWORD *v99;
  int64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  float32x4_t *v106;
  float32x4_t *v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  _BYTE *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  _BYTE *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  int v133;
  void *v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void **v139;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v147;
  char *v148;
  char *v149;
  __int128 v150;
  char v151;

  v14 = a1;
  v15 = a2 + 152;
  v16 = *(unsigned __int8 *)(a2 + 176);
  if (!*(_BYTE *)(a2 + 176))
    v15 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  v139 = (void **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v137 = a1 + 16;
  v138 = a1 + 48;
  if (!v16
    || (v17 = *(float32x2_t **)(a2 + 152),
        v18 = *(float32x2_t **)(a2 + 160),
        v19 = a3->f32[1],
        v150 = 0uLL,
        v149 = 0,
        v17 == v18))
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    if (*(_BYTE *)(a2 + 56))
      goto LABEL_66;
    return v14;
  }
  v136 = a2;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = v19 * 0.25;
  v141 = a5;
  v25 = (void **)a4;
  do
  {
    a7.i32[0] = a3[2].i32[0];
    LODWORD(a9) = a3[4].i32[0];
    a11.i32[0] = a3[6].i32[0];
    LODWORD(a13) = v17[1].i32[0];
    *(float32x2_t *)v28.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(a3[1], COERCE_FLOAT(*v17)), a3[3], *v17, 1), a3[5], *(float *)&a13);
    *(float32x2_t *)&v28.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *v17), *(float32x2_t *)&a9, *v17, 1), *(float32x2_t *)&a13, a11);
    *(float32x2_t *)a7.f32 = a3[7];
    a7.i32[2] = a3[8].i32[0];
    v29 = vaddq_f32(v28, a7);
    if (v29.f32[2] < 0.0)
      goto LABEL_10;
    v30 = a3->f32[0];
    if (v29.f32[2] > a3->f32[0])
      goto LABEL_10;
    a9 = COERCE_DOUBLE(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 1), *(float32x2_t *)v29.f32, 1));
    v29.f32[0] = sqrtf(*(float *)&a9);
    if ((float)(v30 - v29.f32[2]) >= 0.25)
    {
      if (v29.f32[0] >= (float)((float)(v30 - v29.f32[2]) * a3->f32[1]))
        goto LABEL_10;
    }
    else if (v29.f32[0] > v24)
    {
      goto LABEL_10;
    }
    if (v22 < v21)
    {
      *(_QWORD *)v22 = v23;
      v22 += 8;
      if (v141)
        goto LABEL_35;
      goto LABEL_10;
    }
    v31 = v22 - v20;
    v32 = (v22 - v20) >> 3;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61)
    {
      *(_QWORD *)&v150 = v22;
      *((_QWORD *)&v150 + 1) = v21;
      v149 = v20;
      sub_20E867F44();
    }
    v143 = v21;
    if ((v21 - v20) >> 2 > v33)
      v33 = (v21 - v20) >> 2;
    if ((unint64_t)(v21 - v20) >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    if (v34)
    {
      if (v34 >> 61)
        goto LABEL_143;
      v35 = v22;
      v36 = operator new(8 * v34);
      v22 = v35;
      v37 = &v36[8 * v32];
      *(_QWORD *)v37 = v23;
      v38 = (uint64_t)(v37 + 8);
      v39 = v22 - v20;
      if (v22 != v20)
      {
LABEL_29:
        v40 = v39 - 8;
        if (v40 < 0x168
          || (v51 = (v22 - 8 - v20) & 0xFFFFFFFFFFFFFFF8, &v36[v31 - 8 - v51] > &v36[v31 - 8])
          || &v22[-v51 - 8] > v22 - 8
          || (unint64_t)(v22 - v36 - v31) < 0x20)
        {
          v41 = v22;
          v25 = (void **)a4;
        }
        else
        {
          v52 = (v40 >> 3) + 1;
          v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v22[-v53];
          v37 -= v53;
          v54 = (float32x4_t *)&v36[8 * v32 - 16];
          v55 = (float32x4_t *)(v22 - 16);
          v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            a7 = v55[-1];
            v57 = *v55;
            v54[-1] = a7;
            *v54 = v57;
            v54 -= 2;
            v55 -= 2;
            v56 -= 4;
          }
          while (v56);
          v25 = (void **)a4;
          if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_32:
            v21 = &v36[8 * v34];
            if (!v20)
              goto LABEL_34;
LABEL_33:
            operator delete(v20);
            goto LABEL_34;
          }
        }
        do
        {
          v42 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *((_QWORD *)v37 - 1) = v42;
          v37 -= 8;
        }
        while (v41 != v20);
        goto LABEL_32;
      }
    }
    else
    {
      v36 = 0;
      v37 = (char *)(8 * v32);
      *(_QWORD *)(8 * v32) = v23;
      v38 = 8 * v32 + 8;
      v39 = v22 - v20;
      if (v22 != v20)
        goto LABEL_29;
    }
    v25 = (void **)a4;
    v21 = &v36[8 * v34];
    if (v20)
      goto LABEL_33;
LABEL_34:
    v20 = v37;
    v22 = (char *)v38;
    v14 = a1;
    if (v141)
    {
LABEL_35:
      v143 = v21;
      v44 = (char *)v25[1];
      v43 = (unint64_t)v25[2];
      if ((unint64_t)v44 < v43)
      {
        v26 = *v17;
        *((_DWORD *)v44 + 2) = v17[1].i32[0];
        *(float32x2_t *)v44 = v26;
        v27 = v44 + 12;
      }
      else
      {
        v45 = *v25;
        v46 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v45) >> 2) + 1;
        if (v46 > 0x1555555555555555)
        {
          *((_QWORD *)&v150 + 1) = v143;
          v149 = v20;
          sub_20E867F44();
        }
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (_QWORD)v45) >> 2);
        if (2 * v47 > v46)
          v46 = 2 * v47;
        if (v47 >= 0xAAAAAAAAAAAAAAALL)
          v48 = 0x1555555555555555;
        else
          v48 = v46;
        if (v48)
        {
          if (v48 > 0x1555555555555555)
          {
LABEL_143:
            *((_QWORD *)&v150 + 1) = v143;
            v149 = v20;
            sub_20E877A38();
          }
          v49 = v22;
          v50 = (char *)operator new(12 * v48);
          v22 = v49;
        }
        else
        {
          v50 = 0;
        }
        v58 = *v17;
        v59 = (float32x2_t *)&v50[4 * ((v44 - v45) >> 2)];
        v59[1].i32[0] = v17[1].i32[0];
        *v59 = v58;
        v60 = v59;
        if (v44 == v45)
        {
          v27 = (char *)&v59[1] + 4;
          *a4 = v59;
          a4[1] = (char *)v59 + 12;
          a4[2] = &v50[12 * v48];
          if (v44)
            goto LABEL_59;
        }
        else
        {
          do
          {
            v61 = *(float32x2_t *)(v44 - 12);
            v44 -= 12;
            v62 = *((_DWORD *)v44 + 2);
            *(float32x2_t *)((char *)v60 - 12) = v61;
            v60 = (float32x2_t *)((char *)v60 - 12);
            v60[1].i32[0] = v62;
          }
          while (v44 != v45);
          v44 = (char *)*a4;
          v27 = (char *)&v59[1] + 4;
          *a4 = v60;
          a4[1] = (char *)v59 + 12;
          a4[2] = &v50[12 * v48];
          if (v44)
          {
LABEL_59:
            v63 = v22;
            operator delete(v44);
            v22 = v63;
          }
        }
        v14 = a1;
      }
      v21 = v143;
      a4[1] = v27;
      v25 = (void **)a4;
    }
LABEL_10:
    v17 = (float32x2_t *)((char *)v17 + 52);
    ++v23;
  }
  while (v17 != v18);
  v64 = *(void **)v138;
  if (*(_QWORD *)v138)
  {
    *(_QWORD *)(v14 + 56) = v64;
    v65 = v22;
    operator delete(v64);
    v22 = v65;
    *(_QWORD *)v138 = 0;
    *(_QWORD *)(v138 + 8) = 0;
    *(_QWORD *)(v138 + 16) = 0;
  }
  a2 = v136;
  *(_QWORD *)(v14 + 48) = v20;
  *(_QWORD *)(v14 + 56) = v22;
  *(_QWORD *)(v14 + 64) = v21;
  if (*(_BYTE *)(v136 + 56))
  {
LABEL_66:
    v66 = *(_QWORD *)(a2 + 32);
    v67 = *(_QWORD *)(a2 + 40);
    v148 = 0;
    v147 = 0uLL;
    v68 = v67 - v66;
    if (v67 != v66)
    {
      v69 = 0x6DB6DB6DB6DB6DB7 * (v68 >> 4);
      if (v69 >= 0x24924924924924ALL)
        sub_20E867F44();
      v70 = (char *)operator new(v68);
      v74 = 0;
      *(_QWORD *)&v147 = v70;
      v148 = &v70[112 * v69];
      do
      {
        v75 = v66 + v74;
        v76 = &v70[v74];
        v77 = *(_QWORD *)(v66 + v74);
        *((_DWORD *)v76 + 2) = *(_DWORD *)(v66 + v74 + 8);
        *(_QWORD *)v76 = v77;
        v78 = *(_QWORD *)(v66 + v74 + 12);
        *((_DWORD *)v76 + 5) = *(_DWORD *)(v66 + v74 + 20);
        *(_QWORD *)(v76 + 12) = v78;
        v79 = *(_OWORD *)(v66 + v74 + 24);
        v80 = *(_OWORD *)(v66 + v74 + 40);
        *((_DWORD *)v76 + 14) = *(_DWORD *)(v66 + v74 + 56);
        *(_OWORD *)(v76 + 40) = v80;
        *(_OWORD *)(v76 + 24) = v79;
        v81 = *(_OWORD *)(v66 + v74 + 60);
        v82 = *(_OWORD *)(v66 + v74 + 76);
        *((_DWORD *)v76 + 23) = *(_DWORD *)(v66 + v74 + 92);
        *(_OWORD *)(v76 + 76) = v82;
        *(_OWORD *)(v76 + 60) = v81;
        v83 = *(float32x4_t *)(v66 + v74 + 96);
        *((float32x4_t *)v76 + 6) = v83;
        v74 += 112;
      }
      while (v75 + 112 != v67);
      v142 = v70;
      v144 = &v70[v74];
      *((_QWORD *)&v147 + 1) = &v70[v74];
      if (v74)
      {
        v84 = 0;
        v85 = (uint64_t)v70;
        while (2)
        {
          v83 = sub_20EEEA740(a3, v85, (uint64_t)&v149, v83, v71, v72, v73);
          v14 = a1;
          if (!v151)
            goto LABEL_74;
          v88 = &v142[112 * v84];
          *(_QWORD *)v88 = v149;
          *(_OWORD *)(v88 + 8) = v150;
          v90 = *(char **)(a1 + 80);
          v89 = *(_QWORD *)(a1 + 88);
          if ((unint64_t)v90 < v89)
          {
            *(_QWORD *)v90 = v84;
            v91 = (uint64_t)(v90 + 8);
            goto LABEL_98;
          }
          v92 = (char *)*v139;
          v93 = v90 - (_BYTE *)*v139;
          v94 = v93 >> 3;
          v95 = (v93 >> 3) + 1;
          if (v95 >> 61)
            sub_20E867F44();
          v96 = v89 - (_QWORD)v92;
          if (v96 >> 2 > v95)
            v95 = v96 >> 2;
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
            v97 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v97 = v95;
          if (v97)
          {
            if (v97 >> 61)
              goto LABEL_140;
            v98 = operator new(8 * v97);
            v99 = &v98[8 * v94];
            *v99 = v84;
            v91 = (uint64_t)(v99 + 1);
            v100 = v90 - v92;
            if (v90 != v92)
            {
LABEL_87:
              v101 = v100 - 8;
              if (v101 < 0x58)
              {
                v14 = a1;
                goto LABEL_95;
              }
              v102 = v90 - v98 - v93;
              v14 = a1;
              if (v102 < 0x20)
                goto LABEL_149;
              v103 = (v101 >> 3) + 1;
              v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
              v105 = &v90[-v104];
              v99 = (_QWORD *)((char *)v99 - v104);
              v106 = (float32x4_t *)&v98[8 * v94 - 16];
              v107 = (float32x4_t *)(v90 - 16);
              v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v83 = *v107;
                v106[-1] = v107[-1];
                *v106 = v83;
                v106 -= 2;
                v107 -= 2;
                v108 -= 4;
              }
              while (v108);
              v90 = v105;
              if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_149:
                do
                {
LABEL_95:
                  v109 = *((_QWORD *)v90 - 1);
                  v90 -= 8;
                  *--v99 = v109;
                }
                while (v90 != v92);
              }
LABEL_96:
              *(_QWORD *)(v14 + 72) = v99;
              *(_QWORD *)(v14 + 80) = v91;
              *(_QWORD *)(v14 + 88) = &v98[8 * v97];
              if (v92)
                operator delete(v92);
LABEL_98:
              *(_QWORD *)(v14 + 80) = v91;
              if (!a5)
                goto LABEL_74;
              v110 = (void **)a4;
              v112 = (char *)a4[1];
              v111 = a4[2];
              if ((unint64_t)v112 < v111)
              {
                v113 = v149;
                *((_DWORD *)v112 + 2) = v150;
                *(_QWORD *)v112 = v113;
                v114 = v112 + 12;
                goto LABEL_115;
              }
              v115 = (_BYTE *)*a4;
              v116 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v112[-*a4] >> 2) + 1;
              if (v116 > 0x1555555555555555)
                goto LABEL_141;
              v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - (_QWORD)v115) >> 2);
              if (2 * v117 > v116)
                v116 = 2 * v117;
              if (v117 >= 0xAAAAAAAAAAAAAAALL)
                v118 = 0x1555555555555555;
              else
                v118 = v116;
              if (v118)
              {
                if (v118 > 0x1555555555555555)
                  goto LABEL_140;
                v119 = (char *)operator new(12 * v118);
              }
              else
              {
                v119 = 0;
              }
              v120 = &v119[4 * ((v112 - v115) >> 2)];
              *(_QWORD *)v120 = v149;
              *((_DWORD *)v120 + 2) = v150;
              v121 = v120;
              if (v112 == v115)
              {
                v110 = (void **)a4;
                v14 = a1;
                v114 = v120 + 12;
                *a4 = v120;
                a4[1] = v120 + 12;
                a4[2] = &v119[12 * v118];
                if (v112)
                  goto LABEL_114;
              }
              else
              {
                do
                {
                  v122 = *(_QWORD *)(v112 - 12);
                  v112 -= 12;
                  v123 = *((_DWORD *)v112 + 2);
                  *(_QWORD *)(v121 - 12) = v122;
                  v121 -= 12;
                  *((_DWORD *)v121 + 2) = v123;
                }
                while (v112 != v115);
                v110 = (void **)a4;
                v14 = a1;
                v112 = (char *)*a4;
                v114 = v120 + 12;
                *a4 = v121;
                a4[1] = v120 + 12;
                a4[2] = &v119[12 * v118];
                if (v112)
LABEL_114:
                  operator delete(v112);
              }
LABEL_115:
              v110[1] = v114;
              v124 = (unint64_t)v110[2];
              if ((unint64_t)v114 < v124)
              {
                v86 = *(_QWORD *)((char *)&v150 + 4);
                *((_DWORD *)v114 + 2) = HIDWORD(v150);
                *(_QWORD *)v114 = v86;
                v87 = v114 + 12;
                goto LABEL_73;
              }
              v125 = *v110;
              v126 = 0xAAAAAAAAAAAAAAABLL * ((v114 - v125) >> 2) + 1;
              if (v126 > 0x1555555555555555)
LABEL_141:
                sub_20E867F44();
              v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - (_QWORD)v125) >> 2);
              if (2 * v127 > v126)
                v126 = 2 * v127;
              if (v127 >= 0xAAAAAAAAAAAAAAALL)
                v128 = 0x1555555555555555;
              else
                v128 = v126;
              if (v128)
              {
                if (v128 > 0x1555555555555555)
LABEL_140:
                  sub_20E877A38();
                v129 = (char *)operator new(12 * v128);
              }
              else
              {
                v129 = 0;
              }
              v130 = &v129[4 * ((v114 - v125) >> 2)];
              v131 = &v129[12 * v128];
              *(_QWORD *)v130 = *(_QWORD *)((char *)&v150 + 4);
              *((_DWORD *)v130 + 2) = HIDWORD(v150);
              v87 = v130 + 12;
              if (v114 == v125)
              {
                v110 = (void **)a4;
                v14 = a1;
                *a4 = v130;
                a4[1] = v87;
                a4[2] = v131;
              }
              else
              {
                do
                {
                  v132 = *(_QWORD *)(v114 - 12);
                  v114 -= 12;
                  v133 = *((_DWORD *)v114 + 2);
                  *(_QWORD *)(v130 - 12) = v132;
                  v130 -= 12;
                  *((_DWORD *)v130 + 2) = v133;
                }
                while (v114 != v125);
                v110 = (void **)a4;
                v14 = a1;
                v114 = (char *)*a4;
                *a4 = v130;
                a4[1] = v87;
                a4[2] = v131;
                if (!v114)
                {
LABEL_73:
                  v110[1] = v87;
LABEL_74:
                  v85 += 112;
                  ++v84;
                  if ((char *)v85 == v144)
                    goto LABEL_134;
                  continue;
                }
              }
              operator delete(v114);
              goto LABEL_73;
            }
          }
          else
          {
            v98 = 0;
            v99 = (_QWORD *)(8 * v94);
            *(_QWORD *)(8 * v94) = v84;
            v91 = 8 * v94 + 8;
            v100 = v90 - v92;
            if (v90 != v92)
              goto LABEL_87;
          }
          break;
        }
        v14 = a1;
        goto LABEL_96;
      }
    }
LABEL_134:
    if (*(_BYTE *)(v14 + 40))
    {
      v134 = *(void **)v137;
      if (*(_QWORD *)v137)
      {
        *(_QWORD *)(v14 + 24) = v134;
        operator delete(v134);
        *(_QWORD *)v137 = 0;
        *(_QWORD *)(v137 + 8) = 0;
        *(_QWORD *)(v137 + 16) = 0;
      }
      *(_OWORD *)(v14 + 16) = v147;
      *(_QWORD *)(v14 + 32) = v148;
    }
    else
    {
      *(_OWORD *)(v14 + 16) = v147;
      *(_QWORD *)(v14 + 32) = v148;
      *(_BYTE *)(v14 + 40) = 1;
    }
  }
  return v14;
}

void sub_20EEFB994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v25;
  void *v26;
  void *v27;

  if (a19)
    operator delete(a19);
  v25 = *a13;
  if (*a13)
  {
    *(_QWORD *)(a18 + 80) = v25;
    operator delete(v25);
    v26 = *a12;
    if (!*a12)
    {
LABEL_5:
      if (!*(_BYTE *)(a18 + 40))
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  else
  {
    v26 = *a12;
    if (!*a12)
      goto LABEL_5;
  }
  *(_QWORD *)(a18 + 56) = v26;
  operator delete(v26);
  if (!*(_BYTE *)(a18 + 40))
    goto LABEL_11;
LABEL_9:
  v27 = *a11;
  if (*a11)
  {
    *(_QWORD *)(a18 + 24) = v27;
    operator delete(v27);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EEFBA68(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int64x2_t *v4;
  int64x2_t *v5;
  unint64_t v6;
  uint64_t v7;
  int64x2_t *v8;
  uint64_t v9;
  int64x2_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  int64x2_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v3 = a2[1] - *a2;
  if (v3)
  {
    sub_20EAC9ECC(a1 + 48, 0x4EC4EC4EC4EC4EC5 * (v3 >> 2));
    v5 = *(int64x2_t **)(a1 + 48);
    v4 = *(int64x2_t **)(a1 + 56);
    if (v5 != v4)
    {
      v6 = (char *)v4 - (char *)v5 - 8;
      if (v6 < 0x18)
      {
        v7 = 0;
        v8 = *(int64x2_t **)(a1 + 48);
        do
        {
LABEL_8:
          v8->i64[0] = v7;
          v8 = (int64x2_t *)((char *)v8 + 8);
          ++v7;
        }
        while (v8 != v4);
        return a1;
      }
      v9 = (v6 >> 3) + 1;
      v7 = v9 & 0x3FFFFFFFFFFFFFFCLL;
      v8 = (int64x2_t *)((char *)v5 + 8 * (v9 & 0x3FFFFFFFFFFFFFFCLL));
      v10 = (int64x2_t)xmmword_2102E3FA0;
      v11 = v5 + 1;
      v12 = vdupq_n_s64(2uLL);
      v13 = vdupq_n_s64(4uLL);
      v14 = v9 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v11[-1] = v10;
        *v11 = vaddq_s64(v10, v12);
        v10 = vaddq_s64(v10, v13);
        v11 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v9 != v7)
        goto LABEL_8;
    }
  }
  return a1;
}

void sub_20EEFBB68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)(v1 + 72);
  if (v4)
  {
    *(_QWORD *)(v1 + 80) = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      if (!*(_BYTE *)(v1 + 40))
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 56) = v5;
  operator delete(v5);
  if (!*(_BYTE *)(v1 + 40))
    goto LABEL_9;
LABEL_7:
  v6 = *(void **)(v1 + 16);
  if (v6)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

void sub_20EEFBBC0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  int v25;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 == a4)
  {
    v20 = 0;
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = a3 + 8;
    do
    {
      v11 = *(_QWORD *)(v10 - 8);
      v12 = *(_QWORD *)(a2 + 48);
      v13 = (*(_QWORD *)(a2 + 56) - v12) >> 3;
      v14 = v11 >= v13;
      v15 = v11 - v13;
      if (v14)
      {
        v19 = *(_QWORD *)(a2 + 16) + 112 * *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v15);
        *(_QWORD *)v24 = *(_QWORD *)v19;
        *(_DWORD *)&v24[8] = *(_DWORD *)(v19 + 8);
        *(_QWORD *)&v24[12] = *(_QWORD *)(v19 + 12);
        *(_DWORD *)&v24[20] = *(_DWORD *)(v19 + 20);
        v17 = operator new(0x18uLL);
        v18 = v17 + 3;
        *(_OWORD *)v17 = *(_OWORD *)v24;
        v17[2] = *(_QWORD *)&v24[16];
      }
      else
      {
        v16 = **(_QWORD **)a2 + 52 * *(_QWORD *)(v12 + 8 * v11);
        v23 = *(_QWORD *)v16;
        v25 = *(_DWORD *)(v16 + 8);
        v17 = operator new(0xCuLL);
        v18 = (_QWORD *)((char *)v17 + 12);
        *v17 = v23;
        *((_DWORD *)v17 + 2) = v25;
      }
      sub_20EEFE640(a1, v9, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 2));
      operator delete(v17);
      v20 = (char *)*a1;
      v9 = (uint64_t)a1[1];
      v21 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)*a1) >> 2) >= a5 || v10 == a4;
      v10 += 8;
    }
    while (!v21);
  }
  v22 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v20) >> 2);
  if (a5 <= v22)
  {
    if (a5 < v22)
      a1[1] = &v20[12 * a5];
  }
  else
  {
    sub_20EEFD430((char **)a1, a5 - v22);
  }
}

void sub_20EEFBDA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_20EEFBDD0(uint64_t a1, uint64_t a2, unint64_t **a3, float32x4_t a4, float32x4_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;

  v7 = **a3;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = (*(_QWORD *)(a2 + 56) - v8) >> 3;
  if (v7 >= v9)
  {
    v11 = (float *)(*(_QWORD *)(a2 + 16) + 112 * *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v7 - v9)));
    v12 = v11[2];
    v13 = v11[5];
    v14 = sqrtf(v11[14]);
    v15 = v12 - v14;
    v16 = v12 + v14;
    v17 = sqrtf(v11[23]);
    v29 = v15;
    v30 = v16;
    v31 = v13 - v17;
    v32 = v13 + v17;
    sub_20EEFD594((uint64_t)&v29, (float *)&v33, 2, 1, v16);
    a4.f32[0] = v30;
    if (v30 < v31)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 60) = 0;
      return *(double *)a4.i64;
    }
    v7 = **a3;
    v8 = *(_QWORD *)(a2 + 48);
    v9 = (*(_QWORD *)(a2 + 56) - v8) >> 3;
  }
  _CF = v7 >= v9;
  v19 = v7 - v9;
  if (_CF)
  {
    v21 = *(_QWORD *)(a2 + 16) + 112 * *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v19);
    a4.i64[0] = *(_QWORD *)v21;
    a4.i32[2] = *(_DWORD *)(v21 + 8);
    a5.i64[0] = *(_QWORD *)(v21 + 12);
    a5.i32[2] = *(_DWORD *)(v21 + 20);
    v22 = vaddq_f32(a4, a5);
    v23.i64[0] = 0x3F0000003F000000;
    v23.i64[1] = 0x3F0000003F000000;
    a4 = vmulq_f32(v22, v23);
  }
  else
  {
    v20 = **(_QWORD **)a2 + 52 * *(_QWORD *)(v8 + 8 * v7);
    a4.i64[0] = *(_QWORD *)v20;
    a4.i32[2] = *(_DWORD *)(v20 + 8);
  }
  __asm { FMOV            V4.2D, #1.0 }
  *(_DWORD *)(a1 + 8) = a4.i32[2];
  *(_QWORD *)a1 = a4.i64[0];
  *(_DWORD *)(a1 + 20) = 1065353216;
  *(_QWORD *)(a1 + 12) = 0;
  a4.i64[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)xmmword_2102DD520), (float64x2_t)0).u64[0];
  *(float32x2_t *)(a1 + 24) = vcvt_f32_f64((float64x2_t)xmmword_21030D320);
  *(_DWORD *)(a1 + 32) = vcvt_f32_f64((float64x2_t)0).u32[0];
  *(_DWORD *)(a1 + 44) = vcvt_f32_f64((float64x2_t)0).u32[0];
  *(_QWORD *)(a1 + 36) = a4.i64[0];
  *(_QWORD *)(a1 + 48) = vcvt_hight_f32_f64(0, (float64x2_t)(unint64_t)_Q4).u64[0];
  *(_DWORD *)(a1 + 56) = vcvt_f32_f64((float64x2_t)(unint64_t)_Q4).u32[0];
  *(_BYTE *)(a1 + 60) = 1;
  return *(double *)a4.i64;
}

float sub_20EEFBFB8(uint64_t a1, uint64_t a2, unint64_t a3, float32x2_t a4, float32x4_t a5, int8x16_t a6, float32x4_t a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11)
{
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float result;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t v28;
  float v29;
  int8x16_t v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;

  v13 = *(_QWORD *)(a1 + 48);
  v14 = (*(_QWORD *)(a1 + 56) - v13) >> 3;
  v15 = a3 >= v14;
  v16 = a3 - v14;
  if (v15)
  {
    v28 = *(_QWORD *)(a1 + 16) + 112 * *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v16);
    a9.i64[0] = *(_QWORD *)(v28 + 48);
    a6.i64[0] = *(_QWORD *)(a2 + 48);
    a4.i32[0] = *(_DWORD *)(a2 + 20);
    a5.i64[0] = *(_QWORD *)(a2 + 12);
    a5.i32[2] = a4.i32[0];
    v29 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)a5.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 1), *(float32x2_t *)a5.f32, 1), a4, a4).f32[0];
    result = 1.0;
    v30 = (int8x16_t)a5;
    if (v29 != 1.0)
    {
      v31 = v29 + -1.0;
      if (v29 < 1.0)
        v31 = 1.0 - v29;
      v30 = (int8x16_t)a5;
      if (v31 > 0.000001)
        v30 = (int8x16_t)vmulq_n_f32(a5, 1.0 / sqrtf(v29));
    }
    a6.i32[2] = *(_DWORD *)(a2 + 56);
    v11.i32[2] = *(_DWORD *)(v28 + 32);
    v32 = (float32x2_t)vextq_s8(a6, a6, 8uLL).u64[0];
    v11.i64[0] = *(_QWORD *)(v28 + 24);
    v33 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)v11.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1), *(float32x2_t *)a6.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), v32);
    a11.i32[2] = *(_DWORD *)(v28 + 44);
    a9.i32[2] = *(_DWORD *)(v28 + 56);
    v34 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)a9.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a9.i8, 1), *(float32x2_t *)a6.i8, 1);
    a9.i64[0] = vextq_s8(a9, a9, 8uLL).u64[0];
    a11.i64[0] = *(_QWORD *)(v28 + 36);
    v35 = vmla_f32(vmla_lane_f32(vmul_f32(v33, *(float32x2_t *)a6.i8), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)a11.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a11.i8, 1), *(float32x2_t *)a6.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(a11, a11, 8uLL), v32), *(float32x2_t *)a6.i8, 1), v32, vmla_f32(v34, *(float32x2_t *)a9.i8, v32));
    a9.i32[0] = *(_DWORD *)(a2 + 8);
    v36 = *(float32x2_t *)a2;
    v37 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1);
    v38 = vextq_s8(v30, v30, 8uLL);
    a10.i32[2] = *(_DWORD *)(v28 + 8);
    a10.i64[0] = *(_QWORD *)v28;
    v39 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v28, *(float32x2_t *)v30.i8), v37, *(float32x2_t *)v28, 1), *(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(a10, a10, 8uLL)), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)v30.i8), v37, *(float32x2_t *)a2, 1), *(float32x2_t *)v38.i8, *(float32x2_t *)a9.i8));
    if (vdiv_f32(vmul_f32(v39, v39), v35).f32[0] < 0.25)
    {
      v40 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.i8, 1);
      v41 = (float32x2_t)vdup_lane_s32((int32x2_t)v36, 1);
      result = 1.0;
      if (v29 != 1.0)
      {
        v42 = v29 + -1.0;
        if (v29 < 1.0)
          v42 = 1.0 - v29;
        if (v42 > 0.000001)
          a5 = vmulq_n_f32(a5, 1.0 / sqrtf(v29));
      }
      v30.i32[2] = *(_DWORD *)(v28 + 80);
      v12.i32[2] = *(_DWORD *)(v28 + 92);
      v38.i32[2] = *(_DWORD *)(v28 + 68);
      v30.i64[0] = *(_QWORD *)(v28 + 72);
      v12.i64[0] = *(_QWORD *)(v28 + 84);
      v38.i64[0] = *(_QWORD *)(v28 + 60);
      v43 = vmla_f32(vmla_f32(vmul_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)v38.i8), v40, *(float32x2_t *)v38.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL), v32), *(float32x2_t *)a6.i8), v40, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)v30.i8), v40, *(float32x2_t *)v30.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), v32)), v32, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)v12.i8), v40, *(float32x2_t *)v12.i8, 1),
                (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL),
                v32));
      v44 = vmla_lane_f32(vmul_f32(v36, *(float32x2_t *)a5.f32), v41, *(float32x2_t *)a5.f32, 1);
      v45 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
      a10.i32[2] = *(_DWORD *)(v28 + 20);
      a10.i64[0] = *(_QWORD *)(v28 + 12);
      v46 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)a5.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 1), *(float32x2_t *)a10.i8, 1), v45, (float32x2_t)*(_OWORD *)&vextq_s8(a10, a10, 8uLL)), vmla_f32(v44, v45, *(float32x2_t *)a9.i8));
      if (vdiv_f32(vmul_f32(v46, v46), v43).f32[0] < 0.25)
        return -0.69315;
    }
  }
  else
  {
    v17 = **(_QWORD **)a1 + 52 * *(_QWORD *)(v13 + 8 * a3);
    a6.i64[0] = *(_QWORD *)(a2 + 48);
    a8.i64[0] = *(_QWORD *)(v17 + 36);
    a4.i32[0] = *(_DWORD *)(a2 + 20);
    a7.i64[0] = *(_QWORD *)(a2 + 12);
    a7.i32[2] = a4.i32[0];
    v18 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), a4, a4).f32[0];
    result = 1.0;
    if (v18 != 1.0)
    {
      v20 = v18 + -1.0;
      if (v18 < 1.0)
        v20 = 1.0 - v18;
      if (v20 > 0.000001)
        a7 = vmulq_n_f32(a7, 1.0 / sqrtf(v18));
    }
    a6.i32[2] = *(_DWORD *)(a2 + 56);
    v21 = (float32x2_t)vextq_s8(a6, a6, 8uLL).u64[0];
    a9.i32[2] = *(_DWORD *)(v17 + 32);
    a9.i64[0] = *(_QWORD *)(v17 + 24);
    v22 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)a9.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a9.i8, 1), *(float32x2_t *)a6.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(a9, a9, 8uLL), v21);
    a8.i32[2] = *(_DWORD *)(v17 + 44);
    v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.i8, 1);
    a10.i32[2] = *(_DWORD *)(v17 + 20);
    a10.i64[0] = *(_QWORD *)(v17 + 12);
    v24 = vmla_f32(vmla_lane_f32(vmul_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)a10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a10.i8, 1), *(float32x2_t *)a6.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(a10, a10, 8uLL), v21), *(float32x2_t *)a6.i8), v22, *(float32x2_t *)a6.i8, 1), v21, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)a8.i8), v23, *(float32x2_t *)a6.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(a8, a8, 8uLL), v21));
    v23.i32[0] = *(_DWORD *)(a2 + 8);
    v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1);
    v26 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
    a5.i32[2] = *(_DWORD *)(v17 + 8);
    a5.i64[0] = *(_QWORD *)v17;
    v27 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v17, *(float32x2_t *)a7.f32), v25, *(float32x2_t *)v17, 1), v26, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL)), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)a7.f32), v25, *(float32x2_t *)a2, 1), v26, v23));
    if (vdiv_f32(vmul_f32(v27, v27), v24).f32[0] < 0.25)
      return -0.0;
  }
  return result;
}

uint64_t sub_20EEFC384(uint64_t a1)
{
  uint64_t result;
  void *v3;

  sub_20E8BEBE4();
  v3 = operator new((4 * 0.0 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
  sub_20E8BEBE4();
  result = MEMORY[0x212BC6368](v3, 0x1000C8052888210);
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

void sub_20EEFC4DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void sub_20EEFC500(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, int32x4_t **a4@<X8>)
{
  unsigned int v7;
  size_t v9;
  int32x4_t *v10;
  int32x4_t *v11;
  uint64_t v12;
  int32x4_t *v13;
  unint64_t v14;
  int32x4_t v15;
  int32x4_t *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int32 v25;
  __int8 *v26;

  v7 = *a2;
  if (*a3 > *a2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 225, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v7 = *a2;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!v7)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_12;
  }
  v9 = 4 * v7;
  v10 = (int32x4_t *)operator new(v9);
  *a4 = v10;
  v11 = (int32x4_t *)((char *)v10 + v9);
  a4[2] = (int32x4_t *)((char *)v10 + v9);
  bzero(v10, v9);
  a4[1] = (int32x4_t *)((char *)v10 + v9);
  if (v9 - 4 < 0x1C)
  {
    LODWORD(v12) = 0;
    v13 = v10;
    do
    {
LABEL_11:
      v13->i32[0] = v12;
      v13 = (int32x4_t *)((char *)v13 + 4);
      LODWORD(v12) = v12 + 1;
    }
    while (v13 != v11);
    goto LABEL_12;
  }
  v14 = ((v9 - 4) >> 2) + 1;
  v12 = v14 & 0x7FFFFFFFFFFFFFF8;
  v13 = (int32x4_t *)((char *)v10 + 4 * (v14 & 0x7FFFFFFFFFFFFFF8));
  v15 = (int32x4_t)xmmword_210365350;
  v16 = v10 + 1;
  v17.i64[0] = 0x400000004;
  v17.i64[1] = 0x400000004;
  v18.i64[0] = 0x800000008;
  v18.i64[1] = 0x800000008;
  v19 = v14 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v16[-1] = v15;
    *v16 = vaddq_s32(v15, v17);
    v15 = vaddq_s32(v15, v18);
    v16 += 2;
    v19 -= 8;
  }
  while (v19);
  if (v14 != v12)
    goto LABEL_11;
LABEL_12:
  v20 = *a3;
  v21 = ((char *)v11 - (char *)v10) >> 2;
  if (v21 < v20
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Shuffle.h", 119, (uint64_t)"0 <= k && k <= n", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if ((_DWORD)v20)
  {
    v22 = 0;
    v23 = v21 - 1;
    do
    {
      v24 = sub_20EDB7AE0(a1, v22, v23);
      v25 = v10->i32[v22];
      v10->i32[v22] = v10->i32[v24];
      v10->i32[v24] = v25;
      ++v22;
    }
    while (v20 != v22);
  }
  v26 = &v10->i8[4 * *a3];
  if (v26 != (__int8 *)v11)
    a4[1] = (int32x4_t *)v26;
}

void sub_20EEFC6E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EEFC704(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  uint8x8_t v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int32x4_t *v47;
  uint64_t v48;
  int32x4_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  unsigned int *v56;
  int64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int32x4_t *v62;
  int32x4_t *v63;
  int32x4_t *v64;
  uint64_t v65;
  int32x4_t v66;
  unsigned int v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  unint64_t v71;
  unint64_t *v72;
  std::__shared_weak_count *v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  void *v78[2];
  void *__p[2];
  int v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unsigned int v83;
  unsigned int v84;

  v8 = *a3;
  v9 = *a2;
  if (*a3 > *a2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 236, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = *a2;
    v8 = *a3;
  }
  if (v9 == v8)
  {
    sub_20EEFCD20(a1, a2, a3, (int32x4_t **)a4);
    return;
  }
  v81 = a1;
  v10 = (std::__shared_weak_count *)operator new();
  v11 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1128;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v82 = v10;
  v83 = 0;
  v84 = v9 - 1;
  v13 = *a3;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  if (!(_DWORD)v13)
    goto LABEL_70;
  v72 = (unint64_t *)&v10->__shared_owners_;
  v73 = v10;
  v14 = (char *)operator new(4 * v13);
  v15 = 0;
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v14;
  *(_QWORD *)(a4 + 16) = &v14[4 * v13];
  *(_OWORD *)v78 = 0u;
  *(_OWORD *)__p = 0u;
  v80 = 1065353216;
  v74 = v13;
  v75 = a4;
  do
  {
    v17 = v78[0];
    v16 = (unint64_t)v78[1];
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]);
    v18.i16[0] = vaddlv_u8(v18);
    v19 = LODWORD(v78[1]) - 1;
    v20 = (unint64_t)v78[1] - 1;
    v22 = v83;
    v21 = v84;
    v23 = *(_QWORD *)(a1 + 2496);
    v24 = v83;
LABEL_9:
    if (v21 == v24)
    {
      v24 = v21;
      v25 = v21;
      if (!v16)
        goto LABEL_43;
    }
    else
    {
      v26 = v21 - v24 + 1;
      if (v21 - v24 == -1)
      {
        v37 = 4 * v23;
        v38 = (v23 + 1) % 0x270;
        v39 = *(_DWORD *)(a1 + 4 * ((v23 + 397) % 0x270)) ^ ((*(_DWORD *)(a1 + 4 * v38) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v23) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v38) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(a1 + v37) = v39;
        *(_QWORD *)(a1 + 2496) = v38;
        v40 = ((v39 ^ (v39 >> 11)) << 7) & 0x9D2C5680 ^ v39 ^ (v39 >> 11);
        v25 = (v40 << 15) & 0xEFC60000 ^ v40 ^ (((v40 << 15) & 0xEFC60000 ^ v40) >> 18);
        v23 = v38;
        if (!v16)
          goto LABEL_43;
      }
      else
      {
        v27 = __clz(v26);
        v28 = 31;
        if (((v26 << v27) & 0x7FFFFFFF) != 0)
          v28 = 32;
        v29 = v28 - v27;
        v30 = v29 >> 5;
        if ((v29 & 0x1F) != 0)
          ++v30;
        if (v30 <= v29)
          v31 = 0xFFFFFFFF >> -(v29 / v30);
        else
          v31 = 0;
        do
        {
          v32 = 4 * v23;
          v33 = v23 + 397;
          v23 = (v23 + 1) % 0x270;
          v34 = *(_DWORD *)(a1 + 4 * (v33 % 0x270)) ^ ((*(_DWORD *)(a1 + 4 * v23) & 0x7FFFFFFE | *(_DWORD *)(a1 + v32) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v23) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(a1 + v32) = v34;
          v35 = ((v34 ^ (v34 >> 11)) << 7) & 0x9D2C5680 ^ v34 ^ (v34 >> 11);
          v36 = ((v35 << 15) & 0xEFC60000 ^ v35 ^ (((v35 << 15) & 0xEFC60000 ^ v35) >> 18)) & v31;
        }
        while (v36 >= v26);
        *(_QWORD *)(a1 + 2496) = v23;
        v25 = v36 + v22;
        v24 = v22;
        if (!v16)
          goto LABEL_43;
      }
    }
    if (v18.u32[0] > 1uLL)
    {
      v41 = v25;
      if (v16 <= v25)
        v41 = v25 % v16;
    }
    else
    {
      v41 = v19 & v25;
    }
    v42 = (uint64_t **)v17[v41];
    if (v42)
    {
      v43 = *v42;
      if (v43)
      {
        if (v18.u32[0] < 2uLL)
        {
          while (1)
          {
            v44 = v43[1];
            if (v44 == v25)
            {
              if (*((_DWORD *)v43 + 4) == v25)
                goto LABEL_9;
            }
            else if ((v44 & v20) != v41)
            {
              goto LABEL_43;
            }
            v43 = (uint64_t *)*v43;
            if (!v43)
              goto LABEL_43;
          }
        }
        do
        {
          v45 = v43[1];
          if (v45 == v25)
          {
            if (*((_DWORD *)v43 + 4) == v25)
              goto LABEL_9;
          }
          else
          {
            if (v45 >= v16)
              v45 %= v16;
            if (v45 != v41)
              break;
          }
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
    }
LABEL_43:
    v76 = v15;
    v77 = v25;
    v47 = *(int32x4_t **)(a4 + 8);
    v46 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v47 < v46)
    {
      v47->i32[0] = v25;
      v48 = (uint64_t)v47->i64 + 4;
      goto LABEL_65;
    }
    v49 = *(int32x4_t **)a4;
    v50 = (uint64_t)v47->i64 - *(_QWORD *)a4;
    v51 = v50 >> 2;
    v52 = (v50 >> 2) + 1;
    if (v52 >> 62)
      sub_20E867F44();
    v53 = v46 - (_QWORD)v49;
    if (v53 >> 1 > v52)
      v52 = v53 >> 1;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
      v54 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    if (v54)
    {
      if (v54 >> 62)
        sub_20E877A38();
      v55 = operator new(4 * v54);
      v56 = (unsigned int *)&v55[4 * v51];
      *v56 = v25;
      v48 = (uint64_t)(v56 + 1);
      v57 = (char *)v47 - (char *)v49;
      if (v47 == v49)
      {
LABEL_57:
        a4 = v75;
        goto LABEL_63;
      }
    }
    else
    {
      v55 = 0;
      v56 = (unsigned int *)(4 * v51);
      *(_DWORD *)(4 * v51) = v25;
      v48 = 4 * v51 + 4;
      v57 = (char *)v47 - (char *)v49;
      if (v47 == v49)
        goto LABEL_57;
    }
    v58 = v57 - 4;
    if (v58 < 0x2C)
    {
      a4 = v75;
      do
      {
LABEL_62:
        v67 = v47[-1].u32[3];
        v47 = (int32x4_t *)((char *)v47 - 4);
        *--v56 = v67;
      }
      while (v47 != v49);
      goto LABEL_63;
    }
    v59 = (char *)v47 - v55 - v50;
    a4 = v75;
    if (v59 < 0x20)
      goto LABEL_62;
    v60 = (v58 >> 2) + 1;
    v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
    v62 = (int32x4_t *)((char *)v47 - v61);
    v56 = (unsigned int *)((char *)v56 - v61);
    v63 = (int32x4_t *)&v55[4 * v51 - 16];
    v64 = v47 - 1;
    v65 = v60 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v66 = *v64;
      v63[-1] = v64[-1];
      *v63 = v66;
      v63 -= 2;
      v64 -= 2;
      v65 -= 8;
    }
    while (v65);
    v47 = v62;
    if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_62;
LABEL_63:
    *(_QWORD *)a4 = v56;
    *(_QWORD *)(a4 + 8) = v48;
    *(_QWORD *)(a4 + 16) = &v55[4 * v54];
    if (v49)
      operator delete(v49);
LABEL_65:
    *(_QWORD *)(a4 + 8) = v48;
    sub_20EABA148((uint64_t)v78, &v77, &v77);
    v15 = v76 + 1;
    a4 = v75;
  }
  while (v76 + 1 != v74);
  v68 = __p[0];
  if (__p[0])
  {
    do
    {
      v69 = (_QWORD *)*v68;
      operator delete(v68);
      v68 = v69;
    }
    while (v69);
  }
  v70 = v78[0];
  v78[0] = 0;
  p_shared_owners = v72;
  v11 = v73;
  if (v70)
    operator delete(v70);
  do
LABEL_70:
    v71 = __ldaxr(p_shared_owners);
  while (__stlxr(v71 - 1, p_shared_owners));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_20EEFCCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EEFCCC8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_20EEFCCD4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EEFCCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20E8C25A8((uint64_t)va);
  v8 = *(void **)a6;
  if (*(_QWORD *)a6)
  {
    *(_QWORD *)(a6 + 8) = v8;
    operator delete(v8);
  }
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EEFCD20(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, int32x4_t **a4@<X8>)
{
  unsigned int v7;
  size_t v9;
  int32x4_t *v10;
  int32x4_t *v11;
  uint64_t v12;
  int32x4_t *v13;
  unint64_t v14;
  int32x4_t v15;
  int32x4_t *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t *v21;
  uint64_t v22;
  __int32 v23;
  __int8 *v24;
  _QWORD v25[2];
  __int128 v26;

  v7 = *a2;
  if (*a3 > *a2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 214, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v7 = *a2;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!v7)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_12;
  }
  v9 = 4 * v7;
  v10 = (int32x4_t *)operator new(v9);
  *a4 = v10;
  v11 = (int32x4_t *)((char *)v10 + v9);
  a4[2] = (int32x4_t *)((char *)v10 + v9);
  bzero(v10, v9);
  a4[1] = (int32x4_t *)((char *)v10 + v9);
  if (v9 - 4 < 0x1C)
  {
    LODWORD(v12) = 0;
    v13 = v10;
    do
    {
LABEL_11:
      v13->i32[0] = v12;
      v13 = (int32x4_t *)((char *)v13 + 4);
      LODWORD(v12) = v12 + 1;
    }
    while (v13 != v11);
    goto LABEL_12;
  }
  v14 = ((v9 - 4) >> 2) + 1;
  v12 = v14 & 0x7FFFFFFFFFFFFFF8;
  v13 = (int32x4_t *)((char *)v10 + 4 * (v14 & 0x7FFFFFFFFFFFFFF8));
  v15 = (int32x4_t)xmmword_210365350;
  v16 = v10 + 1;
  v17.i64[0] = 0x400000004;
  v17.i64[1] = 0x400000004;
  v18.i64[0] = 0x800000008;
  v18.i64[1] = 0x800000008;
  v19 = v14 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v16[-1] = v15;
    *v16 = vaddq_s32(v15, v17);
    v15 = vaddq_s32(v15, v18);
    v16 += 2;
    v19 -= 8;
  }
  while (v19);
  if (v14 != v12)
    goto LABEL_11;
LABEL_12:
  if ((char *)v11 - (char *)v10 >= 5)
  {
    v26 = xmmword_210388400;
    if ((int32x4_t *)((char *)&v11[-1].u64[1] + 4) > v10)
    {
      v20 = ((unint64_t)((char *)v11 - (char *)v10) >> 2) - 1;
      v21 = v10;
      do
      {
        v25[0] = 0;
        v25[1] = v20;
        v22 = sub_20EDB7C84((uint64_t)&v26, a1, v25);
        if (v22)
        {
          v23 = v21->i32[0];
          v21->i32[0] = v21->i32[v22];
          v21->i32[v22] = v23;
        }
        v21 = (int32x4_t *)((char *)v21 + 4);
        --v20;
      }
      while (v21 < (int32x4_t *)((char *)&v11[-1].u64[1] + 4));
    }
  }
  v24 = &v10->i8[4 * *a3];
  if (v24 != (__int8 *)v11)
    a4[1] = (int32x4_t *)v24;
}

void sub_20EEFCEF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EEFCF10(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EEFCF38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm39"
                     "7ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_"
                     "24uniform_int_distributionIjEEEC1IJjjEEERS7_DpT_EUlOT_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32"
                                "ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18"
                                "ELj1812433253EEEEENS4_24uniform_int_distributionIjEEEC1IJjjEEERS7_DpT_EUlOT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_24uniform_int_distributionIjEEEC1IJjjEEERS7_DpT_EUlOT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_24uniform_int_distributionIjEEEC1IJjjEEERS7_DpT_EUlOT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

float *sub_20EEFCFA8(float *result, float *a2, float *a3)
{
  unint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  float *v44;
  float *v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;

  while (a3 != a2)
  {
    v3 = a3 - result;
    if (v3 < 2)
      break;
    if (v3 == 3)
    {
      v38 = *result;
      v39 = result[1];
      v40 = *(a3 - 1);
      if (v39 >= *result)
      {
        if (v40 < v39)
        {
          result[1] = v40;
          *(a3 - 1) = v39;
          v50 = *result;
          v49 = result[1];
          if (v49 < *result)
          {
            *result = v49;
            result[1] = v50;
          }
        }
      }
      else if (v40 >= v39)
      {
        *result = v39;
        result[1] = v38;
        v51 = *(a3 - 1);
        if (v51 < v38)
        {
          result[1] = v51;
          *(a3 - 1) = v38;
        }
      }
      else
      {
        *result = v40;
        *(a3 - 1) = v38;
      }
      return result;
    }
    if (v3 == 2)
    {
      v36 = *(a3 - 1);
      v37 = *result;
      if (v36 < *result)
      {
        *result = v36;
        *(a3 - 1) = v37;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 31)
    {
      while (result != a3 - 1)
      {
        v41 = result++;
        if (v41 != a3 && result != a3)
        {
          v42 = *v41;
          v43 = *v41;
          v44 = result;
          v45 = v41;
          v46 = result;
          do
          {
            v47 = *v46++;
            v48 = v47;
            if (v47 < v43)
            {
              v43 = v48;
              v45 = v44;
            }
            v44 = v46;
          }
          while (v46 != a3);
          if (v45 != v41)
          {
            *v41 = *v45;
            *v45 = v42;
          }
        }
      }
      return result;
    }
    v4 = &result[v3 >> 1];
    v5 = a3 - 1;
    v6 = *(a3 - 1);
    v7 = *v4;
    v8 = *result;
    if (*v4 >= *result)
    {
      if (v6 >= v7)
      {
        v9 = 0;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
      *v4 = v6;
      *v5 = v7;
      v21 = *result;
      if (*v4 < *result)
      {
        *result = *v4;
        *v4 = v21;
        v9 = 2;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
LABEL_49:
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result >= *v4)
        goto LABEL_27;
LABEL_9:
      v12 = a3 - 1;
      v13 = result + 1;
      if (result + 1 >= a3 - 1)
      {
LABEL_31:
        v18 = v13;
      }
      else
      {
LABEL_10:
        v14 = v13;
        while (1)
        {
          v15 = *v4;
          do
          {
            v16 = *v14++;
            v17 = v16;
          }
          while (v16 < v15);
          v18 = v14 - 1;
          do
          {
            v19 = *--v12;
            v20 = v19;
          }
          while (v19 >= v15);
          if (v18 >= v12)
            break;
          *v18 = v20;
          *v12 = v17;
          ++v9;
          if (v18 == v4)
            v4 = v12;
        }
      }
      if (v18 != v4)
      {
        v22 = *v18;
        if (*v4 < *v18)
        {
          *v18 = *v4;
          *v4 = v22;
          ++v9;
        }
      }
      if (v18 == a2)
        return result;
      if (!v9)
      {
        if (v18 <= a2)
        {
          v27 = v18 + 1;
          while (v27 != a3)
          {
            v29 = *(v27 - 1);
            v28 = *v27++;
            if (v28 < v29)
              goto LABEL_37;
          }
        }
        else
        {
          while (v13 != v18)
          {
            v24 = *(v13 - 1);
            v23 = *v13++;
            if (v23 < v24)
              goto LABEL_37;
          }
        }
        return result;
      }
LABEL_37:
      if (v18 <= a2)
        result = v18 + 1;
      else
        a3 = v18;
    }
    else
    {
      if (v6 >= v7)
      {
        *result = v7;
        *v4 = v8;
        if (*v5 < v8)
        {
          *v4 = *v5;
          *v5 = v8;
          v9 = 2;
          v10 = *result;
          v11 = *v4;
          if (*result >= *v4)
            goto LABEL_27;
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      *result = v6;
      *v5 = v8;
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result < *v4)
        goto LABEL_9;
LABEL_27:
      v12 = a3 - 1;
      while (--v12 != result)
      {
        if (*v12 < v11)
        {
          *result = *v12;
          *v12 = v10;
          ++v9;
          v13 = result + 1;
          if (result + 1 < v12)
            goto LABEL_10;
          goto LABEL_31;
        }
      }
      v25 = result + 1;
      if (v10 >= *v5)
      {
        if (v25 == v5)
          return result;
        while (1)
        {
          v26 = *v25;
          if (v10 < *v25)
            break;
          if (++v25 == v5)
            return result;
        }
        *v25++ = *v5;
        *v5 = v26;
      }
      if (v25 == v5)
        return result;
      while (1)
      {
        v30 = *result;
        do
        {
          v31 = *v25++;
          v32 = v31;
        }
        while (v30 >= v31);
        v33 = v25 - 1;
        do
        {
          v34 = *--v5;
          v35 = v34;
        }
        while (v30 < v34);
        if (v33 >= v5)
          break;
        *v33 = v35;
        *v5 = v32;
      }
      result = v25 - 1;
      if (v33 > a2)
        return result;
    }
  }
  return result;
}

uint64_t *sub_20EEFD350@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float *v4;
  float *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  float v12;
  __int128 *v13;

  v5 = (float *)*result;
  v4 = (float *)result[1];
  v11 = 0;
  v10 = 0uLL;
  v6 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
    v9 = 0;
    v8 = 0uLL;
  }
  else
  {
    if (v6 < 0)
      sub_20E867F44();
    *(_QWORD *)&v10 = operator new((char *)v4 - (char *)v5);
    *((_QWORD *)&v10 + 1) = v10;
    v11 = v10 + 4 * (v6 >> 2);
    v13 = &v10;
    do
    {
      v12 = (float)(*v5 - a3) * (float)(*v5 - a3);
      result = sub_20EEC5978((uint64_t *)&v13, &v12);
      ++v5;
    }
    while (v5 != v4);
    v8 = v10;
    v9 = v11;
  }
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

void sub_20EEFD410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EEFD430(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    a1[1] = &v5[12 * (12 * a2 / 0xC)];
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        sub_20E877A38();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[12 * v7];
    v13 = &v12[12 * (12 * a2 / 0xC)];
    if (v5 != v6)
    {
      do
      {
        v14 = *(_QWORD *)(v5 - 12);
        v5 -= 12;
        v15 = *((_DWORD *)v5 + 2);
        *(_QWORD *)(v12 - 12) = v14;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v15;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[12 * v10];
    if (v5)
      operator delete(v5);
  }
}

float sub_20EEFD594(uint64_t a1, float *a2, uint64_t a3, char a4, float result)
{
  float *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  int v19;
  float v20;
  int *v21;
  float v22;
  float v23;
  int v24;
  float v25;
  int *v26;
  float *v27;
  int v28;
  int v29;
  float v30;
  int v31;
  int v32;
  float v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  int v42;
  float v43;
  int *v44;
  int v45;
  int v46;
  float v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  int *v55;
  int v56;
  int v57;
  float v58;
  float *v59;
  int v60;
  float v61;
  int v62;
  float v63;
  float v64;
  int v65;
  int v66;
  int *v67;
  int *v68;
  int *v69;
  int v70;
  int v71;
  float v72;
  int v73;
  uint64_t v74;
  int v75;
  float v76;
  unint64_t v77;
  float *v78;
  float v79;
  float v80;
  float v81;
  float *v82;
  int v83;
  float v84;
  float v85;
  float *v86;
  BOOL v87;
  unint64_t v88;
  float v89;
  float *v90;
  float v91;
  int v92;
  float v93;
  float v94;
  int v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  int v101;
  float v102;
  float *v103;
  float v104;
  int v105;
  float v106;
  int v107;
  int v108;
  float v109;
  int v110;
  float v111;
  int v112;
  float *v113;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  float *v119;
  int v120;
  uint64_t v121;
  float v122;
  int64_t v123;
  int64_t v124;
  BOOL v125;
  uint64_t v126;
  float *v127;
  float *v128;
  int v129;
  float *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float *v136;
  float *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  float *v142;
  int v143;
  float *v144;
  int v145;
  int v146;
  float v147;
  uint64_t v148;
  int v149;
  float *v150;
  uint64_t v151;

BOOL sub_20EEFE03C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  float v11;
  int *v12;
  int v13;
  float v14;
  float v15;
  int *v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  int *v21;
  int v22;
  int v23;
  int *v24;
  float v25;
  float v26;
  int v27;
  float v28;
  float v29;
  int v30;
  int v31;
  float v32;
  int v33;
  float v34;
  int v35;
  int v36;
  int v37;
  float v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  float v46;
  int v47;
  uint64_t v48;
  float v49;
  uint64_t v50;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)a1;
      if (v6 <= *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      v9 = *(float *)(a1 + 8);
      v10 = *(float *)a1;
      v11 = *(float *)(a2 - 8);
      if (v9 <= *(float *)a1)
      {
        if (v11 <= v9)
        {
          v16 = (int *)(a1 + 4);
          *(float *)a1 = v11;
        }
        else
        {
          v16 = (int *)(a1 + 12);
          v36 = *(_DWORD *)(a1 + 12);
          v37 = *(_DWORD *)(a1 + 4);
          *(float *)a1 = v9;
          *(_DWORD *)(a1 + 4) = v36;
          *(float *)(a1 + 8) = v10;
          *(_DWORD *)(a1 + 12) = v37;
          v38 = *(float *)(a2 - 8);
          if (v38 > v10)
            return result;
          *(float *)(a1 + 8) = v38;
        }
        *(float *)(a2 - 8) = v10;
        v12 = (int *)(a2 - 4);
        goto LABEL_28;
      }
      if (v11 <= v9)
      {
        *(float *)(a1 + 8) = v11;
        *(float *)(a2 - 8) = v9;
        v12 = (int *)(a1 + 12);
        v13 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v13;
        v14 = *(float *)(a1 + 8);
        v15 = *(float *)a1;
        if (v14 <= *(float *)a1)
        {
          *(float *)a1 = v14;
          *(float *)(a1 + 8) = v15;
          v16 = (int *)(a1 + 4);
LABEL_28:
          v41 = *v16;
          *v16 = *v12;
          *v12 = v41;
          return result;
        }
      }
      return result;
    case 4:
      sub_20EEFE38C((_DWORD *)a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      sub_20EEFE38C((_DWORD *)a1, a1 + 8, a1 + 16, a1 + 24);
      v25 = *(float *)(a2 - 8);
      v26 = *(float *)(a1 + 24);
      if (v25 > v26)
        return 1;
      *(float *)(a1 + 24) = v25;
      *(float *)(a2 - 8) = v26;
      v27 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = v27;
      v28 = *(float *)(a1 + 24);
      v29 = *(float *)(a1 + 16);
      if (v28 > v29)
        return 1;
      v30 = *(_DWORD *)(a1 + 20);
      v31 = *(_DWORD *)(a1 + 28);
      *(float *)(a1 + 16) = v28;
      *(_DWORD *)(a1 + 20) = v31;
      *(float *)(a1 + 24) = v29;
      *(_DWORD *)(a1 + 28) = v30;
      v32 = *(float *)(a1 + 8);
      if (v28 > v32)
        return 1;
      v33 = *(_DWORD *)(a1 + 12);
      *(float *)(a1 + 8) = v28;
      *(_DWORD *)(a1 + 12) = v31;
      *(float *)(a1 + 16) = v32;
      *(_DWORD *)(a1 + 20) = v33;
      v34 = *(float *)a1;
      if (v28 > *(float *)a1)
        return 1;
      v35 = *(_DWORD *)(a1 + 4);
      *(float *)a1 = v28;
      *(_DWORD *)(a1 + 4) = v31;
      *(float *)(a1 + 8) = v34;
      *(_DWORD *)(a1 + 12) = v35;
      return 1;
    default:
      v17 = (float *)(a1 + 16);
      v18 = *(float *)(a1 + 16);
      v19 = *(float *)(a1 + 8);
      v20 = *(float *)a1;
      if (v19 <= *(float *)a1)
      {
        if (v18 <= v19)
        {
          v24 = (int *)(a1 + 4);
          *(float *)a1 = v18;
        }
        else
        {
          v24 = (int *)(a1 + 12);
          v39 = *(_DWORD *)(a1 + 12);
          v40 = *(_DWORD *)(a1 + 4);
          *(float *)a1 = v19;
          *(_DWORD *)(a1 + 4) = v39;
          *(float *)(a1 + 8) = v20;
          *(_DWORD *)(a1 + 12) = v40;
          if (v18 > v20)
            goto LABEL_32;
          *(float *)(a1 + 8) = v18;
        }
        *(float *)(a1 + 16) = v20;
        v21 = (int *)(a1 + 20);
        goto LABEL_31;
      }
      if (v18 <= v19)
      {
        v21 = (int *)(a1 + 12);
        v22 = *(_DWORD *)(a1 + 12);
        v23 = *(_DWORD *)(a1 + 20);
        *(float *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 20) = v22;
        *(float *)(a1 + 8) = v18;
        *(_DWORD *)(a1 + 12) = v23;
        if (v18 <= v20)
        {
          *(float *)a1 = v18;
          *(float *)(a1 + 8) = v20;
          v24 = (int *)(a1 + 4);
LABEL_31:
          v42 = *v24;
          *v24 = *v21;
          *v21 = v42;
        }
      }
LABEL_32:
      v43 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v44 = 0;
      v45 = 0;
      while (1)
      {
        v46 = *(float *)v43;
        if (*(float *)v43 <= *v17)
          break;
LABEL_41:
        v17 = (float *)v43;
        v44 += 8;
        v43 += 8;
        if (v43 == a2)
          return 1;
      }
      v47 = *(_DWORD *)(v43 + 4);
      v48 = v44;
      do
      {
        *(_QWORD *)(a1 + v48 + 24) = *(_QWORD *)(a1 + v48 + 16);
        if (v48 == -16)
        {
          *(float *)a1 = v46;
          *(_DWORD *)(a1 + 4) = v47;
          if (++v45 != 8)
            goto LABEL_41;
          return v43 + 8 == a2;
        }
        v49 = *(float *)(a1 + v48 + 8);
        v48 -= 8;
      }
      while (v49 >= v46);
      v50 = a1 + v48;
      *(float *)(v50 + 24) = v46;
      *(_DWORD *)(v50 + 28) = v47;
      if (++v45 != 8)
        goto LABEL_41;
      return v43 + 8 == a2;
  }
}

float sub_20EEFE38C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v4;
  float v5;
  float v6;
  int *v7;
  int v8;
  float v9;
  int *v10;
  int v11;
  float v12;
  int v13;
  float result;
  float v15;
  int v16;
  float v17;
  int v18;
  float v19;

  v4 = *(float *)a2;
  v5 = *(float *)a1;
  v6 = *(float *)a3;
  if (*(float *)a2 <= *(float *)a1)
  {
    if (v6 <= v4)
    {
      v10 = a1 + 1;
      *(float *)a1 = v6;
      *(float *)a3 = v5;
      v7 = (int *)(a3 + 4);
      goto LABEL_9;
    }
    *(float *)a1 = v4;
    *(float *)a2 = v5;
    v10 = (int *)(a2 + 4);
    v11 = a1[1];
    a1[1] = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v11;
    v12 = *(float *)a2;
    if (*(float *)a3 <= *(float *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v12;
      v7 = (int *)(a3 + 4);
      goto LABEL_9;
    }
  }
  else if (v6 <= v4)
  {
    *(float *)a2 = v6;
    *(float *)a3 = v4;
    v7 = (int *)(a2 + 4);
    v8 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v8;
    v9 = *(float *)a1;
    if (*(float *)a2 <= *(float *)a1)
    {
      *a1 = *(_DWORD *)a2;
      v10 = a1 + 1;
      *(float *)a2 = v9;
LABEL_9:
      v13 = *v10;
      *v10 = *v7;
      *v7 = v13;
    }
  }
  result = *(float *)a4;
  v15 = *(float *)a3;
  if (*(float *)a4 <= *(float *)a3)
  {
    *(float *)a3 = result;
    *(float *)a4 = v15;
    v16 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v16;
    result = *(float *)a3;
    v17 = *(float *)a2;
    if (*(float *)a3 <= *(float *)a2)
    {
      *(float *)a2 = result;
      *(float *)a3 = v17;
      v18 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v18;
      result = *(float *)a2;
      v19 = *(float *)a1;
      if (*(float *)a2 <= *(float *)a1)
      {
        *(float *)a1 = result;
        *(float *)a2 = v19;
        result = *((float *)a1 + 1);
        a1[1] = *(_DWORD *)(a2 + 4);
        *(float *)(a2 + 4) = result;
      }
    }
  }
  return result;
}

uint64_t sub_20EEFE4C4(uint64_t a1)
{
  uint64_t result;
  void *v3;

  sub_20E8BEBE4();
  v3 = operator new((4 * 0.0 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
  sub_20E8BEBE4();
  result = MEMORY[0x212BC6368](v3, 0x1000C8052888210);
  *(_BYTE *)(a1 + 92) = 1;
  return result;
}

void sub_20EEFE61C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t sub_20EEFE640(void **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  _BYTE *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  uint64_t *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *i;
  uint64_t v45;
  void *v46;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 12;
  v7 = (uint64_t)*a1 + 12 * v6;
  if (a5 < 1)
    return v7;
  v9 = a3;
  v12 = (uint64_t *)a1[1];
  v11 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)v12) >> 2)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 2)) >= a5)
    {
      v18 = (uint64_t *)((char *)a3 + 12 * a5);
      v19 = (char *)a1[1];
    }
    else
    {
      v18 = (uint64_t *)((char *)a3 + 4 * (((uint64_t)v12 - v7) >> 2));
      v19 = (char *)a1[1];
      if (v18 != a4)
      {
        v20 = (uint64_t *)((char *)a3 + 4 * (((uint64_t)v12 - v7) >> 2));
        v21 = a1[1];
        do
        {
          v22 = *v20;
          v21[2] = *((_DWORD *)v20 + 2);
          *(_QWORD *)v21 = v22;
          v21 += 3;
          v20 = (uint64_t *)((char *)v20 + 12);
          v19 += 12;
        }
        while (v20 != a4);
      }
      a1[1] = v19;
      if ((uint64_t)v12 - v7 < 1)
        return v7;
    }
    v23 = v7 + 12 * a5;
    v24 = (uint64_t *)&v19[-12 * a5];
    v25 = v19;
    if (v24 < v12)
    {
      v25 = v19;
      do
      {
        v26 = *v24;
        *((_DWORD *)v25 + 2) = *((_DWORD *)v24 + 2);
        *(_QWORD *)v25 = v26;
        v25 += 12;
        v24 = (uint64_t *)((char *)v24 + 12);
      }
      while (v24 < v12);
    }
    a1[1] = v25;
    if (v19 != (char *)v23)
    {
      v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v19[-v23] >> 2);
      v28 = v19 - 12;
      v29 = 12 * v27;
      v30 = (uint64_t)&v5[12 * v6 - 12];
      do
      {
        v31 = *(_QWORD *)(v30 + v29);
        *((_DWORD *)v28 + 2) = *(_DWORD *)(v30 + v29 + 8);
        *(_QWORD *)v28 = v31;
        v28 -= 12;
        v29 -= 12;
      }
      while (v29);
    }
    if (v18 != a3)
    {
      v32 = v7;
      do
      {
        v33 = *v9;
        *(_DWORD *)(v32 + 8) = *((_DWORD *)v9 + 2);
        *(_QWORD *)v32 = v33;
        v32 += 12;
        v9 = (uint64_t *)((char *)v9 + 12);
      }
      while (v9 != v18);
    }
    return v7;
  }
  v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 2);
  if (v13 > 0x1555555555555555)
    sub_20E867F44();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 2);
  v15 = 2 * v14;
  if (2 * v14 <= v13)
    v15 = v13;
  if (v14 >= 0xAAAAAAAAAAAAAAALL)
    v16 = 0x1555555555555555;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 > 0x1555555555555555)
      sub_20E877A38();
    v17 = (char *)operator new(12 * v16);
  }
  else
  {
    v17 = 0;
  }
  v34 = &v17[12 * v6];
  v35 = 12 * a5;
  v36 = &v34[12 * a5];
  v37 = v34;
  do
  {
    v38 = *v9;
    *((_DWORD *)v37 + 2) = *((_DWORD *)v9 + 2);
    *(_QWORD *)v37 = v38;
    v37 += 12;
    v9 = (uint64_t *)((char *)v9 + 12);
    v35 -= 12;
  }
  while (v35);
  v39 = *a1;
  v40 = v34;
  if (*a1 != (void *)v7)
  {
    v41 = v7;
    v40 = v34;
    do
    {
      v42 = *(_QWORD *)(v41 - 12);
      v41 -= 12;
      v43 = *(_DWORD *)(v41 + 8);
      *(_QWORD *)(v40 - 12) = v42;
      v40 -= 12;
      *((_DWORD *)v40 + 2) = v43;
    }
    while ((void *)v41 != v39);
    v12 = (uint64_t *)a1[1];
  }
  for (i = &v17[12 * v16]; (uint64_t *)v7 != v12; v7 += 12)
  {
    v45 = *(_QWORD *)v7;
    *((_DWORD *)v36 + 2) = *(_DWORD *)(v7 + 8);
    *(_QWORD *)v36 = v45;
    v36 += 12;
  }
  v46 = *a1;
  *a1 = v40;
  a1[1] = v36;
  a1[2] = i;
  if (v46)
    operator delete(v46);
  return (uint64_t)v34;
}

void sub_20EEFE924(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, _QWORD *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, simd_float3x3 a7@<0:Q0, 16:Q1, 32:Q2>, __n128 a8@<Q3>, float32x4_t a9@<Q5>, float32x4_t a10@<Q6>, int32x4_t a11@<Q7>)
{
  uint64_t *v17;
  _OWORD *v18;
  float32x2_t v19;
  uint64_t v20;
  unsigned int *v21;
  void *v22;
  float32x2_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  _BOOL4 v27;
  unint64_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x2_t *v34;
  unint64_t v35;
  _BOOL4 v36;
  float32x4_t v37;
  _OWORD *v39;
  float32x2_t v40;
  _QWORD *v41;
  _OWORD *v42;
  float32x2_t v43;
  void *__p;
  _OWORD *v45;
  __int32 v46;
  float32x2_t v47;
  __int32 v48;
  float32x2_t v49;
  __int32 v50;
  uint64_t v51;
  __int32 v52;
  char **v53;
  int v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  int v58;

  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    v17 = *(uint64_t **)a1;
    if (*(_QWORD *)a1)
    {
      sub_20EF04B34(v17, a2, &__p, (int32x4_t)a7.columns[0], (__n128)a7.columns[2], a8, a9, a10, a11);
      v18 = __p;
      v19 = (float32x2_t)v45;
      v53 = (char **)a6;
      if (__p != v45)
      {
        do
        {
          sub_20EF04978(&v53, v18);
          v18 += 9;
        }
        while (v18 != *(_OWORD **)&v19);
        v18 = __p;
      }
      if (v18)
      {
        v45 = v18;
        operator delete(v18);
      }
    }
  }
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(unsigned int **)(a1 + 48);
  if (v20 | (unint64_t)v21 && (*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    if (!v21)
    {
      v27 = 1;
      goto LABEL_32;
    }
    sub_20EEF49C8(v21, a2, (uint64_t)a3, a4, a5, &__p, a7);
    v22 = __p;
    v23 = (float32x2_t)v45;
    if (__p == v45)
    {
      v25 = __p;
      if (!__p)
        goto LABEL_16;
    }
    else
    {
      v53 = (char **)a6;
      v24 = __p;
      do
      {
        sub_20EF04978(&v53, v24);
        v24 += 9;
      }
      while (v24 != *(_OWORD **)&v23);
      v25 = __p;
      if (!__p)
      {
LABEL_16:
        v26 = *(_QWORD *)(a1 + 48);
        v20 = *(_QWORD *)(a1 + 16);
        v27 = v26 == 0;
        if (v20 && v22 == (void *)v23 && v26)
        {
          if (!*(_BYTE *)(v20 + 176))
            goto LABEL_39;
          v28 = *a3;
          v53 = *(char ***)a2;
          v54 = *(_DWORD *)(a2 + 8);
          v55 = *(_QWORD *)(a2 + 12);
          v56 = *(_DWORD *)(a2 + 20);
          v57 = *(_OWORD *)(a2 + 24);
          v58 = *(_DWORD *)(a2 + 40);
          DWORD1(v57) = 1050253722;
          *(float *)&v57 = *(float *)&v57 + *(float *)&v57;
          a7.columns[0].f32[0] = sub_20EEEB2F0((uint64_t)&v53, (uint64_t)&__p, (float32x4_t)a7.columns[1], (float32x4_t)a7.columns[2]);
          v33 = *(float32x2_t **)(v20 + 152);
          v34 = *(float32x2_t **)(v20 + 160);
          if (v33 == v34)
          {
            v35 = 0;
          }
          else
          {
            v35 = 0;
            a7.columns[0].i64[0] = v51;
            a7.columns[0].i32[2] = v52;
            a7.columns[2].i32[0] = HIDWORD(__p);
            a7.columns[1].i32[0] = (int)__p;
            v29.i32[0] = v46;
            v30.i32[0] = v48;
            v31.i32[0] = v50;
            do
            {
              if (!v33[6].i32[0])
              {
                v32.i32[0] = v33[1].i32[0];
                *(float32x2_t *)v37.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v45, COERCE_FLOAT(*v33)), v47, *v33, 1), v49, v32.f32[0]);
                *(float32x2_t *)&v37.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v29, *v33), v30, *v33, 1), *(float32x2_t *)v32.f32, v31);
                v32 = vaddq_f32((float32x4_t)a7.columns[0], v37);
                v36 = v32.f32[2] >= 0.0
                   && v32.f32[2] <= *(float *)&__p
                   && sqrtf(vmla_lane_f32(vmul_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.f32, 1), *(float32x2_t *)v32.f32, 1).f32[0]) < (float)(*((float *)&__p + 1) * (float)(*(float *)&__p - v32.f32[2]));
                v35 += v36;
              }
              v33 = (float32x2_t *)((char *)v33 + 52);
            }
            while (v33 != v34);
          }
          v27 = v35 >= v28;
          v20 = *(_QWORD *)(a1 + 16);
          if (!v20)
            goto LABEL_39;
LABEL_33:
          if (v27)
          {
            sub_20EEF33D8(v20, a2, (uint64_t)a3, a4, a5, &__p, (float32x4_t)a7.columns[1], (float32x4_t)a7.columns[2]);
            v39 = __p;
            v40 = (float32x2_t)v45;
            v53 = (char **)a6;
            if (__p != v45)
            {
              do
              {
                sub_20EF04978(&v53, v39);
                v39 += 9;
              }
              while (v39 != *(_OWORD **)&v40);
              v39 = __p;
            }
            if (v39)
            {
              v45 = v39;
              operator delete(v39);
            }
          }
          goto LABEL_39;
        }
LABEL_32:
        if (!v20)
          goto LABEL_39;
        goto LABEL_33;
      }
    }
    v45 = v25;
    operator delete(v25);
    goto LABEL_16;
  }
LABEL_39:
  v41 = *(_QWORD **)(a1 + 32);
  if (v41 && (*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    sub_20EEF38F4(v41, a2, (uint64_t)a4, a5, &__p, (float32x4_t)a7.columns[0], (int8x16_t)a7.columns[1]);
    v42 = __p;
    v43 = (float32x2_t)v45;
    v53 = (char **)a6;
    if (__p != v45)
    {
      do
      {
        sub_20EF04978(&v53, v42);
        v42 += 9;
      }
      while (v42 != *(_OWORD **)&v43);
      v42 = __p;
    }
    if (v42)
    {
      v45 = v42;
      operator delete(v42);
    }
  }
}

void sub_20EEFEC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (!*(_QWORD *)v10)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v10 + 8) = v12;
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

double sub_20EEFECD4(_OWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, __n128 a6, float32x4_t a7, double a8, double a9, double a10, float32x4_t a11)
{
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  float32x4_t v24;
  float32x4_t v25;
  __int128 *v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int8x16_t v41;
  float32x2_t v42;
  float32x2_t v43;
  int8x16_t v44;
  float32x2_t v45;
  uint64_t v46;
  uint64_t v47;
  int8x16_t v48;
  int v49;
  int v50;
  float v51;
  float v52;
  int v53;
  int8x16_t v54;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  float32x2_t v59;
  float32x2_t v60;
  _OWORD *v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned __int8 *v65;
  float *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __int128 *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  float32x2_t v74;
  float32x2_t v75;
  int v76;
  int v77;
  unsigned __int8 *v78;
  uint64_t v79;
  __int128 *v80;
  int8x16_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int8x16_t v85;
  int8x16_t v86;
  uint64_t v87;
  float32x2_t v88;
  float32x2_t v89;
  unint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v99;
  uint64_t v100;
  float32x2_t v101;
  float32x2_t v102;
  __int128 *v103;
  int v104;
  int v105;
  __int128 *v106;
  uint64_t v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v113;
  uint64_t v114;
  float32x2_t v115;
  float32x2_t v116;
  int v118;
  int v119;
  unsigned __int8 *v120;
  uint64_t v121;
  __int128 *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  BOOL v131;
  float32x4_t v132;
  float32x4_t v133;
  int v134;
  int v135;
  float v136;
  float v137;
  int v138;
  int8x16_t v139;
  int v140;
  uint64_t v141;
  int8x16_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float32x2_t v145;
  _BOOL4 v146;
  int v147;
  uint64_t v148;
  BOOL v149;
  BOOL v151;
  uint64_t v152;
  int8x16_t v153;
  float32x2_t v154;
  float32x2_t v155;
  float32x2_t v156;
  int v157;
  _BOOL4 v158;
  int v159;
  uint64_t v160;
  BOOL v161;
  BOOL v163;
  uint64_t v164;
  int8x16_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  int v169;
  _BOOL4 v170;
  int v171;
  uint64_t v172;
  BOOL v173;
  _OWORD *v174;
  BOOL v176;
  unint64_t i;
  uint64_t v178;
  int8x16_t v179;
  float32x2_t v180;
  float32x2_t v181;
  float32x2_t v182;
  int v183;
  uint64_t v184;
  int v185;
  BOOL v187;
  _BOOL4 v188;
  int8x16_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  int8x16_t v194;
  uint64_t v195;
  int8x16_t v196;
  float32x2_t v197;
  float32x2_t v198;
  float32x2_t v199;
  int v200;
  _BOOL4 v201;
  uint64_t v202;
  BOOL v203;
  _OWORD *v204;
  uint64_t v205;
  int8x16_t v206;
  float32x2_t v207;
  float32x2_t v208;
  float32x2_t v209;
  int v210;
  uint64_t v211;
  int v212;
  BOOL v213;
  __int128 *v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  int v221;
  __int128 *v222;
  int v223;
  __int128 *v224;
  uint64_t v225;
  int8x16_t v226;
  float32x2_t v227;
  float32x2_t v228;
  float32x2_t v229;
  _OWORD *v230;
  BOOL v232;
  uint64_t v233;
  _OWORD *v234;
  int v235;
  _OWORD *v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  float32x2_t v240;
  float32x2_t v241;
  float32x2_t v242;
  uint64_t v243;
  int v244;
  float v245;
  uint64_t v246;
  float v247;
  int v248;
  int v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  float32x4_t v253;
  _OWORD *v254;
  BOOL v256;
  uint64_t v257;
  int8x16_t v258;
  float32x2_t v259;
  float32x2_t v260;
  int8x16_t v261;
  float32x2_t v262;
  __int128 v263;
  __int128 v264;
  _OWORD *v265;
  __int128 v266;
  _OWORD *v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  float *v273;
  int v274;
  char v275;
  char v276;
  int64_t v277;
  int64_t v278;
  int8x16_t *v279;
  int64_t v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  float32x2_t v285;
  float32x2_t v286;
  float32x2_t v287;
  _OWORD *v288;
  _BYTE *v289;
  int v290;
  uint64_t v291;
  BOOL v292;
  _OWORD *v293;
  BOOL v294;
  int8x16_t *v295;
  int v296;
  int *i32;
  int v298;
  uint64_t v299;
  uint64_t v300;
  float32x2_t v301;
  float32x2_t v302;
  float32x2_t v303;
  _OWORD *v304;
  _BYTE *v305;
  int v306;
  uint64_t v307;
  _OWORD *v308;
  BOOL v309;
  int v310;
  int v311;
  _OWORD *v312;
  float v313;
  float v314;
  int v315;
  int v316;
  int8x16_t v317;
  int8x16_t v318;
  int8x16_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int8x16_t v322;
  BOOL v324;
  _OWORD *v325;
  uint64_t v326;
  int8x16_t v327;
  float32x2_t v328;
  int8x16_t v329;
  float32x2_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t *v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  int v341;
  uint64_t v342;
  float32x2_t v343;
  float32x2_t v344;
  float32x2_t v345;
  _OWORD *v346;
  _BYTE *v347;
  int v348;
  uint64_t v349;
  BOOL v350;
  float *v351;
  BOOL v352;
  int v353;
  int8x16_t *v354;
  int8x16_t *v355;
  uint64_t v356;
  BOOL v357;
  int64_t v358;
  float32x4_t *v359;
  float32x4_t *v360;
  uint64_t v361;
  float32x4_t *v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t *v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  int v377;
  uint64_t v378;
  int8x16_t v379;
  float32x2_t v380;
  float32x2_t v381;
  int8x16_t v382;
  float32x2_t v383;
  _OWORD *f32;
  _BYTE *v385;
  int v386;
  uint64_t v387;
  BOOL v388;
  float *v389;
  BOOL v390;
  __n128 *v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  float32x4_t *v401;
  int v402;
  unsigned __int32 v403;
  uint64_t v404;
  int8x16_t v405;
  float32x2_t v406;
  float32x2_t v407;
  float32x2_t v408;
  _OWORD *v409;
  _BYTE *v410;
  int v411;
  uint64_t v412;
  _OWORD *v413;
  int v414;
  int v415;
  float v416;
  float v417;
  int v418;
  uint64_t v419;
  float32x4_t v420;
  float32x4_t v421;
  float32x4_t v422;
  _OWORD *v423;
  _DWORD *v424;
  float32x4_t v425;
  float32x4_t v426;
  __n128 v427;
  BOOL v429;
  uint64_t v430;
  int8x16_t v431;
  float32x2_t v432;
  int8x16_t v433;
  float32x2_t v434;
  float32x4_t v435;
  float32x4_t v436;
  float32x4_t v437;
  _OWORD *v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  float32x4_t *v442;
  unint64_t v443;
  int v444;
  _OWORD *v445;
  int v446;
  unsigned __int8 *v447;
  int v448;
  uint64_t v449;
  _OWORD *v450;
  int v451;
  uint64_t v452;
  _OWORD *v453;
  BOOL v454;
  _OWORD *v455;
  _BOOL4 v456;
  _OWORD *v457;
  int v458;
  int v459;
  uint64_t v460;
  float32x2_t v461;
  float32x2_t v462;
  float32x2_t v463;
  uint64_t v464;
  _OWORD *v465;
  int v466;
  float v467;
  int v468;
  float v469;
  int v470;
  int v471;
  __n128 v472;
  BOOL v474;
  _OWORD *v475;
  uint64_t v476;
  int8x16_t v477;
  float32x2_t v478;
  float32x2_t v479;
  int8x16_t v480;
  float32x2_t v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  float32x4_t v485;
  int v486;
  uint64_t v487;
  int v488;
  BOOL v489;
  uint64_t v490;
  __int128 *v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 *v498;
  __int128 *v499;
  __int128 *v500;
  unint64_t v502;
  _OWORD *v503;
  __int128 *v504;
  unint64_t v505;
  char v506;
  _OWORD *v507;
  BOOL v508;
  BOOL v509;
  uint64_t v510;
  _OWORD *v511;
  char v512;
  int v513;
  unint64_t v514;
  float32x4_t v515;
  char v516;
  int v517;
  char v518;
  int v519;
  int v520;
  uint64_t v521;
  int v522;
  int v523;
  BOOL v524;
  int v525;
  int v526;
  float32x4_t v527;
  _OWORD *v528;
  BOOL v529;
  float32x4_t v530;
  float32x4_t v531;
  float32x4_t v532;
  float32x4_t v533;
  __int16 v535;
  __int16 v536;
  __int16 v537;
  char v538;
  char v539;
  char v540;
  __int16 v541;
  __int16 v542;
  __int16 v543;
  __int16 v544;
  __int16 v545;
  __int16 v546;
  char v547;
  char v548;
  char v549;
  char v550;
  char v551;
  char v552;
  float32x4_t v553;
  __n128 v554;
  _BYTE v555[28];
  _BYTE v556[28];
  float32x4_t v557;
  _BYTE v558[28];
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  _BYTE v562[28];
  _BYTE v563[28];
  __int16 v564;
  __int16 v565;
  _BYTE v566[28];
  __int16 v567;
  char v568;
  char v569;
  char v570;
  __int128 v571;
  __int128 v572;
  __n128 v573;
  int8x16_t v574;
  float32x4_t v575;
  __n128 v576;
  int8x16_t v577;
  __int128 v578;
  uint64_t v579;
  uint64_t v580;
  float32x4_t v581;
  uint64_t v582;
  __int128 v583;
  __int128 v584;
  float32x4_t v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  int8x16_t v590;
  float32x4_t v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  int8x16_t v598;
  float32x4_t v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  int8x16_t v606;
  float32x4_t v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  float32x4_t v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __n128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  float32x4_t v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  float32x4_t v628;
  __int128 v629;
  _BYTE v630[25];
  _BYTE v631[25];
  _BYTE v632[25];
  _BYTE v633[25];
  _BYTE v634[25];

float32x4_t sub_20EF02798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, float32x4_t a7, float32x4_t a8)
{
  float32x4_t result;
  float32x4_t v15;
  int v16;
  float32x4_t *v17;
  int v18;
  float32x4_t *v19;
  uint64_t v20;
  int8x16_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  float32x4_t v31;
  __int32 v32;
  int v33;
  float32x4_t *v34;
  uint64_t v35;
  int8x16_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  float32x4_t v46;
  __int32 v47;
  int v48;
  float32x4_t *v49;
  uint64_t v50;
  int8x16_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  float32x4_t v61;
  __int32 v62;
  int v63;
  float32x4_t *v64;
  uint64_t v65;
  int8x16_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[25];
  _BYTE v106[25];
  _BYTE v107[25];
  _BYTE v108[25];

  result = sub_20EF04314(a1, a2, a3, (__int128 *)a4, a6, a7, a8);
  v17 = (float32x4_t *)(a5 + 4);
  v16 = *((_DWORD *)a5 + 16);
  v19 = (float32x4_t *)(a4 + 64);
  v18 = *(_DWORD *)(a4 + 64);
  if (v16 == v18)
  {
    v20 = **(_QWORD **)(a6 + 8);
    result.i64[0] = *(_QWORD *)v20;
    result.i32[2] = *(_DWORD *)(v20 + 8);
    v15.i64[0] = *((_QWORD *)a5 + 6);
    v15.i32[2] = *((_DWORD *)a5 + 14);
    v21 = (int8x16_t)vsubq_f32(result, v15);
    v22 = (float32x2_t)vextq_s8(v21, v21, 8uLL).u64[0];
    v23 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1), *(float32x2_t *)v21.i8, 1);
    v21.i64[0] = *(_QWORD *)(a4 + 48);
    v21.i32[2] = *(_DWORD *)(a4 + 56);
    result = vsubq_f32(result, (float32x4_t)v21);
    v24 = (float32x2_t)vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    if (vmla_f32(v23, v22, v22).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)result.f32, 1), *(float32x2_t *)result.f32, 1), v24, v24).f32[0])return result;
  }
  else
  {
    if (v16 == 4)
    {
      if (v18 != 4)
        goto LABEL_23;
    }
    else if (v18 == 4)
    {
      return result;
    }
    if (!(*((unsigned __int8 *)a5 + 112) | *(unsigned __int8 *)(a4 + 112)))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_91;
      }
      v16 = v17->i32[0];
    }
    v25 = *(_QWORD *)(a6 + 32);
    if (v16 == 1)
    {
      if (*(_BYTE *)(a4 + 112))
      {
        if (*(_BYTE *)(a4 + 108))
        {
          result.i32[0] = *(_DWORD *)(a4 + 104);
          if (result.f32[0] > 0.6)
            return result;
        }
        if (*(_BYTE *)(a4 + 100))
        {
          result.i32[0] = *(_DWORD *)(a4 + 96);
          if (result.f32[0] > *(float *)(*(_QWORD *)v25 + 8))
            return result;
        }
      }
    }
    else
    {
      if (!*((_BYTE *)a5 + 112))
        return result;
      if (!*((_BYTE *)a5 + 108) || (result.i32[0] = *((_DWORD *)a5 + 26), result.f32[0] <= 0.6))
      {
        if (!*((_BYTE *)a5 + 100))
          return result;
        result.i32[0] = *((_DWORD *)a5 + 24);
        if (result.f32[0] <= *(float *)(*(_QWORD *)v25 + 8))
          return result;
      }
    }
  }
LABEL_23:
  v77 = *(_OWORD *)a4;
  v81 = *(_OWORD *)(a4 + 16);
  v85 = *(_OWORD *)(a4 + 32);
  v89 = *(_OWORD *)(a4 + 48);
  v101 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)v105 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)&v105[9] = *(_OWORD *)(a4 + 121);
  v93 = *v19;
  v97 = *(_OWORD *)(a4 + 80);
  v26 = *a5;
  v27 = a5[1];
  v28 = a5[3];
  *(_OWORD *)(a4 + 32) = a5[2];
  *(_OWORD *)(a4 + 48) = v28;
  *(_OWORD *)a4 = v26;
  *(_OWORD *)(a4 + 16) = v27;
  *v19 = *v17;
  v29 = a5[5];
  v31 = (float32x4_t)a5[6];
  v30 = a5[7];
  *(_OWORD *)(a4 + 121) = *(__int128 *)((char *)a5 + 121);
  *(float32x4_t *)(a4 + 96) = v31;
  *(_OWORD *)(a4 + 112) = v30;
  *(_OWORD *)(a4 + 80) = v29;
  a5[2] = v85;
  a5[3] = v89;
  *a5 = v77;
  a5[1] = v81;
  *(__int128 *)((char *)a5 + 121) = *(_OWORD *)&v105[9];
  a5[6] = v101;
  a5[7] = *(_OWORD *)v105;
  result = v93;
  v31.i32[3] = HIDWORD(v97);
  *v17 = v93;
  a5[5] = v97;
  v32 = *(_DWORD *)(a4 + 64);
  v34 = (float32x4_t *)(a3 + 64);
  v33 = *(_DWORD *)(a3 + 64);
  if (v32 == v33)
  {
    v35 = **(_QWORD **)(a6 + 8);
    result.i64[0] = *(_QWORD *)v35;
    result.i32[2] = *(_DWORD *)(v35 + 8);
    v31.i64[0] = *(_QWORD *)(a4 + 48);
    v31.i32[2] = *(_DWORD *)(a4 + 56);
    v36 = (int8x16_t)vsubq_f32(result, v31);
    v37 = (float32x2_t)vextq_s8(v36, v36, 8uLL).u64[0];
    v38 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v36.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1), *(float32x2_t *)v36.i8, 1);
    v36.i64[0] = *(_QWORD *)(a3 + 48);
    v36.i32[2] = *(_DWORD *)(a3 + 56);
    result = vsubq_f32(result, (float32x4_t)v36);
    v39 = (float32x2_t)vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    if (vmla_f32(v38, v37, v37).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)result.f32, 1), *(float32x2_t *)result.f32, 1), v39, v39).f32[0])return result;
  }
  else
  {
    if (v32 == 4)
    {
      if (v33 != 4)
        goto LABEL_45;
    }
    else if (v33 == 4)
    {
      return result;
    }
    if (!(*(unsigned __int8 *)(a4 + 112) | *(unsigned __int8 *)(a3 + 112)))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_91;
      }
      v32 = v19->i32[0];
    }
    v40 = *(_QWORD *)(a6 + 32);
    if (v32 == 1)
    {
      if (*(_BYTE *)(a3 + 112))
      {
        if (*(_BYTE *)(a3 + 108))
        {
          result.i32[0] = *(_DWORD *)(a3 + 104);
          if (result.f32[0] > 0.6)
            return result;
        }
        if (*(_BYTE *)(a3 + 100))
        {
          result.i32[0] = *(_DWORD *)(a3 + 96);
          if (result.f32[0] > *(float *)(*(_QWORD *)v40 + 8))
            return result;
        }
      }
    }
    else
    {
      if (!*(_BYTE *)(a4 + 112))
        return result;
      if (!*(_BYTE *)(a4 + 108) || (result.i32[0] = *(_DWORD *)(a4 + 104), result.f32[0] <= 0.6))
      {
        if (!*(_BYTE *)(a4 + 100))
          return result;
        result.i32[0] = *(_DWORD *)(a4 + 96);
        if (result.f32[0] <= *(float *)(*(_QWORD *)v40 + 8))
          return result;
      }
    }
  }
LABEL_45:
  v78 = *(_OWORD *)a3;
  v82 = *(_OWORD *)(a3 + 16);
  v86 = *(_OWORD *)(a3 + 32);
  v90 = *(_OWORD *)(a3 + 48);
  v102 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)v106 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)&v106[9] = *(_OWORD *)(a3 + 121);
  v94 = *v34;
  v98 = *(_OWORD *)(a3 + 80);
  v41 = *(_OWORD *)a4;
  v42 = *(_OWORD *)(a4 + 16);
  v43 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a3 + 48) = v43;
  *(_OWORD *)a3 = v41;
  *(_OWORD *)(a3 + 16) = v42;
  *v34 = *v19;
  v44 = *(_OWORD *)(a4 + 80);
  v46 = *(float32x4_t *)(a4 + 96);
  v45 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a3 + 121) = *(_OWORD *)(a4 + 121);
  *(float32x4_t *)(a3 + 96) = v46;
  *(_OWORD *)(a3 + 112) = v45;
  *(_OWORD *)(a3 + 80) = v44;
  *(_OWORD *)(a4 + 32) = v86;
  *(_OWORD *)(a4 + 48) = v90;
  *(_OWORD *)a4 = v78;
  *(_OWORD *)(a4 + 16) = v82;
  *(_OWORD *)(a4 + 121) = *(_OWORD *)&v106[9];
  *(_OWORD *)(a4 + 96) = v102;
  *(_OWORD *)(a4 + 112) = *(_OWORD *)v106;
  result = v94;
  v46.i32[3] = HIDWORD(v98);
  *v19 = v94;
  *(_OWORD *)(a4 + 80) = v98;
  v47 = *(_DWORD *)(a3 + 64);
  v49 = (float32x4_t *)(a2 + 64);
  v48 = *(_DWORD *)(a2 + 64);
  if (v47 == v48)
  {
    v50 = **(_QWORD **)(a6 + 8);
    result.i64[0] = *(_QWORD *)v50;
    result.i32[2] = *(_DWORD *)(v50 + 8);
    v46.i64[0] = *(_QWORD *)(a3 + 48);
    v46.i32[2] = *(_DWORD *)(a3 + 56);
    v51 = (int8x16_t)vsubq_f32(result, v46);
    v52 = (float32x2_t)vextq_s8(v51, v51, 8uLL).u64[0];
    v53 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1), *(float32x2_t *)v51.i8, 1);
    v51.i64[0] = *(_QWORD *)(a2 + 48);
    v51.i32[2] = *(_DWORD *)(a2 + 56);
    result = vsubq_f32(result, (float32x4_t)v51);
    v54 = (float32x2_t)vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    if (vmla_f32(v53, v52, v52).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)result.f32, 1), *(float32x2_t *)result.f32, 1), v54, v54).f32[0])return result;
  }
  else
  {
    if (v47 == 4)
    {
      if (v48 != 4)
        goto LABEL_67;
    }
    else if (v48 == 4)
    {
      return result;
    }
    if (!(*(unsigned __int8 *)(a3 + 112) | *(unsigned __int8 *)(a2 + 112)))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_91;
      }
      v47 = v34->i32[0];
    }
    v55 = *(_QWORD *)(a6 + 32);
    if (v47 == 1)
    {
      if (*(_BYTE *)(a2 + 112))
      {
        if (*(_BYTE *)(a2 + 108))
        {
          result.i32[0] = *(_DWORD *)(a2 + 104);
          if (result.f32[0] > 0.6)
            return result;
        }
        if (*(_BYTE *)(a2 + 100))
        {
          result.i32[0] = *(_DWORD *)(a2 + 96);
          if (result.f32[0] > *(float *)(*(_QWORD *)v55 + 8))
            return result;
        }
      }
    }
    else
    {
      if (!*(_BYTE *)(a3 + 112))
        return result;
      if (!*(_BYTE *)(a3 + 108) || (result.i32[0] = *(_DWORD *)(a3 + 104), result.f32[0] <= 0.6))
      {
        if (!*(_BYTE *)(a3 + 100))
          return result;
        result.i32[0] = *(_DWORD *)(a3 + 96);
        if (result.f32[0] <= *(float *)(*(_QWORD *)v55 + 8))
          return result;
      }
    }
  }
LABEL_67:
  v79 = *(_OWORD *)a2;
  v83 = *(_OWORD *)(a2 + 16);
  v87 = *(_OWORD *)(a2 + 32);
  v91 = *(_OWORD *)(a2 + 48);
  v103 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)v107 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v107[9] = *(_OWORD *)(a2 + 121);
  v95 = *v49;
  v99 = *(_OWORD *)(a2 + 80);
  v56 = *(_OWORD *)a3;
  v57 = *(_OWORD *)(a3 + 16);
  v58 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v58;
  *(_OWORD *)a2 = v56;
  *(_OWORD *)(a2 + 16) = v57;
  *v49 = *v34;
  v59 = *(_OWORD *)(a3 + 80);
  v61 = *(float32x4_t *)(a3 + 96);
  v60 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 121) = *(_OWORD *)(a3 + 121);
  *(float32x4_t *)(a2 + 96) = v61;
  *(_OWORD *)(a2 + 112) = v60;
  *(_OWORD *)(a2 + 80) = v59;
  *(_OWORD *)(a3 + 32) = v87;
  *(_OWORD *)(a3 + 48) = v91;
  *(_OWORD *)a3 = v79;
  *(_OWORD *)(a3 + 16) = v83;
  *(_OWORD *)(a3 + 121) = *(_OWORD *)&v107[9];
  *(_OWORD *)(a3 + 96) = v103;
  *(_OWORD *)(a3 + 112) = *(_OWORD *)v107;
  result = v95;
  v61.i32[3] = HIDWORD(v99);
  *v34 = v95;
  *(_OWORD *)(a3 + 80) = v99;
  v62 = *(_DWORD *)(a2 + 64);
  v64 = (float32x4_t *)(a1 + 64);
  v63 = *(_DWORD *)(a1 + 64);
  if (v62 == v63)
  {
    v65 = **(_QWORD **)(a6 + 8);
    result.i64[0] = *(_QWORD *)v65;
    result.i32[2] = *(_DWORD *)(v65 + 8);
    v61.i64[0] = *(_QWORD *)(a2 + 48);
    v61.i32[2] = *(_DWORD *)(a2 + 56);
    v66 = (int8x16_t)vsubq_f32(result, v61);
    v67 = (float32x2_t)vextq_s8(v66, v66, 8uLL).u64[0];
    v68 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v66.i8, *(float32x2_t *)v66.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1), *(float32x2_t *)v66.i8, 1);
    v66.i64[0] = *(_QWORD *)(a1 + 48);
    v66.i32[2] = *(_DWORD *)(a1 + 56);
    result = vsubq_f32(result, (float32x4_t)v66);
    v69 = (float32x2_t)vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    if (vmla_f32(v68, v67, v67).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)result.f32, 1), *(float32x2_t *)result.f32, 1), v69, v69).f32[0])return result;
    goto LABEL_89;
  }
  if (v62 == 4)
  {
    if (v63 != 4)
    {
LABEL_89:
      v80 = *(_OWORD *)a1;
      v84 = *(_OWORD *)(a1 + 16);
      v88 = *(_OWORD *)(a1 + 32);
      v92 = *(_OWORD *)(a1 + 48);
      v104 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)v108 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)&v108[9] = *(_OWORD *)(a1 + 121);
      v96 = *v64;
      v100 = *(_OWORD *)(a1 + 80);
      v71 = *(_OWORD *)a2;
      v72 = *(_OWORD *)(a2 + 16);
      v73 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v73;
      *(_OWORD *)a1 = v71;
      *(_OWORD *)(a1 + 16) = v72;
      *v64 = *v49;
      v74 = *(_OWORD *)(a2 + 80);
      v75 = *(_OWORD *)(a2 + 96);
      v76 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
      *(_OWORD *)(a1 + 96) = v75;
      *(_OWORD *)(a1 + 112) = v76;
      *(_OWORD *)(a1 + 80) = v74;
      *(_OWORD *)(a2 + 32) = v88;
      *(_OWORD *)(a2 + 48) = v92;
      *(_OWORD *)a2 = v80;
      *(_OWORD *)(a2 + 16) = v84;
      *(_OWORD *)(a2 + 121) = *(_OWORD *)&v108[9];
      *(_OWORD *)(a2 + 96) = v104;
      *(_OWORD *)(a2 + 112) = *(_OWORD *)v108;
      result = v96;
      *v49 = v96;
      *(_OWORD *)(a2 + 80) = v100;
      return result;
    }
  }
  else if (v63 == 4)
  {
    return result;
  }
  if (*(unsigned __int8 *)(a2 + 112) | *(unsigned __int8 *)(a1 + 112))
    goto LABEL_77;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_91:
    abort();
  }
  v62 = v49->i32[0];
LABEL_77:
  v70 = *(_QWORD *)(a6 + 32);
  if (v62 == 1)
  {
    if (!*(_BYTE *)(a1 + 112))
      goto LABEL_89;
    if (!*(_BYTE *)(a1 + 108) || (result.i32[0] = *(_DWORD *)(a1 + 104), result.f32[0] <= 0.6))
    {
      if (!*(_BYTE *)(a1 + 100))
        goto LABEL_89;
      result.i32[0] = *(_DWORD *)(a1 + 96);
      if (result.f32[0] <= *(float *)(*(_QWORD *)v70 + 8))
        goto LABEL_89;
    }
  }
  else if (*(_BYTE *)(a2 + 112))
  {
    if (*(_BYTE *)(a2 + 108))
    {
      result.i32[0] = *(_DWORD *)(a2 + 104);
      if (result.f32[0] > 0.6)
        goto LABEL_89;
    }
    if (*(_BYTE *)(a2 + 100))
    {
      result.i32[0] = *(_DWORD *)(a2 + 96);
      if (result.f32[0] > *(float *)(*(_QWORD *)v70 + 8))
        goto LABEL_89;
    }
  }
  return result;
}

float32x4_t sub_20EF02FF4(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, float32x4_t result, float32x4_t a6)
{
  int v10;
  int *v11;
  int v12;
  int *v13;
  uint64_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  uint64_t v18;
  int v19;
  int *v20;
  uint64_t v21;
  int8x16_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  float32x4_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int8x16_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  uint64_t v40;
  __int32 v41;
  float32x4_t *v42;
  uint64_t v43;
  int8x16_t v44;
  float32x2_t v45;
  float32x2_t v46;
  int8x16_t v47;
  float32x2_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  float32x4_t v61;
  __int32 v62;
  int v63;
  uint64_t v64;
  int8x16_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[25];
  _BYTE v111[25];
  _BYTE v112[25];
  _BYTE v113[25];

  v11 = (int *)(a2 + 4);
  v10 = *((_DWORD *)a2 + 16);
  v13 = (int *)(a1 + 4);
  v12 = *((_DWORD *)a1 + 16);
  if (v10 == v12)
  {
    v14 = **(_QWORD **)(a4 + 8);
    result.i64[0] = *(_QWORD *)v14;
    result.i32[2] = *(_DWORD *)(v14 + 8);
    a6.i64[0] = *((_QWORD *)a2 + 6);
    a6.i32[2] = *((_DWORD *)a2 + 14);
    a6 = vsubq_f32(result, a6);
    v15 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
    v16 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1);
    a6.i64[0] = *((_QWORD *)a1 + 6);
    a6.i32[2] = *((_DWORD *)a1 + 14);
    result = vsubq_f32(result, a6);
    v17 = (float32x2_t)vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    if (vmla_f32(v16, v15, v15).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)result.f32, 1), *(float32x2_t *)result.f32, 1), v17, v17).f32[0])goto LABEL_64;
    goto LABEL_24;
  }
  if (v10 == 4)
  {
    if (v12 != 4)
    {
      v10 = 4;
      goto LABEL_64;
    }
  }
  else if (v12 == 4)
  {
    goto LABEL_24;
  }
  if (!(*((unsigned __int8 *)a2 + 112) | *((unsigned __int8 *)a1 + 112)))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_118;
    }
    v10 = *v11;
  }
  v18 = *(_QWORD *)(a4 + 32);
  if (v10 == 1)
  {
    if (!*((_BYTE *)a1 + 112))
      goto LABEL_63;
    if (*((_BYTE *)a1 + 108))
    {
      result.i32[0] = *((_DWORD *)a1 + 26);
      if (result.f32[0] > 0.6)
      {
        v10 = 1;
        goto LABEL_24;
      }
    }
    if (!*((_BYTE *)a1 + 100))
    {
LABEL_63:
      v10 = 1;
      goto LABEL_64;
    }
    result.i32[0] = *((_DWORD *)a1 + 24);
    v10 = 1;
    if (result.f32[0] <= *(float *)(*(_QWORD *)v18 + 8))
      goto LABEL_64;
LABEL_24:
    v20 = (int *)(a3 + 4);
    v19 = *((_DWORD *)a3 + 16);
    if (v19 == v10)
    {
      v21 = **(_QWORD **)(a4 + 8);
      result.i64[0] = *(_QWORD *)v21;
      result.i32[2] = *(_DWORD *)(v21 + 8);
      a6.i64[0] = *((_QWORD *)a3 + 6);
      a6.i32[2] = *((_DWORD *)a3 + 14);
      v22 = (int8x16_t)vsubq_f32(result, a6);
      v23 = (float32x2_t)vextq_s8(v22, v22, 8uLL).u64[0];
      v24 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1), *(float32x2_t *)v22.i8, 1);
      v22.i64[0] = *((_QWORD *)a2 + 6);
      v22.i32[2] = *((_DWORD *)a2 + 14);
      result = vsubq_f32(result, (float32x4_t)v22);
      v25 = (float32x2_t)vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
      if (vmla_f32(v24, v23, v23).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)result.f32, 1), *(float32x2_t *)result.f32, 1), v25, v25).f32[0])return result;
    }
    else
    {
      if (v19 == 4)
      {
        if (v10 != 4)
          goto LABEL_46;
      }
      else if (v10 == 4)
      {
        return result;
      }
      if (!(*((unsigned __int8 *)a3 + 112) | *((unsigned __int8 *)a2 + 112)))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_118;
        }
        v19 = *v20;
      }
      v26 = *(_QWORD *)(a4 + 32);
      if (v19 == 1)
      {
        if (*((_BYTE *)a2 + 112))
        {
          if (*((_BYTE *)a2 + 108))
          {
            result.i32[0] = *((_DWORD *)a2 + 26);
            if (result.f32[0] > 0.6)
              return result;
          }
          if (*((_BYTE *)a2 + 100))
          {
            result.i32[0] = *((_DWORD *)a2 + 24);
            if (result.f32[0] > *(float *)(*(_QWORD *)v26 + 8))
              return result;
          }
        }
      }
      else
      {
        if (!*((_BYTE *)a3 + 112))
          return result;
        if (!*((_BYTE *)a3 + 108) || (result.i32[0] = *((_DWORD *)a3 + 26), result.f32[0] <= 0.6))
        {
          if (!*((_BYTE *)a3 + 100))
            return result;
          result.i32[0] = *((_DWORD *)a3 + 24);
          if (result.f32[0] <= *(float *)(*(_QWORD *)v26 + 8))
            return result;
        }
      }
    }
LABEL_46:
    v82 = *a2;
    v86 = a2[1];
    v90 = a2[2];
    v94 = a2[3];
    v106 = *((_OWORD *)v11 + 2);
    *(_OWORD *)v110 = *((_OWORD *)v11 + 3);
    *(_OWORD *)&v110[9] = *(_OWORD *)((char *)v11 + 57);
    v98 = *(float32x4_t *)v11;
    v102 = *((_OWORD *)v11 + 1);
    v27 = *a3;
    v28 = a3[1];
    v29 = a3[3];
    a2[2] = a3[2];
    a2[3] = v29;
    *a2 = v27;
    a2[1] = v28;
    *(_OWORD *)v11 = *(_OWORD *)v20;
    v30 = a3[5];
    v32 = (float32x4_t)a3[6];
    v31 = a3[7];
    *(_OWORD *)((char *)v11 + 57) = *(__int128 *)((char *)a3 + 121);
    *((float32x4_t *)v11 + 2) = v32;
    *((_OWORD *)v11 + 3) = v31;
    *((_OWORD *)v11 + 1) = v30;
    a3[2] = v90;
    a3[3] = v94;
    *a3 = v82;
    a3[1] = v86;
    *(__int128 *)((char *)a3 + 121) = *(_OWORD *)&v110[9];
    a3[6] = v106;
    a3[7] = *(_OWORD *)v110;
    result = v98;
    v32.i32[3] = HIDWORD(v102);
    *(float32x4_t *)v20 = v98;
    a3[5] = v102;
    v33 = *((_DWORD *)a2 + 16);
    v34 = *v13;
    if (v33 == *v13)
    {
      v35 = **(_QWORD **)(a4 + 8);
      result.i64[0] = *(_QWORD *)v35;
      result.i32[2] = *(_DWORD *)(v35 + 8);
      v32.i64[0] = *((_QWORD *)a2 + 6);
      v32.i32[2] = *((_DWORD *)a2 + 14);
      v36 = (int8x16_t)vsubq_f32(result, v32);
      v37 = (float32x2_t)vextq_s8(v36, v36, 8uLL).u64[0];
      v38 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v36.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1), *(float32x2_t *)v36.i8, 1);
      v36.i64[0] = *((_QWORD *)a1 + 6);
      v36.i32[2] = *((_DWORD *)a1 + 14);
      result = vsubq_f32(result, (float32x4_t)v36);
      v39 = (float32x2_t)vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
      if (vmla_f32(v38, v37, v37).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)result.f32, 1), *(float32x2_t *)result.f32, 1), v39, v39).f32[0])return result;
    }
    else
    {
      if (v33 == 4)
      {
        if (v34 != 4)
          goto LABEL_109;
      }
      else if (v34 == 4)
      {
        return result;
      }
      if (!(*((unsigned __int8 *)a2 + 112) | *((unsigned __int8 *)a1 + 112)))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_118;
        }
        v33 = *v11;
      }
      v40 = *(_QWORD *)(a4 + 32);
      if (v33 == 1)
      {
        if (*((_BYTE *)a1 + 112))
        {
          if (*((_BYTE *)a1 + 108))
          {
            result.i32[0] = *((_DWORD *)a1 + 26);
            if (result.f32[0] > 0.6)
              return result;
          }
          if (*((_BYTE *)a1 + 100))
          {
            result.i32[0] = *((_DWORD *)a1 + 24);
            if (result.f32[0] > *(float *)(*(_QWORD *)v40 + 8))
              return result;
          }
        }
      }
      else
      {
        if (!*((_BYTE *)a2 + 112))
          return result;
        if (!*((_BYTE *)a2 + 108) || (result.i32[0] = *((_DWORD *)a2 + 26), result.f32[0] <= 0.6))
        {
          if (!*((_BYTE *)a2 + 100))
            return result;
          result.i32[0] = *((_DWORD *)a2 + 24);
          if (result.f32[0] <= *(float *)(*(_QWORD *)v40 + 8))
            return result;
        }
      }
    }
LABEL_109:
    v85 = *a1;
    v89 = a1[1];
    v93 = a1[2];
    v97 = a1[3];
    v109 = *((_OWORD *)v13 + 2);
    *(_OWORD *)v113 = *((_OWORD *)v13 + 3);
    *(_OWORD *)&v113[9] = *(_OWORD *)((char *)v13 + 57);
    v101 = *(float32x4_t *)v13;
    v105 = *((_OWORD *)v13 + 1);
    v70 = *a2;
    v71 = a2[1];
    v72 = a2[3];
    a1[2] = a2[2];
    a1[3] = v72;
    *a1 = v70;
    a1[1] = v71;
    *(_OWORD *)v13 = *(_OWORD *)v11;
    v73 = *((_OWORD *)v11 + 1);
    v74 = *((_OWORD *)v11 + 2);
    v75 = *((_OWORD *)v11 + 3);
    *(_OWORD *)((char *)v13 + 57) = *(_OWORD *)((char *)v11 + 57);
    *((_OWORD *)v13 + 2) = v74;
    *((_OWORD *)v13 + 3) = v75;
    *((_OWORD *)v13 + 1) = v73;
    a2[2] = v93;
    a2[3] = v97;
    *a2 = v85;
    a2[1] = v89;
    *(_OWORD *)((char *)v11 + 57) = *(_OWORD *)&v113[9];
    *((_OWORD *)v11 + 2) = v109;
    *((_OWORD *)v11 + 3) = *(_OWORD *)v113;
    result = v101;
    *(float32x4_t *)v11 = v101;
    *((_OWORD *)v11 + 1) = v105;
    return result;
  }
  if (!*((_BYTE *)a2 + 112))
    goto LABEL_24;
  if (!*((_BYTE *)a2 + 108) || (result.i32[0] = *((_DWORD *)a2 + 26), result.f32[0] <= 0.6))
  {
    if (!*((_BYTE *)a2 + 100))
      goto LABEL_24;
    result.i32[0] = *((_DWORD *)a2 + 24);
    if (result.f32[0] <= *(float *)(*(_QWORD *)v18 + 8))
      goto LABEL_24;
  }
LABEL_64:
  v42 = (float32x4_t *)(a3 + 4);
  v41 = *((_DWORD *)a3 + 16);
  if (v41 == v10)
  {
    v43 = **(_QWORD **)(a4 + 8);
    result.i64[0] = *(_QWORD *)v43;
    result.i32[2] = *(_DWORD *)(v43 + 8);
    a6.i64[0] = *((_QWORD *)a3 + 6);
    a6.i32[2] = *((_DWORD *)a3 + 14);
    v44 = (int8x16_t)vsubq_f32(result, a6);
    v45 = (float32x2_t)vextq_s8(v44, v44, 8uLL).u64[0];
    v46 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1), *(float32x2_t *)v44.i8, 1);
    v44.i64[0] = *((_QWORD *)a2 + 6);
    v44.i32[2] = *((_DWORD *)a2 + 14);
    v47 = (int8x16_t)vsubq_f32(result, (float32x4_t)v44);
    v48 = (float32x2_t)vextq_s8(v47, v47, 8uLL).u64[0];
    if (vmla_f32(v46, v45, v45).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), *(float32x2_t *)v47.i8, 1), v48, v48).f32[0])
    {
LABEL_86:
      v83 = *a1;
      v87 = a1[1];
      v91 = a1[2];
      v95 = a1[3];
      v107 = *((_OWORD *)v13 + 2);
      *(_OWORD *)v111 = *((_OWORD *)v13 + 3);
      *(_OWORD *)&v111[9] = *(_OWORD *)((char *)v13 + 57);
      v99 = *(float32x4_t *)v13;
      v103 = *((_OWORD *)v13 + 1);
      v50 = *a3;
      v51 = a3[1];
      v52 = a3[3];
      a1[2] = a3[2];
      a1[3] = v52;
      *a1 = v50;
      a1[1] = v51;
      *(float32x4_t *)v13 = *v42;
      v53 = a3[5];
      v54 = a3[6];
      v55 = a3[7];
      *(_OWORD *)((char *)v13 + 57) = *(__int128 *)((char *)a3 + 121);
      *((_OWORD *)v13 + 2) = v54;
      *((_OWORD *)v13 + 3) = v55;
      *((_OWORD *)v13 + 1) = v53;
LABEL_116:
      a3[2] = v91;
      a3[3] = v95;
      *a3 = v83;
      a3[1] = v87;
      *(__int128 *)((char *)a3 + 121) = *(_OWORD *)&v111[9];
      a3[6] = v107;
      a3[7] = *(_OWORD *)v111;
      result = v99;
      *v42 = v99;
      a3[5] = v103;
      return result;
    }
  }
  else
  {
    if (v41 == 4)
    {
      if (v10 != 4)
        goto LABEL_86;
    }
    else if (v10 == 4)
    {
      goto LABEL_87;
    }
    if (!(*((unsigned __int8 *)a3 + 112) | *((unsigned __int8 *)a2 + 112)))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_118;
      }
      v41 = v42->i32[0];
    }
    v49 = *(_QWORD *)(a4 + 32);
    if (v41 == 1)
    {
      if (!*((_BYTE *)a2 + 112)
        || (!*((_BYTE *)a2 + 108) || *((float *)a2 + 26) <= 0.6)
        && (!*((_BYTE *)a2 + 100) || *((float *)a2 + 24) <= *(float *)(*(_QWORD *)v49 + 8)))
      {
        goto LABEL_86;
      }
    }
    else if (*((_BYTE *)a3 + 112)
           && (*((_BYTE *)a3 + 108) && *((float *)a3 + 26) > 0.6
            || *((_BYTE *)a3 + 100) && *((float *)a3 + 24) > *(float *)(*(_QWORD *)v49 + 8)))
    {
      goto LABEL_86;
    }
  }
LABEL_87:
  v84 = *a1;
  v88 = a1[1];
  v92 = a1[2];
  v96 = a1[3];
  v108 = *((_OWORD *)v13 + 2);
  *(_OWORD *)v112 = *((_OWORD *)v13 + 3);
  *(_OWORD *)&v112[9] = *(_OWORD *)((char *)v13 + 57);
  v100 = *(float32x4_t *)v13;
  v104 = *((_OWORD *)v13 + 1);
  v56 = *a2;
  v57 = a2[1];
  v58 = a2[3];
  a1[2] = a2[2];
  a1[3] = v58;
  *a1 = v56;
  a1[1] = v57;
  *(_OWORD *)v13 = *(_OWORD *)v11;
  v59 = *((_OWORD *)v11 + 1);
  v61 = *((float32x4_t *)v11 + 2);
  v60 = *((_OWORD *)v11 + 3);
  *(_OWORD *)((char *)v13 + 57) = *(_OWORD *)((char *)v11 + 57);
  *((float32x4_t *)v13 + 2) = v61;
  *((_OWORD *)v13 + 3) = v60;
  *((_OWORD *)v13 + 1) = v59;
  a2[2] = v92;
  a2[3] = v96;
  *a2 = v84;
  a2[1] = v88;
  *(_OWORD *)((char *)v11 + 57) = *(_OWORD *)&v112[9];
  *((_OWORD *)v11 + 2) = v108;
  *((_OWORD *)v11 + 3) = *(_OWORD *)v112;
  result = v100;
  v61.i32[3] = HIDWORD(v104);
  *(float32x4_t *)v11 = v100;
  *((_OWORD *)v11 + 1) = v104;
  v62 = v42->i32[0];
  v63 = *((_DWORD *)a2 + 16);
  if (v42->i32[0] == v63)
  {
    v64 = **(_QWORD **)(a4 + 8);
    result.i64[0] = *(_QWORD *)v64;
    result.i32[2] = *(_DWORD *)(v64 + 8);
    v61.i64[0] = *((_QWORD *)a3 + 6);
    v61.i32[2] = *((_DWORD *)a3 + 14);
    v65 = (int8x16_t)vsubq_f32(result, v61);
    v66 = (float32x2_t)vextq_s8(v65, v65, 8uLL).u64[0];
    v67 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v65.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1), *(float32x2_t *)v65.i8, 1);
    v65.i64[0] = *((_QWORD *)a2 + 6);
    v65.i32[2] = *((_DWORD *)a2 + 14);
    result = vsubq_f32(result, (float32x4_t)v65);
    v68 = (float32x2_t)vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    if (vmla_f32(v67, v66, v66).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)result.f32, 1), *(float32x2_t *)result.f32, 1), v68, v68).f32[0])return result;
    goto LABEL_115;
  }
  if (v62 == 4)
  {
    if (v63 != 4)
    {
LABEL_115:
      v83 = *a2;
      v87 = a2[1];
      v91 = a2[2];
      v95 = a2[3];
      v107 = *((_OWORD *)v11 + 2);
      *(_OWORD *)v111 = *((_OWORD *)v11 + 3);
      *(_OWORD *)&v111[9] = *(_OWORD *)((char *)v11 + 57);
      v99 = *(float32x4_t *)v11;
      v103 = *((_OWORD *)v11 + 1);
      v76 = *a3;
      v77 = a3[1];
      v78 = a3[3];
      a2[2] = a3[2];
      a2[3] = v78;
      *a2 = v76;
      a2[1] = v77;
      *(float32x4_t *)v11 = *v42;
      v79 = a3[5];
      v80 = a3[6];
      v81 = a3[7];
      *(_OWORD *)((char *)v11 + 57) = *(__int128 *)((char *)a3 + 121);
      *((_OWORD *)v11 + 2) = v80;
      *((_OWORD *)v11 + 3) = v81;
      *((_OWORD *)v11 + 1) = v79;
      goto LABEL_116;
    }
  }
  else if (v63 == 4)
  {
    return result;
  }
  if (*((unsigned __int8 *)a3 + 112) | *((unsigned __int8 *)a2 + 112))
    goto LABEL_97;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_118:
    abort();
  }
  v62 = v42->i32[0];
LABEL_97:
  v69 = *(_QWORD *)(a4 + 32);
  if (v62 == 1)
  {
    if (!*((_BYTE *)a2 + 112))
      goto LABEL_115;
    if (!*((_BYTE *)a2 + 108) || (result.i32[0] = *((_DWORD *)a2 + 26), result.f32[0] <= 0.6))
    {
      if (!*((_BYTE *)a2 + 100))
        goto LABEL_115;
      result.i32[0] = *((_DWORD *)a2 + 24);
      if (result.f32[0] <= *(float *)(*(_QWORD *)v69 + 8))
        goto LABEL_115;
    }
  }
  else if (*((_BYTE *)a3 + 112))
  {
    if (*((_BYTE *)a3 + 108))
    {
      result.i32[0] = *((_DWORD *)a3 + 26);
      if (result.f32[0] > 0.6)
        goto LABEL_115;
    }
    if (*((_BYTE *)a3 + 100))
    {
      result.i32[0] = *((_DWORD *)a3 + 24);
      if (result.f32[0] > *(float *)(*(_QWORD *)v69 + 8))
        goto LABEL_115;
    }
  }
  return result;
}

BOOL sub_20EF03A18(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t a4, float32x4_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BOOL8 result;
  int v10;
  __int128 *v11;
  int v12;
  __int128 *v13;
  uint64_t v14;
  int8x16_t v15;
  float32x2_t v16;
  float32x2_t v17;
  int8x16_t v18;
  float32x2_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _OWORD *v31;
  uint64_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  float v39;
  uint64_t v40;
  float v41;
  int v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  float32x4_t v47;
  _BOOL8 v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t v52;
  float32x2_t v53;
  float32x2_t v54;
  int8x16_t v55;
  float32x2_t v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  __int128 *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  int v85;
  uint64_t v86;
  float32x4_t v87;
  __int16 v89;
  char v90;
  __int16 v91;
  char v92;
  __int128 v93;
  uint64_t v94;
  _BYTE v95[28];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[25];

  v5 = a3;
  v6 = a2;
  v7 = a1;
  v8 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 4);
  result = 1;
  switch(v8)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v11 = (__int128 *)(a2 - 80);
      v10 = *(_DWORD *)(a2 - 80);
      v13 = (__int128 *)(v7 + 64);
      v12 = *(_DWORD *)(v7 + 64);
      if (v10 == v12)
      {
        v14 = **(_QWORD **)(a3 + 8);
        a4.i64[0] = *(_QWORD *)v14;
        a4.i32[2] = *(_DWORD *)(v14 + 8);
        a5.i64[0] = *(_QWORD *)(a2 - 96);
        a5.i32[2] = *(_DWORD *)(a2 - 88);
        v15 = (int8x16_t)vsubq_f32(a4, a5);
        v16 = (float32x2_t)vextq_s8(v15, v15, 8uLL).u64[0];
        v17 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1), *(float32x2_t *)v15.i8, 1);
        v15.i64[0] = *(_QWORD *)(v7 + 48);
        v15.i32[2] = *(_DWORD *)(v7 + 56);
        v18 = (int8x16_t)vsubq_f32(a4, (float32x4_t)v15);
        v19 = (float32x2_t)vextq_s8(v18, v18, 8uLL).u64[0];
        if (vmla_f32(v17, v16, v16).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1), *(float32x2_t *)v18.i8, 1), v19, v19).f32[0])return result;
LABEL_98:
        v75 = (__int128 *)(v6 - 144);
        v97 = *(_OWORD *)v7;
        v99 = *(_OWORD *)(v7 + 16);
        v101 = *(_OWORD *)(v7 + 32);
        v102 = *(_OWORD *)(v7 + 48);
        v105 = *(_OWORD *)(v7 + 96);
        *(_OWORD *)v106 = *(_OWORD *)(v7 + 112);
        *(_OWORD *)&v106[9] = *(_OWORD *)(v7 + 121);
        v103 = *v13;
        v104 = *(_OWORD *)(v7 + 80);
        v76 = *(_OWORD *)(v6 - 144);
        v77 = *(_OWORD *)(v6 - 128);
        v78 = *(_OWORD *)(v6 - 96);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v6 - 112);
        *(_OWORD *)(v7 + 48) = v78;
        *(_OWORD *)v7 = v76;
        *(_OWORD *)(v7 + 16) = v77;
        *v13 = *v11;
        v79 = *(_OWORD *)(v6 - 64);
        v80 = *(_OWORD *)(v6 - 48);
        v81 = *(_OWORD *)(v6 - 32);
        *(_OWORD *)(v7 + 121) = *(_OWORD *)(v6 - 23);
        *(_OWORD *)(v7 + 96) = v80;
        *(_OWORD *)(v7 + 112) = v81;
        *(_OWORD *)(v7 + 80) = v79;
        v75[2] = v101;
        v75[3] = v102;
        *v75 = v97;
        v75[1] = v99;
        *(_OWORD *)(v6 - 23) = *(_OWORD *)&v106[9];
        *(_OWORD *)(v6 - 48) = v105;
        *(_OWORD *)(v6 - 32) = *(_OWORD *)v106;
        result = 1;
        *v11 = v103;
        *(_OWORD *)(v6 - 64) = v104;
        return result;
      }
      if (v10 == 4)
      {
        if (v12 != 4)
          goto LABEL_98;
      }
      else if (v12 == 4)
      {
        return result;
      }
      if (*(unsigned __int8 *)(a2 - 32) | *(unsigned __int8 *)(v7 + 112))
        goto LABEL_85;
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        v10 = *(_DWORD *)v11;
        v5 = a3;
LABEL_85:
        v74 = *(_QWORD *)(v5 + 32);
        if (v10 == 1)
        {
          if (*(_BYTE *)(v7 + 112)
            && (*(_BYTE *)(v7 + 108) && *(float *)(v7 + 104) > 0.6
             || *(_BYTE *)(v7 + 100) && *(float *)(v7 + 96) > *(float *)(*(_QWORD *)v74 + 8)))
          {
            return 1;
          }
        }
        else if (!*(_BYTE *)(v6 - 32)
               || (!*(_BYTE *)(v6 - 36) || *(float *)(v6 - 40) <= 0.6)
               && (!*(_BYTE *)(v6 - 44) || *(float *)(v6 - 48) <= *(float *)(*(_QWORD *)v74 + 8)))
        {
          return 1;
        }
        goto LABEL_98;
      }
      goto LABEL_99;
    case 3uLL:
      sub_20EF02FF4((__int128 *)v7, (__int128 *)(v7 + 144), (__int128 *)(a2 - 144), a3, a4, a5);
      return 1;
    case 4uLL:
      sub_20EF04314(v7, v7 + 144, v7 + 288, (__int128 *)(a2 - 144), a3, a4, a5);
      return 1;
    case 5uLL:
      sub_20EF02798(v7, v7 + 144, v7 + 288, v7 + 432, (__int128 *)(a2 - 144), a3, a4, a5);
      return 1;
    default:
      v20 = v7 + 288;
      v21 = sub_20EF02FF4((__int128 *)v7, (__int128 *)(v7 + 144), (__int128 *)(v7 + 288), a3, a4, a5);
      v24 = v7 + 432;
      if (v7 + 432 == v6)
        return 1;
      v25 = 0;
      v26 = 0;
      v27 = a3;
      v82 = v6;
LABEL_10:
      v28 = v24 + 64;
      v29 = *(_DWORD *)(v24 + 64);
      v31 = (_OWORD *)(v20 + 64);
      v30 = *(_DWORD *)(v20 + 64);
      if (v29 == v30)
      {
        v32 = **(_QWORD **)(v27 + 8);
        v21.i64[0] = *(_QWORD *)v32;
        v21.i32[2] = *(_DWORD *)(v32 + 8);
        v22.i64[0] = *(_QWORD *)(v24 + 48);
        v22.i32[2] = *(_DWORD *)(v24 + 56);
        v22 = vsubq_f32(v21, v22);
        v33 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
        v34 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.f32, 1), *(float32x2_t *)v22.f32, 1);
        v22.i64[0] = *(_QWORD *)(v20 + 48);
        v22.i32[2] = *(_DWORD *)(v20 + 56);
        v21 = vsubq_f32(v21, v22);
        v35 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
        if (vmla_f32(v34, v33, v33).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.f32, 1), *(float32x2_t *)v21.f32, 1), v35, v35).f32[0])goto LABEL_9;
      }
      else
      {
        if (v29 == 4)
        {
          if (v30 != 4)
          {
            v29 = 4;
            goto LABEL_32;
          }
        }
        else if (v30 == 4)
        {
          goto LABEL_9;
        }
        if (!(*(unsigned __int8 *)(v24 + 112) | *(unsigned __int8 *)(v20 + 112)))
        {
          v36 = v24;
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_99;
          }
          v29 = *(_DWORD *)v28;
          v27 = a3;
          v24 = v36;
        }
        v37 = *(_QWORD *)(v27 + 32);
        if (v29 == 1)
        {
          if (*(_BYTE *)(v20 + 112)
            && (*(_BYTE *)(v20 + 108) && *(float *)(v20 + 104) > 0.6
             || *(_BYTE *)(v20 + 100) && *(float *)(v20 + 96) > *(float *)(*(_QWORD *)v37 + 8)))
          {
            goto LABEL_9;
          }
          v29 = 1;
        }
        else if (!*(_BYTE *)(v24 + 112)
               || (!*(_BYTE *)(v24 + 108) || *(float *)(v24 + 104) <= 0.6)
               && (!*(_BYTE *)(v24 + 100) || *(float *)(v24 + 96) <= *(float *)(*(_QWORD *)v37 + 8)))
        {
          goto LABEL_9;
        }
      }
LABEL_32:
      v96 = *(_OWORD *)v24;
      v98 = *(_OWORD *)(v24 + 16);
      v23.i64[0] = *(_QWORD *)(v24 + 48);
      v23.i32[2] = *(_DWORD *)(v24 + 56);
      v100 = *(_OWORD *)(v24 + 32);
      v38 = *(_DWORD *)(v24 + 60);
      *(_OWORD *)v95 = *(_OWORD *)(v24 + 68);
      *(_OWORD *)&v95[12] = *(_OWORD *)(v24 + 80);
      v39 = *(float *)(v24 + 96);
      v40 = *(unsigned __int8 *)(v24 + 100);
      v92 = *(_BYTE *)(v24 + 103);
      v91 = *(_WORD *)(v24 + 101);
      v41 = *(float *)(v24 + 104);
      v42 = *(unsigned __int8 *)(v24 + 108);
      v89 = *(_WORD *)(v24 + 109);
      v90 = *(_BYTE *)(v24 + 111);
      v43 = *(unsigned __int8 *)(v24 + 112);
      v94 = *(_QWORD *)(v24 + 129);
      v93 = *(_OWORD *)(v24 + 113);
      v44 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v24 + 32) = *(_OWORD *)(v20 + 32);
      *(_OWORD *)(v24 + 48) = v44;
      v45 = *(_OWORD *)(v20 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v20;
      *(_OWORD *)(v24 + 16) = v45;
      v46 = *(_OWORD *)(v20 + 112);
      *(_OWORD *)(v28 + 32) = *(_OWORD *)(v20 + 96);
      *(_OWORD *)(v28 + 48) = v46;
      *(_OWORD *)(v28 + 57) = *(_OWORD *)(v20 + 121);
      v47 = *(float32x4_t *)(v20 + 80);
      *(_OWORD *)v28 = *v31;
      *(float32x4_t *)(v28 + 16) = v47;
      if (v20 == v7)
      {
        v20 = v7;
        goto LABEL_8;
      }
      v83 = v24;
      v84 = v42;
      v85 = v26;
      v49 = v41 > 0.6 && v42 != 0;
      v50 = v25;
      v86 = v25;
      v87 = v23;
      break;
  }
  while (1)
  {
    v63 = v7 + v50;
    v65 = v7 + v50 + 208;
    v64 = *(_DWORD *)v65;
    if (v29 == *(_DWORD *)v65)
    {
      v51 = **(_QWORD **)(v27 + 8);
      v47.i64[0] = *(_QWORD *)v51;
      v47.i32[2] = *(_DWORD *)(v51 + 8);
      v52 = (int8x16_t)vsubq_f32(v47, v23);
      v53 = (float32x2_t)vextq_s8(v52, v52, 8uLL).u64[0];
      v54 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 1), *(float32x2_t *)v52.i8, 1);
      v52.i64[0] = *(_QWORD *)(v63 + 192);
      v52.i32[2] = *(_DWORD *)(v63 + 200);
      v55 = (int8x16_t)vsubq_f32(v47, (float32x4_t)v52);
      v56 = (float32x2_t)vextq_s8(v55, v55, 8uLL).u64[0];
      if (vmla_f32(v54, v53, v53).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1), *(float32x2_t *)v55.i8, 1), v56, v56).f32[0])
      {
        v31 = (_OWORD *)(v7 + v50 + 352);
        v20 = v7 + v50 + 288;
        goto LABEL_67;
      }
      goto LABEL_41;
    }
    if (v29 != 4)
      break;
    if (v64 == 4)
    {
      if (v43 || *(_BYTE *)(v7 + v50 + 256))
      {
        v66 = *(_QWORD *)(v27 + 32);
LABEL_51:
        if (!v43 || !v49 && (!(_DWORD)v40 || v39 <= *(float *)(*(_QWORD *)v66 + 8)))
          goto LABEL_67;
        goto LABEL_41;
      }
      v73 = v40;
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        v31 = (_OWORD *)(v7 + v50 + 352);
        v20 = v7 + v50 + 288;
        v6 = v82;
        v27 = a3;
        v26 = v85;
        v23 = v87;
        LOBYTE(v40) = v73;
        v25 = v86;
        goto LABEL_68;
      }
LABEL_99:
      abort();
    }
LABEL_41:
    v31 = (_OWORD *)(v20 - 80);
    v57 = *(_OWORD *)(v65 - 48);
    v20 -= 144;
    *(_OWORD *)(v65 + 80) = *(_OWORD *)(v65 - 64);
    *(_OWORD *)(v65 + 96) = v57;
    v58 = *(_OWORD *)(v65 - 16);
    *(_OWORD *)(v65 + 112) = *(_OWORD *)(v65 - 32);
    *(_OWORD *)(v65 + 128) = v58;
    v59 = (_OWORD *)(v7 + v50);
    v60 = v7 + v50 + 352;
    v61 = *(_OWORD *)(v65 + 48);
    v59[24] = *(_OWORD *)(v65 + 32);
    v59[25] = v61;
    v62 = *(_OWORD *)(v65 + 16);
    v59[22] = *(_OWORD *)v65;
    v59[23] = v62;
    v47 = *(float32x4_t *)(v65 + 57);
    v50 -= 144;
    *(float32x4_t *)(v60 + 57) = v47;
    if (v50 == -288)
    {
      v31 = (_OWORD *)(v7 + 64);
      v20 = v7;
LABEL_67:
      v6 = v82;
      v26 = v85;
LABEL_68:
      LOBYTE(v42) = v84;
      goto LABEL_69;
    }
  }
  if (v64 == 4)
    goto LABEL_67;
  v67 = v7 + v50;
  v68 = *(unsigned __int8 *)(v7 + v50 + 256);
  if (v43 | v68)
  {
    v66 = *(_QWORD *)(v27 + 32);
    if (v29 == 1)
      goto LABEL_59;
    goto LABEL_51;
  }
  v69 = v7;
  v70 = v49;
  v71 = v40;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_99;
  }
  v23 = v87;
  if (v29 == 1)
  {
    v27 = a3;
    v66 = *(_QWORD *)(a3 + 32);
    v68 = *(unsigned __int8 *)(v67 + 256);
    v40 = v71;
    v25 = v86;
    v49 = v70;
    v7 = v69;
LABEL_59:
    if (v68)
    {
      v72 = v7 + v50;
      if (*(_BYTE *)(v7 + v50 + 252))
      {
        if (*(float *)(v72 + 248) > 0.6)
          goto LABEL_67;
      }
      if (*(_BYTE *)(v72 + 244) && *(float *)(v7 + v50 + 240) > *(float *)(*(_QWORD *)v66 + 8))
        goto LABEL_67;
    }
    goto LABEL_41;
  }
  v6 = v82;
  v27 = a3;
  LOBYTE(v42) = v84;
  v26 = v85;
  LOBYTE(v40) = v71;
  v25 = v86;
  v7 = v69;
LABEL_69:
  v24 = v83;
LABEL_8:
  v22.i32[3] = HIDWORD(v98);
  *(_OWORD *)(v20 + 16) = v98;
  *(_OWORD *)(v20 + 32) = v100;
  *(_OWORD *)v20 = v96;
  *(_DWORD *)(v20 + 56) = v23.i32[2];
  *(_QWORD *)(v20 + 48) = v23.i64[0];
  *(_DWORD *)(v20 + 60) = v38;
  *(_DWORD *)v31 = v29;
  *(_OWORD *)(v20 + 68) = *(_OWORD *)v95;
  *(_OWORD *)(v20 + 80) = *(_OWORD *)&v95[12];
  *(float *)(v20 + 96) = v39;
  *(_BYTE *)(v20 + 100) = v40;
  *(_WORD *)(v20 + 101) = v91;
  *(_BYTE *)(v20 + 103) = v92;
  *(float *)(v20 + 104) = v41;
  *(_BYTE *)(v20 + 108) = v42;
  *(_WORD *)(v20 + 109) = v89;
  *(_BYTE *)(v20 + 111) = v90;
  *(_BYTE *)(v20 + 112) = v43;
  v21.i32[3] = HIDWORD(v93);
  *(_QWORD *)(v20 + 129) = v94;
  ++v26;
  *(_OWORD *)(v20 + 113) = v93;
  if (v26 == 8)
    return v24 + 144 == v6;
LABEL_9:
  v20 = v24;
  v25 += 144;
  v24 += 144;
  if (v24 != v6)
    goto LABEL_10;
  return 1;
}

float32x4_t sub_20EF04314(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t result;
  float32x4_t v13;
  int v14;
  float32x4_t *v15;
  int v16;
  float32x4_t *v17;
  uint64_t v18;
  int8x16_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float32x4_t v29;
  __int32 v30;
  int v31;
  float32x4_t *v32;
  uint64_t v33;
  int8x16_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  float32x4_t v44;
  __int32 v45;
  int v46;
  float32x4_t *v47;
  uint64_t v48;
  int8x16_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[25];
  _BYTE v82[25];
  _BYTE v83[25];

  result = sub_20EF02FF4((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5, a6, a7);
  v15 = (float32x4_t *)(a4 + 4);
  v14 = *((_DWORD *)a4 + 16);
  v17 = (float32x4_t *)(a3 + 64);
  v16 = *(_DWORD *)(a3 + 64);
  if (v14 == v16)
  {
    v18 = **(_QWORD **)(a5 + 8);
    result.i64[0] = *(_QWORD *)v18;
    result.i32[2] = *(_DWORD *)(v18 + 8);
    v13.i64[0] = *((_QWORD *)a4 + 6);
    v13.i32[2] = *((_DWORD *)a4 + 14);
    v19 = (int8x16_t)vsubq_f32(result, v13);
    v20 = (float32x2_t)vextq_s8(v19, v19, 8uLL).u64[0];
    v21 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1), *(float32x2_t *)v19.i8, 1);
    v19.i64[0] = *(_QWORD *)(a3 + 48);
    v19.i32[2] = *(_DWORD *)(a3 + 56);
    result = vsubq_f32(result, (float32x4_t)v19);
    v22 = (float32x2_t)vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    if (vmla_f32(v21, v20, v20).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)result.f32, 1), *(float32x2_t *)result.f32, 1), v22, v22).f32[0])return result;
  }
  else
  {
    if (v14 == 4)
    {
      if (v16 != 4)
        goto LABEL_23;
    }
    else if (v16 == 4)
    {
      return result;
    }
    if (!(*((unsigned __int8 *)a4 + 112) | *(unsigned __int8 *)(a3 + 112)))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_69;
      }
      v14 = v15->i32[0];
    }
    v23 = *(_QWORD *)(a5 + 32);
    if (v14 == 1)
    {
      if (*(_BYTE *)(a3 + 112))
      {
        if (*(_BYTE *)(a3 + 108))
        {
          result.i32[0] = *(_DWORD *)(a3 + 104);
          if (result.f32[0] > 0.6)
            return result;
        }
        if (*(_BYTE *)(a3 + 100))
        {
          result.i32[0] = *(_DWORD *)(a3 + 96);
          if (result.f32[0] > *(float *)(*(_QWORD *)v23 + 8))
            return result;
        }
      }
    }
    else
    {
      if (!*((_BYTE *)a4 + 112))
        return result;
      if (!*((_BYTE *)a4 + 108) || (result.i32[0] = *((_DWORD *)a4 + 26), result.f32[0] <= 0.6))
      {
        if (!*((_BYTE *)a4 + 100))
          return result;
        result.i32[0] = *((_DWORD *)a4 + 24);
        if (result.f32[0] <= *(float *)(*(_QWORD *)v23 + 8))
          return result;
      }
    }
  }
LABEL_23:
  v60 = *(_OWORD *)a3;
  v63 = *(_OWORD *)(a3 + 16);
  v66 = *(_OWORD *)(a3 + 32);
  v69 = *(_OWORD *)(a3 + 48);
  v78 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)v81 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)&v81[9] = *(_OWORD *)(a3 + 121);
  v72 = *v17;
  v75 = *(_OWORD *)(a3 + 80);
  v24 = *a4;
  v25 = a4[1];
  v26 = a4[3];
  *(_OWORD *)(a3 + 32) = a4[2];
  *(_OWORD *)(a3 + 48) = v26;
  *(_OWORD *)a3 = v24;
  *(_OWORD *)(a3 + 16) = v25;
  *v17 = *v15;
  v27 = a4[5];
  v29 = (float32x4_t)a4[6];
  v28 = a4[7];
  *(_OWORD *)(a3 + 121) = *(__int128 *)((char *)a4 + 121);
  *(float32x4_t *)(a3 + 96) = v29;
  *(_OWORD *)(a3 + 112) = v28;
  *(_OWORD *)(a3 + 80) = v27;
  a4[2] = v66;
  a4[3] = v69;
  *a4 = v60;
  a4[1] = v63;
  *(__int128 *)((char *)a4 + 121) = *(_OWORD *)&v81[9];
  a4[6] = v78;
  a4[7] = *(_OWORD *)v81;
  result = v72;
  v29.i32[3] = HIDWORD(v75);
  *v15 = v72;
  a4[5] = v75;
  v30 = *(_DWORD *)(a3 + 64);
  v32 = (float32x4_t *)(a2 + 64);
  v31 = *(_DWORD *)(a2 + 64);
  if (v30 == v31)
  {
    v33 = **(_QWORD **)(a5 + 8);
    result.i64[0] = *(_QWORD *)v33;
    result.i32[2] = *(_DWORD *)(v33 + 8);
    v29.i64[0] = *(_QWORD *)(a3 + 48);
    v29.i32[2] = *(_DWORD *)(a3 + 56);
    v34 = (int8x16_t)vsubq_f32(result, v29);
    v35 = (float32x2_t)vextq_s8(v34, v34, 8uLL).u64[0];
    v36 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1), *(float32x2_t *)v34.i8, 1);
    v34.i64[0] = *(_QWORD *)(a2 + 48);
    v34.i32[2] = *(_DWORD *)(a2 + 56);
    result = vsubq_f32(result, (float32x4_t)v34);
    v37 = (float32x2_t)vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    if (vmla_f32(v36, v35, v35).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)result.f32, 1), *(float32x2_t *)result.f32, 1), v37, v37).f32[0])return result;
  }
  else
  {
    if (v30 == 4)
    {
      if (v31 != 4)
        goto LABEL_45;
    }
    else if (v31 == 4)
    {
      return result;
    }
    if (!(*(unsigned __int8 *)(a3 + 112) | *(unsigned __int8 *)(a2 + 112)))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_69;
      }
      v30 = v17->i32[0];
    }
    v38 = *(_QWORD *)(a5 + 32);
    if (v30 == 1)
    {
      if (*(_BYTE *)(a2 + 112))
      {
        if (*(_BYTE *)(a2 + 108))
        {
          result.i32[0] = *(_DWORD *)(a2 + 104);
          if (result.f32[0] > 0.6)
            return result;
        }
        if (*(_BYTE *)(a2 + 100))
        {
          result.i32[0] = *(_DWORD *)(a2 + 96);
          if (result.f32[0] > *(float *)(*(_QWORD *)v38 + 8))
            return result;
        }
      }
    }
    else
    {
      if (!*(_BYTE *)(a3 + 112))
        return result;
      if (!*(_BYTE *)(a3 + 108) || (result.i32[0] = *(_DWORD *)(a3 + 104), result.f32[0] <= 0.6))
      {
        if (!*(_BYTE *)(a3 + 100))
          return result;
        result.i32[0] = *(_DWORD *)(a3 + 96);
        if (result.f32[0] <= *(float *)(*(_QWORD *)v38 + 8))
          return result;
      }
    }
  }
LABEL_45:
  v61 = *(_OWORD *)a2;
  v64 = *(_OWORD *)(a2 + 16);
  v67 = *(_OWORD *)(a2 + 32);
  v70 = *(_OWORD *)(a2 + 48);
  v79 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)v82 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v82[9] = *(_OWORD *)(a2 + 121);
  v73 = *v32;
  v76 = *(_OWORD *)(a2 + 80);
  v39 = *(_OWORD *)a3;
  v40 = *(_OWORD *)(a3 + 16);
  v41 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v41;
  *(_OWORD *)a2 = v39;
  *(_OWORD *)(a2 + 16) = v40;
  *v32 = *v17;
  v42 = *(_OWORD *)(a3 + 80);
  v44 = *(float32x4_t *)(a3 + 96);
  v43 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 121) = *(_OWORD *)(a3 + 121);
  *(float32x4_t *)(a2 + 96) = v44;
  *(_OWORD *)(a2 + 112) = v43;
  *(_OWORD *)(a2 + 80) = v42;
  *(_OWORD *)(a3 + 32) = v67;
  *(_OWORD *)(a3 + 48) = v70;
  *(_OWORD *)a3 = v61;
  *(_OWORD *)(a3 + 16) = v64;
  *(_OWORD *)(a3 + 121) = *(_OWORD *)&v82[9];
  *(_OWORD *)(a3 + 96) = v79;
  *(_OWORD *)(a3 + 112) = *(_OWORD *)v82;
  result = v73;
  v44.i32[3] = HIDWORD(v76);
  *v17 = v73;
  *(_OWORD *)(a3 + 80) = v76;
  v45 = *(_DWORD *)(a2 + 64);
  v47 = (float32x4_t *)(a1 + 64);
  v46 = *(_DWORD *)(a1 + 64);
  if (v45 == v46)
  {
    v48 = **(_QWORD **)(a5 + 8);
    result.i64[0] = *(_QWORD *)v48;
    result.i32[2] = *(_DWORD *)(v48 + 8);
    v44.i64[0] = *(_QWORD *)(a2 + 48);
    v44.i32[2] = *(_DWORD *)(a2 + 56);
    v49 = (int8x16_t)vsubq_f32(result, v44);
    v50 = (float32x2_t)vextq_s8(v49, v49, 8uLL).u64[0];
    v51 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1), *(float32x2_t *)v49.i8, 1);
    v49.i64[0] = *(_QWORD *)(a1 + 48);
    v49.i32[2] = *(_DWORD *)(a1 + 56);
    result = vsubq_f32(result, (float32x4_t)v49);
    v52 = (float32x2_t)vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    if (vmla_f32(v51, v50, v50).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)result.f32, 1), *(float32x2_t *)result.f32, 1), v52, v52).f32[0])return result;
    goto LABEL_67;
  }
  if (v45 == 4)
  {
    if (v46 != 4)
    {
LABEL_67:
      v62 = *(_OWORD *)a1;
      v65 = *(_OWORD *)(a1 + 16);
      v68 = *(_OWORD *)(a1 + 32);
      v71 = *(_OWORD *)(a1 + 48);
      v80 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)v83 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)&v83[9] = *(_OWORD *)(a1 + 121);
      v74 = *v47;
      v77 = *(_OWORD *)(a1 + 80);
      v54 = *(_OWORD *)a2;
      v55 = *(_OWORD *)(a2 + 16);
      v56 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v56;
      *(_OWORD *)a1 = v54;
      *(_OWORD *)(a1 + 16) = v55;
      *v47 = *v32;
      v57 = *(_OWORD *)(a2 + 80);
      v58 = *(_OWORD *)(a2 + 96);
      v59 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
      *(_OWORD *)(a1 + 96) = v58;
      *(_OWORD *)(a1 + 112) = v59;
      *(_OWORD *)(a1 + 80) = v57;
      *(_OWORD *)(a2 + 32) = v68;
      *(_OWORD *)(a2 + 48) = v71;
      *(_OWORD *)a2 = v62;
      *(_OWORD *)(a2 + 16) = v65;
      *(_OWORD *)(a2 + 121) = *(_OWORD *)&v83[9];
      *(_OWORD *)(a2 + 96) = v80;
      *(_OWORD *)(a2 + 112) = *(_OWORD *)v83;
      result = v74;
      *v32 = v74;
      *(_OWORD *)(a2 + 80) = v77;
      return result;
    }
  }
  else if (v46 == 4)
  {
    return result;
  }
  if (*(unsigned __int8 *)(a2 + 112) | *(unsigned __int8 *)(a1 + 112))
    goto LABEL_55;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/HitTesting/HitTesterImpl.cpp", 146, (uint64_t)"h1.maybeQuality || h2.maybeQuality", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_69:
    abort();
  }
  v45 = v32->i32[0];
LABEL_55:
  v53 = *(_QWORD *)(a5 + 32);
  if (v45 == 1)
  {
    if (!*(_BYTE *)(a1 + 112))
      goto LABEL_67;
    if (!*(_BYTE *)(a1 + 108) || (result.i32[0] = *(_DWORD *)(a1 + 104), result.f32[0] <= 0.6))
    {
      if (!*(_BYTE *)(a1 + 100))
        goto LABEL_67;
      result.i32[0] = *(_DWORD *)(a1 + 96);
      if (result.f32[0] <= *(float *)(*(_QWORD *)v53 + 8))
        goto LABEL_67;
    }
  }
  else if (*(_BYTE *)(a2 + 112))
  {
    if (*(_BYTE *)(a2 + 108))
    {
      result.i32[0] = *(_DWORD *)(a2 + 104);
      if (result.f32[0] > 0.6)
        goto LABEL_67;
    }
    if (*(_BYTE *)(a2 + 100))
    {
      result.i32[0] = *(_DWORD *)(a2 + 96);
      if (result.f32[0] > *(float *)(*(_QWORD *)v53 + 8))
        goto LABEL_67;
    }
  }
  return result;
}

char ***sub_20EF04978(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v14 = *v4;
    v15 = 0x8E38E38E38E38E39 * ((v6 - *v4) >> 4);
    v16 = v15 + 1;
    if (v15 + 1 > 0x1C71C71C71C71C7)
      sub_20E969238();
    v17 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - (_QWORD)v14) >> 4);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0xE38E38E38E38E3)
      v18 = 0x1C71C71C71C71C7;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 > 0x1C71C71C71C71C7)
        sub_20E877A38();
      v19 = (char *)operator new(144 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = a2[1];
    v21 = &v19[144 * v15];
    *(_OWORD *)v21 = *a2;
    *((_OWORD *)v21 + 1) = v20;
    v22 = a2[3];
    *((_OWORD *)v21 + 2) = a2[2];
    *((_OWORD *)v21 + 3) = v22;
    v23 = a2[7];
    *((_OWORD *)v21 + 6) = a2[6];
    *((_OWORD *)v21 + 7) = v23;
    *(_OWORD *)(v21 + 121) = *(_OWORD *)((char *)a2 + 121);
    v25 = a2[4];
    v24 = a2[5];
    v13 = v21 + 144;
    *((_OWORD *)v21 + 4) = v25;
    *((_OWORD *)v21 + 5) = v24;
    if (v6 != v14)
    {
      do
      {
        v26 = *((_OWORD *)v6 - 9);
        v27 = *((_OWORD *)v6 - 8);
        v28 = *((_OWORD *)v6 - 6);
        *((_OWORD *)v21 - 7) = *((_OWORD *)v6 - 7);
        *((_OWORD *)v21 - 6) = v28;
        *((_OWORD *)v21 - 9) = v26;
        *((_OWORD *)v21 - 8) = v27;
        v30 = *((_OWORD *)v6 - 3);
        v29 = *((_OWORD *)v6 - 2);
        v31 = *((_OWORD *)v6 - 4);
        *(_OWORD *)(v21 - 23) = *(_OWORD *)(v6 - 23);
        *((_OWORD *)v21 - 3) = v30;
        *((_OWORD *)v21 - 2) = v29;
        *((_OWORD *)v21 - 4) = v31;
        *((_OWORD *)v21 - 5) = *((_OWORD *)v6 - 5);
        v21 -= 144;
        v6 -= 144;
      }
      while (v6 != v14);
      v6 = *v4;
    }
    *v4 = v21;
    v4[1] = v13;
    v4[2] = &v19[144 * v18];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[3];
    *((_OWORD *)v6 + 2) = a2[2];
    *((_OWORD *)v6 + 3) = v9;
    *(_OWORD *)v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    v11 = a2[6];
    v10 = a2[7];
    v12 = a2[5];
    *(_OWORD *)(v6 + 121) = *(_OWORD *)((char *)a2 + 121);
    *((_OWORD *)v6 + 6) = v11;
    *((_OWORD *)v6 + 7) = v10;
    *((_OWORD *)v6 + 5) = v12;
    *((_OWORD *)v6 + 4) = a2[4];
    v13 = v6 + 144;
  }
  v4[1] = v13;
  return a1;
}

void sub_20EF04B34(uint64_t *a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>, int32x4_t a4@<Q0>, __n128 _Q2@<Q2>, __n128 a6@<Q3>, float32x4_t a7@<Q5>, float32x4_t a8@<Q6>, int32x4_t a9@<Q7>)
{
  int8x16_t v9;
  int32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  int v18;
  unsigned int v19;
  int32x4_t v21;
  float32x2_t v22;
  float v23;
  float32x2_t v24;
  int32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  float v29;
  int8x16_t v30;
  int32x4_t v31;
  float v32;
  float32x2_t v33;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float v39;
  float v40;
  float32x2_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x2_t v44;
  int8x16_t v45;
  int8x16_t v46;
  unsigned int v47;
  int v48;
  float32x2_t v49;
  float32x2_t v50;
  int v51;
  float32x2_t v52;
  float *v53;
  float *v54;
  BOOL v55;
  int v56;
  _BOOL4 v57;
  int8x16_t v58;
  __int128 v59;
  char v62;
  unint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  int8x16_t v79;
  unint64_t v80;
  __n128 v81;
  int32x4_t v82;
  int8x16_t v83;
  float32x4_t v84;
  __int128 v85;
  uint64_t v86;
  int32x4_t v87;
  _BYTE v88[7];
  float32x2_t v89;
  _QWORD v90[2];
  _BYTE v91[31];
  uint64_t v92;

  v13 = a3;
  v92 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v14 = *a1;
  v15 = a1[1];
  if (*a1 != v15)
  {
    do
    {
      _Q2.n128_u64[0] = *(_QWORD *)(a2 + 12);
      _Q2.n128_u32[2] = *(_DWORD *)(a2 + 20);
      v11.i64[0] = *(_QWORD *)a2;
      v11.i32[2] = *(_DWORD *)(a2 + 8);
      v18 = *(unsigned __int8 *)(v14 + 104);
      if (v18 == 1)
      {
        v19 = *(_DWORD *)(a2 + 40);
        if (v19 > 3 || v19 == 1)
          goto LABEL_5;
      }
      else if (v18 == 2 && (*(_DWORD *)(a2 + 40) - 1) >= 3)
      {
        goto LABEL_5;
      }
      a6.n128_u32[0] = *(_DWORD *)(v14 + 36);
      v12.i64[0] = *(_QWORD *)(v14 + 28);
      v21 = v12;
      v21.i32[2] = a6.n128_u32[0];
      v22 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1);
      a7.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), v22, *(float32x2_t *)v12.i8, 1), (float32x2_t)a6.n128_u64[0], (float32x2_t)a6.n128_u64[0]).f32[0];
      if (a7.f32[0] == 1.0)
        goto LABEL_23;
      v23 = a7.f32[0] + -1.0;
      if (a7.f32[0] < 1.0)
        v23 = 1.0 - a7.f32[0];
      if (v23 <= 0.000001)
      {
LABEL_23:
        a8.i32[0] = *(_DWORD *)(v14 + 24);
        *(float *)v9.i32 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v14 + 16), *(float32x2_t *)v21.i8), v22, *(float32x2_t *)(v14 + 16), 1), (float32x2_t)a6.n128_u64[0], *(float32x2_t *)a8.f32).f32[0];
        a9 = v21;
        a8 = (float32x4_t)v21;
      }
      else
      {
        *(float *)a9.i32 = 1.0 / sqrtf(a7.f32[0]);
        a8 = vmulq_n_f32((float32x4_t)v21, *(float *)a9.i32);
        a7.i64[0] = *(_QWORD *)(v14 + 16);
        a7.i32[2] = *(_DWORD *)(v14 + 24);
        v24 = vmul_lane_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)v12.i8, 1);
        *(float32x2_t *)v10.i8 = vmul_f32((float32x2_t)a6.n128_u64[0], *(float32x2_t *)a9.i8);
        v25.i64[0] = a8.i64[0];
        v25.u64[1] = (unint64_t)v24;
        a9 = vuzp1q_s32(v25, v10);
        v26 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.f32, 1);
        v27 = (float32x2_t)vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL).u64[0];
        v28 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a8.f32, *(float32x2_t *)a8.f32), v24, *(float32x2_t *)a8.f32, 1), v27, *(float32x2_t *)v10.i8).f32[0];
        v9.i64[0] = vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
        if (v28 == 1.0)
          goto LABEL_75;
        v29 = v28 + -1.0;
        if (v28 < 1.0)
          v29 = 1.0 - v28;
        if (v29 <= 0.000001)
        {
LABEL_75:
          *(float *)v9.i32 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a8.f32), v26, *(float32x2_t *)a7.f32, 1), v27, *(float32x2_t *)v9.i8).f32[0];
        }
        else
        {
          *(float *)a9.i32 = sqrtf(v28);
          v30 = (int8x16_t)vmulq_n_f32(a8, 1.0 / *(float *)a9.i32);
          *(float *)v9.i32 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)v30.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1), *(float32x2_t *)a7.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), *(float32x2_t *)v9.i8).f32[0];
          a9 = (int32x4_t)vdivq_f32(a8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.i8, 0));
          a8 = (float32x4_t)a9;
        }
      }
      a7 = vsubq_f32(vmlaq_n_f32(v11, (float32x4_t)_Q2, COERCE_FLOAT(*(_QWORD *)(a2 + 28))), v11);
      v31 = (int32x4_t)vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL);
      LODWORD(v32) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a9.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), *(float32x2_t *)v31.i8).u32[0];
      if (fabsf(v32) < 0.00000011921)
        goto LABEL_5;
      *(float *)v9.i32 = -*(float *)v9.i32;
      v10 = (int32x4_t)vmlsq_lane_f32(v11, a8, *(float32x2_t *)v9.i8, 0);
      v33 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a9.i8, 1), *(float32x2_t *)v10.i8, 1);
      a9.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
      *(float32x2_t *)a8.f32 = vmla_f32(v33, *(float32x2_t *)a9.i8, *(float32x2_t *)v31.i8);
      a8.f32[0] = (float)-a8.f32[0] / v32;
      if (a8.f32[0] < 0.0 || a8.f32[0] > 1.0)
        goto LABEL_5;
      if (v18 != 1)
        goto LABEL_36;
      v35 = (float32x2_t)vdup_lane_s32((int32x2_t)_Q2.n128_u64[0], 1);
      v36 = (float32x2_t)vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
      v35.f32[0] = 1.0
                 / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)_Q2.n128_u64[0], (float32x2_t)_Q2.n128_u64[0]), v35, (float32x2_t)_Q2.n128_u64[0], 1), v36, v36).f32[0]);
      v37 = fabsf(vmla_f32(vmla_f32(vmul_f32(vmul_f32((float32x2_t)_Q2.n128_u64[0], v35), *(float32x2_t *)v12.i8), v22, vmul_lane_f32(v35, (float32x2_t)_Q2.n128_u64[0], 1)), (float32x2_t)a6.n128_u64[0], vmul_f32(v36, v35)).f32[0]);
      _NF = v37 < 1.0;
      if (v37 == 1.0)
        goto LABEL_36;
      v39 = v37 + -1.0;
      v40 = 1.0 - v37;
      if (!_NF)
        v40 = v39;
      if (v40 <= 0.000001)
      {
LABEL_36:
        v31.i64[0] = *(_QWORD *)(v14 + 40);
        v31.i32[2] = *(_DWORD *)(v14 + 48);
        v21.i64[0] = *(_QWORD *)(v14 + 56);
        v12.i64[0] = *(_QWORD *)(v14 + 72);
        a9.i32[0] = vdup_lane_s32(*(int32x2_t *)v12.i8, 1).u32[0];
        a9.i32[1] = *(_DWORD *)(v14 + 80);
        v21.i32[2] = *(_DWORD *)(v14 + 64);
        _Q2 = (__n128)vuzp1q_s32(v31, v31);
        v9 = vextq_s8((int8x16_t)_Q2, (int8x16_t)v21, 0xCuLL);
      }
      else
      {
        a9 = (int32x4_t)vnegq_f32((float32x4_t)_Q2);
        v41 = (float32x2_t)vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL).u64[0];
        _Q2.n128_f32[0] = 1.0
                        / sqrtf(vmla_f32(vmls_lane_f32(vmul_f32((float32x2_t)_Q2.n128_u64[0], (float32x2_t)_Q2.n128_u64[0]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a9.i8, 1), (float32x2_t)_Q2.n128_u64[0], 1), v41, v41).f32[0]);
        v42 = vmulq_n_f32((float32x4_t)a9, _Q2.n128_f32[0]);
        v43 = (int8x16_t)vmlsq_lane_f32(v42, (float32x4_t)v21, vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v21.i8), v22, vmul_lane_f32((float32x2_t)_Q2.n128_u64[0], *(float32x2_t *)a9.i8, 1)), (float32x2_t)a6.n128_u64[0], vmul_f32((float32x2_t)_Q2.n128_u64[0], v41)), 0);
        v44 = (float32x2_t)vextq_s8(v43, v43, 8uLL).u64[0];
        v31 = (int32x4_t)vmulq_n_f32(vnegq_f32((float32x4_t)v43), 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1), *(float32x2_t *)v43.i8, 1), v44, v44).f32[0]));
        v45 = (int8x16_t)vuzp1q_s32(v31, v31);
        v46 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v21, (int8x16_t)v21, 0xCuLL), (int8x16_t)v21, 8uLL), (float32x4_t)vextq_s8(v45, (int8x16_t)v31, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL), (int8x16_t)v31, 8uLL));
        a9.i64[0] = vextq_s8(v46, v46, 8uLL).u64[0];
        _Q2 = (__n128)vmulq_n_f32((float32x4_t)v46, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1), *(float32x2_t *)v46.i8, 1), *(float32x2_t *)a9.i8, *(float32x2_t *)a9.i8).f32[0]));
        a9.i64[0] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL).u64[0];
        v9 = vextq_s8(v45, (int8x16_t)_Q2, 0xCuLL);
      }
      v47 = HIDWORD(*(_QWORD *)(a2 + 28));
      v11 = vmlaq_n_f32(v11, a7, a8.f32[0]);
      if (v18 == 2)
        v48 = 1;
      else
        v48 = 2;
      a4.i64[0] = *(_QWORD *)(v14 + 40);
      v21.i64[0] = *(_QWORD *)(v14 + 56);
      v49 = (float32x2_t)vzip1_s32(*(int32x2_t *)a4.i8, *(int32x2_t *)v21.i8);
      a4.i32[2] = *(_DWORD *)(v14 + 48);
      v21.i32[2] = *(_DWORD *)(v14 + 64);
      a6.n128_u64[0] = vtrn2q_s32(a4, v21).u64[0];
      a4 = vzip2q_s32(a4, v21);
      a7.i64[0] = *(_QWORD *)(v14 + 88);
      a7.i32[2] = *(_DWORD *)(v14 + 96);
      *(float32x2_t *)a8.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v49, vnegq_f32(a7).f32[0]), (float32x2_t)a6.n128_u64[0], *(float32x2_t *)a7.f32, 1), *(float32x2_t *)a4.i8, a7, 2);
      v50 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)a6.n128_u64[0], 0), (int8x16_t)vdupq_lane_s32((int32x2_t)a6.n128_u64[0], 1), 0xCuLL).u64[0];
      if (v18 == 1)
        v51 = 0;
      else
        v51 = v48;
      v52 = vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v49, v11.f32[0]), v50, *(float32x2_t *)v11.f32, 1), *(float32x2_t *)a4.i8, v11, 2), *(float32x2_t *)a8.f32);
      v89 = v52;
      if ((v47 & 4) != 0)
      {
        if (*(_BYTE *)(v14 + 416))
        {
          v53 = *(float **)(v14 + 392);
          v54 = *(float **)(v14 + 400);
          if (v53 != v54)
          {
            while (1)
            {
              v55 = v52.f32[0] < *v53 || v52.f32[0] > v53[2];
              if (!v55 && v52.f32[1] >= v53[1] && v52.f32[1] <= v53[3])
                break;
              v53 += 4;
              if (v53 == v54)
                goto LABEL_55;
            }
            v56 = 4;
            goto LABEL_61;
          }
        }
      }
LABEL_55:
      v86 = v31.i64[0];
      if (*(_BYTE *)(v14 + 384))
      {
        v79 = v9;
        v80 = a9.i64[0];
        v82 = v12;
        v84 = v11;
        v57 = sub_20FDC57E8((float32x2_t **)(v14 + 360), (float *)&v89, 0, 0.000001);
        v13 = a3;
        v12 = v82;
        v11 = v84;
        v9 = v79;
        a9.i64[0] = v80;
        if ((v57 & (v47 >> 1) & 1) != 0)
        {
          v56 = 2;
LABEL_60:
          v31.i64[0] = v86;
LABEL_61:
          v31.i64[1] = v9.u32[0];
          *(_QWORD *)&v59 = __PAIR64__(a9.u32[0], v12.u32[0]);
          v58 = vextq_s8(v9, vextq_s8((int8x16_t)0, (int8x16_t)0, 0xCuLL), 4uLL);
          *((_QWORD *)&v59 + 1) = a9.u32[1];
          __asm { FMOV            V2.4S, #1.0 }
          _Q2.n128_u64[0] = v11.i64[0];
          _Q2.n128_u32[2] = v11.u32[2];
          v62 = *(_BYTE *)v14;
          v90[0] = *(_QWORD *)(v14 + 1);
          *(_QWORD *)((char *)v90 + 7) = *(_QWORD *)(v14 + 8);
          v64 = (char *)v13[1];
          v63 = (unint64_t)v13[2];
          if ((unint64_t)v64 < v63)
          {
            *(int32x4_t *)v64 = v31;
            *((int8x16_t *)v64 + 1) = v58;
            *((_OWORD *)v64 + 2) = v59;
            *((__n128 *)v64 + 3) = _Q2;
            *((_DWORD *)v64 + 16) = 1;
            *((_DWORD *)v64 + 17) = v56;
            *((_DWORD *)v64 + 18) = v51;
            v64[80] = 0;
            *(_OWORD *)(v64 + 81) = *(_OWORD *)v91;
            a4.i32[3] = *(_DWORD *)&v91[27];
            *((_OWORD *)v64 + 6) = *(_OWORD *)&v91[15];
            v64[112] = 0;
            *(_DWORD *)(v64 + 113) = *(_DWORD *)v88;
            *((_DWORD *)v64 + 29) = *(_DWORD *)&v88[3];
            v64[120] = v62;
            *(_QWORD *)(v64 + 121) = v90[0];
            *((_QWORD *)v64 + 16) = *(_QWORD *)((char *)v90 + 7);
            v17 = v64 + 144;
            v64[136] = 1;
          }
          else
          {
            v65 = (char *)*v13;
            v66 = 0x8E38E38E38E38E39 * ((v64 - (_BYTE *)*v13) >> 4);
            v67 = v66 + 1;
            if (v66 + 1 > 0x1C71C71C71C71C7)
              sub_20E969238();
            v81 = _Q2;
            v83 = v58;
            v85 = v59;
            v87 = v31;
            v68 = 0x8E38E38E38E38E39 * ((uint64_t)(v63 - (_QWORD)v65) >> 4);
            if (2 * v68 > v67)
              v67 = 2 * v68;
            if (v68 >= 0xE38E38E38E38E3)
              v69 = 0x1C71C71C71C71C7;
            else
              v69 = v67;
            if (v69 > 0x1C71C71C71C71C7)
              sub_20E877A38();
            v70 = (char *)operator new(144 * v69);
            v71 = &v70[144 * v66];
            *((_OWORD *)v71 + 2) = v85;
            *((__n128 *)v71 + 3) = v81;
            *(int32x4_t *)v71 = v87;
            *((int8x16_t *)v71 + 1) = v83;
            *((_DWORD *)v71 + 16) = 1;
            *((_DWORD *)v71 + 17) = v56;
            *((_DWORD *)v71 + 18) = v51;
            v71[80] = 0;
            *(_OWORD *)(v71 + 81) = *(_OWORD *)v91;
            a4.i32[3] = *(_DWORD *)&v91[27];
            *((_OWORD *)v71 + 6) = *(_OWORD *)&v91[15];
            v71[112] = 0;
            *(_DWORD *)(v71 + 113) = *(_DWORD *)v88;
            *((_DWORD *)v71 + 29) = *(_DWORD *)&v88[3];
            v71[120] = v62;
            *(_QWORD *)(v71 + 121) = v90[0];
            *((_QWORD *)v71 + 16) = *(_QWORD *)((char *)v90 + 7);
            v71[136] = 1;
            v72 = v71;
            if (v64 != v65)
            {
              do
              {
                v73 = *((_OWORD *)v64 - 9);
                v74 = *((_OWORD *)v64 - 8);
                v75 = *((_OWORD *)v64 - 6);
                *((_OWORD *)v72 - 7) = *((_OWORD *)v64 - 7);
                *((_OWORD *)v72 - 6) = v75;
                *((_OWORD *)v72 - 9) = v73;
                *((_OWORD *)v72 - 8) = v74;
                _Q2 = *((__n128 *)v64 - 3);
                v76 = *((_OWORD *)v64 - 2);
                a6 = *((__n128 *)v64 - 4);
                *(_OWORD *)(v72 - 23) = *(_OWORD *)(v64 - 23);
                *((__n128 *)v72 - 3) = _Q2;
                *((_OWORD *)v72 - 2) = v76;
                *((__n128 *)v72 - 4) = a6;
                a4 = *((int32x4_t *)v64 - 5);
                *((int32x4_t *)v72 - 5) = a4;
                v72 -= 144;
                v64 -= 144;
              }
              while (v64 != v65);
              v64 = v65;
            }
            v77 = &v70[144 * v69];
            v17 = v71 + 144;
            v13 = a3;
            *a3 = v72;
            a3[1] = v71 + 144;
            a3[2] = v77;
            if (v64)
              operator delete(v64);
          }
          v13[1] = v17;
          goto LABEL_5;
        }
      }
      if ((v47 & 1) != 0)
      {
        v56 = 1;
        goto LABEL_60;
      }
LABEL_5:
      v14 += 464;
    }
    while (v14 != v15);
  }
}

void sub_20EF0529C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_20EF052C4(uint64_t a1, float32x4_t *a2, double a3, double a4, float32x2_t a5, float32x2_t a6, float32x2_t a7, float32x4_t a8, double a9, float32x4_t a10)
{
  float32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  float v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float v26;
  uint64_t v28;
  uint64_t v29;
  char v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float v44;
  float32x2_t v45;
  float v46;
  _BOOL4 v47;
  float v48;

  v12 = *(_QWORD *)(a1 + 16);
  v13 = 0.0;
  if (!v12)
  {
    v21 = 1;
    v22 = *(uint64_t **)a1;
    if (!*(_QWORD *)a1)
      return LODWORD(v13) | ((unint64_t)v12 << 32);
    goto LABEL_27;
  }
  if (*(_BYTE *)(v12 + 176))
  {
    v14 = *(float32x2_t **)(v12 + 152);
    v15 = *(float32x2_t **)(v12 + 160);
    if (v14 == v15)
    {
      v17 = -3.4028e38;
      if (!*(_BYTE *)(v12 + 56))
        goto LABEL_23;
LABEL_9:
      v20 = *(_QWORD *)(v12 + 32);
      v19 = *(_QWORD *)(v12 + 40);
      if (v20 == v19)
        goto LABEL_23;
      goto LABEL_15;
    }
    v16 = a2[3].f32[2];
    v17 = -3.4028e38;
    do
    {
      a10.i32[0] = v14[1].i32[0];
      a5.i32[0] = a2->i32[2];
      a6.i32[0] = a2[1].i32[2];
      a7.i32[0] = a2[2].i32[2];
      v18 = vmla_f32(vmla_lane_f32(vmul_f32(a5, *v14), a6, *v14, 1), *(float32x2_t *)a10.f32, a7).f32[0];
      if ((float)(v16 + v18) > v17)
        v17 = v16 + v18;
      v14 = (float32x2_t *)((char *)v14 + 52);
    }
    while (v14 != v15);
    if (*(_BYTE *)(v12 + 56))
      goto LABEL_9;
  }
  else
  {
    if (!*(_BYTE *)(v12 + 56))
      goto LABEL_24;
    v17 = -3.4028e38;
    v20 = *(_QWORD *)(v12 + 32);
    v19 = *(_QWORD *)(v12 + 40);
    if (v20 != v19)
    {
LABEL_15:
      a5.i32[0] = a2->i32[2];
      a6.i32[0] = a2[1].i32[2];
      a7.i32[0] = a2[2].i32[2];
      a8.i64[0] = a2[3].i64[0];
      a8.i32[2] = a2[3].i32[2];
      do
      {
        v23.i64[0] = *(_QWORD *)v20;
        a10.i32[0] = *(_DWORD *)(v20 + 8);
        v24 = vmla_f32(vmla_lane_f32(vmul_f32(a5, *(float32x2_t *)v20), a6, *(float32x2_t *)v20, 1), *(float32x2_t *)a10.f32, a7);
        *(float32x2_t *)&v23.u32[2] = v24;
        v25.i64[0] = *(_QWORD *)(v20 + 12);
        v24.i32[0] = *(_DWORD *)(v20 + 20);
        *(float32x2_t *)&v25.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a5, *(float32x2_t *)v25.f32), a6, *(float32x2_t *)v25.f32, 1), v24, a7);
        a10 = vaddq_f32(a8, v25);
        v26 = COERCE_FLOAT(vaddq_f32(a8, v23).i32[2]);
        if (v26 < a10.f32[2])
          v26 = a10.f32[2];
        if (v26 > v17)
          v17 = v26;
        v20 += 112;
      }
      while (v20 != v19);
    }
  }
LABEL_23:
  if (v17 >= 0.0)
  {
    v21 = 0;
    LOBYTE(v12) = 1;
    v13 = v17;
    v22 = *(uint64_t **)a1;
    if (!*(_QWORD *)a1)
      return LODWORD(v13) | ((unint64_t)v12 << 32);
    goto LABEL_27;
  }
LABEL_24:
  LOBYTE(v12) = 0;
  v21 = 1;
  v22 = *(uint64_t **)a1;
  if (!*(_QWORD *)a1)
    return LODWORD(v13) | ((unint64_t)v12 << 32);
LABEL_27:
  v28 = *v22;
  v29 = v22[1];
  if (*v22 == v29)
    return LODWORD(v13) | ((unint64_t)v12 << 32);
  v30 = 0;
  v31 = *a2;
  v32 = a2[1];
  v33 = 0.0;
  v34 = a2[2];
  v35 = a2[3];
  do
  {
    if (*(_BYTE *)(v28 + 356))
    {
      v36 = *(float32x4_t *)(v28 + 88);
      v37 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(_OWORD *)(v28 + 40))), v32, *(float32x2_t *)(v28 + 40), 1), v34, *(float32x4_t *)(v28 + 40), 2), v35, *(float32x4_t *)(v28 + 40), 3);
      v38 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(_OWORD *)(v28 + 56))), v32, *(float32x2_t *)(v28 + 56), 1), v34, *(float32x4_t *)(v28 + 56), 2), v35, *(float32x4_t *)(v28 + 56), 3);
      v39 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(_OWORD *)(v28 + 72))), v32, *(float32x2_t *)(v28 + 72), 1), v34, *(float32x4_t *)(v28 + 72), 2), v35, *(float32x4_t *)(v28 + 72), 3);
      v40 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, v36.f32[0]), v32, *(float32x2_t *)v36.f32, 1), v34, v36, 2), v35, v36, 3);
      v36.i32[0] = *(_DWORD *)(v28 + 324);
      v10.i32[0] = *(_DWORD *)(v28 + 328);
      v41 = (float32x2_t)vextq_s8(v37, v37, 8uLL).u64[0];
      v42 = (float32x2_t)vextq_s8(v38, v38, 8uLL).u64[0];
      v43 = (float32x2_t)vextq_s8(v39, v39, 8uLL).u64[0];
      v44 = fmaxf(v40.f32[2] + vmla_f32(vmla_f32(vmul_f32(v41, *(float32x2_t *)v36.f32), v10, v42), 0, v43).f32[0], -3.4028e38);
      v10.i32[0] = *(_DWORD *)(v28 + 332);
      v11.i32[0] = *(_DWORD *)(v28 + 336);
      v45 = vmla_f32(vmla_f32(vmul_f32(v41, v10), v11, v42), 0, v43);
      v45.f32[0] = v40.f32[2] + v45.f32[0];
      if (v45.f32[0] > v44)
        v44 = v45.f32[0];
      v45.i32[0] = *(_DWORD *)(v28 + 340);
      v11.i32[0] = *(_DWORD *)(v28 + 344);
      v10 = vmla_f32(vmla_f32(vmul_f32(v41, v45), v11, v42), 0, v43);
      v10.f32[0] = v40.f32[2] + v10.f32[0];
      if (v10.f32[0] > v44)
        v44 = v10.f32[0];
      v10.i32[0] = *(_DWORD *)(v28 + 348);
      v11.i32[0] = *(_DWORD *)(v28 + 352);
      v46 = v40.f32[2] + vmla_f32(vmla_f32(vmul_f32(v41, v10), v11, v42), 0, v43).f32[0];
      if (v46 <= v44)
        v46 = v44;
      if (v46 >= 0.0)
      {
        v47 = v30 == 0;
        if (v33 < v46)
          v47 = 1;
        if (v47)
        {
          v30 = 1;
          v33 = v46;
        }
      }
    }
    v28 += 464;
  }
  while (v28 != v29);
  if (v30)
  {
    v48 = v33;
  }
  else
  {
    v21 = 1;
    v48 = v13;
  }
  if (v30)
    LOBYTE(v12) = v30;
  if (v13 < v33)
    v13 = v33;
  if ((v21 & 1) != 0)
    v13 = v48;
  else
    LOBYTE(v12) = 1;
  return LODWORD(v13) | ((unint64_t)v12 << 32);
}

uint64_t sub_20EF055A8(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 120);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 120) = 0;
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    v4 = !*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 64) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 68);
    if (v5 * (*(_QWORD *)(a1 + 72) >> 37) != -1)
      goto LABEL_13;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(void **)(a1 + 48);
    if (v3)
LABEL_13:
      free(v3);
  }
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

double sub_20EF05654(uint64_t a1, unint64_t a2, float *a3, double result, double a5, double a6, double a7, float64x2_t a8)
{
  int v8;
  float v10;
  float v11;
  float v12;
  float v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unsigned int v19;
  float64x2_t v20;
  double v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;

  v8 = a2;
  *(float *)&result = *a3;
  if (*a3 != 0.0)
  {
    v10 = 0.0 - *(float *)&result;
    if (*a3 >= 0.0)
      v10 = *a3;
    if (v10 > 0.000001)
    {
      v11 = a3[1];
      goto LABEL_15;
    }
  }
  v11 = a3[1];
  if (v11 != 0.0)
  {
    v12 = 0.0 - v11;
    if (v11 >= 0.0)
      v12 = a3[1];
    if (v12 > 0.000001)
      goto LABEL_15;
  }
  v13 = a3[2];
  if (v13 != 0.0)
  {
    if (v13 < 0.0)
      v13 = 0.0 - v13;
    if (v13 > 0.000001)
    {
LABEL_15:
      v14 = HIDWORD(a2);
      v27 = *(float *)&result;
      a8.f64[0] = a3[2];
      v15 = fabs(a8.f64[0]);
      v16 = 0.0;
      v26 = a8;
      if (v15 != 1.0)
      {
        v17 = v15 >= 1.0 ? v15 + -1.0 : 1.0 - v15;
        if (v17 > 0.00000001)
        {
          v18 = acos(v27 / sqrt(v27 * v27 + v11 * v11));
          a8.f64[0] = v26.f64[0];
          if (v11 < 0.0)
            v18 = -v18;
          v16 = v18 * 57.2957795;
        }
      }
      v20.f64[0] = acos(a8.f64[0]);
      v19 = *(_DWORD *)a1;
      v20.f64[0] = v20.f64[0] * 57.2957795;
      v21 = 360.0;
      if (v20.f64[0] >= 0.0)
      {
        if (v20.f64[0] <= 360.0)
        {
LABEL_27:
          v22 = vcvtad_u64_f64(v20.f64[0] / 360.0 * (double)v19) % v19;
          v20.f64[0] = v16 + -360.0;
          if (v16 <= 360.0)
            v20.f64[0] = v16;
          if (v16 < 0.0)
            v20.f64[0] = v16 + 360.0;
          v23 = vcvtad_u64_f64(v20.f64[0] / 360.0 * (double)v19) % v19;
          *(_DWORD *)(*(_QWORD *)(a1 + 120)
                    + 4 * (*(_DWORD *)(a1 + 88) * v8 + *(_DWORD *)(a1 + 92) * v14)) = (v22 << *(_DWORD *)(a1 + 152)) + v23;
          v24 = *(_QWORD *)(a1 + 48) + 32 * (*(_DWORD *)(a1 + 16) * v22 + *(_DWORD *)(a1 + 20) * v23);
          v20.f64[0] = *(float64_t *)(v24 + 16);
          v25.f64[0] = v27;
          v25.f64[1] = v11;
          *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(v26, v20);
          *(float64x2_t *)v24 = vaddq_f64(v25, *(float64x2_t *)v24);
          *(double *)(v24 + 16) = result;
          ++*(_DWORD *)(v24 + 24);
          return result;
        }
        v21 = -360.0;
      }
      v20.f64[0] = v20.f64[0] + v21;
      goto LABEL_27;
    }
  }
  return result;
}

void sub_20EF058DC(float32x2_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, float32x2_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t StatusReg;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  size_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  simd_float3x3 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  _BOOL4 v43;
  int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  size_t v55;
  unint64_t v56;
  size_t v57;
  int v58;
  unint64_t v60;
  int v61;
  unsigned int v62;
  BOOL v63;
  char v64;
  int v65;
  int v66;
  char *v67;
  _DWORD *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _DWORD *v73;
  int v74;
  _DWORD *v75;
  int v76;
  uint64_t v77;
  BOOL v78;
  char v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  char v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  float32x2_t v95;
  int v101;
  BOOL v103;
  float v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x2_t v112;
  unsigned int v113;
  unsigned int v114;
  char *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  int v132;
  float32x2_t v133;
  unint64_t v134;
  _BOOL8 v135;
  BOOL v136;
  uint64_t v137;
  simd_float3x3 v138;
  float64x2_t v139;
  _DWORD *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  double v145;
  __int32 v146;
  __int32 v147;
  int *v148;
  int *v149;
  int v150;
  int v151;
  int *v152;
  int v153;
  uint64_t v154;
  BOOL v155;
  int v156;
  int v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  float v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  float v167;
  float v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  int v173;
  char *v174;
  int v175;
  int v176;
  __int32 *v177;
  int v178;
  int v179;
  BOOL v180;
  int v181;
  unint64_t v182;
  unsigned int *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  BOOL v187;
  simd_float3x3 v188;
  float32x2_t v189;
  float32x2_t v190;
  BOOL v191;
  int v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  BOOL v200;
  uint64_t v201;
  unsigned int v202;
  float32x2_t v203;
  float32x2_t v204;
  float32x2_t v205;
  float32x4_t v206;
  int v207;
  int v208;
  uint64_t v209;
  unsigned int *v210;
  unsigned int v211;
  unsigned int v212;
  float32x4_t v215;
  int v216;
  unint64_t v217;
  int v218;
  int v219;
  int v220;
  uint64_t v221;
  int v222;
  float64x2_t *v223;
  float64x2_t v224;
  uint64_t v228;
  unint64_t v229;
  float32x2_t v230;
  float32x2_t v231;
  float32x4_t v232;
  float32x2_t v233;
  float32x2_t v234;
  float32x4_t v235;
  void *v236;
  float32x4_t v237;
  float32x2_t v238;
  float32x2_t v239;
  float32x4_t v240;
  void *v241;
  void *v242;
  void *v243;
  BOOL v244;
  int v245;
  int v246;
  char *v247;
  unint64_t v248;
  int v249;
  unsigned int v250;
  int v251;
  char *v252;
  int v253;
  int v254;
  __int32 *v255;
  float32x2_t v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  _DWORD *v260;
  uint64_t v261;
  int v262;
  int __len;
  uint64_t __lena;
  int __lenb;
  uint64_t v266;
  unsigned int v267;
  int v268;
  float32x2_t *v269;
  uint64_t v270;
  unint64_t v271;
  unsigned int v272;
  uint64_t v273;
  __int128 *v274;
  int v275;
  __int32 v276;
  int v277;
  unsigned int v279;
  char *__b;
  char *__ba;
  int v282;
  unsigned int v283;
  uint64_t v284;
  _DWORD *v285;
  char *v286;
  unsigned int v287;
  uint64_t v288;
  float32x4_t v289;
  simd_float3 v290;
  uint64_t v291;
  __int32 v292;
  uint64_t v293;
  __int32 v294;
  int32x2_t v295;
  int32x2_t v296;
  float32x2_t v297;
  unsigned __int32 v298;
  int32x2_t v299;
  int32x2_t v300;
  float32x2_t v301;
  uint64_t v302;
  __int32 v303;
  float32x2_t v304;
  __int32 v305;
  _BYTE v306[20];
  __int32 v307;
  float32x2_t v308;
  __int32 v309;
  _BYTE memptr[24];
  float32x2_t v311;
  __int32 v312;
  void *v313;
  int v314;
  int v315;
  unint64_t v316;
  _BYTE v317[28];
  uint64_t v318;
  void *v319;
  uint64_t v320;
  __int128 v321;
  int v322;
  __int128 v323;
  uint64_t v324;
  uint64_t v325[2];
  int v326;
  uint64_t v327;
  __int32 v328;
  uint64_t v329[3];
  char v330;
  char v331;
  uint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char v337;
  char v338;
  uint64_t v339;
  void *v340;
  _BYTE v341[32];
  __int128 v342;
  _OWORD v343[2];

  *(_QWORD *)v306 = 0;
  v331 = 0;
  memset(v329, 0, sizeof(v329));
  v330 = 0;
  *(_QWORD *)memptr = 0;
  *(_DWORD *)&memptr[8] = 0;
  *(_QWORD *)v341 = 0;
  *(_DWORD *)&v341[8] = 0;
  sub_20EF0751C((uint64_t)&v332, (unsigned int *)v341, (uint64_t *)memptr, 1, (const double *)v306, 1);
  *(_QWORD *)v306 = 0;
  v338 = 0;
  v336 = 0;
  v334 = 0;
  v335 = 0;
  v337 = 0;
  *(_QWORD *)memptr = 0;
  *(_DWORD *)&memptr[8] = 0;
  *(_QWORD *)v341 = 0;
  *(_DWORD *)&v341[8] = 0;
  sub_20EF0751C((uint64_t)&v339, (unsigned int *)v341, (uint64_t *)memptr, 1, (const double *)v306, 1);
  v13 = *((unsigned int *)a4 + 2);
  v14 = *((_DWORD *)a4 + 3);
  v274 = a4;
  v15 = (v13 << 32) | 3;
  if ((_DWORD)v13)
    _ZF = v14 == 0;
  else
    _ZF = 1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  if (_ZF)
    v18 = 0;
  else
    v18 = v15;
  if (_ZF)
    v19 = 0;
  else
    v19 = (HIDWORD(v18) * v18);
  if (HIDWORD(v18))
    v20 = v18 << 32;
  else
    v20 = 0;
  v273 = v20;
  if (HIDWORD(v18))
    v21 = v18 == 0;
  else
    v21 = 1;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
  if (HIDWORD(v18))
    v22 = v21;
  else
    v22 = 1;
  if (v22)
    v23 = 0;
  else
    v23 = v14;
  v24 = 4 * v19;
  v289.i64[0] = v19;
  if ((v24 & (v24 - 1)) != 0)
    v25 = 3;
  else
    v25 = v24 - 1;
  v26 = v25 | (v25 >> 1) | ((v25 | (v25 >> 1)) >> 2);
  v27 = v26 | (v26 >> 4) | ((v26 | (v26 >> 4)) >> 8);
  v28 = v27 | (v27 >> 16) | ((v27 | (v27 >> 16)) >> 32);
  if (v28 + 1 > 8)
    v29 = v28 + 1;
  else
    v29 = 8;
  v270 = a2;
  v275 = v23 * v19;
  if (v23 * (_DWORD)v19)
  {
    v30 = 4 * (v23 * v19);
    *(_QWORD *)memptr = 0;
    v31 = malloc_type_posix_memalign((void **)memptr, v29, v30, 0x1F88E90uLL);
    if (v31)
      sub_210207B94(v31, v29, v30);
    v32 = *(_QWORD *)memptr;
    a2 = v270;
  }
  else
  {
    v32 = 0;
  }
  v286 = (char *)v32;
  if (v22)
    v33 = 0;
  else
    v33 = v18;
  v325[0] = v32;
  v325[1] = v33;
  v327 = v273 | ((_DWORD)v18 != 0);
  v326 = v23;
  v328 = v289.i32[0];
  if (v275 == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v323 = *v274;
  v324 = *((_QWORD *)v274 + 2);
  sub_20EEE9240(v329, v325, (uint64_t)&v323, a5, 5u);
  v269 = a1;
  v266 = a7;
  v35 = *a3;
  v36 = HIDWORD(*a3);
  v37 = (*a3 << 32) | 2;
  if (*a3)
    v38 = (_DWORD)v36 == 0;
  else
    v38 = 1;
  v39 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  if (v38)
    v40 = 0;
  else
    v40 = v37;
  if (v38)
    v41 = 0;
  else
    v41 = HIDWORD(v40) * v40;
  if (HIDWORD(v40))
    v42 = v40 << 32;
  else
    v42 = 0;
  if (HIDWORD(v40))
    v43 = v40 == 0;
  else
    v43 = 1;
  v284 = *(_QWORD *)v274;
  v271 = *((_QWORD *)v274 + 1);
  v44 = *((_DWORD *)v274 + 4);
  v282 = *((_DWORD *)v274 + 5);
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v39);
  if (HIDWORD(v40))
    v45 = v43;
  else
    v45 = 1;
  if (v45)
    v46 = 0;
  else
    v46 = v40;
  if (v45)
    v47 = 0;
  else
    v47 = v36;
  v48 = 4 * v41;
  v49 = v48 - 1;
  v287 = v41;
  __len = v47;
  v50 = v47 * v41;
  _ZF = (v48 & (v48 - 1)) == 0;
  v51 = 3;
  if (_ZF)
    v51 = v49;
  v52 = v51 | (v51 >> 1) | ((v51 | (v51 >> 1)) >> 2);
  v53 = v52 | (v52 >> 4) | ((v52 | (v52 >> 4)) >> 8);
  v54 = v53 | (v53 >> 16) | ((v53 | (v53 >> 16)) >> 32);
  if (v54 + 1 > 8)
    v55 = v54 + 1;
  else
    v55 = 8;
  v56 = HIDWORD(v42);
  v267 = v50;
  if (!v50)
  {
    v67 = 0;
    goto LABEL_152;
  }
  v57 = 4 * v50;
  *(_QWORD *)memptr = 0;
  v58 = malloc_type_posix_memalign((void **)memptr, v55, v57, 0x1F88E90uLL);
  if (v58)
    sub_210207B94(v58, v55, v57);
  if (!*(_QWORD *)memptr)
  {
    v67 = 0;
    goto LABEL_151;
  }
  __b = *(char **)memptr;
  if ((v46 & 2) == 0 || HIDWORD(v46) == 0)
    v45 = 1;
  if (v45)
    v60 = 0;
  else
    v60 = v46;
  if (v45)
    v61 = 0;
  else
    v61 = __len;
  v261 = v287 & 0x3FFFFFFF;
  v62 = v61 * (v287 & 0x3FFFFFFF);
  if (v62 == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_403;
  }
  if ((v40 & 2) == 0)
  {
    if ((_DWORD)v60)
      v63 = HIDWORD(v60) == 0;
    else
      v63 = 1;
    if (v63)
      v64 = 1;
    else
      v64 = v45;
    if ((v64 & 1) == 0)
    {
      v65 = v60 - 1;
      v66 = HIDWORD(v60) - 1;
      v67 = __b;
      v68 = __b;
      v69 = __len - 1;
      a2 = v270;
      if (__len != 1)
      {
        if (v66)
        {
          v70 = 4 * v261;
          v71 = 4 * v56;
          v72 = 0;
          v68 = __b;
          if (v65)
          {
            do
            {
              v73 = v68;
              v74 = v66;
              do
              {
                *v73 = -1;
                v73 = (_DWORD *)((char *)v73 + v71);
                --v74;
              }
              while (v74);
              *v73 = -1;
              v68 = (_DWORD *)((char *)v68 + v70);
              ++v72;
            }
            while (v72 != v69);
          }
          else
          {
            do
            {
              v75 = v68;
              v76 = v66;
              do
              {
                *v75 = -1;
                v75 = (_DWORD *)((char *)v75 + v71);
                --v76;
              }
              while (v76);
              *v75 = -1;
              v68 = (_DWORD *)((char *)v68 + v70);
              ++v72;
            }
            while (v72 != v69);
          }
        }
        else
        {
          v86 = 4 * v261;
          v68 = __b;
          if (v65)
          {
            do
            {
              *v68 = -1;
              v68 = (_DWORD *)((char *)v68 + v86);
              --v69;
            }
            while (v69);
          }
          else
          {
            do
            {
              *v68 = -1;
              v68 = (_DWORD *)((char *)v68 + v86);
              --v69;
            }
            while (v69);
          }
        }
      }
      if (v66)
      {
        v87 = 4 * v56;
        if (v65)
        {
          do
          {
            *v68 = -1;
            v68 = (_DWORD *)((char *)v68 + v87);
            --v66;
          }
          while (v66);
        }
        else
        {
          do
          {
            *v68 = -1;
            v68 = (_DWORD *)((char *)v68 + v87);
            --v66;
          }
          while (v66);
        }
      }
      if (v65)
        *v68 = -1;
      *v68 = -1;
      goto LABEL_152;
    }
    goto LABEL_150;
  }
  if ((_DWORD)v56 != (_DWORD)v60)
  {
    v295.i8[0] = 0;
    v299 = (int32x2_t)(v60 & 2);
    *(_QWORD *)v341 = &v295;
    *(_QWORD *)&v341[8] = &v299;
    *(_QWORD *)&v341[16] = &unk_210389D70;
    if ((_DWORD)v60)
      v78 = HIDWORD(v60) == 0;
    else
      v78 = 1;
    if (v78)
      v79 = 1;
    else
      v79 = v45;
    if ((v79 & 1) == 0)
    {
      *(_DWORD *)memptr = 0;
      *(_DWORD *)&memptr[4] = v60 - 1;
      *(_DWORD *)&memptr[8] = 1;
      *(_DWORD *)&memptr[12] = HIDWORD(v60) - 1;
      v311.i32[0] = v287 & 0x3FFFFFFF;
      *(_QWORD *)v306 = 0;
      *(_QWORD *)&v306[8] = 0;
      v80 = (unint64_t)__b;
      v81 = v61 - 1;
      *(_DWORD *)&memptr[16] = v56;
      *(_DWORD *)&memptr[20] = v81;
      if (v81)
      {
        v80 = (unint64_t)__b;
        do
        {
          sub_20EF07E4C((uint64_t)memptr, (uint64_t)v306, (uint64_t)v341, v80);
          v80 += 4 * (v287 & 0x3FFFFFFF);
          --v81;
        }
        while (v81);
      }
      sub_20EF07E4C((uint64_t)memptr, (uint64_t)v306, (uint64_t)v341, v80);
    }
    goto LABEL_150;
  }
  v77 = v287 & 0x3FFFFFFF;
  v259 = (HIDWORD(v60) * v60);
  if ((_DWORD)v261 != (_DWORD)v259)
  {
    if ((_DWORD)v60)
      v82 = HIDWORD(v60) == 0;
    else
      v82 = 1;
    if (v82)
      v83 = 1;
    else
      v83 = v45;
    if ((v83 & 1) != 0)
      goto LABEL_150;
    v84 = v61 - 1;
    v67 = __b;
    if (!v84)
    {
      if (!(_DWORD)v259)
      {
LABEL_150:
        v67 = __b;
        goto LABEL_151;
      }
LABEL_149:
      memset(v67, 255, 4 * (v259 - ((_DWORD)v259 != 0)) + 4);
      goto LABEL_150;
    }
    if ((_DWORD)v259)
    {
      v85 = 0;
      __lena = 4 * v259;
      do
      {
        while (v67)
        {
          memset(v67, 255, __lena);
          v67 += 4 * v77;
          if (++v85 == v84)
            goto LABEL_149;
        }
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_403;
        }
        memset(0, 255, __lena);
        ++v85;
        v67 = (char *)(4 * v261);
        v77 = v287 & 0x3FFFFFFF;
      }
      while (v85 != v84);
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        v67 = 0;
        goto LABEL_149;
      }
LABEL_403:
      abort();
    }
LABEL_151:
    a2 = v270;
    goto LABEL_152;
  }
  a2 = v270;
  v67 = __b;
  if (v62)
    memset(__b, 255, 4 * v62);
LABEL_152:
  sub_20E8BE3D8(a5, (uint64_t)memptr, v34);
  if (HIDWORD(v271) && (_DWORD)v271)
  {
    v92 = 0;
    do
    {
      v93 = 0;
      v94 = 0;
      v88.f32[0] = (float)v92;
      v95 = (float32x2_t)vdup_lane_s32((int32x2_t)v88, 0);
      do
      {
        _H3 = *(_WORD *)(v284 + 2 * (v282 * v92) + 2 * v93);
        __asm { FCVT            S3, H3 }
        v101 = LODWORD(_S3) & 0x7FFFFFFF;
        v103 = (LODWORD(_S3) & 0x7FFFFFFFu) > 0x7F800000 || v101 == 2139095040 || v101 == 0;
        if (!v103 && _S3 != 0.0)
        {
          v104 = 0.0 - _S3;
          if (_S3 > 0.0)
            v104 = _S3;
          if (v104 > 0.000001)
          {
            v89.f32[0] = (float)v94;
            v90.i32[0] = *(_DWORD *)&memptr[20];
            v91.i32[0] = v312;
            *(float32x2_t *)v105.f32 = vadd_f32(v311, vmla_f32(vmul_n_f32(*(float32x2_t *)memptr, (float)v94), v95, *(float32x2_t *)&memptr[12]));
            v106 = (float32x2_t)vextq_s8(*(int8x16_t *)memptr, *(int8x16_t *)memptr, 8uLL).u64[0];
            *(float32x2_t *)&v105.u32[2] = vadd_f32(v91, vmla_f32(vmul_f32(v106, v89), v88, v90));
            v107 = vmulq_n_f32(v105, _S3);
            v106.i32[0] = a6[1].i32[0];
            v90.i32[0] = a6[3].i32[0];
            v91.i32[0] = a6[5].i32[0];
            *(float32x2_t *)v108.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a6, v107.f32[0]), a6[2], *(float32x2_t *)v107.f32, 1), a6[4], v107, 2);
            v109 = vmla_lane_f32(vmul_f32(v106, *(float32x2_t *)v107.f32), v90, *(float32x2_t *)v107.f32, 1);
            v110 = (float32x4_t)vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL);
            *(float32x2_t *)&v108.u32[2] = vmla_f32(v109, *(float32x2_t *)v110.f32, v91);
            *(float32x2_t *)v110.f32 = a6[6];
            v110.i32[2] = a6[7].i32[0];
            v111 = vaddq_f32(v110, v108);
            v108.i32[0] = *(_DWORD *)(a2 + 8);
            v90.i32[0] = *(_DWORD *)(a2 + 20);
            v91.i32[0] = *(_DWORD *)(a2 + 32);
            v112 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a2, v111.f32[0]), *(float32x2_t *)(a2 + 12), *(float32x2_t *)v111.f32, 1), *(float32x2_t *)(a2 + 24), v111, 2);
            v89 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v111.f32), v90, *(float32x2_t *)v111.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL), v91);
            v113 = llroundf(v112.f32[0] / v89.f32[0]);
            if ((v113 & 0x80000000) == 0 && v113 < v35)
            {
              v114 = llroundf(v112.f32[1] / v89.f32[0]);
              if ((v114 & 0x80000000) == 0 && v36 > v114)
              {
                v115 = &v67[4 * v113 * (_DWORD)v56 + 4 * v287 * v114];
                *(_DWORD *)v115 = v94;
                *((_DWORD *)v115 + 1) = v92;
              }
            }
          }
        }
        ++v94;
        v93 += v44;
      }
      while (v271 != v94);
      ++v92;
    }
    while (v92 != HIDWORD(v271));
  }
  __ba = v67;
  v116 = fmaxf(v269->f32[0], 0.0);
  v117 = fmaxf(v269->f32[1], 0.0);
  v118 = fmaxf(v269[1].f32[0], 0.0);
  v119 = fmaxf(v269[1].f32[1], 0.0);
  v120 = fmaxf(v269[2].f32[0], 0.0);
  v121 = fmaxf(v269[2].f32[1], 0.0);
  v122 = fmaxf(v269[3].f32[0], 0.0);
  if (v116 >= v118)
    v123 = v118;
  else
    v123 = v116;
  if (v116 <= v118)
    v116 = v118;
  if (v117 >= v119)
    v124 = v119;
  else
    v124 = v117;
  if (v117 <= v119)
    v117 = v119;
  if (v123 >= v120)
    v125 = v120;
  else
    v125 = v123;
  if (v124 >= v121)
    v124 = v121;
  if (v116 <= v120)
    v116 = v120;
  if (v117 <= v121)
    v117 = v121;
  v126 = fmaxf(v269[3].f32[1], 0.0);
  if (v125 >= v122)
    v125 = v122;
  v272 = v125;
  if (v124 >= v126)
    v124 = v126;
  v283 = v124;
  if (v116 <= v122)
    v127 = v122;
  else
    v127 = v116;
  if (v117 <= v126)
    v128 = v126;
  else
    v128 = v117;
  if (v275 == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0)|| v267 == -1&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EF4A0DC((uint64_t)memptr, 0x48u);
  v129 = v128 + 1 - v283;
  v130 = v127 + 1 - v272;
  v131 = v127 + 1 == v272 || v128 + 1 == v283;
  v132 = v131;
  v133 = (float32x2_t)(v130 | (v129 << 32));
  if (v131)
    v133 = 0;
  v134 = *(_QWORD *)&v133 << 32;
  if (!HIDWORD(*(_QWORD *)&v133))
    v134 = 0;
  v135 = v133.u32[0] != 0;
  if (v133.i32[0])
    v136 = HIDWORD(*(_QWORD *)&v133) == 0;
  else
    v136 = 1;
  *(float32x2_t *)v341 = v133;
  *(_QWORD *)&v341[8] = v134 | v135;
  v341[16] = 0;
  v341[24] = 0;
  *(_QWORD *)v306 = v134 | v135;
  if (v136)
    v133 = 0;
  v299 = (int32x2_t)v133;
  if (((v134 >> 30) & ((v134 >> 30) - 1)) != 0)
    v137 = 4;
  else
    v137 = v134 >> 30;
  sub_20EF080A0((unint64_t *)&v342, &v299, (unint64_t *)v306, 1, &dword_210389DB4, 1, v137);
  *(_OWORD *)v317 = *(_OWORD *)v341;
  *(_OWORD *)&v317[12] = *(_OWORD *)&v341[12];
  v321 = *(_OWORD *)((char *)v343 + 8);
  v318 = v342;
  if (v319)
    free(v319);
  v319 = (void *)*((_QWORD *)&v342 + 1);
  v320 = *(_QWORD *)&v343[0];
  v268 = v132;
  *(_QWORD *)v341 = operator new(0x20uLL);
  *(_QWORD *)&v341[8] = *(_QWORD *)v341;
  *(_QWORD *)&v341[16] = *(_QWORD *)v341 + 32;
  *(_QWORD *)v306 = v341;
  v299 = vcvt_s32_f32(vrnda_f32(*v269));
  sub_20EEE90CC((void ***)v306, &v299);
  v299 = vcvt_s32_f32(vrnda_f32(v269[1]));
  sub_20EEE90CC((void ***)v306, &v299);
  v299 = vcvt_s32_f32(vrnda_f32(v269[2]));
  sub_20EEE90CC((void ***)v306, &v299);
  v299 = vcvt_s32_f32(vrnda_f32(v269[3]));
  sub_20EEE90CC((void ***)v306, &v299);
  v140 = *(_DWORD **)v341;
  v141 = *(_QWORD *)&v341[8] - *(_QWORD *)v341;
  __lenb = v130;
  if (*(_QWORD *)&v341[8] != *(_QWORD *)v341)
  {
    memset(v341, 0, 24);
    if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF9)
      sub_20EEC13DC();
    v142 = v141 >> 3;
    *(_QWORD *)v341 = operator new(2 * v141);
    *(_QWORD *)&v341[8] = *(_QWORD *)v341;
    *(_QWORD *)&v341[16] = *(_QWORD *)v341 + 16 * (v141 >> 3);
    v299.i32[0] = 0;
    v295.i32[0] = 0;
    sub_20EF0848C(v141 >> 3, (uint64_t)v140, &v299, &v295, (char **)v341);
    v262 = v129;
    v143 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&v341[8] - *(_QWORD *)v341) >> 4);
    if (*(_QWORD *)&v341[8] == *(_QWORD *)v341)
      v144 = 0;
    else
      v144 = v143;
    sub_20EF08678(*(float **)v341, *(float **)&v341[8], v144, 1);
    v146 = v299.i32[0];
    v147 = v295.i32[0];
    v260 = v140;
    if (v299.i32[0] == v295.i32[0])
    {
      v148 = v140;
      v149 = v140;
      if ((unint64_t)v141 >= 0x10)
      {
        v149 = v140 + 2;
        v150 = v140[2];
        v151 = *v140;
        if (v150 >= *v140)
          v148 = v140;
        else
          v148 = v140 + 2;
        if (v150 < v151)
          v149 = v140;
        if (v141 != 16)
        {
          v152 = v140 + 4;
          if (v150 <= v151)
            v153 = *v140;
          else
            v153 = v140[2];
          if (v150 < v151)
            v151 = v140[2];
          v154 = 8 * v142 - 24;
          while (v154)
          {
            v156 = v152[2];
            v157 = *v152;
            if (v156 >= *v152)
            {
              if (v157 < v151)
              {
                v151 = *v152;
                v148 = v152;
              }
              v155 = v156 < v153;
              if (v156 > v153)
                v153 = v152[2];
              if (!v155)
                v149 = v152 + 2;
              v152 += 4;
              v154 -= 16;
              if (v154 == -8)
                goto LABEL_300;
            }
            else
            {
              v151 = *v148;
              if (v156 < *v148)
              {
                v151 = v152[2];
                v148 = v152 + 2;
              }
              v153 = *v149;
              if (v157 > *v149)
                v153 = *v152;
              if (v157 >= *v149)
                v149 = v152;
              v152 += 4;
              v154 -= 16;
              if (v154 == -8)
                goto LABEL_300;
            }
          }
          if (*v152 >= *v148)
          {
            if (*v152 >= *v149)
              v149 = v152;
          }
          else
          {
            v148 = v152;
          }
        }
      }
LABEL_300:
      if (&v140[2 * v142] == v148)
        goto LABEL_302;
      v178 = *v148;
      v179 = *v149;
      if (v179 + 1 == *v148)
        goto LABEL_302;
      v246 = v148[1];
      v247 = &__ba[4 * v246 * v287];
      v248 = (unint64_t)(v246 - v283) << 32;
      v249 = v179 - v178 + 1;
      v250 = v178 - v272;
      v251 = v178 * v56;
      while (1)
      {
        v252 = &v247[4 * v251];
        v253 = *(_DWORD *)v252;
        if (*(_DWORD *)v252 == -1)
          goto LABEL_385;
        v254 = *((_DWORD *)v252 + 1);
        if (v254 == -1)
          goto LABEL_385;
        v255 = (__int32 *)&v286[4 * (v253 * HIDWORD(v273) + v254 * v289.i32[0])];
        v138.columns[0].i32[0] = *v255;
        if (*(float *)v255 == 0.0)
        {
          v138.columns[1].i32[0] = v255[1];
          if (v138.columns[1].f32[0] == 0.0)
          {
            v138.columns[2].i32[0] = v255[2];
            if (v138.columns[2].f32[0] == 0.0)
              goto LABEL_385;
          }
        }
        else
        {
          v138.columns[1].i32[0] = v255[1];
        }
        v138.columns[2].i32[0] = v255[2];
        *(_DWORD *)v306 = *v255;
        *(_DWORD *)&v306[4] = v138.columns[1].i32[0];
        *(_DWORD *)&v306[8] = v138.columns[2].i32[0];
        *(double *)v138.columns[0].i64 = sub_20EF05654((uint64_t)memptr, v248 | v250, (float *)v306, *(double *)v138.columns[0].i64, *(double *)v138.columns[1].i64, *(double *)v138.columns[2].i64, v145, v139);
LABEL_385:
        ++v250;
        v251 += v56;
        if (!--v249)
          goto LABEL_302;
      }
    }
    if (v299.i32[0] == v295.i32[0] + 1)
    {
LABEL_302:
      if (*(_QWORD *)v341)
      {
        *(_QWORD *)&v341[8] = *(_QWORD *)v341;
        operator delete(*(void **)v341);
      }
      v140 = v260;
      LODWORD(v129) = v262;
      goto LABEL_305;
    }
    v158 = 0;
    v159 = *(_QWORD *)v341;
    v160 = 1;
    v276 = v295.i32[0];
    while (1)
    {
      v163 = v158 <= v160 ? v160 : v158;
      v164 = *(_DWORD *)(v159 + 16 * v158 + 4) == v146 && v146 < v295.i32[0] ? v163 + 1 : v158;
      v165 = v164 <= v160 ? v160 : v164;
      v166 = *(_DWORD *)(v159 + 16 * v160 + 4) == v146 && v146 < v295.i32[0] ? v165 + 1 : v160;
      v167 = *(float *)(v159 + 16 * v164 + 8);
      v168 = *(float *)(v159 + 16 * v166 + 8);
      v160 = v167 <= v168 ? v166 : v164;
      v158 = v167 <= v168 ? v164 : v166;
      v161 = *(float *)(v159 + 16 * v158 + 8);
      v169 = llroundf(v161);
      v170 = llroundf(*(float *)(v159 + 16 * v160 + 8));
      if (v170 + 1 != v169)
        break;
LABEL_266:
      *(float *)(v159 + 16 * v158 + 8) = v161 + *(float *)(v159 + 16 * v158 + 12);
      v162 = v159 + 16 * v160;
      v138.columns[1].i32[0] = *(_DWORD *)(v162 + 8);
      v138.columns[0].f32[0] = *(float *)(v162 + 12) + v138.columns[1].f32[0];
      *(_DWORD *)(v162 + 8) = v138.columns[0].i32[0];
      _ZF = v146++ == v147;
      if (_ZF)
        goto LABEL_302;
    }
    v171 = v170 - v169 + 1;
    v172 = v169 - v272;
    v173 = v56 * v169;
    while (1)
    {
      v174 = &__ba[4 * v146 * v287 + 4 * v173];
      v175 = *(_DWORD *)v174;
      if (*(_DWORD *)v174 == -1)
        goto LABEL_289;
      v176 = *((_DWORD *)v174 + 1);
      if (v176 == -1)
        goto LABEL_289;
      v177 = (__int32 *)&v286[4 * (v175 * HIDWORD(v273) + v176 * v289.i32[0])];
      v138.columns[0].i32[0] = *v177;
      if (*(float *)v177 == 0.0)
      {
        v138.columns[1].i32[0] = v177[1];
        if (v138.columns[1].f32[0] == 0.0)
        {
          v138.columns[2].i32[0] = v177[2];
          if (v138.columns[2].f32[0] == 0.0)
            goto LABEL_289;
        }
      }
      else
      {
        v138.columns[1].i32[0] = v177[1];
      }
      v138.columns[2].i32[0] = v177[2];
      *(_DWORD *)v306 = *v177;
      *(_DWORD *)&v306[4] = v138.columns[1].i32[0];
      *(_DWORD *)&v306[8] = v138.columns[2].i32[0];
      *(double *)v138.columns[0].i64 = sub_20EF05654((uint64_t)memptr, ((unint64_t)(v146 - v283) << 32) | v172, (float *)v306, *(double *)v138.columns[0].i64, *(double *)v138.columns[1].i64, *(double *)v138.columns[2].i64, v145, v139);
LABEL_289:
      ++v172;
      v173 += v56;
      if (!--v171)
      {
        v159 = *(_QWORD *)v341;
        v161 = *(float *)(*(_QWORD *)v341 + 16 * v158 + 8);
        v147 = v276;
        goto LABEL_266;
      }
    }
  }
LABEL_305:
  if (v140)
    operator delete(v140);
  if (*(_DWORD *)&memptr[12])
    v180 = *(_DWORD *)&memptr[8] == 0;
  else
    v180 = 1;
  v181 = *(_DWORD *)&memptr[16];
  if (v180)
    v182 = 0;
  else
    v182 = *(_QWORD *)&memptr[8];
  v183 = (unsigned int *)v313;
  v184 = HIDWORD(v182);
  v185 = HIDWORD(*(_QWORD *)&memptr[16]);
  if (HIDWORD(v182) * *(_DWORD *)&memptr[20] == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v186 = v182;
  if ((_DWORD)v182)
    v187 = HIDWORD(v182) == 0;
  else
    v187 = 1;
  if (v187)
  {
    v219 = -1;
  }
  else
  {
    v216 = 0;
    v217 = 0;
    v218 = 0;
    v219 = -1;
    v138.columns[0].i64[0] = 1.0;
    do
    {
      v220 = v218 << v322;
      v221 = v186;
      v222 = v216;
      do
      {
        v229 = v183[8 * v222 + 6];
        if (v217 < v229)
        {
          if ((_DWORD)v229)
          {
            v223 = (float64x2_t *)&v183[8 * v222];
            *(double *)v138.columns[1].i64 = (double)v229;
            v139.f64[0] = v223[1].f64[0];
            v224 = vdivq_f64(v139, (float64x2_t)v138.columns[1]);
            _Q2 = vdivq_f64(*v223, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v229), 0));
            _Q3 = vmulq_f64(_Q2, _Q2);
            _D4 = _Q2.f64[1];
            __asm { FMLA            D3, D4, V2.D[1] }
            _Q3.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q3.f64[0], v224.f64[0], v224.f64[0]));
            v138.columns[1] = (simd_float3)vmulq_f64(v224, _Q3);
            v138.columns[2] = (simd_float3)vmulq_n_f64(_Q2, _Q3.f64[0]);
            v228 = vextq_s8((int8x16_t)v138.columns[2], (int8x16_t)v138.columns[2], 8uLL).u64[0];
          }
          else
          {
            v138.columns[2].i64[0] = 0;
            v228 = 0;
            v138.columns[1].i64[0] = 0;
          }
          v138.columns[2].i64[1] = v228;
          v138.columns[2] = (simd_float3)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v138.columns[2]), (float64x2_t)v138.columns[1]);
          v289 = (float32x4_t)v138.columns[2];
          v219 = v220;
          v217 = v183[8 * v222 + 6];
        }
        ++v220;
        v222 += v185;
        --v221;
      }
      while (v221);
      ++v218;
      v216 += v181;
    }
    while (v218 != (_DWORD)v184);
  }
  v188.columns[0] = (simd_float3)sub_20E8BE3D8(a5, (uint64_t)v306, v138);
  if (*(_DWORD *)&v317[4])
    v191 = *(_DWORD *)v317 == 0;
  else
    v191 = 1;
  v192 = *(_DWORD *)&v317[8];
  if (v191)
    v193 = 0;
  else
    v193 = *(_QWORD *)v317;
  v285 = v319;
  v279 = v193;
  v194 = HIDWORD(v193);
  v195 = HIDWORD(*(_QWORD *)&v317[8]);
  if (HIDWORD(v193) * *(_DWORD *)&v317[12] == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v196 = *(_QWORD *)v274;
  v197 = *((_DWORD *)v274 + 4);
  v198 = *((_DWORD *)v274 + 5);
  if (v268)
  {
    LODWORD(v129) = 0;
    v199 = 0;
  }
  else
  {
    v199 = __lenb;
  }
  if ((_DWORD)v129 * v287 == -1
    && (v277 = v199,
        v200 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0), v199 = v277, v200)|| (v199 != v279 || (_DWORD)v129 != (_DWORD)v194)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Marker/PoseEstimation.cpp", 142, (uint64_t)"segments.Shape(0) == mapSegmentToDepth.Shape(1) && segments.Shape(1) == mapSegmentToDepth.Shape(2)", 98, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (v194 && v279)
  {
    v201 = 0;
    v202 = 0;
    v188.columns[0].i64[0] = *(_QWORD *)&v306[12];
    v188.columns[0].i32[2] = v307;
    *(float32x2_t *)v188.columns[1].f32 = v308;
    v188.columns[1].i32[2] = v309;
    v188.columns[2] = *(simd_float3 *)v306;
    v203 = (float32x2_t)vextq_s8((int8x16_t)v188.columns[2], (int8x16_t)v188.columns[2], 8uLL).u64[0];
    v204 = (float32x2_t)vextq_s8((int8x16_t)v188.columns[0], (int8x16_t)v188.columns[0], 8uLL).u64[0];
    v205 = (float32x2_t)vextq_s8((int8x16_t)v188.columns[1], (int8x16_t)v188.columns[1], 8uLL).u64[0];
    v206 = 0uLL;
    do
    {
      v207 = 0;
      v208 = 0;
      v209 = v279;
      do
      {
        if (v285[(v201 * v195) + v208] == v219)
        {
          v210 = (unsigned int *)&__ba[4 * v272 * (_DWORD)v56
                                     + 4 * v283 * v287
                                     + 4 * v287 * v201
                                     + 4 * v207];
          v211 = *v210;
          if (*v210 != -1)
          {
            v212 = v210[1];
            if (v212 != -1)
            {
              _H7 = *(_WORD *)(v196 + 2 * (v211 * v197 + v212 * v198));
              __asm { FCVT            S7, H7 }
              if (_S7 != 0.0 && ((LODWORD(_S7) & 0x7FFFFFFFu) - 0x800000) >> 24 <= 0x7E)
              {
                v189.f32[0] = (float)v211;
                v190.f32[0] = (float)v212;
                *(float32x2_t *)v215.f32 = vadd_f32(v308, vmla_n_f32(vmul_n_f32(*(float32x2_t *)v306, (float)v211), *(float32x2_t *)&v306[12], (float)v212));
                v189 = vadd_f32(v205, vmla_f32(vmul_f32(v203, v189), v190, v204));
                *(float32x2_t *)&v215.u32[2] = v189;
                v206 = vmlaq_n_f32(v206, v215, _S7);
                ++v202;
              }
            }
          }
        }
        v208 += v192;
        v207 += v56;
        --v209;
      }
      while (v209);
      ++v201;
    }
    while (v201 != v194);
    if (v202)
    {
      v188.columns[0].f32[0] = (float)v202;
      v188.columns[0] = (simd_float3)vdivq_f32(v206, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v188.columns[0].f32, 0));
      v188.columns[2].i32[0] = a6[1].i32[0];
      v230 = a6[2];
      v203.i32[0] = a6[3].i32[0];
      v231 = a6[4];
      v205.i32[0] = a6[5].i32[0];
      *(float32x2_t *)v232.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a6, v188.columns[0].f32[0]), v230, *(float32x2_t *)v188.columns[0].f32, 1), v231, (float32x4_t)v188.columns[0], 2);
      v233 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v188.columns[2].f32, *(float32x2_t *)v188.columns[0].f32), v203, *(float32x2_t *)v188.columns[0].f32, 1);
      v188.columns[0] = (simd_float3)vextq_s8((int8x16_t)v188.columns[0], (int8x16_t)v188.columns[0], 8uLL);
      *(float32x2_t *)&v232.u32[2] = vmla_f32(v233, *(float32x2_t *)v188.columns[0].f32, v205);
      *(float32x2_t *)v188.columns[0].f32 = a6[6];
      v188.columns[0].i32[2] = a6[7].i32[0];
      v188.columns[0] = (simd_float3)vaddq_f32(v232, (float32x4_t)v188.columns[0]);
      v234 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a6, v289.f32[0]), v230, *(float32x2_t *)v289.f32, 1), v231, v289, 2);
      v188.columns[1] = (simd_float3)vextq_s8((int8x16_t)v289, (int8x16_t)v289, 8uLL);
      v303 = v188.columns[0].i32[2];
      v302 = v188.columns[0].i64[0];
      *(float32x2_t *)v188.columns[2].f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v188.columns[2].f32, *(float32x2_t *)v289.f32), v203, *(float32x2_t *)v289.f32, 1), *(float32x2_t *)v188.columns[1].f32, v205);
      v288 = (uint64_t)v234;
      v290 = v188.columns[2];
      v305 = v188.columns[2].i32[0];
      v304 = v234;
      sub_20E8BE3D8(v270, (uint64_t)&v299, v188);
      v235.i64[1] = v290.i64[1];
      v236 = __ba;
      if (v290.f32[0] <= 0.0)
      {
        v295 = v299;
        v296 = v300;
        v297 = v301;
        *(float32x2_t *)v235.f32 = vmul_f32((float32x2_t)vrev64_s32(v300), (float32x2_t)v299);
        v256 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v235.f32, 1);
        *(float32x2_t *)v235.f32 = vsub_f32(*(float32x2_t *)v235.f32, v256);
        v298 = v235.i32[0];
        v241 = v286;
        sub_20EF0704C((uint64_t)v341, v269, (float32x2_t *)&v295, (uint64_t)&v302, v235, *(double *)&v256, v301);
      }
      else
      {
        v237.i64[0] = v288;
        v237.i64[1] = v290.i64[0];
        v295 = v299;
        v296 = v300;
        v297 = v301;
        v238 = vmul_f32((float32x2_t)vrev64_s32(v300), (float32x2_t)v299);
        v239 = (float32x2_t)vdup_lane_s32((int32x2_t)v238, 1);
        v298 = vsub_f32(v238, v239).u32[0];
        v240 = vnegq_f32(v237);
        v291 = v302;
        v292 = v303;
        v294 = v240.i32[2];
        v293 = v240.i64[0];
        v241 = v286;
        sub_20EF0704C((uint64_t)v341, v269, (float32x2_t *)&v295, (uint64_t)&v291, v240, *(double *)&v239, v301);
      }
      v257 = *(_OWORD *)&v341[16];
      *(_OWORD *)v266 = *(_OWORD *)v341;
      *(_OWORD *)(v266 + 16) = v257;
      v258 = v343[0];
      *(_OWORD *)(v266 + 32) = v342;
      *(_OWORD *)(v266 + 48) = v258;
      *(_BYTE *)(v266 + 64) = 1;
      v242 = v319;
      if (!v319)
        goto LABEL_362;
      goto LABEL_361;
    }
  }
  *(_BYTE *)v266 = 0;
  *(_BYTE *)(v266 + 64) = 0;
  v241 = v286;
  v236 = __ba;
  v242 = v319;
  if (v319)
LABEL_361:
    free(v242);
LABEL_362:
  v319 = 0;
  v243 = v313;
  if (v313)
  {
    v244 = !v315 || v314 == 0;
    v245 = v244 ? 0 : v315;
    if (v245 * (v316 >> 37) != -1)
      goto LABEL_372;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v243 = v313;
    if (v313)
LABEL_372:
      free(v243);
  }
  if (v236)
    free(v236);
  if (v241)
    free(v241);
  if (v340)
    free(v340);
  v340 = 0;
  if (v333)
    free(v333);
}

void sub_20EF06F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_20EF07470((uint64_t)&a53);
  if (a21)
    free(a21);
  if (a24)
    free(a24);
  if (STACK[0x2C0])
    free((void *)STACK[0x2C0]);
  STACK[0x2C0] = 0;
  if (STACK[0x268])
    free((void *)STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20EF0704C(uint64_t a1, float32x2_t *a2, float32x2_t *a3, uint64_t a4, float32x4_t a5, double a6, float32x2_t a7)
{
  float32x2_t v11;
  float v12;
  int8x16_t v13;
  float v14;
  BOOL v15;
  float32x2_t v16;
  float32x4_t v17;
  int32x2_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x4_t v21;
  int32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  uint64_t *v34;
  float32x4_t v35;
  uint64_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  int32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x2_t v48;
  int8x16_t v49;
  uint64_t *v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  __int32 v54;
  char **v55;

  a7.i32[0] = *(_DWORD *)(a4 + 20);
  a5.i64[0] = *(_QWORD *)(a4 + 12);
  v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 1);
  a5.i32[2] = a7.i32[0];
  v12 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)a5.f32), v11, *(float32x2_t *)a5.f32, 1), a7, a7).f32[0];
  v13 = (int8x16_t)a5;
  if (v12 != 1.0)
  {
    v14 = v12 + -1.0;
    if (v12 < 1.0)
      v14 = 1.0 - v12;
    v15 = v14 > 0.000001;
    v13 = (int8x16_t)a5;
    if (v15)
      v13 = (int8x16_t)vmulq_n_f32(a5, 1.0 / sqrtf(v12));
  }
  v11.i32[0] = *(_DWORD *)(a4 + 8);
  v16 = (float32x2_t)vextq_s8(v13, v13, 8uLL).u64[0];
  v16.f32[0] = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a4, *(float32x2_t *)v13.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), *(float32x2_t *)a4, 1), v16, v11).f32[0];
  v49 = (int8x16_t)vdivq_f32(a5, (float32x4_t)vdupq_lane_s32((int32x2_t)v16, 0));
  v50 = (uint64_t *)operator new(0x30uLL);
  v51 = v50;
  v52 = (char *)(v50 + 6);
  v55 = (char **)&v50;
  *(float32x2_t *)v17.f32 = vadd_f32(vmla_lane_f32(vmul_n_f32(*a3, COERCE_FLOAT(*a2)), a3[1], *a2, 1), a3[2]);
  v17.i32[2] = 1.0;
  v48 = (float32x2_t)vextq_s8(v49, v49, 8uLL).u64[0];
  v18 = (int32x2_t)vadd_f32(v48, vmla_lane_f32(vmul_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v17.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1), *(float32x2_t *)v49.i8, 1));
  *(float *)v18.i32 = -*(float *)v18.i32;
  v19 = vdivq_f32(v17, (float32x4_t)vdupq_lane_s32(v18, 0));
  v54 = v19.i32[2];
  v53 = v19.i64[0];
  sub_20EEEB61C(&v55, &v53);
  v20 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1);
  *(float32x2_t *)v21.f32 = vadd_f32(vmla_lane_f32(vmul_n_f32(*a3, COERCE_FLOAT(*(_QWORD *)&a2[1])), a3[1], a2[1], 1), a3[2]);
  v21.i32[2] = 1.0;
  v22 = (int32x2_t)vadd_f32(v48, vmla_lane_f32(vmul_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v21.f32), v20, *(float32x2_t *)v21.f32, 1));
  *(float *)v22.i32 = -*(float *)v22.i32;
  v23 = vdivq_f32(v21, (float32x4_t)vdupq_lane_s32(v22, 0));
  v54 = v23.i32[2];
  v53 = v23.i64[0];
  sub_20EEEB61C(&v55, &v53);
  *(float32x2_t *)v24.f32 = vadd_f32(vmla_lane_f32(vmul_n_f32(*a3, COERCE_FLOAT(*(_QWORD *)&a2[2])), a3[1], a2[2], 1), a3[2]);
  v24.i32[2] = 1.0;
  v25 = (int32x2_t)vadd_f32(v48, vmla_lane_f32(vmul_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v24.f32), v20, *(float32x2_t *)v24.f32, 1));
  *(float *)v25.i32 = -*(float *)v25.i32;
  v26 = vdivq_f32(v24, (float32x4_t)vdupq_lane_s32(v25, 0));
  v54 = v26.i32[2];
  v53 = v26.i64[0];
  sub_20EEEB61C(&v55, &v53);
  *(float32x2_t *)v27.f32 = vadd_f32(vmla_lane_f32(vmul_n_f32(*a3, COERCE_FLOAT(*(_QWORD *)&a2[3])), a3[1], a2[3], 1), a3[2]);
  v27.i32[2] = 1.0;
  v28 = (int32x2_t)vadd_f32(v48, vmla_lane_f32(vmul_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v27.f32), v20, *(float32x2_t *)v27.f32, 1));
  *(float *)v28.i32 = -*(float *)v28.i32;
  v29 = vdivq_f32(v27, (float32x4_t)vdupq_lane_s32(v28, 0));
  v54 = v29.i32[2];
  v53 = v29.i64[0];
  sub_20EEEB61C(&v55, &v53);
  v34 = v50;
  if (v50 == v51)
    sub_20E866B34();
  v35 = 0uLL;
  v36 = v50;
  do
  {
    v30.i64[0] = *v36;
    v30.i32[2] = *((_DWORD *)v36 + 2);
    v35 = vaddq_f32(v35, v30);
    v36 = (uint64_t *)((char *)v36 + 12);
  }
  while (v36 != v51);
  v30.f32[0] = (float)(0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)v50) >> 2));
  v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 0);
  v38 = vdivq_f32(v35, v37);
  v31.i64[0] = *(uint64_t *)((char *)v50 + 12);
  v31.i32[2] = *((_DWORD *)v50 + 5);
  v37.i64[0] = v50[3];
  v37.i32[2] = *((_DWORD *)v50 + 8);
  v39.i64[0] = 0x3F0000003F000000;
  v39.i64[1] = 0x3F0000003F000000;
  v40 = vsubq_f32(vmulq_f32(vaddq_f32(v31, v37), v39), v38);
  v41 = (float32x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
  v42 = (int32x4_t)vmulq_n_f32(v40, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 1), *(float32x2_t *)v40.f32, 1), v41, v41).f32[0]));
  v32.i64[0] = *v50;
  v32.i32[2] = *((_DWORD *)v50 + 2);
  v43 = vaddq_f32(v31, v32);
  v44 = (int8x16_t)vmlaq_f32(vnegq_f32(v38), v43, v39);
  *(int32x2_t *)v43.f32 = vdup_lane_s32(*(int32x2_t *)v44.i8, 1);
  v45 = (float32x4_t)vextq_s8(v44, v44, 8uLL);
  v33.i64[0] = *(_QWORD *)(a4 + 12);
  v33.i32[2] = *(_DWORD *)(a4 + 20);
  v43.f32[0] = 1.0
             / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), *(float32x2_t *)v43.f32, *(float32x2_t *)v44.i8, 1), *(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32).f32[0]);
  v46 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v33, (int8x16_t)v33, 0xCuLL), (int8x16_t)v33, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v42, v42), (int8x16_t)v42, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v42, (int8x16_t)v42, 0xCuLL), (int8x16_t)v42, 8uLL));
  *(float32x2_t *)v45.f32 = vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v43.f32);
  *(float32x2_t *)v43.f32 = vmla_f32(vmla_lane_f32(vmul_f32(vmul_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v43.f32), *(float32x2_t *)v46.f32), vmul_lane_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.i8, 1), *(float32x2_t *)v46.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL), *(float32x2_t *)v45.f32);
  v45.i32[0] = 0;
  *(_OWORD *)a1 = xmmword_210389D74;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_210389D84;
  *(_OWORD *)(a1 + 32) = xmmword_210389D94;
  *(_OWORD *)(a1 + 48) = unk_210389DA4;
  *(_DWORD *)(a1 + 8) = v42.i32[2];
  *(_QWORD *)a1 = v42.i64[0];
  v47 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v45, v43), 0), (int8x16_t)vnegq_f32(v46), (int8x16_t)v46);
  *(_DWORD *)(a1 + 24) = v47.i32[2];
  *(_QWORD *)(a1 + 16) = v47.i64[0];
  *(_DWORD *)(a1 + 40) = v33.i32[2];
  *(_QWORD *)(a1 + 32) = v33.i64[0];
  *(_DWORD *)(a1 + 56) = v38.i32[2];
  *(_QWORD *)(a1 + 48) = v38.i64[0];
  operator delete(v34);
}

void sub_20EF07444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;

  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF07470(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 120);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 120) = 0;
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    v4 = !*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 64) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 68);
    if (v5 * (*(_QWORD *)(a1 + 72) >> 37) != -1)
      goto LABEL_13;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(void **)(a1 + 48);
    if (v3)
LABEL_13:
      free(v3);
  }
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_20EF0751C(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, const double *a5, char a6)
{
  unint64_t v10;
  int v11;
  unsigned int v12;
  size_t v13;
  int v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  char v37;
  int v38;
  int v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  BOOL v58;
  char v59;
  int v60;
  uint64_t v61;
  BOOL v62;
  char v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  unint64_t v74;
  int v75;
  _QWORD *v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  float64x2_t v85;
  float64x2_t *v86;
  uint64_t v87;
  float64x2_t v88;
  float64x2_t *v89;
  unint64_t v90;
  uint64_t v91;
  char v92;
  _QWORD v93[3];
  void *memptr;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  _QWORD v100[2];

  if (!a4)
  {
    v16 = *a2;
    v17 = a2[1];
    if (v17)
      v18 = v16;
    else
      v18 = 0;
    v19 = v17 * v16;
    v20 = a2[2];
    if (v20)
      v11 = v19;
    else
      v11 = 0;
    v10 = (*a2 != 0) | (unint64_t)(v18 << 32);
    v21 = v11 * v20;
    v13 = 8 * v21;
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 8;
    if (v21)
      goto LABEL_3;
LABEL_12:
    v15 = 0;
    goto LABEL_13;
  }
  v10 = *a3;
  v11 = *((_DWORD *)a3 + 2);
  v12 = v11 * a2[2];
  v13 = 8 * v12;
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 8;
  if (!v12)
    goto LABEL_12;
LABEL_3:
  memptr = 0;
  v14 = malloc_type_posix_memalign(&memptr, 8uLL, v13, 0x1F88E90uLL);
  if (v14)
    sub_210207B94(v14, *(_QWORD *)(a1 + 16), v13);
  v15 = memptr;
  *(_QWORD *)(a1 + 8) = memptr;
LABEL_13:
  v22 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 36) = (8 * v10) & 0xFFFFFFF8FFFFFFF8;
  *(_DWORD *)(a1 + 44) = 8 * v11;
  if (!v15 || !a6)
    return a1;
  v23 = v11 & 0x1FFFFFFF;
  if (*(_DWORD *)(a1 + 24))
    v24 = *(_DWORD *)(a1 + 28) == 0;
  else
    v24 = 1;
  v25 = v24 || *(_DWORD *)(a1 + 32) == 0;
  v26 = v25;
  if (v25)
    v27 = 0;
  else
    v27 = *(_QWORD *)(a1 + 24);
  if (v25)
    v28 = 0;
  else
    v28 = *(_DWORD *)(a1 + 32);
  v29 = (v28 * v23);
  if ((_DWORD)v29 == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_138;
  }
  v30 = v10 & 0x1FFFFFFF1FFFFFFFLL;
  v31 = v10 & 0x1FFFFFFF;
  if (v31 != 1)
  {
    if ((_DWORD)v27)
      v36 = HIDWORD(v27) == 0;
    else
      v36 = 1;
    if (v36)
      v37 = 1;
    else
      v37 = v26;
    if ((v37 & 1) != 0)
      return a1;
    v38 = v27 - 1;
    v39 = HIDWORD(v27) - 1;
    v40 = HIDWORD(v30);
    v41 = v28 - 1;
    if (v28 != 1)
    {
      if (HIDWORD(v27) == 1)
      {
        if ((_DWORD)v27 != 1)
        {
          v75 = 0;
          do
          {
            v76 = v15;
            v77 = v27 - 1;
            do
            {
              *v76 = *(_QWORD *)a5;
              v76 += v31;
              --v77;
            }
            while (v77);
            *v76 = *(_QWORD *)a5;
            v15 += v23;
            ++v75;
          }
          while (v75 != v41);
LABEL_106:
          if ((_DWORD)v27 != 1)
          {
            v78 = 8 * v31;
            do
            {
              *v15 = *(_QWORD *)a5;
              v15 = (_QWORD *)((char *)v15 + v78);
              --v38;
            }
            while (v38);
          }
          goto LABEL_127;
        }
        do
        {
          *v15 = *(_QWORD *)a5;
          v15 += v23;
          --v41;
        }
        while (v41);
LABEL_127:
        *v15 = *(_QWORD *)a5;
        return a1;
      }
      if ((_DWORD)v27 == 1)
      {
        do
        {
          v79 = v15;
          v80 = HIDWORD(v27) - 1;
          do
          {
            *v79 = *(_QWORD *)a5;
            v79 += v40;
            --v80;
          }
          while (v80);
          *v79 = *(_QWORD *)a5;
          v15 += v23;
          ++v38;
        }
        while (v38 != v41);
        do
        {
LABEL_113:
          *v15 = *(_QWORD *)a5;
          v15 += v40;
          --v39;
        }
        while (v39);
        goto LABEL_127;
      }
      v42 = 0;
      v43 = 8 * v23;
      v44 = v40;
      v45 = 8 * v31;
      v46 = &v15[v40];
      do
      {
        v47 = 0;
        v48 = v46;
        v49 = v15;
        do
        {
          v50 = v48;
          v51 = v49;
          v52 = v27 - 1;
          do
          {
            *v51 = *(_QWORD *)a5;
            v51 = (_QWORD *)((char *)v51 + v45);
            --v52;
          }
          while (v52);
          *v51 = *(_QWORD *)a5;
          v49 = (_QWORD *)((char *)v49 + v44 * 8);
          ++v47;
          v48 = &v50[v44];
        }
        while (v47 != v39);
        v53 = v27 - 1;
        do
        {
          *v50 = *(_QWORD *)a5;
          v50 = (_QWORD *)((char *)v50 + v45);
          --v53;
        }
        while (v53);
        *v50 = *(_QWORD *)a5;
        v15 = (_QWORD *)((char *)v15 + v43);
        ++v42;
        v46 = (_QWORD *)((char *)v46 + v43);
      }
      while (v42 != v41);
    }
    if (HIDWORD(v27) == 1)
      goto LABEL_106;
    if ((_DWORD)v27 != 1)
    {
      v54 = 0;
      v55 = 8 * v40;
      do
      {
        v56 = v15;
        v57 = v27 - 1;
        do
        {
          *v56 = *(_QWORD *)a5;
          v56 += v31;
          --v57;
        }
        while (v57);
        *v56 = *(_QWORD *)a5;
        v15 = (_QWORD *)((char *)v15 + v55);
        ++v54;
      }
      while (v54 != v39);
      goto LABEL_106;
    }
    goto LABEL_113;
  }
  if (HIDWORD(v30) != (_DWORD)v27)
  {
    v92 = 0;
    v91 = v27;
    v93[0] = &v92;
    v93[1] = &v91;
    v93[2] = a5;
    if ((_DWORD)v27)
      v58 = HIDWORD(v27) == 0;
    else
      v58 = 1;
    if (v58)
      v59 = 1;
    else
      v59 = v26;
    if ((v59 & 1) == 0)
    {
      LODWORD(memptr) = 0;
      HIDWORD(memptr) = v27 - 1;
      v95 = 1;
      v96 = HIDWORD(v27) - 1;
      v100[0] = 0;
      v100[1] = 0;
      v60 = v28 - 1;
      v97 = (v10 & 0x1FFFFFFF1FFFFFFFLL) >> 32;
      v98 = v28 - 1;
      v99 = v23;
      if (v28 != 1)
      {
        v61 = 8 * v23;
        do
        {
          sub_20EF07BF8((uint64_t)&memptr, (uint64_t)v100, (uint64_t)v93, (unint64_t)v15);
          v15 = (_QWORD *)((char *)v15 + v61);
          --v60;
        }
        while (v60);
      }
      sub_20EF07BF8((uint64_t)&memptr, (uint64_t)v100, (uint64_t)v93, (unint64_t)v15);
    }
    return a1;
  }
  v32 = (HIDWORD(v27) * v27);
  if ((_DWORD)v23 != (_DWORD)v32)
  {
    if ((_DWORD)v27)
      v62 = HIDWORD(v27) == 0;
    else
      v62 = 1;
    if (v62)
      v63 = 1;
    else
      v63 = v26;
    if ((v63 & 1) != 0)
      return a1;
    v64 = v28 - 1;
    if (v28 == 1)
    {
      if (!(_DWORD)v32)
        return a1;
    }
    else
    {
      if (!(_DWORD)v32)
        return a1;
      v65 = 0;
      v66 = 8 * v23;
      v67 = v15;
      do
      {
        v68 = (unint64_t)v67;
        if (!v67
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_138;
        }
        v69 = (_QWORD *)v68;
        v70 = v32;
        if (v32 < 6)
          goto LABEL_98;
        if (v68 < (unint64_t)(a5 + 1))
        {
          v69 = (_QWORD *)v68;
          v70 = v32;
          if ((const double *)((char *)&v15[v32] + v66 * v65) > a5)
            goto LABEL_98;
        }
        v71 = 0;
        v69 = (_QWORD *)(v68 + 8 * (v32 & 0xFFFFFFFC));
        v72 = vld1q_dup_f64(a5);
        do
        {
          v73 = (float64x2_t *)(v68 + v71);
          *v73 = v72;
          v73[1] = v72;
          v71 += 32;
        }
        while (((8 * v32) & 0x7FFFFFFE0) != v71);
        v70 = v32 & 3;
        if ((v32 & 0xFFFFFFFC) != v32)
        {
LABEL_98:
          v74 = v70 + 1;
          do
          {
            *v69++ = *(_QWORD *)a5;
            --v74;
          }
          while (v74 > 1);
        }
        v67 = (_QWORD *)(v68 + v66);
        ++v65;
      }
      while ((_DWORD)v65 != v64);
      v15 = (_QWORD *)(v68 + v66);
      if (!v68)
      {
        if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          v15 = 0;
          goto LABEL_119;
        }
LABEL_138:
        abort();
      }
    }
LABEL_119:
    v81 = v32 - ((_DWORD)v32 != 0) + 1;
    if (v81 >= 0x10 && (v15 >= (_QWORD *)a5 + 1 || &v15[v32] <= (_QWORD *)a5))
    {
      v82 = &v15[v81 & 0xFFFFFFFFFFFFFFFCLL];
      v32 -= v81 & 0xFFFFFFFFFFFFFFFCLL;
      v88 = vld1q_dup_f64(a5);
      v89 = (float64x2_t *)(v15 + 2);
      v90 = v81 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v89[-1] = v88;
        *v89 = v88;
        v89 += 2;
        v90 -= 4;
      }
      while (v90);
      if (v81 == (v81 & 0xFFFFFFFFFFFFFFFCLL))
        return a1;
    }
    else
    {
      v82 = v15;
    }
    v83 = v32 + 1;
    do
    {
      *v82++ = *(_QWORD *)a5;
      --v83;
    }
    while (v83 > 1);
    return a1;
  }
  if (!(_DWORD)v29)
    return a1;
  if (v29 < 8 || v15 < (_QWORD *)a5 + 1 && &v15[v29] > (_QWORD *)a5)
  {
    v33 = v15;
    v34 = (v28 * v23);
LABEL_40:
    v35 = v34 + 1;
    do
    {
      *v33++ = *(_QWORD *)a5;
      --v35;
    }
    while (v35 > 1);
    return a1;
  }
  v33 = &v15[v29 & 0xFFFFFFFC];
  v34 = ((_BYTE)v28 * (_BYTE)v23) & 3;
  v85 = vld1q_dup_f64(a5);
  v86 = (float64x2_t *)(v15 + 2);
  v87 = v29 & 0xFFFFFFFC;
  do
  {
    v86[-1] = v85;
    *v86 = v85;
    v86 += 2;
    v87 -= 4;
  }
  while (v87);
  if ((v29 & 0xFFFFFFFC) != v29)
    goto LABEL_40;
  return a1;
}

void sub_20EF07BD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF07BF8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const double *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float64x2_t v17;
  float64x2_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const double *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  float64x2_t v29;
  float64x2_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const double **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x1FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x1FFFFFFFFFFFFFFFLL) - ((v11 & 0x1FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0xE)
        {
          v15 = -8;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 8 * v11 + 8, v14 = (_QWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_QWORD *)(v4 + 8 * (v13 & 0xFFFFFFFFFFFFFFFCLL));
            v12 -= v13 & 0xFFFFFFFFFFFFFFFCLL;
            v17 = vld1q_dup_f64(v10);
            v18 = (float64x2_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 4;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_QWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_QWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 8 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const double **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x1FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x1FFFFFFFFFFFFFFFLL) - ((v23 & 0x1FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 8 * v23;
    if (!v24)
      v26 = 8;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_QWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_QWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_QWORD *)(v4 + 8 * (v25 & 0xFFFFFFFFFFFFFFFCLL));
    v24 -= v25 & 0xFFFFFFFFFFFFFFFCLL;
    v29 = vld1q_dup_f64(v22);
    v30 = (float64x2_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 4;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_30;
  }
  return result;
}

uint64_t sub_20EF07E4C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const float **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          v15 = -4;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v17 = vld1q_dup_f32(v10);
            v18 = (float32x4_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_DWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const float **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 4 * v23;
    if (!v24)
      v26 = 4;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_DWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v22);
    v30 = (float32x4_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

unint64_t *sub_20EF080A0(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _DWORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  BOOL v23;
  void *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  void *memptr[3];
  _QWORD v35[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 4 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    v20 = malloc_type_posix_memalign(memptr, v19, 4 * v14, 0x1F88E90uLL);
    if (v20)
      sub_210207B94(v20, a1[2], v15);
    v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
    if (v21 && a6)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = (void *)v22;
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x3FFFFFFF3FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 30) >> 2) == -1
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v35[0] = memptr;
      v35[1] = a5;
      if ((v11 & 0x3FFFFFFF) == 1)
      {
        sub_20EF082FC((uint64_t)v35);
      }
      else if ((_DWORD)v24 && HIDWORD(v24))
      {
        v25 = (_DWORD)v24 - 1;
        v26 = 4 * (v11 & 0x3FFFFFFF);
        v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          v28 = HIDWORD(v11) & 0x3FFFFFFF;
          if ((_DWORD)v24 == 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
          }
          else
          {
            v29 = 0;
            v30 = 4 * v28;
            do
            {
              v31 = v21;
              v32 = (_DWORD)v24 - 1;
              do
              {
                *v31 = *a5;
                v31 = (_DWORD *)((char *)v31 + v26);
                --v32;
              }
              while (v32);
              *v31 = *a5;
              v21 = (_DWORD *)((char *)v21 + v30);
              ++v29;
            }
            while (v29 != v27);
          }
        }
        if ((_DWORD)v24 != 1)
        {
          do
          {
            *v21 = *a5;
            v21 = (_DWORD *)((char *)v21 + v26);
            --v25;
          }
          while (v25);
        }
        *v21 = *a5;
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  }
  return a1;
}

void sub_20EF082E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF082FC(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  _DWORD v22[5];
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  v5 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v1 + 12) * v3);
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v12 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v12 < 0x10)
      goto LABEL_19;
    v13 = 4 * v6;
    if (!(_DWORD)v6)
      v13 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      v14 = (_DWORD *)v7;
LABEL_20:
      v15 = v6 + 1;
      do
      {
        *v14++ = *(_DWORD *)v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    v14 = (_DWORD *)(v7 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF8;
    v16 = vld1q_dup_f32(v2);
    v17 = (float32x4_t *)(v7 + 16);
    v18 = v12 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_20;
  }
  else
  {
    v20 = 0;
    v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    v21[2] = v2;
    v9 = *(_DWORD *)(v1 + 12);
    if ((_DWORD)v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      v22[2] = v5;
      v22[3] = v9 - 1;
      v22[4] = v4;
      v11 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_20EF07E4C((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

void sub_20EF0848C(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, char **a5)
{
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  float v25;
  int v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;

  *a3 = 0x7FFFFFFF;
  *a4 = 0x80000000;
  if (a1)
  {
    v7 = 0;
    v41 = a3;
    v42 = a4;
    v40 = a2;
    while (1)
    {
      v9 = (int *)(a2 + 8 * v7);
      v10 = v7 + 1;
      if (v7 + 1 == a1)
        v11 = 0;
      else
        v11 = v7 + 1;
      v12 = (int *)(a2 + 8 * v11);
      v13 = v12[1];
      v14 = v9[1];
      if (v13 >= v14)
        v15 = v9[1];
      else
        v15 = v12[1];
      if (v14 <= v13)
        v16 = v12[1];
      else
        v16 = v9[1];
      v17 = *a3;
      if (v15 < *a3)
        v17 = v15;
      *a3 = v17;
      v18 = *a4;
      if (*a4 <= v16)
        v18 = v16;
      *a4 = v18;
      if (v15 == v16)
        goto LABEL_5;
      v20 = *v12;
      v19 = v12[1];
      v22 = *v9;
      v21 = v9[1];
      v23 = __OFSUB__(v19, v21);
      v24 = v19 - v21;
      v25 = (float)(v20 - v22) / (float)v24;
      v26 = v24 < 0 != v23 ? v20 : v22;
      v28 = a5[1];
      v27 = (unint64_t)a5[2];
      if ((unint64_t)v28 >= v27)
        break;
      *(_DWORD *)v28 = v15;
      *((_DWORD *)v28 + 1) = v16;
      *((float *)v28 + 2) = (float)v26;
      *((float *)v28 + 3) = v25;
      v8 = v28 + 16;
LABEL_4:
      a5[1] = v8;
LABEL_5:
      v7 = v10;
      if (v10 == a1)
        return;
    }
    v29 = *a5;
    v30 = (v28 - *a5) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      sub_20EEC13DC();
    v32 = v27 - (_QWORD)v29;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    v33 = (unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0;
    v34 = 0xFFFFFFFFFFFFFFFLL;
    if (!v33)
      v34 = v31;
    if (v34 >> 60)
      sub_20E877A38();
    v35 = 16 * v34;
    v36 = (char *)operator new(16 * v34);
    v37 = &v36[16 * v30];
    *(_DWORD *)v37 = v15;
    *((_DWORD *)v37 + 1) = v16;
    *((float *)v37 + 2) = (float)v26;
    *((float *)v37 + 3) = v25;
    if (v28 == v29)
    {
      v8 = v37 + 16;
      *a5 = v37;
      a5[1] = v37 + 16;
      a5[2] = &v36[v35];
      if (!v29)
        goto LABEL_35;
    }
    else
    {
      v38 = &v36[16 * v30];
      do
      {
        v39 = v38 - 16;
        *((_OWORD *)v38 - 1) = *((_OWORD *)v28 - 1);
        v28 -= 16;
        v38 -= 16;
      }
      while (v28 != v29);
      v8 = v37 + 16;
      *a5 = v39;
      a5[1] = v37 + 16;
      a5[2] = &v36[v35];
      if (!v29)
        goto LABEL_35;
    }
    operator delete(v29);
LABEL_35:
    a3 = v41;
    a4 = v42;
    a2 = v40;
    goto LABEL_4;
  }
}

void sub_20EF08678(float *a1, float *a2, uint64_t a3, char a4)
{
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  float *i;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  float *v29;
  unint64_t v30;
  int v31;
  float v32;
  float *v34;
  unint64_t v35;
  float *v37;
  int v38;
  BOOL v39;
  float *v41;
  int v42;
  float v43;
  int v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  int v51;
  BOOL v52;
  BOOL v54;
  float *v55;
  float v56;
  float v57;
  float *v59;
  int v60;
  BOOL v61;
  __int128 *v62;
  __int128 *v63;
  float *v64;
  int v65;
  int v66;
  BOOL v67;
  __int128 v68;
  int v69;
  int v70;
  __int128 v71;
  int v72;
  float *v73;
  BOOL v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float *v79;
  int v80;
  float v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  int v86;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  float *v92;
  int v93;
  BOOL v94;
  float *v95;
  int v96;
  float v97;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  uint64_t v106;
  uint64_t v108;
  float *v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  BOOL v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  float *v118;
  int v119;
  float v120;
  BOOL v121;
  uint64_t v122;
  unint64_t v123;
  float *v124;
  float *v126;
  int v127;
  float v128;
  BOOL v129;
  uint64_t v130;
  float *j;
  int v132;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;

__n128 sub_20EF08FD4(uint64_t a1, float *a2, float *a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  BOOL v11;
  BOOL v12;

  sub_20EF09180((float *)a1, a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3
    || ((result.n128_f32[0] = a3[3], *(_DWORD *)a4 == *(_DWORD *)a3)
      ? (v11 = *(float *)(a4 + 12) < result.n128_f32[0])
      : (v11 = 0),
        v11))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)a3 < *(_DWORD *)a2
      || ((result.n128_f32[0] = a2[3], *(_DWORD *)a3 == *(_DWORD *)a2) ? (v12 = a3[3] < result.n128_f32[0]) : (v12 = 0),
          v12))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(_DWORD *)a2 < *(_DWORD *)a1
        || *(_DWORD *)a2 == *(_DWORD *)a1 && (result.n128_u32[0] = *(_DWORD *)(a1 + 12), a2[3] < result.n128_f32[0]))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  if (*(_DWORD *)a5 < *(_DWORD *)a4
    || *(_DWORD *)a5 == *(_DWORD *)a4
    && (result.n128_u32[0] = *(_DWORD *)(a4 + 12), *(float *)(a5 + 12) < result.n128_f32[0]))
  {
    result = *(__n128 *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(__n128 *)a5 = result;
    if (*(_DWORD *)a4 < *(_DWORD *)a3
      || *(_DWORD *)a4 == *(_DWORD *)a3 && (result.n128_f32[0] = a3[3], *(float *)(a4 + 12) < result.n128_f32[0]))
    {
      result = *(__n128 *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(__n128 *)a4 = result;
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a3 == *(_DWORD *)a2 && (result.n128_f32[0] = a2[3], a3[3] < result.n128_f32[0]))
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*(_DWORD *)a2 < *(_DWORD *)a1
          || *(_DWORD *)a2 == *(_DWORD *)a1 && (result.n128_u32[0] = *(_DWORD *)(a1 + 12), a2[3] < result.n128_f32[0]))
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

float *sub_20EF09180(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  BOOL v5;
  BOOL v6;
  __int128 v7;
  __int128 v8;
  BOOL v9;
  __int128 v10;
  __int128 v11;

  v3 = *a2;
  v4 = a2[3];
  if (*(_DWORD *)a2 < *(_DWORD *)result || (LODWORD(v3) == *(_DWORD *)result ? (v5 = v4 < result[3]) : (v5 = 0), v5))
  {
    if (*(_DWORD *)a3 < SLODWORD(v3) || (*(_DWORD *)a3 == LODWORD(v3) ? (v9 = a3[3] < v4) : (v9 = 0), v9))
    {
      v11 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a3;
    }
    else
    {
      v10 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v10;
      if (*(_DWORD *)a3 >= *(_DWORD *)a2 && (*(_DWORD *)a3 != *(_DWORD *)a2 || a3[3] >= a2[3]))
        return result;
      v11 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v11;
    return result;
  }
  if (*(_DWORD *)a3 < SLODWORD(v3) || (*(_DWORD *)a3 == LODWORD(v3) ? (v6 = a3[3] < v4) : (v6 = 0), v6))
  {
    v7 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v7;
    if (*(_DWORD *)a2 < *(_DWORD *)result || *(_DWORD *)a2 == *(_DWORD *)result && a2[3] < result[3])
    {
      v8 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
    }
  }
  return result;
}

BOOL sub_20EF0927C(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float *v6;
  float *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float *v18;
  int v19;
  BOOL v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  float *v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = a2 - 4;
      v19 = *((_DWORD *)a2 - 4);
      if (v19 < *(_DWORD *)a1 || (v19 == *(_DWORD *)a1 ? (v20 = *(a2 - 1) < a1[3]) : (v20 = 0), v20))
      {
        v21 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)v18 = v21;
      }
      return result;
    case 3:
      sub_20EF09180(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      v22 = (__int128 *)(a1 + 4);
      v23 = (__int128 *)(a1 + 8);
      sub_20EF09180(a1, a1 + 4, a1 + 8);
      v24 = a2 - 4;
      v25 = *((_DWORD *)a2 - 4);
      v26 = *((_DWORD *)a1 + 8);
      if (v25 < v26 || (result = 1, v25 == v26) && *(a2 - 1) < a1[11])
      {
        v27 = *v23;
        *v23 = *(_OWORD *)v24;
        *(_OWORD *)v24 = v27;
        v28 = *((_DWORD *)a1 + 8);
        v29 = *((_DWORD *)a1 + 4);
        if (v28 < v29 || (result = 1, v28 == v29) && a1[11] < a1[7])
        {
          v30 = *v22;
          *v22 = *v23;
          *v23 = v30;
          v31 = *((_DWORD *)a1 + 4);
          if (v31 < *(_DWORD *)a1 || (result = 1, v31 == *(_DWORD *)a1) && a1[7] < a1[3])
          {
            v32 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v22;
            *v22 = v32;
            return 1;
          }
        }
      }
      return result;
    case 5:
      sub_20EF08FD4((uint64_t)a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
      return 1;
    default:
      v6 = a1 + 8;
      sub_20EF09180(a1, a1 + 4, a1 + 8);
      v7 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)v7;
    v12 = v7[3];
    if (*(_DWORD *)v7 < *(_DWORD *)v6 || (v11 == *(_DWORD *)v6 ? (v13 = v12 < v6[3]) : (v13 = 0), v13))
    {
      v14 = *(_QWORD *)(v7 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v6;
      v10 = (uint64_t)a1;
      if (v6 != a1)
      {
        v15 = v8;
        while (1)
        {
          v16 = *(_DWORD *)((char *)a1 + v15 + 16);
          if (v11 >= v16 && (v11 != v16 || v12 >= *(float *)((char *)a1 + v15 + 28)))
            break;
          *(_OWORD *)((char *)a1 + v15 + 32) = *(_OWORD *)((char *)a1 + v15 + 16);
          v15 -= 16;
          if (v15 == -32)
          {
            v10 = (uint64_t)a1;
            goto LABEL_6;
          }
        }
        v10 = (uint64_t)a1 + v15 + 32;
      }
LABEL_6:
      *(_DWORD *)v10 = v11;
      *(_QWORD *)(v10 + 4) = v14;
      *(float *)(v10 + 12) = v12;
      if (++v9 == 8)
        return v7 + 4 == a2;
    }
    v6 = v7;
    v8 += 16;
    v7 += 4;
    if (v7 == a2)
      return 1;
  }
}

uint64_t *sub_20EF09568@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v4)(_QWORD);
  uint64_t *result;
  uint64_t *v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  float v17;
  __int128 v18;
  unint64_t v19;
  float v20;
  __int8 *v21;
  float *v22;
  float32x2_t v23;
  int64x2_t v24;
  uint64_t *v25;
  unint64_t v26;
  float64x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  __int128 v30;
  float v31;
  float v32;
  __int128 v33;
  float *v34;
  unint64_t v35;
  float32x4_t v36;
  float32x4_t *v37;
  uint64_t v38;
  float32x4_t v39;
  _QWORD *v40;
  void *v41;
  _BYTE *v42;
  _BYTE *v43;
  int64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _OWORD *v48;
  int64x2_t v49;
  int64x2_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float32x2_t v55;
  float v56;
  int64x2_t v57;
  __int128 v58;
  unint64_t v59;

  v59 = a1;
  v4 = off_254A5A588;
  if ((*(_BYTE *)off_254A5A588(&off_254A5A588) & 1) != 0)
  {
    result = (uint64_t *)off_254A5A570(&off_254A5A570);
    v6 = result;
    v7 = (int8x8_t)result[1];
    if (!*(_QWORD *)&v7)
      goto LABEL_22;
  }
  else
  {
    v48 = (_OWORD *)off_254A5A570(&off_254A5A570);
    *v48 = 0u;
    v48[1] = 0u;
    *((_DWORD *)v48 + 8) = 1065353216;
    _tlv_atexit((void (__cdecl *)(void *))sub_20EF09AB4, v48);
    *(_BYTE *)v4(&off_254A5A588) = 1;
    result = (uint64_t *)off_254A5A570(&off_254A5A570);
    v6 = result;
    v7 = (int8x8_t)result[1];
    if (!*(_QWORD *)&v7)
      goto LABEL_22;
  }
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = a1;
    if (*(_QWORD *)&v7 <= a1)
      v9 = a1 % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & a1;
  }
  v10 = *(_QWORD **)(*v6 + 8 * v9);
  if (v10)
  {
    v11 = (_QWORD *)*v10;
    if (v11)
    {
      if (v8.u32[0] < 2uLL)
      {
        v12 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v14 = v11[1];
          if (v14 == a1)
          {
            if (v11[2] == a1)
              goto LABEL_44;
          }
          else if ((v14 & v12) != v9)
          {
            goto LABEL_22;
          }
          v11 = (_QWORD *)*v11;
          if (!v11)
            goto LABEL_22;
        }
      }
      do
      {
        v13 = v11[1];
        if (v13 == a1)
        {
          if (v11[2] == a1)
          {
LABEL_44:
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            v43 = (_BYTE *)v11[3];
            v47 = (_BYTE *)v11[4];
            v44 = v47 - v43;
            if (v47 != v43)
            {
              if (v44 < 0)
                sub_20E867F44();
              v45 = (char *)operator new(v47 - v43);
LABEL_42:
              *a2 = v45;
              a2[1] = v45;
              v46 = &v45[4 * (v44 >> 2)];
              a2[2] = v46;
              result = (uint64_t *)memcpy(v45, v43, v44);
              a2[1] = v46;
            }
            return result;
          }
        }
        else
        {
          if (v13 >= *(_QWORD *)&v7)
            v13 %= *(_QWORD *)&v7;
          if (v13 != v9)
            break;
        }
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
  }
LABEL_22:
  if (!a1)
  {
    v21 = 0;
    v22 = 0;
    v16 = 0;
    goto LABEL_37;
  }
  if (a1 >> 62)
    sub_20E867F44();
  v15 = 4 * a1;
  v16 = (float32x4_t *)operator new(4 * a1);
  v17 = (float)((float)((float)((float)((float)a1 + -1.0) * 0.5) + -1.0) * 0.3) + 0.8;
  v54 = 1.0 / (float)(v17 * (float)(v17 + v17));
  bzero(v16, 4 * a1);
  if (a1 >= 4)
  {
    *(float *)&v18 = (float)(a1 - 1) * 0.5;
    v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v18, 0);
    v19 = a1 & 0xFFFFFFFFFFFFFFFCLL;
    v24 = (int64x2_t)xmmword_2102E3FA0;
    v25 = &v16->i64[1];
    LODWORD(v58) = 0;
    v49 = vdupq_n_s64(4uLL);
    v50 = vdupq_n_s64(2uLL);
    v26 = a1 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v57 = v24;
      v27 = vcvtq_f64_u64((uint64x2_t)vaddq_s64(v24, v50));
      v28 = vabd_f32(vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v24)), v23);
      *(float32x2_t *)&v27.f64[0] = vabd_f32(vcvt_f32_f64(v27), v23);
      v29 = vmul_n_f32(vmul_f32(v28, vneg_f32(v28)), v54);
      v53 = v29.f32[0];
      v55 = vmul_n_f32(vmul_f32(*(float32x2_t *)&v27.f64[0], vneg_f32(*(float32x2_t *)&v27.f64[0])), v54);
      v56 = expf(v29.f32[1]);
      v52 = expf(v53);
      v51 = expf(v55.f32[1]);
      *(float *)&v30 = expf(v55.f32[0]);
      *((float *)&v30 + 1) = v51;
      *(v25 - 1) = __PAIR64__(LODWORD(v56), LODWORD(v52));
      *v25 = v30;
      *(float *)&v30 = (float)((float)((float)(*(float *)&v58 + v52) + v56) + *(float *)&v30) + v51;
      v58 = v30;
      v24 = vaddq_s64(v57, v49);
      v25 += 2;
      v26 -= 4;
    }
    while (v26);
    v20 = (float)(a1 - 1) * 0.5;
    if (v19 == a1)
      goto LABEL_31;
  }
  else
  {
    v19 = 0;
    v20 = (float)(a1 - 1) * 0.5;
    LODWORD(v18) = 0;
    v58 = v18;
  }
  do
  {
    v31 = vabds_f32((float)v19, v20);
    v32 = expf(v54 * (float)-(float)(v31 * v31));
    v16->f32[v19] = v32;
    v33 = v58;
    *(float *)&v33 = *(float *)&v58 + v32;
    v58 = v33;
    v20 = (float)(a1 - 1) * 0.5;
    ++v19;
  }
  while (a1 != v19);
LABEL_31:
  v22 = &v16->f32[(unint64_t)v15 / 4];
  v34 = (float *)v16;
  if ((unint64_t)(v15 - 4) < 0x1C)
    goto LABEL_54;
  v35 = ((unint64_t)(v15 - 4) >> 2) + 1;
  v34 = &v16->f32[v35 & 0x7FFFFFFFFFFFFFF8];
  v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v58, 0);
  v37 = v16 + 1;
  v38 = v35 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v39 = vdivq_f32(*v37, v36);
    v37[-1] = vdivq_f32(v37[-1], v36);
    *v37 = v39;
    v37 += 2;
    v38 -= 8;
  }
  while (v38);
  if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_54:
    do
    {
      *v34 = *v34 / *(float *)&v58;
      ++v34;
    }
    while (v34 != v22);
  }
  v21 = &v16->i8[4 * a1];
LABEL_37:
  v40 = sub_20EF09B1C(v6, a1, &v59);
  v41 = (void *)v40[3];
  if (v41)
  {
    v40[4] = v41;
    operator delete(v41);
    v40[3] = 0;
    v40[4] = 0;
    v40[5] = 0;
  }
  v40[3] = v16;
  v40[4] = v22;
  v40[5] = v21;
  result = sub_20EF09B1C(v6, a1, &v59);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v43 = (_BYTE *)result[3];
  v42 = (_BYTE *)result[4];
  v44 = v42 - v43;
  if (v42 != v43)
  {
    if (v44 < 0)
      sub_20E867F44();
    v45 = (char *)operator new(v42 - v43);
    goto LABEL_42;
  }
  return result;
}

void sub_20EF09A60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF09AB4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *sub_20EF09B1C(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    v16 = *a1;
    v17 = *(_QWORD **)(*a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *v10 = *v17;
LABEL_90:
    *v17 = v10;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_20E877A38();
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_68;
    v26 = v25[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*a1 + 8 * v28) = v13;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v30))
        {
          *v25 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*a1 + v31);
          **(_QWORD **)(*a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v30) = v25;
          v25 = i;
          v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*a1 + 8 * v26) = v13;
    v35 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      v38 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v5 &= v38;
      v16 = *a1;
      v17 = *(_QWORD **)(*a1 + 8 * v5);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 == v26)
        goto LABEL_62;
      if (*(_QWORD *)(*a1 + 8 * v37))
      {
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*a1 + v36);
        **(_QWORD **)(*a1 + v36) = v35;
        v35 = v25;
LABEL_62:
        v25 = v35;
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*a1 + 8 * v37) = v25;
        v25 = v35;
        v35 = (_QWORD *)*v35;
        v26 = v37;
        if (!v35)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v32);
    }
    else
    {
      v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2)
        v32 = v34;
    }
    if (prime <= v32)
      prime = v32;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        a1[1] = 0;
        v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = a1[1];
  }
  v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v5)
    v5 %= v7;
  v16 = *a1;
  v17 = *(_QWORD **)(*a1 + 8 * v5);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v5) = v13;
  if (*v10)
  {
    v40 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v10;
}

void sub_20EF09FB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAFA1EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF09FCC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  if (*(_BYTE *)(a1 + 184))
  {
    v2 = *(void **)(a1 + 160);
    if (v2)
    {
      *(_QWORD *)(a1 + 168) = v2;
      operator delete(v2);
    }
  }
  v3 = *(_QWORD *)(a1 + 136);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 144);
    v5 = *(void **)(a1 + 136);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 144);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 136);
    }
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_20EF0A058(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20EF0A098(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = *(uint64_t *)((char *)a2 + 12);
  v6 = *((_DWORD *)a2 + 5);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 12) = v5;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = (_BYTE *)a2[3];
  v7 = (_BYTE *)a2[4];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_20E867F44();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v10;
    v11 = &v10[8 * (v9 >> 3)];
    *(_QWORD *)(a1 + 40) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 32) = v11;
  }
  v12 = a2[6];
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v14 = (_BYTE *)a2[7];
  v13 = (_BYTE *)a2[8];
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      sub_20E867F44();
    v16 = (char *)operator new(v13 - v14);
    *(_QWORD *)(a1 + 56) = v16;
    *(_QWORD *)(a1 + 64) = v16;
    v17 = &v16[8 * (v15 >> 3)];
    *(_QWORD *)(a1 + 72) = v17;
    memcpy(v16, v14, v15);
    *(_QWORD *)(a1 + 64) = v17;
  }
  *(_QWORD *)(a1 + 80) = a2[10];
  return a1;
}

void sub_20EF0A19C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EF0A1D0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        if (*(v4 - 16))
        {
          v7 = (void *)*((_QWORD *)v4 - 5);
          if (v7)
          {
            *((_QWORD *)v4 - 4) = v7;
            operator delete(v7);
          }
        }
        v8 = *((_QWORD *)v4 - 8);
        if (v8)
        {
          v9 = *((_QWORD *)v4 - 7);
          v6 = (void *)*((_QWORD *)v4 - 8);
          if (v9 != v8)
          {
            v10 = *((_QWORD *)v4 - 7);
            do
            {
              v12 = *(void **)(v10 - 24);
              v10 -= 24;
              v11 = v12;
              if (v12)
              {
                *(_QWORD *)(v9 - 16) = v11;
                operator delete(v11);
              }
              v9 = v10;
            }
            while (v10 != v8);
            v6 = (void *)*((_QWORD *)v4 - 8);
          }
          *((_QWORD *)v4 - 7) = v8;
          operator delete(v6);
        }
        v4 -= 200;
      }
      while (v4 != v2);
      v13 = **a1;
      v1[1] = v2;
      operator delete(v13);
    }
  }
}

uint64_t sub_20EF0A2C0(uint64_t a1, void **a2, const void *a3, char *a4, const void *a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 *a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t i;
  int v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  *(_QWORD *)a1 = *a13;
  v20 = operator new();
  sub_20EF139BC(v20, a2, a3, a4, a5, a6, a7, v21, a9, a10, a11, a12);
  *(_QWORD *)(a1 + 8) = v20;
  *(_QWORD *)(a1 + 16) = sub_20EF14B00;
  v22 = 5489;
  *(_DWORD *)(a1 + 24) = 5489;
  v23 = 1;
  for (i = 7; i != 630; ++i)
  {
    v25 = 1812433253 * (v22 ^ (v22 >> 30));
    v22 = v25 + v23;
    *(_DWORD *)(a1 + 4 * i) = i + v25 - 6;
    ++v23;
  }
  *(_QWORD *)(a1 + 2520) = 0;
  v26 = (std::__shared_weak_count *)operator new(0x28uLL);
  v27 = v26;
  v26->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F558;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F5A8;
  LODWORD(v26[1].__shared_owners_) = 5489;
  do
    v29 = __ldxr(p_shared_owners);
  while (__stxr(v29 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 2528) = &off_24CA1F4F8;
  *(_QWORD *)(a1 + 2536) = v26 + 1;
  *(_QWORD *)(a1 + 2544) = v26;
  do
    v30 = __ldxr(p_shared_owners);
  while (__stxr(v30 + 1, p_shared_owners));
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v27);
  }
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (v32)
  {
    if (*(_DWORD *)a1 < 3u || *(_DWORD *)(a1 + 4) <= 2u)
    {
LABEL_22:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/SingleShot/DensePlaneExtraction.cpp", 361, (uint64_t)"areParametersValid(m_params)", 28, (uint64_t)&unk_210267FB5, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (*(_DWORD *)a1 < 3u || *(_DWORD *)(a1 + 4) <= 2u)
      goto LABEL_22;
  }
  return a1;
}

void sub_20EF0A4F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_210231620(v2);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(v1 + 16))(v4);
  _Unwind_Resume(a1);
}

void sub_20EF0A554(uint64_t a1@<X0>, _QWORD *a2@<X8>, __n128 a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *i;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  char *v54;

  v5 = *(_QWORD **)(a1 + 8);
  v6 = v5[37];
  v53 = 0;
  v54 = 0;
  v7 = *(_QWORD *)(v6 + 24);
  v50 = *(_QWORD *)(v6 + 32);
  v52 = v5;
  v8 = 0;
  if (v7 == v50)
  {
    v29 = 0;
  }
  else
  {
    do
    {
      v51 = v7;
      v9 = *(uint64_t ***)(v7 + 16);
      v10 = **v9;
      v11 = (uint64_t **)v9[4][2];
      v12 = **v11;
      do
      {
        v14 = v12;
        v11 = (uint64_t **)v11[4][2];
        v12 = **v11;
        v15 = v5[21];
        v16 = v15 + 12 * v10;
        v17 = v15 + 12 * v14;
        v18 = v15 + 12 * v12;
        a3.n128_u64[0] = *(_QWORD *)v17;
        a3.n128_u32[2] = *(_DWORD *)(v17 + 8);
        a4.i64[0] = *(_QWORD *)v16;
        a4.i32[2] = *(_DWORD *)(v16 + 8);
        a5.i64[0] = *(_QWORD *)v18;
        a5.i32[2] = *(_DWORD *)(v18 + 8);
        v19 = (int32x4_t)vsubq_f32((float32x4_t)a3, a4);
        v20 = (int32x4_t)vsubq_f32(a5, a4);
        v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL);
        a4 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v20, (int8x16_t)v20, 0xCuLL), (int8x16_t)v20, 8uLL);
        a3 = (__n128)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v19, (int8x16_t)v19, 0xCuLL), (int8x16_t)v19, 8uLL), v21), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL), a4);
        a5 = (float32x4_t)vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL);
        a4.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a3.n128_u64[0], (float32x2_t)a3.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a3.n128_u64[0], 1), (float32x2_t)a3.n128_u64[0], 1), *(float32x2_t *)a5.f32, *(float32x2_t *)a5.f32).f32[0]);
        v22 = fabsf(a4.f32[0] * 0.5);
        v23 = (float)(a4.f32[0] * 0.5) != 0.0 && v22 > 0.000001;
        if (v23 && fabsf(vmuls_lane_f32(1.0 / a4.f32[0], (float32x4_t)a3, 2)) <= 0.25882)
        {
          if (v8 < v54)
          {
            *(_QWORD *)v8 = v10;
            *((_QWORD *)v8 + 1) = v14;
            v13 = v8 + 24;
            *((_QWORD *)v8 + 2) = v12;
          }
          else
          {
            v24 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v53) >> 3) + 1;
            if (v24 > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            if (0x5555555555555556 * ((v54 - v53) >> 3) > v24)
              v24 = 0x5555555555555556 * ((v54 - v53) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v54 - v53) >> 3) >= 0x555555555555555)
              v25 = 0xAAAAAAAAAAAAAAALL;
            else
              v25 = v24;
            if (v25)
            {
              if (v25 > 0xAAAAAAAAAAAAAAALL)
                sub_20E877A38();
              v26 = (char *)operator new(24 * v25);
            }
            else
            {
              v26 = 0;
            }
            v27 = &v26[8 * ((v8 - v53) >> 3)];
            *(_QWORD *)v27 = v10;
            *((_QWORD *)v27 + 1) = v14;
            *((_QWORD *)v27 + 2) = v12;
            v28 = v27;
            if (v8 != v53)
            {
              do
              {
                a3 = *(__n128 *)(v8 - 24);
                *((_QWORD *)v28 - 1) = *((_QWORD *)v8 - 1);
                *(__n128 *)(v28 - 24) = a3;
                v28 -= 24;
                v8 -= 24;
              }
              while (v8 != v53);
              v8 = v53;
            }
            v13 = v27 + 24;
            v53 = v28;
            v54 = &v26[24 * v25];
            if (v8)
              operator delete(v8);
            v5 = v52;
          }
          v8 = v13;
        }
      }
      while (v12 != v10);
      v7 = v51 + 32;
    }
    while (v51 + 32 != v50);
    v29 = v53;
  }
  v31 = v5[21];
  v30 = v5[22];
  v32 = (v30 - v31) >> 2;
  v33 = 0xAAAAAAAAAAAAAAABLL * v32;
  v34 = (0xAAAAAAAAAAAAAAABLL * v32) >> 61;
  v35 = 0x5555555555555558 * v32;
  if (v30 == v31)
  {
    v37 = 0;
    v36 = 0;
    if (v29 == v8)
      goto LABEL_40;
    goto LABEL_38;
  }
  if (v34)
    sub_20E867F44();
  v36 = (char *)operator new(0x5555555555555558 * v32);
  v37 = &v36[8 * v33];
  bzero(v36, v35);
  if (v29 != v8)
  {
LABEL_38:
    v38 = v29;
    do
    {
      ++*(_QWORD *)&v36[8 * *(_QWORD *)v38];
      ++*(_QWORD *)&v36[8 * *((_QWORD *)v38 + 1)];
      ++*(_QWORD *)&v36[8 * *((_QWORD *)v38 + 2)];
      v38 += 24;
    }
    while (v38 != v8);
  }
LABEL_40:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v30 == v31)
  {
    v42 = 0;
    v41 = 0;
    v39 = a2;
    v40 = v52;
    v43 = v37 - v36;
    if (v37 != v36)
      goto LABEL_43;
LABEL_52:
    v45 = 0;
    v47 = v42 - v41;
    goto LABEL_53;
  }
  if (v34)
    sub_20E867F44();
  v39 = a2;
  v40 = v52;
  v41 = operator new(v35);
  *a2 = v41;
  v42 = &v41[v33];
  a2[2] = v42;
  bzero(v41, v35);
  a2[1] = v42;
  v43 = v37 - v36;
  if (v37 == v36)
    goto LABEL_52;
LABEL_43:
  v44 = 0;
  v45 = 0;
  v46 = v43 >> 3;
  if (v46 <= 1)
    v46 = 1;
  do
  {
    if (*(_QWORD *)&v36[8 * v44])
      v41[v45++] = v44;
    ++v44;
  }
  while (v46 != v44);
  v47 = v42 - v41;
  if (v45 > v47)
  {
    sub_20EAC9ECC((uint64_t)v39, v45 - v47);
LABEL_56:
    operator delete(v36);
    v41 = (_QWORD *)*v39;
    v42 = (_QWORD *)v39[1];
    goto LABEL_57;
  }
LABEL_53:
  if (v47 > v45)
  {
    v42 = &v41[v45];
    v39[1] = v42;
  }
  if (v36)
    goto LABEL_56;
LABEL_57:
  if (v41 != v42)
  {
    while (v40[27] > *v41)
    {
      if (++v41 == v42)
        goto LABEL_69;
    }
    if (v41 != v42)
    {
      for (i = v41 + 1; i != v42; ++i)
      {
        if (v40[27] > *i)
          *v41++ = *i;
      }
    }
    if (v41 != v42)
      v39[1] = v41;
  }
LABEL_69:
  if (v29)
    operator delete(v29);
}

void sub_20EF0AA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;
  void *v18;
  void **v19;
  void *v21;

  v21 = *v19;
  if (*v19)
  {
    *(_QWORD *)(a9 + 8) = v21;
    operator delete(v21);
  }
  operator delete(v18);
  if (v17)
    operator delete(v17);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EF0AAF8@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, _OWORD *a4@<X8>)
{
  unsigned __int8 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned __int16 *v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  unint64_t v37;
  unsigned __int16 v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  unsigned __int16 *v57;
  int64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  int8x16_t *v63;
  int8x16_t *v64;
  unint64_t v65;
  unsigned __int16 v66;
  _QWORD *v67;
  uint64_t v68;
  float32x2_t *v69;
  float32x2_t *v70;
  uint64_t v71;
  uint64_t (**v72)();
  size_t v73;
  _QWORD *v74;
  size_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  float32x2_t v84;
  float32x2_t v85;
  uint64_t v86;
  uint64_t v89;
  unint64_t v90;
  unint64_t **v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int32x4_t v99;
  int32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t **v108;
  _QWORD *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t *v114;
  unint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  int v123;
  float v124;
  const char *v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  void **v137;
  int v138;
  int v139;
  unint64_t v140;
  _DWORD *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  float v147;
  float v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 *v157;
  uint64_t v158;
  unsigned int v159;
  int v160;
  _QWORD *v161;
  void **v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  unsigned __int8 *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  int v173;
  _QWORD *v174;
  __int128 v175;
  _QWORD *v176;
  unint64_t v177;
  _QWORD *v178;
  void *v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  unint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  void *v190;
  __int128 v191;
  unint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  float32x2_t v200;
  int8x16_t v201;
  float32x2_t v202;
  float v203;
  float v204;
  int8x16_t v205;
  float32x2_t v206;
  float v207;
  BOOL v208;
  float32x2_t v209;
  float v210;
  unint64_t *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v219;
  _QWORD *v220;
  int v221;
  unsigned __int8 v222;
  int v223;
  unint64_t v224;
  unint64_t v225;
  float v226;
  uint64_t v227;
  uint64_t v228;
  size_t v229;
  const char *v230;
  unsigned __int8 v231;
  unsigned __int8 v232;
  const char *v233;
  size_t v234;
  const char *v235;
  const char *v236;
  _BYTE *v237;
  size_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 *v241;
  NSObject *v242;
  uint64_t v243;
  size_t v244;
  uint64_t v245;
  size_t v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count *v249;
  unint64_t *p_shared_owners;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  void *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  void *v278;
  float v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  _QWORD *v283;
  _BYTE *v284;
  _BYTE *v285;
  int64_t v286;
  uint64_t v287;
  _QWORD *v288;
  _BYTE *v289;
  _BYTE *v290;
  int64_t v291;
  uint64_t v292;
  _QWORD *v293;
  _BYTE *v294;
  _BYTE *v295;
  int64_t v296;
  unint64_t v297;
  char *v298;
  _QWORD *v299;
  const void *v300;
  int64_t v301;
  char *v302;
  char *v303;
  const void *v304;
  int64_t v305;
  char *v306;
  char *v307;
  int64_t v308;
  char *v309;
  char *v310;
  unint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  _WORD *v314;
  _WORD *v315;
  uint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  void **v319;
  _QWORD *v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  _BOOL8 v324;
  unint64_t v325;
  unint64_t v326;
  size_t prime;
  void *v328;
  void *v329;
  uint64_t v330;
  _QWORD **v331;
  size_t v332;
  size_t v333;
  size_t v334;
  _QWORD *i;
  size_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  _QWORD *v340;
  void *v341;
  uint64_t v342;
  size_t v343;
  uint64_t *v344;
  float *v345;
  float *v346;
  float *v347;
  float *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _BYTE *v353;
  _WORD *v354;
  int64_t v355;
  unint64_t v356;
  float *v357;
  __int16 v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  int8x16_t *v362;
  int8x16_t *v363;
  unint64_t v364;
  _QWORD *v365;
  _QWORD *v366;
  void *v367;
  char *v368;
  char *v369;
  void *v370;
  char *v371;
  void *v372;
  void *v373;
  float *v374;
  unint64_t v375;
  uint64_t v376;
  unsigned __int16 v377;
  BOOL v378;
  _QWORD *v379;
  unint64_t v380;
  char *v381;
  char *v382;
  unint64_t v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  int8x16_t *v391;
  int8x16_t *v392;
  unint64_t v393;
  char *v394;
  __int16 v395;
  char *v396;
  _QWORD *v397;
  unint64_t v398;
  _QWORD *v399;
  _WORD *v400;
  _QWORD *v401;
  unint64_t v402;
  _QWORD *v403;
  unint64_t v404;
  int8x16_t **v405;
  _QWORD *v406;
  _QWORD *v407;
  uint64_t v408;
  unint64_t v409;
  unint64_t v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  _BYTE *v416;
  _WORD *v417;
  int64_t v418;
  unint64_t v419;
  char *v420;
  int8x16_t *v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  int8x16_t *v425;
  int8x16_t *v426;
  uint64_t v427;
  int8x16_t v428;
  int v429;
  _QWORD *v430;
  unint64_t v431;
  void **v432;
  int8x16_t *v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  __int16 v438;
  _QWORD *v439;
  int8x16_t *v440;
  _QWORD *v441;
  unint64_t v442;
  char *v443;
  _QWORD *v444;
  uint64_t v445;
  char *v446;
  unint64_t v447;
  unint64_t v448;
  char *v449;
  uint64_t v450;
  unint64_t v451;
  char *i8;
  int8x16_t *v453;
  uint64_t v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  int8x16_t *v460;
  _QWORD *v461;
  _QWORD *v462;
  void *v463;
  _QWORD *v464;
  _QWORD *v465;
  void *v466;
  _QWORD *v467;
  _QWORD *v468;
  void *v469;
  unint64_t v470;
  char *v471;
  uint64_t *v472;
  uint64_t *v473;
  unint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  unint64_t v478;
  char *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  void *v483;
  void *v484;
  uint64_t *v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  void *v490;
  uint64_t v491;
  void *v492;
  void *v493;
  uint64_t *v494;
  uint64_t *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t *v498;
  uint64_t v499;
  uint64_t j;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  unsigned int v505;
  unint64_t v506;
  uint64_t v507;
  char *v508;
  unint64_t v509;
  unsigned __int16 **v510;
  unsigned __int16 *v511;
  int8x16_t *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t *v515;
  unint64_t v516;
  uint64_t v517;
  _QWORD *v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  char *v526;
  char *v527;
  char *v528;
  uint64_t v529;
  char *v530;
  char *v531;
  _QWORD *v532;
  char *v533;
  __int128 v534;
  _QWORD *v535;
  _QWORD *v536;
  void *v537;
  void *v538;
  _QWORD *v539;
  uint64_t v540;
  _QWORD *v541;
  _QWORD *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t *v545;
  unint64_t v546;
  int8x16_t *v547;
  int8x16_t *v548;
  int8x16_t *v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  char *v554;
  char *v555;
  uint64_t v556;
  uint64_t *v557;
  unint64_t v558;
  int8x16_t *v559;
  int8x16_t *v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  unint64_t v564;
  char *v565;
  char *v566;
  uint64_t v567;
  uint64_t v568;
  int v569;
  int v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  __n128 v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  char *v585;
  uint64_t v586;
  unsigned int *v587;
  unsigned int *v588;
  unsigned int v589;
  uint64_t v590;
  uint64_t *v591;
  uint64_t v592;
  uint64_t v593;
  char *v594;
  char *v595;
  char *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t *v603;
  char *v604;
  uint64_t v605;
  uint64_t v606;
  _QWORD *v607;
  char *v608;
  unint64_t v609;
  unint64_t v610;
  char *v611;
  uint64_t v612;
  __n128 v613;
  __n128 *v614;
  __n128 *v615;
  __n128 v616;
  uint64_t v617;
  unsigned int *v618;
  unsigned int v619;
  unsigned int v620;
  unsigned int *v621;
  unsigned int v622;
  unsigned int v623;
  char *v624;
  _QWORD *v625;
  unsigned int *v626;
  unsigned int *v627;
  unsigned int v628;
  unsigned int v629;
  unsigned int *v630;
  unsigned int v631;
  unsigned int v632;
  unint64_t v633;
  uint64_t v634;
  char *v635;
  size_t v636;
  uint64_t v637;
  unsigned __int16 v638;
  uint64_t v639;
  char *v640;
  uint64_t *v641;
  char *v642;
  unint64_t v643;
  char *v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t v647;
  unint64_t v648;
  uint64_t v649;
  char *v650;
  _QWORD *v651;
  uint64_t v652;
  _BYTE *v653;
  unsigned __int16 *v654;
  int64_t v655;
  unint64_t v656;
  uint64_t v657;
  unint64_t v658;
  char *v659;
  _OWORD *v660;
  char *v661;
  unint64_t v662;
  __int128 v663;
  unsigned __int16 v664;
  unsigned __int16 **v665;
  uint64_t v666;
  void *v667;
  unsigned __int16 **v668;
  unsigned __int16 *v669;
  unsigned __int16 *v670;
  uint64_t v671;
  uint64_t v672;
  _OWORD *v673;
  unsigned __int16 *v674;
  int32x4_t v675;
  int8x16_t v676;
  int32x4_t v677;
  float32x4_t v678;
  int8x16_t v679;
  float32x4_t v680;
  float32x2_t v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  int v685;
  unint64_t *v686;
  unsigned int v687;
  uint64_t v688;
  uint64_t v689;
  __int128 v690;
  uint64_t v691;
  size_t v692;
  int *ii;
  _OWORD *v694;
  unint64_t v695;
  unint64_t v696;
  unint64_t v697;
  _QWORD *v698;
  char *v699;
  __int128 v700;
  uint64_t v701;
  _BYTE *v702;
  uint64_t v703;
  size_t v704;
  int *jj;
  uint64_t v706;
  uint64_t v707;
  unint64_t v708;
  char *v709;
  _OWORD *v710;
  __int128 v711;
  uint64_t v712;
  char *v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  unint64_t v717;
  _OWORD *v718;
  char *v719;
  _QWORD *v720;
  _QWORD *v721;
  void *v722;
  int8x8_t v723;
  BOOL v724;
  BOOL v725;
  unint64_t v726;
  uint8x8_t v727;
  uint64_t v728;
  unint64_t v729;
  uint8x8_t v730;
  uint64_t v731;
  _QWORD *v732;
  uint64_t v733;
  uint64_t v734;
  float v735;
  float v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  int32x4_t v742;
  int32x4_t v743;
  float *v744;
  float v745;
  uint64_t v747;
  uint64_t v748;
  unint64_t *v749;
  uint64_t v750;
  float v751;
  unsigned int v752;
  unsigned __int8 v753;
  uint64_t v754;
  uint64_t k;
  unsigned __int8 v756;
  unsigned __int8 v757;
  uint64_t v758;
  uint64_t m;
  unsigned __int8 v760;
  int64_t v761;
  int32x4_t *v762;
  int32x4_t *v763;
  uint64_t v764;
  int32x4_t *v765;
  unint64_t v766;
  int32x4_t *v767;
  uint64_t v768;
  int32x4_t v769;
  unint64_t v770;
  uint64_t v771;
  unsigned __int8 v772;
  uint64_t v773;
  uint64_t n;
  unsigned __int8 v775;
  char *v776;
  char *v777;
  __int32 v778;
  _QWORD *v779;
  uint64_t v780;
  char *v781;
  unint64_t v782;
  unint64_t v783;
  uint64_t v784;
  unint64_t v785;
  unint64_t v786;
  unint64_t v787;
  unint64_t v788;
  unint64_t v789;
  unsigned int v790;
  unsigned int v791;
  int v792;
  unint64_t v793;
  std::__shared_weak_count *v794;
  unint64_t *v795;
  unint64_t v796;
  float *v797;
  uint64_t v798;
  unint64_t v799;
  unint64_t v800;
  unint64_t *v801;
  uint64_t v802;
  unint64_t v803;
  uint64_t v804;
  uint64_t v805;
  int8x16_t v806;
  float32x2_t v807;
  float32x2_t v808;
  float32x2_t v809;
  double v810;
  unint64_t v811;
  float v812;
  float v813;
  unint64_t *v814;
  uint64_t v815;
  unint64_t v816;
  unint64_t v817;
  uint64_t v818;
  int8x16_t v819;
  int8x16_t v820;
  float32x2_t v821;
  float v822;
  float32x2_t v823;
  uint64_t v825;
  int8x16_t v826;
  float32x2_t v827;
  float32x2_t v828;
  char *v829;
  char *v830;
  _QWORD *v831;
  _QWORD *v832;
  void *v833;
  char *v834;
  char *v835;
  uint64_t v836;
  char *v837;
  unint64_t *v838;
  unint64_t v839;
  uint64_t v840;
  int8x16_t v841;
  int8x16_t v842;
  float32x2_t v843;
  float32x2_t v844;
  float32x2_t v845;
  float v846;
  float32x2_t v847;
  uint64_t v849;
  float32x2_t v850;
  unint64_t *v851;
  uint64_t v852;
  uint64_t v853;
  unint64_t v854;
  unint64_t v855;
  _BYTE *v856;
  char *v857;
  int64_t v858;
  unint64_t v859;
  char *v860;
  uint64_t v861;
  unint64_t v862;
  uint64_t v863;
  uint64_t v864;
  int8x16_t *v865;
  int8x16_t *v866;
  uint64_t v867;
  int8x16_t v868;
  unint64_t *v869;
  float32x4_t v870;
  uint64_t v871;
  uint64_t v872;
  float v873;
  float v874;
  uint64_t v875;
  float v876;
  unint64_t *v877;
  unint64_t *v878;
  uint64_t v879;
  unint64_t v880;
  float32x4_t v881;
  unint64_t *v882;
  unint64_t v883;
  uint64_t v884;
  unint64_t v885;
  float32x4_t v886;
  __int32 v887;
  __int32 v888;
  unint64_t *v889;
  float32x4_t v890;
  float32x4_t v891;
  __int32 v892;
  __int32 v893;
  uint64_t v894;
  int8x16_t v895;
  float32x4_t v896;
  float32x4_t v897;
  float32x4_t v898;
  float32x4_t v899;
  float32x4_t v900;
  float32x4_t v901;
  int v902;
  int8x16_t v903;
  float32x4_t v904;
  char v905;
  void *v906;
  void *v907;
  char *v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  unint64_t v913;
  unint64_t v914;
  char *v915;
  char *v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  void *v920;
  _QWORD *v921;
  _QWORD *v922;
  void *v923;
  float32x4_t v924;
  uint64_t v925;
  int v926;
  unsigned __int8 v927;
  unsigned __int8 v928;
  float v929;
  float32x4_t v930;
  int32x4_t v931;
  int8x16_t v932;
  int v933;
  int v934;
  char *v935;
  void *v936;
  char *v937;
  _BYTE *v938;
  _BYTE *v939;
  int64_t v940;
  char *v941;
  _QWORD *v942;
  size_t v943;
  char *v944;
  _BYTE *v945;
  _BYTE *v946;
  int64_t v947;
  char *v948;
  uint64_t v949;
  uint64_t v950;
  void *v951;
  uint64_t v952;
  uint64_t *v953;
  uint64_t *v954;
  void *v955;
  char *v956;
  void *v957;
  void *v958;
  _QWORD *v959;
  void *v960;
  uint64_t v961;
  _QWORD *result;
  uint64_t v963;
  _QWORD *v964;
  void *v965;
  unint64_t *v966;
  unint64_t *v967;
  _QWORD *v968;
  float32x2_t v969;
  int8x16_t v970;
  float v971;
  _QWORD *v972;
  int32x4_t v973;
  int v974;
  unint64_t v975;
  _QWORD *v976;
  uint64_t v977;
  float32x2_t *v978;
  uint64_t v979;
  _QWORD *v980;
  uint64_t v981;
  unint64_t v983;
  __int16 v984;
  unint64_t v985;
  float v986;
  unint64_t *v987;
  uint64_t v988;
  unint64_t v989;
  _QWORD *v990;
  int v991;
  int32x4_t v992;
  char *v993;
  unsigned __int16 **v994;
  _QWORD *v995;
  unint64_t *v996;
  unint64_t *v997;
  char *v998;
  float32x2_t v999;
  uint64_t v1000;
  _QWORD *v1001;
  float32x2_t v1002;
  char *v1003;
  uint64_t v1004;
  int8x16_t v1005;
  float32x4_t v1006;
  uint64_t v1007;
  float32x4_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  int v1011;
  unint64_t v1012;
  uint64_t v1013;
  unsigned int *v1014;
  uint64_t v1015;
  char *v1017;
  uint64_t *v1018;
  unint64_t **v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  unint64_t v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  unint64_t v1026;
  uint64_t v1027;
  int8x8_t v1028;
  unint64_t v1029;
  float32x4_t v1030;
  unint64_t v1032;
  void *v1033;
  char *v1034;
  char *v1035;
  char *v1036;
  char *v1037;
  char *v1038;
  uint64_t v1039;
  _QWORD *v1040;
  __int128 v1041;
  unsigned __int16 *v1042;
  uint64_t v1043;
  char *v1044;
  unsigned __int16 v1045;
  char *v1046;
  unint64_t *v1047;
  unint64_t *v1048;
  void *v1049;
  void *v1050;
  char *v1051;
  void *v1052;
  char *v1053;
  char *v1054;
  _QWORD *v1055;
  __int128 v1056;
  unint64_t v1057;
  _BYTE v1058[56];
  __int128 v1059;
  int v1060;
  float v1061;
  _BYTE v1062[24];
  uint64_t v1063;
  char v1064;
  int8x16_t v1065;
  int64_t v1066;
  void *v1067;
  uint64_t v1068;
  void *v1069;
  uint64_t v1070;
  __int32 v1071;
  uint64_t v1072;
  char v1073;
  void *__p;
  __int128 v1075;
  _QWORD *v1076;
  char *v1077;
  _QWORD *v1078;
  __int128 v1079;
  __int128 v1080;
  int v1081;
  unint64_t v1082;
  unint64_t v1083;
  uint64_t v1084;
  __int128 v1085;
  __int128 v1086;
  const char *v1087;
  __int128 v1088;
  __int128 v1089;
  int v1090;
  _QWORD v1091[4];
  void *v1092;
  __int128 v1093;
  void *v1094;
  float *v1095;
  __int8 *v1096;
  char v1097;
  _BYTE object[40];
  __int128 v1099;
  __int128 v1100;
  int v1101;
  uint64_t v1102;
  __int128 v1103;
  uint64_t v1104;
  char v1105;
  _BYTE v1106[24];
  _BYTE *v1107;
  uint64_t v1108;

  v1108 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  sub_20EF1169C(v1058);
  v968 = a4;
  if (**(int **)(*(_QWORD *)v1058 + 56) <= 1)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_254A60090);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A60090))
    {
      qword_254A60088 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_SplitAndDensify");
      __cxa_guard_release(&qword_254A60090);
    }
    v6 = qword_254A60088;
    *(_BYTE *)(qword_254A60088 + 16) = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v6 = std::chrono::steady_clock::now();
    *(_BYTE *)(v6 + 16) = 1;
  }
  v1084 = 0;
  v1083 = 0;
  v1082 = 0;
  v7 = operator new(0x28uLL);
  *v7 = &off_24C9F1178;
  v7[1] = &v1084;
  v7[2] = &v1083;
  v7[3] = &v1082;
  v1107 = v7;
  v9 = *a2;
  if (*a2 == a2[1])
  {
    a4[4] = 0u;
    a4[5] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    *a4 = 0u;
    a4[1] = 0u;
    v72 = &off_24C9F1178;
    goto LABEL_1278;
  }
  v10 = 0;
  v1045 = 0;
  v1021 = *((_QWORD *)a1 + 1);
  _Q0.i32[1] = 0;
  _Q0.i64[1] = 0;
  v1079 = 0u;
  v1080 = 0u;
  v1081 = 1065353216;
  do
  {
    v1039 = v10;
    v14 = v9 + 80 * v10;
    v16 = *(unint64_t **)(v14 + 32);
    v15 = *(unint64_t **)(v14 + 40);
    while (v16 != v15)
    {
      v18 = *v16;
      *(_QWORD *)v1058 = v18;
      if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 272) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
      {
        v19 = sub_20EF119C0((uint64_t)&v1079, v18, v1058);
        v21 = (char *)v19[4];
        v20 = v19[5];
        if ((unint64_t)v21 >= v20)
        {
          v22 = (char *)v19[3];
          v23 = v21 - v22;
          if (v21 - v22 <= -3)
            sub_20E867F44();
          v24 = v23 >> 1;
          v25 = v20 - (_QWORD)v22;
          if (v25 <= (v23 >> 1) + 1)
            v26 = v24 + 1;
          else
            v26 = v25;
          if (v25 >= 0x7FFFFFFFFFFFFFFELL)
            v27 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
          {
            if (v27 < 0)
              sub_20E877A38();
            v28 = operator new(2 * v27);
            v29 = (unsigned __int16 *)&v28[2 * v24];
            *v29 = v1045;
            v17 = (uint64_t)(v29 + 1);
            v30 = v21 - v22;
            if (v21 == v22)
            {
LABEL_32:
              v19[3] = v29;
              v19[4] = v17;
              v19[5] = &v28[2 * v27];
              if (v22)
                operator delete(v22);
              goto LABEL_9;
            }
          }
          else
          {
            v28 = 0;
            v29 = (unsigned __int16 *)(2 * v24);
            *(_WORD *)(2 * v24) = v1045;
            v17 = 2 * v24 + 2;
            v30 = v21 - v22;
            if (v21 == v22)
              goto LABEL_32;
          }
          v31 = v30 - 2;
          if (v31 < 0x1E)
            goto LABEL_1354;
          if (v21 - v28 - (v23 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_1354;
          v32 = (v31 >> 1) + 1;
          v33 = 2 * (v32 & 0xFFFFFFFFFFFFFFF0);
          v34 = &v21[-v33];
          v29 = (unsigned __int16 *)((char *)v29 - v33);
          v35 = (int8x16_t *)&v28[2 * v24 - 16];
          v36 = (int8x16_t *)(v21 - 16);
          v37 = v32 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            _Q0 = *v36;
            v35[-1] = v36[-1];
            *v35 = _Q0;
            v35 -= 2;
            v36 -= 2;
            v37 -= 16;
          }
          while (v37);
          v21 = v34;
          if (v32 != (v32 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_1354:
            do
            {
              v38 = *((_WORD *)v21 - 1);
              v21 -= 2;
              *--v29 = v38;
            }
            while (v21 != v22);
          }
          goto LABEL_32;
        }
        *(_WORD *)v21 = v1045;
        v17 = (uint64_t)(v21 + 2);
LABEL_9:
        v19[4] = v17;
      }
      ++v16;
    }
    v39 = v9 + 80 * v1039;
    v41 = *(_QWORD **)(v39 + 56);
    v40 = *(_QWORD **)(v39 + 64);
    v1040 = v40;
    while (v41 != v40)
    {
      v42 = (unint64_t *)(*(_QWORD *)(v1021 + 224) + 16 * *v41);
      v44 = *v42;
      v43 = v42[1];
      v45 = v43 + v44;
      if (v44 < v43 + v44)
      {
        while (1)
        {
          *(_QWORD *)v1058 = v44;
          if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 272) + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44) & 1) == 0)
            goto LABEL_41;
          v47 = sub_20EF119C0((uint64_t)&v1079, v44, v1058);
          v49 = (char *)v47[4];
          v48 = v47[5];
          if ((unint64_t)v49 >= v48)
            break;
          *(_WORD *)v49 = v1045;
          v46 = (uint64_t)(v49 + 2);
LABEL_40:
          v47[4] = v46;
LABEL_41:
          if (++v44 == v45)
            goto LABEL_35;
        }
        v50 = (char *)v47[3];
        v51 = v49 - v50;
        if (v49 - v50 <= -3)
          sub_20E867F44();
        v52 = v51 >> 1;
        v53 = v48 - (_QWORD)v50;
        if (v53 <= (v51 >> 1) + 1)
          v54 = v52 + 1;
        else
          v54 = v53;
        if (v53 >= 0x7FFFFFFFFFFFFFFELL)
          v55 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
        {
          if (v55 < 0)
            sub_20E877A38();
          v56 = operator new(2 * v55);
          v57 = (unsigned __int16 *)&v56[2 * v52];
          *v57 = v1045;
          v46 = (uint64_t)(v57 + 1);
          v58 = v49 - v50;
          if (v49 == v50)
            goto LABEL_62;
LABEL_56:
          v59 = v58 - 2;
          if (v59 < 0x1E)
            goto LABEL_1355;
          if (v49 - v56 - (v51 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_1355;
          v60 = (v59 >> 1) + 1;
          v61 = 2 * (v60 & 0xFFFFFFFFFFFFFFF0);
          v62 = &v49[-v61];
          v57 = (unsigned __int16 *)((char *)v57 - v61);
          v63 = (int8x16_t *)&v56[2 * v52 - 16];
          v64 = (int8x16_t *)(v49 - 16);
          v65 = v60 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            _Q0 = *v64;
            v63[-1] = v64[-1];
            *v63 = _Q0;
            v63 -= 2;
            v64 -= 2;
            v65 -= 16;
          }
          while (v65);
          v49 = v62;
          if (v60 != (v60 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_1355:
            do
            {
              v66 = *((_WORD *)v49 - 1);
              v49 -= 2;
              *--v57 = v66;
            }
            while (v49 != v50);
          }
        }
        else
        {
          v56 = 0;
          v57 = (unsigned __int16 *)(2 * v52);
          *(_WORD *)(2 * v52) = v1045;
          v46 = 2 * v52 + 2;
          v58 = v49 - v50;
          if (v49 != v50)
            goto LABEL_56;
        }
LABEL_62:
        v47[3] = v57;
        v47[4] = v46;
        v47[5] = &v56[2 * v55];
        if (v50)
          operator delete(v50);
        goto LABEL_40;
      }
LABEL_35:
      ++v41;
      v40 = v1040;
    }
    v10 = ++v1045;
    v9 = *a2;
    v12 = a2[1];
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - *a2) >> 4);
  }
  while (v13 > v1045);
  v67 = (_QWORD *)*((_QWORD *)a1 + 1);
  v972 = (_QWORD *)v67[37];
  v995 = v67;
  if (*((_BYTE *)a3 + 40))
  {
    v68 = *a2;
    v69 = (float32x2_t *)v67[31];
    v70 = (float32x2_t *)v67[32];
    memset(v1058, 0, 24);
    v71 = (char *)v70 - (char *)v69;
    if (v70 == v69)
    {
      v998 = 0;
      v9 = v68;
    }
    else
    {
      if (v71 < 0)
        sub_20EEC13DC();
      *(_QWORD *)v1058 = operator new((char *)v70 - (char *)v69);
      *(_QWORD *)&v1058[8] = *(_QWORD *)v1058;
      *(_QWORD *)&v1058[16] = *(_QWORD *)v1058 + 8 * (v71 >> 3);
      *(_QWORD *)object = v1058;
      do
      {
        *(int32x2_t *)&v1085 = vcvt_s32_f32(*v69);
        sub_20EEE90CC((void ***)object, &v1085);
        ++v69;
      }
      while (v69 != v70);
      v998 = *(char **)v1058;
      v9 = *a2;
      v12 = a2[1];
      v13 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - *a2) >> 4);
    }
  }
  else
  {
    v998 = 0;
  }
  v1077 = 0;
  v1076 = 0;
  v1078 = 0;
  *(_QWORD *)v1058 = &v1076;
  v1058[8] = 0;
  if (v12 == v9)
  {
    v76 = 0;
    v74 = 0;
    v1046 = 0;
    v1036 = 0;
  }
  else
  {
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v73 = 24 * v13;
    v74 = operator new(24 * v13);
    v1076 = v74;
    v1078 = &v74[3 * v13];
    v75 = 24 * ((24 * v13 - 24) / 0x18) + 24;
    bzero(v74, v75);
    v76 = (_QWORD *)((char *)v74 + v75);
    v1077 = (char *)v74 + v75;
    v77 = (char *)operator new(v73);
    bzero(v77, v75);
    v1036 = v77;
    v1046 = &v77[v75];
  }
  v79 = v972[3];
  v78 = v972[4];
  __p = 0;
  v1075 = 0uLL;
  v80 = v78 - v79;
  if (!v80)
    goto LABEL_664;
  if (v80 < 0)
    sub_20E867F44();
  v81 = v80 >> 5;
  __p = operator new(24 * (v80 >> 5));
  *(_QWORD *)&v1075 = __p;
  *((_QWORD *)&v1075 + 1) = (char *)__p + 24 * v81;
  v86 = v972[3];
  v988 = v972[4];
  if (v86 == v988)
    goto LABEL_664;
  __asm { FMOV            V0.4S, #3.0 }
  v1006 = (float32x4_t)_Q0;
  v971 = 1.5047e-36;
  while (2)
  {
    v1000 = 0;
    v89 = *(_QWORD *)(v86 + 16);
    *(_QWORD *)(v86 + 24) &= 0x1FuLL;
    v90 = **(_QWORD **)v89;
    v91 = *(unint64_t ***)(*(_QWORD *)(v89 + 32) + 16);
    v92 = **v91;
    v1009 = 1 << v90;
    v1012 = v90 >> 6;
    v93 = v90;
    v1003 = &v998[8 * v90];
    v1013 = v86;
    v1026 = v90;
    while (2)
    {
      v94 = v93;
      v91 = (unint64_t **)v91[4][2];
      v95 = v995[21];
      v96 = v95 + 12 * v94;
      v97 = v95 + 12 * v92;
      v1032 = **v91;
      v98 = v95 + 12 * v1032;
      _Q0.i64[0] = *(_QWORD *)v97;
      _Q0.i32[2] = *(_DWORD *)(v97 + 8);
      v82.i64[0] = *(_QWORD *)v96;
      v82.i32[2] = *(_DWORD *)(v96 + 8);
      v83.i64[0] = *(_QWORD *)v98;
      v83.i32[2] = *(_DWORD *)(v98 + 8);
      v99 = (int32x4_t)vsubq_f32((float32x4_t)_Q0, (float32x4_t)v82);
      v100 = (int32x4_t)vsubq_f32((float32x4_t)v83, (float32x4_t)v82);
      v101 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v99, (int8x16_t)v99, 0xCuLL), (int8x16_t)v99, 8uLL);
      v102 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v100, v100), (int8x16_t)v100, 0xCuLL);
      _Q0 = vextq_s8((int8x16_t)vuzp1q_s32(v99, v99), (int8x16_t)v99, 0xCuLL);
      v83 = (int8x16_t)vmlsq_f32(vmulq_f32(v101, v102), (float32x4_t)_Q0, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v100, (int8x16_t)v100, 0xCuLL), (int8x16_t)v100, 8uLL));
      *(int32x2_t *)_Q0.i8 = vdup_lane_s32(*(int32x2_t *)v83.i8, 1);
      v82 = vextq_s8(v83, v83, 8uLL);
      *(float *)_Q0.i32 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v83.i8), *(float32x2_t *)_Q0.i8, *(float32x2_t *)v83.i8, 1), *(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8).f32[0])* 0.5;
      *(float *)v82.i32 = fabsf(*(float *)_Q0.i32);
      v103 = *(float *)_Q0.i32 != 0.0 && *(float *)v82.i32 > 0.000001;
      if (!v103)
        goto LABEL_84;
      v104 = (_QWORD *)v1075;
      if ((unint64_t)v1075 >= *((_QWORD *)&v1075 + 1))
      {
        v108 = v91;
        v109 = __p;
        v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1075 - (_QWORD)__p) >> 3);
        v111 = v110 + 1;
        if (v110 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v1075 + 1) - (_QWORD)__p) >> 3) > v111)
          v111 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v1075 + 1) - (_QWORD)__p) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v1075 + 1) - (_QWORD)__p) >> 3) >= 0x555555555555555)
          v112 = 0xAAAAAAAAAAAAAAALL;
        else
          v112 = v111;
        if (v112)
        {
          if (v112 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v113 = (char *)operator new(24 * v112);
        }
        else
        {
          v113 = 0;
        }
        v114 = (unint64_t *)&v113[24 * v110];
        *v114 = v1026;
        v114[1] = v92;
        v114[2] = v1032;
        v115 = v114;
        if (v104 == v109)
        {
          v86 = v1013;
        }
        else
        {
          v86 = v1013;
          do
          {
            _Q0 = *(int8x16_t *)(v104 - 3);
            *(v115 - 1) = *(v104 - 1);
            *(int8x16_t *)(v115 - 3) = _Q0;
            v115 -= 3;
            v104 -= 3;
          }
          while (v104 != v109);
          v104 = __p;
        }
        v106 = v114 + 3;
        __p = v115;
        *(_QWORD *)&v1075 = v114 + 3;
        *((_QWORD *)&v1075 + 1) = &v113[24 * v112];
        if (v104)
          operator delete(v104);
        v105 = v1026;
        v91 = v108;
        v107 = v1032;
      }
      else
      {
        v105 = v1026;
        *(_QWORD *)v1075 = v1026;
        v104[1] = v92;
        v106 = v104 + 3;
        v107 = v1032;
        v104[2] = v1032;
      }
      *(_QWORD *)&v1075 = v106;
      v1065.i64[0] = v105;
      v1065.i64[1] = v92;
      v1066 = v107;
      LOBYTE(v1067) = 0;
      v1073 = 0;
      v1058[0] = 0;
      v1064 = 0;
      v116 = *((_QWORD *)a1 + 1);
      v1019 = v91;
      if (*((_BYTE *)a3 + 40))
      {
        v117 = *(_QWORD *)(v116 + 272);
        v118 = v1009 & *(_QWORD *)(v117 + 8 * v1012);
        LODWORD(v119) = v118 != 0;
        if (v118)
        {
          v120 = (1 << v92) & *(_QWORD *)(v117 + ((v92 >> 3) & 0x1FFFFFFFFFFFFFF8));
          LODWORD(v119) = v120 != 0;
          if (v120)
            v119 = (*(_QWORD *)(v117 + ((v1032 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v1032) & 1;
        }
        if (!(_DWORD)v119)
          goto LABEL_638;
        v121 = &v998[8 * v92];
        v122 = &v998[8 * v1032];
        v123 = (*((_DWORD *)v121 + 1) - *((_DWORD *)v1003 + 1)) * (*(_DWORD *)v1003 - *(_DWORD *)v122)
             + (*((_DWORD *)v1003 + 1) - *((_DWORD *)v122 + 1)) * (*(_DWORD *)v1003 - *(_DWORD *)v121);
        if (v123 < 0)
          v123 = -v123;
        *(double *)_Q0.i64 = (double)v123 * 0.5;
        *(float *)_Q0.i32 = *(double *)_Q0.i64;
        v124 = fabsf(*(float *)_Q0.i32);
        if (*(float *)_Q0.i32 == 0.0 || v124 <= 0.000001)
          goto LABEL_638;
        v127 = *((_QWORD *)a3 + 3);
        v126 = (const char *)*((_QWORD *)a3 + 4);
        v1092 = *(void **)v1003;
        *(_QWORD *)&v1093 = *(_QWORD *)v121;
        *((_QWORD *)&v1093 + 1) = *(_QWORD *)v122;
        v1085 = *a3;
        *(_QWORD *)&v1086 = *((_QWORD *)a3 + 2);
        *((_QWORD *)&v1086 + 1) = v127;
        v1087 = v126;
        v1088 = 0u;
        v1089 = 0u;
        v1090 = 1065353216;
        memset(v1091, 0, sizeof(v1091));
        v128 = v127 + 1;
        if (v127 != -1)
        {
          if (v128 >> 61)
            sub_20E867F44();
          v129 = (char *)operator new(8 * v128);
          v130 = &v129[8 * v128];
          v1091[1] = v129;
          v1091[3] = v130;
          bzero(v129, 8 * v127 + 8);
          v1091[2] = v130;
        }
        v1095 = 0;
        v1094 = 0;
        v1096 = 0;
        v1094 = operator new(0x30uLL);
        v1095 = (float *)v1094;
        v1096 = (char *)v1094 + 48;
        LODWORD(v1052) = 0;
        LODWORD(v1049) = 0;
        sub_20EF0848C(3, (uint64_t)&v1092, &v1052, &v1049, (char **)&v1094);
        v131 = 126 - 2 * __clz(((char *)v1095 - (_BYTE *)v1094) >> 4);
        if (v1095 == v1094)
          v132 = 0;
        else
          v132 = v131;
        sub_20EF11E00((float *)v1094, v1095, v132, 1);
        v133 = (int)v1052;
        v134 = (int)v1049;
        if ((_DWORD)v1052 == (_DWORD)v1049)
        {
          v135 = (int)v1092;
          if ((int)v1093 >= (int)v1092)
            v136 = (int)v1092;
          else
            v136 = v1093;
          if ((int)v1093 >= (int)v1092)
            v137 = (void **)&v1093;
          else
            v137 = &v1092;
          v138 = DWORD2(v1093);
          if (SDWORD2(v1093) < v136)
          {
            v139 = HIDWORD(v1093);
            if ((HIDWORD(v1093) & 0x80000000) != 0)
              goto LABEL_201;
            goto LABEL_185;
          }
          if ((int)v1093 > (int)v1092)
            v135 = v1093;
          if ((int)v1093 >= (int)v1092)
            v162 = &v1092;
          else
            v162 = (void **)&v1093;
          if (SDWORD2(v1093) >= v135)
            v137 = (void **)&v1093 + 1;
          v138 = v136;
          v139 = *((_DWORD *)v162 + 1);
          if ((v139 & 0x80000000) == 0)
          {
LABEL_185:
            if (v139 < SHIDWORD(v1085))
            {
              v163 = *(_DWORD *)v137;
              v164 = v138 & ~(v138 >> 31);
              if (SDWORD2(v1085) <= 1)
                v165 = 1;
              else
                v165 = DWORD2(v1085);
              if (DWORD2(v1085) - 1 < v164)
                v164 = DWORD2(v1085) - 1;
              if (v165 >= v163 + 1)
                v166 = v163 + 1;
              else
                v166 = v165;
              v167 = (v166 - v164);
              if ((_DWORD)v167)
              {
                v168 = (unsigned __int8 *)(v1085 + (DWORD1(v1086) * v139 + v1086 * v164));
                v169 = BYTE8(v1086);
                v170 = -v167;
                do
                {
                  v172 = *v168++;
                  v171 = v172;
                  if (*((_QWORD *)&v1086 + 1) <= (unint64_t)v172)
                  {
                    v173 = 0;
                    v171 = v169;
                  }
                  else
                  {
                    v173 = v1087[16 * v171];
                  }
                  ++*(_QWORD *)(v1091[1] + 8 * v171);
                  LODWORD(v1055) = v173;
                  v174 = sub_20EF12A48((uint64_t)&v1088, v173, &v1055);
                  ++v174[3];
                  ++v1091[0];
                  _CF = __CFADD__(v170++, 1);
                }
                while (!_CF);
              }
            }
          }
        }
        else if ((_DWORD)v1052 != (_DWORD)v1049 + 1)
        {
          v140 = 0;
          v141 = v1094;
          v142 = 1;
          do
          {
            if (v140 <= v142)
              v143 = v142;
            else
              v143 = v140;
            if (v141[4 * v140 + 1] == v133 && v133 < (int)v1049)
              v144 = v143 + 1;
            else
              v144 = v140;
            if (v144 <= v142)
              v145 = v142;
            else
              v145 = v144;
            if (v141[4 * v142 + 1] == v133 && v133 < (int)v1049)
              v146 = v145 + 1;
            else
              v146 = v142;
            v147 = *(float *)&v141[4 * v144 + 2];
            v148 = *(float *)&v141[4 * v146 + 2];
            if (v147 <= v148)
              v142 = v146;
            else
              v142 = v144;
            if (v147 <= v148)
              v140 = v144;
            else
              v140 = v146;
            if ((v133 & 0x80000000) == 0 && v133 < SHIDWORD(v1085))
            {
              v149 = llroundf(*(float *)&v141[4 * v142 + 2]);
              v150 = llroundf(*(float *)&v141[4 * v140 + 2]);
              v151 = v150 & ~(v150 >> 31);
              v152 = SDWORD2(v1085) <= 1 ? 1 : DWORD2(v1085);
              v153 = DWORD2(v1085) - 1 >= v151 ? v151 : DWORD2(v1085) - 1;
              v154 = v152 >= (int)(v149 + 1) ? v149 + 1 : v152;
              v155 = (v154 - v153);
              if (v154 != v153)
              {
                v156 = BYTE8(v1086);
                v157 = (unsigned __int8 *)(v1085 + (v153 * v1086 + DWORD1(v1086) * v133));
                do
                {
                  v159 = *v157++;
                  v158 = v159;
                  if (*((_QWORD *)&v1086 + 1) <= (unint64_t)v159)
                  {
                    v160 = 0;
                    v158 = v156;
                  }
                  else
                  {
                    v160 = v1087[16 * v158];
                  }
                  ++*(_QWORD *)(v1091[1] + 8 * v158);
                  LODWORD(v1055) = v160;
                  v161 = sub_20EF12A48((uint64_t)&v1088, v160, &v1055);
                  ++v161[3];
                  ++v1091[0];
                  --v155;
                }
                while (v155);
                v141 = v1094;
              }
            }
            *(float *)&v141[4 * v140 + 2] = *(float *)&v141[4 * v140 + 3] + *(float *)&v141[4 * v140 + 2];
            *(float *)&v141[4 * v142 + 2] = *(float *)&v141[4 * v142 + 3] + *(float *)&v141[4 * v142 + 2];
            _ZF = v133++ == v134;
          }
          while (!_ZF);
        }
LABEL_201:
        if (v1094)
        {
          v1095 = (float *)v1094;
          operator delete(v1094);
        }
        v82.i32[3] = HIDWORD(v1086);
        *(_OWORD *)object = v1085;
        *(_OWORD *)&object[16] = v1086;
        v175 = v1088;
        v176 = (_QWORD *)v1089;
        v1088 = 0uLL;
        *(_QWORD *)&object[32] = v1087;
        v1099 = v175;
        v1100 = v1089;
        v1101 = v1090;
        if (*((_QWORD *)&v1089 + 1))
        {
          v177 = *(_QWORD *)(v1089 + 8);
          if ((*((_QWORD *)&v175 + 1) & (*((_QWORD *)&v175 + 1) - 1)) != 0)
          {
            v86 = v1013;
            if (v177 >= *((_QWORD *)&v175 + 1))
              v177 %= *((_QWORD *)&v175 + 1);
          }
          else
          {
            v177 &= *((_QWORD *)&v175 + 1) - 1;
            v86 = v1013;
          }
          v176 = 0;
          *(_QWORD *)(v175 + 8 * v177) = &v1100;
          v1089 = 0uLL;
        }
        else
        {
          v86 = v1013;
        }
        _Q0.i32[3] = HIDWORD(v1091[2]);
        v1103 = *(_OWORD *)&v1091[1];
        v1102 = v1091[0];
        v1104 = v1091[3];
        memset(&v1091[1], 0, 24);
        v1105 = 1;
        if (v176)
        {
          do
          {
            v178 = (_QWORD *)*v176;
            operator delete(v176);
            v176 = v178;
          }
          while (v178);
        }
        v179 = (void *)v1088;
        *(_QWORD *)&v1088 = 0;
        if (v179)
          operator delete(v179);
        if (v1064 == v1105)
        {
          if (!v1064)
            goto LABEL_257;
          v82.i32[3] = *(_DWORD *)&object[28];
          *(_OWORD *)v1058 = *(_OWORD *)object;
          *(_OWORD *)&v1058[16] = *(_OWORD *)&object[16];
          *(_QWORD *)&v1058[32] = *(_QWORD *)&object[32];
          if (*((_QWORD *)&v1059 + 1))
          {
            v180 = (_QWORD *)v1059;
            if ((_QWORD)v1059)
            {
              do
              {
                v181 = (_QWORD *)*v180;
                operator delete(v180);
                v180 = v181;
              }
              while (v181);
            }
            *(_QWORD *)&v1059 = 0;
            v182 = *(_QWORD *)&v1058[48];
            if (*(_QWORD *)&v1058[48])
            {
              v183 = 0;
              do
                *(_QWORD *)(*(_QWORD *)&v1058[40] + 8 * v183++) = 0;
              while (v182 != v183);
            }
            *((_QWORD *)&v1059 + 1) = 0;
          }
          v184 = v1099;
          *(_QWORD *)&v1099 = 0;
          v185 = *(void **)&v1058[40];
          *(_QWORD *)&v1058[40] = v184;
          if (v185)
            operator delete(v185);
          v186 = *((_QWORD *)&v1099 + 1);
          *((_QWORD *)&v1099 + 1) = 0;
          v1060 = v1101;
          *(_QWORD *)&v1058[48] = v186;
          v1059 = v1100;
          if (*((_QWORD *)&v1100 + 1))
          {
            v187 = *(_QWORD *)(v1100 + 8);
            if ((v186 & (v186 - 1)) != 0)
            {
              if (v187 >= v186)
                v187 %= v186;
            }
            else
            {
              v187 &= v186 - 1;
            }
            *(_QWORD *)(*(_QWORD *)&v1058[40] + 8 * v187) = &v1059;
            v1100 = 0uLL;
          }
          *(_QWORD *)v1062 = v1102;
          if (*(_QWORD *)&v1062[8])
          {
            *(_QWORD *)&v1062[16] = *(_QWORD *)&v1062[8];
            operator delete(*(void **)&v1062[8]);
          }
          _Q0.i32[3] = HIDWORD(v1103);
          *(_OWORD *)&v1062[8] = v1103;
          v1063 = v1104;
          v1104 = 0;
          v1103 = 0uLL;
          if (!v1105)
            goto LABEL_257;
        }
        else if (v1064)
        {
          if (*(_QWORD *)&v1062[8])
          {
            *(_QWORD *)&v1062[16] = *(_QWORD *)&v1062[8];
            operator delete(*(void **)&v1062[8]);
          }
          v188 = (_QWORD *)v1059;
          if ((_QWORD)v1059)
          {
            do
            {
              v189 = (_QWORD *)*v188;
              operator delete(v188);
              v188 = v189;
            }
            while (v189);
          }
          v190 = *(void **)&v1058[40];
          *(_QWORD *)&v1058[40] = 0;
          if (v190)
            operator delete(v190);
          v1064 = 0;
          if (!v1105)
            goto LABEL_257;
        }
        else
        {
          v82.i32[3] = *(_DWORD *)&object[28];
          *(_OWORD *)v1058 = *(_OWORD *)object;
          *(_OWORD *)&v1058[16] = *(_OWORD *)&object[16];
          v191 = v1099;
          v1099 = 0uLL;
          *(_QWORD *)&v1058[32] = *(_QWORD *)&object[32];
          *(_OWORD *)&v1058[40] = v191;
          v1059 = v1100;
          v1060 = v1101;
          if (*((_QWORD *)&v1100 + 1))
          {
            v192 = *(_QWORD *)(v1100 + 8);
            if ((*((_QWORD *)&v191 + 1) & (*((_QWORD *)&v191 + 1) - 1)) != 0)
            {
              if (v192 >= *((_QWORD *)&v191 + 1))
                v192 %= *((_QWORD *)&v191 + 1);
            }
            else
            {
              v192 &= *((_QWORD *)&v191 + 1) - 1;
            }
            *(_QWORD *)(v191 + 8 * v192) = &v1059;
            v1100 = 0uLL;
          }
          _Q0.i32[3] = HIDWORD(v1103);
          *(_OWORD *)&v1062[8] = v1103;
          *(_QWORD *)v1062 = v1102;
          v1063 = v1104;
          v1104 = 0;
          v1103 = 0uLL;
          v1064 = 1;
          if (!v1105)
            goto LABEL_257;
        }
        if ((_QWORD)v1103)
        {
          *((_QWORD *)&v1103 + 1) = v1103;
          operator delete((void *)v1103);
        }
        v193 = (_QWORD *)v1100;
        if ((_QWORD)v1100)
        {
          do
          {
            v194 = (_QWORD *)*v193;
            operator delete(v193);
            v193 = v194;
          }
          while (v194);
        }
        v195 = (void *)v1099;
        *(_QWORD *)&v1099 = 0;
        if (v195)
          operator delete(v195);
LABEL_257:
        v116 = *((_QWORD *)a1 + 1);
      }
      v196 = v995[21];
      v197 = v196 + 12 * v1026;
      v198 = v196 + 12 * v92;
      v199 = v196 + 12 * v1032;
      _Q0.i64[0] = *(_QWORD *)v197;
      _Q0.i32[2] = *(_DWORD *)(v197 + 8);
      v82.i64[0] = *(_QWORD *)v198;
      v82.i32[2] = *(_DWORD *)(v198 + 8);
      v102.i64[0] = *(_QWORD *)v199;
      v102.i32[2] = *(_DWORD *)(v199 + 8);
      v200.i32[1] = v1006.i32[1];
      v201 = (int8x16_t)vdivq_f32(vaddq_f32(vaddq_f32((float32x4_t)_Q0, (float32x4_t)v82), v102), v1006);
      v200.i32[0] = *(_DWORD *)(v116 + 8);
      v84.i32[0] = *(_DWORD *)(v116 + 24);
      v85.i32[0] = *(_DWORD *)(v116 + 40);
      v202 = vmla_lane_f32(vmul_f32(v200, *(float32x2_t *)v201.i8), v84, *(float32x2_t *)v201.i8, 1);
      v83 = vextq_s8(v201, v201, 8uLL);
      *(float *)v83.i32 = fmaxf((float)((float)((float)(*(float *)(v116 + 56)+ vmla_f32(v202, *(float32x2_t *)v83.i8, v85).f32[0])+ -0.5)/ 3.0)+ 1.0, 1.0);
      v203 = *(float *)v83.i32 * 0.2;
      v103 = *(float *)v83.i32 <= 3.0;
      v83.i32[0] = 1058642330;
      if (v103)
        *(float *)v83.i32 = v203;
      v204 = *(float *)v83.i32 * *(float *)v83.i32;
      v205 = (int8x16_t)vsubq_f32((float32x4_t)v82, (float32x4_t)_Q0);
      v206 = (float32x2_t)vextq_s8(v205, v205, 8uLL).u64[0];
      v207 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v205.i8, *(float32x2_t *)v205.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v205.i8, 1), *(float32x2_t *)v205.i8, 1), v206, v206).f32[0];
      v82 = (int8x16_t)vsubq_f32(v102, (float32x4_t)v82);
      v84 = (float32x2_t)vextq_s8(v82, v82, 8uLL).u64[0];
      v85 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.i8, 1), *(float32x2_t *)v82.i8, 1), v84, v84);
      _Q0 = (int8x16_t)vsubq_f32((float32x4_t)_Q0, v102);
      *(int32x2_t *)v82.i8 = vdup_lane_s32(*(int32x2_t *)_Q0.i8, 1);
      v208 = v207 <= v204 && v85.f32[0] <= v204;
      v209 = (float32x2_t)vextq_s8(_Q0, _Q0, 8uLL).u64[0];
      LODWORD(v210) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q0.i8, *(float32x2_t *)_Q0.i8), *(float32x2_t *)v82.i8, *(float32x2_t *)_Q0.i8, 1), v209, v209).u32[0];
      if (v208 && v210 <= v204)
        goto LABEL_374;
      if (!v1064)
        goto LABEL_645;
      v212 = *(unint64_t **)&v1062[8];
      if (*(_QWORD *)&v1062[8] == *(_QWORD *)&v1062[16])
        goto LABEL_638;
      v213 = *(_QWORD *)&v1062[8] + 8;
      if (*(_QWORD *)&v1062[8] + 8 != *(_QWORD *)&v1062[16])
      {
        v214 = **(_QWORD **)&v1062[8];
        v215 = (unint64_t *)(*(_QWORD *)&v1062[8] + 8);
        do
        {
          v217 = *v215++;
          v216 = v217;
          _CF = v214 >= v217;
          if (v214 <= v217)
            v214 = v216;
          if (!_CF)
            v212 = (unint64_t *)v213;
          v213 = (uint64_t)v215;
        }
        while (v215 != *(unint64_t **)&v1062[16]);
      }
      if ((float)((float)*v212 / (float)*(unint64_t *)v1062) < 0.8)
        goto LABEL_638;
      v219 = (_QWORD *)v1059;
      if (!(_QWORD)v1059)
        goto LABEL_638;
      v220 = *(_QWORD **)v1059;
      if (*(_QWORD *)v1059)
      {
        do
        {
          if (v219[3] < v220[3])
            v219 = v220;
          v220 = (_QWORD *)*v220;
        }
        while (v220);
        if (!v219)
          goto LABEL_638;
      }
      v221 = *((_DWORD *)v219 + 4);
      if (!v221 || sub_20EF15370(&v1058[40], *((_DWORD *)v219 + 4)) < 0.8)
        goto LABEL_638;
      v222 = atomic_load((unsigned __int8 *)&qword_254A600B0);
      if ((v222 & 1) == 0 && __cxa_guard_acquire(&qword_254A600B0))
      {
        sub_21021D3D8(&v1085);
        sub_20E8610C0(object, "cv3d.acv.surfacedetection");
        sub_20E8C4068((uint64_t **)&v1085, (uint64_t)object, &qword_254A600A8);
        if ((object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_guard_release(&qword_254A600B0);
      }
      v1055 = (_QWORD *)qword_254A600A8;
      if (**(int **)(qword_254A600A8 + 56) > 2)
        goto LABEL_374;
      v223 = *(unsigned __int8 *)(qword_254A600A8 + 72);
      v224 = sub_20E8C31DC(qword_254A600A8, "OSLogSurrogateAppender", 1, 0);
      v225 = v224;
      if (!v223 && !v224)
        goto LABEL_374;
      *(_QWORD *)&v1085 = &v1055;
      *((std::chrono::steady_clock::time_point *)&v1085 + 1) = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v1086 = std::chrono::system_clock::now();
      DWORD2(v1086) = 2;
      v1087 = "unknown file";
      LODWORD(v1088) = 299;
      *((_QWORD *)&v1088 + 1) = "unknown function";
      v1089 = 0uLL;
      v226 = sub_20EF15370(&v1058[40], v221);
      v227 = *(_QWORD *)v1085;
      v228 = *(_QWORD *)v1085 + 16;
      if (*(char *)(*(_QWORD *)v1085 + 39) < 0)
      {
        v230 = *(const char **)(v227 + 16);
        v229 = *(_QWORD *)(v227 + 24);
        v983 = v225;
        v979 = *(_QWORD *)v1085;
        v232 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v232 & 1) != 0)
          goto LABEL_294;
      }
      else
      {
        v229 = *(unsigned __int8 *)(*(_QWORD *)v1085 + 39);
        v230 = (const char *)(*(_QWORD *)v1085 + 16);
        v983 = v225;
        v979 = *(_QWORD *)v1085;
        v231 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v231 & 1) != 0)
          goto LABEL_294;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v1094);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v1094);
        if (v1097 && SHIBYTE(v1096) < 0)
          operator delete(v1094);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_294:
      if (byte_254A4A4F8[23] >= 0)
        v233 = byte_254A4A4F8;
      else
        v233 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v234 = byte_254A4A4F8[23];
      else
        v234 = *(_QWORD *)&byte_254A4A4F8[8];
      v235 = v233;
      *(_QWORD *)object = os_log_create(v233, v230);
      if (v234 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v236 = v230;
      v977 = v228;
      if (v234 >= 0x17)
      {
        v238 = v229;
        v239 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v234 | 7) != 0x17)
          v239 = v234 | 7;
        v240 = v239 + 1;
        v237 = operator new(v239 + 1);
        *(_QWORD *)&object[24] = v240 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v237;
        *(_QWORD *)&object[16] = v234;
        v229 = v238;
        goto LABEL_307;
      }
      object[31] = v234;
      v237 = &object[8];
      if (v234)
LABEL_307:
        memmove(v237, v235, v234);
      v237[v234] = 0;
      object[32] = 1;
      if (v229 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v229 >= 0x17)
      {
        v243 = (v229 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v229 | 7) != 0x17)
          v243 = v229 | 7;
        v244 = v229;
        v245 = v243 + 1;
        v241 = (__int128 *)operator new(v243 + 1);
        *(_QWORD *)&v1100 = v245 | 0x8000000000000000;
        *(_QWORD *)&v1099 = v241;
        *((_QWORD *)&v1099 + 1) = v244;
        v229 = v244;
      }
      else
      {
        BYTE7(v1100) = v229;
        v241 = &v1099;
        if (!v229)
        {
          LOBYTE(v1099) = 0;
          BYTE8(v1100) = 1;
          v242 = *(NSObject **)object;
          if ((SBYTE7(v1100) & 0x80000000) == 0)
            goto LABEL_312;
          goto LABEL_318;
        }
      }
      memmove(v241, v236, v229);
      *((_BYTE *)v241 + v229) = 0;
      BYTE8(v1100) = 1;
      v242 = *(NSObject **)object;
      if ((SBYTE7(v1100) & 0x80000000) == 0)
      {
LABEL_312:
        if (!object[32])
          goto LABEL_321;
        goto LABEL_319;
      }
LABEL_318:
      operator delete((void *)v1099);
      if (!object[32])
        goto LABEL_321;
LABEL_319:
      if ((object[31] & 0x80000000) != 0)
        operator delete(*(void **)&object[8]);
LABEL_321:
      if (*(_QWORD *)object)
        os_release(*(void **)object);
      if (v983 && *(_QWORD *)(v983 + 24))
      {
        v246 = _os_log_pack_size();
        v247 = (std::__shared_weak_count_vtbl *)operator new(v246, (std::align_val_t)8uLL);
        v248 = (std::__shared_weak_count *)operator new();
        v249 = v248;
        v248->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v248->__shared_owners_;
        v248->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v248->__shared_weak_owners_ = 0;
        v248[1].__vftable = v247;
        *(_QWORD *)object = v247;
        *(_QWORD *)&object[8] = v247;
        *(_QWORD *)&object[16] = v248;
        do
          v251 = __ldxr(p_shared_owners);
        while (__stxr(v251 + 1, p_shared_owners));
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *(_QWORD *)&v1099 = 0;
        do
          v252 = __ldaxr(p_shared_owners);
        while (__stlxr(v252 - 1, p_shared_owners));
        if (!v252)
        {
          ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
          std::__shared_weak_count::__release_weak(v249);
        }
        v253 = *(_QWORD *)object;
        v254 = _os_log_pack_fill();
        *(_DWORD *)v254 = 67109376;
        *(_DWORD *)(v254 + 4) = v221;
        *(_WORD *)(v254 + 8) = 2048;
        *(double *)(v254 + 10) = v226;
        v255 = (char *)operator new();
        v256 = *(unsigned __int8 *)(v979 + 39);
        v257 = v977;
        if ((v256 & 0x80u) != 0)
        {
          v257 = *(_QWORD *)(v979 + 16);
          v256 = *(_QWORD *)(v979 + 24);
        }
        *(_QWORD *)v255 = v253;
        *(_OWORD *)(v255 + 8) = *(_OWORD *)&object[8];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v255 + 24) = *(_OWORD *)&object[24];
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *((_QWORD *)v255 + 5) = v257;
        *((_QWORD *)v255 + 6) = v256;
        v255[56] = 2;
        v1092 = 0;
        v1094 = v255;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v983 + 24) + 40))(*(_QWORD *)(v983 + 24), &v1094);
        v258 = v1094;
        v1094 = 0;
        if (v258)
        {
          v259 = (std::__shared_weak_count *)*((_QWORD *)v258 + 4);
          if (v259)
          {
            v260 = (unint64_t *)&v259->__shared_owners_;
            do
              v261 = __ldaxr(v260);
            while (__stlxr(v261 - 1, v260));
            if (!v261)
            {
              ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
              std::__shared_weak_count::__release_weak(v259);
            }
          }
          v262 = (std::__shared_weak_count *)*((_QWORD *)v258 + 2);
          if (v262)
          {
            v263 = (unint64_t *)&v262->__shared_owners_;
            do
              v264 = __ldaxr(v263);
            while (__stlxr(v264 - 1, v263));
            if (!v264)
            {
              ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
              std::__shared_weak_count::__release_weak(v262);
            }
          }
          MEMORY[0x212BC6398](v258, 0x10F0C40B62ED6C6);
          v265 = v1092;
          v1092 = 0;
          if (v265)
          {
            v266 = (std::__shared_weak_count *)*((_QWORD *)v265 + 4);
            if (v266)
            {
              v267 = (unint64_t *)&v266->__shared_owners_;
              do
                v268 = __ldaxr(v267);
              while (__stlxr(v268 - 1, v267));
              if (!v268)
              {
                ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                std::__shared_weak_count::__release_weak(v266);
              }
            }
            v269 = (std::__shared_weak_count *)*((_QWORD *)v265 + 2);
            if (v269)
            {
              v270 = (unint64_t *)&v269->__shared_owners_;
              do
                v271 = __ldaxr(v270);
              while (__stlxr(v271 - 1, v270));
              if (!v271)
              {
                ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                std::__shared_weak_count::__release_weak(v269);
              }
            }
            MEMORY[0x212BC6398](v265, 0x10F0C40B62ED6C6);
          }
        }
        v272 = *(std::__shared_weak_count **)&object[32];
        if (*(_QWORD *)&object[32])
        {
          v273 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
          do
            v274 = __ldaxr(v273);
          while (__stlxr(v274 - 1, v273));
          if (!v274)
          {
            ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
            std::__shared_weak_count::__release_weak(v272);
          }
        }
        v275 = *(std::__shared_weak_count **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          v276 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
          do
            v277 = __ldaxr(v276);
          while (__stlxr(v277 - 1, v276));
          if (!v277)
          {
            ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
            std::__shared_weak_count::__release_weak(v275);
          }
        }
      }
      else
      {
        os_log_type_enabled(v242, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)object = 67109376;
        *(_DWORD *)&object[4] = v221;
        *(_WORD *)&object[8] = 2048;
        *(double *)&object[10] = v226;
        v278 = (void *)_os_log_send_and_compose_impl();
        if (v278)
          free(v278);
      }
      if (v223)
      {
        v279 = sub_20EF15370(&v1058[40], v221);
        sub_20E8C003C((uint64_t)&v1085, "Triangle accepted due to semantic info: %d %f", v221, v279);
        sub_20E863570((uint64_t)&v1085);
      }
      sub_20E863570((uint64_t)&v1085);
      v280 = (std::__shared_weak_count *)*((_QWORD *)&v1089 + 1);
      if (*((_QWORD *)&v1089 + 1))
      {
        v281 = (unint64_t *)(*((_QWORD *)&v1089 + 1) + 8);
        do
          v282 = __ldaxr(v281);
        while (__stlxr(v282 - 1, v281));
        if (!v282)
        {
          ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
          std::__shared_weak_count::__release_weak(v280);
          if (!v1064)
            goto LABEL_378;
          goto LABEL_375;
        }
      }
LABEL_374:
      if (!v1064)
        goto LABEL_378;
LABEL_375:
      if (v1073)
      {
        v1071 = v1060;
        sub_20EF12D38(&v1067, (uint64_t *)v1059, 0);
        v1072 = *(_QWORD *)v1062;
      }
      else
      {
        sub_20EEBF970((uint64_t)&v1067, (uint64_t)&v1058[40]);
        v1072 = *(_QWORD *)v1062;
        v1073 = 1;
      }
LABEL_378:
      v1049 = (void *)v1026;
      v283 = sub_20EF14DC4((uint64_t)&v1079, v1026, &v1049);
      memset(object, 0, 24);
      v285 = (_BYTE *)v283[3];
      v284 = (_BYTE *)v283[4];
      v286 = v284 - v285;
      if (v284 != v285)
      {
        if (v286 < 0)
          sub_20E867F44();
        *(_QWORD *)object = operator new(v284 - v285);
        *(_QWORD *)&object[8] = *(_QWORD *)object;
        v287 = *(_QWORD *)object + 2 * (v286 >> 1);
        *(_QWORD *)&object[16] = v287;
        memcpy(*(void **)object, v285, v286);
        *(_QWORD *)&object[8] = v287;
      }
      v1047 = (unint64_t *)v92;
      v288 = sub_20EF14DC4((uint64_t)&v1079, v92, &v1047);
      *(_QWORD *)&object[24] = 0;
      *(_QWORD *)&object[32] = 0;
      *(_QWORD *)&v1099 = 0;
      v290 = (_BYTE *)v288[3];
      v289 = (_BYTE *)v288[4];
      v291 = v289 - v290;
      if (v289 != v290)
      {
        if (v291 < 0)
          sub_20E867F44();
        *(_QWORD *)&object[24] = operator new(v289 - v290);
        *(_QWORD *)&object[32] = *(_QWORD *)&object[24];
        v292 = *(_QWORD *)&object[24] + 2 * (v291 >> 1);
        *(_QWORD *)&v1099 = v292;
        memcpy(*(void **)&object[24], v290, v291);
        *(_QWORD *)&object[32] = v292;
      }
      v1057 = v1032;
      v293 = sub_20EF14DC4((uint64_t)&v1079, v1032, &v1057);
      *((_QWORD *)&v1099 + 1) = 0;
      v1100 = 0uLL;
      v295 = (_BYTE *)v293[3];
      v294 = (_BYTE *)v293[4];
      v296 = v294 - v295;
      if (v294 == v295)
      {
        v298 = 0;
        v297 = 0;
      }
      else
      {
        if (v296 < 0)
          sub_20E867F44();
        v297 = (unint64_t)operator new(v294 - v295);
        *((_QWORD *)&v1099 + 1) = v297;
        *(_QWORD *)&v1100 = v297;
        v298 = (char *)(v297 + 2 * (v296 >> 1));
        *((_QWORD *)&v1100 + 1) = v298;
        memcpy((void *)v297, v295, v296);
        *(_QWORD *)&v1100 = v298;
      }
      v1093 = 0uLL;
      v1092 = 0;
      v299 = operator new(0x48uLL);
      v1092 = v299;
      *(_QWORD *)&v1093 = v299;
      *((_QWORD *)&v1093 + 1) = v299 + 9;
      v1055 = v299;
      v1052 = v299;
      *(_QWORD *)&v1085 = (char *)&v1093 + 8;
      *((_QWORD *)&v1085 + 1) = &v1052;
      *(_QWORD *)&v1086 = &v1055;
      v299[1] = 0;
      BYTE8(v1086) = 0;
      *v299 = 0;
      v299[2] = 0;
      v300 = *(const void **)object;
      v301 = *(_QWORD *)&object[8] - *(_QWORD *)object;
      if (*(_QWORD *)&object[8] != *(_QWORD *)object)
      {
        if (v301 < 0)
          goto LABEL_1330;
        v302 = (char *)operator new(*(_QWORD *)&object[8] - *(_QWORD *)object);
        *v299 = v302;
        v299[1] = v302;
        v303 = &v302[2 * (v301 >> 1)];
        v299[2] = v303;
        memcpy(v302, v300, v301);
        v299[1] = v303;
      }
      v299[3] = 0;
      v1055 = v299 + 3;
      v299[4] = 0;
      v299[5] = 0;
      v304 = *(const void **)&object[24];
      v305 = *(_QWORD *)&object[32] - *(_QWORD *)&object[24];
      if (*(_QWORD *)&object[32] != *(_QWORD *)&object[24])
      {
        if (v305 < 0)
          goto LABEL_1330;
        v306 = (char *)operator new(*(_QWORD *)&object[32] - *(_QWORD *)&object[24]);
        v299[3] = v306;
        v299[4] = v306;
        v307 = &v306[2 * (v305 >> 1)];
        v299[5] = v307;
        memcpy(v306, v304, v305);
        v299[4] = v307;
      }
      v299[6] = 0;
      v1055 = v299 + 6;
      v299[7] = 0;
      v299[8] = 0;
      v308 = (int64_t)&v298[-v297];
      if (v298 == (char *)v297)
        goto LABEL_397;
      if (v308 < 0)
LABEL_1330:
        sub_20E867F44();
      v309 = (char *)operator new((size_t)&v298[-v297]);
      v299[6] = v309;
      v310 = &v309[2 * (v308 >> 1)];
      v299[8] = v310;
      memcpy(v309, (const void *)v297, v308);
      v299[7] = v310;
LABEL_397:
      v311 = 0;
      v312 = 0;
      *(_QWORD *)&v1093 = v299 + 9;
      _Q0.i32[1] = 0;
      _Q0.i64[1] = 0;
      v1085 = 0u;
      v1086 = 0u;
      LODWORD(v1087) = 1065353216;
      do
      {
        v313 = &v299[3 * v312];
        v314 = (_WORD *)*v313;
        v315 = (_WORD *)v313[1];
        while (v314 != v315)
        {
          v318 = (unsigned __int16)*v314;
          if (v311)
          {
            *(int8x8_t *)_Q0.i8 = vcnt_s8((int8x8_t)v311);
            _Q0.i16[0] = vaddlv_u8(*(uint8x8_t *)_Q0.i8);
            if (_Q0.u32[0] > 1uLL)
            {
              v297 = (unsigned __int16)*v314;
              if (v311 <= v318)
                v297 = v318 % v311;
            }
            else
            {
              v297 = ((_DWORD)v311 - 1) & v318;
            }
            v319 = *(void ***)(v1085 + 8 * v297);
            if (v319)
            {
              v320 = *v319;
              if (*v319)
              {
                if (_Q0.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v322 = v320[1];
                    if (v322 == v318)
                    {
                      if (*((unsigned __int16 *)v320 + 8) == (_DWORD)v318)
                        goto LABEL_404;
                    }
                    else if ((v322 & (v311 - 1)) != v297)
                    {
                      goto LABEL_426;
                    }
                    v320 = (_QWORD *)*v320;
                    if (!v320)
                      goto LABEL_426;
                  }
                }
                do
                {
                  v321 = v320[1];
                  if (v321 == v318)
                  {
                    if (*((unsigned __int16 *)v320 + 8) == (_DWORD)v318)
                      goto LABEL_404;
                  }
                  else
                  {
                    if (v321 >= v311)
                      v321 %= v311;
                    if (v321 != v297)
                      break;
                  }
                  v320 = (_QWORD *)*v320;
                }
                while (v320);
              }
            }
          }
LABEL_426:
          v320 = operator new(0x18uLL);
          *v320 = 0;
          v320[1] = v318;
          *((_WORD *)v320 + 8) = *v314;
          *((_BYTE *)v320 + 18) = 0;
          *(float *)_Q0.i32 = (float)(unint64_t)(*((_QWORD *)&v1086 + 1) + 1);
          if (!v311 || (float)(*(float *)&v1087 * (float)v311) < *(float *)_Q0.i32)
          {
            v324 = (v311 & (v311 - 1)) != 0;
            if (v311 < 3)
              v324 = 1;
            v325 = v324 | (2 * v311);
            v326 = vcvtps_u32_f32(*(float *)_Q0.i32 / *(float *)&v1087);
            if (v325 <= v326)
              prime = v326;
            else
              prime = v325;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
              v311 = *((_QWORD *)&v1085 + 1);
            }
            if (prime <= v311)
            {
              if (prime >= v311)
                goto LABEL_481;
              v338 = vcvtps_u32_f32((float)*((unint64_t *)&v1086 + 1) / *(float *)&v1087);
              if (v311 < 3
                || (*(int8x8_t *)_Q0.i8 = vcnt_s8((int8x8_t)v311),
                    _Q0.i16[0] = vaddlv_u8(*(uint8x8_t *)_Q0.i8),
                    _Q0.u32[0] > 1uLL))
              {
                v338 = std::__next_prime(v338);
              }
              else
              {
                v339 = 1 << -(char)__clz(v338 - 1);
                if (v338 >= 2)
                  v338 = v339;
              }
              if (prime <= v338)
                prime = v338;
              if (prime >= v311)
              {
                v311 = *((_QWORD *)&v1085 + 1);
                if ((*((_QWORD *)&v1085 + 1) & (*((_QWORD *)&v1085 + 1) - 1)) != 0)
                  goto LABEL_491;
              }
              else
              {
                if (prime)
                  goto LABEL_442;
                v341 = (void *)v1085;
                *(_QWORD *)&v1085 = 0;
                if (v341)
                  operator delete(v341);
                v311 = 0;
                *((_QWORD *)&v1085 + 1) = 0;
              }
LABEL_400:
              v297 = ((_DWORD)v311 - 1) & v318;
              v316 = v1085;
              v317 = *(_QWORD **)(v1085 + 8 * v297);
              if (v317)
                goto LABEL_401;
              goto LABEL_429;
            }
LABEL_442:
            if (prime >> 61)
              sub_20E877A38();
            v328 = operator new(8 * prime);
            v329 = (void *)v1085;
            *(_QWORD *)&v1085 = v328;
            if (v329)
              operator delete(v329);
            v330 = 0;
            *((_QWORD *)&v1085 + 1) = prime;
            do
              *(_QWORD *)(v1085 + 8 * v330++) = 0;
            while (prime != v330);
            v331 = (_QWORD **)v1086;
            if (!(_QWORD)v1086)
            {
LABEL_490:
              v311 = prime;
              if ((prime & (prime - 1)) == 0)
                goto LABEL_400;
              goto LABEL_491;
            }
            v332 = *(_QWORD *)(v1086 + 8);
            v333 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              v334 = v332 & v333;
              *(_QWORD *)(v1085 + 8 * v334) = &v1086;
              for (i = *v331; *v331; i = *v331)
              {
                v336 = i[1] & v333;
                if (v336 == v334)
                {
                  v331 = (_QWORD **)i;
                }
                else if (*(_QWORD *)(v1085 + 8 * v336))
                {
                  *v331 = (_QWORD *)*i;
                  v337 = 8 * v336;
                  *i = **(_QWORD **)(v1085 + v337);
                  **(_QWORD **)(v1085 + v337) = i;
                }
                else
                {
                  *(_QWORD *)(v1085 + 8 * v336) = v331;
                  v331 = (_QWORD **)i;
                  v334 = v336;
                }
              }
              goto LABEL_490;
            }
            if (v332 < prime)
            {
              *(_QWORD *)(v1085 + 8 * v332) = &v1086;
              v340 = *v331;
              if (*v331)
                goto LABEL_485;
LABEL_480:
              v311 = prime;
LABEL_481:
              if ((v311 & (v311 - 1)) == 0)
                goto LABEL_400;
LABEL_491:
              if (v311 <= v318)
              {
                v297 = v318 % v311;
                v316 = v1085;
                v317 = *(_QWORD **)(v1085 + 8 * (v318 % v311));
                if (!v317)
                  goto LABEL_429;
              }
              else
              {
                v297 = v318;
                v316 = v1085;
                v317 = *(_QWORD **)(v1085 + 8 * v318);
                if (!v317)
                  goto LABEL_429;
              }
LABEL_401:
              *v320 = *v317;
              goto LABEL_402;
            }
            v332 %= prime;
            *(_QWORD *)(v1085 + 8 * v332) = &v1086;
            v340 = *v331;
            if (!*v331)
              goto LABEL_480;
            while (1)
            {
LABEL_485:
              v343 = v340[1];
              if (v343 >= prime)
                v343 %= prime;
              if (v343 == v332)
                goto LABEL_484;
              if (*(_QWORD *)(v1085 + 8 * v343))
                break;
              *(_QWORD *)(v1085 + 8 * v343) = v331;
              v331 = (_QWORD **)v340;
              v340 = (_QWORD *)*v340;
              v332 = v343;
              if (!v340)
                goto LABEL_490;
            }
            *v331 = (_QWORD *)*v340;
            v342 = 8 * v343;
            *v340 = **(_QWORD **)(v1085 + v342);
            **(_QWORD **)(v1085 + v342) = v340;
            v340 = v331;
LABEL_484:
            v331 = (_QWORD **)v340;
            v340 = (_QWORD *)*v340;
            if (!v340)
              goto LABEL_490;
            goto LABEL_485;
          }
          v316 = v1085;
          v317 = *(_QWORD **)(v1085 + 8 * v297);
          if (v317)
            goto LABEL_401;
LABEL_429:
          *v320 = v1086;
          *(_QWORD *)&v1086 = v320;
          *(_QWORD *)(v316 + 8 * v297) = &v1086;
          if (!*v320)
            goto LABEL_403;
          v323 = *(_QWORD *)(*v320 + 8);
          if ((v311 & (v311 - 1)) != 0)
          {
            if (v323 >= v311)
              v323 %= v311;
          }
          else
          {
            v323 &= v311 - 1;
          }
          v317 = (_QWORD *)(v1085 + 8 * v323);
LABEL_402:
          *v317 = v320;
LABEL_403:
          ++*((_QWORD *)&v1086 + 1);
LABEL_404:
          ++*((_BYTE *)v320 + 18);
          ++v314;
        }
        ++v312;
      }
      while (v312 != 3);
      v344 = (uint64_t *)v1086;
      v1096 = 0;
      v1094 = 0;
      v1095 = 0;
      if (!(_QWORD)v1086)
        goto LABEL_531;
      v345 = 0;
      v346 = 0;
      v347 = 0;
      do
      {
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1093 - (_QWORD)v1092) >> 3) == *((unsigned __int8 *)v344 + 18))
        {
          if (v347 < v346)
          {
            *(_WORD *)v347 = *((_WORD *)v344 + 8);
            v348 = (float *)((char *)v347 + 2);
LABEL_499:
            v1095 = v348;
            v347 = v348;
            goto LABEL_500;
          }
          v349 = (char *)v347 - (char *)v345;
          if ((char *)v347 - (char *)v345 <= -3)
            sub_20E867F44();
          v350 = v349 >> 1;
          if ((char *)v346 - (char *)v345 <= (unint64_t)((v349 >> 1) + 1))
            v351 = v350 + 1;
          else
            v351 = (char *)v346 - (char *)v345;
          if ((unint64_t)((char *)v346 - (char *)v345) >= 0x7FFFFFFFFFFFFFFELL)
            v352 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v352 = v351;
          if (v352)
          {
            if (v352 < 0)
              sub_20E877A38();
            v353 = operator new(2 * v352);
            v354 = &v353[2 * v350];
            *v354 = *((_WORD *)v344 + 8);
            v348 = (float *)(v354 + 1);
            v355 = (char *)v347 - (char *)v345;
            if (v347 != v345)
            {
LABEL_513:
              v356 = v355 - 2;
              if (v356 < 0x5E
                || (v359 = ((char *)v347 - 2 - (char *)v345) & 0xFFFFFFFFFFFFFFFELL,
                    &v353[(v349 & 0xFFFFFFFFFFFFFFFELL) - 2 - v359] > &v353[(v349 & 0xFFFFFFFFFFFFFFFELL) - 2])
                || (char *)v347 - v359 - 2 > (char *)v347 - 2
                || (char *)v347 - v353 - (v349 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
              {
                v357 = v347;
              }
              else
              {
                v360 = (v356 >> 1) + 1;
                v361 = 2 * (v360 & 0xFFFFFFFFFFFFFFF0);
                v357 = (float *)((char *)v347 - v361);
                v354 = (_WORD *)((char *)v354 - v361);
                v362 = (int8x16_t *)&v353[2 * v350 - 16];
                v363 = (int8x16_t *)(v347 - 4);
                v364 = v360 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  v82 = v363[-1];
                  _Q0 = *v363;
                  v362[-1] = v82;
                  *v362 = _Q0;
                  v362 -= 2;
                  v363 -= 2;
                  v364 -= 16;
                }
                while (v364);
                if (v360 == (v360 & 0xFFFFFFFFFFFFFFF0))
                {
LABEL_516:
                  v346 = (float *)&v353[2 * v352];
                  v1094 = v354;
                  v1096 = (__int8 *)v346;
                  if (!v345)
                  {
LABEL_518:
                    v345 = (float *)v354;
                    goto LABEL_499;
                  }
LABEL_517:
                  operator delete(v345);
                  goto LABEL_518;
                }
              }
              do
              {
                v358 = *((_WORD *)v357 - 1);
                v357 = (float *)((char *)v357 - 2);
                *--v354 = v358;
              }
              while (v357 != v345);
              goto LABEL_516;
            }
          }
          else
          {
            v353 = 0;
            v354 = (_WORD *)(2 * v350);
            *(_WORD *)(2 * v350) = *((_WORD *)v344 + 8);
            v348 = (float *)(2 * v350 + 2);
            v355 = (char *)v347 - (char *)v345;
            if (v347 != v345)
              goto LABEL_513;
          }
          v346 = (float *)&v353[2 * v352];
          v1094 = v354;
          v1096 = (__int8 *)v346;
          if (!v345)
            goto LABEL_518;
          goto LABEL_517;
        }
LABEL_500:
        v344 = (uint64_t *)*v344;
      }
      while (v344);
      v365 = (_QWORD *)v1086;
      if ((_QWORD)v1086)
      {
        do
        {
          v366 = (_QWORD *)*v365;
          operator delete(v365);
          v365 = v366;
        }
        while (v366);
      }
LABEL_531:
      v367 = (void *)v1085;
      *(_QWORD *)&v1085 = 0;
      if (v367)
        operator delete(v367);
      v368 = (char *)v1092;
      v86 = v1013;
      if (v1092)
      {
        v369 = (char *)v1093;
        v370 = v1092;
        if ((void *)v1093 != v1092)
        {
          v371 = (char *)v1093;
          do
          {
            v373 = (void *)*((_QWORD *)v371 - 3);
            v371 -= 24;
            v372 = v373;
            if (v373)
            {
              *((_QWORD *)v369 - 2) = v372;
              operator delete(v372);
            }
            v369 = v371;
          }
          while (v371 != v368);
          v370 = v1092;
        }
        *(_QWORD *)&v1093 = v368;
        operator delete(v370);
      }
      if (*((_QWORD *)&v1099 + 1))
      {
        *(_QWORD *)&v1100 = *((_QWORD *)&v1099 + 1);
        operator delete(*((void **)&v1099 + 1));
      }
      if (*(_QWORD *)&object[24])
      {
        *(_QWORD *)&object[32] = *(_QWORD *)&object[24];
        operator delete(*(void **)&object[24]);
      }
      if (*(_QWORD *)object)
      {
        *(_QWORD *)&object[8] = *(_QWORD *)object;
        operator delete(*(void **)object);
      }
      v374 = (float *)v1094;
      if (v1094 == v1095)
        goto LABEL_636;
      v375 = 0;
      v376 = *(_QWORD *)(v1021 + 224);
      v377 = *(_WORD *)v1094;
      while (2)
      {
        v379 = (_QWORD *)(*a2 + 80 * *(unsigned __int16 *)v374);
        v380 = (uint64_t)(v379[5] - v379[4]) >> 3;
        v381 = (char *)v379[7];
        v382 = (char *)v379[8];
        if (v381 != v382)
        {
          v383 = v382 - v381 - 8;
          if (v383 < 8)
          {
            v384 = v381;
            goto LABEL_560;
          }
          v385 = 0;
          v386 = (v383 >> 3) + 1;
          v384 = &v381[8 * (v386 & 0x3FFFFFFFFFFFFFFELL)];
          v387 = v381 + 8;
          v388 = v386 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v380 += *(_QWORD *)(v376 + 16 * *(v387 - 1) + 8);
            v385 += *(_QWORD *)(v376 + 16 * *v387 + 8);
            v387 += 2;
            v388 -= 2;
          }
          while (v388);
          v380 += v385;
          if (v386 != (v386 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_560:
              v389 = *(_QWORD *)v384;
              v384 += 8;
              v380 += *(_QWORD *)(v376 + 16 * v389 + 8);
            }
            while (v384 != v382);
          }
        }
        v378 = v375 >= v380;
        if (v375 <= v380)
          v375 = v380;
        if (!v378)
          v377 = *(_WORD *)v374;
        v374 = (float *)((char *)v374 + 2);
        if (v374 != v1095)
          continue;
        break;
      }
      v390 = v1076;
      v391 = (int8x16_t *)v1076[3 * v377];
      v392 = (int8x16_t *)v1076[3 * v377 + 1];
      v393 = 0xCCCCCCCCCCCCCCCDLL * (v392 - v391);
      if (!v1000 || v392 == v391)
      {
        v401 = &v1076[3 * v377];
        v404 = v401[2];
        v403 = v401 + 2;
        v402 = v404;
        v405 = (int8x16_t **)(v403 - 1);
        if ((unint64_t)v392 >= v404)
          goto LABEL_595;
        goto LABEL_567;
      }
      v394 = &v1036[24 * v377];
      v395 = v393 - 1;
      v397 = v394 + 8;
      v396 = (char *)*((_QWORD *)v394 + 1);
      v399 = v394 + 16;
      v398 = *((_QWORD *)v394 + 2);
      if ((unint64_t)v396 < v398)
      {
        *(_WORD *)v396 = v393;
        *((_WORD *)v396 + 1) = v395;
        v400 = v396 + 4;
        v86 = v1013;
        goto LABEL_594;
      }
      v980 = v394 + 8;
      v411 = *(char **)v394;
      v412 = (uint64_t)&v396[-*(_QWORD *)v394];
      v413 = v412 >> 2;
      v414 = (v412 >> 2) + 1;
      if (v414 >> 62)
        sub_20E867F44();
      v984 = v393;
      v415 = v398 - (_QWORD)v411;
      if (v415 >> 1 > v414)
        v414 = v415 >> 1;
      if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFFCLL)
        v414 = 0x3FFFFFFFFFFFFFFFLL;
      if (v414 >> 62)
        sub_20E877A38();
      v975 = v414;
      v416 = operator new(4 * v414);
      v417 = &v416[4 * v413];
      LOWORD(v393) = v984;
      *v417 = v984;
      v417[1] = v395;
      v418 = v396 - v411;
      if (v396 == v411)
      {
        v420 = &v416[4 * v413];
      }
      else
      {
        v419 = v418 - 4;
        if ((unint64_t)(v418 - 4) < 0x2C)
        {
          v420 = &v416[4 * v413];
          goto LABEL_590;
        }
        v420 = &v416[4 * v413];
        if ((unint64_t)(v396 - &v416[v412]) < 0x20)
          goto LABEL_1356;
        v422 = (v419 >> 2) + 1;
        v423 = 4 * (v422 & 0x7FFFFFFFFFFFFFF8);
        v424 = &v396[-v423];
        v420 = (char *)&v417[v423 / 0xFFFFFFFFFFFFFFFELL];
        v425 = (int8x16_t *)&v416[4 * v413 - 16];
        v426 = (int8x16_t *)(v396 - 16);
        v427 = v422 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v82 = v426[-1];
          v428 = *v426;
          v425[-1] = v82;
          *v425 = v428;
          v425 -= 2;
          v426 -= 2;
          v427 -= 8;
        }
        while (v427);
        v396 = v424;
        LOWORD(v393) = v984;
        if (v422 != (v422 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_1356:
          do
          {
LABEL_590:
            v429 = *((_DWORD *)v396 - 1);
            v396 -= 4;
            *((_DWORD *)v420 - 1) = v429;
            v420 -= 4;
          }
          while (v396 != v411);
        }
      }
      *(_QWORD *)&v1036[24 * v377] = v420;
      v400 = v417 + 2;
      v397 = v980;
      *v980 = v417 + 2;
      *v399 = &v416[4 * v975];
      if (v411)
      {
        operator delete(v411);
        LOWORD(v393) = v984;
        v390 = v1076;
      }
      v86 = v1013;
LABEL_594:
      *v397 = v400;
      v392 = (int8x16_t *)v390[3 * v377 + 1];
      v430 = &v390[3 * v377];
      v431 = v430[2];
      v403 = v430 + 2;
      v402 = v431;
      v405 = (int8x16_t **)(v403 - 1);
      if ((unint64_t)v392 < v431)
      {
LABEL_567:
        _Q0 = v1065;
        v392[1].i64[0] = v1066;
        *v392 = _Q0;
        v392[1].i8[8] = 0;
        v392[4].i8[8] = 0;
        if (v1073)
        {
          v406 = v1067;
          v1067 = 0;
          v392[1].i64[1] = (uint64_t)v406;
          v392[2].i64[0] = v1068;
          v1068 = 0;
          v407 = v1069;
          v392[2].i64[1] = (uint64_t)v1069;
          v408 = v1070;
          v392[3].i64[0] = v1070;
          v392[3].i32[2] = v1071;
          if (v408)
          {
            v409 = v407[1];
            v410 = v392[2].u64[0];
            if ((v410 & (v410 - 1)) != 0)
            {
              if (v409 >= v410)
                v409 %= v410;
            }
            else
            {
              v409 &= v410 - 1;
            }
            v406[v409] = (char *)v392 + 40;
            v1069 = 0;
            v1070 = 0;
          }
          v392[4].i64[0] = v1072;
          v392[4].i8[8] = 1;
        }
        v421 = v392 + 5;
        goto LABEL_635;
      }
LABEL_595:
      v432 = (void **)&v390[3 * v377];
      v433 = (int8x16_t *)*v432;
      v434 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v392 - (_BYTE *)*v432) >> 4);
      v435 = v434 + 1;
      if (v434 + 1 > 0x333333333333333)
        sub_20E867F44();
      v436 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v402 - (_QWORD)v433) >> 4);
      if (2 * v436 > v435)
        v435 = 2 * v436;
      if (v436 >= 0x199999999999999)
        v437 = 0x333333333333333;
      else
        v437 = v435;
      if (v437)
      {
        if (v437 > 0x333333333333333)
          sub_20E877A38();
        v438 = v393;
        v439 = operator new(80 * v437);
      }
      else
      {
        v438 = v393;
        v439 = 0;
      }
      v440 = (int8x16_t *)&v439[10 * v434];
      _Q0 = v1065;
      *v440 = v1065;
      v440[1].i64[0] = v1066;
      v440[1].i8[8] = 0;
      v440[4].i8[8] = 0;
      if (v1073)
      {
        v441 = v1067;
        v442 = v1068;
        v1068 = 0;
        v1067 = 0;
        v440[1].i64[1] = (uint64_t)v441;
        v443 = (char *)&v439[10 * v434];
        v444 = v1069;
        v445 = v1070;
        *((_QWORD *)v443 + 5) = v1069;
        v446 = v443 + 40;
        *((_QWORD *)v446 - 1) = v442;
        *((_QWORD *)v446 + 1) = v445;
        *((_DWORD *)v446 + 4) = v1071;
        if (v445)
        {
          v447 = v444[1];
          if ((v442 & (v442 - 1)) != 0)
          {
            _CF = v447 >= v442;
            v448 = v447 % v442;
            if (!_CF)
              v448 = v447;
          }
          else
          {
            v448 = v447 & (v442 - 1);
          }
          v441[v448] = v446;
          v1069 = 0;
          v1070 = 0;
        }
        v439[10 * v434 + 8] = v1072;
        v440[4].i8[8] = 1;
        v392 = *v405;
        v433 = (int8x16_t *)*v432;
      }
      v449 = (char *)&v439[10 * v437];
      v421 = v440 + 5;
      v86 = v1013;
      if (v392 == v433)
      {
        *v432 = v440;
        *v405 = v421;
        *v403 = v449;
        if (v433)
          goto LABEL_633;
      }
      else
      {
        v450 = 0;
        do
        {
          i8 = v440[v450].i8;
          v453 = &v392[v450];
          _Q0 = v392[v450 - 5];
          *((_QWORD *)i8 - 8) = v392[v450 - 4].i64[0];
          *((int8x16_t *)i8 - 5) = _Q0;
          *(i8 - 56) = 0;
          *(i8 - 8) = 0;
          if (v392[v450 - 1].i8[8])
          {
            v454 = v453[-4].i64[1];
            v453[-4].i64[1] = 0;
            *((_QWORD *)i8 - 7) = v454;
            *((_QWORD *)i8 - 6) = v453[-3].i64[0];
            v453[-3].i64[0] = 0;
            v457 = v453[-3].i64[1];
            v455 = &v453[-3].i64[1];
            v456 = v457;
            *((_QWORD *)i8 - 5) = v457;
            v458 = v455[1];
            *((_QWORD *)i8 - 4) = v458;
            *((_DWORD *)i8 - 6) = *((_DWORD *)v455 + 4);
            if (v458)
            {
              v451 = *(_QWORD *)(v456 + 8);
              v459 = *((_QWORD *)i8 - 6);
              if ((v459 & (v459 - 1)) != 0)
              {
                if (v451 >= v459)
                  v451 %= v459;
              }
              else
              {
                v451 &= v459 - 1;
              }
              *(_QWORD *)(v454 + 8 * v451) = i8 - 40;
              *v455 = 0;
              v455[1] = 0;
            }
            v440[v450 - 1].i64[0] = v392[v450 - 1].i64[0];
            *(i8 - 8) = 1;
          }
          v450 -= 5;
        }
        while (&v392[v450] != v433);
        v433 = (int8x16_t *)*v432;
        v460 = *v405;
        *v432 = &v440[v450];
        *v405 = v421;
        *v403 = v449;
        while (v460 != v433)
        {
          if (v460[-1].i8[8])
          {
            v461 = (_QWORD *)v460[-3].i64[1];
            if (v461)
            {
              do
              {
                v462 = (_QWORD *)*v461;
                operator delete(v461);
                v461 = v462;
              }
              while (v462);
            }
            v463 = (void *)v460[-4].i64[1];
            v460[-4].i64[1] = 0;
            if (v463)
              operator delete(v463);
          }
          v460 -= 5;
        }
        v86 = v1013;
        if (v433)
LABEL_633:
          operator delete(v433);
      }
      LOWORD(v393) = v438;
LABEL_635:
      *v405 = v421;
      ++v1000;
      *(_QWORD *)(v86 + 24) = ((unint64_t)(unsigned __int16)(v377 + 1) << 21) | (32 * (unsigned __int16)v393) | *(_QWORD *)(v86 + 24) & 0x1FLL;
      v374 = (float *)v1094;
LABEL_636:
      if (v374)
      {
        v1095 = v374;
        operator delete(v374);
      }
LABEL_638:
      if (v1064)
      {
        if (*(_QWORD *)&v1062[8])
        {
          *(_QWORD *)&v1062[16] = *(_QWORD *)&v1062[8];
          operator delete(*(void **)&v1062[8]);
        }
        v464 = (_QWORD *)v1059;
        if ((_QWORD)v1059)
        {
          do
          {
            v465 = (_QWORD *)*v464;
            operator delete(v464);
            v464 = v465;
          }
          while (v465);
        }
        v466 = *(void **)&v1058[40];
        *(_QWORD *)&v1058[40] = 0;
        if (v466)
          operator delete(v466);
      }
LABEL_645:
      if (v1073)
      {
        v467 = v1069;
        if (v1069)
        {
          do
          {
            v468 = (_QWORD *)*v467;
            operator delete(v467);
            v467 = v468;
          }
          while (v468);
        }
        v469 = v1067;
        v1067 = 0;
        if (v469)
          operator delete(v469);
      }
      v91 = v1019;
LABEL_84:
      v92 = v1032;
      v93 = v1026;
      if (v1032 != v1026)
        continue;
      break;
    }
    v86 += 32;
    if (v86 != v988)
      continue;
    break;
  }
  v76 = v1077;
  v74 = v1076;
LABEL_664:
  v1093 = 0uLL;
  v1092 = 0;
  if (v76 != v74)
  {
    v470 = 0xAAAAAAAAAAAAAAABLL * (v76 - v74);
    if (v470 > 0x492492492492492)
      sub_20E867F44();
    v471 = (char *)operator new(0x5555555555555568 * (v76 - v74));
    v472 = (uint64_t *)v1092;
    v473 = (uint64_t *)v1093;
    v1092 = v471;
    *(_QWORD *)&v1093 = v471;
    *((_QWORD *)&v1093 + 1) = &v471[56 * v470];
    while (v473 != v472)
    {
      v473 -= 7;
      sub_20EF134C4(v473);
    }
    if (v472)
      operator delete(v472);
    v74 = v1076;
    v76 = v1077;
  }
  if (v74 != v76)
  {
    v474 = v1093;
    do
    {
      while (1)
      {
        v475 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v74[1] - *v74) >> 4);
        if (v474 >= *((_QWORD *)&v1093 + 1))
          break;
        sub_20EF1358C(v474, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v74[1] - *v74) >> 4));
        v474 += 56;
        *(_QWORD *)&v1093 = v474;
        v74 += 3;
        if (v74 == v76)
          goto LABEL_708;
      }
      v476 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v474 - (_QWORD)v1092) >> 3);
      v477 = v476 + 1;
      if ((unint64_t)(v476 + 1) > 0x492492492492492)
        sub_20E867F44();
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*((_QWORD *)&v1093 + 1) - (_QWORD)v1092) >> 3) > v477)
        v477 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*((_QWORD *)&v1093 + 1) - (_QWORD)v1092) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v1093 + 1) - (_QWORD)v1092) >> 3)) >= 0x249249249249249)
        v478 = 0x492492492492492;
      else
        v478 = v477;
      *(_QWORD *)&v1058[32] = (char *)&v1093 + 8;
      if (v478)
      {
        if (v478 > 0x492492492492492)
          sub_20E877A38();
        v479 = (char *)operator new(56 * v478);
      }
      else
      {
        v479 = 0;
      }
      *(_QWORD *)v1058 = v479;
      *(_QWORD *)&v1058[8] = &v479[56 * v476];
      *(_QWORD *)&v1058[16] = *(_QWORD *)&v1058[8];
      *(_QWORD *)&v1058[24] = &v479[56 * v478];
      sub_20EF1358C(*(uint64_t *)&v1058[8], v475);
      v480 = 0;
      v481 = *(_QWORD *)&v1058[8];
      *(_QWORD *)&v1058[16] += 56;
      v482 = v1093;
      v483 = v1092;
      while ((void *)(v482 + v480) != v483)
      {
        v480 -= 56;
        sub_20EF13060(v480 + v481, (_QWORD *)(v480 + v482));
      }
      v484 = (void *)(v481 + v480);
      v485 = (uint64_t *)v1092;
      v486 = (uint64_t *)v1093;
      v1092 = v484;
      v1041 = *(_OWORD *)&v1058[16];
      v1093 = *(_OWORD *)&v1058[16];
      if (v486 != v485)
      {
        do
        {
          v487 = *(v486 - 1);
          if (v487)
            MEMORY[0x212BC6398](v487, 0xC400A2AC0F1);
          v488 = *(v486 - 4);
          if (v488)
          {
            v489 = *(v486 - 3);
            v490 = (void *)*(v486 - 4);
            if (v489 != v488)
            {
              v491 = *(v486 - 3);
              do
              {
                v493 = *(void **)(v491 - 32);
                v491 -= 32;
                v492 = v493;
                if (v493)
                {
                  *(_QWORD *)(v489 - 24) = v492;
                  operator delete(v492);
                }
                v489 = v491;
              }
              while (v491 != v488);
              v490 = (void *)*(v486 - 4);
            }
            *(v486 - 3) = v488;
            operator delete(v490);
          }
          v494 = v486 - 7;
          if (*(v486 - 5))
          {
            v496 = *(v486 - 7);
            v495 = (uint64_t *)*(v486 - 6);
            v497 = *v495;
            *(_QWORD *)(v497 + 8) = *(_QWORD *)(v496 + 8);
            **(_QWORD **)(v496 + 8) = v497;
            *(v486 - 5) = 0;
            if (v495 != v494)
            {
              do
              {
                v498 = (uint64_t *)v495[1];
                operator delete(v495);
                v495 = v498;
              }
              while (v498 != v494);
            }
          }
          v486 = v494;
        }
        while (v494 != v485);
      }
      if (v485)
        operator delete(v485);
      _Q0 = (int8x16_t)v1041;
      v474 = v1041;
      *(_QWORD *)&v1093 = v1041;
      v74 += 3;
    }
    while (v74 != v76);
  }
LABEL_708:
  v499 = v972[6];
  for (j = v972[7]; v499 != j; v499 += 48)
  {
    v501 = *(_QWORD *)(v499 + 8);
    if (v501)
    {
      v502 = *(_QWORD *)(*(_QWORD *)(v499 + 16) + 8);
      if (v502)
      {
        v503 = *(_QWORD *)(v501 + 24);
        v504 = (v503 >> 21) & 0xFFF;
        v505 = (_DWORD)v504
             ? (((v503 >> 21) & 0xFFF) - 1) & 0xFF00 | ((unsigned __int16)(v503 >> 5) << 16) | ((v503 >> 21) - 1)
             : 0;
        v506 = *(_QWORD *)(v502 + 24);
        v507 = (v506 >> 21) & 0xFFF;
        if ((_DWORD)v507)
        {
          if ((_DWORD)v504 && (unsigned __int16)(v507 - 1) == (unsigned __int16)v505)
            sub_20EF150BC((uint64_t)v1058, HIWORD(v505), (unsigned __int16)(v506 >> 5), (uint64_t **)v1092 + 7 * (unsigned __int16)v505);
        }
      }
    }
  }
  v508 = v1036;
  if (v1046 != v1036)
  {
    v509 = 0;
    while (1)
    {
      v510 = (unsigned __int16 **)&v508[24 * v509];
      v511 = *v510;
      v1037 = v508;
      v1042 = v510[1];
      v1033 = (void *)v509;
      if (*v510 != v1042)
        break;
LABEL_722:
      ++v509;
      v508 = v1037;
      if (v509 >= 0xAAAAAAAAAAAAAAABLL * ((v1046 - v1037) >> 3))
        goto LABEL_790;
    }
    while (2)
    {
      v513 = *v511;
      v514 = v511[1];
      v515 = (uint64_t *)((char *)v1092 + 56 * v509);
      if (v513 <= v514)
        v516 = v511[1];
      else
        v516 = *v511;
      v517 = v515[3];
      v518 = (_QWORD *)v515[4];
      v519 = ((uint64_t)v518 - v517) >> 5;
      if (v516 >= v519)
      {
        v520 = v516 + 1;
        v521 = v516 + 1 - v519;
        v522 = v515[5];
        if (v521 <= (v522 - (uint64_t)v518) >> 5)
        {
          if (v520 != v519)
          {
            v539 = &v518[4 * v521];
            v540 = 32 * v516 - 32 * v519 + 32;
            do
            {
              *v518 = 0;
              v518[1] = 0;
              v518[2] = 0;
              v518 += 4;
              v540 -= 32;
            }
            while (v540);
            v518 = v539;
          }
          v515[4] = (uint64_t)v518;
        }
        else
        {
          v523 = v522 - v517;
          v524 = v523 >> 4;
          if (v523 >> 4 <= v520)
            v524 = v516 + 1;
          if ((unint64_t)v523 >= 0x7FFFFFFFFFFFFFE0)
            v525 = 0x7FFFFFFFFFFFFFFLL;
          else
            v525 = v524;
          if (v525 >> 59)
LABEL_1307:
            sub_20E877A38();
          v526 = (char *)operator new(32 * v525);
          v527 = &v526[32 * v519];
          v528 = &v526[32 * v520];
          v529 = 32 * v516 - 32 * v519 + 32;
          v530 = v527;
          do
          {
            *(_QWORD *)v530 = 0;
            *((_QWORD *)v530 + 1) = 0;
            *((_QWORD *)v530 + 2) = 0;
            v530 += 32;
            v529 -= 32;
          }
          while (v529);
          v531 = &v526[32 * v525];
          v532 = (_QWORD *)v515[3];
          if (v518 == v532)
          {
            v515[3] = (uint64_t)v527;
            v515[4] = (uint64_t)v528;
            v515[5] = (uint64_t)v531;
          }
          else
          {
            do
            {
              v533 = v527;
              *((_QWORD *)v527 - 3) = 0;
              *((_QWORD *)v527 - 2) = 0;
              v534 = *((_OWORD *)v518 - 2);
              v518 -= 4;
              *((_OWORD *)v527 - 2) = v534;
              v527 -= 32;
              *((_QWORD *)v533 - 2) = v518[2];
              *v518 = 0;
              v518[1] = 0;
              v518[2] = 0;
            }
            while (v518 != v532);
            v518 = (_QWORD *)v515[3];
            v535 = (_QWORD *)v515[4];
            v515[3] = (uint64_t)v527;
            v515[4] = (uint64_t)v528;
            v515[5] = (uint64_t)v531;
            if (v535 != v518)
            {
              v536 = v535;
              do
              {
                v538 = (void *)*(v536 - 4);
                v536 -= 4;
                v537 = v538;
                if (v538)
                {
                  *(v535 - 3) = v537;
                  operator delete(v537);
                }
                v535 = v536;
              }
              while (v536 != v518);
            }
          }
          if (v518)
            operator delete(v518);
        }
      }
      v541 = operator new(0x28uLL);
      v542 = v541;
      v541[2] = v513;
      v541[3] = v514;
      v541[1] = v515;
      v543 = *v515;
      *v541 = *v515;
      *(_QWORD *)(v543 + 8) = v541;
      *v515 = (uint64_t)v541;
      v544 = v515[3];
      ++v515[2];
      v545 = (uint64_t *)(v544 + 32 * v513);
      v547 = (int8x16_t *)v545[1];
      v546 = v545[2];
      if ((unint64_t)v547 < v546)
      {
        v547->i64[0] = v514;
        v547->i64[1] = (uint64_t)v541;
        v548 = v547 + 1;
        goto LABEL_773;
      }
      v549 = (int8x16_t *)*v545;
      v550 = ((uint64_t)v547->i64 - *v545) >> 4;
      v551 = v550 + 1;
      if ((unint64_t)(v550 + 1) >> 60)
        sub_20E867F44();
      v552 = v546 - (_QWORD)v549;
      if (v552 >> 3 > v551)
        v551 = v552 >> 3;
      if ((unint64_t)v552 >= 0x7FFFFFFFFFFFFFF0)
        v553 = 0xFFFFFFFFFFFFFFFLL;
      else
        v553 = v551;
      if (v553)
      {
        if (v553 >> 60)
          sub_20E877A38();
        v554 = (char *)operator new(16 * v553);
        v555 = &v554[16 * v550];
        *(_QWORD *)v555 = v514;
        *((_QWORD *)v555 + 1) = v542;
        v556 = (uint64_t)v555;
        if (v547 == v549)
        {
LABEL_771:
          v548 = (int8x16_t *)(v555 + 16);
          *v545 = v556;
          v545[1] = (uint64_t)(v555 + 16);
          v545[2] = (uint64_t)&v554[16 * v553];
          if (v547)
            goto LABEL_772;
          goto LABEL_773;
        }
      }
      else
      {
        v554 = 0;
        v555 = (char *)(16 * v550);
        *(_QWORD *)v555 = v514;
        *((_QWORD *)v555 + 1) = v542;
        v556 = 16 * v550;
        if (v547 == v549)
          goto LABEL_771;
      }
      do
      {
        _Q0 = v547[-1];
        *(int8x16_t *)(v556 - 16) = _Q0;
        v556 -= 16;
        --v547;
      }
      while (v547 != v549);
      v547 = (int8x16_t *)*v545;
      v548 = (int8x16_t *)(v555 + 16);
      *v545 = v556;
      v545[1] = (uint64_t)(v555 + 16);
      v545[2] = (uint64_t)&v554[16 * v553];
      if (v547)
LABEL_772:
        operator delete(v547);
LABEL_773:
      v545[1] = (uint64_t)v548;
      v557 = (uint64_t *)(v515[3] + 32 * v514);
      v559 = (int8x16_t *)v557[1];
      v558 = v557[2];
      if ((unint64_t)v559 < v558)
      {
        v559->i64[0] = v513;
        v559->i64[1] = (uint64_t)v542;
        v512 = v559 + 1;
        v509 = (unint64_t)v1033;
        goto LABEL_726;
      }
      v560 = (int8x16_t *)*v557;
      v561 = ((uint64_t)v559->i64 - *v557) >> 4;
      v562 = v561 + 1;
      if ((unint64_t)(v561 + 1) >> 60)
        sub_20E867F44();
      v563 = v558 - (_QWORD)v560;
      if (v563 >> 3 > v562)
        v562 = v563 >> 3;
      if ((unint64_t)v563 >= 0x7FFFFFFFFFFFFFF0)
        v564 = 0xFFFFFFFFFFFFFFFLL;
      else
        v564 = v562;
      if (v564)
      {
        if (v564 >> 60)
          goto LABEL_1307;
        v565 = (char *)operator new(16 * v564);
        v566 = &v565[16 * v561];
        *(_QWORD *)v566 = v513;
        *((_QWORD *)v566 + 1) = v542;
        v567 = (uint64_t)v566;
        if (v559 != v560)
        {
LABEL_783:
          v509 = (unint64_t)v1033;
          do
          {
            _Q0 = v559[-1];
            *(int8x16_t *)(v567 - 16) = _Q0;
            v567 -= 16;
            --v559;
          }
          while (v559 != v560);
          v559 = (int8x16_t *)*v557;
          v512 = (int8x16_t *)(v566 + 16);
          *v557 = v567;
          v557[1] = (uint64_t)(v566 + 16);
          v557[2] = (uint64_t)&v565[16 * v564];
          if (!v559)
          {
LABEL_726:
            v557[1] = (uint64_t)v512;
            v511 += 2;
            if (v511 == v1042)
              goto LABEL_722;
            continue;
          }
LABEL_789:
          operator delete(v559);
          goto LABEL_726;
        }
      }
      else
      {
        v565 = 0;
        v566 = (char *)(16 * v561);
        *(_QWORD *)v566 = v513;
        *((_QWORD *)v566 + 1) = v542;
        v567 = 16 * v561;
        if (v559 != v560)
          goto LABEL_783;
      }
      break;
    }
    v509 = (unint64_t)v1033;
    v512 = (int8x16_t *)(v566 + 16);
    *v557 = v567;
    v557[1] = (uint64_t)(v566 + 16);
    v557[2] = (uint64_t)&v565[16 * v564];
    if (!v559)
      goto LABEL_726;
    goto LABEL_789;
  }
LABEL_790:
  v1038 = v508;
  v568 = *((_QWORD *)a1 + 1);
  v570 = *(_DWORD *)(v568 + 152);
  v569 = *(_DWORD *)(v568 + 156);
  v990 = (_QWORD *)v568;
  v572 = *a2;
  v571 = a2[1];
  v1055 = 0;
  v1056 = 0uLL;
  if (v571 != v572)
  {
    v573 = 0xCCCCCCCCCCCCCCCDLL * ((v571 - v572) >> 4);
    if (v573 > 0x492492492492492)
      sub_20E867F44();
    *(_QWORD *)&v1058[32] = (char *)&v1056 + 8;
    *(_QWORD *)v1058 = operator new(0xCCCCCCCCCCCCCCD8 * ((v571 - v572) >> 4));
    *(_QWORD *)&v1058[8] = *(_QWORD *)v1058;
    *(_QWORD *)&v1058[16] = *(_QWORD *)v1058;
    *(_QWORD *)&v1058[24] = *(_QWORD *)v1058 + 56 * v573;
    sub_20EF13690((uint64_t *)&v1055, v1058);
    sub_20EF137E8((uint64_t)v1058);
    v572 = *a2;
    v571 = a2[1];
  }
  v1004 = v572;
  if (v571 != v572)
  {
    v974 = 0;
    v574 = 0;
    *(float *)_Q0.i32 = (float)(v570 * v569);
    v986 = *(float *)_Q0.i32;
    v1020 = (uint64_t)(a1 + 6);
    v976 = (_QWORD *)((unint64_t)v1058 | 0xC);
    v970 = _Q0;
    v969 = *(float32x2_t *)_Q0.i8;
    v973 = (int32x4_t)_Q0;
    while (1)
    {
      v981 = v574;
      v1034 = (char *)v1092 + 56 * v574;
      v577 = *((_QWORD *)v1034 + 3);
      v576 = *((_QWORD *)v1034 + 4);
      v578 = v576 - v577;
      if (v576 != v577)
        break;
      v575 = v1004;
LABEL_796:
      v574 = v981 + 1;
      v1004 = v575;
      if (v981 + 1 >= 0xCCCCCCCCCCCCCCCDLL * ((v571 - v575) >> 4))
        goto LABEL_1250;
    }
    v1001 = v1076;
    v1053 = 0;
    v1052 = 0;
    v1054 = 0;
    if ((v578 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v1052 = operator new(v578 >> 2);
    v1054 = (char *)v1052 + 8 * ((uint64_t)v578 >> 5);
    v1017 = (char *)v1052;
    bzero(v1052, v578 >> 2);
    v1053 = &v1017[v578 >> 2];
    if (*((_QWORD *)v1034 + 4) == *((_QWORD *)v1034 + 3))
    {
      v1044 = 0;
      v1035 = 0;
      v624 = v1053;
      v625 = v1052;
      if (v1053 != v1052)
        goto LABEL_866;
      goto LABEL_891;
    }
    *(_DWORD *)v1058 = 0;
    v579.n128_f64[0] = sub_20EEC5B64((uint64_t *)&v1085);
    v581 = *((_QWORD *)v1034 + 3);
    v580 = *((_QWORD *)v1034 + 4);
    v582 = v580 - v581;
    if (v580 == v581)
    {
      v1043 = -1;
    }
    else
    {
      bzero((void *)v1085, (v582 >> 3) & 0xFFFFFFFFFFFFFFFCLL);
      v583 = 0;
      v584 = v582 >> 5;
      v1043 = -1;
      v585 = v1017;
      v1007 = v584;
      do
      {
        v586 = v1085;
        if (!*(_DWORD *)(v1085 + 4 * v583))
        {
          v587 = (unsigned int *)*((_QWORD *)&v1085 + 1);
          *(_OWORD *)object = v1085;
          if (*((_QWORD *)&v1085 + 1))
          {
            v588 = (unsigned int *)(*((_QWORD *)&v1085 + 1) + 8);
            do
              v589 = __ldxr(v588);
            while (__stxr(v589 + 1, v588));
          }
          v1014 = v587;
          memset(v1058, 0, 24);
          v590 = v586;
          *(_DWORD *)(v586 + 4 * v583) = 1;
          *(_QWORD *)&v585[8 * v583] = ++v1043;
          v591 = (uint64_t *)(*((_QWORD *)v1034 + 3) + 32 * v583);
          v593 = *v591;
          v592 = v591[1];
          v594 = (char *)operator new(0x48uLL);
          v595 = v594 + 72;
          *(_QWORD *)v594 = v583;
          v594[8] = 0;
          *((_QWORD *)v594 + 5) = v593;
          *((_QWORD *)v594 + 6) = v583;
          *((_QWORD *)v594 + 7) = v592;
          *((_QWORD *)v594 + 8) = v583;
          v1010 = v583;
          *(_QWORD *)&v1058[16] = v594 + 72;
          v596 = v594 + 72;
          *(_QWORD *)v1058 = v594;
          *(_QWORD *)&v1058[8] = v594 + 72;
          v585 = v1017;
          v597 = v590;
          do
          {
            v599 = *((_QWORD *)v596 - 9);
            v596 -= 72;
            v598 = v599;
            v600 = (uint64_t *)*((_QWORD *)v596 + 5);
            v601 = *((_QWORD *)v596 + 6);
            v603 = (uint64_t *)*((_QWORD *)v596 + 7);
            v602 = *((_QWORD *)v596 + 8);
            if (v596[8])
              *(v595 - 64) = 0;
            *(_QWORD *)&v1058[8] = v596;
            if (v600 != v603)
            {
              v604 = v594;
              do
              {
                while (1)
                {
                  v605 = *v600;
                  if (!*(_DWORD *)(v597 + 4 * *v600))
                    break;
                  v600 += 2;
                  if (v600 == v603)
                    goto LABEL_809;
                }
                v606 = v600[1] + 32;
                v607 = v600 + 2;
                if ((unint64_t)v596 >= *(_QWORD *)&v1058[16])
                {
                  v609 = 0x8E38E38E38E38E39 * ((v596 - v604) >> 3) + 1;
                  if (v609 > 0x38E38E38E38E38ELL)
                    sub_20E867F44();
                  if (0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v1058[16] - (_QWORD)v604) >> 3) > v609)
                    v609 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v1058[16] - (_QWORD)v604) >> 3);
                  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v1058[16] - (_QWORD)v604) >> 3) >= 0x1C71C71C71C71C7)
                    v610 = 0x38E38E38E38E38ELL;
                  else
                    v610 = v609;
                  if (v610 > 0x38E38E38E38E38ELL)
                    sub_20E877A38();
                  v1022 = v602;
                  v1027 = v597;
                  v611 = (char *)operator new(72 * v610);
                  v594 = &v611[8 * ((v596 - v604) >> 3)];
                  *(_QWORD *)v594 = v598;
                  *((_QWORD *)v594 + 2) = v601;
                  *((_QWORD *)v594 + 3) = v605;
                  v594[8] = 1;
                  *((_QWORD *)v594 + 4) = v606;
                  *((_QWORD *)v594 + 5) = v607;
                  *((_QWORD *)v594 + 6) = v601;
                  *((_QWORD *)v594 + 7) = v603;
                  *((_QWORD *)v594 + 8) = v1022;
                  v608 = v594 + 72;
                  v597 = v1027;
                  if (v596 == v604)
                  {
                    *(_QWORD *)v1058 = &v611[8 * ((v596 - v604) >> 3)];
                    *(_QWORD *)&v1058[16] = &v611[72 * v610];
                  }
                  else
                  {
                    v612 = 0;
                    do
                    {
                      v614 = (__n128 *)&v594[v612];
                      v615 = (__n128 *)&v596[v612];
                      v614[-5].n128_u64[1] = *(_QWORD *)&v596[v612 - 72];
                      v614[-4].n128_u8[0] = 0;
                      if (v596[v612 - 64])
                      {
                        v616 = *(__n128 *)((char *)v615 - 56);
                        v614[-3].n128_u64[1] = v615[-3].n128_u64[1];
                        *(__n128 *)((char *)v614 - 56) = v616;
                        v614[-4].n128_u8[0] = 1;
                      }
                      v579 = v615[-2];
                      v613 = v615[-1];
                      v614[-2] = v579;
                      v614[-1] = v613;
                      v612 -= 72;
                    }
                    while (&v596[v612] != v604);
                    v594 += v612;
                    *(_QWORD *)v1058 = v594;
                    *(_QWORD *)&v1058[8] = v608;
                    *(_QWORD *)&v1058[16] = &v611[72 * v610];
                    do
                    {
                      if (*(v596 - 64))
                        *(v596 - 64) = 0;
                      v596 -= 72;
                    }
                    while (v596 != v604);
                  }
                  if (v604)
                  {
                    operator delete(v604);
                    v597 = *(_QWORD *)object;
                  }
                  v604 = v594;
                  v585 = v1017;
                }
                else
                {
                  *(_QWORD *)v596 = v598;
                  *((_QWORD *)v596 + 2) = v601;
                  *((_QWORD *)v596 + 3) = v605;
                  v596[8] = 1;
                  *((_QWORD *)v596 + 4) = v606;
                  *((_QWORD *)v596 + 5) = v607;
                  *((_QWORD *)v596 + 6) = v601;
                  *((_QWORD *)v596 + 7) = v603;
                  v608 = v596 + 72;
                  *((_QWORD *)v596 + 8) = v602;
                }
                *(_QWORD *)&v1058[8] = v608;
                *(_DWORD *)(v597 + 4 * v605) = 1;
                *(_QWORD *)&v585[8 * v605] = v1043;
                v617 = *((_QWORD *)v1034 + 3) + 32 * v605;
                v600 = *(uint64_t **)v617;
                v603 = *(uint64_t **)(v617 + 8);
                v596 = v608;
                v602 = v605;
                v598 = v605;
                v601 = v605;
              }
              while (*(uint64_t **)v617 != v603);
            }
LABEL_809:
            *(_DWORD *)(v597 + 4 * v598) = 4;
            v595 = v596;
          }
          while (v594 != v596);
          if (v594)
          {
            operator delete(v594);
            v585 = v1017;
          }
          v583 = v1010;
          if (v1014)
          {
            v618 = v1014 + 2;
            v584 = v1007;
            do
            {
              v619 = __ldaxr(v618);
              v620 = v619 - 1;
            }
            while (__stlxr(v620, v618));
            if (!v620)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v1014 + 16))(v1014);
              v585 = v1017;
              v621 = v1014 + 3;
              do
              {
                v622 = __ldaxr(v621);
                v623 = v622 - 1;
              }
              while (__stlxr(v623, v621));
              if (!v623)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v1014 + 24))(v1014);
                v585 = v1017;
              }
            }
          }
          else
          {
            v584 = v1007;
          }
        }
        ++v583;
      }
      while (v583 != v584);
    }
    v626 = (unsigned int *)*((_QWORD *)&v1085 + 1);
    if (*((_QWORD *)&v1085 + 1))
    {
      v627 = (unsigned int *)(*((_QWORD *)&v1085 + 1) + 8);
      do
      {
        v628 = __ldaxr(v627);
        v629 = v628 - 1;
      }
      while (__stlxr(v629, v627));
      if (!v629)
      {
        (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v626 + 16))(v626, v579);
        v630 = v626 + 3;
        do
        {
          v631 = __ldaxr(v630);
          v632 = v631 - 1;
        }
        while (__stlxr(v632, v630));
        if (!v632)
          (*(void (**)(unsigned int *))(*(_QWORD *)v626 + 24))(v626);
      }
    }
    v633 = v1043 + 1;
    if (v1043 == -1)
    {
      v1044 = 0;
      v1035 = 0;
      v624 = v1053;
      v625 = v1052;
      if (v1053 != v1052)
        goto LABEL_866;
LABEL_891:
      v665 = (unsigned __int16 **)v1035;
      if (v1035 == v1044)
      {
        if (!v1044)
          goto LABEL_1247;
        goto LABEL_1246;
      }
      v1018 = &v1001[3 * v981];
      v666 = v1004 + 80 * v981;
      v978 = (float32x2_t *)(v666 + 12);
      v993 = (char *)(v666 + 24);
      while (2)
      {
        v994 = v665;
        v669 = *v665;
        v670 = v665[1];
        v1051 = 0;
        v1049 = 0;
        v1050 = 0;
        v671 = (char *)v670 - (char *)v669;
        if (v670 == v669)
          goto LABEL_899;
        if ((unint64_t)v671 >= 0x666666666666667)
          sub_20E867F44();
        v672 = v671 >> 1;
        v673 = operator new(80 * (v671 >> 1));
        v1049 = v673;
        v1050 = v673;
        v1051 = (char *)&v673[5 * v672];
        v674 = v994[1];
        if (v669 == v674)
        {
LABEL_899:
          sub_20EEE7B8C((uint64_t)&v1049, (char *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v995[22] - v995[21]) >> 2)), &v1047);
          v685 = *v993;
          if (v685 == 1)
          {
            v686 = v1047;
            if (*a1 > (unint64_t)(v1048 - v1047))
              goto LABEL_1117;
          }
          else if (v685 == 2)
          {
            v686 = v1047;
            if (a1[1] > (unint64_t)(v1048 - v1047))
              goto LABEL_1117;
          }
          v732 = v1049;
          if (v1049 == v1050)
          {
            v736 = 0.0;
            v735 = 0.0;
          }
          else
          {
            v733 = v995[21];
            v734 = v990[31];
            v735 = 0.0;
            v736 = 0.0;
            do
            {
              v737 = v732[1];
              v738 = v733 + 12 * *v732;
              v739 = v732[2];
              v740 = v733 + 12 * v737;
              v741 = v733 + 12 * v739;
              v677.i64[0] = *(_QWORD *)v740;
              v678.i64[0] = *(_QWORD *)v738;
              v677.i32[2] = *(_DWORD *)(v740 + 8);
              v678.i32[2] = *(_DWORD *)(v738 + 8);
              v679.i64[0] = *(_QWORD *)v741;
              v742 = (int32x4_t)vsubq_f32((float32x4_t)v677, v678);
              v679.i32[2] = *(_DWORD *)(v741 + 8);
              v743 = (int32x4_t)vsubq_f32((float32x4_t)v679, v678);
              v680 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v743, v743), (int8x16_t)v743, 0xCuLL);
              v678 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v743, (int8x16_t)v743, 0xCuLL), (int8x16_t)v743, 8uLL);
              v679 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v742, (int8x16_t)v742, 0xCuLL), (int8x16_t)v742, 8uLL), v680), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v742, v742), (int8x16_t)v742, 0xCuLL), v678);
              v677 = (int32x4_t)vextq_s8(v679, v679, 8uLL);
              v744 = (float *)(v734 + 8 * *v732);
              v735 = v735
                   + (float)(sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v679.i8, *(float32x2_t *)v679.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v679.i8, 1), *(float32x2_t *)v679.i8, 1), *(float32x2_t *)v677.i8, *(float32x2_t *)v677.i8).f32[0])* 0.5);
              v736 = v736
                   + (float)(vabds_f32((float)(*v744 - *(float *)(v734 + 8 * v739))* (float)(*(float *)(v734 + 8 * v737 + 4) - v744[1]), (float)(*v744 - *(float *)(v734 + 8 * v737))* (float)(*(float *)(v734 + 8 * v739 + 4) - v744[1]))* 0.5);
              v732 += 10;
            }
            while (v732 != v1050);
          }
          v745 = v736 / v986;
          v686 = v1047;
          if (v735 < 0.0025 && v745 < 0.05)
          {
LABEL_1117:
            v668 = v994;
            if (!v686)
            {
LABEL_1119:
              v829 = (char *)v1049;
              if (v1049)
              {
                v830 = (char *)v1050;
                v667 = v1049;
                if (v1050 != v1049)
                {
                  do
                  {
                    if (*(v830 - 8))
                    {
                      v831 = (_QWORD *)*((_QWORD *)v830 - 5);
                      if (v831)
                      {
                        do
                        {
                          v832 = (_QWORD *)*v831;
                          operator delete(v831);
                          v831 = v832;
                        }
                        while (v832);
                      }
                      v833 = (void *)*((_QWORD *)v830 - 7);
                      *((_QWORD *)v830 - 7) = 0;
                      if (v833)
                        operator delete(v833);
                    }
                    v830 -= 80;
                  }
                  while (v830 != v829);
                  v667 = v1049;
                }
                v1050 = v829;
                operator delete(v667);
                v668 = v994;
              }
              v665 = v668 + 3;
              if (v665 != (unsigned __int16 **)v1044)
                continue;
              v935 = v1044;
              if (!v1035)
              {
LABEL_1247:
                if (v1052)
                {
                  v1053 = (char *)v1052;
                  operator delete(v1052);
                }
                v575 = *a2;
                v571 = a2[1];
                goto LABEL_796;
              }
              do
              {
                v937 = v935 - 24;
                v936 = (void *)*((_QWORD *)v935 - 3);
                if (v936)
                {
                  *((_QWORD *)v935 - 2) = v936;
                  operator delete(v936);
                }
                v935 = v937;
              }
              while (v937 != v1035);
LABEL_1246:
              operator delete(v1035);
              goto LABEL_1247;
            }
LABEL_1118:
            v1048 = v686;
            operator delete(v686);
            v668 = v994;
            goto LABEL_1119;
          }
          v748 = v995[21];
          v747 = v995[22];
          v749 = v1048;
          v750 = v990[25];
          v1015 = v990[24];
          *(_QWORD *)&v1085 = 2;
          DWORD2(v1085) = 100;
          LOBYTE(v1087) = 0;
          BYTE4(v1087) = 0;
          v985 = vcvtas_u32_f32((float)(unint64_t)-(v1047 - v1048) * 0.9);
          *(_QWORD *)&v1086 = v985;
          BYTE8(v1086) = 1;
          object[0] = 0;
          object[24] = 0;
          v1099 = 0uLL;
          *(_QWORD *)&object[32] = 0;
          LODWORD(v1100) = 0;
          LODWORD(v1057) = (unint64_t)((char *)v1048 - (char *)v1047) >> 3;
          if (v1057 < 2)
            goto LABEL_1182;
          v991 = 0;
          v1011 = 0;
          v1029 = 0xAAAAAAAAAAAAAAABLL * ((v747 - v748) >> 2);
          v987 = v1047 + 1;
          v989 = 0;
          v751 = 0.0;
          v996 = v1047;
          v997 = v1048;
          v1023 = 0x8E38E38E38E38E39 * ((v750 - v1015) >> 2);
          while (1)
          {
            v752 = v1057;
            if (v1085 > v1057)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)&unk_210267FB5, 0, (void (*)(void **))sub_21023DDB0);
              v753 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v753 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v754 = qword_254A6DE40;
                for (k = qword_254A6DE48; v754 != k; v754 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v754)(*(_QWORD *)(v754 + 8), "T{0} <= k && k <= n", 19, &unk_210267FB5, 0);
              }
              v756 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v756 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                abort();
              qword_254A6DE58(unk_254A6DE60, "T{0} <= k && k <= n", 19, &unk_210267FB5, 0);
              v686 = v996;
              v749 = v997;
              v752 = v1057;
            }
            if (!v752)
            {
              v1095 = 0;
              v1094 = 0;
              v1096 = 0;
              goto LABEL_1069;
            }
            if ((double)v752 * 0.5 >= (double)v1085)
            {
              sub_20EEFC704(v1020, (unsigned int *)&v1057, (unsigned int *)&v1085, (uint64_t)&v1094);
              goto LABEL_1069;
            }
            if (v1085 <= v752)
              break;
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 225, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)&unk_210267FB5, 0, (void (*)(void **))sub_21023DDB0);
            v757 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v757 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v758 = qword_254A6DE40;
              for (m = qword_254A6DE48; v758 != m; v758 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v758)(*(_QWORD *)(v758 + 8), "T{0} <= k && k <= n", 19, &unk_210267FB5, 0);
            }
            v760 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v760 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "T{0} <= k && k <= n", 19, &unk_210267FB5, 0);
            v686 = v996;
            v752 = v1057;
            v1096 = 0;
            v1094 = 0;
            v1095 = 0;
            if ((_DWORD)v1057)
              break;
            v762 = 0;
            v763 = 0;
            v770 = v1085;
            v771 = 0;
            if ((_DWORD)v1085)
            {
LABEL_1027:
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Shuffle.h", 119, (uint64_t)"0 <= k && k <= n", 16, (uint64_t)&unk_210267FB5, 0, (void (*)(void **))sub_21023DDB0);
              v772 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v772 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v773 = qword_254A6DE40;
                for (n = qword_254A6DE48; v773 != n; v773 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v773)(*(_QWORD *)(v773 + 8), "0 <= k && k <= n", 16, &unk_210267FB5, 0);
              }
              v775 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v775 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v686 = v996;
              if (!byte_254A6DE68)
                abort();
              qword_254A6DE58(unk_254A6DE60, "0 <= k && k <= n", 16, &unk_210267FB5, 0);
            }
LABEL_1035:
            if ((_DWORD)v770)
            {
              v776 = 0;
              v777 = (char *)(v771 - 1);
              do
              {
                v1065.i64[0] = (uint64_t)(a1 + 6);
                v779 = (_QWORD *)operator new();
                *v779 = &off_24C9E9710;
                v779[1] = 0;
                v779[2] = 0;
                v779[3] = v1020;
                v1065.i64[1] = (uint64_t)v779;
                v1066 = (int64_t)v776;
                v780 = (uint64_t)v777;
                v1067 = v777;
                v781 = (char *)(v777 - v776);
                if (v777 != v776)
                {
                  v782 = (unint64_t)(v781 + 1);
                  if (v781 != (char *)-1)
                  {
                    v783 = __clz(v782);
                    v784 = 63;
                    if (((v782 << v783) & 0x7FFFFFFFFFFFFFFFLL) != 0)
                      v784 = 64;
                    v785 = v784 - v783;
                    *(_QWORD *)v1058 = a1 + 6;
                    *(_QWORD *)&v1058[8] = v785;
                    v786 = (v784 - v783) >> 5;
                    if ((v785 & 0x1F) != 0)
                      v787 = v786 + 1;
                    else
                      v787 = v786;
                    v788 = v785 / v787;
                    *(_QWORD *)&v1058[24] = v787;
                    *(_QWORD *)&v1058[16] = v788;
                    v789 = (-1 << (v785 / v787)) & 0x100000000;
                    if (v788 >= 0x40)
                      v789 = 0;
                    *(_QWORD *)&v1058[40] = v789;
                    if ((v789 ^ 0x100000000) <= v789 / v787)
                    {
LABEL_1050:
                      *(_QWORD *)&v1058[32] = v787 - v785 % v787;
                      if (v788 >= 0x3F)
                        goto LABEL_1058;
                      *(_QWORD *)&v1058[48] = 0x80000000uLL >> v788 << (v788 + 1);
                      v790 = 0xFFFFFFFF >> -(char)v788;
                      if (!v788)
                        v790 = 0;
                      LODWORD(v1059) = v790;
                      if (v788 >= 0x1F)
                        v791 = -1;
                      else
                        v791 = 0xFFFFFFFF >> ~(_BYTE)v788;
                    }
                    else
                    {
                      v788 = v785 / ++v787;
                      *(_QWORD *)&v1058[24] = v787;
                      *(_QWORD *)&v1058[16] = v788;
                      if (v788 <= 0x3F)
                      {
                        *(_QWORD *)&v1058[40] = (-1 << (v785 / v787)) & 0x100000000;
                        goto LABEL_1050;
                      }
                      *(_QWORD *)&v1058[40] = 0;
                      *(_QWORD *)&v1058[32] = v787 - (v785 % v787);
                      LODWORD(v788) = 64;
LABEL_1058:
                      *(_QWORD *)&v1058[48] = 0;
                      v792 = -(int)v788;
                      v791 = -1;
                      LODWORD(v1059) = 0xFFFFFFFF >> v792;
                    }
                    DWORD1(v1059) = v791;
                    do
                      v793 = sub_20EDB7E28((uint64_t *)v1058);
                    while (v793 >= v782);
                    v780 = v1066 + v793;
                    goto LABEL_1062;
                  }
                  *(_QWORD *)v1058 = a1 + 6;
                  *(_OWORD *)&v1058[8] = xmmword_210378080;
                  *(int64x2_t *)&v1058[24] = vdupq_n_s64(2uLL);
                  *(_OWORD *)&v1058[40] = xmmword_210313020;
                  *(_QWORD *)&v1059 = -1;
                  v780 = sub_20EDB7E28((uint64_t *)v1058);
                }
LABEL_1062:
                v794 = (std::__shared_weak_count *)v1065.i64[1];
                if (v1065.i64[1])
                {
                  v795 = (unint64_t *)(v1065.i64[1] + 8);
                  do
                    v796 = __ldaxr(v795);
                  while (__stlxr(v796 - 1, v795));
                  if (!v796)
                  {
                    ((void (*)(std::__shared_weak_count *))v794->__on_zero_shared)(v794);
                    std::__shared_weak_count::__release_weak(v794);
                  }
                }
                v778 = v762->i32[(_QWORD)v776];
                v762->i32[(_QWORD)v776] = v762->i32[v780];
                v762->i32[v780] = v778;
                ++v776;
              }
              while (v776 != (char *)v770);
            }
            v749 = v997;
            if ((int32x4_t *)((char *)v762 + 4 * v1085) != v763)
              v1095 = (float *)&v762->i32[v1085];
LABEL_1069:
            v797 = (float *)v1094;
            v798 = *(unsigned int *)v1094;
            *(_QWORD *)&v1058[32] = v1015;
            v799 = v1023;
            *(_QWORD *)&v1058[40] = v1023;
            *(_QWORD *)&v1058[8] = v748;
            *(_QWORD *)v1058 = &v686[v798];
            *(_QWORD *)&v1058[16] = v1029;
            *(_QWORD *)&v1058[24] = *(_QWORD *)v1058;
            v800 = **(_QWORD **)v1058;
            if (v1029 <= **(_QWORD **)v1058)
            {
              v801 = (unint64_t *)&v1058[16];
              goto LABEL_1302;
            }
            v801 = (unint64_t *)&v1058[16];
            if (v1023 <= v800)
            {
              v801 = (unint64_t *)&v1058[40];
              goto LABEL_1302;
            }
            v802 = *((unsigned int *)v1094 + 1);
            *(_QWORD *)&v1058[32] = v1015;
            *(_QWORD *)&v1058[40] = v1023;
            *(_QWORD *)&v1058[8] = v748;
            *(_QWORD *)v1058 = &v686[v802];
            *(_QWORD *)&v1058[16] = v1029;
            *(_QWORD *)&v1058[24] = *(_QWORD *)v1058;
            v803 = **(_QWORD **)v1058;
            if (v1029 <= **(_QWORD **)v1058)
              goto LABEL_1301;
            if (v1023 <= v803)
            {
              v801 = (unint64_t *)&v1058[40];
LABEL_1301:
              v800 = **(_QWORD **)v1058;
LABEL_1302:
              sub_21023D290(v801, v800);
            }
            v804 = v748 + 12 * v800;
            v805 = v748 + 12 * v803;
            v684.i64[0] = *(_QWORD *)v804;
            v684.i32[2] = *(_DWORD *)(v804 + 8);
            v677.i64[0] = *(_QWORD *)v805;
            v677.i32[2] = *(_DWORD *)(v805 + 8);
            v806 = (int8x16_t)vsubq_f32((float32x4_t)v677, v684);
            v807 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v806.i8, 1);
            v808 = (float32x2_t)vextq_s8(v806, v806, 8uLL).u64[0];
            v809 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v806.i8, *(float32x2_t *)v806.i8), v807, *(float32x2_t *)v806.i8, 1), v808, v808);
            if (v809.f32[0] == 0.0)
              goto LABEL_997;
            v810 = v809.f32[0];
            if (v809.f32[0] <= 0.0)
              v810 = 0.0 - v809.f32[0];
            if (v810 <= 0.00000001)
              goto LABEL_997;
            v992 = v677;
            *(_QWORD *)v1058 = v686;
            *(_QWORD *)&v1058[8] = v748;
            *(_QWORD *)&v1058[16] = v1029;
            *(_QWORD *)&v1058[24] = v686;
            *(_QWORD *)&v1058[32] = v1015;
            *(_QWORD *)&v1058[40] = v1023;
            *(_QWORD *)&v1058[48] = 0;
            if (v686 != v749)
            {
              v811 = 0;
              v812 = 0.0;
              v813 = *((float *)&v1085 + 1);
              v814 = v987;
              v815 = 1;
              v1005 = v806;
              v1008 = v684;
              v999 = v809;
              v1002 = v808;
              while (1)
              {
                v816 = *(v814 - 1);
                if (v1029 <= v816)
                  break;
                v817 = *(v814 - 1);
                if (v1023 <= v817)
                {
                  v966 = (unint64_t *)&v1058[40];
                  v816 = *(v814 - 1);
                  goto LABEL_1292;
                }
                v818 = v748 + 12 * v816;
                v675.i64[0] = *(_QWORD *)v818;
                v675.i32[2] = *(_DWORD *)(v818 + 8);
                v819 = (int8x16_t)vsubq_f32((float32x4_t)v675, v684);
                v820 = (int8x16_t)vsubq_f32(vmlaq_n_f32(v684, (float32x4_t)v806, vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v806.i8, *(float32x2_t *)v819.i8), v807, *(float32x2_t *)v819.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v819, v819, 8uLL), v808), v809).f32[0]), (float32x4_t)v675);
                v823 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v820.i8, 1);
                v821 = (float32x2_t)vextq_s8(v820, v820, 8uLL).u64[0];
                v822 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v820.i8, *(float32x2_t *)v820.i8), v823, *(float32x2_t *)v820.i8, 1), v821, v821).f32[0];
                v823.i32[0] = 0;
                if (v822 != 0.0 && v822 > 0.000001)
                {
                  v825 = v1015 + 36 * v817;
                  v823.f32[0] = 1.0 / sqrtf(v822);
                  v826 = (int8x16_t)vmulq_n_f32((float32x4_t)v820, v823.f32[0]);
                  v680.i32[0] = *(_DWORD *)(v825 + 8);
                  v681.i32[0] = *(_DWORD *)(v825 + 20);
                  v682.i32[0] = *(_DWORD *)(v825 + 32);
                  v827 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v825, *(float *)v826.i32), *(float32x2_t *)(v825 + 12), *(float32x2_t *)v826.i8, 1), *(float32x2_t *)(v825 + 24), (float32x4_t)v826, 2);
                  v828 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v680.f32, *(float32x2_t *)v826.i8), v681, *(float32x2_t *)v826.i8, 1);
                  v681 = (float32x2_t)vextq_s8(v826, v826, 8uLL).u64[0];
                  *(float32x2_t *)v680.f32 = vmla_f32(v828, v681, *(float32x2_t *)v682.f32);
                  if (v822 <= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v826.i8, v827), vmul_lane_f32(v823, *(float32x2_t *)v820.i8, 1), v827, 1), *(float32x2_t *)v680.f32, vmul_f32(v821, v823)).f32[0])v823.f32[0] = 0.0;
                  else
                    v823.f32[0] = 1.0;
                }
                if (v823.f32[0] <= v813)
                {
                  ++v811;
                  *(float *)v675.i32 = expf(-v823.f32[0]);
                  v809 = v999;
                  v808 = v1002;
                  v806 = v1005;
                  v684 = v1008;
                  v812 = v812 + *(float *)v675.i32;
                }
                *(_QWORD *)v1058 = v814;
                *(_QWORD *)&v1058[24] = v814;
                *(_QWORD *)&v1058[48] = v815++;
                _ZF = v814++ == v749;
                if (_ZF)
                  goto LABEL_1093;
              }
              v966 = (unint64_t *)&v1058[16];
LABEL_1292:
              sub_21023D290(v966, v816);
            }
            v811 = 0;
            v812 = 0.0;
LABEL_1093:
            if (v812 > v751)
            {
              *(_DWORD *)&object[8] = v684.i32[2];
              *(_QWORD *)object = v684.i64[0];
              *(_DWORD *)&object[20] = v992.i32[2];
              *(_QWORD *)&object[12] = v992.i64[0];
              v686 = v996;
              v799 = v1023;
              if (v991)
              {
                *(float *)&v1100 = v812;
                if (!BYTE8(v1086))
                  goto LABEL_1102;
LABEL_1101:
                if (v811 >= (unint64_t)v1086)
                  goto LABEL_1132;
              }
              else
              {
                object[24] = 1;
                *(float *)&v1100 = v812;
                if (BYTE8(v1086))
                  goto LABEL_1101;
              }
LABEL_1102:
              if (!BYTE4(v1087) || v812 < *(float *)&v1087)
              {
                v991 = 1;
                v751 = v812;
                v989 = v811;
                goto LABEL_997;
              }
LABEL_1132:
              v1095 = v797;
              operator delete(v797);
              memset(v1058, 0, 24);
              if (!v811)
              {
LABEL_1133:
                v835 = 0;
                v834 = 0;
                goto LABEL_1134;
              }
LABEL_1130:
              if (v811 >> 61)
                sub_20E867F44();
              v834 = (char *)operator new(8 * v811);
              v835 = &v834[8 * v811];
LABEL_1134:
              *(_QWORD *)&object[32] = v834;
              *(_QWORD *)&v1099 = v834;
              *((_QWORD *)&v1099 + 1) = v835;
              *(_QWORD *)v1058 = v686;
              *(_QWORD *)&v1058[8] = v748;
              *(_QWORD *)&v1058[16] = v1029;
              *(_QWORD *)&v1058[24] = v686;
              *(_QWORD *)&v1058[32] = v1015;
              *(_QWORD *)&v1058[40] = v799;
              *(_QWORD *)&v1058[48] = 0;
              if (v686 != v749)
              {
                v836 = 0;
                v837 = v834;
                v838 = v686;
                while (1)
                {
                  v839 = *v838;
                  if (*(_QWORD *)&v1058[16] <= *v838)
                  {
                    v967 = (unint64_t *)&v1058[16];
LABEL_1305:
                    sub_21023D290(v967, v839);
                  }
                  if (*(_QWORD *)&v1058[40] <= *v686)
                  {
                    v967 = (unint64_t *)&v1058[40];
                    v839 = *v686;
                    goto LABEL_1305;
                  }
                  v840 = *(_QWORD *)&v1058[8] + 12 * v839;
                  v676.i64[0] = *(_QWORD *)&object[12];
                  v676.i32[2] = *(_DWORD *)&object[20];
                  v677.i64[0] = *(_QWORD *)v840;
                  v677.i32[2] = *(_DWORD *)(v840 + 8);
                  v841 = (int8x16_t)vsubq_f32((float32x4_t)v676, *(float32x4_t *)object);
                  v842 = (int8x16_t)vsubq_f32((float32x4_t)v677, *(float32x4_t *)object);
                  v843 = (float32x2_t)vextq_s8(v841, v841, 8uLL).u64[0];
                  v844 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v842.i8, 1);
                  v845 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v841.i8, *(float32x2_t *)v842.i8), v844, *(float32x2_t *)v841.i8, 1);
                  v679 = vextq_s8(v842, v842, 8uLL);
                  v676 = (int8x16_t)vsubq_f32(vmlaq_n_f32(*(float32x4_t *)object, (float32x4_t)v841, vdiv_f32(vmla_f32(v845, *(float32x2_t *)v679.i8, v843), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v841.i8, *(float32x2_t *)v841.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v841.i8, 1), *(float32x2_t *)v841.i8, 1), v843, v843)).f32[0]), (float32x4_t)v677);
                  v847 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v676.i8, 1);
                  v677 = (int32x4_t)vextq_s8(v676, v676, 8uLL);
                  v846 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v676.i8, *(float32x2_t *)v676.i8), v847, *(float32x2_t *)v676.i8, 1), *(float32x2_t *)v677.i8, *(float32x2_t *)v677.i8).f32[0];
                  v847.i32[0] = 0;
                  if (v846 != 0.0 && v846 > 0.000001)
                  {
                    v849 = *(_QWORD *)&v1058[32] + 36 * *v686;
                    v847.f32[0] = 1.0 / sqrtf(v846);
                    v679 = (int8x16_t)vmulq_n_f32((float32x4_t)v676, v847.f32[0]);
                    v843.i32[0] = *(_DWORD *)(v849 + 8);
                    v844.i32[0] = *(_DWORD *)(v849 + 20);
                    v682.i32[0] = *(_DWORD *)(v849 + 32);
                    v850 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v849, *(float *)v679.i32), *(float32x2_t *)(v849 + 12), *(float32x2_t *)v679.i8, 1), *(float32x2_t *)(v849 + 24), (float32x4_t)v679, 2);
                    *(float32x2_t *)v676.i8 = vmul_lane_f32(v847, *(float32x2_t *)v676.i8, 1);
                    if (v846 <= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v679.i8, v850), *(float32x2_t *)v676.i8, v850, 1), vmla_f32(vmla_lane_f32(vmul_f32(v843, *(float32x2_t *)v679.i8), v844, *(float32x2_t *)v679.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v679, v679, 8uLL), *(float32x2_t *)v682.f32), vmul_f32(*(float32x2_t *)v677.i8, v847)).f32[0])v847.f32[0] = 0.0;
                    else
                      v847.f32[0] = 1.0;
                  }
                  if (v847.f32[0] <= *((float *)&v1085 + 1))
                    break;
LABEL_1165:
                  ++v838;
                  ++v686;
                  *(_QWORD *)v1058 = v838;
                  *(_QWORD *)&v1058[24] = v686;
                  *(_QWORD *)&v1058[48] = ++v836;
                  if (v838 == v997 && v686 == v997)
                    goto LABEL_1179;
                }
                if (v837 < v835)
                {
                  v851 = v686;
                  *(_QWORD *)v837 = v836;
                  v852 = (uint64_t)(v837 + 8);
LABEL_1164:
                  *(_QWORD *)&v1099 = v852;
                  v836 = *(_QWORD *)&v1058[48];
                  v837 = (char *)v852;
                  v686 = v851;
                  goto LABEL_1165;
                }
                v853 = (v837 - v834) >> 3;
                v854 = v853 + 1;
                if ((unint64_t)(v853 + 1) >> 61)
                  sub_20E867F44();
                if ((v835 - v834) >> 2 > v854)
                  v854 = (v835 - v834) >> 2;
                if ((unint64_t)(v835 - v834) >= 0x7FFFFFFFFFFFFFF8)
                  v855 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v855 = v854;
                if (v855)
                {
                  if (v855 >> 61)
                    sub_20E877A38();
                  v856 = operator new(8 * v855);
                  v851 = v686;
                  v857 = &v856[8 * v853];
                  *(_QWORD *)v857 = v836;
                  v852 = (uint64_t)(v857 + 8);
                  v858 = v837 - v834;
                  if (v837 != v834)
                  {
LABEL_1158:
                    v859 = v858 - 8;
                    if (v859 < 0x168
                      || (v862 = (v837 - 8 - v834) & 0xFFFFFFFFFFFFFFF8,
                          &v856[v837 - v834 - 8 - v862] > &v856[v837 - v834 - 8])
                      || &v837[-v862 - 8] > v837 - 8
                      || (unint64_t)(v834 - v856) < 0x20)
                    {
                      v860 = v837;
                    }
                    else
                    {
                      v863 = (v859 >> 3) + 1;
                      v864 = 8 * (v863 & 0x3FFFFFFFFFFFFFFCLL);
                      v860 = &v837[-v864];
                      v857 -= v864;
                      v865 = (int8x16_t *)&v856[8 * v853 - 16];
                      v866 = (int8x16_t *)(v837 - 16);
                      v867 = v863 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v676 = v866[-1];
                        v868 = *v866;
                        v865[-1] = v676;
                        *v865 = v868;
                        v865 -= 2;
                        v866 -= 2;
                        v867 -= 4;
                      }
                      while (v867);
                      if (v863 == (v863 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_1161:
                        v835 = &v856[8 * v855];
                        *(_QWORD *)&object[32] = v857;
                        *((_QWORD *)&v1099 + 1) = v835;
                        if (v834)
                          goto LABEL_1162;
                        goto LABEL_1163;
                      }
                    }
                    do
                    {
                      v861 = *((_QWORD *)v860 - 1);
                      v860 -= 8;
                      *((_QWORD *)v857 - 1) = v861;
                      v857 -= 8;
                    }
                    while (v860 != v834);
                    goto LABEL_1161;
                  }
                }
                else
                {
                  v851 = v686;
                  v856 = 0;
                  v857 = (char *)(8 * v853);
                  *(_QWORD *)(8 * v853) = v836;
                  v852 = 8 * v853 + 8;
                  v858 = v837 - v834;
                  if (v837 != v834)
                    goto LABEL_1158;
                }
                v835 = &v856[8 * v855];
                *(_QWORD *)&object[32] = v857;
                *((_QWORD *)&v1099 + 1) = v835;
                if (v834)
                {
LABEL_1162:
                  operator delete(v834);
                  v838 = *(unint64_t **)v1058;
                  v851 = *(unint64_t **)&v1058[24];
                }
LABEL_1163:
                v834 = v857;
                goto LABEL_1164;
              }
              v837 = v834;
LABEL_1179:
              if (v834)
                operator delete(v834);
              if ((v837 - v834) >> 3 >= v985)
                goto LABEL_1233;
LABEL_1182:
              if (*v993 == 1)
              {
                v869 = v1047;
                if (v1047 == v1048)
                {
                  v676.i32[0] = 0;
                  v870 = 0uLL;
                }
                else
                {
                  v870 = 0uLL;
                  v676.i32[0] = 0;
                  do
                  {
                    v872 = *v869++;
                    v871 = v872;
                    v873 = sqrtf(*(float *)(v990[24] + 36 * v872 + 32));
                    v874 = 1.0 / v873;
                    if (v873 <= 0.0)
                      v874 = 100.0;
                    v875 = v995[21] + 12 * v871;
                    v679.i64[0] = *(_QWORD *)v875;
                    v876 = fminf(v874, 100.0);
                    v679.i32[2] = *(_DWORD *)(v875 + 8);
                    v870 = vaddq_f32(v870, vmulq_n_f32((float32x4_t)v679, v876));
                    *(float *)v676.i32 = *(float *)v676.i32 + v876;
                  }
                  while (v869 != v1048);
                }
                *(float32x2_t *)v903.i8 = *v978;
                v903.i32[2] = v978[1].i32[0];
                v904 = vdivq_f32(v870, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v676.i8, 0));
              }
              else
              {
                v877 = v1047;
                v878 = v1048;
                if (v1047 == v1048)
                  goto LABEL_1233;
                v879 = v995[21];
                v880 = 0xAAAAAAAAAAAAAAABLL * ((v995[22] - v879) >> 2);
                *(_QWORD *)v1058 = v1047;
                *(_QWORD *)&v1058[8] = v879;
                *(_QWORD *)&v1058[16] = v880;
                v881 = 0uLL;
                v882 = v1047;
                do
                {
                  v883 = *v882;
                  if (v880 <= *v882)
LABEL_1296:
                    sub_21023D290((unint64_t *)&v1058[16], v883);
                  v884 = v879 + 12 * v883;
                  v676.i64[0] = *(_QWORD *)v884;
                  v676.i32[2] = *(_DWORD *)(v884 + 8);
                  v881 = vaddq_f32(v881, (float32x4_t)v676);
                  *(_QWORD *)v1058 = ++v882;
                }
                while (v882 != v1048);
                v885 = 0;
                *(float *)v676.i32 = (float)(unint64_t)-(v1047 - v1048);
                v890 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v676.i8, 0);
                v1030 = v890;
                v886 = vdivq_f32(v881, v890);
                v881.i32[0] = 0;
                v887 = 0;
                v888 = 0;
                *(_QWORD *)v1058 = v1047;
                *(_QWORD *)&v1058[8] = v879;
                *(_QWORD *)&v1058[16] = v880;
                v889 = v1047;
                v890.i32[0] = 0;
                v891.i32[0] = 0;
                v892 = 0;
                v678.i32[0] = 0;
                v893 = 0;
                v682.i32[0] = 0;
                do
                {
                  v883 = *v889;
                  if (v880 <= *v889)
                    goto LABEL_1296;
                  v894 = v879 + 12 * v883;
                  v683.i64[0] = *(_QWORD *)v894;
                  v683.i32[2] = *(_DWORD *)(v894 + 8);
                  v895 = (int8x16_t)vsubq_f32(v683, v886);
                  *(float32x2_t *)v896.f32 = vmul_n_f32(*(float32x2_t *)v895.i8, *(float *)v895.i32);
                  v897 = (float32x4_t)vextq_s8(v895, v895, 8uLL);
                  *(float32x2_t *)&v896.u32[2] = vmul_f32(*(float32x2_t *)v897.f32, *(float32x2_t *)v895.i8);
                  *(float32x2_t *)v898.f32 = vmul_lane_f32(*(float32x2_t *)v895.i8, *(float32x2_t *)v895.i8, 1);
                  *(float32x2_t *)&v898.u32[2] = vmul_lane_f32(*(float32x2_t *)v897.f32, *(float32x2_t *)v895.i8, 1);
                  *(float32x2_t *)v897.f32 = vmul_laneq_f32(*(float32x2_t *)v895.i8, (float32x4_t)v895, 2);
                  v683 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32((float32x4_t)v895, (float32x4_t)v895), 2);
                  v897.i32[2] = v683.i32[0];
                  v881.i32[1] = v887;
                  v881.i32[2] = v888;
                  v890.i32[1] = v891.i32[0];
                  v890.i32[2] = v892;
                  v678.i32[1] = v893;
                  v678.i32[2] = v682.i32[0];
                  v881 = vaddq_f32(v881, v896);
                  v890 = vaddq_f32(v890, v898);
                  v678 = vaddq_f32(v678, v897);
                  v892 = v890.i32[2];
                  v891.i32[0] = v890.i32[1];
                  v888 = v881.i32[2];
                  v887 = v881.i32[1];
                  v682.i32[0] = v678.i32[2];
                  v893 = v678.i32[1];
                  ++v885;
                  *(_QWORD *)v1058 = ++v889;
                }
                while (v889 != v1048);
                v886.f32[0] = (float)v885;
                v899 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v886.f32, 0);
                v891.i32[1] = v890.i32[2];
                v891.i64[1] = v678.i64[0];
                v881.i64[1] = __PAIR64__(v890.u32[0], v881.u32[2]);
                v1062[12] = 0;
                *(_QWORD *)&v1062[4] = 0x300000003;
                *(float32x4_t *)object = vdivq_f32(v881, v899);
                *(float32x4_t *)&object[16] = vdivq_f32(v891, v899);
                *(_DWORD *)&object[32] = vdivq_f32(v682, v886).u32[0];
                sub_20EEFE4C4((uint64_t)v1058);
                if (v1062[12])
                {
                  v902 = v1060;
                  v974 = *(unsigned __int16 *)((char *)&v1060 + 1) | (HIBYTE(v1060) << 16);
                  v971 = v1061;
                  v900.i32[0] = *(_DWORD *)&v1058[44];
                  v970 = (int8x16_t)v900;
                  v900.i32[0] = v1059;
                  v969 = *(float32x2_t *)v900.f32;
                  v900.i32[0] = HIDWORD(v1059);
                  v973 = (int32x4_t)v900;
                }
                else
                {
                  v902 = 0;
                }
                *(_QWORD *)v1058 = v877;
                *(_QWORD *)&v1058[8] = v879;
                v924 = 0uLL;
                *(_QWORD *)&v1058[16] = v880;
                do
                {
                  v883 = *v877;
                  if (v880 <= *v877)
                    goto LABEL_1296;
                  v925 = v879 + 12 * v883;
                  v900.i64[0] = *(_QWORD *)v925;
                  v900.i32[2] = *(_DWORD *)(v925 + 8);
                  v924 = vaddq_f32(v924, v900);
                  *(_QWORD *)v1058 = ++v877;
                }
                while (v877 != v878);
                if (!v1062[12])
                  goto LABEL_1233;
                v926 = v902 | (v974 << 8);
                if (*(float *)&v926 == 0.0)
                  goto LABEL_1233;
                v668 = v994;
                if (fabsf(*(float *)&v926) <= 0.000001 || (float)(v971 / *(float *)&v926) < 0.01)
                  goto LABEL_1234;
                v927 = atomic_load((unsigned __int8 *)&qword_254A516F8);
                if ((v927 & 1) == 0)
                {
                  v1024 = v924;
                  v933 = __cxa_guard_acquire(&qword_254A516F8);
                  v924 = v1024;
                  v668 = v994;
                  if (v933)
                  {
                    dword_254A516F0 = 1065098332;
                    __cxa_guard_release(&qword_254A516F8);
                    v924 = v1024;
                    v668 = v994;
                  }
                }
                v928 = atomic_load((unsigned __int8 *)&qword_254A51708);
                if ((v928 & 1) == 0)
                {
                  v1025 = v924;
                  v934 = __cxa_guard_acquire(&qword_254A51708);
                  v924 = v1025;
                  v668 = v994;
                  if (v934)
                  {
                    dword_254A51700 = 1043452119;
                    __cxa_guard_release(&qword_254A51708);
                    v924 = v1025;
                    v668 = v994;
                  }
                }
                v929 = fabsf(*(float *)v973.i32);
                if (v929 >= *(float *)&dword_254A516F0 || v929 > *(float *)&dword_254A51700)
                {
LABEL_1234:
                  v686 = v1047;
                  if (!v1047)
                    goto LABEL_1119;
                  goto LABEL_1118;
                }
                v930.i64[1] = v970.i64[1];
                v931.i64[0] = v970.i64[0];
                v931.u64[1] = (unint64_t)v969;
                v904 = vdivq_f32(v924, v1030);
                v932 = (int8x16_t)vuzp1q_s32(v931, v973);
                *(float32x2_t *)v901.f32 = *v978;
                v924.i32[0] = v978[1].i32[0];
                *(float32x2_t *)v930.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v970.i8, *v978), v969, *v978, 1), *(float32x2_t *)v924.f32, *(float32x2_t *)v973.i8);
                v901.i32[0] = 0;
                v903 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v901, v930), 0), (int8x16_t)vnegq_f32((float32x4_t)v932), v932);
              }
              *(_DWORD *)&v1058[8] = v904.i32[2];
              *(_QWORD *)v1058 = v904.i64[0];
              *(_DWORD *)&v1058[20] = v903.i32[2];
              *(_QWORD *)&v1058[12] = v903.i64[0];
              v905 = *v993;
              v1058[24] = *v993;
              v906 = v1049;
              v907 = v1050;
              *(_QWORD *)&v1058[32] = v1049;
              *(_QWORD *)&v1058[40] = v1050;
              v908 = v1051;
              *(_QWORD *)&v1058[48] = v1051;
              v1049 = 0;
              v1050 = 0;
              v1051 = 0;
              v909 = v1056;
              if ((unint64_t)v1056 >= *((_QWORD *)&v1056 + 1))
              {
                v912 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v1056 - (_QWORD)v1055) >> 3);
                v913 = v912 + 1;
                if ((unint64_t)(v912 + 1) > 0x492492492492492)
                  sub_20E867F44();
                if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*((_QWORD *)&v1056 + 1) - (_QWORD)v1055) >> 3) > v913)
                  v913 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*((_QWORD *)&v1056 + 1) - (_QWORD)v1055) >> 3);
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v1056 + 1) - (_QWORD)v1055) >> 3)) >= 0x249249249249249)
                  v914 = 0x492492492492492;
                else
                  v914 = v913;
                *(_QWORD *)&object[32] = (char *)&v1056 + 8;
                if (v914 > 0x492492492492492)
                  sub_20E877A38();
                v915 = (char *)operator new(56 * v914);
                v916 = &v915[56 * v912];
                *(_QWORD *)v916 = *(_QWORD *)v1058;
                *(_QWORD *)object = v915;
                *(_QWORD *)&object[8] = v916;
                *((_DWORD *)v916 + 2) = *(_DWORD *)&v1058[8];
                *(_QWORD *)(v916 + 12) = *v976;
                *((_DWORD *)v916 + 5) = *(_DWORD *)(((unint64_t)v1058 | 0xC) + 8);
                v916[24] = v905;
                *((_QWORD *)v916 + 4) = v906;
                *((_QWORD *)v916 + 5) = v907;
                *((_QWORD *)v916 + 6) = v908;
                memset(&v1058[32], 0, 24);
                *(_QWORD *)&object[24] = &v915[56 * v914];
                *(_QWORD *)&object[16] = v916 + 56;
                sub_20EF13690((uint64_t *)&v1055, object);
                v917 = v1056;
                sub_20EF137E8((uint64_t)object);
                v918 = *(_QWORD *)&v1058[32];
                *(_QWORD *)&v1056 = v917;
                if (*(_QWORD *)&v1058[32])
                {
                  v919 = *(_QWORD *)&v1058[40];
                  v920 = *(void **)&v1058[32];
                  if (*(_QWORD *)&v1058[40] != *(_QWORD *)&v1058[32])
                  {
                    do
                    {
                      if (*(_BYTE *)(v919 - 8))
                      {
                        v921 = *(_QWORD **)(v919 - 40);
                        if (v921)
                        {
                          do
                          {
                            v922 = (_QWORD *)*v921;
                            operator delete(v921);
                            v921 = v922;
                          }
                          while (v922);
                        }
                        v923 = *(void **)(v919 - 56);
                        *(_QWORD *)(v919 - 56) = 0;
                        if (v923)
                          operator delete(v923);
                      }
                      v919 -= 80;
                    }
                    while (v919 != v918);
                    v920 = *(void **)&v1058[32];
                  }
                  *(_QWORD *)&v1058[40] = v918;
                  operator delete(v920);
                }
              }
              else
              {
                v910 = *(_QWORD *)v1058;
                *(_DWORD *)(v1056 + 8) = *(_DWORD *)&v1058[8];
                *(_QWORD *)v909 = v910;
                v911 = *v976;
                *(_DWORD *)(v909 + 20) = *(_DWORD *)(((unint64_t)v1058 | 0xC) + 8);
                *(_QWORD *)(v909 + 12) = v911;
                *(_BYTE *)(v909 + 24) = v1058[24];
                *(_QWORD *)(v909 + 40) = 0;
                *(_QWORD *)(v909 + 48) = 0;
                *(_QWORD *)(v909 + 32) = 0;
                *(_OWORD *)(v909 + 32) = *(_OWORD *)&v1058[32];
                *(_QWORD *)(v909 + 48) = *(_QWORD *)&v1058[48];
                *(_QWORD *)&v1056 = v909 + 56;
              }
LABEL_1233:
              v668 = v994;
              goto LABEL_1234;
            }
            v686 = v996;
            v799 = v1023;
LABEL_997:
            v1095 = v797;
            operator delete(v797);
            if (++v1011 == 100)
            {
              v811 = v989;
              if (v991)
              {
                memset(v1058, 0, 24);
                if (!v989)
                  goto LABEL_1133;
                goto LABEL_1130;
              }
              goto LABEL_1182;
            }
          }
          v761 = 4 * v752;
          v762 = (int32x4_t *)operator new(v761);
          v1094 = v762;
          v1096 = &v762->i8[v761];
          bzero(v762, v761);
          v763 = (int32x4_t *)((char *)v762 + v761);
          v1095 = (float *)&v762->i32[(unint64_t)v761 / 4];
          if ((unint64_t)(v761 - 4) < 0x1C)
          {
            LODWORD(v764) = 0;
            v765 = v762;
            goto LABEL_1025;
          }
          v766 = ((unint64_t)(v761 - 4) >> 2) + 1;
          v764 = v766 & 0x7FFFFFFFFFFFFFF8;
          v765 = (int32x4_t *)((char *)v762 + 4 * (v766 & 0x7FFFFFFFFFFFFFF8));
          v675 = (int32x4_t)xmmword_210365350;
          v767 = v762 + 1;
          v768 = v766 & 0x7FFFFFFFFFFFFFF8;
          v677.i64[0] = 0x400000004;
          v677.i64[1] = 0x400000004;
          v769.i64[0] = 0x800000008;
          v769.i64[1] = 0x800000008;
          do
          {
            v767[-1] = v675;
            *v767 = vaddq_s32(v675, v677);
            v675 = vaddq_s32(v675, v769);
            v767 += 2;
            v768 -= 8;
          }
          while (v768);
          if (v766 != v764)
          {
            do
            {
LABEL_1025:
              v765->i32[0] = v764;
              v765 = (int32x4_t *)((char *)v765 + 4);
              LODWORD(v764) = v764 + 1;
            }
            while (v765 != v763);
          }
          v770 = v1085;
          v771 = v761 >> 2;
          if (v771 < v1085)
            goto LABEL_1027;
          goto LABEL_1035;
        }
        break;
      }
      while (2)
      {
        v687 = *v669;
        v688 = *v1018;
        v689 = *v1018 + 80 * *v669;
        if (v673 < (_OWORD *)v1051)
        {
          v690 = *(_OWORD *)v689;
          *((_QWORD *)v673 + 2) = *(_QWORD *)(v689 + 16);
          *v673 = v690;
          *((_BYTE *)v673 + 24) = 0;
          *((_BYTE *)v673 + 72) = 0;
          if (*(_BYTE *)(v688 + 80 * v687 + 72))
          {
            v691 = v688 + 80 * v687;
            *(_OWORD *)((char *)v673 + 24) = 0u;
            *(_OWORD *)((char *)v673 + 40) = 0u;
            *((_DWORD *)v673 + 14) = *(_DWORD *)(v691 + 56);
            v692 = *(_QWORD *)(v691 + 32);
            if (v692 == 1)
            {
              v692 = 2;
              goto LABEL_910;
            }
            if ((v692 & (v692 - 1)) != 0)
            {
              v692 = std::__next_prime(*(_QWORD *)(v691 + 32));
              v723 = (int8x8_t)v673[2];
              v724 = v692 >= *(_QWORD *)&v723;
              if (v692 > *(_QWORD *)&v723)
                goto LABEL_910;
            }
            else
            {
              v723 = 0;
              v724 = 1;
              if (v692)
                goto LABEL_910;
            }
            if (!v724)
            {
              v726 = vcvtps_u32_f32((float)*((unint64_t *)v673 + 6) / *((float *)v673 + 14));
              if (*(_QWORD *)&v723 < 3uLL
                || (v727 = (uint8x8_t)vcnt_s8(v723), v727.i16[0] = vaddlv_u8(v727), v727.u32[0] > 1uLL))
              {
                v726 = std::__next_prime(v726);
              }
              else
              {
                v728 = 1 << -(char)__clz(v726 - 1);
                if (v726 >= 2)
                  v726 = v728;
              }
              if (v692 <= v726)
                v692 = v726;
              if (v692 < *(_QWORD *)&v723)
LABEL_910:
                sub_20E8D2B3C((uint64_t)v673 + 24, v692);
            }
            for (ii = *(int **)(v691 + 40); ii; ii = *(int **)ii)
              sub_20EEBFAB0((uint64_t)v673 + 24, ii + 4, (_OWORD *)ii + 1);
            *((_QWORD *)v673 + 8) = *(_QWORD *)(v688 + 80 * v687 + 64);
            *((_BYTE *)v673 + 72) = 1;
          }
          v673 += 5;
LABEL_905:
          v1050 = v673;
          if (++v669 == v674)
            goto LABEL_899;
          continue;
        }
        break;
      }
      v694 = v1049;
      v695 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v673 - (_BYTE *)v1049) >> 4);
      v696 = v695 + 1;
      if (v695 + 1 > 0x333333333333333)
        sub_20E867F44();
      if (0x999999999999999ALL * ((v1051 - (_BYTE *)v1049) >> 4) > v696)
        v696 = 0x999999999999999ALL * ((v1051 - (_BYTE *)v1049) >> 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((v1051 - (_BYTE *)v1049) >> 4) >= 0x199999999999999)
        v697 = 0x333333333333333;
      else
        v697 = v696;
      *(_QWORD *)&v1058[32] = &v1051;
      if (v697)
      {
        if (v697 > 0x333333333333333)
          sub_20E877A38();
        v698 = operator new(80 * v697);
      }
      else
      {
        v698 = 0;
      }
      v699 = (char *)&v698[10 * v695];
      *(_QWORD *)v1058 = v698;
      *(_QWORD *)&v1058[8] = v699;
      *(_QWORD *)&v1058[16] = v699;
      *(_QWORD *)&v1058[24] = &v698[10 * v697];
      v700 = *(_OWORD *)v689;
      *((_QWORD *)v699 + 2) = *(_QWORD *)(v689 + 16);
      v699[24] = 0;
      v701 = (uint64_t)(v699 + 24);
      *(_OWORD *)v699 = v700;
      v699[72] = 0;
      v702 = v699 + 72;
      if (*(_BYTE *)(v688 + 80 * v687 + 72))
      {
        v703 = v688 + 80 * v687;
        *(_OWORD *)v701 = 0u;
        *(_OWORD *)(v699 + 40) = 0u;
        *((_DWORD *)v699 + 14) = *(_DWORD *)(v703 + 56);
        v704 = *(_QWORD *)(v703 + 32);
        if (v704 == 1)
        {
          v704 = 2;
          goto LABEL_927;
        }
        if ((v704 & (v704 - 1)) != 0)
        {
          v704 = std::__next_prime(*(_QWORD *)(v703 + 32));
          v1028 = *(int8x8_t *)(v701 + 8);
          v725 = v704 >= *(_QWORD *)&v1028;
          if (v704 > *(_QWORD *)&v1028)
            goto LABEL_927;
        }
        else
        {
          v1028 = 0;
          v725 = 1;
          if (v704)
            goto LABEL_927;
        }
        if (!v725)
        {
          v729 = vcvtps_u32_f32((float)*(unint64_t *)(v701 + 24) / *(float *)(v701 + 32));
          if (*(_QWORD *)&v1028 < 3uLL
            || (v730 = (uint8x8_t)vcnt_s8(v1028), v730.i16[0] = vaddlv_u8(v730), v730.u32[0] > 1uLL))
          {
            v729 = std::__next_prime(v729);
          }
          else
          {
            v731 = 1 << -(char)__clz(v729 - 1);
            if (v729 >= 2)
              v729 = v731;
          }
          if (v704 <= v729)
            v704 = v729;
          if (v704 < *(_QWORD *)&v1028)
LABEL_927:
            sub_20E8D2B3C(v701, v704);
        }
        for (jj = *(int **)(v703 + 40); jj; jj = *(int **)jj)
          sub_20EEBFAB0(v701, jj + 4, (_OWORD *)jj + 1);
        v698[10 * v695 + 8] = *(_QWORD *)(v688 + 80 * v687 + 64);
        *v702 = 1;
        v673 = v1050;
        v694 = v1049;
        v699 = *(char **)&v1058[8];
        v706 = *(_QWORD *)&v1058[16] + 80;
        *(_QWORD *)&v1058[16] += 80;
        if (v1050 != v1049)
        {
LABEL_931:
          v707 = 0;
          do
          {
            v709 = &v699[v707 * 16];
            v710 = &v673[v707];
            v711 = v673[v707 - 5];
            *((_QWORD *)v709 - 8) = *(_QWORD *)&v673[v707 - 4];
            *((_OWORD *)v709 - 5) = v711;
            *(v709 - 56) = 0;
            *(v709 - 8) = 0;
            if (BYTE8(v673[v707 - 1]))
            {
              v712 = *((_QWORD *)v710 - 7);
              *((_QWORD *)v710 - 7) = 0;
              *((_QWORD *)v709 - 7) = v712;
              *((_QWORD *)v709 - 6) = *((_QWORD *)v710 - 6);
              *((_QWORD *)v710 - 6) = 0;
              v715 = *((_QWORD *)v710 - 5);
              v713 = (char *)v710 - 40;
              v714 = v715;
              *((_QWORD *)v709 - 5) = v715;
              v716 = *((_QWORD *)v713 + 1);
              *((_QWORD *)v709 - 4) = v716;
              *((_DWORD *)v709 - 6) = *((_DWORD *)v713 + 4);
              if (v716)
              {
                v708 = *(_QWORD *)(v714 + 8);
                v717 = *((_QWORD *)v709 - 6);
                if ((v717 & (v717 - 1)) != 0)
                {
                  if (v708 >= v717)
                    v708 %= v717;
                }
                else
                {
                  v708 &= v717 - 1;
                }
                *(_QWORD *)(v712 + 8 * v708) = v709 - 40;
                *(_QWORD *)v713 = 0;
                *((_QWORD *)v713 + 1) = 0;
              }
              *(_QWORD *)&v699[v707 * 16 - 16] = *(_QWORD *)&v673[v707 - 1];
              *(v709 - 8) = 1;
            }
            v707 -= 5;
          }
          while (&v673[v707] != v694);
          v718 = v1049;
          v694 = v1050;
          v699 += v707 * 16;
          v673 = *(_OWORD **)&v1058[16];
LABEL_944:
          v1049 = v699;
          v1050 = v673;
          v719 = v1051;
          v1051 = *(char **)&v1058[24];
          *(_QWORD *)&v1058[24] = v719;
          *(_QWORD *)&v1058[8] = v718;
          *(_QWORD *)v1058 = v718;
          if (v694 == v718)
          {
            if (!v694)
              goto LABEL_905;
          }
          else
          {
            do
            {
              *(_QWORD *)&v1058[16] = v694 - 5;
              if (*((_BYTE *)v694 - 8))
              {
                v720 = (_QWORD *)*((_QWORD *)v694 - 5);
                if (v720)
                {
                  do
                  {
                    v721 = (_QWORD *)*v720;
                    operator delete(v720);
                    v720 = v721;
                  }
                  while (v721);
                }
                v722 = (void *)*((_QWORD *)v694 - 7);
                *((_QWORD *)v694 - 7) = 0;
                if (v722)
                  operator delete(v722);
              }
              v694 = *(_OWORD **)&v1058[16];
            }
            while (*(_OWORD **)&v1058[16] != v718);
            v694 = *(_OWORD **)v1058;
            if (!*(_QWORD *)v1058)
              goto LABEL_905;
          }
          operator delete(v694);
          goto LABEL_905;
        }
      }
      else
      {
        v706 = (uint64_t)(v699 + 80);
        *(_QWORD *)&v1058[16] = v699 + 80;
        if (v673 != v694)
          goto LABEL_931;
      }
      v673 = (_OWORD *)v706;
      v718 = v694;
      goto LABEL_944;
    }
    if (v633 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v634 = 24 * v633;
    v635 = (char *)operator new(24 * v633);
    v636 = 24 * ((v634 - 24) / 0x18uLL) + 24;
    bzero(v635, v636);
    v1035 = v635;
    v1044 = &v635[v636];
    v624 = v1053;
    v625 = v1052;
    if (v1053 == v1052)
      goto LABEL_891;
LABEL_866:
    v637 = 0;
    v638 = 0;
    while (2)
    {
      v640 = &v1035[24 * v625[v637]];
      v641 = (uint64_t *)(v640 + 8);
      v642 = (char *)*((_QWORD *)v640 + 1);
      v643 = *((_QWORD *)v640 + 2);
      if ((unint64_t)v642 < v643)
      {
        *(_WORD *)v642 = v638;
        v639 = (uint64_t)(v642 + 2);
      }
      else
      {
        v644 = *(char **)v640;
        v645 = (uint64_t)&v642[-*(_QWORD *)v640];
        if (v645 <= -3)
          sub_20E867F44();
        v646 = v645 >> 1;
        v647 = v643 - (_QWORD)v644;
        if (v647 <= (v645 >> 1) + 1)
          v648 = v646 + 1;
        else
          v648 = v647;
        if (v647 >= 0x7FFFFFFFFFFFFFFELL)
          v649 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v649 = v648;
        if (v649)
        {
          if (v649 < 0)
            sub_20E877A38();
          v650 = v624;
          v651 = v625;
          v652 = v649;
          v653 = operator new(2 * v649);
          v625 = v651;
          v649 = v652;
          v624 = v650;
          v641 = (uint64_t *)(v640 + 8);
          v646 = v645 >> 1;
          v654 = (unsigned __int16 *)&v653[2 * (v645 >> 1)];
          *v654 = v638;
          v639 = (uint64_t)(v654 + 1);
          v655 = v642 - v644;
          if (v642 != v644)
          {
LABEL_880:
            v656 = v655 - 2;
            if (v656 < 0x1E)
              goto LABEL_1357;
            if ((unint64_t)(v642 - &v653[v645 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
              goto LABEL_1357;
            v657 = (v656 >> 1) + 1;
            v658 = 2 * (v657 & 0xFFFFFFFFFFFFFFF0);
            v659 = &v642[-v658];
            v654 = (unsigned __int16 *)((char *)v654 - v658);
            v660 = &v653[2 * v646 - 16];
            v661 = v642 - 16;
            v662 = v657 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v663 = *(_OWORD *)v661;
              *(v660 - 1) = *((_OWORD *)v661 - 1);
              *v660 = v663;
              v660 -= 2;
              v661 -= 32;
              v662 -= 16;
            }
            while (v662);
            v642 = v659;
            if (v657 != (v657 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_1357:
              do
              {
                v664 = *((_WORD *)v642 - 1);
                v642 -= 2;
                *--v654 = v664;
              }
              while (v642 != v644);
            }
          }
        }
        else
        {
          v653 = 0;
          v654 = (unsigned __int16 *)(2 * v646);
          *(_WORD *)(2 * v646) = v638;
          v639 = 2 * v646 + 2;
          v655 = v642 - v644;
          if (v642 != v644)
            goto LABEL_880;
        }
        *(_QWORD *)v640 = v654;
        *v641 = v639;
        *((_QWORD *)v640 + 2) = &v653[2 * v649];
        if (v644)
        {
          operator delete(v644);
          v624 = v1053;
          v625 = v1052;
        }
      }
      *v641 = v639;
      v637 = ++v638;
      if (v638 >= (unint64_t)((v624 - (char *)v625) >> 3))
        goto LABEL_891;
      continue;
    }
  }
LABEL_1250:
  *v968 = 0;
  v968[1] = 0;
  v968[2] = 0;
  v939 = (_BYTE *)v995[21];
  v938 = (_BYTE *)v995[22];
  v940 = v938 - v939;
  if (v938 == v939)
  {
    v941 = 0;
    v944 = 0;
    v942 = v968;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v940 >> 2) >= 0x1555555555555556)
      sub_20E867F44();
    v941 = (char *)operator new(v940);
    v942 = v968;
    *v968 = v941;
    v968[1] = v941;
    v968[2] = &v941[4 * (v940 >> 2)];
    v943 = 12 * ((v940 - 12) / 0xCuLL) + 12;
    memcpy(v941, v939, v943);
    v944 = &v941[v943];
    v968[1] = &v941[v943];
  }
  v942[3] = 0;
  v942[4] = 0;
  v942[5] = 0;
  v946 = (_BYTE *)v990[24];
  v945 = (_BYTE *)v990[25];
  v947 = v945 - v946;
  if (v945 != v946)
  {
    if (0x8E38E38E38E38E39 * (v947 >> 2) >= 0x71C71C71C71C71DLL)
      sub_20E867F44();
    v948 = (char *)operator new(v947);
    v942 = v968;
    v968[3] = v948;
    v968[4] = v948;
    v968[5] = &v948[4 * (v947 >> 2)];
    memcpy(v948, v946, 36 * ((v947 - 36) / 0x24uLL) + 36);
    v968[4] = &v948[36 * ((v947 - 36) / 0x24uLL) + 36];
  }
  v949 = (uint64_t)v1055;
  v942[6] = v1055;
  v950 = v1056;
  *(_OWORD *)(v942 + 7) = v1056;
  v1056 = 0uLL;
  v1055 = 0;
  v951 = __p;
  v942[9] = __p;
  v952 = v1075;
  *((_OWORD *)v942 + 5) = v1075;
  __p = 0;
  v1075 = 0uLL;
  v1084 = 0x6DB6DB6DB6DB6DB7 * ((v950 - v949) >> 3);
  v1083 = 0xAAAAAAAAAAAAAAABLL * ((v944 - v941) >> 2);
  v1082 = 0xAAAAAAAAAAAAAAABLL * ((v952 - (uint64_t)v951) >> 3);
  *(_QWORD *)v1058 = &v1055;
  sub_20EF138D0((void ***)v1058);
  v953 = (uint64_t *)v1092;
  if (v1092)
  {
    v954 = (uint64_t *)v1093;
    v955 = v1092;
    if ((void *)v1093 != v1092)
    {
      do
      {
        v954 -= 7;
        sub_20EF134C4(v954);
      }
      while (v954 != v953);
      v955 = v1092;
    }
    *(_QWORD *)&v1093 = v953;
    operator delete(v955);
  }
  if (__p)
  {
    *(_QWORD *)&v1075 = __p;
    operator delete(__p);
  }
  if (v1038)
  {
    if (v1046 != v1038)
    {
      v956 = v1046;
      do
      {
        v958 = (void *)*((_QWORD *)v956 - 3);
        v956 -= 24;
        v957 = v958;
        if (v958)
        {
          *((_QWORD *)v1046 - 2) = v957;
          operator delete(v957);
        }
        v1046 = v956;
      }
      while (v956 != v1038);
    }
    operator delete(v1038);
  }
  *(_QWORD *)v1058 = &v1076;
  sub_20EF11CB8((void ***)v1058);
  if (v998)
    operator delete(v998);
  v959 = (_QWORD *)v1080;
  if ((_QWORD)v1080)
  {
    do
    {
      v964 = (_QWORD *)*v959;
      v965 = (void *)v959[3];
      if (v965)
      {
        v959[4] = v965;
        operator delete(v965);
      }
      operator delete(v959);
      v959 = v964;
    }
    while (v964);
  }
  v960 = (void *)v1079;
  *(_QWORD *)&v1079 = 0;
  if (v960)
    operator delete(v960);
  v7 = v1107;
  if (!v1107)
    sub_20E86D37C();
  v72 = *(uint64_t (***)())v1107;
LABEL_1278:
  ((void (*)(_QWORD *, uint64_t))v72[6])(v7, v8);
  result = v1107;
  if (v1107 == v1106)
  {
    v963 = 4;
    result = v1106;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 8 * v963))(result, v961);
  }
  else if (v1107)
  {
    v963 = 5;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 8 * v963))(result, v961);
  }
  return result;
}

void sub_20EF10C68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60090);
  _Unwind_Resume(a1);
}

void sub_20EF10C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char *a68;
  char *a71;
  uint64_t v71;
  void *v73;
  char *v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  char *v81;
  void *v82;
  void *v83;

  if (LOBYTE(STACK[0x448]) && SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x3A0]);
  sub_20EF11790((uint64_t)&STACK[0x260]);
  sub_20EF117F0((uint64_t)&STACK[0x2E0]);
  v73 = (void *)STACK[0x330];
  if (STACK[0x330])
  {
    STACK[0x338] = (unint64_t)v73;
    operator delete(v73);
    v74 = a68;
    if (!a68)
      goto LABEL_10;
  }
  else
  {
    v74 = a68;
    if (!a68)
      goto LABEL_10;
  }
  if (a71 != v74)
  {
    v81 = a71;
    do
    {
      v83 = (void *)*((_QWORD *)v81 - 3);
      v81 -= 24;
      v82 = v83;
      if (v83)
      {
        *((_QWORD *)a71 - 2) = v82;
        operator delete(v82);
      }
      a71 = v81;
    }
    while (v81 != a68);
  }
  operator delete(a68);
LABEL_10:
  STACK[0x330] = (unint64_t)&STACK[0x348];
  sub_20EF11CB8((void ***)&STACK[0x330]);
  if (a46)
    operator delete(a46);
  v75 = (_QWORD *)STACK[0x370];
  if (STACK[0x370])
  {
    do
    {
      v78 = (_QWORD *)*v75;
      v79 = (void *)v75[3];
      if (v79)
      {
        v75[4] = v79;
        operator delete(v79);
      }
      operator delete(v75);
      v75 = v78;
    }
    while (v78);
  }
  v76 = (void *)STACK[0x360];
  STACK[0x360] = 0;
  if (v76)
    operator delete(v76);
  v77 = *(_QWORD *)(v71 - 176);
  if (!v77)
    sub_20E86D37C();
  (*(void (**)(uint64_t))(*(_QWORD *)v77 + 48))(v77);
  v80 = *(_QWORD *)(v71 - 176);
  if (v80 == v71 - 200)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v71 - 200) + 32))(v71 - 200);
    _Unwind_Resume(a1);
  }
  if (v80)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 40))(v80);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EF1169C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A600A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A600A0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.acv.trace");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60098);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A600A0);
  }
  *a1 = qword_254A60098;
}

void sub_20EF11738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A600A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A600A0);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF11790(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 112))
  {
    v2 = *(void **)(a1 + 88);
    if (v2)
    {
      *(_QWORD *)(a1 + 96) = v2;
      operator delete(v2);
    }
    v3 = *(_QWORD **)(a1 + 56);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v5)
      operator delete(v5);
  }
  return a1;
}

uint64_t sub_20EF117F0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
      operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EF11840(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 != v2)
    {
      do
      {
        if (*(_BYTE *)(v3 - 8))
        {
          v5 = *(_QWORD **)(v3 - 40);
          if (v5)
          {
            do
            {
              v6 = (_QWORD *)*v5;
              operator delete(v5);
              v5 = v6;
            }
            while (v6);
          }
          v7 = *(void **)(v3 - 56);
          *(_QWORD *)(v3 - 56) = 0;
          if (v7)
            operator delete(v7);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20EF118D0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 8))
        {
          v5 = (_QWORD *)*((_QWORD *)v3 - 5);
          if (v5)
          {
            do
            {
              v6 = (_QWORD *)*v5;
              operator delete(v5);
              v5 = v6;
            }
            while (v6);
          }
          v7 = (void *)*((_QWORD *)v3 - 7);
          *((_QWORD *)v3 - 7) = 0;
          if (v7)
            operator delete(v7);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t **sub_20EF11960(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 7;
        sub_20EF134C4(v3);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20EF119C0(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v5) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20EF11CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAFA1EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF11CB8(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (void **)v1[1];
      do
      {
        v9 = (char *)*(v6 - 3);
        v6 -= 3;
        v8 = v9;
        if (v9)
        {
          v10 = (char *)*(v4 - 2);
          v7 = v8;
          if (v10 != v8)
          {
            do
            {
              if (*(v10 - 8))
              {
                v11 = (_QWORD *)*((_QWORD *)v10 - 5);
                if (v11)
                {
                  do
                  {
                    v12 = (_QWORD *)*v11;
                    operator delete(v11);
                    v11 = v12;
                  }
                  while (v12);
                }
                v13 = (void *)*((_QWORD *)v10 - 7);
                *((_QWORD *)v10 - 7) = 0;
                if (v13)
                  operator delete(v13);
              }
              v10 -= 80;
            }
            while (v10 != v8);
            v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20EF11DA8(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[7];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)a1[5];
  a1[5] = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void sub_20EF11E00(float *a1, float *a2, uint64_t a3, char a4)
{
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  float *i;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  float *v29;
  unint64_t v30;
  int v31;
  float v32;
  float *v34;
  unint64_t v35;
  float *v37;
  int v38;
  BOOL v39;
  float *v41;
  int v42;
  float v43;
  int v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  int v51;
  BOOL v52;
  BOOL v54;
  float *v55;
  float v56;
  float v57;
  float *v59;
  int v60;
  BOOL v61;
  __int128 *v62;
  __int128 *v63;
  float *v64;
  int v65;
  int v66;
  BOOL v67;
  __int128 v68;
  int v69;
  int v70;
  __int128 v71;
  int v72;
  float *v73;
  BOOL v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float *v79;
  int v80;
  float v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  int v86;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  float *v92;
  int v93;
  BOOL v94;
  float *v95;
  int v96;
  float v97;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  uint64_t v106;
  uint64_t v108;
  float *v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  BOOL v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  float *v118;
  int v119;
  float v120;
  BOOL v121;
  uint64_t v122;
  unint64_t v123;
  float *v124;
  float *v126;
  int v127;
  float v128;
  BOOL v129;
  uint64_t v130;
  float *j;
  int v132;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;

BOOL sub_20EF1275C(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float *v6;
  float *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float *v18;
  int v19;
  BOOL v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  float *v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = a2 - 4;
      v19 = *((_DWORD *)a2 - 4);
      if (v19 < *(_DWORD *)a1 || (v19 == *(_DWORD *)a1 ? (v20 = *(a2 - 1) < a1[3]) : (v20 = 0), v20))
      {
        v21 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)v18 = v21;
      }
      return result;
    case 3:
      sub_20EF09180(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      v22 = (__int128 *)(a1 + 4);
      v23 = (__int128 *)(a1 + 8);
      sub_20EF09180(a1, a1 + 4, a1 + 8);
      v24 = a2 - 4;
      v25 = *((_DWORD *)a2 - 4);
      v26 = *((_DWORD *)a1 + 8);
      if (v25 < v26 || (result = 1, v25 == v26) && *(a2 - 1) < a1[11])
      {
        v27 = *v23;
        *v23 = *(_OWORD *)v24;
        *(_OWORD *)v24 = v27;
        v28 = *((_DWORD *)a1 + 8);
        v29 = *((_DWORD *)a1 + 4);
        if (v28 < v29 || (result = 1, v28 == v29) && a1[11] < a1[7])
        {
          v30 = *v22;
          *v22 = *v23;
          *v23 = v30;
          v31 = *((_DWORD *)a1 + 4);
          if (v31 < *(_DWORD *)a1 || (result = 1, v31 == *(_DWORD *)a1) && a1[7] < a1[3])
          {
            v32 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v22;
            *v22 = v32;
            return 1;
          }
        }
      }
      return result;
    case 5:
      sub_20EF08FD4((uint64_t)a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
      return 1;
    default:
      v6 = a1 + 8;
      sub_20EF09180(a1, a1 + 4, a1 + 8);
      v7 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)v7;
    v12 = v7[3];
    if (*(_DWORD *)v7 < *(_DWORD *)v6 || (v11 == *(_DWORD *)v6 ? (v13 = v12 < v6[3]) : (v13 = 0), v13))
    {
      v14 = *(_QWORD *)(v7 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v6;
      v10 = (uint64_t)a1;
      if (v6 != a1)
      {
        v15 = v8;
        while (1)
        {
          v16 = *(_DWORD *)((char *)a1 + v15 + 16);
          if (v11 >= v16 && (v11 != v16 || v12 >= *(float *)((char *)a1 + v15 + 28)))
            break;
          *(_OWORD *)((char *)a1 + v15 + 32) = *(_OWORD *)((char *)a1 + v15 + 16);
          v15 -= 16;
          if (v15 == -32)
          {
            v10 = (uint64_t)a1;
            goto LABEL_6;
          }
        }
        v10 = (uint64_t)a1 + v15 + 32;
      }
LABEL_6:
      *(_DWORD *)v10 = v11;
      *(_QWORD *)(v10 + 4) = v14;
      *(float *)(v10 + 12) = v12;
      if (++v9 == 8)
        return v7 + 4 == a2;
    }
    v6 = v7;
    v8 += 16;
    v7 += 4;
    if (v7 == a2)
      return 1;
  }
}

_QWORD *sub_20EF12A48(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
    goto LABEL_50;
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v7)
    goto LABEL_34;
  if (prime < v7)
  {
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (prime <= v19)
      prime = v19;
    if (prime < v7)
LABEL_34:
      sub_20E8D2B3C(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v22 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      v3 = v6 % v7;
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
      if (!v24)
        goto LABEL_53;
LABEL_51:
      *v10 = *v24;
LABEL_59:
      *v24 = v10;
      goto LABEL_60;
    }
    v3 = v6;
LABEL_50:
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v24)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = v22 & v6;
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v22 & v6));
  if (v24)
    goto LABEL_51;
LABEL_53:
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20EF12D24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EF12D38(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t *v9;
  _OWORD *v10;
  uint64_t *v11;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      v8[3] = a2[3];
      v9 = (uint64_t *)*v8;
      sub_20EF12E68(a1, (int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v11 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = operator new(0x20uLL);
      *(_QWORD *)v10 = 0;
      v10[1] = *((_OWORD *)a2 + 1);
      *((_QWORD *)v10 + 1) = *((int *)v10 + 4);
      sub_20EF12E68(a1, (int *)v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_20EF12E20(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20EF12E40(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EF12E54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int *sub_20EF12E68(_QWORD *a1, int *a2)
{
  unint64_t v4;
  int *v5;
  uint64_t *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;

  v5 = a2 + 4;
  v4 = a2[4];
  *((_QWORD *)v5 - 1) = v4;
  v6 = sub_20EC1D42C((uint64_t)a1, v4, v5);
  v7 = (int8x8_t)a1[1];
  v8 = *((_QWORD *)v5 - 1);
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  if (!v6)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_19;
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *(_QWORD *)a2 = *v6;
  *v6 = (uint64_t)a2;
  if (*(_QWORD *)a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
    if (v10 != v8)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return a2;
}

uint64_t sub_20EF12F8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    if (*(_BYTE *)(i - 8))
    {
      v4 = *(_QWORD **)(i - 40);
      if (v4)
      {
        do
        {
          v5 = (_QWORD *)*v4;
          operator delete(v4);
          v4 = v5;
        }
        while (v5);
      }
      v6 = *(void **)(i - 56);
      *(_QWORD *)(i - 56) = 0;
      if (v6)
        operator delete(v6);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EF13010(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    sub_20EF134C4((uint64_t *)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EF13060(uint64_t a1, _QWORD *a2)
{
  char **v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD *i;
  uint64_t v13;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = a1;
  v4 = (char **)(a1 + 24);
  *(_OWORD *)(a1 + 32) = 0u;
  if (a2[4] != a2[3])
  {
    v5 = 0;
    do
    {
      v7 = *(_QWORD *)(a1 + 24);
      v6 = *(_QWORD *)(a1 + 32);
      if (v6 - v7 == -32)
      {
        if (v6 != v7)
        {
          v8 = *(_QWORD *)(a1 + 32);
          do
          {
            v10 = *(void **)(v8 - 32);
            v8 -= 32;
            v9 = v10;
            if (v10)
            {
              *(_QWORD *)(v6 - 24) = v9;
              operator delete(v9);
            }
            v6 = v8;
          }
          while (v8 != v7);
        }
        *(_QWORD *)(a1 + 32) = v7;
      }
      else
      {
        sub_20EF13340(v4, 1uLL);
      }
      ++v5;
    }
    while (v5 < (uint64_t)(a2[4] - a2[3]) >> 5);
  }
  for (i = (_QWORD *)a2[1]; i != a2; i = (_QWORD *)i[1])
    sub_20EF150BC((uint64_t)&v13, i[2], i[3], (uint64_t **)a1);
  *(_QWORD *)(a1 + 48) = operator new();
  return a1;
}

void sub_20EF13178(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  void **v2;
  _QWORD *v3;
  char *v5;
  char *v6;
  void *v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v5 = (char *)*v2;
  if (*v2)
  {
    v6 = (char *)v1[4];
    v7 = *v2;
    if (v6 != v5)
    {
      v8 = (char *)v1[4];
      do
      {
        v10 = (void *)*((_QWORD *)v8 - 4);
        v8 -= 32;
        v9 = v10;
        if (v10)
        {
          *((_QWORD *)v6 - 3) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *v2;
    }
    v1[4] = (uint64_t)v5;
    operator delete(v7);
  }
  if (*v3)
  {
    v12 = *v1;
    v11 = (uint64_t *)v1[1];
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v12 + 8) = v13;
    v1[2] = 0;
    if (v11 != v1)
    {
      do
      {
        v14 = (uint64_t *)v11[1];
        operator delete(v11);
        v11 = v14;
      }
      while (v14 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EF1322C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      v5 = a1[4];
      do
      {
        v7 = *(void **)(v5 - 32);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 24) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  if (a1[2])
  {
    v9 = *a1;
    v8 = (uint64_t *)a1[1];
    v10 = *v8;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v9 + 8) = v10;
    a1[2] = 0;
    if (v8 != a1)
    {
      do
      {
        v11 = (uint64_t *)v8[1];
        operator delete(v8);
        v8 = v11;
      }
      while (v11 != a1);
    }
  }
  return a1;
}

uint64_t *sub_20EF132E0(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void sub_20EF13340(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      v11 = 32 * a2;
      v12 = &v5[32 * a2];
      do
      {
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
        v5 += 32;
        v11 -= 32;
      }
      while (v11);
      v5 = v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = (v5 - *a1) >> 5;
    if ((v6 + a2) >> 59)
      sub_20E867F44();
    v7 = v4 - *a1;
    v8 = v7 >> 4;
    if (v7 >> 4 <= v6 + a2)
      v8 = v6 + a2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
    {
      if (v9 >> 59)
        sub_20E877A38();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[32 * v6];
    v14 = 32 * a2;
    v15 = &v13[32 * a2];
    v16 = v13;
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v14 -= 32;
    }
    while (v14);
    v17 = &v10[32 * v9];
    v18 = *a1;
    if (v5 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
    }
    else
    {
      do
      {
        v19 = v13;
        *((_QWORD *)v13 - 3) = 0;
        *((_QWORD *)v13 - 2) = 0;
        v20 = *((_OWORD *)v5 - 2);
        v5 -= 32;
        *((_OWORD *)v13 - 2) = v20;
        v13 -= 32;
        *((_QWORD *)v19 - 2) = *((_QWORD *)v5 + 2);
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
      }
      while (v5 != v18);
      v5 = *a1;
      v21 = a1[1];
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
      if (v21 != v5)
      {
        v22 = v21;
        do
        {
          v24 = (void *)*((_QWORD *)v22 - 4);
          v22 -= 32;
          v23 = v24;
          if (v24)
          {
            *((_QWORD *)v21 - 3) = v23;
            operator delete(v23);
          }
          v21 = v22;
        }
        while (v22 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20EF134C4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = a1[6];
  if (v2)
    MEMORY[0x212BC6398](v2, 0xC400A2AC0F1);
  v3 = a1[3];
  if (v3)
  {
    v4 = a1[4];
    v5 = (void *)a1[3];
    if (v4 != v3)
    {
      v6 = a1[4];
      do
      {
        v8 = *(void **)(v6 - 32);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 24) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[3];
    }
    a1[4] = v3;
    operator delete(v5);
  }
  if (a1[2])
  {
    v10 = *a1;
    v9 = (uint64_t *)a1[1];
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    a1[2] = 0;
    if (v9 != a1)
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != a1);
    }
  }
}

uint64_t sub_20EF1358C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (a2)
  {
    if (a2 >> 59)
      sub_20E867F44();
    v3 = 4 * a2;
    v4 = operator new(32 * a2);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v4;
    v5 = &v4[v3];
    *(_QWORD *)(a1 + 40) = &v4[v3];
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v4 += 4;
      v3 -= 4;
    }
    while (v3 * 8);
    *(_QWORD *)(a1 + 32) = v5;
  }
  *(_QWORD *)(a1 + 48) = operator new();
  return a1;
}

void sub_20EF1361C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20EF1322C(v1);
  _Unwind_Resume(a1);
}

void sub_20EF13630(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = v1[3];
  if (v3)
  {
    v4 = v1[4];
    v5 = (void *)v1[3];
    if (v4 != v3)
    {
      v6 = v1[4];
      do
      {
        v8 = *(void **)(v6 - 32);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 24) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)v1[3];
    }
    v1[4] = v3;
    operator delete(v5);
  }
  sub_20EF132E0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EF13690(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = *(_QWORD *)(v4 + v7 - 56);
      *(_DWORD *)(v8 - 48) = *(_DWORD *)(v4 + v7 - 48);
      *(_QWORD *)(v8 - 56) = v9;
      v10 = *(_QWORD *)(v4 + v7 - 44);
      *(_DWORD *)(v8 - 36) = *(_DWORD *)(v4 + v7 - 36);
      *(_QWORD *)(v8 - 44) = v10;
      *(_BYTE *)(v8 - 32) = *(_BYTE *)(v4 + v7 - 32);
      result = sub_20EEBF6BC((_QWORD *)(v6 + v7 - 24), (uint64_t *)(v4 + v7 - 24));
      v7 -= 56;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v11 = *v3;
  *v3 = v6;
  a2[1] = v11;
  v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void sub_20EF13764(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  if (v3)
  {
    do
    {
      v6 = *(_QWORD *)(v2 + 32);
      if (v6)
      {
        v7 = *(_QWORD *)(v2 + 40);
        v5 = *(void **)(v2 + 32);
        if (v7 != v6)
        {
          do
          {
            if (*(_BYTE *)(v7 - 8))
            {
              v8 = *(_QWORD **)(v7 - 40);
              if (v8)
              {
                do
                {
                  v9 = (_QWORD *)*v8;
                  operator delete(v8);
                  v8 = v9;
                }
                while (v9);
              }
              v10 = *(void **)(v7 - 56);
              *(_QWORD *)(v7 - 56) = 0;
              if (v10)
                operator delete(v10);
            }
            v7 -= 80;
          }
          while (v7 != v6);
          v5 = *(void **)(v2 + 32);
        }
        *(_QWORD *)(v2 + 40) = v6;
        operator delete(v5);
      }
      v2 += 56;
    }
    while (v2 != v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF137E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      while (1)
      {
        v4 = i - 56;
        *(_QWORD *)(a1 + 16) = i - 56;
        v5 = *(_QWORD *)(i - 24);
        if (v5)
          break;
        i -= 56;
        if (v4 == v2)
          goto LABEL_15;
      }
      v6 = *(_QWORD *)(i - 16);
      v7 = *(void **)(i - 24);
      if (v6 != v5)
        break;
      *(_QWORD *)(i - 16) = v5;
      operator delete(v7);
      i = *(_QWORD *)(a1 + 16);
      if (i == v2)
        goto LABEL_15;
    }
    do
    {
      if (*(_BYTE *)(v6 - 8))
      {
        v8 = *(_QWORD **)(v6 - 40);
        if (v8)
        {
          do
          {
            v9 = (_QWORD *)*v8;
            operator delete(v8);
            v8 = v9;
          }
          while (v9);
        }
        v10 = *(void **)(v6 - 56);
        *(_QWORD *)(v6 - 56) = 0;
        if (v10)
          operator delete(v10);
      }
      v6 -= 80;
    }
    while (v6 != v5);
    v11 = *(void **)(i - 24);
    *(_QWORD *)(i - 16) = v5;
    operator delete(v11);
  }
LABEL_15:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20EF138D0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *((_QWORD *)v4 - 3);
        if (v7)
        {
          v8 = *((_QWORD *)v4 - 2);
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v8 != v7)
          {
            do
            {
              if (*(_BYTE *)(v8 - 8))
              {
                v9 = *(_QWORD **)(v8 - 40);
                if (v9)
                {
                  do
                  {
                    v10 = (_QWORD *)*v9;
                    operator delete(v9);
                    v9 = v10;
                  }
                  while (v10);
                }
                v11 = *(void **)(v8 - 56);
                *(_QWORD *)(v8 - 56) = 0;
                if (v11)
                  operator delete(v11);
              }
              v8 -= 80;
            }
            while (v8 != v7);
            v6 = (void *)*((_QWORD *)v4 - 3);
          }
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v6);
        }
        v4 -= 56;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20EF139BC(uint64_t a1, void **a2, const void *a3, char *a4, const void *a5, unint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, __int128 *a11, uint64_t a12)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float32x2_t *v20;
  char *v21;
  size_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  char *v28;
  char *v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  __int32 *v36;
  __int32 *v37;
  char *v38;
  uint64_t v39;
  int8x16_t v40;
  float32x2_t v41;
  unint64_t v42;
  double v43;
  float32x4_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  void *v70;
  _DWORD *v71;
  uint64_t v72;
  _DWORD *v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *i;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  void *v103;
  float32x4_t *v104;
  float32x4_t *v105;
  float32x4_t v106;
  float32x4_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  __int128 v126;
  unint64_t v127;
  unint64_t j;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  char *v139;
  char *v140;
  _BYTE *v141;
  __int128 v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  __int128 v148;
  BOOL v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  __int128 v154;
  char *v155;
  char *v156;
  char *v157;
  float32x2_t *v158;
  float32x2_t *v159;
  uint64_t v160;
  _DWORD *v161;
  _DWORD *v162;
  uint64_t v163;
  _DWORD *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  char *v170;
  uint64_t v171;
  void **v173;
  unint64_t v174;
  char *v175;
  _BYTE *v177;
  char *v178;
  uint64_t v179;
  int8x16_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  char *v184;
  char *v185;
  void **v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  void *__p;
  char *v194;
  char *v195;
  void *v196[9];
  void *v197;
  void *v198;
  uint64_t v199;
  __int16 v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  _QWORD **v204;
  _QWORD *v205;
  _QWORD v206[331];

  v16 = *a11;
  v17 = a11[1];
  v18 = a11[3];
  *(_OWORD *)(a1 + 32) = a11[2];
  *(_OWORD *)(a1 + 48) = v18;
  *(_OWORD *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v17;
  *(_QWORD *)(a1 + 64) = &off_24C9F15F0;
  v171 = a1 + 64;
  *(_QWORD *)(a1 + 72) = &off_24C9F1578;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a12 + 16);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a12 + 32);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a12 + 48);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a12 + 64);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a12 + 72);
  *(_QWORD *)(a1 + 140) = *(_QWORD *)(a12 + 76);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a12 + 88);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a12 + 96);
  __p = 0;
  v194 = 0;
  v195 = 0;
  if (a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((12 * (uint64_t)a2) >> 2) > 0x1555555555555555)
      sub_20E867F44();
    v20 = (float32x2_t *)operator new(12 * (_QWORD)a2);
    v21 = (char *)v20 + 4 * ((12 * (uint64_t)a2) >> 2);
    __p = v20;
    v195 = v21;
    v22 = 12 * ((12 * (uint64_t)a2 - 12) / 0xCuLL) + 12;
    memcpy(v20, a3, v22);
    v23 = (char *)v20 + v22;
    v194 = (char *)v20 + v22;
  }
  else
  {
    v21 = 0;
    v23 = 0;
    v20 = 0;
  }
  v173 = a2;
  v190 = 0;
  v191 = 0;
  v192 = 0;
  if (a4)
  {
    v24 = 0x8E38E38E38E38E39 * ((36 * (uint64_t)a4) >> 2);
    if (v24 > 0x71C71C71C71C71CLL)
      sub_20E867F44();
    v25 = 36 * (_QWORD)a4;
    a4 = (char *)operator new(36 * (_QWORD)a4);
    v26 = &a4[36 * v24];
    v190 = a4;
    v192 = v26;
    v27 = 36 * ((v25 - 36) / 0x24uLL) + 36;
    memcpy(a4, a5, v27);
    v28 = &a4[v27];
    v191 = &a4[v27];
    v186 = v173;
    v187 = 0;
    v188 = 0;
    v189 = 0;
    if (a6)
      goto LABEL_8;
  }
  else
  {
    v26 = 0;
    v28 = 0;
    v186 = v173;
    v187 = 0;
    v188 = 0;
    v189 = 0;
    if (a6)
    {
LABEL_8:
      if (a6 >> 60)
        sub_20E867F44();
      v29 = (char *)operator new(16 * a6);
      v170 = &v29[16 * a6];
      bzero(v29, 16 * a6);
      v32 = 0;
      v175 = v29;
      v174 = a6;
      while (1)
      {
        v33 = 0;
        v34 = 0;
        v35 = (_QWORD *)(a7 + 24 * v32);
        v36 = (__int32 *)v35 + 5;
        v31.i64[0] = *v35;
        v37 = (__int32 *)(v35 + 1);
        v39 = *(_QWORD *)((char *)v35 + 12);
        v38 = (char *)v35 + 12;
        v30.i64[0] = v39;
        v30.i32[2] = *v36;
        v178 = v194;
        v179 = v32;
        v177 = __p;
        v31.i32[2] = *v37;
        v40 = (int8x16_t)vsubq_f32(v30, v31);
        v41 = (float32x2_t)vextq_s8(v40, v40, 8uLL).u64[0];
        *(double *)v44.i64 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1), *(float32x2_t *)v40.i8, 1), v41, v41).f32[0]);
        v42 = (unint64_t)(*(double *)v44.i64 / 0.100000001);
        v43 = vabdd_f64(0.100000001, *(double *)v44.i64 / (double)v42);
        *(double *)v44.i64 = vabdd_f64(0.100000001, *(double *)v44.i64 / (double)(v42 + 1));
        if (v43 < *(double *)v44.i64)
          v45 = v42;
        else
          v45 = v42 + 1;
        v46 = v45 + 1;
        if (v45 == -1)
          goto LABEL_17;
        v180 = v40;
        v182 = v31;
        if (v46 > 0x1555555555555555)
          sub_20E867F44();
        v33 = (char *)operator new(12 * v46);
        v34 = &v33[12 * v46];
        v184 = v33;
        v47 = v33;
        v40 = v180;
        v31 = v182;
        if (v45)
        {
LABEL_17:
          v48 = 0;
          v44.f32[0] = (float)v45;
          v181 = vdivq_f32((float32x4_t)v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 0));
          v47 = v33;
          while (1)
          {
            while (v33 < v34)
            {
              *((_DWORD *)v33 + 2) = v31.i32[2];
              *(_QWORD *)v33 = v31.i64[0];
              v33 += 12;
              v44 = v181;
              v31 = vaddq_f32(v181, v31);
              if (++v48 == v45)
                goto LABEL_38;
            }
            v49 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v47) >> 2) + 1;
            if (v49 > 0x1555555555555555)
              sub_20E867F44();
            if (0x5555555555555556 * ((v34 - v47) >> 2) > v49)
              v49 = 0x5555555555555556 * ((v34 - v47) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v34 - v47) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v50 = 0x1555555555555555;
            else
              v50 = v49;
            v183 = v31;
            if (v50)
            {
              if (v50 > 0x1555555555555555)
                sub_20E877A38();
              v51 = (char *)operator new(12 * v50);
              v31 = v183;
              v52 = (uint64_t)&v51[4 * ((v33 - v47) >> 2)];
              *(_QWORD *)v52 = v183.i64[0];
              *(_DWORD *)(v52 + 8) = v183.i32[2];
              if (v33 == v47)
              {
LABEL_36:
                v56 = v33;
                v47 = (_BYTE *)v52;
                v34 = &v51[12 * v50];
                v33 = (char *)(v52 + 12);
                if (!v56)
                  goto LABEL_33;
                goto LABEL_32;
              }
            }
            else
            {
              v51 = 0;
              v52 = 4 * ((v33 - v47) >> 2);
              *(_QWORD *)v52 = v31.i64[0];
              *(_DWORD *)(v52 + 8) = v31.i32[2];
              if (v33 == v47)
                goto LABEL_36;
            }
            v53 = (_DWORD *)v52;
            do
            {
              v54 = *(_QWORD *)(v33 - 12);
              v33 -= 12;
              v55 = *((_DWORD *)v33 + 2);
              *(_QWORD *)(v53 - 3) = v54;
              v53 -= 3;
              v53[2] = v55;
            }
            while (v33 != v47);
            v56 = v47;
            v47 = v53;
            v34 = &v51[12 * v50];
            v33 = (char *)(v52 + 12);
            if (!v56)
              goto LABEL_33;
LABEL_32:
            operator delete(v56);
            v31 = v183;
LABEL_33:
            v44 = v181;
            v31 = vaddq_f32(v181, v31);
            if (++v48 == v45)
            {
LABEL_38:
              v184 = v47;
              break;
            }
          }
        }
        if (v33 >= v34)
        {
          v62 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v47) >> 2) + 1;
          if (v62 > 0x1555555555555555)
            sub_20E867F44();
          if (0x5555555555555556 * ((v34 - v47) >> 2) > v62)
            v62 = 0x5555555555555556 * ((v34 - v47) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v34 - v47) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v63 = 0x1555555555555555;
          else
            v63 = v62;
          if (v63)
          {
            if (v63 > 0x1555555555555555)
              sub_20E877A38();
            v64 = (char *)operator new(12 * v63);
          }
          else
          {
            v64 = 0;
          }
          v65 = &v64[4 * ((v33 - v47) >> 2)];
          v66 = *(_QWORD *)v38;
          *((_DWORD *)v65 + 2) = *((_DWORD *)v38 + 2);
          *(_QWORD *)v65 = v66;
          v58 = v65 + 12;
          if (v33 == v47)
          {
            v184 = &v64[4 * ((v33 - v47) >> 2)];
            v59 = v179;
LABEL_59:
            operator delete(v47);
            v185 = v58;
            v60 = v184;
            v61 = v58 - v184;
            if (v58 - v184 < 1)
              goto LABEL_96;
            goto LABEL_60;
          }
          v59 = v179;
          do
          {
            v67 = *(_QWORD *)(v33 - 12);
            v33 -= 12;
            v68 = *((_DWORD *)v33 + 2);
            *(_QWORD *)(v65 - 12) = v67;
            v65 -= 12;
            *((_DWORD *)v65 + 2) = v68;
          }
          while (v33 != v47);
          v184 = v65;
          if (v47)
            goto LABEL_59;
          v185 = v58;
          v60 = v65;
          v61 = v58 - v65;
          if (v58 - v184 < 1)
            goto LABEL_96;
        }
        else
        {
          v57 = *(_QWORD *)v38;
          *((_DWORD *)v33 + 2) = *((_DWORD *)v38 + 2);
          *(_QWORD *)v33 = v57;
          v58 = v33 + 12;
          v59 = v179;
          v185 = v33 + 12;
          v60 = v184;
          v61 = v33 + 12 - v184;
          if (v61 < 1)
            goto LABEL_96;
        }
LABEL_60:
        v69 = v61 / 12;
        v70 = __p;
        v71 = v194;
        v72 = (v194 - (_BYTE *)__p) / 12;
        v73 = (char *)__p + 12 * v72;
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v195 - v194) >> 2)) < v61 / 12)
        {
          if ((unint64_t)(v72 + v69) > 0x1555555555555555)
            sub_20E867F44();
          v74 = 0x5555555555555556 * ((v195 - (_BYTE *)__p) >> 2);
          if (v74 <= v72 + v69)
            v74 = v72 + v69;
          if (0xAAAAAAAAAAAAAAABLL * ((v195 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v75 = 0x1555555555555555;
          else
            v75 = v74;
          if (v75)
          {
            if (v75 > 0x1555555555555555)
              sub_20E877A38();
            v76 = (char *)operator new(12 * v75);
          }
          else
          {
            v76 = 0;
          }
          v93 = &v76[12 * v72];
          v94 = 12 * v69;
          v95 = &v93[12 * v69];
          v96 = v93;
          do
          {
            v97 = *(_QWORD *)v60;
            *((_DWORD *)v96 + 2) = *((_DWORD *)v60 + 2);
            *(_QWORD *)v96 = v97;
            v96 += 12;
            v60 += 12;
            v94 -= 12;
          }
          while (v94);
          v98 = __p;
          if (__p != v73)
          {
            v99 = v73;
            do
            {
              v100 = *(_QWORD *)(v99 - 3);
              v99 -= 3;
              v101 = v99[2];
              *(_QWORD *)(v93 - 12) = v100;
              v93 -= 12;
              *((_DWORD *)v93 + 2) = v101;
            }
            while (v99 != v98);
            v71 = v194;
          }
          for (; v73 != v71; v73 += 3)
          {
            v102 = *(_QWORD *)v73;
            *((_DWORD *)v95 + 2) = v73[2];
            *(_QWORD *)v95 = v102;
            v95 += 12;
          }
          v103 = __p;
          __p = v93;
          v194 = v95;
          v195 = &v76[12 * v75];
          if (v103)
            operator delete(v103);
          goto LABEL_96;
        }
        v77 = v194 - (char *)v73;
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v194 - (char *)v73) >> 2)) >= v69)
        {
          v78 = &v60[12 * v69];
          v79 = v194;
LABEL_77:
          v83 = (unint64_t)&v79[-12 * v69];
          for (i = v79; v83 < (unint64_t)v71; v83 += 12)
          {
            v85 = *(_QWORD *)v83;
            *((_DWORD *)i + 2) = *(_DWORD *)(v83 + 8);
            *(_QWORD *)i = v85;
            i += 12;
          }
          v86 = (char *)&v73[3 * v69];
          v194 = i;
          if (v79 != v86)
          {
            v87 = 0xAAAAAAAAAAAAAAABLL * ((v79 - v86) >> 2);
            v88 = v79 - 12;
            v89 = 12 * v87;
            v90 = (uint64_t)v70 + 12 * v72 - 12;
            do
            {
              v91 = *(_QWORD *)(v90 + v89);
              *((_DWORD *)v88 + 2) = *(_DWORD *)(v90 + v89 + 8);
              *(_QWORD *)v88 = v91;
              v88 -= 12;
              v89 -= 12;
            }
            while (v89);
          }
          for (; v60 != v78; v60 += 12)
          {
            v92 = *(_QWORD *)v60;
            v73[2] = *((_DWORD *)v60 + 2);
            *(_QWORD *)v73 = v92;
            v73 += 3;
          }
          goto LABEL_96;
        }
        v78 = &v60[4 * ((v194 - (char *)v73) >> 2)];
        v79 = v194;
        if (v78 != v58)
        {
          v80 = &v60[4 * ((v194 - (char *)v73) >> 2)];
          v81 = v194;
          do
          {
            v82 = *(_QWORD *)v80;
            *((_DWORD *)v81 + 2) = *((_DWORD *)v80 + 2);
            *(_QWORD *)v81 = v82;
            v81 += 12;
            v80 += 12;
            v79 += 12;
          }
          while (v80 != v58);
        }
        v194 = v79;
        if (v77 >= 1)
          goto LABEL_77;
LABEL_96:
        v104 = (float32x4_t *)(a10 + 72 * v59);
        v105 = (float32x4_t *)(a10 + 36 * ((2 * v59) | 1));
        v44.i32[0] = v104[2].i32[0];
        v31.i32[0] = v105[2].i32[0];
        v106 = vaddq_f32(v44, v31);
        v31.i64[0] = 0x3F0000003F000000;
        v31.i64[1] = 0x3F0000003F000000;
        v30 = vmulq_f32(v106, v31);
        v107 = vmulq_f32(vaddq_f32(*v104, *v105), v31);
        *(float32x4_t *)&v196[2] = vmulq_f32(vaddq_f32(v104[1], v105[1]), v31);
        *(float32x4_t *)v196 = v107;
        LODWORD(v196[4]) = v30.i32[0];
        v108 = v185;
        if (v185 == v184)
        {
          v119 = v185;
          v120 = v175;
        }
        else
        {
          v109 = v190;
          v110 = v191;
          v111 = v191 - v190;
          v112 = (v185 - v184) / 12;
          v113 = (v191 - v190) / 36;
          v114 = (unint64_t)&v190[36 * v113];
          if (0x8E38E38E38E38E39 * ((v192 - v191) >> 2) >= v112)
          {
            v121 = 0x8E38E38E38E38E39 * ((uint64_t)&v191[-v114] >> 2);
            if (v112 <= v121)
            {
              v123 = (unint64_t)v191;
              v121 = (v185 - v184) / 12;
LABEL_114:
              v127 = v123 - 36 * v112;
              for (j = v123; v127 < (unint64_t)v110; j += 36)
              {
                v129 = *(_OWORD *)v127;
                v130 = *(_OWORD *)(v127 + 16);
                *(_DWORD *)(j + 32) = *(_DWORD *)(v127 + 32);
                *(_OWORD *)j = v129;
                *(_OWORD *)(j + 16) = v130;
                v127 += 36;
              }
              v131 = v114 + 36 * v112;
              v191 = (char *)j;
              if (v123 != v131)
              {
                v132 = 0x8E38E38E38E38E39 * ((uint64_t)(v123 - v131) >> 2);
                v133 = v123 - 36;
                v134 = 36 * v132;
                v135 = (uint64_t)&v109[36 * v113 - 36];
                do
                {
                  v136 = *(_OWORD *)(v135 + v134);
                  v137 = *(_OWORD *)(v135 + v134 + 16);
                  *(_DWORD *)(v133 + 32) = *(_DWORD *)(v135 + v134 + 32);
                  *(_OWORD *)v133 = v136;
                  *(_OWORD *)(v133 + 16) = v137;
                  v133 -= 36;
                  v134 -= 36;
                }
                while (v134);
              }
              if (j <= (unint64_t)v196)
                v138 = 0;
              else
                v138 = (v185 - v184) / 12;
              if (v114 > (unint64_t)v196)
                v138 = 0;
              v139 = (char *)v196 + 36 * v138;
              v141 = v177;
              v140 = v178;
              do
              {
                v30 = *(float32x4_t *)v139;
                v142 = *((_OWORD *)v139 + 1);
                *(_DWORD *)(v114 + 32) = *((_DWORD *)v139 + 8);
                *(float32x4_t *)v114 = v30;
                *(_OWORD *)(v114 + 16) = v142;
                v114 += 36;
                --v121;
              }
              while (v121);
              v119 = v185;
              v108 = v184;
              v120 = v175;
              v143 = v174;
              goto LABEL_141;
            }
            v122 = 0;
            v123 = (unint64_t)&v191[36 * (v112 - v121)];
            v124 = 36 * v112 - 4 * ((uint64_t)&v191[-v114] >> 2);
            do
            {
              v125 = &v110[v122];
              v30 = *(float32x4_t *)v196;
              v126 = *(_OWORD *)&v196[2];
              *((_DWORD *)v125 + 8) = v196[4];
              *(float32x4_t *)v125 = v30;
              *((_OWORD *)v125 + 1) = v126;
              v122 += 36;
            }
            while (v124 != v122);
            v191 = (char *)v123;
            if (v110 != (char *)v114)
              goto LABEL_114;
            v119 = v185;
            v108 = v184;
            v120 = v175;
          }
          else
          {
            v115 = v113 + v112;
            if (v113 + v112 > 0x71C71C71C71C71CLL)
              sub_20E867F44();
            if (0x1C71C71C71C71C72 * ((v192 - v190) >> 2) > v115)
              v115 = 0x1C71C71C71C71C72 * ((v192 - v190) >> 2);
            if (0x8E38E38E38E38E39 * ((v192 - v190) >> 2) >= 0x38E38E38E38E38ELL)
              v116 = 0x71C71C71C71C71CLL;
            else
              v116 = v115;
            if (v116)
            {
              if (v116 > 0x71C71C71C71C71CLL)
                sub_20E877A38();
              v117 = v116;
              v118 = (char *)operator new(36 * v116);
              v109 = v190;
              v116 = v117;
              v112 = (v185 - v184) / 12;
              v59 = v179;
            }
            else
            {
              v118 = 0;
            }
            v144 = &v118[36 * v113];
            v145 = 36 * v112;
            v146 = &v144[36 * v112];
            v147 = v144;
            do
            {
              v30 = *(float32x4_t *)v196;
              v148 = *(_OWORD *)&v196[2];
              *((_DWORD *)v147 + 8) = v196[4];
              *(float32x4_t *)v147 = v30;
              *((_OWORD *)v147 + 1) = v148;
              v147 += 36;
              v145 -= 36;
            }
            while (v145);
            v149 = (unint64_t)(v111 + 35) >= 0x47;
            v120 = v175;
            if (v149)
            {
              v150 = 36 * v113;
              v151 = v109 - 36;
              do
              {
                v152 = &v118[v150];
                v30 = *(float32x4_t *)&v151[v150];
                v153 = *(_OWORD *)&v151[v150 + 16];
                *((_DWORD *)v152 - 1) = *(_DWORD *)&v151[v150 + 32];
                *(_OWORD *)(v152 - 20) = v153;
                *(float32x4_t *)(v152 - 36) = v30;
                v150 -= 36;
              }
              while (v150);
              v144 = v118;
            }
            for (; (char *)v114 != v110; v146 += 36)
            {
              v30 = *(float32x4_t *)v114;
              v154 = *(_OWORD *)(v114 + 16);
              *((_DWORD *)v146 + 8) = *(_DWORD *)(v114 + 32);
              *(float32x4_t *)v146 = v30;
              *((_OWORD *)v146 + 1) = v154;
              v114 += 36;
            }
            v190 = v144;
            v191 = v146;
            v192 = &v118[36 * v116];
            if (v109)
            {
              operator delete(v109);
              v108 = v184;
              v119 = v185;
            }
            else
            {
              v119 = v185;
              v108 = v184;
            }
          }
        }
        v143 = v174;
        v141 = v177;
        v140 = v178;
LABEL_141:
        v155 = &v120[16 * v59];
        *(_QWORD *)v155 = 0xAAAAAAAAAAAAAAABLL * ((v140 - v141) >> 2);
        *((_QWORD *)v155 + 1) = 0xAAAAAAAAAAAAAAABLL * ((v119 - v108) >> 2);
        if (v108)
          operator delete(v108);
        v32 = v59 + 1;
        if (v32 == v143)
        {
          v20 = (float32x2_t *)__p;
          v23 = v194;
          v21 = v195;
          a4 = v190;
          v28 = v191;
          v26 = v192;
          v157 = v170;
          v156 = v170;
          goto LABEL_146;
        }
      }
    }
  }
  v120 = 0;
  v157 = 0;
  v156 = 0;
LABEL_146:
  *(_QWORD *)(a1 + 168) = v20;
  *(_QWORD *)(a1 + 176) = v23;
  *(_QWORD *)(a1 + 184) = v21;
  *(_QWORD *)(a1 + 192) = a4;
  *(_QWORD *)(a1 + 200) = v28;
  *(_QWORD *)(a1 + 208) = v26;
  *(_QWORD *)(a1 + 216) = v173;
  *(_QWORD *)(a1 + 224) = v120;
  *(_QWORD *)(a1 + 232) = v157;
  *(_QWORD *)(a1 + 240) = v156;
  sub_20EEE7DB0(0xAAAAAAAAAAAAAAABLL * ((v23 - (char *)v20) >> 2), v20, (float32x2_t *)a1, v171, a1 + 248);
  v158 = *(float32x2_t **)(a1 + 248);
  v159 = *(float32x2_t **)(a1 + 256);
  memset(v196, 0, 24);
  v160 = (char *)v159 - (char *)v158;
  if (v159 == v158)
  {
    v161 = 0;
    v162 = 0;
  }
  else
  {
    if (v160 < 0)
      sub_20EEC13DC();
    v196[0] = operator new((char *)v159 - (char *)v158);
    v196[1] = v196[0];
    v196[2] = (char *)v196[0] + 8 * (v160 >> 3);
    v186 = v196;
    do
    {
      __p = (void *)vcvt_s32_f32(*v158);
      sub_20EEE90CC(&v186, &__p);
      ++v158;
    }
    while (v158 != v159);
    v162 = v196[0];
    v161 = v196[1];
  }
  v163 = operator new();
  *(_QWORD *)(v163 + 64) = 0;
  *(_OWORD *)(v163 + 32) = 0u;
  *(_OWORD *)(v163 + 48) = 0u;
  *(_OWORD *)v163 = 0u;
  *(_OWORD *)(v163 + 16) = 0u;
  *(_QWORD *)(a1 + 296) = v163;
  v197 = 0;
  v198 = 0;
  v200 = 0;
  v199 = 0;
  memset(&v196[1], 0, 57);
  v201 = (uint64_t)&v201;
  v202 = &v201;
  v205 = 0;
  v206[0] = 0;
  *(_DWORD *)((char *)v206 + 7) = 0;
  v203 = 0;
  v204 = &v205;
  v206[329] = 0;
  if (v162 != v161)
  {
    v164 = v162;
    do
    {
      LODWORD(v186) = *v164;
      LODWORD(__p) = v164[1];
      sub_20EEC9770(v196, (int *)&v186, (int *)&__p);
      v164 += 2;
    }
    while (v164 != v161);
  }
  sub_20EEC9388((uint64_t *)v196, (char **)v163);
  sub_20E86872C((uint64_t)&v204, v205);
  if (v203)
  {
    v166 = v201;
    v165 = v202;
    v167 = *v202;
    *(_QWORD *)(v167 + 8) = *(_QWORD *)(v201 + 8);
    **(_QWORD **)(v166 + 8) = v167;
    v203 = 0;
    if (v165 != &v201)
    {
      do
      {
        v168 = (uint64_t *)v165[1];
        operator delete(v165);
        v165 = v168;
      }
      while (v168 != &v201);
    }
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v196[5])
  {
    v196[6] = v196[5];
    operator delete(v196[5]);
  }
  if (v196[1])
  {
    v196[2] = v196[1];
    operator delete(v196[1]);
  }
  if (v162)
    operator delete(v162);
  return a1;
}

void sub_20EF148B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  uint64_t v39;
  void *v40;
  uint64_t *v41;

  sub_20EEC96C8((uint64_t)&a38);
  sub_20EF14A8C(v41);
  if (v40)
    operator delete(v40);
  sub_20EE8B880(v39);
  sub_20EF14A3C(a12 + 168);
  *a11 = &off_24C9F15F0;
  _Unwind_Resume(a1);
}

void sub_20EF149C0()
{
  JUMPOUT(0x20EF149CCLL);
}

uint64_t sub_20EF14A3C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_20EF14A8C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 48);
    if (v3)
    {
      *(_QWORD *)(v2 + 56) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 24);
    if (v4)
    {
      *(_QWORD *)(v2 + 32) = v4;
      operator delete(v4);
    }
    v5 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x20C407AED9174);
  }
  return a1;
}

_QWORD *sub_20EF14B00(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (result)
  {
    v1 = result;
    v2 = result[37];
    result[37] = 0;
    if (v2)
    {
      v3 = *(void **)(v2 + 48);
      if (v3)
      {
        *(_QWORD *)(v2 + 56) = v3;
        operator delete(v3);
      }
      v4 = *(void **)(v2 + 24);
      if (v4)
      {
        *(_QWORD *)(v2 + 32) = v4;
        operator delete(v4);
      }
      v5 = *(void **)v2;
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(v2 + 8) = v5;
        operator delete(v5);
      }
      MEMORY[0x212BC6398](v2, 0x20C407AED9174);
    }
    v6 = (void *)v1[34];
    if (v6)
      operator delete(v6);
    v7 = (void *)v1[31];
    if (v7)
    {
      v1[32] = v7;
      operator delete(v7);
    }
    v8 = (void *)v1[28];
    if (v8)
    {
      v1[29] = v8;
      operator delete(v8);
    }
    v9 = (void *)v1[24];
    if (v9)
    {
      v1[25] = v9;
      operator delete(v9);
    }
    v10 = (void *)v1[21];
    if (v10)
    {
      v1[22] = v10;
      operator delete(v10);
    }
    v1[8] = &off_24C9F15F0;
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EF14BE8()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EF14BFC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C9F1178;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20EF14C3C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9F1178;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EF14C64()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  kdebug_trace();
  sub_20EF1169C(&v2);
  if (**(int **)(v2 + 56) <= 1)
  {
    v0 = atomic_load((unsigned __int8 *)&qword_254A600C0);
    if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A600C0))
    {
      qword_254A600B8 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_SplitAndDensify");
      __cxa_guard_release(&qword_254A600C0);
    }
    v1 = qword_254A600B8;
    if (*(_BYTE *)(qword_254A600B8 + 16))
    {
      *(_QWORD *)(v1 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v1;
      *(_BYTE *)(v1 + 16) = 0;
    }
  }
}

void sub_20EF14D30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A600C0);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF14D4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection20DensePlaneExtraction15sp"
                     "litAndDensifyERKNS3_6vectorINS6_20PlaneDetectionResultENS3_9allocatorIS9_EEEENS3_8optionalINS6_15Lo"
                     "okUpImageViewIKhNS6_14LabelAndNormalEEEEEE3$_2JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection20DensePlaneExt"
                                "raction15splitAndDensifyERKNS3_6vectorINS6_20PlaneDetectionResultENS3_9allocatorIS9_EEEE"
                                "NS3_8optionalINS6_15LookUpImageViewIKhNS6_14LabelAndNormalEEEEEE3$_2JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection20DensePlaneExtraction15splitAndDensifyERKNS3_6vectorINS6_20PlaneDetectionResultENS3_9allocatorIS9_EEEENS3_8optionalINS6_15LookUpImageViewIKhNS6_14LabelAndNormalEEEEEE3$_2JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection20DensePlaneExtraction15splitAndDensifyERKNS3_6vectorINS6_20PlaneDetectionResultENS3_9allocatorIS9_EEEENS3_8optionalINS6_15LookUpImageViewIKhNS6_14LabelAndNormalEEEEEE3$_2JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF14DB8()
{
  return &unk_24C9F11D8;
}

_QWORD *sub_20EF14DC4(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v5) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20EF150A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAFA1EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF150BC(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t **a4)
{
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char v22;
  char **v23;
  char v24;
  char *v25;
  uint64_t v26;
  __int128 v27;

  if (a2 <= a3)
    v8 = a3;
  else
    v8 = a2;
  v10 = a4[3];
  v9 = a4[4];
  v11 = a4 + 3;
  v12 = ((char *)v9 - (char *)v10) >> 5;
  if (v8 >= v12)
  {
    v13 = v8 + 1;
    if (v13 <= v12)
    {
      if (v13 < v12)
      {
        v14 = &v10[4 * v13];
        if (v9 != v14)
        {
          v15 = a4[4];
          do
          {
            v17 = (void *)*(v15 - 4);
            v15 -= 4;
            v16 = v17;
            if (v17)
            {
              *(v9 - 3) = (uint64_t)v16;
              operator delete(v16);
            }
            v9 = v15;
          }
          while (v15 != v14);
        }
        a4[4] = v14;
      }
    }
    else
    {
      sub_20EF13340((char **)a4 + 3, v13 - v12);
    }
  }
  v18 = (uint64_t *)operator new(0x28uLL);
  v18[2] = a2;
  v18[3] = a3;
  v19 = (char *)*a4;
  *v18 = (uint64_t)*a4;
  v18[1] = (uint64_t)a4;
  *((_QWORD *)v19 + 1) = v18;
  v20 = a4[3];
  a4[2] = (uint64_t *)((char *)a4[2] + 1);
  *a4 = v18;
  *(_QWORD *)&v27 = a3;
  *((_QWORD *)&v27 + 1) = v18;
  v21 = sub_20EF15218((char **)&v20[4 * a2], &v27);
  if (v22)
  {
    v23 = (char **)(*v11 + 32 * a3);
    *(_QWORD *)&v27 = a2;
    *((_QWORD *)&v27 + 1) = v18;
    sub_20EF15218(v23, &v27);
    v24 = 1;
  }
  else
  {
    v25 = v21;
    v26 = *v18;
    *(_QWORD *)(v26 + 8) = v18[1];
    *(_QWORD *)v18[1] = v26;
    a4[2] = (uint64_t *)((char *)a4[2] - 1);
    operator delete(v18);
    v24 = 0;
    v18 = (uint64_t *)*((_QWORD *)v25 + 1);
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v18 + 4;
  *(_BYTE *)(a1 + 24) = v24;
}

char *sub_20EF15218(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_20E867F44();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_20E877A38();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  a1[1] = v6;
  return v6 - 16;
}

char **sub_20EF1531C(char **a1)
{
  char *v2;
  char *i;

  v2 = *a1;
  if (v2)
  {
    for (i = a1[1]; i != v2; i -= 72)
    {
      if (*(i - 64))
        *(i - 64) = 0;
    }
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

float sub_20EF15370(_QWORD *a1, int a2)
{
  unint64_t v2;
  float result;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = a1[1];
  result = 0.0;
  if (v2)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2;
      if (v2 <= a2)
        v6 = a2 % v2;
    }
    else
    {
      v6 = (v2 - 1) & a2;
    }
    v7 = *(uint64_t ***)(*a1 + 8 * v6);
    if (v7)
    {
      v8 = *v7;
      if (*v7)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = v2 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v11 == a2)
            {
              if (*((_DWORD *)v8 + 4) == a2)
                goto LABEL_22;
            }
            else if ((v11 & v9) != v6)
            {
              return result;
            }
            v8 = (uint64_t *)*v8;
            if (!v8)
              return result;
          }
        }
        do
        {
          v10 = v8[1];
          if (v10 == a2)
          {
            if (*((_DWORD *)v8 + 4) == a2)
            {
LABEL_22:
              v12 = a1[5];
              if (!v12)
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/SingleShot/DensifierResult.cpp", 41, (uint64_t)"numPixels > 0", 13, (uint64_t)&unk_21026807D, 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                v12 = a1[5];
              }
              return (float)(unint64_t)v8[3] / (float)v12;
            }
          }
          else
          {
            if (v10 >= v2)
              v10 %= v2;
            if (v10 != v6)
              return result;
          }
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
    }
  }
  return result;
}

char *sub_20EF154C0(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  __int128 v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;

  v3 = 0x8F5C28F5C28F5C29 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x147AE147AE147AELL)
    sub_20E867F44();
  if (0x1EB851EB851EB852 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x1EB851EB851EB852 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x8F5C28F5C28F5C29 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0xA3D70A3D70A3D7)
    v6 = 0x147AE147AE147AELL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x147AE147AE147AELL)
      sub_20E877A38();
    v7 = operator new(200 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 80);
  v9 = (char *)&v7[25 * v3];
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v9 + 5) = v8;
  v10 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v9 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v9 + 7) = v10;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v12;
  *((_DWORD *)v9 + 32) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(v9 + 136) = *(_OWORD *)(a2 + 136);
  *((_QWORD *)v9 + 19) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v9[160] = 0;
  v9[184] = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    *((_QWORD *)v9 + 22) = 0;
    *((_OWORD *)v9 + 10) = *(_OWORD *)(a2 + 160);
    v7[25 * v3 + 22] = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    v9[184] = 1;
  }
  v13 = (char *)&v7[25 * v6];
  LOBYTE(v7[25 * v3 + 24]) = *(_BYTE *)(a2 + 192);
  v14 = v9 + 200;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v9;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = &v9[v17];
      v19 = &v16[v17];
      v20 = *(_OWORD *)&v16[v17 - 200];
      v21 = *(_OWORD *)&v16[v17 - 184];
      v22 = *(_OWORD *)&v16[v17 - 168];
      *(_OWORD *)(v18 - 152) = *(_OWORD *)&v16[v17 - 152];
      *(_OWORD *)(v18 - 168) = v22;
      *(_OWORD *)(v18 - 184) = v21;
      *(_OWORD *)(v18 - 200) = v20;
      v23 = *(_OWORD *)&v16[v17 - 136];
      v24 = *(_OWORD *)&v16[v17 - 120];
      v25 = *(_OWORD *)&v16[v17 - 104];
      *(_OWORD *)(v18 - 88) = *(_OWORD *)&v16[v17 - 88];
      *(_OWORD *)(v18 - 104) = v25;
      *(_OWORD *)(v18 - 120) = v24;
      *(_OWORD *)(v18 - 136) = v23;
      *((_DWORD *)v18 - 18) = *(_DWORD *)&v16[v17 - 72];
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_OWORD *)v18 - 4) = *(_OWORD *)&v16[v17 - 64];
      *((_QWORD *)v18 - 6) = *(_QWORD *)&v16[v17 - 48];
      *((_QWORD *)v19 - 8) = 0;
      *((_QWORD *)v19 - 7) = 0;
      *((_QWORD *)v19 - 6) = 0;
      *(v18 - 40) = 0;
      *(v18 - 16) = 0;
      if (v16[v17 - 16])
      {
        *((_QWORD *)v18 - 4) = 0;
        *((_QWORD *)v18 - 3) = 0;
        *(_OWORD *)(v18 - 40) = *(_OWORD *)(v19 - 40);
        *((_QWORD *)v18 - 3) = *((_QWORD *)v19 - 3);
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        *((_QWORD *)v19 - 3) = 0;
        *(v18 - 16) = 1;
      }
      *(v18 - 8) = *(v19 - 8);
      v17 -= 200;
    }
    while (&v16[v17] != v15);
    v16 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = &v9[v17];
    a1[1] = v14;
    a1[2] = v13;
    while (v26 != v16)
    {
      if (*(v26 - 16))
      {
        v28 = (void *)*((_QWORD *)v26 - 5);
        if (v28)
        {
          *((_QWORD *)v26 - 4) = v28;
          operator delete(v28);
        }
      }
      v29 = *((_QWORD *)v26 - 8);
      if (v29)
      {
        v30 = *((_QWORD *)v26 - 7);
        v27 = (void *)*((_QWORD *)v26 - 8);
        if (v30 != v29)
        {
          v31 = *((_QWORD *)v26 - 7);
          do
          {
            v33 = *(void **)(v31 - 24);
            v31 -= 24;
            v32 = v33;
            if (v33)
            {
              *(_QWORD *)(v30 - 16) = v32;
              operator delete(v32);
            }
            v30 = v31;
          }
          while (v31 != v29);
          v27 = (void *)*((_QWORD *)v26 - 8);
        }
        *((_QWORD *)v26 - 7) = v29;
        operator delete(v27);
      }
      v26 -= 200;
    }
  }
  if (v16)
    operator delete(v16);
  return v14;
}

char ***sub_20EF1579C(char ***a1, uint64_t *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v10 = *v4;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v10) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v15 = (char *)operator new(24 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[24 * v11];
    *(_QWORD *)v16 = *a2;
    *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(v16 + 12) = *(uint64_t *)((char *)a2 + 12);
    *((_DWORD *)v16 + 5) = *((_DWORD *)a2 + 5);
    v9 = v16 + 24;
    if (v6 != v10)
    {
      do
      {
        v17 = *((_QWORD *)v6 - 3);
        v6 -= 24;
        v18 = *((_DWORD *)v6 + 2);
        *((_QWORD *)v16 - 3) = v17;
        v16 -= 24;
        *((_DWORD *)v16 + 2) = v18;
        v19 = *(_QWORD *)(v6 + 12);
        *((_DWORD *)v16 + 5) = *((_DWORD *)v6 + 5);
        *(_QWORD *)(v16 + 12) = v19;
      }
      while (v6 != v10);
      v6 = *v4;
    }
    *v4 = v16;
    v4[1] = v9;
    v4[2] = &v15[24 * v14];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    *((_DWORD *)v6 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v6 = v7;
    v8 = *(uint64_t *)((char *)a2 + 12);
    *((_DWORD *)v6 + 5) = *((_DWORD *)a2 + 5);
    *(_QWORD *)(v6 + 12) = v8;
    v9 = v6 + 24;
  }
  v4[1] = v9;
  return a1;
}

uint64_t sub_20EF1590C(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 24);
    if (v2)
    {
      *(_QWORD *)(v1 + 32) = v2;
      operator delete(v2);
    }
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

_QWORD *sub_20EF15964@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  float v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  float32x2_t v32;
  uint64_t v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  uint64_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int8x16_t v45;
  float32x2_t v46;
  float v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  float *v61;
  __int32 v62;
  unint64_t v63;
  char *v64;
  char *j;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  const float *v70;
  float32x2_t v71;
  int64x2_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *k;
  void *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint8x8_t v86;
  void **v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  float v91;
  _QWORD *v92;
  _QWORD *v93;
  _BOOL4 v94;
  unint64_t v95;
  unint64_t v96;
  size_t prime;
  void *v98;
  void *v99;
  uint64_t v100;
  _QWORD **v101;
  size_t v102;
  size_t v103;
  size_t v104;
  _QWORD *m;
  size_t v106;
  uint64_t v107;
  unint64_t v108;
  uint8x8_t v109;
  uint64_t v110;
  _QWORD *v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  size_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  char *v130;
  __int128 *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t *v136;
  float *v137;
  unsigned int v138;
  unint64_t v139;
  float v140;
  unint64_t *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _BYTE *v146;
  unint64_t *v147;
  int64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unint64_t v162;
  float32x4_t v163;
  __int128 v164;
  unint64_t *v165;
  unint64_t *v166;
  float v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint8x8_t v172;
  unint64_t v173;
  float **v174;
  float *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  float32x4_t v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  float *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  float v199;
  int64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  _BYTE *v206;
  char *v207;
  int64_t v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  int64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  _BYTE *v221;
  char *v222;
  int64_t v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  char *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  float32x4_t *v232;
  float32x4_t *v233;
  uint64_t v234;
  float32x4_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  float32x4_t *v239;
  float32x4_t *v240;
  uint64_t v241;
  float32x4_t v242;
  unsigned __int8 v243;
  float32x4_t v244;
  unint64_t v245;
  void *v246;
  uint64_t v247;
  char *v248;
  void *v249;
  unint64_t v250;
  uint8x8_t v251;
  unint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  char *v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  char *v263;
  unint64_t v264;
  unint64_t v265;
  char *v266;
  unint64_t v267;
  float v268;
  float *v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  unint64_t v273;
  unint64_t v274;
  char *v275;
  unint64_t v276;
  float v277;
  unint64_t v278;
  float *v279;
  unint64_t v280;
  int v281;
  char *v282;
  char *v283;
  void *v284;
  void *v285;
  _QWORD *v286;
  void *v287;
  _QWORD *result;
  uint64_t v289;
  _QWORD *v290;
  void *v291;
  unsigned int *v292;
  uint64_t *v293;
  uint64_t v294;
  int32x4_t v295;
  char *v296;
  float v297;
  char *v298;
  unint64_t v299;
  int64x2_t v300;
  _QWORD *v301;
  unint64_t v302;
  uint64_t v303;
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  char *__p;
  void *v313;
  char *v314;
  char *v315;
  char *v316;
  void *v317[2];
  char *v318;
  void *v319[2];
  char *v320;
  unint64_t *v321;
  unint64_t *v322;
  unint64_t *v323;
  void *v324;
  char *v325;
  unint64_t v326;
  void *v327[2];
  void *v328[2];
  float v329;
  int32x2_t v330;
  unint64_t v331;
  __int128 v332;
  char *v333;
  __int128 v334;
  char *v335;
  _QWORD v336[3];
  _QWORD *v337;
  uint64_t v338;

  v338 = *MEMORY[0x24BDAC8D0];
  v331 = 0;
  kdebug_trace();
  sub_20EF1787C(&v313);
  v294 = (uint64_t)a4;
  if (**((int **)v313 + 7) <= 1)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254A600D0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A600D0))
    {
      qword_254A600C8 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_HorizontalDetect");
      __cxa_guard_release(&qword_254A600D0);
    }
    v9 = qword_254A600C8;
    *(_BYTE *)(qword_254A600C8 + 16) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v9 = std::chrono::steady_clock::now();
    *(_BYTE *)(v9 + 16) = 1;
  }
  v336[0] = &off_24C9F11F8;
  v336[1] = &v331;
  v336[2] = 0;
  v337 = v336;
  v10 = *a2;
  if (*a2 != a2[2] || (v308 = *a3, 2 * *a3 != a3[2]))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/SingleShot/HorizontalPlaneDetector.cpp", 295, (uint64_t)"validateDetectParams(pointsAndVariances, linesAndVariances)", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v10 = *a2;
    v308 = *a3;
  }
  if (v10 <= 2 && v308 <= 1)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_440;
  }
  v11 = a2[1];
  v12 = a2[3];
  v302 = a3[1];
  v299 = a3[3];
  v13 = v308 + v10;
  if (v308 + v10)
  {
    if (v13 >> 59)
      sub_20E867F44();
    v14 = (char *)operator new(32 * v13);
    v13 = (unint64_t)&v14[32 * v13];
    v292 = (unsigned int *)a1;
    v307 = v10;
    __p = v14;
    if (v10)
      goto LABEL_14;
  }
  else
  {
    v14 = 0;
    v292 = (unsigned int *)a1;
    v307 = v10;
    __p = 0;
    if (v10)
    {
LABEL_14:
      v15 = 0;
      v16 = v14;
      while (1)
      {
        while (1)
        {
          a1 = v11 + 12 * v15;
          v19 = fminf(sqrtf(*(float *)(v12 + 4 * v15)), 0.05);
          if ((unint64_t)v16 >= v13)
            break;
          *(_QWORD *)v16 = v15;
          v17 = *(_QWORD *)a1;
          *((_DWORD *)v16 + 4) = *(_DWORD *)(a1 + 8);
          *((_QWORD *)v16 + 1) = v17;
          v18 = v19 + *((float *)v16 + 4);
          *((float *)v16 + 5) = *(float *)(a1 + 8) - v19;
          *((float *)v16 + 6) = v18;
          *((_DWORD *)v16 + 7) = 1065353216;
          v16 += 32;
          if (++v15 == v10)
            goto LABEL_35;
        }
        v20 = (v16 - __p) >> 5;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 59)
          sub_20E867F44();
        if ((uint64_t)(v13 - (_QWORD)__p) >> 4 > v21)
          v21 = (uint64_t)(v13 - (_QWORD)__p) >> 4;
        if (v13 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0)
          v22 = 0x7FFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22 >> 59)
          sub_20E877A38();
        v23 = (char *)operator new(32 * v22);
        v24 = &v23[32 * v20];
        *(_QWORD *)v24 = v15;
        v25 = *(_QWORD *)a1;
        *((_DWORD *)v24 + 4) = *(_DWORD *)(a1 + 8);
        *((_QWORD *)v24 + 1) = v25;
        v26 = v19 + *((float *)v24 + 4);
        *((float *)v24 + 5) = *(float *)(a1 + 8) - v19;
        *((float *)v24 + 6) = v26;
        *((_DWORD *)v24 + 7) = 1065353216;
        a1 = (unint64_t)v24;
        if (v16 == __p)
        {
          v27 = __p;
          v10 = v307;
          v13 = (unint64_t)&v23[32 * v22];
          v16 = v24 + 32;
          if (!__p)
            goto LABEL_29;
        }
        else
        {
          v27 = __p;
          v10 = v307;
          do
          {
            v28 = *((_QWORD *)v16 - 4);
            v16 -= 32;
            *(_QWORD *)(a1 - 32) = v28;
            a1 -= 32;
            v29 = *((_QWORD *)v16 + 1);
            *(_DWORD *)(a1 + 16) = *((_DWORD *)v16 + 4);
            *(_QWORD *)(a1 + 8) = v29;
            v30 = *(_QWORD *)(v16 + 20);
            *(_DWORD *)(a1 + 28) = *((_DWORD *)v16 + 7);
            *(_QWORD *)(a1 + 20) = v30;
          }
          while (v16 != __p);
          v13 = (unint64_t)&v23[32 * v22];
          v16 = v24 + 32;
          if (!__p)
            goto LABEL_29;
        }
        operator delete(v27);
LABEL_29:
        __p = (char *)a1;
        if (++v15 == v10)
          goto LABEL_35;
      }
    }
  }
  v16 = v14;
LABEL_35:
  if (v308)
  {
    for (i = 0; i != v308; ++i)
    {
      a1 = v302 + 24 * i;
      v34 = (float *)(v299 + 8 * i);
      v35 = *(float *)(a1 + 8);
      v36 = *(float *)(a1 + 20);
      v37 = sqrtf(*v34);
      v38 = sqrtf(v34[1]);
      *(float *)&v313 = v35 - v37;
      *((float *)&v313 + 1) = v37 + v35;
      *(float *)&v314 = v36 - v38;
      *((float *)&v314 + 1) = v38 + v36;
      sub_20EF17AC8((uint64_t)&v313, (float *)&v315, 2, 1, v38 + v36);
      if (*((float *)&v313 + 1) >= *(float *)&v314)
      {
        v39.i64[0] = *(_QWORD *)a1;
        v39.i32[2] = *(_DWORD *)(a1 + 8);
        v42 = i + v10;
        v40.i64[0] = *(_QWORD *)(a1 + 12);
        v40.i32[2] = *(_DWORD *)(a1 + 20);
        v43.i64[0] = 0x3F0000003F000000;
        v43.i64[1] = 0x3F0000003F000000;
        v44 = (int32x4_t)vmulq_f32(vaddq_f32(v39, v40), v43);
        v41.f32[0] = (float)(fminf(v37, 0.05) + fminf(v38, 0.05)) * 0.5;
        v45 = (int8x16_t)vsubq_f32(v40, v39);
        v46 = (float32x2_t)vextq_s8(v45, v45, 8uLL).u64[0];
        v47 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1), *(float32x2_t *)v45.i8, 1), v46, v46).f32[0])/ 0.05;
        if ((unint64_t)v16 >= v13)
        {
          v48 = (v16 - __p) >> 5;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 59)
            sub_20E867F44();
          v295 = v44;
          v297 = v41.f32[0];
          if ((uint64_t)(v13 - (_QWORD)__p) >> 4 > v49)
            v49 = (uint64_t)(v13 - (_QWORD)__p) >> 4;
          if (v13 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0)
            v50 = 0x7FFFFFFFFFFFFFFLL;
          else
            v50 = v49;
          if (v50 >> 59)
            sub_20E877A38();
          v51 = (char *)operator new(32 * v50);
          v52 = &v51[32 * v48];
          *(_QWORD *)v52 = v42;
          *((_QWORD *)v52 + 1) = v295.i64[0];
          *((_DWORD *)v52 + 4) = v295.i32[2];
          *((float *)v52 + 5) = *(float *)&v295.i32[2] - v297;
          *((float *)v52 + 6) = v297 + *(float *)&v295.i32[2];
          *((float *)v52 + 7) = v47;
          v53 = v52;
          if (v16 == __p)
          {
            v54 = __p;
            v10 = v307;
            v13 = (unint64_t)&v51[32 * v50];
            v16 = v52 + 32;
            if (__p)
              goto LABEL_52;
          }
          else
          {
            v54 = __p;
            v10 = v307;
            do
            {
              v55 = *((_QWORD *)v16 - 4);
              v16 -= 32;
              *((_QWORD *)v53 - 4) = v55;
              v53 -= 32;
              v56 = *((_QWORD *)v16 + 1);
              *((_DWORD *)v53 + 4) = *((_DWORD *)v16 + 4);
              *((_QWORD *)v53 + 1) = v56;
              v57 = *(_QWORD *)(v16 + 20);
              *((_DWORD *)v53 + 7) = *((_DWORD *)v16 + 7);
              *(_QWORD *)(v53 + 20) = v57;
            }
            while (v16 != __p);
            v13 = (unint64_t)&v51[32 * v50];
            v16 = v52 + 32;
            if (__p)
LABEL_52:
              operator delete(v54);
          }
          __p = v53;
          continue;
        }
        *(_QWORD *)v16 = v42;
        *((_DWORD *)v16 + 4) = v44.i32[2];
        *((_QWORD *)v16 + 1) = v44.i64[0];
        v32 = (float32x2_t)vdup_laneq_s32(v44, 2);
        LODWORD(v33) = vsub_f32(v32, v41).u32[0];
        HIDWORD(v33) = vadd_f32(v32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v41, 0)).i32[1];
        *(_QWORD *)(v16 + 20) = v33;
        *((float *)v16 + 7) = v47;
        v16 += 32;
      }
    }
  }
  v58 = v16 - __p;
  if ((unint64_t)(v16 - __p) > 0x3F)
  {
    v60 = __p;
    if (__p != v16)
    {
      v60 = __p;
      v61 = (float *)(__p + 32);
      if (__p + 32 != v16)
      {
        v60 = __p;
        do
        {
          if (v61[5] < *((float *)v60 + 5))
            v60 = (char *)v61;
          v61 += 8;
        }
        while (v61 != (float *)v16);
      }
    }
    v62 = *((_DWORD *)v60 + 5);
    *(_OWORD *)v327 = 0u;
    *(_OWORD *)v328 = 0u;
    v329 = 1.0;
    v330.i32[0] = 1000593162;
    v330.i32[1] = v62;
    v324 = 0;
    v325 = 0;
    v326 = 0;
    if (v58 < 0)
      sub_20E867F44();
    v63 = v58 >> 5;
    v317[0] = &v326;
    v59 = __p;
    v313 = operator new(56 * (v58 >> 5));
    v314 = (char *)v313;
    v315 = (char *)v313;
    v316 = (char *)v313 + 56 * v63;
    sub_20EF188C0(&v324, &v313);
    v64 = v314;
    for (j = v315; j != v64; j -= 56)
    {
      v66 = (void *)*((_QWORD *)j - 4);
      if (v66)
      {
        *((_QWORD *)j - 3) = v66;
        operator delete(v66);
      }
    }
    if (v313)
      operator delete(v313);
    v67 = 0;
    if (v63 <= 1)
      v68 = 1;
    else
      v68 = v63;
    v303 = v68;
    while (1)
    {
      v69 = &v59[32 * v67];
      v70 = (const float *)&v330 + 1;
      v71 = vld1_dup_f32(v70);
      v72 = (int64x2_t)vcvtq_u64_f64(vcvtq_f64_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)(v69 + 20), v71), (float32x2_t)vdup_lane_s32(v330, 0)))));
      v73 = v325;
      if ((unint64_t)v325 >= v326)
      {
        v75 = 0x6DB6DB6DB6DB6DB7 * ((v325 - (_BYTE *)v324) >> 3);
        v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) > 0x492492492492492)
          sub_20E867F44();
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v326 - (_QWORD)v324) >> 3) > v76)
          v76 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v326 - (_QWORD)v324) >> 3);
        v77 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v326 - (_QWORD)v324) >> 3)) >= 0x249249249249249
            ? 0x492492492492492
            : v76;
        v317[0] = &v326;
        if (v77)
        {
          v300 = v72;
          if (v77 > 0x492492492492492)
            goto LABEL_453;
          v78 = (char *)operator new(56 * v77);
          v72 = v300;
        }
        else
        {
          v78 = 0;
        }
        v79 = &v78[56 * v75];
        v313 = v78;
        v314 = v79;
        v315 = v79;
        v316 = &v78[56 * v77];
        *(_QWORD *)v79 = v69;
        *(int64x2_t *)(v79 + 8) = v72;
        sub_20EF09568(vsubq_s64(vdupq_laneq_s64(v72, 1), v72).u64[0] + 1, (_QWORD *)v79 + 3);
        v78[56 * v75 + 48] = 0;
        v315 += 56;
        sub_20EF188C0(&v324, &v313);
        v74 = v325;
        v80 = v314;
        for (k = v315; k != v80; k -= 56)
        {
          v82 = (void *)*((_QWORD *)k - 4);
          if (v82)
          {
            *((_QWORD *)k - 3) = v82;
            operator delete(v82);
          }
        }
        if (v313)
          operator delete(v313);
      }
      else
      {
        *(_QWORD *)v325 = v69;
        *(int64x2_t *)(v73 + 8) = v72;
        sub_20EF09568(vsubq_s64(vdupq_laneq_s64(v72, 1), v72).u64[0] + 1, (_QWORD *)v73 + 3);
        v73[48] = 0;
        v74 = v73 + 56;
      }
      v325 = v74;
      v83 = *((_QWORD *)v74 - 6);
      if (v83 <= *((_QWORD *)v74 - 5))
        break;
LABEL_76:
      if (++v67 == v303)
      {
        v135 = 0;
        v136 = 0;
        v137 = (float *)v328[0];
        v138 = *v292;
        v322 = 0;
        v323 = 0;
        v321 = 0;
        if (v328[1] >= (void *)2)
        {
          if ((unint64_t)v328[1] >> 62)
            sub_20E867F44();
          v139 = (unint64_t)v328[1] >> 1;
          v136 = (unint64_t *)operator new(8 * ((unint64_t)v328[1] >> 1));
          v135 = &v136[v139];
          v321 = v136;
          v322 = v136;
          v323 = v135;
        }
        if (!v137)
        {
          v141 = v136;
LABEL_251:
          v159 = 126 - 2 * __clz(v136 - v141);
          v313 = v327;
          if (v136 == v141)
            v160 = 0;
          else
            v160 = v159;
          sub_20EF18A9C((uint64_t)v141, v136, (uint64_t **)&v313, v160, 1);
          v161 = *v292;
          v162 = v322 - v321;
          *(_QWORD *)(v294 + 8) = 0;
          *(_QWORD *)(v294 + 16) = 0;
          *(_QWORD *)v294 = 0;
          sub_20EF1A578(v294, v162);
          v166 = v321;
          v165 = v322;
          if (v321 == v322)
          {
            v165 = v321;
LABEL_425:
            v331 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v294 + 8) - *(_QWORD *)v294) >> 4);
            if (v165)
            {
              v322 = v165;
              operator delete(v165);
            }
            v282 = (char *)v324;
            if (v324)
            {
              v283 = v325;
              v284 = v324;
              if (v325 != v324)
              {
                do
                {
                  v285 = (void *)*((_QWORD *)v283 - 4);
                  if (v285)
                  {
                    *((_QWORD *)v283 - 3) = v285;
                    operator delete(v285);
                  }
                  v283 -= 56;
                }
                while (v283 != v282);
                v284 = v324;
              }
              v325 = v282;
              operator delete(v284);
            }
            v286 = v328[0];
            if (v328[0])
            {
              do
              {
                v290 = (_QWORD *)*v286;
                v291 = (void *)v286[4];
                if (v291)
                {
                  v286[5] = v291;
                  operator delete(v291);
                }
                operator delete(v286);
                v286 = v290;
              }
              while (v290);
            }
            v287 = v327[0];
            v327[0] = 0;
            if (v287)
              operator delete(v287);
            goto LABEL_438;
          }
          v167 = (float)v161;
          v293 = (uint64_t *)((unint64_t)&v313 | 0xC);
LABEL_261:
          v171 = *--v165;
          v170 = v171;
          v322 = v165;
          if (!v327[1])
            goto LABEL_450;
          v172 = (uint8x8_t)vcnt_s8((int8x8_t)v327[1]);
          v172.i16[0] = vaddlv_u8(v172);
          if (v172.u32[0] > 1uLL)
          {
            v173 = v170;
            if (v327[1] <= (void *)v170)
              v173 = v170 % (unint64_t)v327[1];
          }
          else
          {
            v173 = ((unint64_t)v327[1] - 1) & v170;
          }
          v174 = (float **)*((_QWORD *)v327[0] + v173);
          if (!v174 || (v175 = *v174) == 0)
LABEL_450:
            sub_20E89FD20("unordered_map::at: key not found");
          v176 = (unint64_t)v327[1] - 1;
          if (v172.u32[0] < 2uLL)
          {
            while (1)
            {
              v177 = *((_QWORD *)v175 + 1);
              if (v177 == v170)
              {
                if (*((_QWORD *)v175 + 2) == v170)
                  goto LABEL_274;
              }
              else if ((v177 & v176) != v173)
              {
                goto LABEL_450;
              }
              v175 = *(float **)v175;
              if (!v175)
                goto LABEL_450;
            }
          }
          while (1)
          {
            v179 = *((_QWORD *)v175 + 1);
            if (v179 == v170)
            {
              if (*((_QWORD *)v175 + 2) == v170)
              {
LABEL_274:
                if (v175[14] < v167)
                  goto LABEL_260;
                v334 = 0uLL;
                v335 = 0;
                v332 = 0uLL;
                v333 = 0;
                if (v172.u32[0] > 1uLL)
                {
                  v178 = v170;
                  if (v327[1] <= (void *)v170)
                    v178 = v170 % (unint64_t)v327[1];
                }
                else
                {
                  v178 = v176 & v170;
                }
                v180 = (_QWORD *)*((_QWORD *)v327[0] + v178);
                if (!v180 || (v181 = (_QWORD *)*v180) == 0)
LABEL_451:
                  sub_20E89FD20("unordered_map::at: key not found");
                if (v172.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v182 = v181[1];
                    if (v182 == v170)
                    {
                      if (v181[2] == v170)
                        goto LABEL_294;
                    }
                    else if ((v182 & v176) != v178)
                    {
                      goto LABEL_451;
                    }
                    v181 = (_QWORD *)*v181;
                    if (!v181)
                      goto LABEL_451;
                  }
                }
                while (2)
                {
                  v192 = v181[1];
                  if (v192 != v170)
                  {
                    if ((void *)v192 >= v327[1])
                      v192 %= (unint64_t)v327[1];
                    if (v192 != v178)
                      goto LABEL_451;
LABEL_297:
                    v181 = (_QWORD *)*v181;
                    if (!v181)
                      goto LABEL_451;
                    continue;
                  }
                  break;
                }
                if (v181[2] != v170)
                  goto LABEL_297;
LABEL_294:
                v184 = (_QWORD *)v181[4];
                v183 = (_QWORD *)v181[5];
                if (v184 == v183)
                {
                  LODWORD(v164) = 0;
                  v191 = 0uLL;
LABEL_366:
                  v243 = atomic_load((unsigned __int8 *)&qword_254A600E8);
                  if ((v243 & 1) == 0)
                  {
                    v311 = v191;
                    v306 = v164;
                    v281 = __cxa_guard_acquire(&qword_254A600E8);
                    *(_QWORD *)&v164 = v306;
                    v191 = v311;
                    if (v281)
                    {
                      qword_254A60100 = 0;
                      unk_254A60108 = 0;
                      *(uint64_t *)((char *)&qword_254A6010C + 4) = 0x3F80000000000000;
                      __cxa_guard_release(&qword_254A600E8);
                      *(_QWORD *)&v164 = v306;
                      v191 = v311;
                    }
                  }
                  v244 = vdivq_f32(v191, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v164, 0));
                  LODWORD(v314) = v244.i32[2];
                  v313 = (void *)v244.i64[0];
                  *v293 = qword_254A6010C;
                  *(_DWORD *)(((unint64_t)&v313 | 0xC) + 8) = dword_254A60114;
                  LOBYTE(v316) = 1;
                  *(_OWORD *)v317 = v334;
                  v318 = v335;
                  *(_OWORD *)v319 = v332;
                  v320 = v333;
                  v245 = *(_QWORD *)(v294 + 8);
                  if (v245 >= *(_QWORD *)(v294 + 16))
                  {
                    v248 = sub_20EF1A8C8((char **)v294, (uint64_t)&v313);
                    v249 = v319[0];
                    *(_QWORD *)(v294 + 8) = v248;
                    if (v249)
                    {
                      v319[1] = v249;
                      operator delete(v249);
                    }
                  }
                  else
                  {
                    v246 = v313;
                    *(_DWORD *)(v245 + 8) = (_DWORD)v314;
                    *(_QWORD *)v245 = v246;
                    v247 = *v293;
                    *(_DWORD *)(v245 + 20) = *(_DWORD *)(((unint64_t)&v313 | 0xC) + 8);
                    *(_QWORD *)(v245 + 12) = v247;
                    *(_BYTE *)(v245 + 24) = (_BYTE)v316;
                    *(_QWORD *)(v245 + 40) = 0;
                    *(_QWORD *)(v245 + 48) = 0;
                    *(_QWORD *)(v245 + 32) = 0;
                    *(_OWORD *)(v245 + 32) = *(_OWORD *)v317;
                    *(_QWORD *)(v245 + 48) = v318;
                    *(_QWORD *)(v245 + 56) = 0;
                    v317[0] = 0;
                    v317[1] = 0;
                    v318 = 0;
                    *(_QWORD *)(v245 + 64) = 0;
                    *(_QWORD *)(v245 + 72) = 0;
                    *(_OWORD *)(v245 + 56) = *(_OWORD *)v319;
                    *(_QWORD *)(v245 + 72) = v320;
                    v319[0] = 0;
                    v319[1] = 0;
                    v320 = 0;
                    *(_QWORD *)(v294 + 8) = v245 + 80;
                  }
                  if (v317[0])
                  {
                    v317[1] = v317[0];
                    operator delete(v317[0]);
                  }
                  v250 = (unint64_t)v327[1];
                  if (!v327[1])
                    goto LABEL_450;
                  v251 = (uint8x8_t)vcnt_s8((int8x8_t)v327[1]);
                  v251.i16[0] = vaddlv_u8(v251);
                  if (v251.u32[0] > 1uLL)
                  {
                    v252 = v170;
                    if (v327[1] <= (void *)v170)
                      v252 = v170 % (unint64_t)v327[1];
                  }
                  else
                  {
                    v252 = ((unint64_t)v327[1] - 1) & v170;
                  }
                  v253 = v327[0];
                  v254 = (_QWORD *)*((_QWORD *)v327[0] + v252);
                  if (!v254)
                    goto LABEL_450;
                  v255 = (_QWORD *)*v254;
                  if (!*v254)
                    goto LABEL_450;
                  v256 = (char *)v324;
                  v257 = (unint64_t)v327[1] - 1;
                  if (v251.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v258 = v255[1];
                      if (v258 == v170)
                      {
                        if (v255[2] == v170)
                          goto LABEL_386;
                      }
                      else if ((v258 & v257) != v252)
                      {
                        goto LABEL_450;
                      }
                      v255 = (_QWORD *)*v255;
                      if (!v255)
                        goto LABEL_450;
                    }
                  }
                  while (1)
                  {
                    v261 = v255[1];
                    if (v261 == v170)
                    {
                      if (v255[2] == v170)
                      {
LABEL_386:
                        v259 = (uint64_t *)v255[4];
                        v260 = (uint64_t *)v255[5];
                        if (v259 != v260)
                        {
                          if (v251.u32[0] >= 2uLL)
                          {
                            do
                            {
                              v271 = *v259;
                              v272 = &v256[56 * *v259];
                              v272[48] = 1;
                              v273 = *((_QWORD *)v272 + 1);
                              v274 = *((_QWORD *)v272 + 2);
                              if (v273 <= v274)
                              {
                                v275 = &v256[56 * v271 + 24];
                                v276 = *((_QWORD *)v272 + 1);
                                do
                                {
                                  v278 = v276;
                                  if (v276 >= v250)
                                    v278 = v276 % v250;
                                  v279 = (float *)v253[v278];
                                  if (v279)
                                  {
                                    while (1)
                                    {
                                      v279 = *(float **)v279;
                                      if (!v279)
                                        break;
                                      v280 = *((_QWORD *)v279 + 1);
                                      if (v280 == v276)
                                      {
                                        if (*((_QWORD *)v279 + 2) == v276)
                                        {
                                          v277 = *(float *)(*(_QWORD *)v272 + 28);
                                          v279[6] = v279[6]
                                                  - (float)(v277 * *(float *)(*(_QWORD *)v275 + 4 * (v276 - v273)));
                                          v279[14] = v279[14] - v277;
                                          break;
                                        }
                                      }
                                      else
                                      {
                                        if (v280 >= v250)
                                          v280 %= v250;
                                        if (v280 != v278)
                                          break;
                                      }
                                    }
                                  }
                                  ++v276;
                                }
                                while (v276 <= v274);
                              }
                              ++v259;
                            }
                            while (v259 != v260);
                          }
                          else
                          {
                            do
                            {
                              v262 = *v259;
                              v263 = &v256[56 * *v259];
                              v263[48] = 1;
                              v264 = *((_QWORD *)v263 + 1);
                              v265 = *((_QWORD *)v263 + 2);
                              if (v264 <= v265)
                              {
                                v266 = &v256[56 * v262 + 24];
                                v267 = *((_QWORD *)v263 + 1);
                                do
                                {
                                  v269 = (float *)v253[v267 & v257];
                                  if (v269)
                                  {
                                    while (1)
                                    {
                                      v269 = *(float **)v269;
                                      if (!v269)
                                        break;
                                      v270 = *((_QWORD *)v269 + 1);
                                      if (v270 == v267)
                                      {
                                        if (*((_QWORD *)v269 + 2) == v267)
                                        {
                                          v268 = *(float *)(*(_QWORD *)v263 + 28);
                                          v269[6] = v269[6]
                                                  - (float)(v268 * *(float *)(*(_QWORD *)v266 + 4 * (v267 - v264)));
                                          v269[14] = v269[14] - v268;
                                          break;
                                        }
                                      }
                                      else if ((v270 & v257) != (v267 & v257))
                                      {
                                        break;
                                      }
                                    }
                                  }
                                  ++v267;
                                }
                                while (v267 <= v265);
                              }
                              ++v259;
                            }
                            while (v259 != v260);
                          }
                        }
                        v168 = 126 - 2 * __clz(v322 - v321);
                        v313 = v327;
                        if (v322 == v321)
                          v169 = 0;
                        else
                          v169 = v168;
                        sub_20EF18A9C((uint64_t)v321, v322, (uint64_t **)&v313, v169, 1);
                        v166 = v321;
                        v165 = v322;
LABEL_260:
                        if (v166 == v165)
                          goto LABEL_425;
                        goto LABEL_261;
                      }
                    }
                    else
                    {
                      if ((void *)v261 >= v327[1])
                        v261 %= (unint64_t)v327[1];
                      if (v261 != v252)
                        goto LABEL_450;
                    }
                    v255 = (_QWORD *)*v255;
                    if (!v255)
                      goto LABEL_450;
                  }
                }
                v185 = 0;
                v186 = 0;
                v187 = 0;
                v188 = 0;
                v189 = 0;
                v190 = 0;
                v191 = 0uLL;
                LODWORD(v164) = 0;
                v301 = (_QWORD *)v181[5];
                while (2)
                {
                  if (*((_BYTE *)v324 + 56 * *v184 + 48))
                    goto LABEL_305;
                  v194 = (char *)v324 + 56 * *v184;
                  v195 = *(float **)v194;
                  v196 = **(_QWORD **)v194;
                  if (v307 <= v196)
                    v197 = v307;
                  else
                    v197 = 0;
                  v198 = v196 - v197;
                  v199 = v195[7] * *(float *)(*((_QWORD *)v194 + 3) + 4 * (v170 - *((_QWORD *)v194 + 1)));
                  v163.i64[0] = *((_QWORD *)v195 + 1);
                  v163.f32[2] = v195[4];
                  v163 = vmulq_n_f32(v163, v199);
                  v191 = vaddq_f32(v191, v163);
                  *(float *)&v164 = *(float *)&v164 + v199;
                  if (v307 > v196)
                  {
                    if (v185 < v187)
                    {
                      *(_QWORD *)v185 = v198;
                      v193 = (uint64_t)(v185 + 8);
                    }
                    else
                    {
                      v200 = v185 - v190;
                      v201 = (v185 - v190) >> 3;
                      v202 = v201 + 1;
                      if ((unint64_t)(v201 + 1) >> 61)
                        goto LABEL_458;
                      if ((v187 - v190) >> 2 > v202)
                        v202 = (v187 - v190) >> 2;
                      if ((unint64_t)(v187 - v190) >= 0x7FFFFFFFFFFFFFF8)
                        v203 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v203 = v202;
                      v309 = v191;
                      v304 = v164;
                      v296 = v188;
                      if (v203)
                      {
                        if (v203 >> 61)
                          goto LABEL_455;
                        v204 = v186;
                        v205 = v185;
                        v206 = operator new(8 * v203);
                        v191 = v309;
                        v164 = v304;
                        v185 = v205;
                        v186 = v204;
                        v207 = &v206[8 * v201];
                        *(_QWORD *)v207 = v198;
                        v193 = (uint64_t)(v207 + 8);
                        v208 = v185 - v190;
                        if (v185 != v190)
                        {
LABEL_321:
                          v209 = v208 - 8;
                          if (v209 < 0x168
                            || (v229 = (v185 - 8 - v190) & 0xFFFFFFFFFFFFFFF8, &v206[v200 - 8 - v229] > &v206[v200 - 8])
                            || &v185[-v229 - 8] > v185 - 8
                            || (unint64_t)(v185 - &v206[v200]) < 0x20)
                          {
                            v210 = v185;
                            v59 = __p;
                          }
                          else
                          {
                            v230 = (v209 >> 3) + 1;
                            v231 = 8 * (v230 & 0x3FFFFFFFFFFFFFFCLL);
                            v210 = &v185[-v231];
                            v207 -= v231;
                            v232 = (float32x4_t *)&v206[8 * v201 - 16];
                            v233 = (float32x4_t *)(v185 - 16);
                            v234 = v230 & 0x3FFFFFFFFFFFFFFCLL;
                            v59 = __p;
                            do
                            {
                              v163 = v233[-1];
                              v235 = *v233;
                              v232[-1] = v163;
                              *v232 = v235;
                              v232 -= 2;
                              v233 -= 2;
                              v234 -= 4;
                            }
                            while (v234);
                            if (v230 == (v230 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_324:
                              v187 = &v206[8 * v203];
                              *(_QWORD *)&v334 = v207;
                              v335 = v187;
                              if (v190)
                                goto LABEL_325;
                              goto LABEL_326;
                            }
                          }
                          do
                          {
                            v211 = *((_QWORD *)v210 - 1);
                            v210 -= 8;
                            *((_QWORD *)v207 - 1) = v211;
                            v207 -= 8;
                          }
                          while (v210 != v190);
                          goto LABEL_324;
                        }
                      }
                      else
                      {
                        v206 = 0;
                        v207 = (char *)(8 * v201);
                        *(_QWORD *)(8 * v201) = v198;
                        v193 = 8 * v201 + 8;
                        v208 = v185 - v190;
                        if (v185 != v190)
                          goto LABEL_321;
                      }
                      v59 = __p;
                      v187 = &v206[8 * v203];
                      *(_QWORD *)&v334 = v207;
                      v335 = v187;
                      if (v190)
                      {
LABEL_325:
                        v212 = v187;
                        v213 = v186;
                        operator delete(v190);
                        v187 = v212;
                        v186 = v213;
                        v164 = v304;
                        v191 = v309;
                      }
LABEL_326:
                      v190 = v207;
                      v183 = v301;
                      v188 = v296;
                    }
                    *((_QWORD *)&v334 + 1) = v193;
                    v185 = (char *)v193;
LABEL_305:
                    if (++v184 == v183)
                      goto LABEL_366;
                    continue;
                  }
                  break;
                }
                if (v186 < v188)
                {
                  *(_QWORD *)v186 = v198;
                  v214 = (uint64_t)(v186 + 8);
LABEL_344:
                  *((_QWORD *)&v332 + 1) = v214;
                  v186 = (char *)v214;
                  goto LABEL_305;
                }
                v215 = v186 - v189;
                v216 = (v186 - v189) >> 3;
                v217 = v216 + 1;
                if ((unint64_t)(v216 + 1) >> 61)
LABEL_458:
                  sub_20E867F44();
                if ((v188 - v189) >> 2 > v217)
                  v217 = (v188 - v189) >> 2;
                if ((unint64_t)(v188 - v189) >= 0x7FFFFFFFFFFFFFF8)
                  v218 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v218 = v217;
                v310 = v191;
                v305 = v164;
                v298 = v187;
                if (v218)
                {
                  if (v218 >> 61)
LABEL_455:
                    sub_20E877A38();
                  v219 = v186;
                  v220 = v185;
                  v221 = operator new(8 * v218);
                  v191 = v310;
                  v164 = v305;
                  v185 = v220;
                  v186 = v219;
                  v222 = &v221[8 * v216];
                  *(_QWORD *)v222 = v198;
                  v214 = (uint64_t)(v222 + 8);
                  v223 = v186 - v189;
                  if (v186 != v189)
                  {
LABEL_338:
                    v224 = v223 - 8;
                    if (v224 < 0x168
                      || (v236 = (v186 - 8 - v189) & 0xFFFFFFFFFFFFFFF8, &v221[v215 - 8 - v236] > &v221[v215 - 8])
                      || &v186[-v236 - 8] > v186 - 8
                      || (unint64_t)(v186 - &v221[v215]) < 0x20)
                    {
                      v225 = v186;
                      v59 = __p;
                    }
                    else
                    {
                      v237 = (v224 >> 3) + 1;
                      v238 = 8 * (v237 & 0x3FFFFFFFFFFFFFFCLL);
                      v225 = &v186[-v238];
                      v222 -= v238;
                      v239 = (float32x4_t *)&v221[8 * v216 - 16];
                      v240 = (float32x4_t *)(v186 - 16);
                      v241 = v237 & 0x3FFFFFFFFFFFFFFCLL;
                      v59 = __p;
                      do
                      {
                        v163 = v240[-1];
                        v242 = *v240;
                        v239[-1] = v163;
                        *v239 = v242;
                        v239 -= 2;
                        v240 -= 2;
                        v241 -= 4;
                      }
                      while (v241);
                      if (v237 == (v237 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_341:
                        v188 = &v221[8 * v218];
                        *(_QWORD *)&v332 = v222;
                        v333 = v188;
                        if (v189)
                          goto LABEL_342;
                        goto LABEL_343;
                      }
                    }
                    do
                    {
                      v226 = *((_QWORD *)v225 - 1);
                      v225 -= 8;
                      *((_QWORD *)v222 - 1) = v226;
                      v222 -= 8;
                    }
                    while (v225 != v189);
                    goto LABEL_341;
                  }
                }
                else
                {
                  v221 = 0;
                  v222 = (char *)(8 * v216);
                  *(_QWORD *)(8 * v216) = v198;
                  v214 = 8 * v216 + 8;
                  v223 = v186 - v189;
                  if (v186 != v189)
                    goto LABEL_338;
                }
                v59 = __p;
                v188 = &v221[8 * v218];
                *(_QWORD *)&v332 = v222;
                v333 = v188;
                if (v189)
                {
LABEL_342:
                  v227 = v188;
                  v228 = v185;
                  operator delete(v189);
                  v188 = v227;
                  v185 = v228;
                  v164 = v305;
                  v191 = v310;
                }
LABEL_343:
                v189 = v222;
                v183 = v301;
                v187 = v298;
                goto LABEL_344;
              }
            }
            else
            {
              if ((void *)v179 >= v327[1])
                v179 %= (unint64_t)v327[1];
              if (v179 != v173)
                goto LABEL_450;
            }
            v175 = *(float **)v175;
            if (!v175)
              goto LABEL_450;
          }
        }
        v140 = (float)v138;
        v141 = v136;
        v142 = (char *)v136;
        while (1)
        {
          if (v137[14] >= v140)
          {
            if (v142 >= (char *)v135)
            {
              v143 = (v142 - (char *)v141) >> 3;
              v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 61)
              {
                v322 = v136;
                v323 = v135;
                v321 = v141;
                sub_20E867F44();
              }
              if (((char *)v135 - (char *)v141) >> 2 > v144)
                v144 = ((char *)v135 - (char *)v141) >> 2;
              if ((unint64_t)((char *)v135 - (char *)v141) >= 0x7FFFFFFFFFFFFFF8)
                v145 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v145 = v144;
              if (v145)
              {
                if (v145 >> 61)
                {
                  v323 = v135;
                  v321 = v141;
                  sub_20E877A38();
                }
                v146 = operator new(8 * v145);
                v147 = (unint64_t *)&v146[8 * v143];
                *v147 = *((_QWORD *)v137 + 2);
                v136 = v147 + 1;
                v148 = v142 - (char *)v141;
                if (v142 == (char *)v141)
                  goto LABEL_236;
LABEL_233:
                v149 = v148 - 8;
                if (v149 < 0x168)
                {
                  v150 = (unint64_t *)v142;
                  goto LABEL_235;
                }
                v152 = (v142 - 8 - (char *)v141) & 0xFFFFFFFFFFFFFFF8;
                if (&v146[v142 - (char *)v141 - 8 - v152] > &v146[v142 - (char *)v141 - 8])
                {
                  v150 = (unint64_t *)v142;
                  goto LABEL_235;
                }
                if (&v142[-v152 - 8] > v142 - 8)
                {
                  v150 = (unint64_t *)v142;
                  goto LABEL_235;
                }
                if ((unint64_t)((char *)v141 - v146) < 0x20)
                {
                  v150 = (unint64_t *)v142;
                  goto LABEL_235;
                }
                v153 = (v149 >> 3) + 1;
                v154 = 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
                v150 = (unint64_t *)&v142[-v154];
                v147 = (unint64_t *)((char *)v147 - v154);
                v155 = &v146[8 * v143 - 16];
                v156 = v142 - 16;
                v157 = v153 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v158 = *(_OWORD *)v156;
                  *(v155 - 1) = *((_OWORD *)v156 - 1);
                  *v155 = v158;
                  v155 -= 2;
                  v156 -= 32;
                  v157 -= 4;
                }
                while (v157);
                if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_235:
                    v151 = *--v150;
                    *--v147 = v151;
                  }
                  while (v150 != v141);
                }
              }
              else
              {
                v146 = 0;
                v147 = (unint64_t *)(8 * v143);
                *(_QWORD *)(8 * v143) = *((_QWORD *)v137 + 2);
                v136 = (unint64_t *)(8 * v143 + 8);
                v148 = v142 - (char *)v141;
                if (v142 != (char *)v141)
                  goto LABEL_233;
              }
LABEL_236:
              v135 = (unint64_t *)&v146[8 * v145];
              if (v141)
                operator delete(v141);
              v141 = v147;
              v142 = (char *)v136;
              goto LABEL_219;
            }
            *(_QWORD *)v142 = *((_QWORD *)v137 + 2);
            v142 += 8;
            v136 = (unint64_t *)v142;
          }
LABEL_219:
          v137 = *(float **)v137;
          if (!v137)
          {
            v322 = v136;
            v323 = v135;
            v321 = v141;
            v59 = __p;
            goto LABEL_251;
          }
        }
      }
    }
    while (1)
    {
      v85 = (unint64_t)v327[1];
      if (v327[1])
      {
        v86 = (uint8x8_t)vcnt_s8((int8x8_t)v327[1]);
        v86.i16[0] = vaddlv_u8(v86);
        if (v86.u32[0] > 1uLL)
        {
          a1 = v83;
          if (v327[1] <= (void *)v83)
            a1 = v83 % (unint64_t)v327[1];
        }
        else
        {
          a1 = ((unint64_t)v327[1] - 1) & v83;
        }
        v87 = (void **)*((_QWORD *)v327[0] + a1);
        if (v87)
        {
          v88 = (char *)*v87;
          if (*v87)
          {
            if (v86.u32[0] < 2uLL)
            {
              while (1)
              {
                v90 = *((_QWORD *)v88 + 1);
                if (v90 == v83)
                {
                  if (*((_QWORD *)v88 + 2) == v83)
                    goto LABEL_193;
                }
                else if ((v90 & ((unint64_t)v327[1] - 1)) != a1)
                {
                  goto LABEL_120;
                }
                v88 = *(char **)v88;
                if (!v88)
                  goto LABEL_120;
              }
            }
            do
            {
              v89 = *((_QWORD *)v88 + 1);
              if (v89 == v83)
              {
                if (*((_QWORD *)v88 + 2) == v83)
                  goto LABEL_193;
              }
              else
              {
                if ((void *)v89 >= v327[1])
                  v89 %= (unint64_t)v327[1];
                if (v89 != a1)
                  break;
              }
              v88 = *(char **)v88;
            }
            while (v88);
          }
        }
      }
LABEL_120:
      v88 = (char *)operator new(0x40uLL);
      *(_QWORD *)v88 = 0;
      *((_QWORD *)v88 + 1) = v83;
      *((_QWORD *)v88 + 2) = v83;
      *(_OWORD *)(v88 + 24) = 0u;
      *(_OWORD *)(v88 + 40) = 0u;
      *((_QWORD *)v88 + 7) = 0;
      v91 = (float)((unint64_t)v328[1] + 1);
      if (!v85 || (float)(v329 * (float)v85) < v91)
        break;
      v92 = v327[0];
      v93 = (_QWORD *)*((_QWORD *)v327[0] + a1);
      if (v93)
        goto LABEL_123;
LABEL_172:
      *(void **)v88 = v328[0];
      v328[0] = v88;
      v92[a1] = v328;
      if (*(_QWORD *)v88)
      {
        v114 = *(_QWORD *)(*(_QWORD *)v88 + 8);
        if ((v85 & (v85 - 1)) != 0)
        {
          if (v114 >= v85)
            v114 %= v85;
        }
        else
        {
          v114 &= v85 - 1;
        }
        v93 = (char *)v327[0] + 8 * v114;
        goto LABEL_191;
      }
LABEL_192:
      ++v328[1];
LABEL_193:
      *((float *)v88 + 6) = *((float *)v88 + 6)
                          + (float)(*(float *)(*((_QWORD *)v74 - 7) + 28)
                                  * *(float *)(*((_QWORD *)v74 - 4) + 4 * (v83 - *((_QWORD *)v74 - 6))));
      v118 = (_QWORD *)*((_QWORD *)v88 + 5);
      v117 = *((_QWORD *)v88 + 6);
      if ((unint64_t)v118 >= v117)
      {
        a1 = *((_QWORD *)v88 + 4);
        v119 = (uint64_t)((uint64_t)v118 - a1) >> 3;
        v120 = v119 + 1;
        if ((unint64_t)(v119 + 1) >> 61)
          sub_20E867F44();
        v121 = v117 - a1;
        if (v121 >> 2 > v120)
          v120 = v121 >> 2;
        if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
          v122 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v122 = v120;
        if (v122)
        {
          if (v122 >> 61)
LABEL_453:
            sub_20E877A38();
          v123 = (char *)operator new(8 * v122);
          v124 = &v123[8 * v119];
          *(_QWORD *)v124 = v67;
          v84 = (uint64_t)(v124 + 8);
          v125 = (char *)v118 - a1;
          if (v118 == (_QWORD *)a1)
            goto LABEL_211;
        }
        else
        {
          v123 = 0;
          v124 = (char *)(8 * v119);
          *(_QWORD *)(8 * v119) = v67;
          v84 = 8 * v119 + 8;
          v125 = (char *)v118 - a1;
          if (v118 == (_QWORD *)a1)
          {
LABEL_211:
            *((_QWORD *)v88 + 4) = v124;
            *((_QWORD *)v88 + 5) = v84;
            *((_QWORD *)v88 + 6) = &v123[8 * v122];
            if (a1)
              operator delete((void *)a1);
            goto LABEL_99;
          }
        }
        v126 = (unint64_t)(v125 - 8);
        if (v126 < 0x58)
          goto LABEL_473;
        if (a1 - (unint64_t)v123 < 0x20)
          goto LABEL_473;
        v127 = (v126 >> 3) + 1;
        v128 = 8 * (v127 & 0x3FFFFFFFFFFFFFFCLL);
        v129 = &v118[v128 / 0xFFFFFFFFFFFFFFF8];
        v124 -= v128;
        v130 = &v123[8 * v119 - 16];
        v131 = (__int128 *)(v118 - 2);
        v132 = v127 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v133 = *v131;
          *((_OWORD *)v130 - 1) = *(v131 - 1);
          *(_OWORD *)v130 = v133;
          v130 -= 32;
          v131 -= 2;
          v132 -= 4;
        }
        while (v132);
        v118 = v129;
        if (v127 != (v127 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_473:
          do
          {
            v134 = *--v118;
            *((_QWORD *)v124 - 1) = v134;
            v124 -= 8;
          }
          while (v118 != (_QWORD *)a1);
        }
        goto LABEL_211;
      }
      *v118 = v67;
      v84 = (uint64_t)(v118 + 1);
LABEL_99:
      *((_QWORD *)v88 + 5) = v84;
      *((float *)v88 + 14) = *(float *)(*((_QWORD *)v74 - 7) + 28) + *((float *)v88 + 14);
      ++v83;
      v59 = __p;
      if (v83 > *((_QWORD *)v74 - 5))
        goto LABEL_76;
    }
    v94 = (v85 & (v85 - 1)) == 0;
    if (v85 < 3)
      v94 = 0;
    v95 = (2 * v85) | !v94;
    v96 = vcvtps_u32_f32(v91 / v329);
    if (v95 <= v96)
      prime = v96;
    else
      prime = v95;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v85 = (unint64_t)v327[1];
    }
    if (prime <= v85)
    {
      if (prime >= v85)
        goto LABEL_170;
      v108 = vcvtps_u32_f32((float)(unint64_t)v328[1] / v329);
      if (v85 < 3 || (v109 = (uint8x8_t)vcnt_s8((int8x8_t)v85), v109.i16[0] = vaddlv_u8(v109), v109.u32[0] > 1uLL))
      {
        v108 = std::__next_prime(v108);
      }
      else
      {
        v110 = 1 << -(char)__clz(v108 - 1);
        if (v108 >= 2)
          v108 = v110;
      }
      if (prime <= v108)
        prime = v108;
      if (prime >= v85)
      {
        v85 = (unint64_t)v327[1];
        v113 = (uint64_t)v327[1] - 1;
        if (((unint64_t)v327[1] & ((unint64_t)v327[1] - 1)) == 0)
          goto LABEL_171;
LABEL_183:
        if (v85 <= v83)
        {
          a1 = v83 % v85;
          v92 = v327[0];
          v93 = (_QWORD *)*((_QWORD *)v327[0] + v83 % v85);
          if (!v93)
            goto LABEL_172;
        }
        else
        {
          a1 = v83;
          v92 = v327[0];
          v93 = (_QWORD *)*((_QWORD *)v327[0] + v83);
          if (!v93)
            goto LABEL_172;
        }
LABEL_123:
        *(_QWORD *)v88 = *v93;
LABEL_191:
        *v93 = v88;
        goto LABEL_192;
      }
      if (!prime)
      {
        v112 = v327[0];
        v327[0] = 0;
        if (v112)
          operator delete(v112);
        v85 = 0;
        v327[1] = 0;
        v113 = -1;
        goto LABEL_171;
      }
    }
    if (prime >> 61)
      sub_20E877A38();
    v98 = operator new(8 * prime);
    v99 = v327[0];
    v327[0] = v98;
    if (v99)
      operator delete(v99);
    v100 = 0;
    v327[1] = (void *)prime;
    do
      *((_QWORD *)v327[0] + v100++) = 0;
    while (prime != v100);
    v101 = (_QWORD **)v328[0];
    if (!v328[0])
    {
LABEL_182:
      v85 = prime;
      v113 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_183;
LABEL_171:
      a1 = v113 & v83;
      v92 = v327[0];
      v93 = (_QWORD *)*((_QWORD *)v327[0] + (v113 & v83));
      if (!v93)
        goto LABEL_172;
      goto LABEL_123;
    }
    v102 = *((_QWORD *)v328[0] + 1);
    v103 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v104 = v102 & v103;
      *((_QWORD *)v327[0] + v104) = v328;
      for (m = *v101; *v101; m = *v101)
      {
        v106 = m[1] & v103;
        if (v106 == v104)
        {
          v101 = (_QWORD **)m;
        }
        else if (*((_QWORD *)v327[0] + v106))
        {
          *v101 = (_QWORD *)*m;
          v107 = 8 * v106;
          *m = **(_QWORD **)((char *)v327[0] + v107);
          **(_QWORD **)((char *)v327[0] + v107) = m;
        }
        else
        {
          *((_QWORD *)v327[0] + v106) = v101;
          v101 = (_QWORD **)m;
          v104 = v106;
        }
      }
      goto LABEL_182;
    }
    if (v102 < prime)
    {
      *((_QWORD *)v327[0] + v102) = v328;
      v111 = *v101;
      if (*v101)
        goto LABEL_177;
      goto LABEL_169;
    }
    v102 %= prime;
    *((_QWORD *)v327[0] + v102) = v328;
    v111 = *v101;
    if (!*v101)
    {
LABEL_169:
      v85 = prime;
LABEL_170:
      v113 = v85 - 1;
      if ((v85 & (v85 - 1)) != 0)
        goto LABEL_183;
      goto LABEL_171;
    }
    while (1)
    {
LABEL_177:
      v116 = v111[1];
      if (v116 >= prime)
        v116 %= prime;
      if (v116 == v102)
        goto LABEL_176;
      if (*((_QWORD *)v327[0] + v116))
      {
        *v101 = (_QWORD *)*v111;
        v115 = 8 * v116;
        *v111 = **(_QWORD **)((char *)v327[0] + v115);
        **(_QWORD **)((char *)v327[0] + v115) = v111;
        v111 = v101;
LABEL_176:
        v101 = (_QWORD **)v111;
        v111 = (_QWORD *)*v111;
        if (!v111)
          goto LABEL_182;
      }
      else
      {
        *((_QWORD *)v327[0] + v116) = v101;
        v101 = (_QWORD **)v111;
        v111 = (_QWORD *)*v111;
        v102 = v116;
        if (!v111)
          goto LABEL_182;
      }
    }
  }
  *(_QWORD *)v294 = 0;
  *(_QWORD *)(v294 + 8) = 0;
  *(_QWORD *)(v294 + 16) = 0;
  v59 = __p;
LABEL_438:
  if (v59)
    operator delete(v59);
LABEL_440:
  if (!v337)
    sub_20E86D37C();
  (*(void (**)(_QWORD *))(*v337 + 48))(v337);
  result = v337;
  if (v337 == v336)
  {
    v289 = 4;
    result = v336;
  }
  else
  {
    if (!v337)
      return result;
    v289 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v289))();
}

void sub_20EF17670(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A600D0);
  _Unwind_Resume(a1);
}

void sub_20EF17688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,char a43)
{
  void *v43;
  uint64_t v44;

  sub_20EF17970(a12);
  if (__p)
    operator delete(__p);
  sub_20EF179F0(&a40);
  sub_20EF17A60((uint64_t)&a43);
  if (v43)
    operator delete(v43);
  sub_20E961DB0((_QWORD *)(v44 - 160));
  _Unwind_Resume(a1);
}

void sub_20EF1787C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A600E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A600E0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.acv.trace");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A600D8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A600E0);
  }
  *a1 = qword_254A600D8;
}

void sub_20EF17918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A600E0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A600E0);
  _Unwind_Resume(a1);
}

void **sub_20EF17970(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20EF179F0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EF17A60(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[4];
      if (v6)
      {
        v2[5] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

float sub_20EF17AC8(uint64_t a1, float *a2, uint64_t a3, char a4, float result)
{
  float *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  int v19;
  float v20;
  int *v21;
  float v22;
  float v23;
  int v24;
  float v25;
  int *v26;
  float *v27;
  int v28;
  int v29;
  float v30;
  int v31;
  int v32;
  float v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  int v42;
  float v43;
  int *v44;
  int v45;
  int v46;
  float v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  int *v55;
  int v56;
  int v57;
  float v58;
  float *v59;
  int v60;
  float v61;
  int v62;
  float v63;
  float v64;
  int v65;
  int v66;
  int *v67;
  int *v68;
  int *v69;
  int v70;
  int v71;
  float v72;
  int v73;
  uint64_t v74;
  int v75;
  float v76;
  unint64_t v77;
  float *v78;
  float v79;
  float v80;
  float v81;
  float *v82;
  int v83;
  float v84;
  float v85;
  float *v86;
  BOOL v87;
  unint64_t v88;
  float v89;
  float *v90;
  float v91;
  int v92;
  float v93;
  float v94;
  int v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  int v101;
  float v102;
  float *v103;
  float v104;
  int v105;
  float v106;
  int v107;
  int v108;
  float v109;
  int v110;
  float v111;
  int v112;
  float *v113;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  float *v119;
  int v120;
  uint64_t v121;
  float v122;
  int64_t v123;
  int64_t v124;
  BOOL v125;
  uint64_t v126;
  float *v127;
  float *v128;
  int v129;
  float *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float *v136;
  float *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  float *v142;
  int v143;
  float *v144;
  int v145;
  int v146;
  float v147;
  uint64_t v148;
  int v149;
  float *v150;
  uint64_t v151;

BOOL sub_20EF18570(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  float v11;
  int *v12;
  int v13;
  float v14;
  float v15;
  int *v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  int *v21;
  int v22;
  int v23;
  int *v24;
  float v25;
  float v26;
  int v27;
  float v28;
  float v29;
  int v30;
  int v31;
  float v32;
  int v33;
  float v34;
  int v35;
  int v36;
  int v37;
  float v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  float v46;
  int v47;
  uint64_t v48;
  float v49;
  uint64_t v50;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)a1;
      if (v6 <= *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      v9 = *(float *)(a1 + 8);
      v10 = *(float *)a1;
      v11 = *(float *)(a2 - 8);
      if (v9 <= *(float *)a1)
      {
        if (v11 <= v9)
        {
          v16 = (int *)(a1 + 4);
          *(float *)a1 = v11;
        }
        else
        {
          v16 = (int *)(a1 + 12);
          v36 = *(_DWORD *)(a1 + 12);
          v37 = *(_DWORD *)(a1 + 4);
          *(float *)a1 = v9;
          *(_DWORD *)(a1 + 4) = v36;
          *(float *)(a1 + 8) = v10;
          *(_DWORD *)(a1 + 12) = v37;
          v38 = *(float *)(a2 - 8);
          if (v38 > v10)
            return result;
          *(float *)(a1 + 8) = v38;
        }
        *(float *)(a2 - 8) = v10;
        v12 = (int *)(a2 - 4);
        goto LABEL_28;
      }
      if (v11 <= v9)
      {
        *(float *)(a1 + 8) = v11;
        *(float *)(a2 - 8) = v9;
        v12 = (int *)(a1 + 12);
        v13 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v13;
        v14 = *(float *)(a1 + 8);
        v15 = *(float *)a1;
        if (v14 <= *(float *)a1)
        {
          *(float *)a1 = v14;
          *(float *)(a1 + 8) = v15;
          v16 = (int *)(a1 + 4);
LABEL_28:
          v41 = *v16;
          *v16 = *v12;
          *v12 = v41;
          return result;
        }
      }
      return result;
    case 4:
      sub_20EEFE38C((_DWORD *)a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      sub_20EEFE38C((_DWORD *)a1, a1 + 8, a1 + 16, a1 + 24);
      v25 = *(float *)(a2 - 8);
      v26 = *(float *)(a1 + 24);
      if (v25 > v26)
        return 1;
      *(float *)(a1 + 24) = v25;
      *(float *)(a2 - 8) = v26;
      v27 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = v27;
      v28 = *(float *)(a1 + 24);
      v29 = *(float *)(a1 + 16);
      if (v28 > v29)
        return 1;
      v30 = *(_DWORD *)(a1 + 20);
      v31 = *(_DWORD *)(a1 + 28);
      *(float *)(a1 + 16) = v28;
      *(_DWORD *)(a1 + 20) = v31;
      *(float *)(a1 + 24) = v29;
      *(_DWORD *)(a1 + 28) = v30;
      v32 = *(float *)(a1 + 8);
      if (v28 > v32)
        return 1;
      v33 = *(_DWORD *)(a1 + 12);
      *(float *)(a1 + 8) = v28;
      *(_DWORD *)(a1 + 12) = v31;
      *(float *)(a1 + 16) = v32;
      *(_DWORD *)(a1 + 20) = v33;
      v34 = *(float *)a1;
      if (v28 > *(float *)a1)
        return 1;
      v35 = *(_DWORD *)(a1 + 4);
      *(float *)a1 = v28;
      *(_DWORD *)(a1 + 4) = v31;
      *(float *)(a1 + 8) = v34;
      *(_DWORD *)(a1 + 12) = v35;
      return 1;
    default:
      v17 = (float *)(a1 + 16);
      v18 = *(float *)(a1 + 16);
      v19 = *(float *)(a1 + 8);
      v20 = *(float *)a1;
      if (v19 <= *(float *)a1)
      {
        if (v18 <= v19)
        {
          v24 = (int *)(a1 + 4);
          *(float *)a1 = v18;
        }
        else
        {
          v24 = (int *)(a1 + 12);
          v39 = *(_DWORD *)(a1 + 12);
          v40 = *(_DWORD *)(a1 + 4);
          *(float *)a1 = v19;
          *(_DWORD *)(a1 + 4) = v39;
          *(float *)(a1 + 8) = v20;
          *(_DWORD *)(a1 + 12) = v40;
          if (v18 > v20)
            goto LABEL_32;
          *(float *)(a1 + 8) = v18;
        }
        *(float *)(a1 + 16) = v20;
        v21 = (int *)(a1 + 20);
        goto LABEL_31;
      }
      if (v18 <= v19)
      {
        v21 = (int *)(a1 + 12);
        v22 = *(_DWORD *)(a1 + 12);
        v23 = *(_DWORD *)(a1 + 20);
        *(float *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 20) = v22;
        *(float *)(a1 + 8) = v18;
        *(_DWORD *)(a1 + 12) = v23;
        if (v18 <= v20)
        {
          *(float *)a1 = v18;
          *(float *)(a1 + 8) = v20;
          v24 = (int *)(a1 + 4);
LABEL_31:
          v42 = *v24;
          *v24 = *v21;
          *v21 = v42;
        }
      }
LABEL_32:
      v43 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v44 = 0;
      v45 = 0;
      while (1)
      {
        v46 = *(float *)v43;
        if (*(float *)v43 <= *v17)
          break;
LABEL_41:
        v17 = (float *)v43;
        v44 += 8;
        v43 += 8;
        if (v43 == a2)
          return 1;
      }
      v47 = *(_DWORD *)(v43 + 4);
      v48 = v44;
      do
      {
        *(_QWORD *)(a1 + v48 + 24) = *(_QWORD *)(a1 + v48 + 16);
        if (v48 == -16)
        {
          *(float *)a1 = v46;
          *(_DWORD *)(a1 + 4) = v47;
          if (++v45 != 8)
            goto LABEL_41;
          return v43 + 8 == a2;
        }
        v49 = *(float *)(a1 + v48 + 8);
        v48 -= 8;
      }
      while (v49 >= v46);
      v50 = a1 + v48;
      *(float *)(v50 + 24) = v46;
      *(_DWORD *)(v50 + 28) = v47;
      if (++v45 != 8)
        goto LABEL_41;
      return v43 + 8 == a2;
  }
}

_QWORD *sub_20EF188C0(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = *result;
  v3 = result[1];
  v5 = a2[1];
  if (v3 != *result)
  {
    v17 = result;
    v6 = 0;
    do
    {
      v8 = v5 + v6;
      v9 = *(_OWORD *)(v3 + v6 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(v3 + v6 - 40);
      *(_QWORD *)(v5 + v6 - 32) = 0;
      *(_OWORD *)(v8 - 56) = v9;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      v11 = *(_BYTE **)(v3 + v6 - 32);
      v10 = *(_BYTE **)(v3 + v6 - 24);
      v12 = v10 - v11;
      if (v10 != v11)
      {
        if (v12 < 0)
          sub_20E867F44();
        v13 = (char *)operator new(v10 - v11);
        *(_QWORD *)(v5 + v6 - 32) = v13;
        v7 = &v13[4 * (v12 >> 2)];
        *(_QWORD *)(v8 - 24) = v13;
        *(_QWORD *)(v8 - 16) = v7;
        memcpy(v13, v11, v12);
        *(_QWORD *)(v8 - 24) = v7;
      }
      *(_BYTE *)(v8 - 8) = *(_BYTE *)(v3 + v6 - 8);
      v6 -= 56;
    }
    while (v3 + v6 != v4);
    v5 += v6;
    result = v17;
  }
  a2[1] = v5;
  v14 = *result;
  *result = v5;
  a2[1] = v14;
  v15 = result[1];
  result[1] = a2[2];
  a2[2] = v15;
  v16 = result[2];
  result[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

void sub_20EF189E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;

  v4 = *(void **)(v1 + v2 - 32);
  if (v4)
  {
    *(_QWORD *)(v1 + v2 - 24) = v4;
    operator delete(v4);
  }
  for (; v2; v2 += 56)
  {
    v5 = *(void **)(v1 + v2 + 24);
    if (v5)
    {
      *(_QWORD *)(v1 + v2 + 32) = v5;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF18A30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 56;
        *(_QWORD *)(a1 + 16) = v2 - 56;
        v5 = *(void **)(v2 - 32);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 56;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EF18A9C(uint64_t result, unint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float **v29;
  float *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  float **v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  int8x8_t v46;
  uint8x8_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  float **v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  float **v61;
  float *v62;
  float v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  float **v68;
  float *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  float **v74;
  float *v75;
  float v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  BOOL v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  int8x8_t v89;
  uint8x8_t v90;
  unint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  float **v98;
  float *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  float **v104;
  float *v105;
  float v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  float **v110;
  float *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  float **v115;
  float *v116;
  float v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  BOOL v124;
  unint64_t *v125;
  unint64_t *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  int8x8_t v131;
  uint8x8_t v132;
  unint64_t v133;
  float **v134;
  float *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  float **v140;
  float *v141;
  uint64_t v142;
  unint64_t v143;
  int64_t v144;
  int64_t v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t *v148;
  uint64_t **v149;
  unint64_t v150;
  uint64_t **v151;
  uint64_t v152;
  unint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  int8x8_t v164;
  unint64_t v165;
  uint8x8_t v166;
  unint64_t v167;
  float **v168;
  float *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  float **v175;
  float *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  int8x8_t v186;
  uint8x8_t v187;
  unint64_t v188;
  float **v189;
  float *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  float **v195;
  float *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t *v201;
  unint64_t *v202;
  unint64_t v203;
  int8x8_t v204;
  uint8x8_t v205;
  unint64_t v206;
  float **v207;
  float *v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  float **v213;
  float *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t *v217;
  int64_t v218;
  unint64_t *v219;
  unint64_t *v220;
  int64_t v221;

  v9 = (unint64_t *)result;
LABEL_2:
  v220 = a2 - 1;
  v10 = v9;
  while (2)
  {
    v11 = v10;
    v12 = (char *)a2 - (char *)v10;
    v13 = a2 - v10;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_20EF19F68(*a3, *(a2 - 1), *v10);
        if ((_DWORD)result)
        {
          v121 = *v10;
          *v10 = *(a2 - 1);
          *(a2 - 1) = v121;
        }
        return result;
      case 3:
        return sub_20EF1A1E8(v10, v10 + 1, v220, a3);
      case 4:
        return sub_20EF1A4C8(v10, v10 + 1, v10 + 2, v220, a3);
      case 5:
        return sub_20EF1A110(v10, v10 + 1, v10 + 2, v10 + 3, v220, a3);
      default:
        if (v12 > 191)
        {
          if (!a4)
          {
            if (v10 == a2)
              return result;
            v217 = a2;
            v144 = (unint64_t)(v13 - 2) >> 1;
            v219 = v10;
            v221 = v144;
            do
            {
              v145 = v144;
              if (v221 >= v144)
              {
                v146 = (2 * v144) | 1;
                v147 = &v11[v146];
                if (2 * v144 + 2 < v13 && sub_20EF19F68(*a3, *v147, v147[1]))
                {
                  ++v147;
                  v146 = 2 * v145 + 2;
                }
                v148 = &v11[v145];
                if (!sub_20EF19F68(*a3, *v147, *v148))
                {
                  v218 = v145;
                  v149 = a3;
                  v150 = *v148;
                  do
                  {
                    v153 = v147;
                    *v148 = *v147;
                    if (v221 < v146)
                      break;
                    v152 = (2 * v146) | 1;
                    v147 = &v219[v152];
                    v154 = 2 * v146 + 2;
                    if (v154 < v13)
                    {
                      v151 = v149;
                      if (sub_20EF19F68(*v149, *v147, v147[1]))
                      {
                        ++v147;
                        v152 = v154;
                      }
                    }
                    else
                    {
                      v151 = v149;
                    }
                    v148 = v153;
                    v146 = v152;
                  }
                  while (!sub_20EF19F68(*v151, *v147, v150));
                  *v153 = v150;
                  a3 = v149;
                  v145 = v218;
                  v11 = v219;
                }
              }
              v144 = v145 - 1;
            }
            while (v145);
            v155 = (unint64_t)v12 >> 3;
            v156 = v217;
            while (1)
            {
              v158 = 0;
              v159 = *v11;
              result = (uint64_t)*a3;
              v160 = v11;
              while (2)
              {
                v161 = &v160[v158 + 1];
                v162 = (2 * v158) | 1;
                v163 = 2 * v158 + 2;
                if (v163 >= v155)
                  goto LABEL_339;
                v164 = *(int8x8_t *)(result + 8);
                if (!*(_QWORD *)&v164)
                  goto LABEL_475;
                v165 = *v161;
                v166 = (uint8x8_t)vcnt_s8(v164);
                v166.i16[0] = vaddlv_u8(v166);
                if (v166.u32[0] > 1uLL)
                {
                  v167 = *v161;
                  if (*(_QWORD *)&v164 <= v165)
                    v167 = v165 % *(_QWORD *)&v164;
                }
                else
                {
                  v167 = (*(_QWORD *)&v164 - 1) & v165;
                }
                v168 = *(float ***)(*(_QWORD *)result + 8 * v167);
                if (!v168)
                  goto LABEL_475;
                v169 = *v168;
                if (!*v168)
                  goto LABEL_475;
                v170 = v161[1];
                v171 = *(_QWORD *)&v164 - 1;
                if (v166.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v172 = *((_QWORD *)v169 + 1);
                    if (v172 == v165)
                    {
                      if (*((_QWORD *)v169 + 2) == v165)
                        goto LABEL_354;
                    }
                    else if ((v172 & v171) != v167)
                    {
                      goto LABEL_475;
                    }
                    v169 = *(float **)v169;
                    if (!v169)
                      goto LABEL_475;
                  }
                }
                while (1)
                {
                  v174 = *((_QWORD *)v169 + 1);
                  if (v174 == v165)
                    break;
                  if (v174 >= *(_QWORD *)&v164)
                    v174 %= *(_QWORD *)&v164;
                  if (v174 != v167)
                    goto LABEL_475;
LABEL_357:
                  v169 = *(float **)v169;
                  if (!v169)
                    goto LABEL_475;
                }
                if (*((_QWORD *)v169 + 2) != v165)
                  goto LABEL_357;
LABEL_354:
                if (v166.u32[0] > 1uLL)
                {
                  v173 = v161[1];
                  if (*(_QWORD *)&v164 <= v170)
                    v173 = v170 % *(_QWORD *)&v164;
                }
                else
                {
                  v173 = v171 & v170;
                }
                v175 = *(float ***)(*(_QWORD *)result + 8 * v173);
                if (!v175)
                  goto LABEL_475;
                v176 = *v175;
                if (!v176)
                  goto LABEL_475;
                if (v166.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v177 = *((_QWORD *)v176 + 1);
                    if (v177 == v170)
                    {
                      if (*((_QWORD *)v176 + 2) == v170)
                        goto LABEL_337;
                    }
                    else if ((v177 & v171) != v173)
                    {
                      goto LABEL_475;
                    }
                    v176 = *(float **)v176;
                    if (!v176)
                      goto LABEL_475;
                  }
                }
                while (2)
                {
                  v178 = *((_QWORD *)v176 + 1);
                  if (v178 != v170)
                  {
                    if (v178 >= *(_QWORD *)&v164)
                      v178 %= *(_QWORD *)&v164;
                    if (v178 != v173)
                      goto LABEL_475;
LABEL_375:
                    v176 = *(float **)v176;
                    if (!v176)
                      goto LABEL_475;
                    continue;
                  }
                  break;
                }
                if (*((_QWORD *)v176 + 2) != v170)
                  goto LABEL_375;
LABEL_337:
                if (v169[6] < v176[6])
                {
                  ++v161;
                  v162 = v163;
                }
LABEL_339:
                *v160 = *v161;
                v160 = v161;
                v158 = v162;
                if (v162 <= (uint64_t)((unint64_t)(v155 - 2) >> 1))
                  continue;
                break;
              }
              if (v161 == --v156)
              {
                *v161 = v159;
                goto LABEL_335;
              }
              *v161 = *v156;
              *v156 = v159;
              v179 = (char *)v161 - (char *)v11 + 8;
              if (v179 >= 9)
              {
                v180 = (((unint64_t)v179 >> 3) - 2) >> 1;
                v181 = &v11[v180];
                result = sub_20EF19F68((_QWORD *)result, *v181, *v161);
                if ((_DWORD)result)
                {
                  v182 = *v161;
                  v183 = *a3;
                  v184 = *v181;
                  while (1)
                  {
                    v185 = v181;
                    *v161 = v184;
                    if (!v180)
                    {
LABEL_427:
                      *v185 = v182;
                      break;
                    }
                    v186 = (int8x8_t)v183[1];
                    if (!*(_QWORD *)&v186)
                      goto LABEL_475;
                    v180 = (v180 - 1) >> 1;
                    v181 = &v11[v180];
                    v184 = *v181;
                    v187 = (uint8x8_t)vcnt_s8(v186);
                    v187.i16[0] = vaddlv_u8(v187);
                    if (v187.u32[0] > 1uLL)
                    {
                      v188 = *v181;
                      if (*(_QWORD *)&v186 <= v184)
                        v188 = v184 % *(_QWORD *)&v186;
                    }
                    else
                    {
                      v188 = (*(_QWORD *)&v186 - 1) & v184;
                    }
                    v189 = *(float ***)(*v183 + 8 * v188);
                    if (!v189)
                      goto LABEL_475;
                    v190 = *v189;
                    if (!*v189)
                      goto LABEL_475;
                    v191 = *(_QWORD *)&v186 - 1;
                    if (v187.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v192 = *((_QWORD *)v190 + 1);
                        if (v192 == v184)
                        {
                          result = *((_QWORD *)v190 + 2);
                          if (result == v184)
                            goto LABEL_400;
                        }
                        else if ((v192 & v191) != v188)
                        {
                          goto LABEL_475;
                        }
                        v190 = *(float **)v190;
                        if (!v190)
                          goto LABEL_475;
                      }
                    }
                    while (1)
                    {
                      v194 = *((_QWORD *)v190 + 1);
                      if (v194 == v184)
                        break;
                      if (v194 >= *(_QWORD *)&v186)
                        v194 %= *(_QWORD *)&v186;
                      if (v194 != v188)
                        goto LABEL_475;
LABEL_403:
                      v190 = *(float **)v190;
                      if (!v190)
                        goto LABEL_475;
                    }
                    result = *((_QWORD *)v190 + 2);
                    if (result != v184)
                      goto LABEL_403;
LABEL_400:
                    if (v187.u32[0] > 1uLL)
                    {
                      v193 = v182;
                      if (*(_QWORD *)&v186 <= v182)
                        v193 = v182 % *(_QWORD *)&v186;
                    }
                    else
                    {
                      v193 = v191 & v182;
                    }
                    v195 = *(float ***)(*v183 + 8 * v193);
                    if (!v195)
                      goto LABEL_475;
                    v196 = *v195;
                    if (!v196)
                      goto LABEL_475;
                    if (v187.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v197 = *((_QWORD *)v196 + 1);
                        if (v197 == v182)
                        {
                          if (*((_QWORD *)v196 + 2) == v182)
                            goto LABEL_385;
                        }
                        else if ((v197 & v191) != v193)
                        {
                          goto LABEL_475;
                        }
                        v196 = *(float **)v196;
                        if (!v196)
                          goto LABEL_475;
                      }
                    }
                    while (2)
                    {
                      v198 = *((_QWORD *)v196 + 1);
                      if (v198 != v182)
                      {
                        if (v198 >= *(_QWORD *)&v186)
                          v198 %= *(_QWORD *)&v186;
                        if (v198 != v193)
                          goto LABEL_475;
LABEL_421:
                        v196 = *(float **)v196;
                        if (!v196)
                          goto LABEL_475;
                        continue;
                      }
                      break;
                    }
                    if (*((_QWORD *)v196 + 2) != v182)
                      goto LABEL_421;
LABEL_385:
                    v161 = v185;
                    if (v190[6] >= v196[6])
                      goto LABEL_427;
                  }
                }
              }
LABEL_335:
              if (v155-- <= 2)
                return result;
            }
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v10[(unint64_t)v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_20EF1A1E8(v15, v10, v220, a3);
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_11;
LABEL_10:
            if (sub_20EF19F68(*a3, *(v10 - 1), *v10))
              goto LABEL_11;
            v81 = *v10;
            result = sub_20EF19F68(*a3, *v10, *v220);
            if ((result & 1) != 0)
            {
              do
              {
                v82 = v10[1];
                ++v10;
                result = sub_20EF19F68(*a3, v81, v82);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v83 = v10 + 1;
              do
              {
                v10 = v83;
                if (v83 >= a2)
                  break;
                ++v83;
                result = sub_20EF19F68(*a3, v81, *v10);
              }
              while (!(_DWORD)result);
            }
            v84 = a2;
            if (v10 < a2)
            {
              v84 = a2;
              do
              {
                v85 = *--v84;
                result = sub_20EF19F68(*a3, v81, v85);
              }
              while ((result & 1) != 0);
            }
            if (v10 < v84)
            {
              v86 = *a3;
              v87 = *v10;
              v88 = *v84;
              do
              {
                *v10 = v88;
                *v84 = v87;
                v89 = (int8x8_t)v86[1];
                if (!*(_QWORD *)&v89)
                  goto LABEL_475;
                v90 = (uint8x8_t)vcnt_s8(v89);
                v90.i16[0] = vaddlv_u8(v90);
                v91 = v90.u32[0];
                v92 = *(_QWORD *)&v89 - 1;
                v93 = *(_QWORD *)&v89 > v81;
                v94 = *v86;
                if (v90.u32[0] >= 2uLL)
                {
                  v95 = -1;
                }
                else
                {
                  v93 = 1;
                  v95 = *(_QWORD *)&v89 - 1;
                }
                v96 = v95 & v81;
                while (2)
                {
                  v97 = v96;
                  if (!v93)
                    v97 = v81 % *(_QWORD *)&v89;
                  v98 = *(float ***)(v94 + 8 * v97);
                  if (!v98)
                    goto LABEL_475;
                  v99 = *v98;
                  if (!*v98)
                    goto LABEL_475;
                  v100 = v10[1];
                  ++v10;
                  v87 = v100;
                  if (v91 < 2)
                  {
                    while (1)
                    {
                      v101 = *((_QWORD *)v99 + 1);
                      if (v101 == v81)
                      {
                        if (*((_QWORD *)v99 + 2) == v81)
                          goto LABEL_184;
                      }
                      else if ((v101 & v92) != v97)
                      {
                        goto LABEL_475;
                      }
                      v99 = *(float **)v99;
                      if (!v99)
                        goto LABEL_475;
                    }
                  }
                  while (1)
                  {
                    v103 = *((_QWORD *)v99 + 1);
                    if (v103 == v81)
                      break;
                    if (v103 >= *(_QWORD *)&v89)
                      v103 %= *(_QWORD *)&v89;
                    if (v103 != v97)
                      goto LABEL_475;
LABEL_187:
                    v99 = *(float **)v99;
                    if (!v99)
                      goto LABEL_475;
                  }
                  if (*((_QWORD *)v99 + 2) != v81)
                    goto LABEL_187;
LABEL_184:
                  if (v91 > 1)
                  {
                    v102 = v87;
                    if (*(_QWORD *)&v89 <= v87)
                      v102 = v87 % *(_QWORD *)&v89;
                  }
                  else
                  {
                    v102 = v87 & v92;
                  }
                  v104 = *(float ***)(v94 + 8 * v102);
                  if (!v104)
                    goto LABEL_475;
                  v105 = *v104;
                  if (!v105)
                    goto LABEL_475;
                  v106 = v99[6];
                  if (v91 < 2)
                  {
                    while (1)
                    {
                      v107 = *((_QWORD *)v105 + 1);
                      if (v107 == v87)
                      {
                        if (*((_QWORD *)v105 + 2) == v87)
                          goto LABEL_173;
                      }
                      else if ((v107 & v92) != v102)
                      {
                        goto LABEL_475;
                      }
                      v105 = *(float **)v105;
                      if (!v105)
                        goto LABEL_475;
                    }
                  }
                  while (2)
                  {
                    v108 = *((_QWORD *)v105 + 1);
                    if (v108 != v87)
                    {
                      if (v108 >= *(_QWORD *)&v89)
                        v108 %= *(_QWORD *)&v89;
                      if (v108 != v102)
                        goto LABEL_475;
LABEL_205:
                      v105 = *(float **)v105;
                      if (!v105)
                        goto LABEL_475;
                      continue;
                    }
                    break;
                  }
                  if (*((_QWORD *)v105 + 2) != v87)
                    goto LABEL_205;
LABEL_173:
                  if (v106 >= v105[6])
                    continue;
                  break;
                }
                while (2)
                {
                  v109 = v96;
                  if (!v93)
                    v109 = v81 % *(_QWORD *)&v89;
                  v110 = *(float ***)(v94 + 8 * v109);
                  if (!v110)
                    goto LABEL_475;
                  v111 = *v110;
                  if (!*v110)
                    goto LABEL_475;
                  v112 = *--v84;
                  v88 = v112;
                  if (v91 < 2)
                  {
                    while (1)
                    {
                      v113 = *((_QWORD *)v111 + 1);
                      if (v113 == v81)
                      {
                        if (*((_QWORD *)v111 + 2) == v81)
                          goto LABEL_222;
                      }
                      else if ((v113 & v92) != v109)
                      {
                        goto LABEL_475;
                      }
                      v111 = *(float **)v111;
                      if (!v111)
                        goto LABEL_475;
                    }
                  }
                  while (2)
                  {
                    v114 = *((_QWORD *)v111 + 1);
                    if (v114 != v81)
                    {
                      if (v114 >= *(_QWORD *)&v89)
                        v114 %= *(_QWORD *)&v89;
                      if (v114 != v109)
                        goto LABEL_475;
LABEL_225:
                      v111 = *(float **)v111;
                      if (!v111)
                        goto LABEL_475;
                      continue;
                    }
                    break;
                  }
                  if (*((_QWORD *)v111 + 2) != v81)
                    goto LABEL_225;
LABEL_222:
                  if (v91 > 1)
                  {
                    result = v88;
                    if (*(_QWORD *)&v89 <= v88)
                      result = v88 % *(_QWORD *)&v89;
                  }
                  else
                  {
                    result = v88 & v92;
                  }
                  v115 = *(float ***)(v94 + 8 * result);
                  if (!v115)
                    goto LABEL_475;
                  v116 = *v115;
                  if (!v116)
                    goto LABEL_475;
                  v117 = v111[6];
                  if (v91 < 2)
                  {
                    while (1)
                    {
                      v118 = *((_QWORD *)v116 + 1);
                      if (v118 == v88)
                      {
                        if (*((_QWORD *)v116 + 2) == v88)
                          goto LABEL_211;
                      }
                      else if ((v118 & v92) != result)
                      {
                        goto LABEL_475;
                      }
                      v116 = *(float **)v116;
                      if (!v116)
                        goto LABEL_475;
                    }
                  }
                  while (2)
                  {
                    v119 = *((_QWORD *)v116 + 1);
                    if (v119 != v88)
                    {
                      if (v119 >= *(_QWORD *)&v89)
                        v119 %= *(_QWORD *)&v89;
                      if (v119 != result)
                        goto LABEL_475;
LABEL_243:
                      v116 = *(float **)v116;
                      if (!v116)
                        goto LABEL_475;
                      continue;
                    }
                    break;
                  }
                  if (*((_QWORD *)v116 + 2) != v88)
                    goto LABEL_243;
LABEL_211:
                  if (v117 < v116[6])
                    continue;
                  break;
                }
              }
              while (v10 < v84);
            }
            v120 = v10 - 1;
            if (v10 - 1 != v11)
              *v11 = *v120;
            a5 = 0;
            *v120 = v81;
            continue;
          }
          sub_20EF1A1E8(v10, v15, v220, a3);
          v16 = v14;
          sub_20EF1A1E8(v10 + 1, &v10[v16 - 1], a2 - 2, a3);
          sub_20EF1A1E8(v10 + 2, &v10[v16 + 1], a2 - 3, a3);
          sub_20EF1A1E8(&v10[v16 - 1], v15, &v10[v16 + 1], a3);
          v17 = *v10;
          *v10 = v10[v16];
          v10[v16] = v17;
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_10;
LABEL_11:
          v18 = (int8x8_t)(*a3)[1];
          if (!*(_QWORD *)&v18)
            goto LABEL_475;
          v19 = *v10;
          v20 = (uint8x8_t)vcnt_s8(v18);
          v20.i16[0] = vaddlv_u8(v20);
          v21 = v20.u32[0];
          v22 = *(_QWORD *)&v18 - 1;
          v23 = **a3;
          v24 = v10;
          while (2)
          {
            v25 = v24;
            v27 = v24[1];
            ++v24;
            v26 = v27;
            if (v21 > 1)
            {
              v28 = v26;
              if (*(_QWORD *)&v18 <= v26)
                v28 = v26 % *(_QWORD *)&v18;
            }
            else
            {
              v28 = v26 & v22;
            }
            v29 = *(float ***)(v23 + 8 * v28);
            if (!v29)
              goto LABEL_475;
            v30 = *v29;
            if (!v30)
              goto LABEL_475;
            if (v21 < 2)
            {
              while (1)
              {
                v31 = *((_QWORD *)v30 + 1);
                if (v31 == v26)
                {
                  if (*((_QWORD *)v30 + 2) == v26)
                  {
                    v32 = v30[6];
                    v33 = (*(_QWORD *)&v18 - 1) & *v10;
                    goto LABEL_37;
                  }
                }
                else if ((v31 & v22) != v28)
                {
                  goto LABEL_475;
                }
                v30 = *(float **)v30;
                if (!v30)
                  goto LABEL_475;
              }
            }
            while (1)
            {
              v34 = *((_QWORD *)v30 + 1);
              if (v34 == v26)
                break;
              if (v34 >= *(_QWORD *)&v18)
                v34 %= *(_QWORD *)&v18;
              if (v34 != v28)
                goto LABEL_475;
LABEL_28:
              v30 = *(float **)v30;
              if (!v30)
                goto LABEL_475;
            }
            if (*((_QWORD *)v30 + 2) != v26)
              goto LABEL_28;
            v32 = v30[6];
            if (*(_QWORD *)&v18 <= v19)
              v33 = v19 % *(_QWORD *)&v18;
            else
              v33 = *v10;
LABEL_37:
            v35 = *(float ***)(v23 + 8 * v33);
            if (!v35)
              goto LABEL_475;
            v36 = *v35;
            if (!v36)
              goto LABEL_475;
            if (v21 < 2)
            {
              while (1)
              {
                v37 = *((_QWORD *)v36 + 1);
                if (v37 == v19)
                {
                  if (*((_QWORD *)v36 + 2) == v19)
                    goto LABEL_13;
                }
                else if ((v37 & v22) != v33)
                {
                  goto LABEL_475;
                }
                v36 = *(float **)v36;
                if (!v36)
                  goto LABEL_475;
              }
            }
            while (2)
            {
              v38 = *((_QWORD *)v36 + 1);
              if (v38 != v19)
              {
                if (v38 >= *(_QWORD *)&v18)
                  v38 %= *(_QWORD *)&v18;
                if (v38 != v33)
                  goto LABEL_475;
LABEL_47:
                v36 = *(float **)v36;
                if (!v36)
                  goto LABEL_475;
                continue;
              }
              break;
            }
            if (*((_QWORD *)v36 + 2) != v19)
              goto LABEL_47;
LABEL_13:
            if (v32 < v36[6])
              continue;
            break;
          }
          v39 = a2;
          v9 = v10;
          if (v25 == v10)
          {
            v39 = a2;
            do
            {
              if (v24 >= v39)
                break;
              v41 = *--v39;
            }
            while (!sub_20EF19F68(*a3, v41, v19));
          }
          else
          {
            do
              v40 = *--v39;
            while (!sub_20EF19F68(*a3, v40, v19));
          }
          if (v24 < v39)
          {
            v42 = *a3;
            v43 = *v24;
            v10 = v24;
            v44 = v39;
            v45 = *v39;
            while (1)
            {
              *v10 = v45;
              *v44 = v43;
              v46 = (int8x8_t)v42[1];
              if (!*(_QWORD *)&v46)
                goto LABEL_475;
              v47 = (uint8x8_t)vcnt_s8(v46);
              v47.i16[0] = vaddlv_u8(v47);
              v48 = v47.u32[0];
              v49 = *(_QWORD *)&v46 - 1;
              v50 = *v42;
              v51 = *(_QWORD *)&v46 <= v19 && v47.u32[0] >= 2uLL;
              v52 = !v51;
              while (2)
              {
                v53 = v10[1];
                ++v10;
                v43 = v53;
                if (v48 > 1)
                {
                  v54 = v43;
                  if (*(_QWORD *)&v46 <= v43)
                    v54 = v43 % *(_QWORD *)&v46;
                }
                else
                {
                  v54 = v43 & v49;
                }
                v55 = *(float ***)(v50 + 8 * v54);
                if (!v55)
                  goto LABEL_475;
                v56 = *v55;
                if (!v56)
                  goto LABEL_475;
                if (v48 < 2)
                {
                  while (1)
                  {
                    v57 = *((_QWORD *)v56 + 1);
                    if (v57 == v43)
                    {
                      if (*((_QWORD *)v56 + 2) == v43)
                      {
                        v58 = *(_QWORD *)&v46 - 1;
                        if (!v52)
                          goto LABEL_83;
LABEL_92:
                        v59 = v58 & v19;
                        goto LABEL_93;
                      }
                    }
                    else if ((v57 & v49) != v54)
                    {
                      goto LABEL_475;
                    }
                    v56 = *(float **)v56;
                    if (!v56)
                      goto LABEL_475;
                  }
                }
                while (1)
                {
                  v60 = *((_QWORD *)v56 + 1);
                  if (v60 == v43)
                    break;
                  if (v60 >= *(_QWORD *)&v46)
                    v60 %= *(_QWORD *)&v46;
                  if (v60 != v54)
                    goto LABEL_475;
LABEL_85:
                  v56 = *(float **)v56;
                  if (!v56)
                    goto LABEL_475;
                }
                if (*((_QWORD *)v56 + 2) != v43)
                  goto LABEL_85;
                v58 = -1;
                if (v52)
                  goto LABEL_92;
LABEL_83:
                v59 = v19 % *(_QWORD *)&v46;
LABEL_93:
                v61 = *(float ***)(v50 + 8 * v59);
                if (!v61)
                  goto LABEL_475;
                v62 = *v61;
                if (!v62)
                  goto LABEL_475;
                v63 = v56[6];
                if (v48 < 2)
                {
                  while (1)
                  {
                    v64 = *((_QWORD *)v62 + 1);
                    if (v64 == v19)
                    {
                      if (*((_QWORD *)v62 + 2) == v19)
                        goto LABEL_69;
                    }
                    else if ((v64 & v49) != v59)
                    {
                      goto LABEL_475;
                    }
                    v62 = *(float **)v62;
                    if (!v62)
                      goto LABEL_475;
                  }
                }
                while (2)
                {
                  v65 = *((_QWORD *)v62 + 1);
                  if (v65 != v19)
                  {
                    if (v65 >= *(_QWORD *)&v46)
                      v65 %= *(_QWORD *)&v46;
                    if (v65 != v59)
                      goto LABEL_475;
LABEL_103:
                    v62 = *(float **)v62;
                    if (!v62)
                      goto LABEL_475;
                    continue;
                  }
                  break;
                }
                if (*((_QWORD *)v62 + 2) != v19)
                  goto LABEL_103;
LABEL_69:
                if (v63 < v62[6])
                  continue;
                break;
              }
              while (2)
              {
                v66 = *--v44;
                v45 = v66;
                if (v48 > 1)
                {
                  v67 = v45;
                  if (*(_QWORD *)&v46 <= v45)
                    v67 = v45 % *(_QWORD *)&v46;
                }
                else
                {
                  v67 = v45 & v49;
                }
                v68 = *(float ***)(v50 + 8 * v67);
                if (!v68)
                  goto LABEL_475;
                v69 = *v68;
                if (!v69)
                  goto LABEL_475;
                if (v48 < 2)
                {
                  while (1)
                  {
                    v70 = *((_QWORD *)v69 + 1);
                    if (v70 == v45)
                    {
                      if (*((_QWORD *)v69 + 2) == v45)
                      {
                        v71 = *(_QWORD *)&v46 - 1;
                        if (!v52)
                          goto LABEL_123;
LABEL_132:
                        v72 = v71 & v19;
                        goto LABEL_133;
                      }
                    }
                    else if ((v70 & v49) != v67)
                    {
                      goto LABEL_475;
                    }
                    v69 = *(float **)v69;
                    if (!v69)
                      goto LABEL_475;
                  }
                }
                while (2)
                {
                  v73 = *((_QWORD *)v69 + 1);
                  if (v73 != v45)
                  {
                    if (v73 >= *(_QWORD *)&v46)
                      v73 %= *(_QWORD *)&v46;
                    if (v73 != v67)
                      goto LABEL_475;
LABEL_125:
                    v69 = *(float **)v69;
                    if (!v69)
                      goto LABEL_475;
                    continue;
                  }
                  break;
                }
                if (*((_QWORD *)v69 + 2) != v45)
                  goto LABEL_125;
                v71 = -1;
                if (v52)
                  goto LABEL_132;
LABEL_123:
                v72 = v19 % *(_QWORD *)&v46;
LABEL_133:
                v74 = *(float ***)(v50 + 8 * v72);
                if (!v74)
                  goto LABEL_475;
                v75 = *v74;
                if (!v75)
                  goto LABEL_475;
                v76 = v69[6];
                if (v48 < 2)
                {
                  while (1)
                  {
                    v77 = *((_QWORD *)v75 + 1);
                    if (v77 == v19)
                    {
                      if (*((_QWORD *)v75 + 2) == v19)
                        goto LABEL_109;
                    }
                    else if ((v77 & v49) != v72)
                    {
                      goto LABEL_475;
                    }
                    v75 = *(float **)v75;
                    if (!v75)
                      goto LABEL_475;
                  }
                }
                while (2)
                {
                  v78 = *((_QWORD *)v75 + 1);
                  if (v78 != v19)
                  {
                    if (v78 >= *(_QWORD *)&v46)
                      v78 %= *(_QWORD *)&v46;
                    if (v78 != v72)
                      goto LABEL_475;
LABEL_143:
                    v75 = *(float **)v75;
                    if (!v75)
                      goto LABEL_475;
                    continue;
                  }
                  break;
                }
                if (*((_QWORD *)v75 + 2) != v19)
                  goto LABEL_143;
LABEL_109:
                if (v76 >= v75[6])
                  continue;
                break;
              }
              if (v10 >= v44)
                goto LABEL_150;
            }
          }
          v10 = v24;
LABEL_150:
          v79 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v79;
          *v79 = v19;
          if (v24 < v39)
          {
LABEL_155:
            result = sub_20EF18A9C(v9, v10 - 1, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          v80 = sub_20EF1A2E8(v9, v10 - 1, a3);
          result = sub_20EF1A2E8(v10, a2, a3);
          if (!(_DWORD)result)
          {
            if (!v80)
              goto LABEL_155;
            continue;
          }
          a2 = v10 - 1;
          if (v80)
            return result;
          goto LABEL_2;
        }
        v122 = v10 + 1;
        v124 = v10 == a2 || v122 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v124)
          {
            v125 = v10;
            do
            {
              v127 = v122;
              result = sub_20EF19F68(*a3, v125[1], *v125);
              if (!(_DWORD)result)
                goto LABEL_272;
              v128 = *v127;
              v129 = *a3;
              v126 = v127;
              v130 = *v125;
LABEL_276:
              *v126 = v130;
              if (v125 != v10)
              {
                v131 = (int8x8_t)v129[1];
                if (!*(_QWORD *)&v131)
                  goto LABEL_475;
                v126 = v125;
                v132 = (uint8x8_t)vcnt_s8(v131);
                v132.i16[0] = vaddlv_u8(v132);
                if (v132.u32[0] > 1uLL)
                {
                  v133 = v128;
                  if (*(_QWORD *)&v131 <= v128)
                    v133 = v128 % *(_QWORD *)&v131;
                }
                else
                {
                  v133 = (*(_QWORD *)&v131 - 1) & v128;
                }
                v134 = *(float ***)(*v129 + 8 * v133);
                if (!v134)
                  goto LABEL_475;
                v135 = *v134;
                if (!*v134)
                  goto LABEL_475;
                --v125;
                v130 = *(v126 - 1);
                v136 = *(_QWORD *)&v131 - 1;
                if (v132.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v137 = *((_QWORD *)v135 + 1);
                    if (v137 == v128)
                    {
                      result = *((_QWORD *)v135 + 2);
                      if (result == v128)
                        goto LABEL_290;
                    }
                    else if ((v137 & v136) != v133)
                    {
                      goto LABEL_475;
                    }
                    v135 = *(float **)v135;
                    if (!v135)
                      goto LABEL_475;
                  }
                }
                while (1)
                {
                  v139 = *((_QWORD *)v135 + 1);
                  if (v139 == v128)
                  {
                    result = *((_QWORD *)v135 + 2);
                    if (result == v128)
                    {
LABEL_290:
                      if (v132.u32[0] > 1uLL)
                      {
                        v138 = *(v126 - 1);
                        if (*(_QWORD *)&v131 <= v130)
                          v138 = v130 % *(_QWORD *)&v131;
                      }
                      else
                      {
                        v138 = v136 & v130;
                      }
                      v140 = *(float ***)(*v129 + 8 * v138);
                      if (!v140)
                        goto LABEL_475;
                      v141 = *v140;
                      if (!v141)
                        goto LABEL_475;
                      if (v132.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v142 = *((_QWORD *)v141 + 1);
                          if (v142 == v130)
                          {
                            if (*((_QWORD *)v141 + 2) == v130)
                              goto LABEL_275;
                          }
                          else if ((v142 & v136) != v138)
                          {
                            goto LABEL_475;
                          }
                          v141 = *(float **)v141;
                          if (!v141)
                            goto LABEL_475;
                        }
                      }
                      while (2)
                      {
                        v143 = *((_QWORD *)v141 + 1);
                        if (v143 != v130)
                        {
                          if (v143 >= *(_QWORD *)&v131)
                            v143 %= *(_QWORD *)&v131;
                          if (v143 != v138)
                            goto LABEL_475;
LABEL_311:
                          v141 = *(float **)v141;
                          if (!v141)
                            goto LABEL_475;
                          continue;
                        }
                        break;
                      }
                      if (*((_QWORD *)v141 + 2) != v130)
                        goto LABEL_311;
LABEL_275:
                      if (v135[6] >= v141[6])
                        goto LABEL_271;
                      goto LABEL_276;
                    }
                  }
                  else
                  {
                    if (v139 >= *(_QWORD *)&v131)
                      v139 %= *(_QWORD *)&v131;
                    if (v139 != v133)
                      goto LABEL_475;
                  }
                  v135 = *(float **)v135;
                  if (!v135)
                    goto LABEL_475;
                }
              }
              v126 = v10;
LABEL_271:
              *v126 = v128;
LABEL_272:
              v122 = v127 + 1;
              v125 = v127;
            }
            while (v127 + 1 != a2);
          }
          return result;
        }
        if (v124)
          return result;
        while (2)
        {
          v199 = v122;
          result = sub_20EF19F68(*a3, v11[1], *v11);
          if (!(_DWORD)result)
            goto LABEL_431;
          v200 = *v199;
          v201 = *a3;
          v202 = v199;
          v203 = *v11;
          while (2)
          {
            *v202 = v203;
            v204 = (int8x8_t)v201[1];
            if (!*(_QWORD *)&v204)
              goto LABEL_475;
            v202 = v11;
            v205 = (uint8x8_t)vcnt_s8(v204);
            v205.i16[0] = vaddlv_u8(v205);
            if (v205.u32[0] > 1uLL)
            {
              v206 = v200;
              if (*(_QWORD *)&v204 <= v200)
                v206 = v200 % *(_QWORD *)&v204;
            }
            else
            {
              v206 = (*(_QWORD *)&v204 - 1) & v200;
            }
            v207 = *(float ***)(*v201 + 8 * v206);
            if (!v207 || (v208 = *v207) == 0)
LABEL_475:
              sub_20E89FD20("unordered_map::at: key not found");
            --v11;
            v203 = *(v202 - 1);
            v209 = *(_QWORD *)&v204 - 1;
            if (v205.u32[0] < 2uLL)
            {
              while (1)
              {
                v210 = *((_QWORD *)v208 + 1);
                if (v210 == v200)
                {
                  result = *((_QWORD *)v208 + 2);
                  if (result == v200)
                    goto LABEL_448;
                }
                else if ((v210 & v209) != v206)
                {
                  goto LABEL_475;
                }
                v208 = *(float **)v208;
                if (!v208)
                  goto LABEL_475;
              }
            }
            while (1)
            {
              v212 = *((_QWORD *)v208 + 1);
              if (v212 == v200)
                break;
              if (v212 >= *(_QWORD *)&v204)
                v212 %= *(_QWORD *)&v204;
              if (v212 != v206)
                goto LABEL_475;
LABEL_451:
              v208 = *(float **)v208;
              if (!v208)
                goto LABEL_475;
            }
            result = *((_QWORD *)v208 + 2);
            if (result != v200)
              goto LABEL_451;
LABEL_448:
            if (v205.u32[0] > 1uLL)
            {
              v211 = *(v202 - 1);
              if (*(_QWORD *)&v204 <= v203)
                v211 = v203 % *(_QWORD *)&v204;
            }
            else
            {
              v211 = v209 & v203;
            }
            v213 = *(float ***)(*v201 + 8 * v211);
            if (!v213)
              goto LABEL_475;
            v214 = *v213;
            if (!v214)
              goto LABEL_475;
            if (v205.u32[0] < 2uLL)
            {
              while (1)
              {
                v215 = *((_QWORD *)v214 + 1);
                if (v215 == v203)
                {
                  if (*((_QWORD *)v214 + 2) == v203)
                    goto LABEL_434;
                }
                else if ((v215 & v209) != v211)
                {
                  goto LABEL_475;
                }
                v214 = *(float **)v214;
                if (!v214)
                  goto LABEL_475;
              }
            }
            while (1)
            {
              v216 = *((_QWORD *)v214 + 1);
              if (v216 == v203)
                break;
              if (v216 >= *(_QWORD *)&v204)
                v216 %= *(_QWORD *)&v204;
              if (v216 != v211)
                goto LABEL_475;
LABEL_469:
              v214 = *(float **)v214;
              if (!v214)
                goto LABEL_475;
            }
            if (*((_QWORD *)v214 + 2) != v203)
              goto LABEL_469;
LABEL_434:
            if (v208[6] < v214[6])
              continue;
            break;
          }
          *v202 = v200;
LABEL_431:
          v122 = v199 + 1;
          v11 = v199;
          if (v199 + 1 != a2)
            continue;
          return result;
        }
    }
  }
}

BOOL sub_20EF19F68(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  float **v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float **v12;
  float *v13;
  uint64_t v14;
  unint64_t v16;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    goto LABEL_41;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (*(_QWORD *)&v3 <= a2)
      v5 = a2 % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & a2;
  }
  v6 = *(float ***)(*a1 + 8 * v5);
  if (!v6 || (v7 = *v6) == 0)
LABEL_41:
    sub_20E89FD20("unordered_map::at: key not found");
  v8 = *(_QWORD *)&v3 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v9 = *((_QWORD *)v7 + 1);
      if (v9 == a2)
      {
        if (*((_QWORD *)v7 + 2) == a2)
          goto LABEL_14;
      }
      else if ((v9 & v8) != v5)
      {
        goto LABEL_41;
      }
      v7 = *(float **)v7;
      if (!v7)
        goto LABEL_41;
    }
  }
  while (1)
  {
    v11 = *((_QWORD *)v7 + 1);
    if (v11 == a2)
      break;
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
    if (v11 != v5)
      goto LABEL_41;
LABEL_17:
    v7 = *(float **)v7;
    if (!v7)
      goto LABEL_41;
  }
  if (*((_QWORD *)v7 + 2) != a2)
    goto LABEL_17;
LABEL_14:
  if (v4.u32[0] > 1uLL)
  {
    v10 = a3;
    if (*(_QWORD *)&v3 <= a3)
      v10 = a3 % *(_QWORD *)&v3;
  }
  else
  {
    v10 = v8 & a3;
  }
  v12 = *(float ***)(*a1 + 8 * v10);
  if (!v12)
    goto LABEL_41;
  v13 = *v12;
  if (!v13)
    goto LABEL_41;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v14 = *((_QWORD *)v13 + 1);
      if (v14 == a3)
      {
        if (*((_QWORD *)v13 + 2) == a3)
          return v7[6] < v13[6];
      }
      else if ((v14 & v8) != v10)
      {
        goto LABEL_41;
      }
      v13 = *(float **)v13;
      if (!v13)
        goto LABEL_41;
    }
  }
  while (1)
  {
    v16 = *((_QWORD *)v13 + 1);
    if (v16 == a3)
      break;
    if (v16 >= *(_QWORD *)&v3)
      v16 %= *(_QWORD *)&v3;
    if (v16 != v10)
      goto LABEL_41;
LABEL_35:
    v13 = *(float **)v13;
    if (!v13)
      goto LABEL_41;
  }
  if (*((_QWORD *)v13 + 2) != a3)
    goto LABEL_35;
  return v7[6] < v13[6];
}

BOOL sub_20EF1A110(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, _QWORD **a6)
{
  _BOOL8 result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  sub_20EF1A4C8(a1, a2, a3, a4, a6);
  result = sub_20EF19F68(*a6, *a5, *a4);
  if (result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = sub_20EF19F68(*a6, *a4, *a3);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = sub_20EF19F68(*a6, *a3, *a2);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = sub_20EF19F68(*a6, *a2, *a1);
        if (result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL sub_20EF1A1E8(unint64_t *a1, unint64_t *a2, unint64_t *a3, _QWORD **a4)
{
  BOOL v8;
  _BOOL8 result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v8 = sub_20EF19F68(*a4, *a2, *a1);
  result = sub_20EF19F68(*a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = sub_20EF19F68(*a4, *a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = sub_20EF19F68(*a4, *a2, *a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_20EF1A2E8(unint64_t *a1, unint64_t *a2, _QWORD **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_20EF19F68(*a3, *(a2 - 1), *a1))
      {
        v15 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v15;
      }
      return 1;
    case 3:
      sub_20EF1A1E8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20EF1A4C8(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20EF1A110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_20EF1A1E8(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (!sub_20EF19F68(*a3, *v9, *v8))
  {
LABEL_11:
    v8 = v9;
    v10 += 8;
    if (++v9 == a2)
      return 1;
  }
  v12 = *v9;
  v13 = v10;
  do
  {
    v14 = (char *)a1 + v13;
    *(unint64_t *)((char *)a1 + v13 + 24) = *(unint64_t *)((char *)a1 + v13 + 16);
    if (v13 == -16)
    {
      *a1 = v12;
      if (++v11 != 8)
        goto LABEL_11;
      return v9 + 1 == a2;
    }
    v13 -= 8;
  }
  while (sub_20EF19F68(*a3, v12, *((_QWORD *)v14 + 1)));
  *(unint64_t *)((char *)a1 + v13 + 24) = v12;
  if (++v11 != 8)
    goto LABEL_11;
  return v9 + 1 == a2;
}

BOOL sub_20EF1A4C8(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, _QWORD **a5)
{
  _BOOL8 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  sub_20EF1A1E8(a1, a2, a3, a5);
  result = sub_20EF19F68(*a5, *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = sub_20EF19F68(*a5, *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = sub_20EF19F68(*a5, *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

void sub_20EF1A578(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  __int128 v12;

  v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 80 * a2;
    v6 = (char *)operator new(80 * a2);
    v7 = &v6[80 * ((v4 - v2) / 80)];
    *(_QWORD *)&v12 = v7;
    *((_QWORD *)&v12 + 1) = &v6[v5];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v6[v5];
    }
    else
    {
      v8 = 0;
      do
      {
        sub_20EF1A798((uint64_t)&v7[v8 - 80], (uint64_t *)&v4[v8 - 80]);
        v8 -= 80;
      }
      while (&v4[v8] != v2);
      v2 = *(char **)a1;
      v9 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v7[v8];
      *(_OWORD *)(a1 + 8) = v12;
      while (v9 != v2)
      {
        v10 = (void *)*((_QWORD *)v9 - 3);
        if (v10)
        {
          *((_QWORD *)v9 - 2) = v10;
          operator delete(v10);
        }
        v11 = (void *)*((_QWORD *)v9 - 6);
        if (v11)
        {
          *((_QWORD *)v9 - 5) = v11;
          operator delete(v11);
        }
        v9 -= 80;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_20EF1A724(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 48);
    if (v5)
    {
      *(_QWORD *)(i - 40) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EF1A798(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = *(uint64_t *)((char *)a2 + 12);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_QWORD *)(a1 + 12) = v5;
  LOBYTE(v5) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)a2[4];
  v6 = (_BYTE *)a2[5];
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_20E867F44();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    v10 = &v9[8 * (v8 >> 3)];
    *(_QWORD *)(a1 + 48) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 40) = v10;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)a2[7];
  v11 = (_BYTE *)a2[8];
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_20E867F44();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(a1 + 72) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 64) = v15;
  }
  return a1;
}

void sub_20EF1A894(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20EF1A8C8(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  __int128 v19;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_20E867F44();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v5 = 0x333333333333333;
  else
    v5 = v4;
  if (v5 > 0x333333333333333)
    sub_20E877A38();
  v7 = 80 * v5;
  v8 = (char *)operator new(80 * v5);
  v9 = &v8[80 * v3];
  v10 = &v8[v7];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v9 + 12) = *(_QWORD *)(a2 + 12);
  *((_DWORD *)v9 + 5) = *(_DWORD *)(a2 + 20);
  v9[24] = *(_BYTE *)(a2 + 24);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = v9 + 80;
  *(_QWORD *)&v19 = v9 + 80;
  *((_QWORD *)&v19 + 1) = v10;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      sub_20EF1A798((uint64_t)&v9[v14 - 80], (uint64_t *)&v12[v14 - 80]);
      v14 -= 80;
    }
    while (&v12[v14] != v13);
    v12 = *a1;
    v15 = a1[1];
    *a1 = &v9[v14];
    *(_OWORD *)(a1 + 1) = v19;
    v11 = (char *)v19;
    while (v15 != v12)
    {
      v16 = (void *)*((_QWORD *)v15 - 3);
      if (v16)
      {
        *((_QWORD *)v15 - 2) = v16;
        operator delete(v16);
      }
      v17 = (void *)*((_QWORD *)v15 - 6);
      if (v17)
      {
        *((_QWORD *)v15 - 5) = v17;
        operator delete(v17);
      }
      v15 -= 80;
    }
  }
  if (v12)
    operator delete(v12);
  return v11;
}

void sub_20EF1AAF8()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EF1AB0C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9F11F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EF1AB44(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9F11F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EF1AB64()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  kdebug_trace();
  sub_20EF1787C(&v2);
  if (**(int **)(v2 + 56) <= 1)
  {
    v0 = atomic_load((unsigned __int8 *)&qword_254A600F8);
    if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A600F8))
    {
      qword_254A600F0 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_HorizontalDetect");
      __cxa_guard_release(&qword_254A600F8);
    }
    v1 = qword_254A600F0;
    if (*(_BYTE *)(qword_254A600F0 + 16))
    {
      *(_QWORD *)(v1 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v1;
      *(_BYTE *)(v1 + 16) = 0;
    }
  }
}

void sub_20EF1AC2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A600F8);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF1AC48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection23HorizontalPlaneDetector6"
                     "detectENS7_22PointsAndVariancesViewENS7_21LinesAndVariancesViewEE3$_2JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection23HorizontalPla"
                                "neDetector6detectENS7_22PointsAndVariancesViewENS7_21LinesAndVariancesViewEE3$_2JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection23HorizontalPlaneDetector6detectENS7_22PointsAndVariancesViewENS7_21LinesAndVariancesViewEE3$_2JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection23HorizontalPlaneDetector6detectENS7_22PointsAndVariancesViewENS7_21LinesAndVariancesViewEE3$_2JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF1ACB4()
{
  return &unk_24C9F1258;
}

float32_t sub_20EF1ACC0(uint64_t a1, float32x4_t a2, double a3, int8x16_t a4, float32x4_t a5, double a6, float32x2_t a7)
{
  int8x16_t v7;
  float v8;
  int8x16_t v9;
  int8x16_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int8x16_t v20;
  int8x16_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float v25;

  a2.i32[0] = *(_DWORD *)(a1 + 20);
  a4.i64[0] = *(_QWORD *)(a1 + 12);
  v7 = a4;
  a7.i32[0] = *(_DWORD *)(a1 + 8);
  *(float32x2_t *)a5.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a4.i8, *(float32x2_t *)a1), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a1, 1), *(float32x2_t *)a4.i8, 1), a7, *(float32x2_t *)a2.f32);
  a2.i32[0] = 0;
  v8 = -a5.f32[0];
  if (a5.f32[0] <= 0.0)
    v8 = a5.f32[0];
  if (fabsf(a5.f32[0]) > 0.000001 && v8 != 0.0)
  {
    v9 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(a5, a2), 0);
    v7.i32[2] = *(_DWORD *)(a1 + 20);
    v10 = vbslq_s8(v9, (int8x16_t)vnegq_f32((float32x4_t)v7), v7);
    v11 = fabsf(*(float *)&v10.i32[2]);
    if (v11 == 1.0 || (v11 <= 1.0 ? (v12 = 1.0 - v11) : (v12 = v11 + -1.0), v12 <= 0.000001))
    {
      a2.i32[0] = 1127481344;
    }
    else
    {
      if (fabsf(*(float *)v10.i32) <= fabsf(*(float *)&v10.i32[1]))
      {
        v15 = (float)((float)(v8 - *(float *)v10.i32) - *(float *)&v10.i32[2]) / *(float *)&v10.i32[1];
        v16 = -1.0;
        v13 = 1.0;
        v14 = (float)((float)(v8 + *(float *)v10.i32) - *(float *)&v10.i32[2]) / *(float *)&v10.i32[1];
      }
      else
      {
        v13 = (float)((float)(v8 - *(float *)&v10.i32[1]) - *(float *)&v10.i32[2]) / *(float *)v10.i32;
        v14 = -1.0;
        v15 = 1.0;
        v16 = (float)((float)(v8 + *(float *)&v10.i32[1]) - *(float *)&v10.i32[2]) / *(float *)v10.i32;
      }
      __asm { FMOV            V7.4S, #1.0 }
      v20.i64[1] = _Q7.i64[1];
      v20.i64[0] = __PAIR64__(LODWORD(v15), LODWORD(v13));
      _Q7.i64[0] = __PAIR64__(LODWORD(v14), LODWORD(v16));
      v21 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v20, v20, 0xCuLL), v20, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q7, _Q7), (int8x16_t)_Q7, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)_Q7, (int8x16_t)_Q7, 0xCuLL), (int8x16_t)_Q7, 8uLL));
      v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1);
      v22 = (float32x2_t)vextq_s8(v21, v21, 8uLL).u64[0];
      v23.f32[0] = 1.0
                 / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), v23, *(float32x2_t *)v21.i8, 1), v22, v22).f32[0]);
      v24 = vmulq_n_f32((float32x4_t)v21, v23.f32[0]);
      v25 = -1.0;
      if (v24.f32[2] >= 0.0)
        v25 = 1.0;
      _VF = (float)(v8 / *(float *)&v10.i32[2]) >= 1.0 || *(float *)&v10.i32[2] == 0.0;
      *(float *)v9.i32 = -v25;
      if (_VF)
        *(float *)v9.i32 = v25;
      a2.f32[0] = acosf(vmla_f32(vmla_lane_f32(vmul_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v9.i8), *(float32x2_t *)v10.i8), vmul_f32(vmul_lane_f32(v23, *(float32x2_t *)v21.i8, 1), *(float32x2_t *)v9.i8), *(float32x2_t *)v10.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), vmul_f32(vmul_f32(v22, v23), *(float32x2_t *)v9.i8)).f32[0])* 57.296;
    }
  }
  return a2.f32[0];
}

uint64_t sub_20EF1AEA0(uint64_t a1, int a2)
{
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v4 = (_DWORD *)operator new();
  *v4 = a2;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = sub_20EF1B040;
  v5 = 5489;
  *(_DWORD *)(a1 + 16) = 5489;
  v6 = 1;
  for (i = 5; i != 628; ++i)
  {
    v8 = 1812433253 * (v5 ^ (v5 >> 30));
    v5 = v8 + v6;
    *(_DWORD *)(a1 + 4 * i) = i + v8 - 4;
    ++v6;
  }
  *(_QWORD *)(a1 + 2512) = 0;
  v9 = (std::__shared_weak_count *)operator new(0x28uLL);
  v10 = v9;
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F558;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F5A8;
  LODWORD(v9[1].__shared_owners_) = 5489;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 2520) = &off_24CA1F4F8;
  *(_QWORD *)(a1 + 2528) = v9 + 1;
  *(_QWORD *)(a1 + 2536) = v9;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return a1;
}

void sub_20EF1B018(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  MEMORY[0x212BC6398](v2, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF1B040(uint64_t result)
{
  if (result)
    JUMPOUT(0x212BC6398);
  return result;
}

uint64_t sub_20EF1B05C(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  void *v11;
  void *v12;
  _QWORD v14[3];
  void *memptr[3];
  size_t v16[2];

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr[0] = 0;
    v6 = malloc_type_posix_memalign(memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_210207B94(v6, *(_QWORD *)(a1 + 16), v4);
    *(void **)(a1 + 8) = memptr[0];
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  if (*(_DWORD *)(a2 + 28))
    v7 = *(_DWORD *)(a2 + 24) == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)(a2 + 32);
  if (v7)
    v9 = 0;
  else
    v9 = *(_QWORD *)(a2 + 24);
  v14[0] = *(_QWORD *)(a2 + 8);
  v14[1] = v9;
  v14[2] = v8;
  if (HIDWORD(v9) * HIDWORD(v8) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_24;
  }
  if ((_DWORD)v9 && HIDWORD(v9))
  {
    if (*(_DWORD *)(a1 + 28))
      v10 = *(_DWORD *)(a1 + 24) == 0;
    else
      v10 = 1;
    v12 = *(void **)(a1 + 24);
    v11 = *(void **)(a1 + 32);
    if (v10)
      v12 = 0;
    memptr[0] = *(void **)(a1 + 8);
    memptr[1] = v12;
    memptr[2] = v11;
    if (HIDWORD(v12) * HIDWORD(v11) != -1
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
    {
      v16[0] = (size_t)v14;
      v16[1] = (size_t)memptr;
      sub_20EF1B1EC(v16);
      return a1;
    }
LABEL_24:
    abort();
  }
  return a1;
}

void sub_20EF1B1D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

size_t *sub_20EF1B1EC(size_t *result)
{
  size_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  size_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int i;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  size_t v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  size_t v24;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 16);
  v4 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v18 = *(_DWORD *)(v1 + 20);
    if (v18 == *(_DWORD *)(v2 + 20))
    {
      v19 = *(_DWORD *)(v1 + 8);
      if (v18 == v19)
      {
        v20 = (*(_DWORD *)(v1 + 12) * v18);
        v21 = *(char **)v1;
        if ((_DWORD)v20)
          v22 = v21 == 0;
        else
          v22 = 0;
        if (v22)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        else if (!(_DWORD)v20)
        {
          return result;
        }
        return (size_t *)memmove(*(void **)v2, v21, v20);
      }
    }
    else
    {
      v19 = *(_DWORD *)(v1 + 8);
    }
    v24 = v19;
    if (v19)
      v23 = *(_DWORD *)(v1 + 12) == 0;
    else
      v23 = 1;
    if (!v23)
      return sub_20EF1B3B0(&v24, (char **)v1, (char **)v2);
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 8);
    v7 = *(_DWORD *)(v1 + 12);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = *(char **)v1;
      v11 = *(size_t **)v2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(v2 + 20);
        v14 = *(unsigned int *)(v1 + 20);
        if (v9)
        {
          for (i = 0; i != v12; ++i)
          {
            v16 = v9;
            v17 = v10;
            result = v11;
            do
            {
              *(_BYTE *)result = *v17;
              v17 += v3;
              result = (size_t *)((char *)result + v4);
              --v16;
            }
            while (v16);
            *(_BYTE *)result = *v17;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
          }
        }
        else
        {
          do
          {
            *(_BYTE *)v11 = *v10;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
            --v12;
          }
          while (v12);
        }
      }
      for (; v9; --v9)
      {
        *(_BYTE *)v11 = *v10;
        v10 += v3;
        v11 = (size_t *)((char *)v11 + v4);
      }
      *(_BYTE *)v11 = *v10;
    }
  }
  return result;
}

size_t *sub_20EF1B3B0(size_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  size_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = *((unsigned int *)a3 + 5);
      v10 = *((unsigned int *)a2 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (size_t *)memmove(v7, v6, v11);
LABEL_11:
        v6 += v10;
        v7 += v9;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_19:
        abort();
      }
      return (size_t *)memmove(v7, v6, v12);
    }
    if (v12)
      return (size_t *)memmove(v7, v6, v12);
  }
  return result;
}

uint64_t sub_20EF1B4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v6;

  *(_QWORD *)a1 = a2;
  v6 = a2;
  v3 = operator new();
  sub_20EF1C770(v3, &v6);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = sub_20EF1BEB0;
  v4 = *(_DWORD *)a1 >= 3u && *(_DWORD *)(a1 + 4) > 2u;
  if (!v4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/SingleShot/SingleShotPlaneDetector.cpp", 76, (uint64_t)"areParametersValid(m_params)", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20EF1B5A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 16))();
  _Unwind_Resume(exception_object);
}

void sub_20EF1B5F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  void *v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  void **v21;
  const void *v22;
  char *v23;
  const void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  float32x4_t v30;
  float32x4_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char ***v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  char v63;
  void *v64;
  char *v65;
  char v66[33];
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  void *__p;
  void *v73;
  _QWORD v74[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(void);
  std::__shared_weak_count *v95;
  _BYTE v96[32];
  float32x4_t v97;
  float32x4_t v98;

  kdebug_trace();
  sub_20EF1BD54(&v92);
  if (**(int **)(v92 + 56) <= 1)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254A60120);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A60120))
    {
      qword_254A60118 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_SingleShotDetect");
      __cxa_guard_release(&qword_254A60120);
    }
    v9 = qword_254A60118;
    *(_BYTE *)(qword_254A60118 + 16) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v9 = std::chrono::steady_clock::now();
    *(_BYTE *)(v9 + 16) = 1;
  }
  kdebug_trace();
  sub_20EF1BD54(&v92);
  if (**(int **)(v92 + 56) <= 1)
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A60150);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A60150))
    {
      qword_254A60148 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_CreateVoronoiDiagram");
      __cxa_guard_release(&qword_254A60150);
    }
    v12 = qword_254A60148;
    *(_BYTE *)(qword_254A60148 + 16) = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v12 = std::chrono::steady_clock::now();
    *(_BYTE *)(v12 + 16) = 1;
  }
  v13 = *(void **)a1;
  v66[0] = 0;
  v91 = 0;
  v14 = *(unsigned __int8 *)(a3 + 504);
  if (*(_BYTE *)(a3 + 504))
  {
    sub_20EF1C05C((uint64_t)v66, a3);
    sub_20EF1C190((uint64_t)&v70, a3 + 136);
    v74[0] = &off_24C9F15F0;
    v74[1] = &off_24C9F1578;
    v15 = *(_OWORD *)(a3 + 304);
    v75 = *(_OWORD *)(a3 + 288);
    v76 = v15;
    v77 = *(_OWORD *)(a3 + 320);
    v78 = *(_QWORD *)(a3 + 336);
    v79 = *(_DWORD *)(a3 + 344);
    v80 = *(_QWORD *)(a3 + 348);
    v16 = *(_QWORD *)(a3 + 368);
    v81 = *(_QWORD *)(a3 + 360);
    v82 = v16;
    v17 = *(float64x2_t *)(a3 + 456);
    v87 = *(float64x2_t *)(a3 + 440);
    v88 = v17;
    v18 = *(float64x2_t *)(a3 + 488);
    v89 = *(float64x2_t *)(a3 + 472);
    v90 = v18;
    v19 = *(float64x2_t *)(a3 + 392);
    v83 = *(float64x2_t *)(a3 + 376);
    v84 = v19;
    v20 = *(float64x2_t *)(a3 + 424);
    v85 = *(float64x2_t *)(a3 + 408);
    v86 = v20;
    v91 = 1;
  }
  v64 = v13;
  v21 = *(void ***)(a2 + 176);
  v22 = *(const void **)(a2 + 184);
  v23 = *(char **)(a2 + 192);
  v24 = *(const void **)(a2 + 200);
  v25 = *(_QWORD *)(a2 + 208);
  v26 = *(_QWORD *)(a2 + 216);
  v27 = *(_QWORD *)(a2 + 224);
  v28 = *(_QWORD *)(a2 + 232);
  if (v14)
  {
    *(float32x4_t *)v96 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v83), v84);
    *(float32x4_t *)&v96[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v85), v86);
    v97 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87), v88);
    v98 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v89), v90);
    sub_20EF0A2C0((uint64_t)&v92, v21, v22, v23, v24, v25, v26, v10, v27, v28, (__int128 *)v96, (uint64_t)v74, &v64);
  }
  else
  {
    sub_20EF0A2C0((uint64_t)&v92, v21, v22, v23, v24, v25, v26, v10, v27, v28, (__int128 *)(a2 + 104), a2, &v64);
  }
  if (v91)
  {
    v74[0] = &off_24C9F15F0;
    if (__p)
    {
      v73 = __p;
      operator delete(__p);
    }
    if (v71)
      free(v71);
    v71 = 0;
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    if (v67)
      free(v67);
    v67 = 0;
  }
  kdebug_trace();
  sub_20EF1BD54(v96);
  if (**(int **)(*(_QWORD *)v96 + 56) <= 1)
  {
    v32 = atomic_load((unsigned __int8 *)&qword_254A60160);
    if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254A60160))
    {
      qword_254A60158 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_CreateVoronoiDiagram");
      __cxa_guard_release(&qword_254A60160);
    }
    v33 = qword_254A60158;
    if (*(_BYTE *)(qword_254A60158 + 16))
    {
      *(_QWORD *)(v33 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v33;
      *(_BYTE *)(v33 + 16) = 0;
    }
  }
  v34 = *(_DWORD *)(a2 + 168);
  if ((v34 & 2) != 0)
  {
    sub_20EF0A554((uint64_t)&v92, v96, v29, v30, v31);
    v36 = *(void **)v96;
    v35 = *(_QWORD *)&v96[8];
    v34 = *(_DWORD *)(a2 + 168);
  }
  else
  {
    v35 = 0;
    v36 = 0;
  }
  v37 = *(_QWORD *)(a1 + 8);
  v38 = *(char ****)(a2 + 176);
  v39 = *(uint64_t **)(a2 + 184);
  v40 = *(_QWORD *)(a2 + 192);
  v41 = *(uint64_t **)(a2 + 200);
  v42 = *(_QWORD *)(a2 + 208);
  v43 = *(_QWORD *)(a2 + 216);
  v44 = *(_QWORD *)(a2 + 224);
  v45 = *(_QWORD *)(a2 + 232);
  v62[0] = (v35 - (uint64_t)v36) >> 3;
  v62[1] = v36;
  v63 = 1;
  sub_20EF1C8E4(v37, v38, v39, v40, v41, v42, v43, (uint64_t)&v64, v44, v45, (float32x2_t *)(a2 + 104), (uint64_t)v62, v34);
  v46 = *(_BYTE *)(a3 + 504);
  if (v46)
  {
    v47 = *(_QWORD *)a3;
    v48 = *(_QWORD *)(a3 + 24);
    v49 = *(_QWORD *)(a3 + 32);
    *(_OWORD *)&v96[8] = *(_OWORD *)(a3 + 8);
    *(_QWORD *)v96 = v47;
    *(_QWORD *)&v96[24] = v48;
    v97.i64[0] = v49;
    v46 = 1;
  }
  else
  {
    v96[0] = 0;
  }
  v97.i8[8] = v46;
  sub_20EF0AAF8((unsigned int *)&v92, (uint64_t *)&v64, (__int128 *)v96, a4);
  v50 = (char *)v64;
  if (v64)
  {
    v51 = v65;
    v52 = v64;
    if (v65 != v64)
    {
      do
      {
        v53 = (void *)*((_QWORD *)v51 - 3);
        if (v53)
        {
          *((_QWORD *)v51 - 2) = v53;
          operator delete(v53);
        }
        v54 = (void *)*((_QWORD *)v51 - 6);
        if (v54)
        {
          *((_QWORD *)v51 - 5) = v54;
          operator delete(v54);
        }
        v51 -= 80;
      }
      while (v51 != v50);
      v52 = v64;
    }
    v65 = v50;
    operator delete(v52);
  }
  if (v36)
    operator delete(v36);
  v55 = v95;
  if (!v95)
    goto LABEL_48;
  p_shared_owners = (unint64_t *)&v95->__shared_owners_;
  do
    v57 = __ldaxr(p_shared_owners);
  while (__stlxr(v57 - 1, p_shared_owners));
  if (v57)
  {
LABEL_48:
    v58 = v93;
    v93 = 0;
    if (!v58)
      goto LABEL_50;
    goto LABEL_49;
  }
  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
  std::__shared_weak_count::__release_weak(v55);
  v61 = v93;
  v93 = 0;
  if (v61)
LABEL_49:
    v94();
LABEL_50:
  kdebug_trace();
  sub_20EF1BD54(&v92);
  if (**(int **)(v92 + 56) <= 1)
  {
    v59 = atomic_load((unsigned __int8 *)&qword_254A60130);
    if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A60130))
    {
      qword_254A60128 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_SingleShotDetect");
      __cxa_guard_release(&qword_254A60130);
    }
    v60 = qword_254A60128;
    if (*(_BYTE *)(qword_254A60128 + 16))
    {
      *(_QWORD *)(v60 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v60;
      *(_BYTE *)(v60 + 16) = 0;
    }
  }
}

void sub_20EF1BC08(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_254A60130);
  sub_20EF1BE48(v1);
  _Unwind_Resume(a1);
}

void sub_20EF1BC28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60160);
  sub_20EF1BFDC((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_20EF1BC48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60150);
  _Unwind_Resume(a1);
}

void sub_20EF1BC60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60120);
  _Unwind_Resume(a1);
}

void sub_20EF1BC78(_Unwind_Exception *a1)
{
  sub_20EF1BFDC((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_20EF1BC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a30)
    free(a30);
  a30 = 0;
  sub_20EF1BF68((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_20EF1BCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20EF1BF68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF1BCD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EF1BE48(v1);
  _Unwind_Resume(a1);
}

void sub_20EF1BCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  sub_20EF17970((void **)va);
  if (v9)
  {
    operator delete(v9);
    sub_20EF1BFDC((uint64_t)&STACK[0x258]);
    _Unwind_Resume(a1);
  }
  sub_20EF1BFDC((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_20EF1BD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20EF1BF68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF1BD54(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60140);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60140))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.acv.trace");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60138);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A60140);
  }
  *a1 = qword_254A60138;
}

void sub_20EF1BDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60140);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60140);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF1BE48(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v6 = (void **)(a1 + 48);
  sub_20EF138D0(&v6);
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EF1BEB0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result)
  {
    v1 = result;
    v2 = *(std::__shared_weak_count **)(result + 2560);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v7 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (!v7)
      {
LABEL_8:
        v6 = *(_QWORD *)(v1 + 8);
        *(_QWORD *)(v1 + 8) = 0;
        if (v6)
          (*(void (**)(void))(v1 + 16))();
        JUMPOUT(0x212BC6398);
      }
    }
    else
    {
LABEL_6:
      v5 = *(_QWORD *)(result + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (!v5)
        goto LABEL_8;
    }
    (*(void (**)(void))(v1 + 32))();
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_20EF1BF68(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 504))
  {
    *(_QWORD *)(a1 + 272) = &off_24C9F15F0;
    v2 = *(void **)(a1 + 248);
    if (v2)
    {
      *(_QWORD *)(a1 + 256) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 216);
    if (v3)
      free(v3);
    *(_QWORD *)(a1 + 216) = 0;
    v4 = *(void **)(a1 + 112);
    if (v4)
    {
      *(_QWORD *)(a1 + 120) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 80);
    if (v5)
      free(v5);
    *(_QWORD *)(a1 + 80) = 0;
  }
  return a1;
}

uint64_t sub_20EF1BFDC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 2544);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v7)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
LABEL_6:
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

uint64_t sub_20EF1C05C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p;
  char *v14;
  char *v15;
  __int128 v16[2];
  uint64_t v17;
  void *v18;

  v16[0] = *(_OWORD *)(a2 + 40);
  *(__int128 *)((char *)v16 + 12) = *(_OWORD *)(a2 + 52);
  sub_20EF1B05C((uint64_t)&v17, a2 + 72);
  __p = 0;
  v14 = 0;
  v15 = 0;
  v4 = *(_QWORD *)(a2 + 112);
  v5 = *(_QWORD *)(a2 + 120);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0)
      sub_20E867F44();
    v7 = (char *)operator new(v5 - v4);
    v8 = 0;
    __p = v7;
    v15 = &v7[16 * (v6 >> 4)];
    do
    {
      v9 = v4 + v8;
      v10 = &v7[v8];
      *v10 = *(_BYTE *)(v4 + v8);
      v11 = *(_QWORD *)(v4 + v8 + 4);
      *((_DWORD *)v10 + 3) = *(_DWORD *)(v4 + v8 + 12);
      *(_QWORD *)(v10 + 4) = v11;
      v8 += 16;
    }
    while (v9 + 16 != v5);
    v14 = &v7[v8];
  }
  sub_20EF1C2FC(a1, v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = (char *)__p;
    operator delete(__p);
  }
  if (v18)
    free(v18);
  return a1;
}

void sub_20EF1C154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v19;

  if (__p)
  {
    operator delete(__p);
    v19 = a18;
    if (!a18)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v19 = a18;
    if (!a18)
      goto LABEL_3;
  }
  free(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF1C190(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *__p;
  char *v19;
  char *v20;
  __int128 v21[2];
  uint64_t v22;
  void *v23;

  v21[0] = *(_OWORD *)(a2 + 40);
  *(__int128 *)((char *)v21 + 12) = *(_OWORD *)(a2 + 52);
  sub_20EF1B05C((uint64_t)&v22, a2 + 72);
  __p = 0;
  v19 = 0;
  v20 = 0;
  v5 = *(_QWORD *)(a2 + 112);
  v4 = *(_QWORD *)(a2 + 120);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 4);
    if (v7 >= 0x24924924924924ALL)
      sub_20E867F44();
    v8 = (char *)operator new(v6);
    v9 = 0;
    __p = v8;
    v20 = &v8[112 * v7];
    do
    {
      v10 = v5 + v9;
      v11 = &v8[v9];
      v12 = *(_OWORD *)(v5 + v9 + 16);
      *(_OWORD *)v11 = *(_OWORD *)(v5 + v9);
      *((_OWORD *)v11 + 1) = v12;
      v13 = *(_OWORD *)(v5 + v9 + 32);
      v14 = *(_OWORD *)(v5 + v9 + 48);
      v15 = *(_OWORD *)(v5 + v9 + 80);
      *((_OWORD *)v11 + 4) = *(_OWORD *)(v5 + v9 + 64);
      *((_OWORD *)v11 + 5) = v15;
      *((_OWORD *)v11 + 2) = v13;
      *((_OWORD *)v11 + 3) = v14;
      v16 = *(_QWORD *)(v5 + v9 + 96);
      *((_DWORD *)v11 + 26) = *(_DWORD *)(v5 + v9 + 104);
      *((_QWORD *)v11 + 12) = v16;
      v9 += 112;
    }
    while (v10 + 112 != v4);
    v19 = &v8[v9];
  }
  sub_20EF1C454(a1, v21, (uint64_t)&__p);
  if (__p)
  {
    v19 = (char *)__p;
    operator delete(__p);
  }
  if (v23)
    free(v23);
  return a1;
}

void sub_20EF1C2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v19;

  if (__p)
  {
    operator delete(__p);
    v19 = a18;
    if (!a18)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v19 = a18;
    if (!a18)
      goto LABEL_3;
  }
  free(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF1C2FC(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = *a2;
  *(_OWORD *)(a1 + 52) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 72) = a2[2];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v5 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(a1 + 44))
    v7 = *(_DWORD *)(a1 + 40) == 0;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  if (HIDWORD(v8) * HIDWORD(v9) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  v10 = *(_QWORD *)(a1 + 112);
  v11 = (*(_QWORD *)(a1 + 120) - v10) >> 4;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v10;
  return a1;
}

void sub_20EF1C410(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 120) = v5;
    operator delete(v5);
    v6 = *(void **)(v1 + 80);
    if (!v6)
    {
LABEL_3:
      *(_QWORD *)(v1 + 80) = 0;
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v6 = *(void **)(v1 + 80);
    if (!v6)
      goto LABEL_3;
  }
  free(v6);
  *(_QWORD *)(v1 + 80) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF1C454(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = *a2;
  *(_OWORD *)(a1 + 52) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 72) = a2[2];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v5 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(a1 + 44))
    v7 = *(_DWORD *)(a1 + 40) == 0;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  if (HIDWORD(v8) * HIDWORD(v9) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  v10 = *(_QWORD *)(a1 + 112);
  v11 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 120) - v10) >> 4);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v10;
  return a1;
}

void sub_20EF1C57C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 120) = v5;
    operator delete(v5);
    v6 = *(void **)(v1 + 80);
    if (!v6)
    {
LABEL_3:
      *(_QWORD *)(v1 + 80) = 0;
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v6 = *(void **)(v1 + 80);
    if (!v6)
      goto LABEL_3;
  }
  free(v6);
  *(_QWORD *)(v1 + 80) = 0;
  _Unwind_Resume(exception_object);
}

char *sub_20EF1C5C0(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0x84BDA12F684BDA13 * ((v4 - *a1) >> 2);
  v6 = v5 + 1;
  if (v5 + 1 > 0x25ED097B425ED09)
    sub_20E867F44();
  if (0x97B425ED097B426 * ((a1[2] - v3) >> 2) > v6)
    v6 = 0x97B425ED097B426 * ((a1[2] - v3) >> 2);
  if (0x84BDA12F684BDA13 * ((a1[2] - v3) >> 2) >= 0x12F684BDA12F684)
    v6 = 0x25ED097B425ED09;
  if (v6 > 0x25ED097B425ED09)
    sub_20E877A38();
  v8 = 108 * v6;
  v9 = (char *)operator new(108 * v6);
  v10 = &v9[108 * v5];
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v10 + 12) = *(_QWORD *)(a2 + 12);
  *((_DWORD *)v10 + 5) = *(_DWORD *)(a2 + 20);
  v10[24] = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(v10 + 76) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(v10 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v10 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(v10 + 28) = *(_OWORD *)(a2 + 28);
  v11 = *(_OWORD *)(a2 + 92);
  v12 = v10 + 108;
  *(_OWORD *)(v10 + 92) = v11;
  if (v4 != v3)
  {
    v13 = 0;
    do
    {
      v14 = &v10[v13];
      v15 = *(_QWORD *)&v4[v13 - 108];
      *((_DWORD *)v14 - 25) = *(_DWORD *)&v4[v13 - 100];
      *(_QWORD *)(v14 - 108) = v15;
      v16 = *(_QWORD *)&v4[v13 - 96];
      *((_DWORD *)v14 - 22) = *(_DWORD *)&v4[v13 - 88];
      *((_QWORD *)v14 - 12) = v16;
      *(v14 - 84) = v4[v13 - 84];
      v17 = *(_OWORD *)&v4[v13 - 80];
      v18 = *(_OWORD *)&v4[v13 - 64];
      v19 = *(_OWORD *)&v4[v13 - 32];
      *((_OWORD *)v14 - 3) = *(_OWORD *)&v4[v13 - 48];
      *((_OWORD *)v14 - 2) = v19;
      *((_OWORD *)v14 - 5) = v17;
      *((_OWORD *)v14 - 4) = v18;
      *((_QWORD *)v14 - 2) = *(_QWORD *)&v4[v13 - 16];
      *((_QWORD *)v14 - 1) = *(_QWORD *)&v4[v13 - 8];
      v13 -= 108;
    }
    while (&v4[v13] != v3);
    v10 += v13;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[v8];
  if (v3)
    operator delete(v3);
  return v12;
}

uint64_t sub_20EF1C770(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t i;
  int v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = sub_20EF1B040;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = sub_20EF1D684;
  v3 = 5489;
  *(_DWORD *)(a1 + 40) = 5489;
  v4 = 1;
  for (i = 11; i != 634; ++i)
  {
    v6 = 1812433253 * (v3 ^ (v3 >> 30));
    v3 = v6 + v4;
    *(_DWORD *)(a1 + 4 * i) = i + v6 - 10;
    ++v4;
  }
  *(_QWORD *)(a1 + 2536) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F558;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F5A8;
  LODWORD(v7[1].__shared_owners_) = 5489;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 2544) = &off_24CA1F4F8;
  *(_QWORD *)(a1 + 2552) = v7 + 1;
  *(_QWORD *)(a1 + 2560) = v7;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return a1;
}

void sub_20EF1C8D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(a1);
}

void sub_20EF1C8E4(uint64_t a1@<X0>, char ***a2@<X1>, uint64_t *a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, unint64_t a9, uint64_t a10, float32x2_t *a11, uint64_t a12, char a13)
{
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  float32x4_t v46;
  double v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x2_t v50;
  float32x4_t v51;
  float32x2_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  double v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  double v63;
  double v64;
  uint64_t v65;
  char *v66;
  double v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x2_t v70;
  double v71;
  double v72;
  uint64_t v73;
  float32x2_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  char *v78;
  void *v79;
  void *v80;
  char *v81;
  int8x16_t v82;
  float32x2_t v83;
  int8x16_t v84;
  float32x2_t v85;
  float32x4_t v86;
  int8x16_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float v94;
  int8x16_t v95;
  float v96;
  BOOL v97;
  unsigned __int8 v98;
  uint64_t v99;
  int32x4_t v100;
  int32x4_t v101;
  float32x4_t v102;
  float32x2_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int8x16_t v106;
  unint64_t v107;
  uint64_t *v108;
  __int128 v110;
  uint64_t v111;
  unint64_t v112[4];
  unint64_t v113[6];
  char *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  char *v120;
  __int128 v121;
  uint64_t v122;
  uint64_t *v123;
  char ***v124;
  void *v125;
  uint64_t v126;
  char v127;

  v21 = a9;
  v20 = a10;
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  if ((a13 & 1) != 0)
  {
    sub_20EF1D5AC((uint64_t *)&v120, a4, (uint64_t)a5);
    sub_20EF1D5AC((uint64_t *)&v114, a9, a10);
    v22 = *(_DWORD **)(a1 + 8);
    if (!v22)
    {
      v22 = (_DWORD *)operator new();
      *v22 = *(_DWORD *)a1;
      v23 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v22;
      if (v23)
      {
        (*(void (**)(uint64_t))(a1 + 16))(v23);
        v22 = *(_DWORD **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 16) = sub_20EF1B040;
    }
    v113[0] = (unint64_t)a2;
    v113[1] = (unint64_t)a3;
    v113[2] = (uint64_t)(v121 - (_QWORD)v120) >> 2;
    v113[3] = (unint64_t)v120;
    v112[0] = a6;
    v112[1] = a7;
    v112[2] = ((char *)v115 - v114) >> 2;
    v112[3] = (unint64_t)v114;
    sub_20EF15964((unint64_t)v22, v113, v112, &v125);
    v107 = a6;
    v24 = a7;
    sub_20EF1A578(a8, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 4)- 0x3333333333333333 * ((v126 - (uint64_t)v125) >> 4));
    v26 = (uint64_t)v125;
    v25 = v126;
    if (v125 != (void *)v126)
    {
      v27 = *(char **)(a8 + 8);
      do
      {
        if ((unint64_t)v27 < *(_QWORD *)(a8 + 16))
        {
          v28 = *(_QWORD *)v26;
          *((_DWORD *)v27 + 2) = *(_DWORD *)(v26 + 8);
          *(_QWORD *)v27 = v28;
          v29 = *(_QWORD *)(v26 + 12);
          *((_DWORD *)v27 + 5) = *(_DWORD *)(v26 + 20);
          *(_QWORD *)(v27 + 12) = v29;
          v27[24] = *(_BYTE *)(v26 + 24);
          *((_QWORD *)v27 + 5) = 0;
          *((_QWORD *)v27 + 6) = 0;
          *((_QWORD *)v27 + 4) = 0;
          *((_OWORD *)v27 + 2) = *(_OWORD *)(v26 + 32);
          *((_QWORD *)v27 + 6) = *(_QWORD *)(v26 + 48);
          *(_QWORD *)(v26 + 32) = 0;
          *(_QWORD *)(v26 + 40) = 0;
          *(_QWORD *)(v26 + 48) = 0;
          *((_QWORD *)v27 + 7) = 0;
          *((_QWORD *)v27 + 8) = 0;
          *((_QWORD *)v27 + 9) = 0;
          *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
          *((_QWORD *)v27 + 9) = *(_QWORD *)(v26 + 72);
          *(_QWORD *)(v26 + 56) = 0;
          *(_QWORD *)(v26 + 64) = 0;
          *(_QWORD *)(v26 + 72) = 0;
          v27 += 80;
        }
        else
        {
          v27 = sub_20EF1E38C((char **)a8, v26);
        }
        *(_QWORD *)(a8 + 8) = v27;
        v26 += 80;
      }
      while (v26 != v25);
      v26 = (uint64_t)v125;
    }
    if (v26)
    {
      v30 = v126;
      v31 = (void *)v26;
      if (v126 != v26)
      {
        do
        {
          v32 = *(void **)(v30 - 24);
          if (v32)
          {
            *(_QWORD *)(v30 - 16) = v32;
            operator delete(v32);
          }
          v33 = *(void **)(v30 - 48);
          if (v33)
          {
            *(_QWORD *)(v30 - 40) = v33;
            operator delete(v33);
          }
          v30 -= 80;
        }
        while (v30 != v26);
        v31 = v125;
      }
      v126 = v26;
      operator delete(v31);
    }
    if (v114)
      operator delete(v114);
    a7 = v24;
    v20 = a10;
    if (v120)
      operator delete(v120);
    a6 = v107;
    v21 = a9;
  }
  if ((a13 & 2) != 0)
  {
    v34 = v20;
    v35 = *(uint64_t **)(a1 + 24);
    if (!v35)
    {
      v35 = (uint64_t *)operator new();
      sub_20EF1E5B8(v35, *(_DWORD *)(a1 + 4));
      v36 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v35;
      if (v36)
      {
        (*(void (**)(void))(a1 + 32))();
        v35 = *(uint64_t **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 32) = sub_20EF1D684;
    }
    v110 = *(_OWORD *)a12;
    v111 = *(_QWORD *)(a12 + 16);
    sub_20EF1E6CC(v35, a2, a3, a4, a5, a6, a7, &v120, v21, v34, &v110);
    sub_20EF1A578(a8, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 4)- 0x3333333333333333 * ((uint64_t)(v121 - (_QWORD)v120) >> 4));
    v38 = v120;
    v37 = (char *)v121;
    if (v120 != (char *)v121)
    {
      v39 = *(char **)(a8 + 8);
      do
      {
        if ((unint64_t)v39 < *(_QWORD *)(a8 + 16))
        {
          v40 = *(_QWORD *)v38;
          *((_DWORD *)v39 + 2) = *((_DWORD *)v38 + 2);
          *(_QWORD *)v39 = v40;
          v41 = *(_QWORD *)(v38 + 12);
          *((_DWORD *)v39 + 5) = *((_DWORD *)v38 + 5);
          *(_QWORD *)(v39 + 12) = v41;
          v39[24] = v38[24];
          *((_QWORD *)v39 + 5) = 0;
          *((_QWORD *)v39 + 6) = 0;
          *((_QWORD *)v39 + 4) = 0;
          *((_OWORD *)v39 + 2) = *((_OWORD *)v38 + 2);
          *((_QWORD *)v39 + 6) = *((_QWORD *)v38 + 6);
          *((_QWORD *)v38 + 4) = 0;
          *((_QWORD *)v38 + 5) = 0;
          *((_QWORD *)v38 + 6) = 0;
          *((_QWORD *)v39 + 7) = 0;
          *((_QWORD *)v39 + 8) = 0;
          *((_QWORD *)v39 + 9) = 0;
          *(_OWORD *)(v39 + 56) = *(_OWORD *)(v38 + 56);
          *((_QWORD *)v39 + 9) = *((_QWORD *)v38 + 9);
          *((_QWORD *)v38 + 7) = 0;
          *((_QWORD *)v38 + 8) = 0;
          *((_QWORD *)v38 + 9) = 0;
          v39 += 80;
        }
        else
        {
          v39 = sub_20EF1E38C((char **)a8, (uint64_t)v38);
        }
        *(_QWORD *)(a8 + 8) = v39;
        v38 += 80;
      }
      while (v38 != v37);
      v38 = v120;
    }
    if (v38)
    {
      v42 = (char *)v121;
      v43 = v38;
      if ((char *)v121 != v38)
      {
        do
        {
          v44 = (void *)*((_QWORD *)v42 - 3);
          if (v44)
          {
            *((_QWORD *)v42 - 2) = v44;
            operator delete(v44);
          }
          v45 = (void *)*((_QWORD *)v42 - 6);
          if (v45)
          {
            *((_QWORD *)v42 - 5) = v45;
            operator delete(v45);
          }
          v42 -= 80;
        }
        while (v42 != v38);
        v43 = v120;
      }
      *(_QWORD *)&v121 = v38;
      operator delete(v43);
    }
  }
  kdebug_trace();
  sub_20EF1D6DC(&v120);
  if (**((int **)v120 + 7) <= 1)
  {
    v53 = atomic_load((unsigned __int8 *)&qword_254A60170);
    if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A60170))
    {
      qword_254A60168 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_RefinePlanesAngleAndPoints");
      __cxa_guard_release(&qword_254A60170);
    }
    v54 = qword_254A60168;
    *(_BYTE *)(qword_254A60168 + 16) = 0;
    *(_QWORD *)(v54 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v54 = std::chrono::steady_clock::now();
    *(_BYTE *)(v54 + 16) = 1;
  }
  *(float32x2_t *)v46.f32 = *a11;
  v105 = (int32x4_t)v46;
  v46.i32[2] = a11[1].i32[0];
  v101 = (int32x4_t)v46;
  *(float32x2_t *)v46.f32 = a11[2];
  v104 = (int32x4_t)v46;
  v46.i32[2] = a11[3].i32[0];
  v100 = (int32x4_t)v46;
  v46.i32[0] = a11[5].i32[0];
  v103 = *(float32x2_t *)v46.f32;
  *(float32x2_t *)v46.f32 = a11[4];
  v106 = (int8x16_t)v46;
  *(float32x2_t *)v46.f32 = a11[6];
  v46.i32[2] = a11[7].i32[0];
  v102 = v46;
  v56 = *(char **)a8;
  v55 = *(char **)(a8 + 8);
  if (*(char **)a8 == v55)
  {
    v58 = *(char **)a8;
  }
  else
  {
    v57 = a1 + 40;
    v58 = *(char **)(a8 + 8);
    while (1)
    {
      LODWORD(v47) = a11[1].i32[0];
      *(float32x2_t *)v48.i8 = a11[2];
      v49.i32[0] = a11[3].i32[0];
      v59 = *(double *)&a11[4];
      v50.i32[0] = a11[5].i32[0];
      v52.i32[0] = *((_DWORD *)v56 + 2);
      *(float32x2_t *)v60.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a11, COERCE_FLOAT(*(_QWORD *)v56)), *(float32x2_t *)v48.i8, *(float32x2_t *)v56, 1), *(float32x2_t *)&v59, v52.f32[0]);
      *(float32x2_t *)&v60.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v47, *(float32x2_t *)v56), *(float32x2_t *)v49.f32, *(float32x2_t *)v56, 1), v52, v50);
      *(float32x2_t *)v51.f32 = a11[6];
      v51.i32[2] = a11[7].i32[0];
      v61 = vaddq_f32(v60, v51);
      v62 = *(float32x2_t *)(v56 + 12);
      v60.i32[0] = *((_DWORD *)v56 + 5);
      *(float32x2_t *)v46.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a11, v62.f32[0]), *(float32x2_t *)v48.i8, v62, 1), *(float32x2_t *)&v59, v60.f32[0]);
      v63 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v47, v62), *(float32x2_t *)v49.f32, v62, 1), *(float32x2_t *)v60.f32, v50));
      LODWORD(v121) = v61.i32[2];
      v120 = (char *)v61.i64[0];
      *(_QWORD *)((char *)&v121 + 4) = v46.i64[0];
      HIDWORD(v121) = LODWORD(v63);
      v46.f32[0] = sub_20EF1ACC0((uint64_t)&v120, v46, v63, v48, v49, v59, v50);
      if (v46.f32[0] < 15.0)
        break;
      v65 = *((_QWORD *)v56 + 5);
      v120 = (char *)*((_QWORD *)v56 + 4);
      *(_QWORD *)&v121 = a3;
      *((_QWORD *)&v121 + 1) = a2;
      v122 = v65;
      v123 = a3;
      v124 = a2;
      v114 = v120;
      v115 = a5;
      v116 = a4;
      v117 = v65;
      v118 = a5;
      v119 = a4;
      sub_20EF1D7D0((__int8 *)&v125, v57, (uint64_t)&v120, &v114, *(double *)v46.i64, v47, (float32x4_t)v48, *(double *)v49.i64, v64, v50, *(double *)v51.i64, v52);
      if (v127)
        break;
      v56 += 80;
      if (v56 == v55)
        goto LABEL_71;
    }
    v108 = a5;
    if (v56 != v55)
    {
      v66 = v56 + 80;
      if (v56 + 80 == v55)
      {
        v58 = v56;
        v78 = *(char **)(a8 + 8);
        if (v56 == v78)
          goto LABEL_80;
        goto LABEL_74;
      }
      v58 = v56;
      do
      {
        LODWORD(v47) = a11[1].i32[0];
        *(float32x2_t *)v48.i8 = a11[2];
        v49.i32[0] = a11[3].i32[0];
        v67 = *(double *)&a11[4];
        v50.i32[0] = a11[5].i32[0];
        v52.i32[0] = *((_DWORD *)v66 + 2);
        *(float32x2_t *)v68.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a11, COERCE_FLOAT(*(_QWORD *)v66)), *(float32x2_t *)v48.i8, *(float32x2_t *)v66, 1), *(float32x2_t *)&v67, v52.f32[0]);
        *(float32x2_t *)&v68.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v47, *(float32x2_t *)v66), *(float32x2_t *)v49.f32, *(float32x2_t *)v66, 1), v52, v50);
        *(float32x2_t *)v51.f32 = a11[6];
        v51.i32[2] = a11[7].i32[0];
        v69 = vaddq_f32(v68, v51);
        v70 = *(float32x2_t *)(v66 + 12);
        v68.i32[0] = *((_DWORD *)v66 + 5);
        *(float32x2_t *)v46.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a11, v70.f32[0]), *(float32x2_t *)v48.i8, v70, 1), *(float32x2_t *)&v67, v68.f32[0]);
        v71 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v47, v70), *(float32x2_t *)v49.f32, v70, 1), *(float32x2_t *)v68.f32, v50));
        LODWORD(v121) = v69.i32[2];
        v120 = (char *)v69.i64[0];
        *(_QWORD *)((char *)&v121 + 4) = v46.i64[0];
        HIDWORD(v121) = LODWORD(v71);
        v46.f32[0] = sub_20EF1ACC0((uint64_t)&v120, v46, v71, v48, v49, v67, v50);
        if (v46.f32[0] >= 15.0)
        {
          v73 = *((_QWORD *)v66 + 5);
          v120 = (char *)*((_QWORD *)v66 + 4);
          *(_QWORD *)&v121 = a3;
          *((_QWORD *)&v121 + 1) = a2;
          v122 = v73;
          v123 = a3;
          v124 = a2;
          v114 = v120;
          v115 = v108;
          v116 = a4;
          v117 = v73;
          v118 = v108;
          v119 = a4;
          sub_20EF1D7D0((__int8 *)&v125, v57, (uint64_t)&v120, &v114, *(double *)v46.i64, v47, (float32x4_t)v48, *(double *)v49.i64, v72, v50, *(double *)v51.i64, v52);
          if (!v127)
          {
            v74 = *(float32x2_t *)v66;
            *((_DWORD *)v58 + 2) = *((_DWORD *)v66 + 2);
            *(float32x2_t *)v58 = v74;
            v75 = *(_QWORD *)(v66 + 12);
            *((_DWORD *)v58 + 5) = *((_DWORD *)v66 + 5);
            *(_QWORD *)(v58 + 12) = v75;
            v58[24] = v66[24];
            v76 = (void *)*((_QWORD *)v58 + 4);
            if (v76)
            {
              *((_QWORD *)v58 + 5) = v76;
              operator delete(v76);
              *((_QWORD *)v58 + 4) = 0;
              *((_QWORD *)v58 + 5) = 0;
              *((_QWORD *)v58 + 6) = 0;
            }
            *((_OWORD *)v58 + 2) = *((_OWORD *)v66 + 2);
            *((_QWORD *)v58 + 6) = *((_QWORD *)v66 + 6);
            *((_QWORD *)v66 + 4) = 0;
            *((_QWORD *)v66 + 5) = 0;
            *((_QWORD *)v66 + 6) = 0;
            v77 = (void *)*((_QWORD *)v58 + 7);
            if (v77)
            {
              *((_QWORD *)v58 + 8) = v77;
              operator delete(v77);
              *((_QWORD *)v58 + 7) = 0;
              *((_QWORD *)v58 + 8) = 0;
              *((_QWORD *)v58 + 9) = 0;
            }
            v46 = *(float32x4_t *)(v66 + 56);
            *(float32x4_t *)(v58 + 56) = v46;
            *((_QWORD *)v58 + 9) = *((_QWORD *)v66 + 9);
            *((_QWORD *)v66 + 7) = 0;
            *((_QWORD *)v66 + 8) = 0;
            *((_QWORD *)v66 + 9) = 0;
            v58 += 80;
          }
        }
        v66 += 80;
      }
      while (v66 != v55);
    }
  }
LABEL_71:
  v78 = *(char **)(a8 + 8);
  if (v58 == v78)
    goto LABEL_80;
LABEL_74:
  while (v78 != v58)
  {
    v79 = (void *)*((_QWORD *)v78 - 3);
    if (v79)
    {
      *((_QWORD *)v78 - 2) = v79;
      operator delete(v79);
    }
    v80 = (void *)*((_QWORD *)v78 - 6);
    if (v80)
    {
      *((_QWORD *)v78 - 5) = v80;
      operator delete(v80);
    }
    v78 -= 80;
  }
  *(_QWORD *)(a8 + 8) = v58;
LABEL_80:
  v81 = *(char **)a8;
  if (*(char **)a8 != v58)
  {
    v82 = (int8x16_t)vnegq_f32(v102);
    v88.i64[1] = v100.i64[1];
    v83 = (float32x2_t)vtrn2q_s32(v101, v100).u64[0];
    v84.i32[1] = v105.i32[1];
    v85 = (float32x2_t)vzip2q_s32(v101, v100).u64[0];
    v87 = v106;
    *(float32x2_t *)v86.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v104.i8), *(float *)v82.i32), v83, *(float32x2_t *)v102.f32, 1), v85, v102, 2);
    v87.i32[2] = v103.i32[0];
    *(float32x2_t *)&v86.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v106.i8, *(float32x2_t *)v82.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.i8, 1), *(float32x2_t *)v102.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL), v103);
    v88.i64[0] = 0;
    *(float32x2_t *)v82.i8 = vmla_f32(vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vzip1q_s32(v105, v104), 0), 0, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v83, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v83, 1), 0xCuLL)), 0, v85);
    v82.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v106.i8, 0), 0, *(float32x2_t *)v106.i8, 1), 0, (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL));
    v89 = (int8x16_t)vaddq_f32((float32x4_t)v82, v86);
    v90 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v89.i8, 1);
    v91 = (float32x2_t)vextq_s8(v89, v89, 8uLL).u64[0];
    do
    {
      v84.i32[0] = *((_DWORD *)v81 + 5);
      v87.i64[0] = *(_QWORD *)(v81 + 12);
      v93 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1);
      v87.i32[2] = v84.i32[0];
      v94 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v87.i8, *(float32x2_t *)v87.i8), v93, *(float32x2_t *)v87.i8, 1), *(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8).f32[0];
      v95 = v87;
      if (v94 != 1.0)
      {
        v96 = v94 + -1.0;
        if (v94 < 1.0)
          v96 = 1.0 - v94;
        v97 = v96 > 0.000001;
        v95 = v87;
        if (v97)
          v95 = (int8x16_t)vmulq_n_f32((float32x4_t)v87, 1.0 / sqrtf(v94));
      }
      v93.i32[0] = *((_DWORD *)v81 + 2);
      v92 = (float32x2_t)vextq_s8(v95, v95, 8uLL).u64[0];
      *(float32x2_t *)v95.i8 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v95.i8), v90, *(float32x2_t *)v95.i8, 1), v92, v91), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v81, *(float32x2_t *)v95.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v95.i8, 1), *(float32x2_t *)v81, 1), v92, v93));
      v84 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v88, (float32x4_t)v95), 0);
      v87 = vbslq_s8(v84, (int8x16_t)vnegq_f32((float32x4_t)v87), v87);
      *((_DWORD *)v81 + 5) = v87.i32[2];
      *(_QWORD *)(v81 + 12) = v87.i64[0];
      v81 += 80;
    }
    while (v81 != v58);
  }
  kdebug_trace();
  sub_20EF1D6DC(&v120);
  if (**((int **)v120 + 7) <= 1)
  {
    v98 = atomic_load((unsigned __int8 *)&qword_254A60180);
    if ((v98 & 1) == 0 && __cxa_guard_acquire(&qword_254A60180))
    {
      qword_254A60178 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_RefinePlanesAngleAndPoints");
      __cxa_guard_release(&qword_254A60180);
    }
    v99 = qword_254A60178;
    if (*(_BYTE *)(qword_254A60178 + 16))
    {
      *(_QWORD *)(v99 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v99;
      *(_BYTE *)(v99 + 16) = 0;
    }
  }
}

void sub_20EF1D444(_Unwind_Exception *a1)
{
  void **v1;

  __cxa_guard_abort(&qword_254A60180);
  sub_20EF17970(v1);
  _Unwind_Resume(a1);
}

void sub_20EF1D464(_Unwind_Exception *a1)
{
  void **v1;

  __cxa_guard_abort(&qword_254A60170);
  sub_20EF17970(v1);
  _Unwind_Resume(a1);
}

void sub_20EF1D48C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v2, 0xA0C40AFF93C70);
  sub_20EF17970(v1);
  _Unwind_Resume(a1);
}

void sub_20EF1D4B8(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  sub_20EF17970((void **)(v2 - 192));
  sub_20EF17970(v1);
  _Unwind_Resume(a1);
}

void sub_20EF1D584(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EF17970(v1);
  _Unwind_Resume(a1);
}

void sub_20EF1D598(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EF17970(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EF1D5AC(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  int *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __int128 *v13;

  v3 = result;
  v10 = 0uLL;
  v11 = 0;
  if (a2)
  {
    if (a2 >> 62)
      sub_20E867F44();
    *(_QWORD *)&v10 = operator new(4 * a2);
    *((_QWORD *)&v10 + 1) = v10;
    v11 = v10 + 4 * a2;
    v13 = &v10;
    v6 = 36 * a2;
    v7 = (int *)(a3 + 32);
    do
    {
      v12 = *v7;
      result = sub_20EEC5978((uint64_t *)&v13, &v12);
      v7 += 9;
      v6 -= 36;
    }
    while (v6);
    v8 = v10;
    v9 = v11;
  }
  else
  {
    v9 = 0;
    v8 = 0uLL;
  }
  *(_OWORD *)v3 = v8;
  v3[2] = v9;
  return result;
}

void sub_20EF1D664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EF1D684(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    *v1 = 0;
    if (v2)
      ((void (*)(void))v1[1])();
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EF1D6DC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60190);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60190))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.acv.trace");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60188);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A60190);
  }
  *a1 = qword_254A60188;
}

void sub_20EF1D778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60190);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60190);
  _Unwind_Resume(a1);
}

void sub_20EF1D7D0(__int8 *a1, uint64_t a2, uint64_t a3, _QWORD *a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x2_t a10, double a11, float32x2_t a12)
{
  float32x2_t v12;
  float32x4_t v13;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  int v24;
  float v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int8x16_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  double v45;
  float32x4_t v46;
  unint64_t v47;
  float v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t *v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  float32x2_t v62;
  float v63;
  float32x2_t v64;
  uint64_t v66;
  int8x16_t v67;
  float32x2_t v68;
  float32x2_t v69;
  unint64_t *v70;
  char *v72;
  char *v73;
  int8x16_t v74;
  unint64_t *v75;
  char *v76;
  unint64_t v77;
  __int8 *v78;
  __int8 v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float v87;
  float32x2_t v88;
  uint64_t v90;
  int8x16_t v91;
  float32x2_t v92;
  unint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  char *v99;
  int64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int8x16_t *v107;
  int8x16_t *v108;
  uint64_t v109;
  int8x16_t v110;
  unint64_t *v111;
  unint64_t *v112;
  __int8 v113;
  unint64_t v114;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  int v119;
  float32x4_t v120;
  uint64_t v121;
  float32x2_t v122;
  float32x2_t v123;
  int8x16_t v124;
  unint64_t *v125;
  float32x4_t v126;
  unint64_t *v127;
  unint64_t *v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  char v132;
  float v133;
  char v134;
  void *__p;
  void *v136;
  uint64_t v137;
  unsigned int v138;
  _BYTE v139[20];
  __int32 v140;
  char v141;
  char *v142;
  char *v143;
  char *v144;
  float v145;
  __int128 v146;
  __int128 v147;
  unint64_t v148;
  _QWORD v149[3];
  __int128 v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  v17 = *(unint64_t **)(a3 + 24);
  v18 = *(unint64_t **)a3;
  v19 = (uint64_t)(*(_QWORD *)a3 - (_QWORD)v17) >> 3;
  v127 = (unint64_t *)a4[3];
  if (v19 != (uint64_t)(*a4 - (_QWORD)v127) >> 3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/include_private/ACV/SurfaceDetection/Geometry/FitLine3Ransac.h", 93, (uint64_t)"Size(points) == Size(covariances)", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v18 = *(unint64_t **)a3;
    v17 = *(unint64_t **)(a3 + 24);
    v127 = (unint64_t *)a4[3];
  }
  v129 = 2;
  v130 = 100;
  LOBYTE(v133) = 0;
  v134 = 0;
  v114 = vcvtas_u32_f32((float)(unint64_t)-v19 * 0.9);
  v131 = v114;
  v132 = 1;
  v20 = *(_OWORD *)(a3 + 8);
  v21 = a4[2];
  v22 = *(_OWORD *)a4;
  v146 = v20;
  v147 = v22;
  v148 = v21;
  v139[0] = 0;
  v141 = 0;
  v143 = 0;
  v144 = 0;
  v142 = 0;
  v145 = 0.0;
  v138 = (unint64_t)((char *)v17 - (char *)v18) >> 3;
  if (v138 < 2)
    goto LABEL_56;
  v23 = v18;
  v113 = 0;
  v119 = 0;
  v116 = 0;
  v24 = 0;
  v111 = &v149[2];
  v112 = v18 + 1;
  v25 = 0.0;
  v128 = v17;
  v117 = a2;
  v118 = v18;
  while (1)
  {
    v26 = v138;
    if (v129 > v138)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v26 = v138;
    }
    if (v26)
    {
      LODWORD(v20) = v129;
      if ((double)v26 * 0.5 >= (double)(unint64_t)v20)
        sub_20EEFC704(a2, &v138, (unsigned int *)&v129, (uint64_t)&__p);
      else
        sub_20EEFC500(a2, &v138, (unsigned int *)&v129, (int32x4_t **)&__p);
    }
    else
    {
      __p = 0;
      v136 = 0;
      v137 = 0;
    }
    v27 = __p;
    v28 = *(unsigned int *)__p;
    v151 = v148;
    *(_OWORD *)&v149[1] = v146;
    *((_QWORD *)&v150 + 1) = *((_QWORD *)&v147 + 1);
    v29 = v28;
    v30 = &v23[v28];
    v31 = (unint64_t *)(v147 + 8 * v28);
    v149[0] = v30;
    *(_QWORD *)&v150 = v31;
    v32 = v23[v29];
    if (*((_QWORD *)&v146 + 1) <= v32)
      goto LABEL_118;
    v33 = *v31;
    if (v151 <= v33)
    {
      v111 = &v151;
      v32 = v33;
LABEL_118:
      sub_21023D290(v111, v32);
    }
    v34 = v149[1];
    v35 = *((unsigned int *)__p + 1);
    v151 = v148;
    *(_OWORD *)&v149[1] = v146;
    *((_QWORD *)&v150 + 1) = *((_QWORD *)&v147 + 1);
    v35 *= 8;
    v36 = (unint64_t *)(v147 + v35);
    v149[0] = (char *)v23 + v35;
    *(_QWORD *)&v150 = v147 + v35;
    v37 = *(unint64_t *)((char *)v23 + v35);
    if (*((_QWORD *)&v146 + 1) <= v37)
    {
      v32 = v37;
      goto LABEL_118;
    }
    v38 = *v36;
    if (v151 <= v38)
      sub_21023D290(&v151, v38);
    v39 = v34 + 12 * v32;
    v40 = v149[1] + 12 * v37;
    v13.i64[0] = *(_QWORD *)v39;
    v13.i32[2] = *(_DWORD *)(v39 + 8);
    a7.i64[0] = *(_QWORD *)v40;
    a7.i32[2] = *(_DWORD *)(v40 + 8);
    v41 = (int8x16_t)vsubq_f32(a7, v13);
    v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1);
    v43 = (float32x2_t)vextq_s8(v41, v41, 8uLL).u64[0];
    v44 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), v42, *(float32x2_t *)v41.i8, 1), v43, v43);
    if (v44.f32[0] == 0.0)
      goto LABEL_7;
    v45 = v44.f32[0];
    if (v44.f32[0] <= 0.0)
      v45 = 0.0 - v44.f32[0];
    if (v45 <= 0.00000001)
      goto LABEL_7;
    v120 = a7;
    v151 = v148;
    v46.i32[3] = HIDWORD(v147);
    *(_OWORD *)&v149[1] = v146;
    v150 = v147;
    v149[0] = v23;
    v152 = 0;
    if (v23 != v17 || (unint64_t *)v147 != v127)
    {
      v47 = 0;
      v50 = v149[1];
      v49 = v149[2];
      v51 = v151;
      v121 = *((_QWORD *)&v150 + 1);
      v52 = (unint64_t *)(v147 + 8);
      v48 = 0.0;
      v53 = v112;
      v54 = 1;
      v55 = *((float *)&v129 + 1);
      v124 = v41;
      v126 = v13;
      v122 = v44;
      v123 = v43;
      while (1)
      {
        v56 = *(v53 - 1);
        if (v49 <= v56)
          goto LABEL_114;
        v57 = v52;
        v58 = *(v52 - 1);
        if (v51 <= v58)
          break;
        v59 = v50 + 12 * v56;
        v46.i64[0] = *(_QWORD *)v59;
        v46.i32[2] = *(_DWORD *)(v59 + 8);
        v60 = (int8x16_t)vsubq_f32(v46, v13);
        v61 = (int8x16_t)vsubq_f32(vmlaq_n_f32(v13, (float32x4_t)v41, vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v60.i8), v42, *(float32x2_t *)v60.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL), v43), v44).f32[0]), v46);
        v64 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1);
        v62 = (float32x2_t)vextq_s8(v61, v61, 8uLL).u64[0];
        v63 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8), v64, *(float32x2_t *)v61.i8, 1), v62, v62).f32[0];
        v64.i32[0] = 0;
        if (v63 != 0.0 && v63 > 0.000001)
        {
          v66 = v121 + 36 * v58;
          v64.f32[0] = 1.0 / sqrtf(v63);
          v67 = (int8x16_t)vmulq_n_f32((float32x4_t)v61, v64.f32[0]);
          a10.i32[0] = *(_DWORD *)(v66 + 8);
          a12.i32[0] = *(_DWORD *)(v66 + 20);
          v12.i32[0] = *(_DWORD *)(v66 + 32);
          v68 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v66, *(float *)v67.i32), *(float32x2_t *)(v66 + 12), *(float32x2_t *)v67.i8, 1), *(float32x2_t *)(v66 + 24), (float32x4_t)v67, 2);
          v69 = vmla_lane_f32(vmul_f32(a10, *(float32x2_t *)v67.i8), a12, *(float32x2_t *)v67.i8, 1);
          a12 = (float32x2_t)vextq_s8(v67, v67, 8uLL).u64[0];
          a10 = vmla_f32(v69, a12, v12);
          if (v63 <= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, v68), vmul_lane_f32(v64, *(float32x2_t *)v61.i8, 1), v68, 1), a10, vmul_f32(v62, v64)).f32[0])v64.f32[0] = 0.0;
          else
            v64.f32[0] = 1.0;
        }
        if (v64.f32[0] <= v55)
        {
          ++v47;
          v46.f32[0] = expf(-v64.f32[0]);
          v44 = v122;
          v43 = v123;
          v41 = v124;
          v13 = v126;
          v48 = v48 + v46.f32[0];
        }
        v149[0] = v53;
        *(_QWORD *)&v150 = v57;
        v152 = v54++;
        v52 = v57 + 1;
        v70 = v53 + 1;
        if (v53++ == v128)
        {
          v53 = v70;
          if (v57 == v127)
            goto LABEL_43;
        }
      }
      v111 = &v151;
      v56 = v58;
LABEL_114:
      sub_21023D290(v111, v56);
    }
    v47 = 0;
    v48 = 0.0;
LABEL_43:
    if (v48 > v25)
      break;
    v17 = v128;
    a2 = v117;
    v23 = v118;
LABEL_7:
    v136 = v27;
    operator delete(v27);
    if (++v24 == 100)
    {
      v47 = v116;
      if (v119)
      {
        memset(v149, 0, sizeof(v149));
        if (!v116)
          goto LABEL_58;
        goto LABEL_54;
      }
LABEL_56:
      *a1 = 0;
      a1[24] = 0;
      return;
    }
  }
  *(_DWORD *)&v139[8] = v13.i32[2];
  *(_QWORD *)v139 = v13.i64[0];
  v140 = v120.i32[2];
  *(_QWORD *)&v139[12] = v120.i64[0];
  v17 = v128;
  if (v119)
  {
    v113 = v13.i8[0];
    v145 = v48;
    v23 = v118;
    if (!v132)
      goto LABEL_49;
LABEL_48:
    if (v47 >= v131)
      goto LABEL_57;
  }
  else
  {
    v141 = 1;
    v113 = v13.i8[0];
    v145 = v48;
    v23 = v118;
    if (v132)
      goto LABEL_48;
  }
LABEL_49:
  if (!v134 || v48 < v133)
  {
    v119 = 1;
    v25 = v48;
    v116 = v47;
    a2 = v117;
    goto LABEL_7;
  }
LABEL_57:
  v136 = v27;
  operator delete(v27);
  memset(v149, 0, sizeof(v149));
  if (!v47)
  {
LABEL_58:
    v73 = 0;
    v72 = 0;
    goto LABEL_59;
  }
LABEL_54:
  if (v47 >> 61)
    sub_20E867F44();
  v72 = (char *)operator new(8 * v47);
  v73 = &v72[8 * v47];
LABEL_59:
  v142 = v72;
  v143 = v72;
  v144 = v73;
  v74.i32[3] = HIDWORD(v146);
  v150 = v147;
  *(_OWORD *)&v149[1] = v146;
  v149[0] = v23;
  v151 = v148;
  v152 = 0;
  v75 = (unint64_t *)v147;
  if (v23 == v17 && (unint64_t *)v147 == v127)
  {
    v76 = v72;
    v77 = v114;
    v78 = a1;
    v79 = v113;
    goto LABEL_107;
  }
  v80 = 0;
  v125 = &v149[2];
  v76 = v72;
  while (2)
  {
    v81 = *v23;
    if (v149[2] <= *v23)
      goto LABEL_121;
    if (v151 <= *v75)
    {
      v125 = &v151;
      v81 = *v75;
LABEL_121:
      sub_21023D290(v125, v81);
    }
    v82 = v149[1] + 12 * v81;
    v74.i64[0] = *(_QWORD *)&v139[12];
    v74.i32[2] = v140;
    a7.i64[0] = *(_QWORD *)v82;
    a7.i32[2] = *(_DWORD *)(v82 + 8);
    v83 = (int8x16_t)vsubq_f32((float32x4_t)v74, *(float32x4_t *)v139);
    v84 = (int8x16_t)vsubq_f32(a7, *(float32x4_t *)v139);
    v85 = (float32x2_t)vextq_s8(v83, v83, 8uLL).u64[0];
    v86 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v84.i8, 1);
    v74 = (int8x16_t)vsubq_f32(vmlaq_n_f32(*(float32x4_t *)v139, (float32x4_t)v83, vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v84.i8), v86, *(float32x2_t *)v83.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL), v85), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v83.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1), *(float32x2_t *)v83.i8, 1), v85,
                             v85)).f32[0]),
                       a7);
    v88 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v74.i8, 1);
    a7 = (float32x4_t)vextq_s8(v74, v74, 8uLL);
    v87 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v74.i8), v88, *(float32x2_t *)v74.i8, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0];
    v88.i32[0] = 0;
    if (v87 != 0.0 && v87 > 0.000001)
    {
      v90 = *((_QWORD *)&v150 + 1) + 36 * *v75;
      v88.f32[0] = 1.0 / sqrtf(v87);
      v91 = (int8x16_t)vmulq_n_f32((float32x4_t)v74, v88.f32[0]);
      v85.i32[0] = *(_DWORD *)(v90 + 8);
      v86.i32[0] = *(_DWORD *)(v90 + 20);
      v12.i32[0] = *(_DWORD *)(v90 + 32);
      v92 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v90, *(float *)v91.i32), *(float32x2_t *)(v90 + 12), *(float32x2_t *)v91.i8, 1), *(float32x2_t *)(v90 + 24), (float32x4_t)v91, 2);
      if (v87 <= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v91.i8, v92), vmul_lane_f32(v88, *(float32x2_t *)v74.i8, 1), v92, 1), vmla_f32(vmla_lane_f32(vmul_f32(v85, *(float32x2_t *)v91.i8), v86, *(float32x2_t *)v91.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL), v12), vmul_f32(*(float32x2_t *)a7.f32, v88)).f32[0])v88.f32[0] = 0.0;
      else
        v88.f32[0] = 1.0;
    }
    if (v88.f32[0] <= *((float *)&v129 + 1))
    {
      if (v76 < v73)
      {
        v93 = v23;
        *(_QWORD *)v76 = v80;
        v94 = (uint64_t)(v76 + 8);
        goto LABEL_93;
      }
      v95 = (v76 - v72) >> 3;
      v96 = v95 + 1;
      if ((unint64_t)(v95 + 1) >> 61)
        sub_20E867F44();
      if ((v73 - v72) >> 2 > v96)
        v96 = (v73 - v72) >> 2;
      if ((unint64_t)(v73 - v72) >= 0x7FFFFFFFFFFFFFF8)
        v97 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v97 = v96;
      if (v97)
      {
        if (v97 >> 61)
          sub_20E877A38();
        v98 = operator new(8 * v97);
        v93 = v23;
        v99 = &v98[8 * v95];
        *(_QWORD *)v99 = v80;
        v94 = (uint64_t)(v99 + 8);
        v100 = v76 - v72;
        if (v76 == v72)
          goto LABEL_90;
LABEL_87:
        v101 = v100 - 8;
        if (v101 < 0x168)
        {
          v102 = v76;
          goto LABEL_89;
        }
        v104 = (v76 - 8 - v72) & 0xFFFFFFFFFFFFFFF8;
        if (&v98[v76 - v72 - 8 - v104] > &v98[v76 - v72 - 8])
        {
          v102 = v76;
          goto LABEL_89;
        }
        if (&v76[-v104 - 8] > v76 - 8)
        {
          v102 = v76;
          goto LABEL_89;
        }
        if ((unint64_t)(v72 - v98) < 0x20)
        {
          v102 = v76;
          goto LABEL_89;
        }
        v105 = (v101 >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v102 = &v76[-v106];
        v99 -= v106;
        v107 = (int8x16_t *)&v98[8 * v95 - 16];
        v108 = (int8x16_t *)(v76 - 16);
        v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v74 = v108[-1];
          v110 = *v108;
          v107[-1] = v74;
          *v107 = v110;
          v107 -= 2;
          v108 -= 2;
          v109 -= 4;
        }
        while (v109);
        if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_89:
            v103 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *((_QWORD *)v99 - 1) = v103;
            v99 -= 8;
          }
          while (v102 != v72);
        }
      }
      else
      {
        v93 = v23;
        v98 = 0;
        v99 = (char *)(8 * v95);
        *(_QWORD *)(8 * v95) = v80;
        v94 = 8 * v95 + 8;
        v100 = v76 - v72;
        if (v76 != v72)
          goto LABEL_87;
      }
LABEL_90:
      v73 = &v98[8 * v97];
      v142 = v99;
      v144 = v73;
      if (v72)
      {
        operator delete(v72);
        v93 = (unint64_t *)v149[0];
        v75 = (unint64_t *)v150;
      }
      v72 = v99;
      v17 = v128;
LABEL_93:
      v143 = (char *)v94;
      v80 = v152;
      v76 = (char *)v94;
      v23 = v93;
    }
    ++v23;
    ++v75;
    v149[0] = v23;
    *(_QWORD *)&v150 = v75;
    v152 = ++v80;
    if (v23 != v17 || v75 != v127)
      continue;
    break;
  }
  v79 = v139[0];
  v77 = v114;
  v78 = a1;
LABEL_107:
  v149[0] = *(_QWORD *)&v139[1];
  *(_DWORD *)((char *)v149 + 7) = *(_DWORD *)&v139[8];
  *(_QWORD *)((char *)&v149[1] + 3) = *(_QWORD *)((unint64_t)v139 | 0xC);
  *(_DWORD *)((char *)&v149[2] + 3) = *(_DWORD *)(((unint64_t)v139 | 0xC) + 8);
  if (v77 <= (v76 - v72) >> 3)
  {
    *v78 = v79;
    *(_QWORD *)(v78 + 1) = v149[0];
    *((_DWORD *)v78 + 2) = *(_DWORD *)((char *)v149 + 7);
    *(_QWORD *)(v78 + 12) = *(_QWORD *)((char *)&v149[1] + 3);
    *((_DWORD *)v78 + 5) = *(_DWORD *)((char *)&v149[2] + 3);
    v78[24] = 1;
    if (v72)
LABEL_109:
      operator delete(v72);
  }
  else
  {
    *v78 = 0;
    v78[24] = 0;
    if (v72)
      goto LABEL_109;
  }
}

void sub_20EF1E334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,_Unwind_Exception *exception_objecta,uint64_t a50)
{
  uint64_t v50;
  void *v52;

  v52 = *(void **)(v50 - 224);
  if (v52)
  {
    *(_QWORD *)(v50 - 216) = v52;
    operator delete(v52);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20EF1E38C(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  __int128 v19;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_20E867F44();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v5 = 0x333333333333333;
  else
    v5 = v4;
  if (v5 > 0x333333333333333)
    sub_20E877A38();
  v7 = 80 * v5;
  v8 = (char *)operator new(80 * v5);
  v9 = &v8[80 * v3];
  v10 = &v8[v7];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v9 + 12) = *(_QWORD *)(a2 + 12);
  *((_DWORD *)v9 + 5) = *(_DWORD *)(a2 + 20);
  v9[24] = *(_BYTE *)(a2 + 24);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = v9 + 80;
  *(_QWORD *)&v19 = v9 + 80;
  *((_QWORD *)&v19 + 1) = v10;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      sub_20EF1A798((uint64_t)&v9[v14 - 80], (uint64_t *)&v12[v14 - 80]);
      v14 -= 80;
    }
    while (&v12[v14] != v13);
    v12 = *a1;
    v15 = a1[1];
    *a1 = &v9[v14];
    *(_OWORD *)(a1 + 1) = v19;
    v11 = (char *)v19;
    while (v15 != v12)
    {
      v16 = (void *)*((_QWORD *)v15 - 3);
      if (v16)
      {
        *((_QWORD *)v15 - 2) = v16;
        operator delete(v16);
      }
      v17 = (void *)*((_QWORD *)v15 - 6);
      if (v17)
      {
        *((_QWORD *)v15 - 5) = v17;
        operator delete(v17);
      }
      v15 -= 80;
    }
  }
  if (v12)
    operator delete(v12);
  return v11;
}

uint64_t *sub_20EF1E5B8(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v4 = a2;
  v5 = operator new();
  *(_QWORD *)&v7 = 0x3C75C28F40000000;
  WORD4(v7) = a2;
  v8 = v4;
  v9 = 0x3F8000003D4CCCCDLL;
  v10 = 2500;
  v11 = 0x412000003C75C28FLL;
  v12 = 1036831949;
  v13 = 500;
  *a1 = sub_20EF44ADC(v5, &v7);
  a1[1] = (uint64_t)sub_20EF1FCD4;
  if (a2 <= 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/SingleShot/VerticalPlaneDetector.cpp", 72, (uint64_t)"isConfigValid(minSupport)", 25, (uint64_t)&unk_2102683A9, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20EF1E6A8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    ((void (*)(void))v1[1])();
  _Unwind_Resume(exception_object);
}

void sub_20EF1E6CC(uint64_t *a1@<X0>, char ***a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>, uint64_t a9, uint64_t a10, __int128 *a11)
{
  float v11;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  float32x4_t v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  float *v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t v42;
  float32x2_t v43;
  __float2 v44;
  float v45;
  float32x4_t v46;
  float32x4_t v47;
  char *v48;
  _BYTE *v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  char *v53;
  _BYTE *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  void **v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  void *v63;
  void *v64;
  char *v65;
  char *v66;
  int32x4_t v67;
  float32x2_t v68;
  float32x4_t v69;
  int8x16_t v70;
  char *v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float v76;
  int8x16_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float v82;
  float v83;
  int8x16_t v84;
  __n128 v85;
  float32x2_t v86;
  double v87;
  double v88;
  float32x4_t v89;
  float32x4_t v90;
  unsigned int v91;
  float32x4_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  unint64_t *v103;
  unint64_t v104;
  float32x4_t v105;
  char *v106;
  unint64_t v107;
  float32x4_t v108;
  __int32 v109;
  __int32 v110;
  float32x4_t v111;
  float32x4_t v112;
  __int32 v113;
  __int32 v114;
  int8x16_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  int v124;
  float32x4_t v125;
  uint64_t v126;
  int v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  int32x2_t v130;
  int8x16_t v131;
  int32x4_t v132;
  float32x4_t v133;
  float32x2_t v134;
  _BOOL4 v135;
  float v136;
  int8x16_t v137;
  float v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  float32x2_t v142;
  float v143;
  float v144;
  int8x16_t v145;
  __n128 v146;
  float32x2_t v147;
  double v148;
  double v149;
  unint64_t *v150;
  void *v151;
  char v152;
  int v153;
  int v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  void *v158;
  char *v159;
  void *v160;
  void *v161;
  unsigned __int8 v162;
  uint64_t v163;
  void *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  int8x16_t v172;
  float32x4_t v173;
  float32x4_t v174;
  int v175;
  int8x16_t v176;
  float32x2_t v177;
  float32x2_t v178;
  int8x16_t v179;
  int32x4_t v180;
  int v181;
  __int128 v182;
  __int128 v183;
  void *v184;
  unint64_t *v185;
  _BYTE *v186;
  unsigned int v187;
  void *__p;
  char *v189;
  char *v190;
  void *v191;
  char *v192;
  char *v193;
  size_t __sz;
  float *v195;
  void *v196;
  char *v197;
  __int128 v198;
  uint64_t v199;
  char **v200;
  __int128 v201;
  char *v202;
  void *v203[3];
  char v204;
  _DWORD v205[15];
  char v206;
  _BYTE v207[32];
  unsigned __int32 v208;

  v17 = (unint64_t)a2;
  if (*((_BYTE *)a11 + 16))
    v17 = *(_QWORD *)a11;
  kdebug_trace();
  sub_20EF1FBE0(v203);
  v167 = (uint64_t)a8;
  if (**((int **)v203[0] + 7) <= 1)
  {
    v18 = atomic_load((unsigned __int8 *)&qword_254A601A0);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A601A0))
    {
      qword_254A60198 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_VerticalDetect");
      __cxa_guard_release(&qword_254A601A0);
    }
    v19 = qword_254A60198;
    *(_BYTE *)(qword_254A60198 + 16) = 0;
    *(_QWORD *)(v19 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v19 = std::chrono::steady_clock::now();
    *(_BYTE *)(v19 + 16) = 1;
    a8 = (_QWORD *)v167;
  }
  if (v17 <= 2 && a6 <= 1)
  {
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    goto LABEL_155;
  }
  v20 = *a1;
  v198 = *a11;
  v199 = *((_QWORD *)a11 + 2);
  sub_20EF20210(a2, a3, a5, (uint64_t)&v198, (uint64_t)&v201);
  v21.n128_u32[0] = 1028443341;
  sub_20EF203B8(a6, a7, a10, (char **)&v196, v21, v22);
  v192 = 0;
  v193 = 0;
  v191 = 0;
  v23 = v201;
  v24 = *((_QWORD *)&v201 + 1) - v201;
  if (*((_QWORD *)&v201 + 1) != (_QWORD)v201)
  {
    v25 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 3);
    if (v25 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v26 = (char *)operator new(v24);
    v27 = 0;
    v191 = v26;
    v192 = v26;
    v193 = &v26[24 * v25];
    do
    {
      v28 = v23 + v27;
      v29 = &v26[v27];
      *(_QWORD *)v29 = *(_QWORD *)(v23 + v27);
      *(_OWORD *)(v29 + 8) = *(_OWORD *)(v23 + v27 + 8);
      v27 += 24;
    }
    while (v28 + 24 != *((_QWORD *)&v23 + 1));
    v192 = &v26[v27];
  }
  __p = 0;
  v189 = 0;
  v190 = 0;
  v30 = (char *)v196;
  v31 = v197;
  v32 = v197 - (_BYTE *)v196;
  if (v197 != v196)
  {
    v33 = 0x4EC4EC4EC4EC4EC5 * (v32 >> 2);
    if (v33 >= 0x4EC4EC4EC4EC4EDLL)
      sub_20E867F44();
    v34 = (char *)operator new(v32);
    v35 = 0;
    __p = v34;
    v189 = v34;
    v190 = &v34[52 * v33];
    do
    {
      v36 = &v30[v35];
      v37 = &v34[v35];
      *(_QWORD *)v37 = *(_QWORD *)&v30[v35];
      *((_QWORD *)v37 + 1) = *(_QWORD *)&v30[v35 + 8];
      *((_OWORD *)v37 + 1) = *(_OWORD *)&v30[v35 + 16];
      *((_OWORD *)v37 + 2) = *(_OWORD *)&v30[v35 + 32];
      *((_WORD *)v37 + 24) = *(_WORD *)&v30[v35 + 48];
      v35 += 52;
    }
    while (v36 + 52 != v31);
    v189 = &v34[v35];
  }
  sub_20EF451CC(v20, (char **)&v191, &__p, (char **)&__sz);
  if (__p)
  {
    v189 = (char *)__p;
    operator delete(__p);
  }
  if (v191)
  {
    v192 = (char *)v191;
    operator delete(v191);
  }
  v39 = (float *)__sz;
  v38 = v195;
  memset(v207, 0, 24);
  v40 = (uint64_t)v195 - __sz;
  if (v195 == (float *)__sz)
  {
    v49 = 0;
    v48 = 0;
    if (v195)
    {
LABEL_32:
      v195 = v38;
      operator delete(v38);
    }
  }
  else
  {
    if ((unint64_t)v40 >= 0x5555555555555551)
      sub_20E867F44();
    v41 = v40 >> 3;
    *(_QWORD *)v207 = operator new(24 * (v40 >> 3));
    *(_QWORD *)&v207[8] = *(_QWORD *)v207;
    *(_QWORD *)&v207[16] = *(_QWORD *)v207 + 24 * v41;
    v200 = (char **)v207;
    do
    {
      v44 = __sincosf_stret(*v39 * 0.017453);
      v45 = v39[1];
      v46.i64[1] = 0;
      v46.f32[0] = v45 * v44.__cosval;
      v46.f32[1] = v45 * v44.__sinval;
      if (v45 == 0.0 || fabsf(v45) <= 0.000001)
      {
        v47.i32[2] = 0;
        v47.i64[0] = __PAIR64__(LODWORD(v44.__sinval), LODWORD(v44.__cosval));
      }
      else
      {
        v42.f32[0] = (float)(v45 * v44.__cosval) * (float)(v45 * v44.__cosval);
        v43.f32[0] = v45 * v44.__sinval;
        v47 = vmulq_n_f32(v46, 1.0 / sqrtf(vmla_f32(v42, v43, v43).f32[0]));
      }
      LODWORD(v203[1]) = 0;
      v203[0] = (void *)v46.i64[0];
      HIDWORD(v203[2]) = v47.i32[2];
      *(uint64_t *)((char *)&v203[1] + 4) = v47.i64[0];
      sub_20EF1579C(&v200, (uint64_t *)v203);
      v39 += 2;
    }
    while (v39 != v38);
    v48 = *(char **)v207;
    v49 = *(_BYTE **)&v207[8];
    v38 = (float *)__sz;
    if (__sz)
      goto LABEL_32;
  }
  if (v196)
  {
    v197 = (char *)v196;
    operator delete(v196);
  }
  if ((_QWORD)v201)
  {
    *((_QWORD *)&v201 + 1) = v201;
    operator delete((void *)v201);
  }
  memset(v207, 0, 24);
  v165 = v48;
  v186 = v49;
  if (a6)
  {
    if (a6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    *(_QWORD *)v207 = operator new(24 * a6);
    *(_QWORD *)&v207[8] = *(_QWORD *)v207;
    *(_QWORD *)&v207[16] = *(_QWORD *)v207 + 24 * a6;
    v52 = a7;
    do
    {
      sub_20EF1FDE4(v52, (unint64_t *)v203, 0.05, v50, v51);
      v53 = *(char **)&v207[8];
      if (*(_QWORD *)&v207[8] < *(_QWORD *)&v207[16])
      {
        **(_QWORD **)&v207[8] = 0;
        *((_QWORD *)v53 + 1) = 0;
        *((_QWORD *)v53 + 2) = 0;
        *(_OWORD *)v53 = *(_OWORD *)v203;
        *((void **)v53 + 2) = v203[2];
        *(_QWORD *)&v207[8] = v53 + 24;
      }
      else
      {
        v54 = *(_BYTE **)v207;
        v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v207[8] - *(_QWORD *)v207) >> 3) + 1;
        if (v55 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v207[16] - *(_QWORD *)v207) >> 3) > v55)
          v55 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v207[16] - *(_QWORD *)v207) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v207[16] - *(_QWORD *)v207) >> 3) >= 0x555555555555555)
          v56 = 0xAAAAAAAAAAAAAAALL;
        else
          v56 = v55;
        if (v56 > 0xAAAAAAAAAAAAAAALL)
          sub_20E877A38();
        v57 = (char *)operator new(24 * v56);
        v58 = (void **)&v57[8 * ((v53 - v54) >> 3)];
        *(_OWORD *)v58 = *(_OWORD *)v203;
        v58[2] = v203[2];
        memset(v203, 0, sizeof(v203));
        v59 = (char *)(v58 + 3);
        if (v53 == v54)
        {
          *(_QWORD *)v207 = &v57[8 * ((v53 - v54) >> 3)];
          *(_QWORD *)&v207[8] = v58 + 3;
          *(_QWORD *)&v207[16] = &v57[24 * v56];
        }
        else
        {
          do
          {
            v60 = *(_OWORD *)(v53 - 24);
            v53 -= 24;
            *(_OWORD *)(v58 - 3) = v60;
            v58 -= 3;
            v58[2] = (void *)*((_QWORD *)v53 + 2);
            *(_QWORD *)v53 = 0;
            *((_QWORD *)v53 + 1) = 0;
            *((_QWORD *)v53 + 2) = 0;
          }
          while (v53 != v54);
          v53 = *(char **)v207;
          v61 = *(char **)&v207[8];
          *(_QWORD *)v207 = v58;
          *(_QWORD *)&v207[8] = v59;
          *(_QWORD *)&v207[16] = &v57[24 * v56];
          if (v61 != v53)
          {
            v62 = v61;
            do
            {
              v64 = (void *)*((_QWORD *)v62 - 3);
              v62 -= 24;
              v63 = v64;
              if (v64)
              {
                *((_QWORD *)v61 - 2) = v63;
                operator delete(v63);
              }
              v61 = v62;
            }
            while (v62 != v53);
          }
        }
        if (v53)
          operator delete(v53);
        *(_QWORD *)&v207[8] = v59;
        if (v203[0])
        {
          v203[1] = v203[0];
          operator delete(v203[0]);
        }
      }
      v52 += 24;
    }
    while (v52 != a7 + 24 * a6);
    v66 = *(char **)v207;
    v65 = *(char **)&v207[8];
  }
  else
  {
    v65 = 0;
    v66 = 0;
  }
  *(_QWORD *)v167 = 0;
  *(_QWORD *)(v167 + 8) = 0;
  *(_QWORD *)(v167 + 16) = 0;
  sub_20EF1A578(v167, 0xAAAAAAAAAAAAAAABLL * ((v186 - v165) >> 3));
  if (v186 != v165)
  {
    v181 = 0;
    v71 = v165;
    v166 = &v165[8 * ((v186 - v165) >> 3)];
    v178 = *(float32x2_t *)v67.i8;
    v177 = *(float32x2_t *)v67.i8;
    v180 = v67;
    do
    {
      v70.i64[0] = *(_QWORD *)v71;
      v70.i32[2] = *((_DWORD *)v71 + 2);
      v68.i32[0] = *((_DWORD *)v71 + 5);
      v69.i64[0] = *(_QWORD *)(v71 + 12);
      v72 = v69;
      v72.i32[2] = v68.i32[0];
      v73 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.f32, 1);
      v74 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), v73, *(float32x2_t *)v69.f32, 1), v68, v68);
      v168 = v71;
      v176 = v70;
      v179 = (int8x16_t)v72;
      if (v74.f32[0] == 1.0)
      {
        v75 = (float32x2_t)vextq_s8(v70, v70, 8uLL).u64[0];
      }
      else
      {
        v76 = v74.f32[0] + -1.0;
        if (v74.f32[0] < 1.0)
          v76 = 1.0 - v74.f32[0];
        if (v76 > 0.000001)
        {
          v74.f32[0] = 1.0 / sqrtf(v74.f32[0]);
          v77 = (int8x16_t)vmulq_n_f32(v72, v74.f32[0]);
          v78 = vmul_lane_f32(v74, *(float32x2_t *)v69.f32, 1);
          v79 = vmul_f32(v68, v74);
          v80 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.i8, 1);
          v81 = (float32x2_t)vextq_s8(v77, v77, 8uLL).u64[0];
          v82 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8), v78, *(float32x2_t *)v77.i8, 1), v81, v79).f32[0];
          if (v82 == 1.0)
            goto LABEL_145;
          v83 = v82 + -1.0;
          if (v82 < 1.0)
            v83 = 1.0 - v82;
          if (v83 <= 0.000001)
          {
LABEL_145:
            *(float *)&v201 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v176.i8, *(float32x2_t *)v77.i8), v80, *(float32x2_t *)v176.i8, 1), v81, (float32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL)).f32[0];
          }
          else
          {
            v81.f32[0] = sqrtf(v82);
            v84 = (int8x16_t)vmulq_n_f32((float32x4_t)v77, 1.0 / v81.f32[0]);
            *(float *)&v201 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v176.i8, *(float32x2_t *)v84.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v84.i8, 1), *(float32x2_t *)v176.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL)).f32[0];
            v77 = (int8x16_t)vdivq_f32((float32x4_t)v77, (float32x4_t)vdupq_lane_s32((int32x2_t)v81, 0));
          }
          goto LABEL_81;
        }
        v70 = v176;
        v75 = (float32x2_t)vextq_s8(v70, v70, 8uLL).u64[0];
      }
      *(float *)&v201 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v72.f32), v73, *(float32x2_t *)v70.i8, 1), v68, v75).f32[0];
      v77 = (int8x16_t)v72;
LABEL_81:
      HIDWORD(v201) = v77.i32[2];
      *(_QWORD *)((char *)&v201 + 4) = v77.i64[0];
      sub_20EF2071C((uint64_t)&v201, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, v203, 0.000225);
      sub_20EF21E18((uint64_t)&v201, a6, a7, a10, (char **)v207, 0.000225, v85, v86, v87, v88);
      v91 = 0;
      v175 = 0;
      v92.i32[3] = HIDWORD(v203[2]);
      v184 = *(void **)v207;
      v185 = (unint64_t *)v203[0];
      v182 = *(_OWORD *)&v207[8];
      v183 = *(_OWORD *)&v203[1];
      do
      {
        v201 = 0uLL;
        v202 = 0;
        v187 = v91;
        if (v185 == (unint64_t *)v183)
        {
          v95 = 0;
          v102 = 0;
        }
        else
        {
          v93 = (uint64_t)((uint64_t)v185 - v183) >> 3;
          v94 = -v93;
          if ((unint64_t)-v93 >= 0x1555555555555556)
            sub_20E867F44();
          v95 = (char *)operator new(-12 * v93);
          v96 = 0;
          *(_QWORD *)&v201 = v95;
          *((_QWORD *)&v201 + 1) = v95;
          v202 = &v95[12 * v94];
          v97 = v185;
          v203[0] = v185;
          v203[1] = a3;
          v203[2] = a2;
          do
          {
            v98 = *v97;
            if ((unint64_t)a2 <= *v97)
              sub_21023D290((unint64_t *)&v203[2], v98);
            v99 = &v95[v96];
            v100 = (char *)a3 + 12 * v98;
            v101 = *(_QWORD *)v100;
            *((_DWORD *)v99 + 2) = *((_DWORD *)v100 + 2);
            *(_QWORD *)v99 = v101;
            v203[0] = ++v97;
            v96 += 12;
          }
          while (v97 != (unint64_t *)v183);
          v102 = &v95[v96];
          *((_QWORD *)&v201 + 1) = v102;
        }
        v203[0] = v184;
        v203[1] = v66;
        v203[2] = (void *)(0xAAAAAAAAAAAAAAABLL * ((v65 - v66) >> 3));
        v103 = (unint64_t *)v184;
        if (v184 != (void *)v182)
        {
          do
          {
            v104 = *v103;
            if (0xAAAAAAAAAAAAAAABLL * ((v65 - v66) >> 3) <= *v103)
              sub_21023D290((unint64_t *)&v203[2], v104);
            sub_20EEFE640((void **)&v201, *((uint64_t *)&v201 + 1), *(uint64_t **)&v66[24 * v104], *(uint64_t **)&v66[24 * v104 + 8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v66[24 * v104 + 8] - *(_QWORD *)&v66[24 * v104]) >> 2));
            v203[0] = ++v103;
          }
          while (v103 != (unint64_t *)v182);
          v102 = (char *)*((_QWORD *)&v201 + 1);
          v95 = (char *)v201;
        }
        if (v95 == v102)
          goto LABEL_106;
        v105 = 0uLL;
        v106 = v95;
        do
        {
          v92.i64[0] = *(_QWORD *)v106;
          v92.i32[2] = *((_DWORD *)v106 + 2);
          v105 = vaddq_f32(v105, v92);
          v106 += 12;
        }
        while (v106 != v102);
        v107 = 0;
        v92.f32[0] = (float)(0xAAAAAAAAAAAAAAABLL * ((v102 - v95) >> 2));
        v111 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 0);
        v108 = vdivq_f32(v105, v111);
        v105.i32[0] = 0;
        v109 = 0;
        v110 = 0;
        v111.i32[0] = 0;
        v112.i32[0] = 0;
        v113 = 0;
        v69.i32[0] = 0;
        v114 = 0;
        v89.i32[0] = 0;
        do
        {
          v90.i64[0] = *(_QWORD *)v95;
          v90.i32[2] = *((_DWORD *)v95 + 2);
          v115 = (int8x16_t)vsubq_f32(v90, v108);
          *(float32x2_t *)v116.f32 = vmul_n_f32(*(float32x2_t *)v115.i8, *(float *)v115.i32);
          v117 = (float32x4_t)vextq_s8(v115, v115, 8uLL);
          *(float32x2_t *)&v116.u32[2] = vmul_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v115.i8);
          *(float32x2_t *)v118.f32 = vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v115.i8, 1);
          *(float32x2_t *)&v118.u32[2] = vmul_lane_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v115.i8, 1);
          *(float32x2_t *)v117.f32 = vmul_laneq_f32(*(float32x2_t *)v115.i8, (float32x4_t)v115, 2);
          v90 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32((float32x4_t)v115, (float32x4_t)v115), 2);
          v117.i32[2] = v90.i32[0];
          v105.i32[1] = v109;
          v105.i32[2] = v110;
          v111.i32[1] = v112.i32[0];
          v111.i32[2] = v113;
          v69.i32[1] = v114;
          v69.i32[2] = v89.i32[0];
          v105 = vaddq_f32(v105, v116);
          v111 = vaddq_f32(v111, v118);
          v69 = vaddq_f32(v69, v117);
          v113 = v111.i32[2];
          v112.i32[0] = v111.i32[1];
          v110 = v105.i32[2];
          v109 = v105.i32[1];
          v89.i32[0] = v69.i32[2];
          v114 = v69.i32[1];
          ++v107;
          v95 += 12;
        }
        while (v95 != v102);
        v108.f32[0] = (float)v107;
        v119 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 0);
        v112.i32[1] = v111.i32[2];
        v112.i64[1] = v69.i64[0];
        v105.i64[1] = __PAIR64__(v111.u32[0], v105.u32[2]);
        v206 = 0;
        *(_QWORD *)&v205[13] = 0x300000003;
        *(float32x4_t *)v207 = vdivq_f32(v105, v119);
        *(float32x4_t *)&v207[16] = vdivq_f32(v112, v119);
        v208 = vdivq_f32(v89, v108).u32[0];
        LODWORD(v198) = 0;
        LODWORD(v196) = 0;
        sub_20E8BEBE4();
        if ((_DWORD)v196
          || (v164 = operator new((4 * *(float *)&v198 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL),
              sub_20E8BEBE4(),
              MEMORY[0x212BC6368](v164, 0x1000C8052888210),
              (_DWORD)v196))
        {
          v122 = *((_QWORD *)&v201 + 1);
          v121 = v201;
          v123 = 1;
          if ((_QWORD)v201 == *((_QWORD *)&v201 + 1))
            goto LABEL_107;
          v124 = 0;
        }
        else
        {
          v181 = *(unsigned __int16 *)((char *)&v205[10] + 1) | (HIBYTE(v205[10]) << 16);
          v11 = *(float *)&v205[11];
          v120.i32[0] = v205[3];
          v178 = *(float32x2_t *)v120.f32;
          v120.i32[0] = v205[6];
          v177 = *(float32x2_t *)v120.f32;
          v120.i32[0] = v205[9];
          v180 = (int32x4_t)v120;
          v122 = *((_QWORD *)&v201 + 1);
          v121 = v201;
          if ((_QWORD)v201 == *((_QWORD *)&v201 + 1))
            goto LABEL_106;
          v123 = 0;
          v124 = LOBYTE(v205[10]);
        }
        v125 = 0uLL;
        v126 = v121;
        do
        {
          v120.i64[0] = *(_QWORD *)v126;
          v120.i32[2] = *(_DWORD *)(v126 + 8);
          v125 = vaddq_f32(v125, v120);
          v126 += 12;
        }
        while (v126 != v122);
        if ((v123 & 1) != 0)
        {
LABEL_106:
          v123 = 1;
          goto LABEL_107;
        }
        v127 = v124 | (v181 << 8);
        v123 = 1;
        if (*(float *)&v127 != 0.0 && fabsf(*(float *)&v127) > 0.000001 && (float)(v11 / *(float *)&v127) >= 0.01)
        {
          v128 = atomic_load((unsigned __int8 *)&qword_254A516F8);
          if ((v128 & 1) == 0)
          {
            v173 = v125;
            v153 = __cxa_guard_acquire(&qword_254A516F8);
            v125 = v173;
            if (v153)
            {
              dword_254A516F0 = 1065098332;
              __cxa_guard_release(&qword_254A516F8);
              v125 = v173;
            }
          }
          v129 = atomic_load((unsigned __int8 *)&qword_254A51708);
          if ((v129 & 1) == 0)
          {
            v174 = v125;
            v154 = __cxa_guard_acquire(&qword_254A51708);
            v125 = v174;
            if (v154)
            {
              dword_254A51700 = 1043452119;
              __cxa_guard_release(&qword_254A51708);
              v125 = v174;
            }
          }
          v130.i32[1] = v180.i32[1];
          *(float *)v130.i32 = fabsf(*(float *)v180.i32);
          if (*(float *)v130.i32 < *(float *)&dword_254A516F0 && *(float *)v130.i32 <= *(float *)&dword_254A51700)
          {
            *(float *)v130.i32 = (float)(0xAAAAAAAAAAAAAAABLL * ((v122 - v121) >> 2));
            v131 = (int8x16_t)vdivq_f32(v125, (float32x4_t)vdupq_lane_s32(v130, 0));
            *(float32x2_t *)v132.i8 = v178;
            v132.u64[1] = (unint64_t)v177;
            v133 = (float32x4_t)vuzp1q_s32(v132, v180);
            v134 = (float32x2_t)vextq_s8(v179, v179, 8uLL).u64[0];
            v135 = fabsf(vmla_f32(vmla_lane_f32(vmul_f32(v178, *(float32x2_t *)v179.i8), v177, *(float32x2_t *)v179.i8, 1), v134, *(float32x2_t *)v180.i8).f32[0]) >= 0.99985;
            v136 = vmla_f32(vmla_f32(vmul_f32(v178, v178), v177, v177), *(float32x2_t *)v180.i8, *(float32x2_t *)v180.i8).f32[0];
            v176 = v131;
            v172 = (int8x16_t)v133;
            if (v136 == 1.0)
              goto LABEL_117;
            v138 = v136 + -1.0;
            if (v136 < 1.0)
              v138 = 1.0 - v136;
            if (v138 <= 0.000001)
            {
LABEL_117:
              *(float *)&v198 = -vmla_f32(vmla_lane_f32(vmul_f32(v178, *(float32x2_t *)v131.i8), v177, *(float32x2_t *)v131.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v131, v131, 8uLL), *(float32x2_t *)v180.i8).f32[0];
              v137 = (int8x16_t)v133;
            }
            else
            {
              v134.f32[0] = 1.0 / sqrtf(v136);
              v137 = (int8x16_t)vmulq_n_f32(v133, v134.f32[0]);
              v139 = vmul_f32(*(float32x2_t *)v180.i8, v134);
              v140 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v137.i8, 1);
              v141 = vmla_lane_f32(vmul_f32(vmul_f32(v178, v134), *(float32x2_t *)v137.i8), vmul_f32(v177, v134), *(float32x2_t *)v137.i8, 1);
              v142 = (float32x2_t)vextq_s8(v137, v137, 8uLL).u64[0];
              v143 = vmla_f32(v141, v142, v139).f32[0];
              if (v143 == 1.0)
                goto LABEL_129;
              v144 = v143 + -1.0;
              if (v143 < 1.0)
                v144 = 1.0 - v143;
              if (v144 <= 0.000001)
              {
LABEL_129:
                *(float *)&v198 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v176.i8, *(float32x2_t *)v137.i8), v140, *(float32x2_t *)v176.i8, 1), v142, (float32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL)).f32[0];
              }
              else
              {
                v142.f32[0] = sqrtf(v143);
                v145 = (int8x16_t)vmulq_n_f32((float32x4_t)v137, 1.0 / v142.f32[0]);
                *(float *)&v198 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v176.i8, *(float32x2_t *)v145.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v145.i8, 1), *(float32x2_t *)v176.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL)).f32[0];
                v137 = (int8x16_t)vdivq_f32((float32x4_t)v137, (float32x4_t)vdupq_lane_s32((int32x2_t)v142, 0));
              }
            }
            HIDWORD(v198) = v137.i32[2];
            *(_QWORD *)((char *)&v198 + 4) = v137.i64[0];
            sub_20EF2071C((uint64_t)&v198, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, v203, 0.000225);
            sub_20EF21E18((uint64_t)&v198, a6, a7, a10, (char **)v207, 0.000225, v146, v147, v148, v149);
            v150 = (unint64_t *)v203[0];
            v92.i32[3] = HIDWORD(v203[2]);
            v151 = *(void **)v207;
            v182 = *(_OWORD *)&v207[8];
            v183 = *(_OWORD *)&v203[1];
            if (v185)
              operator delete(v185);
            v152 = v175 | v135;
            v175 |= v135;
            if (v184)
            {
              v123 = v152;
              operator delete(v184);
              v179 = v172;
              v184 = v151;
              v185 = v150;
            }
            else
            {
              v179 = v172;
              v184 = v151;
              v185 = v150;
              v123 = v152;
            }
          }
        }
LABEL_107:
        if ((_QWORD)v201)
        {
          *((_QWORD *)&v201 + 1) = v201;
          operator delete((void *)v201);
        }
        v91 = v187 + 1;
      }
      while (!(v123 & 1 | (v187 > 8)));
      LODWORD(v203[1]) = v176.i32[2];
      v203[0] = (void *)v176.i64[0];
      HIDWORD(v203[2]) = v179.i32[2];
      *(uint64_t *)((char *)&v203[1] + 4) = v179.i64[0];
      v204 = 2;
      *(_OWORD *)&v205[2] = v183;
      *(_QWORD *)v205 = v185;
      *(_QWORD *)&v205[6] = v184;
      v68.i32[1] = DWORD1(v182);
      *(_OWORD *)&v205[8] = v182;
      v155 = *(_QWORD *)(v167 + 8);
      if (v155 >= *(_QWORD *)(v167 + 16))
      {
        v157 = sub_20EF1A8C8((char **)v167, (uint64_t)v203);
        v158 = *(void **)&v205[6];
        *(_QWORD *)(v167 + 8) = v157;
        if (v158)
        {
          *(_QWORD *)&v205[8] = v158;
          operator delete(v158);
        }
      }
      else
      {
        *(_DWORD *)(v155 + 8) = v176.i32[2];
        *(_QWORD *)v155 = v176.i64[0];
        v156 = *(_QWORD *)((unint64_t)v203 | 0xC);
        *(_DWORD *)(v155 + 20) = *(_DWORD *)(((unint64_t)v203 | 0xC) + 8);
        *(_QWORD *)(v155 + 12) = v156;
        *(_BYTE *)(v155 + 24) = v204;
        *(_QWORD *)(v155 + 40) = 0;
        *(_QWORD *)(v155 + 48) = 0;
        *(_QWORD *)(v155 + 32) = 0;
        *(_OWORD *)(v155 + 32) = *(_OWORD *)v205;
        *(_QWORD *)(v155 + 48) = *(_QWORD *)&v205[4];
        *(_QWORD *)(v155 + 56) = 0;
        memset(v205, 0, 24);
        *(_QWORD *)(v155 + 64) = 0;
        *(_QWORD *)(v155 + 72) = 0;
        *(_OWORD *)(v155 + 56) = *(_OWORD *)&v205[6];
        *(_QWORD *)(v155 + 72) = *(_QWORD *)&v205[10];
        memset(&v205[6], 0, 24);
        *(_QWORD *)(v167 + 8) = v155 + 80;
      }
      if (*(_QWORD *)v205)
      {
        *(_QWORD *)&v205[2] = *(_QWORD *)v205;
        operator delete(*(void **)v205);
      }
      v71 = v168 + 24;
    }
    while (v168 + 24 != v166);
  }
  if (v66)
  {
    if (v65 != v66)
    {
      v159 = v65;
      do
      {
        v161 = (void *)*((_QWORD *)v159 - 3);
        v159 -= 24;
        v160 = v161;
        if (v161)
        {
          *((_QWORD *)v65 - 2) = v160;
          operator delete(v160);
        }
        v65 = v159;
      }
      while (v159 != v66);
    }
    operator delete(v66);
  }
  if (v165)
    operator delete(v165);
LABEL_155:
  kdebug_trace();
  sub_20EF1FBE0(v203);
  if (**((int **)v203[0] + 7) <= 1)
  {
    v162 = atomic_load((unsigned __int8 *)&qword_254A601B0);
    if ((v162 & 1) == 0 && __cxa_guard_acquire(&qword_254A601B0))
    {
      qword_254A601A8 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_VerticalDetect");
      __cxa_guard_release(&qword_254A601B0);
    }
    v163 = qword_254A601A8;
    if (*(_BYTE *)(qword_254A601A8 + 16))
    {
      *(_QWORD *)(v163 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v163;
      *(_BYTE *)(v163 + 16) = 0;
    }
  }
}

void sub_20EF1F938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  __cxa_guard_abort(&qword_254A601B0);
  sub_20EF17970(a21);
  _Unwind_Resume(a1);
}

void sub_20EF1F958(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A601A0);
  _Unwind_Resume(a1);
}

void sub_20EF1F970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  char *v21;
  char *v22;
  void *v24;
  char *v25;
  void *v26;
  void *v27;

  sub_20EF17970(a21);
  if (v22)
  {
    if (v21 != v22)
    {
      v25 = v21;
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v21 - 2) = v26;
          operator delete(v26);
        }
        v21 = v25;
      }
      while (v25 != v22);
    }
    operator delete(v22);
    v24 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v24 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_20EF1FBE0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A601C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A601C0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.acv.trace");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A601B8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A601C0);
  }
  *a1 = qword_254A601B8;
}

void sub_20EF1FC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A601C0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A601C0);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF1FCD4(uint64_t result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = *(std::__shared_weak_count **)(result + 2640);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = v1[10];
    if (v5)
    {
      v6 = v1[11];
      v7 = (void *)v1[10];
      if (v6 != v5)
      {
        v8 = v1[11];
        do
        {
          v10 = *(void **)(v8 - 24);
          v8 -= 24;
          v9 = v10;
          if (v10)
          {
            *(_QWORD *)(v6 - 16) = v9;
            operator delete(v9);
          }
          v6 = v8;
        }
        while (v8 != v5);
        v7 = (void *)v1[10];
      }
      v1[11] = v5;
      operator delete(v7);
    }
    v11 = v1[7];
    if (v11)
    {
      v12 = v1[8];
      v13 = (void *)v1[7];
      if (v12 != v11)
      {
        v14 = v1[8];
        do
        {
          v16 = *(void **)(v14 - 24);
          v14 -= 24;
          v15 = v16;
          if (v16)
          {
            *(_QWORD *)(v12 - 16) = v15;
            operator delete(v15);
          }
          v12 = v14;
        }
        while (v14 != v11);
        v13 = (void *)v1[7];
      }
      v1[8] = v11;
      operator delete(v13);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EF1FDE4(uint64_t a1@<X0>, unint64_t *a2@<X8>, float a3@<S0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q3>)
{
  float *v6;
  int8x16_t v7;
  float32x2_t v8;
  float v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  float32x4_t v13;
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;
  float v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  float v35;
  float v36;
  float v37;
  BOOL v38;
  float v39;
  float v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  float *v53;
  float32x4_t v54;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;

  v6 = (float *)(a1 + 12);
  a4.i64[0] = *(_QWORD *)(a1 + 12);
  a4.i32[2] = *(_DWORD *)(a1 + 20);
  a5.i64[0] = *(_QWORD *)a1;
  a5.i32[2] = *(_DWORD *)(a1 + 8);
  v7 = (int8x16_t)vsubq_f32(a4, a5);
  v8 = (float32x2_t)vextq_s8(v7, v7, 8uLL).u64[0];
  v9 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1), *(float32x2_t *)v7.i8, 1), v8, v8).f32[0]);
  v10 = vcvtpd_u64_f64(v9 / a3);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!v10)
  {
    v11 = 0;
    v41 = 1;
    v42 = a2[2];
    if (!v42)
      goto LABEL_42;
    goto LABEL_40;
  }
  v54 = (float32x4_t)v7;
  v57 = a5;
  if (v10 > 0x1555555555555555)
    sub_20E867F44();
  v53 = (float *)(a1 + 12);
  v11 = operator new(12 * v10);
  v12 = 0;
  v56 = vmulq_n_f32(vmulq_n_f32(v54, 1.0 / v9), a3);
  *a2 = (unint64_t)v11;
  a2[1] = (unint64_t)v11;
  a2[2] = (unint64_t)&v11[3 * v10];
  v13 = v57;
  do
  {
    v14 = a2[2];
    if ((unint64_t)v11 < v14)
    {
      v11[2] = v13.i32[2];
      *(_QWORD *)v11 = v13.i64[0];
      v11 += 3;
      goto LABEL_5;
    }
    v15 = (_DWORD *)*a2;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v11 - *a2) >> 2);
    v17 = v16 + 1;
    if (v16 + 1 > 0x1555555555555555)
      sub_20E867F44();
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v15) >> 2);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0xAAAAAAAAAAAAAAALL)
      v19 = 0x1555555555555555;
    else
      v19 = v17;
    v58 = v13;
    if (v19)
    {
      if (v19 > 0x1555555555555555)
        sub_20E877A38();
      v20 = (char *)operator new(12 * v19);
      v13 = v58;
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[12 * v16];
    v22 = &v20[12 * v19];
    *(_QWORD *)v21 = v13.i64[0];
    *((_DWORD *)v21 + 2) = v13.i32[2];
    v23 = v21 + 12;
    if (v11 == v15)
    {
      *a2 = (unint64_t)v21;
      a2[1] = (unint64_t)v23;
      a2[2] = (unint64_t)v22;
    }
    else
    {
      do
      {
        v24 = *(_QWORD *)(v11 - 3);
        v11 -= 3;
        v25 = v11[2];
        *(_QWORD *)(v21 - 12) = v24;
        v21 -= 12;
        *((_DWORD *)v21 + 2) = v25;
      }
      while (v11 != v15);
      v11 = (_DWORD *)*a2;
      *a2 = (unint64_t)v21;
      a2[1] = (unint64_t)v23;
      a2[2] = (unint64_t)v22;
      if (!v11)
        goto LABEL_23;
    }
    operator delete(v11);
    v13 = v58;
LABEL_23:
    v11 = v23;
LABEL_5:
    a2[1] = (unint64_t)v11;
    v13 = vaddq_f32(v56, v13);
    ++v12;
  }
  while (v12 != v10);
  v10 = *a2;
  if ((_DWORD *)*a2 == v11)
  {
    v41 = 1;
    v10 = (unint64_t)v11;
    v6 = v53;
    v42 = a2[2];
    if ((unint64_t)v11 >= v42)
      goto LABEL_42;
    goto LABEL_40;
  }
  v26 = *((float *)v11 - 3);
  v6 = v53;
  v27 = *v53;
  v28 = v26 < *v53;
  if (v26 == *v53)
    goto LABEL_36;
  v29 = v26 - v27;
  v30 = v27 - v26;
  if (!v28)
    v30 = v29;
  if (v30 <= 0.000001)
  {
LABEL_36:
    v31 = *((float *)v11 - 2);
    v32 = *(float *)(a1 + 16);
    v33 = v31 < v32;
    if (v31 == v32)
      goto LABEL_66;
    v34 = v31 - v32;
    v35 = v32 - v31;
    if (!v33)
      v35 = v34;
    if (v35 <= 0.000001)
    {
LABEL_66:
      v36 = *((float *)v11 - 1);
      v37 = *(float *)(a1 + 20);
      v38 = v36 < v37;
      if (v36 == v37)
        return;
      v39 = v36 - v37;
      v40 = v37 - v36;
      if (!v38)
        v40 = v39;
      if (v40 <= 0.000001)
        return;
    }
  }
  v41 = 0;
  v42 = a2[2];
  if ((unint64_t)v11 < v42)
  {
LABEL_40:
    v43 = *(_QWORD *)v6;
    v11[2] = *((_DWORD *)v6 + 2);
    *(_QWORD *)v11 = v43;
    v44 = v11 + 3;
    goto LABEL_57;
  }
LABEL_42:
  v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v11 - v10) >> 2) + 1;
  if (v45 > 0x1555555555555555)
    sub_20E867F44();
  v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v10) >> 2);
  if (2 * v46 > v45)
    v45 = 2 * v46;
  if (v46 >= 0xAAAAAAAAAAAAAAALL)
    v47 = 0x1555555555555555;
  else
    v47 = v45;
  if (v47)
  {
    if (v47 > 0x1555555555555555)
      sub_20E877A38();
    v48 = (char *)operator new(12 * v47);
  }
  else
  {
    v48 = 0;
  }
  v49 = &v48[4 * ((uint64_t)((uint64_t)v11 - v10) >> 2)];
  *(_QWORD *)v49 = *(_QWORD *)v6;
  *((float *)v49 + 2) = v6[2];
  v44 = v49 + 12;
  if ((v41 & 1) == 0)
  {
    do
    {
      v50 = *(_QWORD *)(v11 - 3);
      v11 -= 3;
      v51 = v11[2];
      *(_QWORD *)(v49 - 12) = v50;
      v49 -= 12;
      *((_DWORD *)v49 + 2) = v51;
    }
    while (v11 != (_DWORD *)v10);
    v11 = (_DWORD *)*a2;
  }
  *a2 = (unint64_t)v49;
  a2[1] = (unint64_t)v44;
  a2[2] = (unint64_t)&v48[12 * v47];
  if (v11)
    operator delete(v11);
LABEL_57:
  a2[1] = (unint64_t)v44;
}

void sub_20EF201E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char ***sub_20EF20210@<X0>(char ***result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char ***v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;

  if (!*(_BYTE *)(a4 + 16))
  {
    v14 = result;
    v19 = 0uLL;
    v20 = 0;
    if (result)
    {
      if ((unint64_t)result > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      *(_QWORD *)&v19 = operator new(24 * (_QWORD)result);
      *((_QWORD *)&v19 + 1) = v19;
      v20 = v19 + 24 * (_QWORD)v14;
      v24 = (char **)&v19;
      do
      {
        v15 = *a3;
        v16 = *(uint64_t *)((char *)a3 + 12);
        v21 = *a2;
        v22 = v15;
        v23 = v16;
        result = sub_20EF221AC(&v24, (uint64_t)&v21);
        a3 = (uint64_t *)((char *)a3 + 36);
        a2 = (uint64_t *)((char *)a2 + 12);
        v14 = (char ***)((char *)v14 - 1);
      }
      while (v14);
      goto LABEL_11;
    }
LABEL_12:
    v18 = 0;
    v17 = 0uLL;
    goto LABEL_13;
  }
  v9 = *(_QWORD *)a4;
  v8 = *(_QWORD **)(a4 + 8);
  v19 = 0uLL;
  v20 = 0;
  if (!v9)
    goto LABEL_12;
  if (v9 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  *(_QWORD *)&v19 = operator new(24 * v9);
  *((_QWORD *)&v19 + 1) = v19;
  v20 = v19 + 24 * v9;
  v24 = (char **)&v19;
  v10 = 8 * v9;
  do
  {
    v11 = (uint64_t *)((char *)a3 + 36 * *v8);
    v12 = *v11;
    v13 = *(uint64_t *)((char *)v11 + 12);
    v21 = *(uint64_t *)((char *)a2 + 12 * *v8);
    v22 = v12;
    v23 = v13;
    result = sub_20EF221AC(&v24, (uint64_t)&v21);
    ++v8;
    v10 -= 8;
  }
  while (v10);
LABEL_11:
  v17 = v19;
  v18 = v20;
LABEL_13:
  *(_OWORD *)a5 = v17;
  *(_QWORD *)(a5 + 16) = v18;
  return result;
}

void sub_20EF20390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EF203B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char **a4@<X8>, __n128 a5@<Q0>, float32x4_t a6@<Q1>)
{
  float v6;
  uint64_t v8;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t v24;
  __int16 v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char **v35;
  char *v36;
  char *v37;

  v6 = a5.n128_f32[0];
  v8 = a2;
  v11 = 0;
  v12 = 0;
  v13 = a2 + 24 * a1;
  v36 = 0;
  v37 = 0;
  if (24 * a1)
  {
    v14 = 0x5555555555555555 * ((-24 * a1) >> 3);
    if (v14 > 0x4EC4EC4EC4EC4ECLL)
      sub_20E867F44();
    v12 = operator new(0x5555555555555544 * ((-24 * a1) >> 3));
    v11 = (char *)v12 + 52 * v14;
    v36 = (char *)v12;
    v37 = v11;
  }
  if (!a1)
  {
    v34 = (char *)v12;
    goto LABEL_26;
  }
  v35 = a4;
  v15 = 0;
  do
  {
    while (1)
    {
      v16 = (uint64_t *)(a3 + 72 * v15);
      v17 = (uint64_t *)(a3 + 36 * ((2 * v15) | 1));
      v18 = *(_QWORD *)v8;
      v19 = *(_QWORD *)(v8 + 12);
      v20 = *v16;
      v21 = *(uint64_t *)((char *)v16 + 12);
      v22 = *v17;
      a5.n128_u64[0] = v19;
      a5.n128_u32[2] = *(_DWORD *)(v8 + 20);
      v23 = *(uint64_t *)((char *)v17 + 12);
      a6.i64[0] = *(_QWORD *)v8;
      a6.i32[2] = *(_DWORD *)(v8 + 8);
      a5 = (__n128)vsubq_f32((float32x4_t)a5, a6);
      v24 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
      v25 = llroundf(sqrtf(vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), v24, v24).f32[0])/ v6);
      if (v12 >= (_QWORD *)v37)
        break;
      *v12 = v18;
      v12[1] = v19;
      v12[2] = v20;
      v12[3] = v21;
      v12[4] = v22;
      v12[5] = v23;
      *((_WORD *)v12 + 24) = v25;
      v12 = (_QWORD *)((char *)v12 + 52);
      v8 += 24;
      ++v15;
      if (v8 == v13)
        goto LABEL_24;
    }
    v26 = v36;
    v27 = 0x4EC4EC4EC4EC4EC5 * (((char *)v12 - v36) >> 2);
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) > 0x4EC4EC4EC4EC4ECLL)
      sub_20E867F44();
    if (0x9D89D89D89D89D8ALL * ((v37 - v36) >> 2) > v28)
      v28 = 0x9D89D89D89D89D8ALL * ((v37 - v36) >> 2);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v37 - v36) >> 2)) >= 0x276276276276276)
      v29 = 0x4EC4EC4EC4EC4ECLL;
    else
      v29 = v28;
    if (v29 > 0x4EC4EC4EC4EC4ECLL)
      sub_20E877A38();
    v30 = (char *)operator new(52 * v29);
    v31 = &v30[4 * (((char *)v12 - v36) >> 2)];
    *(_QWORD *)v31 = v18;
    *((_QWORD *)v31 + 1) = v19;
    *((_QWORD *)v31 + 2) = v20;
    *((_QWORD *)v31 + 3) = v21;
    *((_QWORD *)v31 + 4) = v22;
    *((_QWORD *)v31 + 5) = v23;
    *((_WORD *)v31 + 24) = v25;
    if (v12 == (_QWORD *)v36)
    {
      v12 = v31 + 52;
      v36 = &v30[52 * v27];
      v37 = &v30[52 * v29];
      if (v26)
        goto LABEL_19;
    }
    else
    {
      v32 = 0;
      do
      {
        v33 = &v31[v32];
        *(_QWORD *)(v33 - 52) = *(_QWORD *)((char *)v12 + v32 - 52);
        *(_QWORD *)(v33 - 44) = *(_QWORD *)((char *)v12 + v32 - 44);
        *(_OWORD *)(v33 - 36) = *(_OWORD *)((char *)v12 + v32 - 36);
        a5 = *(__n128 *)((char *)v12 + v32 - 20);
        *(__n128 *)(v33 - 20) = a5;
        *((_WORD *)v33 - 2) = *(_WORD *)((char *)v12 + v32 - 4);
        v32 -= 52;
      }
      while ((char *)v12 + v32 != v36);
      v12 = v31 + 52;
      v36 = &v31[v32];
      v37 = &v30[52 * v29];
      if (v26)
LABEL_19:
        operator delete(v26);
    }
    v8 += 24;
    ++v15;
  }
  while (v8 != v13);
LABEL_24:
  a4 = v35;
  v34 = v36;
  v11 = v37;
LABEL_26:
  *a4 = v34;
  a4[1] = (char *)v12;
  a4[2] = v11;
}

void sub_20EF206E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EF2071C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>, float a7@<S0>)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *result;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  float v115;
  _QWORD v116[2];
  _QWORD v117[2];
  uint64_t v118;
  _QWORD v119[3];
  _QWORD *v120;
  __int128 v121;
  _QWORD v122[3];
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[3];
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD v130[3];
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD v134[3];
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[3];
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[3];
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD v146[3];
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD v150[3];
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD v154[3];
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD v158[3];
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[3];
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[3];
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[3];
  _QWORD *v175;
  __int128 v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD v181[3];
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD v185[3];
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD v189[3];
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD v193[3];
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD v197[3];
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD v205[3];
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;

  v208 = *MEMORY[0x24BDAC8D0];
  v117[0] = a2;
  v117[1] = a3;
  v116[0] = a4;
  v116[1] = a5;
  v115 = a7;
  v204 = 0;
  v9 = v205;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9F1278;
  v10[1] = a1;
  v10[2] = v117;
  v10[3] = v116;
  v10[4] = &v115;
  v206 = v10;
  v207 = a2;
  if (a2)
  {
    v173 = 0;
    while (((*(uint64_t (**)(_QWORD *, uint64_t *))(*v10 + 48))(v10, &v173) & 1) == 0)
    {
      v11 = v204 + 1;
      v204 = v11;
      if (v11 == v207)
        break;
      v10 = v206;
      v173 = v11;
      if (!v206)
        sub_20E86D37C();
    }
  }
  v12 = operator new(0x28uLL);
  *v12 = &off_24C9F1278;
  v12[1] = a1;
  v12[2] = v117;
  v12[3] = v116;
  v12[4] = &v115;
  v173 = v204;
  v13 = v174;
  if (v206)
  {
    v14 = a6;
    if (v206 == v205)
    {
      v175 = v174;
      (*(void (**)(_QWORD *, _QWORD *))(v205[0] + 24))(v205, v174);
    }
    else
    {
      v175 = v206;
      v206 = 0;
    }
  }
  else
  {
    v14 = a6;
    v175 = 0;
  }
  *(_QWORD *)&v176 = v207;
  *((_QWORD *)&v176 + 1) = a2;
  v178 = v12;
  v179 = a2;
  if (v206 == v205)
  {
    v15 = 4;
  }
  else
  {
    if (!v206)
      goto LABEL_17;
    v15 = 5;
    v9 = v206;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v15))(v9);
LABEL_17:
  v118 = v173;
  v16 = &v118;
  if (!v175)
  {
LABEL_20:
    v16[4] = 0;
    goto LABEL_22;
  }
  if (v175 != v174)
  {
    v16 = &v173;
    v120 = v175;
    goto LABEL_20;
  }
  v120 = v119;
  (*(void (**)(_QWORD *, _QWORD *))(v174[0] + 24))(v174, v119);
LABEL_22:
  v121 = v176;
  v17 = &v118;
  if (!v178)
  {
LABEL_25:
    v17[10] = 0;
    goto LABEL_27;
  }
  if (v178 != v177)
  {
    v17 = &v173;
    v123 = v178;
    goto LABEL_25;
  }
  v123 = v122;
  (*(void (**)(_QWORD *, _QWORD *))(*v178 + 24))(v178, v122);
LABEL_27:
  v18 = v178;
  v124 = v179;
  if (v178 == v177)
  {
    v19 = 4;
    v18 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_32;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_32:
  if (v175 == v174)
  {
    v20 = 4;
  }
  else
  {
    if (!v175)
      goto LABEL_37;
    v20 = 5;
    v13 = v175;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v20))(v13);
LABEL_37:
  v21 = (uint64_t)v120;
  v129 = v118;
  v22 = v130;
  if (!v120)
  {
LABEL_40:
    v131 = (_QWORD *)v21;
    goto LABEL_42;
  }
  if (v120 != v119)
  {
    v21 = (*(uint64_t (**)(_QWORD *))(*v120 + 16))(v120);
    goto LABEL_40;
  }
  v131 = v130;
  (*(void (**)(_QWORD *, _QWORD *))(v119[0] + 24))(v119, v130);
LABEL_42:
  v125 = *((_QWORD *)&v121 + 1);
  v132 = v121;
  v23 = v126;
  v24 = (uint64_t)v123;
  if (!v123)
  {
LABEL_45:
    v127 = (_QWORD *)v24;
    goto LABEL_47;
  }
  if (v123 != v122)
  {
    v24 = (*(uint64_t (**)(void))(*v123 + 16))();
    goto LABEL_45;
  }
  v127 = v126;
  (*(void (**)(_QWORD *, _QWORD *))(v122[0] + 24))(v122, v126);
LABEL_47:
  v128 = v124;
  *v14 = 0;
  v14[1] = 0;
  v14[2] = 0;
  v145 = v129;
  v25 = v146;
  v26 = (uint64_t)v131;
  if (!v131)
  {
LABEL_50:
    v147 = (_QWORD *)v26;
    goto LABEL_52;
  }
  if (v131 != v130)
  {
    v26 = (*(uint64_t (**)(_QWORD *))(*v131 + 16))(v131);
    goto LABEL_50;
  }
  v147 = v146;
  (*(void (**)(_QWORD *, _QWORD *))(v130[0] + 24))(v130, v146);
LABEL_52:
  v148 = v132;
  v141 = v125;
  v27 = v142;
  v28 = (uint64_t)v127;
  if (!v127)
  {
LABEL_55:
    v143 = (_QWORD *)v28;
    goto LABEL_57;
  }
  if (v127 != v126)
  {
    v28 = (*(uint64_t (**)(_QWORD *))(*v127 + 16))(v127);
    goto LABEL_55;
  }
  v143 = v142;
  (*(void (**)(_QWORD *, _QWORD *))(v126[0] + 24))(v126, v142);
LABEL_57:
  v144 = v128;
  v173 = v145;
  v29 = v174;
  v30 = (uint64_t)v147;
  if (!v147)
  {
LABEL_60:
    v175 = (_QWORD *)v30;
    goto LABEL_62;
  }
  if (v147 != v146)
  {
    v30 = (*(uint64_t (**)(_QWORD *))(*v147 + 16))(v147);
    goto LABEL_60;
  }
  v175 = v174;
  (*(void (**)(_QWORD *, _QWORD *))(v146[0] + 24))(v146, v174);
LABEL_62:
  *(_QWORD *)&v176 = v148;
  v204 = v141;
  v31 = v205;
  v32 = (uint64_t)v143;
  if (!v143)
  {
LABEL_65:
    v206 = (_QWORD *)v32;
    goto LABEL_67;
  }
  if (v143 != v142)
  {
    v32 = (*(uint64_t (**)(_QWORD *))(*v143 + 16))(v143);
    goto LABEL_65;
  }
  v206 = v205;
  (*(void (**)(_QWORD *, _QWORD *))(v142[0] + 24))(v142, v205);
LABEL_67:
  v207 = v144;
  v33 = v173;
  if (v173 == v204)
  {
    v34 = 0;
  }
  else
  {
    v34 = 0;
    do
    {
      do
      {
        v173 = ++v33;
        if (v33 == (_QWORD)v176)
          break;
        v200 = v33;
        if (!v175)
          sub_20E86D37C();
        v36 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v175 + 48))(v175, &v200);
        v33 = v173;
      }
      while ((v36 & 1) == 0);
      ++v34;
    }
    while (v33 != v204);
  }
  if (v206 == v205)
  {
    v35 = 4;
  }
  else
  {
    if (!v206)
      goto LABEL_80;
    v35 = 5;
    v31 = v206;
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v35))(v31);
LABEL_80:
  if (v175 == v174)
  {
    v37 = 4;
  }
  else
  {
    if (!v175)
      goto LABEL_85;
    v37 = 5;
    v29 = v175;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v37))(v29);
LABEL_85:
  if (v143 == v142)
  {
    v38 = 4;
  }
  else
  {
    if (!v143)
      goto LABEL_90;
    v38 = 5;
    v27 = v143;
  }
  (*(void (**)(_QWORD *))(*v27 + 8 * v38))(v27);
LABEL_90:
  if (v147 == v146)
  {
    v39 = 4;
  }
  else
  {
    if (!v147)
      goto LABEL_95;
    v39 = 5;
    v25 = v147;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v39))(v25);
LABEL_95:
  v137 = v129;
  v40 = v138;
  v41 = (uint64_t)v131;
  if (!v131)
  {
LABEL_98:
    v139 = (_QWORD *)v41;
    goto LABEL_100;
  }
  if (v131 != v130)
  {
    v41 = (*(uint64_t (**)(_QWORD *))(*v131 + 16))(v131);
    goto LABEL_98;
  }
  v139 = v138;
  (*(void (**)(_QWORD *, _QWORD *))(v130[0] + 24))(v130, v138);
LABEL_100:
  v140 = v132;
  v133 = v125;
  v42 = v134;
  result = v127;
  if (!v127)
  {
LABEL_103:
    v135 = result;
    goto LABEL_105;
  }
  if (v127 != v126)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v127 + 16))(v127);
    goto LABEL_103;
  }
  v135 = v134;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(v126[0] + 24))(v126, v134);
LABEL_105:
  v136 = v128;
  if (!v34)
    goto LABEL_292;
  if (v34 >> 61)
    sub_20E867F44();
  v44 = (char *)operator new(8 * v34);
  *v14 = v44;
  v14[1] = v44;
  v14[2] = &v44[8 * v34];
  v153 = v137;
  v45 = (uint64_t)v139;
  if (!v139)
    goto LABEL_110;
  if (v139 != v138)
  {
    v45 = (*(uint64_t (**)(_QWORD *))(*v139 + 16))(v139);
LABEL_110:
    v155 = (_QWORD *)v45;
    goto LABEL_112;
  }
  v155 = v154;
  (*(void (**)(_QWORD *, _QWORD *))(v138[0] + 24))(v138, v154);
LABEL_112:
  v113 = v44;
  v156 = v140;
  v149 = v133;
  v46 = (uint64_t)v135;
  if (!v135)
  {
LABEL_115:
    v151 = (_QWORD *)v46;
    goto LABEL_117;
  }
  if (v135 != v134)
  {
    v46 = (*(uint64_t (**)(_QWORD *))(*v135 + 16))(v135);
    goto LABEL_115;
  }
  v151 = v150;
  (*(void (**)(_QWORD *, _QWORD *))(v134[0] + 24))(v134, v150);
LABEL_117:
  v152 = v136;
  v161 = v153;
  v47 = (uint64_t)v155;
  if (!v155)
  {
LABEL_120:
    v163 = (_QWORD *)v47;
    goto LABEL_122;
  }
  if (v155 != v154)
  {
    v47 = (*(uint64_t (**)(_QWORD *))(*v155 + 16))(v155);
    goto LABEL_120;
  }
  v163 = v162;
  (*(void (**)(_QWORD *))(v154[0] + 24))(v154);
LABEL_122:
  v164 = v156;
  v157 = v149;
  v48 = (uint64_t)v151;
  if (!v151)
  {
LABEL_125:
    v159 = (_QWORD *)v48;
    goto LABEL_127;
  }
  if (v151 != v150)
  {
    v48 = (*(uint64_t (**)(_QWORD *))(*v151 + 16))(v151);
    goto LABEL_125;
  }
  v159 = v158;
  (*(void (**)(_QWORD *, _QWORD *))(v150[0] + 24))(v150, v158);
LABEL_127:
  v160 = v152;
  v169 = v161;
  v49 = (uint64_t)v163;
  if (!v163)
  {
LABEL_130:
    v171 = (_QWORD *)v49;
    goto LABEL_132;
  }
  if (v163 != v162)
  {
    v49 = (*(uint64_t (**)(_QWORD *))(*v163 + 16))(v163);
    goto LABEL_130;
  }
  v171 = v170;
  (*(void (**)(_QWORD *, _QWORD *))(v162[0] + 24))(v162, v170);
LABEL_132:
  v172 = v164;
  v165 = v157;
  v50 = v166;
  v51 = (uint64_t)v159;
  if (!v159)
  {
LABEL_135:
    v167 = (_QWORD *)v51;
    goto LABEL_137;
  }
  if (v159 != v158)
  {
    v51 = (*(uint64_t (**)(_QWORD *))(*v159 + 16))(v159);
    goto LABEL_135;
  }
  v167 = v166;
  (*(void (**)(_QWORD *, _QWORD *))(v158[0] + 24))(v158, v166);
LABEL_137:
  v168 = v160;
  v184 = v169;
  v52 = &v184;
  v53 = v185;
  if (!v171)
  {
LABEL_140:
    v52[4] = 0;
    goto LABEL_142;
  }
  if (v171 != v170)
  {
    v52 = &v169;
    v186 = v171;
    goto LABEL_140;
  }
  v186 = v185;
  (*(void (**)(void))(v170[0] + 24))();
LABEL_142:
  v187 = v172;
  v180 = v165;
  v54 = &v180;
  v55 = v181;
  if (!v167)
  {
LABEL_145:
    v54[4] = 0;
    goto LABEL_147;
  }
  if (v167 != v166)
  {
    v54 = &v165;
    v182 = v167;
    goto LABEL_145;
  }
  v182 = v181;
  (*(void (**)(_QWORD *, _QWORD *))(v166[0] + 24))(v166, v181);
LABEL_147:
  v183 = v168;
  v56 = v184;
  v196 = v184;
  v57 = &v196;
  v58 = v197;
  if (!v186)
  {
LABEL_150:
    v57[4] = 0;
    goto LABEL_152;
  }
  if (v186 != v185)
  {
    v57 = &v184;
    v198 = v186;
    goto LABEL_150;
  }
  v198 = v197;
  (*(void (**)(_QWORD *, _QWORD *))(v185[0] + 24))(v185, v197);
  v56 = v196;
LABEL_152:
  v59 = v187;
  v199 = v187;
  v204 = v56;
  v60 = v205;
  if (!v198)
  {
    v206 = 0;
    v207 = v187;
    v200 = v56;
    goto LABEL_157;
  }
  if (v198 == v197)
  {
    v206 = v205;
    (*(void (**)(_QWORD *, _QWORD *))(v197[0] + 24))(v197, v205);
    v61 = v206;
    v59 = v199;
    v207 = v199;
    v200 = v204;
    if (!v206)
      goto LABEL_157;
LABEL_161:
    if (v61 == v205)
    {
      v202 = v201;
      (*(void (**)(_QWORD *))(v205[0] + 24))(v205);
      v62 = v206;
      v203 = v207;
      if (v206 != v205)
        goto LABEL_158;
    }
    else
    {
      v202 = v61;
      v203 = v59;
      v206 = 0;
      v62 = 0;
      if (v205)
        goto LABEL_158;
    }
LABEL_163:
    v63 = 4;
    goto LABEL_164;
  }
  v61 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v198 + 16))(v198);
  v59 = v199;
  v206 = v61;
  v207 = v199;
  v200 = v204;
  if (v61)
    goto LABEL_161;
LABEL_157:
  v202 = 0;
  v203 = v59;
  v62 = v206;
  if (v206 == v205)
    goto LABEL_163;
LABEL_158:
  if (!v62)
    goto LABEL_165;
  v63 = 5;
  v60 = v62;
LABEL_164:
  (*(void (**)(_QWORD *))(*v60 + 8 * v63))(v60);
LABEL_165:
  v64 = v180;
  v188 = v180;
  v65 = &v188;
  v66 = v189;
  if (!v182)
  {
LABEL_168:
    v65[4] = 0;
    goto LABEL_170;
  }
  if (v182 != v181)
  {
    v65 = &v180;
    v190 = v182;
    goto LABEL_168;
  }
  v190 = v189;
  (*(void (**)(_QWORD *, _QWORD *))(v181[0] + 24))(v181, v189);
  v64 = v188;
LABEL_170:
  v67 = v183;
  v191 = v183;
  v204 = v64;
  v68 = v205;
  if (!v190)
  {
    v206 = 0;
    v207 = v183;
    v192 = v64;
    goto LABEL_175;
  }
  if (v190 == v189)
  {
    v206 = v205;
    (*(void (**)(_QWORD *, _QWORD *))(v189[0] + 24))(v189, v205);
    v69 = v206;
    v67 = v191;
    v207 = v191;
    v192 = v204;
    if (!v206)
      goto LABEL_175;
LABEL_179:
    if (v69 == v205)
    {
      v194 = v193;
      (*(void (**)(_QWORD *))(v205[0] + 24))(v205);
      v70 = v206;
      v195 = v207;
      if (v206 != v205)
        goto LABEL_176;
    }
    else
    {
      v194 = v69;
      v195 = v67;
      v206 = 0;
      v70 = 0;
      if (v205)
        goto LABEL_176;
    }
LABEL_181:
    v71 = 4;
    goto LABEL_182;
  }
  v69 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v190 + 16))(v190);
  v67 = v191;
  v206 = v69;
  v207 = v191;
  v192 = v204;
  if (v69)
    goto LABEL_179;
LABEL_175:
  v194 = 0;
  v195 = v67;
  v70 = v206;
  if (v206 == v205)
    goto LABEL_181;
LABEL_176:
  if (!v70)
    goto LABEL_183;
  v71 = 5;
  v68 = v70;
LABEL_182:
  (*(void (**)(_QWORD *))(*v68 + 8 * v71))(v68);
LABEL_183:
  v173 = v200;
  v72 = &v173;
  v73 = v174;
  if (!v202)
  {
LABEL_186:
    v72[4] = 0;
    goto LABEL_188;
  }
  v72 = &v200;
  if (v202 != v201)
  {
    v175 = v202;
    goto LABEL_186;
  }
  v175 = v174;
  (*(void (**)(void))(v201[0] + 24))();
LABEL_188:
  *(_QWORD *)&v176 = v203;
  *((_QWORD *)&v176 + 1) = v192;
  v74 = v177;
  if (v194)
  {
    if (v194 == v193)
    {
      v178 = v177;
      (*(void (**)(void))(v193[0] + 24))();
    }
    else
    {
      v178 = v194;
      v194 = 0;
    }
  }
  else
  {
    v178 = 0;
  }
  v75 = v194;
  v179 = v195;
  if (v194 == v193)
  {
    v76 = 4;
    v75 = v193;
  }
  else
  {
    if (!v194)
      goto LABEL_198;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_198:
  if (v190 == v189)
  {
    v77 = 4;
  }
  else
  {
    if (!v190)
      goto LABEL_203;
    v77 = 5;
    v66 = v190;
  }
  (*(void (**)(_QWORD *))(*v66 + 8 * v77))(v66);
LABEL_203:
  v78 = v202;
  if (v202 == v201)
  {
    v79 = 4;
    v78 = v201;
  }
  else
  {
    if (!v202)
      goto LABEL_208;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_208:
  if (v198 == v197)
  {
    v80 = 4;
  }
  else
  {
    if (!v198)
      goto LABEL_213;
    v80 = 5;
    v58 = v198;
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v80))(v58);
LABEL_213:
  if (v182 == v181)
  {
    v82 = 4;
    v81 = a6;
  }
  else
  {
    v81 = a6;
    if (!v182)
      goto LABEL_218;
    v82 = 5;
    v55 = v182;
  }
  (*(void (**)(_QWORD *))(*v55 + 8 * v82))(v55);
LABEL_218:
  if (v186 == v185)
  {
    v83 = 4;
  }
  else
  {
    if (!v186)
      goto LABEL_223;
    v83 = 5;
    v53 = v186;
  }
  (*(void (**)(_QWORD *))(*v53 + 8 * v83))(v53);
LABEL_223:
  if (v167 == v166)
  {
    v85 = 4;
    v84 = v170;
  }
  else
  {
    v84 = v170;
    if (!v167)
      goto LABEL_228;
    v85 = 5;
    v50 = v167;
  }
  (*(void (**)(_QWORD *))(*v50 + 8 * v85))(v50);
LABEL_228:
  if (v171 == v170)
  {
    v87 = 4;
    v86 = v150;
  }
  else
  {
    v86 = v150;
    if (!v171)
      goto LABEL_233;
    v87 = 5;
    v84 = v171;
  }
  (*(void (**)(_QWORD *))(*v84 + 8 * v87))(v84);
LABEL_233:
  v204 = v173;
  v88 = v205;
  v89 = (uint64_t)v175;
  if (!v175)
  {
LABEL_236:
    v206 = (_QWORD *)v89;
    goto LABEL_238;
  }
  if (v175 != v174)
  {
    v89 = (*(uint64_t (**)(void))(*v175 + 16))();
    goto LABEL_236;
  }
  v206 = v205;
  (*(void (**)(_QWORD *, _QWORD *))(v174[0] + 24))(v174, v205);
LABEL_238:
  v200 = *((_QWORD *)&v176 + 1);
  v207 = v176;
  v90 = v201;
  v91 = (uint64_t)v178;
  if (!v178)
  {
LABEL_241:
    v202 = (_QWORD *)v91;
    goto LABEL_243;
  }
  if (v178 != v177)
  {
    v91 = (*(uint64_t (**)(void))(*v178 + 16))();
    goto LABEL_241;
  }
  v202 = v201;
  (*(void (**)(_QWORD *, _QWORD *))(v177[0] + 24))(v177, v201);
LABEL_243:
  v203 = v179;
  v92 = v204;
  if (v204 == v200)
  {
    v93 = v113;
  }
  else
  {
    v93 = v113;
    do
    {
      *v93 = v92;
      do
      {
        v204 = ++v92;
        if (v92 == v207)
          break;
        v196 = v92;
        if (!v206)
          sub_20E86D37C();
        v95 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v206 + 48))(v206, &v196);
        v92 = v204;
      }
      while ((v95 & 1) == 0);
      ++v93;
    }
    while (v92 != v200);
  }
  if (v202 == v201)
  {
    v94 = 4;
  }
  else
  {
    if (!v202)
      goto LABEL_257;
    v94 = 5;
    v90 = v202;
  }
  (*(void (**)(_QWORD *))(*v90 + 8 * v94))(v90);
LABEL_257:
  if (v206 == v205)
  {
    v96 = 4;
    v42 = v134;
  }
  else
  {
    v42 = v134;
    if (!v206)
      goto LABEL_262;
    v96 = 5;
    v88 = v206;
  }
  (*(void (**)(_QWORD *))(*v88 + 8 * v96))(v88);
LABEL_262:
  if (v178 == v177)
  {
    v98 = 4;
    v97 = v154;
  }
  else
  {
    v97 = v154;
    if (!v178)
      goto LABEL_267;
    v98 = 5;
    v74 = v178;
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v98))(v74);
LABEL_267:
  if (v175 == v174)
  {
    v100 = 4;
    v22 = v130;
    v99 = v162;
  }
  else
  {
    v22 = v130;
    v99 = v162;
    if (!v175)
      goto LABEL_272;
    v100 = 5;
    v73 = v175;
  }
  (*(void (**)(_QWORD *))(*v73 + 8 * v100))(v73);
LABEL_272:
  result = v158;
  if (v159 == v158)
  {
    v101 = 4;
    v23 = v126;
  }
  else
  {
    v23 = v126;
    if (!v159)
      goto LABEL_277;
    v101 = 5;
    result = v159;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v101))();
LABEL_277:
  if (v163 == v162)
  {
    v102 = 4;
  }
  else
  {
    if (!v163)
      goto LABEL_282;
    v102 = 5;
    v99 = v163;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v99 + 8 * v102))(v99);
LABEL_282:
  v81[1] = v93;
  if (v151 == v150)
  {
    v103 = 4;
  }
  else
  {
    if (!v151)
      goto LABEL_287;
    v103 = 5;
    v86 = v151;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v86 + 8 * v103))(v86);
LABEL_287:
  if (v155 == v154)
  {
    v104 = 4;
  }
  else
  {
    if (!v155)
      goto LABEL_292;
    v104 = 5;
    v97 = v155;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v97 + 8 * v104))(v97);
LABEL_292:
  if (v135 == v134)
  {
    v105 = 4;
  }
  else
  {
    if (!v135)
      goto LABEL_297;
    v105 = 5;
    v42 = v135;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v42 + 8 * v105))(v42);
LABEL_297:
  if (v139 == v138)
  {
    v106 = 4;
  }
  else
  {
    if (!v139)
      goto LABEL_302;
    v106 = 5;
    v40 = v139;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v40 + 8 * v106))(v40);
LABEL_302:
  if (v127 == v126)
  {
    v109 = 4;
    v108 = v122;
    v107 = v119;
  }
  else
  {
    v108 = v122;
    v107 = v119;
    if (!v127)
      goto LABEL_307;
    v109 = 5;
    v23 = v127;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v23 + 8 * v109))(v23);
LABEL_307:
  if (v131 == v130)
  {
    v110 = 4;
  }
  else
  {
    if (!v131)
      goto LABEL_312;
    v110 = 5;
    v22 = v131;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v22 + 8 * v110))(v22);
LABEL_312:
  if (v123 == v122)
  {
    v111 = 4;
  }
  else
  {
    if (!v123)
      goto LABEL_317;
    v111 = 5;
    v108 = v123;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v108 + 8 * v111))(v108);
LABEL_317:
  if (v120 == v119)
  {
    v112 = 4;
  }
  else
  {
    if (!v120)
      return result;
    v112 = 5;
    v107 = v120;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v107 + 8 * v112))(v107);
}

void sub_20EF21980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EF21E18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, char **a5@<X8>, float a6@<S0>, __n128 a7@<Q1>, float32x2_t a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  float32x2_t v10;
  float32x2_t v11;
  char **v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 *v46;
  __n128 *v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (a2)
  {
    v15 = a5;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v50 = a2;
    v51 = a3;
    while (1)
    {
      v21 = a3 + 24 * v19;
      v22 = a4 + 72 * v19;
      a8.i32[0] = *(_DWORD *)(v21 + 8);
      a7.n128_u32[0] = *(_DWORD *)(a1 + 12);
      v23 = *(float32x2_t *)(a1 + 4);
      LODWORD(a9) = *(_DWORD *)(v22 + 8);
      LODWORD(a10) = *(_DWORD *)(v22 + 20);
      v10.i32[0] = *(_DWORD *)(v22 + 32);
      v24 = *(float32x2_t *)(v22 + 24);
      v25 = (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1);
      v26 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v22, v23.f32[0]), *(float32x2_t *)(v22 + 12), v23, 1), v24, a7.n128_f32[0]);
      v27 = (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1);
      a10 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(v23, v26), v27, v23, 1), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a9, v23), *(float32x2_t *)&a10, v23, 1), (float32x2_t)a7.n128_u64[0], v10), (float32x2_t)a7.n128_u64[0]));
      a9 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v21, v23), v25, *(float32x2_t *)v21, 1), (float32x2_t)a7.n128_u64[0], a8));
      v28 = 0.01;
      if (*(float *)&a10 <= 0.01)
        v28 = *(float *)&a10;
      if (v28 < a6)
        v28 = a6;
      if ((float)((float)(*(float *)a1 + *(float *)&a9) * (float)(*(float *)a1 + *(float *)&a9)) > v28)
        goto LABEL_5;
      v29 = a4 + 36 * ((2 * v19) | 1);
      a9 = *(double *)(v21 + 12);
      LODWORD(a10) = *(_DWORD *)(v21 + 20);
      v27.i32[0] = *(_DWORD *)(v29 + 8);
      v24.i32[0] = *(_DWORD *)(v29 + 20);
      v11.i32[0] = *(_DWORD *)(v29 + 32);
      v10 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v29, v23.f32[0]), v25, *(float32x2_t *)(v29 + 12)), (float32x2_t)vdup_lane_s32((int32x2_t)a7.n128_u64[0], 0), *(float32x2_t *)(v29 + 24));
      a8 = vmla_f32(vmla_f32(vmul_f32(v27, v23), v25, v24), (float32x2_t)a7.n128_u64[0], v11);
      v30 = vmla_f32(vmla_lane_f32(vmul_f32(v23, v10), v25, v10, 1), a8, (float32x2_t)a7.n128_u64[0]).f32[0];
      v31 = *(float *)a1
          + vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a9, *(float32x2_t *)(a1 + 4)), v25, *(float32x2_t *)&a9, 1), (float32x2_t)a7.n128_u64[0], *(float32x2_t *)&a10).f32[0];
      v32 = 0.01;
      if (v30 <= 0.01)
        v32 = v30;
      v33 = v31 * v31;
      if (v32 < a6)
        v32 = a6;
      if (v33 > v32)
        goto LABEL_5;
      if (v18 >= v17)
        break;
      *(_QWORD *)v18 = v19;
      v20 = (uint64_t)(v18 + 8);
LABEL_4:
      v15[1] = (char *)v20;
      v18 = (char *)v20;
LABEL_5:
      if (++v19 == a2)
        return;
    }
    v34 = (v18 - v16) >> 3;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61)
      sub_20E867F44();
    if ((v17 - v16) >> 2 > v35)
      v35 = (v17 - v16) >> 2;
    if ((unint64_t)(v17 - v16) >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
    {
      if (v36 >> 61)
        sub_20E877A38();
      v37 = operator new(8 * v36);
      v38 = &v37[8 * v34];
      *(_QWORD *)v38 = v19;
      v20 = (uint64_t)(v38 + 8);
      v39 = v18 - v16;
      if (v18 != v16)
      {
LABEL_26:
        v40 = v39 - 8;
        if (v40 < 0x168
          || (v43 = (v18 - 8 - v16) & 0xFFFFFFFFFFFFFFF8, &v37[v18 - v16 - 8 - v43] > &v37[v18 - v16 - 8])
          || &v18[-v43 - 8] > v18 - 8
          || (unint64_t)(v16 - v37) < 0x20)
        {
          v41 = v18;
          v15 = a5;
        }
        else
        {
          v44 = (v40 >> 3) + 1;
          v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v18[-v45];
          v38 -= v45;
          v46 = (__n128 *)&v37[8 * v34 - 16];
          v47 = (__n128 *)(v18 - 16);
          v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            a7 = v47[-1];
            v49 = *v47;
            v46[-1] = a7;
            *v46 = v49;
            v46 -= 2;
            v47 -= 2;
            v48 -= 4;
          }
          while (v48);
          v15 = a5;
          if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_29:
            v17 = &v37[8 * v36];
            *v15 = v38;
            v15[1] = (char *)v20;
            v15[2] = v17;
            if (!v16)
            {
LABEL_31:
              v16 = v38;
              a2 = v50;
              a3 = v51;
              goto LABEL_4;
            }
LABEL_30:
            operator delete(v16);
            goto LABEL_31;
          }
        }
        do
        {
          v42 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *((_QWORD *)v38 - 1) = v42;
          v38 -= 8;
        }
        while (v41 != v16);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v34);
      *(_QWORD *)(8 * v34) = v19;
      v20 = 8 * v34 + 8;
      v39 = v18 - v16;
      if (v18 != v16)
        goto LABEL_26;
    }
    v15 = a5;
    v17 = &v37[8 * v36];
    *a5 = v38;
    a5[1] = (char *)v20;
    a5[2] = v17;
    if (!v16)
      goto LABEL_31;
    goto LABEL_30;
  }
}

void sub_20EF22184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;

  v13 = *(void **)a12;
  if (*(_QWORD *)a12)
  {
    *(_QWORD *)(a12 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

char ***sub_20EF221AC(char ***a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v13 = (char *)operator new(24 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[24 * v9];
    *(_QWORD *)v14 = *(_QWORD *)a2;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    v7 = v14 + 24;
    if (v6 != v8)
    {
      do
      {
        v15 = *((_QWORD *)v6 - 3);
        v6 -= 24;
        *((_QWORD *)v14 - 3) = v15;
        v14 -= 24;
        *(_OWORD *)(v14 + 8) = *(_OWORD *)(v6 + 8);
      }
      while (v6 != v8);
      v6 = *v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[24 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *(_QWORD *)a2;
    *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + 8);
    v7 = v6 + 24;
  }
  v4[1] = v7;
  return a1;
}

void sub_20EF222F0()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EF22304(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C9F1278;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20EF22344(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9F1278;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_20EF2236C(uint64_t a1, _QWORD *a2, double a3, double a4, float32x2_t a5, double a6, double a7)
{
  float32x2_t v7;
  uint64_t v8;
  float32x2_t *v9;
  uint64_t v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  float32x2_t v15;
  float v16;
  float v17;
  float v18;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float32x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 12 * *a2);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 36 * *a2;
  v11 = **(float **)(a1 + 32);
  a5.i32[0] = v9[1].i32[0];
  v12 = *(float32x2_t *)(v8 + 4);
  LODWORD(a7) = *(_DWORD *)(v8 + 12);
  v13 = (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1);
  v14 = *(float *)v8 + vmla_f32(vmla_lane_f32(vmul_f32(*v9, v12), v13, *v9, 1), *(float32x2_t *)&a7, a5).f32[0];
  a5.i32[0] = *(_DWORD *)(v10 + 8);
  v13.i32[0] = *(_DWORD *)(v10 + 20);
  v7.i32[0] = *(_DWORD *)(v10 + 32);
  v15 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v10, v12.f32[0]), *(float32x2_t *)(v10 + 12), v12, 1), *(float32x2_t *)(v10 + 24), *(float *)&a7);
  v16 = vmla_f32(vmla_lane_f32(vmul_f32(v12, v15), (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1), v12, 1), vmla_f32(vmla_lane_f32(vmul_f32(a5, v12), v13, v12, 1), *(float32x2_t *)&a7, v7), *(float32x2_t *)&a7).f32[0];
  v17 = 0.01;
  if (v16 <= 0.01)
    v17 = v16;
  v18 = v14 * v14;
  if (v17 >= v11)
    v11 = v17;
  return v18 <= v11;
}

uint64_t sub_20EF22430(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3acv16surfacedetection24computePlaneInlierPointsERKNS0_8geometry12HessianPlaneIfEENS_3esn4sp"
                     "anIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEENS8_IKNSA_IfLj3ELj3ELb1EEELm18446744073709551615EEEfE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3acv16surfacedetection24computePlaneInlierPointsERKNS0_8geometry12HessianPlaneIfE"
                                "ENS_3esn4spanIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEENS8_IKNSA_IfLj3ELj3E"
                                "Lb1EEELm18446744073709551615EEEfE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3acv16surfacedetection24computePlaneInlierPointsERKNS0_8geometry12HessianPlaneIfEENS_3esn4spanIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEENS8_IKNSA_IfLj3ELj3ELb1EEELm18446744073709551615EEEfE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3acv16surfacedetection24computePlaneInlierPointsERKNS0_8geometry12HessianPlaneIfEENS_3esn4spanIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEENS8_IKNSA_IfLj3ELj3ELb1EEELm18446744073709551615EEEfE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF2249C()
{
  return &unk_24C9F12E8;
}

uint64_t sub_20EF224A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v2)
  {
    v3 = sub_20EF265E4(v2);
    MEMORY[0x212BC6398](v3, 0x1032C408CE249C3);
  }
  v4 = *(_QWORD **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v4)
  {
    v5 = (void *)v4[32];
    if (v5)
    {
      free(v5);
      v4[32] = 0;
    }
    v6 = (void *)v4[25];
    if (v6)
      free(v6);
    v4[25] = 0;
    v7 = (void *)v4[15];
    if (v7)
      free(v7);
    v4[15] = 0;
    v8 = (void *)v4[5];
    if (v8)
      free(v8);
    v4[5] = 0;
    MEMORY[0x212BC6398](v4, 0x1090C40EDF3BDA0);
  }
  v9 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v9)
  {
    sub_20EF26790(v9 + 24);
    MEMORY[0x212BC6398](v9, 0x10A0C407662816BLL);
  }
  sub_20E9BCAA8(*(_QWORD **)(a1 + 168));
  v10 = *(_QWORD **)(a1 + 136);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v12)
    operator delete(v12);
  v13 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v13)
  {
    v14 = *(std::__shared_weak_count **)(v13 + 32);
    if (!v14)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v31 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (!v31)
        goto LABEL_26;
    }
    else
    {
LABEL_24:
      v17 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (!v17)
      {
LABEL_26:
        MEMORY[0x212BC6398](v13, 0x10A0C406147BFA8);
        goto LABEL_27;
      }
    }
    (*(void (**)(void))(v13 + 16))();
    goto LABEL_26;
  }
LABEL_27:
  v18 = *(uint64_t **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v18)
  {
    v19 = *v18;
    *v18 = 0;
    if (v19)
      ((void (*)(void))v18[1])();
    MEMORY[0x212BC6398](v18, 0xA0C40AFF93C70);
  }
  v20 = *(uint64_t **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v20)
  {
    v21 = *v20;
    *v20 = 0;
    if (v21)
      ((void (*)(void))v20[1])();
    MEMORY[0x212BC6398](v20, 0xA0C40AFF93C70);
  }
  v22 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v22)
    MEMORY[0x212BC6398](v22, 0x1000C4027586B93);
  v23 = *(uint64_t **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v23)
  {
    v24 = (std::__shared_weak_count *)v23[317];
    if (!v24)
      goto LABEL_42;
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      v32 = *v23;
      *v23 = 0;
      if (!v32)
        goto LABEL_44;
    }
    else
    {
LABEL_42:
      v27 = *v23;
      *v23 = 0;
      if (!v27)
      {
LABEL_44:
        MEMORY[0x212BC6398](v23, 0x10A0C40907A4D07);
        goto LABEL_45;
      }
    }
    ((void (*)(void))v23[1])();
    goto LABEL_44;
  }
LABEL_45:
  v28 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 8);
    *(_QWORD *)(v28 + 8) = 0;
    if (v29)
      (*(void (**)(void))(v28 + 16))();
    MEMORY[0x212BC6398](v28, 0x10A0C40B7BF8CC9);
  }
  return a1;
}

uint64_t *sub_20EF22790(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20EF265E4(v2);
    MEMORY[0x212BC6398](v3, 0x1032C408CE249C3);
  }
  return a1;
}

_QWORD *sub_20EF227D4(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[32];
    if (v3)
    {
      free(v3);
      v2[32] = 0;
    }
    v4 = (void *)v2[25];
    if (v4)
      free(v4);
    v2[25] = 0;
    v5 = (void *)v2[15];
    if (v5)
      free(v5);
    v2[15] = 0;
    v6 = (void *)v2[5];
    if (v6)
      free(v6);
    v2[5] = 0;
    MEMORY[0x212BC6398](v2, 0x1090C40EDF3BDA0);
  }
  return a1;
}

uint64_t *sub_20EF22858(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_20EF26790(v2 + 24);
    MEMORY[0x212BC6398](v2, 0x10A0C407662816BLL);
  }
  return a1;
}

uint64_t *sub_20EF228A4(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (!v3)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v8 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (!v8)
        goto LABEL_8;
    }
    else
    {
LABEL_6:
      v6 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (!v6)
      {
LABEL_8:
        MEMORY[0x212BC6398](v2, 0x10A0C406147BFA8);
        return a1;
      }
    }
    (*(void (**)(void))(v2 + 16))();
    goto LABEL_8;
  }
  return a1;
}

uint64_t **sub_20EF22950(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x212BC6398](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t **sub_20EF229AC(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x212BC6398](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t **sub_20EF22A08(uint64_t **a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[317];
    if (!v3)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v8 = *v2;
      *v2 = 0;
      if (!v8)
        goto LABEL_8;
    }
    else
    {
LABEL_6:
      v6 = *v2;
      *v2 = 0;
      if (!v6)
      {
LABEL_8:
        MEMORY[0x212BC6398](v2, 0x10A0C40907A4D07);
        return a1;
      }
    }
    ((void (*)(void))v2[1])();
    goto LABEL_8;
  }
  return a1;
}

uint64_t *sub_20EF22AB4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
      (*(void (**)(void))(v2 + 16))();
    MEMORY[0x212BC6398](v2, 0x10A0C40B7BF8CC9);
  }
  return a1;
}

uint64_t sub_20EF22B10(uint64_t a1, unsigned int *a2, uint64_t a3, char a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _QWORD *v17;
  _OWORD *v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  size_t v27;
  const char *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  const char *v33;
  unsigned __int8 v34;
  uint64_t v35;
  unsigned __int8 v36;
  const char *v37;
  size_t v38;
  _BYTE *v39;
  int v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  size_t v49;
  std::__shared_weak_count_vtbl *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  size_t v96;
  unsigned __int8 v97;
  const char *v98;
  size_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  size_t v107;
  void *v108;
  _QWORD *v109;
  unint64_t *v110;
  size_t v111;
  uint64_t v112;
  char v113;
  char *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  const char *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  const char *v161;
  uint64_t v162;
  const char *v163;
  size_t v164;
  unsigned __int8 v165;
  const char *v166;
  size_t v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  NSObject *v172;
  uint64_t v173;
  uint64_t v174;
  size_t v175;
  void *v176;
  _QWORD *v177;
  unint64_t *v178;
  size_t v179;
  uint64_t v180;
  char v181;
  char *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  void *v220;
  const char *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  unsigned __int8 v226;
  const char *v227;
  size_t v228;
  _BYTE *v229;
  unint64_t v230;
  const char *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  NSObject *v238;
  size_t v239;
  std::__shared_weak_count_vtbl *v240;
  std::__shared_weak_count *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  void *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  uint64_t v276;
  __n128 v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  const char *v284;
  const char *v285;
  int v286;
  int v287;
  uint64_t v288;
  int v289;
  int v290;
  void *v291;
  const char *v292;
  const char *v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t *v296;
  void *__src;
  const char *__srca;
  __int128 v299;
  uint64_t (*v300)(uint64_t);
  __int128 v301;
  int v302;
  uint64_t *v303;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v305;
  int v306;
  const char *v307;
  int v308;
  const char *v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  uint64_t v312;
  uint64_t __dst;
  _BYTE v314[15];
  char v315;
  _BYTE __p[24];
  __int128 v317;
  void *v318;
  size_t v319;
  unint64_t v320;
  char v321;
  std::__shared_weak_count *v322;
  _QWORD v323[5];

  v323[2] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v8 = *((_OWORD *)a2 + 1);
  v9 = *((_OWORD *)a2 + 2);
  v10 = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 16) = v8;
  v11 = *(_QWORD *)(a2 + 1);
  v12 = operator new();
  sub_20EF1B4FC(v12, v11);
  *(_QWORD *)(a1 + 72) = v12;
  v13 = operator new();
  sub_20EF1AEA0(v13, 5);
  *(_QWORD *)(a1 + 80) = v13;
  v14 = operator new();
  *(_WORD *)v14 = 256;
  *(_QWORD *)(v14 + 2) = 0;
  *(_WORD *)(v14 + 10) = 1;
  *(_OWORD *)(v14 + 12) = xmmword_21038A1A0;
  *(_QWORD *)(a1 + 88) = v14;
  v15 = (_QWORD *)operator new();
  v16 = (_OWORD *)operator new();
  v16[1] = 0u;
  v16[2] = 0u;
  *v16 = 0u;
  *v15 = v16;
  v15[1] = sub_20EF1590C;
  *(_QWORD *)(a1 + 96) = v15;
  v17 = (_QWORD *)operator new();
  v18 = (_OWORD *)operator new();
  v18[18] = 0u;
  v18[19] = 0u;
  v18[16] = 0u;
  v18[17] = 0u;
  v18[14] = 0u;
  v18[15] = 0u;
  v18[12] = 0u;
  v18[13] = 0u;
  v18[10] = 0u;
  v18[11] = 0u;
  v18[8] = 0u;
  v18[9] = 0u;
  v18[6] = 0u;
  v18[7] = 0u;
  v18[4] = 0u;
  v18[5] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  *v18 = 0u;
  v18[1] = 0u;
  sub_20EEC5710((uint64_t)v18);
  *v17 = v18;
  v17[1] = sub_20EEC5860;
  *(_QWORD *)(a1 + 104) = v17;
  if (a4)
  {
    kdebug_trace();
    sub_20EF255D4(__p);
    if (**(int **)(*(_QWORD *)__p + 56) <= 1)
    {
      v19 = atomic_load((unsigned __int8 *)&qword_254A601F0);
      if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254A601F0))
      {
        qword_254A601E8 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_Deserialize");
        __cxa_guard_release(&qword_254A601F0);
      }
      v20 = qword_254A601E8;
      *(_BYTE *)(qword_254A601E8 + 16) = 0;
      *(_QWORD *)(v20 + 8) = 0;
      *(std::chrono::steady_clock::time_point *)v20 = std::chrono::steady_clock::now();
      *(_BYTE *)(v20 + 16) = 1;
    }
    *(_QWORD *)__p = *a2 | 0x3D4CCCCD00000000;
    sub_20EF389C8((uint64_t **)a3, (int *)__p, &v299);
    sub_20EF3571C((uint64_t)&v299, (char **)__p);
    kdebug_trace();
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    sub_20EF255D4(__p);
    if (**(int **)(*(_QWORD *)__p + 56) <= 1)
    {
      v21 = atomic_load((unsigned __int8 *)&qword_254A60200);
      if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A60200))
      {
        qword_254A601F8 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_Deserialize");
        __cxa_guard_release(&qword_254A60200);
      }
      v22 = qword_254A601F8;
      if (*(_BYTE *)(qword_254A601F8 + 16))
      {
        *(_QWORD *)(v22 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v22;
        *(_BYTE *)(v22 + 16) = 0;
      }
    }
    sub_20EF254E0(&v312);
    if (**(int **)(v312 + 56) > 3)
      goto LABEL_106;
    v23 = *(unsigned __int8 *)(v312 + 72);
    v24 = sub_20E8C31DC(v312, "OSLogSurrogateAppender", 1, 0);
    v25 = v24;
    if (!v23 && !v24)
      goto LABEL_106;
    v303 = &v312;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v305 = std::chrono::system_clock::now().__d_.__rep_;
    v306 = 3;
    v307 = "unknown file";
    v308 = 124;
    v310 = 0;
    v311 = 0;
    v309 = "unknown function";
    v26 = *v303;
    v288 = *v303;
    if (*(char *)(*v303 + 39) < 0)
    {
      v28 = *(const char **)(v26 + 16);
      v27 = *(_QWORD *)(v26 + 24);
    }
    else
    {
      v27 = *(unsigned __int8 *)(*v303 + 39);
      v28 = (const char *)(*v303 + 16);
    }
    v291 = (void *)(*v303 + 16);
    v294 = (_QWORD *)a3;
    v35 = *(_QWORD *)(a3 + 8);
    v296 = *(uint64_t **)a3;
    v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__p);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
      if ((_BYTE)v317 && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v37 = byte_254A4A4F8;
    else
      v37 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v38 = byte_254A4A4F8[23];
    else
      v38 = *(_QWORD *)&byte_254A4A4F8[8];
    __srca = v28;
    *(_QWORD *)__p = os_log_create(v37, v28);
    v39 = &__p[8];
    if (v38 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v40 = v23;
    if (v38 >= 0x17)
    {
      v41 = v25;
      v42 = v40;
      v43 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v43 = v38 | 7;
      v44 = v43 + 1;
      v39 = operator new(v43 + 1);
      *(_QWORD *)&__p[16] = v38;
      *(_QWORD *)&v317 = v44 | 0x8000000000000000;
      *(_QWORD *)&__p[8] = v39;
      v40 = v42;
      v25 = v41;
    }
    else
    {
      BYTE7(v317) = v38;
      if (!v38)
      {
LABEL_38:
        v39[v38] = 0;
        BYTE8(v317) = 1;
        v45 = &v318;
        if (v27 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v27 >= 0x17)
        {
          v46 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17)
            v46 = v27 | 7;
          v47 = v46 + 1;
          v45 = operator new(v46 + 1);
          v319 = v27;
          v320 = v47 | 0x8000000000000000;
          v318 = v45;
        }
        else
        {
          HIBYTE(v320) = v27;
          if (!v27)
            goto LABEL_46;
        }
        memmove(v45, __srca, v27);
LABEL_46:
        *((_BYTE *)v45 + v27) = 0;
        v321 = 1;
        v48 = *(NSObject **)__p;
        if (SHIBYTE(v320) < 0)
          operator delete(v318);
        if (BYTE8(v317) && SBYTE7(v317) < 0)
          operator delete(*(void **)&__p[8]);
        if (*(_QWORD *)__p)
          os_release(*(void **)__p);
        if (v25 && *(_QWORD *)(v25 + 24))
        {
          v49 = _os_log_pack_size();
          v50 = (std::__shared_weak_count_vtbl *)operator new(v49, (std::align_val_t)8uLL);
          v51 = (std::__shared_weak_count *)operator new();
          v52 = v51;
          v51->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v51->__shared_owners_;
          v51->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v51->__shared_weak_owners_ = 0;
          v51[1].__vftable = v50;
          *(_QWORD *)__p = v50;
          *(_QWORD *)&__p[8] = v50;
          *(_QWORD *)&__p[16] = v51;
          do
            v54 = __ldxr(p_shared_owners);
          while (__stxr(v54 + 1, p_shared_owners));
          v317 = 0uLL;
          v318 = 0;
          do
            v55 = __ldaxr(p_shared_owners);
          while (__stlxr(v55 - 1, p_shared_owners));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v52);
          }
          v56 = *(_QWORD *)__p;
          v57 = _os_log_pack_fill();
          *(_DWORD *)v57 = 134217984;
          *(_QWORD *)(v57 + 4) = 0xEEEEEEEEEEEEEEEFLL * ((v35 - (uint64_t)v296) >> 3);
          v58 = operator new();
          v59 = *(unsigned __int8 *)(v288 + 39);
          v60 = *(void **)(v288 + 16);
          v61 = *(_QWORD *)(v288 + 24);
          v62 = v317;
          *(_OWORD *)(v58 + 8) = *(_OWORD *)&__p[8];
          if ((v59 & 0x80u) != 0)
            v59 = v61;
          else
            v60 = v291;
          *(_QWORD *)v58 = v56;
          *(_QWORD *)&__p[8] = 0;
          *(_QWORD *)&__p[16] = 0;
          *(_OWORD *)(v58 + 24) = v62;
          v317 = 0uLL;
          *(_QWORD *)(v58 + 40) = v60;
          *(_QWORD *)(v58 + 48) = v59;
          *(_BYTE *)(v58 + 56) = 1;
          v323[0] = 0;
          __dst = v58;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), &__dst);
          v63 = __dst;
          __dst = 0;
          if (v63)
          {
            v64 = *(std::__shared_weak_count **)(v63 + 32);
            if (v64)
            {
              v65 = (unint64_t *)&v64->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            v67 = *(std::__shared_weak_count **)(v63 + 16);
            if (v67)
            {
              v68 = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            MEMORY[0x212BC6398](v63, 0x10F0C40B62ED6C6);
            v70 = v323[0];
            v323[0] = 0;
            if (v70)
            {
              v71 = *(std::__shared_weak_count **)(v70 + 32);
              if (v71)
              {
                v72 = (unint64_t *)&v71->__shared_owners_;
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              v74 = *(std::__shared_weak_count **)(v70 + 16);
              if (v74)
              {
                v75 = (unint64_t *)&v74->__shared_owners_;
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              MEMORY[0x212BC6398](v70, 0x10F0C40B62ED6C6);
            }
          }
          v77 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
          if (*((_QWORD *)&v317 + 1))
          {
            v78 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v80 = *(std::__shared_weak_count **)&__p[16];
          if (*(_QWORD *)&__p[16])
          {
            v81 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
        }
        else
        {
          os_log_type_enabled(v48, OS_LOG_TYPE_INFO);
          *(_DWORD *)__p = 134217984;
          *(_QWORD *)&__p[4] = 0xEEEEEEEEEEEEEEEFLL * ((v35 - (uint64_t)v296) >> 3);
          v83 = (void *)_os_log_send_and_compose_impl();
          if (v83)
            free(v83);
        }
        if (v40)
        {
          sub_20E8C003C((uint64_t)&v303, "Plane tracker created from map %zu", 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v294[1] - *v294) >> 3));
          sub_20E863570((uint64_t)&v303);
        }
        sub_20E863570((uint64_t)&v303);
        v84 = v311;
        if (v311)
        {
          v85 = (unint64_t *)&v311->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
LABEL_106:
        sub_20EF359E8((uint64_t)&v299);
        goto LABEL_107;
      }
    }
    memmove(v39, v37, v38);
    goto LABEL_38;
  }
  sub_20EF254E0(&v312);
  if (**(int **)(v312 + 56) <= 3)
  {
    v29 = *(unsigned __int8 *)(v312 + 72);
    v30 = sub_20E8C31DC(v312, "OSLogSurrogateAppender", 1, 0);
    v31 = v30;
    if (v29 || v30)
    {
      v303 = &v312;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v305 = std::chrono::system_clock::now().__d_.__rep_;
      v306 = 3;
      v307 = "unknown file";
      v308 = 128;
      v310 = 0;
      v311 = 0;
      v309 = "unknown function";
      v295 = v312;
      if (*(char *)(v312 + 39) < 0)
      {
        v33 = *(const char **)(v312 + 16);
        v32 = *(_QWORD *)(v312 + 24);
        __src = (void *)(v312 + 16);
        v226 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v226 & 1) != 0)
          goto LABEL_326;
      }
      else
      {
        v32 = *(unsigned __int8 *)(v312 + 39);
        v33 = (const char *)(v312 + 16);
        __src = (void *)(v312 + 16);
        v34 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v34 & 1) != 0)
          goto LABEL_326;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
        if ((_BYTE)v317 && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_326:
      if (byte_254A4A4F8[23] >= 0)
        v227 = byte_254A4A4F8;
      else
        v227 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v228 = byte_254A4A4F8[23];
      else
        v228 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)__p = os_log_create(v227, v33);
      v229 = &__p[8];
      if (v228 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v228 >= 0x17)
      {
        v230 = v31;
        v231 = v33;
        v232 = v29;
        v233 = (v228 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v228 | 7) != 0x17)
          v233 = v228 | 7;
        v234 = v233 + 1;
        v229 = operator new(v233 + 1);
        *(_QWORD *)&__p[16] = v228;
        *(_QWORD *)&v317 = v234 | 0x8000000000000000;
        *(_QWORD *)&__p[8] = v229;
        v29 = v232;
        v33 = v231;
        v31 = v230;
      }
      else
      {
        BYTE7(v317) = v228;
        if (!v228)
        {
LABEL_340:
          v229[v228] = 0;
          BYTE8(v317) = 1;
          v235 = &v318;
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v32 >= 0x17)
          {
            v236 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v236 = v32 | 7;
            v237 = v236 + 1;
            v235 = operator new(v236 + 1);
            v319 = v32;
            v320 = v237 | 0x8000000000000000;
            v318 = v235;
          }
          else
          {
            HIBYTE(v320) = v32;
            if (!v32)
              goto LABEL_348;
          }
          memmove(v235, v33, v32);
LABEL_348:
          *((_BYTE *)v235 + v32) = 0;
          v321 = 1;
          v238 = *(NSObject **)__p;
          if (SHIBYTE(v320) < 0)
            operator delete(v318);
          if (BYTE8(v317) && SBYTE7(v317) < 0)
            operator delete(*(void **)&__p[8]);
          if (*(_QWORD *)__p)
            os_release(*(void **)__p);
          if (v31 && *(_QWORD *)(v31 + 24))
          {
            v239 = _os_log_pack_size();
            v240 = (std::__shared_weak_count_vtbl *)operator new(v239, (std::align_val_t)8uLL);
            v241 = (std::__shared_weak_count *)operator new();
            v242 = v241;
            v241->__shared_owners_ = 0;
            v243 = (unint64_t *)&v241->__shared_owners_;
            v241->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v241->__shared_weak_owners_ = 0;
            v241[1].__vftable = v240;
            *(_QWORD *)__p = v240;
            *(_QWORD *)&__p[8] = v240;
            *(_QWORD *)&__p[16] = v241;
            do
              v244 = __ldxr(v243);
            while (__stxr(v244 + 1, v243));
            v317 = 0uLL;
            v318 = 0;
            do
              v245 = __ldaxr(v243);
            while (__stlxr(v245 - 1, v243));
            if (!v245)
            {
              ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
              std::__shared_weak_count::__release_weak(v242);
            }
            v246 = *(_QWORD *)__p;
            *(_WORD *)_os_log_pack_fill() = 0;
            v247 = operator new();
            v248 = *(unsigned __int8 *)(v295 + 39);
            v249 = *(void **)(v295 + 16);
            v250 = *(_QWORD *)(v295 + 24);
            v251 = v317;
            *(_OWORD *)(v247 + 8) = *(_OWORD *)&__p[8];
            if ((v248 & 0x80u) != 0)
              v248 = v250;
            else
              v249 = __src;
            *(_QWORD *)v247 = v246;
            *(_QWORD *)&__p[8] = 0;
            *(_QWORD *)&__p[16] = 0;
            *(_OWORD *)(v247 + 24) = v251;
            v317 = 0uLL;
            *(_QWORD *)(v247 + 40) = v249;
            *(_QWORD *)(v247 + 48) = v248;
            *(_BYTE *)(v247 + 56) = 1;
            v323[0] = 0;
            __dst = v247;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v31 + 24) + 40))(*(_QWORD *)(v31 + 24), &__dst);
            v252 = __dst;
            __dst = 0;
            if (v252)
            {
              v253 = *(std::__shared_weak_count **)(v252 + 32);
              if (v253)
              {
                v254 = (unint64_t *)&v253->__shared_owners_;
                do
                  v255 = __ldaxr(v254);
                while (__stlxr(v255 - 1, v254));
                if (!v255)
                {
                  ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                  std::__shared_weak_count::__release_weak(v253);
                }
              }
              v256 = *(std::__shared_weak_count **)(v252 + 16);
              if (v256)
              {
                v257 = (unint64_t *)&v256->__shared_owners_;
                do
                  v258 = __ldaxr(v257);
                while (__stlxr(v258 - 1, v257));
                if (!v258)
                {
                  ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                  std::__shared_weak_count::__release_weak(v256);
                }
              }
              MEMORY[0x212BC6398](v252, 0x10F0C40B62ED6C6);
              v259 = v323[0];
              v323[0] = 0;
              if (v259)
              {
                v260 = *(std::__shared_weak_count **)(v259 + 32);
                if (v260)
                {
                  v261 = (unint64_t *)&v260->__shared_owners_;
                  do
                    v262 = __ldaxr(v261);
                  while (__stlxr(v262 - 1, v261));
                  if (!v262)
                  {
                    ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                    std::__shared_weak_count::__release_weak(v260);
                  }
                }
                v263 = *(std::__shared_weak_count **)(v259 + 16);
                if (v263)
                {
                  v264 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v265 = __ldaxr(v264);
                  while (__stlxr(v265 - 1, v264));
                  if (!v265)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                  }
                }
                MEMORY[0x212BC6398](v259, 0x10F0C40B62ED6C6);
              }
            }
            v266 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
            if (*((_QWORD *)&v317 + 1))
            {
              v267 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
              do
                v268 = __ldaxr(v267);
              while (__stlxr(v268 - 1, v267));
              if (!v268)
              {
                ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                std::__shared_weak_count::__release_weak(v266);
              }
            }
            v269 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v270 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v271 = __ldaxr(v270);
              while (__stlxr(v271 - 1, v270));
              if (!v271)
              {
                ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                std::__shared_weak_count::__release_weak(v269);
              }
            }
          }
          else
          {
            os_log_type_enabled(v238, OS_LOG_TYPE_INFO);
            *(_WORD *)__p = 0;
            v272 = (void *)_os_log_send_and_compose_impl();
            if (v272)
              free(v272);
          }
          if (v29)
          {
            sub_20E8C003C((uint64_t)&v303, "Plane tracker created from scratch - no map");
            sub_20E863570((uint64_t)&v303);
          }
          sub_20E863570((uint64_t)&v303);
          v273 = v311;
          if (v311)
          {
            v274 = (unint64_t *)&v311->__shared_owners_;
            do
              v275 = __ldaxr(v274);
            while (__stlxr(v275 - 1, v274));
            if (!v275)
            {
              ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
              std::__shared_weak_count::__release_weak(v273);
            }
          }
          goto LABEL_408;
        }
      }
      memmove(v229, v227, v228);
      goto LABEL_340;
    }
  }
LABEL_408:
  if (*((_BYTE *)a2 + 14))
  {
    LODWORD(v303) = 0;
    sub_20EF268C0((int *)&v303, (uint64_t)__p);
    *(_QWORD *)&v299 = *a2 | 0x3D4CCCCD00000000;
    v276 = operator new();
    *(_QWORD *)(v276 + 16) = 0;
    *(_QWORD *)(v276 + 8) = 0;
    *(_QWORD *)v276 = v276 + 8;
    *(_BYTE *)(v276 + 24) = 0;
    *(_WORD *)(v276 + 40) = 768;
    *((_QWORD *)&v299 + 1) = v276;
    v300 = sub_20EF38948;
    v277.n128_f64[0] = sub_20EE687C0();
    v302 = 0;
    v278 = v322;
    if (v322)
    {
      v279 = (unint64_t *)&v322->__shared_owners_;
      do
        v280 = __ldaxr(v279);
      while (__stlxr(v280 - 1, v279));
      if (!v280)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v278->__on_zero_shared)(v278, v277);
        std::__shared_weak_count::__release_weak(v278);
      }
    }
  }
  else
  {
    *(_QWORD *)&v299 = *a2 | 0x3D4CCCCD00000000;
    v281 = operator new();
    *(_QWORD *)(v281 + 16) = 0;
    *(_QWORD *)(v281 + 8) = 0;
    *(_QWORD *)v281 = v281 + 8;
    *(_BYTE *)(v281 + 24) = 0;
    *(_WORD *)(v281 + 40) = 768;
    *((_QWORD *)&v299 + 1) = v281;
    v300 = sub_20EF38948;
    sub_20E8965F4();
    v302 = 0;
  }
LABEL_107:
  v87 = operator new();
  *(_OWORD *)v87 = v299;
  *(_QWORD *)(v87 + 16) = v300;
  *(_OWORD *)(v87 + 24) = v301;
  *(_DWORD *)(v87 + 48) = v302;
  *(_QWORD *)(a1 + 112) = v87;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  v88 = operator new();
  *(_OWORD *)(v88 + 32) = 0u;
  *(_OWORD *)(v88 + 48) = 0u;
  *(_OWORD *)(v88 + 96) = 0u;
  *(_OWORD *)(v88 + 112) = 0u;
  *(_OWORD *)(v88 + 128) = 0u;
  *(_OWORD *)v88 = xmmword_21038A3D0;
  *(_OWORD *)(v88 + 16) = 0u;
  *(_DWORD *)(v88 + 16) = 1080033280;
  *(_OWORD *)(v88 + 24) = 0u;
  *(_OWORD *)(v88 + 40) = 0u;
  *(_DWORD *)(v88 + 56) = 1065353216;
  *(_OWORD *)(v88 + 64) = 0u;
  *(_OWORD *)(v88 + 80) = 0u;
  *(_DWORD *)(v88 + 96) = 1065353216;
  *(_OWORD *)(v88 + 104) = 0u;
  *(_OWORD *)(v88 + 120) = 0u;
  *(_DWORD *)(v88 + 136) = 1065353216;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = v88;
  if (*((_BYTE *)a2 + 15))
  {
    v89 = operator new();
    bzero((void *)v89, 0x228uLL);
    *(_OWORD *)(v89 + 168) = xmmword_21038A410;
    *(_OWORD *)(v89 + 184) = unk_21038A420;
    *(_OWORD *)(v89 + 200) = xmmword_21038A430;
    *(_OWORD *)(v89 + 216) = unk_21038A440;
  }
  else
  {
    v89 = 0;
  }
  *(_QWORD *)(a1 + 200) = v89;
  sub_20EF254E0(&v312);
  if (**(int **)(v312 + 56) > 2)
    goto LABEL_216;
  v90 = *(unsigned __int8 *)(v312 + 72);
  v91 = sub_20E8C31DC(v312, "OSLogSurrogateAppender", 1, 0);
  v92 = v91;
  if (!v90 && !v91)
    goto LABEL_216;
  v303 = &v312;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v305 = std::chrono::system_clock::now().__d_.__rep_;
  v306 = 2;
  v307 = "unknown file";
  v308 = 162;
  v310 = 0;
  v311 = 0;
  v309 = "unknown function";
  v93 = "enabled";
  v286 = *(unsigned __int8 *)(a1 + 12);
  if (!*(_BYTE *)(a1 + 12))
    v93 = "disabled";
  v292 = v93;
  v94 = *v303;
  v95 = (const char *)(*v303 + 16);
  v284 = v95;
  if (*(char *)(*v303 + 39) < 0)
  {
    v95 = *(const char **)(v94 + 16);
    v96 = *(_QWORD *)(v94 + 24);
  }
  else
  {
    v96 = *(unsigned __int8 *)(*v303 + 39);
  }
  v282 = *v303;
  v289 = v90;
  v97 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v97 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__p);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
    if ((_BYTE)v317 && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v98 = byte_254A4A4F8;
  else
    v98 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v99 = byte_254A4A4F8[23];
  else
    v99 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)__p = os_log_create(v98, v95);
  v100 = &__p[8];
  if (v99 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v99 >= 0x17)
  {
    v101 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v101 = v99 | 7;
    v102 = v101 + 1;
    v100 = operator new(v101 + 1);
    *(_QWORD *)&__p[16] = v99;
    *(_QWORD *)&v317 = v102 | 0x8000000000000000;
    *(_QWORD *)&__p[8] = v100;
    goto LABEL_132;
  }
  BYTE7(v317) = v99;
  if (v99)
LABEL_132:
    memmove(v100, v98, v99);
  v100[v99] = 0;
  BYTE8(v317) = 1;
  v103 = &v318;
  if (v96 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v96 >= 0x17)
  {
    v105 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v96 | 7) != 0x17)
      v105 = v96 | 7;
    v106 = v105 + 1;
    v103 = operator new(v105 + 1);
    v319 = v96;
    v320 = v106 | 0x8000000000000000;
    v318 = v103;
  }
  else
  {
    HIBYTE(v320) = v96;
    if (!v96)
    {
      LOBYTE(v318) = 0;
      v321 = 1;
      v104 = *(NSObject **)__p;
      if ((SHIBYTE(v320) & 0x80000000) == 0)
        goto LABEL_137;
      goto LABEL_143;
    }
  }
  memmove(v103, v95, v96);
  *((_BYTE *)v103 + v96) = 0;
  v321 = 1;
  v104 = *(NSObject **)__p;
  if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
LABEL_137:
    if (!BYTE8(v317))
      goto LABEL_146;
LABEL_144:
    if (SBYTE7(v317) < 0)
      operator delete(*(void **)&__p[8]);
    goto LABEL_146;
  }
LABEL_143:
  operator delete(v318);
  if (BYTE8(v317))
    goto LABEL_144;
LABEL_146:
  if (*(_QWORD *)__p)
    os_release(*(void **)__p);
  if (v92 && *(_QWORD *)(v92 + 24))
  {
    v107 = _os_log_pack_size();
    v108 = operator new(v107, (std::align_val_t)8uLL);
    v109 = (_QWORD *)operator new();
    v109[1] = 0;
    v110 = v109 + 1;
    *v109 = &off_24C9ABB80;
    v109[2] = 0;
    v109[3] = v108;
    *(_QWORD *)&v299 = v108;
    *((_QWORD *)&v299 + 1) = v108;
    v301 = 0uLL;
    v300 = (uint64_t (*)(uint64_t))v109;
    if (v286)
      v111 = 7;
    else
      v111 = 8;
    v315 = v111;
    memcpy(&__dst, v292, v111);
    v314[v111 - 8] = 0;
    v112 = __dst;
    v323[0] = *(_QWORD *)v314;
    *(_QWORD *)((char *)v323 + 7) = *(_QWORD *)&v314[7];
    v113 = v315;
    v114 = (char *)operator new(0x38uLL);
    v115 = (std::__shared_weak_count *)v114;
    *((_QWORD *)v114 + 1) = 0;
    v116 = (unint64_t *)(v114 + 8);
    *((_QWORD *)v114 + 2) = 0;
    *(_QWORD *)v114 = &off_24C9ABBD0;
    *((_QWORD *)v114 + 3) = off_24C9ABC20;
    v117 = v323[0];
    *((_QWORD *)v114 + 4) = v112;
    *((_QWORD *)v114 + 5) = v117;
    *(_QWORD *)(v114 + 47) = *(_QWORD *)((char *)v323 + 7);
    v114[55] = v113;
    *(_QWORD *)&v301 = v114 + 24;
    *((_QWORD *)&v301 + 1) = v114;
    *(_QWORD *)__p = v108;
    *(_QWORD *)&__p[8] = v108;
    *(_QWORD *)&__p[16] = v109;
    do
      v118 = __ldxr(v110);
    while (__stxr(v118 + 1, v110));
    *(_QWORD *)&v317 = v114 + 24;
    *((_QWORD *)&v317 + 1) = v114;
    do
      v119 = __ldxr(v116);
    while (__stxr(v119 + 1, v116));
    v318 = v114 + 24;
    do
      v120 = __ldaxr(v116);
    while (__stlxr(v120 - 1, v116));
    if (!v120)
    {
      (*(void (**)(char *))(*(_QWORD *)v114 + 16))(v114);
      std::__shared_weak_count::__release_weak(v115);
    }
    v121 = (std::__shared_weak_count *)v300;
    if (v300)
    {
      v122 = (unint64_t *)((char *)v300 + 8);
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v124 = *(_QWORD *)__p;
    if (*((char *)v318 + 31) >= 0)
      v125 = (char *)v318 + 8;
    else
      v125 = (char *)*((_QWORD *)v318 + 1);
    v126 = _os_log_pack_fill();
    *(_DWORD *)v126 = 136315138;
    *(_QWORD *)(v126 + 4) = v125;
    v127 = operator new();
    v128 = *(unsigned __int8 *)(v282 + 39);
    v129 = *(const char **)(v282 + 16);
    v130 = *(_QWORD *)(v282 + 24);
    v131 = v317;
    *(_OWORD *)(v127 + 8) = *(_OWORD *)&__p[8];
    if ((v128 & 0x80u) != 0)
      v128 = v130;
    else
      v129 = v284;
    *(_QWORD *)v127 = v124;
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(v127 + 24) = v131;
    v317 = 0uLL;
    *(_QWORD *)(v127 + 40) = v129;
    *(_QWORD *)(v127 + 48) = v128;
    *(_BYTE *)(v127 + 56) = 2;
    __dst = 0;
    *(_QWORD *)&v299 = v127;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v92 + 24) + 40))(*(_QWORD *)(v92 + 24), &v299);
    v132 = v299;
    *(_QWORD *)&v299 = 0;
    if (v132)
    {
      v133 = *(std::__shared_weak_count **)(v132 + 32);
      if (v133)
      {
        v134 = (unint64_t *)&v133->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      v136 = *(std::__shared_weak_count **)(v132 + 16);
      if (v136)
      {
        v137 = (unint64_t *)&v136->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      MEMORY[0x212BC6398](v132, 0x10F0C40B62ED6C6);
      v139 = __dst;
      __dst = 0;
      if (v139)
      {
        v140 = *(std::__shared_weak_count **)(v139 + 32);
        if (v140)
        {
          v141 = (unint64_t *)&v140->__shared_owners_;
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
        v143 = *(std::__shared_weak_count **)(v139 + 16);
        if (v143)
        {
          v144 = (unint64_t *)&v143->__shared_owners_;
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        MEMORY[0x212BC6398](v139, 0x10F0C40B62ED6C6);
      }
    }
    v146 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
    if (*((_QWORD *)&v317 + 1))
    {
      v147 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    v149 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v150 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
    }
  }
  else
  {
    os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v292;
    v152 = (void *)_os_log_send_and_compose_impl();
    if (v152)
      free(v152);
  }
  if (v289)
  {
    v153 = "enabled";
    if (!*(_BYTE *)(a1 + 12))
      v153 = "disabled";
    sub_20E8C003C((uint64_t)&v303, "ML Segment based pop-up plane detector: %s", v153);
    sub_20E863570((uint64_t)&v303);
  }
  sub_20E863570((uint64_t)&v303);
  v154 = v311;
  if (v311)
  {
    v155 = (unint64_t *)&v311->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
LABEL_216:
  sub_20EF254E0(&v312);
  if (**(int **)(v312 + 56) > 2)
    return a1;
  v157 = *(unsigned __int8 *)(v312 + 72);
  v158 = sub_20E8C31DC(v312, "OSLogSurrogateAppender", 1, 0);
  v159 = v158;
  if (!v157 && v158 == 0)
    return a1;
  v303 = &v312;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v305 = std::chrono::system_clock::now().__d_.__rep_;
  v306 = 2;
  v307 = "unknown file";
  v308 = 164;
  v310 = 0;
  v311 = 0;
  v309 = "unknown function";
  v161 = "enabled";
  v287 = *(unsigned __int8 *)(a1 + 13);
  if (!*(_BYTE *)(a1 + 13))
    v161 = "disabled";
  v293 = v161;
  v162 = *v303;
  v163 = (const char *)(*v303 + 16);
  v285 = v163;
  if (*(char *)(*v303 + 39) < 0)
  {
    v163 = *(const char **)(v162 + 16);
    v164 = *(_QWORD *)(v162 + 24);
  }
  else
  {
    v164 = *(unsigned __int8 *)(*v303 + 39);
  }
  v283 = *v303;
  v290 = v157;
  v165 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v165 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__p);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
    if ((_BYTE)v317 && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v166 = byte_254A4A4F8;
  else
    v166 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v167 = byte_254A4A4F8[23];
  else
    v167 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)__p = os_log_create(v166, v163);
  v168 = &__p[8];
  if (v167 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v167 >= 0x17)
  {
    v169 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v167 | 7) != 0x17)
      v169 = v167 | 7;
    v170 = v169 + 1;
    v168 = operator new(v169 + 1);
    *(_QWORD *)&__p[16] = v167;
    *(_QWORD *)&v317 = v170 | 0x8000000000000000;
    *(_QWORD *)&__p[8] = v168;
    goto LABEL_240;
  }
  BYTE7(v317) = v167;
  if (v167)
LABEL_240:
    memmove(v168, v166, v167);
  v168[v167] = 0;
  BYTE8(v317) = 1;
  v171 = &v318;
  if (v164 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v164 >= 0x17)
  {
    v173 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v164 | 7) != 0x17)
      v173 = v164 | 7;
    v174 = v173 + 1;
    v171 = operator new(v173 + 1);
    v319 = v164;
    v320 = v174 | 0x8000000000000000;
    v318 = v171;
  }
  else
  {
    HIBYTE(v320) = v164;
    if (!v164)
    {
      LOBYTE(v318) = 0;
      v321 = 1;
      v172 = *(NSObject **)__p;
      if ((SHIBYTE(v320) & 0x80000000) == 0)
        goto LABEL_245;
      goto LABEL_251;
    }
  }
  memmove(v171, v163, v164);
  *((_BYTE *)v171 + v164) = 0;
  v321 = 1;
  v172 = *(NSObject **)__p;
  if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
LABEL_245:
    if (!BYTE8(v317))
      goto LABEL_254;
LABEL_252:
    if (SBYTE7(v317) < 0)
      operator delete(*(void **)&__p[8]);
    goto LABEL_254;
  }
LABEL_251:
  operator delete(v318);
  if (BYTE8(v317))
    goto LABEL_252;
LABEL_254:
  if (*(_QWORD *)__p)
    os_release(*(void **)__p);
  if (v159 && *(_QWORD *)(v159 + 24))
  {
    v175 = _os_log_pack_size();
    v176 = operator new(v175, (std::align_val_t)8uLL);
    v177 = (_QWORD *)operator new();
    v177[1] = 0;
    v178 = v177 + 1;
    *v177 = &off_24C9ABB80;
    v177[2] = 0;
    v177[3] = v176;
    *(_QWORD *)&v299 = v176;
    *((_QWORD *)&v299 + 1) = v176;
    v301 = 0uLL;
    v300 = (uint64_t (*)(uint64_t))v177;
    if (v287)
      v179 = 7;
    else
      v179 = 8;
    v315 = v179;
    memcpy(&__dst, v293, v179);
    v314[v179 - 8] = 0;
    v180 = __dst;
    v323[0] = *(_QWORD *)v314;
    *(_QWORD *)((char *)v323 + 7) = *(_QWORD *)&v314[7];
    v181 = v315;
    v182 = (char *)operator new(0x38uLL);
    v183 = (std::__shared_weak_count *)v182;
    *((_QWORD *)v182 + 1) = 0;
    v184 = (unint64_t *)(v182 + 8);
    *((_QWORD *)v182 + 2) = 0;
    *(_QWORD *)v182 = &off_24C9ABBD0;
    *((_QWORD *)v182 + 3) = off_24C9ABC20;
    v185 = v323[0];
    *((_QWORD *)v182 + 4) = v180;
    *((_QWORD *)v182 + 5) = v185;
    *(_QWORD *)(v182 + 47) = *(_QWORD *)((char *)v323 + 7);
    v182[55] = v181;
    *(_QWORD *)&v301 = v182 + 24;
    *((_QWORD *)&v301 + 1) = v182;
    *(_QWORD *)__p = v176;
    *(_QWORD *)&__p[8] = v176;
    *(_QWORD *)&__p[16] = v177;
    do
      v186 = __ldxr(v178);
    while (__stxr(v186 + 1, v178));
    *(_QWORD *)&v317 = v182 + 24;
    *((_QWORD *)&v317 + 1) = v182;
    do
      v187 = __ldxr(v184);
    while (__stxr(v187 + 1, v184));
    v318 = v182 + 24;
    do
      v188 = __ldaxr(v184);
    while (__stlxr(v188 - 1, v184));
    if (!v188)
    {
      (*(void (**)(char *))(*(_QWORD *)v182 + 16))(v182);
      std::__shared_weak_count::__release_weak(v183);
    }
    v189 = (std::__shared_weak_count *)v300;
    if (v300)
    {
      v190 = (unint64_t *)((char *)v300 + 8);
      do
        v191 = __ldaxr(v190);
      while (__stlxr(v191 - 1, v190));
      if (!v191)
      {
        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
        std::__shared_weak_count::__release_weak(v189);
      }
    }
    v192 = *(_QWORD *)__p;
    if (*((char *)v318 + 31) >= 0)
      v193 = (char *)v318 + 8;
    else
      v193 = (char *)*((_QWORD *)v318 + 1);
    v194 = _os_log_pack_fill();
    *(_DWORD *)v194 = 136315138;
    *(_QWORD *)(v194 + 4) = v193;
    v195 = operator new();
    v196 = *(unsigned __int8 *)(v283 + 39);
    v197 = *(const char **)(v283 + 16);
    v198 = *(_QWORD *)(v283 + 24);
    v199 = v317;
    *(_OWORD *)(v195 + 8) = *(_OWORD *)&__p[8];
    if ((v196 & 0x80u) != 0)
      v196 = v198;
    else
      v197 = v285;
    *(_QWORD *)v195 = v192;
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(v195 + 24) = v199;
    v317 = 0uLL;
    *(_QWORD *)(v195 + 40) = v197;
    *(_QWORD *)(v195 + 48) = v196;
    *(_BYTE *)(v195 + 56) = 2;
    __dst = 0;
    *(_QWORD *)&v299 = v195;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v159 + 24) + 40))(*(_QWORD *)(v159 + 24), &v299);
    v200 = v299;
    *(_QWORD *)&v299 = 0;
    if (v200)
    {
      v201 = *(std::__shared_weak_count **)(v200 + 32);
      if (v201)
      {
        v202 = (unint64_t *)&v201->__shared_owners_;
        do
          v203 = __ldaxr(v202);
        while (__stlxr(v203 - 1, v202));
        if (!v203)
        {
          ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
          std::__shared_weak_count::__release_weak(v201);
        }
      }
      v204 = *(std::__shared_weak_count **)(v200 + 16);
      if (v204)
      {
        v205 = (unint64_t *)&v204->__shared_owners_;
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
        }
      }
      MEMORY[0x212BC6398](v200, 0x10F0C40B62ED6C6);
      v207 = __dst;
      __dst = 0;
      if (v207)
      {
        v208 = *(std::__shared_weak_count **)(v207 + 32);
        if (v208)
        {
          v209 = (unint64_t *)&v208->__shared_owners_;
          do
            v210 = __ldaxr(v209);
          while (__stlxr(v210 - 1, v209));
          if (!v210)
          {
            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
            std::__shared_weak_count::__release_weak(v208);
          }
        }
        v211 = *(std::__shared_weak_count **)(v207 + 16);
        if (v211)
        {
          v212 = (unint64_t *)&v211->__shared_owners_;
          do
            v213 = __ldaxr(v212);
          while (__stlxr(v213 - 1, v212));
          if (!v213)
          {
            ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
            std::__shared_weak_count::__release_weak(v211);
          }
        }
        MEMORY[0x212BC6398](v207, 0x10F0C40B62ED6C6);
      }
    }
    v214 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
    if (*((_QWORD *)&v317 + 1))
    {
      v215 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
      do
        v216 = __ldaxr(v215);
      while (__stlxr(v216 - 1, v215));
      if (!v216)
      {
        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
        std::__shared_weak_count::__release_weak(v214);
      }
    }
    v217 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v218 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
      }
    }
  }
  else
  {
    os_log_type_enabled(v172, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v293;
    v220 = (void *)_os_log_send_and_compose_impl();
    if (v220)
      free(v220);
  }
  if (v290)
  {
    v221 = "enabled";
    if (!*(_BYTE *)(a1 + 13))
      v221 = "disabled";
    sub_20E8C003C((uint64_t)&v303, "ML Segment based plane detector: %s", v221);
    sub_20E863570((uint64_t)&v303);
  }
  sub_20E863570((uint64_t)&v303);
  v222 = v311;
  if (v311)
  {
    v223 = (unint64_t *)&v311->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  return a1;
}

void sub_20EF24E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *__p,void *a42,int a43,__int16 a44,char a45,char a46,char a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v52;

  if (a47 && a46 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a28);
  sub_20EF22950((uint64_t **)(a11 + 104));
  sub_20EF229AC((uint64_t **)(a11 + 96));
  v52 = *(_QWORD *)(a11 + 88);
  *(_QWORD *)(a11 + 88) = 0;
  if (v52)
    MEMORY[0x212BC6398](v52, 0x1000C4027586B93);
  sub_20EF22A08((uint64_t **)(a11 + 80));
  sub_20EF22AB4((uint64_t *)(a11 + 72));
  _Unwind_Resume(a1);
}

uint64_t sub_20EF25460(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v7)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
LABEL_6:
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_20EF254E0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60210);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60210))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.acv.surfacedetection");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60208);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A60210);
  }
  *a1 = qword_254A60208;
}

void sub_20EF2557C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60210);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60210);
  _Unwind_Resume(a1);
}

void sub_20EF255D4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)qword_254A60220);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_254A60220))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.acv.trace");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60218);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(qword_254A60220);
  }
  *a1 = qword_254A60218;
}

void sub_20EF25670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_254A60220);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_254A60220);
  _Unwind_Resume(a1);
}

void sub_20EF256C8(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t v15;
  float v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  int v21;
  int v22;
  int8x16_t v23;
  char *v24;
  int v25;
  int v26;
  char *v27;
  float32x4_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  int8x16_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  _BYTE *v50;
  char *v51;
  unint64_t *v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  void *v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  _BYTE *v69;
  void **v70;
  void **v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  char *v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  float32x4_t v92;
  float32x4_t v93;
  char *v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  int8x16_t v109;
  uint64_t v110;
  float32x4_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float v118;
  char v119;
  char v120;
  unint64_t v121;
  uint64_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int8x16_t v125;
  int8x16_t v126;
  float32x4_t v127;
  int8x16_t v128;
  float32x2_t *v129;
  float32x2_t *v130;
  float32x2_t v131;
  int v132;
  int v133;
  char *v134;
  unsigned __int8 v135;
  uint64_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  int v145;
  float64x2_t v146;
  float64x2_t v147;
  uint64_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float32x4_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float32x4_t v155;
  float64x2_t v156;
  float64x2_t v157;
  uint64_t (**v158)();
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  __int128 v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  void *v174;
  _BYTE *v175;
  char *v176;
  void *v177;
  _BYTE *v178;
  char *v179;
  char v180;
  void *v181;
  _BYTE *v182;
  void *v183;
  _BYTE *v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  _BYTE v188[44];
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  int8x16_t v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  uint64_t (**v198)();
  char v199;
  __int128 v200;
  char *v201;
  void *v202;
  void *v203;
  uint64_t v204;
  void *v205;
  void *v206;
  char *v207;
  unint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  __int128 v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  int v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  char **v225;
  uint64_t v226;
  char *v227;

  kdebug_trace();
  sub_20EF255D4(v188);
  if (**(int **)(*(_QWORD *)v188 + 56) <= 1)
  {
    v7 = atomic_load((unsigned __int8 *)&qword_254A601D0);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A601D0))
    {
      qword_254A601C8 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_SingleShot");
      __cxa_guard_release(&qword_254A601D0);
    }
    v8 = qword_254A601C8;
    *(_BYTE *)(qword_254A601C8 + 16) = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v8 = std::chrono::steady_clock::now();
    *(_BYTE *)(v8 + 16) = 1;
  }
  sub_20E927B44((uint64_t)&v158, a2);
  if (v180)
  {
    v148 = a1;
    v9 = v174;
    *(_QWORD *)&v209 = 0;
    v207 = 0;
    v208 = 0;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = (v175 - (_BYTE *)v174) / 12;
    if (v175 != v174)
    {
      v10.i64[0] = *(_QWORD *)v174;
      v13 = (float *)((char *)v174 + 8);
      v14 = *((float *)v174 + 2);
      v15 = 12 * v12;
      v16 = v14;
      v11.i64[0] = *(_QWORD *)v174;
      do
      {
        if (*v13 < v16)
          v16 = *v13;
        v17 = *(float32x2_t *)(v13 - 2);
        *(int8x8_t *)v11.f32 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v11.f32, v17), (int8x8_t)v17, *(int8x8_t *)v11.f32);
        *(int8x8_t *)v10.f32 = vbsl_s8((int8x8_t)vcgt_f32(v17, *(float32x2_t *)v10.f32), (int8x8_t)v17, *(int8x8_t *)v10.f32);
        if (v14 < *v13)
          v14 = *v13;
        v13 += 3;
        v15 -= 12;
      }
      while (v15);
      v11.f32[2] = v16;
      v10.f32[2] = v14;
    }
    v145 = a3;
    memset(v188, 0, 32);
    *(_DWORD *)&v188[32] = 1065353216;
    if (v175 != v174)
    {
      v18 = (float32x4_t)vdupq_n_s32(0x3CA3D70Au);
      v19 = vdivq_f32(v11, v18);
      v20 = (int)v19.f32[0];
      v21 = (int)v19.f32[1];
      v22 = (int)v19.f32[2];
      v155 = v18;
      v23 = (int8x16_t)vdivq_f32(v10, v18);
      v24 = (char *)v174 + 12 * v12;
      v25 = (int)*(float *)v23.i32 - (int)v19.f32[0] + 1;
      v26 = (int)*(float *)&v23.i32[1] - (int)v19.f32[1] + 1;
      v27 = (char *)v174;
      while (1)
      {
        v23.i64[0] = *(_QWORD *)v27;
        v23.i32[2] = *((_DWORD *)v27 + 2);
        v28 = vdivq_f32((float32x4_t)v23, v155);
        v29 = (int)v28.f32[2];
        *(int32x2_t *)v28.f32 = vcvt_s32_f32(*(float32x2_t *)v28.f32);
        v152 = v28;
        LODWORD(v30) = v28.i32[0] - v20 + (v28.i32[1] - v21 + ((int)v28.f32[2] - v22) * v26) * v25;
        v31 = (int)v30;
        *(_QWORD *)&v200 = (int)v30;
        if (!*(_QWORD *)&v188[8])
          goto LABEL_35;
        v32 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v188[8]);
        v32.i16[0] = vaddlv_u8(v32);
        if (v32.u32[0] > 1uLL)
        {
          v30 = (int)v30;
          if (*(_QWORD *)&v188[8] <= (unint64_t)(int)v30)
            v30 = (unint64_t)(int)v30 % *(_QWORD *)&v188[8];
        }
        else
        {
          v30 = (*(_QWORD *)&v188[8] - 1) & (int)v30;
        }
        v33 = *(_QWORD **)(*(_QWORD *)v188 + 8 * v30);
        if (!v33 || (v34 = (_QWORD *)*v33) == 0)
        {
LABEL_35:
          sub_20EF269E4((float *)v188, v31, &v200)[3] = v27;
          goto LABEL_36;
        }
        if (v32.u32[0] < 2uLL)
        {
          while (1)
          {
            v36 = v34[1];
            if (v36 == v31)
            {
              if (v34[2] == v31)
                goto LABEL_38;
            }
            else if ((v36 & (*(_QWORD *)&v188[8] - 1)) != v30)
            {
              goto LABEL_35;
            }
            v34 = (_QWORD *)*v34;
            if (!v34)
              goto LABEL_35;
          }
        }
        while (1)
        {
          v35 = v34[1];
          if (v35 == v31)
            break;
          if (v35 >= *(_QWORD *)&v188[8])
            v35 %= *(_QWORD *)&v188[8];
          if (v35 != v30)
            goto LABEL_35;
LABEL_25:
          v34 = (_QWORD *)*v34;
          if (!v34)
            goto LABEL_35;
        }
        if (v34[2] != v31)
          goto LABEL_25;
LABEL_38:
        v37 = sub_20EF269E4((float *)v188, v31, &v200);
        v38.i32[3] = v152.i32[3];
        *(float32x2_t *)v38.f32 = vcvt_f32_s32(*(int32x2_t *)v152.f32);
        v38.f32[2] = (float)v29;
        v39.i32[3] = v155.i32[3];
        v40 = vmulq_f32(v38, v155);
        v41 = v37[3];
        v39.i64[0] = *(_QWORD *)v27;
        v39.i32[2] = *((_DWORD *)v27 + 2);
        v42 = (int8x16_t)vsubq_f32(v40, v39);
        v43 = (float32x2_t)vextq_s8(v42, v42, 8uLL).u64[0];
        v44 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), *(float32x2_t *)v42.i8, 1);
        v42.i64[0] = *(_QWORD *)v41;
        v42.i32[2] = *(_DWORD *)(v41 + 8);
        v23 = (int8x16_t)vsubq_f32(v40, (float32x4_t)v42);
        v45 = (float32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
        if (vmla_f32(v44, v43, v43).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1), *(float32x2_t *)v23.i8, 1), v45, v45).f32[0])goto LABEL_35;
LABEL_36:
        v27 += 12;
        if (v27 == v24)
        {
          v46 = *(_QWORD **)&v188[16];
          if (*(_QWORD *)&v188[16])
          {
            do
            {
              *(_QWORD *)&v200 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46[3] - (_QWORD)v9) >> 2);
              v225 = &v207;
              sub_20EDA6C78((uint64_t *)&v225, &v200);
              v46 = (_QWORD *)*v46;
            }
            while (v46);
            v47 = *(_QWORD **)&v188[16];
            if (*(_QWORD *)&v188[16])
            {
              do
              {
                v48 = (_QWORD *)*v47;
                operator delete(v47);
                v47 = v48;
              }
              while (v48);
            }
          }
          v49 = *(void **)v188;
          *(_QWORD *)v188 = 0;
          if (v49)
            operator delete(v49);
          break;
        }
      }
    }
    v51 = (char *)v174;
    v50 = v175;
    v52 = (unint64_t *)v207;
    v53 = (unint64_t *)v208;
    v54 = (uint64_t)&v207[-v208] >> 3;
    v55 = -v54;
    v201 = 0;
    v200 = 0uLL;
    if (v207 == (char *)v208)
    {
      v59 = 0;
      v67 = 0;
      v57 = 0;
      v226 = 0;
      v227 = 0;
      v225 = 0;
    }
    else
    {
      if (v55 >= 0x1555555555555556)
        sub_20E867F44();
      v56 = (char *)operator new(-12 * v54);
      v57 = v56;
      v58 = 0xAAAAAAAAAAAAAAABLL * ((v50 - v51) >> 2);
      v59 = &v56[-12 * v54];
      *(_QWORD *)&v200 = v56;
      v201 = v59;
      *(_QWORD *)&v188[8] = v51;
      *(_QWORD *)&v188[16] = v58;
      v60 = *v52;
      if (v58 <= *v52)
      {
LABEL_53:
        *(_QWORD *)v188 = v52;
        sub_21023D290((unint64_t *)&v188[16], v60);
      }
      v61 = 0;
      v62 = v52 + 1;
      while (1)
      {
        v63 = &v51[12 * v60];
        v64 = *(_QWORD *)v63;
        v65 = &v56[v61];
        *((_DWORD *)v65 + 2) = *((_DWORD *)v63 + 2);
        *(_QWORD *)v65 = v64;
        if (v62 == v53)
          break;
        v66 = *v62++;
        v60 = v66;
        v61 += 12;
        if (v58 <= v66)
        {
          v52 = v62 - 1;
          goto LABEL_53;
        }
      }
      v67 = (uint64_t)&v56[v61 + 12];
      v68 = (char *)v177;
      v69 = v178;
      v226 = 0;
      v227 = 0;
      v225 = 0;
      if (v52 != v53)
      {
        if (v55 >= 0x71C71C71C71C71DLL)
          sub_20E867F44();
        v70 = (void **)operator new(-36 * v54);
        v71 = v70;
        v72 = 0x8E38E38E38E38E39 * ((v69 - v68) >> 2);
        v73 = (char *)v70 + 36 * v55;
        v225 = (char **)v70;
        v227 = v73;
        *(_QWORD *)&v188[8] = v68;
        *(_QWORD *)&v188[16] = v72;
        v74 = *v52;
        if (v72 <= *v52)
        {
LABEL_61:
          *(_QWORD *)v188 = v52;
          sub_21023D290((unint64_t *)&v188[16], v74);
        }
        v75 = 0;
        v76 = v52 + 1;
        while (1)
        {
          v77 = (char *)v70 + v75;
          v78 = &v68[36 * v74];
          v79 = *(_OWORD *)v78;
          v80 = *((_OWORD *)v78 + 1);
          *((_DWORD *)v77 + 8) = *((_DWORD *)v78 + 8);
          *(_OWORD *)v77 = v79;
          *((_OWORD *)v77 + 1) = v80;
          if (v76 == v53)
            break;
          v81 = *v76++;
          v74 = v81;
          v75 += 36;
          if (v72 <= v81)
          {
            v52 = v76 - 1;
            goto LABEL_61;
          }
        }
        v82 = (uint64_t)v70 + v75 + 36;
        if (!v52)
          goto LABEL_64;
LABEL_63:
        v208 = (unint64_t)v52;
        operator delete(v52);
        v51 = (char *)v174;
LABEL_64:
        if (v51)
        {
          v175 = v51;
          operator delete(v51);
        }
        v174 = v57;
        v175 = (_BYTE *)v67;
        v176 = v59;
        a3 = v145;
        if (v177)
        {
          v178 = v177;
          operator delete(v177);
        }
        v177 = v71;
        v178 = (_BYTE *)v82;
        v179 = v73;
        a1 = v148;
        goto LABEL_69;
      }
    }
    v73 = 0;
    v82 = 0;
    v71 = 0;
    if (!v52)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_69:
  v207 = (char *)&off_24C9F15F0;
  v208 = (unint64_t)&off_24C9F1578;
  v209 = v159;
  v210 = v160;
  v211 = v161;
  v212 = v162;
  v213 = v163;
  v214 = v164;
  v215 = v165;
  v216 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v166), v167);
  v217 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v168), v169);
  v218 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v170), v171);
  v219 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v172), v173);
  v220 = a3;
  v221 = 0u;
  v222 = 0u;
  v223 = 0u;
  v224 = 0u;
  if (v180)
  {
    *(_QWORD *)&v221 = 0xAAAAAAAAAAAAAAABLL * ((v175 - (_BYTE *)v174) >> 2);
    *((_QWORD *)&v221 + 1) = v174;
    *(_QWORD *)&v222 = 0x8E38E38E38E38E39 * ((v178 - (_BYTE *)v177) >> 2);
    *((_QWORD *)&v222 + 1) = v177;
  }
  if (v185)
  {
    *(_QWORD *)&v223 = 0xAAAAAAAAAAAAAAABLL * ((v182 - (_BYTE *)v181) >> 3);
    *((_QWORD *)&v223 + 1) = v181;
    *(_QWORD *)&v224 = 0x8E38E38E38E38E39 * ((v184 - (_BYTE *)v183) >> 2);
    *((_QWORD *)&v224 + 1) = v183;
  }
  v83 = *(_QWORD *)(a1 + 72);
  v188[0] = 0;
  v199 = 0;
  sub_20EF1B5F0(v83, (uint64_t)&v207, (uint64_t)v188, &v200);
  if (v199)
  {
    v198 = &off_24C9F15F0;
    if (v196)
    {
      v197 = v196;
      operator delete(v196);
    }
    if (v195)
      free(v195);
    v195 = 0;
    if (v193)
    {
      v194 = v193;
      operator delete(v193);
    }
    if (*(uint64_t *)((char *)v191.i64 + 4))
      free(*(void **)((char *)v191.i64 + 4));
    *(uint64_t *)((char *)v191.i64 + 4) = 0;
  }
  sub_20EF279AC((uint64_t *)&v200, (uint64_t)&v186);
  v84 = *(_QWORD **)(a1 + 200);
  if (v84)
    sub_20EEBF084(v84, (uint64_t)&v200);
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  v225 = (char **)&v204;
  sub_20EF138D0((void ***)&v225);
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if ((_QWORD)v200)
  {
    *((_QWORD *)&v200 + 1) = v200;
    operator delete((void *)v200);
  }
  if (v185)
  {
    if (v183)
    {
      v184 = v183;
      operator delete(v183);
    }
    if (v181)
    {
      v182 = v181;
      operator delete(v181);
    }
  }
  if (v180)
  {
    if (v177)
    {
      v178 = v177;
      operator delete(v177);
    }
    if (v174)
    {
      v175 = v174;
      operator delete(v174);
    }
  }
  v158 = &off_24C9F15F0;
  v85 = v186;
  v86 = v187;
  v208 = 0;
  v207 = 0;
  *(_QWORD *)&v209 = 0;
  v87 = v187 - v186;
  if (v187 != v186)
  {
    v88 = 0x8F5C28F5C28F5C29 * (v87 >> 3);
    if (v88 >= 0x25ED097B425ED0ALL)
      sub_20E867F44();
    v207 = (char *)operator new(0x7AE147AE147AE14CLL * (v87 >> 3));
    v208 = (unint64_t)v207;
    *(_QWORD *)&v209 = &v207[108 * v88];
    while (1)
    {
      v96 = *(float64x2_t *)v85;
      v95 = *(float64x2_t *)(v85 + 16);
      v98 = *(float64x2_t *)(v85 + 32);
      v97 = *(float64x2_t *)(v85 + 48);
      v100 = *(float64x2_t *)(v85 + 64);
      v99 = *(float64x2_t *)(v85 + 80);
      v102 = *(float64x2_t *)(v85 + 96);
      v101 = *(float64x2_t *)(v85 + 112);
      v103 = atomic_load((unsigned __int8 *)&qword_254A516F8);
      if ((v103 & 1) == 0)
      {
        v153 = *(float64x2_t *)v85;
        v156 = *(float64x2_t *)(v85 + 16);
        v146 = *(float64x2_t *)(v85 + 32);
        v149 = *(float64x2_t *)(v85 + 48);
        v141 = *(float64x2_t *)(v85 + 64);
        v143 = *(float64x2_t *)(v85 + 80);
        v137 = *(float64x2_t *)(v85 + 96);
        v139 = *(float64x2_t *)(v85 + 112);
        v132 = __cxa_guard_acquire(&qword_254A516F8);
        v102 = v137;
        v101 = v139;
        v100 = v141;
        v99 = v143;
        v98 = v146;
        v97 = v149;
        v96 = v153;
        v95 = v156;
        if (v132)
        {
          dword_254A516F0 = 1065098332;
          __cxa_guard_release(&qword_254A516F8);
          v102 = v137;
          v101 = v139;
          v100 = v141;
          v99 = v143;
          v98 = v146;
          v97 = v149;
          v96 = v153;
          v95 = v156;
        }
      }
      v104 = atomic_load((unsigned __int8 *)&qword_254A51708);
      if ((v104 & 1) == 0)
      {
        v154 = v96;
        v157 = v95;
        v147 = v98;
        v150 = v97;
        v142 = v100;
        v144 = v99;
        v138 = v102;
        v140 = v101;
        v133 = __cxa_guard_acquire(&qword_254A51708);
        v102 = v138;
        v101 = v140;
        v100 = v142;
        v99 = v144;
        v98 = v147;
        v97 = v150;
        v96 = v154;
        v95 = v157;
        if (v133)
        {
          dword_254A51700 = 1043452119;
          __cxa_guard_release(&qword_254A51708);
          v102 = v138;
          v101 = v140;
          v100 = v142;
          v99 = v144;
          v98 = v147;
          v97 = v150;
          v96 = v154;
          v95 = v157;
        }
      }
      v106 = *(_QWORD *)(v85 + 136);
      v105 = *(_QWORD *)(v85 + 144);
      if (v106 == v105)
      {
        v109 = 0uLL;
      }
      else
      {
        v107 = *(uint64_t **)v106;
        v108 = *(uint64_t **)(v106 + 8);
        if (*(uint64_t **)v106 == v108)
        {
          v109 = 0uLL;
          if (v105 - v106 != 24)
            goto LABEL_124;
        }
        else
        {
          v109.i64[0] = *v107;
          v109.i64[1] = *v107;
          do
          {
            v110 = *v107++;
            v111.i64[0] = v110;
            v112.i64[0] = v110;
            v112.i64[1] = v110;
            v113.i64[0] = v109.i64[0];
            v113.i64[1] = v110;
            v111.i64[1] = vextq_s8(v109, v109, 8uLL).u64[0];
            v109 = vbslq_s8((int8x16_t)vcgtq_f32(v113, v111), v112, v109);
          }
          while (v107 != v108);
          if (v105 - v106 != 24)
          {
LABEL_124:
            v122 = v106 + 24;
            do
            {
              v129 = *(float32x2_t **)(v106 + 24);
              v130 = *(float32x2_t **)(v106 + 32);
              v106 = v122;
              if (v129 == v130)
              {
                v123.i64[0] = 0;
                v124.i64[0] = 0;
              }
              else
              {
                *(float32x2_t *)v123.f32 = *v129;
                *(float32x2_t *)v124.f32 = *v129;
                do
                {
                  v131 = *v129++;
                  *(int8x8_t *)v124.f32 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v124.f32, v131), (int8x8_t)v131, *(int8x8_t *)v124.f32);
                  *(int8x8_t *)v123.f32 = vbsl_s8((int8x8_t)vcgt_f32(v131, *(float32x2_t *)v123.f32), (int8x8_t)v131, *(int8x8_t *)v123.f32);
                }
                while (v129 != v130);
              }
              v125.i64[0] = v124.i64[0];
              v125.i64[1] = v124.i64[0];
              v126.i64[0] = v123.i64[0];
              v126.i64[1] = v123.i64[0];
              v127.i64[0] = v109.i64[0];
              v127.i64[1] = v124.i64[0];
              v124.i64[1] = vextq_s8(v109, v109, 8uLL).u64[0];
              v128 = vbslq_s8((int8x16_t)vcgtq_f32(v127, v124), v125, v109);
              v125.i64[0] = v128.i64[0];
              v125.i64[1] = v123.i64[0];
              v123.i64[1] = vextq_s8(v128, v128, 8uLL).u64[0];
              v109 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v125, v123), v126, v128);
              v122 += 24;
            }
            while (v106 + 24 != v105);
          }
        }
      }
      v114 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v102), v101);
      v115 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v100), v99);
      v116 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v98), v97);
      v117 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v96), v95);
      v118 = fabsf(v115.f32[2]);
      if (v118 <= *(float *)&dword_254A51700)
        v119 = 2;
      else
        v119 = 4;
      *(_QWORD *)v188 = v114.i64[0];
      *(_DWORD *)&v188[8] = v114.i32[2];
      if (v118 >= *(float *)&dword_254A516F0)
        v120 = 1;
      else
        v120 = v119;
      *(_DWORD *)&v188[20] = v115.i32[2];
      *(_QWORD *)&v188[12] = v115.i64[0];
      v188[24] = v120;
      *(float32x4_t *)&v188[28] = v117;
      v189 = v116;
      v190 = v115;
      v191 = v114;
      v192 = v109;
      v121 = v208;
      if (v208 < (unint64_t)v209)
      {
        v89 = *(_QWORD *)v188;
        *(_DWORD *)(v208 + 8) = *(_DWORD *)&v188[8];
        *(_QWORD *)v121 = v89;
        v90 = *(_QWORD *)((unint64_t)v188 | 0xC);
        *(_DWORD *)(v121 + 20) = *(_DWORD *)(((unint64_t)v188 | 0xC) + 8);
        *(_QWORD *)(v121 + 12) = v90;
        *(_BYTE *)(v121 + 24) = v188[24];
        v91 = *(_OWORD *)&v188[28];
        v92 = v189;
        v93 = v190;
        *(float32x4_t *)(v121 + 76) = v191;
        *(float32x4_t *)(v121 + 60) = v93;
        *(float32x4_t *)(v121 + 44) = v92;
        *(_OWORD *)(v121 + 28) = v91;
        *(int8x16_t *)(v121 + 92) = v192;
        v94 = (char *)(v121 + 108);
      }
      else
      {
        v94 = sub_20EF1C5C0(&v207, (uint64_t)v188);
      }
      v208 = (unint64_t)v94;
      v85 += 200;
      if (v85 == v86)
      {
        v134 = v207;
        v87 = v209;
        goto LABEL_137;
      }
    }
  }
  v94 = 0;
  v134 = 0;
LABEL_137:
  *a4 = v134;
  a4[1] = v94;
  a4[2] = (char *)v87;
  kdebug_trace();
  sub_20EF255D4(v188);
  if (**(int **)(*(_QWORD *)v188 + 56) <= 1)
  {
    v135 = atomic_load((unsigned __int8 *)&qword_254A601E0);
    if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_254A601E0))
    {
      qword_254A601D8 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_SingleShot");
      __cxa_guard_release(&qword_254A601E0);
    }
    v136 = qword_254A601D8;
    if (*(_BYTE *)(qword_254A601D8 + 16))
    {
      *(_QWORD *)(v136 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v136;
      *(_BYTE *)(v136 + 16) = 0;
    }
  }
  *(_QWORD *)v188 = &v186;
  sub_20EF0A1D0((void ***)v188);
}

void sub_20EF2646C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  void *v71;

  __cxa_guard_abort(&qword_254A601E0);
  v71 = *(void **)a22;
  if (*(_QWORD *)a22)
  {
    *(_QWORD *)(a22 + 8) = v71;
    operator delete(v71);
  }
  STACK[0x408] = (unint64_t)&a70;
  sub_20EF0A1D0((void ***)&STACK[0x408]);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF265E4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void **v24;

  if (*(_BYTE *)(a1 + 544))
  {
    v2 = *(void **)(a1 + 520);
    if (v2)
    {
      *(_QWORD *)(a1 + 528) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 496);
    if (v3)
    {
      *(_QWORD *)(a1 + 504) = v3;
      operator delete(v3);
    }
  }
  if (*(_BYTE *)(a1 + 480))
  {
    v4 = *(void **)(a1 + 440);
    if (v4)
      free(v4);
    *(_QWORD *)(a1 + 440) = 0;
  }
  if (*(_BYTE *)(a1 + 384))
  {
    v5 = *(void **)(a1 + 352);
    if (v5)
      free(v5);
    *(_QWORD *)(a1 + 352) = 0;
  }
  if (*(_BYTE *)(a1 + 304))
  {
    v6 = *(void **)(a1 + 272);
    if (v6)
      free(v6);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v7 = *(void **)(a1 + 144);
  if (v7)
  {
    *(_QWORD *)(a1 + 152) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 120);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 128);
    v10 = *(void **)(a1 + 120);
    if (v9 != v8)
    {
      do
      {
        v11 = *(void **)(v9 - 24);
        if (v11)
        {
          *(_QWORD *)(v9 - 16) = v11;
          operator delete(v11);
        }
        v9 -= 88;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 120);
    }
    *(_QWORD *)(a1 + 128) = v8;
    operator delete(v10);
  }
  v12 = *(_QWORD *)(a1 + 96);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 104);
    v14 = *(void **)(a1 + 96);
    if (v13 != v12)
    {
      v15 = *(_QWORD *)(a1 + 104);
      do
      {
        v17 = *(void **)(v15 - 24);
        v15 -= 24;
        v16 = v17;
        if (v17)
        {
          *(_QWORD *)(v13 - 16) = v16;
          operator delete(v16);
        }
        v13 = v15;
      }
      while (v15 != v12);
      v14 = *(void **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v12;
    operator delete(v14);
  }
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = *(_QWORD *)(a1 + 80);
    v20 = *(void **)(a1 + 72);
    if (v19 != v18)
    {
      do
      {
        v19 -= 464;
        sub_20E96ACE0(v19);
      }
      while (v19 != v18);
      v20 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v18;
    operator delete(v20);
  }
  v24 = (void **)(a1 + 48);
  sub_20EEBFEB8(&v24);
  v21 = *(void **)(a1 + 24);
  if (v21)
  {
    *(_QWORD *)(a1 + 32) = v21;
    operator delete(v21);
  }
  v22 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v22;
    operator delete(v22);
  }
  return a1;
}

uint64_t sub_20EF26790(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  void *v19;

  v2 = *(_QWORD **)(a1 + 96);
  if (v2)
  {
    do
    {
      v9 = (_QWORD *)*v2;
      v10 = (_QWORD *)v2[6];
      if (v10)
      {
        do
        {
          v11 = (_QWORD *)*v10;
          operator delete(v10);
          v10 = v11;
        }
        while (v11);
      }
      v12 = (void *)v2[4];
      v2[4] = 0;
      if (v12)
        operator delete(v12);
      operator delete(v2);
      v2 = v9;
    }
    while (v9);
  }
  v3 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 56);
  if (v4)
  {
    do
    {
      v13 = (_QWORD *)*v4;
      v14 = (_QWORD *)v4[6];
      if (v14)
      {
        do
        {
          v15 = (_QWORD *)*v14;
          operator delete(v14);
          v14 = v15;
        }
        while (v15);
      }
      v16 = (void *)v4[4];
      v4[4] = 0;
      if (v16)
        operator delete(v16);
      operator delete(v4);
      v4 = v13;
    }
    while (v13);
  }
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(_QWORD **)(a1 + 16);
  while (v6)
  {
    v17 = v6;
    v6 = (_QWORD *)*v6;
    v18 = (void *)v17[15];
    if (v18)
    {
      v17[16] = v18;
      operator delete(v18);
    }
    if (*((_BYTE *)v17 + 112))
    {
      v19 = (void *)v17[11];
      if (v19)
      {
        v17[12] = v19;
        operator delete(v19);
      }
    }
    operator delete(v17);
  }
  v7 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_20EF268C0(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  int *v14;
  int *v15;
  int *v16;

  v3 = *a1;
  v4 = (int *)operator new(4uLL);
  v14 = v4;
  *v4 = v3;
  v15 = v4 + 1;
  v16 = v4 + 1;
  sub_210231510(&v14, &v12);
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v10 = &off_24CA1F4F8;
  v11 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20E89D0A8((_QWORD *)a2, (uint64_t)&v10);
  *(_QWORD *)(a2 + 2504) = &off_24CA1F4F8;
  *(_OWORD *)(a2 + 2512) = v11;
  v11 = 0uLL;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20EF269AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_210231620((uint64_t)va);
  sub_210231620((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EF269C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(_QWORD *)(v1 - 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EF269E4(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _QWORD *v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v5;
  v14[2] = *a3;
  v14[3] = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v5 = v3;
    v17 = *(_QWORD **)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v18)
      goto LABEL_85;
LABEL_73:
    *v14 = *v18;
LABEL_91:
    *v18 = v14;
    goto LABEL_92;
  }
  v19 = 1;
  if (v7 >= 3)
    v19 = (v7 & (v7 - 1)) != 0;
  v20 = v19 | (2 * v7);
  v21 = vcvtps_u32_f32(v15 / v16);
  if (v20 <= v21)
    prime = v21;
  else
    prime = v20;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_37:
    if (prime >> 61)
      sub_20E877A38();
    v23 = operator new(8 * prime);
    v24 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
    while (prime != v25);
    v27 = (uint64_t *)(a1 + 4);
    v26 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v26)
      goto LABEL_69;
    v28 = v26[1];
    v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v30 = v28 & v29;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v27;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v32 = i[1] & v29;
        if (v32 == v30)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
        {
          *v26 = *i;
          v33 = 8 * v32;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v33);
          **(_QWORD **)(*(_QWORD *)a1 + v33) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v26;
          v26 = i;
          v30 = v32;
        }
      }
      goto LABEL_69;
    }
    if (v28 >= prime)
      v28 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v27;
    v37 = (_QWORD *)*v26;
    if (!*v26)
    {
LABEL_69:
      v7 = prime;
      v40 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_70;
LABEL_84:
      v5 &= v40;
      v17 = *(_QWORD **)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
      if (!v18)
        goto LABEL_85;
      goto LABEL_73;
    }
    while (1)
    {
      v39 = v37[1];
      if (v39 >= prime)
        v39 %= prime;
      if (v39 == v28)
        goto LABEL_63;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
      {
        *v26 = *v37;
        v38 = 8 * v39;
        *v37 = **(_QWORD **)(*(_QWORD *)a1 + v38);
        **(_QWORD **)(*(_QWORD *)a1 + v38) = v37;
        v37 = v26;
LABEL_63:
        v26 = v37;
        v37 = (_QWORD *)*v37;
        if (!v37)
          goto LABEL_69;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v26;
        v26 = v37;
        v37 = (_QWORD *)*v37;
        v28 = v39;
        if (!v37)
          goto LABEL_69;
      }
    }
  }
  if (prime < v7)
  {
    v34 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
    {
      v34 = std::__next_prime(v34);
    }
    else
    {
      v36 = 1 << -(char)__clz(v34 - 1);
      if (v34 >= 2)
        v34 = v36;
    }
    if (prime <= v34)
      prime = v34;
    if (prime < v7)
    {
      if (!prime)
      {
        v41 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        v40 = -1;
        goto LABEL_84;
      }
      goto LABEL_37;
    }
    v7 = *((_QWORD *)a1 + 1);
  }
  v40 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_84;
LABEL_70:
  if (v7 <= v5)
    v5 %= v7;
  v17 = *(_QWORD **)a1;
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v18)
    goto LABEL_73;
LABEL_85:
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v17[v5] = a1 + 4;
  if (*v14)
  {
    v42 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v42 >= v7)
        v42 %= v7;
    }
    else
    {
      v42 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_91;
  }
LABEL_92:
  ++*((_QWORD *)a1 + 3);
  return v14;
}

void sub_20EF26E88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_20EF26E9C(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _WORD *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _WORD *v38;
  int v39;
  void *memptr;

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 2 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr = 0;
    v20 = malloc_type_posix_memalign(&memptr, v19, 2 * v14, 0x1F88E90uLL);
    if (v20)
      sub_210207B94(v20, a1[2], v15);
    v21 = memptr;
    a1[1] = (unint64_t)memptr;
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
    if (v21)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = v22;
      v25 = HIDWORD(v24) * ((v11 >> 31) >> 1);
      if (a6)
      {
        if (v25 == -1
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if ((_DWORD)v24 && HIDWORD(v24))
        {
          v26 = v24 - 1;
          v27 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            v28 = HIDWORD(v11) & 0x7FFFFFFF;
            if ((_DWORD)v24 == 1)
            {
              do
              {
                *v21 = *a5;
                v21 += v28;
                --v27;
              }
              while (v27);
            }
            else
            {
              v29 = 0;
              v30 = 2 * v28;
              do
              {
                v31 = v21;
                v32 = v24 - 1;
                do
                {
                  *v31 = *a5;
                  v31 += v11 & 0x7FFFFFFF;
                  --v32;
                }
                while (v32);
                *v31 = *a5;
                v21 = (_WORD *)((char *)v21 + v30);
                ++v29;
              }
              while (v29 != v27);
            }
          }
          if ((_DWORD)v24 != 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v11 & 0x7FFFFFFF;
              --v26;
            }
            while (v26);
          }
          *v21 = *a5;
        }
      }
      else
      {
        if (v25 == -1
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if ((_DWORD)v24 && HIDWORD(v24))
        {
          v33 = v24 - 1;
          v34 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            v35 = HIDWORD(v11) & 0x7FFFFFFF;
            if ((_DWORD)v24 == 1)
            {
              do
              {
                *v21 = 0;
                v21 += v35;
                --v34;
              }
              while (v34);
            }
            else
            {
              v36 = 0;
              v37 = 2 * v35;
              do
              {
                v38 = v21;
                v39 = v24 - 1;
                do
                {
                  *v38 = 0;
                  v38 += v11 & 0x7FFFFFFF;
                  --v39;
                }
                while (v39);
                *v38 = 0;
                v21 = (_WORD *)((char *)v21 + v37);
                ++v36;
              }
              while (v36 != v34);
            }
          }
          if ((_DWORD)v24 != 1)
          {
            do
            {
              *v21 = 0;
              v21 += v11 & 0x7FFFFFFF;
              --v33;
            }
            while (v33);
          }
          *v21 = 0;
        }
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  }
  return a1;
}

void sub_20EF27190(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EF271B8(v1);
  _Unwind_Resume(a1);
}

void sub_20EF271A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EF271B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF271B8(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 28);
    if (v4 * (*(_QWORD *)(a1 + 32) >> 33) != -1)
      goto LABEL_11;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(void **)(a1 + 8);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_20EF27254(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  BOOL v29;
  char v30;
  unint64_t v31;
  int v32;
  BOOL v33;
  char v34;
  BOOL v35;
  BOOL v36;
  char v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  char v41;
  _WORD *v43;
  void *memptr;
  unint64_t v45;
  int v46;
  uint64_t v47;
  int v48;

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 2 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    v24 = malloc_type_posix_memalign(&memptr, v23, 2 * v18, 0x1F88E90uLL);
    if (v24)
      sub_210207B94(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = memptr;
    *(_QWORD *)(a1 + 8) = memptr;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 44) = 2 * v12;
  if (v25)
  {
    v27 = v12 & 0x7FFFFFFF;
    if (a6)
    {
      if (*(_DWORD *)(a1 + 24))
        v28 = *(_DWORD *)(a1 + 28) == 0;
      else
        v28 = 1;
      v29 = v28 || *(_DWORD *)(a1 + 32) == 0;
      v30 = v29;
      if (v29)
        v31 = 0;
      else
        v31 = *(_QWORD *)(a1 + 24);
      if (v29)
        v32 = 0;
      else
        v32 = *(_DWORD *)(a1 + 32);
      memptr = v25;
      v45 = v31;
      v46 = v32;
      v47 = v11 & 0x7FFFFFFF7FFFFFFFLL;
      v48 = v12 & 0x7FFFFFFF;
      if (v32 * v27 == -1
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v43 = a5;
      if (HIDWORD(v31))
        v33 = (_DWORD)v31 == 0;
      else
        v33 = 1;
      if (v33)
        v34 = 1;
      else
        v34 = v30;
      if ((v34 & 1) == 0)
        sub_20EF275C4(&v43, (uint64_t)&memptr);
    }
    else
    {
      if (*(_DWORD *)(a1 + 24))
        v35 = *(_DWORD *)(a1 + 28) == 0;
      else
        v35 = 1;
      v36 = v35 || *(_DWORD *)(a1 + 32) == 0;
      v37 = v36;
      if (v36)
        v38 = 0;
      else
        v38 = *(_QWORD *)(a1 + 24);
      if (v36)
        v39 = 0;
      else
        v39 = *(_DWORD *)(a1 + 32);
      memptr = v25;
      v45 = v38;
      v46 = v39;
      v47 = v11 & 0x7FFFFFFF7FFFFFFFLL;
      v48 = v12 & 0x7FFFFFFF;
      if (v39 * v27 == -1
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (HIDWORD(v38))
        v40 = (_DWORD)v38 == 0;
      else
        v40 = 1;
      if (v40)
        v41 = 1;
      else
        v41 = v37;
      if ((v41 & 1) == 0)
        sub_20EF277F0((uint64_t)&v43, (uint64_t)&memptr);
    }
  }
  return a1;
}

void sub_20EF274D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EF27520(v1);
  _Unwind_Resume(a1);
}

void sub_20EF274E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EF27520(v1);
  _Unwind_Resume(a1);
}

void sub_20EF274F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EF27520(v1);
  _Unwind_Resume(a1);
}

void sub_20EF2750C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EF27520(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF27520(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 28) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 24) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 32);
    if (v5 * (*(_DWORD *)(a1 + 44) >> 1) != -1)
      goto LABEL_14;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(void **)(a1 + 8);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

_WORD **sub_20EF275C4(_WORD **result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  int v19;
  _WORD *v20;
  _WORD *v21;
  _WORD *v22;
  _WORD *v23;
  int v24;
  int v25;
  int v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  _WORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  _WORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v2 - 1;
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a2 + 20);
    v10 = *(unsigned int *)(a2 + 24);
    v11 = *(_WORD **)a2;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a2 + 28);
      if (v8)
      {
        v14 = 0;
        v15 = 2 * v13;
        v16 = v10;
        if (v7)
        {
          v17 = 2 * v9;
          v18 = &v11[v16];
          do
          {
            v19 = 0;
            v20 = v18;
            v21 = v11;
            do
            {
              v22 = v20;
              v23 = v21;
              v24 = v7;
              do
              {
                *v23 = **result;
                v23 = (_WORD *)((char *)v23 + v17);
                --v24;
              }
              while (v24);
              *v23 = **result;
              v21 = (_WORD *)((char *)v21 + v16 * 2);
              ++v19;
              v20 = &v22[v16];
            }
            while (v19 != v8);
            v25 = v7;
            do
            {
              *v22 = **result;
              v22 = (_WORD *)((char *)v22 + v17);
              --v25;
            }
            while (v25);
            *v22 = **result;
            v11 = (_WORD *)((char *)v11 + v15);
            ++v14;
            v18 = (_WORD *)((char *)v18 + v15);
          }
          while (v14 != v12);
        }
        else
        {
          do
          {
            v26 = v8;
            v27 = v11;
            do
            {
              *v27 = **result;
              v27 = (_WORD *)((char *)v27 + v16 * 2);
              --v26;
            }
            while (v26);
            *v27 = **result;
            v11 = (_WORD *)((char *)v11 + v15);
            ++v14;
          }
          while (v14 != v12);
        }
      }
      else if (v7)
      {
        v28 = 0;
        v29 = 2 * v13;
        do
        {
          v30 = v11;
          v31 = v7;
          do
          {
            *v30 = **result;
            v30 += v9;
            --v31;
          }
          while (v31);
          *v30 = **result;
          v11 = (_WORD *)((char *)v11 + v29);
          ++v28;
        }
        while (v28 != v12);
      }
      else
      {
        do
        {
          *v11 = **result;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    if (v8)
    {
      if (v7)
      {
        v32 = 0;
        v33 = 2 * v10;
        do
        {
          v34 = v11;
          v35 = v7;
          do
          {
            *v34 = **result;
            v34 += v9;
            --v35;
          }
          while (v35);
          *v34 = **result;
          v11 = (_WORD *)((char *)v11 + v33);
          ++v32;
        }
        while (v32 != v8);
      }
      else
      {
        v36 = 2 * v10;
        do
        {
          *v11 = **result;
          v11 = (_WORD *)((char *)v11 + v36);
          --v8;
        }
        while (v8);
      }
    }
    if (v7)
    {
      v37 = 2 * v9;
      do
      {
        *v11 = **result;
        v11 = (_WORD *)((char *)v11 + v37);
        --v7;
      }
      while (v7);
    }
    *v11 = **result;
  }
  return result;
}

void sub_20EF277F0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  int v19;
  _WORD *v20;
  _WORD *v21;
  _WORD *v22;
  _WORD *v23;
  int v24;
  int v25;
  int v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  _WORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  _WORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v2 - 1;
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a2 + 20);
    v10 = *(unsigned int *)(a2 + 24);
    v11 = *(_WORD **)a2;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a2 + 28);
      if (v8)
      {
        v14 = 0;
        v15 = 2 * v13;
        v16 = v10;
        if (v7)
        {
          v17 = 2 * v9;
          v18 = &v11[v16];
          do
          {
            v19 = 0;
            v20 = v18;
            v21 = v11;
            do
            {
              v22 = v20;
              v23 = v21;
              v24 = v7;
              do
              {
                *v23 = 0;
                v23 = (_WORD *)((char *)v23 + v17);
                --v24;
              }
              while (v24);
              *v23 = 0;
              v21 = (_WORD *)((char *)v21 + v16 * 2);
              ++v19;
              v20 = &v22[v16];
            }
            while (v19 != v8);
            v25 = v7;
            do
            {
              *v22 = 0;
              v22 = (_WORD *)((char *)v22 + v17);
              --v25;
            }
            while (v25);
            *v22 = 0;
            v11 = (_WORD *)((char *)v11 + v15);
            ++v14;
            v18 = (_WORD *)((char *)v18 + v15);
          }
          while (v14 != v12);
        }
        else
        {
          do
          {
            v26 = v8;
            v27 = v11;
            do
            {
              *v27 = 0;
              v27 = (_WORD *)((char *)v27 + v16 * 2);
              --v26;
            }
            while (v26);
            *v27 = 0;
            v11 = (_WORD *)((char *)v11 + v15);
            ++v14;
          }
          while (v14 != v12);
        }
      }
      else if (v7)
      {
        v28 = 0;
        v29 = 2 * v13;
        do
        {
          v30 = v11;
          v31 = v7;
          do
          {
            *v30 = 0;
            v30 += v9;
            --v31;
          }
          while (v31);
          *v30 = 0;
          v11 = (_WORD *)((char *)v11 + v29);
          ++v28;
        }
        while (v28 != v12);
      }
      else
      {
        do
        {
          *v11 = 0;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    if (v8)
    {
      if (v7)
      {
        v32 = 0;
        v33 = 2 * v10;
        do
        {
          v34 = v11;
          v35 = v7;
          do
          {
            *v34 = 0;
            v34 += v9;
            --v35;
          }
          while (v35);
          *v34 = 0;
          v11 = (_WORD *)((char *)v11 + v33);
          ++v32;
        }
        while (v32 != v8);
      }
      else
      {
        v36 = 2 * v10;
        do
        {
          *v11 = 0;
          v11 = (_WORD *)((char *)v11 + v36);
          --v8;
        }
        while (v8);
      }
    }
    if (v7)
    {
      v37 = 2 * v9;
      do
      {
        *v11 = 0;
        v11 = (_WORD *)((char *)v11 + v37);
        --v7;
      }
      while (v7);
    }
    *v11 = 0;
  }
}

void sub_20EF279AC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v3;
  int8x16_t v4;
  float64x2_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  unint64_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int8x16_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int8x16_t *v26;
  unsigned __int8 v27;
  BOOL v28;
  uint64_t v29;
  uint64_t i;
  unsigned __int8 v31;
  uint64_t **v32;
  double v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  float64x2_t v47;
  int8x16_t v48;
  unint64_t v49;
  int8x16_t v50;
  unint64_t v51;
  int8x16_t v52;
  unint64_t v53;
  int8x16_t v54;
  unint64_t v55;
  int8x16_t v56;
  unint64_t v57;
  int8x16_t *v58;
  int8x16_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  int8x16_t *v64;
  int8x16_t *v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t *v69;
  int8x16_t *v70;
  uint64_t *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  float64x2_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  unint64_t v103;
  _OWORD v104[8];
  int v105;
  int8x16_t __p;
  uint64_t v107;
  int8x16_t v108;
  int8x16_t *v109;
  char v110;
  char v111;
  int8x16_t *v112;
  int8x16_t *v113;
  int8x16_t *v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  uint64_t v121;

  v2 = a1;
  v121 = *MEMORY[0x24BDAC8D0];
  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[7] - a1[6]) >> 3);
  v103 = 0;
  v102 = 0uLL;
  sub_20EF284C4((uint64_t)&v102, v3);
  v6 = v2[6];
  v88 = v2[7];
  if (v6 != v88)
  {
    v87 = v2;
    do
    {
      v89 = v6;
      v9 = *(int8x16_t **)(v6 + 32);
      v8 = *(_QWORD *)(v6 + 40);
      v112 = 0;
      v113 = 0;
      v114 = 0;
      v10 = v8 - (_QWORD)v9;
      if (!v10)
      {
        v21 = 0;
        v12 = 0;
        v69 = 0;
        v26 = 0;
        v70 = 0;
        goto LABEL_75;
      }
      v11 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 4);
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v12 = (int8x16_t *)operator new(0x3333333333333338 * (v10 >> 4));
      v112 = v12;
      v113 = v12;
      v114 = (int8x16_t *)((char *)v12 + 24 * v11);
      v13 = &v9[5 * v11];
      do
      {
        while (1)
        {
          v115 = *(float64x2_t *)v9;
          *(_QWORD *)&v116.f64[0] = v9[1].i64[0];
          if (v12 >= v114)
            break;
          v4 = *v9;
          v12[1].i64[0] = v9[1].i64[0];
          *v12 = v4;
          v12 = (int8x16_t *)((char *)v12 + 24);
          v113 = v12;
          v9 += 5;
          if (v9 == v13)
            goto LABEL_28;
        }
        v14 = v112;
        v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v112) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        if (0x5555555555555556 * (((char *)v114 - (char *)v112) >> 3) > v16)
          v16 = 0x5555555555555556 * (((char *)v114 - (char *)v112) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v114 - (char *)v112) >> 3) >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v16;
        if (v17)
        {
          if (v17 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v18 = (char *)operator new(24 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[24 * v15];
        *(float64x2_t *)v19 = v115;
        *((_QWORD *)v19 + 2) = *(_QWORD *)&v116.f64[0];
        v20 = (int8x16_t *)(v19 + 24);
        if (v12 == v14)
        {
          v112 = (int8x16_t *)v19;
          v113 = (int8x16_t *)(v19 + 24);
          v114 = (int8x16_t *)&v18[24 * v17];
LABEL_26:
          operator delete(v12);
          goto LABEL_27;
        }
        do
        {
          v4 = *(int8x16_t *)((char *)v12 - 24);
          *((_QWORD *)v19 - 1) = v12[-1].i64[1];
          *(int8x16_t *)(v19 - 24) = v4;
          v19 -= 24;
          v12 = (int8x16_t *)((char *)v12 - 24);
        }
        while (v12 != v14);
        v12 = v112;
        v112 = (int8x16_t *)v19;
        v113 = v20;
        v114 = (int8x16_t *)&v18[24 * v17];
        if (v12)
          goto LABEL_26;
LABEL_27:
        v12 = v20;
        v113 = v20;
        v9 += 5;
      }
      while (v9 != v13);
LABEL_28:
      v21 = (uint64_t *)v112;
      v22 = *(_QWORD *)(v89 + 32);
      v23 = *(_QWORD *)(v89 + 40) - v22;
      if (v23 && *(_BYTE *)(v22 + 72))
      {
        v24 = 0xCCCCCCCCCCCCCCCDLL * (v23 >> 4);
        v112 = 0;
        v113 = 0;
        v114 = 0;
        if (v24 > 0x2AAAAAAAAAAAAAALL)
          sub_20E867F44();
        v86 = v21;
        v112 = (int8x16_t *)operator new(0xCCCCCCCCCCCCCCE0 * (v23 >> 4));
        v113 = v112;
        v114 = &v112[6 * v24];
        v25 = v22 + 80 * v24;
        do
        {
          while (1)
          {
            if (!*(_QWORD *)(v22 + 64) || !*(_QWORD *)(v22 + 48))
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/SingleShot/DensifierResult.cpp", 46, (uint64_t)"numPixels > 0 && !labelCount.empty()", 36, (uint64_t)&unk_21026807D, 0, (void (*)(void **))sub_21023DDB0);
              v27 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (byte_254A6DE68)
                v28 = byte_254A6DE70 == 0;
              else
                v28 = 0;
              if (!v28)
              {
                v29 = qword_254A6DE40;
                for (i = qword_254A6DE48; v29 != i; v29 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v29)(*(_QWORD *)(v29 + 8), "numPixels > 0 && !labelCount.empty()", 36, &unk_21026807D, 0);
              }
              v31 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                abort();
              qword_254A6DE58(unk_254A6DE60, "numPixels > 0 && !labelCount.empty()", 36, &unk_21026807D, 0);
            }
            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            v115 = 0u;
            v116 = 0u;
            v32 = *(uint64_t ***)(v22 + 40);
            if (v32)
            {
              v33 = (double)*(unint64_t *)(v22 + 64);
              do
              {
                v115.f64[*((unsigned int *)v32 + 4)] = (double)(unint64_t)v32[3] / v33;
                v32 = (uint64_t **)*v32;
              }
              while (v32);
              v34 = v115.f64[0]
                  + v115.f64[1]
                  + v116.f64[0]
                  + v116.f64[1]
                  + v117.f64[0]
                  + v117.f64[1]
                  + v118.f64[0]
                  + v118.f64[1]
                  + v119.f64[0]
                  + v119.f64[1]
                  + v120.f64[0]
                  + v120.f64[1];
              v36 = v119;
              v35 = v120;
              v38 = v117;
              v37 = v118;
              v40 = v115;
              v39 = v116;
              v41 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
              v42 = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
              v43 = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
              v44 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
              v45 = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
              v46 = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
            }
            else
            {
              v40.f64[0] = 0.0;
              v46 = 0;
              v39.f64[0] = 0.0;
              v45 = 0;
              v38.f64[0] = 0.0;
              v44 = 0;
              v37.f64[0] = 0.0;
              v43 = 0;
              v36.f64[0] = 0.0;
              v42 = 0;
              v35.f64[0] = 0.0;
              v41 = 0;
              v34 = 0.0;
            }
            v47 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34, 0);
            *(_QWORD *)&v40.f64[1] = v46;
            v48 = (int8x16_t)vdivq_f64(v40, v47);
            v49 = vextq_s8(v48, v48, 8uLL).u64[0];
            *(_QWORD *)&v39.f64[1] = v45;
            v50 = (int8x16_t)vdivq_f64(v39, v47);
            *(_QWORD *)&v38.f64[1] = v44;
            v51 = vextq_s8(v50, v50, 8uLL).u64[0];
            v52 = (int8x16_t)vdivq_f64(v38, v47);
            v53 = vextq_s8(v52, v52, 8uLL).u64[0];
            *(_QWORD *)&v37.f64[1] = v43;
            v54 = (int8x16_t)vdivq_f64(v37, v47);
            v55 = vextq_s8(v54, v54, 8uLL).u64[0];
            *(_QWORD *)&v36.f64[1] = v42;
            v56 = (int8x16_t)vdivq_f64(v36, v47);
            *(_QWORD *)&v35.f64[1] = v41;
            v5 = (float64x2_t)vextq_s8(v56, v56, 8uLL);
            v4 = (int8x16_t)vdivq_f64(v35, v47);
            v57 = vextq_s8(v4, v4, 8uLL).u64[0];
            v58 = v113;
            if (v113 >= v114)
              break;
            v48.i64[1] = v49;
            v50.i64[1] = v51;
            v52.i64[1] = v53;
            *v113 = v48;
            v58[1] = v50;
            v54.i64[1] = v55;
            v56.i64[1] = *(_QWORD *)&v5.f64[0];
            v58[2] = v52;
            v58[3] = v54;
            v4.i64[1] = v57;
            v58[4] = v56;
            v58[5] = v4;
            v26 = v58 + 6;
            v113 = v58 + 6;
            v22 += 80;
            if (v22 == v25)
              goto LABEL_74;
          }
          v59 = v112;
          v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v113 - (char *)v112) >> 5);
          v61 = v60 + 1;
          if (v60 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_20E867F44();
          if (0x5555555555555556 * (((char *)v114 - (char *)v112) >> 5) > v61)
            v61 = 0x5555555555555556 * (((char *)v114 - (char *)v112) >> 5);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v114 - (char *)v112) >> 5) >= 0x155555555555555)
            v62 = 0x2AAAAAAAAAAAAAALL;
          else
            v62 = v61;
          if (v62)
          {
            v90 = v51;
            v91 = v49;
            v92 = v5;
            v93 = v53;
            v94 = v55;
            v95 = v57;
            v96 = v4.i64[0];
            v97 = v50.i64[0];
            v98 = v54.i64[0];
            v99 = v56.i64[0];
            v100 = v48.i64[0];
            v101 = v52.i64[0];
            if (v62 > 0x2AAAAAAAAAAAAAALL)
              sub_20E877A38();
            v63 = (char *)operator new(96 * v62);
            v48.i64[0] = v100;
            v52.i64[0] = v101;
            v54.i64[0] = v98;
            v56.i64[0] = v99;
            v4.i64[0] = v96;
            v50.i64[0] = v97;
            v55 = v94;
            v57 = v95;
            v5 = v92;
            v53 = v93;
            v51 = v90;
            v49 = v91;
          }
          else
          {
            v63 = 0;
          }
          v48.i64[1] = v49;
          v64 = (int8x16_t *)&v63[96 * v60];
          v50.i64[1] = v51;
          v52.i64[1] = v53;
          *v64 = v48;
          v64[1] = v50;
          v54.i64[1] = v55;
          v56.i64[1] = *(_QWORD *)&v5.f64[0];
          v64[2] = v52;
          v64[3] = v54;
          v4.i64[1] = v57;
          v64[4] = v56;
          v64[5] = v4;
          v65 = v64;
          if (v58 != v59)
          {
            do
            {
              v66 = v58[-5];
              v65[-6] = v58[-6];
              v65[-5] = v66;
              v4 = v58[-4];
              v67 = v58[-3];
              v68 = v58[-1];
              v65[-2] = v58[-2];
              v65[-1] = v68;
              v65[-4] = v4;
              v65[-3] = v67;
              v65 -= 6;
              v58 -= 6;
            }
            while (v58 != v59);
            v58 = v59;
          }
          v26 = v64 + 6;
          v112 = v65;
          v113 = v64 + 6;
          v114 = (int8x16_t *)&v63[96 * v62];
          if (v58)
            operator delete(v58);
          v113 = v26;
          v22 += 80;
        }
        while (v22 != v25);
LABEL_74:
        v70 = v112;
        v69 = v114;
        v2 = v87;
        v21 = v86;
      }
      else
      {
        v69 = 0;
        v26 = 0;
        v70 = 0;
        v2 = v87;
      }
LABEL_75:
      v71 = v21;
      sub_20EF334C0(v89, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v21) >> 3), v21, *v2, 0x8E38E38E38E38E39 * ((v2[4] - v2[3]) >> 2), v2[3], (uint64_t)v104, (float32x4_t)v4, v5);
      if (v70 != v26)
      {
        if (v110)
        {
          if (v108.i64[0])
          {
            v108.i64[1] = v108.i64[0];
            operator delete((void *)v108.i64[0]);
          }
          v108.i64[0] = (uint64_t)v70;
          v108.i64[1] = (uint64_t)v26;
          v109 = v69;
          if (!v71)
            goto LABEL_85;
        }
        else
        {
          v108.i64[0] = (uint64_t)v70;
          v108.i64[1] = (uint64_t)v26;
          v109 = v69;
          v110 = 1;
          if (!v71)
            goto LABEL_85;
        }
LABEL_84:
        operator delete(v71);
        goto LABEL_85;
      }
      if (v26)
        operator delete(v26);
      if (v71)
        goto LABEL_84;
LABEL_85:
      v72 = *((_QWORD *)&v102 + 1);
      if (*((_QWORD *)&v102 + 1) >= v103)
      {
        v79 = sub_20EF154C0((void **)&v102, (uint64_t)v104);
      }
      else
      {
        v73 = v104[0];
        v74 = v104[1];
        v75 = v104[3];
        *(_OWORD *)(*((_QWORD *)&v102 + 1) + 32) = v104[2];
        *(_OWORD *)(v72 + 48) = v75;
        *(_OWORD *)v72 = v73;
        *(_OWORD *)(v72 + 16) = v74;
        v76 = v104[4];
        v77 = v104[5];
        v78 = v104[7];
        *(_OWORD *)(v72 + 96) = v104[6];
        *(_OWORD *)(v72 + 112) = v78;
        *(_OWORD *)(v72 + 64) = v76;
        *(_OWORD *)(v72 + 80) = v77;
        *(_DWORD *)(v72 + 128) = v105;
        *(_QWORD *)(v72 + 136) = 0;
        *(_QWORD *)(v72 + 144) = 0;
        *(_QWORD *)(v72 + 152) = 0;
        v4 = __p;
        *(int8x16_t *)(v72 + 136) = __p;
        *(_QWORD *)(v72 + 152) = v107;
        __p = 0uLL;
        v107 = 0;
        *(_BYTE *)(v72 + 160) = 0;
        *(_BYTE *)(v72 + 184) = 0;
        if (v110)
        {
          *(_QWORD *)(v72 + 160) = 0;
          *(_QWORD *)(v72 + 168) = 0;
          *(_QWORD *)(v72 + 176) = 0;
          v4 = v108;
          *(int8x16_t *)(v72 + 160) = v108;
          *(_QWORD *)(v72 + 176) = v109;
          v108 = 0uLL;
          v109 = 0;
          *(_BYTE *)(v72 + 184) = 1;
        }
        *(_BYTE *)(v72 + 192) = v111;
        v79 = (char *)(v72 + 200);
      }
      *((_QWORD *)&v102 + 1) = v79;
      if (v110 && v108.i64[0])
      {
        v108.i64[1] = v108.i64[0];
        operator delete((void *)v108.i64[0]);
      }
      v80 = __p.i64[0];
      if (__p.i64[0])
      {
        v81 = __p.i64[1];
        v7 = (void *)__p.i64[0];
        if (__p.i64[1] != __p.i64[0])
        {
          v82 = __p.i64[1];
          do
          {
            v84 = *(void **)(v82 - 24);
            v82 -= 24;
            v83 = v84;
            if (v84)
            {
              *(_QWORD *)(v81 - 16) = v83;
              operator delete(v83);
            }
            v81 = v82;
          }
          while (v82 != v80);
          v7 = (void *)__p.i64[0];
        }
        __p.i64[1] = v80;
        operator delete(v7);
      }
      v6 = v89 + 56;
    }
    while (v89 + 56 != v88);
  }
  *(_OWORD *)a2 = v102;
  *(_QWORD *)(a2 + 16) = v103;
  v103 = 0;
  v102 = 0uLL;
  *(_QWORD *)&v104[0] = &v102;
  sub_20EF0A1D0((void ***)v104);
}

void sub_20EF28368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44)
{
  sub_20EF0A1D0(&a44);
  _Unwind_Resume(a1);
}

void sub_20EF28380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  uint64_t v42;
  void *v44;

  v44 = *(void **)(v42 - 240);
  if (v44)
  {
    *(_QWORD *)(v42 - 232) = v44;
    operator delete(v44);
  }
  if (v41)
    operator delete(v41);
  *(_QWORD *)(v42 - 216) = &a41;
  sub_20EF0A1D0((void ***)(v42 - 216));
  _Unwind_Resume(a1);
}

void sub_20EF284C4(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;

  v2 = *(char **)a1;
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x147AE147AE147AFLL)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 200 * a2;
    v6 = (char *)operator new(200 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        v12 = *(_OWORD *)&v4[v9 - 200];
        v13 = *(_OWORD *)&v4[v9 - 184];
        v14 = *(_OWORD *)&v4[v9 - 168];
        *(_OWORD *)(v10 - 152) = *(_OWORD *)&v4[v9 - 152];
        *(_OWORD *)(v10 - 168) = v14;
        *(_OWORD *)(v10 - 184) = v13;
        *(_OWORD *)(v10 - 200) = v12;
        v15 = *(_OWORD *)&v4[v9 - 136];
        v16 = *(_OWORD *)&v4[v9 - 120];
        v17 = *(_OWORD *)&v4[v9 - 104];
        *(_OWORD *)(v10 - 88) = *(_OWORD *)&v4[v9 - 88];
        *(_OWORD *)(v10 - 104) = v17;
        *(_OWORD *)(v10 - 120) = v16;
        *(_OWORD *)(v10 - 136) = v15;
        *((_DWORD *)v10 - 18) = *(_DWORD *)&v4[v9 - 72];
        *((_OWORD *)v10 - 4) = *(_OWORD *)&v4[v9 - 64];
        *((_QWORD *)v10 - 6) = *(_QWORD *)&v4[v9 - 48];
        *((_QWORD *)v11 - 8) = 0;
        *((_QWORD *)v11 - 7) = 0;
        *((_QWORD *)v11 - 6) = 0;
        *(v10 - 40) = 0;
        *(v10 - 16) = 0;
        if (v4[v9 - 16])
        {
          *(_OWORD *)(v10 - 40) = *(_OWORD *)(v11 - 40);
          *((_QWORD *)v10 - 3) = *((_QWORD *)v11 - 3);
          *((_QWORD *)v11 - 5) = 0;
          *((_QWORD *)v11 - 4) = 0;
          *((_QWORD *)v11 - 3) = 0;
          *(v10 - 16) = 1;
        }
        *(v10 - 8) = *(v11 - 8);
        v9 -= 200;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v18 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v18 != v2)
      {
        if (*(v18 - 16))
        {
          v20 = (void *)*((_QWORD *)v18 - 5);
          if (v20)
          {
            *((_QWORD *)v18 - 4) = v20;
            operator delete(v20);
          }
        }
        v21 = *((_QWORD *)v18 - 8);
        if (v21)
        {
          v22 = *((_QWORD *)v18 - 7);
          v19 = (void *)*((_QWORD *)v18 - 8);
          if (v22 != v21)
          {
            v23 = *((_QWORD *)v18 - 7);
            do
            {
              v25 = *(void **)(v23 - 24);
              v23 -= 24;
              v24 = v25;
              if (v25)
              {
                *(_QWORD *)(v22 - 16) = v24;
                operator delete(v24);
              }
              v22 = v23;
            }
            while (v23 != v21);
            v19 = (void *)*((_QWORD *)v18 - 8);
          }
          *((_QWORD *)v18 - 7) = v21;
          operator delete(v19);
        }
        v18 -= 200;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

