void sub_20F3A7AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3A7ADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F3A7B00(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A688D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A688D8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A688D0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A688D8);
  }
  *a1 = qword_254A688D0;
}

void sub_20F3A7B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A688D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A688D8);
  _Unwind_Resume(a1);
}

void sub_20F3A7BF4(const char ***a1, int *a2)
{
  int v4;
  unint64_t v5;
  unint64_t v7;
  const char **v8;
  size_t v9;
  const char *v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  const char *v14;
  _BYTE *v15;
  const char ***v16;
  unint64_t v17;
  int v18;
  const char ***v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  size_t v29;
  size_t v30;
  _QWORD *p_dst;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  char *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  char *__s;
  _QWORD v111[3];
  int v112;
  const char *v113;
  int v114;
  const char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  char *v121;
  std::__shared_weak_count *v122;
  _QWORD *__dst;
  __int128 v124;
  _BYTE object[24];
  _BYTE v126[32];
  unint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  _QWORD v144[5];

  v144[2] = *MEMORY[0x24BDAC8D0];
  sub_20F3A7B00(&v118);
  if (**(int **)(v118 + 56) > 3)
    return;
  v4 = *(unsigned __int8 *)(v118 + 72);
  v5 = sub_20E8C31DC(v118, "OSLogSurrogateAppender", 1, 0);
  if (!v4 && v5 == 0)
    return;
  v7 = v5;
  v111[0] = &v118;
  v111[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v111[2] = std::chrono::system_clock::now().__d_.__rep_;
  v112 = 3;
  v113 = "unknown file";
  v114 = 633;
  v116 = 0;
  v117 = 0;
  v115 = "unknown function";
  v8 = *a1;
  v107 = v118;
  if (*(char *)(v118 + 39) < 0)
  {
    v10 = *(const char **)(v118 + 16);
    v9 = *(_QWORD *)(v118 + 24);
  }
  else
  {
    v9 = *(unsigned __int8 *)(v118 + 39);
    v10 = (const char *)(v118 + 16);
  }
  v108 = v118 + 16;
  v109 = *((_DWORD *)v8 + 2);
  __s = (char *)*v8;
  v11 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (v126[0] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v12 = byte_254A4A4F8;
  else
    v12 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v13 = byte_254A4A4F8[23];
  else
    v13 = *(_QWORD *)&byte_254A4A4F8[8];
  v14 = v10;
  *(_QWORD *)object = os_log_create(v12, v10);
  v15 = &object[8];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v16 = a1;
  if (v13 >= 0x17)
  {
    v17 = v7;
    v18 = v4;
    v19 = v16;
    v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v20 = v13 | 7;
    v21 = v20 + 1;
    v15 = operator new(v20 + 1);
    *(_QWORD *)&object[16] = v13;
    *(_QWORD *)v126 = v21 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v15;
    v16 = v19;
    v4 = v18;
    v7 = v17;
    goto LABEL_23;
  }
  v126[7] = v13;
  if (v13)
LABEL_23:
    memmove(v15, v12, v13);
  v15[v13] = 0;
  v126[8] = 1;
  v22 = &v126[16];
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v9 >= 0x17)
  {
    v24 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v24 = v9 | 7;
    v25 = v24 + 1;
    v22 = operator new(v24 + 1);
    *(_QWORD *)&v126[24] = v9;
    v127 = v25 | 0x8000000000000000;
    *(_QWORD *)&v126[16] = v22;
  }
  else
  {
    HIBYTE(v127) = v9;
    if (!v9)
    {
      v126[16] = 0;
      LOBYTE(v128) = 1;
      v23 = *(NSObject **)object;
      if ((SHIBYTE(v127) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v22, v14, v9);
  v22[v9] = 0;
  LOBYTE(v128) = 1;
  v23 = *(NSObject **)object;
  if ((SHIBYTE(v127) & 0x80000000) == 0)
  {
LABEL_28:
    if (!v126[8])
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)&v126[16]);
  if (!v126[8])
    goto LABEL_37;
LABEL_35:
  if ((v126[7] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (!v7 || !*(_QWORD *)(v7 + 24))
  {
    os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
    v33 = *a2;
    v34 = *((_QWORD *)a2 + 11);
    v35 = *((_QWORD *)a2 + 12);
    v36 = *((_QWORD *)a2 + 1);
    v37 = *((_QWORD *)a2 + 2);
    v38 = *((_QWORD *)a2 + 3);
    v39 = *((_QWORD *)a2 + 4);
    v40 = *((_QWORD *)a2 + 5);
    v41 = *((_QWORD *)a2 + 6);
    v43 = *((_QWORD *)a2 + 7);
    v42 = *((_QWORD *)a2 + 8);
    v45 = *((_QWORD *)a2 + 9);
    v44 = *((_QWORD *)a2 + 10);
    *(_DWORD *)object = 68161282;
    *(_DWORD *)&object[4] = v109;
    *(_WORD *)&object[8] = 2080;
    *(_QWORD *)&object[10] = __s;
    *(_WORD *)&object[18] = 1024;
    *(_DWORD *)&object[20] = v33;
    *(_WORD *)v126 = 2048;
    *(_QWORD *)&v126[2] = v44;
    *(_WORD *)&v126[10] = 2048;
    *(_QWORD *)&v126[12] = v34;
    *(_WORD *)&v126[20] = 2048;
    *(_QWORD *)&v126[22] = v35;
    *(_WORD *)&v126[30] = 2048;
    v127 = v36;
    v128 = 2048;
    v129 = v37;
    v130 = 2048;
    v131 = v38;
    v132 = 2048;
    v133 = v39;
    v134 = 2048;
    v135 = v40;
    v136 = 2048;
    v137 = v41;
    v138 = 2048;
    v139 = v43;
    v140 = 2048;
    v141 = v42;
    v142 = 2048;
    v143 = v45;
    v46 = (void *)_os_log_send_and_compose_impl();
    if (v46)
      free(v46);
    goto LABEL_110;
  }
  v26 = _os_log_pack_size();
  v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
  v28 = (std::__shared_weak_count *)operator new();
  v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v28->__shared_owners_ = 0;
  v28->__shared_weak_owners_ = 0;
  v28[1].__vftable = v27;
  *(_QWORD *)&v119 = v27;
  *((_QWORD *)&v119 + 1) = v27;
  v121 = 0;
  v122 = 0;
  v120 = v28;
  v29 = strlen(__s);
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v30 = v29;
  if (v29 >= 0x17)
  {
    v47 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v47 = v29 | 7;
    v48 = v47 + 1;
    p_dst = operator new(v47 + 1);
    *(_QWORD *)&v124 = v30;
    *((_QWORD *)&v124 + 1) = v48 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v124) = v29;
    p_dst = &__dst;
    if (!v29)
    {
      v32 = v4;
      goto LABEL_51;
    }
  }
  v32 = v4;
  memcpy(p_dst, __s, v30);
LABEL_51:
  *((_BYTE *)p_dst + v30) = 0;
  v49 = __dst;
  v144[0] = v124;
  *(_QWORD *)((char *)v144 + 7) = *(_QWORD *)((char *)&v124 + 7);
  v50 = HIBYTE(v124);
  v51 = operator new(0x48uLL);
  v51[1] = 0;
  v51[2] = 0;
  v51[3] = off_24C9FEF80;
  *v51 = &off_24C9FEF30;
  v52 = v144[0];
  v51[4] = v49;
  v51[5] = v52;
  *(_QWORD *)((char *)v51 + 47) = *(_QWORD *)((char *)v144 + 7);
  *((_BYTE *)v51 + 55) = v50;
  v144[0] = 0;
  *(_QWORD *)((char *)v144 + 7) = 0;
  v53 = v122;
  v121 = (char *)(v51 + 3);
  v122 = (std::__shared_weak_count *)v51;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  *(_OWORD *)object = v119;
  v56 = v121;
  *(_QWORD *)&object[16] = v120;
  if (v120)
  {
    v57 = (unint64_t *)&v120->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = v122;
  *(_QWORD *)v126 = v56;
  *(_QWORD *)&v126[8] = v122;
  if (v122)
  {
    v60 = (unint64_t *)&v122->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    *(_QWORD *)&v126[16] = v56;
    do
      v62 = __ldaxr(v60);
    while (__stlxr(v62 - 1, v60));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  else
  {
    *(_QWORD *)&v126[16] = v56;
  }
  v63 = v120;
  if (v120)
  {
    v64 = (unint64_t *)&v120->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (*(char *)(*(_QWORD *)&v126[16] + 31) >= 0)
    v66 = *(_QWORD *)&v126[16] + 8;
  else
    v66 = *(_QWORD *)(*(_QWORD *)&v126[16] + 8);
  v67 = _os_log_pack_fill();
  v68 = *a2;
  v69 = *((_QWORD *)a2 + 11);
  v70 = *((_QWORD *)a2 + 12);
  v71 = *((_QWORD *)a2 + 1);
  v72 = *((_QWORD *)a2 + 2);
  v73 = *((_QWORD *)a2 + 3);
  v74 = *((_QWORD *)a2 + 4);
  v75 = *((_QWORD *)a2 + 5);
  v76 = *((_QWORD *)a2 + 6);
  v78 = *((_QWORD *)a2 + 7);
  v77 = *((_QWORD *)a2 + 8);
  v80 = *((_QWORD *)a2 + 9);
  v79 = *((_QWORD *)a2 + 10);
  *(_DWORD *)v67 = 68161282;
  *(_DWORD *)(v67 + 4) = v109;
  *(_WORD *)(v67 + 8) = 2080;
  *(_QWORD *)(v67 + 10) = v66;
  *(_WORD *)(v67 + 18) = 1024;
  *(_DWORD *)(v67 + 20) = v68;
  *(_WORD *)(v67 + 24) = 2048;
  *(_QWORD *)(v67 + 26) = v79;
  *(_WORD *)(v67 + 34) = 2048;
  *(_QWORD *)(v67 + 36) = v69;
  *(_WORD *)(v67 + 44) = 2048;
  *(_QWORD *)(v67 + 46) = v70;
  *(_WORD *)(v67 + 54) = 2048;
  *(_QWORD *)(v67 + 56) = v71;
  *(_WORD *)(v67 + 64) = 2048;
  *(_QWORD *)(v67 + 66) = v72;
  *(_WORD *)(v67 + 74) = 2048;
  *(_QWORD *)(v67 + 76) = v73;
  *(_WORD *)(v67 + 84) = 2048;
  *(_QWORD *)(v67 + 86) = v74;
  *(_WORD *)(v67 + 94) = 2048;
  *(_QWORD *)(v67 + 96) = v75;
  *(_WORD *)(v67 + 104) = 2048;
  *(_QWORD *)(v67 + 106) = v76;
  *(_WORD *)(v67 + 114) = 2048;
  *(_QWORD *)(v67 + 116) = v78;
  *(_WORD *)(v67 + 124) = 2048;
  *(_QWORD *)(v67 + 126) = v77;
  *(_WORD *)(v67 + 134) = 2048;
  *(_QWORD *)(v67 + 136) = v80;
  v81 = operator new();
  v82 = *(unsigned __int8 *)(v107 + 39);
  v83 = v108;
  if ((v82 & 0x80u) != 0)
  {
    v83 = *(_QWORD *)(v107 + 16);
    v82 = *(_QWORD *)(v107 + 24);
  }
  *(_OWORD *)v81 = *(_OWORD *)object;
  *(_QWORD *)(v81 + 16) = *(_QWORD *)&object[16];
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)&object[16] = 0;
  *(_OWORD *)(v81 + 24) = *(_OWORD *)v126;
  *(_QWORD *)v126 = 0;
  *(_QWORD *)&v126[8] = 0;
  *(_QWORD *)(v81 + 40) = v83;
  *(_QWORD *)(v81 + 48) = v82;
  *(_BYTE *)(v81 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v119 = v81;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v119);
  v84 = v119;
  *(_QWORD *)&v119 = 0;
  if (v84)
  {
    v85 = *(std::__shared_weak_count **)(v84 + 32);
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = *(std::__shared_weak_count **)(v84 + 16);
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    MEMORY[0x212BC6398](v84, 0x10F0C40B62ED6C6);
    v91 = __dst;
    __dst = 0;
    if (v91)
    {
      v92 = (std::__shared_weak_count *)v91[4];
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v95 = (std::__shared_weak_count *)v91[2];
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
    }
  }
  v98 = *(std::__shared_weak_count **)&v126[8];
  v4 = v32;
  if (*(_QWORD *)&v126[8])
  {
    v99 = (unint64_t *)(*(_QWORD *)&v126[8] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = *(std::__shared_weak_count **)&object[16];
  if (*(_QWORD *)&object[16])
  {
    v102 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
LABEL_110:
  if (v4)
  {
    sub_20E8C003C((uint64_t)v111, "[%.*s] extrinsic fg-p id[%d]: t_C_to_I %.8f, %.8f, %.8f, R_C_to_I in column-major: %.9f, %.9f, %.9f, %.9f, %.9f, %.9f, %.9f, %.9f, %.9f", (int)(*v16)[1], **v16, *a2, *((double *)a2 + 10), *((double *)a2 + 11), *((double *)a2 + 12), *((double *)a2 + 1), *((double *)a2 + 2), *((double *)a2 + 3), *((double *)a2 + 4), *((double *)a2 + 5), *((double *)a2 + 6), *((double *)a2 + 7), *((double *)a2 + 8), *((double *)a2 + 9));
    sub_20E863570((uint64_t)v111);
  }
  sub_20E863570((uint64_t)v111);
  v104 = v117;
  if (v117)
  {
    v105 = (unint64_t *)&v117->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
}

void sub_20F3A8658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53)
  {
    if (a52 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3A8698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_20E86E8C4(&a39);
  sub_20E86E8C4(&a44);
  sub_20E86E658((uint64_t)&a47);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3A86CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  int v40;

  if (v40 < 0)
    operator delete(v39);
  sub_20E86E658((uint64_t)&a39);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3A873C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *object,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F3A87B4(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20F3A87F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FEF30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F3A8804(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FEF30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F3A8834(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_20F3A884C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F3A888C(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20F3A88CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FEFB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F3A88DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FEFB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F3A890C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_20F3A8924(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20F3A8964(uint64_t *a1, _OWORD **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  int v17;
  int64_t v18;
  size_t v19;
  size_t v20;
  double v21;
  size_t v22;
  double v23;
  std::string *p_b;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  char *v42;
  void **v43;
  uint64_t v44;
  void *v46;
  size_t v47;
  int64_t v48;
  std::string __b;
  std::string v50;
  void *__p[2];
  int64_t v52;
  _OWORD v53[14];

  v4 = (*a2)[12];
  v3 = (*a2)[13];
  v6 = (*a2)[10];
  v5 = (*a2)[11];
  v8 = (*a2)[8];
  v7 = (*a2)[9];
  v10 = (*a2)[6];
  v9 = (*a2)[7];
  v12 = (*a2)[4];
  v11 = (*a2)[5];
  v14 = (*a2)[2];
  v13 = (*a2)[3];
  v15 = (*a2)[1];
  v53[0] = **a2;
  v53[1] = v15;
  v53[2] = v14;
  v53[3] = v13;
  v53[4] = v12;
  v53[5] = v11;
  v53[6] = v10;
  v53[7] = v9;
  v53[8] = v8;
  v53[9] = v7;
  v53[10] = v6;
  v53[11] = v5;
  v53[12] = v4;
  v53[13] = v3;
  v16 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v17 = *((_DWORD *)v16 + 2);
  v19 = *((_QWORD *)v16 + 2);
  v18 = *((_QWORD *)v16 + 3);
  if (v18)
  {
    if (v18 <= (uint64_t)(v19 + 2))
      v18 = v19 + 2;
    v20 = v18 + ~v19;
    v21 = __exp10((double)-(uint64_t)v19);
    v22 = v20 - 1;
    if (v20 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v23 = v21;
    if (v22 >= 0x17)
    {
      v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v25 = v22 | 7;
      v26 = v25 + 1;
      p_b = (std::string *)operator new(v25 + 1);
      __b.__r_.__value_.__l.__size_ = v20 - 1;
      __b.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v20 - 1;
      p_b = &__b;
      if (v20 == 1)
      {
        LODWORD(v20) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v23 = __exp10((double)-(uint64_t)v19);
    v22 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v20) = 4;
  }
  memset(p_b, 32, v22);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v22] = 0;
  v27 = std::string::append(&__b, "0 ", 2uLL);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v19 >= 0x17)
  {
    v30 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v30 = v19 | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    v47 = v19;
    v48 = v31 | 0x8000000000000000;
    v46 = v29;
    goto LABEL_20;
  }
  HIBYTE(v48) = v19;
  v29 = &v46;
  if (v19)
LABEL_20:
    memset(v29, 32, v19);
  *((_BYTE *)v29 + v19) = 0;
  if (v48 >= 0)
    v32 = (const std::string::value_type *)&v46;
  else
    v32 = (const std::string::value_type *)v46;
  if (v48 >= 0)
    v33 = HIBYTE(v48);
  else
    v33 = v47;
  v34 = std::string::append(&v50, v32, v33);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v52 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_49:
    operator delete(v50.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_50;
  }
  operator delete(v46);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_49;
LABEL_29:
  if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_30;
LABEL_50:
  operator delete(__b.__r_.__value_.__l.__data_);
LABEL_30:
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v50.__r_.__value_.__s.__data_[0] = 91;
  sub_20E86A980(a1, (uint64_t)&v50, 1);
  v36 = 0;
  v37 = a1 + 1;
  v38 = a1 + 2;
  v39 = (int)v20 + (int)v19 + 1;
  v40 = *(double *)v53;
  v41 = *a1;
  v42 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v42[9] & 1) != 0)
    goto LABEL_33;
LABEL_31:
  if (fabs(v40) >= v23)
  {
    *((_QWORD *)v42 + 3) = v39;
    *(_DWORD *)((char *)v37 + *(_QWORD *)(v41 - 24)) = *(_DWORD *)((_BYTE *)v37 + *(_QWORD *)(v41 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v37 + *(_QWORD *)(v41 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v38 + *(_QWORD *)(v41 - 24)) = (int)v19;
    std::ostream::operator<<();
    goto LABEL_42;
  }
LABEL_34:
  if (v52 >= 0)
    v43 = __p;
  else
    v43 = (void **)__p[0];
  if (v52 >= 0)
    v44 = HIBYTE(v52);
  else
    v44 = (uint64_t)__p[1];
  sub_20E86A980(a1, (uint64_t)v43, v44);
LABEL_42:
  while (v36 != 216)
  {
    v50.__r_.__value_.__s.__data_[0] = 44;
    sub_20E86A980(a1, (uint64_t)&v50, 1);
    v36 += 8;
    v40 = *(double *)((char *)v53 + v36);
    v41 = *a1;
    v42 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v42[9] & 1) == 0)
      goto LABEL_31;
LABEL_33:
    if (v40 == 0.0)
      goto LABEL_34;
    *((_QWORD *)v42 + 3) = v39;
    *(_DWORD *)((char *)v37 + *(_QWORD *)(v41 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v38 + *(_QWORD *)(v41 - 24)) = (int)v19 - 3;
    std::ostream::operator<<();
  }
  sub_20E86A980(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v17;
  if (SHIBYTE(v52) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20F3A8D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F3A8E2C(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;

  v6 = (uint64_t **)(a2 + 8);
  sub_20E86872C(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = 0;
  *v6 = 0;
  v9 = (_QWORD *)*a1;
  v7 = a1 + 1;
  v8 = v9;
  if (v9 != v7)
  {
    do
    {
      v10 = v8[6];
      if (!a3 || *(_BYTE *)(v10 + 192))
      {
        v11 = (uint64_t)(*(_QWORD *)(v10 + 208) - *(_QWORD *)(v10 + 200)) >> 5;
        v12 = *v6;
        v13 = v6;
        v14 = v6;
        if (*v6)
        {
          while (1)
          {
            while (1)
            {
              v14 = (uint64_t **)v12;
              v15 = v12[4];
              if (v11 >= v15)
                break;
              v12 = *v14;
              v13 = v14;
              if (!*v14)
                goto LABEL_13;
            }
            if (v15 >= v11)
              break;
            v12 = v14[1];
            if (!v12)
            {
              v13 = v14 + 1;
              goto LABEL_13;
            }
          }
        }
        else
        {
LABEL_13:
          v16 = (uint64_t *)v14;
          v14 = (uint64_t **)operator new(0x30uLL);
          v14[4] = (uint64_t *)v11;
          v14[5] = 0;
          *v14 = 0;
          v14[1] = 0;
          v14[2] = v16;
          *v13 = (uint64_t *)v14;
          v17 = **(_QWORD **)a2;
          v18 = (uint64_t *)v14;
          if (v17)
          {
            *(_QWORD *)a2 = v17;
            v18 = *v13;
          }
          sub_20E868578(*(uint64_t **)(a2 + 8), v18);
          ++*(_QWORD *)(a2 + 16);
        }
        v14[5] = (uint64_t *)((char *)v14[5] + 1);
      }
      v19 = (_QWORD *)v8[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v8[2];
          v21 = *v20 == (_QWORD)v8;
          v8 = v20;
        }
        while (!v21);
      }
      v8 = v20;
    }
    while (v20 != v7);
  }
}

void sub_20F3A8F8C(const char ***a1, int *a2)
{
  int v4;
  unint64_t v5;
  unint64_t v7;
  const char **v8;
  size_t v9;
  const char *v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  const char *v14;
  _BYTE *v15;
  const char ***v16;
  unint64_t v17;
  int v18;
  const char ***v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  size_t v29;
  size_t v30;
  _QWORD *p_dst;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  char *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  char *__s;
  _QWORD v111[3];
  int v112;
  const char *v113;
  int v114;
  const char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  char *v121;
  std::__shared_weak_count *v122;
  _QWORD *__dst;
  __int128 v124;
  _BYTE object[24];
  _BYTE v126[32];
  unint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  _QWORD v144[5];

  v144[2] = *MEMORY[0x24BDAC8D0];
  sub_20F3A7B00(&v118);
  if (**(int **)(v118 + 56) > 3)
    return;
  v4 = *(unsigned __int8 *)(v118 + 72);
  v5 = sub_20E8C31DC(v118, "OSLogSurrogateAppender", 1, 0);
  if (!v4 && v5 == 0)
    return;
  v7 = v5;
  v111[0] = &v118;
  v111[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v111[2] = std::chrono::system_clock::now().__d_.__rep_;
  v112 = 3;
  v113 = "unknown file";
  v114 = 633;
  v116 = 0;
  v117 = 0;
  v115 = "unknown function";
  v8 = *a1;
  v107 = v118;
  if (*(char *)(v118 + 39) < 0)
  {
    v10 = *(const char **)(v118 + 16);
    v9 = *(_QWORD *)(v118 + 24);
  }
  else
  {
    v9 = *(unsigned __int8 *)(v118 + 39);
    v10 = (const char *)(v118 + 16);
  }
  v108 = v118 + 16;
  v109 = *((_DWORD *)v8 + 2);
  __s = (char *)*v8;
  v11 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (v126[0] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v12 = byte_254A4A4F8;
  else
    v12 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v13 = byte_254A4A4F8[23];
  else
    v13 = *(_QWORD *)&byte_254A4A4F8[8];
  v14 = v10;
  *(_QWORD *)object = os_log_create(v12, v10);
  v15 = &object[8];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v16 = a1;
  if (v13 >= 0x17)
  {
    v17 = v7;
    v18 = v4;
    v19 = v16;
    v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v20 = v13 | 7;
    v21 = v20 + 1;
    v15 = operator new(v20 + 1);
    *(_QWORD *)&object[16] = v13;
    *(_QWORD *)v126 = v21 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v15;
    v16 = v19;
    v4 = v18;
    v7 = v17;
    goto LABEL_23;
  }
  v126[7] = v13;
  if (v13)
LABEL_23:
    memmove(v15, v12, v13);
  v15[v13] = 0;
  v126[8] = 1;
  v22 = &v126[16];
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v9 >= 0x17)
  {
    v24 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v24 = v9 | 7;
    v25 = v24 + 1;
    v22 = operator new(v24 + 1);
    *(_QWORD *)&v126[24] = v9;
    v127 = v25 | 0x8000000000000000;
    *(_QWORD *)&v126[16] = v22;
  }
  else
  {
    HIBYTE(v127) = v9;
    if (!v9)
    {
      v126[16] = 0;
      LOBYTE(v128) = 1;
      v23 = *(NSObject **)object;
      if ((SHIBYTE(v127) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v22, v14, v9);
  v22[v9] = 0;
  LOBYTE(v128) = 1;
  v23 = *(NSObject **)object;
  if ((SHIBYTE(v127) & 0x80000000) == 0)
  {
LABEL_28:
    if (!v126[8])
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)&v126[16]);
  if (!v126[8])
    goto LABEL_37;
LABEL_35:
  if ((v126[7] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (!v7 || !*(_QWORD *)(v7 + 24))
  {
    os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
    v33 = *a2;
    v34 = *((_QWORD *)a2 + 11);
    v35 = *((_QWORD *)a2 + 12);
    v36 = *((_QWORD *)a2 + 1);
    v37 = *((_QWORD *)a2 + 2);
    v38 = *((_QWORD *)a2 + 3);
    v39 = *((_QWORD *)a2 + 4);
    v40 = *((_QWORD *)a2 + 5);
    v41 = *((_QWORD *)a2 + 6);
    v43 = *((_QWORD *)a2 + 7);
    v42 = *((_QWORD *)a2 + 8);
    v45 = *((_QWORD *)a2 + 9);
    v44 = *((_QWORD *)a2 + 10);
    *(_DWORD *)object = 68161282;
    *(_DWORD *)&object[4] = v109;
    *(_WORD *)&object[8] = 2080;
    *(_QWORD *)&object[10] = __s;
    *(_WORD *)&object[18] = 1024;
    *(_DWORD *)&object[20] = v33;
    *(_WORD *)v126 = 2048;
    *(_QWORD *)&v126[2] = v44;
    *(_WORD *)&v126[10] = 2048;
    *(_QWORD *)&v126[12] = v34;
    *(_WORD *)&v126[20] = 2048;
    *(_QWORD *)&v126[22] = v35;
    *(_WORD *)&v126[30] = 2048;
    v127 = v36;
    v128 = 2048;
    v129 = v37;
    v130 = 2048;
    v131 = v38;
    v132 = 2048;
    v133 = v39;
    v134 = 2048;
    v135 = v40;
    v136 = 2048;
    v137 = v41;
    v138 = 2048;
    v139 = v43;
    v140 = 2048;
    v141 = v42;
    v142 = 2048;
    v143 = v45;
    v46 = (void *)_os_log_send_and_compose_impl();
    if (v46)
      free(v46);
    goto LABEL_110;
  }
  v26 = _os_log_pack_size();
  v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
  v28 = (std::__shared_weak_count *)operator new();
  v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v28->__shared_owners_ = 0;
  v28->__shared_weak_owners_ = 0;
  v28[1].__vftable = v27;
  *(_QWORD *)&v119 = v27;
  *((_QWORD *)&v119 + 1) = v27;
  v121 = 0;
  v122 = 0;
  v120 = v28;
  v29 = strlen(__s);
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v30 = v29;
  if (v29 >= 0x17)
  {
    v47 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v47 = v29 | 7;
    v48 = v47 + 1;
    p_dst = operator new(v47 + 1);
    *(_QWORD *)&v124 = v30;
    *((_QWORD *)&v124 + 1) = v48 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v124) = v29;
    p_dst = &__dst;
    if (!v29)
    {
      v32 = v4;
      goto LABEL_51;
    }
  }
  v32 = v4;
  memcpy(p_dst, __s, v30);
LABEL_51:
  *((_BYTE *)p_dst + v30) = 0;
  v49 = __dst;
  v144[0] = v124;
  *(_QWORD *)((char *)v144 + 7) = *(_QWORD *)((char *)&v124 + 7);
  v50 = HIBYTE(v124);
  v51 = operator new(0x48uLL);
  v51[1] = 0;
  v51[2] = 0;
  v51[3] = off_24C9FEF80;
  *v51 = &off_24C9FEF30;
  v52 = v144[0];
  v51[4] = v49;
  v51[5] = v52;
  *(_QWORD *)((char *)v51 + 47) = *(_QWORD *)((char *)v144 + 7);
  *((_BYTE *)v51 + 55) = v50;
  v144[0] = 0;
  *(_QWORD *)((char *)v144 + 7) = 0;
  v53 = v122;
  v121 = (char *)(v51 + 3);
  v122 = (std::__shared_weak_count *)v51;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  *(_OWORD *)object = v119;
  v56 = v121;
  *(_QWORD *)&object[16] = v120;
  if (v120)
  {
    v57 = (unint64_t *)&v120->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = v122;
  *(_QWORD *)v126 = v56;
  *(_QWORD *)&v126[8] = v122;
  if (v122)
  {
    v60 = (unint64_t *)&v122->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    *(_QWORD *)&v126[16] = v56;
    do
      v62 = __ldaxr(v60);
    while (__stlxr(v62 - 1, v60));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  else
  {
    *(_QWORD *)&v126[16] = v56;
  }
  v63 = v120;
  if (v120)
  {
    v64 = (unint64_t *)&v120->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (*(char *)(*(_QWORD *)&v126[16] + 31) >= 0)
    v66 = *(_QWORD *)&v126[16] + 8;
  else
    v66 = *(_QWORD *)(*(_QWORD *)&v126[16] + 8);
  v67 = _os_log_pack_fill();
  v68 = *a2;
  v69 = *((_QWORD *)a2 + 11);
  v70 = *((_QWORD *)a2 + 12);
  v71 = *((_QWORD *)a2 + 1);
  v72 = *((_QWORD *)a2 + 2);
  v73 = *((_QWORD *)a2 + 3);
  v74 = *((_QWORD *)a2 + 4);
  v75 = *((_QWORD *)a2 + 5);
  v76 = *((_QWORD *)a2 + 6);
  v78 = *((_QWORD *)a2 + 7);
  v77 = *((_QWORD *)a2 + 8);
  v80 = *((_QWORD *)a2 + 9);
  v79 = *((_QWORD *)a2 + 10);
  *(_DWORD *)v67 = 68161282;
  *(_DWORD *)(v67 + 4) = v109;
  *(_WORD *)(v67 + 8) = 2080;
  *(_QWORD *)(v67 + 10) = v66;
  *(_WORD *)(v67 + 18) = 1024;
  *(_DWORD *)(v67 + 20) = v68;
  *(_WORD *)(v67 + 24) = 2048;
  *(_QWORD *)(v67 + 26) = v79;
  *(_WORD *)(v67 + 34) = 2048;
  *(_QWORD *)(v67 + 36) = v69;
  *(_WORD *)(v67 + 44) = 2048;
  *(_QWORD *)(v67 + 46) = v70;
  *(_WORD *)(v67 + 54) = 2048;
  *(_QWORD *)(v67 + 56) = v71;
  *(_WORD *)(v67 + 64) = 2048;
  *(_QWORD *)(v67 + 66) = v72;
  *(_WORD *)(v67 + 74) = 2048;
  *(_QWORD *)(v67 + 76) = v73;
  *(_WORD *)(v67 + 84) = 2048;
  *(_QWORD *)(v67 + 86) = v74;
  *(_WORD *)(v67 + 94) = 2048;
  *(_QWORD *)(v67 + 96) = v75;
  *(_WORD *)(v67 + 104) = 2048;
  *(_QWORD *)(v67 + 106) = v76;
  *(_WORD *)(v67 + 114) = 2048;
  *(_QWORD *)(v67 + 116) = v78;
  *(_WORD *)(v67 + 124) = 2048;
  *(_QWORD *)(v67 + 126) = v77;
  *(_WORD *)(v67 + 134) = 2048;
  *(_QWORD *)(v67 + 136) = v80;
  v81 = operator new();
  v82 = *(unsigned __int8 *)(v107 + 39);
  v83 = v108;
  if ((v82 & 0x80u) != 0)
  {
    v83 = *(_QWORD *)(v107 + 16);
    v82 = *(_QWORD *)(v107 + 24);
  }
  *(_OWORD *)v81 = *(_OWORD *)object;
  *(_QWORD *)(v81 + 16) = *(_QWORD *)&object[16];
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)&object[16] = 0;
  *(_OWORD *)(v81 + 24) = *(_OWORD *)v126;
  *(_QWORD *)v126 = 0;
  *(_QWORD *)&v126[8] = 0;
  *(_QWORD *)(v81 + 40) = v83;
  *(_QWORD *)(v81 + 48) = v82;
  *(_BYTE *)(v81 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v119 = v81;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v119);
  v84 = v119;
  *(_QWORD *)&v119 = 0;
  if (v84)
  {
    v85 = *(std::__shared_weak_count **)(v84 + 32);
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = *(std::__shared_weak_count **)(v84 + 16);
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    MEMORY[0x212BC6398](v84, 0x10F0C40B62ED6C6);
    v91 = __dst;
    __dst = 0;
    if (v91)
    {
      v92 = (std::__shared_weak_count *)v91[4];
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v95 = (std::__shared_weak_count *)v91[2];
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
    }
  }
  v98 = *(std::__shared_weak_count **)&v126[8];
  v4 = v32;
  if (*(_QWORD *)&v126[8])
  {
    v99 = (unint64_t *)(*(_QWORD *)&v126[8] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = *(std::__shared_weak_count **)&object[16];
  if (*(_QWORD *)&object[16])
  {
    v102 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
LABEL_110:
  if (v4)
  {
    sub_20E8C003C((uint64_t)v111, "[%.*s] extrinsic fg-p id[%d]: t_C_to_I %.8f, %.8f, %.8f, R_C_to_I in column-major: %.9f, %.9f, %.9f, %.9f, %.9f, %.9f, %.9f, %.9f, %.9f", (int)(*v16)[1], **v16, *a2, *((double *)a2 + 10), *((double *)a2 + 11), *((double *)a2 + 12), *((double *)a2 + 1), *((double *)a2 + 2), *((double *)a2 + 3), *((double *)a2 + 4), *((double *)a2 + 5), *((double *)a2 + 6), *((double *)a2 + 7), *((double *)a2 + 8), *((double *)a2 + 9));
    sub_20E863570((uint64_t)v111);
  }
  sub_20E863570((uint64_t)v111);
  v104 = v117;
  if (v117)
  {
    v105 = (unint64_t *)&v117->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
}

void sub_20F3A99F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53)
  {
    if (a52 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3A9A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_20E86E8C4(&a39);
  sub_20E86E8C4(&a44);
  sub_20E86E658((uint64_t)&a47);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3A9A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  int v40;

  if (v40 < 0)
    operator delete(v39);
  sub_20E86E658((uint64_t)&a39);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3A9AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *object,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F3A9B50()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F3A9B64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FF040;
  result[1] = v3;
  return result;
}

uint64_t sub_20F3A9B98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FF040;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F3A9BB4(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *v2;
  v4 = v2[1];
  if (v3 != v4)
  {
    while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 16) + 160) != *a2)
    {
      v3 += 8;
      if (v3 == v4)
        return 0;
    }
  }
  if (v3 == v4)
    return 0;
  else
    return *(_QWORD *)v3;
}

uint64_t sub_20F3A9C04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping21DetectBridgesMapGraphERKNSt3__16vectorIPNS1_17MapDataControllerENS2_9all"
                     "ocatorIS5_EEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping21DetectBridgesMapGraphERKNSt3__16vectorIPNS1_17MapDataControll"
                                "erENS2_9allocatorIS5_EEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping21DetectBridgesMapGraphERKNSt3__16vectorIPNS1_17MapDataControllerENS2_9allocatorIS5_EEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping21DetectBridgesMapGraphERKNSt3__16vectorIPNS1_17MapDataControllerENS2_9allocatorIS5_EEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F3A9C70()
{
  return &unk_24C9FF0A0;
}

char *sub_20F3A9C7C(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = (char *)operator new(0x1F0uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_QWORD *)v10 + 61) = 0;
  *(_QWORD *)&v13 = -1;
  *((_QWORD *)&v13 + 1) = -1;
  *(_OWORD *)(v10 + 40) = v13;
  *(_OWORD *)(v10 + 56) = v13;
  *(_OWORD *)(v10 + 24) = v13;
  *(_OWORD *)(v10 + 136) = xmmword_2103B06C0;
  *(_OWORD *)(v10 + 152) = unk_2103B06D0;
  *(_OWORD *)(v10 + 168) = xmmword_2103B06E0;
  *(_OWORD *)(v10 + 184) = unk_2103B06F0;
  *(_OWORD *)(v10 + 72) = xmmword_2103B0680;
  *(_OWORD *)(v10 + 88) = *(_OWORD *)algn_2103B0690;
  *(_OWORD *)(v10 + 104) = xmmword_2103B06A0;
  *(_OWORD *)(v10 + 120) = unk_2103B06B0;
  *(_QWORD *)(v10 + 485) = 0;
  *(_OWORD *)(v10 + 456) = 0u;
  *(_OWORD *)(v10 + 472) = 0u;
  *(_OWORD *)(v10 + 424) = 0u;
  *(_OWORD *)(v10 + 440) = 0u;
  *(_OWORD *)(v10 + 392) = 0u;
  *(_OWORD *)(v10 + 408) = 0u;
  *(_OWORD *)(v10 + 360) = 0u;
  *(_OWORD *)(v10 + 376) = 0u;
  *(_OWORD *)(v10 + 328) = 0u;
  *(_OWORD *)(v10 + 344) = 0u;
  *(_OWORD *)(v10 + 296) = 0u;
  *(_OWORD *)(v10 + 312) = 0u;
  *(_OWORD *)(v10 + 280) = 0u;
  *(_OWORD *)(v10 + 264) = 0u;
  *(_OWORD *)(v10 + 248) = 0u;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_OWORD *)(v10 + 216) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
    goto LABEL_51;
  v16 = v7 < 3 || (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v7)
    goto LABEL_35;
  if (prime < v7)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      v20 = std::__next_prime(v20);
    }
    else
    {
      v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2)
        v20 = v22;
    }
    if (prime <= v20)
      prime = v20;
    if (prime < v7)
LABEL_35:
      sub_20E8D2B3C(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v23 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      v3 = v6 % v7;
      v24 = *(_QWORD *)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
      if (!v25)
        goto LABEL_54;
LABEL_52:
      *(_QWORD *)v10 = *v25;
LABEL_60:
      *v25 = v10;
      goto LABEL_61;
    }
    v3 = v6;
LABEL_51:
    v24 = *(_QWORD *)a1;
    v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v25)
      goto LABEL_54;
    goto LABEL_52;
  }
  v3 = v23 & v6;
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v23 & v6));
  if (v25)
    goto LABEL_52;
LABEL_54:
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_60;
  }
LABEL_61:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20F3A9FE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F3A9FFC(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  *((_DWORD *)v10 + 6) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20F3AA2C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F3AA2D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FF0C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F3AA2E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FF0C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F3AA318(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = a1[3];
  if (v3)
  {
    v4 = a1[4];
    v5 = (void *)a1[3];
    if (v4 == v3)
    {
      a1[4] = v3;
      operator delete(v5);
    }
    else
    {
      do
      {
        v6 = *(void **)(v4 - 24);
        if (v6)
        {
          *(_QWORD *)(v4 - 16) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v3);
      v7 = (void *)a1[3];
      a1[4] = v3;
      operator delete(v7);
    }
  }
}

void sub_20F3AA3B4(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  uint8x8_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  void *v23;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v17 = (uint8x8_t)vcnt_s8(v4), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v16);
      if (prime <= v22)
        prime = v22;
      if (prime >= *(_QWORD *)&v4)
        return;
    }
    else
    {
      v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2)
        v16 = v18;
      if (prime <= v16)
        prime = v16;
      if (prime >= *(_QWORD *)&v4)
        return;
    }
    if (!prime)
    {
      v23 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v23)
        operator delete(v23);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    sub_20E877A38();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v9 = a1 + 16;
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v10 = v8[1];
    v11 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v12 = v10 & v11;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v9;
      while (1)
      {
        v13 = (_QWORD *)*v8;
        if (!*v8)
          break;
        v14 = v13[1] & v11;
        if (v14 == v12)
        {
          v8 = (_QWORD *)*v8;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v14))
        {
          *v8 = *v13;
          v15 = 8 * v14;
          *v13 = **(_QWORD **)(*(_QWORD *)a1 + v15);
          **(_QWORD **)(*(_QWORD *)a1 + v15) = v13;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = v8;
          v8 = v13;
          v12 = v14;
        }
      }
      return;
    }
    if (v10 >= prime)
      v10 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v9;
    v19 = (_QWORD *)*v8;
    if (*v8)
    {
      while (1)
      {
        v21 = v19[1];
        if (v21 >= prime)
          v21 %= prime;
        if (v21 == v10)
          goto LABEL_34;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
        {
          *v8 = *v19;
          v20 = 8 * v21;
          *v19 = **(_QWORD **)(*(_QWORD *)a1 + v20);
          **(_QWORD **)(*(_QWORD *)a1 + v20) = v19;
          v19 = v8;
LABEL_34:
          v8 = v19;
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v8;
          v8 = v19;
          v19 = (_QWORD *)*v19;
          v10 = v21;
          if (!v19)
            return;
        }
      }
    }
  }
}

BOOL sub_20F3AA620(uint64_t **a1, const void **a2, uint64_t a3, int a4, int64x2_t *a5, unsigned int a6, _QWORD *a7, char a8, double a9)
{
  uint64_t **v12;
  _BOOL4 v14;
  _BOOL8 v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  const void *v21;
  int64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  std::string *p_p;
  std::string::size_type size;
  _BYTE *v30;
  uint64_t v31;
  uint64_t *v32;
  size_t v33;
  _BYTE *v34;
  unint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned __int8 v40;
  char *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t *v48;
  size_t v49;
  _BYTE *v50;
  unint64_t v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  unsigned __int8 v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t j;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v82;
  _QWORD *v83;
  __int128 v84;
  unsigned __int8 v85;
  uint64_t v86;
  uint64_t k;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  _QWORD *v92;
  uint64_t *v93;
  unint64_t v94;
  float64x2_t v95;
  char *v97;
  char *v98;
  uint64_t *v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  size_t v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  int8x8_t **v115;
  int8x8_t *v116;
  int8x8_t v117;
  int v118;
  unsigned int v119;
  unint64_t v120;
  uint8x8_t v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  float64x2_t **v128;
  float64x2_t v129;
  float64x2_t v131;
  double v132;
  float64x2_t *v134;
  double v135;
  double v137;
  double v139;
  float64x2_t *v141;
  float64x2_t v143;
  float64x2_t *v146;
  double v147;
  float64x2_t v148;
  int64x2_t v149;
  double v151;
  int64x2_t v152;
  double v154;
  double v157;
  float64x2_t v158;
  float64x2_t v160;
  int8x16_t v161;
  int64x2_t v162;
  int8x16_t v163;
  __int128 v164;
  double cosval;
  __double2 v166;
  double v167;
  __int128 v168;
  void *v169;
  void *v170;
  unint64_t v171;
  double v172;
  unint64_t v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  double *v181;
  double *v182;
  double *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  double *v189;
  double *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  unsigned int *v197;
  unsigned int *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  __int128 v202;
  uint64_t v203;
  char *v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  void **v209;
  char *v210;
  __int128 v211;
  char *v212;
  uint64_t v213;
  char *v214;
  int64_t v215;
  char *v216;
  size_t v217;
  void *v218;
  char *v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  int64_t v227;
  char *v228;
  size_t v229;
  char *v230;
  __int128 v231;
  char *v232;
  char *v233;
  void *v234;
  void *v235;
  char *v236;
  __int128 v237;
  __int128 v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  char *v242;
  char *v243;
  __int128 v244;
  __int128 v245;
  char *v246;
  __int128 v247;
  __int128 v248;
  char *v249;
  char *v250;
  unsigned int *v251;
  size_t v252;
  unint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  unint64_t v257;
  char *v258;
  unint64_t v259;
  char *v260;
  void *v261;
  char *v262;
  unint64_t v263;
  _OWORD *v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  _OWORD *v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  char *v274;
  __int128 v275;
  char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  __int128 v286;
  _OWORD *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  void *v295;
  void *v296;
  char *v297;
  void (***v298)(char *);
  void (**v299)(char *);
  uint64_t v300;
  uint64_t v301;
  void *v302;
  void *v303;
  void *v304;
  double *v305;
  char *v306;
  _QWORD *v307;
  char *v308;
  uint64_t v309;
  char *v310;
  size_t v311;
  int64_t v312;
  unint64_t v313;
  char *v314;
  uint64_t v315;
  char *v316;
  char *v317;
  __int128 v318;
  __int128 v319;
  void *v320;
  uint64_t *v321;
  float64x2_t **v322;
  double v324;
  float64x2_t *v325;
  float64x2_t v326;
  __int128 v327;
  float64x2_t *v328;
  float64x2_t v329;
  float64x2_t *v330;
  uint64_t *v331;
  float64x2_t v333;
  float64x2_t **v334;
  double v337;
  int64x2_t v340;
  float64x2_t v342;
  int64x2_t v343;
  double v345;
  float64x2_t v348;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  double v354;
  float64x2_t v355;
  float64x2_t *v356;
  double v357;
  double v359;
  double v361;
  float64x2_t *v363;
  float64x2_t *v367;
  double v368;
  float64x2_t v369;
  int64x2_t v370;
  int64x2_t v371;
  double v373;
  float64x2_t *v376;
  float64x2_t *v377;
  int64_t v378;
  float64x2_t *v379;
  int8x16_t v381;
  int8x16_t v382;
  float64x2_t v384;
  int64x2_t v385;
  float64x2_t v387;
  _QWORD *v388;
  void *v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t *v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  char *v418;
  float64x2_t *v419;
  float64x2_t *v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  char *v427;
  __int128 v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  char *v433;
  float64x2_t *v434;
  uint64_t v435;
  unint64_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  double v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v457;
  uint64_t *v460;
  float64x2_t v461;
  char *v462;
  char *v463;
  __uint64_t prime;
  int8x8_t v465;
  BOOL v466;
  unint64_t v467;
  uint8x8_t v468;
  uint64_t v469;
  uint64_t *v470;
  __uint64_t v471;
  unint64_t v472;
  uint8x8_t v473;
  uint64_t **v474;
  uint64_t *v475;
  __uint64_t v476;
  uint64_t v477;
  _QWORD *v478;
  float v479;
  void **v480;
  void **v481;
  _BOOL8 v482;
  unint64_t v483;
  unint64_t v484;
  __uint64_t v485;
  __uint64_t v486;
  unint64_t v487;
  uint8x8_t v488;
  uint64_t v489;
  unint64_t v490;
  _QWORD *v491;
  void *v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  _QWORD *v497;
  _QWORD *v498;
  void *v499;
  _QWORD *v500;
  void *v501;
  _QWORD *v502;
  _DWORD *v503;
  void **v504;
  char *v505;
  _QWORD *v506;
  _QWORD *v507;
  _QWORD *v508;
  void *v509;
  _QWORD *v510;
  _QWORD *v511;
  _QWORD *v512;
  void *v513;
  uint64_t v514;
  int v515;
  unint64_t v516;
  char *v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  unint64_t v522;
  _BYTE *v523;
  _DWORD *v524;
  int64_t v525;
  unint64_t v526;
  char *v527;
  int v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t v531;
  float64x2_t *v532;
  float64x2_t *v533;
  uint64_t v534;
  float64x2_t v535;
  _DWORD *v536;
  unsigned int v537;
  void *v538;
  uint64_t *v539;
  _BYTE *v540;
  __uint64_t *v541;
  unsigned __int8 v542;
  char *v544;
  size_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t m;
  uint64_t v549;
  void *v550;
  char *v551;
  void **v552;
  uint64_t v553;
  float64x2_t *v554;
  float64x2_t *v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  __uint64_t v560;
  __uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  char *v566;
  float64x2_t *v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  __uint64_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  char *v577;
  double *v578;
  double *v579;
  __uint64_t v580;
  void *v581;
  BOOL v582;
  unint64_t v583;
  uint8x8_t v584;
  uint64_t v585;
  double *v586;
  _QWORD *v587;
  unint64_t v588;
  float64x2_t v589;
  float64x2_t *v590;
  unint64_t v591;
  unint64_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64_t *v596;
  _QWORD *v599;
  void *v600;
  _OWORD *v601;
  int64_t v602;
  unsigned int *v603;
  _QWORD *v604;
  _QWORD *v605;
  void *v606;
  _QWORD *v607;
  _QWORD *v608;
  void *v609;
  char *v610;
  char *v611;
  void *v612;
  char *v613;
  void *v614;
  void *v615;
  char *v616;
  std::string::size_type v617;
  char *v618;
  uint64_t v619;
  int64x2_t v621;
  int64x2_t v622;
  int64x2_t v623;
  int64x2_t v624;
  uint64_t v625;
  unint64_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  double v631;
  double v632;
  __double2 v633;
  int8x16_t v634;
  float64x2_t v636;
  float64x2_t v637;
  double v638;
  float64x2_t v639;
  float64x2_t v640;
  double v641;
  double v642;
  double v643;
  float64_t v644;
  float64_t v645;
  float64_t v646;
  double v647;
  float64_t v648;
  float64_t v649;
  double v650;
  double v651;
  double v652;
  double v653;
  float64x2_t v654;
  double v655;
  float64x2_t v656;
  double v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  uint64_t v672;
  float64x2_t v673;
  unint64_t v674;
  float64x2_t v675;
  unint64_t v676;
  float64x2_t v677;
  unint64_t v678;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  double v690;
  double v692;
  double v694;
  float64x2_t v696;
  double v699;
  float64x2_t v700;
  double v702;
  float64x2_t v704;
  float64x2_t v706;
  float64x2_t v707;
  double v710;
  double v711;
  double v712;
  __double2 v713;
  float64x2_t v715;
  double v716;
  int8x16_t v717;
  double v718;
  double v719;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v724;
  int8x16_t v725;
  float64x2_t v726;
  float64x2_t v727;
  uint64_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  int64x2_t v741;
  int64x2_t v742;
  int64x2_t v743;
  int64x2_t v744;
  int64x2_t v745;
  int64x2_t v746;
  int64x2_t v747;
  float64x2_t v748;
  int64x2_t v749;
  unint64_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  _OWORD *v756;
  float64x2_t v757;
  float64x2_t v758;
  double v759;
  double v760;
  int64x2_t *v761;
  uint64_t v762;
  float64x2_t v763;
  float64x2_t v764;
  int64x2_t v765;
  int64x2_t v766;
  uint64_t v767;
  double v768;
  uint64_t v769;
  uint64_t v770;
  __uint64_t v772;
  void *v773;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  char *v780;
  float64x2_t v781;
  float64x2_t v782;
  _QWORD *v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  __int128 v787;
  __int128 v788;
  float64x2_t v789;
  __int128 v790;
  float64x2_t v791;
  __int128 v792;
  float64x2_t v793;
  __int128 v794;
  float64x2_t v795;
  __int128 v796;
  float64x2_t v797;
  uint64_t **v798;
  float64x2_t v799;
  float64_t v801;
  __int128 v802;
  float64x2_t v803;
  int8x16_t v804;
  float64x2_t v805;
  float64x2_t v806;
  double v807;
  float64x2_t v808;
  float64x2_t v809;
  float64_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  unint64_t v815;
  _QWORD *v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  unint64_t v820;
  char *v821;
  void *v822[2];
  float64x2_t v823;
  double v824;
  char *v825;
  double v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  void *__src[2];
  _BYTE *__srca;
  void *__srcb[2];
  float64x2_t __srcc;
  double __srce;
  void *__srcd[2];
  double v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  unint64_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  double v846;
  float64x2_t v847;
  float64x2_t v848;
  uint64_t v849;
  float64_t v850;
  _QWORD *v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  unint64_t v856;
  double v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64_t v862;
  unint64_t v863;
  float64x2_t v864;
  float64x2_t v865;
  double v866;
  float64x2_t v867;
  float64x2_t v868;
  float64_t v869;
  char *v870;
  void *v871[2];
  float64x2_t v872;
  void *v873[2];
  void *v874[2];
  float64_t v875;
  char *v876;
  char *v877;
  float64x2_t v878;
  float64x2_t v879;
  float64_t v880;
  float64_t v881;
  void *v882[2];
  void *v883[2];
  float v884;
  int v885;
  char v886;
  void *v887[2];
  void *v888[2];
  __int128 v889;
  void *v890;
  __int128 v891;
  std::string __p;
  uint64_t v893;
  const void *v894;
  uint64_t v895;
  const void *v896;
  unint64_t v897;
  void *v898;
  char v899;
  unint64_t v900;
  int v901;
  uint64_t v902;
  char *v903;
  __int128 v904;
  uint64_t v905;
  const void *v906;
  uint64_t v907;
  const void *v908;
  unint64_t v909;
  void *v910;
  char v911;
  unint64_t v912;
  int v913;
  uint64_t v914;
  void *v915;
  __int128 v916;
  __uint64_t __n[2];
  void *v918[2];
  double v919;
  double v920;
  uint64_t v921;
  void *v922;
  unint64_t v923;
  unint64_t v924;
  uint64_t v925;
  void *v926;
  _BYTE __dst[96];
  void *v928;
  unsigned int *v929;
  uint64_t v930;
  void *v931;
  char *v932;
  char *v933;
  void *v934;
  char *v935;
  void *v936;
  void *v937;
  char *v938;
  void *v939;
  void *v940;
  void *v941;
  void *v942;
  char *v943;
  __uint64_t v944[2];
  void *v945[2];
  int v946;
  double *v947;
  double *v948;
  double *v949;
  void *v950;
  char *v951;
  char *v952;
  void *v953[2];
  void *v954[2];
  char *v955;
  _BYTE v956[80];
  _BYTE v957[32];
  __int128 v958;
  char v959;
  uint64_t v960;

  v960 = *MEMORY[0x24BDAC8D0];
  if (*a2 == a2[1])
    return 0;
  v12 = a1;
  if (*(_BYTE *)(a3 + 4))
    _ZF = *(_DWORD *)a3 == 2;
  else
    _ZF = 0;
  v14 = !_ZF || *((_BYTE *)a1[5] + 84) != 0;
  v16 = *a1;
  v17 = (uint64_t *)operator new(0x18uLL);
  v18 = v16[2];
  *(_OWORD *)v17 = *(_OWORD *)v16;
  v17[2] = v18;
  sub_20F3AF0B4((void **)&v903, v17, v17 + 3, (uint64_t)v12[1], *((_DWORD *)v12[5] + 13), v14, v12[2]);
  operator delete(v17);
  v19 = v903;
  v780 = (char *)v904;
  v916 = 0uLL;
  v915 = 0;
  v21 = *a2;
  v20 = a2[1];
  v22 = v20 - (_BYTE *)*a2;
  v761 = a5;
  if (v20 == *a2)
  {
    v24 = 0;
    v23 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v22 >> 3) > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v23 = (char *)operator new(v22);
    v24 = (uint64_t *)&v23[8 * (v22 >> 3)];
    v915 = v23;
    *((_QWORD *)&v916 + 1) = v24;
    memcpy(v23, v21, v22 - 4);
  }
  v25 = (uint64_t)v19;
  sub_20F3AF0B4((void **)&v903, (uint64_t *)v23, v24, (uint64_t)v12[3], *((_DWORD *)v12[5] + 14), v14, v12[4]);
  if (v23)
    operator delete(v23);
  v26 = v903;
  v915 = v903;
  v876 = (char *)v904;
  v916 = v904;
  sub_20E863438((uint64_t)&v903);
  v773 = v19;
  if (v26 != v876)
  {
    v27 = (uint64_t)v26;
    do
    {
      sub_20F271158(v27, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      sub_20E86A980((_QWORD *)&v904 + 1, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v27 += 24;
    }
    while ((char *)v27 != v876);
  }
  sub_20E863438((uint64_t)&__p);
  if (v19 != v780)
  {
    do
    {
      sub_20F271158(v25, (std::string *)v956);
      if (v956[23] >= 0)
        v30 = v956;
      else
        v30 = *(_BYTE **)v956;
      if (v956[23] >= 0)
        v31 = v956[23];
      else
        v31 = *(_QWORD *)&v956[8];
      sub_20E86A980(&__p.__r_.__value_.__r.__words[2], (uint64_t)v30, v31);
      if ((v956[23] & 0x80000000) != 0)
        operator delete(*(void **)v956);
      v25 += 24;
    }
    while ((char *)v25 != v780);
  }
  v32 = sub_210219C18();
  if ((v913 & 0x10) != 0)
  {
    v35 = v912;
    if (v912 < v909)
    {
      v912 = v909;
      v35 = v909;
    }
    v36 = v908;
    v33 = v35 - (_QWORD)v908;
    if (v35 - (unint64_t)v908 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_63;
  }
  else
  {
    if ((v913 & 8) == 0)
    {
      v33 = 0;
      __dst[23] = 0;
      v34 = __dst;
      goto LABEL_50;
    }
    v36 = v906;
    v33 = v907 - (_QWORD)v906;
    if ((unint64_t)(v907 - (_QWORD)v906) > 0x7FFFFFFFFFFFFFF7)
LABEL_63:
      sub_20E860B7C();
  }
  if (v33 >= 0x17)
  {
    v37 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v37 = v33 | 7;
    v38 = v37 + 1;
    v34 = operator new(v37 + 1);
    *(_QWORD *)&__dst[16] = v38 | 0x8000000000000000;
    *(_QWORD *)__dst = v34;
    *(_QWORD *)&__dst[8] = v33;
    goto LABEL_49;
  }
  __dst[23] = v33;
  v34 = __dst;
  if (v33)
LABEL_49:
    memmove(v34, v36, v33);
LABEL_50:
  v34[v33] = 0;
  if (__dst[23] >= 0)
    v39 = __dst;
  else
    v39 = *(_BYTE **)__dst;
  v40 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    *(_DWORD *)v956 = 136315138;
    *(_QWORD *)&v956[4] = v39;
    v42 = (char *)_os_log_send_and_compose_impl();
    v43 = strlen(v42);
    __n[0] = 0;
    pthread_threadid_np(0, __n);
    v44 = __n[0];
    timespec_get((timespec *)__n, 1);
    sub_210219E20(v956, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v32 + 1), (__int128 *)(v32 + 5), "MFPR:REF:%s", 0xBuLL, v42, v43, v44, __n);
    std::mutex::lock(&stru_254A5A410);
    v45 = qword_254A5A458;
    for (i = unk_254A5A460; v45 != i; v45 += 40)
    {
      v47 = *(_QWORD *)(v45 + 32);
      if (!v47)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v47 + 48))(v47, v956);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v959 < 0)
    {
      operator delete(*((void **)&v958 + 1));
      if ((SBYTE7(v958) & 0x80000000) == 0)
      {
LABEL_60:
        if (!v957[8])
        {
LABEL_68:
          if (v956[56] && (v956[55] & 0x80000000) != 0)
            operator delete(*(void **)&v956[32]);
          if ((v956[31] & 0x80000000) != 0)
            operator delete(*(void **)&v956[8]);
          if (v42)
            free(v42);
          goto LABEL_75;
        }
LABEL_66:
        if ((v957[7] & 0x80000000) != 0)
          operator delete(*(void **)&v956[64]);
        goto LABEL_68;
      }
    }
    else if ((SBYTE7(v958) & 0x80000000) == 0)
    {
      goto LABEL_60;
    }
    operator delete(*(void **)&v957[16]);
    if (!v957[8])
      goto LABEL_68;
    goto LABEL_66;
  }
LABEL_75:
  if (os_signpost_enabled((os_log_t)*v32))
  {
    *(_DWORD *)v956 = 136315138;
    *(_QWORD *)&v956[4] = v39;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v48 = sub_210219C18();
  if ((v901 & 0x10) != 0)
  {
    v51 = v900;
    if (v900 < v897)
    {
      v900 = v897;
      v51 = v897;
    }
    v52 = v896;
    v49 = v51 - (_QWORD)v896;
    if (v51 - (unint64_t)v896 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_105;
  }
  else
  {
    if ((v901 & 8) == 0)
    {
      v49 = 0;
      __dst[23] = 0;
      v50 = __dst;
      goto LABEL_92;
    }
    v52 = v894;
    v49 = v895 - (_QWORD)v894;
    if ((unint64_t)(v895 - (_QWORD)v894) > 0x7FFFFFFFFFFFFFF7)
LABEL_105:
      sub_20E860B7C();
  }
  if (v49 >= 0x17)
  {
    v53 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v53 = v49 | 7;
    v54 = v53 + 1;
    v50 = operator new(v53 + 1);
    *(_QWORD *)&__dst[16] = v54 | 0x8000000000000000;
    *(_QWORD *)__dst = v50;
    *(_QWORD *)&__dst[8] = v49;
    goto LABEL_91;
  }
  __dst[23] = v49;
  v50 = __dst;
  if (v49)
LABEL_91:
    memmove(v50, v52, v49);
LABEL_92:
  v50[v49] = 0;
  if (__dst[23] >= 0)
    v55 = __dst;
  else
    v55 = *(_BYTE **)__dst;
  v56 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v57 = atomic_load(&qword_254A5A450);
  v58 = 0xAAAAAAAAAAAAAAALL;
  if (v57)
  {
    *(_DWORD *)v956 = 136315138;
    *(_QWORD *)&v956[4] = v55;
    v59 = (char *)_os_log_send_and_compose_impl();
    v60 = strlen(v59);
    __n[0] = 0;
    pthread_threadid_np(0, __n);
    v61 = __n[0];
    timespec_get((timespec *)__n, 1);
    sub_210219E20(v956, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v48 + 1), (__int128 *)(v48 + 5), "MFPR:QUERY:%s", 0xDuLL, v59, v60, v61, __n);
    std::mutex::lock(&stru_254A5A410);
    v62 = qword_254A5A458;
    for (j = unk_254A5A460; v62 != j; v62 += 40)
    {
      v64 = *(_QWORD *)(v62 + 32);
      if (!v64)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v64 + 48))(v64, v956);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v959 < 0)
    {
      operator delete(*((void **)&v958 + 1));
      v58 = 0xAAAAAAAAAAAAAAALL;
      if ((SBYTE7(v958) & 0x80000000) == 0)
      {
LABEL_102:
        if (!v957[8])
        {
LABEL_110:
          if (v956[56] && (v956[55] & 0x80000000) != 0)
            operator delete(*(void **)&v956[32]);
          if ((v956[31] & 0x80000000) != 0)
            operator delete(*(void **)&v956[8]);
          if (v59)
            free(v59);
          goto LABEL_117;
        }
LABEL_108:
        if ((v957[7] & 0x80000000) != 0)
          operator delete(*(void **)&v956[64]);
        goto LABEL_110;
      }
    }
    else
    {
      v58 = 0xAAAAAAAAAAAAAAALL;
      if ((SBYTE7(v958) & 0x80000000) == 0)
        goto LABEL_102;
    }
    operator delete(*(void **)&v957[16]);
    if (!v957[8])
      goto LABEL_110;
    goto LABEL_108;
  }
LABEL_117:
  if (os_signpost_enabled((os_log_t)*v48))
  {
    *(_DWORD *)v956 = 136315138;
    *(_QWORD *)&v956[4] = v55;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v891 = 0uLL;
  v890 = 0;
  v885 = *((_DWORD *)v12[5] + 23);
  v886 = 1;
  v948 = 0;
  v947 = 0;
  v949 = 0;
  *(_OWORD *)v945 = 0u;
  *(_OWORD *)v944 = 0u;
  v946 = 1065353216;
  v798 = v12;
  if (v19 == v780)
    goto LABEL_388;
  v65 = (unint64_t)v956 & 0xF0;
  if (!a8)
    v65 = 0;
  v841 = v65;
  if (v915 == (void *)v916)
  {
LABEL_388:
    v305 = 0;
    v306 = 0;
    v889 = 0uLL;
    *(_OWORD *)v887 = 0uLL;
    *(_OWORD *)v888 = 0uLL;
    v307 = v945[0];
    if (!v945[0])
      goto LABEL_400;
    goto LABEL_420;
  }
  v821 = 0;
  v66 = v19;
  v67 = 0;
  v68 = 0;
  v783 = a7 + 1;
  v877 = v66;
  do
  {
    v69 = v915;
    v70 = (_QWORD *)v916;
    v851 = (_QWORD *)v916;
    while (v69 != v70)
    {
      v71 = v12[1][53];
      v72 = *(char **)(v71 + 40);
      v73 = *(char **)(v71 + 48);
      if (v73 != v72)
      {
        v74 = (v73 - v72) >> 4;
        v75 = *((_DWORD *)v877 + 4);
        v76 = *(_QWORD *)v877;
        while (1)
        {
          v77 = v74 >> 1;
          v78 = &v72[16 * (v74 >> 1)];
          v79 = *(_QWORD *)v78;
          v80 = *(_DWORD *)(*(_QWORD *)v78 + 16);
          _CF = v80 >= v75;
          if (v80 != v75)
            goto LABEL_138;
          if (*(_QWORD *)v79 >= v76)
            break;
LABEL_132:
          v72 = v78 + 16;
          v77 = v74 + ~v77;
LABEL_133:
          v74 = v77;
          if (!v77)
            goto LABEL_141;
        }
        if (*(_QWORD *)v79 != v76)
          goto LABEL_133;
        _CF = *(_DWORD *)(v79 + 8) >= *((_DWORD *)v877 + 2);
LABEL_138:
        if (_CF)
          goto LABEL_133;
        goto LABEL_132;
      }
LABEL_141:
      if (v72 != v73)
      {
        v82 = *(_QWORD *)v72;
        if (*(_DWORD *)(*(_QWORD *)v72 + 16) == *((_DWORD *)v877 + 4)
          && *(_QWORD *)v82 == *(_QWORD *)v877
          && *(_DWORD *)(v82 + 8) == *((_DWORD *)v877 + 2))
        {
          v73 = v72;
        }
      }
      v942 = 0;
      v941 = 0;
      v943 = 0;
      v83 = operator new(0x18uLL);
      v84 = *(_OWORD *)v69;
      v83[2] = v69[2];
      *(_OWORD *)v83 = v84;
      v943 = (char *)(v83 + 3);
      v941 = v83;
      v942 = v83 + 3;
      sub_20F279E20(v12[3][53], (uint64_t **)&v941, (char **)&v939);
      v870 = v68;
      if (v939 == v940)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MultiFramePoseRefiner.cpp", 232, (uint64_t)"!ref_frame_wrapper.empty()", 26, (uint64_t)"incorrect reference keyframe in MultiFrame Reloc", 48, (void (*)(void **))sub_21023DDB0);
        v85 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v86 = qword_254A6DE40;
          for (k = qword_254A6DE48; v86 != k; v86 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v86)(*(_QWORD *)(v86 + 8), "!ref_frame_wrapper.empty()", 26, "incorrect reference keyframe in MultiFrame Reloc", 48);
        }
        v88 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v88 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        v68 = v870;
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "!ref_frame_wrapper.empty()", 26, "incorrect reference keyframe in MultiFrame Reloc", 48);
      }
      memset(v957, 0, 26);
      memset(v956, 0, sizeof(v956));
      v89 = *(_QWORD *)(v12[3][53] + 8);
      v90 = (uint64_t *)(*(_QWORD *)v73 + 576);
      v91 = (uint64_t *)(*(_QWORD *)v73 + 616);
      v92 = (_QWORD *)(*(_QWORD *)v73 + 656);
      v93 = (uint64_t *)(*(_QWORD *)v73 + 72);
      __dst[0] = 0;
      __dst[24] = 0;
      LOBYTE(__n[0]) = 0;
      LOBYTE(v918[1]) = 0;
      LOBYTE(v953[0]) = 0;
      BYTE4(v953[0]) = 0;
      v94 = v863;
      if (a8)
        v94 = (unint64_t)v956 >> 8;
      v863 = v94;
      sub_20F23F9F8((uint64_t ***)&v939, v89, v944, v90, v91, v92, v93, 1u, (char **)&v937, 0.0, 0, 0, 0, 2, (uint64_t)__dst, (uint64_t *)__n, (uint64_t)v953, (uint64_t)&v885, *((_BYTE *)v12[5] + 85),
        0,
        0,
        0,
        0,
        0,
        v841 | (v94 << 8),
        a8 != 0,
        0,
        0);
      if (LOBYTE(v918[1]) && __n[0])
      {
        __n[1] = __n[0];
        operator delete((void *)__n[0]);
      }
      v97 = v938;
      v98 = (char *)v937;
      v99 = v12[5];
      v100 = (unint64_t *)v99[18];
      v101 = (unint64_t *)v99[19];
      if (v100 != v101)
      {
        v102 = v100 + 1;
        if (v100 + 1 != v101)
        {
          v103 = *v100;
          v104 = v100 + 1;
          do
          {
            v106 = *v104++;
            v105 = v106;
            if (v106 < v103)
            {
              v103 = v105;
              v100 = v102;
            }
            v102 = v104;
          }
          while (v104 != v101);
        }
      }
      v107 = 0xCCCCCCCCCCCCCCCDLL * ((v938 - (_BYTE *)v937) >> 3);
      if (v107 >= *v100)
      {
        v935 = 0;
        v934 = 0;
        v936 = 0;
        v932 = 0;
        v931 = 0;
        v933 = 0;
        if (v938 != v937)
        {
          if (((v107 >> 60) & 7) != 0
            || (v108 = operator new(0xCCCCCCCCCCCCCCD0 * ((v938 - (_BYTE *)v937) >> 3)),
                bzero(v108, 0xCCCCCCCCCCCCCCD0 * ((v97 - v98) >> 3)),
                v934 = v108,
                v935 = (char *)&v108[0xF99999999999999ALL * ((v97 - v98) >> 3)],
                v936 = v935,
                v932 = 0,
                (unint64_t)(0x6666666666666667 * ((v97 - v98) >> 3)) >> 61))
          {
            sub_20E867F44();
          }
          v109 = 3 * v107;
          v110 = operator new(24 * v107);
          bzero(v110, v109 * 8);
          v931 = v110;
          v932 = (char *)&v110[v109];
          v933 = (char *)&v110[0x666666666666667 * ((v97 - v98) >> 3)];
          v111 = v108 + 1;
          v112 = v110 + 1;
          v58 = 0xAAAAAAAAAAAAAAALL;
          v68 = v870;
          do
          {
            v113 = *((_QWORD *)v98 + 3);
            *(v111 - 1) = *(_QWORD *)(v113 + 16);
            *v111 = *(_QWORD *)(v113 + 24);
            v111 += 2;
            v114 = (_QWORD *)*((_QWORD *)v98 + 4);
            *(v112 - 1) = v114[1];
            *v112 = v114[2];
            v112[1] = v114[3];
            v98 += 40;
            v112 += 3;
          }
          while (v98 != v97);
        }
        v929 = 0;
        v928 = 0;
        v930 = 0;
        v115 = (int8x8_t **)v12[1][53];
        v116 = *v115;
        v117 = (*v115)[224];
        if (v117)
        {
          v118 = *((_DWORD *)v877 + 4);
          v119 = *((_DWORD *)v877 + 2);
          v120 = v119 ^ __ROR4__(v118, 13);
          v121 = (uint8x8_t)vcnt_s8(v117);
          v121.i16[0] = vaddlv_u8(v121);
          if (v121.u32[0] > 1uLL)
          {
            v122 = v120;
            if (*(_QWORD *)&v117 <= v120)
              v122 = v120 % *(_QWORD *)&v117;
          }
          else
          {
            v122 = (v117.i32[0] - 1) & v120;
          }
          v123 = *(uint64_t **)(*(_QWORD *)&v116[223] + 8 * v122);
          if (v123)
          {
            v123 = (uint64_t *)*v123;
            if (v123)
            {
              v124 = *(_QWORD *)v877;
              if (v121.u32[0] < 2uLL)
              {
                v125 = *(_QWORD *)&v117 - 1;
                while (1)
                {
                  v127 = v123[1];
                  if (v127 == v120)
                  {
                    if (*((_DWORD *)v123 + 8) == v118 && v123[2] == v124 && *((_DWORD *)v123 + 6) == v119)
                      goto LABEL_198;
                  }
                  else if ((v127 & v125) != v122)
                  {
                    goto LABEL_197;
                  }
                  v123 = (uint64_t *)*v123;
                  if (!v123)
                    goto LABEL_198;
                }
              }
              do
              {
                v126 = v123[1];
                if (v126 == v120)
                {
                  if (*((_DWORD *)v123 + 8) == v118 && v123[2] == v124 && *((_DWORD *)v123 + 6) == v119)
                    break;
                }
                else
                {
                  if (v126 >= *(_QWORD *)&v117)
                    v126 %= *(_QWORD *)&v117;
                  if (v126 != v122)
                    goto LABEL_197;
                }
                v123 = (uint64_t *)*v123;
              }
              while (v123);
            }
          }
        }
        else
        {
LABEL_197:
          v123 = 0;
        }
LABEL_198:
        v128 = (float64x2_t **)(v123 + 5);
        if (!v123)
          v128 = 0;
        *(_OWORD *)&__dst[80] = 0u;
        *(_OWORD *)&__dst[64] = 0u;
        *(_OWORD *)&__dst[48] = 0u;
        *(_OWORD *)&__dst[32] = 0u;
        *(_OWORD *)&__dst[16] = 0u;
        *(_OWORD *)__dst = 0u;
        v129 = **v128;
        _D2 = (*v128)[2].f64[1];
        v131 = *(float64x2_t *)((char *)*v128 + 24);
        v132 = (*v128)[4].f64[0];
        _Q5 = (*v128)[3];
        v134 = v128[4];
        v135 = v134[1].f64[0];
        _Q7 = *v134;
        v137 = v134[2].f64[1];
        _Q17 = *(float64x2_t *)((char *)v134 + 24);
        v139 = v134[4].f64[0];
        _Q19 = v134[3];
        v141 = v128[6];
        v95.f64[0] = v141[1].f64[0];
        _Q21 = *v141;
        v143 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v129, v141->f64[0]), v131, *v141, 1), _Q5, v95.f64[0]);
        __asm { FMLA            D23, D2, V21.D[1] }
        v95.f64[0] = _Q23.f64[0] + v132 * v95.f64[0];
        v146 = v128[2];
        _Q23.f64[0] = v146[1].f64[0];
        *(_QWORD *)&v147 = *(_OWORD *)&vaddq_f64(v95, _Q23);
        v148 = vaddq_f64(v143, *v146);
        v149 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v129, _Q7.f64[0]), v131, _Q7, 1), _Q5, v135);
        __asm { FMLA            D23, D2, V7.D[1] }
        v151 = _D23 + v132 * v135;
        v152 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v129, _Q17.f64[0]), v131, _Q17, 1), _Q5, v137);
        __asm { FMLA            D23, D2, V17.D[1] }
        v154 = _D23 + v132 * v137;
        _Q1 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v129, _Q19.f64[0]), v131, _Q19, 1), _Q5, v139);
        __asm { FMLA            D0, D2, V19.D[1] }
        v157 = _D0 + v132 * v139;
        v158 = (float64x2_t)vzip1q_s64(v149, v152);
        _Q4.f64[0] = v151;
        _Q4.f64[1] = v154;
        v160 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v158, v148.f64[0]), (float64x2_t)vzip2q_s64(v149, v152), v148, 1), _Q4, v147);
        _Q5.f64[0] = v148.f64[1];
        __asm { FMLA            D4, D5, V1.D[1] }
        _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], v157, v147);
        v161 = (int8x16_t)vnegq_f64(v160);
        v162 = vdupq_lane_s64(*(uint64_t *)&v154, 0);
        *(int64x2_t *)__dst = v149;
        v163 = vextq_s8(v161, _Q1, 8uLL);
        v161.i64[1] = *(_QWORD *)&v158.f64[1];
        *(int8x16_t *)&__dst[24] = v161;
        *(int64x2_t *)&__dst[40] = vzip2q_s64(v152, v162);
        *(int8x16_t *)&__dst[56] = v163;
        *(int8x16_t *)&__dst[72] = vextq_s8(_Q1, (int8x16_t)*(unint64_t *)&v157, 8uLL);
        *(double *)&__dst[16] = v151;
        *(_QWORD *)&__dst[88] = *(_OWORD *)&vnegq_f64(_Q4);
        if (a4)
        {
          v950 = (void *)0x7FEFFFFFFFFFFFFFLL;
          v953[1] = 0;
          v953[0] = 0;
          v954[0] = 0;
          if (sub_20F403B58((uint64_t)v12[6], (uint64_t *)&v934, (uint64_t)&v931, (__int128 *)__dst, (long double *)&v950, v953, (char **)&v928))
          {
            v166 = __sincos_stret(*(double *)&v950);
            cosval = v166.__cosval;
            *(double *)&v164 = v166.__sinval;
            v167 = -v166.__sinval;
            v923 = 0;
            v924 = 0;
            *(void **)&v168 = v953[0];
            v169 = v953[1];
            v170 = v954[0];
            __n[0] = *(_QWORD *)&v166.__cosval;
            __n[1] = *(_QWORD *)&v166.__sinval;
            v918[0] = 0;
            v918[1] = v953[0];
            v919 = -v166.__sinval;
            v920 = v166.__cosval;
            v921 = 0;
            v171 = 0;
            v922 = v953[1];
            v172 = 1.0;
            v173 = 0;
            *(double *)&v925 = 1.0;
            v174 = 0;
            *(_QWORD *)&v175 = 0;
            *(double *)&v176 = v166.__cosval;
            v926 = v954[0];
            goto LABEL_205;
          }
LABEL_350:
          if (v928)
          {
            v929 = (unsigned int *)v928;
            operator delete(v928);
          }
          if (v931)
          {
            v932 = (char *)v931;
            operator delete(v931);
          }
          if (v934)
          {
            v935 = (char *)v934;
            operator delete(v934);
          }
          v98 = (char *)v937;
          goto LABEL_357;
        }
        if (!sub_20F40478C((uint64_t)v12[7], (uint64_t *)&v934, (uint64_t *)&v931, (double *)__dst, (double *)__n, (char **)&v928))goto LABEL_350;
        *(_QWORD *)&v176 = __n[0];
        *(_QWORD *)&v164 = __n[1];
        *(void **)&v175 = v918[0];
        *(void **)&v168 = v918[1];
        v167 = v919;
        cosval = v920;
        v174 = v921;
        v169 = v922;
        v173 = v923;
        v171 = v924;
        v172 = *(double *)&v925;
        v170 = v926;
LABEL_205:
        *((double *)&v176 + 1) = v167;
        v177 = v173;
        *((double *)&v164 + 1) = cosval;
        v178 = v171;
        *((_QWORD *)&v175 + 1) = v174;
        v179 = *(unint64_t *)&v172;
        *((_QWORD *)&v168 + 1) = v169;
        __asm { FMOV            V4.2D, #1.0 }
        *(_QWORD *)&_Q4 = v170;
        v181 = v948;
        if (v948 >= v949)
        {
          v183 = v947;
          v184 = ((char *)v948 - (char *)v947) >> 7;
          v185 = v184 + 1;
          if ((unint64_t)(v184 + 1) >> 57)
            sub_20E867F44();
          v186 = (char *)v949 - (char *)v947;
          if (((char *)v949 - (char *)v947) >> 6 > v185)
            v185 = v186 >> 6;
          if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFF80)
            v187 = 0x1FFFFFFFFFFFFFFLL;
          else
            v187 = v185;
          if (v187)
          {
            v787 = _Q4;
            v788 = v179;
            v790 = v178;
            v792 = v173;
            v794 = v176;
            v796 = v175;
            v802 = v164;
            *(_OWORD *)__src = v168;
            if (v187 >> 57)
              sub_20E877A38();
            v188 = (char *)operator new(v187 << 7);
            v168 = *(_OWORD *)__src;
            v164 = v802;
            v176 = v794;
            v175 = v796;
            v178 = v790;
            v177 = v792;
            _Q4 = v787;
            v179 = v788;
          }
          else
          {
            v188 = 0;
          }
          v189 = (double *)&v188[128 * v184];
          *(_OWORD *)v189 = v176;
          *((_OWORD *)v189 + 1) = v177;
          *((_OWORD *)v189 + 2) = v164;
          *((_OWORD *)v189 + 3) = v178;
          *((_OWORD *)v189 + 4) = v175;
          *((_OWORD *)v189 + 5) = v179;
          *((_OWORD *)v189 + 6) = v168;
          *((_OWORD *)v189 + 7) = _Q4;
          v190 = v189;
          if (v181 != v183)
          {
            do
            {
              v191 = *((_OWORD *)v181 - 8);
              v192 = *((_OWORD *)v181 - 7);
              v193 = *((_OWORD *)v181 - 5);
              *((_OWORD *)v190 - 6) = *((_OWORD *)v181 - 6);
              *((_OWORD *)v190 - 5) = v193;
              *((_OWORD *)v190 - 8) = v191;
              *((_OWORD *)v190 - 7) = v192;
              v194 = *((_OWORD *)v181 - 4);
              v195 = *((_OWORD *)v181 - 3);
              v196 = *((_OWORD *)v181 - 1);
              *((_OWORD *)v190 - 2) = *((_OWORD *)v181 - 2);
              *((_OWORD *)v190 - 1) = v196;
              *((_OWORD *)v190 - 4) = v194;
              *((_OWORD *)v190 - 3) = v195;
              v190 -= 16;
              v181 -= 16;
            }
            while (v181 != v183);
            v181 = v183;
          }
          v182 = v189 + 16;
          v947 = v190;
          v949 = (double *)&v188[128 * v187];
          if (v181)
            operator delete(v181);
        }
        else
        {
          *(_OWORD *)v948 = v176;
          *((_OWORD *)v181 + 1) = v173;
          *((_OWORD *)v181 + 2) = v164;
          *((_OWORD *)v181 + 3) = v178;
          *((_OWORD *)v181 + 4) = v175;
          *((_OWORD *)v181 + 5) = v179;
          v182 = v181 + 16;
          *((_OWORD *)v181 + 6) = v168;
          *((_OWORD *)v181 + 7) = _Q4;
        }
        v948 = v182;
        v197 = (unsigned int *)v928;
        v198 = v929;
        v951 = 0;
        v950 = 0;
        v952 = 0;
        v199 = (char *)v929 - (_BYTE *)v928;
        if (v929 != v928)
        {
          if ((unint64_t)v199 >= 0x2AAAAAAAAAAAAAA9)
            sub_20E969238();
          v200 = v199 >> 2;
          v201 = (char *)operator new(24 * (v199 >> 2));
          v950 = v201;
          v951 = v201;
          v952 = &v201[24 * v200];
          while (1)
          {
            while (1)
            {
              while (1)
              {
                v203 = *((_QWORD *)v937 + 5 * *v197 + 4);
                *(_OWORD *)v953 = *(_OWORD *)(v203 + 8);
                v954[0] = *(void **)(v203 + 24);
                if (v201 >= v952)
                  break;
                v202 = *(_OWORD *)(v203 + 8);
                *((_QWORD *)v201 + 2) = *(_QWORD *)(v203 + 24);
                *(_OWORD *)v201 = v202;
                v201 += 24;
                v951 = v201;
                if (++v197 == v198)
                  goto LABEL_244;
              }
              v204 = (char *)v950;
              v205 = 0xAAAAAAAAAAAAAAABLL * ((v201 - (_BYTE *)v950) >> 3);
              v206 = v205 + 1;
              if (v205 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20E969238();
              if (0x5555555555555556 * ((v952 - (_BYTE *)v950) >> 3) > v206)
                v206 = 0x5555555555555556 * ((v952 - (_BYTE *)v950) >> 3);
              v207 = 0xAAAAAAAAAAAAAAABLL * ((v952 - (_BYTE *)v950) >> 3) >= 0x555555555555555
                   ? 0xAAAAAAAAAAAAAAALL
                   : v206;
              if (v207)
              {
                if (v207 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E877A38();
                v208 = (char *)operator new(24 * v207);
              }
              else
              {
                v208 = 0;
              }
              v209 = (void **)&v208[24 * v205];
              *(_OWORD *)v209 = *(_OWORD *)v953;
              v209[2] = v954[0];
              v210 = (char *)(v209 + 3);
              if (v201 != v204)
                break;
              v950 = v209;
              v951 = (char *)(v209 + 3);
              v952 = &v208[24 * v207];
LABEL_243:
              operator delete(v201);
              v201 = v210;
              v951 = v210;
              if (++v197 == v198)
              {
LABEL_244:
                v212 = (char *)v950;
                v213 = *((_QWORD *)&v891 + 1);
                v214 = (char *)v891;
                __srca = v950;
                if ((unint64_t)v891 < *((_QWORD *)&v891 + 1))
                  goto LABEL_245;
LABEL_250:
                v219 = (char *)v890;
                v220 = 0xAAAAAAAAAAAAAAABLL * ((v214 - (_BYTE *)v890) >> 3);
                v221 = v220 + 1;
                if (v220 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v222 = 0xAAAAAAAAAAAAAAABLL * ((v213 - (uint64_t)v890) >> 3);
                if (2 * v222 > v221)
                  v221 = 2 * v222;
                if (v222 >= 0x555555555555555)
                  v223 = 0xAAAAAAAAAAAAAAALL;
                else
                  v223 = v221;
                v955 = (char *)&v891 + 8;
                v816 = v69;
                if (v223)
                {
                  if (v223 > 0xAAAAAAAAAAAAAAALL)
                    sub_20E877A38();
                  v224 = (char *)operator new(24 * v223);
                }
                else
                {
                  v224 = 0;
                }
                v225 = &v224[24 * v220];
                v953[0] = v224;
                v953[1] = v225;
                v226 = &v224[24 * v223];
                *((_QWORD *)v225 + 1) = 0;
                v954[0] = v225;
                v954[1] = v226;
                *((_QWORD *)v225 + 2) = 0;
                *(_QWORD *)v225 = 0;
                v227 = v201 - __srca;
                if (v227)
                {
                  if (0xAAAAAAAAAAAAAAABLL * (v227 >> 3) > 0xAAAAAAAAAAAAAAALL)
                    sub_20E969238();
                  v228 = (char *)operator new(v227);
                  *(_QWORD *)v225 = v228;
                  *((_QWORD *)v225 + 2) = &v228[8 * (v227 >> 3)];
                  v229 = 24 * ((v227 - 24) / 0x18uLL) + 24;
                  memcpy(v228, __srca, v229);
                  *((_QWORD *)v225 + 1) = &v228[v229];
                }
                v218 = v225 + 24;
                v954[0] = v225 + 24;
                if (v214 == v219)
                {
                  v890 = v225;
                  *(_QWORD *)&v891 = v225 + 24;
                  *((_QWORD *)&v891 + 1) = v226;
                  v12 = v798;
                  v69 = v816;
                }
                else
                {
                  do
                  {
                    v230 = v225;
                    *((_QWORD *)v225 - 2) = 0;
                    *((_QWORD *)v225 - 1) = 0;
                    v231 = *(_OWORD *)(v214 - 24);
                    v214 -= 24;
                    *(_OWORD *)(v225 - 24) = v231;
                    v225 -= 24;
                    *((_QWORD *)v230 - 1) = *((_QWORD *)v214 + 2);
                    *(_QWORD *)v214 = 0;
                    *((_QWORD *)v214 + 1) = 0;
                    *((_QWORD *)v214 + 2) = 0;
                  }
                  while (v214 != v219);
                  v214 = (char *)v890;
                  v232 = (char *)v891;
                  v890 = v225;
                  v891 = *(_OWORD *)v954;
                  v218 = v954[0];
                  v12 = v798;
                  v69 = v816;
                  if (v232 != v214)
                  {
                    v233 = v232;
                    do
                    {
                      v235 = (void *)*((_QWORD *)v233 - 3);
                      v233 -= 24;
                      v234 = v235;
                      if (v235)
                      {
                        *((_QWORD *)v232 - 2) = v234;
                        operator delete(v234);
                      }
                      v232 = v233;
                    }
                    while (v233 != v214);
                  }
                }
                if (v214)
                  operator delete(v214);
                goto LABEL_273;
              }
            }
            do
            {
              v211 = *(_OWORD *)(v201 - 24);
              *(v209 - 1) = (void *)*((_QWORD *)v201 - 1);
              *(_OWORD *)(v209 - 3) = v211;
              v209 -= 3;
              v201 -= 24;
            }
            while (v201 != v204);
            v201 = (char *)v950;
            v950 = v209;
            v951 = v210;
            v952 = &v208[24 * v207];
            if (v201)
              goto LABEL_243;
            v201 = v210;
            v951 = v210;
            if (++v197 == v198)
              goto LABEL_244;
          }
        }
        v201 = 0;
        v212 = 0;
        v213 = *((_QWORD *)&v891 + 1);
        v214 = (char *)v891;
        __srca = 0;
        if ((unint64_t)v891 >= *((_QWORD *)&v891 + 1))
          goto LABEL_250;
LABEL_245:
        *(_QWORD *)v214 = 0;
        *((_QWORD *)v214 + 1) = 0;
        *((_QWORD *)v214 + 2) = 0;
        v215 = v201 - v212;
        if (v201 != v212)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v215 >> 3) > 0xAAAAAAAAAAAAAAALL)
            sub_20E969238();
          v216 = (char *)operator new(v215);
          *(_QWORD *)v214 = v216;
          *((_QWORD *)v214 + 1) = v216;
          *((_QWORD *)v214 + 2) = &v216[8 * (v215 >> 3)];
          v217 = 24 * ((v215 - 24) / 0x18uLL) + 24;
          memcpy(v216, __srca, v217);
          *((_QWORD *)v214 + 1) = &v216[v217];
        }
        v218 = v214 + 24;
LABEL_273:
        *(_QWORD *)&v891 = v218;
        v236 = v870;
        if (v67 < v821)
        {
          v237 = *(_OWORD *)v69;
          *((_QWORD *)v67 + 2) = v69[2];
          *(_OWORD *)v67 = v237;
          v238 = *(_OWORD *)v877;
          *((_QWORD *)v67 + 5) = *((_QWORD *)v877 + 2);
          *(_OWORD *)(v67 + 24) = v238;
          v67 += 48;
          goto LABEL_290;
        }
        v239 = 0xAAAAAAAAAAAAAAABLL * ((v67 - v870) >> 4);
        v240 = v239 + 1;
        if (v239 + 1 > 0x555555555555555)
          sub_20E867F44();
        if (0x5555555555555556 * ((v821 - v870) >> 4) > v240)
          v240 = 0x5555555555555556 * ((v821 - v870) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v821 - v870) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v241 = 0x555555555555555;
        else
          v241 = v240;
        if (v241)
        {
          if (v241 > 0x555555555555555)
            sub_20E877A38();
          v242 = (char *)operator new(48 * v241);
          v236 = v870;
        }
        else
        {
          v242 = 0;
        }
        v243 = &v242[16 * ((v67 - v870) >> 4)];
        v244 = *(_OWORD *)v69;
        *((_QWORD *)v243 + 2) = v69[2];
        *(_OWORD *)v243 = v244;
        v245 = *(_OWORD *)v877;
        *((_QWORD *)v243 + 5) = *((_QWORD *)v877 + 2);
        *(_OWORD *)(v243 + 24) = v245;
        if (v67 == v236)
        {
          v249 = v67;
          v821 = &v242[48 * v241];
          v67 = v243 + 48;
          v870 = &v242[48 * v239];
          if (v249)
            goto LABEL_289;
        }
        else
        {
          v246 = &v242[16 * ((v67 - v870) >> 4)];
          do
          {
            v247 = *((_OWORD *)v67 - 3);
            v248 = *((_OWORD *)v67 - 1);
            *((_OWORD *)v246 - 2) = *((_OWORD *)v67 - 2);
            *((_OWORD *)v246 - 1) = v248;
            *((_OWORD *)v246 - 3) = v247;
            v246 -= 48;
            v67 -= 48;
          }
          while (v67 != v236);
          v249 = v236;
          v821 = &v242[48 * v241];
          v67 = v243 + 48;
          v870 = v246;
          if (v236)
LABEL_289:
            operator delete(v249);
        }
LABEL_290:
        v250 = (char *)v928;
        v251 = v929;
        v252 = (char *)v929 - (_BYTE *)v928;
        v253 = ((char *)v929 - (_BYTE *)v928) >> 2;
        v254 = *(_QWORD *)&v957[16];
        v255 = *(char **)v957;
        if (v253 > (uint64_t)(*(_QWORD *)&v957[16] - *(_QWORD *)v957) >> 2)
        {
          if (*(_QWORD *)v957)
          {
            *(_QWORD *)&v957[8] = *(_QWORD *)v957;
            operator delete(*(void **)v957);
            v254 = 0;
            memset(v957, 0, 24);
          }
          if ((v252 & 0x8000000000000000) != 0)
            goto LABEL_760;
          v256 = v254 >> 1;
          if (v254 >> 1 <= v253)
            v256 = v253;
          v257 = (unint64_t)v254 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v256;
          if (v257 >> 62)
LABEL_760:
            sub_20E867F44();
          v258 = (char *)operator new(4 * v257);
          v255 = v258;
          *(_QWORD *)v957 = v258;
          *(_QWORD *)&v957[8] = v258;
          *(_QWORD *)&v957[16] = &v258[4 * v257];
          if (v251 != (unsigned int *)v250)
            memcpy(v258, v250, v252);
          goto LABEL_310;
        }
        v259 = (uint64_t)(*(_QWORD *)&v957[8] - *(_QWORD *)v957) >> 2;
        if (v259 >= v253)
        {
          if (v929 != v928)
          {
            v261 = *(void **)v957;
            v260 = (char *)v928;
            goto LABEL_309;
          }
        }
        else
        {
          if (*(_QWORD *)&v957[8] != *(_QWORD *)v957)
          {
            memmove(*(void **)v957, v928, *(_QWORD *)&v957[8] - *(_QWORD *)v957);
            v255 = *(char **)&v957[8];
          }
          v260 = &v250[4 * v259];
          v252 = (char *)v251 - v260;
          if (v251 == (unsigned int *)v260)
            goto LABEL_310;
          v261 = v255;
LABEL_309:
          memmove(v261, v260, v252);
        }
LABEL_310:
        v58 = 0xAAAAAAAAAAAAAAALL;
        v262 = &v255[v252];
        *(_QWORD *)&v957[8] = &v255[v252];
        if (a8)
        {
          v264 = (_OWORD *)a7[2];
          v263 = a7[3];
          if ((unint64_t)v264 >= v263)
          {
            v269 = (_OWORD *)*v783;
            v270 = 0xF0F0F0F0F0F0F0F1 * (((uint64_t)v264 - *v783) >> 3);
            v271 = v270 + 1;
            if (v270 + 1 > 0x1E1E1E1E1E1E1E1)
              sub_20E867F44();
            v272 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v263 - (_QWORD)v269) >> 3);
            if (2 * v272 > v271)
              v271 = 2 * v272;
            if (v272 >= 0xF0F0F0F0F0F0F0)
              v273 = 0x1E1E1E1E1E1E1E1;
            else
              v273 = v271;
            if (v273 > 0x1E1E1E1E1E1E1E1)
              sub_20E877A38();
            v274 = (char *)operator new(136 * v273);
            v275 = *(_OWORD *)v877;
            v276 = &v274[136 * v270];
            *((_QWORD *)v276 + 2) = *((_QWORD *)v877 + 2);
            v277 = &v274[136 * v273];
            v278 = *(_QWORD *)&v956[40];
            *((_QWORD *)v276 + 5) = *(_QWORD *)&v956[16];
            v279 = *(_QWORD *)&v956[48];
            v280 = *(_QWORD *)&v956[72];
            *((_QWORD *)v276 + 8) = v278;
            *((_QWORD *)v276 + 9) = v279;
            *((_QWORD *)v276 + 11) = 0;
            *((_QWORD *)v276 + 12) = 0;
            v281 = *(_QWORD *)v957;
            v282 = *(_QWORD *)&v957[16];
            *((_QWORD *)v276 + 12) = v280;
            *((_QWORD *)v276 + 13) = v281;
            *(_OWORD *)v276 = v275;
            *(_OWORD *)(v276 + 24) = *(_OWORD *)v956;
            memset(v956, 0, 24);
            *((_OWORD *)v276 + 3) = *(_OWORD *)&v956[24];
            memset(&v956[24], 0, 24);
            *((_OWORD *)v276 + 5) = *(_OWORD *)&v956[56];
            memset(&v956[56], 0, 24);
            *((_QWORD *)v276 + 14) = 0;
            *((_QWORD *)v276 + 15) = 0;
            *((_QWORD *)v276 + 14) = v262;
            *((_QWORD *)v276 + 15) = v282;
            memset(v957, 0, 24);
            v268 = v276 + 136;
            *((_WORD *)v276 + 64) = *(_WORD *)&v957[24];
            if (v264 == v269)
            {
              a7[1] = v276;
              a7[2] = v268;
              a7[3] = v277;
              v58 = 0xAAAAAAAAAAAAAAALL;
            }
            else
            {
              v283 = 0;
              do
              {
                v284 = &v276[v283];
                v285 = (char *)v264 + v283;
                v286 = *(_OWORD *)((char *)v264 + v283 - 136);
                *((_QWORD *)v284 - 15) = *(_QWORD *)((char *)v264 + v283 - 120);
                *(_OWORD *)(v284 - 136) = v286;
                *((_OWORD *)v284 - 7) = *(_OWORD *)((char *)v264 + v283 - 112);
                *((_QWORD *)v284 - 12) = *(_QWORD *)((char *)v264 + v283 - 96);
                *((_QWORD *)v285 - 14) = 0;
                *((_QWORD *)v285 - 13) = 0;
                *((_QWORD *)v285 - 12) = 0;
                *(_OWORD *)(v284 - 88) = *(_OWORD *)((char *)v264 + v283 - 88);
                *((_QWORD *)v284 - 9) = *(_QWORD *)((char *)v264 + v283 - 72);
                *((_QWORD *)v285 - 11) = 0;
                *((_QWORD *)v285 - 10) = 0;
                *((_QWORD *)v285 - 9) = 0;
                *((_QWORD *)v284 - 8) = *(_QWORD *)((char *)v264 + v283 - 64);
                *(_OWORD *)(v284 - 56) = *(_OWORD *)((char *)v264 + v283 - 56);
                *((_QWORD *)v284 - 5) = *(_QWORD *)((char *)v264 + v283 - 40);
                *((_QWORD *)v285 - 7) = 0;
                *((_QWORD *)v285 - 6) = 0;
                *((_QWORD *)v285 - 5) = 0;
                *((_OWORD *)v284 - 2) = *(_OWORD *)((char *)v264 + v283 - 32);
                *((_QWORD *)v284 - 2) = *(_QWORD *)((char *)v264 + v283 - 16);
                *((_QWORD *)v285 - 4) = 0;
                *((_QWORD *)v285 - 3) = 0;
                *((_QWORD *)v285 - 2) = 0;
                *((_WORD *)v284 - 4) = *(_WORD *)((char *)v264 + v283 - 8);
                v283 -= 136;
              }
              while ((_OWORD *)((char *)v264 + v283) != v269);
              v264 = (_OWORD *)a7[1];
              v287 = (_OWORD *)a7[2];
              a7[1] = &v276[v283];
              a7[2] = v268;
              a7[3] = v277;
              while (1)
              {
                v58 = 0xAAAAAAAAAAAAAAALL;
                if (v287 == v264)
                  break;
                v289 = (void *)*((_QWORD *)v287 - 4);
                if (v289)
                {
                  *((_QWORD *)v287 - 3) = v289;
                  operator delete(v289);
                }
                v290 = (void *)*((_QWORD *)v287 - 7);
                if (v290)
                {
                  *((_QWORD *)v287 - 6) = v290;
                  operator delete(v290);
                }
                v291 = (void *)*((_QWORD *)v287 - 11);
                if (v291)
                {
                  *((_QWORD *)v287 - 10) = v291;
                  operator delete(v291);
                }
                v292 = *((_QWORD *)v287 - 14);
                if (v292)
                {
                  v293 = *((_QWORD *)v287 - 13);
                  v288 = (void *)*((_QWORD *)v287 - 14);
                  if (v293 != v292)
                  {
                    do
                    {
                      v294 = *(void **)(v293 - 24);
                      if (v294)
                      {
                        *(_QWORD *)(v293 - 16) = v294;
                        operator delete(v294);
                      }
                      v295 = *(void **)(v293 - 48);
                      if (v295)
                      {
                        *(_QWORD *)(v293 - 40) = v295;
                        operator delete(v295);
                      }
                      v293 -= 112;
                    }
                    while (v293 != v292);
                    v288 = (void *)*((_QWORD *)v287 - 14);
                  }
                  *((_QWORD *)v287 - 13) = v292;
                  operator delete(v288);
                }
                v287 = (_OWORD *)((char *)v287 - 136);
              }
            }
            if (v264)
              operator delete(v264);
          }
          else
          {
            v265 = *(_OWORD *)v877;
            *((_QWORD *)v264 + 2) = *((_QWORD *)v877 + 2);
            *v264 = v265;
            *(_OWORD *)((char *)v264 + 24) = *(_OWORD *)v956;
            *((_QWORD *)v264 + 5) = *(_QWORD *)&v956[16];
            memset(v956, 0, 24);
            v264[3] = *(_OWORD *)&v956[24];
            v266 = *(_QWORD *)&v956[40];
            v267 = *(_QWORD *)&v956[48];
            memset(&v956[24], 0, 24);
            *((_QWORD *)v264 + 8) = v266;
            *((_QWORD *)v264 + 9) = v267;
            v264[5] = *(_OWORD *)&v956[56];
            *((_QWORD *)v264 + 12) = *(_QWORD *)&v956[72];
            memset(&v956[56], 0, 24);
            *(_OWORD *)((char *)v264 + 104) = *(_OWORD *)v957;
            *((_QWORD *)v264 + 15) = *(_QWORD *)&v957[16];
            memset(v957, 0, 24);
            *((_WORD *)v264 + 64) = *(_WORD *)&v957[24];
            v268 = (char *)v264 + 136;
          }
          a7[2] = v268;
        }
        v68 = v870;
        if (__srca)
          operator delete(__srca);
        goto LABEL_350;
      }
LABEL_357:
      if (v98)
      {
        v296 = v98;
        if (v938 != v98)
        {
          v297 = v938 - 40;
          v298 = (void (***)(char *))(v938 - 40);
          do
          {
            v299 = *v298;
            v298 -= 5;
            (*v299)(v297);
            _ZF = v297 == v98;
            v297 = (char *)v298;
          }
          while (!_ZF);
          v296 = v937;
        }
        v938 = v98;
        operator delete(v296);
      }
      if (*(_QWORD *)v957)
      {
        *(_QWORD *)&v957[8] = *(_QWORD *)v957;
        operator delete(*(void **)v957);
      }
      if (*(_QWORD *)&v956[56])
      {
        *(_QWORD *)&v956[64] = *(_QWORD *)&v956[56];
        operator delete(*(void **)&v956[56]);
      }
      if (*(_QWORD *)&v956[24])
      {
        *(_QWORD *)&v956[32] = *(_QWORD *)&v956[24];
        operator delete(*(void **)&v956[24]);
      }
      v300 = *(_QWORD *)v956;
      if (*(_QWORD *)v956)
      {
        v301 = *(_QWORD *)&v956[8];
        v302 = *(void **)v956;
        if (*(_QWORD *)&v956[8] != *(_QWORD *)v956)
        {
          do
          {
            v303 = *(void **)(v301 - 24);
            if (v303)
            {
              *(_QWORD *)(v301 - 16) = v303;
              operator delete(v303);
            }
            v304 = *(void **)(v301 - 48);
            if (v304)
            {
              *(_QWORD *)(v301 - 40) = v304;
              operator delete(v304);
            }
            v301 -= 112;
          }
          while (v301 != v300);
          v302 = *(void **)v956;
        }
        *(_QWORD *)&v956[8] = v300;
        operator delete(v302);
      }
      if (v939)
      {
        v940 = v939;
        operator delete(v939);
      }
      if (v941)
      {
        v942 = v941;
        operator delete(v941);
      }
      v69 += 3;
      v70 = v851;
    }
    v877 += 24;
  }
  while (v877 != v780);
  v308 = v68;
  v305 = v947;
  v888[0] = 0;
  v887[0] = 0;
  v887[1] = 0;
  v309 = (char *)v948 - (char *)v947;
  if (v948 == v947)
  {
    v889 = 0uLL;
    v888[1] = 0;
    v312 = v67 - v308;
    if (v67 != v308)
      goto LABEL_393;
LABEL_399:
    v306 = v67;
    v307 = v945[0];
    if (!v945[0])
      goto LABEL_400;
    goto LABEL_420;
  }
  if (v309 < 0)
    sub_20E867F44();
  v310 = (char *)operator new((char *)v948 - (char *)v947);
  v887[0] = v310;
  v888[0] = &v310[128 * (v309 >> 7)];
  v311 = v309 & 0xFFFFFFFFFFFFFF80;
  memcpy(v310, v305, v311);
  v887[1] = &v310[v311];
  v889 = 0uLL;
  v888[1] = 0;
  v312 = v67 - v308;
  if (v67 == v308)
    goto LABEL_399;
LABEL_393:
  v313 = 0xAAAAAAAAAAAAAAABLL * (v312 >> 4);
  if (v313 > 0x555555555555555)
    sub_20E867F44();
  v306 = v308;
  v314 = (char *)operator new(v312);
  v315 = 0;
  v888[1] = v314;
  *((_QWORD *)&v889 + 1) = &v314[48 * v313];
  do
  {
    v316 = &v308[v315];
    v317 = &v314[v315];
    v318 = *(_OWORD *)&v308[v315];
    *((_QWORD *)v317 + 2) = *(_QWORD *)&v308[v315 + 16];
    *(_OWORD *)v317 = v318;
    v319 = *(_OWORD *)&v308[v315 + 24];
    *((_QWORD *)v317 + 5) = *(_QWORD *)&v308[v315 + 40];
    *(_OWORD *)(v317 + 24) = v319;
    v315 += 48;
  }
  while (v316 + 48 != v67);
  *(_QWORD *)&v889 = &v314[v315];
  v307 = v945[0];
  if (v945[0])
  {
    do
    {
LABEL_420:
      v388 = (_QWORD *)*v307;
      v389 = (void *)v307[5];
      if (v389)
      {
        v307[6] = v389;
        operator delete(v389);
      }
      operator delete(v307);
      v307 = v388;
    }
    while (v388);
  }
LABEL_400:
  v320 = (void *)v944[0];
  v944[0] = 0;
  if (v320)
    operator delete(v320);
  if (v306)
  {
    operator delete(v306);
    v305 = v947;
  }
  if (v305)
  {
    v948 = v305;
    operator delete(v305);
  }
  v321 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)v12[3][53] + 1784), (uint64_t *)v915);
  if (v321)
    v322 = (float64x2_t **)(v321 + 5);
  else
    v322 = 0;
  if (!v321
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MultiFramePoseRefiner.cpp", 99, (uint64_t)"ref_pose_ref", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  _D10 = (*v322)[2].f64[1];
  v864 = *(float64x2_t *)((char *)*v322 + 24);
  *(float64x2_t *)v871 = **v322;
  v324 = (*v322)[4].f64[0];
  v878 = (*v322)[3];
  v325 = v322[4];
  v837 = v325[1].f64[0];
  v326 = *v325;
  v846 = v325[2].f64[1];
  v842 = *(float64x2_t *)((char *)v325 + 24);
  v857 = v325[4].f64[0];
  v852 = v325[3];
  *((_QWORD *)&v327 + 1) = *(_QWORD *)&v325[3].f64[1];
  v328 = v322[6];
  v827 = v328[1].f64[0];
  *(float64x2_t *)__srcb = v326;
  v329 = *v328;
  v330 = v322[2];
  *(float64_t *)&v327 = v330[1].f64[0];
  *(_OWORD *)v822 = v327;
  v812 = v329;
  v817 = *v330;
  v331 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)v12[1][53] + 1784), *v12);
  if (v331)
    v334 = (float64x2_t **)(v331 + 5);
  else
    v334 = 0;
  if (!v331
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MultiFramePoseRefiner.cpp", 103, (uint64_t)"query_pose_ref", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  _V3.D[1] = v812.f64[1];
  _V5.D[1] = __srcb[1];
  __asm { FMLA            D1, D10, V3.D[1] }
  _Q1.f64[0] = _Q1.f64[0] + v324 * v827;
  *(_QWORD *)&v337 = *(_OWORD *)&vaddq_f64(_Q1, *(float64x2_t *)v822);
  _Q0 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v871, v812.f64[0]), v864, v812, 1), v878, v827), v817);
  _V18.D[1] = v842.f64[1];
  v340 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v871, *(double *)__srcb), v864, *(float64x2_t *)__srcb, 1), v878, v837);
  __asm { FMLA            D3, D10, V5.D[1] }
  v342.f64[0] = _D3 + v324 * v837;
  v343 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v871, v842.f64[0]), v864, v842, 1), v878, v846);
  __asm { FMLA            D4, D10, V18.D[1] }
  v345 = _D4 + v324 * v846;
  _V18.D[1] = v852.f64[1];
  __asm { FMLA            D4, D10, V18.D[1] }
  v348 = (float64x2_t)vzip1q_s64(v340, v343);
  v770 = vextq_s8((int8x16_t)v348, (int8x16_t)v348, 8uLL).u64[0];
  _Q3 = (float64x2_t)vzip2q_s64(v340, v343);
  v765 = (int64x2_t)v348;
  v766 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v871, v852.f64[0]), v864, v852, 1), v878, v857);
  v786 = _Q3;
  v759 = _D4 + v324 * v857;
  v760 = v345;
  v342.f64[1] = v345;
  _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v348, _Q0.f64[0]), _Q3, _Q0, 1), v342, v337);
  _Q0.f64[0] = _Q0.f64[1];
  __asm { FMLA            D3, D0, V16.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v759, v337);
  v789 = (float64x2_t)vdupq_laneq_s64(v766, 1).u64[0];
  v791 = v342;
  *(_QWORD *)&v351.f64[0] = *(_OWORD *)&vnegq_f64(_Q3);
  v351.f64[1] = 1.0;
  v784 = v351;
  v785 = vnegq_f64(_Q2);
  v352 = **v334;
  _Q2.f64[0] = (*v334)[2].f64[1];
  v353 = *(float64x2_t *)((char *)*v334 + 24);
  v354 = (*v334)[4].f64[0];
  v355 = (*v334)[3];
  v356 = v334[4];
  v357 = v356[1].f64[0];
  _Q7 = *v356;
  v359 = v356[2].f64[1];
  _Q17 = *(float64x2_t *)((char *)v356 + 24);
  v361 = v356[4].f64[0];
  _Q19 = v356[3];
  v363 = v334[6];
  v333.f64[0] = v363[1].f64[0];
  _Q21 = *v363;
  _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v352, v363->f64[0]), v353, *v363, 1), v355, v333.f64[0]);
  __asm { FMLA            D23, D2, V21.D[1] }
  v333.f64[0] = _D23 + v354 * v333.f64[0];
  v367 = v334[2];
  _Q21.f64[0] = v367[1].f64[0];
  *(_QWORD *)&v368 = *(_OWORD *)&vaddq_f64(v333, _Q21);
  v369 = vaddq_f64(_Q22, *v367);
  v370 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v352, _Q7.f64[0]), v353, _Q7, 1), v355, v357);
  __asm { FMLA            D22, D2, V7.D[1] }
  _Q7.f64[0] = _Q22.f64[0] + v354 * v357;
  v371 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v352, _Q17.f64[0]), v353, _Q17, 1), v355, v359);
  __asm { FMLA            D6, D2, V17.D[1] }
  v373 = _D6 + v354 * v359;
  _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v352, _Q19.f64[0]), v353, _Q19, 1), v355, v361);
  __asm { FMLA            D0, D2, V19.D[1] }
  v352.f64[0] = _Q0.f64[0] + v354 * v361;
  v795 = (float64x2_t)v371;
  v797 = (float64x2_t)v370;
  v858 = (float64x2_t)vzip2q_s64(v370, v371);
  v865 = (float64x2_t)vzip1q_s64(v370, v371);
  v768 = v373;
  v769 = *(_QWORD *)&_Q7.f64[0];
  _Q0.f64[0] = _Q7.f64[0];
  _Q0.f64[1] = v373;
  _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v865, v369.f64[0]), v858, v369, 1), _Q0, v368);
  v764 = _Q2;
  _Q0.f64[0] = v369.f64[1];
  v793 = _Q16;
  __asm { FMLA            D2, D0, V16.D[1] }
  v376 = (float64x2_t *)v887[0];
  v377 = (float64x2_t *)v887[1];
  v767 = *(uint64_t *)&v352.f64[0];
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v352.f64[0], v368);
  v763 = _Q2;
  memset(v956, 0, 24);
  v378 = (char *)v887[1] - (char *)v887[0];
  if (v887[1] == v887[0])
  {
    v379 = 0;
    v428 = 0uLL;
    memset(__dst, 0, 32);
    *(_DWORD *)&__dst[32] = 1065353216;
    goto LABEL_454;
  }
  if (v378 < 0)
    sub_20E867F44();
  v379 = (float64x2_t *)operator new((char *)v887[1] - (char *)v887[0]);
  *(_QWORD *)&_Q0.f64[0] = vextq_s8((int8x16_t)v865, (int8x16_t)v865, 8uLL).u64[0];
  v872 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v793, 1);
  v381 = vextq_s8((int8x16_t)v858, (int8x16_t)v872, 8uLL);
  v382 = vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v858.f64[0], 0), v381, 8uLL);
  *(_QWORD *)v956 = v379;
  *(_QWORD *)&v956[8] = v379;
  *(_QWORD *)&v956[16] = &v379[8 * (v378 >> 7)];
  _V5.D[1] = v764.f64[1];
  *(_QWORD *)&_Q0.f64[1] = vextq_s8(v382, v382, 8uLL).u64[0];
  v384 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v865, (int64x2_t)v382), v764.f64[0]), _Q0, v764, 1);
  _Q0.f64[0] = v793.f64[0];
  *(_QWORD *)&_Q0.f64[1] = vdupq_laneq_s64((int64x2_t)v381, 1).u64[0];
  v385 = (int64x2_t)vmlaq_n_f64(v384, _Q0, v763.f64[0]);
  _D3 = v768;
  __asm { FMLA            D0, D3, V5.D[1] }
  *(_QWORD *)&v387.f64[0] = v765.i64[0];
  *(_QWORD *)&v387.f64[1] = v770;
  v853 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v797, 1);
  v859 = v387;
  v843 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v795, 1);
  v847 = (float64x2_t)vdupq_lane_s64(v769, 0);
  __srcc = (float64x2_t)vdupq_lane_s64(v767, 0);
  v838 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v768, 0);
  v866 = *(double *)v385.i64;
  v823 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(_Q0.f64[0] + *(double *)&v767 * v763.f64[0]), 0);
  v828 = (float64x2_t)vdupq_laneq_s64(v385, 1);
  v58 = 0x1FFFFFFFFFFFFFFLL;
  while (1)
  {
LABEL_423:
    while (1)
    {
      v390 = v376[1];
      v392 = v376[2];
      v391 = v376[3];
      v394 = v376[4];
      v393 = v376[5];
      v396 = v376[6];
      v395 = v376[7];
      v397 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v859, v376->f64[0]), v786, *v376, 1), v791, v390.f64[0]), v785, v390, 1);
      v398 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v766.u64[0], v376->f64[0]), v789, *v376, 1), (float64x2_t)*(unint64_t *)&v759, v390.f64[0]), v784, v390, 1);
      v399 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v859, v392.f64[0]), v786, v392, 1), v791, v391.f64[0]), v785, v391, 1);
      v400 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v766.u64[0], v392.f64[0]), v789, v392, 1), (float64x2_t)*(unint64_t *)&v759, v391.f64[0]), v784, v391, 1);
      v401 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v859, v394.f64[0]), v786, v394, 1), v791, v393.f64[0]), v785, v393, 1);
      v402 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v766.u64[0], v394.f64[0]), v789, v394, 1), (float64x2_t)*(unint64_t *)&v759, v393.f64[0]), v784, v393, 1);
      v403 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v859, v396.f64[0]), v786, v396, 1), v791, v395.f64[0]), v785, v395, 1);
      v404 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v766.u64[0], v396.f64[0]), v789, v396, 1), (float64x2_t)*(unint64_t *)&v759, v395.f64[0]), v784, v395, 1);
      v405 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v397, v797.f64[0]), v853, v399), v847, v401), (float64x2_t)0, v403);
      v406 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v397, v795.f64[0]), v843, v399), v838, v401), (float64x2_t)0, v403);
      v407 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v397, v793.f64[0]), v872, v399), __srcc, v401), (float64x2_t)0, v403);
      v408 = vaddq_f64(v403, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v397, v866), v828, v399), v823, v401));
      v409 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v398, v797.f64[0]), v853, v400), v847, v402), (float64x2_t)0, v404);
      v410 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v398, v795.f64[0]), v843, v400), v838, v402), (float64x2_t)0, v404);
      v411 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v398, v793.f64[0]), v872, v400), __srcc, v402), (float64x2_t)0, v404);
      v412 = vaddq_f64(v404, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v398, v866), v828, v400), v823, v402));
      if ((unint64_t)v379 >= *(_QWORD *)&v956[16])
        break;
      *v379 = v405;
      v379[1] = v409;
      v379[2] = v406;
      v379[3] = v410;
      v379[4] = v407;
      v379[5] = v411;
      v379[6] = v408;
      v379[7] = v412;
      v379 += 8;
      *(_QWORD *)&v956[8] = v379;
      v376 += 8;
      if (v376 == v377)
        goto LABEL_441;
    }
    v413 = *(float64x2_t **)v956;
    v414 = ((uint64_t)v379 - *(_QWORD *)v956) >> 7;
    v415 = v414 + 1;
    if ((unint64_t)(v414 + 1) >> 57)
      sub_20E867F44();
    v416 = *(_QWORD *)&v956[16] - *(_QWORD *)v956;
    if ((uint64_t)(*(_QWORD *)&v956[16] - *(_QWORD *)v956) >> 6 > v415)
      v415 = v416 >> 6;
    v417 = (unint64_t)v416 >= 0x7FFFFFFFFFFFFF80 ? 0x1FFFFFFFFFFFFFFLL : v415;
    if (v417)
    {
      v776 = v409;
      v778 = v410;
      v781 = v412;
      v803 = v411;
      v806 = v408;
      v809 = v407;
      v813 = v406;
      v818 = v405;
      if (v417 >> 57)
        sub_20E877A38();
      v418 = (char *)operator new(v417 << 7);
      v406 = v813;
      v405 = v818;
      v408 = v806;
      v407 = v809;
      v411 = v803;
      v410 = v778;
      v412 = v781;
      v409 = v776;
    }
    else
    {
      v418 = 0;
    }
    v419 = (float64x2_t *)&v418[128 * v414];
    *v419 = v405;
    v419[1] = v409;
    v419[2] = v406;
    v419[3] = v410;
    v419[4] = v407;
    v419[5] = v411;
    v420 = v419 + 8;
    v419[6] = v408;
    v419[7] = v412;
    if (v379 == v413)
      break;
    do
    {
      v421 = v379[-8];
      v422 = v379[-7];
      v423 = v379[-5];
      v419[-6] = v379[-6];
      v419[-5] = v423;
      v419[-8] = v421;
      v419[-7] = v422;
      v424 = v379[-4];
      v425 = v379[-3];
      v426 = v379[-1];
      v419[-2] = v379[-2];
      v419[-1] = v426;
      v419[-4] = v424;
      v419[-3] = v425;
      v419 -= 8;
      v379 -= 8;
    }
    while (v379 != v413);
    *(_QWORD *)v956 = v419;
    *(_QWORD *)&v956[8] = v420;
    *(_QWORD *)&v956[16] = &v418[128 * v417];
    if (v413)
      goto LABEL_440;
    v379 = v420;
    *(_QWORD *)&v956[8] = v420;
    v376 += 8;
    if (v376 == v377)
      goto LABEL_441;
  }
  *(_QWORD *)v956 = v419;
  *(_QWORD *)&v956[8] = v419 + 8;
  v413 = v379;
  *(_QWORD *)&v956[16] = &v418[128 * v417];
LABEL_440:
  operator delete(v413);
  v379 = v420;
  *(_QWORD *)&v956[8] = v420;
  v376 += 8;
  if (v376 != v377)
    goto LABEL_423;
LABEL_441:
  v427 = *(char **)v956;
  v428 = 0uLL;
  memset(__dst, 0, 32);
  *(_DWORD *)&__dst[32] = 1065353216;
  if (v379 == *(float64x2_t **)v956)
  {
LABEL_454:
    prime = 0;
    *(_OWORD *)__n = v428;
    *(_OWORD *)v918 = v428;
    LODWORD(v919) = 1065353216;
    v427 = (char *)v379;
    goto LABEL_455;
  }
  v429 = 0;
  v430 = ((uint64_t)v379 - *(_QWORD *)v956) >> 7;
  v58 = *(_QWORD *)v956 + 224;
  do
  {
    v432 = v429++;
    v431 = ((char *)v379 - v427) >> 7;
    if (v429 < v431)
    {
      v433 = v427;
      v434 = (float64x2_t *)&v427[128 * v432];
      v435 = v58;
      v436 = v429;
      do
      {
        v437 = v434[1];
        v439 = v434[2];
        v438 = v434[3];
        v441 = v434[4];
        v440 = v434[5];
        v443 = v434[6];
        v442 = v434[7];
        v444 = *(double *)(v435 - 48);
        v445 = *(float64x2_t *)(v435 - 32);
        v824 = *(double *)(v435 + 16);
        v829 = *(float64x2_t *)(v435 - 96);
        v814 = *(float64x2_t *)v435;
        v819 = *(float64x2_t *)(v435 - 64);
        v446 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*v434, v829, 1), v439, v819, 1), v441, v445, 1), (float64x2_t)0, v443);
        v804 = (int8x16_t)v445;
        v807 = *(double *)(v435 - 16);
        v844 = v439;
        v848 = *v434;
        v854 = v441;
        v860 = v442;
        __srce = *(double *)(v435 - 80);
        v839 = v443;
        v447 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v434, __srce), v439, v444), v441, v807), (float64x2_t)0, v443);
        *(float64x2_t *)v873 = v438;
        v879 = v437;
        v810 = v444;
        v867 = v440;
        *(float64x2_t *)v956 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v434, v829.f64[0]), v439, v819.f64[0]), v441, v445.f64[0]), (float64x2_t)0, v443);
        *(float64x2_t *)&v956[24] = v446;
        *(_QWORD *)&v956[16] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v437, v829.f64[0]), v438, v819.f64[0]), v440, v445.f64[0]), (float64x2_t)0, v442);
        *(_QWORD *)&v956[40] = *(_OWORD *)&vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v437, v829, 1), v438, v819, 1), v440, v445, 1), (float64x2_t)0, v442);
        *(float64x2_t *)&v956[48] = v447;
        *(_QWORD *)&v956[64] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v437, __srce), v438, v444), v440, v807), (float64x2_t)0, v442);
        v944[1] = 0;
        v944[0] = 0;
        v945[0] = 0;
        sub_20E9733B8((float64x2_t *)v956, (double *)v944);
        v448 = v829;
        *(_QWORD *)&v449.f64[0] = vextq_s8((int8x16_t)v448, (int8x16_t)v448, 8uLL).u64[0];
        _Q16 = v814;
        *(_QWORD *)&_Q16.f64[1] = vextq_s8((int8x16_t)_Q16, (int8x16_t)_Q16, 8uLL).u64[0];
        _D17 = v807;
        _D2 = vextq_s8(v804, v804, 8uLL).u64[0];
        __asm { FMLS            D4, D2, V16.D[1] }
        _Q2.f64[0] = __srce;
        _Q2.f64[1] = v810;
        _D6 = v824;
        __asm { FMLS            D4, D17, V6.D[0] }
        *(_QWORD *)&v449.f64[1] = vextq_s8((int8x16_t)v819, (int8x16_t)v819, 8uLL).u64[0];
        v448.f64[1] = v819.f64[0];
        v457 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v448, vnegq_f64(_Q16).f64[0]), v449, _Q16, 1), _Q2, v824, 0);
        _Q0 = vaddq_f64(v839, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v848, v457.f64[0]), v844, v457, 1), v854, _D4));
        *(_QWORD *)&v457.f64[0] = *(_OWORD *)&vaddq_f64(v860, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v879, v457.f64[0]), *(float64x2_t *)v873, v457, 1), v867, _D4));
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v460 = v12[5];
        if (sqrt(vmlad_n_f64(_Q2.f64[0], v457.f64[0], v457.f64[0])) < *((double *)v460 + 9))
        {
          v461 = *(float64x2_t *)v944;
          v461.f64[1] = *(double *)vextq_s8((int8x16_t)v461, (int8x16_t)v461, 8uLL).i64;
          if (sqrt(vmulq_f64(v461, v461).f64[0] + v461.f64[1] * v461.f64[1] + *(double *)v945 * *(double *)v945) < *((double *)v460 + 8))
          {
            *(_DWORD *)v956 = v432;
            v462 = sub_20F3AFAAC((uint64_t)__dst, v432, v956);
            LODWORD(v944[0]) = v436;
            sub_20EEA52F4((uint64_t)(v462 + 24), (unsigned int *)v944, v944);
            *(_DWORD *)v956 = v436;
            v463 = sub_20F3AFAAC((uint64_t)__dst, v436, v956);
            LODWORD(v944[0]) = v432;
            sub_20EEA52F4((uint64_t)(v463 + 24), (unsigned int *)v944, v944);
          }
        }
        ++v436;
        v435 += 128;
      }
      while (v436 < v430);
      v431 = v430;
      v427 = v433;
    }
    v58 += 128;
  }
  while (v429 < v431);
  prime = *(_QWORD *)&__dst[8];
  *(_OWORD *)__n = 0u;
  *(_OWORD *)v918 = 0u;
  LODWORD(v919) = *(_DWORD *)&__dst[32];
  if (*(_QWORD *)&__dst[8] == 1)
  {
    prime = 2;
    goto LABEL_469;
  }
LABEL_455:
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v465 = (int8x8_t)__n[1];
    v466 = prime >= __n[1];
    if (prime > __n[1])
      goto LABEL_469;
  }
  else
  {
    v465 = 0;
    v466 = 1;
    if (prime)
      goto LABEL_469;
  }
  if (!v466)
  {
    v467 = vcvtps_u32_f32((float)(unint64_t)v918[1] / *(float *)&v919);
    if (*(_QWORD *)&v465 < 3uLL || (v468 = (uint8x8_t)vcnt_s8(v465), v468.i16[0] = vaddlv_u8(v468), v468.u32[0] > 1uLL))
    {
      v467 = std::__next_prime(v467);
    }
    else
    {
      v469 = 1 << -(char)__clz(v467 - 1);
      if (v467 >= 2)
        v467 = v469;
    }
    if (prime <= v467)
      prime = v467;
    if (prime < *(_QWORD *)&v465)
LABEL_469:
      sub_20E8D2B3C((uint64_t)__n, prime);
  }
  v825 = v427;
  v470 = *(uint64_t **)&__dst[16];
  if (*(_QWORD *)&__dst[16])
  {
    while (2)
    {
      v471 = *((unsigned int *)v470 + 4);
      v472 = __n[1];
      if (__n[1])
      {
        v473 = (uint8x8_t)vcnt_s8((int8x8_t)__n[1]);
        v473.i16[0] = vaddlv_u8(v473);
        if (v473.u32[0] > 1uLL)
        {
          v58 = *((unsigned int *)v470 + 4);
          if (__n[1] <= v471)
            v58 = v471 % __n[1];
        }
        else
        {
          v58 = (LODWORD(__n[1]) - 1) & v471;
        }
        v474 = *(uint64_t ***)(__n[0] + 8 * v58);
        if (v474)
        {
          v475 = *v474;
          if (v475)
          {
            if (v473.u32[0] < 2uLL)
            {
              while (1)
              {
                v477 = v475[1];
                if (v477 == v471)
                {
                  if (*((_DWORD *)v475 + 4) == (_DWORD)v471)
                    goto LABEL_530;
                }
                else if ((v477 & (__n[1] - 1)) != v58)
                {
                  goto LABEL_491;
                }
                v475 = (uint64_t *)*v475;
                if (!v475)
                  goto LABEL_491;
              }
            }
            do
            {
              v476 = v475[1];
              if (v476 == v471)
              {
                if (*((_DWORD *)v475 + 4) == (_DWORD)v471)
                  goto LABEL_530;
              }
              else
              {
                if (v476 >= __n[1])
                  v476 %= __n[1];
                if (v476 != v58)
                  break;
              }
              v475 = (uint64_t *)*v475;
            }
            while (v475);
          }
        }
      }
LABEL_491:
      v478 = operator new(0x40uLL);
      v944[0] = (__uint64_t)v478;
      v944[1] = (__uint64_t)v918;
      LOBYTE(v945[0]) = 0;
      *v478 = 0;
      v478[1] = v471;
      *((_DWORD *)v478 + 4) = *((_DWORD *)v470 + 4);
      sub_20EB053B8((uint64_t)(v478 + 3), (uint64_t)(v470 + 3));
      LOBYTE(v945[0]) = 1;
      v479 = (float)((unint64_t)v918[1] + 1);
      if (v472 && (float)(*(float *)&v919 * (float)v472) >= v479)
      {
        v480 = *(void ***)(__n[0] + 8 * v58);
        v481 = (void **)v944[0];
        if (v480)
          goto LABEL_494;
LABEL_518:
        *v481 = v918[0];
        v918[0] = (void *)v944[0];
        *(_QWORD *)(__n[0] + 8 * v58) = v918;
        if (*(_QWORD *)v944[0])
        {
          v490 = *(_QWORD *)(*(_QWORD *)v944[0] + 8);
          if ((v472 & (v472 - 1)) != 0)
          {
            if (v490 >= v472)
              v490 %= v472;
          }
          else
          {
            v490 &= v472 - 1;
          }
          *(_QWORD *)(__n[0] + 8 * v490) = v944[0];
        }
      }
      else
      {
        v482 = (v472 & (v472 - 1)) != 0;
        if (v472 < 3)
          v482 = 1;
        v483 = v482 | (2 * v472);
        v484 = vcvtps_u32_f32(v479 / *(float *)&v919);
        if (v483 <= v484)
          v485 = v484;
        else
          v485 = v483;
        if (v485 == 1)
        {
          v485 = 2;
        }
        else if ((v485 & (v485 - 1)) != 0)
        {
          v485 = std::__next_prime(v485);
        }
        v486 = __n[1];
        if (v485 > __n[1])
          goto LABEL_505;
        if (v485 < __n[1])
        {
          v487 = vcvtps_u32_f32((float)(unint64_t)v918[1] / *(float *)&v919);
          if (__n[1] < 3
            || (v488 = (uint8x8_t)vcnt_s8((int8x8_t)__n[1]), v488.i16[0] = vaddlv_u8(v488), v488.u32[0] > 1uLL))
          {
            v487 = std::__next_prime(v487);
          }
          else
          {
            v489 = 1 << -(char)__clz(v487 - 1);
            if (v487 >= 2)
              v487 = v489;
          }
          if (v485 <= v487)
            v485 = v487;
          if (v485 < v486)
LABEL_505:
            sub_20E8D2B3C((uint64_t)__n, v485);
        }
        v472 = __n[1];
        if ((__n[1] & (__n[1] - 1)) != 0)
        {
          if (__n[1] <= v471)
          {
            v58 = v471 % __n[1];
            v480 = *(void ***)(__n[0] + 8 * (v471 % __n[1]));
            v481 = (void **)v944[0];
            if (!v480)
              goto LABEL_518;
          }
          else
          {
            v58 = v471;
            v480 = *(void ***)(__n[0] + 8 * v471);
            v481 = (void **)v944[0];
            if (!v480)
              goto LABEL_518;
          }
        }
        else
        {
          v58 = (LODWORD(__n[1]) - 1) & v471;
          v480 = *(void ***)(__n[0] + 8 * v58);
          v481 = (void **)v944[0];
          if (!v480)
            goto LABEL_518;
        }
LABEL_494:
        *v481 = *v480;
        *v480 = (void *)v944[0];
      }
      ++v918[1];
LABEL_530:
      v470 = (uint64_t *)*v470;
      if (!v470)
        break;
      continue;
    }
  }
  sub_20F408BD4((uint64_t *)__n, (uint64_t)v956);
  v491 = v918[0];
  if (v918[0])
  {
    do
    {
      v506 = (_QWORD *)*v491;
      v507 = (_QWORD *)v491[5];
      if (v507)
      {
        do
        {
          v508 = (_QWORD *)*v507;
          operator delete(v507);
          v507 = v508;
        }
        while (v508);
      }
      v509 = (void *)v491[3];
      v491[3] = 0;
      if (v509)
        operator delete(v509);
      operator delete(v491);
      v491 = v506;
    }
    while (v506);
  }
  v492 = (void *)__n[0];
  __n[0] = 0;
  if (v492)
    operator delete(v492);
  sub_20F4093E0(__dst, v956, (uint64_t)v953);
  v497 = *(_QWORD **)&v956[16];
  if (*(_QWORD *)&v956[16])
  {
    do
    {
      v498 = (_QWORD *)*v497;
      operator delete(v497);
      v497 = v498;
    }
    while (v498);
  }
  v499 = *(void **)v956;
  *(_QWORD *)v956 = 0;
  if (v499)
    operator delete(v499);
  v500 = *(_QWORD **)&__dst[16];
  if (*(_QWORD *)&__dst[16])
  {
    do
    {
      v510 = (_QWORD *)*v500;
      v511 = (_QWORD *)v500[5];
      if (v511)
      {
        do
        {
          v512 = (_QWORD *)*v511;
          operator delete(v511);
          v511 = v512;
        }
        while (v512);
      }
      v513 = (void *)v500[3];
      v500[3] = 0;
      if (v513)
        operator delete(v513);
      operator delete(v500);
      v500 = v510;
    }
    while (v510);
  }
  v501 = *(void **)__dst;
  *(_QWORD *)__dst = 0;
  if (v501)
    operator delete(v501);
  v502 = a7;
  if (a8)
  {
    v503 = v954[0];
    if (v954[0])
    {
      v504 = (void **)(a7 + 4);
      v505 = (char *)a7[5];
      do
      {
        v515 = v503[4];
        v516 = v502[6];
        if ((unint64_t)v505 < v516)
        {
          *(_DWORD *)v505 = v515;
          v514 = (uint64_t)(v505 + 4);
        }
        else
        {
          v517 = (char *)*v504;
          v518 = v505 - (_BYTE *)*v504;
          v519 = v518 >> 2;
          v520 = (v518 >> 2) + 1;
          if (v520 >> 62)
            sub_20E867F44();
          v521 = v516 - (_QWORD)v517;
          if (v521 >> 1 > v520)
            v520 = v521 >> 1;
          if ((unint64_t)v521 >= 0x7FFFFFFFFFFFFFFCLL)
            v522 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v522 = v520;
          if (v522)
          {
            if (v522 >> 62)
              sub_20E877A38();
            v523 = operator new(4 * v522);
            v524 = &v523[4 * v519];
            *v524 = v515;
            v514 = (uint64_t)(v524 + 1);
            v525 = v505 - v517;
            if (v505 != v517)
            {
LABEL_566:
              v526 = v525 - 4;
              if (v526 < 0xBC
                || (v529 = (v505 - 4 - v517) & 0xFFFFFFFFFFFFFFFCLL, &v523[v518 - 4 - v529] > &v523[v518 - 4])
                || &v505[-v529 - 4] > v505 - 4
                || (unint64_t)(v505 - v523 - v518) < 0x20)
              {
                v527 = v505;
                v12 = v798;
              }
              else
              {
                v530 = (v526 >> 2) + 1;
                v531 = 4 * (v530 & 0x7FFFFFFFFFFFFFF8);
                v527 = &v505[-v531];
                v524 = (_DWORD *)((char *)v524 - v531);
                v532 = (float64x2_t *)&v523[4 * v519 - 16];
                v533 = (float64x2_t *)(v505 - 16);
                v534 = v530 & 0x7FFFFFFFFFFFFFF8;
                v12 = v798;
                do
                {
                  v493 = v533[-1];
                  v535 = *v533;
                  v532[-1] = v493;
                  *v532 = v535;
                  v532 -= 2;
                  v533 -= 2;
                  v534 -= 8;
                }
                while (v534);
                if (v530 == (v530 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_569:
                  a7[4] = v524;
                  a7[5] = v514;
                  a7[6] = &v523[4 * v522];
                  if (!v517)
                    goto LABEL_555;
LABEL_573:
                  operator delete(v517);
                  goto LABEL_555;
                }
              }
              do
              {
                v528 = *((_DWORD *)v527 - 1);
                v527 -= 4;
                *--v524 = v528;
              }
              while (v527 != v517);
              goto LABEL_569;
            }
          }
          else
          {
            v523 = 0;
            v524 = (_DWORD *)(4 * v519);
            *(_DWORD *)(4 * v519) = v515;
            v514 = 4 * v519 + 4;
            v525 = v505 - v517;
            if (v505 != v517)
              goto LABEL_566;
          }
          v12 = v798;
          a7[4] = v524;
          a7[5] = v514;
          a7[6] = &v523[4 * v522];
          if (v517)
            goto LABEL_573;
        }
LABEL_555:
        v502 = a7;
        a7[5] = v514;
        v503 = *(_DWORD **)v503;
        v505 = (char *)v514;
      }
      while (v503);
    }
  }
  v536 = v954[0];
  if (v954[0])
  {
    while (1)
    {
      v537 = v536[4];
      v538 = v888[1];
      v539 = sub_210219C18();
      sub_20F271158((uint64_t)v538 + 48 * v537, (std::string *)__dst);
      if (__dst[23] >= 0)
        v540 = __dst;
      else
        v540 = *(_BYTE **)__dst;
      sub_20F271158((uint64_t)v538 + 48 * v537 + 24, (std::string *)__n);
      if (SHIBYTE(v918[0]) >= 0)
        v541 = __n;
      else
        v541 = (__uint64_t *)__n[0];
      v542 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v542 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_610;
      *(_DWORD *)v956 = 136315394;
      *(_QWORD *)&v956[4] = v540;
      *(_WORD *)&v956[12] = 2080;
      *(_QWORD *)&v956[14] = v541;
      v544 = (char *)_os_log_send_and_compose_impl();
      v545 = strlen(v544);
      v944[0] = 0;
      pthread_threadid_np(0, v944);
      v546 = v944[0];
      timespec_get((timespec *)v944, 1);
      sub_210219E20(v956, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v539 + 1), (__int128 *)(v539 + 5), "MFPR:INLIER_PAIR:REF: %s, QUERY: %s", 0x23uLL, v544, v545, v546, v944);
      std::mutex::lock(&stru_254A5A410);
      v547 = qword_254A5A458;
      for (m = unk_254A5A460; v547 != m; v547 += 40)
      {
        v549 = *(_QWORD *)(v547 + 32);
        if (!v549)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v549 + 48))(v549, v956);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v959 < 0)
      {
        operator delete(*((void **)&v958 + 1));
        if (SBYTE7(v958) < 0)
        {
LABEL_601:
          operator delete(*(void **)&v957[16]);
          if (!v957[8])
            goto LABEL_604;
          goto LABEL_602;
        }
      }
      else if (SBYTE7(v958) < 0)
      {
        goto LABEL_601;
      }
      if (!v957[8])
        goto LABEL_604;
LABEL_602:
      if ((v957[7] & 0x80000000) != 0)
        operator delete(*(void **)&v956[64]);
LABEL_604:
      if (v956[56] && (v956[55] & 0x80000000) != 0)
        operator delete(*(void **)&v956[32]);
      if ((v956[31] & 0x80000000) != 0)
      {
        operator delete(*(void **)&v956[8]);
        if (!v544)
          goto LABEL_610;
LABEL_609:
        free(v544);
        goto LABEL_610;
      }
      if (v544)
        goto LABEL_609;
LABEL_610:
      if (os_signpost_enabled((os_log_t)*v539))
      {
        *(_DWORD *)v956 = 136315394;
        *(_QWORD *)&v956[4] = v540;
        *(_WORD *)&v956[12] = 2080;
        *(_QWORD *)&v956[14] = v541;
        _os_signpost_emit_unreliably_with_name_impl();
        if ((SHIBYTE(v918[0]) & 0x80000000) == 0)
          goto LABEL_614;
LABEL_583:
        operator delete((void *)__n[0]);
        v12 = v798;
        if ((__dst[23] & 0x80000000) != 0)
          goto LABEL_615;
LABEL_584:
        v536 = *(_DWORD **)v536;
        if (!v536)
          break;
      }
      else
      {
        if (SHIBYTE(v918[0]) < 0)
          goto LABEL_583;
LABEL_614:
        v12 = v798;
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_584;
LABEL_615:
        operator delete(*(void **)__dst);
        v536 = *(_DWORD **)v536;
        if (!v536)
          break;
      }
    }
  }
  v944[1] = 0;
  v944[0] = 0;
  v945[0] = 0;
  *(_OWORD *)v918 = 0u;
  *(_OWORD *)__n = 0u;
  LODWORD(v919) = 1065353216;
  v550 = v954[1];
  v551 = v825;
  if (v954[1])
  {
    if ((unint64_t)v954[1] >> 57)
      sub_20E867F44();
    v944[0] = (__uint64_t)operator new((uint64_t)v954[1] << 7);
    v944[1] = v944[0];
    v945[0] = (void *)(v944[0] + ((_QWORD)v550 << 7));
  }
  v552 = (void **)v954[0];
  if (!v954[0])
  {
    v580 = 0;
    *(_OWORD *)v882 = 0u;
    *(_OWORD *)v883 = 0u;
    v884 = 1.0;
    goto LABEL_652;
  }
  do
  {
    v553 = *((unsigned int *)v552 + 4);
    v554 = (float64x2_t *)&v551[128 * v553];
    v555 = (float64x2_t *)v944[1];
    if ((void *)v944[1] < v945[0])
    {
      v556 = *v554;
      v557 = v554[1];
      v558 = v554[3];
      *(float64x2_t *)(v944[1] + 32) = v554[2];
      v555[3] = v558;
      *v555 = v556;
      v555[1] = v557;
      v559 = v554[4];
      v493 = v554[5];
      v494 = v554[7];
      v555[6] = v554[6];
      v555[7] = v494;
      v555[4] = v559;
      v555[5] = v493;
      v560 = (__uint64_t)&v555[8];
      goto LABEL_644;
    }
    v561 = v944[0];
    v562 = (uint64_t)(v944[1] - v944[0]) >> 7;
    v563 = v562 + 1;
    if ((unint64_t)(v562 + 1) >> 57)
      sub_20E867F44();
    v564 = (uint64_t)v945[0] - v944[0];
    if ((uint64_t)((uint64_t)v945[0] - v944[0]) >> 6 > v563)
      v563 = v564 >> 6;
    if ((unint64_t)v564 >= 0x7FFFFFFFFFFFFF80)
      v565 = 0x1FFFFFFFFFFFFFFLL;
    else
      v565 = v563;
    if (v565)
    {
      if (v565 >> 57)
        sub_20E877A38();
      v566 = (char *)operator new(v565 << 7);
    }
    else
    {
      v566 = 0;
    }
    v567 = (float64x2_t *)&v566[128 * v562];
    v568 = *v554;
    v569 = v554[1];
    v570 = v554[3];
    v567[2] = v554[2];
    v567[3] = v570;
    *v567 = v568;
    v567[1] = v569;
    v571 = v554[4];
    v493 = v554[5];
    v494 = v554[7];
    v567[6] = v554[6];
    v567[7] = v494;
    v567[4] = v571;
    v567[5] = v493;
    v572 = (__uint64_t)v567;
    if (v555 == (float64x2_t *)v561)
    {
      v12 = v798;
      v560 = (__uint64_t)&v567[8];
      v944[0] = (__uint64_t)v567;
      v944[1] = (__uint64_t)&v567[8];
      v945[0] = &v566[128 * v565];
      if (v555)
        goto LABEL_643;
    }
    else
    {
      v12 = v798;
      do
      {
        v573 = v555[-8];
        v574 = v555[-7];
        v575 = v555[-5];
        *(float64x2_t *)(v572 - 96) = v555[-6];
        *(float64x2_t *)(v572 - 80) = v575;
        *(float64x2_t *)(v572 - 128) = v573;
        *(float64x2_t *)(v572 - 112) = v574;
        v576 = v555[-4];
        v493 = v555[-3];
        v494 = v555[-1];
        *(float64x2_t *)(v572 - 32) = v555[-2];
        *(float64x2_t *)(v572 - 16) = v494;
        *(float64x2_t *)(v572 - 64) = v576;
        *(float64x2_t *)(v572 - 48) = v493;
        v572 -= 128;
        v555 -= 8;
      }
      while (v555 != (float64x2_t *)v561);
      v555 = (float64x2_t *)v561;
      v560 = (__uint64_t)&v567[8];
      v944[0] = v572;
      v944[1] = (__uint64_t)&v567[8];
      v945[0] = &v566[128 * v565];
      if (v555)
LABEL_643:
        operator delete(v555);
    }
LABEL_644:
    v944[1] = v560;
    v577 = (char *)v890 + 24 * v553;
    v578 = *(double **)v577;
    v579 = (double *)*((_QWORD *)v577 + 1);
    v551 = v825;
    if (*(double **)v577 != v579)
    {
      do
      {
        sub_20F3AF72C((uint64_t)__n, v578, (uint64_t)v578);
        v578 += 3;
      }
      while (v578 != v579);
    }
    v552 = (void **)*v552;
  }
  while (v552);
  v580 = __n[1];
  *(_OWORD *)v882 = 0u;
  *(_OWORD *)v883 = 0u;
  v884 = *(float *)&v919;
  if (__n[1] == 1)
  {
    v580 = 2;
    goto LABEL_666;
  }
LABEL_652:
  if ((v580 & (v580 - 1)) != 0)
  {
    v580 = std::__next_prime(v580);
    v581 = v882[1];
    v582 = (void *)v580 >= v882[1];
    if ((void *)v580 > v882[1])
      goto LABEL_666;
  }
  else
  {
    v581 = 0;
    v582 = 1;
    if (v580)
      goto LABEL_666;
  }
  if (!v582)
  {
    v583 = vcvtps_u32_f32((float)(unint64_t)v883[1] / v884);
    if ((unint64_t)v581 < 3
      || (v584 = (uint8x8_t)vcnt_s8((int8x8_t)v581), v584.i16[0] = vaddlv_u8(v584), v584.u32[0] > 1uLL))
    {
      v583 = std::__next_prime(v583);
    }
    else
    {
      v585 = 1 << -(char)__clz(v583 - 1);
      if (v583 >= 2)
        v583 = v585;
    }
    if (v580 <= v583)
      v580 = v583;
    if (v580 < (unint64_t)v581)
LABEL_666:
      sub_20E8D2B3C((uint64_t)v882, v580);
  }
  v586 = (double *)v918[0];
  if (v918[0])
  {
    do
    {
      sub_20F3AF72C((uint64_t)v882, v586 + 2, (uint64_t)(v586 + 2));
      v586 = *(double **)v586;
    }
    while (v586);
  }
  v587 = v883[0];
  if (a6)
  {
    if (v883[0])
    {
      v588 = 0;
      v589.f64[0] = 0.0;
      v590 = (float64x2_t *)v883[0];
      v591 = 0;
      v493.f64[0] = 0.0;
      do
      {
        v494.f64[0] = v590[2].f64[0];
        v493 = vaddq_f64(v493, v494);
        *(_QWORD *)&v589.f64[1] = v591;
        v589 = vaddq_f64(v589, v590[1]);
        v591 = vextq_s8((int8x16_t)v589, (int8x16_t)v589, 8uLL).u64[0];
        ++v588;
        v590 = *(float64x2_t **)&v590->f64[0];
      }
      while (v590);
      if (v588 >= a6)
      {
        v592 = 0;
        v494.f64[0] = (double)v588;
        v593 = vdivq_f64(v493, v494);
        *(_QWORD *)&v589.f64[1] = v591;
        v595 = vdivq_f64(v589, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v588), 0));
        v594 = (float64x2_t)vextq_s8((int8x16_t)v595, (int8x16_t)v595, 8uLL);
        v595.f64[1] = v594.f64[0];
        v596 = (float64_t *)v883[0];
        do
        {
          v594.f64[0] = v596[4];
          v594 = vsubq_f64(v593, v594);
          _D6 = vsubq_f64(v595, *(float64x2_t *)(v596 + 16)).f64[1];
          __asm { FMLA            D5, D6, V4.D[1] }
          if (vmlad_n_f64(_D5, v594.f64[0], v594.f64[0]) > a9 * a9)
            ++v592;
          v596 = *(float64_t **)v596;
        }
        while (v596);
        v15 = v592 >= a6;
      }
      else
      {
        v15 = 0;
      }
      do
      {
LABEL_683:
        v599 = (_QWORD *)*v587;
        operator delete(v587);
        v587 = v599;
      }
      while (v599);
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v15 = 1;
    if (v883[0])
      goto LABEL_683;
  }
  v600 = v882[0];
  v882[0] = 0;
  if (v600)
    operator delete(v600);
  if (!v15)
  {
LABEL_692:
    v604 = v918[0];
    if (!v918[0])
      goto LABEL_694;
    goto LABEL_693;
  }
  v601 = (_OWORD *)v944[0];
  v772 = v944[1];
  v602 = v944[1] - v944[0];
  v603 = (unsigned int *)v12[5];
  if (v603[12] <= (unint64_t)((uint64_t)(v944[1] - v944[0]) >> 7))
  {
    if (v918[1] < (void *)v603[22])
    {
      v15 = 0;
      goto LABEL_692;
    }
    v762 = v603[20];
    if (v944[0] == v944[1])
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MultiFramePoseRefiner.cpp", 380, (uint64_t)"!poses.empty()", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v601 = (_OWORD *)v944[0];
      v772 = v944[1];
      v602 = v944[1] - v944[0];
    }
    v622 = *(int64x2_t *)v601;
    v621 = *((int64x2_t *)v601 + 1);
    v624 = *((int64x2_t *)v601 + 2);
    v623 = *((int64x2_t *)v601 + 3);
    v830 = *((float64x2_t *)v601 + 5);
    *(_OWORD *)__srcd = v601[7];
    v840 = *((float64x2_t *)v601 + 4);
    v845 = *((float64x2_t *)v601 + 6);
    if (!(_DWORD)v762 || v602 == 128)
    {
      v666 = *((float64x2_t *)v601 + 2);
      v628 = *((float64x2_t *)v601 + 3);
      v664 = *(float64x2_t *)v601;
      v665 = *((float64x2_t *)v601 + 1);
LABEL_752:
      v667 = v840;
      v669 = v845;
      v668 = v830;
      v671 = *(float64x2_t *)__srcd;
LABEL_753:
      v717 = (int8x16_t)vnegq_f64(v764);
      *(_QWORD *)&v718 = *(_OWORD *)&vnegq_f64(v763);
      *(_QWORD *)&v719 = vextq_s8(v717, v717, 8uLL).u64[0];
      _V26.D[1] = v785.f64[1];
      v721 = (float64x2_t)vzip1q_s64(v765, (int64x2_t)v786);
      *(_QWORD *)&v722.f64[0] = v770;
      _Q20.i64[0] = v770;
      _Q20.i64[1] = vextq_s8((int8x16_t)v786, (int8x16_t)v786, 8uLL).u64[0];
      v724 = (float64x2_t)vzip1q_s64(v766, (int64x2_t)v789);
      v725 = vextq_s8(_Q20, (int8x16_t)vdupq_laneq_s64((int64x2_t)v791, 1), 8uLL);
      v726 = vmlsq_laneq_f64(vmulq_n_f64(v721, vnegq_f64(v785).f64[0]), (float64x2_t)_Q20, v785, 1);
      _Q20.i64[0] = *(_QWORD *)&v784.f64[0];
      v727 = vmlsq_lane_f64(v726, v724, v784.f64[0], 0);
      _D19 = v760;
      __asm { FMLS            D23, D19, V26.D[1] }
      _D19 = v759;
      __asm { FMLS            D23, D19, V20.D[0] }
      v732 = v725.i64[1];
      *(_QWORD *)&v722.f64[1] = v725.i64[0];
      _Q23.f64[1] = 1.0;
      v733 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v721, v664.f64[0]), v722, v664, 1), v724, v665.f64[0]), v727, v665, 1);
      v734 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v791.f64[0], v664.f64[0]), (float64x2_t)v725.u64[1], v664, 1), (float64x2_t)*(unint64_t *)&v759, v665.f64[0]), _Q23, v665, 1);
      v735 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v721, v666.f64[0]), v722, v666, 1), v724, v628.f64[0]), v727, v628, 1);
      v736 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v791.f64[0], v666.f64[0]), (float64x2_t)(unint64_t)v732, v666, 1), (float64x2_t)*(unint64_t *)&v759, v628.f64[0]), _Q23, v628, 1);
      v737 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v721, v667.f64[0]), v722, v667, 1), v724, v668.f64[0]), v727, v668, 1);
      v738 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v791.f64[0], v667.f64[0]), (float64x2_t)(unint64_t)v732, v667, 1), (float64x2_t)*(unint64_t *)&v759, v668.f64[0]), _Q23, v668, 1);
      v739 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v721, v669.f64[0]), v722, v669, 1), v724, v671.f64[0]), v727, v671, 1);
      v740 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v791.f64[0], v669.f64[0]), (float64x2_t)(unint64_t)v732, v669, 1), (float64x2_t)*(unint64_t *)&v759, v671.f64[0]), _Q23, v671, 1);
      v741 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v733, v797.f64[0]), v735, v795.f64[0]), v737, v793.f64[0]), (float64x2_t)0, v739);
      v742 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v734, v797.f64[0]), v736, v795.f64[0]), v738, v793.f64[0]), (float64x2_t)0, v740);
      v743 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v733, v797, 1), v735, v795, 1), v737, v793, 1), (float64x2_t)0, v739);
      v744 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v734, v797, 1), v736, v795, 1), v738, v793, 1), (float64x2_t)0, v740);
      v745 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v733, *(double *)&v769), v735, v768), v737, *(double *)&v767), (float64x2_t)0, v739);
      v746 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v734, *(double *)&v769), v736, v768), v738, *(double *)&v767), (float64x2_t)0, v740);
      v747 = (int64x2_t)vaddq_f64(v739, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v733, *(double *)v717.i64), v735, v719), v737, v718));
      v748 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v734, *(double *)v717.i64), v736, v719), v738, v718);
      v749 = vzip2q_s64(v745, v747);
      v745.i64[1] = v747.i64[0];
      *v761 = vzip1q_s64(v741, v743);
      v761[1] = v745;
      v761[2] = vzip2q_s64(v741, v743);
      v761[3] = v749;
      v761[4] = vzip1q_s64(v742, v744);
      v761[5] = vzip1q_s64(v746, (int64x2_t)vaddq_f64(v740, v748));
      v15 = 1;
      v551 = v825;
      v604 = v918[0];
      if (v918[0])
        goto LABEL_693;
      goto LABEL_694;
    }
    v625 = 0;
    v626 = v602 >> 7;
    v627.f64[0] = (double)v626;
    v628 = (float64x2_t)vdupq_laneq_s64((int64x2_t)xmmword_2103B2030, 1);
    v754 = v628;
    v755 = (float64x2_t)vdupq_laneq_s64((int64x2_t)xmmword_2103B2010, 1);
    v752 = (float64x2_t)vdupq_laneq_s64((int64x2_t)xmmword_2103B2070, 1);
    v753 = (float64x2_t)vdupq_laneq_s64((int64x2_t)xmmword_2103B2050, 1);
    v629.f64[0] = (double)v626;
    v629.f64[1] = (double)v626;
    v751 = v629;
    v630.f64[0] = (double)v626;
    v630.f64[1] = (double)v626;
    if (v626 <= 1)
      v626 = 1;
    v750 = v626;
    v627.f64[1] = v627.f64[0];
    v757 = v630;
    v758 = v627;
    v756 = v601;
    while (1)
    {
      v779 = (float64x2_t)v623;
      v782 = (float64x2_t)v621;
      v775 = (float64x2_t)v624;
      v777 = (float64x2_t)v622;
      if ((_OWORD *)v772 != v601)
        break;
      v673.f64[0] = 0.0;
      v628.f64[0] = 0.0;
      v675.f64[0] = 0.0;
      v676 = 0;
      v677.f64[0] = 0.0;
      *(double *)&v678 = 0.0;
LABEL_747:
      *(_QWORD *)&v675.f64[1] = v676;
      v637 = vdivq_f64(v675, v757);
      *(_QWORD *)&v677.f64[1] = v678;
      _Q23 = vdivq_f64(v677, v758);
      _Q26.f64[0] = _Q23.f64[1];
      __asm { FMLA            D0, D26, V23.D[1] }
      if (_D0 <= 0.0000001)
      {
        v666 = v775;
        v664 = v777;
        v628 = v779;
        v665 = v782;
        goto LABEL_752;
      }
      v673.f64[1] = v628.f64[0];
      v634 = (int8x16_t)vdivq_f64(v673, v751);
      v636 = (float64x2_t)vextq_s8(v634, v634, 8uLL);
      *(_QWORD *)&v715.f64[0] = v634.i64[0];
      v715.f64[1] = v636.f64[0];
      v495.f64[0] = v637.f64[1];
      v639 = vmulq_f64(v715, v715);
      v716 = v639.f64[0] + v636.f64[0] * v636.f64[0] + v637.f64[0] * v637.f64[0];
      if (v716 >= 0.0000002635)
      {
        v631 = sqrt(v716);
        *(float64x2_t *)v874 = _Q26;
        v880 = v637.f64[0];
        v861 = v636;
        v868 = _Q23;
        v849 = v634.i64[0];
        v855 = v495;
        v633 = __sincos_stret(v631);
        v632 = v633.__cosval;
        v634.i64[0] = v849;
        v495 = v855;
        v636 = v861;
        _Q23 = v868;
        _Q26 = *(float64x2_t *)v874;
        v637.f64[0] = v880;
        v638 = v633.__sinval / v631;
        v628.f64[0] = 1.0 / v716 * (1.0 - v633.__cosval);
        v639.f64[0] = 1.0 / v716 * (1.0 - v633.__sinval / v631);
      }
      else
      {
        v628.f64[0] = 0.5 - v716 * (v716 / -720.0 + 0.0416666667);
        v639.f64[0] = 0.166666667 - v716 * (v716 / -5040.0 + 0.00833333333);
        v638 = 1.0 - v716 * v639.f64[0];
        v632 = 1.0 - v716 * v628.f64[0];
      }
      v601 = v756;
      *(_QWORD *)&v640.f64[0] = v634.i64[0];
      v640.f64[1] = v636.f64[0];
      v641 = *(double *)v634.i64 * (*(double *)v634.i64 * v628.f64[0]) + v632;
      v642 = v636.f64[0] * (v636.f64[0] * v628.f64[0]) + v632;
      v643 = v637.f64[0] * (v637.f64[0] * v628.f64[0]) + v632;
      v644 = v636.f64[0] * (*(double *)v634.i64 * v628.f64[0]);
      v645 = v637.f64[0] * (*(double *)v634.i64 * v628.f64[0]);
      v646 = v637.f64[0] * (v636.f64[0] * v628.f64[0]);
      v647 = *(double *)v634.i64 * v638;
      v648 = v636.f64[0] * v638;
      v649 = v637.f64[0] * v638;
      v650 = v644 - v637.f64[0] * v638;
      v651 = v645 + v636.f64[0] * v638;
      v652 = v644 + v649;
      v653 = v645 - v648;
      v654.f64[0] = v636.f64[0];
      v654.f64[1] = v637.f64[0];
      v655 = v646 - v647;
      *(_QWORD *)&v637.f64[1] = v634.i64[0];
      v656.f64[0] = _Q26.f64[0];
      v656.f64[1] = v495.f64[0];
      v657 = v646 + v647;
      v658.f64[0] = _Q23.f64[0];
      v658.f64[1] = _Q26.f64[0];
      v659 = vsubq_f64(vmulq_f64(v654, v656), vmulq_f64(v637, v658));
      v656.f64[0] = v495.f64[0];
      v656.f64[1] = _Q23.f64[0];
      v660 = vsubq_f64(vmulq_f64(v640, _Q23), vmulq_f64(v636, v495));
      v661 = vaddq_f64(v656, vmulq_n_f64(v659, v628.f64[0]));
      v662 = vaddq_f64(_Q26, vmulq_f64(v660, v628));
      v495 = (float64x2_t)vextq_s8((int8x16_t)v659, (int8x16_t)v660, 8uLL);
      v660.f64[1] = v659.f64[0];
      *(_QWORD *)&v659.f64[0] = *(_OWORD *)&vaddq_f64(v662, vmulq_f64(vsubq_f64(vmulq_laneq_f64(v640, v659, 1), vmulq_f64(v636, v659)), v639));
      v663 = vaddq_f64(v661, vmulq_n_f64(vsubq_f64(vmulq_f64(v654, v660), vmulq_f64(v637, v495)), v639.f64[0]));
      _Q26.f64[1] = v775.f64[1];
      v495.f64[1] = v779.f64[1];
      v664 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v777, v641), v775, v652), v840, v653), v755, v845);
      v665 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v782, v641), v779, v652), v830, v653), v755, *(float64x2_t *)__srcd);
      v666 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v777, v650), v775, v642), v840, v657), v754, v845);
      v628 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v782, v650), v779, v642), v830, v657), v754, *(float64x2_t *)__srcd);
      v667 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v777, v651), v775, v655), v840, v643), v753, v845);
      v668 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v782, v651), v779, v655), v830, v643), v753, *(float64x2_t *)__srcd);
      v669 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v777, v663.f64[0]), v775, v663, 1), v840, v659.f64[0]), v752, v845);
      v670 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v782, v663.f64[0]), v779, v663, 1), v830, v659.f64[0]);
      ++v625;
      v624 = (int64x2_t)v666;
      v623 = (int64x2_t)v628;
      v622 = (int64x2_t)v664;
      v621 = (int64x2_t)v665;
      v840 = v667;
      v845 = v669;
      v671 = vmlaq_f64(v670, v752, *(float64x2_t *)__srcd);
      v830 = v668;
      *(float64x2_t *)__srcd = v671;
      if (v625 == v762)
        goto LABEL_753;
    }
    v672 = 0;
    v815 = vextq_s8((int8x16_t)v845, (int8x16_t)v845, 8uLL).u64[0];
    v820 = vextq_s8((int8x16_t)v840, (int8x16_t)v840, 8uLL).u64[0];
    v808 = (float64x2_t)vzip2q_s64(v622, v624);
    v811 = (float64x2_t)vzip1q_s64(v622, v624);
    v805 = (float64x2_t)vzip1q_s64(v621, v623);
    v673.f64[0] = 0.0;
    v674 = v750;
    v628.f64[0] = 0.0;
    v675.f64[0] = 0.0;
    v676 = 0;
    v677.f64[0] = 0.0;
    *(double *)&v678 = 0.0;
    while (1)
    {
      v850 = *(double *)&v678;
      v856 = v676;
      v862 = v675.f64[0];
      v869 = v677.f64[0];
      v875 = v628.f64[0];
      v881 = v673.f64[0];
      *(_OWORD *)&v956[64] = xmmword_2103B2040;
      *(_OWORD *)v957 = xmmword_2103B2050;
      *(_OWORD *)&v957[16] = xmmword_2103B2060;
      v958 = xmmword_2103B2070;
      *(_OWORD *)v956 = xmmword_2103B2000;
      *(_OWORD *)&v956[16] = xmmword_2103B2010;
      *(_OWORD *)&v956[32] = xmmword_2103B2020;
      *(_OWORD *)&v956[48] = xmmword_2103B2030;
      v690 = *(double *)(v944[0] + v672 + 16);
      _Q1 = *(float64x2_t *)(v944[0] + v672);
      v692 = *(double *)(v944[0] + v672 + 48);
      _Q3 = *(float64x2_t *)(v944[0] + v672 + 32);
      v694 = *(double *)(v944[0] + v672 + 80);
      _Q5 = *(float64x2_t *)(v944[0] + v672 + 64);
      v696 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v811, _Q1.f64[0]), v808, _Q1, 1), v805, v690);
      _V7.D[1] = v820;
      __asm { FMLA            D16, D18, V1.D[1] }
      v699 = _D16 + v830.f64[0] * v690;
      v700 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v811, _Q3.f64[0]), v808, _Q3, 1), v805, v692);
      __asm { FMLA            D16, D18, V3.D[1] }
      v702 = _D16 + v830.f64[0] * v692;
      __asm { FMLA            D16, D18, V5.D[1] }
      *(float64x2_t *)v956 = v696;
      *(double *)&v956[16] = v699;
      *(float64x2_t *)&v956[32] = v700;
      *(double *)&v956[48] = v702;
      *(float64x2_t *)&v956[64] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v811, _Q5.f64[0]), v808, _Q5, 1), v805, v694);
      *(double *)v957 = _D16 + v830.f64[0] * v694;
      v700.f64[0] = *(float64_t *)(v944[0] + v672 + 112);
      *(_QWORD *)&v700.f64[0] = *(_OWORD *)&vsubq_f64(v700, *(float64x2_t *)__srcd);
      v704.f64[0] = v845.f64[0];
      *(_QWORD *)&v704.f64[1] = v815;
      _Q0 = vsubq_f64(*(float64x2_t *)(v944[0] + v672 + 96), v704);
      __asm { FMLA            D3, D18, V0.D[1] }
      *(float64x2_t *)&v957[16] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v811, _Q0.f64[0]), v808, _Q0, 1), v805, v700.f64[0]);
      *(_QWORD *)&v958 = vmlad_n_f64(_Q3.f64[0], v830.f64[0], v700.f64[0]);
      memset(__dst, 0, 48);
      v950 = v956;
      v951 = 0;
      v947 = (double *)__dst;
      v948 = 0;
      sub_20E95B988((float64x2_t **)&v950, &v947);
      v707.f64[0] = *(float64_t *)&__dst[16];
      _Q18 = *(float64x2_t *)__dst;
      _Q0 = vmulq_f64(_Q18, _Q18);
      _D1 = *(_QWORD *)&__dst[8];
      __asm { FMLA            D0, D1, V18.D[1] }
      v710 = _Q0.f64[0] + v707.f64[0] * v707.f64[0];
      if (v710 >= 0.0000002635)
      {
        v712 = sqrt(v710);
        v799 = *(float64x2_t *)__dst;
        v801 = *(double *)&__dst[16];
        v713 = __sincos_stret(v712);
        _Q18 = v799;
        v707.f64[0] = v801;
        v706.f64[0] = v713.__sinval / v712;
        _Q0.f64[0] = 1.0 / v710 * (1.0 - v713.__cosval);
        v711 = 1.0 / v710 * (1.0 - v713.__sinval / v712);
        if (v710 >= 2.775e-15)
        {
LABEL_743:
          if (v710 <= 9.0)
            _Q0.f64[0] = (_Q0.f64[0] * 0.5 - v711) / v706.f64[0];
          else
            _Q0.f64[0] = (_Q0.f64[0] + v706.f64[0] * -0.5) / (v710 * _Q0.f64[0]);
          goto LABEL_738;
        }
      }
      else
      {
        _Q0.f64[0] = 0.5 - v710 * (v710 / -720.0 + 0.0416666667);
        v711 = 0.166666667 - v710 * (v710 / -5040.0 + 0.00833333333);
        v706.f64[0] = 1.0 - v710 * v711;
        if (v710 >= 2.775e-15)
          goto LABEL_743;
      }
      _Q0.f64[0] = v710 * 0.0000330687831 + v710 * 0.00138888889 + 0.0833333333;
LABEL_738:
      v680 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
      *(_QWORD *)&v706.f64[0] = v958;
      v681.f64[0] = v680.f64[0];
      v681.f64[1] = v707.f64[0];
      v682 = (float64x2_t)vextq_s8(*(int8x16_t *)&v957[16], (int8x16_t)v706, 8uLL);
      v683 = vsubq_f64(vmulq_laneq_f64(_Q18, *(float64x2_t *)&v957[16], 1), vmulq_f64(v680, *(float64x2_t *)&v957[16]));
      __asm { FMOV            V7.2D, #-0.5 }
      v685 = vaddq_f64(v706, vmulq_f64(v683, _Q7));
      v706.f64[1] = *(float64_t *)&v957[16];
      v707.f64[1] = _Q18.f64[0];
      v686 = vsubq_f64(vmulq_f64(v681, v706), vmulq_f64(v707, v682));
      v687 = vmulq_f64(v686, _Q7);
      v688 = (float64x2_t)vextq_s8((int8x16_t)v686, (int8x16_t)v683, 8uLL);
      v683.f64[1] = v686.f64[0];
      *(float64x2_t *)&__dst[24] = vaddq_f64(vaddq_f64(*(float64x2_t *)&v957[16], v687), vmulq_n_f64(vsubq_f64(vmulq_f64(v681, v683), vmulq_f64(v707, v688)), _Q0.f64[0]));
      *(_QWORD *)&__dst[40] = *(_OWORD *)&vaddq_f64(v685, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q18, v686, 1), vmulq_f64(v680, v686))));
      v689.f64[0] = v881;
      v689.f64[1] = v875;
      v673 = vaddq_f64(v689, *(float64x2_t *)__dst);
      v628 = (float64x2_t)vextq_s8((int8x16_t)v673, (int8x16_t)v673, 8uLL);
      v681.f64[0] = v869;
      v681.f64[1] = v850;
      v687.f64[0] = v862;
      *(_QWORD *)&v687.f64[1] = v856;
      v677 = vaddq_f64(v681, *(float64x2_t *)&__dst[32]);
      v675 = vaddq_f64(v687, *(float64x2_t *)&__dst[16]);
      v678 = vextq_s8((int8x16_t)v677, (int8x16_t)v677, 8uLL).u64[0];
      v676 = vextq_s8((int8x16_t)v675, (int8x16_t)v675, 8uLL).u64[0];
      v672 += 128;
      if (!--v674)
        goto LABEL_747;
    }
  }
  v15 = 0;
  v604 = v918[0];
  if (!v918[0])
    goto LABEL_694;
  do
  {
LABEL_693:
    v605 = (_QWORD *)*v604;
    operator delete(v604);
    v604 = v605;
  }
  while (v605);
LABEL_694:
  v606 = (void *)__n[0];
  __n[0] = 0;
  if (v606)
    operator delete(v606);
  if (v944[0])
  {
    v944[1] = v944[0];
    operator delete((void *)v944[0]);
  }
  v607 = v954[0];
  if (v954[0])
  {
    do
    {
      v608 = (_QWORD *)*v607;
      operator delete(v607);
      v607 = v608;
    }
    while (v608);
  }
  v609 = v953[0];
  v953[0] = 0;
  if (v609)
    operator delete(v609);
  if (v551)
    operator delete(v551);
  if (v888[1])
  {
    *(void **)&v889 = v888[1];
    operator delete(v888[1]);
  }
  if (v887[0])
  {
    v887[1] = v887[0];
    operator delete(v887[0]);
  }
  v610 = (char *)v890;
  if (v890)
  {
    v611 = (char *)v891;
    v612 = v890;
    if ((void *)v891 != v890)
    {
      v613 = (char *)v891;
      do
      {
        v615 = (void *)*((_QWORD *)v613 - 3);
        v613 -= 24;
        v614 = v615;
        if (v615)
        {
          *((_QWORD *)v611 - 2) = v614;
          operator delete(v614);
        }
        v611 = v613;
      }
      while (v613 != v610);
      v612 = v890;
    }
    *(_QWORD *)&v891 = v610;
    operator delete(v612);
  }
  v616 = (char *)*MEMORY[0x24BEDB7F0];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v616;
  v618 = *(char **)(MEMORY[0x24BEDB7F0] + 64);
  v617 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *((_QWORD *)v616 - 3)) = (std::string::size_type)v618;
  v619 = MEMORY[0x24BEDB848] + 16;
  __p.__r_.__value_.__r.__words[2] = v617;
  v893 = MEMORY[0x24BEDB848] + 16;
  if (v899 < 0)
    operator delete(v898);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v902);
  v903 = v616;
  *(char **)((char *)&v903 + *((_QWORD *)v616 - 3)) = v618;
  *((_QWORD *)&v904 + 1) = v617;
  v905 = v619;
  if (v911 < 0)
    operator delete(v910);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v914);
  if (v915)
    operator delete(v915);
  if (v773)
    operator delete(v773);
  return v15;
}

void sub_20F3AEB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  void *v66;
  void *v68;
  void *v69;

  sub_20E8C25A8((uint64_t)&STACK[0x680]);
  v68 = (void *)STACK[0x7D0];
  if (STACK[0x7D0])
  {
    STACK[0x7D8] = (unint64_t)v68;
    operator delete(v68);
  }
  sub_20E8C25A8((uint64_t)&STACK[0x830]);
  if (v66)
    operator delete(v66);
  sub_20E9AA8C8((uint64_t)&STACK[0x3F0]);
  sub_20E9DD680((void **)&STACK[0x420]);
  sub_20E863784((uint64_t)&STACK[0x438]);
  v69 = (void *)STACK[0x668];
  sub_20E863784((uint64_t)&STACK[0x550]);
  if (v69)
  {
    STACK[0x670] = (unint64_t)v69;
    operator delete(v69);
  }
  if (a66)
    operator delete(a66);
  _Unwind_Resume(a1);
}

void sub_20F3AF0B4(void **a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unsigned int a5, int a6, _QWORD *a7)
{
  uint64_t *v8;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  __int128 v44;
  char *v45;
  char *v46;
  __int128 v47;
  int v48;
  char v49;
  char *v50;
  char *v51;
  char *v52;
  void *v53;
  _QWORD *v55;
  uint64_t *v57;
  char v58;
  uint64_t *v59;
  __int128 *v60;
  char *v62;
  char *v63;
  void *__p;
  __int128 *v65;
  char *v66;
  char *v67;

  v8 = a2;
  v10 = (char *)a3 - (char *)a2;
  v11 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
  v12 = a5;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v11 < a5)
  {
    if (a3 == a2)
      return;
    v13 = (char *)operator new((char *)a3 - (char *)a2);
    *a1 = v13;
    v14 = &v13[24 * v11];
    a1[2] = v14;
    memcpy(v13, v8, v10 - 4);
    v58 = 0;
    a1[1] = v14;
    v55 = (_QWORD *)(a4 + 168);
    v57 = a3;
    while (1)
    {
      v59 = v8;
      sub_20F23A0A0(**(_QWORD ***)(a4 + 424), (__int128 *)v8, &v66);
      v15 = v66;
      v16 = v67;
      if (v66 == v67)
        break;
      v17 = (char *)*a1;
      v18 = (char *)a1[1];
      while (1)
      {
        v21 = v18;
        if (v17 != v18)
        {
          v21 = v17;
          while (*((_DWORD *)v21 + 4) != *((_DWORD *)v15 + 4)
               || *(_QWORD *)v21 != *(_QWORD *)v15
               || *((_DWORD *)v21 + 2) != *((_DWORD *)v15 + 2))
          {
            v21 += 24;
            if (v21 == v18)
            {
              v21 = v18;
              break;
            }
          }
        }
        if (v21 == v18)
        {
          v22 = (unint64_t)a1[2];
          if ((unint64_t)v18 < v22)
          {
            v19 = *(_OWORD *)v15;
            *((_QWORD *)v18 + 2) = *((_QWORD *)v15 + 2);
            *(_OWORD *)v18 = v19;
            v20 = v18 + 24;
          }
          else
          {
            v23 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3) + 1;
            if (v23 > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v17) >> 3);
            if (2 * v24 > v23)
              v23 = 2 * v24;
            v25 = v24 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v23;
            if (v25)
            {
              if (v25 > 0xAAAAAAAAAAAAAAALL)
                sub_20E877A38();
              v26 = (char *)operator new(24 * v25);
            }
            else
            {
              v26 = 0;
            }
            v27 = *(_OWORD *)v15;
            v28 = &v26[8 * ((v18 - v17) >> 3)];
            *((_QWORD *)v28 + 2) = *((_QWORD *)v15 + 2);
            *(_OWORD *)v28 = v27;
            v29 = v28;
            if (v17 != v18)
            {
              do
              {
                v30 = *(_OWORD *)(v18 - 24);
                *((_DWORD *)v29 - 2) = *((_DWORD *)v18 - 2);
                *(_OWORD *)(v29 - 24) = v30;
                v29 -= 24;
                v18 -= 24;
              }
              while (v18 != v17);
              v18 = (char *)*a1;
            }
            v20 = v28 + 24;
            *a1 = v29;
            a1[1] = v28 + 24;
            a1[2] = &v26[24 * v25];
            if (v18)
              operator delete(v18);
          }
          a1[1] = v20;
          v17 = (char *)*a1;
          v18 = v20;
          if (0xAAAAAAAAAAAAAAABLL * ((v20 - (_BYTE *)*a1) >> 3) >= v12)
            break;
        }
        v15 += 24;
        if (v15 == v16)
          goto LABEL_34;
      }
      v48 = 1;
      v58 = 1;
      v50 = v66;
      if (v66)
      {
LABEL_83:
        v67 = v50;
        operator delete(v50);
      }
LABEL_84:
      if (v48)
      {
        if ((v58 & 1) == 0)
        {
          v53 = *a1;
          if (*a1)
          {
            a1[1] = v53;
            operator delete(v53);
          }
        }
        return;
      }
      v8 = v59 + 3;
      if (v59 + 3 == v57)
        return;
    }
LABEL_34:
    if (a6)
      sub_20F7C507C(v55, v59, &__p);
    else
      sub_20F7CB71C(v55, v59, a7, &__p);
    v31 = (__int128 *)__p;
    v60 = v65;
    if (__p == v65)
    {
      v48 = 0;
      if (!__p)
        goto LABEL_82;
      goto LABEL_81;
    }
    while (1)
    {
      sub_20F23A0A0(**(_QWORD ***)(a4 + 424), v31, &v62);
      v33 = v62;
      v32 = v63;
      if (v62 == v63)
      {
        v48 = 0;
        v49 = 1;
        if (!v62)
          goto LABEL_75;
      }
      else
      {
        v34 = (char *)*a1;
        v35 = (char *)a1[1];
        while (1)
        {
          v38 = v35;
          if (v34 != v35)
          {
            v38 = v34;
            while (*((_DWORD *)v38 + 4) != *((_DWORD *)v33 + 4)
                 || *(_QWORD *)v38 != *(_QWORD *)v33
                 || *((_DWORD *)v38 + 2) != *((_DWORD *)v33 + 2))
            {
              v38 += 24;
              if (v38 == v35)
              {
                v38 = v35;
                break;
              }
            }
          }
          if (v38 == v35)
          {
            v39 = (unint64_t)a1[2];
            if ((unint64_t)v35 < v39)
            {
              v36 = *(_OWORD *)v33;
              *((_QWORD *)v35 + 2) = *((_QWORD *)v33 + 2);
              *(_OWORD *)v35 = v36;
              v37 = v35 + 24;
            }
            else
            {
              v40 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v34) >> 3) + 1;
              if (v40 > 0xAAAAAAAAAAAAAAALL)
                sub_20E867F44();
              v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (_QWORD)v34) >> 3);
              if (2 * v41 > v40)
                v40 = 2 * v41;
              v42 = v41 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v40;
              if (v42)
              {
                if (v42 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E877A38();
                v43 = (char *)operator new(24 * v42);
              }
              else
              {
                v43 = 0;
              }
              v44 = *(_OWORD *)v33;
              v45 = &v43[8 * ((v35 - v34) >> 3)];
              *((_QWORD *)v45 + 2) = *((_QWORD *)v33 + 2);
              *(_OWORD *)v45 = v44;
              v46 = v45;
              if (v34 != v35)
              {
                do
                {
                  v47 = *(_OWORD *)(v35 - 24);
                  *((_DWORD *)v46 - 2) = *((_DWORD *)v35 - 2);
                  *(_OWORD *)(v46 - 24) = v47;
                  v46 -= 24;
                  v35 -= 24;
                }
                while (v35 != v34);
                v35 = (char *)*a1;
              }
              v37 = v45 + 24;
              *a1 = v46;
              a1[1] = v45 + 24;
              a1[2] = &v43[24 * v42];
              if (v35)
                operator delete(v35);
            }
            a1[1] = v37;
            v34 = (char *)*a1;
            v35 = v37;
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)*a1) >> 3) >= v12)
              break;
          }
          v33 += 24;
          if (v33 == v32)
          {
            v48 = 0;
            v49 = 1;
            goto LABEL_73;
          }
        }
        v49 = 0;
        v48 = 1;
        v58 = 1;
LABEL_73:
        v33 = v62;
        if (!v62)
          goto LABEL_75;
      }
      v63 = v33;
      operator delete(v33);
LABEL_75:
      if ((v49 & 1) == 0)
        goto LABEL_78;
      v31 = (__int128 *)((char *)v31 + 472);
      if (v31 == v60)
      {
        v48 = 0;
LABEL_78:
        v31 = (__int128 *)__p;
        if (!__p)
        {
LABEL_82:
          v50 = v66;
          if (v66)
            goto LABEL_83;
          goto LABEL_84;
        }
LABEL_81:
        v65 = v31;
        operator delete(v31);
        goto LABEL_82;
      }
    }
  }
  if (a3 != a2)
  {
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v51 = (char *)operator new((char *)a3 - (char *)a2);
    *a1 = v51;
    v52 = &v51[24 * v11];
    a1[2] = v52;
    memcpy(v51, v8, v10 - 4);
    a1[1] = v52;
  }
}

void sub_20F3AF684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  v24 = *(void **)v22;
  if (*(_QWORD *)v22)
  {
    *(_QWORD *)(v22 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3AF72C(uint64_t a1, double *a2, uint64_t a3)
{
  unint64_t v3;
  double v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  double **v16;
  double *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v6 = *a2;
  v7 = a2[1];
  v8 = 2654435769;
  v9 = *(_QWORD *)a2 + 2654435769;
  if (*a2 == 0.0)
    v9 = 2654435769;
  v10 = *(_QWORD *)&v7 + 2654435769;
  if (v7 == 0.0)
    v10 = 2654435769;
  v11 = ((v9 << 6) + (v9 >> 2) + v10) ^ v9;
  v12 = a2[2];
  if (v12 != 0.0)
    v8 = *((_QWORD *)a2 + 2) + 2654435769;
  v13 = (v8 + (v11 >> 2) + (v11 << 6)) ^ v11;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v3 = (v8 + (v11 >> 2) + (v11 << 6)) ^ v11;
      if (v13 >= v14)
        v3 = v13 % v14;
    }
    else
    {
      v3 = v13 & (v14 - 1);
    }
    v16 = *(double ***)(*(_QWORD *)a1 + 8 * v3);
    if (v16)
    {
      v17 = *v16;
      if (v17)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = *((_QWORD *)v17 + 1);
            if (v19 == v13)
            {
              if (v17[2] == v6 && v17[3] == v7 && v17[4] == v12)
                return;
            }
            else if ((v19 & (v14 - 1)) != v3)
            {
              goto LABEL_33;
            }
            v17 = *(double **)v17;
            if (!v17)
              goto LABEL_33;
          }
        }
        do
        {
          v18 = *((_QWORD *)v17 + 1);
          if (v18 == v13)
          {
            if (v17[2] == v6 && v17[3] == v7 && v17[4] == v12)
              return;
          }
          else
          {
            if (v18 >= v14)
              v18 %= v14;
            if (v18 != v3)
              break;
          }
          v17 = *(double **)v17;
        }
        while (v17);
      }
    }
  }
LABEL_33:
  v20 = operator new(0x28uLL);
  *v20 = 0;
  v20[1] = v13;
  *((_OWORD *)v20 + 1) = *(_OWORD *)a3;
  v20[4] = *(_QWORD *)(a3 + 16);
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (v14 && (float)(v22 * (float)v14) >= v21)
    goto LABEL_61;
  v23 = 1;
  if (v14 >= 3)
    v23 = (v14 & (v14 - 1)) != 0;
  v24 = v23 | (2 * v14);
  v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25)
    prime = v25;
  else
    prime = v24;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v14 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v14)
    goto LABEL_45;
  if (prime < v14)
  {
    v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v14 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      v27 = std::__next_prime(v27);
    }
    else
    {
      v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2)
        v27 = v29;
    }
    if (prime <= v27)
      prime = v27;
    if (prime < v14)
LABEL_45:
      sub_20E8D2B3C(a1, prime);
  }
  v14 = *(_QWORD *)(a1 + 8);
  v30 = v14 - 1;
  if ((v14 & (v14 - 1)) != 0)
  {
    if (v13 >= v14)
    {
      v3 = v13 % v14;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v13 % v14));
      if (!v32)
        goto LABEL_64;
LABEL_62:
      *v20 = *v32;
LABEL_70:
      *v32 = v20;
      goto LABEL_71;
    }
    v3 = v13;
LABEL_61:
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v32)
      goto LABEL_64;
    goto LABEL_62;
  }
  v3 = v30 & v13;
  v31 = *(_QWORD *)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v13));
  if (v32)
    goto LABEL_62;
LABEL_64:
  *v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(v31 + 8 * v3) = a1 + 16;
  if (*v20)
  {
    v33 = *(_QWORD *)(*v20 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v33 >= v14)
        v33 %= v14;
    }
    else
    {
      v33 &= v14 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_70;
  }
LABEL_71:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20F3AFA98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20F3AFAAC(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v24)
  {
    *(_QWORD *)v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v6) = v13;
  if (*(_QWORD *)v10)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20F3AFDA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EDB1EC4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F3AFDB8@<X0>(char **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  int64_t v10;
  char *v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type size;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  std::string v41;
  std::string v42;
  std::string v43;
  _BYTE __p[24];
  int v45;
  char v46;
  char *v47;

  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DB450;
  strcpy(*(char **)__p, "MultiFramePoseRefinerConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)__p, 180, 160);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v41.__r_.__value_.__r.__words[0] = nullsub_1(a2);
  v4 = operator new();
  *(_QWORD *)(v4 + 109) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)v4 = &off_24C9FF188;
  *(_QWORD *)(v4 + 8) = &unk_24C9FF200;
  *(_QWORD *)(v4 + 152) = &unk_24C9FF228;
  *(_OWORD *)(v4 + 160) = 0u;
  v5 = (_QWORD *)(v4 + 160);
  *(_OWORD *)(v4 + 176) = 0u;
  *(_QWORD *)(v4 + 120) = (char *)off_24C9FF320 + 1;
  *(_QWORD *)(v4 + 128) = a1;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  *v6 = &off_24C9FF2E8;
  v6[2] = 0;
  v6[3] = 0;
  v8 = *a1;
  v9 = a1[1];
  v10 = v9 - *a1;
  if (v9 != *a1)
  {
    if (v10 < 0)
      sub_20E867F44();
    v11 = (char *)operator new(v9 - *a1);
    v7[1] = v11;
    v12 = &v11[8 * (v10 >> 3)];
    v7[3] = v12;
    memcpy(v11, v8, v10);
    v7[2] = v12;
    *v5 = v7;
    *((_BYTE *)&v42.__r_.__value_.__s + 23) = 1;
    LOWORD(v42.__r_.__value_.__l.__data_) = 123;
    while (1)
    {
      sub_20E9F6B94((unint64_t *)v8);
      v13 = std::string::append(&v43, ", ", 2uLL);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0)
        v15 = __p;
      else
        v15 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v16 = __p[23];
      else
        v16 = *(_QWORD *)&__p[8];
      std::string::append(&v42, v15, v16);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_7;
LABEL_16:
        operator delete(v43.__r_.__value_.__l.__data_);
        v8 += 8;
        if (v8 == v9)
          goto LABEL_19;
      }
      else
      {
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_16;
LABEL_7:
        v8 += 8;
        if (v8 == v9)
          goto LABEL_19;
      }
    }
  }
  *v5 = v6;
  *((_BYTE *)&v42.__r_.__value_.__s + 23) = 1;
  LOWORD(v42.__r_.__value_.__l.__data_) = 123;
LABEL_19:
  std::string::append(&v42, "}", 1uLL);
  *(std::string *)(v4 + 168) = v42;
  sub_20E8B2F9C((uint64_t *)&v41, "MultiFramePoseRefinerConfig.min_num_inliers_for_multi_frame_refinement", v4, "The number of inlier features required to run pose refinement.");
  v40 = nullsub_1(a2);
  v17 = operator new();
  *(_QWORD *)(v17 + 109) = 0;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_QWORD *)v17 = &off_24C9FF380;
  *(_QWORD *)(v17 + 8) = &unk_24C9FF3F8;
  *(_QWORD *)(v17 + 152) = &unk_24C9FF420;
  *(_OWORD *)(v17 + 160) = 0u;
  v18 = (_QWORD *)(v17 + 160);
  *(_OWORD *)(v17 + 176) = 0u;
  *(_QWORD *)(v17 + 120) = (char *)off_24C9FF518 + 1;
  *(_QWORD *)(v17 + 128) = a1 + 3;
  v19 = (_QWORD *)operator new();
  v20 = v19;
  v19[1] = 0;
  *v19 = &off_24C9FF4E0;
  v19[2] = 0;
  v19[3] = 0;
  v21 = a1[3];
  v22 = a1[4];
  v23 = v22 - v21;
  if (v22 != v21)
  {
    if (v23 < 0)
      sub_20E867F44();
    v24 = (char *)operator new(v22 - v21);
    v20[1] = v24;
    v25 = &v24[4 * (v23 >> 2)];
    v20[3] = v25;
    memcpy(v24, v21, v22 - v21);
    v20[2] = v25;
    *v18 = v20;
    *((_BYTE *)&v41.__r_.__value_.__s + 23) = 1;
    LOWORD(v41.__r_.__value_.__l.__data_) = 123;
    while (1)
    {
      v45 = 0;
      sub_20E89F7C4((uint64_t)&v47, (uint64_t)__p, (float *)v21);
      if (v45 == -1)
        sub_20E877AB8();
      v47 = &v46;
      ((void (*)(std::string *__return_ptr, char **, _BYTE *))off_24C9FF358[v45])(&v42, &v47, __p);
      if (v45 != -1)
        ((void (*)(char **, _BYTE *))off_24C9FF340[v45])(&v47, __p);
      v26 = std::string::append(&v42, ", ", 2uLL);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v43;
      else
        v28 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      else
        size = v43.__r_.__value_.__l.__size_;
      std::string::append(&v41, (const std::string::value_type *)v28, size);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v43.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_23;
LABEL_35:
        operator delete(v42.__r_.__value_.__l.__data_);
        v21 += 4;
        if (v21 == v22)
          goto LABEL_38;
      }
      else
      {
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_35;
LABEL_23:
        v21 += 4;
        if (v21 == v22)
          goto LABEL_38;
      }
    }
  }
  *v18 = v19;
  *((_BYTE *)&v41.__r_.__value_.__s + 23) = 1;
  LOWORD(v41.__r_.__value_.__l.__data_) = 123;
LABEL_38:
  std::string::append(&v41, "}", 1uLL);
  *(std::string *)(v17 + 168) = v41;
  sub_20E8B2F9C(&v40, "MultiFramePoseRefinerConfig.min_inlier_ratio_for_multi_frame_refinement", v17, "The feature inlier ratio required to run pose refinement.");
  *(_QWORD *)__p = nullsub_1(a2);
  v30 = sub_20EA9DCF0((unsigned int *)a1 + 12);
  sub_20E8B2F9C((uint64_t *)__p, "MultiFramePoseRefinerConfig.min_num_inlier_poses_for_success", v30, "The number of consistent poses required to accept a pose.");
  *(_QWORD *)__p = nullsub_1(a2);
  v31 = sub_20EA9DCF0((unsigned int *)a1 + 13);
  sub_20E8B2F9C((uint64_t *)__p, "MultiFramePoseRefinerConfig.max_query_frames", v31, "The maximum number of query frames to use for matching.");
  *(_QWORD *)__p = nullsub_1(a2);
  v32 = sub_20EA9DCF0((unsigned int *)a1 + 14);
  sub_20E8B2F9C((uint64_t *)__p, "MultiFramePoseRefinerConfig.max_ref_frames", v32, "The maximum number of reference frames to use for matching.");
  *(_QWORD *)__p = nullsub_1(a2);
  v33 = sub_20EA9DB90((double *)a1 + 8);
  sub_20E8B2F9C((uint64_t *)__p, "MultiFramePoseRefinerConfig.rotation_consistency_threshold_rad", v33, "Threshold in radians to consider poses consistent.");
  *(_QWORD *)__p = nullsub_1(a2);
  v34 = sub_20EA9DB90((double *)a1 + 9);
  sub_20E8B2F9C((uint64_t *)__p, "MultiFramePoseRefinerConfig.position_consistency_threshold", v34, "Threshold in meters to consider poses consistent.");
  *(_QWORD *)__p = nullsub_1(a2);
  v35 = sub_20EA9DCF0((unsigned int *)a1 + 20);
  sub_20E8B2F9C((uint64_t *)__p, "MultiFramePoseRefinerConfig.max_pose_averaging_iterations", v35, "Max iterations to use for pose averaging.");
  *(_QWORD *)__p = nullsub_1(a2);
  v36 = sub_20EAA14D8((_BYTE *)a1 + 84);
  sub_20E8B2F9C((uint64_t *)__p, "MultiFramePoseRefinerConfig.use_weak_keyframes_for_ml", v36, "Whether to consider weak neighbor keyframes for ML Reloc.");
  *(_QWORD *)__p = nullsub_1(a2);
  v37 = sub_20EAA14D8((_BYTE *)a1 + 85);
  sub_20E8B2F9C((uint64_t *)__p, "MultiFramePoseRefinerConfig.use_reloc_index_exhaustive", v37, "Use reloc feature index instead of standard feature index for matching.");
  *(_QWORD *)__p = nullsub_1(a2);
  v38 = sub_20EA9DCF0((unsigned int *)a1 + 22);
  return sub_20E8B2F9C((uint64_t *)__p, "MultiFramePoseRefinerConfig.min_num_inliers_3d", v38, "Set the minimum unique 3d points required for a successful pose refinement.");
}

void sub_20F3B0460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  sub_20E869298(v35);
  _Unwind_Resume(a1);
}

void sub_20F3B0640(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F3B0B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F3B0C54(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F3B0C74(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F3B0C94(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F3B0C9C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F3B0CA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

char **sub_20F3B0CFC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const char *v5;
  char **v6;
  char **result;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  v5 = (const char *)(*(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (v5 == (const char *)(0x8000000210314124 & 0x7FFFFFFFFFFFFFFFLL)
    || !strcmp(v5, (const char *)(0x8000000210314124 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v6 = (char **)(*a2 + 8);
    result = *(char ***)(a1 + 16);
    if (!result)
      goto LABEL_11;
  }
  else
  {
    v6 = 0;
    result = *(char ***)(a1 + 16);
    if (!result)
      goto LABEL_11;
  }
  if (result != v6)
    result = (char **)sub_20E86811C(result, *v6, v6[1], (v6[1] - *v6) >> 3);
LABEL_11:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_765;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (char **)(*(uint64_t (**)(uint64_t, char **))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F3B0E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3B0E24(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FF188;
  *(_QWORD *)(a1 + 8) = &unk_24C9FF200;
  *(_QWORD *)(a1 + 152) = &unk_24C9FF228;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F3B1628(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F3B1628(a1);
}

void sub_20F3B0E8C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FF188;
  *(_QWORD *)(a1 + 8) = &unk_24C9FF200;
  *(_QWORD *)(a1 + 152) = &unk_24C9FF228;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F3B1628(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

uint64_t sub_20F3B0F08(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void **v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void **v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void *__p;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  std::bad_cast v49;

  v3 = a3;
  if (*a3 != a3[1] || (v41 = *(_QWORD *)(a1 + 80)) == 0)
  {
    v5 = (_QWORD *)*a2;
    if (*a2)
      goto LABEL_3;
    v5 = (_QWORD *)operator new();
    *v5 = &off_24C9FF2E8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0;
    v43 = (_QWORD *)*a2;
    *a2 = (uint64_t)v5;
    if (!v43 || ((*(void (**)(_QWORD *))(*v43 + 8))(v43), (v5 = (_QWORD *)*a2) != 0))
LABEL_3:
      v6 = (*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    else
      v6 = MEMORY[0x24BEDB7C8];
    result = *(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x8000000210314124 & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)(0x8000000210314124 & 0x7FFFFFFFFFFFFFFFLL)),
          !(_DWORD)result))
    {
      v8 = *a2 + 8;
      v9 = *v3;
      if (v3[1] == *v3)
        return result;
    }
    else
    {
      v8 = 0;
      v9 = *v3;
      if (v3[1] == *v3)
        return result;
    }
    v10 = 0;
    v11 = 0;
    v12 = MEMORY[0x24BEDB7B0];
    v44 = v3;
    while (1)
    {
      v48 = 0;
      __p = 0;
      v46 = 0;
      v47 = 0;
      v46 = sub_20E8ADE68((uint64_t *)&__p, (__int128 *)(v9 + 24 * v10));
      sub_20EAA6014((uint64_t *)&v48, &__p);
      if (v48)
      {
        v13 = (const char *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v48 + 16))(v48) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v14 = (const char *)(*(_QWORD *)(v12 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (v13 == v14)
          goto LABEL_16;
      }
      else
      {
        v13 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7C8] + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v14 = (const char *)(*(_QWORD *)(v12 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (v13 == v14)
          goto LABEL_16;
      }
      if (strcmp(v13, v14))
      {
        v49.__vftable = 0;
        std::bad_cast::bad_cast(&v49);
        v49.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
        sub_20EAA40CC();
      }
LABEL_16:
      v15 = v48[1];
      v17 = *(char **)(v8 + 8);
      v16 = *(_QWORD *)(v8 + 16);
      if ((unint64_t)v17 >= v16)
      {
        v19 = v12;
        v20 = *(char **)v8;
        v21 = (uint64_t)&v17[-*(_QWORD *)v8];
        v22 = v21 >> 3;
        v23 = (v21 >> 3) + 1;
        if (v23 >> 61)
          sub_20E867F44();
        v24 = v16 - (_QWORD)v20;
        if (v24 >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 >> 61)
            sub_20E877A38();
          v26 = operator new(8 * v25);
          v27 = &v26[8 * v22];
          *v27 = v15;
          v28 = (uint64_t)(v27 + 1);
          v29 = v17 - v20;
          if (v17 != v20)
          {
LABEL_28:
            v30 = v29 - 8;
            if (v30 < 0x58)
              goto LABEL_61;
            if ((unint64_t)(v17 - &v26[v21]) < 0x20)
              goto LABEL_61;
            v31 = (v30 >> 3) + 1;
            v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
            v33 = &v17[-v32];
            v27 = (_QWORD *)((char *)v27 - v32);
            v34 = &v26[8 * v22 - 16];
            v35 = v17 - 16;
            v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v37 = *(_OWORD *)v35;
              *(v34 - 1) = *((_OWORD *)v35 - 1);
              *v34 = v37;
              v34 -= 2;
              v35 -= 32;
              v36 -= 4;
            }
            while (v36);
            v17 = v33;
            if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_61:
              do
              {
                v38 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *--v27 = v38;
              }
              while (v17 != v20);
            }
          }
        }
        else
        {
          v26 = 0;
          v27 = (_QWORD *)(8 * v22);
          *(_QWORD *)(8 * v22) = v15;
          v28 = 8 * v22 + 8;
          v29 = v17 - v20;
          if (v17 != v20)
            goto LABEL_28;
        }
        *(_QWORD *)v8 = v27;
        *(_QWORD *)(v8 + 8) = v28;
        *(_QWORD *)(v8 + 16) = &v26[8 * v25];
        if (v20)
          operator delete(v20);
        v12 = v19;
        v3 = v44;
        v18 = (void **)__p;
        *(_QWORD *)(v8 + 8) = v28;
        if (!v18)
          goto LABEL_47;
LABEL_40:
        v39 = (void **)v46;
        v40 = v18;
        if ((void **)v46 != v18)
        {
          do
          {
            if (*((char *)v39 - 1) < 0)
              operator delete(*(v39 - 3));
            v39 -= 3;
          }
          while (v39 != v18);
          v40 = __p;
        }
        v46 = (uint64_t)v18;
        operator delete(v40);
        goto LABEL_47;
      }
      *(_QWORD *)v17 = v15;
      *(_QWORD *)(v8 + 8) = v17 + 8;
      v18 = (void **)__p;
      if (__p)
        goto LABEL_40;
LABEL_47:
      result = (uint64_t)v48;
      if (v48)
        result = (*(uint64_t (**)(_QWORD *))(*v48 + 8))(v48);
      v9 = *v3;
      v10 = ++v11;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3) <= v11)
        return result;
    }
  }
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
  result = *a2;
  *a2 = v42;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20F3B1328(_Unwind_Exception *a1, int a2, _QWORD *a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  va_list va;

  va_start(va, a3);
  sub_20E89FB98((void **)va);
  v7 = *(_QWORD *)(v4 - 104);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C((void **)va, *a3 + 24 * v3);
    sub_20EA9ED20((uint64_t)va);
  }
  _Unwind_Resume(a1);
}

void sub_20F3B139C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F3B13B4);
}

void *sub_20F3B13C0()
{
  return &unk_24C9C3C28;
}

uint64_t sub_20F3B13CC(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F3B13D4()
{
  return &unk_24C9C3C28;
}

uint64_t sub_20F3B13E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FF188;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FF200;
  *(_QWORD *)(a1 + 144) = &unk_24C9FF228;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F3B1628(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F3B1628(v2);
}

void sub_20F3B1450(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FF188;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FF200;
  *(_QWORD *)(a1 + 144) = &unk_24C9FF228;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F3B1628(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F3B14D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FF188;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FF200;
  *(_QWORD *)a1 = &unk_24C9FF228;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F3B1628(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F3B1628(v2);
}

void sub_20F3B1544(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FF188;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FF200;
  *(_QWORD *)a1 = &unk_24C9FF228;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F3B1628(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F3B15C8(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F3B15D4(uint64_t a1)
{
  sub_20F3B1628(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F3B15F8(uint64_t a1)
{
  return sub_20F3B1628(a1 - 8);
}

void sub_20F3B1600(uint64_t a1)
{
  sub_20F3B1628(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F3B1628(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9FF250;
  *(_QWORD *)(a1 + 8) = &unk_24C9FF2C0;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_20F3B16F4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20F3B1724(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

void *sub_20F3B1764()
{
  return &unk_24C9C3C28;
}

_QWORD *sub_20F3B1770(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  *v2 = &off_24C9FF2E8;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_20F3B1810(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x212BC6398](v1, 0x91C4089455612);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3B1844(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FF330;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__16vectorImNS0_9allocatorImEEEEEP"
                                      "N5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__16vectorImNS0_9allocatorImEEEEEPN5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

char **sub_20F3B18F0(char ***a1, char **a2)
{
  char **result;

  result = *a1;
  if (result != a2)
    return (char **)sub_20E86811C(result, *a2, a2[1], (a2[1] - *a2) >> 3);
  return result;
}

void sub_20F3B1914(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F3B1E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F3B1F28(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F3B1F48(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F3B1F68(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F3B1F70(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F3B1F78(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

char **sub_20F3B1FD0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const char *v5;
  char **v6;
  char **result;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  v5 = (const char *)(*(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (v5 == (const char *)(0x8000000210314100 & 0x7FFFFFFFFFFFFFFFLL)
    || !strcmp(v5, (const char *)(0x8000000210314100 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v6 = (char **)(*a2 + 8);
    result = *(char ***)(a1 + 16);
    if (!result)
      goto LABEL_11;
  }
  else
  {
    v6 = 0;
    result = *(char ***)(a1 + 16);
    if (!result)
      goto LABEL_11;
  }
  if (result != v6)
    result = (char **)sub_20E867E00(result, *v6, v6[1], (v6[1] - *v6) >> 2);
LABEL_11:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_766;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (char **)(*(uint64_t (**)(uint64_t, char **))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F3B20E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3B20F8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FF380;
  *(_QWORD *)(a1 + 8) = &unk_24C9FF3F8;
  *(_QWORD *)(a1 + 152) = &unk_24C9FF420;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F3B2900(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F3B2900(a1);
}

void sub_20F3B2160(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FF380;
  *(_QWORD *)(a1 + 8) = &unk_24C9FF3F8;
  *(_QWORD *)(a1 + 152) = &unk_24C9FF420;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F3B2900(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

uint64_t sub_20F3B21DC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  int v15;
  unint64_t v16;
  char *v17;
  void **v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _DWORD *v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  void **v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void *__p;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  std::bad_cast v48;

  if (*a3 != a3[1] || (v41 = *(_QWORD *)(a1 + 80)) == 0)
  {
    v5 = (_QWORD *)*a2;
    if (*a2)
      goto LABEL_3;
    v5 = (_QWORD *)operator new();
    *v5 = &off_24C9FF4E0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0;
    v43 = (_QWORD *)*a2;
    *a2 = (uint64_t)v5;
    if (!v43 || ((*(void (**)(_QWORD *))(*v43 + 8))(v43), (v5 = (_QWORD *)*a2) != 0))
LABEL_3:
      v6 = (*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    else
      v6 = MEMORY[0x24BEDB7C8];
    result = *(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x8000000210314100 & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)(0x8000000210314100 & 0x7FFFFFFFFFFFFFFFLL)),
          !(_DWORD)result))
    {
      v8 = *a2 + 8;
      v9 = *a3;
      if (a3[1] == *a3)
        return result;
    }
    else
    {
      v8 = 0;
      v9 = *a3;
      if (a3[1] == *a3)
        return result;
    }
    v10 = 0;
    v11 = 0;
    v12 = MEMORY[0x24BEDB788];
    while (1)
    {
      v47 = 0;
      __p = 0;
      v45 = 0;
      v46 = 0;
      v45 = sub_20E8ADE68((uint64_t *)&__p, (__int128 *)(v9 + 24 * v10));
      sub_20EF53C10((uint64_t *)&v47, &__p);
      if (v47)
      {
        v13 = (const char *)(*(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v47 + 16))(v47) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v14 = (const char *)(*(_QWORD *)(v12 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (v13 == v14)
          goto LABEL_16;
      }
      else
      {
        v13 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7C8] + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v14 = (const char *)(*(_QWORD *)(v12 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (v13 == v14)
          goto LABEL_16;
      }
      if (strcmp(v13, v14))
      {
        v48.__vftable = 0;
        std::bad_cast::bad_cast(&v48);
        v48.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
        sub_20EAA40CC();
      }
LABEL_16:
      v15 = v47[2];
      v17 = *(char **)(v8 + 8);
      v16 = *(_QWORD *)(v8 + 16);
      if ((unint64_t)v17 >= v16)
      {
        v19 = v12;
        v20 = *(char **)v8;
        v21 = (uint64_t)&v17[-*(_QWORD *)v8];
        v22 = v21 >> 2;
        v23 = (v21 >> 2) + 1;
        if (v23 >> 62)
          sub_20E867F44();
        v24 = v16 - (_QWORD)v20;
        if (v24 >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 >> 62)
            sub_20E877A38();
          v26 = operator new(4 * v25);
          v27 = &v26[4 * v22];
          *v27 = v15;
          v28 = (uint64_t)(v27 + 1);
          v29 = v17 - v20;
          if (v17 != v20)
          {
LABEL_28:
            v30 = v29 - 4;
            if (v30 < 0x2C)
              goto LABEL_61;
            if ((unint64_t)(v17 - &v26[v21]) < 0x20)
              goto LABEL_61;
            v31 = (v30 >> 2) + 1;
            v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
            v33 = &v17[-v32];
            v27 = (_DWORD *)((char *)v27 - v32);
            v34 = &v26[4 * v22 - 16];
            v35 = v17 - 16;
            v36 = v31 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v37 = *(_OWORD *)v35;
              *(v34 - 1) = *((_OWORD *)v35 - 1);
              *v34 = v37;
              v34 -= 2;
              v35 -= 32;
              v36 -= 8;
            }
            while (v36);
            v17 = v33;
            if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_61:
              do
              {
                v38 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *--v27 = v38;
              }
              while (v17 != v20);
            }
          }
        }
        else
        {
          v26 = 0;
          v27 = (_DWORD *)(4 * v22);
          *(_DWORD *)(4 * v22) = v15;
          v28 = 4 * v22 + 4;
          v29 = v17 - v20;
          if (v17 != v20)
            goto LABEL_28;
        }
        *(_QWORD *)v8 = v27;
        *(_QWORD *)(v8 + 8) = v28;
        *(_QWORD *)(v8 + 16) = &v26[4 * v25];
        if (v20)
          operator delete(v20);
        v12 = v19;
        *(_QWORD *)(v8 + 8) = v28;
        v18 = (void **)__p;
        if (!__p)
          goto LABEL_47;
LABEL_40:
        v39 = (void **)v45;
        v40 = v18;
        if ((void **)v45 != v18)
        {
          do
          {
            if (*((char *)v39 - 1) < 0)
              operator delete(*(v39 - 3));
            v39 -= 3;
          }
          while (v39 != v18);
          v40 = __p;
        }
        v45 = (uint64_t)v18;
        operator delete(v40);
        goto LABEL_47;
      }
      *(_DWORD *)v17 = v15;
      *(_QWORD *)(v8 + 8) = v17 + 4;
      v18 = (void **)__p;
      if (__p)
        goto LABEL_40;
LABEL_47:
      result = (uint64_t)v47;
      if (v47)
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
      v9 = *a3;
      v10 = ++v11;
      if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v11)
        return result;
    }
  }
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
  result = *a2;
  *a2 = v42;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20F3B2604(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  va_list va;

  va_start(va, a3);
  sub_20E89FB98((void **)va);
  v8 = *(_QWORD *)(v5 - 120);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C((void **)va, *v3 + 24 * v4);
    sub_20EA9ED20((uint64_t)va);
  }
  _Unwind_Resume(a1);
}

void sub_20F3B2674(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F3B268CLL);
}

void *sub_20F3B2698()
{
  return &unk_24C9C3C18;
}

uint64_t sub_20F3B26A4(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F3B26AC()
{
  return &unk_24C9C3C18;
}

uint64_t sub_20F3B26B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FF380;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FF3F8;
  *(_QWORD *)(a1 + 144) = &unk_24C9FF420;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F3B2900(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F3B2900(v2);
}

void sub_20F3B2728(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FF380;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FF3F8;
  *(_QWORD *)(a1 + 144) = &unk_24C9FF420;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F3B2900(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F3B27AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FF380;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FF3F8;
  *(_QWORD *)a1 = &unk_24C9FF420;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F3B2900(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F3B2900(v2);
}

void sub_20F3B281C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FF380;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FF3F8;
  *(_QWORD *)a1 = &unk_24C9FF420;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F3B2900(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F3B28A0(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F3B28AC(uint64_t a1)
{
  sub_20F3B2900(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F3B28D0(uint64_t a1)
{
  return sub_20F3B2900(a1 - 8);
}

void sub_20F3B28D8(uint64_t a1)
{
  sub_20F3B2900(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F3B2900(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9FF448;
  *(_QWORD *)(a1 + 8) = &unk_24C9FF4B8;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_20F3B29CC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20F3B29FC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

void *sub_20F3B2A3C()
{
  return &unk_24C9C3C18;
}

_QWORD *sub_20F3B2A48(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  *v2 = &off_24C9FF4E0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_20F3B2AE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x212BC6398](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3B2B1C(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FF528;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__16vectorIfNS0_9allocatorIfEEEEEP"
                                      "N5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__16vectorIfNS0_9allocatorIfEEEEEPN5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

char **sub_20F3B2BC8(char ***a1, char **a2)
{
  char **result;

  result = *a1;
  if (result != a2)
    return (char **)sub_20E867E00(result, *a2, a2[1], (a2[1] - *a2) >> 2);
  return result;
}

unint64_t sub_20F3B2BEC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unint64_t result;
  int v6;
  unint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  void **v13;
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  size_t v42;
  size_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  const char *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  int v103;
  const char *v104;
  const char *v105;
  unint64_t v106;
  _QWORD v107[3];
  int v108;
  const char *v109;
  int v110;
  const char *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void *__dst[2];
  int64_t v115;
  void *v116[2];
  _QWORD v117[3];
  const void *v118;
  uint64_t v119;
  const void *v120;
  unint64_t v121;
  void *__p;
  char v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  std::__shared_weak_count *v129;
  char *v130;
  std::__shared_weak_count *v131;
  _QWORD *v132;
  __int128 v133;
  _BYTE v134[24];
  __int128 v135;
  void *v136[2];
  unint64_t v137;
  char v138;
  _QWORD v139[5];

  v139[2] = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A688E8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A688E8))
  {
    sub_21021D3D8(v134);
    sub_20E8610C0(v116, "cv3d.vio.area_mapping");
    sub_20E8C4068((uint64_t **)v134, (uint64_t)v116, &qword_254A688E0);
    if (SHIBYTE(v117[0]) < 0)
      operator delete(v116[0]);
    __cxa_guard_release(&qword_254A688E8);
  }
  result = qword_254A688E0;
  v127 = qword_254A688E0;
  if (**(int **)(qword_254A688E0 + 56) <= 2)
  {
    v6 = *(unsigned __int8 *)(qword_254A688E0 + 72);
    result = sub_20E8C31DC(qword_254A688E0, "OSLogSurrogateAppender", 1, 0);
    v7 = result;
    if (v6 || result != 0)
    {
      sub_20E863438((uint64_t)v116);
      sub_20E86A980(v117, (uint64_t)"NewSubmapLogic::Update data: map session ", 41);
      v9 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v9, (uint64_t)" map kfs:", 9);
      v10 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v10, (uint64_t)" low_health_tracking_state: ", 28);
      v11 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v11, (uint64_t)" last state_:", 13);
      std::ostream::operator<<();
      if ((v125 & 0x10) != 0)
      {
        v14 = v124;
        if (v124 < v121)
        {
          v124 = v121;
          v14 = v121;
        }
        v15 = v120;
        v12 = v14 - (_QWORD)v120;
        if (v14 - (unint64_t)v120 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_65;
      }
      else
      {
        if ((v125 & 8) == 0)
        {
          v12 = 0;
          HIBYTE(v115) = 0;
          v13 = __dst;
          goto LABEL_20;
        }
        v15 = v118;
        v12 = v119 - (_QWORD)v118;
        if ((unint64_t)(v119 - (_QWORD)v118) > 0x7FFFFFFFFFFFFFF7)
LABEL_65:
          sub_20E860B7C();
      }
      if (v12 >= 0x17)
      {
        v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v16 = v12 | 7;
        v17 = v16 + 1;
        v13 = (void **)operator new(v16 + 1);
        __dst[1] = (void *)v12;
        v115 = v17 | 0x8000000000000000;
        __dst[0] = v13;
      }
      else
      {
        HIBYTE(v115) = v12;
        v13 = __dst;
        if (!v12)
        {
LABEL_20:
          *((_BYTE *)v13 + v12) = 0;
          v107[0] = &v127;
          v107[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v107[2] = std::chrono::system_clock::now().__d_.__rep_;
          v108 = 2;
          v109 = "unknown file";
          v110 = 57;
          v112 = 0;
          v113 = 0;
          v111 = "unknown function";
          if (v115 >= 0)
            v18 = (const char *)__dst;
          else
            v18 = (const char *)__dst[0];
          v19 = *(_QWORD *)v107[0];
          v20 = (const char *)(*(_QWORD *)v107[0] + 16);
          v105 = v20;
          if (*(char *)(*(_QWORD *)v107[0] + 39) < 0)
          {
            v20 = *(const char **)(v19 + 16);
            v21 = *(_QWORD *)(v19 + 24);
            v106 = v7;
            v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v23 & 1) != 0)
              goto LABEL_27;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)v107[0] + 39);
            v106 = v7;
            v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v22 & 1) != 0)
              goto LABEL_27;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v134);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v134);
            if ((_BYTE)v135 && (v134[23] & 0x80000000) != 0)
              operator delete(*(void **)v134);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_27:
          if (byte_254A4A4F8[23] >= 0)
            v24 = byte_254A4A4F8;
          else
            v24 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v25 = byte_254A4A4F8[23];
          else
            v25 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v134 = os_log_create(v24, v20);
          v26 = &v134[8];
          if (v25 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v25 >= 0x17)
          {
            v104 = v20;
            v27 = a2;
            v28 = a1;
            v29 = v19;
            v30 = v18;
            v31 = v6;
            v32 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v25 | 7) != 0x17)
              v32 = v25 | 7;
            v33 = v32 + 1;
            v26 = operator new(v32 + 1);
            *(_QWORD *)&v134[16] = v25;
            *(_QWORD *)&v135 = v33 | 0x8000000000000000;
            *(_QWORD *)&v134[8] = v26;
            v6 = v31;
            v18 = v30;
            v19 = v29;
            a1 = v28;
            a2 = v27;
            v20 = v104;
          }
          else
          {
            BYTE7(v135) = v25;
            if (!v25)
            {
LABEL_41:
              v26[v25] = 0;
              BYTE8(v135) = 1;
              v34 = v136;
              if (v21 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v21 >= 0x17)
              {
                v37 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v21 | 7) != 0x17)
                  v37 = v21 | 7;
                v38 = v37 + 1;
                v34 = (void **)operator new(v37 + 1);
                v136[1] = (void *)v21;
                v137 = v38 | 0x8000000000000000;
                v136[0] = v34;
                v35 = v106;
              }
              else
              {
                HIBYTE(v137) = v21;
                v35 = v106;
                if (!v21)
                {
                  LOBYTE(v136[0]) = 0;
                  v138 = 1;
                  v36 = *(NSObject **)v134;
                  if ((SHIBYTE(v137) & 0x80000000) == 0)
                    goto LABEL_45;
                  goto LABEL_51;
                }
              }
              memmove(v34, v20, v21);
              *((_BYTE *)v34 + v21) = 0;
              v138 = 1;
              v36 = *(NSObject **)v134;
              if ((SHIBYTE(v137) & 0x80000000) == 0)
              {
LABEL_45:
                if (!BYTE8(v135))
                  goto LABEL_54;
                goto LABEL_52;
              }
LABEL_51:
              operator delete(v136[0]);
              if (!BYTE8(v135))
                goto LABEL_54;
LABEL_52:
              if (SBYTE7(v135) < 0)
                operator delete(*(void **)&v134[8]);
LABEL_54:
              if (*(_QWORD *)v134)
                os_release(*(void **)v134);
              if (!v35 || !*(_QWORD *)(v35 + 24))
              {
                os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG);
                *(_DWORD *)v134 = 136315138;
                *(_QWORD *)&v134[4] = v18;
                v45 = (void *)_os_log_send_and_compose_impl();
                if (v45)
                  free(v45);
                goto LABEL_130;
              }
              v39 = _os_log_pack_size();
              v40 = (std::__shared_weak_count_vtbl *)operator new(v39, (std::align_val_t)8uLL);
              v41 = (std::__shared_weak_count *)operator new();
              v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v41->__shared_owners_ = 0;
              v41->__shared_weak_owners_ = 0;
              v41[1].__vftable = v40;
              *(_QWORD *)&v128 = v40;
              *((_QWORD *)&v128 + 1) = v40;
              v130 = 0;
              v131 = 0;
              v129 = v41;
              v42 = strlen(v18);
              if (v42 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v43 = v42;
              if (v42 >= 0x17)
              {
                v46 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17)
                  v46 = v42 | 7;
                v47 = v46 + 1;
                v44 = operator new(v46 + 1);
                *(_QWORD *)&v133 = v43;
                *((_QWORD *)&v133 + 1) = v47 | 0x8000000000000000;
                v132 = v44;
                v35 = v106;
              }
              else
              {
                HIBYTE(v133) = v42;
                v44 = &v132;
                if (!v42)
                {
LABEL_70:
                  *((_BYTE *)v44 + v43) = 0;
                  v48 = v132;
                  v139[0] = v133;
                  *(_QWORD *)((char *)v139 + 7) = *(_QWORD *)((char *)&v133 + 7);
                  v49 = HIBYTE(v133);
                  v50 = operator new(0x38uLL);
                  v50[1] = 0;
                  v50[2] = 0;
                  v50[3] = off_24C9ABC20;
                  *v50 = &off_24C9ABBD0;
                  v51 = v139[0];
                  v50[4] = v48;
                  v50[5] = v51;
                  *(_QWORD *)((char *)v50 + 47) = *(_QWORD *)((char *)v139 + 7);
                  *((_BYTE *)v50 + 55) = v49;
                  v139[0] = 0;
                  *(_QWORD *)((char *)v139 + 7) = 0;
                  v52 = v131;
                  v130 = (char *)(v50 + 3);
                  v131 = (std::__shared_weak_count *)v50;
                  if (v52)
                  {
                    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
                    do
                      v54 = __ldaxr(p_shared_owners);
                    while (__stlxr(v54 - 1, p_shared_owners));
                    if (!v54)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
                  *(_OWORD *)v134 = v128;
                  v55 = v130;
                  *(_QWORD *)&v134[16] = v129;
                  if (v129)
                  {
                    v56 = (unint64_t *)&v129->__shared_owners_;
                    do
                      v57 = __ldxr(v56);
                    while (__stxr(v57 + 1, v56));
                  }
                  v58 = v131;
                  *(_QWORD *)&v135 = v55;
                  *((_QWORD *)&v135 + 1) = v131;
                  if (v131)
                  {
                    v59 = (unint64_t *)&v131->__shared_owners_;
                    do
                      v60 = __ldxr(v59);
                    while (__stxr(v60 + 1, v59));
                    v136[0] = v55;
                    do
                      v61 = __ldaxr(v59);
                    while (__stlxr(v61 - 1, v59));
                    if (!v61)
                    {
                      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                      std::__shared_weak_count::__release_weak(v58);
                    }
                  }
                  else
                  {
                    v136[0] = v55;
                  }
                  v62 = v129;
                  if (v129)
                  {
                    v63 = (unint64_t *)&v129->__shared_owners_;
                    do
                      v64 = __ldaxr(v63);
                    while (__stlxr(v64 - 1, v63));
                    if (!v64)
                    {
                      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                      std::__shared_weak_count::__release_weak(v62);
                    }
                  }
                  v65 = *(_QWORD *)v134;
                  if (*((char *)v136[0] + 31) >= 0)
                    v66 = (char *)v136[0] + 8;
                  else
                    v66 = (char *)*((_QWORD *)v136[0] + 1);
                  v67 = _os_log_pack_fill();
                  *(_DWORD *)v67 = 136315138;
                  *(_QWORD *)(v67 + 4) = v66;
                  v68 = operator new();
                  v69 = *(unsigned __int8 *)(v19 + 39);
                  v70 = *(const char **)(v19 + 16);
                  v71 = *(_QWORD *)(v19 + 24);
                  v72 = v135;
                  *(_OWORD *)(v68 + 8) = *(_OWORD *)&v134[8];
                  if ((v69 & 0x80u) != 0)
                    v69 = v71;
                  else
                    v70 = v105;
                  *(_QWORD *)v68 = v65;
                  *(_QWORD *)&v134[8] = 0;
                  *(_QWORD *)&v134[16] = 0;
                  *(_OWORD *)(v68 + 24) = v72;
                  v135 = 0uLL;
                  *(_QWORD *)(v68 + 40) = v70;
                  *(_QWORD *)(v68 + 48) = v69;
                  *(_BYTE *)(v68 + 56) = 2;
                  v132 = 0;
                  *(_QWORD *)&v128 = v68;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v35 + 24) + 40))(*(_QWORD *)(v35 + 24), &v128);
                  v73 = v128;
                  *(_QWORD *)&v128 = 0;
                  if (v73)
                  {
                    v74 = *(std::__shared_weak_count **)(v73 + 32);
                    if (v74)
                    {
                      v75 = (unint64_t *)&v74->__shared_owners_;
                      do
                        v76 = __ldaxr(v75);
                      while (__stlxr(v76 - 1, v75));
                      if (!v76)
                      {
                        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                        std::__shared_weak_count::__release_weak(v74);
                      }
                    }
                    v77 = *(std::__shared_weak_count **)(v73 + 16);
                    if (v77)
                    {
                      v78 = (unint64_t *)&v77->__shared_owners_;
                      do
                        v79 = __ldaxr(v78);
                      while (__stlxr(v79 - 1, v78));
                      if (!v79)
                      {
                        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                        std::__shared_weak_count::__release_weak(v77);
                      }
                    }
                    MEMORY[0x212BC6398](v73, 0x10F0C40B62ED6C6);
                    v80 = v132;
                    v132 = 0;
                    if (v80)
                    {
                      v81 = (std::__shared_weak_count *)v80[4];
                      if (v81)
                      {
                        v82 = (unint64_t *)&v81->__shared_owners_;
                        do
                          v83 = __ldaxr(v82);
                        while (__stlxr(v83 - 1, v82));
                        if (!v83)
                        {
                          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                          std::__shared_weak_count::__release_weak(v81);
                        }
                      }
                      v84 = (std::__shared_weak_count *)v80[2];
                      if (v84)
                      {
                        v85 = (unint64_t *)&v84->__shared_owners_;
                        do
                          v86 = __ldaxr(v85);
                        while (__stlxr(v86 - 1, v85));
                        if (!v86)
                        {
                          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                          std::__shared_weak_count::__release_weak(v84);
                        }
                      }
                      MEMORY[0x212BC6398](v80, 0x10F0C40B62ED6C6);
                    }
                  }
                  v87 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
                  if (*((_QWORD *)&v135 + 1))
                  {
                    v88 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
                    do
                      v89 = __ldaxr(v88);
                    while (__stlxr(v89 - 1, v88));
                    if (!v89)
                    {
                      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                      std::__shared_weak_count::__release_weak(v87);
                    }
                  }
                  v90 = *(std::__shared_weak_count **)&v134[16];
                  if (*(_QWORD *)&v134[16])
                  {
                    v91 = (unint64_t *)(*(_QWORD *)&v134[16] + 8);
                    do
                      v92 = __ldaxr(v91);
                    while (__stlxr(v92 - 1, v91));
                    if (!v92)
                    {
                      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                      std::__shared_weak_count::__release_weak(v90);
                    }
                  }
LABEL_130:
                  if (v6)
                  {
                    v93 = (const char *)__dst;
                    if (v115 < 0)
                      v93 = (const char *)__dst[0];
                    sub_20E8C003C((uint64_t)v107, "%s", v93);
                    sub_20E863570((uint64_t)v107);
                  }
                  sub_20E863570((uint64_t)v107);
                  v94 = v113;
                  if (v113)
                  {
                    v95 = (unint64_t *)&v113->__shared_owners_;
                    do
                      v96 = __ldaxr(v95);
                    while (__stlxr(v96 - 1, v95));
                    if (!v96)
                    {
                      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                      std::__shared_weak_count::__release_weak(v94);
                    }
                  }
                  if (SHIBYTE(v115) < 0)
                    operator delete(__dst[0]);
                  v116[0] = *(void **)MEMORY[0x24BEDB7F0];
                  v97 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(void **)((char *)v116 + *((_QWORD *)v116[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                  v117[0] = v97;
                  v117[1] = MEMORY[0x24BEDB848] + 16;
                  if (v123 < 0)
                    operator delete(__p);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  result = MEMORY[0x212BC6290](&v126);
                  goto LABEL_144;
                }
              }
              memcpy(v44, v18, v43);
              goto LABEL_70;
            }
          }
          memmove(v26, v24, v25);
          goto LABEL_41;
        }
      }
      memmove(v13, v15, v12);
      goto LABEL_20;
    }
  }
LABEL_144:
  v98 = *(_QWORD *)(a2 + 8);
  if (!v98)
    return result;
  v99 = *(_DWORD *)(a1 + 36);
  if (v99)
  {
    if (*(_BYTE *)(a2 + 16))
      v100 = 1;
    else
      v100 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v100;
    if (v100 == 1 && v99 != 1 && *(_BYTE *)(a1 + 24) != 0)
      *(_BYTE *)(a1 + 32) = 1;
  }
  else
  {
    if (*(_BYTE *)(a2 + 16))
    {
      v103 = 1;
    }
    else if (v98 <= *(_QWORD *)a1)
    {
      if (*(double *)(a2 + 24) <= *(double *)(a1 + 16))
        return result;
      v103 = 3;
    }
    else
    {
      v103 = 2;
    }
    *(_DWORD *)(a1 + 36) = v103;
  }
  return result;
}

void sub_20F3B379C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(_BYTE *)(v35 - 168) && *(char *)(v35 - 169) < 0)
    operator delete(*(void **)(v35 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  if (a29 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a30);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F3B3930@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  __int128 v10;

  __p = operator new(0x20uLL);
  v10 = xmmword_2102DBFF0;
  strcpy((char *)__p, "NewSubmapLogicConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA1CB0((unint64_t *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "NewSubmapLogicConfig.max_num_states_per_submap", v4, "Maximum number of states allowed per submap");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "NewSubmapLogicConfig.min_health_to_create_a_new_submap", v5, "Minimum health to create a new submap");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "NewSubmapLogicConfig.max_distance_of_states_m", v6, "Maximum distance allowed for keyframe within a submap.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 24));
  return sub_20E8B2F9C((uint64_t *)&__p, "NewSubmapLogicConfig.export_submaps_with_low_tracking_status", v7, "Flag to export submaps with low tracking status");
}

void sub_20F3B3A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F3B3AC4(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  *a1 = *a3;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  if (!a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/ObjectAnchorSetController.cpp", 30, (uint64_t)"object_anchor_set_", 18, (uint64_t)"object_anchor_set_ == nullptr!", 30, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20F3B3B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void **v20;

  v12 = v11;
  v20 = v12;
  v14 = *v12;
  if (*v12)
  {
    v15 = *(void **)(v10 + 24);
    v16 = v14;
    if (v15 != v14)
    {
      v17 = (uint64_t)v15 - 344;
      do
      {
        while (1)
        {
          if (*(_BYTE *)(v17 + 336))
          {
            if (*(char *)(v17 + 335) < 0)
              operator delete(*(void **)(v17 + 312));
          }
          if (*(char *)(v17 + 23) < 0)
            break;
          v18 = (void *)(v17 - 24);
          v17 -= 368;
          if (v18 == v14)
            goto LABEL_10;
        }
        operator delete(*(void **)v17);
        v19 = (void *)(v17 - 24);
        v17 -= 368;
      }
      while (v19 != v14);
LABEL_10:
      v16 = *v20;
    }
    *(_QWORD *)(v10 + 24) = v14;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3B3BD8(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, int a5@<W4>, std::string *a6@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  std::string __p;

  sub_20FCC7534(*(_QWORD **)(a1 + 8), *(void **)a1, a2, a3, a4, a5);
  sub_20FCCBC60((unint64_t *)a1, &__p);
  v8 = sub_20EB07858(*(_QWORD **)(a1 + 8), (uint64_t)&__p);
  v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v9)
      goto LABEL_6;
  }
  else if (v8)
  {
    goto LABEL_6;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/ObjectAnchorSetController.cpp", 41, (uint64_t)"this->HasOriginAnchor()", 23, (uint64_t)"Failed to add the origin anchor because there are no regular keyframes.", 71, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_6:
  sub_20FCCBC60((unint64_t *)a1, a6);
}

void sub_20F3B3CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F3B3CC0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  float64x2_t *v9;
  uint64_t *v10;
  uint64_t v11;
  double v13;
  uint64_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v17;
  uint64_t v18;
  uint64_t *v19;
  float64x2_t v21;
  int8x16_t v28;
  float64x2_t v31;
  unint64_t v33;
  int8x16_t v34;
  int64x2_t v35;
  float64_t v37;
  float64x2_t v38;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float64x2_t v69;
  double v70;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  double v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  double v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82[7];
  float64x2_t v83;
  std::string v84;

  sub_20FCCBC60((unint64_t *)(a3 + 48), &v84);
  v8 = sub_20EB07858(*(_QWORD **)(a1 + 8), (uint64_t)&v84);
  v9 = (float64x2_t *)v8;
  if (v8)
  {
    v10 = sub_20E9DF85C(a2 + 223, v8 + 5);
    if (v10)
    {
      v11 = v10[5];
      _D9 = *(_QWORD *)(v11 + 40);
      v79 = *(float64x2_t *)(v11 + 24);
      v80 = *(float64x2_t *)v11;
      v13 = *(double *)(v11 + 64);
      v81 = *(float64x2_t *)(v11 + 48);
      v14 = v10[9];
      v70 = *(double *)(v14 + 16);
      v69 = *(float64x2_t *)v14;
      v72 = *(double *)(v14 + 40);
      v71 = *(float64x2_t *)(v14 + 24);
      v74 = *(double *)(v14 + 64);
      v73 = *(float64x2_t *)(v14 + 48);
      v15.f64[1] = *(float64_t *)(v14 + 56);
      v16 = v10[11];
      v78 = *(double *)(v16 + 16);
      v17 = *(float64x2_t *)v16;
      v18 = v10[7];
      v15.f64[0] = *(float64_t *)(v18 + 16);
      v77 = v15;
      v75 = v17;
      v76 = *(float64x2_t *)v18;
      v19 = sub_20FCCAD50(*(_QWORD **)(a1 + 8), (uint64_t)&v84);
      if (!v19
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/ObjectAnchorSet.cpp", 471, (uint64_t)"object_anchor_iter != object_anchors_.end()", 43, (uint64_t)&unk_2102BB0B2, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      _Q3.i64[1] = *(_QWORD *)&v69.f64[1];
      v21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v80, v69.f64[0]), v79, v69, 1), v81, v70);
      __asm { FMLA            D1, D9, V3.D[1] }
      *(double *)_Q3.i64 = _D1 + v13 * v70;
      _Q5.i64[1] = *(_QWORD *)&v71.f64[1];
      v28 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v80, v71.f64[0]), v79, v71, 1), v81, v72);
      __asm { FMLA            D1, D9, V5.D[1] }
      *(double *)_Q5.i64 = _D1 + v13 * v72;
      _V18.D[1] = v73.f64[1];
      v31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v80, v73.f64[0]), v79, v73, 1), v81, v74);
      __asm { FMLA            D2, D9, V18.D[1] }
      *(double *)&v33 = _D2 + v13 * v74;
      v34 = vextq_s8(v28, _Q5, 8uLL);
      v35 = vzip1q_s64(_Q3, (int64x2_t)v28);
      _V18.D[1] = v75.f64[1];
      __asm { FMLA            D5, D9, V18.D[1] }
      *(double *)_Q5.i64 = *(double *)_Q5.i64 + v13 * v78;
      *(_QWORD *)&v37 = *(_OWORD *)&vaddq_f64((float64x2_t)_Q5, v77);
      v38 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v80, v75.f64[0]), v79, v75, 1), v81, v78), v76);
      _Q5.i64[0] = vdupq_laneq_s64(v35, 1).u64[0];
      _Q5.i64[1] = v34.i64[0];
      v34.i64[0] = v35.i64[0];
      __asm { FMOV            V4.2D, #1.0 }
      _Q4.f64[0] = v37;
      v41 = *((float64x2_t *)v19 + 4);
      v40 = *((float64x2_t *)v19 + 5);
      v43 = *((float64x2_t *)v19 + 6);
      v42 = *((float64x2_t *)v19 + 7);
      v45 = *((float64x2_t *)v19 + 8);
      v44 = *((float64x2_t *)v19 + 9);
      v47 = *((float64x2_t *)v19 + 10);
      v46 = *((float64x2_t *)v19 + 11);
      *((float64x2_t *)v19 + 12) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, v41.f64[0]), (float64x2_t)_Q5, v41, 1), v31, v40.f64[0]), v38, v40, 1);
      *((float64x2_t *)v19 + 13) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v34.u64[0], v41.f64[0]), (float64x2_t)v34.u64[1], v41, 1), (float64x2_t)v33, v40.f64[0]), _Q4, v40, 1);
      *((float64x2_t *)v19 + 14) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, v43.f64[0]), (float64x2_t)_Q5, v43, 1), v31, v42.f64[0]), v38, v42, 1);
      *((float64x2_t *)v19 + 15) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v34.u64[0], v43.f64[0]), (float64x2_t)v34.u64[1], v43, 1), (float64x2_t)v33, v42.f64[0]), _Q4, v42, 1);
      *((float64x2_t *)v19 + 16) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, v45.f64[0]), (float64x2_t)_Q5, v45, 1), v31, v44.f64[0]), v38, v44, 1);
      *((float64x2_t *)v19 + 17) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v34.u64[0], v45.f64[0]), (float64x2_t)v34.u64[1], v45, 1), (float64x2_t)v33, v44.f64[0]), _Q4, v44, 1);
      *((float64x2_t *)v19 + 18) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, v47.f64[0]), (float64x2_t)_Q5, v47, 1), v31, v46.f64[0]), v38, v46, 1);
      *((float64x2_t *)v19 + 19) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v34.u64[0], v47.f64[0]), (float64x2_t)v34.u64[1], v47, 1), (float64x2_t)v33, v46.f64[0]), _Q4, v46, 1);
    }
    v49 = v9[12];
    v48 = v9[13];
    v51 = v9[14];
    v50 = v9[15];
    v53 = v9[16];
    v52 = v9[17];
    v55 = v9[18];
    v54 = v9[19];
    v56 = *(float64x2_t *)(a3 + 248);
    v57 = *(float64x2_t *)(a3 + 184);
    v59 = *(float64x2_t *)(a3 + 216);
    v58 = *(float64x2_t *)(a3 + 232);
    v60 = *(float64x2_t *)(a3 + 200);
    v62 = *(float64x2_t *)(a3 + 280);
    v61 = *(float64x2_t *)(a3 + 296);
    v63 = *(float64x2_t *)(a3 + 264);
    v82[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, v57.f64[0]), v51, v57, 1), v53, v60.f64[0]), v55, v60, 1);
    v82[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, v57.f64[0]), v50, v57, 1), v52, v60.f64[0]), v54, v60, 1);
    v82[2] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, v59.f64[0]), v51, v59, 1), v53, v58.f64[0]), v55, v58, 1);
    v82[3] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, v59.f64[0]), v50, v59, 1), v52, v58.f64[0]), v54, v58, 1);
    v82[4] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, v56.f64[0]), v51, v56, 1), v53, v63.f64[0]), v55, v63, 1);
    v82[5] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, v56.f64[0]), v50, v56, 1), v52, v63.f64[0]), v54, v63, 1);
    v82[6] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, v62.f64[0]), v51, v62, 1), v53, v61.f64[0]), v55, v61, 1);
    v83 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, v62.f64[0]), v50, v62, 1), v52, v61.f64[0]), v54, v61, 1);
    v64 = sub_20FCC4918(*(_QWORD **)(a1 + 8), a3 + 24, a2, v82, a4, (__int128 *)(a3 + 312), v83.f64[0], v50.f64[0], v52.f64[0], v54);
    if ((v64 & 1) != 0)
    {
      v65 = *(_QWORD *)(a1 + 24);
      if (v65 >= *(_QWORD *)(a1 + 32))
      {
        v66 = sub_20EE1CDE4((uint64_t *)(a1 + 16), (__int128 *)a3);
      }
      else
      {
        sub_20ECC7618(*(_QWORD *)(a1 + 24), (__int128 *)a3);
        v66 = v65 + 368;
        *(_QWORD *)(a1 + 24) = v65 + 368;
      }
      *(_QWORD *)(a1 + 24) = v66;
    }
    v67 = v64 & 1;
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_14;
  }
  else
  {
    v67 = 0;
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
LABEL_14:
      operator delete(v84.__r_.__value_.__l.__data_);
  }
  return v67;
}

void sub_20F3B40D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 24) = v2;
  if (*(char *)(v3 - 97) < 0)
    operator delete(*(void **)(v3 - 120));
  _Unwind_Resume(exception_object);
}

void sub_20F3B4108(_QWORD *a1, uint64_t a2)
{
  __int128 *v2;
  __int128 *v3;
  __int128 *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v12;
  double v13;
  uint64_t v15;
  double v16;
  double v18;
  double v20;
  float64x2_t *v22;
  float64x2_t v24;
  uint64_t v30;
  double v32;
  float64x2_t v33;
  int64x2_t v34;
  float64x2_t v35;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64_t v44;
  int64x2_t v45;
  float64x2_t v46;
  int8x16_t v47;
  int64x2_t v48;
  float64x2_t v49;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  _QWORD *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  float64x2_t v65;
  float64x2_t v67;
  double v68;
  uint64_t v70;
  double v71;
  double v73;
  double v75;
  float64x2_t *v77;
  float64x2_t v79;
  float64x2_t *v81;
  double v82;
  int64x2_t v84;
  float64x2_t v85;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64_t v94;
  int64x2_t v95;
  float64x2_t v96;
  int8x16_t v97;
  int64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  uint64_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  _QWORD *v110;
  __int128 v111;
  __int128 v112;
  __int128 *v113;
  __int128 *v114;
  uint64_t *v115;
  float64x2_t v116;
  __int128 v118;
  void **v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  void **v134;
  __int128 *v135;
  __int128 v136;
  __int128 v137;
  __int128 *v138;
  uint64_t v139;
  __int128 *v140;
  __int128 *v141;
  __int128 v142;
  uint64_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  char v160;
  __int128 v161;
  uint64_t v162;

  v2 = (__int128 *)a1[2];
  v3 = (__int128 *)a1[3];
  if (v2 != v3)
  {
    v5 = (__int128 *)a1[3];
    v6 = (_QWORD *)(a2 + 1784);
    while (sub_20EB07858((_QWORD *)a1[1], (uint64_t)v2 + 24))
    {
      v7 = sub_20E9DF85C(v6, (uint64_t *)v2);
      if (v7)
      {
        v9 = v7[5];
        v10 = *(float64x2_t *)v9;
        _D2 = *(_QWORD *)(v9 + 40);
        v12 = *(float64x2_t *)(v9 + 24);
        v13 = *(double *)(v9 + 64);
        _Q5 = *(float64x2_t *)(v9 + 48);
        v15 = v7[9];
        v16 = *(double *)(v15 + 16);
        _Q7 = *(float64x2_t *)v15;
        v18 = *(double *)(v15 + 40);
        _Q17 = *(float64x2_t *)(v15 + 24);
        v20 = *(double *)(v15 + 64);
        _Q21 = *(float64x2_t *)(v15 + 48);
        v22 = (float64x2_t *)v7[11];
        _Q19.f64[0] = v22[1].f64[0];
        _Q20 = *v22;
        v24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v10, v22->f64[0]), v12, *v22, 1), _Q5, _Q19.f64[0]);
        __asm { FMLA            D23, D2, V20.D[1] }
        _Q19.f64[0] = _D23 + v13 * _Q19.f64[0];
        v30 = v7[7];
        _Q20.f64[0] = *(float64_t *)(v30 + 16);
        _Q23 = *(int8x16_t *)v30;
        *(_QWORD *)&v32 = *(_OWORD *)&vaddq_f64(_Q19, _Q20);
        v33 = vaddq_f64(v24, *(float64x2_t *)v30);
        v34 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v10, _Q7.f64[0]), v12, _Q7, 1), _Q5, v16);
        __asm { FMLA            D19, D2, V7.D[1] }
        _Q19.f64[0] = _Q19.f64[0] + v13 * v16;
        v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v10, _Q17.f64[0]), v12, _Q17, 1), _Q5, v18);
        __asm { FMLA            D6, D2, V17.D[1] }
        *(double *)_Q23.i64 = _D6 + v13 * v18;
        _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v10, _Q21.f64[0]), v12, _Q21, 1), _Q5, v20);
        __asm { FMLA            D0, D2, V21.D[1] }
        _Q17.f64[0] = _D0 + v13 * v20;
        v39 = (float64x2_t)vzip1q_s64(v34, (int64x2_t)v35);
        v40 = (float64x2_t)vzip2q_s64(v34, (int64x2_t)v35);
        v41.f64[0] = _Q19.f64[0];
        *(_QWORD *)&v41.f64[1] = _Q23.i64[0];
        _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, v33.f64[0]), v40, v33, 1), v41, v32);
        _D6 = v33.f64[1];
        __asm { FMLA            D5, D6, V16.D[1] }
        _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], _Q17.f64[0], v32);
        *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vnegq_f64(_Q5);
        v44 = _Q17.f64[0];
        _Q5.f64[1] = 1.0;
        v45 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v40.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v40, 1), 8uLL);
        *(_QWORD *)&v35.f64[1] = v45.i64[1];
        v46 = (float64x2_t)vzip1q_s64(v34, v45);
        *(_QWORD *)&_Q16.f64[1] = vdupq_laneq_s64((int64x2_t)_Q16, 1).u64[0];
        v47 = vextq_s8((int8x16_t)v35, _Q23, 8uLL);
        v48 = vzip1q_s64((int64x2_t)_Q19, (int64x2_t)v35);
        *(_QWORD *)&v49.f64[0] = vdupq_laneq_s64(v48, 1).u64[0];
        __asm { FMLA            D19, D23, V3.D[1] }
        *(_QWORD *)&v49.f64[1] = v47.i64[0];
        __asm { FMLS            D19, D17, V5.D[0] }
        v52 = vmlsq_lane_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, _Q3.f64[0]), v35, _Q3, 1), _Q16, _Q5.f64[0], 0);
        _Q19.f64[1] = 1.0;
        v53 = *(float64x2_t *)((char *)v2 + 72);
        v54 = *(float64x2_t *)((char *)v2 + 56);
        v55 = *(float64x2_t *)((char *)v2 + 104);
        v56 = *(float64x2_t *)((char *)v2 + 88);
        v57 = *(float64x2_t *)((char *)v2 + 136);
        v58 = *(float64x2_t *)((char *)v2 + 120);
        v59 = *(float64x2_t *)((char *)v2 + 168);
        v60 = *(float64x2_t *)((char *)v2 + 152);
        v61 = (_QWORD *)a1[1];
        v143 = -1;
        v152 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v54.f64[0]), v49, v54, 1), _Q16, v53.f64[0]), v52, v53, 1);
        v153 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v48.u64[0], v54.f64[0]), (float64x2_t)v47.u64[1], v54, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v53.f64[0]), _Q19, v53, 1);
        v154 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v56.f64[0]), v49, v56, 1), _Q16, v55.f64[0]), v52, v55, 1);
        v155 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v48.u64[0], v56.f64[0]), (float64x2_t)v47.u64[1], v56, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v55.f64[0]), _Q19, v55, 1);
        v156 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v58.f64[0]), v49, v58, 1), _Q16, v57.f64[0]), v52, v57, 1);
        v157 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v48.u64[0], v58.f64[0]), (float64x2_t)v47.u64[1], v58, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v57.f64[0]), _Q19, v57, 1);
        v159 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v48.u64[0], v60.f64[0]), (float64x2_t)v47.u64[1], v60, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v59.f64[0]), _Q19, v59, 1);
        v158 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v60.f64[0]), v49, v60, 1), _Q16, v59.f64[0]), v52, v59, 1);
        v62 = *(__int128 *)((char *)v2 + 312);
        v162 = *((_QWORD *)v2 + 41);
        v161 = v62;
        v145 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v152.f64[0]), (float64x2_t)*(unint64_t *)&_Q16.f64[1], v152, 1), (float64x2_t)*(unint64_t *)&v44, v153.f64[0]), _Q5, v153, 1);
        v144 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, v152.f64[0]), v40, v152, 1), v41, v153.f64[0]), _Q3, v153, 1);
        v147 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v154.f64[0]), (float64x2_t)*(unint64_t *)&_Q16.f64[1], v154, 1), (float64x2_t)*(unint64_t *)&v44, v155.f64[0]), _Q5, v155, 1);
        v146 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, v154.f64[0]), v40, v154, 1), v41, v155.f64[0]), _Q3, v155, 1);
        v149 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v156.f64[0]), (float64x2_t)*(unint64_t *)&_Q16.f64[1], v156, 1), (float64x2_t)*(unint64_t *)&v44, v157.f64[0]), _Q5, v157, 1);
        v148 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, v156.f64[0]), v40, v156, 1), v41, v157.f64[0]), _Q3, v157, 1);
        v151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v158.f64[0]), (float64x2_t)*(unint64_t *)&_Q16.f64[1], v158, 1), (float64x2_t)*(unint64_t *)&v44, v159.f64[0]), _Q5, v159, 1);
        v150 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, v158.f64[0]), v40, v158, 1), v41, v159.f64[0]), _Q3, v159, 1);
        v63 = *v2;
        LODWORD(v143) = *((_DWORD *)v2 + 4);
        v142 = v63;
        v160 = 1;
        sub_20FCC94B4(v61, (uint64_t)v2 + 24, (char *)&v142);
        break;
      }
      v2 += 23;
      if (v2 == v3)
        goto LABEL_29;
    }
    if (v2 != v3)
    {
      if (v2 + 23 == v3)
      {
        v5 = v2;
      }
      else
      {
        v5 = v2;
        do
        {
          v114 = v2 + 23;
          if (sub_20EB07858((_QWORD *)a1[1], (uint64_t)v2 + 392))
          {
            v115 = sub_20E9DF85C(v6, (uint64_t *)v2 + 46);
            if (v115)
            {
              v64 = v115[5];
              v65 = *(float64x2_t *)v64;
              _D2 = *(_QWORD *)(v64 + 40);
              v67 = *(float64x2_t *)(v64 + 24);
              v68 = *(double *)(v64 + 64);
              _Q5 = *(float64x2_t *)(v64 + 48);
              v70 = v115[9];
              v71 = *(double *)(v70 + 16);
              _Q7 = *(float64x2_t *)v70;
              v73 = *(double *)(v70 + 40);
              _Q17 = *(float64x2_t *)(v70 + 24);
              v75 = *(double *)(v70 + 64);
              _Q21 = *(float64x2_t *)(v70 + 48);
              v77 = (float64x2_t *)v115[11];
              v116.f64[0] = v77[1].f64[0];
              _Q19 = *v77;
              v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v65, v77->f64[0]), v67, *v77, 1), _Q5, v116.f64[0]);
              __asm { FMLA            D23, D2, V19.D[1] }
              v116.f64[0] = _D23 + v68 * v116.f64[0];
              v81 = (float64x2_t *)v115[7];
              _Q19.f64[0] = v81[1].f64[0];
              *(_QWORD *)&v82 = *(_OWORD *)&vaddq_f64(v116, _Q19);
              _Q22 = vaddq_f64(v79, *v81);
              v84 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v65, _Q7.f64[0]), v67, _Q7, 1), _Q5, v71);
              __asm { FMLA            D19, D2, V7.D[1] }
              _Q19.f64[0] = _Q19.f64[0] + v68 * v71;
              v85 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v65, _Q17.f64[0]), v67, _Q17, 1), _Q5, v73);
              __asm { FMLA            D6, D2, V17.D[1] }
              *(double *)_Q26.i64 = _D6 + v68 * v73;
              _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v65, _Q21.f64[0]), v67, _Q21, 1), _Q5, v75);
              __asm { FMLA            D0, D2, V21.D[1] }
              _Q17.f64[0] = _D0 + v68 * v75;
              v89 = (float64x2_t)vzip1q_s64(v84, (int64x2_t)v85);
              v90 = (float64x2_t)vzip2q_s64(v84, (int64x2_t)v85);
              v91.f64[0] = _Q19.f64[0];
              *(_QWORD *)&v91.f64[1] = _Q26.i64[0];
              _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v89, _Q22.f64[0]), v90, _Q22, 1), v91, v82);
              _D6 = _Q22.f64[1];
              __asm { FMLA            D5, D6, V16.D[1] }
              _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], _Q17.f64[0], v82);
              *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vnegq_f64(_Q5);
              v94 = _Q17.f64[0];
              _Q5.f64[1] = 1.0;
              v95 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v90.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v90, 1), 8uLL);
              *(_QWORD *)&v85.f64[1] = v95.i64[1];
              *(_QWORD *)&_Q16.f64[1] = vdupq_laneq_s64((int64x2_t)_Q16, 1).u64[0];
              v96 = (float64x2_t)vzip1q_s64(v84, v95);
              v97 = vextq_s8((int8x16_t)v85, _Q26, 8uLL);
              v98 = vzip1q_s64((int64x2_t)_Q19, (int64x2_t)v85);
              v99 = vmlsq_lane_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, _Q3.f64[0]), v85, _Q3, 1), _Q16, _Q5.f64[0], 0);
              __asm { FMLA            D22, D26, V3.D[1] }
              *(_QWORD *)&v100.f64[0] = vdupq_laneq_s64(v98, 1).u64[0];
              *(_QWORD *)&v100.f64[1] = v97.i64[0];
              v101 = v98.i64[0];
              __asm { FMLS            D22, D17, V5.D[0] }
              _Q22.f64[1] = 1.0;
              v103 = *(float64x2_t *)((char *)v2 + 424);
              v102 = *(float64x2_t *)((char *)v2 + 440);
              v105 = *(float64x2_t *)((char *)v2 + 456);
              v104 = *(float64x2_t *)((char *)v2 + 472);
              v106 = *(float64x2_t *)((char *)v2 + 488);
              v107 = *(float64x2_t *)((char *)v2 + 504);
              v109 = *(float64x2_t *)((char *)v2 + 520);
              v108 = *(float64x2_t *)((char *)v2 + 536);
              v110 = (_QWORD *)a1[1];
              *((_QWORD *)&v142 + 1) = -1;
              v143 = -1;
              *(_QWORD *)&v142 = -1;
              v152 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, v103.f64[0]), v100, v103, 1), _Q16, v102.f64[0]), v99, v102, 1);
              v153 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v101, v103.f64[0]), (float64x2_t)v97.u64[1], v103, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v102.f64[0]), _Q22, v102, 1);
              v154 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, v105.f64[0]), v100, v105, 1), _Q16, v104.f64[0]), v99, v104, 1);
              v155 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v101, v105.f64[0]), (float64x2_t)v97.u64[1], v105, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v104.f64[0]), _Q22, v104, 1);
              v156 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, v106.f64[0]), v100, v106, 1), _Q16, v107.f64[0]), v99, v107, 1);
              v157 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v101, v106.f64[0]), (float64x2_t)v97.u64[1], v106, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v107.f64[0]), _Q22, v107, 1);
              v159 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v101, v109.f64[0]), (float64x2_t)v97.u64[1], v109, 1), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v108.f64[0]), _Q22, v108, 1);
              v158 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, v109.f64[0]), v100, v109, 1), _Q16, v108.f64[0]), v99, v108, 1);
              v111 = *(__int128 *)((char *)v2 + 680);
              v162 = *((_QWORD *)v2 + 87);
              v161 = v111;
              v145 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v152.f64[0]), (float64x2_t)*(unint64_t *)&_Q16.f64[1], v152, 1), (float64x2_t)*(unint64_t *)&v94, v153.f64[0]), _Q5, v153, 1);
              v144 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v89, v152.f64[0]), v90, v152, 1), v91, v153.f64[0]), _Q3, v153, 1);
              v147 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v154.f64[0]), (float64x2_t)*(unint64_t *)&_Q16.f64[1], v154, 1), (float64x2_t)*(unint64_t *)&v94, v155.f64[0]), _Q5, v155, 1);
              v146 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v89, v154.f64[0]), v90, v154, 1), v91, v155.f64[0]), _Q3, v155, 1);
              v149 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v156.f64[0]), (float64x2_t)*(unint64_t *)&_Q16.f64[1], v156, 1), (float64x2_t)*(unint64_t *)&v94, v157.f64[0]), _Q5, v157, 1);
              v148 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v89, v156.f64[0]), v90, v156, 1), v91, v157.f64[0]), _Q3, v157, 1);
              v151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q16.f64[0], v158.f64[0]), (float64x2_t)*(unint64_t *)&_Q16.f64[1], v158, 1), (float64x2_t)*(unint64_t *)&v94, v159.f64[0]), _Q5, v159, 1);
              v150 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v89, v158.f64[0]), v90, v158, 1), v91, v159.f64[0]), _Q3, v159, 1);
              v112 = *v114;
              LODWORD(v143) = *((_DWORD *)v2 + 96);
              v142 = v112;
              v160 = 1;
              sub_20FCC94B4(v110, (uint64_t)v2 + 392, (char *)&v142);
            }
            else
            {
              v118 = *v114;
              *((_DWORD *)v5 + 4) = *((_DWORD *)v2 + 96);
              *v5 = v118;
              v119 = (void **)v5 + 3;
              if (*((char *)v5 + 47) < 0)
                operator delete(*v119);
              v120 = *(__int128 *)((char *)v2 + 392);
              *((_QWORD *)v5 + 5) = *((_QWORD *)v2 + 51);
              *(_OWORD *)v119 = v120;
              *((_BYTE *)v2 + 415) = 0;
              *((_BYTE *)v2 + 392) = 0;
              *((_QWORD *)v5 + 6) = *((_QWORD *)v2 + 52);
              v121 = *(__int128 *)((char *)v2 + 424);
              v122 = *(__int128 *)((char *)v2 + 440);
              v123 = *(__int128 *)((char *)v2 + 456);
              *(__int128 *)((char *)v5 + 104) = *(__int128 *)((char *)v2 + 472);
              *(__int128 *)((char *)v5 + 88) = v123;
              *(__int128 *)((char *)v5 + 72) = v122;
              *(__int128 *)((char *)v5 + 56) = v121;
              v124 = *(__int128 *)((char *)v2 + 488);
              v125 = *(__int128 *)((char *)v2 + 504);
              v126 = *(__int128 *)((char *)v2 + 520);
              *(__int128 *)((char *)v5 + 168) = *(__int128 *)((char *)v2 + 536);
              *(__int128 *)((char *)v5 + 152) = v126;
              *(__int128 *)((char *)v5 + 136) = v125;
              *(__int128 *)((char *)v5 + 120) = v124;
              v127 = *(__int128 *)((char *)v2 + 648);
              v128 = *(__int128 *)((char *)v2 + 664);
              v129 = *(__int128 *)((char *)v2 + 632);
              *(__int128 *)((char *)v5 + 248) = *(__int128 *)((char *)v2 + 616);
              *(__int128 *)((char *)v5 + 280) = v127;
              *(__int128 *)((char *)v5 + 296) = v128;
              *(__int128 *)((char *)v5 + 264) = v129;
              v130 = *(__int128 *)((char *)v2 + 552);
              v131 = *(__int128 *)((char *)v2 + 568);
              v132 = *(__int128 *)((char *)v2 + 584);
              *(__int128 *)((char *)v5 + 232) = *(__int128 *)((char *)v2 + 600);
              *(__int128 *)((char *)v5 + 216) = v132;
              *(__int128 *)((char *)v5 + 200) = v131;
              *(__int128 *)((char *)v5 + 184) = v130;
              v133 = *(__int128 *)((char *)v2 + 680);
              *((_BYTE *)v5 + 328) = *((_BYTE *)v2 + 696);
              *(__int128 *)((char *)v5 + 312) = v133;
              v134 = (void **)(v5 + 21);
              v135 = v2 + 44;
              if (*((unsigned __int8 *)v5 + 360) == *((unsigned __int8 *)v2 + 728))
              {
                if (*((_BYTE *)v5 + 360))
                {
                  if (*((char *)v5 + 359) < 0)
                    operator delete(*v134);
                  v136 = *v135;
                  *((_QWORD *)v5 + 44) = *((_QWORD *)v2 + 90);
                  *(_OWORD *)v134 = v136;
                  *((_BYTE *)v2 + 727) = 0;
                  *((_BYTE *)v2 + 704) = 0;
                }
              }
              else if (*((_BYTE *)v5 + 360))
              {
                if (*((char *)v5 + 359) < 0)
                  operator delete(*v134);
                *((_BYTE *)v5 + 360) = 0;
              }
              else
              {
                v137 = *v135;
                *((_QWORD *)v5 + 44) = *((_QWORD *)v2 + 90);
                *(_OWORD *)v134 = v137;
                *((_QWORD *)v2 + 89) = 0;
                *((_QWORD *)v2 + 90) = 0;
                *(_QWORD *)v135 = 0;
                *((_BYTE *)v5 + 360) = 1;
              }
              v5 += 23;
            }
          }
          v113 = v2 + 46;
          v2 += 23;
        }
        while (v113 != v3);
      }
    }
LABEL_29:
    v138 = (__int128 *)a1[3];
    if (v5 != v138)
    {
      v139 = (uint64_t)v138 - 344;
      do
      {
        while (1)
        {
          if (*(_BYTE *)(v139 + 336))
          {
            if (*(char *)(v139 + 335) < 0)
              operator delete(*(void **)(v139 + 312));
          }
          if (*(char *)(v139 + 23) < 0)
            break;
          v140 = (__int128 *)(v139 - 24);
          v139 -= 368;
          if (v140 == v5)
            goto LABEL_37;
        }
        operator delete(*(void **)v139);
        v141 = (__int128 *)(v139 - 24);
        v139 -= 368;
      }
      while (v141 != v5);
LABEL_37:
      a1[3] = v5;
    }
  }
}

void sub_20F3B4B8C(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const void **v8;
  size_t v9;
  int v10;
  size_t v12;
  int v13;
  char *v15;
  unint64_t v16;
  void *v17;
  void *__p;
  unint64_t v19;
  unint64_t v20;
  _DWORD __s2[5];
  char v22;

  v19 = 0;
  v20 = 0;
  __p = 0;
  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 16);
  if (!v1)
    return;
  v3 = 0;
  do
  {
    v22 = 4;
    strcpy((char *)__s2, "sem_");
    v5 = *((unsigned __int8 *)v1 + 39);
    v6 = v1[3];
    if ((v5 & 0x80u) == 0)
      v7 = *((unsigned __int8 *)v1 + 39);
    else
      v7 = v1[3];
    if (v7 > 3)
    {
      v8 = (const void **)(v1 + 2);
      if ((v5 & 0x80) != 0)
      {
        if (v6 >= 4)
          v12 = 4;
        else
          v12 = v1[3];
        v13 = memcmp(*v8, __s2, v12);
        if (v12 != 4 || v13 != 0)
          goto LABEL_7;
      }
      else
      {
        if (v5 >= 4)
          v9 = 4;
        else
          v9 = *((unsigned __int8 *)v1 + 39);
        v10 = memcmp(v1 + 2, __s2, v9);
        if (v9 != 4 || v10 != 0)
          goto LABEL_7;
      }
      if (v3 < v20)
      {
        if ((v5 & 0x80) != 0)
        {
          sub_20E860C04((_BYTE *)v3, (void *)*v8, v6);
        }
        else
        {
          v4 = *(_OWORD *)v8;
          *(_QWORD *)(v3 + 16) = v1[4];
          *(_OWORD *)v3 = v4;
        }
        v3 += 24;
      }
      else
      {
        v3 = sub_20E8ADE68((uint64_t *)&__p, (__int128 *)v1 + 1);
      }
      v19 = v3;
    }
LABEL_7:
    v1 = (uint64_t *)*v1;
  }
  while (v1);
  v15 = (char *)__p;
  if (__p != (void *)v3)
  {
    do
    {
      sub_20FCC8710(*(_QWORD **)(a1 + 8), (uint64_t)v15);
      v15 += 24;
    }
    while (v15 != (char *)v3);
    v3 = (unint64_t)__p;
  }
  if (v3)
  {
    v16 = v19;
    v17 = (void *)v3;
    if (v19 != v3)
    {
      do
      {
        if (*(char *)(v16 - 1) < 0)
          operator delete(*(void **)(v16 - 24));
        v16 -= 24;
      }
      while (v16 != v3);
      v17 = __p;
    }
    v19 = v3;
    operator delete(v17);
  }
}

void sub_20F3B4D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

void sub_20F3B4D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

void sub_20F3B4D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3B4D78(uint64_t a1, int a2)
{
  int i;
  unint64_t v5;
  char *v6;
  void *v7;
  int v9;
  void *__p[2];
  uint64_t v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v9 = i;
      __p[1] = 0;
      v11 = 0;
      __p[0] = 0;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5 < *(_QWORD *)(a1 + 16))
      {
        *(_DWORD *)v5 = i;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 8) = 0;
        *(_OWORD *)(v5 + 8) = *(_OWORD *)__p;
        *(_QWORD *)(v5 + 24) = v11;
        *(_QWORD *)(a1 + 8) = v5 + 32;
      }
      else
      {
        v6 = sub_20F3B5B0C((void **)a1, (uint64_t)&v9);
        v7 = __p[0];
        *(_QWORD *)(a1 + 8) = v6;
        if (v7)
        {
          __p[1] = v7;
          operator delete(v7);
        }
      }
    }
  }
  return a1;
}

void sub_20F3B4E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
  {
    operator delete(__p);
    v13 = *(void **)(v11 + 24);
    if (!v13)
    {
LABEL_3:
      sub_20EDC76A4((void **)v11);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v13 = *(void **)(v11 + 24);
    if (!v13)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 32) = v13;
  operator delete(v13);
  sub_20EDC76A4((void **)v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3B4E88(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  _QWORD *v25;
  __int128 v26;
  _QWORD *v27;
  char **v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  char **v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char **v43;
  __int128 v44;
  char *v45;
  void **v46;
  _BYTE *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  char *v54;
  __int128 v55;

  v5 = (char *)a1[3];
  v4 = (char *)a1[4];
  v6 = (v4 - v5) / 24;
  v7 = a2;
  v8 = *a1 + 32 * a2;
  v9 = a3;
  v10 = *a1 + 32 * a3;
  v11 = a1[5];
  if ((unint64_t)v4 >= v11)
  {
    v13 = v6 + 1;
    if ((unint64_t)(v6 + 1) > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_53;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v5) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_54;
      v16 = (char *)operator new(24 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[24 * v6];
    *(_DWORD *)v17 = v6;
    *((_QWORD *)v17 + 1) = v8;
    *((_QWORD *)v17 + 2) = v10;
    v12 = v17 + 24;
    if (v4 != v5)
    {
      do
      {
        v18 = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v17 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v17 - 24) = v18;
        v17 -= 24;
        v4 -= 24;
      }
      while (v4 != v5);
      v4 = (char *)a1[3];
    }
    a1[3] = v17;
    a1[4] = v12;
    a1[5] = &v16[24 * v15];
    if (v4)
      operator delete(v4);
  }
  else
  {
    *(_DWORD *)v4 = v6;
    v12 = v4 + 24;
    *((_QWORD *)v4 + 1) = v8;
    *((_QWORD *)v4 + 2) = v10;
  }
  a1[4] = v12;
  v19 = *a1 + 32 * v7;
  v22 = *(_QWORD *)(v19 + 24);
  v21 = (_QWORD *)(v19 + 24);
  v20 = v22;
  v23 = v12 - 3;
  v25 = v21 - 1;
  v24 = (char *)*(v21 - 1);
  if ((unint64_t)v24 >= v22)
  {
    v28 = (char **)(v21 - 2);
    v29 = (char *)*(v21 - 2);
    v30 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v29) >> 3) + 1;
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_53;
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v29) >> 3);
    if (2 * v31 > v30)
      v30 = 2 * v31;
    if (v31 >= 0x555555555555555)
      v32 = 0xAAAAAAAAAAAAAAALL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_54;
      v33 = (char *)operator new(24 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[8 * ((v24 - v29) >> 3)];
    v35 = *(_OWORD *)v23;
    *((_QWORD *)v34 + 2) = v23[2];
    *(_OWORD *)v34 = v35;
    v27 = v34 + 24;
    if (v24 != v29)
    {
      do
      {
        v36 = *(_OWORD *)(v24 - 24);
        *((_QWORD *)v34 - 1) = *((_QWORD *)v24 - 1);
        *(_OWORD *)(v34 - 24) = v36;
        v34 -= 24;
        v24 -= 24;
      }
      while (v24 != v29);
      v24 = *v28;
    }
    *v28 = v34;
    *v25 = v27;
    *v21 = &v33[24 * v32];
    if (v24)
      operator delete(v24);
  }
  else
  {
    v26 = *(_OWORD *)v23;
    *((_QWORD *)v24 + 2) = *(v12 - 1);
    *(_OWORD *)v24 = v26;
    v27 = v24 + 24;
  }
  *v25 = v27;
  v37 = *a1 + 32 * v9;
  v40 = *(_QWORD *)(v37 + 24);
  v39 = (char **)(v37 + 24);
  v38 = v40;
  v41 = a1[4] - 24;
  v43 = v39 - 1;
  v42 = *(v39 - 1);
  if ((unint64_t)v42 < v40)
  {
    v44 = *(_OWORD *)v41;
    *((_QWORD *)v42 + 2) = *(_QWORD *)(a1[4] - 8);
    *(_OWORD *)v42 = v44;
    v45 = v42 + 24;
    goto LABEL_52;
  }
  v46 = (void **)(v39 - 2);
  v47 = *(v39 - 2);
  v48 = 0xAAAAAAAAAAAAAAABLL * ((v42 - v47) >> 3) + 1;
  if (v48 > 0xAAAAAAAAAAAAAAALL)
LABEL_53:
    sub_20E867F44();
  v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (_QWORD)v47) >> 3);
  if (2 * v49 > v48)
    v48 = 2 * v49;
  if (v49 >= 0x555555555555555)
    v50 = 0xAAAAAAAAAAAAAAALL;
  else
    v50 = v48;
  if (!v50)
  {
    v51 = 0;
    goto LABEL_47;
  }
  if (v50 > 0xAAAAAAAAAAAAAAALL)
LABEL_54:
    sub_20E877A38();
  v51 = (char *)operator new(24 * v50);
LABEL_47:
  v52 = &v51[8 * ((v42 - v47) >> 3)];
  v53 = *(_OWORD *)v41;
  v54 = &v51[24 * v50];
  *((_QWORD *)v52 + 2) = *(_QWORD *)(v41 + 16);
  *(_OWORD *)v52 = v53;
  v45 = v52 + 24;
  if (v42 != v47)
  {
    do
    {
      v55 = *(_OWORD *)(v42 - 24);
      *((_QWORD *)v52 - 1) = *((_QWORD *)v42 - 1);
      *(_OWORD *)(v52 - 24) = v55;
      v52 -= 24;
      v42 -= 24;
    }
    while (v42 != v47);
    v42 = (char *)*v46;
  }
  *v46 = v52;
  *v43 = v45;
  *v39 = v54;
  if (v42)
    operator delete(v42);
LABEL_52:
  *v43 = v45;
  return *(unsigned int *)(a1[4] - 24);
}

void sub_20F3B5224(unsigned int *a1, _DWORD *a2, _QWORD *a3, uint64_t *a4, int *a5, char **a6)
{
  int v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t *v10;
  unsigned int *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  char **v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  __int128 *v40;
  int v42;
  char *v43;
  char *v44;
  char *v45;

  v6 = *a5;
  v36 = *a1;
  v7 = 4 * v36;
  *(_DWORD *)(*a3 + v7) = *a5;
  *(_DWORD *)(*a4 + v7) = v6;
  ++*a5;
  v8 = (__int128 *)*((_QWORD *)a1 + 1);
  v40 = (__int128 *)*((_QWORD *)a1 + 2);
  if (v8 != v40)
  {
    v10 = a4;
    do
    {
      v12 = (unsigned int *)*((_QWORD *)v8 + 1);
      if (*v12 == *a1)
        v12 = (unsigned int *)*((_QWORD *)v8 + 2);
      v13 = *v12;
      v42 = *v12;
      v44 = 0;
      v45 = 0;
      v43 = 0;
      v15 = (_BYTE *)*((_QWORD *)v12 + 1);
      v14 = (_BYTE *)*((_QWORD *)v12 + 2);
      v16 = v14 - v15;
      if (v14 == v15)
      {
        v17 = 0;
        v18 = *(_DWORD *)(*a3 + 4 * v13);
        if (v18 == -1)
          goto LABEL_12;
      }
      else
      {
        if (0xAAAAAAAAAAAAAAABLL * (v16 >> 3) > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v17 = (char *)operator new(v16);
        v43 = v17;
        v45 = &v17[8 * (v16 >> 3)];
        memcpy(v17, v15, v16);
        v44 = &v17[8 * (v16 >> 3)];
        v10 = a4;
        v18 = *(_DWORD *)(*a3 + 4 * v13);
        if (v18 == -1)
        {
LABEL_12:
          v20 = a6;
          sub_20F3B5224(&v42, v8, a3, v10, a5, a6);
          v19 = *v10;
          v18 = *(_DWORD *)(*v10 + 4 * v13);
          if (*(_DWORD *)(*a3 + 4 * v36) < v18)
          {
            v22 = a6[1];
            v21 = (unint64_t)a6[2];
            if ((unint64_t)v22 >= v21)
            {
              v25 = *a6;
              v26 = 0xAAAAAAAAAAAAAAABLL * ((v22 - *a6) >> 3);
              v27 = v26 + 1;
              if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20E867F44();
              v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v25) >> 3);
              if (2 * v28 > v27)
                v27 = 2 * v28;
              if (v28 >= 0x555555555555555)
                v29 = 0xAAAAAAAAAAAAAAALL;
              else
                v29 = v27;
              if (v29)
              {
                if (v29 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E877A38();
                v30 = v29;
                v31 = (char *)operator new(24 * v29);
                v29 = v30;
              }
              else
              {
                v31 = 0;
              }
              v32 = *v8;
              v33 = &v31[24 * v26];
              *((_QWORD *)v33 + 2) = *((_QWORD *)v8 + 2);
              *(_OWORD *)v33 = v32;
              v34 = v33;
              a6 = v20;
              if (v22 != v25)
              {
                do
                {
                  v35 = *(_OWORD *)(v22 - 24);
                  *((_QWORD *)v34 - 1) = *((_QWORD *)v22 - 1);
                  *(_OWORD *)(v34 - 24) = v35;
                  v34 -= 24;
                  v22 -= 24;
                }
                while (v22 != v25);
                v22 = *v20;
              }
              v24 = v33 + 24;
              *v20 = v34;
              v20[1] = v33 + 24;
              v20[2] = &v31[24 * v29];
              if (v22)
                operator delete(v22);
            }
            else
            {
              v23 = *v8;
              *((_QWORD *)v22 + 2) = *((_QWORD *)v8 + 2);
              *(_OWORD *)v22 = v23;
              v24 = v22 + 24;
            }
            a6[1] = v24;
            v10 = a4;
            v19 = *a4;
            v18 = *(_DWORD *)(*a4 + 4 * v13);
          }
          goto LABEL_32;
        }
      }
      if (*a2 != *(_DWORD *)v8)
      {
        v19 = *v10;
LABEL_32:
        if (v18 >= *(_DWORD *)(v19 + 4 * v36))
          v18 = *(_DWORD *)(v19 + 4 * v36);
        *(_DWORD *)(v19 + 4 * v36) = v18;
      }
      if (v17)
        operator delete(v17);
      v8 = (__int128 *)((char *)v8 + 24);
    }
    while (v8 != v40);
  }
}

void sub_20F3B553C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F3B5558(unsigned int *a1, _DWORD *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  int v23;
  char *v24;
  char *v25;
  char *v26;

  v5 = *a1;
  v6 = (v5 >> 3) & 0x1FFFFFF8;
  v7 = 1 << v5;
  *(_QWORD *)(*a4 + v6) |= v7;
  *(_QWORD *)(*a5 + v6) |= v7;
  v8 = *((_QWORD *)a1 + 1);
  v9 = *((_QWORD *)a1 + 2);
  if (v8 != v9)
  {
    while (1)
    {
      v13 = *a3;
      v12 = a3[1];
      if (*a3 != v12)
      {
        while (*(_DWORD *)v13 != *(_DWORD *)v8
             || *(_QWORD *)(v13 + 8) != *(_QWORD *)(v8 + 8)
             || *(_QWORD *)(v13 + 16) != *(_QWORD *)(v8 + 16))
        {
          v13 += 24;
          if (v13 == v12)
          {
            v13 = a3[1];
            break;
          }
        }
      }
      if (v13 != v12)
        goto LABEL_3;
      v14 = *(unsigned int **)(v8 + 8);
      if (*v14 == *a1)
        v14 = *(unsigned int **)(v8 + 16);
      v15 = *v14;
      v23 = *v14;
      v25 = 0;
      v26 = 0;
      v24 = 0;
      v17 = (_BYTE *)*((_QWORD *)v14 + 1);
      v16 = (_BYTE *)*((_QWORD *)v14 + 2);
      v18 = v16 - v17;
      if (v16 != v17)
        break;
      v19 = 0;
      if ((_DWORD)v15 != *a2)
        goto LABEL_20;
LABEL_22:
      if (v19)
        operator delete(v19);
LABEL_3:
      v8 += 24;
      if (v8 == v9)
        return;
    }
    if (0xAAAAAAAAAAAAAAABLL * (v18 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v19 = (char *)operator new(v18);
    v24 = v19;
    v26 = &v19[8 * (v18 >> 3)];
    memcpy(v19, v17, v18);
    v25 = &v19[8 * (v18 >> 3)];
    if ((_DWORD)v15 == *a2)
      goto LABEL_22;
LABEL_20:
    if (((*(_QWORD *)(*a5 + ((v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) == 0)
      sub_20F3B5558(&v23, a1, a3, a4, a5);
    goto LABEL_22;
  }
}

void sub_20F3B5744(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F3B575C(unsigned int *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v15 = 0;
  v5 = *a2;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  if (v5)
  {
    if (v5 >> 62)
      sub_20EABADD4();
    v6 = (char *)operator new(4 * v5);
    v12 = v6;
    v14 = &v6[4 * v5];
    memset(v6, 255, 4 * v5);
    v13 = v14;
    v7 = (char *)operator new(4 * v5);
    v9 = v7;
    v11 = &v7[4 * v5];
    memset(v7, 255, 4 * v5);
    v10 = v11;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  v8 = -1;
  sub_20F3B5224(a1, &v8, &v12, (uint64_t *)&v9, &v15, (char **)a3);
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_20F3B5880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  void *v15;
  void *v17;

  operator delete(v15);
  v17 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

void sub_20F3B58D4(unsigned int *a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  void *__p[3];

  v6 = *a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (v6 - 1) >> 6;
    v8 = operator new(8 * (v7 + 1));
    v9 = v8;
    a3[1] = v6;
    a3[2] = v7 + 1;
    *a3 = v8;
    if (v6 >= 0x41)
      v10 = (v6 - 1) >> 6;
    else
      v10 = 0;
    v8[v10] = 0;
    if (v6 >= 0x40)
      bzero(v8, 8 * (v6 >> 6));
    if ((v6 & 0x3F) != 0)
      v9[v6 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v6 & 0x3F));
  }
  else
  {
    v9 = 0;
  }
  sub_20F3B575C(a1, a2, (uint64_t)__p);
  v11 = *a2;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  if (v11)
  {
    if ((v11 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v12 = (v11 - 1) >> 6;
    v13 = operator new(8 * (v12 + 1));
    v14 = v13;
    v17 = v11;
    v18 = v12 + 1;
    v16 = v13;
    if (v11 >= 0x41)
      v15 = (v11 - 1) >> 6;
    else
      v15 = 0;
    v13[v15] = 0;
    if (v11 >= 0x40)
      bzero(v13, 8 * (v11 >> 6));
    if ((v11 & 0x3F) != 0)
      v14[v11 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v11 & 0x3F));
  }
  else
  {
    v14 = 0;
  }
  sub_20F3B5558(a1, a1, (uint64_t *)__p, a3, &v16);
  *(_QWORD *)((char *)v9 + (((unint64_t)*a1 >> 3) & 0x1FFFFFF8)) |= 1 << *a1;
  if (v14)
    operator delete(v14);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_20F3B5AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  void *v12;
  void *v13;
  void *v15;

  if (v13)
  {
    operator delete(v13);
    v15 = __p;
    if (!__p)
    {
LABEL_3:
      if (!v12)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v15 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v15);
  if (!v12)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

char *sub_20F3B5B0C(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  void *v20;

  v2 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    sub_20E867F44();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v3)
    v3 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 59)
    sub_20E877A38();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v2];
  v12 = &v10[v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v13 = v11 + 32;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v11[v16];
      v18 = &v15[v16];
      *((_DWORD *)v17 - 8) = *(_DWORD *)&v15[v16 - 32];
      *(_OWORD *)(v17 - 24) = *(_OWORD *)&v15[v16 - 24];
      *((_QWORD *)v17 - 1) = *(_QWORD *)&v15[v16 - 8];
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v18 - 2) = 0;
      *((_QWORD *)v18 - 1) = 0;
      v16 -= 32;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = &v11[v16];
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = (void *)*((_QWORD *)v19 - 3);
      if (v20)
      {
        *((_QWORD *)v19 - 2) = v20;
        operator delete(v20);
      }
      v19 -= 32;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

_QWORD *sub_20F3B5C4C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_24C9FF548;
  v2 = (void *)a1[42];
  if (v2)
  {
    a1[43] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[39];
  if (v3)
  {
    a1[40] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[36];
  if (v4)
  {
    a1[37] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[33];
  if (v5)
  {
    a1[34] = v5;
    operator delete(v5);
  }
  *a1 = &off_24C9FCFE8;
  v6 = (void *)a1[29];
  if (v6)
  {
    a1[30] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_20F3B5CD4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_24C9FF548;
  v2 = (void *)a1[42];
  if (v2)
  {
    a1[43] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[39];
  if (v3)
  {
    a1[40] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[36];
  if (v4)
  {
    a1[37] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[33];
  if (v5)
  {
    a1[34] = v5;
    operator delete(v5);
  }
  *a1 = &off_24C9FCFE8;
  v6 = (void *)a1[29];
  if (v6)
  {
    a1[30] = v6;
    operator delete(v6);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20F3B5D6C(uint64_t a1, uint64_t **a2, uint64_t ***a3, uint64_t **a4, _QWORD *a5, uint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, double a11, char **a12, void **a13)
{
  unsigned int v20;
  char v21;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  unsigned __int8 v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  size_t v40;
  void **v41;
  unint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  const char *v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  const char *v53;
  size_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  size_t v62;
  std::__shared_weak_count_vtbl *v63;
  std::__shared_weak_count *v64;
  size_t v65;
  size_t v66;
  _QWORD *v67;
  int v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  const char *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  int **v120;
  int *v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int *v127;
  unint64_t v128;
  unint64_t v130;
  float v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  int *i;
  int v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t j;
  float v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  float64x2_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  unint64_t v159;
  void **v160;
  char *v161;
  char *v162;
  char *v163;
  void (***v164)(char *);
  void (**v165)(char *);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  __int128 v174;
  char *v175;
  void (***v176)(char *);
  void (**v177)(char *);
  double v178;
  double v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  double v183;
  double v184;
  float64x2_t v185;
  float64x2_t v186;
  int8x16_t v189;
  double v193;
  double v194;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  unint64_t v207;
  char *v208;
  unint64_t v209;
  char *v210;
  char *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  __int128 *v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  __int128 v222;
  char *v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  unint64_t v231;
  unint64_t v232;
  int v233;
  char *v234;
  char *v235;
  float64x2_t *v236;
  float64x2_t v237;
  float64x2_t *v238;
  char *k;
  float64x2_t v240;
  char *v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  float64x2_t v246;
  unsigned int v249;
  char v250;
  BOOL v251;
  unsigned int v252;
  double v254;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  double v269;
  double v270;
  float64x2_t v271;
  double v272;
  double v273;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  int v282;
  int v283;
  BOOL v284;
  float64x2_t v285;
  double v286;
  double v288;
  double v289;
  double v290;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  int v299;
  int v300;
  BOOL v301;
  float64x2_t v302;
  double v303;
  double v305;
  double v306;
  float64x2_t v307;
  double v308;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  int v317;
  int v318;
  BOOL v319;
  float64x2_t v320;
  double v321;
  double v323;
  double v324;
  float64x2_t v325;
  double v326;
  double v327;
  double v328;
  float64x2_t v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v337;
  int v338;
  double v339;
  uint64_t v340;
  unint64_t v341;
  unsigned int v342;
  double v343;
  unsigned int v344;
  void *v345;
  unint64_t v346;
  char *v347;
  float64x2_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int v354;
  uint64_t v355;
  unsigned int *v356;
  unint64_t v357;
  unsigned int *v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  _BYTE *v364;
  unsigned int *v365;
  int64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int *v370;
  _OWORD *v371;
  unsigned int *v372;
  uint64_t v373;
  __int128 v374;
  unsigned int v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  uint64_t v382;
  char *v383;
  int v386;
  uint64_t *v387;
  uint64_t *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unsigned int v392;
  unsigned int v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unsigned int v397;
  BOOL v398;
  uint64_t v399;
  char *v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unsigned int v404;
  BOOL v405;
  __int128 v406;
  double v410;
  double v411;
  float64x2_t v412;
  double *v413;
  double v414;
  int v415;
  double v417;
  uint64_t *v419;
  unsigned int **v420;
  BOOL v421;
  float64x2_t v422;
  float64x2_t v423;
  unint64_t v424;
  float64x2_t v425;
  int64x2_t v426;
  float64x2_t v427;
  float64x2_t v429;
  double v430;
  float64x2_t v431;
  uint64_t v432;
  float64x2_t v433;
  uint64_t **v434;
  uint64_t *v435;
  uint64_t v436;
  unint64_t v438;
  double v439;
  double v440;
  float64x2_t v441;
  double v442;
  const char *__s;
  char *__sa[2];
  uint64_t v445;
  float64x2_t v446;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v448;
  const char *v449;
  int v450;
  const char *v451;
  uint64_t v452;
  std::__shared_weak_count *v453;
  void *__dst[2];
  int64_t v455;
  uint64_t v456;
  __int128 v457;
  std::__shared_weak_count *v458;
  char *v459;
  std::__shared_weak_count *v460;
  _QWORD *v461;
  __int128 v462;
  void *v463[2];
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  const void *v467;
  uint64_t v468;
  const void *v469;
  unint64_t v470;
  void *__p;
  char v472;
  unint64_t v473;
  int v474;
  uint64_t v475;
  _BYTE v476[24];
  __int128 v477;
  void *v478[2];
  unint64_t v479;
  char v480;
  _QWORD v481[5];

  v481[2] = *MEMORY[0x24BDAC8D0];
  v421 = a9 < 90.0;
  v20 = *(_DWORD *)(a7 + 992);
  if (a9 < 90.0)
  {
    if (v20 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_572;
      }
      v20 = *(_DWORD *)(a7 + 992);
      if (v20 <= 7)
      {
LABEL_4:
        if (v20 > 3)
        {
          _ZF = v20 == 6;
        }
        else
        {
          if (v20 <= 1)
          {
            if (!v20)
              goto LABEL_571;
            v421 = 0;
            goto LABEL_25;
          }
          _ZF = v20 == 2;
        }
        goto LABEL_21;
      }
    }
    else if (v20 <= 7)
    {
      goto LABEL_4;
    }
    if (v20 < 0xC)
    {
      v21 = 1;
LABEL_24:
      v421 = v21;
LABEL_25:
      v24 = fmax(a11, 1.0) * *(double *)(a1 + 120);
      if (a5[9] == a5[10])
        return;
      goto LABEL_26;
    }
    _ZF = v20 == 13;
    if (v20 <= 0xD)
    {
LABEL_21:
      v21 = !_ZF;
      goto LABEL_24;
    }
  }
  v23 = *(double *)(a1 + 120);
  if (v20 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_572;
    }
    v20 = *(_DWORD *)(a7 + 992);
  }
  if (!v20)
    goto LABEL_571;
  v24 = fmax(a11, 1.0) * v23;
  if (a5[9] == a5[10])
    return;
LABEL_26:
  v25 = *(double *)a7;
  v26 = *(double *)(a1 + 128);
  v27 = tan(a9 * 0.0174532925);
  v28 = *(double *)(a1 + 104);
  v29 = v25;
  if (v20 != -1)
    goto LABEL_30;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_572:
    abort();
  }
  if (!*(_DWORD *)(a7 + 992))
  {
LABEL_571:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    goto LABEL_572;
  }
  v29 = *(double *)a7;
LABEL_30:
  v30 = floor(v28 * a11 * 0.0174532925 * v29 + 0.5);
  if (v30 >= 1.0)
    v31 = v30;
  else
    v31 = 1.0;
  v32 = atomic_load((unsigned __int8 *)&qword_254A688F8);
  v436 = a7;
  v445 = a1;
  if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254A688F8))
  {
    sub_21021D3D8(v476);
    sub_20E8610C0(v463, "cv3d.vio.area_mapping");
    sub_20E8C4068((uint64_t **)v476, (uint64_t)v463, &qword_254A688F0);
    if (SHIBYTE(v464) < 0)
      operator delete(v463[0]);
    __cxa_guard_release(&qword_254A688F8);
  }
  v417 = v24 * 0.0174532925 * v25 * (v24 * 0.0174532925 * v25);
  v456 = qword_254A688F0;
  if (**(int **)(qword_254A688F0 + 56) <= 2)
  {
    v33 = *(unsigned __int8 *)(qword_254A688F0 + 72);
    v34 = sub_20E8C31DC(qword_254A688F0, "OSLogSurrogateAppender", 1, 0);
    v35 = v34;
    if (v33 || v34)
    {
      sub_20E863438((uint64_t)v463);
      sub_20E86A980(&v464, (uint64_t)"matching_search_circle_radius_pix: ", 35);
      v36 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v36, (uint64_t)" [deg] ->", 9);
      v37 = (_QWORD *)std::ostream::operator<<();
      v38 = sub_20E86A980(v37, (uint64_t)" [pix]", 6);
      sub_20E86A980(v38, (uint64_t)" inlier: -> ", 12);
      v39 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v39, (uint64_t)" [pix] ", 7);
      v434 = a2;
      if ((v474 & 0x10) != 0)
      {
        v42 = v473;
        if (v473 < v470)
        {
          v473 = v470;
          v42 = v470;
        }
        v43 = v469;
        v40 = v42 - (_QWORD)v469;
        if (v42 - (unint64_t)v469 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_94;
      }
      else
      {
        if ((v474 & 8) == 0)
        {
          v40 = 0;
          HIBYTE(v455) = 0;
          v41 = __dst;
          goto LABEL_50;
        }
        v43 = v467;
        v40 = v468 - (_QWORD)v467;
        if ((unint64_t)(v468 - (_QWORD)v467) > 0x7FFFFFFFFFFFFFF7)
LABEL_94:
          sub_20E860B7C();
      }
      if (v40 >= 0x17)
      {
        v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v40 | 7) != 0x17)
          v44 = v40 | 7;
        v45 = v44 + 1;
        v41 = (void **)operator new(v44 + 1);
        __dst[1] = (void *)v40;
        v455 = v45 | 0x8000000000000000;
        __dst[0] = v41;
      }
      else
      {
        HIBYTE(v455) = v40;
        v41 = __dst;
        if (!v40)
        {
LABEL_50:
          v438 = v35;
          *((_BYTE *)v41 + v40) = 0;
          *(_QWORD *)&v446.f64[0] = &v456;
          *(std::chrono::steady_clock::time_point *)&v446.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v448 = 2;
          v449 = "unknown file";
          v450 = 104;
          v452 = 0;
          v453 = 0;
          v451 = "unknown function";
          v46 = __dst;
          if (v455 < 0)
            v46 = (void **)__dst[0];
          __s = (const char *)v46;
          v47 = **(_QWORD **)&v446.f64[0];
          v48 = **(_QWORD **)&v446.f64[0] + 16;
          if (*(char *)(**(_QWORD **)&v446.f64[0] + 39) < 0)
          {
            v50 = *(const char **)(v47 + 16);
            v49 = *(_QWORD *)(v47 + 24);
            v52 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v52 & 1) != 0)
              goto LABEL_56;
          }
          else
          {
            v49 = *(unsigned __int8 *)(**(_QWORD **)&v446.f64[0] + 39);
            v50 = (const char *)(**(_QWORD **)&v446.f64[0] + 16);
            v51 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v51 & 1) != 0)
              goto LABEL_56;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v476);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v476);
            if ((_BYTE)v477 && (v476[23] & 0x80000000) != 0)
              operator delete(*(void **)v476);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_56:
          if (byte_254A4A4F8[23] >= 0)
            v53 = byte_254A4A4F8;
          else
            v53 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v54 = byte_254A4A4F8[23];
          else
            v54 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v476 = os_log_create(v53, v50);
          v55 = &v476[8];
          if (v54 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v54 >= 0x17)
          {
            v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v54 | 7) != 0x17)
              v56 = v54 | 7;
            v57 = v56 + 1;
            v55 = operator new(v56 + 1);
            *(_QWORD *)&v476[16] = v54;
            *(_QWORD *)&v477 = v57 | 0x8000000000000000;
            *(_QWORD *)&v476[8] = v55;
          }
          else
          {
            BYTE7(v477) = v54;
            if (!v54)
            {
LABEL_70:
              v432 = v48;
              v55[v54] = 0;
              BYTE8(v477) = 1;
              v58 = v478;
              if (v49 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              a1 = v445;
              if (v49 >= 0x17)
              {
                v59 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v49 | 7) != 0x17)
                  v59 = v49 | 7;
                v60 = v59 + 1;
                v58 = (void **)operator new(v59 + 1);
                v478[1] = (void *)v49;
                v479 = v60 | 0x8000000000000000;
                v478[0] = v58;
              }
              else
              {
                HIBYTE(v479) = v49;
                if (!v49)
                {
LABEL_78:
                  *((_BYTE *)v58 + v49) = 0;
                  v480 = 1;
                  v61 = *(NSObject **)v476;
                  if (SHIBYTE(v479) < 0)
                    operator delete(v478[0]);
                  if (BYTE8(v477) && SBYTE7(v477) < 0)
                    operator delete(*(void **)&v476[8]);
                  if (*(_QWORD *)v476)
                    os_release(*(void **)v476);
                  if (!v438 || !*(_QWORD *)(v438 + 24))
                  {
                    os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)v476 = 136315138;
                    *(_QWORD *)&v476[4] = __s;
                    v69 = (void *)_os_log_send_and_compose_impl();
                    a2 = v434;
                    if (v69)
                      free(v69);
                    goto LABEL_158;
                  }
                  v62 = _os_log_pack_size();
                  v63 = (std::__shared_weak_count_vtbl *)operator new(v62, (std::align_val_t)8uLL);
                  v64 = (std::__shared_weak_count *)operator new();
                  v64->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v64->__shared_owners_ = 0;
                  v64->__shared_weak_owners_ = 0;
                  v64[1].__vftable = v63;
                  *(_QWORD *)&v457 = v63;
                  *((_QWORD *)&v457 + 1) = v63;
                  v460 = 0;
                  v458 = v64;
                  v459 = 0;
                  v65 = strlen(__s);
                  if (v65 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v66 = v65;
                  if (v65 >= 0x17)
                  {
                    v70 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v65 | 7) != 0x17)
                      v70 = v65 | 7;
                    v71 = v70 + 1;
                    v67 = operator new(v70 + 1);
                    *((_QWORD *)&v462 + 1) = v71 | 0x8000000000000000;
                    v461 = v67;
                    *(_QWORD *)&v462 = v66;
                  }
                  else
                  {
                    HIBYTE(v462) = v65;
                    v67 = &v461;
                    if (!v65)
                    {
                      v68 = v33;
                      goto LABEL_99;
                    }
                  }
                  v68 = v33;
                  memcpy(v67, __s, v66);
LABEL_99:
                  *((_BYTE *)v67 + v66) = 0;
                  v72 = v461;
                  v481[0] = v462;
                  *(_QWORD *)((char *)v481 + 7) = *(_QWORD *)((char *)&v462 + 7);
                  v73 = HIBYTE(v462);
                  v74 = operator new(0x38uLL);
                  v74[1] = 0;
                  v74[2] = 0;
                  v74[3] = off_24C9ABC20;
                  *v74 = &off_24C9ABBD0;
                  v75 = v481[0];
                  v74[4] = v72;
                  v74[5] = v75;
                  *(_QWORD *)((char *)v74 + 47) = *(_QWORD *)((char *)v481 + 7);
                  *((_BYTE *)v74 + 55) = v73;
                  v481[0] = 0;
                  *(_QWORD *)((char *)v481 + 7) = 0;
                  v76 = v460;
                  v459 = (char *)(v74 + 3);
                  v460 = (std::__shared_weak_count *)v74;
                  v33 = v68;
                  if (v76)
                  {
                    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
                    do
                      v78 = __ldaxr(p_shared_owners);
                    while (__stlxr(v78 - 1, p_shared_owners));
                    if (!v78)
                    {
                      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                      std::__shared_weak_count::__release_weak(v76);
                    }
                  }
                  *(_OWORD *)v476 = v457;
                  v79 = v459;
                  *(_QWORD *)&v476[16] = v458;
                  if (v458)
                  {
                    v80 = (unint64_t *)&v458->__shared_owners_;
                    do
                      v81 = __ldxr(v80);
                    while (__stxr(v81 + 1, v80));
                  }
                  v82 = v460;
                  *(_QWORD *)&v477 = v79;
                  *((_QWORD *)&v477 + 1) = v460;
                  if (v460)
                  {
                    v83 = (unint64_t *)&v460->__shared_owners_;
                    do
                      v84 = __ldxr(v83);
                    while (__stxr(v84 + 1, v83));
                    v478[0] = v79;
                    do
                      v85 = __ldaxr(v83);
                    while (__stlxr(v85 - 1, v83));
                    if (!v85)
                    {
                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                  }
                  else
                  {
                    v478[0] = v79;
                  }
                  v86 = v458;
                  if (v458)
                  {
                    v87 = (unint64_t *)&v458->__shared_owners_;
                    do
                      v88 = __ldaxr(v87);
                    while (__stlxr(v88 - 1, v87));
                    if (!v88)
                    {
                      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                      std::__shared_weak_count::__release_weak(v86);
                    }
                  }
                  v89 = *(_QWORD *)v476;
                  if (*((char *)v478[0] + 31) >= 0)
                    v90 = (char *)v478[0] + 8;
                  else
                    v90 = (char *)*((_QWORD *)v478[0] + 1);
                  v91 = _os_log_pack_fill();
                  *(_DWORD *)v91 = 136315138;
                  *(_QWORD *)(v91 + 4) = v90;
                  v92 = operator new();
                  v93 = *(unsigned __int8 *)(v47 + 39);
                  v94 = v432;
                  if ((v93 & 0x80u) != 0)
                  {
                    v94 = *(_QWORD *)(v47 + 16);
                    v93 = *(_QWORD *)(v47 + 24);
                  }
                  *(_QWORD *)v92 = v89;
                  *(_OWORD *)(v92 + 8) = *(_OWORD *)&v476[8];
                  *(_QWORD *)&v476[8] = 0;
                  *(_QWORD *)&v476[16] = 0;
                  *(_OWORD *)(v92 + 24) = v477;
                  v477 = 0uLL;
                  *(_QWORD *)(v92 + 40) = v94;
                  *(_QWORD *)(v92 + 48) = v93;
                  *(_BYTE *)(v92 + 56) = 2;
                  v461 = 0;
                  *(_QWORD *)&v457 = v92;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v438 + 24) + 40))(*(_QWORD *)(v438 + 24), &v457);
                  v95 = v457;
                  *(_QWORD *)&v457 = 0;
                  a2 = v434;
                  if (v95)
                  {
                    v96 = *(std::__shared_weak_count **)(v95 + 32);
                    if (v96)
                    {
                      v97 = (unint64_t *)&v96->__shared_owners_;
                      do
                        v98 = __ldaxr(v97);
                      while (__stlxr(v98 - 1, v97));
                      if (!v98)
                      {
                        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                        std::__shared_weak_count::__release_weak(v96);
                      }
                    }
                    v99 = *(std::__shared_weak_count **)(v95 + 16);
                    if (v99)
                    {
                      v100 = (unint64_t *)&v99->__shared_owners_;
                      do
                        v101 = __ldaxr(v100);
                      while (__stlxr(v101 - 1, v100));
                      if (!v101)
                      {
                        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                        std::__shared_weak_count::__release_weak(v99);
                      }
                    }
                    MEMORY[0x212BC6398](v95, 0x10F0C40B62ED6C6);
                    v102 = v461;
                    v461 = 0;
                    if (v102)
                    {
                      v103 = (std::__shared_weak_count *)v102[4];
                      if (v103)
                      {
                        v104 = (unint64_t *)&v103->__shared_owners_;
                        do
                          v105 = __ldaxr(v104);
                        while (__stlxr(v105 - 1, v104));
                        if (!v105)
                        {
                          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                          std::__shared_weak_count::__release_weak(v103);
                        }
                      }
                      v106 = (std::__shared_weak_count *)v102[2];
                      if (v106)
                      {
                        v107 = (unint64_t *)&v106->__shared_owners_;
                        do
                          v108 = __ldaxr(v107);
                        while (__stlxr(v108 - 1, v107));
                        if (!v108)
                        {
                          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                          std::__shared_weak_count::__release_weak(v106);
                        }
                      }
                      MEMORY[0x212BC6398](v102, 0x10F0C40B62ED6C6);
                    }
                  }
                  v109 = (std::__shared_weak_count *)*((_QWORD *)&v477 + 1);
                  if (*((_QWORD *)&v477 + 1))
                  {
                    v110 = (unint64_t *)(*((_QWORD *)&v477 + 1) + 8);
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 - 1, v110));
                    if (!v111)
                    {
                      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                      std::__shared_weak_count::__release_weak(v109);
                    }
                  }
                  v112 = *(std::__shared_weak_count **)&v476[16];
                  if (*(_QWORD *)&v476[16])
                  {
                    v113 = (unint64_t *)(*(_QWORD *)&v476[16] + 8);
                    do
                      v114 = __ldaxr(v113);
                    while (__stlxr(v114 - 1, v113));
                    if (!v114)
                    {
                      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                      std::__shared_weak_count::__release_weak(v112);
                    }
                  }
LABEL_158:
                  if (v33)
                  {
                    v115 = (const char *)__dst;
                    if (v455 < 0)
                      v115 = (const char *)__dst[0];
                    sub_20E8C003C((uint64_t)&v446, "%s", v115);
                    sub_20E863570((uint64_t)&v446);
                  }
                  sub_20E863570((uint64_t)&v446);
                  v116 = v453;
                  if (v453)
                  {
                    v117 = (unint64_t *)&v453->__shared_owners_;
                    do
                      v118 = __ldaxr(v117);
                    while (__stlxr(v118 - 1, v117));
                    if (!v118)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  if (SHIBYTE(v455) < 0)
                    operator delete(__dst[0]);
                  v463[0] = *(void **)MEMORY[0x24BEDB7F0];
                  v119 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(void **)((char *)v463 + *((_QWORD *)v463[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                  v464 = v119;
                  v465 = MEMORY[0x24BEDB848] + 16;
                  if (v472 < 0)
                    operator delete(__p);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&v475);
                  goto LABEL_172;
                }
              }
              memmove(v58, v50, v49);
              goto LABEL_78;
            }
          }
          memmove(v55, v53, v54);
          goto LABEL_70;
        }
      }
      memmove(v41, v43, v40);
      goto LABEL_50;
    }
  }
LABEL_172:
  v120 = (int **)(a1 + 288);
  v121 = *(int **)(a1 + 288);
  *(_QWORD *)(a1 + 296) = v121;
  v122 = *(_DWORD *)(a1 + 256);
  LODWORD(v463[0]) = 0;
  v123 = v122 + 1;
  if (v122 != -1)
  {
    sub_20EDB9AB0(a1 + 288, v122 + 1, (const float *)v463);
    v121 = *v120;
    a1 = v445;
    v124 = a5[9];
    v125 = a5[10];
    if (v124 == v125)
      goto LABEL_176;
    do
    {
LABEL_180:
      v131 = *(float *)(v124 + 12);
      v132 = v131;
      if (v122 < v131)
      {
        v133 = *(_QWORD *)(a1 + 296) - (_QWORD)v121;
        v134 = v132 + 1;
        if (v133 >> 2 >= v134)
        {
          v122 = v131;
        }
        else
        {
          LODWORD(v135) = 2 * ((unint64_t)v133 >> 2);
          if (v135 <= v134)
            v135 = v134;
          else
            v135 = v135;
          LODWORD(v463[0]) = 0;
          sub_20EDB9AB0((uint64_t)v120, v135 - (v133 >> 2), (const float *)v463);
          v121 = *v120;
          v122 = v132;
          a1 = v445;
        }
      }
      ++v121[v132];
      v124 += 40;
    }
    while (v124 != v125);
    v126 = v122 + 1;
    v127 = *(int **)(a1 + 296);
    v136 = v127 - v121;
    _CF = v126 >= v136;
    v130 = v126 - v136;
    if (v126 > v136)
      goto LABEL_177;
    goto LABEL_187;
  }
  v124 = a5[9];
  v125 = a5[10];
  if (v124 != v125)
    goto LABEL_180;
LABEL_176:
  v126 = v123;
  v127 = *(int **)(a1 + 296);
  v128 = v127 - v121;
  _CF = v123 >= v128;
  v130 = v123 - v128;
  if (v123 > v128)
  {
LABEL_177:
    sub_20E93DC84((uint64_t)v120, v130);
    a1 = v445;
    v121 = *(int **)(v445 + 288);
    v127 = *(int **)(v445 + 296);
    goto LABEL_189;
  }
LABEL_187:
  if (!_CF)
  {
    v127 = &v121[v126];
    *(_QWORD *)(a1 + 296) = v127;
  }
LABEL_189:
  *(_DWORD *)(a1 + 256) = v122;
  if (v121 != v127)
  {
    v137 = *v121;
    *v121 = 0;
    for (i = v121 + 1; i != v127; v137 += v139)
    {
      v139 = *i;
      *i++ = v137;
    }
  }
  v140 = *(char **)(a1 + 264);
  *(_QWORD *)(a1 + 272) = v140;
  v141 = a5[10] - a5[9];
  if (v141)
  {
    v142 = 0xCCCCCCCCCCCCCCCDLL * (v141 >> 3);
    v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 280) - (_QWORD)v140) >> 3);
    if (v143 >= v142)
    {
      bzero(v140, 24 * ((24 * v142 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 272) = &v140[24 * ((24 * v142 - 24) / 0x18) + 24];
    }
    else
    {
      if (v142 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v144 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 280) - (_QWORD)v140) >> 3);
      if (v144 <= v142)
        v144 = v142;
      if (v143 >= 0x555555555555555)
        v145 = 0xAAAAAAAAAAAAAAALL;
      else
        v145 = v144;
      if (v145 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v146 = (char *)operator new(24 * v145);
      bzero(v146, 24 * ((24 * v142 - 24) / 0x18) + 24);
      a1 = v445;
      *(_QWORD *)(v445 + 264) = v146;
      *(_QWORD *)(v445 + 272) = &v146[24 * ((24 * v142 - 24) / 0x18) + 24];
      *(_QWORD *)(v445 + 280) = &v146[24 * v145];
      if (v140)
        operator delete(v140);
    }
    v147 = a5[9];
    for (j = a5[10]; v147 != j; v147 += 40)
    {
      v149 = *(float *)(v147 + 12);
      v150 = *(_QWORD *)(a1 + 288);
      v151 = 4 * v149;
      v152 = *(_DWORD *)(v150 + v151);
      *(_DWORD *)(v150 + v151) = v152 + 1;
      LODWORD(v151) = *(_DWORD *)(v147 + 4);
      v153 = *(_QWORD *)(a1 + 264) + 24 * v152;
      *(double *)v153 = *(float *)(v147 + 8);
      *(double *)(v153 + 8) = v149;
      *(_DWORD *)(v153 + 16) = v151;
    }
  }
  v154.f64[0] = *(float64_t *)(a6 + 16);
  v426 = *(int64x2_t *)(a6 + 24);
  v430 = *(double *)(a6 + 64);
  v429 = *(float64x2_t *)(a6 + 48);
  v154.f64[1] = *(float64_t *)(a6 + 40);
  v431 = v154;
  v439 = *(double *)(a6 + 88);
  *(_OWORD *)__sa = *(_OWORD *)a6;
  v433 = *(float64x2_t *)(a6 + 72);
  v155 = *(void **)(a1 + 336);
  *(_QWORD *)(a1 + 344) = v155;
  v156 = a5[73] - a5[72];
  v157 = v156 >> 6;
  if (v156 >> 6 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 352) - (_QWORD)v155) >> 2))
  {
    if (v156 < 0)
      sub_20E867F44();
    v158 = (char *)operator new((unint64_t)v156 >> 4);
    *(_QWORD *)(v445 + 336) = v158;
    *(_QWORD *)(v445 + 344) = v158;
    *(_QWORD *)(v445 + 352) = &v158[4 * v157];
    if (v155)
      operator delete(v155);
  }
  v159 = (uint64_t)(a5[73] - a5[72]) >> 6;
  LODWORD(v463[0]) = 0;
  sub_20F27BE6C(a1 + 336, v159, (const float *)v463);
  v160 = a13;
  v161 = (char *)*a13;
  v162 = (char *)a13[1];
  if (v162 != *a13)
  {
    v163 = v162 - 40;
    v164 = (void (***)(char *))(v162 - 40);
    do
    {
      v165 = *v164;
      v164 -= 5;
      (*v165)(v163);
      _ZF = v163 == v161;
      v163 = (char *)v164;
    }
    while (!_ZF);
    v162 = (char *)*a13;
  }
  v166 = v436;
  a13[1] = v161;
  v167 = (char *)a2[1] - (char *)*a2;
  v168 = v167 >> 3;
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a13[2] - v162) >> 3) < v167 >> 3)
  {
    if ((unint64_t)v167 >= 0x3333333333333331)
      sub_20E867F44();
    v169 = (char *)operator new(40 * v168);
    v170 = &v169[8 * ((v161 - v162) >> 3)];
    v171 = &v169[40 * v168];
    if (v161 == v162)
    {
      *a13 = v170;
      a13[1] = v170;
      a13[2] = v171;
      v166 = v436;
      if (v162)
LABEL_224:
        operator delete(v162);
    }
    else
    {
      v172 = v161;
      v173 = &v169[8 * ((v161 - v162) >> 3)];
      do
      {
        v174 = *((_OWORD *)v172 - 2);
        *((_QWORD *)v173 - 5) = &off_24C9E9850;
        v173 -= 40;
        *(_OWORD *)(v173 + 8) = v174;
        *(_OWORD *)(v173 + 24) = *((_OWORD *)v172 - 1);
        v172 -= 40;
      }
      while (v172 != v162);
      *a13 = v173;
      a13[1] = v170;
      a13[2] = v171;
      v175 = v161 - 40;
      v176 = (void (***)(char *))(v161 - 40);
      v166 = v436;
      do
      {
        v177 = *v176;
        v176 -= 5;
        (*v177)(v175);
        _ZF = v175 == v162;
        v175 = (char *)v176;
      }
      while (!_ZF);
      if (v162)
        goto LABEL_224;
    }
  }
  v178 = sub_20F29212C(v166, a10);
  v180 = *a2;
  v435 = a2[1];
  v181 = v436;
  v182 = v445;
  if (v180 != v435)
  {
    v183 = v178;
    v184 = v179;
    v185 = (float64x2_t)vzip1q_s64(*(int64x2_t *)__sa, v426);
    v186 = (float64x2_t)vzip2q_s64(*(int64x2_t *)__sa, v426);
    _Q5 = (int8x16_t)v429;
    _Q0 = vmulq_f64(v429, v433);
    v189 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v185, v433.f64[0]), v186, v433, 1), v431, v439);
    _D2 = v433.f64[1];
    v424 = vextq_s8(_Q5, _Q5, 8uLL).u64[0];
    v413 = (double *)(v436 + 168);
    v420 = (unsigned int **)(v445 + 312);
    __asm { FMLA            D0, D2, V5.D[1] }
    v193 = v26 * v26;
    v194 = v27 * v27;
    _Q0.f64[0] = _Q0.f64[0] + v430 * v439;
    v423 = _Q0;
    _Q0 = (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v186.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v186, 1), 8uLL);
    v422 = _Q0;
    *(_QWORD *)&v185.f64[1] = vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL).u64[0];
    v189.i64[1] = vextq_s8(v189, v189, 8uLL).u64[0];
    v425 = (float64x2_t)v189;
    v427 = v185;
    while (1)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)v160[1] - (_BYTE *)*v160) >> 3) >= a8)
        return;
      v196 = *v180;
      v197 = *(_QWORD *)(*v180 + 24);
      v199 = a12[15];
      v198 = (unint64_t)a12[16];
      v200 = v198 - (_QWORD)v199;
      if ((char *)v198 == v199)
      {
        v463[1] = 0;
        v463[0] = 0;
        v208 = (char *)v198;
        LODWORD(v464) = 0;
        goto LABEL_251;
      }
      v201 = v200 >> 5;
      v202 = a12[15];
      v203 = v200 >> 5;
      do
      {
        v204 = v203 >> 1;
        v205 = &v202[32 * (v203 >> 1)];
        v207 = *(_QWORD *)v205;
        v206 = v205 + 32;
        v203 += ~(v203 >> 1);
        if (v207 < v197)
          v202 = v206;
        else
          v203 = v204;
      }
      while (v203);
      if ((char *)v198 == v202 || *(_QWORD *)v202 != v197)
        break;
LABEL_290:
      ++*((_DWORD *)v202 + 2);
      if (*(_BYTE *)(v182 + 89))
      {
        v242 = v196 + 40;
        v243 = *(unsigned __int8 *)(v196 + 192);
        if (!*(_BYTE *)(v196 + 192))
          v242 = 0;
        if (!*(_BYTE *)(v242 + 148))
          goto LABEL_231;
      }
      else
      {
        v243 = *(unsigned __int8 *)(v196 + 192);
      }
      if (v243)
        v244 = v196 + 40;
      else
        v244 = 0;
      _Q0.f64[0] = *(float64_t *)(v244 + 24);
      _Q1 = *(float64x2_t *)(v244 + 8);
      v246 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v427, _Q1.f64[0]), v422, _Q1, 1), v431, _Q0.f64[0]);
      _D4 = v424;
      __asm { FMLA            D3, D4, V1.D[1] }
      _Q0.f64[0] = _D3 + v430 * _Q0.f64[0];
      _Q0 = vsubq_f64(_Q0, v423);
      v446 = vsubq_f64(v246, v425);
      rep = *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)&_Q0.f64[0];
      v249 = *(_DWORD *)(v181 + 992);
      if (v249 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v181 = v436;
        v249 = *(_DWORD *)(v436 + 992);
        if (v249 > 7)
        {
LABEL_307:
          v182 = v445;
          if (v249 != 13)
            goto LABEL_317;
          goto LABEL_308;
        }
      }
      else if (v249 > 7)
      {
        goto LABEL_307;
      }
      if (v249 > 3)
      {
        v182 = v445;
        if (v249 != 6)
          goto LABEL_317;
      }
      else
      {
        v182 = v445;
        if (v249 > 1)
        {
          if (v249 != 2)
          {
LABEL_317:
            v251 = v421;
            if (*(double *)&rep > 0.01)
              v251 = 0;
            if (v251
              || v446.f64[0] * v446.f64[0] + v446.f64[1] * v446.f64[1] > *(double *)&rep * (v194 * *(double *)&rep))
            {
              goto LABEL_231;
            }
            v419 = v180;
            if (v249 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v181 = v436;
              v249 = *(_DWORD *)(v436 + 992);
              if (v249 > 7)
                goto LABEL_312;
            }
            else if (v249 > 7)
            {
              goto LABEL_312;
            }
            goto LABEL_323;
          }
        }
        else if (!v249)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
      }
LABEL_308:
      if (*(double *)&rep <= 0.01
        || fabs(v446.f64[0]) >= fabs(v183 * *(double *)&rep)
        || fabs(v446.f64[1]) >= fabs(v184 * *(double *)&rep))
      {
        goto LABEL_231;
      }
      v419 = v180;
      if (v249 > 7)
      {
LABEL_312:
        if (v249 > 0xB)
        {
          if (v249 > 0xD)
          {
            if (v249 == 14)
              v250 = sub_20EB247C0((float64x2_t *)v463, (uint64_t)&v446, v413, (*(double *)v181 + *(double *)(v181 + 32)) * 0.5);
            else
              v250 = sub_20EB3E39C(v181, (float64x2_t *)v463, &v446);
            goto LABEL_438;
          }
          v182 = v445;
          if (v249 != 13 || *(double *)&rep < 0.00000001)
            goto LABEL_230;
          _Q0 = vdivq_f64(v446, (float64x2_t)vdupq_lane_s64(rep, 0));
          v254 = (*(double *)v181 + *(double *)(v181 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v257 = v254 * (_D2 * v254);
          *(float64x2_t *)v463 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v257* (*(double *)(v181 + 168)+ v254 * *(double *)(v181 + 224)+ v257* (*(double *)(v181 + 176)+ v254 * *(double *)(v181 + 232)+ v257* (*(double *)(v181 + 184)+ v254 * *(double *)(v181 + 240)+ v257* (*(double *)(v181 + 192)+ v254 * *(double *)(v181 + 248)+ v257* (*(double *)(v181 + 200)+ v254 * *(double *)(v181 + 256)+ v257
                                                       * (*(double *)(v181 + 208)
                                                        + v254 * *(double *)(v181 + 264)
                                                        + v257
                                                        * (*(double *)(v181 + 216)
                                                         + *(double *)(v181 + 272) * v254
                                                         + v257 * 0.0)))))))
                                                  / 100.0
                                                  + 1.0),
                                                  0));
          v252 = *(_DWORD *)(v181 + 992);
          if (v252 == -1)
            goto LABEL_355;
LABEL_440:
          if (v252 > 7)
            goto LABEL_357;
        }
        else
        {
          if (v249 > 9)
          {
            if (v249 == 10)
              v250 = sub_20EB24288((float64x2_t *)v463, (uint64_t)&v446, v413, (*(double *)v181 + *(double *)(v181 + 32)) * 0.5);
            else
              v250 = sub_20EB3A2E4(v181, (float64x2_t *)v463, &v446);
          }
          else
          {
            if (v249 != 9)
            {
              _V0.D[1] = v446.f64[1];
              _D1 = v446.f64[1];
              __asm { FMLA            D6, D1, V0.D[1] }
              v277 = sqrt(_D6);
              v278 = fabs(*(double *)&rep);
              v279 = fabs(v277);
              v280 = v278 / v279;
              if (v278 >= v279)
                v280 = v279 / v278;
              if (v280 <= 0.414213562)
              {
                v282 = 1;
                v283 = 2;
                v281 = v280;
                v182 = v445;
                if (_D6 >= 0.00000001)
                  goto LABEL_366;
              }
              else
              {
                v281 = (v279 - v278) / (v278 + v279);
                if (v278 >= v279)
                  v281 = -v281;
                v282 = -1;
                v283 = 1;
                v182 = v445;
                if (_D6 >= 0.00000001)
                {
LABEL_366:
                  if (v278 < v279)
                    v282 = -v282;
                  else
                    v283 = v280 > 0.414213562;
                  v284 = v277 == INFINITY && v278 == INFINITY;
                  v285 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v281 * v281), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v281 * v281), (float64x2_t)xmmword_210315370), v281 * v281 * (v281 * v281))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v281 * v281), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v281 * v281), (float64x2_t)xmmword_210315380), v281 * v281 * (v281 * v281))),
                             v281 * v281 * (v281 * v281) * (v281 * v281 * (v281 * v281))));
                  v286 = v281 + v281 * vdivq_f64(v285, (float64x2_t)vdupq_laneq_s64((int64x2_t)v285, 1)).f64[0];
                  if (v284)
                    v286 = 0.785398163;
                  if (v277 == 0.0 && *(double *)&rep == 0.0)
                    v288 = 0.0;
                  else
                    v288 = v286;
                  if (rep < 0)
                  {
                    v283 = 4 - v283;
                    v282 = -v282;
                  }
                  if (v277 < 0.0)
                  {
                    v283 = -v283;
                    v282 = -v282;
                  }
                  v289 = (double)v283 * 3.061617e-17 + (double)v283 * 0.785398163 + v288 * (double)v282;
                  v290 = 1.0
                       / v277
                       * (v289
                        * (v289
                         * v289
                         * (*(double *)(v181 + 168)
                          + v289
                          * v289
                          * (*(double *)(v181 + 176)
                           + v289
                           * v289
                           * (*(double *)(v181 + 184)
                            + v289
                            * v289
                            * (*(double *)(v181 + 192)
                             + v289
                             * v289
                             * (*(double *)(v181 + 200)
                              + v289 * v289 * (*(double *)(v181 + 208) + v289 * v289 * *(double *)(v181 + 216)))))))
                         + 1.0));
LABEL_453:
                  v271 = vmulq_n_f64(v446, v290);
                  v270 = *(double *)v181;
                  v272 = v271.f64[1];
LABEL_454:
                  v273 = v270 * v271.f64[0];
                  goto LABEL_459;
                }
              }
              v290 = 1.0 / *(double *)&rep;
              goto LABEL_453;
            }
            v250 = sub_20EB3641C(v181, (float64x2_t *)v463, &v446);
          }
LABEL_438:
          v181 = v436;
          v182 = v445;
          if ((v250 & 1) == 0)
            goto LABEL_230;
          v252 = *(_DWORD *)(v436 + 992);
          if (v252 != -1)
            goto LABEL_440;
LABEL_355:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v181 = v436;
          v252 = *(_DWORD *)(v436 + 992);
          v182 = v445;
          if (v252 > 7)
          {
LABEL_357:
            v270 = *(double *)v181;
            *(void **)&v271.f64[0] = v463[0];
            if (v252 <= 9)
            {
              v272 = *(double *)&v463[1];
              goto LABEL_454;
            }
            v273 = v270 * *(double *)v463;
LABEL_450:
            v330 = *(double *)(v181 + 8);
            v331 = *(double *)(v181 + 16);
            v272 = *(double *)&v463[1];
LABEL_460:
            v332 = v331 + v273 + v330 * v272;
LABEL_466:
            v440 = v332;
            goto LABEL_467;
          }
        }
        if (v252 > 3)
        {
          v328 = *(double *)v181;
          *(void **)&v329.f64[0] = v463[0];
          if (v252 > 5)
          {
            v273 = v328 * *(double *)v463;
            goto LABEL_450;
          }
          v272 = *(double *)&v463[1];
LABEL_458:
          v273 = v328 * v329.f64[0];
LABEL_459:
          v330 = *(double *)(v181 + 8);
          v331 = *(double *)(v181 + 16);
          goto LABEL_460;
        }
        if (v252 <= 1)
        {
          if (!v252)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          v272 = *(double *)&v463[1];
          v327 = *(double *)v181 * *(double *)v463 + *(double *)(v181 + 8) * *(double *)&v463[1];
LABEL_465:
          v332 = *(double *)(v181 + 16) + v327;
          goto LABEL_466;
        }
        v267 = *(float64x2_t *)v463;
        if (v252 != 2)
          goto LABEL_464;
        goto LABEL_557;
      }
LABEL_323:
      if (v249 > 3)
      {
        v182 = v445;
        if (v249 > 5)
        {
          if (v249 != 6)
          {
            v250 = sub_20EB31FFC(v181, (float64x2_t *)v463, &v446);
            goto LABEL_438;
          }
          v268 = vaddq_f64(vdivq_f64(v446, (float64x2_t)vdupq_lane_s64(rep, 0)), *(float64x2_t *)(v181 + 192));
          v269 = sqrt(vaddvq_f64(vmulq_f64(v268, v268)));
          *(float64x2_t *)v463 = vaddq_f64(*(float64x2_t *)(v181 + 208), vmulq_n_f64(v268, v269* (v269* (*(double *)(v181 + 168)+ v269 * (*(double *)(v181 + 176) + *(double *)(v181 + 184) * v269)))+ 1.0));
          v252 = *(_DWORD *)(v181 + 992);
          if (v252 != -1)
            goto LABEL_440;
        }
        else
        {
          if (v249 != 5)
          {
            _V0.D[1] = v446.f64[1];
            _D1 = v446.f64[1];
            __asm { FMLA            D6, D1, V0.D[1] }
            v294 = sqrt(_D6);
            v295 = fabs(*(double *)&rep);
            v296 = fabs(v294);
            v297 = v295 / v296;
            if (v295 >= v296)
              v297 = v296 / v295;
            if (v297 <= 0.414213562)
            {
              v299 = 1;
              v300 = 2;
              v298 = v297;
              if (_D6 >= 0.00000001)
                goto LABEL_391;
            }
            else
            {
              v298 = (v296 - v295) / (v295 + v296);
              if (v295 >= v296)
                v298 = -v298;
              v299 = -1;
              v300 = 1;
              if (_D6 >= 0.00000001)
              {
LABEL_391:
                if (v295 < v296)
                  v299 = -v299;
                else
                  v300 = v297 > 0.414213562;
                v301 = v294 == INFINITY && v295 == INFINITY;
                v302 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v298 * v298), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v298 * v298), (float64x2_t)xmmword_210315370), v298 * v298 * (v298 * v298))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v298 * v298), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v298 * v298), (float64x2_t)xmmword_210315380), v298 * v298 * (v298 * v298))),
                           v298 * v298 * (v298 * v298) * (v298 * v298 * (v298 * v298))));
                v303 = v298 + v298 * vdivq_f64(v302, (float64x2_t)vdupq_laneq_s64((int64x2_t)v302, 1)).f64[0];
                if (v301)
                  v303 = 0.785398163;
                if (v294 == 0.0 && *(double *)&rep == 0.0)
                  v305 = 0.0;
                else
                  v305 = v303;
                if (rep < 0)
                {
                  v300 = 4 - v300;
                  v299 = -v299;
                }
                if (v294 < 0.0)
                {
                  v300 = -v300;
                  v299 = -v299;
                }
                v306 = (double)v300 * 3.061617e-17 + (double)v300 * 0.785398163 + v305 * (double)v299;
                v307 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v436 + 168), *(int64x2_t *)(v436 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v436 + 168), *(int64x2_t *)(v436 + 184)), v306 * v306)), v306 * v306);
                v308 = 1.0 / v294 * (v306 + v306 * (v307.f64[0] + vmuld_lane_f64(v306 * v306 * (v306 * v306), v307, 1)));
                goto LABEL_457;
              }
            }
            v308 = 1.0 / *(double *)&rep;
LABEL_457:
            v329 = vmulq_n_f64(v446, v308);
            v328 = *(double *)v181;
            v272 = v329.f64[1];
            goto LABEL_458;
          }
          v258 = v446.f64[0] * v446.f64[0] + v446.f64[1] * v446.f64[1];
          if (v258 < 0.00000001)
          {
            if (*(double *)&rep == 0.0)
              goto LABEL_230;
            v411 = 1.0 / *(double *)&rep;
          }
          else
          {
            v259 = sqrt(v258);
            if (v259 <= *(double *)&rep)
            {
              v410 = v259 / *(double *)&rep * 0.785398163
                   - v259
                   / *(double *)&rep
                   * (v259 / *(double *)&rep + -1.0)
                   * (v259 / *(double *)&rep * 0.0663008339 + 0.244711287);
            }
            else
            {
              if (v259 <= -*(double *)&rep)
              {
                v261 = v259 / *(double *)&rep * 0.785398163
                     - v259
                     / *(double *)&rep
                     * (-1.0 - v259 / *(double *)&rep)
                     * (v259 / *(double *)&rep * -0.0663008339 + 0.244711287);
                v262 = 3.14159265;
              }
              else
              {
                v260 = fabs(*(double *)&rep / v259);
                v261 = *(double *)&rep / v259 * (v260 + -1.0) * (v260 * 0.0663008339 + 0.244711287)
                     + *(double *)&rep / v259 * -0.785398163;
                v262 = 1.57079633;
              }
              v410 = v261 + v262;
            }
            v412 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v436 + 168), *(int64x2_t *)(v436 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v436 + 168), *(int64x2_t *)(v436 + 184)), v410 * v410)), v410 * v410);
            v411 = (v410 + v410 * (v412.f64[0] + vmuld_lane_f64(v410 * v410 * (v410 * v410), v412, 1))) / v259;
          }
          *(double *)v463 = v446.f64[0] * v411;
          *(double *)&v463[1] = v446.f64[1] * v411;
          v252 = *(_DWORD *)(v181 + 992);
          if (v252 != -1)
            goto LABEL_440;
        }
        goto LABEL_355;
      }
      v182 = v445;
      if (v249 <= 1)
      {
        if (!v249)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        if (*(double *)&rep < 0.00000001)
        {
LABEL_230:
          v180 = v419;
          goto LABEL_231;
        }
        *(float64x2_t *)v463 = vmulq_n_f64(v446, 1.0 / *(double *)&rep);
        v252 = *(_DWORD *)(v181 + 992);
        if (v252 != -1)
          goto LABEL_440;
        goto LABEL_355;
      }
      if (v249 != 2)
      {
        _V0.D[1] = v446.f64[1];
        _D1 = v446.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v312 = sqrt(_D6);
        v313 = fabs(*(double *)&rep);
        v314 = fabs(v312);
        v315 = v313 / v314;
        if (v313 >= v314)
          v315 = v314 / v313;
        if (v315 <= 0.414213562)
        {
          v317 = 1;
          v318 = 2;
          v316 = v315;
          if (_D6 >= 0.00000001)
            goto LABEL_417;
        }
        else
        {
          v316 = (v314 - v313) / (v313 + v314);
          if (v313 >= v314)
            v316 = -v316;
          v317 = -1;
          v318 = 1;
          if (_D6 >= 0.00000001)
          {
LABEL_417:
            if (v313 < v314)
              v317 = -v317;
            else
              v318 = v315 > 0.414213562;
            v319 = v312 == INFINITY && v313 == INFINITY;
            v320 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v316 * v316), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v316 * v316), (float64x2_t)xmmword_210315370), v316 * v316 * (v316 * v316))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v316 * v316), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v316 * v316), (float64x2_t)xmmword_210315380), v316 * v316 * (v316 * v316))),
                       v316 * v316 * (v316 * v316) * (v316 * v316 * (v316 * v316))));
            v321 = v316 + v316 * vdivq_f64(v320, (float64x2_t)vdupq_laneq_s64((int64x2_t)v320, 1)).f64[0];
            if (v319)
              v321 = 0.785398163;
            if (v312 == 0.0 && *(double *)&rep == 0.0)
              v323 = 0.0;
            else
              v323 = v321;
            if (rep < 0)
            {
              v318 = 4 - v318;
              v317 = -v317;
            }
            if (v312 < 0.0)
            {
              v318 = -v318;
              v317 = -v317;
            }
            v324 = (double)v318 * 3.061617e-17 + (double)v318 * 0.785398163 + v323 * (double)v317;
            v325 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v436 + 168), *(int64x2_t *)(v436 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v436 + 168), *(int64x2_t *)(v436 + 184)), v324 * v324)), v324 * v324);
            v326 = 1.0 / v312 * (v324 + v324 * (v325.f64[0] + vmuld_lane_f64(v324 * v324 * (v324 * v324), v325, 1)));
LABEL_463:
            v267 = vmulq_n_f64(v446, v326);
LABEL_464:
            v272 = v267.f64[1];
            v327 = *(double *)v181 * v267.f64[0] + vmuld_lane_f64(*(double *)(v181 + 8), v267, 1);
            goto LABEL_465;
          }
        }
        v326 = 1.0 / *(double *)&rep;
        goto LABEL_463;
      }
      if (*(_DWORD *)(v181 + 212))
      {
        if (*(double *)&rep < 0.00000001)
          goto LABEL_230;
        _Q2 = vmulq_n_f64(v446, 1.0 / *(double *)&rep);
        _D0 = vmuld_lane_f64(1.0 / *(double *)&rep, v446, 1);
        __asm { FMLA            D1, D0, V2.D[1] }
        v266 = *(float64x2_t *)(v181 + 192);
        v267 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8((int8x16_t)v266, (int8x16_t)v266, 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(v266, v266), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v181 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v181 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v181 + 184) * *(double *)&_D1))));
        v463[0] = *(void **)&v267.f64[0];
      }
      else
      {
        if (*(double *)&rep < 0.00000001)
          goto LABEL_230;
        _Q2 = vmulq_n_f64(v446, 1.0 / *(double *)&rep);
        _D0 = vmuld_lane_f64(1.0 / *(double *)&rep, v446, 1);
        __asm { FMLA            D1, D0, V2.D[1] }
        v267 = vmulq_n_f64(_Q2, *(double *)(v181 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v181 + 176) + *(double *)(v181 + 184) * _D1));
      }
LABEL_557:
      v440 = *(double *)(v181 + 16) + vaddvq_f64(vmulq_f64(*(float64x2_t *)v181, v267));
      v272 = v267.f64[1];
LABEL_467:
      v333 = v272 * *(double *)(v181 + 32) + *(double *)(v181 + 40);
      _V1.D[1] = v446.f64[1];
      _D3 = v446.f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      v337 = _D2 + *(double *)&rep * *(double *)&rep;
      v415 = v337 < v193;
      v338 = *((_DWORD *)v202 + 3);
      if (v337 < v193)
        ++v338;
      *((_DWORD *)v202 + 3) = v338;
      v339 = v333 - v31 + -1.0;
      v340 = *(_QWORD *)(v182 + 288);
      v341 = (*(_QWORD *)(v182 + 296) - v340) >> 2;
      if (v339 >= 0.0)
      {
        if (v341 <= (unint64_t)v339)
        {
          v342 = -1431655765 * ((*(_QWORD *)(v182 + 272) - *(_QWORD *)(v182 + 264)) >> 3);
          v343 = v31 + v333;
          if (v31 + v333 < 0.0)
          {
LABEL_471:
            v344 = 0;
            goto LABEL_479;
          }
        }
        else
        {
          v342 = *(_DWORD *)(v340 + 4 * (unint64_t)v339);
          v343 = v31 + v333;
          if (v31 + v333 < 0.0)
            goto LABEL_471;
        }
      }
      else
      {
        v342 = 0;
        v343 = v31 + v333;
        if (v31 + v333 < 0.0)
          goto LABEL_471;
      }
      if (v341 <= (unint64_t)v343)
        v344 = -1431655765 * ((*(_QWORD *)(v182 + 272) - *(_QWORD *)(v182 + 264)) >> 3);
      else
        v344 = *(_DWORD *)(v340 + 4 * (unint64_t)v343);
LABEL_479:
      v345 = *(void **)(v182 + 312);
      *(_QWORD *)(v182 + 320) = v345;
      v346 = v344 - v342;
      if (v346 > (uint64_t)(*(_QWORD *)(v182 + 328) - (_QWORD)v345) >> 2)
      {
        v414 = v333;
        v347 = (char *)operator new(4 * v346);
        v182 = v445;
        *(_QWORD *)(v445 + 312) = v347;
        *(_QWORD *)(v445 + 320) = v347;
        *(_QWORD *)(v445 + 328) = &v347[4 * v346];
        v333 = v414;
        if (v345)
        {
          operator delete(v345);
          v333 = v414;
        }
      }
      v348.f64[0] = v440;
      v348.f64[1] = v333;
      v441 = v348;
      if (v344 > v342)
      {
        v349 = v342;
        while (2)
        {
          v351 = *(_QWORD *)(v182 + 264);
          _D2 = vsubq_f64(*(float64x2_t *)(v351 + 24 * v349), v441).f64[1];
          __asm { FMLA            D1, D2, V0.D[1] }
          if (_D1 > v31 * v31)
            goto LABEL_486;
          v354 = *(_DWORD *)(v351 + 24 * v349 + 16);
          v355 = v182;
          v356 = *(unsigned int **)(v182 + 320);
          v357 = *(_QWORD *)(v355 + 328);
          if ((unint64_t)v356 >= v357)
          {
            v358 = *v420;
            v359 = (char *)v356 - (char *)*v420;
            v360 = v359 >> 2;
            v361 = (v359 >> 2) + 1;
            if (v361 >> 62)
              sub_20E867F44();
            v362 = v357 - (_QWORD)v358;
            if (v362 >> 1 > v361)
              v361 = v362 >> 1;
            if ((unint64_t)v362 >= 0x7FFFFFFFFFFFFFFCLL)
              v363 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v363 = v361;
            if (v363)
            {
              if (v363 >> 62)
                sub_20E877A38();
              v364 = operator new(4 * v363);
              v365 = (unsigned int *)&v364[4 * v360];
              *v365 = v354;
              v350 = (uint64_t)(v365 + 1);
              v366 = (char *)v356 - (char *)v358;
              if (v356 == v358)
              {
LABEL_506:
                v182 = v445;
                *(_QWORD *)(v445 + 312) = v365;
                *(_QWORD *)(v445 + 320) = v350;
                *(_QWORD *)(v445 + 328) = &v364[4 * v363];
                if (v358)
                  operator delete(v358);
LABEL_485:
                *(_QWORD *)(v182 + 320) = v350;
                v160 = a13;
LABEL_486:
                if (++v349 == v344)
                  goto LABEL_508;
                continue;
              }
            }
            else
            {
              v364 = 0;
              v365 = (unsigned int *)(4 * v360);
              *(_DWORD *)(4 * v360) = v354;
              v350 = 4 * v360 + 4;
              v366 = (char *)v356 - (char *)v358;
              if (v356 == v358)
                goto LABEL_506;
            }
            v367 = v366 - 4;
            if (v367 < 0x2C)
              goto LABEL_596;
            if ((unint64_t)((char *)v356 - v364 - v359) < 0x20)
              goto LABEL_596;
            v368 = (v367 >> 2) + 1;
            v369 = 4 * (v368 & 0x7FFFFFFFFFFFFFF8);
            v370 = &v356[v369 / 0xFFFFFFFFFFFFFFFCLL];
            v365 = (unsigned int *)((char *)v365 - v369);
            v371 = &v364[4 * v360 - 16];
            v372 = v356 - 4;
            v373 = v368 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v374 = *(_OWORD *)v372;
              *(v371 - 1) = *((_OWORD *)v372 - 1);
              *v371 = v374;
              v371 -= 2;
              v372 -= 8;
              v373 -= 8;
            }
            while (v373);
            v356 = v370;
            if (v368 != (v368 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_596:
              do
              {
                v375 = *--v356;
                *--v365 = v375;
              }
              while (v356 != v358);
            }
            goto LABEL_506;
          }
          break;
        }
        *v356 = v354;
        v350 = (uint64_t)(v356 + 1);
        v182 = v445;
        goto LABEL_485;
      }
LABEL_508:
      v376 = sub_20F2DF21C(*v419, a3, (uint64_t)a5, v420, *(_DWORD *)(v182 + 100), *(double *)(v182 + 32));
      v181 = v436;
      v182 = v445;
      v180 = v419;
      if ((v376 & 0xFF00000000) != 0)
      {
        *((_DWORD *)v202 + 4) += v415;
        v377 = *(_QWORD *)(v445 + 336);
        v378 = *(_DWORD *)(v377 + 4 * v376);
        if (v378 < *(_DWORD *)(v445 + 112))
        {
          *(_DWORD *)(v377 + 4 * v376) = v378 + 1;
          *((_DWORD *)v202 + 5) += v415;
          *(_OWORD *)&v476[8] = *(_OWORD *)(*v419 + 24);
          v379 = a5[9] + 40 * v376;
          *(_QWORD *)v476 = &off_24C9E9850;
          *(_QWORD *)&v477 = v379;
          if (*(_BYTE *)(*v419 + 192))
            v380 = *v419 + 40;
          else
            v380 = 0;
          *((_QWORD *)&v477 + 1) = v380;
          v381 = (char *)v160[1];
          if (v381 >= v160[2])
          {
            v383 = sub_20EDCA1E0(v160, (uint64_t)v476);
            v382 = v436;
          }
          else
          {
            v382 = v436;
            *(_QWORD *)v381 = &off_24CA18630;
            *(_OWORD *)(v381 + 8) = *(_OWORD *)&v476[8];
            *(_QWORD *)v381 = &off_24C9E9850;
            *(_OWORD *)(v381 + 24) = v477;
            v383 = v381 + 40;
          }
          v160[1] = v383;
          _Q0 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(v477 + 8)), v441);
          _D1 = _Q0.f64[1];
          __asm { FMLA            D2, D1, V0.D[1] }
          v442 = _D2;
          v386 = _D2 <= v417;
          if (v337 >= v193)
            v386 = 0;
          *((_DWORD *)v202 + 6) += v386;
          v387 = *a4;
          v388 = a4[1];
          while (v387 != v388)
          {
            v389 = *(_QWORD *)(*v419 + 200);
            v390 = *(_QWORD *)(*v419 + 208);
            v391 = *v387;
            v392 = *((_DWORD *)v387 + 2);
            v393 = *((_DWORD *)v387 + 4);
            if (v390 != v389)
            {
              v394 = (v390 - v389) >> 5;
              while (1)
              {
                v395 = v394 >> 1;
                v396 = v389 + 32 * (v394 >> 1);
                v397 = *(_DWORD *)(v396 + 16);
                v398 = v397 >= v393;
                if (v397 != v393)
                  goto LABEL_529;
                if (*(_QWORD *)v396 >= v391)
                  break;
LABEL_523:
                v389 = v396 + 32;
                v395 = v394 + ~v395;
LABEL_524:
                v394 = v395;
                if (!v395)
                  goto LABEL_532;
              }
              if (*(_QWORD *)v396 != v391)
                goto LABEL_524;
              v398 = *(_DWORD *)(v396 + 8) >= v392;
LABEL_529:
              if (v398)
                goto LABEL_524;
              goto LABEL_523;
            }
LABEL_532:
            if (v389 != v390
              && *(_DWORD *)(v389 + 16) == v393
              && *(_QWORD *)v389 == v391
              && *(_DWORD *)(v389 + 8) == v392)
            {
              v399 = (uint64_t)a12[12];
              v400 = a12[13];
              if (v400 != (char *)v399)
              {
                v401 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v400[-v399] >> 3);
                while (1)
                {
                  v402 = v401 >> 1;
                  v403 = v399 + 40 * (v401 >> 1);
                  v404 = *(_DWORD *)(v403 + 16);
                  v405 = v404 >= v393;
                  if (v404 != v393)
                    goto LABEL_544;
                  if (*(_QWORD *)v403 >= v391)
                    break;
LABEL_538:
                  v399 = v403 + 40;
                  v402 = v401 + ~v402;
LABEL_539:
                  v401 = v402;
                  if (!v402)
                    goto LABEL_547;
                }
                if (*(_QWORD *)v403 != v391)
                  goto LABEL_539;
                v405 = *(_DWORD *)(v403 + 8) >= v392;
LABEL_544:
                if (v405)
                  goto LABEL_539;
                goto LABEL_538;
              }
LABEL_547:
              if ((char *)v399 == v400
                || *(_DWORD *)(v399 + 16) != v393
                || *(_QWORD *)v399 != v391
                || *(_DWORD *)(v399 + 8) != v392)
              {
                v465 = 0;
                v466 = 0;
                v406 = *(_OWORD *)v387;
                v464 = v387[2];
                *(_OWORD *)v463 = v406;
                v399 = sub_20EB0F704(a12 + 12, v399, (uint64_t)v463);
              }
              ++*(_DWORD *)(v399 + 28);
              ++*(_DWORD *)(v399 + 36);
              if (v442 <= v417)
              {
                ++*(_DWORD *)(v399 + 32);
                ++*(_DWORD *)(v399 + 24);
              }
            }
            v387 += 3;
          }
          v181 = v382;
        }
      }
LABEL_231:
      if (++v180 == v435)
        return;
    }
    v463[1] = 0;
    v463[0] = 0;
    v208 = v199;
    LODWORD(v464) = 0;
    do
    {
      v209 = v201 >> 1;
      v210 = &v208[32 * (v201 >> 1)];
      v212 = *(_QWORD *)v210;
      v211 = v210 + 32;
      v201 += ~(v201 >> 1);
      if (v212 < v197)
        v208 = v211;
      else
        v201 = v209;
    }
    while (v201);
    if ((char *)v198 != v208 && *(_QWORD *)v208 == v197)
    {
      v202 = (char *)v198;
LABEL_289:
      v196 = *v180;
      goto LABEL_290;
    }
LABEL_251:
    v213 = v208 - v199;
    v214 = (v208 - v199) >> 5;
    v202 = &v199[(v208 - v199) & 0xFFFFFFFFFFFFFFE0];
    v215 = (unint64_t)a12[17];
    if (v198 < v215)
    {
      if (v202 == (char *)v198)
      {
        *(_QWORD *)v198 = v197;
        *(void **)&_Q0.f64[1] = v463[1];
        *(_OWORD *)(v198 + 8) = *(_OWORD *)v463;
        *(_DWORD *)(v198 + 24) = v464;
        a12[16] = (char *)(v198 + 32);
        v202 = (char *)v198;
      }
      else
      {
        v216 = v198 - 32;
        v217 = (char *)v198;
        v218 = (__int128 *)(v198 - 32);
        if (v198 >= 0x20)
        {
          do
          {
            v219 = *v218;
            v220 = v218[1];
            v218 += 2;
            *(_OWORD *)v217 = v219;
            *((_OWORD *)v217 + 1) = v220;
            v217 += 32;
          }
          while ((unint64_t)v218 < v198);
        }
        a12[16] = v217;
        if ((char *)v198 != v202 + 32)
        {
          v221 = 32 * ((uint64_t)(v198 - (_QWORD)(v202 + 32)) >> 5);
          do
          {
            *(_QWORD *)v216 = *(_QWORD *)&v202[v221 - 32];
            v222 = *(_OWORD *)&v202[v221 - 24];
            *(_DWORD *)(v216 + 24) = *(_DWORD *)&v202[v221 - 8];
            *(_OWORD *)(v216 + 8) = v222;
            v216 -= 32;
            v221 -= 32;
          }
          while (v221);
        }
        *(_QWORD *)v202 = v197;
        v223 = &v199[32 * v214];
        *(void **)&_Q0.f64[1] = v463[1];
        *(_OWORD *)(v223 + 8) = *(_OWORD *)v463;
        *((_DWORD *)v223 + 6) = v464;
      }
      goto LABEL_289;
    }
    v224 = (v200 >> 5) + 1;
    if (v224 >> 59)
      sub_20E867F44();
    v225 = v215 - (_QWORD)v199;
    v226 = (uint64_t)(v215 - (_QWORD)v199) >> 4;
    if (v226 > v224)
      v224 = v226;
    if (v225 >= 0x7FFFFFFFFFFFFFE0)
      v227 = 0x7FFFFFFFFFFFFFFLL;
    else
      v227 = v224;
    if (v227)
    {
      if (v227 >> 59)
        sub_20E877A38();
      v228 = (char *)operator new(32 * v227);
      v229 = &v228[32 * v214];
      v230 = &v228[32 * v227];
      if (v214 != v227)
        goto LABEL_281;
    }
    else
    {
      v228 = 0;
      v229 = (char *)(32 * v214);
      v230 = 0;
      if (v214)
      {
LABEL_281:
        *(_QWORD *)v229 = v197;
        v233 = v464;
        *(void **)&_Q0.f64[1] = v463[1];
        *(_OWORD *)(v229 + 8) = *(_OWORD *)v463;
        *((_DWORD *)v229 + 6) = v233;
        v234 = v229;
        v182 = v445;
        if (v199 != v202)
        {
          v235 = v202;
          v236 = (float64x2_t *)v229;
          do
          {
            v234 = (char *)&v236[-2];
            _Q0 = *((float64x2_t *)v235 - 2);
            v237 = *((float64x2_t *)v235 - 1);
            v236[-2] = _Q0;
            v236[-1] = v237;
            v235 -= 32;
            v236 -= 2;
          }
          while (v235 != v199);
        }
        v238 = (float64x2_t *)(v229 + 32);
        for (k = a12[16]; v202 != k; v238 += 2)
        {
          _Q0 = *(float64x2_t *)v202;
          v240 = *((float64x2_t *)v202 + 1);
          v202 += 32;
          *v238 = _Q0;
          v238[1] = v240;
        }
        v241 = a12[15];
        a12[15] = v234;
        a12[16] = (char *)v238;
        a12[17] = v230;
        if (v241)
          operator delete(v241);
        v202 = v229;
        v160 = a13;
        v181 = v436;
        goto LABEL_289;
      }
    }
    if (v213 < 1)
    {
      if (v208 == v199)
        v232 = 1;
      else
        v232 = v213 >> 4;
      if (v232 >> 59)
        sub_20E877A38();
      v229 = (char *)operator new(32 * v232);
      v230 = &v229[32 * v232];
      if (v228)
      {
        operator delete(v228);
        v230 = &v229[32 * v232];
        v199 = a12[15];
      }
    }
    else
    {
      v231 = v214 + 2;
      if (v214 >= -1)
        v231 = v214 + 1;
      v229 -= 32 * (v231 >> 1);
    }
    goto LABEL_281;
  }
}

void sub_20F3B894C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  uint64_t v72;

  if (*(_BYTE *)(v72 - 232) && *(char *)(v72 - 233) < 0)
    operator delete(*(void **)(v72 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a57);
  if (a72 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&STACK[0x230]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&STACK[0x230]);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F3B8B10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  void (*v39)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char __dst[21];
  char v51;
  uint64_t v52[4];
  uint64_t v53[4];
  __int128 v54[2];
  void *__p;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  __p = operator new(0x28uLL);
  v56 = xmmword_2102DCA10;
  strcpy((char *)__p, "SlamRelocalizationConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v56) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "SlamRelocalizationConfig.perform_epipolar_based_match_verification", v4, "Perform match verification based on epipolar geometry within a RANSAC framework");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA1CB0((unint64_t *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "SlamRelocalizationConfig.min_num_inliers_epipolar_check", v5, "Minimum nNmber of inliers required for the 5-Pnt feature matching algorithm");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "SlamRelocalizationConfig.use_3pt_geometric_model", v6, "Use 3pt algorithm for geometric verification. ");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EF4E784((float *)(a1 + 20));
  sub_20E8B2F9C((uint64_t *)&__p, "SlamRelocalizationConfig.inlier_ratio_for_2d_2d_feature_matching", v7, "Inlier ratio for 2D-2D matching of keyframes with the query frame");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA1CB0((unint64_t *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "SlamRelocalizationConfig.max_keyframe_feature_matching_surjection", v8, "Maximum N for 1-to-N map keyframe matching");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "SlamRelocalizationConfig.min_time_difference_between_query_and_map_frames", v9, "Minimum time different between query frame and map frame to allow use of the map frame");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EAA1CB0((unint64_t *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "num_map_keyframes_for_relocalization_when_lost", v10, "Number of map keyframes selected for relocalization in lost state");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EAA14D8((_BYTE *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "SlamRelocalizationConfig.enable_multi_submap_relocalization", v11, "Allow a single image to be used for relocalization against multiple submaps");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EF4E784((float *)(a1 + 52));
  sub_20E8B2F9C((uint64_t *)&__p, "SlamRelocalizationConfig.timestamp_of_first_frame_for_relocalization", v12, "Timestamp of the first frame to start relocalization");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EAA14D8((_BYTE *)(a1 + 76));
  sub_20E8B2F9C((uint64_t *)&__p, "use_gravity_alignment_in_global_relocalization", v13, "Whether to use P2P for Global-relocalization. Otherwise, use P3P.");
  v51 = 10;
  strcpy(__dst, "sequential");
  BYTE7(v54[1]) = 6;
  strcpy((char *)v54, "random");
  HIBYTE(v53[2]) = 20;
  strcpy((char *)v53, "image_retrieval_vlad");
  HIBYTE(v52[2]) = 19;
  strcpy((char *)v52, "image_retrieval_bow");
  snprintf((char *)&__p, 0x100uLL, "Option to swtich between keyframe sampling methods: [%s, %s, %s, %s]", __dst, (const char *)v54, (const char *)v53, (const char *)v52);
  if (SHIBYTE(v52[2]) < 0)
  {
    operator delete((void *)v52[0]);
    if ((SHIBYTE(v53[2]) & 0x80000000) == 0)
    {
LABEL_5:
      if ((SBYTE7(v54[1]) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_24:
      operator delete(*(void **)&v54[0]);
      if ((v51 & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v53[2]) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete((void *)v53[0]);
  if (SBYTE7(v54[1]) < 0)
    goto LABEL_24;
LABEL_6:
  if ((v51 & 0x80000000) == 0)
    goto LABEL_7;
LABEL_25:
  operator delete(*(void **)__dst);
LABEL_7:
  *(_QWORD *)__dst = nullsub_1(a2);
  v14 = sub_20EB8894C(a1 + 96);
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.keyframe_sampling_method", v14, (char *)&__p);
  v51 = 20;
  strcpy(__dst, "individual_keyframes");
  BYTE7(v54[1]) = 19;
  strcpy((char *)v54, "covisible_keyframes");
  snprintf((char *)&__p, 0x100uLL, "Option to swtich between keyframe matching methods: [%s, %s]", __dst, (const char *)v54);
  if (SBYTE7(v54[1]) < 0)
  {
    operator delete(*(void **)&v54[0]);
    if ((v51 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v51 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)__dst);
LABEL_9:
  *(_QWORD *)__dst = nullsub_1(a2);
  v15 = sub_20EB8894C(a1 + 120);
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.keyframe_matching_method", v15, (char *)&__p);
  *(_QWORD *)__dst = nullsub_1(a2);
  v16 = sub_20EB8894C(a1 + 168);
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.vlad_model_path", v16, "VLAD model path");
  *(_QWORD *)__dst = nullsub_1(a2);
  v17 = sub_20EB8894C(a1 + 192);
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.pca_model_path", v17, "PCA model path");
  *(_QWORD *)__dst = nullsub_1(a2);
  v18 = sub_20EAA14D8((_BYTE *)(a1 + 216));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.use_fixed_point_compression", v18, "Use the optimized fixed-point implementation for VLAD compression. ");
  *(_QWORD *)__dst = nullsub_1(a2);
  v19 = sub_20EAA14D8((_BYTE *)(a1 + 217));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.use_ml_vlad", v19, "Use ML Features for VLAD image retrieval. ");
  *(_QWORD *)__dst = nullsub_1(a2);
  v20 = sub_20EAA14D8((_BYTE *)(a1 + 218));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.restrict_relocalization_to_primary_camera", v20, "Restricts relocalization to a single camera, though this camera may have multiple streams.");
  *(_QWORD *)__dst = nullsub_1(a2);
  v21 = sub_20EB8894C(a1 + 224);
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.ml_vlad_model_path", v21, "VLAD model path for ML features");
  *(_QWORD *)__dst = nullsub_1(a2);
  v22 = sub_20EB8894C(a1 + 248);
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.ml_pca_model_path", v22, "PCA model path for Ml features");
  *(_QWORD *)__dst = nullsub_1(a2);
  v23 = sub_20EB8894C(a1 + 144);
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.bow_model_path", v23, "BOW model path");
  *(_QWORD *)__dst = nullsub_1(a2);
  v24 = sub_20EB8894C(a1 + 272);
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.dir_to_save_stats", v24, "Output folder name to save the stats");
  *(_QWORD *)__dst = nullsub_1(a2);
  v25 = sub_20EAA14D8((_BYTE *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.save_reloc_eval_stats", v25, "Save the  evaluation results of relocalization into disc");
  *(_QWORD *)__dst = nullsub_1(a2);
  v26 = sub_20EF4E784((float *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.pnp_angle_error_bound_in_degrees", v26, "Yaw angle error bound in degrees");
  *(_QWORD *)__dst = nullsub_1(a2);
  v27 = sub_20EF4E784((float *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.nearest_neighbour_ratio", v27, "Nearest neighbour ratio threshold for feature matching");
  *(_QWORD *)__dst = nullsub_1(a2);
  v28 = sub_20EAA14D8((_BYTE *)(a1 + 68));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.enable_pnp_angle_error_bound_enforcement", v28, "Enforce error bound on estimated yaw angle during relocalization");
  *(_QWORD *)__dst = nullsub_1(a2);
  v29 = sub_20EAA14D8((_BYTE *)(a1 + 296));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.enable_multi_frame_pose_refinement", v29, "Enable the use of multiple frames for refining successful relocalizations");
  sub_20F3AFDB8((char **)(a1 + 304), __dst);
  sub_20E8B32F0(a2, (uint64_t)__dst);
  sub_20E869298((uint64_t)__dst);
  *(_QWORD *)__dst = nullsub_1(a2);
  v30 = sub_20EAA14D8((_BYTE *)(a1 + 297));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.use_reloc_index_exhaustive", v30, "Use reloc feature index instead of standard feature index for matching");
  *(_QWORD *)__dst = nullsub_1(a2);
  v31 = sub_20EAA14D8((_BYTE *)(a1 + 584));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.enable_reloc_verification_check", v31, "Enable a check of successful relocalizations to determine if the returned pose is unique");
  *(_QWORD *)__dst = nullsub_1(a2);
  v32 = sub_20EA9DCF0((unsigned int *)(a1 + 588));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.number_of_verification_test_frames", v32, "The number of frames to retrieve with image retrieval for verifying relocalization is unique");
  *(_QWORD *)__dst = nullsub_1(a2);
  v33 = sub_20EA9DB90((double *)(a1 + 592));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.verification_error_pos_thresh_m", v33, "Position error threshold for checking if returned relocalization results are consistent");
  *(_QWORD *)__dst = nullsub_1(a2);
  v34 = sub_20EA9DB90((double *)(a1 + 600));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.verification_error_rot_thresh_rad", v34, "Rotation error threshold for checking if returned relocalization results are consistent");
  *(_QWORD *)__dst = nullsub_1(a2);
  v35 = sub_20EA9DB90((double *)(a1 + 608));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.verification_point_exclusion_threshold", v35, "Threshold to exclude points close to already used points in reloc.");
  *(_QWORD *)&v54[0] = operator new(0x28uLL);
  *(__int128 *)((char *)v54 + 8) = xmmword_2102DC910;
  strcpy(*(char **)&v54[0], "RelocVerificationPnPConfig parameters");
  sub_20E8B30B4(__dst, v54, 80, 40);
  if (SBYTE7(v54[1]) < 0)
    operator delete(*(void **)&v54[0]);
  v53[0] = nullsub_1(__dst);
  v36 = operator new();
  *(_QWORD *)(v36 + 120) = 0;
  *(_QWORD *)v36 = &off_24C9C2F58;
  *(_QWORD *)(v36 + 8) = &unk_24C9C2FC8;
  *(_QWORD *)(v36 + 109) = 0;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(_OWORD *)(v36 + 64) = 0u;
  *(_OWORD *)(v36 + 80) = 0u;
  *(_OWORD *)(v36 + 96) = 0u;
  *(_BYTE *)(v36 + 114) = 1;
  *(_QWORD *)&v54[0] = (char *)off_24C9FF570 + 1;
  *((_QWORD *)&v54[0] + 1) = a1 + 616;
  sub_20EAA459C((uint64_t *)(v36 + 120), (uint64_t *)v54);
  sub_20E8B2F9C(v53, "RelocVerificationPnPConfig.min_num_pnp_inlier_map_matches", v36, "Vector of minimum number of pnp inlier of matches for state correction. Each number has a corresponding min_pnp_inlier_ratio");
  if (*(_QWORD *)&v54[0])
  {
    if ((v54[0] & 1) == 0)
    {
      v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v54[0] & 0xFFFFFFFFFFFFFFFELL);
      if (v37)
        v37((char *)v54 + 8, (char *)v54 + 8, 2);
    }
    *(_QWORD *)&v54[0] = 0;
  }
  v52[0] = nullsub_1(__dst);
  v38 = operator new();
  *(_QWORD *)v38 = &off_24C9C2F58;
  *(_QWORD *)(v38 + 8) = &unk_24C9C2FC8;
  *(_QWORD *)(v38 + 120) = 0;
  *(_QWORD *)(v38 + 109) = 0;
  *(_OWORD *)(v38 + 16) = 0u;
  *(_OWORD *)(v38 + 32) = 0u;
  *(_OWORD *)(v38 + 48) = 0u;
  *(_OWORD *)(v38 + 64) = 0u;
  *(_OWORD *)(v38 + 80) = 0u;
  *(_OWORD *)(v38 + 96) = 0u;
  *(_BYTE *)(v38 + 114) = 1;
  v53[0] = (uint64_t)off_24C9FF590 + 1;
  v53[1] = a1 + 616;
  sub_20EAA459C((uint64_t *)(v38 + 120), v53);
  sub_20E8B2F9C(v52, "RelocVerificationPnPConfig.min_pnp_inlier_ratio", v38, "Vector of minimum portion of pnp inliers of matches for state correction. Each number has a corresponding min_num_pnp_inlier_map_matches");
  if (v53[0])
  {
    if ((v53[0] & 1) == 0)
    {
      v39 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v53[0] & 0xFFFFFFFFFFFFFFFELL);
      if (v39)
        v39(&v53[1], &v53[1], 2);
    }
    v53[0] = 0;
  }
  v52[0] = nullsub_1(__dst);
  v40 = sub_20EAA1CB0((unint64_t *)(a1 + 616));
  sub_20E8B2F9C(v52, "RelocVerificationPnPConfig.pnp_reprojection_error_bound_in_pixels", v40, "pnp parameter: reprojection error bound (in pixels) for ransac inlier counting.");
  v52[0] = nullsub_1(__dst);
  v41 = sub_20EAA1CB0((unint64_t *)(a1 + 640));
  sub_20E8B2F9C(v52, "RelocVerificationPnPConfig.pnp_max_num_hypotheses", v41, "pnp parameter: maximum num. hypotheses for pnp ransac.");
  v52[0] = nullsub_1(__dst);
  v42 = sub_20EAA1CB0((unint64_t *)(a1 + 648));
  sub_20E8B2F9C(v52, "RelocVerificationPnPConfig.pnp_max_trials", v42, "pnp parameter: maximum num. iterations for pnp ransac.");
  v52[0] = nullsub_1(__dst);
  v43 = sub_20EAA1CB0((unint64_t *)(a1 + 656));
  sub_20E8B2F9C(v52, "RelocVerificationPnPConfig.pnp_chunk_size", v43, "pnp parameter: chunk size for preemptive pnp ransac.");
  v52[0] = nullsub_1(__dst);
  v44 = sub_20EAA14D8((_BYTE *)(a1 + 761));
  sub_20E8B2F9C(v52, "RelocVerificationPnPConfig.enable_pnp_pose_refinement", v44, "Perform pose refinement after preemtive ransac");
  sub_20E8B32F0(a2, (uint64_t)__dst);
  sub_20E869298((uint64_t)__dst);
  *(_QWORD *)__dst = nullsub_1(a2);
  v45 = sub_20EAA14D8((_BYTE *)(a1 + 800));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.enable_reverse_lsh_matcher", v45, "Enables the use of fast reverse LSH matching for FREAK relocalization.");
  *(_QWORD *)__dst = nullsub_1(a2);
  v46 = sub_20EA9DCF0((unsigned int *)(a1 + 804));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.reverse_lsh_pool_capacity", v46, "Number of tables to keep in BinaryLSHIndexPool.");
  sub_20FD3BCC8(a1 + 808, __dst);
  sub_20E8B32F0(a2, (uint64_t)__dst);
  sub_20E869298((uint64_t)__dst);
  *(_QWORD *)__dst = nullsub_1(a2);
  v47 = sub_20EA9DB90((double *)(a1 + 848));
  sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.minimum_scene_radius", v47, "Minimum radius of points to consider scene large enough to relocalize to.");
  *(_QWORD *)__dst = nullsub_1(a2);
  v48 = sub_20EA9DCF0((unsigned int *)(a1 + 856));
  return sub_20E8B2F9C((uint64_t *)__dst, "SlamRelocalizationConfig.min_points_for_radius_check", v48, "Minimum number of far points to require for radius check to pass.");
}

void sub_20F3B975C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F3B9950(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FF580;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio12area_mapping28GetProgramOptionsDescriptionERNS1_26RelocVerificationPnPConfigEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping28GetProgramOptionsDescriptionERNS1_26RelocVerificationPnPConfigEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

void sub_20F3B99FC(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  _OWORD *v21;
  unint64_t *v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;

  v2 = *a2;
  v3 = a2[1];
  *(_QWORD *)(*(_QWORD *)a1 + 56) = *(_QWORD *)(*(_QWORD *)a1 + 48);
  if (v2 != v3)
  {
    while (1)
    {
      v6 = *(_QWORD **)a1;
      v7 = vcvtpd_u64_f64(*v2);
      v9 = *(unint64_t **)(*(_QWORD *)a1 + 56);
      v8 = *(_QWORD *)(*(_QWORD *)a1 + 64);
      if ((unint64_t)v9 >= v8)
        break;
      *v9 = v7;
      v5 = (uint64_t)(v9 + 1);
LABEL_4:
      v6[7] = v5;
      if (++v2 == v3)
        return;
    }
    v10 = (unint64_t *)v6[6];
    v11 = v9 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20E867F44();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    v26 = v12;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v14 = operator new(8 * v12);
      v15 = (unint64_t *)&v14[8 * v11];
      *v15 = v7;
      v5 = (uint64_t)(v15 + 1);
      v16 = (char *)v9 - (char *)v10;
      if (v9 == v10)
        goto LABEL_23;
    }
    else
    {
      v14 = 0;
      v15 = (unint64_t *)(8 * v11);
      *(_QWORD *)(8 * v11) = v7;
      v5 = 8 * v11 + 8;
      v16 = (char *)v9 - (char *)v10;
      if (v9 == v10)
      {
LABEL_23:
        v6[6] = v15;
        v6[7] = v5;
        v6[8] = &v14[8 * v26];
        if (v10)
          operator delete(v10);
        goto LABEL_4;
      }
    }
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_30;
    if ((unint64_t)((char *)v10 - v14) < 0x20)
      goto LABEL_30;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v20 = &v9[v19 / 0xFFFFFFFFFFFFFFF8];
    v15 = (unint64_t *)((char *)v15 - v19);
    v21 = &v14[8 * v11 - 16];
    v22 = v9 - 2;
    v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 4;
      v23 -= 4;
    }
    while (v23);
    v9 = v20;
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v25 = *--v9;
        *--v15 = v25;
      }
      while (v9 != v10);
    }
    goto LABEL_23;
  }
}

uint64_t sub_20F3B9BC4(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FF5A0;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio12area_mapping28GetProgramOptionsDescriptionERNS1_26RelocVerificationPnPConfigEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping28GetProgramOptionsDescriptionERNS1_26RelocVerificationPnPConfigEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

char **sub_20F3B9C70(_QWORD *a1, char **a2)
{
  char **result;

  result = (char **)(*a1 + 72);
  if (result != a2)
    return (char **)sub_20E86811C(result, *a2, a2[1], (a2[1] - *a2) >> 3);
  return result;
}

uint64_t sub_20F3B9C98(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  void **v6;
  int v7;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void *v88;
  _QWORD *v89;
  float64x2_t v90;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int *v95;
  char *v96;
  unsigned int v97;
  uint64_t v98;
  float64x2_t v99;
  int8x16_t v103;
  int8x16_t v104;
  float64x2_t v107;
  int64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  int8x16_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  int64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  __int128 *v130;
  uint64_t v131;
  __int128 v132;
  int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  std::string::size_type v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  unsigned __int8 v150;
  uint64_t v151;
  uint64_t i;
  unsigned __int8 v153;
  _BYTE *v154;
  _QWORD *v155;
  uint64_t *v156;
  std::string::size_type v157;
  unsigned int v158;
  _QWORD *v159;
  std::string::size_type v160;
  std::string::size_type v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  float64x2_t *v167;
  unsigned int v168;
  unsigned int v169;
  unint64_t v170;
  unsigned int v171;
  uint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unsigned __int8 v176;
  int v177;
  _QWORD *v178;
  int v179;
  _BYTE *v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  int v184;
  std::string *v185;
  std::string::size_type size;
  char v187;
  size_t v188;
  void *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  const void **v193;
  const void *v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  void **v198;
  uint64_t v199;
  size_t v200;
  unsigned __int8 v201;
  unsigned __int8 v202;
  const char *v203;
  size_t v204;
  _BYTE *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  size_t v214;
  void *v215;
  _QWORD *v216;
  size_t v217;
  size_t v218;
  _BYTE *v219;
  void *v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  _QWORD *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *p_shared_owners;
  unint64_t v230;
  void *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  void **v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  int v272;
  float64x2_t v273;
  double v274;
  float64x2_t v275;
  float64x2_t v277;
  double v278;
  double v280;
  int8x16_t v282;
  float64x2_t v284;
  float64x2_t v285;
  double v288;
  int64x2_t v289;
  int64x2_t v290;
  float64x2_t v292;
  int8x16_t v293;
  float64x2_t v294;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  int64x2_t v300;
  int64x2_t v301;
  float64x2_t v304;
  double v305;
  float64x2_t v307;
  int8x16_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  int8x16_t v319;
  float64x2_t v320;
  int8x16_t v321;
  int8x16_t v322;
  double v323;
  double v324;
  double v325;
  float64x2_t v326;
  int8x16_t v327;
  int64x2_t v328;
  int64x2_t v329;
  int8x16_t v330;
  float64x2_t v331;
  int8x16_t v332;
  float64x2_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  float64x2_t v337;
  unint64_t v338;
  unint64_t v339;
  BOOL v340;
  float64x2_t v341;
  float64x2_t v342;
  int8x16_t v343;
  int64x2_t v344;
  int64x2_t v345;
  int8x16_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  char *v364;
  float64x2_t *v365;
  char *v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  char *v371;
  unint64_t v372;
  char *v373;
  unint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  char *v377;
  unsigned int v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  double v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  int8x16_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  int8x16_t v459;
  int8x16_t v460;
  int8x16_t v461;
  int8x16_t v462;
  int8x16_t v463;
  int8x16_t v464;
  float64x2_t v465;
  double v466;
  int8x16_t v467;
  int8x16_t v468;
  float64x2_t v469;
  float64x2_t v470;
  int8x16_t v471;
  int8x16_t v472;
  int8x16_t v473;
  int8x16_t v474;
  int8x16_t v475;
  int8x16_t v476;
  float64x2_t v477;
  float64x2_t v478;
  int8x16_t v479;
  int8x16_t v480;
  int8x16_t v481;
  float64x2_t v482;
  char v483;
  char *v484;
  char *v485;
  int64_t v486;
  unint64_t v487;
  char *v488;
  unint64_t v489;
  unsigned int v490;
  unint64_t v491;
  char *v492;
  char *v493;
  unsigned int v494;
  uint64_t v495;
  unint64_t v496;
  char *v497;
  char *v498;
  unsigned int v499;
  uint64_t v500;
  int64_t v501;
  char *v502;
  char *v503;
  char *v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  uint64_t v515;
  char *v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  char *v523;
  char *v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  uint64_t v535;
  __int128 v536;
  std::__shared_weak_count *v537;
  unint64_t *v538;
  unint64_t v539;
  std::__shared_weak_count *v540;
  unint64_t *v541;
  unint64_t v542;
  int v543;
  std::__shared_weak_count *v544;
  unint64_t *v545;
  unint64_t v546;
  unint64_t v547;
  unint64_t v548;
  void *v549;
  char *v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  unint64_t v561;
  std::string::size_type v562;
  uint64_t v563;
  unint64_t v564;
  void *v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  unint64_t v574;
  std::string::size_type v575;
  char *v576;
  uint64_t v577;
  std::string::size_type v578;
  char *v579;
  _OWORD *v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  uint64_t v591;
  char *v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  uint64_t v603;
  std::string::size_type v604;
  std::string::size_type v605;
  std::__shared_weak_count *v606;
  unint64_t *v607;
  unint64_t v608;
  std::__shared_weak_count *v609;
  unint64_t *v610;
  unint64_t v611;
  std::__shared_weak_count *v612;
  unint64_t *v613;
  unint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unint64_t v617;
  char *v618;
  char *v619;
  int64_t v620;
  unint64_t v621;
  unint64_t v622;
  unsigned int *v623;
  char *v624;
  unsigned int v625;
  char *v626;
  char *v627;
  int64_t v628;
  unint64_t v629;
  uint64_t v630;
  uint64_t v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  uint64_t v642;
  uint64_t v643;
  int64_t v644;
  unint64_t v645;
  char *v646;
  uint64_t v647;
  uint64_t v648;
  char *v649;
  __int128 v650;
  __int128 v651;
  char v652;
  double v654;
  char v655;
  double v656;
  int v657;
  int v658;
  double v659;
  double v660;
  double v661;
  double v662;
  int v663;
  uint64_t v664;
  double v665;
  _QWORD *v666;
  const std::locale::facet *v667;
  __int128 *v668;
  uint64_t v669;
  size_t v670;
  unint64_t v671;
  _OWORD *v672;
  uint64_t v673;
  uint64_t v674;
  unint64_t v675;
  uint64_t *v676;
  unint64_t v677;
  _OWORD *v678;
  __int128 *v679;
  uint64_t v680;
  __int128 v681;
  uint64_t v682;
  double v683;
  double v684;
  double v685;
  double *v686;
  uint64_t v687;
  double v688;
  double v689;
  _QWORD *v690;
  const std::locale::facet *v691;
  _QWORD *v692;
  double v693;
  uint64_t v694;
  unsigned int v695;
  double v696;
  unsigned int v697;
  uint64_t v698;
  double *v699;
  double v700;
  double *v701;
  unint64_t v702;
  unint64_t v703;
  float64x2_t *v704;
  uint64_t v705;
  float64x2_t v706;
  float64x2_t v707;
  double *v708;
  double v709;
  double v710;
  double *v711;
  uint64_t v712;
  double v713;
  double v714;
  _BOOL4 v716;
  double v717;
  double *v719;
  int v720;
  double v721;
  double v722;
  char *j;
  char *v724;
  uint64_t v725;
  __int128 v726;
  __int128 v727;
  uint64_t k;
  uint64_t v729;
  uint64_t v730;
  __int128 v731;
  __int128 v732;
  _OWORD *v733;
  double v734;
  unsigned int v735;
  _QWORD *v736;
  _QWORD *v737;
  const std::locale::facet *v738;
  _QWORD *v739;
  const std::locale::facet *v740;
  _QWORD *v741;
  _QWORD *v742;
  const std::locale::facet *v743;
  _QWORD *v744;
  const std::locale::facet *v745;
  int v746;
  float64x2_t v747;
  int v751;
  char *m;
  char *v753;
  uint64_t v754;
  uint64_t v755;
  int64x2_t v756;
  int64x2_t v757;
  float64x2_t v760;
  int8x16_t v762;
  int8x16_t v763;
  double v764;
  float64x2_t v767;
  int64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  uint64_t n;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  int64x2_t v775;
  int64x2_t v776;
  float64x2_t v779;
  int8x16_t v781;
  int8x16_t v782;
  double v783;
  int64x2_t v786;
  float64x2_t v787;
  unint64_t v789;
  _BYTE *v790;
  _BYTE *v791;
  char *v792;
  char *v793;
  char *v794;
  char *v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  uint64_t v802;
  uint64_t v803;
  _OWORD *f64;
  void **v805;
  char *v806;
  double v808;
  double v810;
  float64x2_t v813;
  float64x2_t v814;
  uint64_t v815;
  int64x2_t v816;
  int64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  int64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  double v823;
  float64x2_t v824;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  double v835;
  double v838;
  double v839;
  double v840;
  double v841;
  double cosval;
  double v843;
  __double2 v844;
  double v845;
  double v846;
  double v848;
  double v849;
  double v850;
  double v851;
  float64x2_t v852;
  int64x2_t v853;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  int64x2_t v861;
  unint64_t v863;
  float64x2_t *v864;
  float64x2_t *v865;
  uint64_t v866;
  unint64_t v867;
  uint64_t v868;
  unint64_t v869;
  char *v870;
  float64x2_t *v871;
  float64x2_t *v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  char *v879;
  char *v880;
  char *v881;
  void *v882;
  char *v883;
  void *v884;
  void *v885;
  uint64_t v886;
  _QWORD *v887;
  uint64_t v888;
  _QWORD *v889;
  uint64_t v890;
  _QWORD *v891;
  uint64_t v892;
  _QWORD *v893;
  uint64_t v894;
  _QWORD *v895;
  uint64_t v896;
  _QWORD *v897;
  uint64_t v898;
  _QWORD *v899;
  uint64_t v900;
  _QWORD *v901;
  uint64_t v902;
  uint64_t result;
  _QWORD *v904;
  _QWORD *v905;
  const std::locale::facet *v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  double v915;
  float64x2_t v916;
  double v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  __int128 v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  unsigned int v944;
  uint64_t *v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  uint64_t *v949;
  float64x2_t v950;
  void **v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  int8x16_t v956;
  int64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t *v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  double v964;
  size_t v965;
  double v966;
  float64x2_t v967;
  float64x2_t v968;
  int64x2_t v969;
  int64x2_t v970;
  uint64_t v971;
  double v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  int v977;
  int8x16_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  unint64_t v982;
  int64x2_t v983;
  unsigned int v984;
  unint64_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  uint64_t v989;
  int64x2_t v990;
  unsigned int v991;
  double v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  const char *__src;
  float64x2_t __srca;
  void *__srcc[2];
  void *__srcb[2];
  const char *__dst;
  void *__dsta[2];
  void *__dstb[2];
  double __dstd;
  void *__dstc[2];
  unint64_t v1005;
  float64x2_t v1006;
  unint64_t v1007;
  char *v1008;
  char *v1009;
  uint64_t *v1010;
  uint64_t *v1011;
  uint64_t *v1012;
  uint64_t v1013;
  _BYTE __p[752];
  void *v1015[2];
  _OWORD v1016[2];
  __int128 v1017;
  _OWORD v1018[2];
  unint64_t v1019;
  char v1020;
  __int128 v1021;
  char v1022;
  void *v1023;
  unint64_t v1024;
  __int128 v1025;
  _QWORD v1026[64];
  _QWORD *v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  _QWORD v1032[64];
  _QWORD *v1033;
  __int128 v1034;
  void *v1035;
  char *v1036;
  char *v1037;
  uint64_t v1038;
  std::__shared_weak_count *v1039;
  uint64_t v1040;
  std::__shared_weak_count *v1041;
  unint64_t v1042;
  char v1043;
  __int128 v1044;
  uint64_t (**v1045)();
  __int128 v1046;
  __int128 v1047;
  uint64_t (**v1048)();
  char *v1049[12];
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  __int128 v1056;
  _QWORD v1057[5];
  int64x2_t v1058;
  int v1059;
  char *v1060;
  char *v1061;
  char *v1062;
  char *v1063;
  char *v1064;
  char *v1065;
  char *v1066;
  char *v1067;
  char *v1068;
  char *v1069;
  char *v1070;
  char *v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  __int128 v1075;
  __int128 v1076;
  _DWORD v1077[6];
  uint64_t v1078;
  char v1079;
  __int128 v1080;
  __int128 v1081;
  unsigned int v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085[14];
  uint64_t v1086;
  uint64_t v1087;
  _QWORD v1088[18];
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  _QWORD v1092[7];
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  void (**v1099)();
  uint64_t v1100;
  uint64_t v1101;
  int v1102;
  uint64_t v1103;
  uint64_t v1104;
  int v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108[14];
  uint64_t v1109;
  uint64_t v1110;
  _QWORD v1111[18];
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int16 v1115;
  __int128 v1116;
  __int128 v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  _BYTE v1134[144];
  int v1135;
  __int128 v1136;
  __int128 v1137;
  __int128 v1138;
  _QWORD *v1139;
  uint64_t v1140;
  void *v1141;
  uint64_t v1142;
  __int16 v1143;
  char v1144;
  __int128 v1145;
  __int128 v1146;
  int v1147;
  __int128 v1148;
  __int128 v1149;
  uint64_t v1150;
  int v1151;
  _DWORD v1152[3];
  uint64_t v1153;
  int v1154;
  __int16 v1155;
  __int128 v1156;
  _BYTE v1157[38];
  uint64_t v1158;
  void (**v1159)();
  unsigned int v1160;
  unsigned int v1161;
  char v1162;
  double v1163;
  double v1164;
  double v1165;
  char v1166;
  double v1167;
  uint64_t v1168;
  double *v1169;
  uint64_t v1170;
  unsigned __int8 v1171;
  char v1172;
  _BYTE v1173[24];
  _BYTE *v1174;
  _BYTE v1175[24];
  _BYTE *v1176;
  _BYTE v1177[24];
  _BYTE *v1178;
  _BYTE v1179[24];
  _BYTE *v1180;
  double v1181;
  __int128 v1182;
  int v1183;
  __int128 v1184;
  char v1185;
  uint64_t v1186;
  __int128 v1187;
  __int128 v1188;
  __int128 v1189[2];
  uint64_t v1190;
  char v1191;
  uint64_t v1192;
  _BYTE v1193[512];
  _BYTE *v1194;
  __int128 v1195;
  __int16 v1196;
  _BYTE v1197[24];
  _BYTE *v1198;
  _BYTE v1199[24];
  _BYTE *v1200;
  _BYTE v1201[24];
  _BYTE *v1202;
  _BYTE v1203[24];
  _BYTE *v1204;
  _BYTE object[304];
  _OWORD v1206[18];
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  char v1215;
  __int128 v1216;
  __int128 v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  unint64_t v1223;
  char v1224;
  uint64_t v1225;
  std::__shared_weak_count *v1226;
  char v1227;
  __int128 v1228;
  __int128 v1229;
  __int128 v1230;
  void *v1231[2];
  __int128 v1232;
  __int128 v1233;
  _BYTE v1234[32];
  float64x2_t v1235;
  float64x2_t v1236;
  float64x2_t v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  float64x2_t v1240;
  void *v1241[37];
  std::string v1242[12];
  uint64_t v1243;

  v1 = (_DWORD *)MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v951 = v6;
  v1243 = *MEMORY[0x24BDAC8D0];
  v1191 = 0;
  v1194 = v1193;
  v1195 = xmmword_210378040;
  v1196 = 0;
  v1198 = 0;
  v1200 = 0;
  v1202 = 0;
  v1204 = 0;
  v1189[1] = (__int128)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
  v1192 = 0x3FF7B8BAC710CB29;
  v1190 = 0x3DDB7CDFD9D7BDBBLL;
  LODWORD(v6) = *v1;
  v7 = v1[1];
  LODWORD(v1189[0]) = 1;
  DWORD1(v1189[0]) = (_DWORD)v6;
  BYTE8(v1189[0]) = v7 != 0;
  sub_20F2C2630((uint64_t)&v1160, v1189);
  v1011 = v5;
  v1182 = 0u;
  v1183 = 0;
  v1181 = -1.0;
  v1159 = (void (**)())&off_24C9FCEF0;
  v1184 = xmmword_2103AB100;
  v1185 = 1;
  v1186 = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #2.0 }
  v1187 = _Q1;
  v1188 = xmmword_210315720;
  __asm { FMOV            V1.2D, #1.0 }
  v1046 = _Q1;
  v937 = _Q1;
  v1047 = _Q1;
  v1048 = &off_24C9FFBC0;
  memset(v1049, 0, sizeof(v1049));
  v1050 = 0u;
  v1051 = 0u;
  v1052 = 0u;
  v1053 = 0u;
  v1054 = 0u;
  v1055 = 0u;
  v1056 = 0u;
  memset(v1057, 0, 32);
  v1058 = 0uLL;
  v1059 = 16842753;
  v1073 = 0u;
  v1074 = 0u;
  v1072 = 0u;
  v1060 = (char *)operator new(0x100uLL);
  v1061 = v1060;
  v1062 = v1060 + 256;
  v1066 = (char *)operator new(0x100uLL);
  v1067 = v1066;
  v1068 = v1066 + 256;
  *(_QWORD *)&v1072 = operator new(0x100uLL);
  *((_QWORD *)&v1072 + 1) = v1072;
  *(_QWORD *)&v1073 = v1072 + 256;
  v1063 = (char *)operator new(0x100uLL);
  v1064 = v1063;
  v1065 = v1063 + 256;
  v1069 = (char *)operator new(0x100uLL);
  v1070 = v1069;
  v1071 = v1069 + 256;
  *(_QWORD *)&v1074 = operator new(0x100uLL);
  *((_QWORD *)&v1074 + 1) = v1074 + 256;
  v1078 = 0;
  v1075 = 0u;
  v1076 = 0u;
  memset(v1077, 0, 22);
  *((_QWORD *)&v1073 + 1) = v1074;
  v1079 = 0;
  v1084 = 0;
  v1083 = 0;
  v1080 = 0u;
  v1081 = 0u;
  v1082 = 0;
  v13 = sub_20F3DF2F0(v1085);
  v1088[16] = &v1086;
  v1088[17] = v1088;
  v1088[15] = &v1087;
  v1089 = 0u;
  v1090 = 0u;
  v1091 = 0u;
  v1088[14] = v13;
  v1092[0] = &v1048;
  v1092[1] = &v1081;
  memset(&v1092[2], 0, 24);
  v1093 = 0u;
  v1094 = 0u;
  v1095 = 0u;
  v1096 = 0u;
  v1097 = 0u;
  v1098 = 0u;
  v1099 = off_24C9FF868;
  v1104 = 0;
  v1103 = 0;
  v1105 = 0;
  v1107 = 0;
  v1106 = 0;
  v1102 = 0;
  v1100 = 0;
  v1101 = 0;
  v14 = sub_20F3DF2F0(v1108);
  v911 = v3;
  v1111[16] = &v1109;
  v1111[17] = v1111;
  v1111[14] = v14;
  v1111[15] = &v1110;
  v1136 = 0u;
  v1137 = 0u;
  v1138 = 0u;
  memset(&v1134[32], 0, 112);
  v1135 = 0;
  v1112 = 0u;
  v1113 = 0u;
  v1114 = 0u;
  v1115 = 0;
  memset(v1134, 0, 28);
  v1133 = 0u;
  v1132 = 0u;
  v1131 = 0u;
  v1130 = 0u;
  v1129 = 0u;
  v1128 = 0u;
  v1127 = 0u;
  v1126 = 0u;
  v1125 = 0u;
  v1124 = 0u;
  v1123 = 0u;
  v1122 = 0u;
  v1121 = 0u;
  v1120 = 0u;
  v1119 = 0u;
  v1118 = 0u;
  v1117 = 0u;
  v1116 = 0u;
  v1139 = v1092;
  v1099 = (void (**)())&off_24C9FFBF0;
  v1143 = v1143 & 0x7FF0 | 0xC;
  v1144 = 1;
  v1145 = 0u;
  v1140 = 0;
  v1142 = 0;
  v1141 = 0;
  v15 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  v16 = v5;
  v1148 = 0u;
  v1149 = 0u;
  v1150 = 0;
  v1146 = 0u;
  v1147 = 0;
  v1141 = v15;
  v1045 = off_24C9FF5C0;
  v1151 = 2;
  v1152[0] = -3;
  v1156 = 0u;
  memset(v1157, 0, 30);
  v1152[2] = -3;
  v1153 = 0;
  v1154 = 0;
  v1155 = 1;
  v1157[30] = 1;
  v1158 = 0;
  v1036 = 0;
  v1035 = 0;
  v1037 = 0;
  v17 = (uint64_t *)*v5;
  v949 = (uint64_t *)v5[1];
  v18 = (uint64_t)v949 - *v5;
  if (v949 == (uint64_t *)*v5)
    goto LABEL_471;
  if ((unint64_t)v18 >= 0x270270270270271)
    sub_20E867F44();
  v19 = v18 >> 3;
  v20 = (char *)operator new(840 * (v18 >> 3));
  v1035 = v20;
  v1036 = v20;
  v1008 = &v20[840 * v19];
  v1037 = v1008;
  v21 = v20;
  do
  {
    v23 = (_QWORD *)*v17;
    sub_20FCCBC60((unint64_t *)(*v17 + 160), (std::string *)__p);
    v24 = sub_20EB07858(v23, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      v25 = *v17;
      v26 = (_QWORD *)(**(_QWORD **)(*v17 + 424) + 56);
      v27 = (uint64_t *)*v26;
      if (*v26)
      {
LABEL_11:
        v28 = v24[5];
        v29 = *((_DWORD *)v24 + 12);
        v30 = v26;
        do
        {
          v31 = v27[4];
          if (v31 < v28)
          {
            ++v27;
          }
          else if (v31 == v28)
          {
            if (*((_DWORD *)v27 + 10) < v29)
              ++v27;
            else
              v30 = v27;
          }
          else
          {
            v30 = v27;
          }
          v27 = (uint64_t *)*v27;
        }
        while (v27);
        if (v30 != v26)
        {
          v32 = v30[4];
          if (v28 >= v32 && (v28 != v32 || *((_DWORD *)v30 + 10) <= v29))
          {
            v33 = v30[6];
            if (v33)
              goto LABEL_27;
          }
        }
      }
    }
    else
    {
      v25 = *v17;
      v26 = (_QWORD *)(**(_QWORD **)(*v17 + 424) + 56);
      v27 = (uint64_t *)*v26;
      if (*v26)
        goto LABEL_11;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/SubmapsAlignmentOptimizer.cpp", 131, (uint64_t)"origin_state", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v1037 = v1008;
      v1035 = v21;
      v1036 = v20;
      abort();
    }
    v33 = 0;
    v25 = *v17;
LABEL_27:
    v1012 = v17;
    *(_QWORD *)__p = *(_QWORD *)(v25 + 160);
    v35 = *(_OWORD *)(v33 + 16);
    v34 = *(_OWORD *)(v33 + 32);
    *(_OWORD *)&__p[8] = *(_OWORD *)v33;
    *(_OWORD *)&__p[24] = v35;
    *(_OWORD *)&__p[40] = v34;
    v36 = *(_OWORD *)(v33 + 96);
    v38 = *(_OWORD *)(v33 + 48);
    v37 = *(_OWORD *)(v33 + 64);
    *(_OWORD *)&__p[88] = *(_OWORD *)(v33 + 80);
    *(_OWORD *)&__p[104] = v36;
    *(_OWORD *)&__p[56] = v38;
    *(_OWORD *)&__p[72] = v37;
    v40 = *(_OWORD *)(v33 + 128);
    v39 = *(_OWORD *)(v33 + 144);
    v41 = *(_OWORD *)(v33 + 112);
    *(_QWORD *)&__p[168] = *(_QWORD *)(v33 + 160);
    *(_OWORD *)&__p[136] = v40;
    *(_OWORD *)&__p[152] = v39;
    *(_OWORD *)&__p[120] = v41;
    memcpy(&__p[176], (const void *)(v33 + 168), 0x120uLL);
    memcpy(&__p[464], (const void *)(v33 + 456), 0x120uLL);
    v1015[1] = 0;
    *(_QWORD *)&v1016[0] = 0;
    v1015[0] = 0;
    v42 = *(_QWORD *)(v33 + 744);
    v43 = *(_QWORD *)(v33 + 752);
    v44 = v43 - v42;
    v989 = *(_QWORD *)__p;
    if (v43 == v42)
    {
      v49 = 0;
      v54 = 0;
      v47 = 0;
    }
    else
    {
      v45 = 0x6DB6DB6DB6DB6DB7 * (v44 >> 3);
      if (v45 > 0x492492492492492)
      {
        v1037 = v1008;
        v1035 = v21;
        v1036 = v20;
        sub_20EABADD4();
      }
      v46 = (char *)operator new(v44);
      v47 = v46;
      v48 = 0;
      v1015[0] = v46;
      v49 = &v46[56 * v45];
      *(_QWORD *)&v1016[0] = v49;
      do
      {
        v50 = v42 + v48;
        v51 = &v46[v48];
        *(_QWORD *)v51 = *(_QWORD *)(v42 + v48);
        v52 = *(_OWORD *)(v42 + v48 + 8);
        *((_QWORD *)v51 + 3) = *(_QWORD *)(v42 + v48 + 24);
        *(_OWORD *)(v51 + 8) = v52;
        v53 = *(_OWORD *)(v42 + v48 + 32);
        *((_QWORD *)v51 + 6) = *(_QWORD *)(v42 + v48 + 48);
        *((_OWORD *)v51 + 2) = v53;
        v48 += 56;
      }
      while (v50 + 56 != v43);
      v54 = &v46[v48];
      v1015[1] = &v46[v48];
    }
    v55 = 0x8FD8FD8FD8FD8FD9 * ((v20 - v21) >> 3);
    v56 = *(_OWORD *)(v33 + 768);
    *((_QWORD *)&v1016[1] + 1) = *(_QWORD *)(v33 + 784);
    *(_OWORD *)((char *)v1016 + 8) = v56;
    v57 = *(_OWORD *)(v33 + 792);
    *(_QWORD *)&v1018[0] = *(_QWORD *)(v33 + 808);
    v1017 = v57;
    *(_OWORD *)((char *)v1018 + 8) = *(_OWORD *)(v33 + 816);
    if (v20 < v1008)
    {
      v58 = *(_OWORD *)&__p[104];
      *(_OWORD *)(v20 + 120) = *(_OWORD *)&__p[120];
      v59 = *(_OWORD *)&__p[152];
      *(_OWORD *)(v20 + 136) = *(_OWORD *)&__p[136];
      *(_OWORD *)(v20 + 152) = v59;
      v60 = *(_OWORD *)&__p[40];
      *(_OWORD *)(v20 + 56) = *(_OWORD *)&__p[56];
      v61 = *(_OWORD *)&__p[88];
      *(_OWORD *)(v20 + 72) = *(_OWORD *)&__p[72];
      *(_OWORD *)(v20 + 88) = v61;
      *(_OWORD *)(v20 + 104) = v58;
      v62 = *(_OWORD *)&__p[24];
      *(_OWORD *)(v20 + 8) = *(_OWORD *)&__p[8];
      *(_OWORD *)(v20 + 24) = v62;
      *(_QWORD *)v20 = v989;
      *((_QWORD *)v20 + 21) = *(_QWORD *)&__p[168];
      *(_OWORD *)(v20 + 40) = v60;
      memcpy(v20 + 176, &__p[176], 0x120uLL);
      memcpy(v20 + 464, &__p[464], 0x120uLL);
      *((_QWORD *)v20 + 96) = 0;
      *((_QWORD *)v20 + 95) = 0;
      *((_OWORD *)v20 + 47) = *(_OWORD *)v1015;
      *((_QWORD *)v20 + 96) = *(_QWORD *)&v1016[0];
      v1015[0] = 0;
      v1015[1] = 0;
      *(_QWORD *)&v1016[0] = 0;
      *(_OWORD *)(v20 + 776) = *(_OWORD *)((char *)v1016 + 8);
      *((_QWORD *)v20 + 99) = *((_QWORD *)&v1016[1] + 1);
      *((_OWORD *)v20 + 50) = v1017;
      *((_QWORD *)v20 + 102) = *(_QWORD *)&v1018[0];
      *(_OWORD *)(v20 + 824) = *(_OWORD *)((char *)v1018 + 8);
      goto LABEL_59;
    }
    v63 = v55 + 1;
    if (v55 + 1 > 0x4E04E04E04E04ELL)
    {
      v1037 = v1008;
      v1035 = v21;
      v1036 = v20;
      sub_20E867F44();
    }
    if (0x1FB1FB1FB1FB1FB2 * ((v1008 - v21) >> 3) > v63)
      v63 = 0x1FB1FB1FB1FB1FB2 * ((v1008 - v21) >> 3);
    if (0x8FD8FD8FD8FD8FD9 * ((v1008 - v21) >> 3) >= 0x27027027027027)
      v64 = 0x4E04E04E04E04ELL;
    else
      v64 = v63;
    v982 = v64;
    if (v64)
    {
      if (v64 > 0x4E04E04E04E04ELL)
      {
        v1037 = v1008;
        v1035 = v21;
        v1036 = v20;
        sub_20E877A38();
      }
      v65 = v49;
      v66 = (char *)operator new(840 * v64);
    }
    else
    {
      v65 = v49;
      v66 = 0;
    }
    v67 = *(_OWORD *)&__p[104];
    v1009 = v66;
    v68 = &v66[8 * ((v20 - v21) >> 3)];
    *(_OWORD *)(v68 + 120) = *(_OWORD *)&__p[120];
    v69 = *(_OWORD *)&__p[152];
    *(_OWORD *)(v68 + 136) = *(_OWORD *)&__p[136];
    *(_OWORD *)(v68 + 152) = v69;
    v70 = *(_OWORD *)&__p[40];
    *(_OWORD *)(v68 + 56) = *(_OWORD *)&__p[56];
    v71 = *(_OWORD *)&__p[88];
    *(_OWORD *)(v68 + 72) = *(_OWORD *)&__p[72];
    *(_OWORD *)(v68 + 88) = v71;
    *(_OWORD *)(v68 + 104) = v67;
    v72 = *(_OWORD *)&__p[24];
    *(_OWORD *)(v68 + 8) = *(_OWORD *)&__p[8];
    *(_OWORD *)(v68 + 24) = v72;
    *(_QWORD *)v68 = v989;
    *((_QWORD *)v68 + 21) = *(_QWORD *)&__p[168];
    *(_OWORD *)(v68 + 40) = v70;
    memcpy(v68 + 176, &__p[176], 0x120uLL);
    memcpy(v68 + 464, &__p[464], 0x120uLL);
    *((_QWORD *)v68 + 94) = v47;
    *((_QWORD *)v68 + 95) = v54;
    *((_QWORD *)v68 + 96) = v65;
    v1015[1] = 0;
    *(_QWORD *)&v1016[0] = 0;
    v1015[0] = 0;
    *(_OWORD *)(v68 + 776) = *(_OWORD *)((char *)v1016 + 8);
    *((_QWORD *)v68 + 99) = *((_QWORD *)&v1016[1] + 1);
    *((_OWORD *)v68 + 50) = v1017;
    *((_QWORD *)v68 + 102) = *(_QWORD *)&v1018[0];
    *(_OWORD *)(v68 + 824) = *(_OWORD *)((char *)v1018 + 8);
    if (v20 == v21)
    {
      v87 = v68;
      v21 = v20;
    }
    else
    {
      v73 = 0;
      do
      {
        v74 = &v68[v73];
        v75 = &v20[v73];
        *(_QWORD *)&v68[v73 - 840] = *(_QWORD *)&v20[v73 - 840];
        v76 = (uint64_t)&v68[v73 - 832];
        v77 = *(_OWORD *)&v20[v73 - 832];
        v78 = *(_OWORD *)&v20[v73 - 800];
        *(_OWORD *)(v76 + 16) = *(_OWORD *)&v20[v73 - 816];
        *(_OWORD *)(v76 + 32) = v78;
        *(_OWORD *)v76 = v77;
        v79 = *(_OWORD *)&v20[v73 - 784];
        v80 = *(_OWORD *)&v20[v73 - 768];
        v81 = *(_OWORD *)&v20[v73 - 736];
        *(_OWORD *)(v76 + 80) = *(_OWORD *)&v20[v73 - 752];
        *(_OWORD *)(v76 + 96) = v81;
        *(_OWORD *)(v76 + 48) = v79;
        *(_OWORD *)(v76 + 64) = v80;
        v82 = *(_OWORD *)&v20[v73 - 720];
        v83 = *(_OWORD *)&v20[v73 - 704];
        v84 = *(_OWORD *)&v20[v73 - 688];
        *(_QWORD *)(v76 + 160) = *(_QWORD *)&v20[v73 - 672];
        *(_OWORD *)(v76 + 128) = v83;
        *(_OWORD *)(v76 + 144) = v84;
        *(_OWORD *)(v76 + 112) = v82;
        memcpy(&v68[v73 - 664], &v20[v73 - 664], 0x120uLL);
        memcpy(&v68[v73 - 376], &v20[v73 - 376], 0x120uLL);
        *((_QWORD *)v74 - 10) = 0;
        *((_QWORD *)v74 - 9) = 0;
        *(_OWORD *)(v74 - 88) = *(_OWORD *)&v20[v73 - 88];
        *((_QWORD *)v74 - 9) = *(_QWORD *)&v20[v73 - 72];
        *((_QWORD *)v75 - 11) = 0;
        *((_QWORD *)v75 - 10) = 0;
        *((_QWORD *)v75 - 9) = 0;
        v85 = *(_QWORD *)&v20[v73 - 48];
        *((_OWORD *)v74 - 4) = *(_OWORD *)&v20[v73 - 64];
        *((_QWORD *)v74 - 6) = v85;
        v86 = *(_QWORD *)&v20[v73 - 24];
        *(_OWORD *)(v74 - 40) = *(_OWORD *)&v20[v73 - 40];
        *((_QWORD *)v74 - 3) = v86;
        *((_OWORD *)v74 - 1) = *(_OWORD *)&v20[v73 - 16];
        v73 -= 840;
      }
      while (&v20[v73] != v21);
      v87 = &v68[v73];
      do
      {
        v88 = (void *)*((_QWORD *)v20 - 11);
        if (v88)
        {
          *((_QWORD *)v20 - 10) = v88;
          operator delete(v88);
        }
        v20 -= 840;
      }
      while (v20 != v21);
      if (!v21)
        goto LABEL_56;
    }
    operator delete(v21);
LABEL_56:
    v1008 = &v1009[840 * v982];
    if (v1015[0])
      operator delete(v1015[0]);
    v21 = v87;
    v20 = v68;
LABEL_59:
    v89 = v20 + 8;
    v970 = *(int64x2_t *)(v20 + 8);
    v90.f64[1] = *((float64_t *)v20 + 2);
    v90.f64[0] = *((float64_t *)v20 + 3);
    v976 = v90;
    v90.f64[0] = *((float64_t *)v20 + 6);
    v983 = (int64x2_t)v90;
    v957 = *((int64x2_t *)v20 + 2);
    _D8 = *((double *)v20 + 9);
    v990 = *(int64x2_t *)(v20 + 56);
    v964 = *((double *)v20 + 12);
    v959 = *((float64x2_t *)v20 + 5);
    v92 = v1049[0];
    if (v1049[1] == v1049[0])
    {
      v92 = v1049[1];
      v20 += 840;
LABEL_71:
      v98 = sub_20F3E2BCC((uint64_t)&v1049[3]);
      v99 = (float64x2_t)vzip1q_s64(v970, v957);
      _Q17 = (float64x2_t)v990;
      _Q2 = (float64x2_t)vzip2q_s64(v970, v957);
      _D18 = v983.i64[0];
      v103 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q2, 1);
      v104 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q2.f64[0], 0);
      _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v99, v959.f64[0]), _Q2, v959, 1), (float64x2_t)vzip1q_s64((int64x2_t)v976, v983), v964);
      _D3 = v959.f64[1];
      __asm { FMLA            D2, D3, V17.D[1] }
      _Q2.f64[0] = _Q2.f64[0] + _D8 * v964;
      v107 = vnegq_f64(_Q6);
      v108 = (int64x2_t)vextq_s8(v104, v103, 8uLL);
      v109 = (float64x2_t)vzip1q_s64(v970, v108);
      v110 = (float64x2_t)vzip2q_s64((int64x2_t)v99, v108);
      *(_QWORD *)&_Q17.f64[1] = vdupq_laneq_s64(v990, 1).u64[0];
      v111 = vmlsq_laneq_f64(vmulq_n_f64(v109, v107.f64[0]), v110, _Q6, 1);
      *(_DWORD *)v98 = -1;
      *(_BYTE *)(v98 + 4) = 1;
      *(_DWORD *)(v98 + 8) = 0;
      *(_QWORD *)(v98 + 16) = v55 | 0x100000000;
      *(_QWORD *)(v98 + 24) = v89;
      *(float64_t *)(v98 + 48) = v976.f64[0];
      *(_QWORD *)&v109.f64[1] = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u64[0];
      _Q3 = vmulq_f64(v976, v107);
      __asm
      {
        FMLS            D3, D18, V6.D[1]
        FMLS            D3, D8, V2.D[0]
      }
      *(float64x2_t *)(v98 + 32) = v109;
      *(_QWORD *)(v98 + 72) = v983.i64[0];
      *(_QWORD *)&v110.f64[1] = vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u64[0];
      *(float64x2_t *)(v98 + 56) = v110;
      v113 = (int8x16_t)vnegq_f64(vmlsq_lane_f64(v111, _Q17, _Q2.f64[0], 0));
      *(double *)(v98 + 96) = _D8;
      *(_QWORD *)&_Q17.f64[1] = vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL).u64[0];
      *(float64x2_t *)(v98 + 80) = _Q17;
      *(_QWORD *)(v98 + 120) = *(_OWORD *)&vnegq_f64(_Q3);
      v113.i64[1] = vextq_s8(v113, v113, 8uLL).u64[0];
      *(int8x16_t *)(v98 + 104) = v113;
      *(_OWORD *)(v98 + 128) = xmmword_2102DD520;
      *(_QWORD *)(v98 + 144) = 0;
      *(_QWORD *)(v98 + 152) = 0;
      *(_QWORD *)(v98 + 160) = 0;
      *(_QWORD *)(v98 + 168) = 0x3FF0000000000000;
      *(_QWORD *)(v98 + 176) = 0;
      *(_QWORD *)(v98 + 184) = 0;
      *(_QWORD *)(v98 + 192) = 0;
      *(_QWORD *)(v98 + 200) = 0x3FF0000000000000;
      *(_QWORD *)(v98 + 208) = 0;
      *(_QWORD *)(v98 + 216) = 0;
      *(_QWORD *)(v98 + 224) = 0;
      *(_DWORD *)__p = v55;
      *(_QWORD *)&__p[8] = v98;
      sub_20F3E2964(v1049, (__int128 *)v92, (uint64_t)__p);
      v114 = (_BYTE *)*((_QWORD *)&v1072 + 1);
      if (*((_QWORD *)&v1072 + 1) < (unint64_t)v1073)
      {
        **((_DWORD **)&v1072 + 1) = v55;
        v22 = (uint64_t)(v114 + 4);
LABEL_5:
        *((_QWORD *)&v1072 + 1) = v22;
        BYTE2(v1059) = 0;
        LOBYTE(v1059) = 0;
        v1077[4] = 0;
        LOBYTE(v1077[5]) = 0;
        goto LABEL_6;
      }
      v115 = (_BYTE *)v1072;
      v116 = *((_QWORD *)&v1072 + 1) - v1072;
      v117 = (uint64_t)(*((_QWORD *)&v1072 + 1) - v1072) >> 2;
      v118 = v117 + 1;
      if ((unint64_t)(v117 + 1) >> 62)
      {
        v1037 = v1008;
        v1035 = v21;
        v1036 = v20;
        sub_20E867F44();
      }
      v119 = v1073 - v1072;
      if ((uint64_t)(v1073 - v1072) >> 1 > v118)
        v118 = v119 >> 1;
      if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
        v120 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v120 = v118;
      if (v120)
      {
        if (v120 >> 62)
        {
          v1037 = v1008;
          v1035 = v21;
          v1036 = v20;
          sub_20E877A38();
        }
        v121 = (char *)operator new(4 * v120);
        v122 = &v121[4 * v117];
        *(_DWORD *)v122 = v55;
        v22 = (uint64_t)(v122 + 4);
        v123 = v114 - v115;
        if (v114 != v115)
        {
LABEL_81:
          v124 = v123 - 4;
          if (v124 >= 0x2C)
          {
            v125 = v114 - v121 - v116;
            v17 = v1012;
            if (v125 >= 0x20)
            {
              v126 = (v124 >> 2) + 1;
              v127 = 4 * (v126 & 0x7FFFFFFFFFFFFFF8);
              v128 = &v114[-v127];
              v122 -= v127;
              v129 = &v121[4 * v117 - 16];
              v130 = (__int128 *)(v114 - 16);
              v131 = v126 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v132 = *v130;
                *((_OWORD *)v129 - 1) = *(v130 - 1);
                *(_OWORD *)v129 = v132;
                v129 -= 32;
                v130 -= 2;
                v131 -= 8;
              }
              while (v131);
              v114 = v128;
              if (v126 == (v126 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_90:
                *(_QWORD *)&v1072 = v122;
                *((_QWORD *)&v1072 + 1) = v22;
                *(_QWORD *)&v1073 = &v121[4 * v120];
                if (v115)
                  operator delete(v115);
                goto LABEL_5;
              }
            }
          }
          else
          {
            v17 = v1012;
          }
          do
          {
            v133 = *((_DWORD *)v114 - 1);
            v114 -= 4;
            *((_DWORD *)v122 - 1) = v133;
            v122 -= 4;
          }
          while (v114 != v115);
          goto LABEL_90;
        }
      }
      else
      {
        v121 = 0;
        v122 = (char *)(4 * v117);
        *(_DWORD *)(4 * v117) = v55;
        v22 = 4 * v117 + 4;
        v123 = v114 - v115;
        if (v114 != v115)
          goto LABEL_81;
      }
      v17 = v1012;
      goto LABEL_90;
    }
    v93 = (v1049[1] - v1049[0]) >> 4;
    do
    {
      v94 = v93 >> 1;
      v95 = (unsigned int *)&v92[16 * (v93 >> 1)];
      v97 = *v95;
      v96 = (char *)(v95 + 4);
      v93 += ~(v93 >> 1);
      if (v97 < v55)
        v92 = v96;
      else
        v93 = v94;
    }
    while (v93);
    v20 += 840;
    if (v1049[1] == v92 || *(_DWORD *)v92 != (_DWORD)v55)
      goto LABEL_71;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/SubmapsAlignmentOptimizer.cpp", 140, (uint64_t)"ret", 3, (uint64_t)"Failed to add the state variable: this should never happen.", 59, (void (*)(void **))sub_21023DDB0))
    {
      v1037 = v1008;
      v1035 = v21;
      v1036 = (char *)(v89 + 104);
      abort();
    }
LABEL_6:
    ++v17;
  }
  while (v17 != v949);
  v1037 = v1008;
  v1035 = v21;
  v1036 = v20;
  v16 = v5;
  v134 = (uint64_t *)*v5;
  v945 = (uint64_t *)v5[1];
  if ((uint64_t *)*v5 != v945)
  {
    v944 = 0;
    v909 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v910 = *MEMORY[0x24BEDB7F0];
    v908 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v907 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      v1010 = v134;
      v136 = *(_QWORD *)(*v134 + 208);
      v135 = *(_QWORD *)(*v134 + 216);
      v1013 = v135;
      if (v136 != v135)
        break;
LABEL_94:
      v134 = v1010 + 1;
      if (v1010 + 1 == v945)
        goto LABEL_471;
    }
    while (2)
    {
      v137 = *(_QWORD *)v136;
      v138 = (uint64_t *)*v16;
      v139 = (uint64_t *)v16[1];
      v140 = (uint64_t *)*v16;
      if ((uint64_t *)*v16 != v139)
      {
        v140 = (uint64_t *)*v16;
        while (*(_QWORD *)(*v140 + 160) != v137)
        {
          if (++v140 == v139)
            goto LABEL_107;
        }
      }
      if (v140 == v139)
      {
LABEL_107:
        v141 = 0;
        v142 = *(_QWORD *)(v136 + 24);
        if (v138 != v139)
        {
LABEL_108:
          while (*(_QWORD *)(*v138 + 160) != v142)
          {
            if (++v138 == v139)
              goto LABEL_98;
          }
        }
      }
      else
      {
        v141 = *v140;
        v142 = *(_QWORD *)(v136 + 24);
        if (v138 != v139)
          goto LABEL_108;
      }
      if (v138 != v139)
      {
        if (v141)
        {
          v143 = *v138;
          if (*v138)
          {
            v144 = (char *)v1035;
            v145 = v1036;
            v146 = (char *)v1035;
            if (v1035 != v1036)
            {
              v146 = (char *)v1035;
              do
              {
                if (*(_QWORD *)v146 == v137)
                  goto LABEL_119;
                v146 += 840;
              }
              while (v146 != v1036);
              v146 = v1036;
LABEL_122:
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/SubmapsAlignmentOptimizer.cpp", 179, (uint64_t)"query_submap_origin_state_pair_iter != submap_origin_states.end()", 65, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_813;
              }
              v144 = (char *)v1035;
              v147 = v1036;
              if (v1035 != v1036)
                goto LABEL_124;
LABEL_127:
              v148 = v147;
              goto LABEL_128;
            }
LABEL_119:
            if (v146 == v1036)
              goto LABEL_122;
            v147 = v1036;
            v145 = v146;
            if (v1035 == v1036)
              goto LABEL_127;
LABEL_124:
            v148 = v144;
            v149 = v144;
            while (*(_QWORD *)v149 != v142)
            {
              v149 += 840;
              v148 += 840;
              if (v149 == v147)
                goto LABEL_127;
            }
            v154 = v144;
            if (v149 != v147)
            {
              v155 = (_QWORD *)(**(_QWORD **)(v141 + 424) + 56);
              v156 = (uint64_t *)*v155;
              if (*v155)
                goto LABEL_139;
LABEL_150:
              v162 = 0;
              v163 = **(_QWORD **)(v143 + 424);
              v166 = *(uint64_t **)(v163 + 56);
              v164 = (uint64_t *)(v163 + 56);
              v165 = v166;
              if (v166)
                goto LABEL_151;
LABEL_395:
              v16 = v1011;
              goto LABEL_97;
            }
LABEL_128:
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/SubmapsAlignmentOptimizer.cpp", 187, (uint64_t)"ref_submap_origin_state_pair_iter != submap_origin_states.end()", 63, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v150 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v150 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v151 = qword_254A6DE40;
              for (i = qword_254A6DE48; v151 != i; v151 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v151)(*(_QWORD *)(v151 + 8), "ref_submap_origin_state_pair_iter != submap_origin_states.end()", 63, "", 0);
            }
            v153 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v153 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
LABEL_813:
              abort();
            qword_254A6DE58(unk_254A6DE60, "ref_submap_origin_state_pair_iter != submap_origin_states.end()", 63, "", 0);
            v154 = v1035;
            v149 = v147;
            v155 = (_QWORD *)(**(_QWORD **)(v141 + 424) + 56);
            v156 = (uint64_t *)*v155;
            if (!*v155)
              goto LABEL_150;
LABEL_139:
            v157 = *(_QWORD *)v136;
            v158 = *(_DWORD *)(v136 + 8);
            v159 = v155;
            do
            {
              v160 = v156[4];
              if (v160 < v157)
              {
                ++v156;
              }
              else if (v160 == v157)
              {
                if (*((_DWORD *)v156 + 10) < v158)
                  ++v156;
                else
                  v159 = v156;
              }
              else
              {
                v159 = v156;
              }
              v156 = (uint64_t *)*v156;
            }
            while (v156);
            if (v159 == v155)
              goto LABEL_150;
            v161 = v159[4];
            if (v157 < v161 || v157 == v161 && *((_DWORD *)v159 + 10) > v158)
              goto LABEL_150;
            v162 = v159[6];
            v190 = **(_QWORD **)(v143 + 424);
            v191 = *(uint64_t **)(v190 + 56);
            v164 = (uint64_t *)(v190 + 56);
            v165 = v191;
            if (!v191)
              goto LABEL_395;
LABEL_151:
            v167 = (float64x2_t *)(v136 + 272);
            v168 = -654471207 * ((unint64_t)(v146 - v144) >> 3);
            v169 = -654471207 * ((unint64_t)(v148 - v154) >> 3);
            v170 = *(_QWORD *)(v136 + 24);
            v171 = *(_DWORD *)(v136 + 32);
            v172 = v164;
            do
            {
              v173 = v165[4];
              if (v173 < v170)
              {
                ++v165;
              }
              else if (v173 == v170)
              {
                if (*((_DWORD *)v165 + 10) < v171)
                  ++v165;
                else
                  v172 = v165;
              }
              else
              {
                v172 = v165;
              }
              v165 = (uint64_t *)*v165;
            }
            while (v165);
            v16 = v1011;
            if (v172 != v164)
            {
              v174 = v172[4];
              if (v170 >= v174 && (v170 != v174 || *((_DWORD *)v172 + 10) <= v171))
              {
                if (v162)
                {
                  v175 = v172[6];
                  if (v175)
                  {
                    v176 = atomic_load((unsigned __int8 *)&qword_254A68908);
                    if ((v176 & 1) == 0 && __cxa_guard_acquire(&qword_254A68908))
                    {
                      sub_21021D3D8(object);
                      sub_20E8610C0(__p, "cv3d.vio.area_mapping");
                      sub_20E8C4068((uint64_t **)object, (uint64_t)__p, &qword_254A68900);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                      __cxa_guard_release(&qword_254A68908);
                    }
                    *(_QWORD *)&v1044 = qword_254A68900;
                    if (**(int **)(qword_254A68900 + 56) > 2)
                      goto LABEL_322;
                    v177 = *(unsigned __int8 *)(qword_254A68900 + 72);
                    v1005 = sub_20E8C31DC(qword_254A68900, "OSLogSurrogateAppender", 1, 0);
                    if (!v177 && !v1005)
                      goto LABEL_322;
                    sub_20E863438((uint64_t)__p);
                    v178 = sub_20E86A980(&__p[16], (uint64_t)"ext_reloc_result: ", 18);
                    v179 = *(_DWORD *)(v136 + 8);
                    v1242[0].__r_.__value_.__r.__words[0] = *(_QWORD *)v136;
                    LODWORD(v1242[0].__r_.__value_.__r.__words[1]) = v179;
                    sub_210216370((uint64_t)v1242);
                    if (object[23] >= 0)
                      v180 = object;
                    else
                      v180 = *(_BYTE **)object;
                    if (object[23] >= 0)
                      v181 = object[23];
                    else
                      v181 = *(_QWORD *)&object[8];
                    v182 = sub_20E86A980(v178, (uint64_t)v180, v181);
                    v183 = sub_20E86A980(v182, (uint64_t)"->", 2);
                    v991 = v168;
                    v184 = *(_DWORD *)(v136 + 32);
                    v1241[0] = *(void **)(v136 + 24);
                    LODWORD(v1241[1]) = v184;
                    sub_210216370((uint64_t)v1241);
                    v984 = v169;
                    if ((v1242[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v185 = v1242;
                    else
                      v185 = (std::string *)v1242[0].__r_.__value_.__r.__words[0];
                    if ((v1242[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      size = HIBYTE(v1242[0].__r_.__value_.__r.__words[2]);
                    else
                      size = v1242[0].__r_.__value_.__l.__size_;
                    sub_20E86A980(v183, (uint64_t)v185, size);
                    if (SHIBYTE(v1242[0].__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v1242[0].__r_.__value_.__l.__data_);
                      if ((object[23] & 0x80000000) != 0)
                        goto LABEL_192;
LABEL_184:
                      v187 = __p[120];
                      v960 = (float64x2_t *)(v136 + 272);
                      if ((__p[120] & 0x10) == 0)
                        goto LABEL_185;
LABEL_193:
                      v192 = *(_QWORD *)&__p[112];
                      v193 = (const void **)&__p[64];
                      if (*(_QWORD *)&__p[112] < *(_QWORD *)&__p[72])
                      {
                        *(_QWORD *)&__p[112] = *(_QWORD *)&__p[72];
                        v192 = *(_QWORD *)&__p[72];
                        v193 = (const void **)&__p[64];
                      }
                    }
                    else
                    {
                      if ((object[23] & 0x80000000) == 0)
                        goto LABEL_184;
LABEL_192:
                      operator delete(*(void **)object);
                      v187 = __p[120];
                      v960 = (float64x2_t *)(v136 + 272);
                      if ((__p[120] & 0x10) != 0)
                        goto LABEL_193;
LABEL_185:
                      if ((v187 & 8) == 0)
                      {
                        v188 = 0;
                        BYTE7(v1232) = 0;
                        v189 = v1231;
                        goto LABEL_204;
                      }
                      v192 = *(_QWORD *)&__p[56];
                      v193 = (const void **)&__p[40];
                    }
                    v194 = *v193;
                    v188 = v192 - (_QWORD)*v193;
                    if (v188 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v188 >= 0x17)
                    {
                      v195 = v177;
                      v196 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v188 | 7) != 0x17)
                        v196 = v188 | 7;
                      v197 = v196 + 1;
                      v189 = operator new(v196 + 1);
                      *(_QWORD *)&v1232 = v197 | 0x8000000000000000;
                      v1231[0] = v189;
                      v1231[1] = (void *)v188;
                      v177 = v195;
                    }
                    else
                    {
                      BYTE7(v1232) = v192 - *(_BYTE *)v193;
                      v189 = v1231;
                      if (!v188)
                      {
LABEL_204:
                        *((_BYTE *)v189 + v188) = 0;
                        v1242[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1044;
                        v1242[0].__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                        v1242[0].__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                        LODWORD(v1242[1].__r_.__value_.__l.__data_) = 2;
                        v1242[1].__r_.__value_.__l.__size_ = (std::string::size_type)"unknown file";
                        LODWORD(v1242[1].__r_.__value_.__r.__words[2]) = 203;
                        v1242[2].__r_.__value_.__r.__words[0] = (std::string::size_type)"unknown function";
                        *(_OWORD *)&v1242[2].__r_.__value_.__r.__words[1] = 0uLL;
                        v198 = v1231;
                        if (SBYTE7(v1232) < 0)
                          v198 = (void **)v1231[0];
                        __src = (const char *)v198;
                        v199 = *(_QWORD *)v1242[0].__r_.__value_.__l.__data_;
                        if (*(char *)(*(_QWORD *)v1242[0].__r_.__value_.__l.__data_ + 39) < 0)
                        {
                          v200 = *(_QWORD *)(v199 + 24);
                          __dst = *(const char **)(v199 + 16);
                          v971 = *(_QWORD *)v1242[0].__r_.__value_.__l.__data_ + 16;
                          v202 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                          if ((v202 & 1) == 0)
                          {
LABEL_466:
                            if (__cxa_guard_acquire(&qword_254A4A510))
                            {
                              sub_20E9E46F8((uint64_t)v1241);
                              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v1241);
                              if (LOBYTE(v1241[3]) && SHIBYTE(v1241[2]) < 0)
                                operator delete(v1241[0]);
                              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                              __cxa_guard_release(&qword_254A4A510);
                            }
                          }
                        }
                        else
                        {
                          v200 = *(unsigned __int8 *)(*(_QWORD *)v1242[0].__r_.__value_.__l.__data_ + 39);
                          __dst = (const char *)(*(_QWORD *)v1242[0].__r_.__value_.__l.__data_ + 16);
                          v971 = (uint64_t)__dst;
                          v201 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                          if ((v201 & 1) == 0)
                            goto LABEL_466;
                        }
                        if (byte_254A4A4F8[23] >= 0)
                          v203 = byte_254A4A4F8;
                        else
                          v203 = *(const char **)byte_254A4A4F8;
                        if (byte_254A4A4F8[23] >= 0)
                          v204 = byte_254A4A4F8[23];
                        else
                          v204 = *(_QWORD *)&byte_254A4A4F8[8];
                        *(_QWORD *)object = os_log_create(v203, __dst);
                        if (v204 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        v977 = v177;
                        if (v204 >= 0x17)
                        {
                          v965 = v200;
                          v206 = v199;
                          v207 = v175;
                          v208 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v204 | 7) != 0x17)
                            v208 = v204 | 7;
                          v209 = v208 + 1;
                          v205 = operator new(v208 + 1);
                          *(_QWORD *)&object[24] = v209 | 0x8000000000000000;
                          *(_QWORD *)&object[8] = v205;
                          *(_QWORD *)&object[16] = v204;
                          v175 = v207;
                          v199 = v206;
                          v200 = v965;
                        }
                        else
                        {
                          object[31] = v204;
                          v205 = &object[8];
                          if (!v204)
                          {
LABEL_224:
                            v205[v204] = 0;
                            object[32] = 1;
                            if (v200 > 0x7FFFFFFFFFFFFFF7)
                              sub_20E860B7C();
                            if (v200 >= 0x17)
                            {
                              v211 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v200 | 7) != 0x17)
                                v211 = v200 | 7;
                              v212 = v211 + 1;
                              v210 = operator new(v211 + 1);
                              *(_QWORD *)&object[56] = v212 | 0x8000000000000000;
                              *(_QWORD *)&object[40] = v210;
                              *(_QWORD *)&object[48] = v200;
                              v167 = v960;
                            }
                            else
                            {
                              object[63] = v200;
                              v210 = &object[40];
                              v167 = v960;
                              if (!v200)
                              {
LABEL_232:
                                v210[v200] = 0;
                                object[64] = 1;
                                v213 = *(NSObject **)object;
                                if ((object[63] & 0x80000000) != 0)
                                  operator delete(*(void **)&object[40]);
                                if (object[32] && (object[31] & 0x80000000) != 0)
                                  operator delete(*(void **)&object[8]);
                                if (*(_QWORD *)object)
                                  os_release(*(void **)object);
                                if (v1005 && *(_QWORD *)(v1005 + 24))
                                {
                                  v214 = _os_log_pack_size();
                                  v215 = operator new(v214, (std::align_val_t)8uLL);
                                  v216 = (_QWORD *)operator new();
                                  *v216 = &off_24C9ABB80;
                                  v216[1] = 0;
                                  v216[2] = 0;
                                  v216[3] = v215;
                                  v1241[0] = v215;
                                  v1241[1] = v215;
                                  v1241[2] = v216;
                                  v1241[3] = 0;
                                  v1241[4] = 0;
                                  v217 = strlen(__src);
                                  if (v217 > 0x7FFFFFFFFFFFFFF7)
                                    sub_20E860B7C();
                                  v218 = v217;
                                  if (v217 >= 0x17)
                                  {
                                    v222 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v217 | 7) != 0x17)
                                      v222 = v217 | 7;
                                    v223 = v222 + 1;
                                    v219 = operator new(v222 + 1);
                                    *(_QWORD *)&v1234[16] = v223 | 0x8000000000000000;
                                    *(_QWORD *)v1234 = v219;
                                    *(_QWORD *)&v1234[8] = v218;
                                  }
                                  else
                                  {
                                    v1234[23] = v217;
                                    v219 = v1234;
                                    if (!v217)
                                      goto LABEL_252;
                                  }
                                  memcpy(v219, __src, v218);
LABEL_252:
                                  v219[v218] = 0;
                                  v224 = *(_QWORD *)v1234;
                                  *(_QWORD *)&v1228 = *(_QWORD *)&v1234[8];
                                  *(_QWORD *)((char *)&v1228 + 7) = *(_QWORD *)&v1234[15];
                                  v225 = v1234[23];
                                  v226 = operator new(0x38uLL);
                                  v226[1] = 0;
                                  v226[2] = 0;
                                  v226[3] = off_24C9ABC20;
                                  *v226 = &off_24C9ABBD0;
                                  v227 = v1228;
                                  v226[4] = v224;
                                  v226[5] = v227;
                                  *(_QWORD *)((char *)v226 + 47) = *(_QWORD *)((char *)&v1228 + 7);
                                  *((_BYTE *)v226 + 55) = v225;
                                  *(_QWORD *)&v1228 = 0;
                                  *(_QWORD *)((char *)&v1228 + 7) = 0;
                                  v228 = (std::__shared_weak_count *)v1241[4];
                                  v1241[3] = v226 + 3;
                                  v1241[4] = v226;
                                  v167 = v960;
                                  if (v228)
                                  {
                                    p_shared_owners = (unint64_t *)&v228->__shared_owners_;
                                    do
                                      v230 = __ldaxr(p_shared_owners);
                                    while (__stlxr(v230 - 1, p_shared_owners));
                                    if (!v230)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                                      std::__shared_weak_count::__release_weak(v228);
                                    }
                                  }
                                  *(_OWORD *)object = *(_OWORD *)v1241;
                                  v231 = v1241[3];
                                  *(void **)&object[16] = v1241[2];
                                  if (v1241[2])
                                  {
                                    v232 = (unint64_t *)((char *)v1241[2] + 8);
                                    do
                                      v233 = __ldxr(v232);
                                    while (__stxr(v233 + 1, v232));
                                  }
                                  v234 = (std::__shared_weak_count *)v1241[4];
                                  *(_QWORD *)&object[24] = v231;
                                  *(void **)&object[32] = v1241[4];
                                  if (v1241[4])
                                  {
                                    v235 = (unint64_t *)((char *)v1241[4] + 8);
                                    do
                                      v236 = __ldxr(v235);
                                    while (__stxr(v236 + 1, v235));
                                    *(_QWORD *)&object[40] = v231;
                                    do
                                      v237 = __ldaxr(v235);
                                    while (__stlxr(v237 - 1, v235));
                                    if (!v237)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                                      std::__shared_weak_count::__release_weak(v234);
                                    }
                                  }
                                  else
                                  {
                                    *(_QWORD *)&object[40] = v231;
                                  }
                                  v238 = (std::__shared_weak_count *)v1241[2];
                                  if (v1241[2])
                                  {
                                    v239 = (unint64_t *)((char *)v1241[2] + 8);
                                    do
                                      v240 = __ldaxr(v239);
                                    while (__stlxr(v240 - 1, v239));
                                    if (!v240)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                                      std::__shared_weak_count::__release_weak(v238);
                                    }
                                  }
                                  v241 = *(_QWORD *)object;
                                  if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                                    v242 = *(_QWORD *)&object[40] + 8;
                                  else
                                    v242 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                                  v243 = _os_log_pack_fill();
                                  *(_DWORD *)v243 = 136315138;
                                  *(_QWORD *)(v243 + 4) = v242;
                                  v244 = (char *)operator new();
                                  v245 = *(unsigned __int8 *)(v199 + 39);
                                  v246 = v971;
                                  if ((v245 & 0x80u) != 0)
                                  {
                                    v246 = *(_QWORD *)(v199 + 16);
                                    v245 = *(_QWORD *)(v199 + 24);
                                  }
                                  *(_QWORD *)v244 = v241;
                                  *(_OWORD *)(v244 + 8) = *(_OWORD *)&object[8];
                                  *(_QWORD *)&object[8] = 0;
                                  *(_QWORD *)&object[16] = 0;
                                  *(_OWORD *)(v244 + 24) = *(_OWORD *)&object[24];
                                  *(_QWORD *)&object[24] = 0;
                                  *(_QWORD *)&object[32] = 0;
                                  *((_QWORD *)v244 + 5) = v246;
                                  *((_QWORD *)v244 + 6) = v245;
                                  v244[56] = 2;
                                  *(_QWORD *)v1234 = 0;
                                  v1241[0] = v244;
                                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1005 + 24) + 40))(*(_QWORD *)(v1005 + 24), v1241);
                                  v247 = v1241[0];
                                  v1241[0] = 0;
                                  if (v247)
                                  {
                                    v248 = (std::__shared_weak_count *)*((_QWORD *)v247 + 4);
                                    if (v248)
                                    {
                                      v249 = (unint64_t *)&v248->__shared_owners_;
                                      do
                                        v250 = __ldaxr(v249);
                                      while (__stlxr(v250 - 1, v249));
                                      if (!v250)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                                        std::__shared_weak_count::__release_weak(v248);
                                      }
                                    }
                                    v251 = (std::__shared_weak_count *)*((_QWORD *)v247 + 2);
                                    if (v251)
                                    {
                                      v252 = (unint64_t *)&v251->__shared_owners_;
                                      do
                                        v253 = __ldaxr(v252);
                                      while (__stlxr(v253 - 1, v252));
                                      if (!v253)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                                        std::__shared_weak_count::__release_weak(v251);
                                      }
                                    }
                                    MEMORY[0x212BC6398](v247, 0x10F0C40B62ED6C6);
                                    v254 = *(_QWORD *)v1234;
                                    *(_QWORD *)v1234 = 0;
                                    if (v254)
                                    {
                                      v255 = *(std::__shared_weak_count **)(v254 + 32);
                                      if (v255)
                                      {
                                        v256 = (unint64_t *)&v255->__shared_owners_;
                                        do
                                          v257 = __ldaxr(v256);
                                        while (__stlxr(v257 - 1, v256));
                                        if (!v257)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                                          std::__shared_weak_count::__release_weak(v255);
                                        }
                                      }
                                      v258 = *(std::__shared_weak_count **)(v254 + 16);
                                      if (v258)
                                      {
                                        v259 = (unint64_t *)&v258->__shared_owners_;
                                        do
                                          v260 = __ldaxr(v259);
                                        while (__stlxr(v260 - 1, v259));
                                        if (!v260)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                                          std::__shared_weak_count::__release_weak(v258);
                                        }
                                      }
                                      MEMORY[0x212BC6398](v254, 0x10F0C40B62ED6C6);
                                    }
                                  }
                                  v261 = *(std::__shared_weak_count **)&object[32];
                                  v221 = v977;
                                  if (*(_QWORD *)&object[32])
                                  {
                                    v262 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                                    do
                                      v263 = __ldaxr(v262);
                                    while (__stlxr(v263 - 1, v262));
                                    if (!v263)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                                      std::__shared_weak_count::__release_weak(v261);
                                      v264 = *(std::__shared_weak_count **)&object[16];
                                      if (*(_QWORD *)&object[16])
                                        goto LABEL_306;
                                      goto LABEL_309;
                                    }
                                  }
                                  v264 = *(std::__shared_weak_count **)&object[16];
                                  if (!*(_QWORD *)&object[16])
                                    goto LABEL_309;
LABEL_306:
                                  v265 = (unint64_t *)&v264->__shared_owners_;
                                  do
                                    v266 = __ldaxr(v265);
                                  while (__stlxr(v266 - 1, v265));
                                  if (v266)
                                  {
LABEL_309:
                                    if (v221)
                                      goto LABEL_310;
LABEL_313:
                                    sub_20E863570((uint64_t)v1242);
                                    v268 = (std::__shared_weak_count *)v1242[2].__r_.__value_.__r.__words[2];
                                    if (!v1242[2].__r_.__value_.__r.__words[2])
                                      goto LABEL_317;
                                    v269 = (unint64_t *)(v1242[2].__r_.__value_.__r.__words[2] + 8);
                                    do
                                      v270 = __ldaxr(v269);
                                    while (__stlxr(v270 - 1, v269));
                                    if (!v270)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                                      std::__shared_weak_count::__release_weak(v268);
                                      if (SBYTE7(v1232) < 0)
LABEL_318:
                                        operator delete(v1231[0]);
                                    }
                                    else
                                    {
LABEL_317:
                                      if (SBYTE7(v1232) < 0)
                                        goto LABEL_318;
                                    }
                                    *(_QWORD *)__p = v910;
                                    *(_QWORD *)&__p[*(_QWORD *)(v910 - 24)] = v909;
                                    *(_QWORD *)&__p[16] = v908;
                                    *(_QWORD *)&__p[24] = v907;
                                    v168 = v991;
                                    v169 = v984;
                                    if ((__p[111] & 0x80000000) != 0)
                                      operator delete(*(void **)&__p[88]);
                                    std::streambuf::~streambuf();
                                    std::iostream::~basic_iostream();
                                    MEMORY[0x212BC6290](&__p[128]);
LABEL_322:
                                    v271 = 0;
                                    v272 = 0;
                                    v273.f64[0] = *(float64_t *)(v175 + 16);
                                    v273.f64[1] = *(float64_t *)(v175 + 40);
                                    v274 = *(double *)(v162 + 16);
                                    v275 = *(float64x2_t *)v162;
                                    _D3 = *(double *)(v162 + 40);
                                    v277 = *(float64x2_t *)(v162 + 24);
                                    v278 = *(double *)(v162 + 64);
                                    _Q0 = *(float64x2_t *)(v162 + 48);
                                    v280 = *(double *)(v162 + 88);
                                    _Q16 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v162, (int64x2_t)v277);
                                    v282 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q16, 1);
                                    _Q19 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q16.f64[0], 0);
                                    v284 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v162, (int64x2_t)v277);
                                    v285 = vmlaq_laneq_f64(vmulq_n_f64(v284, *(double *)(v162 + 72)), _Q16, *(float64x2_t *)(v162 + 72), 1);
                                    _Q16.f64[0] = v274;
                                    _Q16.f64[1] = _D3;
                                    _Q6 = vmlaq_n_f64(v285, _Q16, v280);
                                    _D7 = *(_QWORD *)(v162 + 80);
                                    __asm { FMLA            D16, D7, V0.D[1] }
                                    v288 = _Q16.f64[0] + v278 * v280;
                                    v289 = (int64x2_t)vextq_s8(_Q19, v282, 8uLL);
                                    v290 = *(int64x2_t *)(v175 + 24);
                                    _Q20 = *(int64x2_t *)(v175 + 48);
                                    v292 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v175, v290);
                                    v985 = vextq_s8((int8x16_t)v292, (int8x16_t)v292, 8uLL).u64[0];
                                    v297 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v175, v290);
                                    v293 = (int8x16_t)vdupq_laneq_s64(_Q20, 1);
                                    v294 = (float64x2_t)vextq_s8((int8x16_t)v297, v293, 8uLL);
                                    v293.i64[0] = *(_QWORD *)(v175 + 88);
                                    v936 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v292, *(double *)(v175 + 72)), v297, *(float64x2_t *)(v175 + 72), 1), v273, *(double *)v293.i64);
                                    _Q19.i64[0] = *(_QWORD *)(v175 + 80);
                                    __asm { FMLA            D21, D19, V20.D[1] }
                                    *(double *)v293.i64 = _D21 + *(double *)(v175 + 64) * *(double *)v293.i64;
                                    v935 = (float64x2_t)v293;
                                    v296 = (float64x2_t)_Q19.u64[0];
                                    v296.f64[0] = *(float64_t *)(v175 + 48);
                                    v297.f64[1] = v294.f64[0];
                                    v298 = (float64x2_t)*(unint64_t *)&v294.f64[1];
                                    v299 = (float64x2_t)*(unint64_t *)(v175 + 64);
                                    v294.f64[0] = *((float64_t *)v145 + 3);
                                    v300 = *(int64x2_t *)(v145 + 8);
                                    v301 = *((int64x2_t *)v145 + 2);
                                    _Q27 = *(float64x2_t *)(v145 + 56);
                                    _Q25 = (float64x2_t)vzip1q_s64(v300, v301);
                                    v304 = (float64x2_t)vzip2q_s64(v300, v301);
                                    v294.f64[1] = *((float64_t *)v145 + 6);
                                    v305 = *((double *)v145 + 12);
                                    _Q29 = *((float64x2_t *)v145 + 5);
                                    v307 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, _Q29.f64[0]), v304, _Q29, 1);
                                    _Q30 = vmulq_f64(_Q27, _Q29);
                                    _Q29.f64[0] = *((float64_t *)v145 + 11);
                                    __asm { FMLA            D30, D29, V27.D[1] }
                                    _Q30.f64[0] = _Q30.f64[0] + *((double *)v145 + 9) * v305;
                                    _Q29.f64[0] = *((float64_t *)v145 + 7);
                                    v309 = vextq_s8((int8x16_t)v304, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q27, 1), 8uLL);
                                    *(_QWORD *)&v304.f64[1] = v309.i64[0];
                                    _Q27.f64[0] = *((float64_t *)v145 + 9);
                                    v310.f64[1] = *((float64_t *)&v937 + 1);
                                    *(_QWORD *)&v310.f64[0] = *(_OWORD *)&vnegq_f64(_Q30);
                                    v311 = vmlaq_n_f64(v307, v294, v305);
                                    v992 = *((double *)v149 + 9);
                                    v312 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v284, v289), _Q6.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v284, v289), _Q6, 1), _Q0, v288);
                                    v313 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, v275.f64[0]), v304, v275, 1);
                                    v314 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q29.f64[0], v275.f64[0]), (float64x2_t)v309.u64[1], v275, 1);
                                    v315 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, v277.f64[0]), v304, v277, 1);
                                    v316 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q29.f64[0], v277.f64[0]), (float64x2_t)v309.u64[1], v277, 1);
                                    v317 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, _Q0.f64[0]), v304, _Q0, 1);
                                    v318 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q29.f64[0], _Q0.f64[0]), (float64x2_t)v309.u64[1], _Q0, 1);
                                    v319 = *(int8x16_t *)(v149 + 40);
                                    v320 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, v312.f64[0]), v304, v312, 1);
                                    v321 = *(int8x16_t *)(v149 + 24);
                                    v322 = *(int8x16_t *)(v149 + 8);
                                    __asm { FMLA            D25, D3, V6.D[1] }
                                    v978 = *(int8x16_t *)(v149 + 56);
                                    *(_QWORD *)&v966 = vextq_s8(v978, v978, 8uLL).u64[0];
                                    v323 = _Q25.f64[0] + v278 * v288;
                                    *(_QWORD *)&v915 = vextq_s8(v319, v319, 8uLL).u64[0];
                                    *(_QWORD *)&v324 = vextq_s8(v321, v321, 8uLL).u64[0];
                                    *(_QWORD *)&v325 = vextq_s8(v322, v322, 8uLL).u64[0];
                                    v326 = vmlaq_n_f64(v318, (float64x2_t)*(unint64_t *)&_Q27.f64[0], v278);
                                    v917 = *((double *)v149 + 12);
                                    v327 = *((int8x16_t *)v149 + 5);
                                    v328 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(v313, v294, v274), (float64x2_t)0, v311);
                                    v329 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(v315, v294, _D3), (float64x2_t)0, v311);
                                    v330 = (int8x16_t)vmlsq_f64(vmlaq_n_f64(v317, v294, v278), (float64x2_t)0, v311);
                                    v337 = vsubq_f64(vmlaq_n_f64(v320, v294, v323), v311);
                                    *(_QWORD *)&v972 = vextq_s8(v327, v327, 8uLL).u64[0];
                                    v331 = (float64x2_t)vzip1q_s64(v328, v329);
                                    v933 = vmlaq_f64(vmlaq_n_f64(v314, (float64x2_t)*(unint64_t *)&_Q27.f64[0], v274), (float64x2_t)0, v310);
                                    v934 = (float64x2_t)v328;
                                    v931 = vmlaq_f64(vmlaq_n_f64(v316, (float64x2_t)*(unint64_t *)&_Q27.f64[0], _D3), (float64x2_t)0, v310);
                                    v932 = (float64x2_t)v329;
                                    v332 = (int8x16_t)vzip2q_s64(v328, v329);
                                    v333 = (float64x2_t)vzip1q_s64((int64x2_t)v933, (int64x2_t)v931);
                                    *(_QWORD *)&__p[64] = v330.i64[1];
                                    *(_QWORD *)&__p[16] = v330.i64[0];
                                    *(float64x2_t *)__p = v331;
                                    v943 = vmlaq_f64(v326, (float64x2_t)0, v310);
                                    *(float64_t *)&__p[112] = v943.f64[0];
                                    *(int8x16_t *)&__p[48] = v332;
                                    *(float64x2_t *)&__p[96] = v333;
                                    v334 = *(_QWORD *)&v337.f64[1];
                                    __srca = vaddq_f64(v310, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q29.f64[0], v312.f64[0]), (float64x2_t)v309.u64[1], v312, 1), (float64x2_t)*(unint64_t *)&_Q27.f64[0], v323));
                                    *(float64x2_t *)__dsta = v337;
                                    v335 = *(_QWORD *)&v337.f64[0];
                                    v336 = vextq_s8((int8x16_t)v331, (int8x16_t)v331, 8uLL).u64[0];
                                    *(_QWORD *)&v337.f64[0] = vextq_s8(v332, v332, 8uLL).u64[0];
                                    v1006 = (float64x2_t)v330;
                                    v338 = vextq_s8(v330, v330, 8uLL).u64[0];
                                    v339 = vextq_s8((int8x16_t)v333, (int8x16_t)v333, 8uLL).u64[0];
                                    do
                                    {
                                      *(_QWORD *)&__p[8 * v271 + 144] = 0;
                                      v340 = v272 < 2;
                                      if (v272 < 2)
                                        ++v272;
                                      else
                                        v272 = 0;
                                      if (v340)
                                        ++v271;
                                      else
                                        v271 += 4;
                                    }
                                    while (v271 != 18);
                                    *(_QWORD *)&v341.f64[0] = v330.i64[0];
                                    *(_QWORD *)&v341.f64[1] = v332.i64[0];
                                    v332.i64[1] = *(_QWORD *)&v337.f64[0];
                                    *(_QWORD *)&v337.f64[1] = v338;
                                    *(_QWORD *)&v331.f64[1] = v336;
                                    *(_QWORD *)&v333.f64[1] = v339;
                                    v342 = vnegq_f64(v331);
                                    v343 = (int8x16_t)vnegq_f64(v333);
                                    v344 = (int64x2_t)vnegq_f64(v943);
                                    v345 = vdupq_laneq_s64((int64x2_t)v343, 1);
                                    v346 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v342.f64[0], 0);
                                    v346.i64[0] = v344.i64[0];
                                    v347 = vnegq_f64(v337);
                                    v348 = (float64x2_t)vdupq_n_s64(*(unint64_t *)&__srca.f64[0]);
                                    v349 = vnegq_f64(v341);
                                    v350 = (float64x2_t)vdupq_n_s64(v335);
                                    v351 = (float64x2_t)vdupq_n_s64(v334);
                                    v352 = (float64x2_t)vextq_s8((int8x16_t)v349, (int8x16_t)v347, 8uLL);
                                    *(float64x2_t *)&__p[24] = vmlaq_f64(vmulq_f64(v333, v351), v352, v348);
                                    v353 = (float64x2_t)vextq_s8((int8x16_t)v347, v343, 8uLL);
                                    *(_QWORD *)&__p[40] = *(_OWORD *)&vmlaq_f64(vmulq_f64(v943, v351), v353, __srca);
                                    v354 = (float64x2_t)vzip1q_s64(v345, v344);
                                    v355 = (float64x2_t)vextq_s8((int8x16_t)v342, (int8x16_t)v349, 8uLL);
                                    *(_QWORD *)&__p[88] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(*(float64x2_t *)__dsta, v354, 1), __srca, v355, 1);
                                    *(float64x2_t *)&__p[72] = vmlsq_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v353, (int8x16_t)v354, 8uLL), v350), (float64x2_t)vextq_s8(v346, (int8x16_t)v355, 8uLL), v348);
                                    *(float64x2_t *)&__p[120] = vmlsq_f64(vmulq_f64(v342, v351), v352, v350);
                                    *(_QWORD *)&__p[136] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v349, v351), *(float64x2_t *)__dsta, v347, 1);
                                    *(float64_t *)&__p[184] = v1006.f64[0];
                                    *(float64x2_t *)&__p[168] = v331;
                                    *(_QWORD *)&__p[232] = v338;
                                    *(int8x16_t *)&__p[216] = v332;
                                    *(float64_t *)&__p[280] = v943.f64[0];
                                    *(float64x2_t *)&__p[264] = v333;
                                    v356 = *(float64x2_t *)(v136 + 224);
                                    v954 = *(float64x2_t *)(v136 + 208);
                                    v357 = *v167;
                                    v952 = v167[2];
                                    v358 = v167[3];
                                    v359 = v167[6];
                                    v921 = v167[7];
                                    v922 = v167[1];
                                    v360 = v167[9];
                                    v946 = v167[8];
                                    v930 = *(float64x2_t *)(v136 + 96);
                                    v925 = *(float64x2_t *)(v136 + 80);
                                    v361 = *(float64x2_t *)(v136 + 144);
                                    v928 = *(float64x2_t *)(v136 + 112);
                                    v929 = *(float64x2_t *)(v136 + 128);
                                    v363 = *(float64x2_t *)(v136 + 160);
                                    v362 = *(float64x2_t *)(v136 + 176);
                                    v1038 = 0;
                                    v1039 = 0;
                                    v1041 = 0;
                                    v1040 = 0;
                                    v364 = (char *)v1056;
                                    v365 = v167;
                                    v366 = (char *)*((_QWORD *)&v1056 + 1);
                                    v367 = *(float64x2_t *)(v136 + 192);
                                    v368 = *(float64x2_t *)(v136 + 240);
                                    v919 = *(float64x2_t *)(v136 + 256);
                                    v369 = v365[4];
                                    v920 = v365[5];
                                    v370 = v365[10];
                                    v923 = v365[11];
                                    v927 = *(float64x2_t *)(v136 + 64);
                                    v914 = *(float64x2_t *)(v136 + 48);
                                    if ((_QWORD)v1056 == *((_QWORD *)&v1056 + 1))
                                    {
                                      v371 = (char *)v1056;
                                    }
                                    else
                                    {
                                      v371 = (char *)*((_QWORD *)&v1056 + 1);
                                      if (*(_QWORD *)(*((_QWORD *)&v1056 + 1) - 888) >= (unint64_t)v944)
                                      {
                                        v372 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*((_QWORD *)&v1056 + 1) - v1056) >> 3);
                                        v373 = (char *)v1056;
                                        do
                                        {
                                          v374 = v372 >> 1;
                                          v375 = (unint64_t *)&v373[888 * (v372 >> 1)];
                                          v376 = *v375;
                                          v377 = (char *)(v375 + 111);
                                          v372 += ~(v372 >> 1);
                                          if (v376 < v944)
                                            v373 = v377;
                                          else
                                            v372 = v374;
                                        }
                                        while (v372);
                                        v371 = (char *)*((_QWORD *)&v1056 + 1);
                                        if (v373 != *((char **)&v1056 + 1))
                                        {
                                          v371 = v373;
                                          if (*(_QWORD *)v373 == v944)
                                          {
LABEL_386:
                                            v543 = 1;
                                            v544 = v1039;
                                            if (!v1039)
                                              goto LABEL_392;
LABEL_389:
                                            v545 = (unint64_t *)&v544->__shared_owners_;
                                            do
                                              v546 = __ldaxr(v545);
                                            while (__stlxr(v546 - 1, v545));
                                            if (v546)
                                            {
LABEL_392:
                                              if (v543)
                                              {
LABEL_393:
                                                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/SubmapsAlignmentOptimizer.cpp", 226, (uint64_t)"result", 6, (uint64_t)"Failed to add the factor.", 25, (void (*)(void **))sub_21023DDB0))
                                                {
                                                  goto LABEL_813;
                                                }
                                              }
                                            }
                                            else
                                            {
                                              ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
                                              std::__shared_weak_count::__release_weak(v544);
                                              if (v543)
                                                goto LABEL_393;
                                            }
                                            ++v944;
                                            goto LABEL_395;
                                          }
                                        }
                                      }
                                    }
                                    v378 = v169;
                                    *(_QWORD *)&v292.f64[1] = v985;
                                    v913 = v361;
                                    v379 = vmlaq_n_f64(vmulq_n_f64(v292, *(double *)v322.i64), v297, v325);
                                    v380 = vmlaq_n_f64(vmulq_n_f64(v296, *(double *)v322.i64), v298, v325);
                                    v381 = vmlaq_n_f64(vmulq_n_f64(v292, v324), v297, *(double *)v319.i64);
                                    v382 = vmlaq_n_f64(vmulq_n_f64(v296, v324), v298, *(double *)v319.i64);
                                    v383 = vmlaq_n_f64(vmulq_n_f64(v292, *(double *)v978.i64), v297, v966);
                                    v384 = vmlaq_n_f64(vmulq_n_f64(v296, *(double *)v978.i64), v298, v966);
                                    v385 = vmlaq_n_f64(vmulq_n_f64(v292, *(double *)v327.i64), v297, v972);
                                    v386 = vmlaq_n_f64(vmulq_n_f64(v296, *(double *)v327.i64), v298, v972);
                                    v961 = vmlaq_n_f64(v379, v273, *(double *)v321.i64);
                                    v967 = vmlaq_n_f64(v380, v299, *(double *)v321.i64);
                                    v387 = v917;
                                    v973 = vmlaq_n_f64(v381, v273, v915);
                                    v979 = vmlaq_n_f64(v382, v299, v915);
                                    v986 = vmlaq_n_f64(v383, v273, v992);
                                    v993 = vmlaq_n_f64(v384, v299, v992);
                                    v916 = vmlaq_n_f64(v385, v273, v917);
                                    v918 = v363;
                                    *(_QWORD *)&v388.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&__p[96], 1).u64[0];
                                    v388.f64[1] = *(float64_t *)&__p[152];
                                    *(_QWORD *)&v389.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&__p[192], 1).u64[0];
                                    v389.f64[1] = *(float64_t *)&__p[248];
                                    v912 = vmlaq_n_f64(v386, v299, v387);
                                    v390 = (float64x2_t)vzip1q_s64(*(int64x2_t *)__p, *(int64x2_t *)&__p[48]);
                                    v391 = (float64x2_t)vzip2q_s64(*(int64x2_t *)__p, *(int64x2_t *)&__p[48]);
                                    v392 = vmlaq_laneq_f64(vmulq_n_f64(v390, v362.f64[0]), v391, v362, 1);
                                    v393 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&__p[96], *(int64x2_t *)&__p[144]);
                                    v394 = vmlaq_laneq_f64(vmulq_n_f64(v393, v362.f64[0]), v388, v362, 1);
                                    v395 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&__p[192], *(int64x2_t *)&__p[240]);
                                    v396 = vmlaq_laneq_f64(vmulq_n_f64(v395, v362.f64[0]), v389, v362, 1);
                                    v397 = vmlaq_laneq_f64(vmulq_n_f64(v390, v356.f64[0]), v391, v356, 1);
                                    v398 = vmlaq_laneq_f64(vmulq_n_f64(v393, v356.f64[0]), v388, v356, 1);
                                    v399 = vmlaq_laneq_f64(vmulq_n_f64(v395, v356.f64[0]), v389, v356, 1);
                                    v400 = vmlaq_laneq_f64(vmulq_n_f64(v390, v357.f64[0]), v391, v357, 1);
                                    v401 = vmlaq_laneq_f64(vmulq_n_f64(v393, v357.f64[0]), v388, v357, 1);
                                    v402 = vmlaq_laneq_f64(vmulq_n_f64(v395, v357.f64[0]), v389, v357, 1);
                                    v403 = vmlaq_laneq_f64(vmulq_n_f64(v390, v358.f64[0]), v391, v358, 1);
                                    v404 = vmlaq_laneq_f64(vmulq_n_f64(v393, v358.f64[0]), v388, v358, 1);
                                    v405 = vmlaq_laneq_f64(vmulq_n_f64(v395, v358.f64[0]), v389, v358, 1);
                                    v406 = vmlaq_laneq_f64(vmulq_n_f64(v390, v359.f64[0]), v391, v359, 1);
                                    v407 = vmlaq_laneq_f64(vmulq_n_f64(v393, v359.f64[0]), v388, v359, 1);
                                    v408 = vmlaq_laneq_f64(vmulq_n_f64(v395, v359.f64[0]), v389, v359, 1);
                                    v409 = vmlaq_laneq_f64(vmulq_n_f64(v390, v360.f64[0]), v391, v360, 1);
                                    *(_QWORD *)&v391.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&__p[112], 1).u64[0];
                                    v391.f64[1] = *(float64_t *)&__p[168];
                                    v410 = vmlaq_laneq_f64(vmulq_n_f64(v393, v360.f64[0]), v388, v360, 1);
                                    *(_QWORD *)&v411.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&__p[208], 1).u64[0];
                                    v411.f64[1] = *(float64_t *)&__p[264];
                                    v412 = vmlaq_laneq_f64(vmulq_n_f64(v395, v360.f64[0]), v389, v360, 1);
                                    v413 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&__p[16], *(int64x2_t *)&__p[64]);
                                    v414 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&__p[16], *(int64x2_t *)&__p[64]);
                                    v415 = vmlaq_laneq_f64(vmlaq_n_f64(v392, v413, v367.f64[0]), v414, v367, 1);
                                    v416 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&__p[112], *(int64x2_t *)&__p[160]);
                                    v417 = vmlaq_laneq_f64(vmlaq_n_f64(v394, v416, v367.f64[0]), v391, v367, 1);
                                    v418 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&__p[208], *(int64x2_t *)&__p[256]);
                                    v419 = vmlaq_laneq_f64(vmlaq_n_f64(v396, v418, v367.f64[0]), v411, v367, 1);
                                    v420 = vmlaq_laneq_f64(vmlaq_n_f64(v397, v413, v368.f64[0]), v414, v368, 1);
                                    v421 = vmlaq_laneq_f64(vmlaq_n_f64(v398, v416, v368.f64[0]), v391, v368, 1);
                                    v422 = vmlaq_laneq_f64(vmlaq_n_f64(v399, v418, v368.f64[0]), v411, v368, 1);
                                    v423 = vmlaq_laneq_f64(vmlaq_n_f64(v400, v413, v922.f64[0]), v414, v922, 1);
                                    v424 = vmlaq_laneq_f64(vmlaq_n_f64(v401, v416, v922.f64[0]), v391, v922, 1);
                                    v425 = vmlaq_laneq_f64(vmlaq_n_f64(v403, v413, v369.f64[0]), v414, v369, 1);
                                    v426 = vmlaq_laneq_f64(vmlaq_n_f64(v404, v416, v369.f64[0]), v391, v369, 1);
                                    v427 = vmlaq_laneq_f64(vmlaq_n_f64(v405, v418, v369.f64[0]), v411, v369, 1);
                                    v428 = vmlaq_laneq_f64(vmlaq_n_f64(v406, v413, v921.f64[0]), v414, v921, 1);
                                    v429 = vmlaq_laneq_f64(vmlaq_n_f64(v407, v416, v921.f64[0]), v391, v921, 1);
                                    v430 = vmlaq_laneq_f64(vmlaq_n_f64(v409, v413, v370.f64[0]), v414, v370, 1);
                                    v431 = vmlaq_laneq_f64(vmlaq_n_f64(v410, v416, v370.f64[0]), v391, v370, 1);
                                    *(_QWORD *)&v432.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&__p[128], 1).u64[0];
                                    v432.f64[1] = *(float64_t *)&__p[184];
                                    *(_QWORD *)&v413.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&__p[224], 1).u64[0];
                                    v413.f64[1] = *(float64_t *)&__p[280];
                                    v433 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&__p[32], *(int64x2_t *)&__p[80]);
                                    v434 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&__p[32], *(int64x2_t *)&__p[80]);
                                    v435 = vmlaq_laneq_f64(vmlaq_n_f64(v415, v433, v954.f64[0]), v434, v954, 1);
                                    v436 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&__p[128], *(int64x2_t *)&__p[176]);
                                    v437 = vmlaq_laneq_f64(vmlaq_n_f64(v417, v436, v954.f64[0]), v432, v954, 1);
                                    v438 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&__p[224], *(int64x2_t *)&__p[272]);
                                    v439 = vmlaq_laneq_f64(vmlaq_n_f64(v419, v438, v954.f64[0]), v413, v954, 1);
                                    v440 = vmlaq_laneq_f64(vmlaq_n_f64(v420, v433, v919.f64[0]), v434, v919, 1);
                                    v441 = vmlaq_laneq_f64(vmlaq_n_f64(v421, v436, v919.f64[0]), v432, v919, 1);
                                    v442 = vmlaq_laneq_f64(vmlaq_n_f64(v422, v438, v919.f64[0]), v413, v919, 1);
                                    v443 = vmlaq_laneq_f64(vmlaq_n_f64(v423, v433, v952.f64[0]), v434, v952, 1);
                                    v444 = vmlaq_laneq_f64(vmlaq_n_f64(v424, v436, v952.f64[0]), v432, v952, 1);
                                    v445 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v402, v418, v922.f64[0]), v411, v922, 1), v438, v952.f64[0]), v413, v952, 1);
                                    v446 = vmlaq_laneq_f64(vmlaq_n_f64(v425, v433, v920.f64[0]), v434, v920, 1);
                                    v447 = vmlaq_laneq_f64(vmlaq_n_f64(v426, v436, v920.f64[0]), v432, v920, 1);
                                    v448 = vmlaq_laneq_f64(vmlaq_n_f64(v427, v438, v920.f64[0]), v413, v920, 1);
                                    v449 = vmlaq_laneq_f64(vmlaq_n_f64(v428, v433, v946.f64[0]), v434, v946, 1);
                                    v450 = vmlaq_laneq_f64(vmlaq_n_f64(v429, v436, v946.f64[0]), v432, v946, 1);
                                    v451 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v408, v418, v921.f64[0]), v411, v921, 1), v438, v946.f64[0]), v413, v946, 1);
                                    v452 = vmlaq_laneq_f64(vmlaq_n_f64(v430, v433, v923.f64[0]), v434, v923, 1);
                                    v453 = vmlaq_laneq_f64(vmlaq_n_f64(v431, v436, v923.f64[0]), v432, v923, 1);
                                    v454 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v412, v418, v370.f64[0]), v411, v370, 1), v438, v923.f64[0]), v413, v923, 1);
                                    v924 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v435, *(double *)__p), v440, *(float64x2_t *)__p, 1), v443, *(double *)&__p[16]), v446, *(float64x2_t *)&__p[16], 1), v449, *(double *)&__p[32]), v452, *(float64x2_t *)&__p[32], 1);
                                    v940 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v437, *(double *)__p), v441, *(float64x2_t *)__p, 1), v444, *(double *)&__p[16]), v447, *(float64x2_t *)&__p[16], 1), v450, *(double *)&__p[32]), v453, *(float64x2_t *)&__p[32], 1);
                                    v942 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v439, *(double *)__p), v442, *(float64x2_t *)__p, 1), v445, *(double *)&__p[16]), v448, *(float64x2_t *)&__p[16], 1), v451, *(double *)&__p[32]), v454, *(float64x2_t *)&__p[32], 1);
                                    v455 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v435, *(double *)&__p[48]), v440, *(float64x2_t *)&__p[48], 1), v443, *(double *)&__p[64]), v446, *(float64x2_t *)&__p[64], 1), v449, *(double *)&__p[80]), v452, *(float64x2_t *)&__p[80], 1);
                                    v953 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v437, *(double *)&__p[48]), v441, *(float64x2_t *)&__p[48], 1), v444, *(double *)&__p[64]), v447, *(float64x2_t *)&__p[64], 1), v450, *(double *)&__p[80]), v453, *(float64x2_t *)&__p[80], 1);
                                    v955 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v439, *(double *)&__p[48]), v442, *(float64x2_t *)&__p[48], 1), v445, *(double *)&__p[64]), v448, *(float64x2_t *)&__p[64], 1), v451, *(double *)&__p[80]), v454, *(float64x2_t *)&__p[80], 1);
                                    v456 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v435, *(double *)&__p[96]), v440, *(float64x2_t *)&__p[96], 1), v443, *(double *)&__p[112]), v446, *(float64x2_t *)&__p[112], 1), v449, *(double *)&__p[128]), v452, *(float64x2_t *)&__p[128], 1);
                                    v926 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v437, *(double *)&__p[96]), v441, *(float64x2_t *)&__p[96], 1), v444, *(double *)&__p[112]), v447, *(float64x2_t *)&__p[112], 1), v450, *(double *)&__p[128]), v453, *(float64x2_t *)&__p[128], 1);
                                    v958 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v439, *(double *)&__p[96]), v442, *(float64x2_t *)&__p[96], 1), v445, *(double *)&__p[112]), v448, *(float64x2_t *)&__p[112], 1), v451, *(double *)&__p[128]), v454, *(float64x2_t *)&__p[128], 1);
                                    v457 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v435, *(double *)&__p[144]), v440, *(float64x2_t *)&__p[144], 1), v443, *(double *)&__p[160]), v446, *(float64x2_t *)&__p[160], 1), v449, *(double *)&__p[176]), v452, *(float64x2_t *)&__p[176], 1);
                                    v458 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v437, *(double *)&__p[144]), v441, *(float64x2_t *)&__p[144], 1), v444, *(double *)&__p[160]), v447, *(float64x2_t *)&__p[160], 1), v450, *(double *)&__p[176]), v453, *(float64x2_t *)&__p[176], 1);
                                    v956 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v439, *(double *)&__p[144]), v442, *(float64x2_t *)&__p[144], 1), v445, *(double *)&__p[160]), v448, *(float64x2_t *)&__p[160], 1), v451, *(double *)&__p[176]), v454, *(float64x2_t *)&__p[176], 1);
                                    v459 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v435, *(double *)&__p[192]), v440, *(float64x2_t *)&__p[192], 1), v443, *(double *)&__p[208]), v446, *(float64x2_t *)&__p[208], 1), v449, *(double *)&__p[224]), v452, *(float64x2_t *)&__p[224], 1);
                                    v460 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v437, *(double *)&__p[192]), v441, *(float64x2_t *)&__p[192], 1), v444, *(double *)&__p[208]), v447, *(float64x2_t *)&__p[208], 1), v450, *(double *)&__p[224]), v453, *(float64x2_t *)&__p[224], 1);
                                    v461 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v439, *(double *)&__p[192]), v442, *(float64x2_t *)&__p[192], 1), v445, *(double *)&__p[208]), v448, *(float64x2_t *)&__p[208], 1), v451, *(double *)&__p[224]), v454, *(float64x2_t *)&__p[224], 1);
                                    v462 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v435, *(double *)&__p[240]), v440, *(float64x2_t *)&__p[240], 1), v443, *(double *)&__p[256]), v446, *(float64x2_t *)&__p[256], 1), v449, *(double *)&__p[272]), v452, *(float64x2_t *)&__p[272], 1);
                                    v463 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v437, *(double *)&__p[240]), v441, *(float64x2_t *)&__p[240], 1), v444, *(double *)&__p[256]), v447, *(float64x2_t *)&__p[256], 1), v450, *(double *)&__p[272]), v453, *(float64x2_t *)&__p[272], 1);
                                    v464 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v439, *(double *)&__p[240]), v442, *(float64x2_t *)&__p[240], 1), v445, *(double *)&__p[256]), v448, *(float64x2_t *)&__p[256], 1), v451, *(double *)&__p[272]), v454, *(float64x2_t *)&__p[272], 1);
                                    v443.f64[1] = *((float64_t *)&v937 + 1);
                                    *(_QWORD *)&v443.f64[0] = *(_OWORD *)&vnegq_f64(v935);
                                    v962 = vmlsq_f64(v961, (float64x2_t)0, v936);
                                    v974 = vmlsq_f64(v973, (float64x2_t)0, v936);
                                    v987 = vmlsq_f64(v986, (float64x2_t)0, v936);
                                    v968 = vmlaq_f64(v967, (float64x2_t)0, v443);
                                    v980 = vmlaq_f64(v979, (float64x2_t)0, v443);
                                    v994 = vmlaq_f64(v993, (float64x2_t)0, v443);
                                    v941 = vaddq_f64(v443, v912);
                                    v465 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v934, v914.f64[0]), v932, v914, 1), v1006, v927.f64[0]), *(float64x2_t *)__dsta, v927, 1);
                                    v939 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v933, v914.f64[0]), v931, v914, 1), v943, v927.f64[0]), __srca, v927, 1);
                                    v441.f64[0] = sqrt(v924.f64[0]);
                                    v432.f64[0] = sqrt(*(double *)&v455.i64[1]- *(double *)v455.i64/ v441.f64[0]* (*(double *)v455.i64/ v441.f64[0]));
                                    v447.f64[0] = (v456.f64[1]
                                                 - *(double *)v455.i64 / v441.f64[0] * (v456.f64[0] / v441.f64[0]))
                                                / v432.f64[0];
                                    v947 = v457;
                                    v440.f64[0] = v457.f64[0] / v441.f64[0];
                                    v451.f64[0] = (v457.f64[1]
                                                 - *(double *)v455.i64 / v441.f64[0] * (v457.f64[0] / v441.f64[0]))
                                                / v432.f64[0];
                                    v938 = v458;
                                    v443.f64[0] = v458.f64[0]
                                                - v456.f64[0] / v441.f64[0] * (v457.f64[0] / v441.f64[0])
                                                - v447.f64[0] * v451.f64[0];
                                    v457.f64[0] = sqrt(v926.f64[0]- v456.f64[0] / v441.f64[0] * (v456.f64[0] / v441.f64[0])- v447.f64[0] * v447.f64[0]);
                                    v450.f64[0] = v443.f64[0] / v457.f64[0];
                                    v454.f64[0] = (*(double *)&v459.i64[1]
                                                 - *(double *)v455.i64
                                                 / v441.f64[0]
                                                 * (*(double *)v459.i64
                                                  / v441.f64[0]))
                                                / v432.f64[0];
                                    v452.f64[0] = (*(double *)v460.i64
                                                 - v456.f64[0] / v441.f64[0] * (*(double *)v459.i64 / v441.f64[0])
                                                 - v447.f64[0] * v454.f64[0])
                                                / v457.f64[0];
                                    v458.f64[0] = sqrt(v458.f64[1]- v440.f64[0] * v440.f64[0]- v451.f64[0] * v451.f64[0]- v450.f64[0] * v450.f64[0]);
                                    v438.f64[0] = (*(double *)&v460.i64[1]
                                                 - v440.f64[0] * (*(double *)v459.i64 / v441.f64[0])
                                                 - v451.f64[0] * v454.f64[0]
                                                 - v443.f64[0] / v457.f64[0] * v452.f64[0])
                                                / v458.f64[0];
                                    v443.f64[0] = (*(double *)&v462.i64[1]
                                                 - *(double *)v455.i64
                                                 / v441.f64[0]
                                                 * (*(double *)v462.i64
                                                  / v441.f64[0]))
                                                / v432.f64[0];
                                    v466 = (*(double *)v463.i64
                                          - v456.f64[0] / v441.f64[0] * (*(double *)v462.i64 / v441.f64[0])
                                          - v447.f64[0] * v443.f64[0])
                                         / v457.f64[0];
                                    v433.f64[0] = (*(double *)&v463.i64[1]
                                                 - v440.f64[0] * (*(double *)v462.i64 / v441.f64[0])
                                                 - v451.f64[0] * v443.f64[0]
                                                 - v450.f64[0] * v466)
                                                / v458.f64[0];
                                    *(float64_t *)&object[16] = v441.f64[0];
                                    *(double *)&object[64] = *(double *)v455.i64 / v441.f64[0];
                                    *(float64_t *)&object[72] = v432.f64[0];
                                    *(double *)&object[112] = v456.f64[0] / v441.f64[0];
                                    *(double *)&object[120] = v447.f64[0];
                                    *(float64_t *)&object[128] = v457.f64[0];
                                    *(float64_t *)&object[160] = v440.f64[0];
                                    *(float64_t *)&object[168] = v451.f64[0];
                                    *(float64_t *)&object[176] = v450.f64[0];
                                    *(float64_t *)&object[184] = v458.f64[0];
                                    *(double *)&object[208] = *(double *)v459.i64 / v441.f64[0];
                                    *(double *)&object[216] = v454.f64[0];
                                    *(double *)&object[224] = v452.f64[0];
                                    *(float64_t *)&object[232] = v438.f64[0];
                                    *(_QWORD *)&object[240] = sqrt(*(double *)v461.i64- *(double *)v459.i64/ v441.f64[0]* (*(double *)v459.i64/ v441.f64[0])- v454.f64[0] * v454.f64[0]- v452.f64[0] * v452.f64[0]- v438.f64[0] * v438.f64[0]);
                                    *(double *)&object[256] = *(double *)v462.i64 / v441.f64[0];
                                    *(double *)&object[264] = v443.f64[0];
                                    *(double *)&object[272] = v466;
                                    *(double *)&object[280] = v433.f64[0];
                                    *(double *)&object[288] = (*(double *)v464.i64
                                                             - *(double *)v459.i64
                                                             / v441.f64[0]
                                                             * (*(double *)v462.i64
                                                              / v441.f64[0])
                                                             - v454.f64[0] * v443.f64[0]
                                                             - v452.f64[0] * v466
                                                             - v438.f64[0] * v433.f64[0])
                                                            / *(double *)&object[240];
                                    *(_QWORD *)&object[296] = sqrt(*(double *)&v464.i64[1]- *(double *)v462.i64/ v441.f64[0]* (*(double *)v462.i64/ v441.f64[0])- v443.f64[0] * v443.f64[0]- v466 * v466- v433.f64[0] * v433.f64[0]- *(double *)&object[288] * *(double *)&object[288]);
                                    v467 = (int8x16_t)v924;
                                    v467.i64[1] = vextq_s8(v467, v467, 8uLL).u64[0];
                                    v468 = (int8x16_t)v940;
                                    v468.i64[1] = vextq_s8(v468, v468, 8uLL).u64[0];
                                    v1206[0] = v467;
                                    v1206[1] = v468;
                                    v469 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v934, v925.f64[0]), v932, v925, 1), v1006, v930.f64[0]), *(float64x2_t *)__dsta, v930, 1);
                                    v470 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v933, v925.f64[0]), v931, v925, 1), v943, v930.f64[0]), __srca, v930, 1);
                                    v471 = (int8x16_t)v942;
                                    v471.i64[1] = vextq_s8(v471, v471, 8uLL).u64[0];
                                    v472 = v471;
                                    v455.i64[1] = vextq_s8(v455, v455, 8uLL).u64[0];
                                    v473 = (int8x16_t)v953;
                                    v473.i64[1] = vextq_s8(v473, v473, 8uLL).u64[0];
                                    v1206[2] = v472;
                                    v1206[3] = v455;
                                    v474 = (int8x16_t)v955;
                                    v474.i64[1] = vextq_s8(v474, v474, 8uLL).u64[0];
                                    v1206[4] = v473;
                                    v1206[5] = v474;
                                    v475 = (int8x16_t)v456;
                                    v475.i64[1] = vextq_s8(v475, v475, 8uLL).u64[0];
                                    v476 = (int8x16_t)v926;
                                    v476.i64[1] = vextq_s8(v476, v476, 8uLL).u64[0];
                                    v477 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v934, v928.f64[0]), v932, v928, 1), v1006, v929.f64[0]), *(float64x2_t *)__dsta, v929, 1);
                                    v950 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v933, v928.f64[0]), v931, v928, 1), v943, v929.f64[0]), __srca, v929, 1);
                                    v478 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v934, v913.f64[0]), v932, v913, 1), v1006, v918.f64[0]), *(float64x2_t *)__dsta, v918, 1);
                                    v479 = (int8x16_t)v958;
                                    v948 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v933, v913.f64[0]), v931, v913, 1), v943, v918.f64[0]), __srca, v918, 1);
                                    v480 = (int8x16_t)v938;
                                    v481 = (int8x16_t)v947;
                                    v482 = vsubq_f64(v916, v936);
                                    v479.i64[1] = vextq_s8(v479, v479, 8uLL).u64[0];
                                    v1206[6] = v475;
                                    v1206[7] = v476;
                                    *(_QWORD *)object = v944;
                                    memset(&object[24], 0, 40);
                                    memset(&object[80], 0, 32);
                                    memset(&object[136], 0, 24);
                                    *(_QWORD *)&object[192] = 0;
                                    *(_QWORD *)&object[200] = 0;
                                    *(_QWORD *)&object[248] = 0;
                                    v481.i64[1] = vextq_s8(v481, v481, 8uLL).u64[0];
                                    v1206[8] = v479;
                                    v1206[9] = v481;
                                    v480.i64[1] = vextq_s8(v480, v480, 8uLL).u64[0];
                                    *(_QWORD *)&v450.f64[0] = v956.i64[0];
                                    *(_QWORD *)&v450.f64[1] = vextq_s8(v956, v956, 8uLL).u64[0];
                                    v1206[10] = v480;
                                    v1206[11] = v450;
                                    v459.i64[1] = vextq_s8(v459, v459, 8uLL).u64[0];
                                    v460.i64[1] = vextq_s8(v460, v460, 8uLL).u64[0];
                                    v1206[12] = v459;
                                    v1206[13] = v460;
                                    v461.i64[1] = vextq_s8(v461, v461, 8uLL).u64[0];
                                    v462.i64[1] = vextq_s8(v462, v462, 8uLL).u64[0];
                                    v463.i64[1] = vextq_s8(v463, v463, 8uLL).u64[0];
                                    v464.i64[1] = vextq_s8(v464, v464, 8uLL).u64[0];
                                    v1206[14] = v461;
                                    v1206[15] = v462;
                                    v1206[16] = v463;
                                    v1206[17] = v464;
                                    v1207 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v465, v962.f64[0]), v469, v962, 1), v477, v968.f64[0]), v478, v968, 1);
                                    v1208 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v939, v962.f64[0]), v470, v962, 1), v950, v968.f64[0]), v948, v968, 1);
                                    v1209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v465, v974.f64[0]), v469, v974, 1), v477, v980.f64[0]), v478, v980, 1);
                                    v1210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v939, v974.f64[0]), v470, v974, 1), v950, v980.f64[0]), v948, v980, 1);
                                    v1211 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v465, v987.f64[0]), v469, v987, 1), v477, v994.f64[0]), v478, v994, 1);
                                    v1212 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v939, v987.f64[0]), v470, v987, 1), v950, v994.f64[0]), v948, v994, 1);
                                    v1213 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v465, v482.f64[0]), v469, v482, 1), v477, v941.f64[0]), v478, v941, 1);
                                    v1214 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v939, v482.f64[0]), v470, v482, 1), v950, v941.f64[0]), v948, v941, 1);
                                    v483 = 1;
                                    v1215 = 1;
                                    v1216 = 0uLL;
                                    v1225 = 0;
                                    v1226 = 0;
                                    v1223 = 0xBFF0000000000000;
                                    v1224 = 0;
                                    v1227 = 0;
                                    v485 = v1049[1];
                                    v484 = v1049[0];
                                    v486 = v1049[1] - v1049[0];
                                    if (v1049[1] != v1049[0])
                                    {
                                      v487 = v486 >> 4;
                                      v488 = v1049[0];
                                      v489 = v486 >> 4;
                                      v490 = v378;
                                      do
                                      {
                                        v491 = v489 >> 1;
                                        v492 = &v488[16 * (v489 >> 1)];
                                        v494 = *(_DWORD *)v492;
                                        v493 = v492 + 16;
                                        v489 += ~(v489 >> 1);
                                        if (v494 < v490)
                                          v488 = v493;
                                        else
                                          v489 = v491;
                                      }
                                      while (v489);
                                      if (v488 != v1049[1] && *(_DWORD *)v488 == v490)
                                      {
                                        v495 = *((_QWORD *)v488 + 1);
                                        *(_QWORD *)&v1216 = v495;
                                        ++*(_DWORD *)(*((_QWORD *)v488 + 1) + 8);
                                        do
                                        {
                                          v496 = v487 >> 1;
                                          v497 = &v484[16 * (v487 >> 1)];
                                          v499 = *(_DWORD *)v497;
                                          v498 = v497 + 16;
                                          v487 += ~(v487 >> 1);
                                          if (v499 < v168)
                                            v484 = v498;
                                          else
                                            v487 = v496;
                                        }
                                        while (v487);
                                        if (v484 == v485 || *(_DWORD *)v484 != v168)
                                        {
                                          if (v495)
                                            --*(_DWORD *)(v495 + 8);
                                        }
                                        else
                                        {
                                          v500 = *((_QWORD *)v484 + 1);
                                          *((_QWORD *)&v1216 + 1) = v500;
                                          ++*(_DWORD *)(*((_QWORD *)v484 + 1) + 8);
                                          if (*(_BYTE *)(v495 + 20) || *(_BYTE *)(v500 + 20))
                                          {
                                            *(_QWORD *)__p = v944;
                                            *(_OWORD *)&__p[8] = *(_OWORD *)object;
                                            memcpy(&__p[24], &object[16], 0x120uLL);
                                            memcpy(&__p[312], v1206, 0x120uLL);
                                            *(float64x2_t *)&__p[664] = v1211;
                                            *(float64x2_t *)&__p[680] = v1212;
                                            *(float64x2_t *)&__p[696] = v1213;
                                            *(float64x2_t *)&__p[712] = v1214;
                                            *(float64x2_t *)&__p[600] = v1207;
                                            *(float64x2_t *)&__p[616] = v1208;
                                            *(float64x2_t *)&__p[632] = v1209;
                                            *(float64x2_t *)&__p[648] = v1210;
                                            __p[728] = 1;
                                            *(_OWORD *)&__p[736] = v1216;
                                            *(_OWORD *)v1015 = v1217;
                                            v1016[0] = v1218;
                                            v1016[1] = v1219;
                                            v1017 = v1220;
                                            v1018[0] = v1221;
                                            v1018[1] = v1222;
                                            v1019 = v1223;
                                            v1020 = v1224;
                                            v1021 = 0uLL;
                                            v1225 = 0;
                                            v1226 = 0;
                                            v1022 = 0;
                                            if (v366 == v371 || *(_QWORD *)v371 != v944)
                                            {
                                              v501 = 0xB195E8EFDB195E8FLL * ((v371 - v364) >> 3);
                                              if ((unint64_t)v366 >= v1057[0])
                                              {
                                                v547 = 0xB195E8EFDB195E8FLL * ((v366 - v364) >> 3) + 1;
                                                if (v547 > 0x49CD42E2049CD4)
                                                  sub_20E867F44();
                                                if (0x632BD1DFB632BD1ELL * ((uint64_t)(v1057[0] - (_QWORD)v364) >> 3) > v547)
                                                  v547 = 0x632BD1DFB632BD1ELL
                                                       * ((uint64_t)(v1057[0] - (_QWORD)v364) >> 3);
                                                if (0xB195E8EFDB195E8FLL * ((uint64_t)(v1057[0] - (_QWORD)v364) >> 3) >= 0x24E6A171024E6ALL)
                                                  v548 = 0x49CD42E2049CD4;
                                                else
                                                  v548 = v547;
                                                v1242[1].__r_.__value_.__l.__size_ = (std::string::size_type)v1057;
                                                if (v548)
                                                {
                                                  if (v548 > 0x49CD42E2049CD4)
                                                    sub_20E877A38();
                                                  v549 = operator new(888 * v548);
                                                }
                                                else
                                                {
                                                  v549 = 0;
                                                }
                                                v562 = (std::string::size_type)v549 + 8 * ((v371 - v364) >> 3);
                                                v1242[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v549;
                                                v1242[0].__r_.__value_.__l.__size_ = v562;
                                                v1242[0].__r_.__value_.__r.__words[2] = v562;
                                                v1242[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v549
                                                                                      + 888 * v548;
                                                if (v501 == v548)
                                                {
                                                  if (v371 - v364 < 1)
                                                  {
                                                    if (v364 == v371)
                                                      v564 = 1;
                                                    else
                                                      v564 = 0x632BD1DFB632BD1ELL * ((v371 - v364) >> 3);
                                                    if (v564 > 0x49CD42E2049CD4)
                                                      sub_20E877A38();
                                                    v565 = operator new(888 * v564);
                                                    v562 = (std::string::size_type)v565 + 888 * (v564 >> 2);
                                                    v1242[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v565;
                                                    v1242[0].__r_.__value_.__l.__size_ = v562;
                                                    v1242[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v565
                                                                                          + 888 * v564;
                                                    if (v549)
                                                      operator delete(v549);
                                                  }
                                                  else
                                                  {
                                                    v563 = v501 + 2;
                                                    if (v501 >= -1)
                                                      v563 = v501 + 1;
                                                    v562 -= 888 * (v563 >> 1);
                                                    v1242[0].__r_.__value_.__l.__size_ = v562;
                                                  }
                                                }
                                                *(_QWORD *)v562 = v944;
                                                *(_OWORD *)(v562 + 8) = *(_OWORD *)object;
                                                memcpy((void *)(v562 + 24), &__p[24], 0x120uLL);
                                                memcpy((void *)(v562 + 312), &__p[312], 0x120uLL);
                                                v566 = *(_OWORD *)&__p[680];
                                                *(_OWORD *)(v562 + 664) = *(_OWORD *)&__p[664];
                                                *(_OWORD *)(v562 + 680) = v566;
                                                v567 = *(_OWORD *)&__p[712];
                                                *(_OWORD *)(v562 + 696) = *(_OWORD *)&__p[696];
                                                *(_OWORD *)(v562 + 712) = v567;
                                                v568 = *(_OWORD *)&__p[616];
                                                *(_OWORD *)(v562 + 600) = *(_OWORD *)&__p[600];
                                                *(_OWORD *)(v562 + 616) = v568;
                                                v569 = *(_OWORD *)&__p[648];
                                                *(_OWORD *)(v562 + 632) = *(_OWORD *)&__p[632];
                                                *(_OWORD *)(v562 + 648) = v569;
                                                *(_BYTE *)(v562 + 728) = __p[728];
                                                *(_OWORD *)(v562 + 736) = *(_OWORD *)&__p[736];
                                                v570 = *(_OWORD *)v1015;
                                                v571 = v1016[1];
                                                *(_OWORD *)(v562 + 768) = v1016[0];
                                                *(_OWORD *)(v562 + 784) = v571;
                                                *(_OWORD *)(v562 + 752) = v570;
                                                v572 = v1017;
                                                v573 = v1018[1];
                                                *(_OWORD *)(v562 + 816) = v1018[0];
                                                *(_OWORD *)(v562 + 832) = v573;
                                                *(_OWORD *)(v562 + 800) = v572;
                                                v574 = v1019;
                                                *(_BYTE *)(v562 + 856) = v1020;
                                                *(_QWORD *)(v562 + 848) = v574;
                                                *(_OWORD *)(v562 + 864) = v1021;
                                                v1021 = 0uLL;
                                                *(_BYTE *)(v562 + 880) = v1022;
                                                v575 = v562 + 888;
                                                v1242[0].__r_.__value_.__r.__words[2] = v562 + 888;
                                                v576 = (char *)v1056;
                                                if ((char *)v1056 != v371)
                                                {
                                                  v577 = 0;
                                                  do
                                                  {
                                                    v578 = v562 + v577;
                                                    v579 = &v371[v577];
                                                    *(_QWORD *)(v562 + v577 - 888) = *(_QWORD *)&v371[v577 - 888];
                                                    *(_OWORD *)(v562 + v577 - 880) = *(_OWORD *)&v371[v577 - 880];
                                                    memcpy((void *)(v562 + v577 - 864), &v371[v577 - 864], 0x120uLL);
                                                    memcpy((void *)(v562 + v577 - 576), &v371[v577 - 576], 0x120uLL);
                                                    v580 = (_OWORD *)(v562 + v577 - 288);
                                                    v581 = *(_OWORD *)&v371[v577 - 240];
                                                    v583 = *(_OWORD *)&v371[v577 - 288];
                                                    v582 = *(_OWORD *)&v371[v577 - 272];
                                                    *(_OWORD *)(v578 - 256) = *(_OWORD *)&v371[v577 - 256];
                                                    *(_OWORD *)(v578 - 240) = v581;
                                                    *v580 = v583;
                                                    v580[1] = v582;
                                                    v584 = *(_OWORD *)&v371[v577 - 176];
                                                    v586 = *(_OWORD *)&v371[v577 - 224];
                                                    v585 = *(_OWORD *)&v371[v577 - 208];
                                                    *(_OWORD *)(v578 - 192) = *(_OWORD *)&v371[v577 - 192];
                                                    *(_OWORD *)(v578 - 176) = v584;
                                                    *(_OWORD *)(v578 - 224) = v586;
                                                    *(_OWORD *)(v578 - 208) = v585;
                                                    *(_BYTE *)(v578 - 160) = v371[v577 - 160];
                                                    *(_OWORD *)(v578 - 152) = *(_OWORD *)&v371[v577 - 152];
                                                    v587 = *(_OWORD *)&v371[v577 - 120];
                                                    v588 = *(_OWORD *)&v371[v577 - 104];
                                                    *(_OWORD *)(v578 - 136) = *(_OWORD *)&v371[v577 - 136];
                                                    *(_OWORD *)(v578 - 104) = v588;
                                                    *(_OWORD *)(v578 - 120) = v587;
                                                    v589 = *(_OWORD *)&v371[v577 - 72];
                                                    v590 = *(_OWORD *)&v371[v577 - 88];
                                                    *(_OWORD *)(v578 - 56) = *(_OWORD *)&v371[v577 - 56];
                                                    *(_OWORD *)(v578 - 88) = v590;
                                                    *(_OWORD *)(v578 - 72) = v589;
                                                    v591 = *(_QWORD *)&v371[v577 - 40];
                                                    *(_BYTE *)(v578 - 32) = v371[v577 - 32];
                                                    *(_QWORD *)(v578 - 40) = v591;
                                                    *(_OWORD *)(v578 - 24) = *(_OWORD *)&v371[v577 - 24];
                                                    *((_QWORD *)v579 - 3) = 0;
                                                    *((_QWORD *)v579 - 2) = 0;
                                                    *(_BYTE *)(v578 - 8) = v371[v577 - 8];
                                                    v577 -= 888;
                                                  }
                                                  while (&v371[v577] != v576);
                                                  v562 += v577;
                                                }
                                                v592 = (char *)*((_QWORD *)&v1056 + 1);
                                                if (*((char **)&v1056 + 1) != v371)
                                                {
                                                  do
                                                  {
                                                    *(_QWORD *)v575 = *(_QWORD *)v371;
                                                    *(_OWORD *)(v575 + 8) = *(_OWORD *)(v371 + 8);
                                                    memcpy((void *)(v575 + 24), v371 + 24, 0x120uLL);
                                                    memcpy((void *)(v575 + 312), v371 + 312, 0x120uLL);
                                                    v593 = *(_OWORD *)(v371 + 648);
                                                    v595 = *(_OWORD *)(v371 + 600);
                                                    v594 = *(_OWORD *)(v371 + 616);
                                                    *(_OWORD *)(v575 + 632) = *(_OWORD *)(v371 + 632);
                                                    *(_OWORD *)(v575 + 648) = v593;
                                                    *(_OWORD *)(v575 + 600) = v595;
                                                    *(_OWORD *)(v575 + 616) = v594;
                                                    v596 = *(_OWORD *)(v371 + 712);
                                                    v598 = *(_OWORD *)(v371 + 664);
                                                    v597 = *(_OWORD *)(v371 + 680);
                                                    *(_OWORD *)(v575 + 696) = *(_OWORD *)(v371 + 696);
                                                    *(_OWORD *)(v575 + 712) = v596;
                                                    *(_OWORD *)(v575 + 664) = v598;
                                                    *(_OWORD *)(v575 + 680) = v597;
                                                    *(_BYTE *)(v575 + 728) = v371[728];
                                                    *(_OWORD *)(v575 + 736) = *((_OWORD *)v371 + 46);
                                                    v599 = *((_OWORD *)v371 + 49);
                                                    v600 = *((_OWORD *)v371 + 47);
                                                    *(_OWORD *)(v575 + 768) = *((_OWORD *)v371 + 48);
                                                    *(_OWORD *)(v575 + 784) = v599;
                                                    *(_OWORD *)(v575 + 752) = v600;
                                                    v601 = *((_OWORD *)v371 + 50);
                                                    v602 = *((_OWORD *)v371 + 52);
                                                    *(_OWORD *)(v575 + 816) = *((_OWORD *)v371 + 51);
                                                    *(_OWORD *)(v575 + 832) = v602;
                                                    *(_OWORD *)(v575 + 800) = v601;
                                                    v603 = *((_QWORD *)v371 + 106);
                                                    *(_BYTE *)(v575 + 856) = v371[856];
                                                    *(_QWORD *)(v575 + 848) = v603;
                                                    *(_OWORD *)(v575 + 864) = *((_OWORD *)v371 + 54);
                                                    *((_OWORD *)v371 + 54) = 0u;
                                                    *(_BYTE *)(v575 + 880) = v371[880];
                                                    v575 += 888;
                                                    v371 += 888;
                                                  }
                                                  while (v371 != v592);
                                                  v371 = (char *)*((_QWORD *)&v1056 + 1);
                                                }
                                                v604 = v1056;
                                                v605 = v1057[0];
                                                *(_QWORD *)&v1056 = v562;
                                                *((_QWORD *)&v1056 + 1) = v575;
                                                v1057[0] = v1242[1].__r_.__value_.__l.__data_;
                                                v1242[1].__r_.__value_.__r.__words[0] = v605;
                                                v1242[0].__r_.__value_.__l.__size_ = v604;
                                                v1242[0].__r_.__value_.__r.__words[0] = v604;
                                                if (v371 != (char *)v604)
                                                {
                                                  do
                                                  {
                                                    v1242[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v371 - 888);
                                                    v606 = (std::__shared_weak_count *)*((_QWORD *)v371 - 2);
                                                    if (v606)
                                                    {
                                                      v607 = (unint64_t *)&v606->__shared_owners_;
                                                      do
                                                        v608 = __ldaxr(v607);
                                                      while (__stlxr(v608 - 1, v607));
                                                      if (!v608)
                                                      {
                                                        ((void (*)(std::__shared_weak_count *))v606->__on_zero_shared)(v606);
                                                        std::__shared_weak_count::__release_weak(v606);
                                                      }
                                                    }
                                                    v371 = (char *)v1242[0].__r_.__value_.__r.__words[2];
                                                  }
                                                  while (v1242[0].__r_.__value_.__r.__words[2] != v604);
                                                  v371 = (char *)v1242[0].__r_.__value_.__r.__words[0];
                                                }
                                                if (v371)
                                                  operator delete(v371);
                                              }
                                              else if (v371 == v366)
                                              {
                                                *(_QWORD *)v366 = v944;
                                                v550 = &v364[8 * ((v371 - v364) >> 3)];
                                                *(_OWORD *)(v550 + 8) = *(_OWORD *)&__p[8];
                                                memcpy(v550 + 24, &__p[24], 0x120uLL);
                                                memcpy(v550 + 312, &__p[312], 0x120uLL);
                                                v551 = *(_OWORD *)&__p[600];
                                                v552 = *(_OWORD *)&__p[616];
                                                v553 = *(_OWORD *)&__p[648];
                                                *(_OWORD *)(v550 + 632) = *(_OWORD *)&__p[632];
                                                *(_OWORD *)(v550 + 648) = v553;
                                                *(_OWORD *)(v550 + 600) = v551;
                                                *(_OWORD *)(v550 + 616) = v552;
                                                v554 = *(_OWORD *)&__p[664];
                                                v555 = *(_OWORD *)&__p[680];
                                                v556 = *(_OWORD *)&__p[712];
                                                *(_OWORD *)(v550 + 696) = *(_OWORD *)&__p[696];
                                                *(_OWORD *)(v550 + 712) = v556;
                                                *(_OWORD *)(v550 + 664) = v554;
                                                *(_OWORD *)(v550 + 680) = v555;
                                                v550[728] = 1;
                                                *((_OWORD *)v550 + 46) = *(_OWORD *)&__p[736];
                                                v557 = v1016[1];
                                                v558 = *(_OWORD *)v1015;
                                                *((_OWORD *)v550 + 48) = v1016[0];
                                                *((_OWORD *)v550 + 49) = v557;
                                                *((_OWORD *)v550 + 47) = v558;
                                                v559 = v1017;
                                                v560 = v1018[1];
                                                *((_OWORD *)v550 + 51) = v1018[0];
                                                *((_OWORD *)v550 + 52) = v560;
                                                *((_OWORD *)v550 + 50) = v559;
                                                v561 = v1019;
                                                v550[856] = v1020;
                                                *((_QWORD *)v550 + 106) = v561;
                                                *((_OWORD *)v550 + 54) = 0u;
                                                v1021 = 0uLL;
                                                v550[880] = 0;
                                                *((_QWORD *)&v1056 + 1) = v366 + 888;
                                              }
                                              else
                                              {
                                                v1007 = 0xB195E8EFDB195E8FLL * ((v371 - v364) >> 3);
                                                v1044 = *(_OWORD *)object;
                                                memcpy(v1242, &object[16], sizeof(v1242));
                                                memcpy(v1241, v1206, 0x120uLL);
                                                v1237 = v1211;
                                                v1238 = v1212;
                                                v1239 = v1213;
                                                v1240 = v1214;
                                                *(float64x2_t *)v1234 = v1207;
                                                *(float64x2_t *)&v1234[16] = v1208;
                                                v1235 = v1209;
                                                v1236 = v1210;
                                                *(_OWORD *)__dstb = *(_OWORD *)&__p[736];
                                                v1233 = v1219;
                                                v1232 = v1218;
                                                *(_OWORD *)v1231 = v1217;
                                                v1230 = v1222;
                                                v1229 = v1221;
                                                v1228 = v1220;
                                                v1043 = v1224;
                                                v1042 = v1223;
                                                v502 = v366 - 888;
                                                v503 = v366;
                                                v504 = v366 - 888;
                                                v1021 = 0uLL;
                                                if ((unint64_t)v366 >= 0x378)
                                                {
                                                  do
                                                  {
                                                    *(_QWORD *)v503 = *(_QWORD *)v504;
                                                    *(_OWORD *)(v503 + 8) = *(_OWORD *)(v504 + 8);
                                                    memcpy(v503 + 24, v504 + 24, 0x120uLL);
                                                    memcpy(v503 + 312, v504 + 312, 0x120uLL);
                                                    v505 = *(_OWORD *)(v504 + 648);
                                                    v507 = *(_OWORD *)(v504 + 600);
                                                    v506 = *(_OWORD *)(v504 + 616);
                                                    *(_OWORD *)(v503 + 632) = *(_OWORD *)(v504 + 632);
                                                    *(_OWORD *)(v503 + 648) = v505;
                                                    *(_OWORD *)(v503 + 600) = v507;
                                                    *(_OWORD *)(v503 + 616) = v506;
                                                    v508 = *(_OWORD *)(v504 + 712);
                                                    v510 = *(_OWORD *)(v504 + 664);
                                                    v509 = *(_OWORD *)(v504 + 680);
                                                    *(_OWORD *)(v503 + 696) = *(_OWORD *)(v504 + 696);
                                                    *(_OWORD *)(v503 + 712) = v508;
                                                    *(_OWORD *)(v503 + 664) = v510;
                                                    *(_OWORD *)(v503 + 680) = v509;
                                                    v503[728] = v504[728];
                                                    *((_OWORD *)v503 + 46) = *((_OWORD *)v504 + 46);
                                                    v511 = *((_OWORD *)v504 + 49);
                                                    v512 = *((_OWORD *)v504 + 47);
                                                    *((_OWORD *)v503 + 48) = *((_OWORD *)v504 + 48);
                                                    *((_OWORD *)v503 + 49) = v511;
                                                    *((_OWORD *)v503 + 47) = v512;
                                                    v513 = *((_OWORD *)v504 + 50);
                                                    v514 = *((_OWORD *)v504 + 52);
                                                    *((_OWORD *)v503 + 51) = *((_OWORD *)v504 + 51);
                                                    *((_OWORD *)v503 + 52) = v514;
                                                    *((_OWORD *)v503 + 50) = v513;
                                                    v515 = *((_QWORD *)v504 + 106);
                                                    v503[856] = v504[856];
                                                    *((_QWORD *)v503 + 106) = v515;
                                                    *((_OWORD *)v503 + 54) = *((_OWORD *)v504 + 54);
                                                    *((_OWORD *)v504 + 54) = 0u;
                                                    v503[880] = v504[880];
                                                    v503 += 888;
                                                    v504 += 888;
                                                  }
                                                  while (v504 < v366);
                                                }
                                                *((_QWORD *)&v1056 + 1) = v503;
                                                if (v366 != v371 + 888)
                                                {
                                                  do
                                                  {
                                                    v523 = v502 - 888;
                                                    v524 = v366 - 888;
                                                    *(_QWORD *)v524 = *((_QWORD *)v502 - 111);
                                                    *(_OWORD *)(v524 + 8) = *((_OWORD *)v502 - 55);
                                                    memcpy(v366 - 864, v502 - 864, 0x120uLL);
                                                    memcpy(v366 - 576, v502 - 576, 0x120uLL);
                                                    v525 = *((_OWORD *)v502 - 12);
                                                    v526 = *((_OWORD *)v502 - 11);
                                                    v527 = *((_OWORD *)v502 - 13);
                                                    *((_OWORD *)v366 - 14) = *((_OWORD *)v502 - 14);
                                                    *((_OWORD *)v366 - 13) = v527;
                                                    v528 = *((_OWORD *)v502 - 18);
                                                    v529 = *((_OWORD *)v502 - 17);
                                                    v530 = *((_OWORD *)v502 - 15);
                                                    *((_OWORD *)v366 - 16) = *((_OWORD *)v502 - 16);
                                                    *((_OWORD *)v366 - 15) = v530;
                                                    *((_OWORD *)v366 - 18) = v528;
                                                    *((_OWORD *)v366 - 17) = v529;
                                                    *((_OWORD *)v366 - 12) = v525;
                                                    *((_OWORD *)v366 - 11) = v526;
                                                    *(v366 - 160) = *(v502 - 160);
                                                    *((_QWORD *)v366 - 19) = *((_QWORD *)v502 - 19);
                                                    *((_QWORD *)v366 - 18) = *((_QWORD *)v502 - 18);
                                                    v531 = *(_OWORD *)(v502 - 104);
                                                    v532 = *(_OWORD *)(v502 - 120);
                                                    *(_OWORD *)(v366 - 136) = *(_OWORD *)(v502 - 136);
                                                    *(_OWORD *)(v366 - 120) = v532;
                                                    *(_OWORD *)(v366 - 104) = v531;
                                                    v533 = *(_OWORD *)(v502 - 88);
                                                    v534 = *(_OWORD *)(v502 - 72);
                                                    *(_OWORD *)(v366 - 56) = *(_OWORD *)(v502 - 56);
                                                    *(_OWORD *)(v366 - 72) = v534;
                                                    *(_OWORD *)(v366 - 88) = v533;
                                                    v535 = *((_QWORD *)v502 - 5);
                                                    *(v366 - 32) = *(v502 - 32);
                                                    *((_QWORD *)v366 - 5) = v535;
                                                    v536 = *(_OWORD *)(v502 - 24);
                                                    *((_QWORD *)v502 - 3) = 0;
                                                    *((_QWORD *)v502 - 2) = 0;
                                                    v537 = (std::__shared_weak_count *)*((_QWORD *)v366 - 2);
                                                    *(_OWORD *)(v366 - 24) = v536;
                                                    if (v537)
                                                    {
                                                      v538 = (unint64_t *)&v537->__shared_owners_;
                                                      do
                                                        v539 = __ldaxr(v538);
                                                      while (__stlxr(v539 - 1, v538));
                                                      if (!v539)
                                                      {
                                                        ((void (*)(std::__shared_weak_count *))v537->__on_zero_shared)(v537);
                                                        std::__shared_weak_count::__release_weak(v537);
                                                      }
                                                    }
                                                    *(v366 - 8) = *(v502 - 8);
                                                    v366 -= 888;
                                                    v502 -= 888;
                                                  }
                                                  while (v523 != v371);
                                                }
                                                *(_QWORD *)v371 = v944;
                                                v516 = &v364[8 * ((v371 - v364) >> 3)];
                                                *(_OWORD *)(v516 + 8) = v1044;
                                                memcpy(v516 + 24, v1242, 0x120uLL);
                                                memcpy(v516 + 312, v1241, 0x120uLL);
                                                *(float64x2_t *)(v516 + 664) = v1237;
                                                *(float64x2_t *)(v516 + 680) = v1238;
                                                *(float64x2_t *)(v516 + 696) = v1239;
                                                *(float64x2_t *)(v516 + 712) = v1240;
                                                *(_OWORD *)(v516 + 600) = *(_OWORD *)v1234;
                                                *(_OWORD *)(v516 + 616) = *(_OWORD *)&v1234[16];
                                                *(float64x2_t *)(v516 + 632) = v1235;
                                                *(float64x2_t *)(v516 + 648) = v1236;
                                                v516[728] = 1;
                                                *((_OWORD *)v516 + 46) = *(_OWORD *)__dstb;
                                                *((_OWORD *)v516 + 47) = *(_OWORD *)v1231;
                                                *((_OWORD *)v516 + 48) = v1232;
                                                v517 = v1228;
                                                v518 = v1229;
                                                *((_OWORD *)v516 + 49) = v1233;
                                                *((_OWORD *)v516 + 50) = v517;
                                                v519 = v1230;
                                                *((_OWORD *)v516 + 51) = v518;
                                                *((_OWORD *)v516 + 52) = v519;
                                                *((_QWORD *)v516 + 106) = v1042;
                                                v516[856] = v1043;
                                                v520 = (std::__shared_weak_count *)*((_QWORD *)v516 + 109);
                                                *((_OWORD *)v516 + 54) = 0u;
                                                if (v520)
                                                {
                                                  v521 = (unint64_t *)&v520->__shared_owners_;
                                                  do
                                                    v522 = __ldaxr(v521);
                                                  while (__stlxr(v522 - 1, v521));
                                                  if (!v522)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
                                                    std::__shared_weak_count::__release_weak(v520);
                                                  }
                                                }
                                                v364[888 * v1007 + 880] = 0;
                                              }
                                              v609 = (std::__shared_weak_count *)*((_QWORD *)&v1021 + 1);
                                              if (*((_QWORD *)&v1021 + 1))
                                              {
                                                v610 = (unint64_t *)(*((_QWORD *)&v1021 + 1) + 8);
                                                do
                                                  v611 = __ldaxr(v610);
                                                while (__stlxr(v611 - 1, v610));
                                                if (!v611)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v609->__on_zero_shared)(v609);
                                                  std::__shared_weak_count::__release_weak(v609);
                                                }
                                              }
                                            }
                                            BYTE2(v1059) = 0;
                                            LOBYTE(v1059) = 0;
                                            v1058 = vaddq_s64(v1058, (int64x2_t)xmmword_2103B2300);
                                            v612 = v1226;
                                            if (!v1226)
                                              goto LABEL_454;
                                            v613 = (unint64_t *)&v1226->__shared_owners_;
                                            do
                                              v614 = __ldaxr(v613);
                                            while (__stlxr(v614 - 1, v613));
                                            if (!v614)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v612->__on_zero_shared)(v612);
                                              std::__shared_weak_count::__release_weak(v612);
                                              v483 = 0;
                                              v540 = v1041;
                                              if (v1041)
                                                goto LABEL_381;
                                            }
                                            else
                                            {
LABEL_454:
                                              v483 = 0;
                                              v540 = v1041;
                                              if (!v1041)
                                                goto LABEL_385;
LABEL_381:
                                              v541 = (unint64_t *)&v540->__shared_owners_;
                                              do
                                                v542 = __ldaxr(v541);
                                              while (__stlxr(v542 - 1, v541));
                                              if (!v542)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v540->__on_zero_shared)(v540);
                                                std::__shared_weak_count::__release_weak(v540);
                                              }
                                            }
LABEL_385:
                                            if ((v483 & 1) != 0)
                                              goto LABEL_386;
                                            v543 = 0;
                                            LOBYTE(v1077[5]) = 0;
                                            v1077[4] = 0;
                                            v544 = v1039;
                                            if (v1039)
                                              goto LABEL_389;
                                            goto LABEL_392;
                                          }
                                          --*(_DWORD *)(v495 + 8);
                                          --*(_DWORD *)(v500 + 8);
                                        }
                                      }
                                      v483 = 1;
                                    }
                                    v540 = v1041;
                                    if (!v1041)
                                      goto LABEL_385;
                                    goto LABEL_381;
                                  }
                                  ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                                  std::__shared_weak_count::__release_weak(v264);
                                  if (!v977)
                                    goto LABEL_313;
                                }
                                else
                                {
                                  os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG);
                                  *(_DWORD *)object = 136315138;
                                  *(_QWORD *)&object[4] = __src;
                                  v220 = (void *)_os_log_send_and_compose_impl();
                                  v221 = v977;
                                  if (!v220)
                                    goto LABEL_309;
                                  free(v220);
                                  if (!v977)
                                    goto LABEL_313;
                                }
LABEL_310:
                                v267 = v1231;
                                if (SBYTE7(v1232) < 0)
                                  v267 = (void **)v1231[0];
                                sub_20E8C003C((uint64_t)v1242, "%s", (const char *)v267);
                                sub_20E863570((uint64_t)v1242);
                                goto LABEL_313;
                              }
                            }
                            memmove(v210, __dst, v200);
                            goto LABEL_232;
                          }
                        }
                        memmove(v205, v203, v204);
                        goto LABEL_224;
                      }
                    }
                    memmove(v189, v194, v188);
                    goto LABEL_204;
                  }
                }
              }
            }
LABEL_97:
            v135 = v1013;
          }
        }
      }
LABEL_98:
      v136 += 472;
      if (v136 == v135)
        goto LABEL_94;
      continue;
    }
  }
LABEL_471:
  if (*(_BYTE *)(v911 + 8))
  {
    v615 = v16[1];
    if (*v16 == v615)
    {
      LODWORD(v617) = 0;
      v619 = v1049[1];
      v618 = v1049[0];
      v620 = v1049[1] - v1049[0];
      if (v1049[1] == v1049[0])
        goto LABEL_489;
    }
    else
    {
      v616 = *v16;
      while (*(_QWORD *)v911 != *(_QWORD *)(*(_QWORD *)v616 + 160))
      {
        v616 += 8;
        if (v616 == v615)
        {
          v616 = v16[1];
          break;
        }
      }
      v617 = (unint64_t)(v616 - *v16) >> 3;
      v619 = v1049[1];
      v618 = v1049[0];
      v620 = v1049[1] - v1049[0];
      if (v1049[1] == v1049[0])
      {
LABEL_489:
        if (v618 == v619 || *(_DWORD *)v618 != (_DWORD)v617)
          v618 = v619;
        goto LABEL_492;
      }
    }
    v621 = v620 >> 4;
    do
    {
      v622 = v621 >> 1;
      v623 = (unsigned int *)&v618[16 * (v621 >> 1)];
      v625 = *v623;
      v624 = (char *)(v623 + 4);
      v621 += ~(v621 >> 1);
      if (v625 < v617)
        v618 = v624;
      else
        v621 = v622;
    }
    while (v621);
    goto LABEL_489;
  }
  v618 = v1049[1];
  if (v1049[1] != v1049[0] && !*(_DWORD *)v1049[0])
    v618 = v1049[0];
LABEL_492:
  *(_BYTE *)(*((_QWORD *)v618 + 1) + 20) = 0;
  memset(v1234, 0, 24);
  v626 = (char *)v1035;
  v627 = v1036;
  *(_QWORD *)__p = v1234;
  __p[8] = 0;
  v628 = v1036 - (_BYTE *)v1035;
  if (v1036 != v1035)
  {
    v629 = 0x8FD8FD8FD8FD8FD9 * (v628 >> 3);
    if (v629 > 0x4E04E04E04E04ELL)
      sub_20E867F44();
    v630 = 0;
    *(_QWORD *)v1234 = operator new(v628);
    *(_QWORD *)&v1234[8] = *(_QWORD *)v1234;
    *(_QWORD *)&v1234[16] = *(_QWORD *)v1234 + 840 * v629;
    v631 = *(_QWORD *)v1234;
    do
    {
      *(_QWORD *)v631 = *(_QWORD *)v626;
      v634 = *(_OWORD *)(v626 + 8);
      v635 = *(_OWORD *)(v626 + 24);
      *(_OWORD *)(v631 + 40) = *(_OWORD *)(v626 + 40);
      *(_OWORD *)(v631 + 24) = v635;
      *(_OWORD *)(v631 + 8) = v634;
      v636 = *(_OWORD *)(v626 + 56);
      v637 = *(_OWORD *)(v626 + 72);
      v638 = *(_OWORD *)(v626 + 88);
      *(_OWORD *)(v631 + 104) = *(_OWORD *)(v626 + 104);
      *(_OWORD *)(v631 + 88) = v638;
      *(_OWORD *)(v631 + 72) = v637;
      *(_OWORD *)(v631 + 56) = v636;
      v639 = *(_OWORD *)(v626 + 120);
      v640 = *(_OWORD *)(v626 + 136);
      v641 = *(_OWORD *)(v626 + 152);
      *(_QWORD *)(v631 + 168) = *((_QWORD *)v626 + 21);
      *(_OWORD *)(v631 + 152) = v641;
      *(_OWORD *)(v631 + 136) = v640;
      *(_OWORD *)(v631 + 120) = v639;
      memcpy((void *)(v631 + 176), v626 + 176, 0x120uLL);
      memcpy((void *)(v631 + 464), v626 + 464, 0x120uLL);
      *(_QWORD *)(v631 + 752) = 0;
      *(_QWORD *)(v631 + 768) = 0;
      *(_QWORD *)(v631 + 760) = 0;
      v642 = *((_QWORD *)v626 + 94);
      v643 = *((_QWORD *)v626 + 95);
      v644 = v643 - v642;
      if (v643 != v642)
      {
        v645 = 0x6DB6DB6DB6DB6DB7 * (v644 >> 3);
        if (v645 > 0x492492492492492)
          sub_20EABADD4();
        v646 = (char *)operator new(v644);
        v647 = 0;
        *(_QWORD *)(v631 + 752) = v646;
        *(_QWORD *)(v631 + 760) = v646;
        *(_QWORD *)(v631 + 768) = &v646[56 * v645];
        do
        {
          v648 = v642 + v647;
          v649 = &v646[v647];
          *(_QWORD *)v649 = *(_QWORD *)(v642 + v647);
          v650 = *(_OWORD *)(v642 + v647 + 8);
          *((_QWORD *)v649 + 3) = *(_QWORD *)(v642 + v647 + 24);
          *(_OWORD *)(v649 + 8) = v650;
          v651 = *(_OWORD *)(v642 + v647 + 32);
          *((_QWORD *)v649 + 6) = *(_QWORD *)(v642 + v647 + 48);
          *((_OWORD *)v649 + 2) = v651;
          v647 += 56;
        }
        while (v648 + 56 != v643);
        *(_QWORD *)(v631 + 760) = &v646[v647];
      }
      v632 = *(_OWORD *)(v626 + 776);
      *(_QWORD *)(v631 + 792) = *((_QWORD *)v626 + 99);
      *(_OWORD *)(v631 + 776) = v632;
      v633 = *((_OWORD *)v626 + 50);
      *(_QWORD *)(v631 + 816) = *((_QWORD *)v626 + 102);
      *(_OWORD *)(v631 + 800) = v633;
      *(_OWORD *)(v631 + 824) = *(_OWORD *)(v626 + 824);
      v626 += 840;
      v631 += 840;
      v630 += 840;
    }
    while (v626 != v627);
    *(_QWORD *)&v1234[8] = v631;
  }
  kdebug_trace();
  kdebug_trace();
  ((void (*)(char *@<X8>))v1159[2])(object);
  ((void (*)(std::string *@<X8>))*v1045)(v1242);
  if ((object[23] & 0x80000000) != 0)
  {
    sub_20E860C04(__p, *(void **)object, *(unint64_t *)&object[8]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)object;
    *(_QWORD *)&__p[16] = *(_QWORD *)&object[16];
  }
  v652 = HIBYTE(v1242[0].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v1242[0].__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&__p[24], v1242[0].__r_.__value_.__l.__data_, v1242[0].__r_.__value_.__l.__size_);
    v652 = HIBYTE(v1242[0].__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(std::string *)&__p[24] = v1242[0];
  }
  *(_QWORD *)&__p[48] = 0;
  *(_DWORD *)&__p[56] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&__p[64] = _Q0;
  *(_QWORD *)&__p[592] = &__p[80];
  *(_OWORD *)&__p[600] = xmmword_210378040;
  v1023 = &__p[616];
  v1024 = 64;
  v1025 = 0u;
  v1027 = v1026;
  v1028 = 64;
  v1029 = 0;
  v1031 = 0;
  v1030 = 0;
  v1033 = v1032;
  v1034 = xmmword_210378040;
  if (v652 < 0)
  {
    operator delete(v1242[0].__r_.__value_.__l.__data_);
    if ((object[23] & 0x80000000) != 0)
      goto LABEL_514;
  }
  else
  {
    if ((object[23] & 0x80000000) == 0)
      goto LABEL_510;
LABEL_514:
    operator delete(*(void **)object);
  }
LABEL_510:
  sub_20F2C3BE8(__p, 2uLL, 2uLL);
  v1242[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1045;
  v1242[0].__r_.__value_.__l.__size_ = (std::string::size_type)__p;
  v654 = ((double (*)(_QWORD *))v1045[5])(&v1045);
  v655 = v1079;
  if (((unsigned int (__cdecl *)())v1159[3])())
  {
    v1079 = 1;
    if (((unsigned int (*)(uint64_t))v1159[5])((uint64_t)&v1159))
      ((void (*)(double *, double))v1159[6])((double *)&v1159, 0.0);
    else
      ((void (*)(uint64_t))v1159[7])((uint64_t)&v1159);
    v656 = ((double (*)(uint64_t))v1159[4])((uint64_t)&v1159);
    ((void (*)(uint64_t, double))v1045[13])((uint64_t)&v1045, v656);
  }
  kdebug_trace();
  if (!v1166)
    goto LABEL_537;
  if (!v1172)
  {
    if (v1170)
    {
      v1241[0] = v1169;
      LODWORD(v1241[1]) = 0;
      v658 = v1171;
      sub_20F3E1910((uint64_t)&v1045, (double *)object, (uint64_t)v1241);
      if (v658)
      {
LABEL_523:
        v1046 = v937;
        v659 = 1.0;
        v660 = 1.0;
LABEL_533:
        *(double *)&v1047 = v659;
        *((double *)&v1047 + 1) = v660;
        goto LABEL_536;
      }
    }
    else
    {
      v663 = v1171;
      sub_20F3E1644((uint64_t)&v1045, (double *)object, &v1167);
      if (v663)
        goto LABEL_523;
    }
    v660 = 1.0e20;
    v659 = 1.0e-10;
    v664 = 0x3DDB7CDFD9D7BDBBLL;
    v665 = 1.0e20;
    if (*(double *)object > 0.0)
    {
      v664 = *(_QWORD *)object;
      v665 = 1.0 / (*(double *)object * *(double *)object);
    }
    *(_QWORD *)&v1046 = v664;
    *((double *)&v1046 + 1) = v665;
    if (*(double *)&object[8] > 0.0)
    {
      v659 = *(double *)&object[8];
      v660 = 1.0 / (*(double *)&object[8] * *(double *)&object[8]);
    }
    goto LABEL_533;
  }
  v657 = v1171;
  if (v1170)
    sub_20F3E0160((uint64_t)&v1045, (double *)object, v1169);
  else
    sub_20F3E0160((uint64_t)&v1045, (double *)object, &v1167);
  v661 = 1.0;
  v662 = 1.0;
  if (!v657)
  {
    v661 = *(double *)object;
    if (*(double *)object <= 0.0)
    {
      v662 = 1.0e20;
      v661 = 1.0e-10;
    }
    else
    {
      v662 = 1.0 / (*(double *)object * *(double *)object);
    }
  }
  *(double *)&v1046 = v661;
  *((double *)&v1046 + 1) = v662;
  *(double *)&v1047 = v661;
  *((double *)&v1047 + 1) = v662;
LABEL_536:
  BYTE1(v1077[5]) = 0;
  v1077[4] = 0;
LABEL_537:
  if (!((unsigned int (*)(uint64_t))v1045[1])((uint64_t)&v1045))
  {
    sub_20F3E1DF8((uint64_t)&v1045, v1026, (_QWORD *)&v1025 + 1);
    sub_20F3E1BF0((uint64_t)&v1045, v1026, (_QWORD *)&v1025 + 1);
    sub_20F3E247C((uint64_t)&v1045, v1032, &v1030, &v1031);
    sub_20F3E2000((uint64_t)&v1045, v1032, &v1030, &v1031);
    *(_QWORD *)&__p[64] = sub_20F3DFC08((uint64_t)&v1045, &__p[80]);
    *(_QWORD *)&__p[72] = *(_QWORD *)&__p[64];
    v1181 = *(double *)&__p[64];
    v668 = *(__int128 **)&__p[592];
    v669 = *(_QWORD *)&__p[608];
    v670 = 8 * *(_QWORD *)&__p[608];
    *(_QWORD *)&v1025 = 0;
    v671 = *(_QWORD *)&__p[608] & 0x1FFFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&__p[608] & 0x1FFFFFFFFFFFFFFFuLL) <= v1024)
    {
      if (!*(_QWORD *)&__p[608])
        goto LABEL_560;
      v672 = v1023;
    }
    else
    {
      if (2 * v1024 > v671)
        v671 = 2 * v1024;
      v1024 = v671;
      v672 = (_OWORD *)operator new[]();
      if (v1023 != &__p[616] && v1023)
        MEMORY[0x212BC6368](v1023, 0x1000C8000313F17);
      v1023 = v672;
      v673 = v1025;
      if ((_QWORD)v1025)
      {
        *(_QWORD *)&v1025 = v1025 + v669;
        memmove((char *)v672 + 8 * v669, v672, 8 * v673);
        memcpy(v672, v668, v670);
LABEL_560:
        kdebug_trace();
        if (((unsigned int (__cdecl *)())v1159[3])())
        {
          if (((unsigned int (*)(uint64_t))v1159[5])((uint64_t)&v1159))
          {
            ((void (*)(uint64_t))v1045[12])((uint64_t)&v1045);
            ((void (*)(double *, double))v1159[6])((double *)&v1159, v683);
          }
          else
          {
            ((void (*)(uint64_t))v1159[7])((uint64_t)&v1159);
          }
          v684 = ((double (*)(uint64_t))v1159[4])((uint64_t)&v1159);
          ((void (*)(uint64_t, double))v1045[13])((uint64_t)&v1045, v684);
        }
        if (v1082)
        {
          v685 = fabs(*(double *)v1081);
          if (v1082 != 1)
          {
            v686 = (double *)(v1081 + 8);
            v687 = 8 * v1082 - 8;
            do
            {
              v688 = *v686++;
              v689 = fabs(v688);
              if (v685 < v689)
                v685 = v689;
              v687 -= 8;
            }
            while (v687);
          }
          if (v685 < v685 * v1163)
            goto LABEL_572;
        }
        else
        {
          v685 = 1.0;
          if (1.0 * v1163 > 1.0)
          {
LABEL_572:
            if (v1162)
            {
              v690 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              std::ios_base::getloc((const std::ios_base *)((char *)v690 + *(_QWORD *)(*v690 - 24)));
              v691 = std::locale::use_facet((const std::locale *)object, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v691->__vftable[2].~facet_0)(v691, 10);
              std::locale::~locale((std::locale *)object);
              std::ostream::put();
              std::ostream::flush();
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
              v692 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v692, (uint64_t)"][", 2);
              if (v685 == 0.0)
                sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
              else
                std::ostream::operator<<();
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
              v736 = (_QWORD *)std::ostream::operator<<();
              v737 = sub_20E86A980(v736, (uint64_t)"]", 1);
              std::ios_base::getloc((const std::ios_base *)((char *)v737 + *(_QWORD *)(*v737 - 24)));
              v738 = std::locale::use_facet((const std::locale *)object, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v738->__vftable[2].~facet_0)(v738, 10);
              std::locale::~locale((std::locale *)object);
              std::ostream::put();
              std::ostream::flush();
            }
            *(_DWORD *)&__p[56] = 1;
LABEL_680:
            v1079 = v655;
            goto LABEL_681;
          }
        }
        v693 = v1181;
        kdebug_trace();
        v694 = ((uint64_t (*)(uint64_t))v1045[3])((uint64_t)&v1045);
        if (v1176)
          (*(void (**)(_BYTE *))(*(_QWORD *)v1176 + 48))(v1176);
        v695 = *(_DWORD *)&__p[48];
        if (*(_DWORD *)&__p[48] >= v1161)
        {
LABEL_678:
          *(double *)&__p[72] = v1181;
          if (v1174)
            (*(void (**)(_BYTE *))(*(_QWORD *)v1174 + 48))(v1174);
          goto LABEL_680;
        }
        v696 = v685;
        while (1)
        {
          v697 = v695 + 1;
          *(_DWORD *)&__p[48] = v695 + 1;
          if (((unsigned int (*)(uint64_t, double **))v1045[2])((uint64_t)&v1045, (double **)v694))
          {
            if (v1162)
            {
              v739 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
              std::ios_base::getloc((const std::ios_base *)((char *)v739 + *(_QWORD *)(*v739 - 24)));
              v740 = std::locale::use_facet((const std::locale *)object, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v740->__vftable[2].~facet_0)(v740, 10);
              std::locale::~locale((std::locale *)object);
              std::ostream::put();
              std::ostream::flush();
            }
            *(_DWORD *)&__p[56] = 0;
            goto LABEL_678;
          }
          ++*(_DWORD *)&__p[52];
          v698 = *(unsigned int *)(v694 + 16);
          if ((_DWORD)v698)
          {
            v699 = *(double **)v694;
            v700 = **(double **)v694 * **(double **)v694;
            if ((_DWORD)v698 != 1)
            {
              v701 = v699 + 1;
              v702 = (v698 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
              if (v702 < 3)
                goto LABEL_588;
              v703 = v702 + 1;
              v701 += v703 & 0x3FFFFFFFFFFFFFFCLL;
              v704 = (float64x2_t *)(v699 + 3);
              v705 = v703 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v706 = vmulq_f64(v704[-1], v704[-1]);
                v707 = vmulq_f64(*v704, *v704);
                v700 = v700 + v706.f64[0] + v706.f64[1] + v707.f64[0] + v707.f64[1];
                v704 += 2;
                v705 -= 4;
              }
              while (v705);
              if (v703 != (v703 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_588:
                v708 = &v699[v698];
                do
                {
                  v709 = *v701++;
                  v700 = v700 + v709 * v709;
                }
                while (v701 != v708);
              }
            }
            v710 = sqrt(v700);
            if (v695 < v1160)
              goto LABEL_598;
          }
          else
          {
            v710 = sqrt(0.0);
            if (v695 < v1160)
              goto LABEL_598;
          }
          if (v1180)
          {
            *(_DWORD *)object = *(_DWORD *)(v694 + 16);
            *(_QWORD *)&object[8] = *(_QWORD *)v694;
            *(_DWORD *)&object[16] = 0;
            v1241[0] = *(void **)&v710;
            if (((*(uint64_t (**)(_BYTE *, void **, _BYTE *))(*(_QWORD *)v1180 + 48))(v1180, v1241, object) & 1) != 0)
              goto LABEL_810;
          }
          else if ((_DWORD)v698 && v710 < v1164 * (v654 + v1164))
          {
LABEL_810:
            if (v1162)
            {
              v905 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
              std::ios_base::getloc((const std::ios_base *)((char *)v905 + *(_QWORD *)(*v905 - 24)));
              v906 = std::locale::use_facet((const std::locale *)object, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v906->__vftable[2].~facet_0)(v906, 10);
              std::locale::~locale((std::locale *)object);
              std::ostream::put();
              std::ostream::flush();
              ((void (*)(uint64_t, double, double, double, double))v1159[8])((uint64_t)&v1159, v693, v710, v696, v685);
            }
            v746 = 2;
            goto LABEL_677;
          }
LABEL_598:
          ((void (*)(uint64_t, _QWORD *))v1045[6])((uint64_t)&v1045, (_QWORD *)v694);
          if (v1178)
            (*(void (**)(_BYTE *))(*(_QWORD *)v1178 + 48))(v1178);
          if ((_QWORD)v1025)
            memcpy(object, v1023, 8 * v1025);
          v693 = sub_20F3DFC08((uint64_t)&v1045, &__p[616]);
          if (!v1082)
          {
            v696 = 1.0;
            if (!v1162)
              goto LABEL_612;
LABEL_611:
            ((void (*)(uint64_t, double, double, double, double))v1159[8])((uint64_t)&v1159, v693, v710, v696, v685);
            goto LABEL_612;
          }
          v696 = fabs(*(double *)v1081);
          if (v1082 != 1)
          {
            v711 = (double *)(v1081 + 8);
            v712 = 8 * v1082 - 8;
            do
            {
              v713 = *v711++;
              v714 = fabs(v713);
              if (v696 < v714)
                v696 = v714;
              v712 -= 8;
            }
            while (v712);
          }
          if (v1162)
            goto LABEL_611;
LABEL_612:
          if (v693 == 0.0)
          {
            if (v1162)
            {
              v741 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v742 = sub_20E86A980(v741, (uint64_t)"N.A.", 4);
              std::ios_base::getloc((const std::ios_base *)((char *)v742 + *(_QWORD *)(*v742 - 24)));
              v743 = std::locale::use_facet((const std::locale *)v1241, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v743->__vftable[2].~facet_0)(v743, 10);
              std::locale::~locale((std::locale *)v1241);
              std::ostream::put();
              goto LABEL_675;
            }
LABEL_676:
            v1181 = v693;
            v746 = 3;
LABEL_677:
            *(_DWORD *)&__p[56] = v746;
            goto LABEL_678;
          }
          if (vabdd_f64(v693, v1181) < v693 * v1165 && v695 >= v1160)
          {
            if (v1162)
            {
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v744 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v744 + *(_QWORD *)(*v744 - 24)));
              v745 = std::locale::use_facet((const std::locale *)v1241, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v745->__vftable[2].~facet_0)(v745, 10);
              std::locale::~locale((std::locale *)v1241);
              std::ostream::put();
LABEL_675:
              std::ostream::flush();
            }
            goto LABEL_676;
          }
          if (DWORD2(v1080))
          {
            ((void (*)(uint64_t, void **))v1045[20])((uint64_t)&v1045, (void **)&v1182);
            v716 = ((BOOL (*)(uint64_t, uint64_t, double **, double **, double))v1159[10])((uint64_t)&v1159, v694, (double **)&v1081, (double **)&v1182, v693);
          }
          else
          {
            v716 = ((BOOL (*)(uint64_t, uint64_t, double **, double))v1159[9])((uint64_t)&v1159, v694, (double **)&v1081, v693);
          }
          if (!v716)
          {
            --*(_DWORD *)&__p[52];
            v724 = v1049[1];
            for (j = v1049[0]; j != v724; j += 16)
            {
              v725 = *((_QWORD *)j + 1);
              if (*(_BYTE *)(v725 + 20))
              {
                v726 = *(_OWORD *)(v725 + 152);
                v727 = *(_OWORD *)(v725 + 184);
                *(_OWORD *)(v725 + 64) = *(_OWORD *)(v725 + 168);
                *(_OWORD *)(v725 + 80) = v727;
                *(_QWORD *)(v725 + 96) = *(_QWORD *)(v725 + 200);
                *(_OWORD *)(v725 + 32) = *(_OWORD *)(v725 + 136);
                *(_OWORD *)(v725 + 48) = v726;
                *(_OWORD *)(v725 + 104) = *(_OWORD *)(v725 + 208);
                *(_QWORD *)(v725 + 120) = *(_QWORD *)(v725 + 224);
              }
            }
            v729 = *((_QWORD *)&v1050 + 1);
            for (k = v1050; k != v729; k += 16)
            {
              v730 = *(_QWORD *)(k + 8);
              if (*(_BYTE *)(v730 + 20))
              {
                v731 = *(_OWORD *)(v730 + 200);
                v732 = *(_OWORD *)(v730 + 232);
                *(_OWORD *)(v730 + 64) = *(_OWORD *)(v730 + 216);
                *(_OWORD *)(v730 + 80) = v732;
                *(_QWORD *)(v730 + 96) = *(_QWORD *)(v730 + 248);
                *(_OWORD *)(v730 + 32) = *(_OWORD *)(v730 + 184);
                *(_OWORD *)(v730 + 48) = v731;
                *(_OWORD *)(v730 + 104) = *(_OWORD *)(v730 + 256);
                *(_QWORD *)(v730 + 120) = *(_QWORD *)(v730 + 272);
                *(_BYTE *)(v730 + 128) = 0;
              }
            }
            BYTE1(v1077[5]) = 0;
            LOBYTE(v1077[4]) = 0;
            *(_WORD *)((char *)&v1077[4] + 3) = 0;
            BYTE1(v1077[4]) = BYTE2(v1077[4]);
            *(_QWORD *)&v1025 = 0;
            if (v1024 >= 2)
            {
              v733 = v1023;
            }
            else
            {
              v1024 = 2;
              v733 = (_OWORD *)operator new[]();
              if (v1023 != &__p[616] && v1023)
                MEMORY[0x212BC6368](v1023, 0x1000C8000313F17);
              v1023 = v733;
              if ((_QWORD)v1025)
              {
                *(_QWORD *)&v1025 = v1025 + 2;
                *v733 = *(_OWORD *)object;
                goto LABEL_655;
              }
            }
            *v733 = *(_OWORD *)object;
            *(_QWORD *)&v1025 = 2;
LABEL_655:
            if (((unsigned int (__cdecl *)())v1159[3])())
            {
              v734 = ((double (*)(uint64_t))v1159[4])((uint64_t)&v1159);
              ((void (*)(uint64_t, double))v1045[13])((uint64_t)&v1045, v734);
            }
            goto LABEL_657;
          }
          if (((unsigned int (__cdecl *)())v1159[3])())
          {
            v717 = ((double (*)(uint64_t))v1159[4])((uint64_t)&v1159);
            ((void (*)(uint64_t, double))v1045[13])((uint64_t)&v1045, v717);
          }
          if (v696 < v685 * v1163 && v695 >= v1160)
          {
            if (v1162)
            {
              v904 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              sub_20E8C81A0(v904);
              ((void (*)(uint64_t, double, double, double, double))v1159[8])((uint64_t)&v1159, v693, v710, v696, v685);
            }
            v746 = 1;
            goto LABEL_677;
          }
          if (v697 < v1161 && v1166)
          {
            if (v1172)
            {
              if (v1170)
                v719 = v1169;
              else
                v719 = &v1167;
              v720 = v1171;
              sub_20F3E0160((uint64_t)&v1045, (double *)v1241, v719);
              v721 = 1.0;
              v722 = 1.0;
              if (!v720)
              {
                v721 = 1.0e-10;
                v722 = 1.0e20;
                if (*(double *)v1241 > 0.0)
                {
                  v721 = *(double *)v1241;
                  v722 = 1.0 / (*(double *)v1241 * *(double *)v1241);
                }
              }
              *(double *)&v1046 = v721;
              *((double *)&v1046 + 1) = v722;
              *(double *)&v1047 = v721;
              *((double *)&v1047 + 1) = v722;
              BYTE1(v1077[5]) = 0;
              v1077[4] = 0;
            }
            else if (v1170)
            {
              v1241[0] = v1169;
              LODWORD(v1241[1]) = 0;
              sub_20F3DFB5C((uint64_t)&v1045, (uint64_t)v1241, v1171);
            }
            else
            {
              sub_20F3DFAB0((uint64_t)&v1045, &v1167, v1171);
            }
            v1181 = sub_20F3DFC08((uint64_t)&v1045, &__p[616]);
            v735 = v1161;
            if (v697 >= v1161)
              goto LABEL_580;
LABEL_658:
            if (v1174)
            {
              (*(void (**)(_BYTE *))(*(_QWORD *)v1174 + 48))(v1174);
              v735 = v1161;
            }
            goto LABEL_580;
          }
LABEL_657:
          v735 = v1161;
          if (v697 < v1161)
            goto LABEL_658;
LABEL_580:
          v695 = *(_DWORD *)&__p[48];
          if (*(_DWORD *)&__p[48] >= v735)
            goto LABEL_678;
        }
      }
    }
    v674 = 0;
    v675 = (v669 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v675 < 3)
    {
      v676 = (uint64_t *)v668;
    }
    else
    {
      v676 = (uint64_t *)v668;
      if ((unint64_t)((char *)v672 - (char *)v668) >= 0x20)
      {
        v677 = v675 + 1;
        v674 = v677 & 0x3FFFFFFFFFFFFFFCLL;
        v676 = (uint64_t *)v668 + (v677 & 0x3FFFFFFFFFFFFFFCLL);
        v678 = v672 + 1;
        v679 = v668 + 1;
        v680 = v677 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v681 = *v679;
          *(v678 - 1) = *(v679 - 1);
          *v678 = v681;
          v678 += 2;
          v679 += 2;
          v680 -= 4;
        }
        while (v680);
        if (v677 == v674)
          goto LABEL_559;
      }
    }
    do
    {
      v682 = *v676++;
      *((_QWORD *)v672 + v674++) = v682;
    }
    while (v676 != (uint64_t *)((char *)v668 + v670));
LABEL_559:
    *(_QWORD *)&v1025 = v674;
    goto LABEL_560;
  }
  if (v1162)
  {
    v666 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
    std::ios_base::getloc((const std::ios_base *)((char *)v666 + *(_QWORD *)(*v666 - 24)));
    v667 = std::locale::use_facet((const std::locale *)object, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v667->__vftable[2].~facet_0)(v667, 10);
    std::locale::~locale((std::locale *)object);
    std::ostream::put();
    std::ostream::flush();
  }
  *(_DWORD *)&__p[56] = 0;
  v1079 = v655;
  sub_20F3E1DF8((uint64_t)&v1045, v1026, (_QWORD *)&v1025 + 1);
  sub_20F3E1BF0((uint64_t)&v1045, v1026, (_QWORD *)&v1025 + 1);
  sub_20F3E247C((uint64_t)&v1045, v1032, &v1030, &v1031);
  sub_20F3E2000((uint64_t)&v1045, v1032, &v1030, &v1031);
LABEL_681:
  kdebug_trace();
  v751 = *(_DWORD *)&__p[52];
  v951[1] = 0;
  v951[2] = 0;
  *v951 = 0;
  if (v751)
  {
    v753 = v1049[1];
    for (m = v1049[0]; m != v753; m += 16)
    {
      v754 = *((_QWORD *)m + 1);
      if (*(_BYTE *)(v754 + 20))
      {
        v755 = *(_QWORD *)(v754 + 24);
        if (v755)
        {
          v747.f64[0] = *(float64_t *)(v754 + 48);
          v756 = *(int64x2_t *)(v754 + 32);
          _Q2.i64[0] = *(_QWORD *)(v754 + 72);
          v757 = *(int64x2_t *)(v754 + 56);
          _D4 = *(double *)(v754 + 96);
          _Q5 = *(float64x2_t *)(v754 + 80);
          v760 = (float64x2_t)vzip1q_s64(v756, v757);
          _Q3 = (float64x2_t)vzip2q_s64(v756, v757);
          v762 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
          v763 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
          v764 = *(double *)(v754 + 120);
          _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v760, *(double *)(v754 + 104)), _Q3, *(float64x2_t *)(v754 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v747, (int64x2_t)_Q2), v764);
          _D16 = *(_QWORD *)(v754 + 112);
          __asm { FMLA            D3, D16, V5.D[1] }
          _Q3.f64[0] = _Q3.f64[0] + _D4 * v764;
          v767 = vnegq_f64(_Q21);
          v768 = (int64x2_t)vextq_s8(v763, v762, 8uLL);
          v769 = (float64x2_t)vzip1q_s64(v756, v768);
          *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
          _Q6 = (float64x2_t)vzip2q_s64((int64x2_t)v760, v768);
          v770 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v769, v767.f64[0]), _Q6, _Q21, 1), _Q5, _Q3.f64[0], 0);
          _Q16 = vmulq_f64(v747, v767);
          __asm { FMLS            D16, D2, V21.D[1] }
          *(double *)(v755 + 64) = _D4;
          __asm { FMLS            D16, D4, V3.D[0] }
          _Q2 = vextq_s8((int8x16_t)_Q6, _Q2, 8uLL);
          *(float64x2_t *)v755 = v769;
          *(int64x2_t *)(v755 + 16) = vzip1q_s64((int64x2_t)v747, (int64x2_t)_Q6);
          *(int8x16_t *)(v755 + 32) = _Q2;
          *(float64x2_t *)(v755 + 48) = _Q5;
          v747 = vnegq_f64(v770);
          *(float64x2_t *)(v755 + 72) = v747;
          *(_QWORD *)(v755 + 88) = *(_OWORD *)&vnegq_f64(_Q16);
        }
      }
    }
    v772 = *((_QWORD *)&v1050 + 1);
    for (n = v1050; n != v772; n += 16)
    {
      v773 = *(_QWORD *)(n + 8);
      if (*(_BYTE *)(v773 + 20))
      {
        v774 = *(_QWORD *)(v773 + 24);
        v747.f64[0] = *(float64_t *)(v773 + 48);
        v775 = *(int64x2_t *)(v773 + 32);
        _Q2.i64[0] = *(_QWORD *)(v773 + 72);
        v776 = *(int64x2_t *)(v773 + 56);
        _D4 = *(double *)(v773 + 96);
        _Q5 = *(float64x2_t *)(v773 + 80);
        v779 = (float64x2_t)vzip1q_s64(v775, v776);
        _Q3 = (float64x2_t)vzip2q_s64(v775, v776);
        v781 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
        v782 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
        v783 = *(double *)(v773 + 120);
        _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v779, *(double *)(v773 + 104)), _Q3, *(float64x2_t *)(v773 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v747, (int64x2_t)_Q2), v783);
        _D16 = *(_QWORD *)(v773 + 112);
        __asm { FMLA            D3, D16, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _D4 * v783;
        _Q16 = vnegq_f64(_Q21);
        v786 = (int64x2_t)vextq_s8(v782, v781, 8uLL);
        v787 = (float64x2_t)vzip1q_s64(v775, v786);
        _Q6 = (float64x2_t)vzip2q_s64((int64x2_t)v779, v786);
        *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
        *(float64_t *)(v774 + 16) = v747.f64[0];
        *(float64x2_t *)v774 = v787;
        *(_QWORD *)(v774 + 40) = _Q2.i64[0];
        *(float64x2_t *)(v774 + 24) = _Q6;
        *(double *)(v774 + 64) = _D4;
        *(float64x2_t *)(v774 + 48) = _Q5;
        _Q0 = vmulq_f64(v747, _Q16);
        __asm
        {
          FMLS            D0, D2, V21.D[1]
          FMLS            D0, D4, V3.D[0]
        }
        v747 = vnegq_f64(_Q0);
        *(float64x2_t *)(v774 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v787, _Q16.f64[0]), _Q6, _Q21, 1), _Q5, _Q3.f64[0], 0));
        *(float64_t *)(v774 + 88) = v747.f64[0];
      }
    }
    v789 = 0x8FD8FD8FD8FD8FD9 * ((v1036 - (_BYTE *)v1035) >> 3);
    v790 = *v951;
    if (v789 > ((_BYTE *)v951[2] - (_BYTE *)*v951) >> 7)
    {
      if (v789 >> 57)
        sub_20E867F44();
      v791 = v951[1];
      v792 = (char *)operator new(0xEC7EC7EC7EC7EC80 * ((v1036 - (_BYTE *)v1035) >> 3));
      v793 = &v792[(v791 - v790) & 0xFFFFFFFFFFFFFF80];
      v794 = v793;
      if (v791 != v790)
      {
        v795 = &v792[(v791 - v790) & 0xFFFFFFFFFFFFFF80];
        do
        {
          v794 = v795 - 128;
          v796 = *((_OWORD *)v791 - 8);
          v797 = *((_OWORD *)v791 - 7);
          v798 = *((_OWORD *)v791 - 5);
          *((_OWORD *)v795 - 6) = *((_OWORD *)v791 - 6);
          *((_OWORD *)v795 - 5) = v798;
          *((_OWORD *)v795 - 8) = v796;
          *((_OWORD *)v795 - 7) = v797;
          v799 = *((_OWORD *)v791 - 4);
          v800 = *((_OWORD *)v791 - 3);
          v801 = *((_OWORD *)v791 - 1);
          *((_OWORD *)v795 - 2) = *((_OWORD *)v791 - 2);
          *((_OWORD *)v795 - 1) = v801;
          *((_OWORD *)v795 - 4) = v799;
          *((_OWORD *)v795 - 3) = v800;
          v791 -= 128;
          v795 -= 128;
        }
        while (v791 != v790);
      }
      *v951 = v794;
      v951[1] = v793;
      v951[2] = &v792[128 * v789];
      if (v790)
      {
        operator delete(v790);
        v789 = 0x8FD8FD8FD8FD8FD9 * ((v1036 - (_BYTE *)v1035) >> 3);
      }
    }
    v802 = v789;
    if ((_DWORD)v789)
    {
      v803 = 0;
      do
      {
        v806 = (char *)v1035 + 840 * v803;
        _Q6.f64[0] = *((float64_t *)v806 + 3);
        _Q3 = *(float64x2_t *)(v806 + 8);
        v808 = *((double *)v806 + 6);
        _Q4 = *((float64x2_t *)v806 + 2);
        v810 = *((double *)v806 + 9);
        _Q5 = *(float64x2_t *)(v806 + 56);
        _Q16.f64[0] = *((float64_t *)v806 + 12);
        _Q17 = *((float64x2_t *)v806 + 5);
        v813 = (float64x2_t)vzip2q_s64((int64x2_t)_Q3, (int64x2_t)_Q4);
        v814 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q3, (int64x2_t)_Q4), _Q17.f64[0]), v813, _Q17, 1);
        v815 = *(_QWORD *)v1234 + 840 * v803;
        v813.f64[0] = *(float64_t *)(v815 + 24);
        v816 = *(int64x2_t *)(v815 + 8);
        v817 = *(int64x2_t *)(v815 + 32);
        v818 = (float64x2_t)vzip1q_s64(v816, v817);
        v819 = (float64x2_t)vzip2q_s64(v816, v817);
        v820 = vzip1q_s64((int64x2_t)v819, vdupq_laneq_s64((int64x2_t)v819, 1));
        v821 = (float64x2_t)vzip1q_s64((int64x2_t)v818, v820);
        v822 = vmulq_n_f64(v821, _Q6.f64[0]);
        v823 = vmulq_f64(v813, _Q6).f64[0];
        _Q6.f64[1] = v808;
        v824 = vmlaq_n_f64(v814, _Q6, _Q16.f64[0]);
        _Q6 = vmulq_f64(_Q5, _Q17);
        _Q17.f64[0] = _Q17.f64[1];
        __asm { FMLA            D6, D17, V5.D[1] }
        _Q6.f64[0] = _Q6.f64[0] + v810 * _Q16.f64[0];
        _Q16.f64[0] = *(float64_t *)(v815 + 48);
        _Q17.f64[0] = *(float64_t *)(v815 + 72);
        _Q24 = *(float64x2_t *)(v815 + 56);
        v827 = vmlaq_laneq_f64(vmulq_n_f64(v818, *(double *)(v815 + 80)), v819, *(float64x2_t *)(v815 + 80), 1);
        v819.f64[0] = *(float64_t *)(v815 + 96);
        v828 = vmlaq_n_f64(v827, (float64x2_t)vzip1q_s64((int64x2_t)v813, (int64x2_t)_Q16), v819.f64[0]);
        _D26 = *(_QWORD *)(v815 + 88);
        __asm { FMLA            D25, D26, V24.D[1] }
        v819.f64[0] = _D25 + _Q17.f64[0] * v819.f64[0];
        v831 = (float64x2_t)vzip2q_s64((int64x2_t)v818, v820);
        v832 = vmlaq_n_f64(vmulq_n_f64(v821, _Q3.f64[0]), v831, _Q4.f64[0]);
        *(double *)v820.i64 = vmlad_n_f64(vmulq_f64(v813, _Q3).f64[0], _Q16.f64[0], _Q4.f64[0]);
        v833 = vmlaq_laneq_f64(vmulq_laneq_f64(v821, _Q3, 1), v831, _Q4, 1);
        __asm
        {
          FMLA            D3, D16, V4.D[1]
          FMLA            D3, D17, V5.D[1]
        }
        *(_OWORD *)&object[16] = COERCE_UNSIGNED_INT64(vmlad_n_f64(*(double *)v820.i64, _Q17.f64[0], _Q5.f64[0]));
        *(float64x2_t *)object = vmlaq_n_f64(v832, _Q24, _Q5.f64[0]);
        *(_OWORD *)&object[48] = *(unint64_t *)&_Q3.f64[0];
        *(float64x2_t *)&object[32] = vmlaq_laneq_f64(v833, _Q24, _Q5, 1);
        *(_QWORD *)&object[88] = 0;
        *(double *)&object[80] = v823 + _Q16.f64[0] * v808 + _Q17.f64[0] * v810;
        *(float64x2_t *)&object[64] = vmlaq_n_f64(vmlaq_n_f64(v822, v831, v808), _Q24, v810);
        _Q0 = vsubq_f64(v828, v824);
        *(_QWORD *)&v824.f64[0] = *(_OWORD *)&vsubq_f64(v819, _Q6);
        __asm { FMLA            D3, D16, V0.D[1] }
        *(_QWORD *)&object[120] = 0x3FF0000000000000;
        *(float64x2_t *)&object[96] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v821, _Q0.f64[0]), v831, _Q0, 1), _Q24, v824.f64[0]);
        *(_QWORD *)&object[112] = vmlad_n_f64(_Q3.f64[0], _Q17.f64[0], v824.f64[0]);
        LODWORD(v1241[0]) = 4;
        v1241[1] = object;
        LODWORD(v1241[2]) = 0;
        memset(v1242, 0, 24);
        sub_20F053450((unsigned int *)v1241, (double *)v1242);
        v835 = *(double *)&v1242[0].__r_.__value_.__r.__words[2];
        _D18 = *(double *)&object[112];
        _Q19 = *(float64x2_t *)&object[96];
        v838 = v835 * v835 + 0.0;
        if (v838 >= 0.0000002635)
        {
          v843 = sqrt(v838);
          __dstd = *(double *)&object[112];
          *(_OWORD *)__srcc = *(_OWORD *)&object[96];
          v844 = __sincos_stret(v843);
          cosval = v844.__cosval;
          _Q19 = *(float64x2_t *)__srcc;
          _D18 = __dstd;
          v840 = 1.0;
          v841 = v844.__sinval / v843;
          v839 = 1.0 / v838 * (1.0 - v844.__cosval);
        }
        else
        {
          v839 = 0.5 - v838 * (v838 / -720.0 + 0.0416666667);
          v840 = 1.0;
          v841 = 1.0 - v838 * (0.166666667 - v838 * (v838 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v838 * v839;
        }
        v845 = v839 * 0.0;
        v846 = v839 * 0.0 * 0.0;
        _Q6.f64[0] = cosval + v846;
        *(double *)&_D0 = cosval + v835 * (v835 * v839);
        v848 = v835 * v845;
        v849 = v841 * 0.0;
        v850 = v835 * v841;
        v851 = v846 - v850;
        v852.f64[0] = v846 + v850;
        *(_QWORD *)&_Q19.f64[1] = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
        v857.f64[0] = _Q6.f64[0];
        v853 = vdupq_lane_s64(*(uint64_t *)&v852.f64[0], 0);
        v852.f64[1] = _Q6.f64[0];
        _Q6.f64[1] = v848 - v849;
        __asm { FMLS            D20, D1, V19.D[1] }
        v855.f64[1] = 0.0;
        v855.f64[0] = v848 - v849;
        v856.f64[0] = v848 - v849;
        v856.f64[1] = v849 + v848;
        v857.f64[1] = v851;
        v858 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v857, vnegq_f64(_Q19).f64[0]), v852, _Q19, 1), v856, _D18, 0);
        __asm { FMLS            D20, D0, V18.D[0] }
        v859 = (float64x2_t)*(unint64_t *)&v856.f64[1];
        v860 = (float64x2_t)_D0;
        v861 = vzip1q_s64(v853, (int64x2_t)_Q6);
        _Q20.f64[1] = v840;
        v864 = (float64x2_t *)v951[1];
        v863 = (unint64_t)v951[2];
        if ((unint64_t)v864 < v863)
        {
          *v864 = v857;
          v864[1] = (float64x2_t)*(unint64_t *)&v856.f64[1];
          v864[2] = (float64x2_t)v861;
          v864[3] = v855;
          v864[4] = v856;
          v864[5] = v860;
          f64 = (_OWORD *)v864[8].f64;
          v864[6] = v858;
          v864[7] = _Q20;
          v805 = v951;
        }
        else
        {
          v865 = (float64x2_t *)*v951;
          v866 = ((char *)v864 - (_BYTE *)*v951) >> 7;
          v867 = v866 + 1;
          if ((unint64_t)(v866 + 1) >> 57)
            sub_20E867F44();
          v868 = v863 - (_QWORD)v865;
          if (v868 >> 6 > v867)
            v867 = v868 >> 6;
          if ((unint64_t)v868 >= 0x7FFFFFFFFFFFFF80)
            v869 = 0x1FFFFFFFFFFFFFFLL;
          else
            v869 = v867;
          if (v869)
          {
            v963 = (float64x2_t)*(unint64_t *)&v856.f64[1];
            v969 = v861;
            v975 = v860;
            v981 = v855;
            v988 = v856;
            v995 = v858;
            *(float64x2_t *)__srcb = _Q20;
            *(float64x2_t *)__dstc = v857;
            if (v869 >> 57)
              sub_20E877A38();
            v870 = (char *)operator new(v869 << 7);
            v857 = *(float64x2_t *)__dstc;
            _Q20 = *(float64x2_t *)__srcb;
            v858 = v995;
            v856 = v988;
            v855 = v981;
            v860 = v975;
            v861 = v969;
            v859 = v963;
          }
          else
          {
            v870 = 0;
          }
          v871 = (float64x2_t *)&v870[128 * v866];
          *v871 = v857;
          v871[1] = v859;
          v871[2] = (float64x2_t)v861;
          v871[3] = v855;
          v871[4] = v856;
          v871[5] = v860;
          v871[6] = v858;
          v871[7] = _Q20;
          v872 = v871;
          if (v864 != v865)
          {
            do
            {
              v873 = v864[-8];
              v874 = v864[-7];
              v875 = v864[-5];
              v872[-6] = v864[-6];
              v872[-5] = v875;
              v872[-8] = v873;
              v872[-7] = v874;
              v876 = v864[-4];
              v877 = v864[-3];
              v878 = v864[-1];
              v872[-2] = v864[-2];
              v872[-1] = v878;
              v872[-4] = v876;
              v872[-3] = v877;
              v872 -= 8;
              v864 -= 8;
            }
            while (v864 != v865);
            v864 = v865;
          }
          f64 = (_OWORD *)v871[8].f64;
          v805 = v951;
          *v951 = v872;
          v951[1] = f64;
          v951[2] = &v870[128 * v869];
          if (v864)
          {
            operator delete(v864);
            v805 = v951;
          }
        }
        v805[1] = f64;
        ++v803;
      }
      while (v803 != v802);
    }
  }
  *((_QWORD *)&v1034 + 1) = 0;
  if (v1033 != v1032 && v1033)
    MEMORY[0x212BC6368](v1033, 0x1000C8000313F17);
  v1029 = 0;
  if (v1027 != v1026 && v1027)
    MEMORY[0x212BC6368](v1027, 0x1000C8000313F17);
  *(_QWORD *)&v1025 = 0;
  if (v1023 != &__p[616] && v1023)
    MEMORY[0x212BC6368](v1023, 0x1000C8000313F17);
  *(_QWORD *)&__p[608] = 0;
  if (*(_BYTE **)&__p[592] != &__p[80] && *(_QWORD *)&__p[592])
    MEMORY[0x212BC6368](*(_QWORD *)&__p[592], 0x1000C8000313F17);
  if ((__p[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[24]);
    if ((__p[23] & 0x80000000) != 0)
      goto LABEL_748;
LABEL_737:
    v879 = *(char **)v1234;
    if (*(_QWORD *)v1234)
      goto LABEL_738;
LABEL_749:
    v881 = (char *)v1035;
    if (v1035)
      goto LABEL_750;
LABEL_740:
    v1045 = off_24C9FF5C0;
    if (v1151 != 2)
      goto LABEL_757;
    goto LABEL_758;
  }
  if ((__p[23] & 0x80000000) == 0)
    goto LABEL_737;
LABEL_748:
  operator delete(*(void **)__p);
  v879 = *(char **)v1234;
  if (!*(_QWORD *)v1234)
    goto LABEL_749;
LABEL_738:
  v880 = *(char **)&v1234[8];
  if (*(char **)&v1234[8] != v879)
  {
    do
    {
      v882 = (void *)*((_QWORD *)v880 - 11);
      if (v882)
      {
        *((_QWORD *)v880 - 10) = v882;
        operator delete(v882);
      }
      v880 -= 840;
    }
    while (v880 != v879);
    *(_QWORD *)&v1234[8] = v879;
    operator delete(*(void **)v1234);
    v881 = (char *)v1035;
    if (v1035)
      goto LABEL_750;
    goto LABEL_740;
  }
  *(_QWORD *)&v1234[8] = v879;
  operator delete(v879);
  v881 = (char *)v1035;
  if (!v1035)
    goto LABEL_740;
LABEL_750:
  v883 = v1036;
  v884 = v881;
  if (v1036 != v881)
  {
    do
    {
      v885 = (void *)*((_QWORD *)v883 - 11);
      if (v885)
      {
        *((_QWORD *)v883 - 10) = v885;
        operator delete(v885);
      }
      v883 -= 840;
    }
    while (v883 != v881);
    v884 = v1035;
  }
  v1036 = v881;
  operator delete(v884);
  v1045 = off_24C9FF5C0;
  if (v1151 != 2)
LABEL_757:
    sub_20E8BF000((uint64_t)v1152);
LABEL_758:
  sub_20F3C05F0((uint64_t)&v1045);
  v1159 = off_24C9FCF80;
  if ((_QWORD)v1182)
    MEMORY[0x212BC6368](v1182, 0x1000C8000313F17);
  v887 = v1180;
  if (v1180 == v1179)
  {
    v888 = 4;
    v887 = v1179;
LABEL_764:
    (*(void (**)(_QWORD *, uint64_t))(*v887 + 8 * v888))(v887, v886);
  }
  else if (v1180)
  {
    v888 = 5;
    goto LABEL_764;
  }
  v889 = v1178;
  if (v1178 == v1177)
  {
    v890 = 4;
    v889 = v1177;
LABEL_769:
    (*(void (**)(_QWORD *, uint64_t))(*v889 + 8 * v890))(v889, v886);
  }
  else if (v1178)
  {
    v890 = 5;
    goto LABEL_769;
  }
  v891 = v1176;
  if (v1176 == v1175)
  {
    v892 = 4;
    v891 = v1175;
LABEL_774:
    (*(void (**)(_QWORD *, uint64_t))(*v891 + 8 * v892))(v891, v886);
  }
  else if (v1176)
  {
    v892 = 5;
    goto LABEL_774;
  }
  v893 = v1174;
  if (v1174 == v1173)
  {
    v894 = 4;
    v893 = v1173;
LABEL_779:
    (*(void (**)(_QWORD *, uint64_t))(*v893 + 8 * v894))(v893, v886);
  }
  else if (v1174)
  {
    v894 = 5;
    goto LABEL_779;
  }
  v1170 = 0;
  if (v1169 != (double *)&v1168 && v1169)
    MEMORY[0x212BC6368](v1169, 0x1000C8000313F17);
  v895 = v1204;
  if (v1204 == v1203)
  {
    v896 = 4;
    v895 = v1203;
LABEL_787:
    (*(void (**)(_QWORD *, uint64_t))(*v895 + 8 * v896))(v895, v886);
  }
  else if (v1204)
  {
    v896 = 5;
    goto LABEL_787;
  }
  v897 = v1202;
  if (v1202 == v1201)
  {
    v898 = 4;
    v897 = v1201;
LABEL_792:
    (*(void (**)(_QWORD *, uint64_t))(*v897 + 8 * v898))(v897, v886);
  }
  else if (v1202)
  {
    v898 = 5;
    goto LABEL_792;
  }
  v899 = v1200;
  if (v1200 == v1199)
  {
    v900 = 4;
    v899 = v1199;
LABEL_797:
    (*(void (**)(_QWORD *, uint64_t))(*v899 + 8 * v900))(v899, v886);
  }
  else if (v1200)
  {
    v900 = 5;
    goto LABEL_797;
  }
  v901 = v1198;
  if (v1198 == v1197)
  {
    v902 = 4;
    v901 = v1197;
LABEL_802:
    (*(void (**)(_QWORD *, uint64_t))(*v901 + 8 * v902))(v901, v886);
  }
  else if (v1198)
  {
    v902 = 5;
    goto LABEL_802;
  }
  *((_QWORD *)&v1195 + 1) = 0;
  result = (uint64_t)v1194;
  if (v1194 != v1193 && v1194)
    return MEMORY[0x212BC6368](v1194, 0x1000C8000313F17);
  return result;
}

void sub_20F3BFD6C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2348]) && SLOBYTE(STACK[0x2347]) < 0)
    operator delete((void *)STACK[0x2330]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x2458]);
  if (SLOBYTE(STACK[0x2297]) < 0)
    operator delete((void *)STACK[0x2280]);
  sub_20E863784((uint64_t)&STACK[0x560]);
  sub_20F3C04A8((void **)&STACK[0xE28]);
  sub_20F3C0518((uint64_t)&STACK[0xE88]);
  sub_20F2C539C(&STACK[0x18C8]);
  sub_20F2B116C(&STACK[0x1C08]);
  _Unwind_Resume(a1);
}

void **sub_20F3C04A8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 11);
        if (v5)
        {
          *((_QWORD *)v3 - 10) = v5;
          operator delete(v5);
        }
        v3 -= 840;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20F3C0518(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9FF5C0;
  if (*(_DWORD *)(a1 + 2512) != 2)
    sub_20E8BF000(a1 + 2520);
  return sub_20F3C05F0(a1);
}

void ***sub_20F3C055C(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 11);
          if (v6)
          {
            *((_QWORD *)v4 - 10) = v6;
            operator delete(v6);
          }
          v4 -= 840;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_20F3C05F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = off_24C9FF6F0;
  v2 = *(_QWORD *)(a1 + 2472);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = *(_QWORD *)(a1 + 2448);
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  if (*(__int16 *)(a1 + 2424) < 0)
  {
    free(*(void **)(a1 + 2408));
    *(_OWORD *)(a1 + 2432) = 0u;
    *(_OWORD *)(a1 + 2416) = 0u;
    *(_OWORD *)(a1 + 2400) = 0u;
    return sub_20F3C65EC((_QWORD *)a1);
  }
  else
  {
    v4 = *(void **)(a1 + 2408);
    if (v4)
    {
      free(v4);
      *(_QWORD *)(a1 + 2408) = 0;
    }
    v5 = *(void **)(a1 + 2416);
    if (v5)
    {
      free(v5);
      *(_QWORD *)(a1 + 2416) = 0;
    }
    v6 = *(void **)(a1 + 2432);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(a1 + 2432) = 0;
    }
    *(_QWORD *)(a1 + 2440) = 0;
    return sub_20F3C65EC((_QWORD *)a1);
  }
}

void sub_20F3C06B8(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v5, "SparseHessian");
  v4 = 8;
  strcpy((char *)__p, "Cholesky");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 8uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_20F3C0780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F3C07BC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void **v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int64x2_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  int v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  unsigned int *v40;
  int v41;
  int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  unsigned int *v53;
  int32x2_t v54;
  uint64_t v55;
  unsigned int v56;
  _BYTE v57[24];
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (sub_20F3C9BE8(a1))
  {
    v2 = 1;
  }
  else if (*(_BYTE *)(a1 + 513))
  {
    v2 = 0;
  }
  else
  {
    v3 = *(void **)(a1 + 720);
    v4 = *(_QWORD *)(a1 + 728) - (_QWORD)v3;
    if (v4 >= 1)
      bzero(v3, 8 * (((unint64_t)v4 >> 3) - ((unint64_t)v4 > 7)) + 8);
    v5 = *(void **)(a1 + 944);
    v6 = *(_QWORD *)(a1 + 952) - (_QWORD)v5;
    if (v6 >= 1)
      bzero(v5, 8 * (((unint64_t)v6 >> 3) - ((unint64_t)v6 > 7)) + 8);
    v7 = *(void **)(a1 + 608);
    v8 = *(_QWORD *)(a1 + 616) - (_QWORD)v7;
    if (v8 >= 1)
      bzero(v7, 8 * (((unint64_t)v8 >> 3) - ((unint64_t)v8 > 7)) + 8);
    v9 = *(void **)(a1 + 832);
    v10 = *(_QWORD *)(a1 + 840) - (_QWORD)v9;
    if (v10 >= 1)
      bzero(v9, 8 * (((unint64_t)v10 >> 3) - ((unint64_t)v10 > 7)) + 8);
    v11 = *(unsigned int *)(a1 + 568);
    if ((_DWORD)v11)
      bzero(*(void **)(a1 + 552), 8 * v11);
    if (((*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 2)
       + ((*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 2))
    {
      kdebug_trace();
      v12 = sub_20F3D26E4((char **)(a1 + 552), (_QWORD *)(a1 + 1304), (char **)(a1 + 2056), (_QWORD *)(a1 + 2104));
      v13 = (void **)(a1 + 2200);
      v14 = ((*(_DWORD *)(a1 + 1832) - *(_DWORD *)(a1 + 1824)) & 0xFFFFFFFC)
          + 6 * ((*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 2);
      *(_DWORD *)(a1 + 2216) = v14;
      if (*(_QWORD *)(a1 + 2208) < v14)
      {
        if (*v13)
          MEMORY[0x212BC6368](*v13, 0x1000C8000313F17, v12);
        *(_QWORD *)(a1 + 2200) = 0;
        v15 = (8 * v14 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)(a1 + 2208) = v15 >> 3;
        *v13 = operator new(v15, (std::align_val_t)0x20uLL);
      }
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1272) + 24))(a1 + 1272);
      LODWORD(v63.f64[0]) = 0;
      sub_20F3D3834(v16, *(_DWORD **)(a1 + 1824), *(_DWORD **)(a1 + 1832), (_QWORD *)(a1 + 2200), &v63);
      v17 = *(_DWORD **)(a1 + 1848);
      v18 = *(_DWORD **)(a1 + 1856);
      if (v17 == v18)
      {
        v27 = *(_QWORD *)(a1 + 1848);
      }
      else
      {
        v19 = *(_QWORD *)(v16 + 104);
        v20 = LODWORD(v63.f64[0]);
        do
        {
          v19 -= 16;
          do
          {
            v21 = *(_DWORD *)(v19 + 16);
            v19 += 16;
          }
          while (*v17 != v21);
          v22 = *(_QWORD *)(v19 + 8);
          LODWORD(v60.f64[0]) = 3;
          *(_QWORD *)&v60.f64[1] = v22 + 32;
          LODWORD(v61.f64[0]) = 0;
          memset(v57, 0, sizeof(v57));
          sub_20F053450((unsigned int *)&v60, (double *)v57);
          v23.i64[0] = *(_QWORD *)&v57[16];
          v24.i64[0] = *(_QWORD *)(v22 + 120);
          v25 = *(int8x16_t *)(v22 + 104);
          v26 = (uint64_t)*v13 + 8 * v20;
          *(_OWORD *)v26 = *(_OWORD *)v57;
          *(int64x2_t *)(v26 + 16) = vzip1q_s64(v23, (int64x2_t)v25);
          *(int8x16_t *)(v26 + 32) = vextq_s8(v25, v24, 8uLL);
          v20 += 6;
          LODWORD(v63.f64[0]) = v20;
          ++v17;
        }
        while (v17 != v18);
        v27 = *(_QWORD *)(a1 + 1856);
        v17 = *(_DWORD **)(a1 + 1848);
      }
      if (((*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 2)
         + ((unint64_t)(v27 - (_QWORD)v17) >> 2))
      {
        sub_20F3DA0B8((_QWORD *)(a1 + 1344), (void **)(a1 + 2224));
        sub_20F20B6B0(a1 + 2224);
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1272) + 32))(a1 + 1272);
        sub_20F3DA1D4(v28, a1 + 2320, (_QWORD *)(a1 + 1824), (uint64_t *)(a1 + 1280));
        v29 = *(unsigned int **)(a1 + 1824);
        v30 = *(unsigned int **)(a1 + 1832);
        if (v29 != v30)
        {
          v31 = 0;
          v32 = 0;
          v33 = *(unsigned int **)(a1 + 1072);
          do
          {
            if (*v33 < *v29)
            {
              do
              {
                v34 = v33[1];
                ++v33;
                ++v31;
              }
              while (v34 < *v29);
            }
            v35 = *(_DWORD *)(a1 + 1336) + 4 * v32;
            v36 = *(_QWORD *)(a1 + 2224);
            v54 = vrev64_s32(*(int32x2_t *)(a1 + 2240));
            v55 = v36 + 8 * v35;
            v56 = v35;
            v37 = (float64x2_t *)(*(_QWORD *)(a1 + 552) + 8 * (*(_DWORD *)(a1 + 584) + 4 * v31));
            v38 = v37[1];
            v63 = *v37;
            v64 = v38;
            *(_QWORD *)v57 = &v63;
            *(_QWORD *)&v60.f64[1] = &v54;
            *(_QWORD *)&v61.f64[0] = a1 + 2320;
            v61.f64[1] = 1.0;
            sub_20F3DA534(&v57[8], (uint64_t)&v60);
            v39 = vsubq_f64(*(float64x2_t *)(*(_QWORD *)v57 + 16), v58);
            *v37 = vsubq_f64(**(float64x2_t **)v57, *(float64x2_t *)&v57[8]);
            v37[1] = v39;
            ++v29;
            ++v32;
          }
          while (v29 != v30);
        }
        v40 = *(unsigned int **)(a1 + 1848);
        v53 = *(unsigned int **)(a1 + 1856);
        if (v40 != v53)
        {
          v41 = 0;
          v42 = 0;
          v43 = *(unsigned int **)(a1 + 1096);
          do
          {
            if (*v43 < *v40)
            {
              do
              {
                v44 = v43[1];
                ++v43;
                ++v41;
              }
              while (v44 < *v40);
            }
            v45 = *(_DWORD *)(a1 + 1340) + 6 * v42;
            v46 = *(_QWORD *)(a1 + 2224);
            v54 = vrev64_s32(*(int32x2_t *)(a1 + 2240));
            v55 = v46 + 8 * v45;
            v56 = v45;
            v47 = (float64x2_t *)(*(_QWORD *)(a1 + 552) + 8 * (*(_DWORD *)(a1 + 588) + 6 * v41));
            v48 = *v47;
            v49 = v47[2];
            v61 = v47[1];
            v62 = v49;
            v60 = v48;
            *(_QWORD *)v57 = &v60;
            *(_QWORD *)&v63.f64[1] = &v54;
            *(_QWORD *)&v64.f64[0] = a1 + 2320;
            v64.f64[1] = 1.0;
            sub_20F3DA5F4(&v57[8], (uint64_t)&v63);
            v50 = vsubq_f64(**(float64x2_t **)v57, *(float64x2_t *)&v57[8]);
            v51 = vsubq_f64(*(float64x2_t *)(*(_QWORD *)v57 + 32), v59);
            v47[1] = vsubq_f64(*(float64x2_t *)(*(_QWORD *)v57 + 16), v58);
            v47[2] = v51;
            *v47 = v50;
            ++v40;
            ++v42;
          }
          while (v40 != v53);
        }
      }
      kdebug_trace();
    }
    sub_20F3CD36C(a1 + 1120);
    v2 = 0;
    *(_WORD *)(a1 + 513) = 1;
  }
  kdebug_trace();
  return v2;
}

void sub_20F3C0D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F3C0DB4(uint64_t a1, double **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  size_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unint64_t v76;
  unsigned int *v77;
  unint64_t v78;
  _OWORD *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  __n128 *v85;
  unint64_t v86;
  __n128 v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  __n128 *v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  __n128 *v98;
  unint64_t v99;
  __n128 v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  void *v108;
  __n128 *v109;
  unsigned int v110;
  unint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  __n128 *v121;
  __n128 *v122;
  __n128 v123;
  void *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  __n128 *v132;
  __n128 *v133;
  __n128 v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  __n128 *v145;
  __n128 *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  __n128 *v158;
  __n128 *v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  __n128 *v171;
  __n128 *v172;
  __n128 v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  __n128 *v184;
  __n128 *v185;
  __n128 v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  __n128 *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  __n128 *v198;
  __n128 v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int *v202;
  __n128 *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char *v210;
  __n128 *v211;
  __n128 v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int *v216;
  __n128 *v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  unsigned int *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char *v230;
  __n128 *v231;
  __n128 *v232;
  __n128 v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  unsigned int *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char *v245;
  __n128 *v246;
  __n128 *v247;
  __n128 v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int *v252;
  __n128 *v253;
  unsigned int v254;
  uint64_t v255;
  __n128 *v256;
  unsigned int *v257;
  uint64_t v258;
  char *v259;
  unint64_t v260;
  __n128 *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  __n128 *v266;
  __n128 *v267;
  __n128 v268;
  char *v269;
  unint64_t v270;
  __n128 *v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  char *v275;
  __n128 v276;
  char *v277;
  unint64_t v278;
  __n128 *v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  __n128 v284;
  char *v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  char *v290;
  __n128 v291;
  __n128 *v292;
  unsigned int *v293;
  uint64_t v294;
  char *v295;
  unint64_t v296;
  __n128 *v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  char *v301;
  __n128 *v302;
  __n128 *v303;
  __n128 v304;
  unint64_t v305;
  uint64_t v306;
  char *v307;
  unint64_t v308;
  __n128 *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  __n128 v314;
  char *v315;
  unint64_t v316;
  __n128 *v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  char *v321;
  __n128 v322;
  char *v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  char *v328;
  __n128 v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int *v333;
  __n128 *v334;
  unsigned int v335;
  uint64_t v336;
  __n128 *v337;
  unsigned int *v338;
  uint64_t v339;
  char *v340;
  unint64_t v341;
  __n128 *v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  char *v346;
  __n128 *v347;
  __n128 *v348;
  __n128 v349;
  char *v350;
  unint64_t v351;
  __n128 *v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  char *v356;
  __n128 v357;
  char *v358;
  unint64_t v359;
  __n128 *v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  char *v364;
  __n128 v365;
  char *v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  unint64_t v370;
  char *v371;
  __n128 v372;
  __n128 *v373;
  unsigned int *v374;
  uint64_t v375;
  char *v376;
  unint64_t v377;
  __n128 *v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  char *v382;
  __n128 *v383;
  __n128 *v384;
  __n128 v385;
  unint64_t v386;
  uint64_t v387;
  char *v388;
  unint64_t v389;
  __n128 *v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  char *v394;
  __n128 v395;
  char *v396;
  unint64_t v397;
  __n128 *v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  char *v402;
  __n128 v403;
  char *v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  char *v409;
  __n128 v410;
  unint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  _BYTE *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  _QWORD *v422;
  _QWORD *v423;
  uint64_t v424;
  size_t v425;
  double **v426;
  unsigned int *v427;
  int v428;
  uint64_t v429;
  size_t v430;
  unsigned int *v431;
  double *v432;
  unint64_t v433;
  double *v434;
  unint64_t v435;
  uint64_t v436;
  double *v437;
  float64x2_t *v438;
  float64x2_t *v439;
  uint64_t v440;
  float64x2_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unsigned int *v445;
  uint64_t v446;
  unsigned int *v447;
  unsigned int v448;
  unint64_t v449;
  uint64_t v450;
  unsigned int v451;
  unint64_t v452;
  __n128 *v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  unint64_t v459;
  char *v460;
  __n128 *v461;
  __n128 *v462;
  __n128 v463;
  __n128 *v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  char *v473;
  __n128 *v474;
  __n128 *v475;
  __n128 v476;
  __n128 *v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  char *v486;
  __n128 *v487;
  __n128 *v488;
  __n128 v489;
  __n128 *v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t v498;
  char *v499;
  __n128 *v500;
  __n128 *v501;
  __n128 v502;
  unsigned int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unsigned int *v508;
  unsigned int v509;
  uint64_t v510;
  unsigned int v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  unint64_t v520;
  char *v521;
  __n128 *v522;
  __n128 *v523;
  __n128 v524;
  __n128 *v525;
  unsigned int v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unsigned int *v531;
  unsigned int v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  unsigned int v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  unint64_t v542;
  char *v543;
  __n128 *v544;
  __n128 *v545;
  __n128 v546;
  __n128 *v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  uint64_t v553;
  unint64_t v554;
  char *v555;
  __n128 *v556;
  __n128 *v557;
  __n128 v558;
  __n128 *v559;
  unint64_t v560;
  unint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  unsigned __int32 v566;
  char *v567;
  __n128 *v568;
  __n128 *v569;
  __n128 v570;
  __n128 *v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unsigned __int32 v578;
  char *v579;
  __n128 *v580;
  __n128 *v581;
  __n128 v582;
  __n128 *v583;
  unsigned int v584;
  unint64_t v585;
  unsigned int *v586;
  uint64_t v587;
  _QWORD *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unsigned int v593;
  uint64_t v594;
  unsigned int *v595;
  unsigned int v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unsigned int v600;
  char *v601;
  unint64_t v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  unint64_t v606;
  char *v607;
  __n128 *v608;
  __n128 *v609;
  __n128 v610;
  __n128 *v611;
  unint64_t v612;
  unint64_t v613;
  unint64_t v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  unint64_t v618;
  char *v619;
  __n128 *v620;
  __n128 *v621;
  __n128 v622;
  __n128 *v623;
  unint64_t v624;
  unint64_t v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  unint64_t v629;
  unsigned __int32 v630;
  char *v631;
  __n128 *v632;
  __n128 *v633;
  __n128 v634;
  __n128 *v635;
  unint64_t v636;
  unint64_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  unint64_t v641;
  unsigned __int32 v642;
  char *v643;
  __n128 *v644;
  __n128 *v645;
  __n128 v646;
  __n128 *v647;
  unsigned int v648;
  unint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  size_t v654;
  __n128 *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  unint64_t v660;
  unsigned __int32 v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  unsigned int v665;
  char *v666;
  uint64_t v667;
  char *v668;
  unsigned int v669;
  char *v670;
  uint64_t v671;
  uint64_t v672;
  size_t v673;
  double v674;
  unsigned int v676;
  unsigned int v677;
  unsigned int v678;
  unsigned int v679;
  double **v680;
  unsigned int *v681;
  unsigned int *v682;
  uint64_t v683;
  int64_t v684;
  unsigned int v685;
  unsigned int v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unint64_t v690;
  unsigned int *v691;
  unsigned int *v692;
  unsigned int *v693;
  unsigned int *v694;
  unsigned int *v695;
  unint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  unsigned int *v701;
  unint64_t v702;
  uint64_t v703;
  unsigned int *v704;
  unint64_t v705;
  uint64_t v706;
  unsigned int *v707;
  uint64_t v708;
  uint64_t v709;
  unsigned int v710;
  uint64_t v711;
  unsigned int *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  unsigned int *v717;
  unsigned int *v718;
  uint64_t v719;
  uint64_t v720;
  unsigned int *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  int v727;
  uint64_t v728;
  unsigned int v729;
  unint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  unsigned int *v734;
  uint64_t v735;
  unsigned int v736;
  unsigned int v737;
  void *__p;
  char *__pa;
  char *__pb;
  char *__pc;
  unint64_t __pd;
  unsigned int __pe;
  unsigned int *__pf;
  char *__pg;
  uint64_t v746;
  unsigned int *v747;
  unint64_t v748;
  unsigned int *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  unsigned int v754;
  unsigned int *v755;
  unsigned int *v756;
  unint64_t v757;
  uint64_t v758;
  uint64_t v759;
  unsigned int v760;
  uint64_t v761;
  uint64_t v762;
  unsigned int v763;
  unsigned int v764;
  uint64_t v765;
  unsigned int v766;
  unsigned int v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  uint64_t v771;
  int v772;
  uint64_t v773;
  uint64_t v774;
  unsigned int v775;
  unint64_t v776;
  char *v777;
  unint64_t v778;
  char *v779;
  double v780;
  __n128 *v781;
  char *v782;
  __n128 *v783;
  __n128 *v784;
  unsigned int *v785;
  unsigned int *v786;
  unsigned int *v787;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  v680 = a2;
  kdebug_trace();
  v681 = (unsigned int *)(a1 + 2400);
  v5 = a1 + 592;
  v6 = *(_QWORD *)(a1 + 1040);
  v7 = 6 * *(_DWORD *)(*(_QWORD *)(a1 + 1056) + 8) + 4 * *(_DWORD *)(v6 + 8);
  v8 = *(unsigned int **)(a1 + 1224);
  v697 = a1;
  v9 = *(unsigned int **)(a1 + 1232);
  if (*(_DWORD *)(a1 + 524))
  {
    if (v8 != v9)
    {
      v10 = v8 + 1;
      v11 = *(unsigned int **)(a1 + 1224);
      if (v8 + 1 != v9)
      {
        v12 = *v8;
        v11 = *(unsigned int **)(a1 + 1224);
        v13 = v8 + 1;
        do
        {
          v15 = *v13++;
          v14 = v15;
          v16 = v12 >= v15;
          if (v12 <= v15)
            v12 = v14;
          if (!v16)
            v11 = v10;
          v10 = v13;
        }
        while (v13 != v9);
      }
      if (*v11 + 4 > v7)
        v7 = *v11 + 4;
    }
    v17 = *(unsigned int **)(a1 + 1248);
    v18 = *(unsigned int **)(a1 + 1256);
    if (v17 != v18)
    {
      v19 = v17 + 1;
      v20 = *(unsigned int **)(a1 + 1248);
      if (v17 + 1 != v18)
      {
        v21 = *v17;
        v20 = *(unsigned int **)(a1 + 1248);
        v22 = v17 + 1;
        do
        {
          v24 = *v22++;
          v23 = v24;
          v25 = v21 >= v24;
          if (v21 <= v24)
            v21 = v23;
          if (!v25)
            v20 = v19;
          v19 = v22;
        }
        while (v22 != v18);
      }
      if (*v20 + 6 > v7)
        v7 = *v20 + 6;
    }
    v26 = 6 * *(_DWORD *)(*(_QWORD *)(a1 + 1048) + 12) + 4 * *(_DWORD *)(v6 + 12);
    if (v8 != v9)
    {
      v27 = v8 + 1;
      if (v8 + 1 != v9)
      {
        v28 = *v8;
        v29 = v8 + 1;
        do
        {
          v31 = *v29++;
          v30 = v31;
          v32 = v28 >= v31;
          if (v28 <= v31)
            v28 = v30;
          if (!v32)
            v8 = v27;
          v27 = v29;
        }
        while (v29 != v9);
      }
      v33 = *v8 + 4;
      if (v33 > v26)
        v26 = v33;
    }
    if (v17 != v18)
    {
      v34 = v17 + 1;
      if (v17 + 1 != v18)
      {
        v35 = *v17;
        v36 = v17 + 1;
        do
        {
          v38 = *v36++;
          v37 = v38;
          v39 = v35 >= v38;
          if (v35 <= v38)
            v35 = v37;
          if (!v39)
            v17 = v34;
          v34 = v36;
        }
        while (v36 != v18);
      }
      if (*v17 + 6 > v26)
        v26 = *v17 + 6;
    }
    v685 = v7;
    v40 = v26;
    v785 = 0;
    v786 = 0;
    v787 = 0;
    v683 = v26;
    if (v26)
    {
      v41 = 4 * v26;
      v785 = (unsigned int *)operator new(v41);
      v787 = &v785[v40];
      bzero(v785, v41);
      v786 = v787;
    }
    v94 = v697;
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v697 + 704) + 40))(v697 + 704);
    v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v94 + 928) + 40))(v94 + 928);
    v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v98 = 0;
    v99 = (36 * v96)
        + (unint64_t)(24 * v95)
        + (16 * v97)
        + (unint64_t)(24 * (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v94 + 816) + 40))(v94 + 816));
    v782 = 0;
    v784 = 0;
    v101 = *(unsigned __int8 *)(v94 + 2428) * *(unsigned __int8 *)(v94 + 2428);
    if (v99 >= v101)
    {
      v102 = v99 / v101;
      v98 = (__n128 *)operator new(32 * (v99 / v101));
      v782 = (char *)v98;
      v784 = &v98[2 * v102];
    }
    v103 = *(unsigned int *)(v697 + 716);
    if ((_DWORD)v103)
    {
      v104 = 0;
      v698 = *(_QWORD *)(v697 + 720);
      v105 = (uint64_t)v98;
      v775 = v7;
LABEL_105:
      v106 = *(_QWORD *)(v697 + 792) + 24 * v104;
      v107 = *(unsigned int **)v106;
      v692 = *(unsigned int **)(v106 + 8);
      if (*(unsigned int **)v106 == v692)
        goto LABEL_104;
      v687 = v104;
      v108 = (void *)*(unsigned int *)(*(_QWORD *)(v697 + 1224) + 4 * v104);
      v761 = ((_DWORD)v108 + 1);
      v730 = v108 * (unint64_t)v775;
      v753 = ((_DWORD)v108 + 2);
      __p = v108;
      v746 = ((_DWORD)v108 + 3);
      v109 = (__n128 *)v105;
LABEL_108:
      v110 = *(_DWORD *)(*(_QWORD *)(v697 + 1248) + 4 * *v107);
      v704 = v107;
      v111 = v698 + 8 * *((_QWORD *)v107 + 1);
      v112 = v785;
      v766 = v110;
      v113 = 0;
      if (v108 < v110)
      {
        while (1)
        {
          v114 = v110 + v113;
          v115 = (unint64_t)v108 + v775 * (unint64_t)v114;
          if (v98 >= v784)
            break;
          v98->n128_u64[0] = v115;
          v98->n128_u32[2] = v108;
          v98[1].n128_u64[0] = v111;
          v98[1].n128_u32[2] = 1;
          v98 += 2;
LABEL_111:
          ++v112[v114];
          ++v113;
          v111 += 8;
          if (v113 == 6)
          {
            v135 = 0;
            v136 = v698 + 8 * *((_QWORD *)v704 + 1) + 48;
            v137 = v785;
            while (1)
            {
              v138 = v110 + v135;
              v139 = v761 + v775 * (unint64_t)v138;
              if (v98 >= v784)
                break;
              v98->n128_u64[0] = v139;
              v98->n128_u32[2] = v761;
              v98[1].n128_u64[0] = v136;
              v98[1].n128_u32[2] = 1;
              v98 += 2;
LABEL_153:
              ++v137[v138];
              ++v135;
              v136 += 8;
              if (v135 == 6)
              {
                v161 = 0;
                v162 = v698 + 8 * *((_QWORD *)v704 + 1) + 96;
                v163 = v785;
                while (1)
                {
                  v164 = v110 + v161;
                  v165 = v753 + v775 * (unint64_t)v164;
                  if (v98 >= v784)
                    break;
                  v98->n128_u64[0] = v165;
                  v98->n128_u32[2] = v753;
                  v98[1].n128_u64[0] = v162;
                  v98[1].n128_u32[2] = 1;
                  v98 += 2;
LABEL_197:
                  ++v163[v164];
                  ++v161;
                  v162 += 8;
                  if (v161 == 6)
                  {
                    v187 = 0;
                    v188 = v698 + 8 * *((_QWORD *)v704 + 1) + 144;
                    v189 = v785;
                    v190 = v98;
                    while (1)
                    {
                      v191 = v110 + v187;
                      v192 = v746 + v775 * (unint64_t)v191;
                      if (v190 < v784)
                      {
                        v190->n128_u64[0] = v192;
                        v190->n128_u32[2] = v746;
                        v190[1].n128_u64[0] = v188;
                        v98 = v190 + 2;
                        v190[1].n128_u32[2] = 1;
                      }
                      else
                      {
                        v193 = ((char *)v190 - (char *)v109) >> 5;
                        v194 = v193 + 1;
                        if ((unint64_t)(v193 + 1) >> 59)
                          goto LABEL_847;
                        v195 = (char *)v784 - (char *)v109;
                        if (v784 - v109 > v194)
                          v194 = v195 >> 4;
                        if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFE0)
                          v196 = 0x7FFFFFFFFFFFFFFLL;
                        else
                          v196 = v194;
                        if (v196)
                        {
                          if (v196 >> 59)
                            goto LABEL_954;
                          v197 = (char *)operator new(32 * v196);
                        }
                        else
                        {
                          v197 = 0;
                        }
                        v105 = (uint64_t)&v197[32 * v193];
                        *(_QWORD *)v105 = v192;
                        *(_DWORD *)(v105 + 8) = v746;
                        v198 = (__n128 *)&v197[32 * v196];
                        *(_QWORD *)(v105 + 16) = v188;
                        *(_DWORD *)(v105 + 24) = 1;
                        v98 = (__n128 *)(v105 + 32);
                        if (v190 == v109)
                        {
                          v782 = &v197[32 * v193];
                          v784 = (__n128 *)&v197[32 * v196];
                          v110 = v766;
LABEL_259:
                          operator delete(v109);
                          v109 = (__n128 *)v105;
                          goto LABEL_241;
                        }
                        v110 = v766;
                        do
                        {
                          v100 = v190[-2];
                          v199 = v190[-1];
                          *(__n128 *)(v105 - 32) = v100;
                          *(__n128 *)(v105 - 16) = v199;
                          v105 -= 32;
                          v190 -= 2;
                        }
                        while (v190 != v109);
                        v782 = (char *)v105;
                        v784 = v198;
                        if (v109)
                          goto LABEL_259;
                        v109 = (__n128 *)v105;
                      }
LABEL_241:
                      ++v189[v191];
                      ++v187;
                      v188 += 8;
                      v190 = v98;
                      if (v187 == 6)
                        goto LABEL_107;
                    }
                  }
                }
                v166 = ((char *)v98 - (char *)v109) >> 5;
                v167 = v166 + 1;
                if ((unint64_t)(v166 + 1) >> 59)
                  goto LABEL_847;
                v168 = (char *)v784 - (char *)v109;
                if (v784 - v109 > v167)
                  v167 = v168 >> 4;
                if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFE0)
                  v169 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v169 = v167;
                if (v169)
                {
                  if (v169 >> 59)
                    goto LABEL_954;
                  v170 = (char *)operator new(32 * v169);
                }
                else
                {
                  v170 = 0;
                }
                v105 = (uint64_t)&v170[32 * v166];
                *(_QWORD *)v105 = v165;
                *(_DWORD *)(v105 + 8) = v753;
                v171 = (__n128 *)&v170[32 * v169];
                *(_QWORD *)(v105 + 16) = v162;
                *(_DWORD *)(v105 + 24) = 1;
                v172 = (__n128 *)(v105 + 32);
                if (v98 == v109)
                {
                  v782 = &v170[32 * v166];
                  v784 = (__n128 *)&v170[32 * v169];
                  v110 = v766;
                }
                else
                {
                  v110 = v766;
                  do
                  {
                    v100 = v98[-2];
                    v173 = v98[-1];
                    *(__n128 *)(v105 - 32) = v100;
                    *(__n128 *)(v105 - 16) = v173;
                    v105 -= 32;
                    v98 -= 2;
                  }
                  while (v98 != v109);
                  v782 = (char *)v105;
                  v784 = v171;
                  if (!v109)
                    goto LABEL_216;
                }
                operator delete(v109);
LABEL_216:
                v109 = (__n128 *)v105;
                v98 = v172;
                goto LABEL_197;
              }
            }
            v140 = ((char *)v98 - (char *)v109) >> 5;
            v141 = v140 + 1;
            if ((unint64_t)(v140 + 1) >> 59)
              goto LABEL_847;
            v142 = (char *)v784 - (char *)v109;
            if (v784 - v109 > v141)
              v141 = v142 >> 4;
            if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFE0)
              v143 = 0x7FFFFFFFFFFFFFFLL;
            else
              v143 = v141;
            if (v143)
            {
              if (v143 >> 59)
                goto LABEL_954;
              v144 = (char *)operator new(32 * v143);
            }
            else
            {
              v144 = 0;
            }
            v105 = (uint64_t)&v144[32 * v140];
            *(_QWORD *)v105 = v139;
            *(_DWORD *)(v105 + 8) = v761;
            v145 = (__n128 *)&v144[32 * v143];
            *(_QWORD *)(v105 + 16) = v136;
            *(_DWORD *)(v105 + 24) = 1;
            v146 = (__n128 *)(v105 + 32);
            if (v98 == v109)
            {
              v782 = &v144[32 * v140];
              v784 = (__n128 *)&v144[32 * v143];
              v110 = v766;
            }
            else
            {
              v110 = v766;
              do
              {
                v100 = v98[-2];
                v147 = v98[-1];
                *(__n128 *)(v105 - 32) = v100;
                *(__n128 *)(v105 - 16) = v147;
                v105 -= 32;
                v98 -= 2;
              }
              while (v98 != v109);
              v782 = (char *)v105;
              v784 = v145;
              if (!v109)
                goto LABEL_172;
            }
            operator delete(v109);
LABEL_172:
            v109 = (__n128 *)v105;
            v98 = v146;
            goto LABEL_153;
          }
        }
        v116 = ((char *)v98 - (char *)v109) >> 5;
        v117 = v116 + 1;
        if ((unint64_t)(v116 + 1) >> 59)
          goto LABEL_847;
        v118 = (char *)v784 - (char *)v109;
        if (v784 - v109 > v117)
          v117 = v118 >> 4;
        if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFE0)
          v119 = 0x7FFFFFFFFFFFFFFLL;
        else
          v119 = v117;
        if (v119)
        {
          if (v119 >> 59)
            goto LABEL_954;
          v120 = (char *)operator new(32 * v119);
          v110 = v766;
        }
        else
        {
          v120 = 0;
        }
        v121 = (__n128 *)&v120[32 * v116];
        v121->n128_u64[0] = v115;
        v121->n128_u32[2] = __p;
        v121[1].n128_u64[0] = v111;
        v121[1].n128_u32[2] = 1;
        if (v98 == v109)
        {
          v105 = (uint64_t)&v120[32 * v116];
          v98 = v121 + 2;
          v782 = (char *)v121;
          v784 = (__n128 *)&v120[32 * v119];
          if (!v109)
            goto LABEL_128;
        }
        else
        {
          v122 = (__n128 *)&v120[32 * v116];
          do
          {
            v100 = v98[-2];
            v123 = v98[-1];
            v105 = (uint64_t)&v122[-2];
            v122[-2] = v100;
            v122[-1] = v123;
            v98 -= 2;
            v122 -= 2;
          }
          while (v98 != v109);
          v98 = v121 + 2;
          v782 = (char *)v105;
          v784 = (__n128 *)&v120[32 * v119];
          if (!v109)
            goto LABEL_128;
        }
        operator delete(v109);
LABEL_128:
        v109 = (__n128 *)v105;
        v108 = __p;
        goto LABEL_111;
      }
      while (1)
      {
        v125 = v110 + v113;
        v126 = v730 + v125;
        if (v98 < v784)
        {
          v98->n128_u64[0] = v126;
          v98->n128_u32[2] = v125;
          v98[1].n128_u64[0] = v111;
          v98[1].n128_u32[2] = 6;
          v98 += 2;
          v124 = __p;
        }
        else
        {
          v127 = ((char *)v98 - (char *)v109) >> 5;
          v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 59)
LABEL_847:
            sub_20E867F44();
          v129 = (char *)v784 - (char *)v109;
          if (v784 - v109 > v128)
            v128 = v129 >> 4;
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFE0)
            v130 = 0x7FFFFFFFFFFFFFFLL;
          else
            v130 = v128;
          if (v130)
          {
            if (v130 >> 59)
LABEL_954:
              sub_20E877A38();
            v131 = (char *)operator new(32 * v130);
            v110 = v766;
          }
          else
          {
            v131 = 0;
          }
          v132 = (__n128 *)&v131[32 * v127];
          v132->n128_u64[0] = v126;
          v132->n128_u32[2] = v125;
          v132[1].n128_u64[0] = v111;
          v132[1].n128_u32[2] = 6;
          if (v98 == v109)
          {
            v105 = (uint64_t)&v131[32 * v127];
            v124 = __p;
            v98 = v132 + 2;
            v782 = (char *)v132;
            v784 = (__n128 *)&v131[32 * v130];
            if (!v109)
              goto LABEL_150;
          }
          else
          {
            v133 = (__n128 *)&v131[32 * v127];
            v124 = __p;
            do
            {
              v100 = v98[-2];
              v134 = v98[-1];
              v105 = (uint64_t)&v133[-2];
              v133[-2] = v100;
              v133[-1] = v134;
              v98 -= 2;
              v133 -= 2;
            }
            while (v98 != v109);
            v98 = v132 + 2;
            v782 = (char *)v105;
            v784 = (__n128 *)&v131[32 * v130];
            if (!v109)
            {
LABEL_150:
              v109 = (__n128 *)v105;
              goto LABEL_132;
            }
          }
          operator delete(v109);
          v109 = (__n128 *)v105;
        }
LABEL_132:
        ++v112[(_QWORD)v124];
        ++v113;
        v111 += 8;
        if (v113 == 6)
        {
          v148 = 0;
          v149 = v698 + 8 * *((_QWORD *)v704 + 1) + 48;
          v150 = v785;
          while (1)
          {
            v151 = v110 + v148;
            v152 = v775 * (unint64_t)v761 + v151;
            if (v98 >= v784)
              break;
            v98->n128_u64[0] = v152;
            v98->n128_u32[2] = v151;
            v98[1].n128_u64[0] = v149;
            v98[1].n128_u32[2] = 6;
            v98 += 2;
LABEL_175:
            ++v150[v761];
            ++v148;
            v149 += 8;
            if (v148 == 6)
            {
              v174 = 0;
              v175 = v698 + 8 * *((_QWORD *)v704 + 1) + 96;
              v176 = v785;
              while (1)
              {
                v177 = v110 + v174;
                v178 = v775 * (unint64_t)v753 + v177;
                if (v98 >= v784)
                  break;
                v98->n128_u64[0] = v178;
                v98->n128_u32[2] = v177;
                v98[1].n128_u64[0] = v175;
                v98[1].n128_u32[2] = 6;
                v98 += 2;
LABEL_219:
                ++v176[v753];
                ++v174;
                v175 += 8;
                if (v174 == 6)
                {
                  v200 = 0;
                  v201 = v698 + 8 * *((_QWORD *)v704 + 1) + 144;
                  v202 = v785;
                  v203 = v98;
                  while (1)
                  {
                    v204 = v110 + v200;
                    v205 = v775 * (unint64_t)v746 + v204;
                    if (v203 < v784)
                    {
                      v203->n128_u64[0] = v205;
                      v203->n128_u32[2] = v204;
                      v203[1].n128_u64[0] = v201;
                      v98 = v203 + 2;
                      v203[1].n128_u32[2] = 6;
                    }
                    else
                    {
                      v206 = ((char *)v203 - (char *)v109) >> 5;
                      v207 = v206 + 1;
                      if ((unint64_t)(v206 + 1) >> 59)
                        goto LABEL_847;
                      v208 = (char *)v784 - (char *)v109;
                      if (v784 - v109 > v207)
                        v207 = v208 >> 4;
                      if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFE0)
                        v209 = 0x7FFFFFFFFFFFFFFLL;
                      else
                        v209 = v207;
                      if (v209)
                      {
                        if (v209 >> 59)
                          goto LABEL_954;
                        v210 = (char *)operator new(32 * v209);
                      }
                      else
                      {
                        v210 = 0;
                      }
                      v105 = (uint64_t)&v210[32 * v206];
                      *(_QWORD *)v105 = v205;
                      *(_DWORD *)(v105 + 8) = v204;
                      v211 = (__n128 *)&v210[32 * v209];
                      *(_QWORD *)(v105 + 16) = v201;
                      *(_DWORD *)(v105 + 24) = 6;
                      v98 = (__n128 *)(v105 + 32);
                      if (v203 == v109)
                      {
                        v782 = &v210[32 * v206];
                        v784 = (__n128 *)&v210[32 * v209];
                        v110 = v766;
LABEL_280:
                        operator delete(v109);
                        v109 = (__n128 *)v105;
                        goto LABEL_262;
                      }
                      v110 = v766;
                      do
                      {
                        v100 = v203[-2];
                        v212 = v203[-1];
                        *(__n128 *)(v105 - 32) = v100;
                        *(__n128 *)(v105 - 16) = v212;
                        v105 -= 32;
                        v203 -= 2;
                      }
                      while (v203 != v109);
                      v782 = (char *)v105;
                      v784 = v211;
                      if (v109)
                        goto LABEL_280;
                      v109 = (__n128 *)v105;
                    }
LABEL_262:
                    ++v202[v746];
                    ++v200;
                    v201 += 8;
                    v203 = v98;
                    if (v200 == 6)
                    {
LABEL_107:
                      v107 = v704 + 4;
                      v108 = __p;
                      if (v704 + 4 != v692)
                        goto LABEL_108;
                      v103 = *(unsigned int *)(v697 + 716);
                      v104 = v687;
LABEL_104:
                      if (++v104 >= v103)
                        goto LABEL_282;
                      goto LABEL_105;
                    }
                  }
                }
              }
              v179 = ((char *)v98 - (char *)v109) >> 5;
              v180 = v179 + 1;
              if ((unint64_t)(v179 + 1) >> 59)
                goto LABEL_847;
              v181 = (char *)v784 - (char *)v109;
              if (v784 - v109 > v180)
                v180 = v181 >> 4;
              if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFE0)
                v182 = 0x7FFFFFFFFFFFFFFLL;
              else
                v182 = v180;
              if (v182)
              {
                if (v182 >> 59)
                  goto LABEL_954;
                v183 = (char *)operator new(32 * v182);
              }
              else
              {
                v183 = 0;
              }
              v105 = (uint64_t)&v183[32 * v179];
              *(_QWORD *)v105 = v178;
              *(_DWORD *)(v105 + 8) = v177;
              v184 = (__n128 *)&v183[32 * v182];
              *(_QWORD *)(v105 + 16) = v175;
              *(_DWORD *)(v105 + 24) = 6;
              v185 = (__n128 *)(v105 + 32);
              if (v98 == v109)
              {
                v782 = &v183[32 * v179];
                v784 = (__n128 *)&v183[32 * v182];
                v110 = v766;
              }
              else
              {
                v110 = v766;
                do
                {
                  v100 = v98[-2];
                  v186 = v98[-1];
                  *(__n128 *)(v105 - 32) = v100;
                  *(__n128 *)(v105 - 16) = v186;
                  v105 -= 32;
                  v98 -= 2;
                }
                while (v98 != v109);
                v782 = (char *)v105;
                v784 = v184;
                if (!v109)
                  goto LABEL_238;
              }
              operator delete(v109);
LABEL_238:
              v109 = (__n128 *)v105;
              v98 = v185;
              goto LABEL_219;
            }
          }
          v153 = ((char *)v98 - (char *)v109) >> 5;
          v154 = v153 + 1;
          if ((unint64_t)(v153 + 1) >> 59)
            goto LABEL_847;
          v155 = (char *)v784 - (char *)v109;
          if (v784 - v109 > v154)
            v154 = v155 >> 4;
          if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFE0)
            v156 = 0x7FFFFFFFFFFFFFFLL;
          else
            v156 = v154;
          if (v156)
          {
            if (v156 >> 59)
              goto LABEL_954;
            v157 = (char *)operator new(32 * v156);
          }
          else
          {
            v157 = 0;
          }
          v105 = (uint64_t)&v157[32 * v153];
          *(_QWORD *)v105 = v152;
          *(_DWORD *)(v105 + 8) = v151;
          v158 = (__n128 *)&v157[32 * v156];
          *(_QWORD *)(v105 + 16) = v149;
          *(_DWORD *)(v105 + 24) = 6;
          v159 = (__n128 *)(v105 + 32);
          if (v98 == v109)
          {
            v782 = &v157[32 * v153];
            v784 = (__n128 *)&v157[32 * v156];
            v110 = v766;
          }
          else
          {
            v110 = v766;
            do
            {
              v100 = v98[-2];
              v160 = v98[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v160;
              v105 -= 32;
              v98 -= 2;
            }
            while (v98 != v109);
            v782 = (char *)v105;
            v784 = v158;
            if (!v109)
              goto LABEL_194;
          }
          operator delete(v109);
LABEL_194:
          v109 = (__n128 *)v105;
          v98 = v159;
          goto LABEL_175;
        }
      }
    }
    v105 = (uint64_t)v98;
LABEL_282:
    v213 = *(unsigned int *)(v697 + 940);
    if ((_DWORD)v213)
    {
      v214 = 0;
      __pa = *(char **)(v697 + 944);
LABEL_286:
      v215 = *(_QWORD *)(v697 + 1016) + 24 * v214;
      v216 = *(unsigned int **)v215;
      v721 = *(unsigned int **)(v215 + 8);
      if (*(unsigned int **)v215 == v721)
        goto LABEL_285;
      v714 = v214;
      v754 = *(_DWORD *)(*(_QWORD *)(v697 + 1248) + 4 * v214);
      v217 = (__n128 *)v105;
LABEL_289:
      v218 = *(_DWORD *)(*(_QWORD *)(v697 + 1248) + 4 * *v216);
      v747 = v216;
      v767 = v218;
      v219 = 0;
      if (v754 >= v218)
      {
LABEL_315:
        v234 = 0;
        v235 = v754 + v219;
        v236 = v685 * (unint64_t)v235;
        v731 = v219;
        v237 = &__pa[48 * v219 + 8 * *((_QWORD *)v216 + 1)];
        v238 = v785;
        while (1)
        {
          v239 = v218 + v234;
          v240 = v236 + v239;
          if (v98 >= v784)
            break;
          v98->n128_u64[0] = v240;
          v98->n128_u32[2] = v239;
          v98[1].n128_u64[0] = (unint64_t)v237;
          v98[1].n128_u32[2] = 6;
          v98 += 2;
LABEL_317:
          ++v238[v235];
          ++v234;
          v237 += 8;
          if (v234 == 6)
          {
            v219 = v731 + 1;
            v216 = v747;
            if (v731 != 5)
              goto LABEL_315;
LABEL_288:
            v216 += 4;
            if (v216 != v721)
              goto LABEL_289;
            v213 = *(unsigned int *)(v697 + 940);
            v214 = v714;
LABEL_285:
            if (++v214 >= v213)
              goto LABEL_337;
            goto LABEL_286;
          }
        }
        v241 = ((char *)v98 - (char *)v217) >> 5;
        v242 = v241 + 1;
        if ((unint64_t)(v241 + 1) >> 59)
          goto LABEL_847;
        v243 = (char *)v784 - (char *)v217;
        if (v784 - v217 > v242)
          v242 = v243 >> 4;
        if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFE0)
          v244 = 0x7FFFFFFFFFFFFFFLL;
        else
          v244 = v242;
        if (v244)
        {
          if (v244 >> 59)
            goto LABEL_954;
          v245 = (char *)operator new(32 * v244);
        }
        else
        {
          v245 = 0;
        }
        v246 = (__n128 *)&v245[32 * v241];
        v246->n128_u64[0] = v240;
        v246->n128_u32[2] = v239;
        v246[1].n128_u64[0] = (unint64_t)v237;
        v246[1].n128_u32[2] = 6;
        if (v98 == v217)
        {
          v105 = (uint64_t)&v245[32 * v241];
          v98 = v246 + 2;
          v782 = (char *)v246;
          v784 = (__n128 *)&v245[32 * v244];
          if (!v217)
            goto LABEL_334;
        }
        else
        {
          v247 = (__n128 *)&v245[32 * v241];
          do
          {
            v100 = v98[-2];
            v248 = v98[-1];
            v105 = (uint64_t)&v247[-2];
            v247[-2] = v100;
            v247[-1] = v248;
            v98 -= 2;
            v247 -= 2;
          }
          while (v98 != v217);
          v98 = v246 + 2;
          v782 = (char *)v105;
          v784 = (__n128 *)&v245[32 * v244];
          if (!v217)
            goto LABEL_334;
        }
        operator delete(v217);
LABEL_334:
        v217 = (__n128 *)v105;
        v218 = v767;
        v236 = v685 * (unint64_t)v235;
        goto LABEL_317;
      }
LABEL_292:
      v220 = 0;
      v221 = v754 + v219;
      v762 = v219;
      v222 = &__pa[48 * v219 + 8 * *((_QWORD *)v216 + 1)];
      v223 = v785;
      while (1)
      {
        v224 = v218 + v220;
        v225 = v221 + v685 * (unint64_t)v224;
        if (v98 >= v784)
          break;
        v98->n128_u64[0] = v225;
        v98->n128_u32[2] = v221;
        v98[1].n128_u64[0] = (unint64_t)v222;
        v98[1].n128_u32[2] = 1;
        v98 += 2;
LABEL_294:
        ++v223[v224];
        ++v220;
        v222 += 8;
        if (v220 == 6)
        {
          v219 = v762 + 1;
          v216 = v747;
          if (v762 == 5)
            goto LABEL_288;
          goto LABEL_292;
        }
      }
      v226 = ((char *)v98 - (char *)v217) >> 5;
      v227 = v226 + 1;
      if ((unint64_t)(v226 + 1) >> 59)
        goto LABEL_847;
      v228 = (char *)v784 - (char *)v217;
      if (v784 - v217 > v227)
        v227 = v228 >> 4;
      if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFE0)
        v229 = 0x7FFFFFFFFFFFFFFLL;
      else
        v229 = v227;
      if (v229)
      {
        if (v229 >> 59)
          goto LABEL_954;
        v230 = (char *)operator new(32 * v229);
      }
      else
      {
        v230 = 0;
      }
      v231 = (__n128 *)&v230[32 * v226];
      v231->n128_u64[0] = v225;
      v231->n128_u32[2] = v221;
      v231[1].n128_u64[0] = (unint64_t)v222;
      v231[1].n128_u32[2] = 1;
      if (v98 == v217)
      {
        v105 = (uint64_t)&v230[32 * v226];
        v98 = v231 + 2;
        v782 = (char *)v231;
        v784 = (__n128 *)&v230[32 * v229];
        if (!v217)
          goto LABEL_311;
      }
      else
      {
        v232 = (__n128 *)&v230[32 * v226];
        do
        {
          v100 = v98[-2];
          v233 = v98[-1];
          v105 = (uint64_t)&v232[-2];
          v232[-2] = v100;
          v232[-1] = v233;
          v98 -= 2;
          v232 -= 2;
        }
        while (v98 != v217);
        v98 = v231 + 2;
        v782 = (char *)v105;
        v784 = (__n128 *)&v230[32 * v229];
        if (!v217)
          goto LABEL_311;
      }
      operator delete(v217);
LABEL_311:
      v217 = (__n128 *)v105;
      v218 = v767;
      goto LABEL_294;
    }
LABEL_337:
    v249 = *(unsigned int *)(v697 + 604);
    if ((_DWORD)v249)
    {
      v250 = 0;
      __pb = *(char **)(v697 + 608);
      while (1)
      {
        v251 = *(_QWORD *)(v697 + 680) + 24 * v250;
        v252 = *(unsigned int **)v251;
        v693 = *(unsigned int **)(v251 + 8);
        if (*(unsigned int **)v251 != v693)
          break;
LABEL_340:
        if (++v250 >= v249)
          goto LABEL_503;
      }
      v688 = v250;
      v763 = *(_DWORD *)(*(_QWORD *)(v697 + 1224) + 4 * v250);
      v253 = (__n128 *)v105;
LABEL_344:
      v254 = *(_DWORD *)(*(_QWORD *)(v697 + 1224) + 4 * *v252);
      v755 = v252;
      v768 = v254;
      v255 = 0;
      if (v763 < v254)
      {
        v776 = v254 * (unint64_t)v685;
        v722 = v254 + 1;
        v708 = v254 + 2;
        v256 = v784;
        v257 = v785;
        v699 = v254 + 3;
        while (1)
        {
          v258 = v763 + v255;
          v259 = &__pb[32 * v255 + 8 * *((_QWORD *)v252 + 1)];
          v260 = v776 + v258;
          if (v98 < v256)
          {
            v98->n128_u64[0] = v260;
            v98->n128_u32[2] = v258;
            v98[1].n128_u64[0] = (unint64_t)v259;
            v98[1].n128_u32[2] = 1;
            v261 = v98 + 2;
            v256 = v784;
            goto LABEL_366;
          }
          v262 = ((char *)v98 - (char *)v253) >> 5;
          v263 = v262 + 1;
          if ((unint64_t)(v262 + 1) >> 59)
            goto LABEL_847;
          if (v256 - v253 > v263)
            v263 = v256 - v253;
          if ((unint64_t)((char *)v256 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
            v264 = 0x7FFFFFFFFFFFFFFLL;
          else
            v264 = v263;
          if (v264)
          {
            if (v264 >> 59)
              goto LABEL_954;
            v265 = (char *)operator new(32 * v264);
          }
          else
          {
            v265 = 0;
          }
          v266 = (__n128 *)&v265[32 * v262];
          v266->n128_u64[0] = v260;
          v266->n128_u32[2] = v258;
          v266[1].n128_u64[0] = (unint64_t)v259;
          v266[1].n128_u32[2] = 1;
          if (v98 == v253)
          {
            v105 = (uint64_t)&v265[32 * v262];
            v256 = (__n128 *)&v265[32 * v264];
            v261 = v266 + 2;
            v782 = (char *)v266;
            v784 = v256;
            if (!v253)
              goto LABEL_365;
          }
          else
          {
            v267 = (__n128 *)&v265[32 * v262];
            do
            {
              v100 = v98[-2];
              v268 = v98[-1];
              v105 = (uint64_t)&v267[-2];
              v267[-2] = v100;
              v267[-1] = v268;
              v98 -= 2;
              v267 -= 2;
            }
            while (v98 != v253);
            v256 = (__n128 *)&v265[32 * v264];
            v261 = v266 + 2;
            v782 = (char *)v105;
            v784 = v256;
            if (!v253)
              goto LABEL_365;
          }
          operator delete(v253);
LABEL_365:
          v253 = (__n128 *)v105;
LABEL_366:
          ++v257[v768];
          v269 = v259 + 8;
          v270 = v685 * (unint64_t)v722 + v258;
          if (v261 < v256)
          {
            v261->n128_u64[0] = v270;
            v261->n128_u32[2] = v258;
            v261[1].n128_u64[0] = (unint64_t)v269;
            v271 = v261 + 2;
            v261[1].n128_u32[2] = 1;
            goto LABEL_387;
          }
          v272 = ((char *)v261 - (char *)v253) >> 5;
          v273 = v272 + 1;
          if ((unint64_t)(v272 + 1) >> 59)
            goto LABEL_847;
          if (v256 - v253 > v273)
            v273 = v256 - v253;
          if ((unint64_t)((char *)v256 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
            v274 = 0x7FFFFFFFFFFFFFFLL;
          else
            v274 = v273;
          if (v274)
          {
            if (v274 >> 59)
              goto LABEL_954;
            v275 = (char *)operator new(32 * v274);
          }
          else
          {
            v275 = 0;
          }
          v105 = (uint64_t)&v275[32 * v272];
          *(_QWORD *)v105 = v270;
          *(_DWORD *)(v105 + 8) = v258;
          v256 = (__n128 *)&v275[32 * v274];
          *(_QWORD *)(v105 + 16) = v269;
          *(_DWORD *)(v105 + 24) = 1;
          v271 = (__n128 *)(v105 + 32);
          if (v261 == v253)
          {
            v782 = (char *)v105;
            v784 = v256;
          }
          else
          {
            do
            {
              v100 = v261[-2];
              v276 = v261[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v276;
              v105 -= 32;
              v261 -= 2;
            }
            while (v261 != v253);
            v782 = (char *)v105;
            v784 = v256;
            if (!v253)
              goto LABEL_386;
          }
          operator delete(v253);
LABEL_386:
          v253 = (__n128 *)v105;
LABEL_387:
          ++v257[v722];
          v277 = v259 + 16;
          v278 = v685 * (unint64_t)v708 + v258;
          if (v271 < v256)
          {
            v271->n128_u64[0] = v278;
            v271->n128_u32[2] = v258;
            v271[1].n128_u64[0] = (unint64_t)v277;
            v279 = v271 + 2;
            v271[1].n128_u32[2] = 1;
            goto LABEL_406;
          }
          v280 = ((char *)v271 - (char *)v253) >> 5;
          v281 = v280 + 1;
          if ((unint64_t)(v280 + 1) >> 59)
            goto LABEL_847;
          if (v256 - v253 > v281)
            v281 = v256 - v253;
          if ((unint64_t)((char *)v256 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
            v282 = 0x7FFFFFFFFFFFFFFLL;
          else
            v282 = v281;
          if (v282)
          {
            if (v282 >> 59)
              goto LABEL_954;
            v283 = (char *)operator new(32 * v282);
          }
          else
          {
            v283 = 0;
          }
          v105 = (uint64_t)&v283[32 * v280];
          *(_QWORD *)v105 = v278;
          *(_DWORD *)(v105 + 8) = v258;
          v256 = (__n128 *)&v283[32 * v282];
          *(_QWORD *)(v105 + 16) = v277;
          *(_DWORD *)(v105 + 24) = 1;
          v279 = (__n128 *)(v105 + 32);
          if (v271 == v253)
          {
            v782 = (char *)v105;
            v784 = v256;
          }
          else
          {
            do
            {
              v100 = v271[-2];
              v284 = v271[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v284;
              v105 -= 32;
              v271 -= 2;
            }
            while (v271 != v253);
            v782 = (char *)v105;
            v784 = v256;
            if (!v253)
              goto LABEL_405;
          }
          operator delete(v253);
LABEL_405:
          v253 = (__n128 *)v105;
LABEL_406:
          ++v257[v708];
          v285 = v259 + 24;
          v286 = v685 * v699 + v258;
          if (v279 < v256)
          {
            v279->n128_u64[0] = v286;
            v279->n128_u32[2] = v258;
            v279[1].n128_u64[0] = (unint64_t)v285;
            v98 = v279 + 2;
            v279[1].n128_u32[2] = 1;
            v252 = v755;
          }
          else
          {
            v287 = ((char *)v279 - (char *)v253) >> 5;
            v288 = v287 + 1;
            if ((unint64_t)(v287 + 1) >> 59)
              goto LABEL_847;
            if (v256 - v253 > v288)
              v288 = v256 - v253;
            if ((unint64_t)((char *)v256 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
              v289 = 0x7FFFFFFFFFFFFFFLL;
            else
              v289 = v288;
            if (v289)
            {
              if (v289 >> 59)
                goto LABEL_954;
              v290 = (char *)operator new(32 * v289);
            }
            else
            {
              v290 = 0;
            }
            v105 = (uint64_t)&v290[32 * v287];
            *(_QWORD *)v105 = v286;
            *(_DWORD *)(v105 + 8) = v258;
            v256 = (__n128 *)&v290[32 * v289];
            *(_QWORD *)(v105 + 16) = v285;
            *(_DWORD *)(v105 + 24) = 1;
            v98 = (__n128 *)(v105 + 32);
            if (v279 == v253)
            {
              v782 = (char *)v105;
              v784 = v256;
              v252 = v755;
LABEL_423:
              operator delete(v253);
              v253 = (__n128 *)v105;
              goto LABEL_347;
            }
            v252 = v755;
            do
            {
              v100 = v279[-2];
              v291 = v279[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v291;
              v105 -= 32;
              v279 -= 2;
            }
            while (v279 != v253);
            v782 = (char *)v105;
            v784 = v256;
            if (v253)
              goto LABEL_423;
            v253 = (__n128 *)v105;
          }
LABEL_347:
          ++v257[v699];
          if (++v255 == 4)
            goto LABEL_343;
        }
      }
      v723 = v254 + 2;
      v732 = v254 + 1;
      v715 = v254 + 3;
      v292 = v784;
      v293 = v785;
      while (1)
      {
        v294 = v763 + v255;
        v295 = &__pb[32 * v255 + 8 * *((_QWORD *)v252 + 1)];
        v296 = v768 + v685 * (unint64_t)v294;
        v777 = v295;
        if (v98 < v292)
        {
          v98->n128_u64[0] = v296;
          v98->n128_u32[2] = v768;
          v98[1].n128_u64[0] = (unint64_t)v295;
          v98[1].n128_u32[2] = 4;
          v297 = v98 + 2;
          v292 = v784;
          goto LABEL_445;
        }
        v298 = ((char *)v98 - (char *)v253) >> 5;
        v299 = v298 + 1;
        if ((unint64_t)(v298 + 1) >> 59)
          goto LABEL_847;
        if (v292 - v253 > v299)
          v299 = v292 - v253;
        if ((unint64_t)((char *)v292 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
          v300 = 0x7FFFFFFFFFFFFFFLL;
        else
          v300 = v299;
        if (v300)
        {
          if (v300 >> 59)
            goto LABEL_954;
          v301 = (char *)operator new(32 * v300);
          v295 = v777;
        }
        else
        {
          v301 = 0;
        }
        v302 = (__n128 *)&v301[32 * v298];
        v302->n128_u64[0] = v296;
        v302->n128_u32[2] = v768;
        v302[1].n128_u64[0] = (unint64_t)v295;
        v302[1].n128_u32[2] = 4;
        if (v98 == v253)
        {
          v105 = (uint64_t)&v301[32 * v298];
          v292 = (__n128 *)&v301[32 * v300];
          v297 = v302 + 2;
          v782 = (char *)v105;
          v784 = v292;
          if (!v253)
            goto LABEL_444;
        }
        else
        {
          v303 = (__n128 *)&v301[32 * v298];
          do
          {
            v100 = v98[-2];
            v304 = v98[-1];
            v105 = (uint64_t)&v303[-2];
            v303[-2] = v100;
            v303[-1] = v304;
            v98 -= 2;
            v303 -= 2;
          }
          while (v98 != v253);
          v292 = (__n128 *)&v301[32 * v300];
          v297 = v302 + 2;
          v782 = (char *)v105;
          v784 = v292;
          if (!v253)
            goto LABEL_444;
        }
        operator delete(v253);
        v295 = v777;
LABEL_444:
        v253 = (__n128 *)v105;
LABEL_445:
        v305 = v685 * (unint64_t)v294;
        v306 = v294;
        ++v293[v294];
        v307 = v295 + 8;
        v308 = v305 + v732;
        if (v297 < v292)
        {
          v297->n128_u64[0] = v308;
          v297->n128_u32[2] = v732;
          v297[1].n128_u64[0] = (unint64_t)v307;
          v309 = v297 + 2;
          v297[1].n128_u32[2] = 4;
          goto LABEL_466;
        }
        v310 = ((char *)v297 - (char *)v253) >> 5;
        v311 = v310 + 1;
        if ((unint64_t)(v310 + 1) >> 59)
          goto LABEL_847;
        if (v292 - v253 > v311)
          v311 = v292 - v253;
        if ((unint64_t)((char *)v292 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
          v312 = 0x7FFFFFFFFFFFFFFLL;
        else
          v312 = v311;
        if (v312)
        {
          if (v312 >> 59)
            goto LABEL_954;
          v313 = (char *)operator new(32 * v312);
        }
        else
        {
          v313 = 0;
        }
        v105 = (uint64_t)&v313[32 * v310];
        *(_QWORD *)v105 = v308;
        *(_DWORD *)(v105 + 8) = v732;
        v292 = (__n128 *)&v313[32 * v312];
        *(_QWORD *)(v105 + 16) = v307;
        *(_DWORD *)(v105 + 24) = 4;
        v309 = (__n128 *)(v105 + 32);
        if (v297 == v253)
        {
          v782 = (char *)v105;
          v784 = v292;
        }
        else
        {
          do
          {
            v100 = v297[-2];
            v314 = v297[-1];
            *(__n128 *)(v105 - 32) = v100;
            *(__n128 *)(v105 - 16) = v314;
            v105 -= 32;
            v297 -= 2;
          }
          while (v297 != v253);
          v782 = (char *)v105;
          v784 = v292;
          if (!v253)
            goto LABEL_465;
        }
        operator delete(v253);
LABEL_465:
        v253 = (__n128 *)v105;
        v295 = v777;
LABEL_466:
        ++v293[v306];
        v315 = v295 + 16;
        v316 = v305 + v723;
        if (v309 < v292)
        {
          v309->n128_u64[0] = v316;
          v309->n128_u32[2] = v723;
          v309[1].n128_u64[0] = (unint64_t)v315;
          v317 = v309 + 2;
          v309[1].n128_u32[2] = 4;
          goto LABEL_485;
        }
        v318 = ((char *)v309 - (char *)v253) >> 5;
        v319 = v318 + 1;
        if ((unint64_t)(v318 + 1) >> 59)
          goto LABEL_847;
        if (v292 - v253 > v319)
          v319 = v292 - v253;
        if ((unint64_t)((char *)v292 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
          v320 = 0x7FFFFFFFFFFFFFFLL;
        else
          v320 = v319;
        if (v320)
        {
          if (v320 >> 59)
            goto LABEL_954;
          v321 = (char *)operator new(32 * v320);
        }
        else
        {
          v321 = 0;
        }
        v105 = (uint64_t)&v321[32 * v318];
        *(_QWORD *)v105 = v316;
        *(_DWORD *)(v105 + 8) = v723;
        v292 = (__n128 *)&v321[32 * v320];
        *(_QWORD *)(v105 + 16) = v315;
        *(_DWORD *)(v105 + 24) = 4;
        v317 = (__n128 *)(v105 + 32);
        if (v309 == v253)
        {
          v782 = (char *)v105;
          v784 = v292;
        }
        else
        {
          do
          {
            v100 = v309[-2];
            v322 = v309[-1];
            *(__n128 *)(v105 - 32) = v100;
            *(__n128 *)(v105 - 16) = v322;
            v105 -= 32;
            v309 -= 2;
          }
          while (v309 != v253);
          v782 = (char *)v105;
          v784 = v292;
          if (!v253)
            goto LABEL_484;
        }
        operator delete(v253);
LABEL_484:
        v253 = (__n128 *)v105;
        v295 = v777;
LABEL_485:
        ++v293[v306];
        v323 = v295 + 24;
        v324 = v305 + v715;
        if (v317 < v292)
        {
          v317->n128_u64[0] = v324;
          v317->n128_u32[2] = v715;
          v317[1].n128_u64[0] = (unint64_t)v323;
          v98 = v317 + 2;
          v317[1].n128_u32[2] = 4;
          v252 = v755;
        }
        else
        {
          v325 = ((char *)v317 - (char *)v253) >> 5;
          v326 = v325 + 1;
          if ((unint64_t)(v325 + 1) >> 59)
            goto LABEL_847;
          if (v292 - v253 > v326)
            v326 = v292 - v253;
          if ((unint64_t)((char *)v292 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
            v327 = 0x7FFFFFFFFFFFFFFLL;
          else
            v327 = v326;
          if (v327)
          {
            if (v327 >> 59)
              goto LABEL_954;
            v328 = (char *)operator new(32 * v327);
          }
          else
          {
            v328 = 0;
          }
          v105 = (uint64_t)&v328[32 * v325];
          *(_QWORD *)v105 = v324;
          *(_DWORD *)(v105 + 8) = v715;
          v292 = (__n128 *)&v328[32 * v327];
          *(_QWORD *)(v105 + 16) = v323;
          *(_DWORD *)(v105 + 24) = 4;
          v98 = (__n128 *)(v105 + 32);
          if (v317 == v253)
          {
            v782 = (char *)v105;
            v784 = v292;
            v252 = v755;
LABEL_502:
            operator delete(v253);
            v253 = (__n128 *)v105;
            goto LABEL_426;
          }
          v252 = v755;
          do
          {
            v100 = v317[-2];
            v329 = v317[-1];
            *(__n128 *)(v105 - 32) = v100;
            *(__n128 *)(v105 - 16) = v329;
            v105 -= 32;
            v317 -= 2;
          }
          while (v317 != v253);
          v782 = (char *)v105;
          v784 = v292;
          if (v253)
            goto LABEL_502;
          v253 = (__n128 *)v105;
        }
LABEL_426:
        ++v293[v306];
        if (++v255 == 4)
        {
LABEL_343:
          v252 += 4;
          if (v252 == v693)
          {
            v249 = *(unsigned int *)(v697 + 604);
            v250 = v688;
            goto LABEL_340;
          }
          goto LABEL_344;
        }
      }
    }
LABEL_503:
    v330 = *(unsigned int *)(v697 + 828);
    if ((_DWORD)v330)
    {
      v331 = 0;
      __pc = *(char **)(v697 + 832);
      while (1)
      {
        v332 = *(_QWORD *)(v697 + 904) + 24 * v331;
        v333 = *(unsigned int **)v332;
        v694 = *(unsigned int **)(v332 + 8);
        if (*(unsigned int **)v332 != v694)
          break;
LABEL_506:
        if (++v331 >= v330)
          goto LABEL_668;
      }
      v689 = v331;
      v764 = *(_DWORD *)(*(_QWORD *)(v697 + 1248) + 4 * v331);
      v334 = (__n128 *)v105;
LABEL_510:
      v335 = *(_DWORD *)(*(_QWORD *)(v697 + 1224) + 4 * *v333);
      v756 = v333;
      v769 = v335;
      v336 = 0;
      if (v764 < v335)
      {
        v778 = v335 * (unint64_t)v685;
        v724 = v335 + 1;
        v709 = v335 + 2;
        v337 = v784;
        v338 = v785;
        v700 = v335 + 3;
        while (1)
        {
          v339 = v764 + v336;
          v340 = &__pc[32 * v336 + 8 * *((_QWORD *)v333 + 1)];
          v341 = v778 + v339;
          if (v98 < v337)
          {
            v98->n128_u64[0] = v341;
            v98->n128_u32[2] = v339;
            v98[1].n128_u64[0] = (unint64_t)v340;
            v98[1].n128_u32[2] = 1;
            v342 = v98 + 2;
            v337 = v784;
            goto LABEL_532;
          }
          v343 = ((char *)v98 - (char *)v334) >> 5;
          v344 = v343 + 1;
          if ((unint64_t)(v343 + 1) >> 59)
            goto LABEL_847;
          if (v337 - v334 > v344)
            v344 = v337 - v334;
          if ((unint64_t)((char *)v337 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
            v345 = 0x7FFFFFFFFFFFFFFLL;
          else
            v345 = v344;
          if (v345)
          {
            if (v345 >> 59)
              goto LABEL_954;
            v346 = (char *)operator new(32 * v345);
          }
          else
          {
            v346 = 0;
          }
          v347 = (__n128 *)&v346[32 * v343];
          v347->n128_u64[0] = v341;
          v347->n128_u32[2] = v339;
          v347[1].n128_u64[0] = (unint64_t)v340;
          v347[1].n128_u32[2] = 1;
          if (v98 == v334)
          {
            v105 = (uint64_t)&v346[32 * v343];
            v337 = (__n128 *)&v346[32 * v345];
            v342 = v347 + 2;
            v782 = (char *)v347;
            v784 = v337;
            if (!v334)
              goto LABEL_531;
          }
          else
          {
            v348 = (__n128 *)&v346[32 * v343];
            do
            {
              v100 = v98[-2];
              v349 = v98[-1];
              v105 = (uint64_t)&v348[-2];
              v348[-2] = v100;
              v348[-1] = v349;
              v98 -= 2;
              v348 -= 2;
            }
            while (v98 != v334);
            v337 = (__n128 *)&v346[32 * v345];
            v342 = v347 + 2;
            v782 = (char *)v105;
            v784 = v337;
            if (!v334)
              goto LABEL_531;
          }
          operator delete(v334);
LABEL_531:
          v334 = (__n128 *)v105;
LABEL_532:
          ++v338[v769];
          v350 = v340 + 8;
          v351 = v685 * (unint64_t)v724 + v339;
          if (v342 < v337)
          {
            v342->n128_u64[0] = v351;
            v342->n128_u32[2] = v339;
            v342[1].n128_u64[0] = (unint64_t)v350;
            v352 = v342 + 2;
            v342[1].n128_u32[2] = 1;
            goto LABEL_553;
          }
          v353 = ((char *)v342 - (char *)v334) >> 5;
          v354 = v353 + 1;
          if ((unint64_t)(v353 + 1) >> 59)
            goto LABEL_847;
          if (v337 - v334 > v354)
            v354 = v337 - v334;
          if ((unint64_t)((char *)v337 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
            v355 = 0x7FFFFFFFFFFFFFFLL;
          else
            v355 = v354;
          if (v355)
          {
            if (v355 >> 59)
              goto LABEL_954;
            v356 = (char *)operator new(32 * v355);
          }
          else
          {
            v356 = 0;
          }
          v105 = (uint64_t)&v356[32 * v353];
          *(_QWORD *)v105 = v351;
          *(_DWORD *)(v105 + 8) = v339;
          v337 = (__n128 *)&v356[32 * v355];
          *(_QWORD *)(v105 + 16) = v350;
          *(_DWORD *)(v105 + 24) = 1;
          v352 = (__n128 *)(v105 + 32);
          if (v342 == v334)
          {
            v782 = (char *)v105;
            v784 = v337;
          }
          else
          {
            do
            {
              v100 = v342[-2];
              v357 = v342[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v357;
              v105 -= 32;
              v342 -= 2;
            }
            while (v342 != v334);
            v782 = (char *)v105;
            v784 = v337;
            if (!v334)
              goto LABEL_552;
          }
          operator delete(v334);
LABEL_552:
          v334 = (__n128 *)v105;
LABEL_553:
          ++v338[v724];
          v358 = v340 + 16;
          v359 = v685 * (unint64_t)v709 + v339;
          if (v352 < v337)
          {
            v352->n128_u64[0] = v359;
            v352->n128_u32[2] = v339;
            v352[1].n128_u64[0] = (unint64_t)v358;
            v360 = v352 + 2;
            v352[1].n128_u32[2] = 1;
            goto LABEL_572;
          }
          v361 = ((char *)v352 - (char *)v334) >> 5;
          v362 = v361 + 1;
          if ((unint64_t)(v361 + 1) >> 59)
            goto LABEL_847;
          if (v337 - v334 > v362)
            v362 = v337 - v334;
          if ((unint64_t)((char *)v337 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
            v363 = 0x7FFFFFFFFFFFFFFLL;
          else
            v363 = v362;
          if (v363)
          {
            if (v363 >> 59)
              goto LABEL_954;
            v364 = (char *)operator new(32 * v363);
          }
          else
          {
            v364 = 0;
          }
          v105 = (uint64_t)&v364[32 * v361];
          *(_QWORD *)v105 = v359;
          *(_DWORD *)(v105 + 8) = v339;
          v337 = (__n128 *)&v364[32 * v363];
          *(_QWORD *)(v105 + 16) = v358;
          *(_DWORD *)(v105 + 24) = 1;
          v360 = (__n128 *)(v105 + 32);
          if (v352 == v334)
          {
            v782 = (char *)v105;
            v784 = v337;
          }
          else
          {
            do
            {
              v100 = v352[-2];
              v365 = v352[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v365;
              v105 -= 32;
              v352 -= 2;
            }
            while (v352 != v334);
            v782 = (char *)v105;
            v784 = v337;
            if (!v334)
              goto LABEL_571;
          }
          operator delete(v334);
LABEL_571:
          v334 = (__n128 *)v105;
LABEL_572:
          ++v338[v709];
          v366 = v340 + 24;
          v367 = v685 * v700 + v339;
          if (v360 < v337)
          {
            v360->n128_u64[0] = v367;
            v360->n128_u32[2] = v339;
            v360[1].n128_u64[0] = (unint64_t)v366;
            v98 = v360 + 2;
            v360[1].n128_u32[2] = 1;
            v333 = v756;
          }
          else
          {
            v368 = ((char *)v360 - (char *)v334) >> 5;
            v369 = v368 + 1;
            if ((unint64_t)(v368 + 1) >> 59)
              goto LABEL_847;
            if (v337 - v334 > v369)
              v369 = v337 - v334;
            if ((unint64_t)((char *)v337 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
              v370 = 0x7FFFFFFFFFFFFFFLL;
            else
              v370 = v369;
            if (v370)
            {
              if (v370 >> 59)
                goto LABEL_954;
              v371 = (char *)operator new(32 * v370);
            }
            else
            {
              v371 = 0;
            }
            v105 = (uint64_t)&v371[32 * v368];
            *(_QWORD *)v105 = v367;
            *(_DWORD *)(v105 + 8) = v339;
            v337 = (__n128 *)&v371[32 * v370];
            *(_QWORD *)(v105 + 16) = v366;
            *(_DWORD *)(v105 + 24) = 1;
            v98 = (__n128 *)(v105 + 32);
            if (v360 == v334)
            {
              v782 = (char *)v105;
              v784 = v337;
              v333 = v756;
LABEL_589:
              operator delete(v334);
              v334 = (__n128 *)v105;
              goto LABEL_513;
            }
            v333 = v756;
            do
            {
              v100 = v360[-2];
              v372 = v360[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v372;
              v105 -= 32;
              v360 -= 2;
            }
            while (v360 != v334);
            v782 = (char *)v105;
            v784 = v337;
            if (v334)
              goto LABEL_589;
            v334 = (__n128 *)v105;
          }
LABEL_513:
          ++v338[v700];
          if (++v336 == 6)
            goto LABEL_509;
        }
      }
      v725 = v335 + 2;
      v733 = v335 + 1;
      v716 = v335 + 3;
      v373 = v784;
      v374 = v785;
      while (1)
      {
        v375 = v764 + v336;
        v376 = &__pc[32 * v336 + 8 * *((_QWORD *)v333 + 1)];
        v377 = v769 + v685 * (unint64_t)v375;
        v779 = v376;
        if (v98 < v373)
        {
          v98->n128_u64[0] = v377;
          v98->n128_u32[2] = v769;
          v98[1].n128_u64[0] = (unint64_t)v376;
          v98[1].n128_u32[2] = 4;
          v378 = v98 + 2;
          v373 = v784;
          goto LABEL_611;
        }
        v379 = ((char *)v98 - (char *)v334) >> 5;
        v380 = v379 + 1;
        if ((unint64_t)(v379 + 1) >> 59)
          goto LABEL_847;
        if (v373 - v334 > v380)
          v380 = v373 - v334;
        if ((unint64_t)((char *)v373 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
          v381 = 0x7FFFFFFFFFFFFFFLL;
        else
          v381 = v380;
        if (v381)
        {
          if (v381 >> 59)
            goto LABEL_954;
          v382 = (char *)operator new(32 * v381);
          v376 = v779;
        }
        else
        {
          v382 = 0;
        }
        v383 = (__n128 *)&v382[32 * v379];
        v383->n128_u64[0] = v377;
        v383->n128_u32[2] = v769;
        v383[1].n128_u64[0] = (unint64_t)v376;
        v383[1].n128_u32[2] = 4;
        if (v98 == v334)
        {
          v105 = (uint64_t)&v382[32 * v379];
          v373 = (__n128 *)&v382[32 * v381];
          v378 = v383 + 2;
          v782 = (char *)v105;
          v784 = v373;
          if (!v334)
            goto LABEL_610;
        }
        else
        {
          v384 = (__n128 *)&v382[32 * v379];
          do
          {
            v100 = v98[-2];
            v385 = v98[-1];
            v105 = (uint64_t)&v384[-2];
            v384[-2] = v100;
            v384[-1] = v385;
            v98 -= 2;
            v384 -= 2;
          }
          while (v98 != v334);
          v373 = (__n128 *)&v382[32 * v381];
          v378 = v383 + 2;
          v782 = (char *)v105;
          v784 = v373;
          if (!v334)
            goto LABEL_610;
        }
        operator delete(v334);
        v376 = v779;
LABEL_610:
        v334 = (__n128 *)v105;
LABEL_611:
        v386 = v685 * (unint64_t)v375;
        v387 = v375;
        ++v374[v375];
        v388 = v376 + 8;
        v389 = v386 + v733;
        if (v378 < v373)
        {
          v378->n128_u64[0] = v389;
          v378->n128_u32[2] = v733;
          v378[1].n128_u64[0] = (unint64_t)v388;
          v390 = v378 + 2;
          v378[1].n128_u32[2] = 4;
          goto LABEL_632;
        }
        v391 = ((char *)v378 - (char *)v334) >> 5;
        v392 = v391 + 1;
        if ((unint64_t)(v391 + 1) >> 59)
          goto LABEL_847;
        if (v373 - v334 > v392)
          v392 = v373 - v334;
        if ((unint64_t)((char *)v373 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
          v393 = 0x7FFFFFFFFFFFFFFLL;
        else
          v393 = v392;
        if (v393)
        {
          if (v393 >> 59)
            goto LABEL_954;
          v394 = (char *)operator new(32 * v393);
        }
        else
        {
          v394 = 0;
        }
        v105 = (uint64_t)&v394[32 * v391];
        *(_QWORD *)v105 = v389;
        *(_DWORD *)(v105 + 8) = v733;
        v373 = (__n128 *)&v394[32 * v393];
        *(_QWORD *)(v105 + 16) = v388;
        *(_DWORD *)(v105 + 24) = 4;
        v390 = (__n128 *)(v105 + 32);
        if (v378 == v334)
        {
          v782 = (char *)v105;
          v784 = v373;
        }
        else
        {
          do
          {
            v100 = v378[-2];
            v395 = v378[-1];
            *(__n128 *)(v105 - 32) = v100;
            *(__n128 *)(v105 - 16) = v395;
            v105 -= 32;
            v378 -= 2;
          }
          while (v378 != v334);
          v782 = (char *)v105;
          v784 = v373;
          if (!v334)
            goto LABEL_631;
        }
        operator delete(v334);
LABEL_631:
        v334 = (__n128 *)v105;
        v376 = v779;
LABEL_632:
        ++v374[v387];
        v396 = v376 + 16;
        v397 = v386 + v725;
        if (v390 < v373)
        {
          v390->n128_u64[0] = v397;
          v390->n128_u32[2] = v725;
          v390[1].n128_u64[0] = (unint64_t)v396;
          v398 = v390 + 2;
          v390[1].n128_u32[2] = 4;
          goto LABEL_651;
        }
        v399 = ((char *)v390 - (char *)v334) >> 5;
        v400 = v399 + 1;
        if ((unint64_t)(v399 + 1) >> 59)
          goto LABEL_847;
        if (v373 - v334 > v400)
          v400 = v373 - v334;
        if ((unint64_t)((char *)v373 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
          v401 = 0x7FFFFFFFFFFFFFFLL;
        else
          v401 = v400;
        if (v401)
        {
          if (v401 >> 59)
            goto LABEL_954;
          v402 = (char *)operator new(32 * v401);
        }
        else
        {
          v402 = 0;
        }
        v105 = (uint64_t)&v402[32 * v399];
        *(_QWORD *)v105 = v397;
        *(_DWORD *)(v105 + 8) = v725;
        v373 = (__n128 *)&v402[32 * v401];
        *(_QWORD *)(v105 + 16) = v396;
        *(_DWORD *)(v105 + 24) = 4;
        v398 = (__n128 *)(v105 + 32);
        if (v390 == v334)
        {
          v782 = (char *)v105;
          v784 = v373;
        }
        else
        {
          do
          {
            v100 = v390[-2];
            v403 = v390[-1];
            *(__n128 *)(v105 - 32) = v100;
            *(__n128 *)(v105 - 16) = v403;
            v105 -= 32;
            v390 -= 2;
          }
          while (v390 != v334);
          v782 = (char *)v105;
          v784 = v373;
          if (!v334)
            goto LABEL_650;
        }
        operator delete(v334);
LABEL_650:
        v334 = (__n128 *)v105;
        v376 = v779;
LABEL_651:
        ++v374[v387];
        v404 = v376 + 24;
        v405 = v386 + v716;
        if (v398 < v373)
        {
          v398->n128_u64[0] = v405;
          v398->n128_u32[2] = v716;
          v398[1].n128_u64[0] = (unint64_t)v404;
          v98 = v398 + 2;
          v398[1].n128_u32[2] = 4;
        }
        else
        {
          v406 = ((char *)v398 - (char *)v334) >> 5;
          v407 = v406 + 1;
          if ((unint64_t)(v406 + 1) >> 59)
            goto LABEL_847;
          if (v373 - v334 > v407)
            v407 = v373 - v334;
          if ((unint64_t)((char *)v373 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
            v408 = 0x7FFFFFFFFFFFFFFLL;
          else
            v408 = v407;
          if (v408)
          {
            if (v408 >> 59)
              goto LABEL_954;
            v409 = (char *)operator new(32 * v408);
          }
          else
          {
            v409 = 0;
          }
          v105 = (uint64_t)&v409[32 * v406];
          *(_QWORD *)v105 = v405;
          *(_DWORD *)(v105 + 8) = v716;
          v373 = (__n128 *)&v409[32 * v408];
          *(_QWORD *)(v105 + 16) = v404;
          *(_DWORD *)(v105 + 24) = 4;
          v98 = (__n128 *)(v105 + 32);
          if (v398 == v334)
          {
            v782 = (char *)v105;
            v784 = v373;
LABEL_667:
            operator delete(v334);
            v334 = (__n128 *)v105;
            goto LABEL_592;
          }
          do
          {
            v100 = v398[-2];
            v410 = v398[-1];
            *(__n128 *)(v105 - 32) = v100;
            *(__n128 *)(v105 - 16) = v410;
            v105 -= 32;
            v398 -= 2;
          }
          while (v398 != v334);
          v782 = (char *)v105;
          v784 = v373;
          if (v334)
            goto LABEL_667;
          v334 = (__n128 *)v105;
        }
LABEL_592:
        v333 = v756;
        ++v374[v387];
        if (++v336 == 6)
        {
LABEL_509:
          v333 += 4;
          if (v333 == v694)
          {
            v330 = *(unsigned int *)(v697 + 828);
            v331 = v689;
            goto LABEL_506;
          }
          goto LABEL_510;
        }
      }
    }
LABEL_668:
    v411 = 126 - 2 * __clz(((uint64_t)v98 - v105) >> 5);
    if (v98 == (__n128 *)v105)
      v412 = 0;
    else
      v412 = v411;
    sub_20F3DDB70(v105, v98, v412, 1, v100);
    *(_WORD *)(v697 + 2424) &= ~1u;
    sub_20F3DC8C4((uint64_t)v681, v685, &v785);
    v413 = v782;
    if ((_DWORD)v683)
    {
      v414 = 0;
      v415 = (_BYTE *)v697;
      do
      {
        v416 = *((_QWORD *)v415 + 301);
        v417 = *(_QWORD *)(v416 + 8 * v414++);
        v418 = *(_QWORD *)(v416 + 8 * v414);
        while (v417 != v418)
        {
          *(_DWORD *)(*((_QWORD *)v415 + 302) + 4 * v417) = *((_DWORD *)v413 + 2);
          v419 = (_QWORD *)*((_QWORD *)v413 + 2);
          v420 = v415[2428];
          v421 = (v420 * v420);
          v422 = (_QWORD *)(*((_QWORD *)v415 + 304) + 8 * v417 * v421);
          if (v419 == v422)
          {
            v423 = operator new((8 * (_DWORD)v421 + 31) & 0xFFFE0, (std::align_val_t)0x20uLL);
            *v423 = *v419;
            if ((_DWORD)v420)
            {
              v424 = 0;
              v425 = 8 * v420;
              do
              {
                memmove((char *)v419 + v424, (char *)v423 + v424, v425);
                v424 += v425;
                --v420;
              }
              while (v420);
            }
            MEMORY[0x212BC6368](v423, 0x1000C8000313F17);
            v415 = (_BYTE *)v697;
          }
          else
          {
            *v422 = *v419;
          }
          v413 += 32;
          ++v417;
        }
      }
      while (v414 != v683);
      v413 = v782;
      v426 = v680;
      if (v782)
        goto LABEL_684;
    }
    else
    {
      v415 = (_BYTE *)v697;
      v426 = v680;
      if (v782)
LABEL_684:
        operator delete(v413);
    }
    v427 = v785;
    if (!v785)
      goto LABEL_687;
    goto LABEL_686;
  }
  if (v8 != v9)
  {
    v42 = v8 + 1;
    v43 = *(unsigned int **)(a1 + 1224);
    if (v8 + 1 != v9)
    {
      v44 = *v8;
      v43 = *(unsigned int **)(a1 + 1224);
      v45 = v8 + 1;
      do
      {
        v47 = *v45++;
        v46 = v47;
        v48 = v44 >= v47;
        if (v44 <= v47)
          v44 = v46;
        if (!v48)
          v43 = v42;
        v42 = v45;
      }
      while (v45 != v9);
    }
    if (*v43 + 4 > v7)
      v7 = *v43 + 4;
  }
  v49 = *(unsigned int **)(a1 + 1248);
  v50 = *(unsigned int **)(a1 + 1256);
  if (v49 != v50)
  {
    v51 = v49 + 1;
    v52 = *(unsigned int **)(a1 + 1248);
    if (v49 + 1 != v50)
    {
      v53 = *v49;
      v52 = *(unsigned int **)(a1 + 1248);
      v54 = v49 + 1;
      do
      {
        v56 = *v54++;
        v55 = v56;
        v57 = v53 >= v56;
        if (v53 <= v56)
          v53 = v55;
        if (!v57)
          v52 = v51;
        v51 = v54;
      }
      while (v54 != v50);
    }
    if (*v52 + 6 > v7)
      v7 = *v52 + 6;
  }
  v58 = 6 * *(_DWORD *)(*(_QWORD *)(a1 + 1048) + 12) + 4 * *(_DWORD *)(v6 + 12);
  if (v8 != v9)
  {
    v59 = v8 + 1;
    if (v8 + 1 != v9)
    {
      v60 = *v8;
      v61 = v8 + 1;
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = v60 >= v63;
        if (v60 <= v63)
          v60 = v62;
        if (!v64)
          v8 = v59;
        v59 = v61;
      }
      while (v61 != v9);
    }
    v65 = *v8 + 4;
    if (v65 > v58)
      v58 = v65;
  }
  if (v49 != v50)
  {
    v66 = v49 + 1;
    if (v49 + 1 != v50)
    {
      v67 = *v49;
      v68 = v49 + 1;
      do
      {
        v70 = *v68++;
        v69 = v70;
        v71 = v67 >= v70;
        if (v67 <= v70)
          v67 = v69;
        if (!v71)
          v49 = v66;
        v66 = v68;
      }
      while (v68 != v50);
    }
    if (*v49 + 6 > v58)
      v58 = *v49 + 6;
  }
  v72 = *(unsigned __int8 *)(v697 + 2428);
  v785 = 0;
  v786 = 0;
  v787 = 0;
  v73 = v58 / v72;
  v774 = v72;
  if (v58 >= v72)
  {
    v74 = v58 / v72;
    v75 = (unsigned int *)operator new(4 * v74);
    v785 = v75;
    v787 = &v75[v74];
    v76 = (v74 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v77 = v75;
    v73 = v74;
    if (v76 < 7)
      goto LABEL_1099;
    v78 = v76 + 1;
    v77 = &v75[v78 & 0x7FFFFFFFFFFFFFF8];
    v79 = v75 + 4;
    v80 = v78 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      *(v79 - 1) = 0uLL;
      *v79 = 0uLL;
      v79 += 2;
      v80 -= 8;
    }
    while (v80);
    if (v78 != (v78 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1099:
      do
        *v77++ = 0;
      while (v77 != &v75[v74]);
    }
    v786 = &v75[v74];
  }
  v677 = v73;
  v679 = v58;
  v81 = v697;
  v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v697 + 704) + 40))(v697 + 704);
  v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v81 + 928) + 40))(v81 + 928);
  v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v85 = 0;
  v86 = (36 * v83)
      + (unint64_t)(24 * v82)
      + (16 * v84)
      + (unint64_t)(24 * (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v81 + 816) + 40))(v81 + 816));
  v781 = 0;
  v783 = 0;
  v88 = *(unsigned __int8 *)(v81 + 2428) * *(unsigned __int8 *)(v81 + 2428);
  if (v86 >= v88)
  {
    v89 = v86 / v88;
    v85 = (__n128 *)operator new(32 * (v86 / v88));
    v781 = v85;
    v783 = &v85[2 * v89];
  }
  v90 = v774;
  v760 = v7 / v774;
  v91 = 4 / v774;
  v92 = 6 / v774;
  v676 = 4 / v774;
  v678 = 6 / v774;
  if (!*(_DWORD *)(v697 + 716) || v774 > 4)
  {
    v93 = v85;
    if (!*(_DWORD *)(v697 + 940))
      goto LABEL_848;
    goto LABEL_807;
  }
  v442 = 0;
  v443 = v697;
  v726 = *(_QWORD *)(v697 + 720);
  if (v91 <= 1)
    v91 = 1;
  v710 = v91;
  if (v92 <= 1)
    v444 = 1;
  else
    v444 = v92;
  v445 = v785;
  v93 = v85;
  v682 = v785;
  do
  {
    v446 = *(_QWORD *)(v443 + 792) + 24 * v442;
    v447 = *(unsigned int **)v446;
    v448 = *(_DWORD *)(*(_QWORD *)(v443 + 1224) + 4 * v442) / v90;
    v717 = *(unsigned int **)(v446 + 8);
    v449 = (unint64_t)v717 - *(_QWORD *)v446;
    if (v717 != v447)
    {
      v684 = (char *)v717 - (char *)v447;
      v686 = *(_DWORD *)(*(_QWORD *)(v443 + 1224) + 4 * v442) / v90;
      v690 = v442;
      v770 = v760 * (unint64_t)v448;
      v748 = v760 * (unint64_t)(v448 + 2);
      v757 = v760 * (unint64_t)(v448 + 1);
      __pd = v760 * (unint64_t)(v448 + 3);
      while (1)
      {
        v450 = 0;
        v451 = *(_DWORD *)(*(_QWORD *)(v697 + 1248) + 4 * *v447) / v90;
        v734 = v447;
        v452 = v726 + 8 * *((_QWORD *)v447 + 1);
        v453 = v93;
        do
        {
          while (1)
          {
            v454 = v451 + v450;
            v455 = v770 + v454;
            if (v85 >= v783)
              break;
            v85->n128_u64[0] = v455;
            v85->n128_u32[2] = v454;
            v85[1].n128_u64[0] = v452;
            v85[1].n128_u32[2] = 6;
            v85 += 2;
            ++v450;
            v452 += 8 * v90;
            if (v450 == v444)
              goto LABEL_733;
          }
          v456 = ((char *)v85 - (char *)v453) >> 5;
          v457 = v456 + 1;
          if ((unint64_t)(v456 + 1) >> 59)
LABEL_1084:
            sub_20E867F44();
          v458 = (char *)v783 - (char *)v453;
          if (v783 - v453 > v457)
            v457 = v458 >> 4;
          if ((unint64_t)v458 >= 0x7FFFFFFFFFFFFFE0)
            v459 = 0x7FFFFFFFFFFFFFFLL;
          else
            v459 = v457;
          if (v459)
          {
            if (v459 >> 59)
LABEL_1094:
              sub_20E877A38();
            v460 = (char *)operator new(32 * v459);
          }
          else
          {
            v460 = 0;
          }
          v461 = (__n128 *)&v460[32 * v456];
          v461->n128_u64[0] = v455;
          v461->n128_u32[2] = v454;
          v461[1].n128_u64[0] = v452;
          v461[1].n128_u32[2] = 6;
          if (v85 == v453)
          {
            v464 = (__n128 *)&v460[32 * v456];
            v85 = v461 + 2;
            v783 = (__n128 *)&v460[32 * v459];
            if (v453)
              goto LABEL_728;
          }
          else
          {
            v462 = (__n128 *)&v460[32 * v456];
            do
            {
              v87 = v85[-2];
              v463 = v85[-1];
              v464 = v462 - 2;
              v462[-2] = v87;
              v462[-1] = v463;
              v85 -= 2;
              v462 -= 2;
            }
            while (v85 != v453);
            v85 = v461 + 2;
            v783 = (__n128 *)&v460[32 * v459];
            if (v453)
LABEL_728:
              operator delete(v453);
          }
          v453 = v464;
          v90 = v774;
          ++v450;
          v452 += 8 * v774;
        }
        while (v450 != v444);
LABEL_733:
        if (v90 > 2)
          goto LABEL_709;
        v465 = 0;
        v466 = v726 + 8 * (*((_QWORD *)v734 + 1) + (6 * v774));
        while (2)
        {
          while (1)
          {
            v467 = v451 + v465;
            v468 = v757 + v467;
            if (v85 >= v783)
              break;
            v85->n128_u64[0] = v468;
            v85->n128_u32[2] = v467;
            v85[1].n128_u64[0] = v466;
            v85[1].n128_u32[2] = 6;
            v85 += 2;
            ++v465;
            v466 += 8 * v90;
            if (v465 == v444)
              goto LABEL_756;
          }
          v469 = ((char *)v85 - (char *)v453) >> 5;
          v470 = v469 + 1;
          if ((unint64_t)(v469 + 1) >> 59)
            goto LABEL_1084;
          v471 = (char *)v783 - (char *)v453;
          if (v783 - v453 > v470)
            v470 = v471 >> 4;
          if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFE0)
            v472 = 0x7FFFFFFFFFFFFFFLL;
          else
            v472 = v470;
          if (v472)
          {
            if (v472 >> 59)
              goto LABEL_1094;
            v473 = (char *)operator new(32 * v472);
          }
          else
          {
            v473 = 0;
          }
          v474 = (__n128 *)&v473[32 * v469];
          v474->n128_u64[0] = v468;
          v474->n128_u32[2] = v467;
          v474[1].n128_u64[0] = v466;
          v474[1].n128_u32[2] = 6;
          if (v85 == v453)
          {
            v477 = (__n128 *)&v473[32 * v469];
            v85 = v474 + 2;
            v783 = (__n128 *)&v473[32 * v472];
            if (v453)
              goto LABEL_751;
          }
          else
          {
            v475 = (__n128 *)&v473[32 * v469];
            do
            {
              v87 = v85[-2];
              v476 = v85[-1];
              v477 = v475 - 2;
              v475[-2] = v87;
              v475[-1] = v476;
              v85 -= 2;
              v475 -= 2;
            }
            while (v85 != v453);
            v85 = v474 + 2;
            v783 = (__n128 *)&v473[32 * v472];
            if (v453)
LABEL_751:
              operator delete(v453);
          }
          v453 = v477;
          v90 = v774;
          ++v465;
          v466 += 8 * v774;
          if (v465 != v444)
            continue;
          break;
        }
LABEL_756:
        if (v710 == 2)
          goto LABEL_709;
        v478 = 0;
        v479 = v726 + 8 * (*((_QWORD *)v734 + 1) + (12 * v774));
        while (2)
        {
          while (1)
          {
            v480 = v451 + v478;
            v481 = v748 + v480;
            if (v85 >= v783)
              break;
            v85->n128_u64[0] = v481;
            v85->n128_u32[2] = v480;
            v85[1].n128_u64[0] = v479;
            v85[1].n128_u32[2] = 6;
            v85 += 2;
            ++v478;
            v479 += 8 * v90;
            if (v478 == v444)
              goto LABEL_779;
          }
          v482 = ((char *)v85 - (char *)v453) >> 5;
          v483 = v482 + 1;
          if ((unint64_t)(v482 + 1) >> 59)
            goto LABEL_1084;
          v484 = (char *)v783 - (char *)v453;
          if (v783 - v453 > v483)
            v483 = v484 >> 4;
          if ((unint64_t)v484 >= 0x7FFFFFFFFFFFFFE0)
            v485 = 0x7FFFFFFFFFFFFFFLL;
          else
            v485 = v483;
          if (v485)
          {
            if (v485 >> 59)
              goto LABEL_1094;
            v486 = (char *)operator new(32 * v485);
          }
          else
          {
            v486 = 0;
          }
          v487 = (__n128 *)&v486[32 * v482];
          v487->n128_u64[0] = v481;
          v487->n128_u32[2] = v480;
          v487[1].n128_u64[0] = v479;
          v487[1].n128_u32[2] = 6;
          if (v85 == v453)
          {
            v490 = (__n128 *)&v486[32 * v482];
            v85 = v487 + 2;
            v783 = (__n128 *)&v486[32 * v485];
            if (v453)
              goto LABEL_774;
          }
          else
          {
            v488 = (__n128 *)&v486[32 * v482];
            do
            {
              v87 = v85[-2];
              v489 = v85[-1];
              v490 = v488 - 2;
              v488[-2] = v87;
              v488[-1] = v489;
              v85 -= 2;
              v488 -= 2;
            }
            while (v85 != v453);
            v85 = v487 + 2;
            v783 = (__n128 *)&v486[32 * v485];
            if (v453)
LABEL_774:
              operator delete(v453);
          }
          v453 = v490;
          v90 = v774;
          ++v478;
          v479 += 8 * v774;
          if (v478 != v444)
            continue;
          break;
        }
LABEL_779:
        if (v710 != 3)
        {
          v491 = 0;
          v492 = v726 + 8 * (*((_QWORD *)v734 + 1) + (18 * v774));
          while (1)
          {
            v493 = v451 + v491;
            v494 = __pd + v493;
            if (v85 < v783)
            {
              v85->n128_u64[0] = v494;
              v85->n128_u32[2] = v493;
              v85[1].n128_u64[0] = v492;
              v85[1].n128_u32[2] = 6;
              v85 += 2;
              v93 = v453;
            }
            else
            {
              v495 = ((char *)v85 - (char *)v453) >> 5;
              v496 = v495 + 1;
              if ((unint64_t)(v495 + 1) >> 59)
                goto LABEL_1084;
              v497 = (char *)v783 - (char *)v453;
              if (v783 - v453 > v496)
                v496 = v497 >> 4;
              if ((unint64_t)v497 >= 0x7FFFFFFFFFFFFFE0)
                v498 = 0x7FFFFFFFFFFFFFFLL;
              else
                v498 = v496;
              if (v498)
              {
                if (v498 >> 59)
                  goto LABEL_1094;
                v499 = (char *)operator new(32 * v498);
              }
              else
              {
                v499 = 0;
              }
              v500 = (__n128 *)&v499[32 * v495];
              v500->n128_u64[0] = v494;
              v500->n128_u32[2] = v493;
              v500[1].n128_u64[0] = v492;
              v500[1].n128_u32[2] = 6;
              if (v85 == v453)
              {
                v93 = (__n128 *)&v499[32 * v495];
                v85 = v500 + 2;
                v783 = (__n128 *)&v499[32 * v498];
                if (!v453)
                  goto LABEL_800;
              }
              else
              {
                v501 = (__n128 *)&v499[32 * v495];
                do
                {
                  v87 = v85[-2];
                  v502 = v85[-1];
                  v93 = v501 - 2;
                  v501[-2] = v87;
                  v501[-1] = v502;
                  v85 -= 2;
                  v501 -= 2;
                }
                while (v85 != v453);
                v85 = v500 + 2;
                v783 = (__n128 *)&v499[32 * v498];
                if (!v453)
                {
LABEL_800:
                  v90 = v774;
                  goto LABEL_782;
                }
              }
              operator delete(v453);
              v90 = v774;
            }
LABEL_782:
            ++v491;
            v492 += 8 * v90;
            v453 = v93;
            if (v491 == v444)
              goto LABEL_710;
          }
        }
LABEL_709:
        v93 = v453;
LABEL_710:
        v447 = v734 + 4;
        if (v734 + 4 == v717)
        {
          v781 = v93;
          v448 = v686;
          v442 = v690;
          v445 = v682;
          v449 = v684;
          break;
        }
      }
    }
    v503 = 6 * (v449 >> 4) / v90;
    v445[v448] += v503;
    if (v90 <= 2)
    {
      v445[v448 + 1] += v503;
      if (v710 != 2)
      {
        v445[v448 + 2] += v503;
        if (v710 != 3)
          v445[v448 + 3] += v503;
      }
    }
    ++v442;
    v443 = v697;
  }
  while (v442 < *(unsigned int *)(v697 + 716));
  if (!*(_DWORD *)(v697 + 940))
    goto LABEL_848;
LABEL_807:
  if (v90 > 6)
    goto LABEL_848;
  v504 = 0;
  v505 = v697;
  v735 = *(_QWORD *)(v697 + 944);
  v727 = 6 * v90;
  if (v678 <= 1)
    v506 = 1;
  else
    v506 = v678;
  v771 = v506;
  v701 = v785;
  while (2)
  {
    v507 = *(_QWORD *)(v505 + 1016) + 24 * v504;
    v508 = *(unsigned int **)v507;
    v711 = v504;
    v718 = *(unsigned int **)(v507 + 8);
    v509 = *(_DWORD *)(*(_QWORD *)(v505 + 1248) + 4 * v504) / v90;
    v705 = (unint64_t)v718 - *(_QWORD *)v507;
    __pe = v509;
    if (v718 == *(unsigned int **)v507)
      goto LABEL_841;
    while (2)
    {
      v510 = 0;
      v511 = *(_DWORD *)(*(_QWORD *)(v697 + 1248) + 4 * *v508) / v90;
      v749 = v508;
      while (2)
      {
        v512 = 0;
        v513 = v760 * (unint64_t)(v509 + v510);
        v758 = v510;
        v514 = v735 + 8 * (*((_QWORD *)v508 + 1) + (v727 * v510));
        while (2)
        {
          while (1)
          {
            v515 = v511 + v512;
            v516 = v513 + v515;
            if (v85 >= v783)
              break;
            v85->n128_u64[0] = v516;
            v85->n128_u32[2] = v515;
            v85[1].n128_u64[0] = v514;
            v85[1].n128_u32[2] = 6;
            v85 += 2;
            ++v512;
            v514 += 8 * v90;
            if (v512 == v506)
              goto LABEL_817;
          }
          v517 = ((char *)v85 - (char *)v93) >> 5;
          v518 = v517 + 1;
          if ((unint64_t)(v517 + 1) >> 59)
            goto LABEL_1084;
          v519 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v518)
            v518 = v519 >> 4;
          if ((unint64_t)v519 >= 0x7FFFFFFFFFFFFFE0)
            v520 = 0x7FFFFFFFFFFFFFFLL;
          else
            v520 = v518;
          if (v520)
          {
            if (v520 >> 59)
              goto LABEL_1094;
            v521 = (char *)operator new(32 * v520);
          }
          else
          {
            v521 = 0;
          }
          v522 = (__n128 *)&v521[32 * v517];
          v522->n128_u64[0] = v516;
          v522->n128_u32[2] = v515;
          v522[1].n128_u64[0] = v514;
          v522[1].n128_u32[2] = 6;
          if (v85 == v93)
          {
            v525 = (__n128 *)&v521[32 * v517];
            v85 = v522 + 2;
            v783 = (__n128 *)&v521[32 * v520];
            if (v93)
              goto LABEL_835;
          }
          else
          {
            v523 = (__n128 *)&v521[32 * v517];
            do
            {
              v87 = v85[-2];
              v524 = v85[-1];
              v525 = v523 - 2;
              v523[-2] = v87;
              v523[-1] = v524;
              v85 -= 2;
              v523 -= 2;
            }
            while (v85 != v93);
            v85 = v522 + 2;
            v783 = (__n128 *)&v521[32 * v520];
            if (v93)
LABEL_835:
              operator delete(v93);
          }
          v93 = v525;
          v90 = v774;
          v506 = v771;
          ++v512;
          v514 += 8 * v774;
          if (v512 != v771)
            continue;
          break;
        }
LABEL_817:
        v508 = v749;
        v510 = v758 + 1;
        v509 = __pe;
        if (v758 + 1 != v506)
          continue;
        break;
      }
      v508 = v749 + 4;
      if (v749 + 4 != v718)
        continue;
      break;
    }
    v781 = v93;
LABEL_841:
    v526 = 6 * (v705 >> 4) / v90;
    v701[v509] += v526;
    if (v90 <= 3)
    {
      v701[v509 + 1] += v526;
      if ((_DWORD)v506 != 2)
      {
        v701[v509 + 2] += v526;
        if ((_DWORD)v506 != 3)
        {
          v701[v509 + 3] += v526;
          if ((_DWORD)v506 != 4)
          {
            v701[v509 + 4] += v526;
            if ((_DWORD)v506 != 5)
              v701[v509 + 5] += v526;
          }
        }
      }
    }
    v504 = v711 + 1;
    v505 = v697;
    if (v711 + 1 < (unint64_t)*(unsigned int *)(v697 + 940))
      continue;
    break;
  }
LABEL_848:
  v772 = 4 * v90;
  if (!*(_DWORD *)(v697 + 604) || v90 > 4)
    goto LABEL_948;
  v527 = 0;
  v528 = v697;
  v750 = *(_QWORD *)(v697 + 608);
  if (v676 <= 1)
    v529 = 1;
  else
    v529 = v676;
  v695 = v785;
  while (2)
  {
    v530 = *(_QWORD *)(v528 + 680) + 24 * v527;
    v531 = *(unsigned int **)v530;
    v706 = v527;
    v712 = *(unsigned int **)(v530 + 8);
    v532 = *(_DWORD *)(*(_QWORD *)(v528 + 1224) + 4 * v527) / v90;
    v702 = (unint64_t)v712 - *(_QWORD *)v530;
    v736 = v532;
    if (v712 == *(unsigned int **)v530)
      goto LABEL_944;
    while (2)
    {
      v533 = 0;
      v534 = *(_DWORD *)(*(_QWORD *)(v697 + 1224) + 4 * *v531) / v90;
      v535 = (v534 + 1);
      v719 = (v534 + 3);
      v728 = (v534 + 2);
      __pf = v531;
      while (2)
      {
        v536 = v532 + v533;
        v537 = v750 + 8 * (*((_QWORD *)v531 + 1) + (v772 * v533));
        v538 = v534 + v760 * (unint64_t)(v532 + v533);
        if (v85 >= v783)
        {
          v539 = ((char *)v85 - (char *)v93) >> 5;
          v540 = v539 + 1;
          if ((unint64_t)(v539 + 1) >> 59)
            goto LABEL_1084;
          v541 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v540)
            v540 = v541 >> 4;
          if ((unint64_t)v541 >= 0x7FFFFFFFFFFFFFE0)
            v542 = 0x7FFFFFFFFFFFFFFLL;
          else
            v542 = v540;
          if (v542)
          {
            if (v542 >> 59)
              goto LABEL_1094;
            v543 = (char *)operator new(32 * v542);
          }
          else
          {
            v543 = 0;
          }
          v544 = (__n128 *)&v543[32 * v539];
          v544->n128_u64[0] = v538;
          v544->n128_u32[2] = v534;
          v544[1].n128_u64[0] = v537;
          v544[1].n128_u32[2] = 4;
          if (v85 == v93)
          {
            v547 = (__n128 *)&v543[32 * v539];
            v85 = v544 + 2;
            v783 = (__n128 *)&v543[32 * v542];
            if (v93)
LABEL_878:
              operator delete(v93);
          }
          else
          {
            v545 = (__n128 *)&v543[32 * v539];
            do
            {
              v87 = v85[-2];
              v546 = v85[-1];
              v547 = v545 - 2;
              v545[-2] = v87;
              v545[-1] = v546;
              v85 -= 2;
              v545 -= 2;
            }
            while (v85 != v93);
            v85 = v544 + 2;
            v783 = (__n128 *)&v543[32 * v542];
            if (v93)
              goto LABEL_878;
          }
          v93 = v547;
          v90 = v774;
          v532 = v736;
          v531 = __pf;
          v535 = (v534 + 1);
          if (v774 <= 2)
            goto LABEL_880;
          goto LABEL_860;
        }
        v85->n128_u64[0] = v538;
        v85->n128_u32[2] = v534;
        v85[1].n128_u64[0] = v537;
        v85[1].n128_u32[2] = 4;
        v85 += 2;
        if (v90 > 2)
          goto LABEL_860;
LABEL_880:
        v548 = v760 * (unint64_t)v536;
        v549 = v537 + 8 * v90;
        v550 = v548 + v535;
        if (v85 >= v783)
        {
          v551 = ((char *)v85 - (char *)v93) >> 5;
          v552 = v551 + 1;
          if ((unint64_t)(v551 + 1) >> 59)
            goto LABEL_1084;
          v553 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v552)
            v552 = v553 >> 4;
          if ((unint64_t)v553 >= 0x7FFFFFFFFFFFFFE0)
            v554 = 0x7FFFFFFFFFFFFFFLL;
          else
            v554 = v552;
          if (v554)
          {
            if (v554 >> 59)
              goto LABEL_1094;
            v555 = (char *)operator new(32 * v554);
            v535 = (v534 + 1);
          }
          else
          {
            v555 = 0;
          }
          v556 = (__n128 *)&v555[32 * v551];
          v556->n128_u64[0] = v550;
          v556->n128_u32[2] = v535;
          v556[1].n128_u64[0] = v549;
          v556[1].n128_u32[2] = 4;
          if (v85 == v93)
          {
            v559 = (__n128 *)&v555[32 * v551];
            v85 = v556 + 2;
            v783 = (__n128 *)&v555[32 * v554];
            if (v93)
            {
LABEL_899:
              operator delete(v93);
              v535 = (v534 + 1);
            }
          }
          else
          {
            v557 = (__n128 *)&v555[32 * v551];
            do
            {
              v87 = v85[-2];
              v558 = v85[-1];
              v559 = v557 - 2;
              v557[-2] = v87;
              v557[-1] = v558;
              v85 -= 2;
              v557 -= 2;
            }
            while (v85 != v93);
            v85 = v556 + 2;
            v783 = (__n128 *)&v555[32 * v554];
            if (v93)
              goto LABEL_899;
          }
          v93 = v559;
          v90 = v774;
          v532 = v736;
          v531 = __pf;
          if ((_DWORD)v529 != 2)
            goto LABEL_901;
          goto LABEL_860;
        }
        v85->n128_u64[0] = v550;
        v85->n128_u32[2] = v535;
        v85[1].n128_u64[0] = v549;
        v85[1].n128_u32[2] = 4;
        v85 += 2;
        if ((_DWORD)v529 == 2)
          goto LABEL_860;
LABEL_901:
        v560 = v549 + 8 * v90;
        v561 = v548 + v728;
        if (v85 >= v783)
        {
          v562 = ((char *)v85 - (char *)v93) >> 5;
          v563 = v562 + 1;
          if ((unint64_t)(v562 + 1) >> 59)
            goto LABEL_1084;
          v564 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v563)
            v563 = v564 >> 4;
          if ((unint64_t)v564 >= 0x7FFFFFFFFFFFFFE0)
            v565 = 0x7FFFFFFFFFFFFFFLL;
          else
            v565 = v563;
          v566 = v534 + 2;
          if (v565)
          {
            if (v565 >> 59)
              goto LABEL_1094;
            v567 = (char *)operator new(32 * v565);
            v566 = v534 + 2;
          }
          else
          {
            v567 = 0;
          }
          v568 = (__n128 *)&v567[32 * v562];
          v568->n128_u64[0] = v561;
          v568->n128_u32[2] = v566;
          v568[1].n128_u64[0] = v560;
          v568[1].n128_u32[2] = 4;
          if (v85 == v93)
          {
            v571 = (__n128 *)&v567[32 * v562];
            v85 = v568 + 2;
            v783 = (__n128 *)&v567[32 * v565];
            if (v93)
LABEL_920:
              operator delete(v93);
          }
          else
          {
            v569 = (__n128 *)&v567[32 * v562];
            do
            {
              v87 = v85[-2];
              v570 = v85[-1];
              v571 = v569 - 2;
              v569[-2] = v87;
              v569[-1] = v570;
              v85 -= 2;
              v569 -= 2;
            }
            while (v85 != v93);
            v85 = v568 + 2;
            v783 = (__n128 *)&v567[32 * v565];
            if (v93)
              goto LABEL_920;
          }
          v93 = v571;
          v90 = v774;
          v532 = v736;
          v531 = __pf;
          v535 = (v534 + 1);
          if ((_DWORD)v529 != 3)
            goto LABEL_922;
          goto LABEL_860;
        }
        v85->n128_u64[0] = v561;
        v85->n128_u32[2] = v728;
        v85[1].n128_u64[0] = v560;
        v85[1].n128_u32[2] = 4;
        v85 += 2;
        if ((_DWORD)v529 != 3)
        {
LABEL_922:
          v572 = v560 + 8 * v90;
          v573 = v548 + v719;
          if (v85 < v783)
          {
            v85->n128_u64[0] = v573;
            v85->n128_u32[2] = v719;
            v85[1].n128_u64[0] = v572;
            v85[1].n128_u32[2] = 4;
            v85 += 2;
          }
          else
          {
            v574 = ((char *)v85 - (char *)v93) >> 5;
            v575 = v574 + 1;
            if ((unint64_t)(v574 + 1) >> 59)
              goto LABEL_1084;
            v576 = (char *)v783 - (char *)v93;
            if (v783 - v93 > v575)
              v575 = v576 >> 4;
            if ((unint64_t)v576 >= 0x7FFFFFFFFFFFFFE0)
              v577 = 0x7FFFFFFFFFFFFFFLL;
            else
              v577 = v575;
            v578 = v534 + 3;
            if (v577)
            {
              if (v577 >> 59)
                goto LABEL_1094;
              v579 = (char *)operator new(32 * v577);
              v578 = v534 + 3;
            }
            else
            {
              v579 = 0;
            }
            v580 = (__n128 *)&v579[32 * v574];
            v580->n128_u64[0] = v573;
            v580->n128_u32[2] = v578;
            v580[1].n128_u64[0] = v572;
            v580[1].n128_u32[2] = 4;
            if (v85 == v93)
            {
              v583 = (__n128 *)&v579[32 * v574];
              v85 = v580 + 2;
              v783 = (__n128 *)&v579[32 * v577];
              if (v93)
                goto LABEL_939;
            }
            else
            {
              v581 = (__n128 *)&v579[32 * v574];
              do
              {
                v87 = v85[-2];
                v582 = v85[-1];
                v583 = v581 - 2;
                v581[-2] = v87;
                v581[-1] = v582;
                v85 -= 2;
                v581 -= 2;
              }
              while (v85 != v93);
              v85 = v580 + 2;
              v783 = (__n128 *)&v579[32 * v577];
              if (v93)
LABEL_939:
                operator delete(v93);
            }
            v93 = v583;
            v90 = v774;
            v532 = v736;
            v531 = __pf;
            v535 = (v534 + 1);
          }
        }
LABEL_860:
        if (++v533 != v529)
          continue;
        break;
      }
      v531 += 4;
      if (v531 != v712)
        continue;
      break;
    }
    v781 = v93;
LABEL_944:
    v584 = ((v702 >> 2) & 0xFFFFFFFC) / v90;
    v695[v532] += v584;
    if (v90 <= 2)
    {
      v695[v532 + 1] += v584;
      if ((_DWORD)v529 != 2)
      {
        v695[v532 + 2] += v584;
        if ((_DWORD)v529 != 3)
          v695[v532 + 3] += v584;
      }
    }
    v527 = v706 + 1;
    v528 = v697;
    if (v706 + 1 < (unint64_t)*(unsigned int *)(v697 + 604))
      continue;
    break;
  }
LABEL_948:
  if (!*(_DWORD *)(v697 + 828) || v90 > 6)
    goto LABEL_1057;
  if (v90 > 4)
  {
    v585 = 0;
    v586 = v785;
    v587 = *(_QWORD *)(v697 + 1248);
    v588 = (_QWORD *)(*(_QWORD *)(v697 + 904) + 8);
    do
    {
      v589 = *(_DWORD *)(v587 + 4 * v585) / v90;
      v586[v589] += (((*v588 - *(v588 - 1)) >> 2) & 0xFFFFFFFC) / v90;
      ++v585;
      v588 += 3;
    }
    while (v585 < *(unsigned int *)(v697 + 828));
    goto LABEL_1057;
  }
  v590 = 0;
  v591 = v697;
  if (v678 <= 1)
    v592 = 1;
  else
    v592 = v678;
  __pg = *(char **)(v697 + 832);
  v751 = v592;
  v593 = 4 / v774;
  if (v676 <= 1)
    v593 = 1;
  v729 = v593;
  v691 = v785;
  while (2)
  {
    v594 = *(_QWORD *)(v591 + 904) + 24 * v590;
    v595 = *(unsigned int **)v594;
    v703 = v590;
    v707 = *(unsigned int **)(v594 + 8);
    v596 = *(_DWORD *)(*(_QWORD *)(v591 + 1248) + 4 * v590) / v90;
    v696 = (unint64_t)v707 - *(_QWORD *)v594;
    v737 = v596;
    if (v707 == *(unsigned int **)v594)
      goto LABEL_1051;
    while (2)
    {
      v597 = 0;
      v598 = *(_DWORD *)(*(_QWORD *)(v697 + 1224) + 4 * *v595) / v90;
      v599 = (v598 + 1);
      v713 = (v598 + 3);
      v720 = (v598 + 2);
      while (2)
      {
        v600 = v596 + v597;
        v601 = &__pg[8 * *((_QWORD *)v595 + 1) + 8 * (v772 * v597)];
        v602 = v598 + v760 * (unint64_t)(v596 + v597);
        if (v85 >= v783)
        {
          v603 = ((char *)v85 - (char *)v93) >> 5;
          v604 = v603 + 1;
          if ((unint64_t)(v603 + 1) >> 59)
            goto LABEL_1084;
          v605 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v604)
            v604 = v605 >> 4;
          if ((unint64_t)v605 >= 0x7FFFFFFFFFFFFFE0)
            v606 = 0x7FFFFFFFFFFFFFFLL;
          else
            v606 = v604;
          if (v606)
          {
            if (v606 >> 59)
              goto LABEL_1094;
            v607 = (char *)operator new(32 * v606);
          }
          else
          {
            v607 = 0;
          }
          v608 = (__n128 *)&v607[32 * v603];
          v608->n128_u64[0] = v602;
          v608->n128_u32[2] = v598;
          v608[1].n128_u64[0] = (unint64_t)v601;
          v608[1].n128_u32[2] = 4;
          if (v85 == v93)
          {
            v611 = (__n128 *)&v607[32 * v603];
            v85 = v608 + 2;
            v783 = (__n128 *)&v607[32 * v606];
            if (v93)
LABEL_985:
              operator delete(v93);
          }
          else
          {
            v609 = (__n128 *)&v607[32 * v603];
            do
            {
              v87 = v85[-2];
              v610 = v85[-1];
              v611 = v609 - 2;
              v609[-2] = v87;
              v609[-1] = v610;
              v85 -= 2;
              v609 -= 2;
            }
            while (v85 != v93);
            v85 = v608 + 2;
            v783 = (__n128 *)&v607[32 * v606];
            if (v93)
              goto LABEL_985;
          }
          v93 = v611;
          v90 = v774;
          v596 = v737;
          v599 = (v598 + 1);
          if (v774 <= 2)
            goto LABEL_987;
          goto LABEL_967;
        }
        v85->n128_u64[0] = v602;
        v85->n128_u32[2] = v598;
        v85[1].n128_u64[0] = (unint64_t)v601;
        v85[1].n128_u32[2] = 4;
        v85 += 2;
        if (v90 > 2)
          goto LABEL_967;
LABEL_987:
        v612 = v760 * (unint64_t)v600;
        v613 = (unint64_t)&v601[8 * v90];
        v614 = v612 + v599;
        if (v85 >= v783)
        {
          v615 = ((char *)v85 - (char *)v93) >> 5;
          v616 = v615 + 1;
          if ((unint64_t)(v615 + 1) >> 59)
            goto LABEL_1084;
          v617 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v616)
            v616 = v617 >> 4;
          if ((unint64_t)v617 >= 0x7FFFFFFFFFFFFFE0)
            v618 = 0x7FFFFFFFFFFFFFFLL;
          else
            v618 = v616;
          if (v618)
          {
            if (v618 >> 59)
              goto LABEL_1094;
            v619 = (char *)operator new(32 * v618);
            v599 = (v598 + 1);
          }
          else
          {
            v619 = 0;
          }
          v620 = (__n128 *)&v619[32 * v615];
          v620->n128_u64[0] = v614;
          v620->n128_u32[2] = v599;
          v620[1].n128_u64[0] = v613;
          v620[1].n128_u32[2] = 4;
          if (v85 == v93)
          {
            v623 = (__n128 *)&v619[32 * v615];
            v85 = v620 + 2;
            v783 = (__n128 *)&v619[32 * v618];
            if (v93)
            {
LABEL_1006:
              operator delete(v93);
              v599 = (v598 + 1);
            }
          }
          else
          {
            v621 = (__n128 *)&v619[32 * v615];
            do
            {
              v87 = v85[-2];
              v622 = v85[-1];
              v623 = v621 - 2;
              v621[-2] = v87;
              v621[-1] = v622;
              v85 -= 2;
              v621 -= 2;
            }
            while (v85 != v93);
            v85 = v620 + 2;
            v783 = (__n128 *)&v619[32 * v618];
            if (v93)
              goto LABEL_1006;
          }
          v93 = v623;
          v90 = v774;
          v596 = v737;
          if (v729 != 2)
            goto LABEL_1008;
          goto LABEL_967;
        }
        v85->n128_u64[0] = v614;
        v85->n128_u32[2] = v599;
        v85[1].n128_u64[0] = v613;
        v85[1].n128_u32[2] = 4;
        v85 += 2;
        if (v729 == 2)
          goto LABEL_967;
LABEL_1008:
        v624 = v613 + 8 * v90;
        v625 = v612 + v720;
        if (v85 >= v783)
        {
          v626 = ((char *)v85 - (char *)v93) >> 5;
          v627 = v626 + 1;
          if ((unint64_t)(v626 + 1) >> 59)
            goto LABEL_1084;
          v628 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v627)
            v627 = v628 >> 4;
          if ((unint64_t)v628 >= 0x7FFFFFFFFFFFFFE0)
            v629 = 0x7FFFFFFFFFFFFFFLL;
          else
            v629 = v627;
          v630 = v598 + 2;
          if (v629)
          {
            if (v629 >> 59)
              goto LABEL_1094;
            v631 = (char *)operator new(32 * v629);
            v630 = v598 + 2;
          }
          else
          {
            v631 = 0;
          }
          v632 = (__n128 *)&v631[32 * v626];
          v632->n128_u64[0] = v625;
          v632->n128_u32[2] = v630;
          v632[1].n128_u64[0] = v624;
          v632[1].n128_u32[2] = 4;
          if (v85 == v93)
          {
            v635 = (__n128 *)&v631[32 * v626];
            v85 = v632 + 2;
            v783 = (__n128 *)&v631[32 * v629];
            if (v93)
LABEL_1027:
              operator delete(v93);
          }
          else
          {
            v633 = (__n128 *)&v631[32 * v626];
            do
            {
              v87 = v85[-2];
              v634 = v85[-1];
              v635 = v633 - 2;
              v633[-2] = v87;
              v633[-1] = v634;
              v85 -= 2;
              v633 -= 2;
            }
            while (v85 != v93);
            v85 = v632 + 2;
            v783 = (__n128 *)&v631[32 * v629];
            if (v93)
              goto LABEL_1027;
          }
          v93 = v635;
          v90 = v774;
          v596 = v737;
          v599 = (v598 + 1);
          if (v729 != 3)
            goto LABEL_1029;
          goto LABEL_967;
        }
        v85->n128_u64[0] = v625;
        v85->n128_u32[2] = v720;
        v85[1].n128_u64[0] = v624;
        v85[1].n128_u32[2] = 4;
        v85 += 2;
        if (v729 != 3)
        {
LABEL_1029:
          v636 = v624 + 8 * v90;
          v637 = v612 + v713;
          if (v85 < v783)
          {
            v85->n128_u64[0] = v637;
            v85->n128_u32[2] = v713;
            v85[1].n128_u64[0] = v636;
            v85[1].n128_u32[2] = 4;
            v85 += 2;
          }
          else
          {
            v638 = ((char *)v85 - (char *)v93) >> 5;
            v639 = v638 + 1;
            if ((unint64_t)(v638 + 1) >> 59)
              goto LABEL_1084;
            v640 = (char *)v783 - (char *)v93;
            if (v783 - v93 > v639)
              v639 = v640 >> 4;
            if ((unint64_t)v640 >= 0x7FFFFFFFFFFFFFE0)
              v641 = 0x7FFFFFFFFFFFFFFLL;
            else
              v641 = v639;
            v642 = v598 + 3;
            if (v641)
            {
              if (v641 >> 59)
                goto LABEL_1094;
              v643 = (char *)operator new(32 * v641);
              v642 = v598 + 3;
            }
            else
            {
              v643 = 0;
            }
            v644 = (__n128 *)&v643[32 * v638];
            v644->n128_u64[0] = v637;
            v644->n128_u32[2] = v642;
            v644[1].n128_u64[0] = v636;
            v644[1].n128_u32[2] = 4;
            if (v85 == v93)
            {
              v647 = (__n128 *)&v643[32 * v638];
              v85 = v644 + 2;
              v783 = (__n128 *)&v643[32 * v641];
              if (v93)
                goto LABEL_1046;
            }
            else
            {
              v645 = (__n128 *)&v643[32 * v638];
              do
              {
                v87 = v85[-2];
                v646 = v85[-1];
                v647 = v645 - 2;
                v645[-2] = v87;
                v645[-1] = v646;
                v85 -= 2;
                v645 -= 2;
              }
              while (v85 != v93);
              v85 = v644 + 2;
              v783 = (__n128 *)&v643[32 * v641];
              if (v93)
LABEL_1046:
                operator delete(v93);
            }
            v93 = v647;
            v90 = v774;
            v596 = v737;
            v599 = (v598 + 1);
          }
        }
LABEL_967:
        if (++v597 != v751)
          continue;
        break;
      }
      v595 += 4;
      if (v595 != v707)
        continue;
      break;
    }
    v781 = v93;
LABEL_1051:
    v648 = ((v696 >> 2) & 0xFFFFFFFC) / v90;
    v691[v596] += v648;
    if (v90 <= 3)
    {
      v691[v596 + 1] += v648;
      if ((_DWORD)v751 != 2)
      {
        v691[v596 + 2] += v648;
        if ((_DWORD)v751 != 3)
        {
          v691[v596 + 3] += v648;
          if ((_DWORD)v751 != 4)
          {
            v691[v596 + 4] += v648;
            if ((_DWORD)v751 != 5)
              v691[v596 + 5] += v648;
          }
        }
      }
    }
    v591 = v697;
    v590 = v703 + 1;
    if (v703 + 1 < (unint64_t)*(unsigned int *)(v697 + 828))
      continue;
    break;
  }
LABEL_1057:
  v649 = 126 - 2 * __clz(((char *)v85 - (char *)v93) >> 5);
  if (v85 == v93)
    v650 = 0;
  else
    v650 = v649;
  sub_20F3DCA20((uint64_t)v93, v85, v650, 1, v87);
  *(_WORD *)(v697 + 2424) &= ~1u;
  sub_20F3DC8C4((uint64_t)v681, v760, &v785);
  v651 = v774;
  if (v679 >= v774)
  {
    if (v677 <= 1)
      v652 = 1;
    else
      v652 = v677;
    v752 = v652;
    v653 = 0;
    v654 = 8 * v774;
    v655 = v781;
    do
    {
      v656 = *(_QWORD *)(v697 + 2408);
      v657 = *(_QWORD *)(v656 + 8 * v653);
      v759 = v653 + 1;
      v658 = *(_QWORD *)(v656 + 8 * (v653 + 1));
      if (v657 != v658)
      {
        v659 = 8 * v657;
        v765 = *(_QWORD *)(v656 + 8 * (v653 + 1));
        do
        {
          *(_DWORD *)(*(_QWORD *)(v697 + 2416) + 4 * v657) = v655->n128_u32[2];
          v660 = v655[1].n128_u64[0];
          v661 = v655[1].n128_u32[2];
          v662 = *(unsigned __int8 *)(v697 + 2428);
          v663 = *(_QWORD *)(v697 + 2432);
          v664 = (v662 * v662);
          v773 = v659;
          if (v660 == v663 + 8 * v657 * v664)
          {
            v668 = (char *)operator new((8 * (_DWORD)v664 + 31) & 0xFFFE0, (std::align_val_t)0x20uLL);
            v669 = 0;
            v670 = v668;
            v671 = v774;
            do
            {
              memmove(v670, (const void *)(v660 + 8 * v669), v654);
              v669 += v661;
              v670 += v654;
              --v671;
            }
            while (v671);
            if ((_DWORD)v662)
            {
              v672 = 0;
              v673 = 8 * v662;
              do
              {
                memmove((void *)(v660 + v672), &v668[v672], v673);
                v672 += v673;
                --v662;
              }
              while (v662);
            }
            MEMORY[0x212BC6368](v668, 0x1000C8000313F17);
            v658 = v765;
          }
          else
          {
            v665 = 0;
            v666 = (char *)(v663
                          + v659
                          * *(unsigned __int8 *)(v697 + 2428)
                          * (unint64_t)*(unsigned __int8 *)(v697 + 2428));
            v667 = 8 * v662;
            do
            {
              memmove(v666, (const void *)(v660 + 8 * v665), v654);
              v666 += v667;
              v665 += v661;
              --v651;
            }
            while (v651);
          }
          v655 += 2;
          ++v657;
          v659 = v773 + 8;
          v651 = v774;
        }
        while (v657 != v658);
      }
      v653 = v759;
    }
    while (v759 != v752);
  }
  if (v781)
    operator delete(v781);
  v427 = v785;
  v415 = (_BYTE *)v697;
  v426 = v680;
  if (v785)
  {
LABEL_686:
    v786 = v427;
    operator delete(v427);
  }
LABEL_687:
  kdebug_trace();
  if (!v415[528])
    goto LABEL_1089;
  v428 = *((_DWORD *)v415 + 136);
  if (v428 != 1)
  {
    if (!v428)
      sub_20F3DC200(v681, *((double *)v415 + 67));
    goto LABEL_1089;
  }
  (*(void (**)(_BYTE *, double **))(*(_QWORD *)v415 + 160))(v415, v426);
  v780 = *((double *)v415 + 67);
  v429 = *((unsigned int *)v426 + 4);
  v430 = (8 * v429 + 31) & 0xFFFFFFFE0;
  v786 = (unsigned int *)(v430 >> 3);
  v431 = (unsigned int *)operator new(v430, (std::align_val_t)0x20uLL);
  v785 = v431;
  LODWORD(v787) = v429;
  if ((_DWORD)v429)
  {
    v432 = *v680;
    v433 = (v429 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v433 < 3)
    {
      v434 = (double *)v431;
    }
    else
    {
      v434 = (double *)v431;
      if ((unint64_t)((char *)v431 - (char *)v432) >= 0x20)
      {
        v435 = v433 + 1;
        v436 = 8 * (v435 & 0x3FFFFFFFFFFFFFFCLL);
        v434 = (double *)&v431[(unint64_t)v436 / 4];
        v437 = &v432[(unint64_t)v436 / 8];
        v438 = (float64x2_t *)(v432 + 2);
        v439 = (float64x2_t *)(v431 + 4);
        v440 = v435 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v441 = vmulq_n_f64(*v438, v780);
          v439[-1] = vmulq_n_f64(v438[-1], v780);
          *v439 = v441;
          v438 += 2;
          v439 += 2;
          v440 -= 4;
        }
        while (v440);
        v432 = v437;
        if (v435 == (v435 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_1087;
      }
    }
    do
    {
      v674 = *v432++;
      *v434++ = v780 * v674;
    }
    while (v434 != (double *)&v431[2 * v429]);
  }
LABEL_1087:
  sub_20F3DEB34(v681, &v785);
  v426 = v680;
  if (v785)
    MEMORY[0x212BC6368](v785, 0x1000C8000313F17);
LABEL_1089:
  (*(void (**)(_BYTE *, double **))(*(_QWORD *)v415 + 152))(v415, v426);
  kdebug_trace();
  if ((*(unsigned int (**)(_BYTE *, double **))(*(_QWORD *)v415 + 56))(v415, v426))
  {
    v4 = 1;
  }
  else
  {
    v4 = 0;
    v415[517] = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_20F3C515C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 112);
  if (v3)
  {
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3C51C0()
{
  JUMPOUT(0x20F3C5258);
}

void sub_20F3C51C8()
{
  JUMPOUT(0x20F3C5290);
}

void sub_20F3C51D8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = v0;
  JUMPOUT(0x20F3C5248);
}

void sub_20F3C522C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = v0;
  JUMPOUT(0x20F3C5248);
}

void sub_20F3C5240(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(_QWORD *)(v1 - 104) = v4;
    operator delete(v4);
    sub_20EDB4004(v1 - 137);
    _Unwind_Resume(a1);
  }
  sub_20EDB4004(v1 - 137);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3C52B0(uint64_t a1)
{
  return a1 + 2448;
}

double sub_20F3C52B8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double *v9;
  unint64_t v10;
  double *v11;
  double result;
  unint64_t v13;
  uint64_t v14;
  float64x2_t *v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  float64x2_t *v25;
  uint64_t i;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  double *v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  uint64_t v37;
  float64x2_t *v38;
  float64x2_t *v39;
  float64x2_t v40;
  float64x2_t v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  float64x2_t *v46;
  float64x2_t *v47;
  uint64_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  uint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  uint64_t v61;
  double *v62;
  double v63;

  if (!(((*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 2)
       + ((*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 2)))
    return 0.0;
  v2 = (_QWORD *)(a1 + 1824);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1272) + 32))(a1 + 1272);
  sub_20F3DA1D4(v3, a1 + 2320, v2, (uint64_t *)(a1 + 1280));
  sub_20F3DA0B8((_QWORD *)(a1 + 1344), (void **)(a1 + 2224));
  sub_20F20B6B0(a1 + 2224);
  v4 = *(unsigned int *)(a1 + 2336);
  if (!(_DWORD)v4)
    return -0.0;
  v5 = *(double **)(a1 + 2320);
  v6 = *(double **)(a1 + 1304);
  v7 = *v5;
  v8 = *v5 * *v6;
  if ((_DWORD)v4 != 1)
  {
    v9 = v5 + 1;
    v10 = (v4 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    if (v10 < 3)
    {
      v11 = *(double **)(a1 + 1304);
LABEL_12:
      v20 = v11 + 1;
      do
      {
        v21 = *v9++;
        v22 = v21;
        v23 = *v20++;
        v8 = v8 + v22 * v23;
      }
      while (v9 != &v5[v4]);
      goto LABEL_14;
    }
    v13 = v10 + 1;
    v14 = (v10 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v9 += v14;
    v11 = &v6[v14];
    v15 = (float64x2_t *)(v6 + 3);
    v16 = (float64x2_t *)(v5 + 3);
    v17 = v14;
    do
    {
      v18 = vmulq_f64(v16[-1], v15[-1]);
      v19 = vmulq_f64(*v16, *v15);
      v8 = v8 + v18.f64[0] + v18.f64[1] + v19.f64[0] + v19.f64[1];
      v15 += 2;
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    if (v13 != v14)
      goto LABEL_12;
  }
LABEL_14:
  result = -v8;
  v24 = *(unsigned int *)(a1 + 2240);
  if (!(_DWORD)v24)
  {
    if (v4 >= 4)
    {
      v27 = v4 & 0xFFFFFFFC;
      v56 = (float64x2_t *)(v5 + 2);
      __asm { FMOV            V1.2D, #0.5 }
      v58 = v27;
      do
      {
        v59 = vmulq_f64(vmulq_f64(v56[-1], _Q1), (float64x2_t)0);
        v60 = vmulq_f64(vmulq_f64(*v56, _Q1), (float64x2_t)0);
        result = result + v59.f64[0] + v59.f64[1] + v60.f64[0] + v60.f64[1];
        v56 += 2;
        v58 -= 4;
      }
      while (v58);
      if (v27 == v4)
        return result;
    }
    else
    {
      v27 = 0;
    }
    v61 = v4 - v27;
    v62 = &v5[v27];
    do
    {
      v63 = *v62++;
      result = result + v63 * 0.5 * 0.0;
      --v61;
    }
    while (v61);
    return result;
  }
  v25 = *(float64x2_t **)(a1 + 2224);
  if ((_DWORD)v24 != 1)
  {
    v28 = 0;
    v29 = 0;
    v30 = (v24 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    v31 = (v30 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v32 = &v25->f64[(v24 * v29)];
      v34 = *v32;
      v33 = v32 + 1;
      v35 = v7 * v34;
      if (v30 >= 3)
      {
        v33 += v31;
        v37 = (v30 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v38 = (float64x2_t *)(v5 + 3);
        v39 = (float64x2_t *)((char *)v25 + 8 * v28 + 24);
        do
        {
          v40 = vmulq_f64(v39[-1], v38[-1]);
          v41 = vmulq_f64(*v39, *v38);
          v35 = v35 + v40.f64[0] + v40.f64[1] + v41.f64[0] + v41.f64[1];
          v38 += 2;
          v39 += 2;
          v37 -= 4;
        }
        while (v37);
        v36 = &v5[v31];
        if (v30 + 1 == v31)
          goto LABEL_21;
      }
      else
      {
        v36 = *(double **)(a1 + 2320);
      }
      v42 = v36 + 1;
      do
      {
        v43 = *v33++;
        v44 = v43;
        v45 = *v42++;
        v35 = v35 + v44 * v45;
      }
      while (v33 != &v25->f64[(v24 * v29) + v24]);
LABEL_21:
      result = result + v5[v29++] * 0.5 * v35;
      v28 += v24;
      if (v29 == v4)
        return result;
    }
  }
  if (v4 < 4)
  {
    for (i = 0; i != v4; ++i)
LABEL_33:
      result = result + v5[i] * 0.5 * (v7 * v25->f64[i]);
    return result;
  }
  i = v4 & 0xFFFFFFFC;
  v46 = (float64x2_t *)(v5 + 2);
  v47 = v25 + 1;
  __asm { FMOV            V2.2D, #0.5 }
  v53 = i;
  do
  {
    v54 = vmulq_f64(vmulq_f64(v46[-1], _Q2), vmulq_n_f64(v47[-1], v7));
    v55 = vmulq_f64(vmulq_f64(*v46, _Q2), vmulq_n_f64(*v47, v7));
    result = result + v54.f64[0] + v54.f64[1] + v55.f64[0] + v55.f64[1];
    v46 += 2;
    v47 += 2;
    v53 -= 4;
  }
  while (v53);
  if (i != v4)
    goto LABEL_33;
  return result;
}

double sub_20F3C565C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double i;
  double v5;
  double *v6;
  long double v7;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t j;
  uint64_t v18;
  uint64_t v19;
  unsigned int v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;

  v2 = a1[6];
  v3 = a1[7];
  for (i = 0.0; v2 != v3; v2 += 16)
  {
    v15 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v15 + 4) & 2) == 0 && *(_BYTE *)(v15 + 20))
    {
      v16 = atomic_load((unsigned __int8 *)&qword_254A541B8);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A541B8))
      {
        qword_254A541B0 = 0x3E50000000000000;
        __cxa_guard_release(&qword_254A541B8);
      }
      v6 = (double *)(v15 + 32);
      v5 = *(double *)(v15 + 40);
      if (fabs(v5) <= *(double *)&qword_254A541B0 && fabs(*v6) <= *(double *)&qword_254A541B0
        || fabs(*(double *)(v15 + 72)) <= *(double *)&qword_254A541B0
        && fabs(*(double *)(v15 + 96)) <= *(double *)&qword_254A541B0)
      {
        v5 = -*(double *)(v15 + 56);
        v6 = (double *)(v15 + 64);
      }
      v7 = atan2(v5, *v6);
      cos(v7 * 0.5);
      _Q2 = *(_OWORD *)(v15 + 104);
      _D3 = *(_QWORD *)(v15 + 112);
      __asm { FMLA            D0, D3, V2.D[1] }
      i = i + _D0 + *(double *)(v15 + 120) * *(double *)(v15 + 120);
    }
  }
  v18 = a1[18];
  for (j = a1[19]; v18 != j; v18 += 16)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if ((*(_BYTE *)(v19 + 4) & 2) == 0 && *(_BYTE *)(v19 + 20))
    {
      v26 = 3;
      v27 = v19 + 32;
      v28 = 0;
      v30 = 0;
      v29 = 0uLL;
      sub_20F053450(&v26, (double *)&v29);
      _V1.D[1] = *((_QWORD *)&v29 + 1);
      _D5 = *((_QWORD *)&v29 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v19 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v19 + 120) * *(double *)(v19 + 120);
    }
  }
  return i;
}

uint64_t sub_20F3C5830(uint64_t a1, _QWORD *a2)
{
  float64x2_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t v8;
  double v14;
  double cosval;
  __double2 v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64_t v25;
  double v26;
  float64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  int8x16_t v38;
  double v39;
  float64x2_t v41;
  float64x2_t v43;
  float64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  float64x2_t v51;
  float64x2_t v53;
  float64x2_t v54;
  unsigned int *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  float64x2_t *v59;
  double v60;
  uint64_t i;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  float64x2_t v67;
  double v71;
  __double2 v72;
  float64x2_t v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  float64x2_t v86;
  double v87;
  float64x2_t v88;
  double v89;
  float64x2_t v90;
  float64x2_t v91;
  uint64_t result;
  uint64_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  double v97;

  kdebug_trace();
  v5 = *(_QWORD **)(a1 + 1120);
  v6 = v5[1];
  v7 = v5[2];
  if (v6 != v7)
  {
    v8 = 0uLL;
    __asm { FMOV            V25.2D, #1.0 }
    v93 = *((_QWORD *)&_Q25 + 1);
    do
    {
      v55 = *(unsigned int **)(v6 + 8);
      v56 = *v55;
      if ((_DWORD)v56 != -1)
      {
        v57 = *((_OWORD *)v55 + 3);
        *(_OWORD *)(v55 + 34) = *((_OWORD *)v55 + 2);
        *((_QWORD *)v55 + 25) = *((_QWORD *)v55 + 12);
        v58 = *((_OWORD *)v55 + 4);
        *(_OWORD *)(v55 + 46) = *((_OWORD *)v55 + 5);
        *(_OWORD *)(v55 + 42) = v58;
        *(_OWORD *)(v55 + 38) = v57;
        *((_OWORD *)v55 + 13) = *(_OWORD *)(v55 + 26);
        *((_QWORD *)v55 + 28) = *((_QWORD *)v55 + 15);
        v59 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 1224) + 4 * v56));
        v18 = *v59;
        v17 = v59[1];
        v60 = vmlad_n_f64(0.0, v18.f64[0], v18.f64[0]);
        if (v60 >= 0.0000002635)
        {
          v14 = sqrt(v60);
          v94 = *v59;
          v96 = v59[1];
          v16 = __sincos_stret(v14);
          cosval = v16.__cosval;
          v18 = v94;
          v17 = v96;
          *((_QWORD *)&_Q25 + 1) = v93;
          v8 = 0uLL;
          v19 = v16.__sinval / v14;
          v20 = 1.0 / v60 * (1.0 - v16.__cosval);
        }
        else
        {
          v20 = 0.5 - v60 * (v60 / -720.0 + 0.0416666667);
          v19 = 1.0 - v60 * (0.166666667 - v60 * (v60 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v60 * v20;
        }
        v21 = v20 * 0.0;
        v22 = v20 * 0.0 * 0.0;
        v23 = cosval + v22;
        v24 = cosval + v18.f64[0] * (v18.f64[0] * v20);
        v25 = v18.f64[0] * v21;
        v26 = v19 * 0.0;
        v27 = v18.f64[0] * v19;
        v28 = v21 * 0.0 - v27;
        v29 = v26 + v18.f64[0] * v21;
        v30 = v22 + v27;
        v31 = v25 - v26;
        v32.f64[0] = *((float64_t *)v55 + 6);
        v33 = *((int64x2_t *)v55 + 2);
        v34 = *(int64x2_t *)(v55 + 14);
        _Q18 = *((float64x2_t *)v55 + 5);
        v36 = (float64x2_t)vzip1q_s64(v33, v34);
        v37 = (float64x2_t)vzip2q_s64(v33, v34);
        v32.f64[1] = *((float64_t *)v55 + 9);
        v38 = vextq_s8((int8x16_t)v37, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q18, 1), 8uLL);
        v39 = *((double *)v55 + 15);
        _Q17 = *(float64x2_t *)(v55 + 26);
        v41 = vmlaq_laneq_f64(vmulq_n_f64(v36, _Q17.f64[0]), v37, _Q17, 1);
        _Q23 = vmulq_f64(_Q18, _Q17);
        _Q17.f64[0] = *((float64_t *)v55 + 14);
        __asm { FMLA            D23, D17, V18.D[1] }
        _Q23.f64[0] = _Q23.f64[0] + *((double *)v55 + 12) * v39;
        _Q17.f64[0] = *((float64_t *)v55 + 10);
        *(_QWORD *)&v37.f64[1] = v38.i64[0];
        v38.i64[0] = *((_QWORD *)v55 + 12);
        v43.f64[1] = *((float64_t *)&_Q25 + 1);
        *(_QWORD *)&v43.f64[0] = *(_OWORD *)&vnegq_f64(_Q23);
        v44 = vmlaq_n_f64(v41, v32, v39);
        v45 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v23), v37, v30), v32, v31), v8, v44);
        v46 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q17.f64[0], v23), (float64x2_t)v38.u64[1], v30), (float64x2_t)v38.u64[0], v31), v8, v43);
        v47 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v28), v37, v23), v32, v29), v8, v44);
        v48 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q17.f64[0], v28), (float64x2_t)v38.u64[1], v23), (float64x2_t)v38.u64[0], v29), v8, v43);
        _Q7 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v29), v37, v31), v32, v24), v8, v44);
        v4 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q17.f64[0], v29), (float64x2_t)v38.u64[1], v31), (float64x2_t)v38.u64[0], v24), v8, v43);
        _Q0 = vsubq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v36, v18, 1), v37, v17.f64[0]), v32, v17, 1), v44);
        *(_QWORD *)&v32.f64[0] = *(_OWORD *)&vaddq_f64(v43, vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&_Q17.f64[0], v18, 1), (float64x2_t)v38.u64[1], v17.f64[0]), (float64x2_t)v38.u64[0], v17, 1));
        v51 = (float64x2_t)vzip1q_s64(v45, v47);
        _Q4 = (float64x2_t)vzip2q_s64(v45, v47);
        v53 = (float64x2_t)vzip1q_s64(v46, v48);
        *((float64x2_t *)v55 + 2) = v51;
        *((_QWORD *)v55 + 6) = *(_QWORD *)&_Q7.f64[0];
        *((_QWORD *)v55 + 9) = *(_QWORD *)&_Q7.f64[1];
        *(float64x2_t *)(v55 + 14) = _Q4;
        *((float64x2_t *)v55 + 5) = v53;
        *((_QWORD *)v55 + 12) = *(_QWORD *)&v4.f64[0];
        v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, _Q0.f64[0]), _Q4, _Q0, 1), v53, v32.f64[0]);
        _Q0.f64[0] = _Q0.f64[1];
        __asm { FMLA            D4, D0, V7.D[1] }
        _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], v32.f64[0], v4.f64[0]);
        *(float64x2_t *)(v55 + 26) = vnegq_f64(v54);
        *((_QWORD *)v55 + 15) = *(_OWORD *)&vnegq_f64(_Q4);
      }
      v6 += 16;
    }
    while (v6 != v7);
  }
  v62 = v5[13];
  for (i = v5[14]; v62 != i; v62 += 16)
  {
    v63 = *(unsigned int **)(v62 + 8);
    v64 = *v63;
    if ((_DWORD)v64 != -1)
    {
      v67 = *((float64x2_t *)v63 + 2);
      *(_OWORD *)(v63 + 50) = *((_OWORD *)v63 + 3);
      v65 = *((_OWORD *)v63 + 5);
      *(_OWORD *)(v63 + 54) = *((_OWORD *)v63 + 4);
      *(_OWORD *)(v63 + 58) = v65;
      *((_QWORD *)v63 + 31) = *((_QWORD *)v63 + 12);
      *(float64x2_t *)(v63 + 46) = v67;
      *((_OWORD *)v63 + 16) = *(_OWORD *)(v63 + 26);
      *((_QWORD *)v63 + 34) = *((_QWORD *)v63 + 15);
      v66 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 1248) + 4 * v64);
      v67.f64[0] = *(float64_t *)(v66 + 16);
      _Q2 = *(float64x2_t *)v66;
      _D3 = *(_QWORD *)(v66 + 8);
      __asm { FMLA            D0, D3, V2.D[1] }
      v71 = sqrt(_D0 + v67.f64[0] * v67.f64[0]);
      v4.f64[0] = 1.0 / v71;
      if (v71 == 0.0)
        v4.f64[0] = 1.0;
      v95 = vmulq_n_f64(_Q2, v4.f64[0]);
      v97 = vmulq_f64(v67, v4).f64[0];
      v72 = __sincos_stret(v71);
      v73 = v95;
      v4.f64[0] = v72.__cosval + (1.0 - v72.__cosval) * vmuld_n_f64(v73.f64[0], v73.f64[0]);
      v74 = (1.0 - v72.__cosval) * vmuld_lane_f64(v73.f64[0], v73, 1);
      v75 = v74 - v72.__sinval * v97;
      v76 = (1.0 - v72.__cosval) * vmuld_n_f64(v95.f64[0], v97);
      v77 = vmuld_lane_f64(v72.__sinval, v95, 1);
      v78 = v77 + v76;
      v79 = v72.__sinval * v97 + v74;
      v80 = v72.__cosval + (1.0 - v72.__cosval) * vmuld_lane_f64(v95.f64[1], v95, 1);
      v81 = (1.0 - v72.__cosval) * vmuld_lane_f64(v97, v95, 1);
      v73.f64[0] = v81 - v72.__sinval * v95.f64[0];
      v82 = v76 - v77;
      v83 = v72.__sinval * v95.f64[0] + v81;
      v84 = v72.__cosval + (1.0 - v72.__cosval) * vmuld_n_f64(v97, v97);
      v85 = *((double *)v63 + 6);
      v86 = *((float64x2_t *)v63 + 2);
      v87 = *((double *)v63 + 9);
      v88 = *(float64x2_t *)(v63 + 14);
      v89 = *((double *)v63 + 12);
      v90 = *((float64x2_t *)v63 + 5);
      *((float64x2_t *)v63 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v86, v4.f64[0]), v88, v79), v90, v82);
      *((double *)v63 + 6) = v85 * v4.f64[0] + v87 * v79 + v89 * v82;
      *(float64x2_t *)(v63 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v86, v75), v88, v80), v90, v83);
      *((double *)v63 + 9) = v85 * v75 + v87 * v80 + v89 * v83;
      *((float64x2_t *)v63 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v86, v78), v88, v73.f64[0]), v90, v84);
      *((double *)v63 + 12) = v85 * v78 + v87 * v73.f64[0] + v89 * v84;
      v91.f64[0] = *((float64_t *)v63 + 15);
      v4.f64[0] = *(float64_t *)(v66 + 40);
      *(float64x2_t *)(v63 + 26) = vaddq_f64(*(float64x2_t *)(v63 + 26), *(float64x2_t *)(v66 + 24));
      *((_QWORD *)v63 + 15) = *(_OWORD *)&vaddq_f64(v91, v4);
      *((_BYTE *)v63 + 128) = 0;
    }
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 514) = *(_BYTE *)(a1 + 513);
  *(_BYTE *)(a1 + 517) = 0;
  *(_WORD *)(a1 + 512) = 0;
  *(_WORD *)(a1 + 515) = 0;
  return result;
}

BOOL sub_20F3C5D58(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[6];
  uint64_t v16;

  v4 = *(_OWORD *)(a1 + 2416);
  v12 = *(_OWORD *)(a1 + 2400);
  v13 = v4;
  v14 = *(_QWORD *)(a1 + 2432);
  WORD4(v13) = WORD4(v4) & 0xFFF1 | 0xC;
  if (*(_DWORD *)(a1 + 2512) != 2)
  {
    sub_20E8BF000(a1 + 2520);
    *(_DWORD *)(a1 + 2512) = 2;
  }
  *(_DWORD *)(a1 + 2520) = -3;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2546) = 0u;
  *(_OWORD *)(a1 + 2562) = 0u;
  *(_DWORD *)(a1 + 2528) = -3;
  *(_DWORD *)(a1 + 2540) = 0;
  *(_QWORD *)(a1 + 2532) = 0;
  *(_WORD *)(a1 + 2544) = 1;
  *(_BYTE *)(a1 + 2592) = 1;
  *(_QWORD *)(a1 + 2600) = 0;
  sub_20E8BF040(SparseFactorizationCholesky, (uint64_t)&v12, (uint64_t)v15);
  v5 = v15[5];
  *(_OWORD *)(a1 + 2584) = v15[4];
  *(_OWORD *)(a1 + 2600) = v5;
  *(_QWORD *)(a1 + 2616) = v16;
  v6 = v15[1];
  *(_OWORD *)(a1 + 2520) = v15[0];
  *(_OWORD *)(a1 + 2536) = v6;
  v7 = v15[3];
  *(_OWORD *)(a1 + 2552) = v15[2];
  *(_OWORD *)(a1 + 2568) = v7;
  v8 = *(_DWORD *)(a1 + 2520);
  switch(v8)
  {
    case -4:
    case -3:
      goto LABEL_6;
    case -2:
    case -1:
      *(_DWORD *)(a1 + 2512) = 1;
      *(_BYTE *)(a1 + 512) = 0;
      return 1;
    case 0:
      goto LABEL_7;
    default:
      if (v8 == -2147483647)
      {
LABEL_6:
        v8 = 2;
LABEL_7:
        *(_DWORD *)(a1 + 2512) = v8;
        *(_BYTE *)(a1 + 512) = v8 == 0;
        if (v8)
          return 1;
      }
      else
      {
        v10 = *(_DWORD *)(a1 + 2512);
        *(_BYTE *)(a1 + 512) = v10 == 0;
        if (v10)
          return 1;
      }
      v11 = *(_DWORD *)(a2 + 16);
      if (v11 != *(_DWORD *)(a1 + 2532) * *(unsigned __int8 *)(a1 + 2544))
        return 0;
      *((_QWORD *)&v15[0] + 1) = *(_QWORD *)a2;
      *(_QWORD *)&v15[0] = v11;
      sub_20E8BF7C8(a1 + 2520, (uint64_t)v15, 0);
      return *(_BYTE *)(a1 + 512) == 0;
  }
}

uint64_t sub_20F3C5F28()
{
  return 1;
}

uint64_t sub_20F3C5F30()
{
  return 0;
}

void sub_20F3C5F38(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9FF5C0;
  if (*(_DWORD *)(a1 + 2512) != 2)
    sub_20E8BF000(a1 + 2520);
  sub_20F3C05F0(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F3C5F90(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  double v4;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  float64_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  float64_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;

  v1 = *(unsigned int *)(result + 600);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(result + 680);
    v4 = 0.0;
    do
    {
      v5 = *(unsigned int **)(v3 + 24 * v2);
      v6 = *(unsigned int **)(v3 + 24 * v2 + 8);
      if (v6 != v5)
      {
        while (1)
        {
          v7 = *v5;
          if (v2 <= v7)
            break;
          v5 += 4;
          if (v5 == v6)
            goto LABEL_3;
        }
        if (v5 != v6 && v2 == v7)
        {
          v8 = *(_QWORD *)(result + 608);
          if (v8)
          {
            v9 = (float64_t *)(v8 + 8 * *((_QWORD *)v5 + 1));
            v10.f64[0] = *v9;
            v11.f64[0] = v9[10];
            v10.f64[1] = v9[5];
            v11.f64[1] = v9[15];
            v12 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v10), vabsq_f64(v11)));
            if (v4 < v12)
              v4 = v12;
          }
        }
      }
LABEL_3:
      ++v2;
    }
    while (v2 != v1);
  }
  else
  {
    v4 = 0.0;
  }
  v13 = *(unsigned int *)(result + 936);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = *(_QWORD *)(result + 1016);
    do
    {
      v16 = *(unsigned int **)(v15 + 24 * v14);
      v17 = *(unsigned int **)(v15 + 24 * v14 + 8);
      if (v17 != v16)
      {
        while (1)
        {
          v18 = *v16;
          if (v14 <= v18)
            break;
          v16 += 4;
          if (v16 == v17)
            goto LABEL_17;
        }
        if (v16 != v17 && v14 == v18)
        {
          v19 = *(_QWORD *)(result + 944);
          if (v19)
          {
            v20 = (float64_t *)(v19 + 8 * *((_QWORD *)v16 + 1));
            v21.f64[0] = *v20;
            v22.f64[0] = v20[14];
            v23.f64[0] = v20[28];
            v21.f64[1] = v20[7];
            v23.f64[1] = v20[35];
            v22.f64[1] = v20[21];
            v24 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v21), vabsq_f64(v23)), vabsq_f64(v22)));
            if (v4 < v24)
              v4 = v24;
          }
        }
      }
LABEL_17:
      ++v14;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t sub_20F3C60F8(uint64_t result, double a2)
{
  *(double *)(result + 536) = a2;
  return result;
}

uint64_t sub_20F3C6100(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1872) = a2;
  return result;
}

uint64_t sub_20F3C6108(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1872);
}

BOOL sub_20F3C6110(_QWORD *a1)
{
  return ((a1[232] - a1[231]) >> 2) + ((a1[229] - a1[228]) >> 2) != 0;
}

uint64_t sub_20F3C613C(uint64_t a1)
{
  return a1 + 1304;
}

uint64_t sub_20F3C6144(uint64_t a1)
{
  return a1 + 1304;
}

__n128 sub_20F3C614C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v4 = *(unsigned int *)(a1 + 568);
  if (*(_DWORD *)(a2 + 16) != (_DWORD)v4)
  {
    *(_DWORD *)(a2 + 16) = v4;
    if (*(_QWORD *)(a2 + 8) < v4)
    {
      if (*(_QWORD *)a2)
        MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
      v5 = (8 * v4 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v5 >> 3;
      *(_QWORD *)a2 = operator new(v5, (std::align_val_t)0x20uLL);
    }
  }
  v7 = *(unsigned int *)(a1 + 576);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 584);
    v10 = 4 * v7;
    do
    {
      v11 = *(_QWORD *)(a1 + 552) + 8 * (v9 + v8);
      v12 = (_OWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 1224) + v8));
      result = *(__n128 *)v11;
      v13 = *(_OWORD *)(v11 + 16);
      *v12 = *(_OWORD *)v11;
      v12[1] = v13;
      v8 += 4;
    }
    while (v10 != v8);
  }
  v14 = *(unsigned int *)(a1 + 580);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = *(_DWORD *)(a1 + 588);
    v17 = 4 * v14;
    do
    {
      v18 = *(_QWORD *)(a1 + 552) + 8 * v16;
      v19 = *(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 1248) + v15);
      result = *(__n128 *)(v18 + 32);
      v20 = *(_OWORD *)v18;
      *(_OWORD *)(v19 + 16) = *(_OWORD *)(v18 + 16);
      *(__n128 *)(v19 + 32) = result;
      *(_OWORD *)v19 = v20;
      v15 += 4;
      v16 += 6;
    }
    while (v17 != v15);
  }
  return result;
}

uint64_t sub_20F3C6260(uint64_t a1, void **a2)
{
  unint64_t v4;
  unsigned int v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v4 = (6 * *(_DWORD *)(*(_QWORD *)(a1 + 1056) + 8) + 4 * *(_DWORD *)(*(_QWORD *)(a1 + 1040) + 8));
  v5 = v4;
  *((_DWORD *)a2 + 4) = v4;
  if ((unint64_t)a2[1] < v4)
  {
    if (*a2)
    {
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
      v5 = *((_DWORD *)a2 + 4);
    }
    v6 = (8 * v4 + 31) & 0xFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v6 >> 3);
    *a2 = operator new(v6, (std::align_val_t)0x20uLL);
  }
  if (v5)
    bzero(*a2, 8 * v5);
  if (*(_QWORD *)(a1 + 1224) != *(_QWORD *)(a1 + 1232))
  {
    v7 = *(unsigned int *)(a1 + 604);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = *(uint64_t **)(a1 + 680);
      v10 = *v9;
      v11 = v9[1];
      if (v10 != v11)
        goto LABEL_14;
LABEL_12:
      while (++v8 < v7)
      {
        v12 = (uint64_t *)(*(_QWORD *)(a1 + 680) + 24 * v8);
        v10 = *v12;
        v11 = v12[1];
        if (v10 != v11)
        {
LABEL_14:
          while (v8 != *(_DWORD *)v10)
          {
            v10 += 16;
            if (v10 == v11)
              goto LABEL_12;
          }
          v13 = *(_QWORD *)(a1 + 1224);
          if (v8 >= (*(_QWORD *)(a1 + 1232) - v13) >> 2)
            sub_20EDB40C4();
          v14 = *(unsigned int *)(v13 + 4 * v8);
          v15 = (_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * *(_QWORD *)(v10 + 8));
          v16 = (uint64_t)*a2 + 8 * v14;
          *(_QWORD *)&v17 = *v15;
          if (v15 == *a2)
          {
            *(_QWORD *)&v18 = v15[10];
            *((_QWORD *)&v17 + 1) = v15[5];
            *((_QWORD *)&v18 + 1) = v15[15];
            *(_OWORD *)v16 = v17;
            *(_OWORD *)(v16 + 16) = v18;
            v7 = *(unsigned int *)(a1 + 604);
          }
          else
          {
            *(_QWORD *)v16 = v17;
            *(_QWORD *)(v16 + 8) = v15[5];
            *(_QWORD *)(v16 + 16) = v15[10];
            *(_QWORD *)(v16 + 24) = v15[15];
          }
        }
      }
    }
  }
  return sub_20F3DF1D8(a1 + 928, a2, (_QWORD *)(a1 + 1248));
}

BOOL sub_20F3C6404(uint64_t a1)
{
  int v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t i;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD *v16;

  *(_QWORD *)(a1 + 2504) = 0;
  *(_QWORD *)(a1 + 2496) = 0;
  v1 = *(_DWORD *)(a1 + 2512);
  if (!v1)
  {
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 1128) + 520;
    *(_QWORD *)(a1 + 2504) = a1 + 1176;
    v3 = *(_DWORD *)(a1 + 2536) * *(unsigned __int8 *)(a1 + 2544);
    *(_DWORD *)(a1 + 2488) = v3;
    *(_DWORD *)(a1 + 2492) = v3;
    v4 = v3 * (unint64_t)v3;
    if (*(_QWORD *)(a1 + 2480) < v4)
    {
      v5 = *(_QWORD *)(a1 + 2472);
      if (v5)
        MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 2472) = 0;
      v6 = (8 * v4 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(a1 + 2480) = v6 >> 3;
      *(_QWORD *)(a1 + 2472) = operator new(v6, (std::align_val_t)0x20uLL);
    }
    v7 = operator new((8 * v3 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v8 = v7;
    if ((_DWORD)v3)
    {
      bzero(v7, 8 * v3);
      for (i = 0; i != v3; ++i)
      {
        v8[i] = 0x3FF0000000000000;
        v10 = *(_DWORD *)(a1 + 2488);
        v11 = *(_QWORD *)(a1 + 2472);
        v12 = *(_DWORD *)(a1 + 2512);
        if (v8 == (_QWORD *)(v11 + 8 * v10 * i))
        {
          if (!v12 && v10 == *(_DWORD *)(a1 + 2532) * *(unsigned __int8 *)(a1 + 2544))
          {
            v16 = v8;
            v15 = v10;
            sub_20E8BF7C8(a1 + 2520, (uint64_t)&v15, 0);
          }
        }
        else if (!v12 && (_DWORD)v3 == *(_DWORD *)(a1 + 2532) * *(unsigned __int8 *)(a1 + 2544))
        {
          v16 = v8;
          v15 = v3;
          v14[1] = v11 + 8 * v10 * i;
          v14[0] = v10;
          if (v11)
            sub_20E8BF20C(a1 + 2520, (uint64_t)v14, (uint64_t)&v15, 0);
        }
        v8[i] = 0;
      }
    }
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  }
  return v1 == 0;
}

void sub_20F3C65C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F3C65EC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  *a1 = &unk_24C9FF7B0;
  sub_20F3C6804(a1 + 159);
  v2 = (void *)a1[156];
  if (v2)
  {
    a1[157] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[153];
  if (v3)
  {
    a1[154] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[150];
  if (v4)
  {
    a1[151] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[147];
  if (v5)
  {
    a1[148] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[142];
  if (v6)
  {
    a1[143] = v6;
    operator delete(v6);
  }
  *a1 = &unk_24C9FFA98;
  v7 = (void *)a1[137];
  if (v7)
  {
    a1[138] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[134];
  if (v8)
  {
    a1[135] = v8;
    operator delete(v8);
  }
  sub_20F3C6A50(a1 + 74);
  v9 = a1[69];
  if (v9)
    MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
  *a1 = &unk_24C9FFB50;
  sub_20F3C7EC8(a1 + 5);
  return a1;
}

void sub_20F3C66D4(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "SparseHessian");
}

_QWORD *sub_20F3C6708(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

_QWORD *sub_20F3C6778(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *a1 = &unk_24C9FFA98;
  v2 = (void *)a1[137];
  if (v2)
  {
    a1[138] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[134];
  if (v3)
  {
    a1[135] = v3;
    operator delete(v3);
  }
  sub_20F3C6A50(a1 + 74);
  v4 = a1[69];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  *a1 = &unk_24C9FFB50;
  sub_20F3C7EC8(a1 + 5);
  return a1;
}

_QWORD *sub_20F3C6804(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  *a1 = off_24C9FF868;
  v2 = (void *)a1[137];
  if (v2)
  {
    a1[138] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[134];
  if (v3)
  {
    a1[135] = v3;
    operator delete(v3);
  }
  v4 = a1[131];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[128];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = a1[125];
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = a1[122];
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  v8 = a1[119];
  if (v8)
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  v9 = a1[116];
  if (v9)
    MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
  v10 = (void *)a1[113];
  if (v10)
  {
    a1[114] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[110];
  if (v11)
  {
    a1[111] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[107];
  if (v12)
  {
    a1[108] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[104];
  if (v13)
  {
    a1[105] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[101];
  if (v14)
  {
    a1[102] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[98];
  if (v15)
  {
    a1[99] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[95];
  if (v16)
  {
    a1[96] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[92];
  if (v17)
  {
    a1[93] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[89];
  if (v18)
  {
    a1[90] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[86];
  if (v19)
  {
    a1[87] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[83];
  if (v20)
  {
    a1[84] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[80];
  if (v21)
  {
    a1[81] = v21;
    operator delete(v21);
  }
  v22 = (_QWORD *)a1[79];
  if (v22 == a1 + 76)
  {
    v23 = 4;
    v22 = a1 + 76;
  }
  else
  {
    if (!v22)
      goto LABEL_46;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_46:
  v24 = (void *)a1[72];
  if (v24)
  {
    a1[73] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[69];
  if (v25)
  {
    a1[70] = v25;
    operator delete(v25);
  }
  sub_20F3C6A50(a1 + 9);
  v26 = a1[4];
  if (v26)
    MEMORY[0x212BC6368](v26, 0x1000C8000313F17);
  v27 = a1[1];
  if (v27)
    MEMORY[0x212BC6368](v27, 0x1000C8000313F17);
  return a1;
}

_QWORD *sub_20F3C6A50(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;

  a1[42] = off_24C9FCCA8;
  v2 = a1[53];
  if (v2)
  {
    v3 = a1[54];
    v4 = (void *)a1[53];
    if (v3 != v2)
    {
      v5 = a1[54];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[53];
    }
    a1[54] = v2;
    operator delete(v4);
  }
  a1[42] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 47));
  v8 = (void *)a1[44];
  if (v8)
  {
    a1[45] = v8;
    operator delete(v8);
  }
  a1[28] = off_24C9FCCA8;
  v9 = a1[39];
  if (v9)
  {
    v10 = a1[40];
    v11 = (void *)a1[39];
    if (v10 != v9)
    {
      v12 = a1[40];
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)a1[39];
    }
    a1[40] = v9;
    operator delete(v11);
  }
  a1[28] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 33));
  v15 = (void *)a1[30];
  if (v15)
  {
    a1[31] = v15;
    operator delete(v15);
  }
  a1[14] = off_24C9FCCA8;
  v16 = a1[25];
  if (v16)
  {
    v17 = a1[26];
    v18 = (void *)a1[25];
    if (v17 != v16)
    {
      v19 = a1[26];
      do
      {
        v21 = *(void **)(v19 - 24);
        v19 -= 24;
        v20 = v21;
        if (v21)
        {
          *(_QWORD *)(v17 - 16) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != v16);
      v18 = (void *)a1[25];
    }
    a1[26] = v16;
    operator delete(v18);
  }
  a1[14] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 19));
  v22 = (void *)a1[16];
  if (v22)
  {
    a1[17] = v22;
    operator delete(v22);
  }
  *a1 = off_24C9FCCA8;
  v23 = a1[11];
  if (v23)
  {
    v24 = a1[12];
    v25 = (void *)a1[11];
    if (v24 != v23)
    {
      v26 = a1[12];
      do
      {
        v28 = *(void **)(v26 - 24);
        v26 -= 24;
        v27 = v28;
        if (v28)
        {
          *(_QWORD *)(v24 - 16) = v27;
          operator delete(v27);
        }
        v24 = v26;
      }
      while (v26 != v23);
      v25 = (void *)a1[11];
    }
    a1[12] = v23;
    operator delete(v25);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v29 = (void *)a1[2];
  if (v29)
  {
    a1[3] = v29;
    operator delete(v29);
  }
  return a1;
}

_QWORD *sub_20F3C6C40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

_QWORD *sub_20F3C6CE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F3C6D88(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F3C6E3C(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (36 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F3C6F64(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x24uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F3C6F94()
{
  return 6;
}

uint64_t sub_20F3C6F9C()
{
  return 6;
}

uint64_t sub_20F3C6FA4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int v30;
  uint64_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v38 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          if (v38 == *(int8x16_t **)a2)
          {
            v17 = v38[16];
            v16 = v38[17];
            v15 = v38[14];
            v14 = v38[15];
            v13 = v38[12];
            v12 = v38[13];
            v11 = v38[10];
            v10 = v38[11];
            v23 = v38[8];
            v22 = v38[9];
            v41 = vextq_s8(v17, v17, 8uLL).u64[0];
            v42 = vextq_s8(v16, v16, 8uLL).u64[0];
            v18 = vextq_s8(v15, v15, 8uLL).u64[0];
            v19 = vextq_s8(v12, v12, 8uLL).u64[0];
            v20 = vextq_s8(v13, v13, 8uLL).u64[0];
            v39 = vextq_s8(v10, v10, 8uLL).u64[0];
            v40 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = vextq_s8(v11, v11, 8uLL).u64[0];
            v9 = v38[6];
            v8 = v38[7];
          }
          else
          {
            v9 = v38[6];
            v8 = v38[7];
            v11 = v38[10];
            v10 = v38[11];
            v13 = v38[12];
            v12 = v38[13];
            v15 = v38[14];
            v14 = v38[15];
            v17 = v38[16];
            v16 = v38[17];
            v41 = vextq_s8(v17, v17, 8uLL).u64[0];
            v42 = vextq_s8(v16, v16, 8uLL).u64[0];
            v18 = vextq_s8(v15, v15, 8uLL).u64[0];
            v19 = vextq_s8(v12, v12, 8uLL).u64[0];
            v20 = vextq_s8(v13, v13, 8uLL).u64[0];
            v39 = vextq_s8(v10, v10, 8uLL).u64[0];
            v40 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = vextq_s8(v11, v11, 8uLL).u64[0];
            v23 = v38[8];
            v22 = v38[9];
          }
          v25 = v38[4];
          v24 = v38[5];
          v27 = v38[2];
          v26 = v38[3];
          v29 = *v38;
          v28 = v38[1];
          v15.i64[1] = v18;
          v12.i64[1] = v19;
          v13.i64[1] = v20;
          v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
          v30 = *v6;
          v6 += 4;
          v31 = *(unsigned int *)(a2 + 16);
          v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
          v29.i64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
          v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
          v25.i64[1] = vextq_s8(v25, v25, 8uLL).u64[0];
          v26.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
          v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v10.i64[1] = v39;
          v11.i64[1] = v21;
          v22.i64[1] = vextq_s8(v22, v22, 8uLL).u64[0];
          v16.i64[1] = v42;
          v32 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (a3 + 6 * v30 + v31 * (HIDWORD(a3) + 6 * i)));
          v17.i64[1] = v41;
          v14.i64[1] = v40;
          *v32 = v29;
          v32[1] = v28;
          v32[2] = v27;
          v33 = (int8x16_t *)((char *)v32 + 8 * v31);
          *v33 = v26;
          v33[1] = v25;
          v33[2] = v24;
          v34 = &v32[v31];
          *v34 = v9;
          v34[1] = v8;
          v34[2] = v23;
          v35 = (int8x16_t *)((char *)v32 + 24 * v31);
          *v35 = v22;
          v35[1] = v11;
          v35[2] = v10;
          v36 = &v32[2 * v31];
          *v36 = v13;
          v36[1] = v12;
          v36[2] = v15;
          v37 = (int8x16_t *)((char *)v32 + 40 * v31);
          *v37 = v14;
          v37[1] = v17;
          v37[2] = v16;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_20F3C71A4(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *v11;
  __int128 v12;
  __int128 v13;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(uint64_t **)(result + 88);
    v6 = *v5;
    v7 = v5[1];
    if (v6 != v7)
      goto LABEL_8;
LABEL_6:
    while (++v4 < v3)
    {
      v11 = (uint64_t *)(*(_QWORD *)(result + 88) + 24 * v4);
      v6 = *v11;
      v7 = v11[1];
      if (v6 != v7)
      {
LABEL_8:
        while (v4 != *(_DWORD *)v6)
        {
          v6 += 16;
          if (v6 == v7)
            goto LABEL_6;
        }
        v8 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v6 + 8));
        v9 = *a2 + 8 * (a3 + 6 * v4);
        *(_QWORD *)&v10 = *v8;
        if (v8 == (_QWORD *)*a2)
        {
          *(_QWORD *)&v12 = v8[14];
          *(_QWORD *)&v13 = v8[28];
          *((_QWORD *)&v10 + 1) = v8[7];
          *((_QWORD *)&v12 + 1) = v8[21];
          *((_QWORD *)&v13 + 1) = v8[35];
          *(_OWORD *)(v9 + 16) = v12;
          *(_OWORD *)(v9 + 32) = v13;
          *(_OWORD *)v9 = v10;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          *(_QWORD *)v9 = v10;
          *(_QWORD *)(v9 + 8) = v8[7];
          *(_QWORD *)(v9 + 16) = v8[14];
          *(_QWORD *)(v9 + 24) = v8[21];
          *(_QWORD *)(v9 + 32) = v8[28];
          *(_QWORD *)(v9 + 40) = v8[35];
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F3C7290(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F3C7334(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F3C73E8(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (24 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F3C7510(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x18uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F3C7538()
{
  return 4;
}

uint64_t sub_20F3C7540()
{
  return 6;
}

uint64_t sub_20F3C7548(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int v20;
  uint64_t v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v28 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          if (v28 == *(int8x16_t **)a2)
          {
            v17 = v28[10];
            v16 = v28[11];
            v15 = v28[8];
            v14 = v28[9];
            v13 = v28[6];
            v12 = v28[7];
            v11 = v28[4];
            v10 = v28[5];
            v9 = v28[2];
            v8 = v28[3];
          }
          else
          {
            v9 = v28[2];
            v8 = v28[3];
            v11 = v28[4];
            v10 = v28[5];
            v13 = v28[6];
            v12 = v28[7];
            v15 = v28[8];
            v14 = v28[9];
            v17 = v28[10];
            v16 = v28[11];
          }
          v19 = *v28;
          v18 = v28[1];
          v20 = *v6;
          v6 += 4;
          v21 = *(unsigned int *)(a2 + 16);
          v16.i64[1] = vextq_s8(v16, v16, 8uLL).u64[0];
          v17.i64[1] = vextq_s8(v17, v17, 8uLL).u64[0];
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
          v12.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v10.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
          v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v22 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (a3 + 4 * v20 + v21 * (HIDWORD(a3) + 6 * i)));
          v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
          v19.i64[1] = vextq_s8(v19, v19, 8uLL).u64[0];
          *v22 = v19;
          v22[1] = v18;
          v23 = (int8x16_t *)((char *)v22 + 8 * v21);
          *v23 = v9;
          v23[1] = v8;
          v24 = &v22[v21];
          *v24 = v11;
          v24[1] = v10;
          v25 = (int8x16_t *)((char *)v22 + 24 * v21);
          *v25 = v13;
          v25[1] = v12;
          v26 = &v22[2 * v21];
          *v26 = v15;
          v26[1] = v14;
          v27 = (int8x16_t *)((char *)v22 + 40 * v21);
          *v27 = v17;
          v27[1] = v16;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F3C768C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F3C7730(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F3C77E4(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (24 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F3C790C(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x18uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F3C7934()
{
  return 6;
}

uint64_t sub_20F3C793C()
{
  return 4;
}

uint64_t sub_20F3C7944(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int v20;
  uint64_t v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v26 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          if (v26 == *(int8x16_t **)a2)
          {
            v17 = v26[10];
            v16 = v26[11];
            v15 = v26[8];
            v14 = v26[9];
            v13 = v26[6];
            v12 = v26[7];
            v11 = v26[4];
            v10 = v26[5];
            v9 = v26[2];
            v8 = v26[3];
          }
          else
          {
            v9 = v26[2];
            v8 = v26[3];
            v11 = v26[4];
            v10 = v26[5];
            v13 = v26[6];
            v12 = v26[7];
            v15 = v26[8];
            v14 = v26[9];
            v17 = v26[10];
            v16 = v26[11];
          }
          v19 = *v26;
          v18 = v26[1];
          v20 = *v6;
          v6 += 4;
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v21 = *(unsigned int *)(a2 + 16);
          v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
          v19.i64[1] = vextq_s8(v19, v19, 8uLL).u64[0];
          v10.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
          v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
          v12.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v16.i64[1] = vextq_s8(v16, v16, 8uLL).u64[0];
          v17.i64[1] = vextq_s8(v17, v17, 8uLL).u64[0];
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          v22 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (a3 + 6 * v20 + v21 * (HIDWORD(a3) + 4 * i)));
          *v22 = v19;
          v22[1] = v18;
          v22[2] = v9;
          v23 = (int8x16_t *)((char *)v22 + 8 * v21);
          *v23 = v8;
          v23[1] = v11;
          v23[2] = v10;
          v24 = &v22[v21];
          *v24 = v13;
          v24[1] = v12;
          v24[2] = v15;
          v25 = (int8x16_t *)((char *)v22 + 24 * v21);
          *v25 = v14;
          v25[1] = v17;
          v25[2] = v16;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F3C7A84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F3C7B28(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F3C7BDC(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (16 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F3C7D00(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 7) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F3C7D18()
{
  return 4;
}

uint64_t sub_20F3C7D20()
{
  return 4;
}

uint64_t sub_20F3C7D28(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 *v22;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v22 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          if (v22 == *(__int128 **)a2)
          {
            v15 = v22[6];
            v14 = v22[7];
            v13 = v22[4];
            v12 = v22[5];
            v11 = v22[2];
            v10 = v22[3];
            v9 = *v22;
            v8 = v22[1];
          }
          else
          {
            v9 = *v22;
            v8 = v22[1];
            v11 = v22[2];
            v10 = v22[3];
            v13 = v22[4];
            v12 = v22[5];
            v15 = v22[6];
            v14 = v22[7];
          }
          v16 = *v6;
          v6 += 4;
          v17 = *(unsigned int *)(a2 + 16);
          v18 = (_OWORD *)(*(_QWORD *)a2 + 8 * (a3 + 4 * v16 + v17 * (HIDWORD(a3) + 4 * i)));
          *v18 = v9;
          v18[1] = v8;
          v19 = (_OWORD *)((char *)v18 + 8 * v17);
          *v19 = v11;
          v19[1] = v10;
          v20 = &v18[v17];
          *v20 = v13;
          v20[1] = v12;
          v21 = (_OWORD *)((char *)v18 + 24 * v17);
          *v21 = v15;
          v21[1] = v14;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_20F3C7DE4(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *v11;
  __int128 v12;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(uint64_t **)(result + 88);
    v6 = *v5;
    v7 = v5[1];
    if (v6 != v7)
      goto LABEL_8;
LABEL_6:
    while (++v4 < v3)
    {
      v11 = (uint64_t *)(*(_QWORD *)(result + 88) + 24 * v4);
      v6 = *v11;
      v7 = v11[1];
      if (v6 != v7)
      {
LABEL_8:
        while (v4 != *(_DWORD *)v6)
        {
          v6 += 16;
          if (v6 == v7)
            goto LABEL_6;
        }
        v8 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v6 + 8));
        v9 = *a2 + 8 * (a3 + 4 * v4);
        *(_QWORD *)&v10 = *v8;
        if (v8 == (_QWORD *)*a2)
        {
          *(_QWORD *)&v12 = v8[10];
          *((_QWORD *)&v10 + 1) = v8[5];
          *((_QWORD *)&v12 + 1) = v8[15];
          *(_OWORD *)v9 = v10;
          *(_OWORD *)(v9 + 16) = v12;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          *(_QWORD *)v9 = v10;
          *(_QWORD *)(v9 + 8) = v8[5];
          *(_QWORD *)(v9 + 16) = v8[10];
          *(_QWORD *)(v9 + 24) = v8[15];
        }
      }
    }
  }
  return result;
}

double sub_20F3C7EAC()
{
  return 0.0;
}

_QWORD *sub_20F3C7EC8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  void *v23;

  *a1 = &off_24C9FFBC0;
  v2 = (void *)a1[56];
  if (v2)
  {
    a1[57] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[53];
  if (v3)
  {
    a1[54] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[50];
  if (v4)
  {
    a1[51] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[47];
  if (v5)
  {
    a1[48] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[44];
  if (v6)
  {
    a1[45] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[41];
  if (v7)
  {
    a1[42] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[38];
  if (v8)
  {
    a1[39] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[35];
  if (v9)
  {
    a1[36] = v9;
    operator delete(v9);
  }
  v10 = a1[28];
  if (v10)
  {
    v11 = a1[29];
    v12 = (void *)a1[28];
    if (v11 != v10)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 16);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 888;
      }
      while (v11 != v10);
      v12 = (void *)a1[28];
    }
    a1[29] = v10;
    operator delete(v12);
  }
  v16 = a1[25];
  if (v16)
  {
    v17 = a1[26];
    v18 = (void *)a1[25];
    if (v17 != v16)
    {
      do
      {
        v19 = *(std::__shared_weak_count **)(v17 - 16);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v17 -= 888;
      }
      while (v17 != v16);
      v18 = (void *)a1[25];
    }
    a1[26] = v16;
    operator delete(v18);
  }
  sub_20F3C8180((uint64_t)(a1 + 16));
  v22 = (void *)a1[13];
  if (v22)
  {
    a1[14] = v22;
    operator delete(v22);
  }
  sub_20F3C8EB4((uint64_t)(a1 + 4));
  v23 = (void *)a1[1];
  if (v23)
  {
    a1[2] = v23;
    operator delete(v23);
  }
  return a1;
}

void sub_20F3C808C(_QWORD *a1)
{
  sub_20F3C7EC8(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F3C80B0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 872);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F3C8118(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 864);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F3C8180(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v11 = a1;
  v16 = a1;
  v17 = &v11;
  v2 = *(char **)(a1 + 48);
  v3 = *(char **)(a1 + 56);
  if (v2 != v3 && (unint64_t)(v3 - v2) >= 0xF0)
  {
    sub_20F3C8408((uint64_t)v2, v3, (uint64_t)v13, 126 - 2 * __clz((v3 - v2) >> 3), 1);
    v4 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    v13[0] = v15;
    v13[1] = v4;
    v13[2] = &v17;
    v14 = v4;
    v12[0] = a1;
    v12[1] = (uint64_t)&v15;
    v12[2] = (uint64_t)&v14;
    sub_20F3C8298(&v16, (uint64_t)v13, v12);
    v2 = *(char **)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
    operator delete(v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      v8 = *(_QWORD **)(a1 + 16);
      do
      {
        v9 = *(v8 - 2);
        v8 -= 2;
        *v8 = 0;
        if (v9)
          ((void (*)(void))*(v6 - 1))();
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_20F3C8298(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  v3 = *result;
  v4 = *(unsigned int *)(*result + 32);
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 1)
    {
      v23 = 8;
      for (i = 1; i != v4; ++i)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * i - 16);
        v26 = *a3;
        v27 = *(_QWORD **)(*a3 + 48);
        v28 = *(_QWORD *)(*a3 + 56) - (_QWORD)v27;
        if (v28)
        {
          v29 = v28 >> 3;
          do
          {
            v30 = v29 >> 1;
            v31 = &v27[v29 >> 1];
            v32 = *v31;
            result = v31 + 1;
            v29 += ~(v29 >> 1);
            if (v32 < v25)
              v27 = result;
            else
              v29 = v30;
          }
          while (v29);
        }
        *(_QWORD *)a3[1] = v27;
        v33 = *(_QWORD **)a3[1];
        v34 = *(_QWORD *)(v26 + 56) - (_QWORD)v33;
        if (v34)
        {
          v35 = v25 + 280 * v23;
          v36 = v34 >> 3;
          do
          {
            v37 = v36 >> 1;
            v38 = &v33[v36 >> 1];
            v40 = (_QWORD *)*v38;
            v39 = v38 + 1;
            result = v40;
            v36 += ~(v36 >> 1);
            if (v35 < (unint64_t)v40)
              v36 = v37;
            else
              v33 = v39;
          }
          while (v36);
        }
        *(_QWORD *)a3[2] = v33;
        v23 *= 2;
      }
    }
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * (v4 - 1));
    v6 = *a3;
    v7 = *(_QWORD **)(*a3 + 48);
    v8 = *(_QWORD *)(*a3 + 56) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      do
      {
        v10 = v9 >> 1;
        v11 = &v7[v9 >> 1];
        v13 = *v11;
        v12 = v11 + 1;
        v9 += ~(v9 >> 1);
        if (v13 < v5)
          v7 = v12;
        else
          v9 = v10;
      }
      while (v9);
    }
    v14 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)a3[1] = v7;
    v15 = *(_QWORD **)a3[1];
    v16 = *(_QWORD *)(v6 + 56) - (_QWORD)v15;
    if (v16)
    {
      v17 = v5 + 280 * v14;
      v18 = v16 >> 3;
      do
      {
        v19 = v18 >> 1;
        v20 = &v15[v18 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v18 += ~(v18 >> 1);
        if (v17 < v22)
          v18 = v19;
        else
          v15 = v21;
      }
      while (v18);
    }
    *(_QWORD *)a3[2] = v15;
  }
  return result;
}

uint64_t sub_20F3C8408(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F3C8BAC(v10, v57);
          v10 = v57 + 1;
          result = sub_20F3C8BAC(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F3C8408(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F3C8BAC(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t sub_20F3C8EB4(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v11 = a1;
  v16 = a1;
  v17 = &v11;
  v2 = *(char **)(a1 + 48);
  v3 = *(char **)(a1 + 56);
  if (v2 != v3 && (unint64_t)(v3 - v2) >= 0xF0)
  {
    sub_20F3C913C((uint64_t)v2, v3, (uint64_t)v13, 126 - 2 * __clz((v3 - v2) >> 3), 1);
    v4 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    v13[0] = v15;
    v13[1] = v4;
    v13[2] = &v17;
    v14 = v4;
    v12[0] = a1;
    v12[1] = (uint64_t)&v15;
    v12[2] = (uint64_t)&v14;
    sub_20F3C8FCC(&v16, (uint64_t)v13, v12);
    v2 = *(char **)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
    operator delete(v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      v8 = *(_QWORD **)(a1 + 16);
      do
      {
        v9 = *(v8 - 2);
        v8 -= 2;
        *v8 = 0;
        if (v9)
          ((void (*)(void))*(v6 - 1))();
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_20F3C8FCC(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  v3 = *result;
  v4 = *(unsigned int *)(*result + 32);
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 1)
    {
      v23 = 8;
      for (i = 1; i != v4; ++i)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * i - 16);
        v26 = *a3;
        v27 = *(_QWORD **)(*a3 + 48);
        v28 = *(_QWORD *)(*a3 + 56) - (_QWORD)v27;
        if (v28)
        {
          v29 = v28 >> 3;
          do
          {
            v30 = v29 >> 1;
            v31 = &v27[v29 >> 1];
            v32 = *v31;
            result = v31 + 1;
            v29 += ~(v29 >> 1);
            if (v32 < v25)
              v27 = result;
            else
              v29 = v30;
          }
          while (v29);
        }
        *(_QWORD *)a3[1] = v27;
        v33 = *(_QWORD **)a3[1];
        v34 = *(_QWORD *)(v26 + 56) - (_QWORD)v33;
        if (v34)
        {
          v35 = v25 + 232 * v23;
          v36 = v34 >> 3;
          do
          {
            v37 = v36 >> 1;
            v38 = &v33[v36 >> 1];
            v40 = (_QWORD *)*v38;
            v39 = v38 + 1;
            result = v40;
            v36 += ~(v36 >> 1);
            if (v35 < (unint64_t)v40)
              v36 = v37;
            else
              v33 = v39;
          }
          while (v36);
        }
        *(_QWORD *)a3[2] = v33;
        v23 *= 2;
      }
    }
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * (v4 - 1));
    v6 = *a3;
    v7 = *(_QWORD **)(*a3 + 48);
    v8 = *(_QWORD *)(*a3 + 56) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      do
      {
        v10 = v9 >> 1;
        v11 = &v7[v9 >> 1];
        v13 = *v11;
        v12 = v11 + 1;
        v9 += ~(v9 >> 1);
        if (v13 < v5)
          v7 = v12;
        else
          v9 = v10;
      }
      while (v9);
    }
    v14 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)a3[1] = v7;
    v15 = *(_QWORD **)a3[1];
    v16 = *(_QWORD *)(v6 + 56) - (_QWORD)v15;
    if (v16)
    {
      v17 = v5 + 232 * v14;
      v18 = v16 >> 3;
      do
      {
        v19 = v18 >> 1;
        v20 = &v15[v18 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v18 += ~(v18 >> 1);
        if (v17 < v22)
          v18 = v19;
        else
          v15 = v21;
      }
      while (v18);
    }
    *(_QWORD *)a3[2] = v15;
  }
  return result;
}

uint64_t sub_20F3C913C(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F3C98E0(v10, v57);
          v10 = v57 + 1;
          result = sub_20F3C98E0(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F3C913C(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F3C98E0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

BOOL sub_20F3C9BE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  char **v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  size_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  int64x2_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD **v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  char **v75;
  int v76;
  uint64_t v77;
  unsigned int **v78;
  __n128 v79;
  uint64_t v80;
  unsigned int **v81;
  uint64_t v82;
  void **v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int v87;
  unsigned int v88;
  void *v89;
  void **v90;
  unsigned int v91;
  void *v92;
  void **v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t *v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  unint64_t i;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char **v114;
  uint64_t v115;
  int v116;
  char v117;
  unsigned int **v118;
  char v119;
  unsigned int **v120;
  unsigned int *v121;
  uint64_t *v122;
  unsigned int **v123;
  char *v124;
  unsigned int *v125;
  _QWORD *v126;
  size_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  __int128 v148;
  int v149;
  char *v150;
  int v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  char *v161;
  int64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  _OWORD *v167;
  char *v168;
  uint64_t v169;
  __int128 v170;
  int v171;
  uint64_t v172;
  unsigned int **v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  unint64_t v178;
  unsigned int *v179;
  unint64_t v180;
  BOOL v181;
  unint64_t v182;
  char **v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int64_t v187;
  unsigned int *v188;
  unsigned int v189;
  char *v190;
  void *v191;
  uint64_t v192;
  int64x2_t *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  std::__shared_weak_count *v212;
  unint64_t *p_shared_owners;
  unint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  __int128 v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  _QWORD *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  int v280;
  _QWORD *v281;
  char **v282;
  uint64_t v283;
  _QWORD *v284;
  void *v285;
  unint64_t v286;
  char *v287;
  int *v288;
  int *v289;
  uint64_t v290;
  int v291;
  char *v292;
  unint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  _BYTE *v300;
  _DWORD *v301;
  int64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  _OWORD *v307;
  char *v308;
  uint64_t v309;
  __int128 v310;
  int v311;
  void *v312;
  unint64_t v313;
  char *v314;
  int *v315;
  int *v316;
  uint64_t v317;
  int v318;
  char *v319;
  unint64_t v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  _BYTE *v327;
  _DWORD *v328;
  int64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  _OWORD *v334;
  char *v335;
  uint64_t v336;
  __int128 v337;
  int v338;
  unsigned int *v339;
  unsigned int *v340;
  unsigned int *v341;
  uint64_t v342;
  unsigned int *v343;
  unsigned int v344;
  unint64_t v345;
  _DWORD *v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  char *v350;
  char *v351;
  char *v352;
  uint64_t v353;
  unsigned int v354;
  char *v355;
  char *v356;
  unsigned int *v357;
  unsigned int *v358;
  uint64_t v359;
  unsigned int *v360;
  unsigned int v361;
  unint64_t v362;
  _DWORD *v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  char *v367;
  char *v368;
  char *v369;
  uint64_t v370;
  unsigned int v371;
  char *v372;
  char *v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unsigned int *v377;
  unsigned int *v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  unsigned int v382;
  unsigned int v383;
  unsigned int v384;
  unint64_t v385;
  int32x4_t *v386;
  int32x4_t *v387;
  unint64_t v388;
  uint64_t v389;
  int32x4_t *v390;
  uint64_t v391;
  int32x4_t v392;
  int32x4_t *v393;
  int32x4_t v394;
  int32x4_t v395;
  uint64_t v396;
  unint64_t v397;
  _DWORD *v398;
  unint64_t v399;
  _DWORD *v400;
  _DWORD *v401;
  unint64_t v402;
  int32x4_t *v403;
  int32x4_t *v404;
  unint64_t v405;
  unint64_t v406;
  uint64_t v407;
  int32x4_t *v408;
  uint64_t v409;
  int32x4_t v410;
  int32x4_t *v411;
  int32x4_t v412;
  int32x4_t v413;
  uint64_t v414;
  unint64_t v415;
  _DWORD *v416;
  unint64_t v417;
  _DWORD *v418;
  _DWORD *v419;
  uint64_t v421;
  uint64_t v422;
  unsigned int j;
  uint64_t k;
  uint64_t v425;
  uint64_t v426;
  char v427;
  unsigned int v428;
  unsigned int v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unsigned int v433;
  unsigned int v434;
  uint64_t v435;
  _QWORD *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  size_t v470;
  char *v471;
  char *v472;
  uint64_t v473;
  char *v474;
  uint64_t v475;
  uint64_t v476;
  char *v477;
  uint64_t v478;
  char *v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  char *v484;
  char *v485;
  char *v486;
  uint64_t v487;
  unint64_t v488;
  unint64_t v489;
  uint64_t v490;
  char *v491;
  char *v492;
  uint64_t v493;
  __int128 v494;
  _DWORD *v495;
  uint64_t v496;
  _DWORD *v497;
  int v498;
  int v499;
  uint64_t v500;
  int v501;
  int v502;
  int v503;
  char *v504;
  char *v505;
  unint64_t v506;
  unint64_t v507;
  char *v508;
  char *v509;
  char *v510;
  char *v511;
  uint64_t v512;
  char *v513;
  char *v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  char *v518;
  char *v519;
  char *v520;
  uint64_t v521;
  __int128 v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  char *v526;
  uint64_t v527;
  char *v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  unint64_t v532;
  char *v533;
  char *v534;
  char *v535;
  uint64_t v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t v539;
  char *v540;
  char *v541;
  uint64_t v542;
  __int128 v543;
  unsigned int v544;
  unint64_t v545;
  _DWORD *v546;
  int v547;
  uint64_t v548;
  int v549;
  unint64_t v550;
  char *v551;
  size_t v552;
  char *v553;
  uint64_t v554;
  unsigned int v555;
  int v556;
  uint64_t v557;
  char *v558;
  unsigned int v559;
  uint64_t v560;
  uint64_t v561;
  const void *v562;
  uint64_t v563;
  uint64_t v564;
  unsigned int v565;
  unsigned int v566;
  uint64_t v567;
  uint64_t v568;
  const void *v569;
  uint64_t v570;
  unsigned int *v571;
  unsigned int v572;
  unsigned int v573;
  uint64_t v574;
  uint64_t v575;
  const void *v576;
  uint64_t v577;
  size_t v578;
  unsigned int v579;
  uint64_t v580;
  unsigned int v581;
  uint64_t v582;
  uint64_t v583;
  const void *v584;
  uint64_t v585;
  int v586;
  uint64_t v587;
  unsigned int **v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  char v593;
  int v594;
  unsigned int **v595;
  uint64_t v596;
  _QWORD *v597;
  void **v598;
  uint64_t v599;
  char **v600;
  void **v601;
  uint64_t v602;
  int v603;
  char **v604;
  char **v605;
  int v606[2];
  int v607[2];
  void **v608;
  int v609;
  char **v610;
  unsigned int **v611;
  int v612;
  int v613;
  unsigned int v614;
  void *v616[2];
  void *__p[2];
  __int128 v618;
  unsigned int *v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;

  v1 = *(_QWORD *)(a1 + 1832);
  v2 = *(_QWORD *)(a1 + 1824);
  v3 = *(_QWORD *)(a1 + 1856);
  v4 = *(_QWORD *)(a1 + 1848);
  v596 = a1 + 40;
  if (*(_BYTE *)(a1 + 312))
    goto LABEL_466;
  v589 = *(_QWORD *)(a1 + 1848);
  v590 = *(_QWORD *)(a1 + 1824);
  v591 = *(_QWORD *)(a1 + 1856);
  v592 = *(_QWORD *)(a1 + 1832);
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 313))
    goto LABEL_204;
  v5 = a1 + 1272;
  if (*(_DWORD *)(a1 + 548) == 1)
    v6 = 3;
  else
    v6 = 1;
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1272) + 24))(a1 + 1272) + 272))
    goto LABEL_7;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1272) + 24))(v5);
  v8 = (char **)sub_20F3D15E0(v7);
  v9 = v8;
  v610 = (char **)(a1 + 1912);
  if ((char **)(a1 + 1912) != v8)
  {
    sub_20E867E00(v610, *v8, v8[1], (v8[1] - *v8) >> 2);
    sub_20E867E00((_QWORD *)(a1 + 1936), v9[3], v9[4], (v9[4] - v9[3]) >> 2);
  }
  v10 = *(char **)(a1 + 1912);
  v11 = *(char **)(a1 + 1920);
  if (v10 == v11 && *(_QWORD *)(a1 + 1936) == *(_QWORD *)(a1 + 1944))
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v13 = v12;
    if (a1 + 1960 != v12 + 520)
    {
      sub_20E867E00((_QWORD *)(a1 + 1960), *(char **)(v12 + 520), *(char **)(v12 + 528), (uint64_t)(*(_QWORD *)(v12 + 528) - *(_QWORD *)(v12 + 520)) >> 2);
      sub_20E867E00((_QWORD *)(a1 + 1984), *(char **)(v13 + 544), *(char **)(v13 + 552), (uint64_t)(*(_QWORD *)(v13 + 552) - *(_QWORD *)(v13 + 544)) >> 2);
    }
    sub_20F3D2024((char **)(a1 + 1960), (unsigned int **)v9 + 6);
    *(_OWORD *)__p = 0u;
    v618 = 0u;
    *(_OWORD *)v616 = 0u;
    v14 = *(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824);
    if (v14)
    {
      sub_20E93DC84((uint64_t)v616, v14 >> 2);
      v15 = *(char **)(a1 + 1824);
      v16 = *(char **)(a1 + 1832);
      v17 = (unsigned int *)v616[0];
      v18 = *(_QWORD *)(a1 + 1960);
      v19 = *(_QWORD *)(a1 + 1968);
      v619 = (unsigned int *)v616[0];
      *(_QWORD *)&v620 = v18;
      if (v15 == v16)
      {
        v20 = 0;
      }
      else
      {
        while ((_QWORD)v620 != v19)
        {
          v21 = *(_DWORD *)v15;
          if (*(_DWORD *)v15 >= *(_DWORD *)v620)
          {
            v15 += 4 * (*(_DWORD *)v620 >= v21);
            *(_QWORD *)&v620 = v620 + 4;
            if (v15 == v16)
              goto LABEL_21;
          }
          else
          {
            v22 = v619;
            *v619 = v21;
            v15 += 4;
            v619 = v22 + 1;
            if (v15 == v16)
            {
LABEL_21:
              v20 = 0;
              v17 = v619;
              goto LABEL_176;
            }
          }
        }
        v17 = v619;
        v20 = v16 - v15;
        if (v16 != v15)
          memmove(v619, v15, v16 - v15);
      }
    }
    else
    {
      v20 = 0;
      v17 = 0;
    }
LABEL_176:
    v175 = (char *)v17 + v20;
    if (v175 != v616[1])
      v616[1] = v175;
    v176 = *(char **)(a1 + 1856);
    v177 = *(char **)(a1 + 1848);
    v178 = (v176 - v177) >> 2;
    v179 = (unsigned int *)__p[1];
    v180 = (uint64_t)(v618 - (unint64_t)__p[1]) >> 2;
    v181 = v178 >= v180;
    v182 = v178 - v180;
    if (v182 != 0 && v181)
    {
      sub_20E93DC84((uint64_t)&__p[1], v182);
      v177 = *(char **)(a1 + 1848);
      v176 = *(char **)(a1 + 1856);
      v179 = (unsigned int *)__p[1];
      v183 = (char **)(a1 + 1304);
      v184 = *(_QWORD *)(a1 + 1984);
      v185 = *(_QWORD *)(a1 + 1992);
      v619 = (unsigned int *)__p[1];
      *(_QWORD *)&v620 = v184;
      if (v177 != v176)
        goto LABEL_187;
    }
    else
    {
      if (!v181)
        *(_QWORD *)&v618 = (char *)__p[1] + 4 * v178;
      v183 = (char **)(a1 + 1304);
      v186 = *(_QWORD *)(a1 + 1984);
      v185 = *(_QWORD *)(a1 + 1992);
      v619 = (unsigned int *)__p[1];
      *(_QWORD *)&v620 = v186;
      if (v177 != v176)
      {
LABEL_187:
        while ((_QWORD)v620 != v185)
        {
          v189 = *(_DWORD *)v177;
          if (*(_DWORD *)v177 < *(_DWORD *)v620)
          {
            v188 = v619;
            *v619 = v189;
            v177 += 4;
            v619 = v188 + 1;
            if (v177 == v176)
              goto LABEL_190;
          }
          else
          {
            v177 += 4 * (*(_DWORD *)v620 >= v189);
            *(_QWORD *)&v620 = v620 + 4;
            if (v177 == v176)
            {
LABEL_190:
              v187 = 0;
              v179 = v619;
              goto LABEL_193;
            }
          }
        }
        v179 = v619;
        v187 = v176 - v177;
        if (v177 != v176)
          memmove(v619, v177, v176 - v177);
LABEL_193:
        v190 = (char *)v179 + v187;
        if (v190 != (char *)v618)
          *(_QWORD *)&v618 = v190;
        v621 = 0u;
        v622 = 0u;
        v620 = 0u;
        sub_20F3D2E0C(v183, v616, (uint64_t)&v620);
        if (*((_QWORD *)&v621 + 1))
        {
          *(_QWORD *)&v622 = *((_QWORD *)&v621 + 1);
          operator delete(*((void **)&v621 + 1));
        }
        if ((_QWORD)v620)
        {
          *((_QWORD *)&v620 + 1) = v620;
          operator delete((void *)v620);
        }
        if (__p[1])
        {
          *(void **)&v618 = __p[1];
          operator delete(__p[1]);
        }
        v191 = v616[0];
        if (v616[0])
        {
          v616[1] = v616[0];
          goto LABEL_203;
        }
        goto LABEL_204;
      }
    }
    v187 = 0;
    goto LABEL_193;
  }
  v595 = (unsigned int **)(a1 + 2008);
  sub_20E867E00((_QWORD *)(a1 + 2008), v10, v11, (v11 - v10) >> 2);
  v597 = (_QWORD *)(a1 + 2032);
  sub_20E867E00((_QWORD *)(a1 + 2032), *(char **)(a1 + 1936), *(char **)(a1 + 1944), (uint64_t)(*(_QWORD *)(a1 + 1944) - *(_QWORD *)(a1 + 1936)) >> 2);
  sub_20F3D21C0((char **)(a1 + 2008), v9 + 6);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v24 = v23;
  v605 = (char **)(a1 + 1960);
  if (a1 + 1960 != v23 + 520)
  {
    sub_20E867E00(v605, *(char **)(v23 + 520), *(char **)(v23 + 528), (uint64_t)(*(_QWORD *)(v23 + 528) - *(_QWORD *)(v23 + 520)) >> 2);
    sub_20E867E00((_QWORD *)(a1 + 1984), *(char **)(v24 + 544), *(char **)(v24 + 552), (uint64_t)(*(_QWORD *)(v24 + 552) - *(_QWORD *)(v24 + 544)) >> 2);
  }
  sub_20F3D2024(v605, v595);
  sub_20E867E00(v595, *(char **)(a1 + 1960), *(char **)(a1 + 1968), (uint64_t)(*(_QWORD *)(a1 + 1968) - *(_QWORD *)(a1 + 1960)) >> 2);
  sub_20E867E00(v597, *(char **)(a1 + 1984), *(char **)(a1 + 1992), (uint64_t)(*(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 1984)) >> 2);
  sub_20F3D21C0((char **)v595, v610);
  v25 = ((*(_DWORD *)(a1 + 1968) - *(_DWORD *)(a1 + 1960)) & 0xFFFFFFFC)
      + 6 * ((*(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 1984)) >> 2);
  v26 = (void **)(a1 + 1280);
  *(_DWORD *)(a1 + 1296) = v25;
  if (*(_QWORD *)(a1 + 1288) < v25)
  {
    if (*v26)
      MEMORY[0x212BC6368](*v26, 0x1000C8000313F17);
    *(_QWORD *)(a1 + 1280) = 0;
    v27 = (8 * v25 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)(a1 + 1288) = v27 >> 3;
    *v26 = operator new(v27, (std::align_val_t)0x20uLL);
  }
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  LODWORD(v619) = 0;
  sub_20F3D3834(v28, *(_DWORD **)(a1 + 1960), *(_DWORD **)(a1 + 1968), v26, &v619);
  v29 = *(_DWORD **)(a1 + 1984);
  v30 = *(_DWORD **)(a1 + 1992);
  if (v29 != v30)
  {
    v31 = *(_QWORD *)(v28 + 104);
    v32 = v619;
    do
    {
      v31 -= 16;
      do
      {
        v33 = *(_DWORD *)(v31 + 16);
        v31 += 16;
      }
      while (*v29 != v33);
      v34 = *(_QWORD *)(v31 + 8);
      LODWORD(v616[0]) = 3;
      v616[1] = (void *)(v34 + 32);
      LODWORD(__p[0]) = 0;
      *(_QWORD *)&v621 = 0;
      v620 = 0uLL;
      sub_20F053450((unsigned int *)v616, (double *)&v620);
      v35.i64[0] = v621;
      v36.i64[0] = *(_QWORD *)(v34 + 120);
      v37 = *(int8x16_t *)(v34 + 104);
      v38 = (uint64_t)*v26 + 8 * v32;
      *(_OWORD *)v38 = v620;
      *(int64x2_t *)(v38 + 16) = vzip1q_s64(v35, (int64x2_t)v37);
      *(int8x16_t *)(v38 + 32) = vextq_s8(v37, v36, 8uLL);
      v32 += 6;
      LODWORD(v619) = v32;
      ++v29;
    }
    while (v29 != v30);
  }
  v39 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v41 = v39[1];
  v40 = v39[2];
  v42 = *(_DWORD **)(a1 + 2008);
  v43 = *(_DWORD **)(a1 + 2016);
  v44 = v41 == v40 || v42 == v43;
  if (!v44)
  {
    v45 = 0;
    do
    {
      v46 = *(_QWORD *)(v41 + 8);
      if (*v42 == *(_DWORD *)v41)
      {
        if (*(_BYTE *)(v46 + 20))
          v47 = v45;
        else
          v47 = -1;
        v45 += *(unsigned __int8 *)(v46 + 20);
        ++v42;
      }
      else
      {
        v47 = -1;
      }
      *(_DWORD *)v46 = v47;
      v41 += 16;
    }
    while (v41 != v40 && v42 != v43);
  }
  if (v41 != v40)
  {
    v48 = v40 - v41 - 16;
    if (v48 >= 0x10)
    {
      v50 = (v48 >> 4) + 1;
      v49 = v41 + 16 * (v50 & 0x1FFFFFFFFFFFFFFELL);
      v51 = (_DWORD **)(v41 + 24);
      v52 = v50 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v53 = *(v51 - 2);
        v54 = *v51;
        v51 += 4;
        *v53 = -1;
        *v54 = -1;
        v52 -= 2;
      }
      while (v52);
      if (v50 == (v50 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_54;
    }
    else
    {
      v49 = v41;
    }
    do
    {
      **(_DWORD **)(v49 + 8) = -1;
      v49 += 16;
    }
    while (v49 != v40);
  }
LABEL_54:
  v56 = v39[13];
  v55 = v39[14];
  v57 = *(_DWORD **)(a1 + 2032);
  v58 = *(_DWORD **)(a1 + 2040);
  if (v56 != v55 && v57 != v58)
  {
    v60 = 0;
    do
    {
      v61 = *(_QWORD *)(v56 + 8);
      if (*v57 == *(_DWORD *)v56)
      {
        if (*(_BYTE *)(v61 + 20))
          v62 = v60;
        else
          v62 = -1;
        v60 += *(unsigned __int8 *)(v61 + 20);
        ++v57;
      }
      else
      {
        v62 = -1;
      }
      *(_DWORD *)v61 = v62;
      v56 += 16;
    }
    while (v56 != v55 && v57 != v58);
  }
  if (v56 != v55)
  {
    v63 = v55 - v56 - 16;
    if (v63 < 0x10)
    {
      v64 = v56;
      do
      {
LABEL_73:
        **(_DWORD **)(v64 + 8) = -1;
        v64 += 16;
      }
      while (v64 != v55);
      goto LABEL_74;
    }
    v65 = (v63 >> 4) + 1;
    v64 = v56 + 16 * (v65 & 0x1FFFFFFFFFFFFFFELL);
    v66 = (_DWORD **)(v56 + 24);
    v67 = v65 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v68 = *(v66 - 2);
      v69 = *v66;
      v66 += 4;
      *v68 = -1;
      *v69 = -1;
      v67 -= 2;
    }
    while (v67);
    if (v65 != (v65 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_73;
  }
LABEL_74:
  v70 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  sub_20F3D2520(v70, (char **)v595);
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  sub_20F3D3B68(v71 + 40);
  v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v74 = *(unsigned int *)(v72 + 16);
  if ((_DWORD)v74)
    bzero(*(void **)v72, 8 * v74);
  if (((*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 2)
     + ((*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 2))
  {
    v75 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v73 = sub_20F3D26E4(v75, (_QWORD *)(a1 + 1304), (char **)(a1 + 2056), (_QWORD *)(a1 + 2104));
  }
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v5 + 16))(v5, v6, v73);
  v76 = *(unsigned __int8 *)(a1 + 1872);
  v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1272) + 40))(v5);
  v599 = a1 + 2200;
  v602 = a1 + 2224;
  v78 = (unsigned int **)(a1 + 2104);
  *(_QWORD *)&v620 = 0x600000004;
  sub_20F3D47D4(v610, v77 + 520, &v620, a1 + 2104);
  sub_20F3D4C5C((_QWORD *)(v77 + 40), a1 + 2224, v78, v78);
  if (!v76)
    v79 = sub_20F3D5354(v77, v599, (int **)v78);
  v80 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)(a1 + 1272) + 40))(v5, v79);
  v616[0] = (void *)0x600000004;
  sub_20F3D47D4(v610, v80 + 520, v616, (uint64_t)v78);
  v81 = (unsigned int **)(a1 + 2152);
  sub_20F3D47D4(v605, v80 + 520, v616, a1 + 2152);
  v82 = a1;
  v83 = (void **)(a1 + 2248);
  v84 = (((*(_QWORD *)(a1 + 2160) - *(_QWORD *)(a1 + 2152)) >> 1) & 0xFFFFFFFC)
      + 6 * ((*(_QWORD *)(a1 + 2184) - *(_QWORD *)(a1 + 2176)) >> 3);
  v85 = (((*(_QWORD *)(a1 + 2112) - *(_QWORD *)(a1 + 2104)) >> 1) & 0xFFFFFFFC)
      + 6 * ((*(_QWORD *)(a1 + 2136) - *(_QWORD *)(a1 + 2128)) >> 3);
  *(_DWORD *)(a1 + 2264) = v85;
  *(_DWORD *)(a1 + 2268) = v84;
  v86 = v84 * (unint64_t)v85;
  v87 = v84;
  v88 = v85;
  if (*(_QWORD *)(a1 + 2256) < v86)
  {
    if (*v83)
      MEMORY[0x212BC6368](*v83, 0x1000C8000313F17);
    *(_QWORD *)(a1 + 2248) = 0;
    *(_QWORD *)(a1 + 2256) = v86 & 0x1FFFFFFFFFFFFFFCLL;
    v89 = operator new(8 * v86, (std::align_val_t)0x20uLL);
    v82 = a1;
    *(_QWORD *)(a1 + 2248) = v89;
    v88 = *(_DWORD *)(a1 + 2264);
    v87 = *(_DWORD *)(a1 + 2268);
  }
  v90 = (void **)(v82 + 2272);
  v91 = v88 * v87;
  if (v91)
    bzero(*v83, 8 * v91);
  if (v84 == *(_DWORD *)(a1 + 2288) && v85 == *(_DWORD *)(a1 + 2292))
  {
    v92 = *v90;
  }
  else
  {
    *(_DWORD *)(a1 + 2288) = v84;
    *(_DWORD *)(a1 + 2292) = v85;
    v92 = *(void **)(a1 + 2272);
    if (*(_QWORD *)(a1 + 2280) < v86)
    {
      if (v92)
        MEMORY[0x212BC6368](v92, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 2272) = 0;
      *(_QWORD *)(a1 + 2280) = v86 & 0x1FFFFFFFFFFFFFFCLL;
      v92 = operator new(8 * v86, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 2272) = v92;
      v84 = *(_DWORD *)(a1 + 2288);
      v85 = *(_DWORD *)(a1 + 2292);
    }
  }
  if (v84 * v85)
    bzero(v92, 8 * v84 * v85);
  sub_20F3D5480((_QWORD *)(v80 + 40), (uint64_t)v90, v81, v78);
  sub_20F3D5480((_QWORD *)(v80 + 40), (uint64_t)v83, v78, v81);
  *(_QWORD *)&v620 = v90;
  sub_20F2B809C((uint64_t)v83, (uint64_t **)&v620);
  v93 = (void **)(a1 + 1304);
  sub_20F3D2520((_QWORD *)(a1 + 1304), v605);
  sub_20F3D3B68(a1 + 1344);
  v94 = *(unsigned int *)(a1 + 1320);
  if ((_DWORD)v94)
    bzero(*v93, 8 * v94);
  v95 = *(unsigned __int8 *)(a1 + 1872);
  v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1272) + 40))(v5);
  v97 = (uint64_t *)(a1 + 2296);
  *(_QWORD *)&v620 = 0x600000004;
  sub_20F3D47D4(v605, v96 + 520, &v620, (uint64_t)v78);
  sub_20F3D4C5C((_QWORD *)(v96 + 40), a1 + 2296, v78, v78);
  if (!v95)
    v98 = sub_20F3D5354(v96, (uint64_t)v93, (int **)v78);
  if (*(_BYTE *)(a1 + 1873))
  {
    LOBYTE(v620) = *(_BYTE *)(a1 + 1872);
    v99 = *(_QWORD *)(a1 + 1904);
    if (!v99)
      sub_20E86D37C();
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, __int128 *, uint64_t *, void **, __n128))(*(_QWORD *)v99 + 48))(v99, v602, v599, v83, &v620, v97, v93, v98) & 1) != 0)goto LABEL_104;
LABEL_7:
    kdebug_trace();
    return 1;
  }
  if (!sub_20F2B67A0(v602, v599, (uint64_t)v83, *(_BYTE *)(a1 + 1872) != 0, (uint64_t)v97, (unint64_t *)v93))
    goto LABEL_7;
LABEL_104:
  v100 = *(_QWORD *)(a1 + 1792);
  v101 = *(_DWORD *)(v100 + 12);
  v603 = *(_DWORD *)(v100 + 8);
  v102 = *(unsigned int *)(a1 + 1468);
  if ((_DWORD)v102)
  {
    for (i = 0; i < v102; ++i)
    {
      v105 = a1;
      v106 = (uint64_t *)(*(_QWORD *)(a1 + 1544) + 24 * i);
      v104 = *v106;
      v107 = v106[1];
      if (*v106 != v107)
      {
        v108 = *(_QWORD *)(a1 + 1512);
        v109 = *(_QWORD *)(a1 + 1504);
        v110 = *(_QWORD *)(a1 + 1536);
        do
        {
          v111 = ((v108 - v109) << 6) - 1;
          if (v108 == v109)
            v111 = 0;
          v112 = *(_QWORD *)(v105 + 1528) + v110;
          if (v111 == v112)
          {
            sub_20EDB36DC(a1 + 1496);
            v105 = a1;
            v109 = *(_QWORD *)(a1 + 1504);
            v108 = *(_QWORD *)(a1 + 1512);
            v112 = *(_QWORD *)(a1 + 1536) + *(_QWORD *)(a1 + 1528);
          }
          *(_QWORD *)(*(_QWORD *)(v109 + ((v112 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v112 & 0x1FF)) = *(_QWORD *)(v104 + 8);
          v110 = *(_QWORD *)(v105 + 1536) + 1;
          *(_QWORD *)(v105 + 1536) = v110;
          v104 += 16;
        }
        while (v104 != v107);
        v104 = *v106;
        v102 = *(unsigned int *)(v105 + 1468);
      }
      v106[1] = v104;
    }
  }
  v113 = (4 * v101);
  sub_20F3D592C(a1 + 1680, v97, (4 * v603) | ((unint64_t)v113 << 32));
  sub_20F3D6048(a1 + 1344, v97, 0);
  sub_20F3D6704((char *)(a1 + 1568), v97, v113 << 32);
  v114 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v588 = (unsigned int **)(a1 + 2344);
  sub_20F3D2E0C(v114, v610, a1 + 2344);
  if (v595 != (unsigned int **)(v9 + 12))
  {
    sub_20E867E00(v595, v9[12], v9[13], (v9[13] - v9[12]) >> 2);
    sub_20E867E00(v597, v9[15], v9[16], (v9[16] - v9[15]) >> 2);
  }
  v587 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v115 = 0;
  v116 = 0;
  v117 = 1;
  v118 = (unsigned int **)(a1 + 2344);
  do
  {
    v119 = v117;
    v120 = &v118[3 * v115];
    v121 = *v120;
    v600 = (char **)v120;
    v120[1] = *v120;
    v122 = (uint64_t *)(v120 + 1);
    v123 = &v595[3 * v115];
    v124 = (char *)*v123;
    v126 = v123 + 1;
    v125 = v123[1];
    if (*v123 != v125)
    {
      v593 = v119;
      v594 = v116;
      v127 = (char *)v125 - v124;
      v128 = ((char *)v125 - v124) >> 2;
      v611 = &v118[3 * v115 + 2];
      if (v128 > *v611 - v121)
      {
        if ((v127 & 0x8000000000000000) != 0)
          goto LABEL_702;
        v129 = (char *)operator new(v127);
        *v600 = v129;
        *v122 = (uint64_t)v129;
        *v611 = (unsigned int *)&v129[4 * v128];
        if (v121)
        {
          operator delete(v121);
          v128 = (uint64_t)(*v126 - (_QWORD)*v123) >> 2;
        }
      }
      v130 = v587 + 520 + 24 * v115;
      v131 = *(char **)(v130 + 8);
      v604 = (char **)(v130 + 8);
      v132 = *(char **)v130;
      v133 = (uint64_t)&v131[-*(_QWORD *)v130];
      v134 = v133 >> 2;
      v135 = (v133 >> 2) + v128;
      v598 = (void **)v130;
      v137 = *(_QWORD *)(v130 + 16);
      v136 = (_QWORD *)(v130 + 16);
      if (v135 <= (v137 - (uint64_t)v132) >> 2)
      {
        v139 = v131;
        v140 = v132;
        goto LABEL_138;
      }
      if (!(v135 >> 62))
      {
        v138 = (char *)operator new(4 * v135);
        v139 = &v138[4 * v134];
        v140 = v139;
        if (v131 == v132)
          goto LABEL_136;
        v141 = v131 - v132 - 4;
        if (v141 >= 0x2C)
        {
          v140 = &v138[4 * v134];
          if ((unint64_t)(&v131[-v133] - v138) >= 0x20)
          {
            v142 = (v141 >> 2) + 1;
            v143 = 4 * (v142 & 0x7FFFFFFFFFFFFFF8);
            v144 = &v131[-v143];
            v140 = &v139[-v143];
            v145 = &v138[4 * v134 - 16];
            v146 = v131 - 16;
            v147 = v142 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v148 = *(_OWORD *)v146;
              *((_OWORD *)v145 - 1) = *((_OWORD *)v146 - 1);
              *(_OWORD *)v145 = v148;
              v145 -= 32;
              v146 -= 32;
              v147 -= 8;
            }
            while (v147);
            v131 = v144;
            if (v142 == (v142 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_136:
              *v598 = v140;
              *v604 = v139;
              *v136 = &v138[4 * v135];
              if (v132)
              {
                operator delete(v132);
                v140 = (char *)*v598;
                v139 = *v604;
              }
LABEL_138:
              v150 = (char *)*v123;
              *(_QWORD *)v606 = *v126;
              if (v140 == v139)
              {
                v151 = 0;
                goto LABEL_146;
              }
              v151 = 0;
              do
              {
                if (*(_DWORD *)v140 > *(_DWORD *)v150)
                {
                  v139 = v140;
                  goto LABEL_146;
                }
                v140 += 4;
                ++v151;
              }
              while (v140 != v139);
              while (1)
              {
LABEL_146:
                if (v150 == *(char **)v606)
                {
                  v119 = v593;
                  v116 = v594 | (*v600 != (char *)*v122);
                  v118 = (unsigned int **)(a1 + 2344);
                  goto LABEL_119;
                }
                if (v139 == *v604 || *(_DWORD *)v150 != *(_DWORD *)v139)
                  break;
LABEL_145:
                v139 += 4;
                ++v151;
              }
              v152 = (char *)*v122;
              if (*v122 < (unint64_t)*v611)
              {
                *(_DWORD *)v152 = v151;
                v153 = (uint64_t)(v152 + 4);
LABEL_170:
                *v122 = v153;
                v139 = sub_20EDB3C7C(v598, v139, v150);
                v150 += 4;
                goto LABEL_145;
              }
              v154 = *v600;
              v155 = v152 - *v600;
              v156 = v155 >> 2;
              v157 = (v155 >> 2) + 1;
              if (v157 >> 62)
                goto LABEL_702;
              v158 = (char *)*v611 - v154;
              if (v158 >> 1 > v157)
                v157 = v158 >> 1;
              if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL)
                v159 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v159 = v157;
              if (v159)
              {
                if (v159 >> 62)
LABEL_700:
                  sub_20E877A38();
                v160 = operator new(4 * v159);
                v161 = &v160[4 * v156];
                *(_DWORD *)v161 = v151;
                v153 = (uint64_t)(v161 + 4);
                v162 = v152 - v154;
                if (v152 == v154)
                  goto LABEL_168;
              }
              else
              {
                v160 = 0;
                v161 = (char *)(4 * v156);
                *(_DWORD *)(4 * v156) = v151;
                v153 = 4 * v156 + 4;
                v162 = v152 - v154;
                if (v152 == v154)
                {
LABEL_168:
                  *v600 = v161;
                  *v122 = v153;
                  *v611 = (unsigned int *)&v160[4 * v159];
                  if (v154)
                    operator delete(v154);
                  goto LABEL_170;
                }
              }
              v163 = v162 - 4;
              if (v163 < 0x2C)
                goto LABEL_709;
              if ((unint64_t)(v152 - &v160[v155]) < 0x20)
                goto LABEL_709;
              v164 = (v163 >> 2) + 1;
              v165 = 4 * (v164 & 0x7FFFFFFFFFFFFFF8);
              v166 = &v152[-v165];
              v161 -= v165;
              v167 = &v160[4 * v156 - 16];
              v168 = v152 - 16;
              v169 = v164 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v170 = *(_OWORD *)v168;
                *(v167 - 1) = *((_OWORD *)v168 - 1);
                *v167 = v170;
                v167 -= 2;
                v168 -= 32;
                v169 -= 8;
              }
              while (v169);
              v152 = v166;
              if (v164 != (v164 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_709:
                do
                {
                  v171 = *((_DWORD *)v152 - 1);
                  v152 -= 4;
                  *((_DWORD *)v161 - 1) = v171;
                  v161 -= 4;
                }
                while (v152 != v154);
              }
              goto LABEL_168;
            }
          }
        }
        else
        {
          v140 = &v138[4 * v134];
        }
        do
        {
          v149 = *((_DWORD *)v131 - 1);
          v131 -= 4;
          *((_DWORD *)v140 - 1) = v149;
          v140 -= 4;
        }
        while (v131 != v132);
        goto LABEL_136;
      }
LABEL_702:
      sub_20E867F44();
    }
LABEL_119:
    v117 = 0;
    v115 = 1;
  }
  while ((v119 & 1) != 0);
  if ((v116 & 1) == 0)
    goto LABEL_204;
  v172 = v587 + 152;
  v173 = (unsigned int **)(a1 + 2368);
  v174 = *(_QWORD *)(a1 + 2376) - *(_QWORD *)(a1 + 2368);
  if (*(_QWORD *)(v587 + 160))
  {
    sub_20F2B9E90(v587 + 152, v118, v174 >> 2);
    sub_20F2B9FE8(v172, v173);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v172 + 24))(v587 + 152, (unint64_t)v174 >> 2, (*(_QWORD *)(a1 + 2352) - *(_QWORD *)(a1 + 2344)) >> 2);
  }
  v464 = v587 + 376;
  v465 = *(_QWORD *)(a1 + 2376) - *(_QWORD *)(a1 + 2368);
  if (*(_QWORD *)(v587 + 384))
  {
    sub_20F2B9E90(v587 + 376, v173, v465 >> 2);
    sub_20F2B9FE8(v464, v173);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v464 + 24))(v587 + 376, (unint64_t)v465 >> 2, (unint64_t)v465 >> 2);
  }
  v466 = v587 + 40;
  v467 = *(_QWORD *)(a1 + 2352) - *(_QWORD *)(a1 + 2344);
  if (*(_QWORD *)(v587 + 48))
  {
    sub_20F2B9E90(v587 + 40, v588, v467 >> 2);
    sub_20F2B9FE8(v466, v588);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v466 + 24))(v587 + 40, (unint64_t)v467 >> 2, (unint64_t)v467 >> 2);
  }
  v468 = v587 + 264;
  v469 = *(_QWORD *)(a1 + 2352) - *(_QWORD *)(a1 + 2344);
  if (*(_QWORD *)(v587 + 272))
  {
    sub_20F2B9E90(v587 + 264, v173, v469 >> 2);
    sub_20F2B9FE8(v468, v588);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v468 + 24))(v587 + 264, (unint64_t)v469 >> 2, (*(_QWORD *)(a1 + 2376) - *(_QWORD *)(a1 + 2368)) >> 2);
  }
  v621 = 0u;
  v622 = 0u;
  v620 = 0u;
  v471 = *(char **)(a1 + 2352);
  v472 = *(char **)(a1 + 2344);
  v473 = v471 - v472;
  if (v471 != v472)
  {
    if ((unint64_t)v473 <= 0x7FFFFFFFFFFFFFFCLL)
    {
      v474 = (char *)operator new(2 * v473);
      *(_QWORD *)&v620 = v474;
      *((_QWORD *)&v620 + 1) = v474;
      *(_QWORD *)&v621 = &v474[8 * (v473 >> 2)];
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v476 = (4 * *(_DWORD *)v472);
            v477 = (char *)v620;
            if ((char *)v620 == v474 || *((_DWORD *)v474 - 1) != (_DWORD)v476)
              break;
            *((_DWORD *)v474 - 1) = v476 + 4;
            v472 += 4;
            if (v472 == v471)
              goto LABEL_608;
          }
          v478 = (v476 + 4);
          if ((unint64_t)v474 >= (unint64_t)v621)
            break;
          *(_QWORD *)v474 = v476 | (v478 << 32);
          v475 = (uint64_t)(v474 + 8);
LABEL_574:
          *((_QWORD *)&v620 + 1) = v475;
          v474 = (char *)v475;
          v472 += 4;
          if (v472 == v471)
            goto LABEL_608;
        }
        v479 = &v474[-v620];
        v480 = (uint64_t)&v474[-v620] >> 3;
        v481 = v480 + 1;
        if ((unint64_t)(v480 + 1) >> 61)
          goto LABEL_704;
        v482 = v621 - v620;
        if ((uint64_t)(v621 - v620) >> 2 > v481)
          v481 = v482 >> 2;
        v483 = (unint64_t)v482 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v481;
        if (!v483)
          break;
        if (v483 >> 61)
LABEL_703:
          sub_20E877A38();
        v484 = (char *)operator new(8 * v483);
        v485 = &v484[8 * v480];
        *(_QWORD *)v485 = v476 | (v478 << 32);
        v475 = (uint64_t)(v485 + 8);
        if (v477 != v474)
          goto LABEL_591;
LABEL_595:
        *(_QWORD *)&v620 = v485;
        *(_QWORD *)&v621 = &v484[8 * v483];
        if (!v474)
          goto LABEL_574;
        operator delete(v474);
        *((_QWORD *)&v620 + 1) = v475;
        v474 = (char *)v475;
        v472 += 4;
        if (v472 == v471)
        {
LABEL_608:
          v495 = (_DWORD *)v620;
          goto LABEL_610;
        }
      }
      v484 = 0;
      v485 = (char *)(8 * v480);
      *(_QWORD *)(8 * v480) = v476 | (v478 << 32);
      v475 = 8 * v480 + 8;
      if (v477 == v474)
        goto LABEL_595;
LABEL_591:
      if ((unint64_t)(v479 - 8) >= 0x168)
      {
        v488 = (v474 - 8 - v477) & 0xFFFFFFFFFFFFFFF8;
        if (&v479[(_QWORD)v484 - 8 - v488] > &v479[(_QWORD)v484 - 8])
        {
          v486 = v474;
        }
        else if (&v474[-v488 - 8] > v474 - 8)
        {
          v486 = v474;
        }
        else if ((unint64_t)(v477 - v484) >= 0x20)
        {
          v489 = ((unint64_t)(v479 - 8) >> 3) + 1;
          v490 = 8 * (v489 & 0x3FFFFFFFFFFFFFFCLL);
          v486 = &v474[-v490];
          v485 -= v490;
          v491 = &v484[8 * v480 - 16];
          v492 = v474 - 16;
          v493 = v489 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v494 = *(_OWORD *)v492;
            *((_OWORD *)v491 - 1) = *((_OWORD *)v492 - 1);
            *(_OWORD *)v491 = v494;
            v491 -= 32;
            v492 -= 32;
            v493 -= 4;
          }
          while (v493);
          if (v489 == (v489 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_594;
        }
        else
        {
          v486 = v474;
        }
      }
      else
      {
        v486 = v474;
      }
      do
      {
        v487 = *((_QWORD *)v486 - 1);
        v486 -= 8;
        *((_QWORD *)v485 - 1) = v487;
        v485 -= 8;
      }
      while (v486 != v477);
LABEL_594:
      v474 = (char *)v620;
      goto LABEL_595;
    }
LABEL_704:
    sub_20E92CED8();
  }
  v495 = 0;
  v474 = 0;
LABEL_610:
  if (((v474 - (char *)v495) & 0x7FFFFFFF0) != 0)
  {
    v496 = ((unint64_t)(v474 - (char *)v495) >> 3);
    v499 = *v495;
    v497 = v495 + 2;
    v498 = v499;
    v500 = v496 - 1;
    do
    {
      v498 += *v497 - *(v497 - 1);
      *v497 = v498;
      v497 += 2;
      --v500;
    }
    while (v500);
  }
  v501 = *(_DWORD *)(v587 + 24);
  v502 = *(_DWORD *)(a1 + 2352);
  v503 = *(_DWORD *)(a1 + 2344);
  v504 = *(char **)(a1 + 2376);
  v505 = *(char **)(a1 + 2368);
  v506 = v504 - v505;
  v507 = (v504 - v505) >> 2;
  v508 = (char *)*((_QWORD *)&v621 + 1);
  if (v507 > (uint64_t)(*((_QWORD *)&v622 + 1) - *((_QWORD *)&v621 + 1)) >> 3)
  {
    if (v506 > 0x7FFFFFFFFFFFFFFCLL)
      goto LABEL_704;
    v509 = (char *)v622;
    v510 = (char *)operator new(2 * v506);
    v511 = &v510[8 * v507];
    v512 = v509 - v508;
    v513 = &v510[(v509 - v508) & 0xFFFFFFFFFFFFFFF8];
    v514 = v513;
    if (v509 == v508)
      goto LABEL_624;
    if ((unint64_t)(v512 - 8) >= 0x58)
    {
      v514 = &v510[(v509 - v508) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v509[-(v512 & 0xFFFFFFFFFFFFFFF8)] - v510) >= 0x20)
      {
        v515 = v512 >> 3;
        v516 = ((unint64_t)(v512 - 8) >> 3) + 1;
        v517 = 8 * (v516 & 0x3FFFFFFFFFFFFFFCLL);
        v518 = &v509[-v517];
        v514 = &v513[-v517];
        v519 = &v510[8 * v515 - 16];
        v520 = v509 - 16;
        v521 = v516 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v522 = *(_OWORD *)v520;
          *((_OWORD *)v519 - 1) = *((_OWORD *)v520 - 1);
          *(_OWORD *)v519 = v522;
          v519 -= 32;
          v520 -= 32;
          v521 -= 4;
        }
        while (v521);
        v509 = v518;
        if (v516 == (v516 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_624;
      }
    }
    else
    {
      v514 = &v510[(v509 - v508) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v523 = *((_QWORD *)v509 - 1);
      v509 -= 8;
      *((_QWORD *)v514 - 1) = v523;
      v514 -= 8;
    }
    while (v509 != v508);
LABEL_624:
    *((_QWORD *)&v621 + 1) = v514;
    *(_QWORD *)&v622 = v513;
    *((_QWORD *)&v622 + 1) = v511;
    if (v508)
    {
      operator delete(v508);
      v505 = *(char **)(a1 + 2368);
      v504 = *(char **)(a1 + 2376);
    }
    v508 = v514;
    goto LABEL_627;
  }
  v513 = (char *)v622;
LABEL_627:
  if (v505 == v504)
    goto LABEL_665;
  v609 = v502;
  v613 = v501;
  do
  {
    while (1)
    {
      while (1)
      {
        v525 = (6 * *(_DWORD *)v505);
        v526 = (char *)*((_QWORD *)&v621 + 1);
        if (*((char **)&v621 + 1) == v513 || *((_DWORD *)v513 - 1) != (_DWORD)v525)
          break;
        *((_DWORD *)v513 - 1) = v525 + 6;
        v505 += 4;
        if (v505 == v504)
          goto LABEL_664;
      }
      v527 = (v525 + 6);
      if ((unint64_t)v513 >= *((_QWORD *)&v622 + 1))
        break;
      *(_QWORD *)v513 = v525 | (v527 << 32);
      v524 = (uint64_t)(v513 + 8);
LABEL_630:
      *(_QWORD *)&v622 = v524;
      v513 = (char *)v524;
      v505 += 4;
      if (v505 == v504)
        goto LABEL_664;
    }
    v528 = &v513[-*((_QWORD *)&v621 + 1)];
    v529 = (uint64_t)&v513[-*((_QWORD *)&v621 + 1)] >> 3;
    v530 = v529 + 1;
    if ((unint64_t)(v529 + 1) >> 61)
      goto LABEL_704;
    v531 = *((_QWORD *)&v622 + 1) - *((_QWORD *)&v621 + 1);
    if ((uint64_t)(*((_QWORD *)&v622 + 1) - *((_QWORD *)&v621 + 1)) >> 2 > v530)
      v530 = v531 >> 2;
    if ((unint64_t)v531 >= 0x7FFFFFFFFFFFFFF8)
      v532 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v532 = v530;
    if (!v532)
    {
      v533 = 0;
      v534 = (char *)(8 * v529);
      *(_QWORD *)(8 * v529) = v525 | (v527 << 32);
      v524 = 8 * v529 + 8;
      if (v526 == v513)
        goto LABEL_651;
LABEL_647:
      if ((unint64_t)(v528 - 8) >= 0x168)
      {
        v537 = (v513 - 8 - v526) & 0xFFFFFFFFFFFFFFF8;
        if (&v528[(_QWORD)v533 - 8 - v537] > &v528[(_QWORD)v533 - 8])
        {
          v535 = v513;
        }
        else if (&v513[-v537 - 8] > v513 - 8)
        {
          v535 = v513;
        }
        else if ((unint64_t)(v526 - v533) >= 0x20)
        {
          v538 = ((unint64_t)(v528 - 8) >> 3) + 1;
          v539 = 8 * (v538 & 0x3FFFFFFFFFFFFFFCLL);
          v535 = &v513[-v539];
          v534 -= v539;
          v540 = &v533[8 * v529 - 16];
          v541 = v513 - 16;
          v542 = v538 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v543 = *(_OWORD *)v541;
            *((_OWORD *)v540 - 1) = *((_OWORD *)v541 - 1);
            *(_OWORD *)v540 = v543;
            v540 -= 32;
            v541 -= 32;
            v542 -= 4;
          }
          while (v542);
          if (v538 == (v538 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_650;
        }
        else
        {
          v535 = v513;
        }
      }
      else
      {
        v535 = v513;
      }
      do
      {
        v536 = *((_QWORD *)v535 - 1);
        v535 -= 8;
        *((_QWORD *)v534 - 1) = v536;
        v534 -= 8;
      }
      while (v535 != v526);
LABEL_650:
      v513 = (char *)*((_QWORD *)&v621 + 1);
      goto LABEL_651;
    }
    if (v532 >> 61)
      goto LABEL_703;
    v533 = (char *)operator new(8 * v532);
    v534 = &v533[8 * v529];
    *(_QWORD *)v534 = v525 | (v527 << 32);
    v524 = (uint64_t)(v534 + 8);
    if (v526 != v513)
      goto LABEL_647;
LABEL_651:
    *((_QWORD *)&v621 + 1) = v534;
    *((_QWORD *)&v622 + 1) = &v533[8 * v532];
    if (!v513)
      goto LABEL_630;
    operator delete(v513);
    *(_QWORD *)&v622 = v524;
    v513 = (char *)v524;
    v505 += 4;
  }
  while (v505 != v504);
LABEL_664:
  v508 = (char *)*((_QWORD *)&v621 + 1);
  v501 = v613;
  v502 = v609;
LABEL_665:
  v544 = (v502 - v503 + 4 * v501) & 0xFFFFFFFC;
  v545 = v513 - v508;
  if (((v513 - v508) & 0x7FFFFFFF0) != 0)
  {
    v546 = v508 + 8;
    v547 = *(_DWORD *)v508;
    v548 = (v545 >> 3) - 1;
    do
    {
      v547 += *v546 - *(v546 - 1);
      *v546 = v547;
      v546 += 2;
      --v548;
    }
    while (v548);
  }
  v549 = *(_DWORD *)(v587 + 28);
  v550 = v544 + 6 * (v549 + ((*(_QWORD *)(a1 + 2376) - *(_QWORD *)(a1 + 2368)) >> 2));
  if (v550 <= *(_DWORD *)(v587 + 8))
  {
    v564 = *(_QWORD *)v587;
    if ((v545 & 0x7FFFFFFF8) != 0)
    {
      v565 = 6 * v549;
      v566 = (v545 >> 3) - 1;
      do
      {
        v567 = v566;
        v568 = *(unsigned int *)&v508[8 * v566];
        v569 = (const void *)(*(_QWORD *)v587 + 8 * *(unsigned int *)(v587 + 36) + 8 * v568);
        v570 = (uint64_t)v569 + 8 * v565 + -8 * v568;
        v470 = v570 - (_QWORD)v569;
        if ((const void *)v570 != v569)
          memmove((void *)(v564 + 8 * v544 + 8 * *(unsigned int *)&v508[8 * v566 + 4]), v569, v470);
        --v566;
        v565 = v568;
      }
      while (v567);
    }
    v571 = (unsigned int *)v620;
    if (((*((_QWORD *)&v620 + 1) - (_QWORD)v620) & 0x7FFFFFFF8) != 0)
    {
      v572 = 4 * *(_DWORD *)(v587 + 24);
      v573 = ((*((_QWORD *)&v620 + 1) - (_QWORD)v620) >> 3) - 1;
      do
      {
        v574 = v573;
        v575 = v571[2 * v573];
        v576 = (const void *)(*(_QWORD *)v587 + 8 * *(unsigned int *)(v587 + 32) + 8 * v575);
        v577 = (uint64_t)v576 + 8 * v572 + -8 * v575;
        v470 = v577 - (_QWORD)v576;
        if ((const void *)v577 != v576)
          memmove((void *)(v564 + 8 * v571[2 * v573 + 1]), v576, v470);
        --v573;
        v572 = v575;
      }
      while (v574);
    }
    *(_DWORD *)(v587 + 16) = v550;
    if (*(_QWORD *)(v587 + 8) < v550)
    {
      if (*(_QWORD *)v587)
        MEMORY[0x212BC6368](*(_QWORD *)v587, 0x1000C8000313F17, v470);
      v578 = (8 * v550 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)v587 = 0;
      *(_QWORD *)(v587 + 8) = v578 >> 3;
      *(_QWORD *)v587 = operator new(v578, (std::align_val_t)0x20uLL);
    }
  }
  else
  {
    v614 = v544;
    v551 = (char *)operator new((8 * (v544 + 6 * (v549 + ((*(_QWORD *)(a1 + 2376) - *(_QWORD *)(a1 + 2368)) >> 2)))+ 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v553 = v551;
    v554 = *(_QWORD *)v587;
    if ((v545 & 0x7FFFFFFF8) != 0)
    {
      v555 = 6 * v549;
      v556 = v545 >> 3;
      v557 = v554 + 8 * *(unsigned int *)(v587 + 36);
      v558 = &v551[8 * v544];
      v559 = v556 - 1;
      do
      {
        v560 = v559;
        v561 = *(unsigned int *)&v508[8 * v559];
        v562 = (const void *)(v557 + 8 * v561);
        v563 = (uint64_t)v562 + 8 * v555 + -8 * v561;
        v552 = v563 - (_QWORD)v562;
        if ((const void *)v563 != v562)
          memmove(&v558[8 * *(unsigned int *)&v508[8 * v559 + 4]], v562, v552);
        --v559;
        v555 = v561;
      }
      while (v560);
    }
    v571 = (unsigned int *)v620;
    if (((*((_QWORD *)&v620 + 1) - (_QWORD)v620) & 0x7FFFFFFF8) != 0)
    {
      v579 = 4 * *(_DWORD *)(v587 + 24);
      v580 = v554 + 8 * *(unsigned int *)(v587 + 32);
      v581 = ((*((_QWORD *)&v620 + 1) - (_QWORD)v620) >> 3) - 1;
      do
      {
        v582 = v581;
        v583 = v571[2 * v581];
        v584 = (const void *)(v580 + 8 * v583);
        v585 = (uint64_t)v584 + 8 * v579 + -8 * v583;
        v552 = v585 - (_QWORD)v584;
        if ((const void *)v585 != v584)
          memmove(&v553[8 * v571[2 * v581 + 1]], v584, v552);
        --v581;
        v579 = v583;
      }
      while (v582);
    }
    *(_QWORD *)v587 = v553;
    *(_QWORD *)(v587 + 8) = ((8 * v550 + 31) & 0xFFFFFFFE0uLL) >> 3;
    *(_DWORD *)(v587 + 16) = v550;
    if (v554)
      MEMORY[0x212BC6368](v554, 0x1000C8000313F17, v552);
    v544 = v614;
  }
  v586 = *(_DWORD *)(v587 + 28);
  *(_DWORD *)(v587 + 24) += (*(_QWORD *)(a1 + 2352) - *(_QWORD *)(a1 + 2344)) >> 2;
  *(_DWORD *)(v587 + 28) = v586 + ((*(_QWORD *)(a1 + 2376) - *(_QWORD *)(a1 + 2368)) >> 2);
  *(_DWORD *)(v587 + 36) = *(_DWORD *)(v587 + 32) + v544;
  if (v508)
    operator delete(v508);
  if (v571)
  {
    v191 = v571;
LABEL_203:
    operator delete(v191);
  }
LABEL_204:
  sub_20F3D15E0(v596);
  v192 = a1;
  if (*(_BYTE *)(a1 + 313))
  {
    v193 = (int64x2_t *)(a1 + 296);
    v194 = *(_QWORD **)(a1 + 240);
    v195 = *(_QWORD **)(a1 + 248);
    if (v194 == v195)
    {
      v196 = *(_QWORD **)(a1 + 240);
    }
    else
    {
      v196 = *(_QWORD **)(a1 + 248);
      v197 = v194 + 111;
      while (!*((_BYTE *)v197 - 8))
      {
        v44 = v197 == v195;
        v197 += 111;
        if (v44)
          goto LABEL_225;
      }
      --*(_DWORD *)(*(v197 - 19) + 8);
      --*(_DWORD *)(*(v197 - 18) + 8);
      *(v197 - 19) = 0;
      *(v197 - 18) = 0;
      *v193 = vaddq_s64(*v193, (int64x2_t)xmmword_2103B2310);
      v198 = v197 - 111;
      if (v197 - 111 != v195)
      {
        if (v197 == v195)
        {
          v196 = v197 - 111;
        }
        else
        {
          v196 = v197 - 111;
          do
          {
            while (1)
            {
              v199 = v197;
              if (!*((_BYTE *)v198 + 1768))
                break;
              --*(_DWORD *)(v198[203] + 8);
              --*(_DWORD *)(v198[204] + 8);
              v198[203] = 0;
              v198[204] = 0;
              *v193 = vaddq_s64(*v193, (int64x2_t)xmmword_2103B2310);
              v197 += 111;
              v198 = v199;
              if (v199 + 111 == v195)
                goto LABEL_225;
            }
            *v196 = *v197;
            *(_OWORD *)(v196 + 1) = *((_OWORD *)v198 + 56);
            memcpy(v196 + 3, v198 + 114, 0x120uLL);
            memcpy(v196 + 39, v198 + 150, 0x120uLL);
            v200 = *((_OWORD *)v198 + 99);
            v201 = *((_OWORD *)v198 + 100);
            v202 = *((_OWORD *)v198 + 98);
            *(_OWORD *)(v196 + 83) = *((_OWORD *)v198 + 97);
            *(_OWORD *)(v196 + 85) = v202;
            v203 = *((_OWORD *)v198 + 93);
            v204 = *((_OWORD *)v198 + 94);
            v205 = *((_OWORD *)v198 + 96);
            *(_OWORD *)(v196 + 79) = *((_OWORD *)v198 + 95);
            *(_OWORD *)(v196 + 81) = v205;
            *(_OWORD *)(v196 + 75) = v203;
            *(_OWORD *)(v196 + 77) = v204;
            *(_OWORD *)(v196 + 87) = v200;
            *(_OWORD *)(v196 + 89) = v201;
            *((_BYTE *)v196 + 728) = *((_BYTE *)v198 + 1616);
            v196[92] = v198[203];
            v196[93] = v198[204];
            v207 = *(_OWORD *)(v198 + 207);
            v206 = *(_OWORD *)(v198 + 209);
            *((_OWORD *)v196 + 47) = *(_OWORD *)(v198 + 205);
            *((_OWORD *)v196 + 48) = v207;
            *((_OWORD *)v196 + 49) = v206;
            v208 = *(_OWORD *)(v198 + 211);
            v209 = *(_OWORD *)(v198 + 215);
            *((_OWORD *)v196 + 51) = *(_OWORD *)(v198 + 213);
            *((_OWORD *)v196 + 52) = v209;
            *((_OWORD *)v196 + 50) = v208;
            v210 = v198[217];
            *((_BYTE *)v196 + 856) = *((_BYTE *)v198 + 1744);
            v196[106] = v210;
            v211 = *(_OWORD *)(v198 + 219);
            v198[219] = 0;
            v198[220] = 0;
            v212 = (std::__shared_weak_count *)v196[109];
            *((_OWORD *)v196 + 54) = v211;
            if (v212)
            {
              p_shared_owners = (unint64_t *)&v212->__shared_owners_;
              do
                v214 = __ldaxr(p_shared_owners);
              while (__stlxr(v214 - 1, p_shared_owners));
              if (!v214)
              {
                ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                std::__shared_weak_count::__release_weak(v212);
              }
            }
            *((_BYTE *)v196 + 880) = *((_BYTE *)v198 + 1768);
            v196 += 111;
            v197 = v199 + 111;
            v198 = v199;
          }
          while (v199 + 111 != v195);
        }
      }
    }
LABEL_225:
    v215 = a1;
    v216 = *(_QWORD **)(a1 + 248);
    if (v196 != v216)
    {
      while (v216 != v196)
      {
        v217 = (std::__shared_weak_count *)*(v216 - 2);
        if (v217)
        {
          v218 = (unint64_t *)&v217->__shared_owners_;
          do
            v219 = __ldaxr(v218);
          while (__stlxr(v219 - 1, v218));
          if (!v219)
          {
            ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
            std::__shared_weak_count::__release_weak(v217);
          }
        }
        v216 -= 111;
      }
      v215 = a1;
      *(_QWORD *)(a1 + 248) = v196;
    }
    v220 = *(_QWORD **)(v215 + 264);
    v221 = *(_QWORD **)(v215 + 272);
    if (v220 == v221)
    {
      v222 = *(_QWORD **)(v215 + 264);
    }
    else
    {
      v222 = *(_QWORD **)(v215 + 272);
      v223 = v220 + 111;
      while (!*((_BYTE *)v223 - 8))
      {
        v44 = v223 == v221;
        v223 += 111;
        if (v44)
          goto LABEL_255;
      }
      --*(_DWORD *)(*(v223 - 19) + 8);
      --*(_DWORD *)(*(v223 - 18) + 8);
      *(v223 - 19) = 0;
      *(v223 - 18) = 0;
      *v193 = vaddq_s64(*v193, (int64x2_t)xmmword_2103B2310);
      v224 = v223 - 111;
      if (v223 - 111 != v221)
      {
        if (v223 == v221)
        {
          v222 = v223 - 111;
        }
        else
        {
          v222 = v223 - 111;
          do
          {
            while (1)
            {
              v225 = v223;
              if (!*((_BYTE *)v224 + 1768))
                break;
              --*(_DWORD *)(v224[203] + 8);
              --*(_DWORD *)(v224[204] + 8);
              v224[203] = 0;
              v224[204] = 0;
              *v193 = vaddq_s64(*v193, (int64x2_t)xmmword_2103B2310);
              v223 += 111;
              v224 = v225;
              if (v225 + 111 == v221)
                goto LABEL_255;
            }
            *v222 = *v223;
            *(_OWORD *)(v222 + 1) = *((_OWORD *)v224 + 56);
            memcpy(v222 + 3, v224 + 114, 0x120uLL);
            memcpy(v222 + 39, v224 + 150, 0x120uLL);
            v226 = *((_OWORD *)v224 + 99);
            v227 = *((_OWORD *)v224 + 100);
            v228 = *((_OWORD *)v224 + 98);
            *(_OWORD *)(v222 + 83) = *((_OWORD *)v224 + 97);
            *(_OWORD *)(v222 + 85) = v228;
            v229 = *((_OWORD *)v224 + 93);
            v230 = *((_OWORD *)v224 + 94);
            v231 = *((_OWORD *)v224 + 96);
            *(_OWORD *)(v222 + 79) = *((_OWORD *)v224 + 95);
            *(_OWORD *)(v222 + 81) = v231;
            *(_OWORD *)(v222 + 75) = v229;
            *(_OWORD *)(v222 + 77) = v230;
            *(_OWORD *)(v222 + 87) = v226;
            *(_OWORD *)(v222 + 89) = v227;
            *((_BYTE *)v222 + 728) = *((_BYTE *)v224 + 1616);
            v222[92] = v224[203];
            v222[93] = v224[204];
            v233 = *(_OWORD *)(v224 + 207);
            v232 = *(_OWORD *)(v224 + 209);
            *((_OWORD *)v222 + 47) = *(_OWORD *)(v224 + 205);
            *((_OWORD *)v222 + 48) = v233;
            *((_OWORD *)v222 + 49) = v232;
            v234 = *(_OWORD *)(v224 + 211);
            v235 = *(_OWORD *)(v224 + 215);
            *((_OWORD *)v222 + 51) = *(_OWORD *)(v224 + 213);
            *((_OWORD *)v222 + 52) = v235;
            *((_OWORD *)v222 + 50) = v234;
            v236 = v224[217];
            *((_BYTE *)v222 + 856) = *((_BYTE *)v224 + 1744);
            v222[106] = v236;
            v237 = *(_OWORD *)(v224 + 219);
            v224[219] = 0;
            v224[220] = 0;
            v238 = (std::__shared_weak_count *)v222[109];
            *((_OWORD *)v222 + 54) = v237;
            if (v238)
            {
              v239 = (unint64_t *)&v238->__shared_owners_;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                std::__shared_weak_count::__release_weak(v238);
              }
            }
            *((_BYTE *)v222 + 880) = *((_BYTE *)v224 + 1768);
            v222 += 111;
            v223 = v225 + 111;
            v224 = v225;
          }
          while (v225 + 111 != v221);
        }
      }
    }
LABEL_255:
    v192 = a1;
    v241 = *(_QWORD **)(a1 + 272);
    if (v222 != v241)
    {
      while (v241 != v222)
      {
        v242 = (std::__shared_weak_count *)*(v241 - 2);
        if (v242)
        {
          v243 = (unint64_t *)&v242->__shared_owners_;
          do
            v244 = __ldaxr(v243);
          while (__stlxr(v244 - 1, v243));
          if (!v244)
          {
            ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
            std::__shared_weak_count::__release_weak(v242);
          }
        }
        v241 -= 111;
      }
      v192 = a1;
      *(_QWORD *)(a1 + 272) = v222;
    }
  }
  v245 = *(_QWORD *)(v192 + 48);
  v246 = *(_QWORD *)(v192 + 56);
  if (v246 == v245)
  {
    v249 = *(_QWORD *)(v192 + 56);
  }
  else
  {
    v247 = v192 + 72;
    v248 = -16 - v246;
    v249 = *(_QWORD *)(v192 + 56);
    do
    {
      while (1)
      {
        while (1)
        {
          v250 = *(_QWORD *)(v249 - 8);
          v249 -= 16;
          if ((*(_BYTE *)(v250 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v250 + 4) = 0;
          v248 += 16;
          if (v249 == v245)
            goto LABEL_280;
        }
        sub_20F3D6D28(v247, v250);
        v251 = v249 + 16;
        v245 = *(_QWORD *)(a1 + 48);
        v252 = *(_QWORD *)(a1 + 56);
        if (v249 + 16 != v252)
          break;
        v246 = v249;
        *(_QWORD *)(a1 + 56) = v249;
        v248 += 16;
        if (v249 == v245)
          goto LABEL_280;
      }
      v253 = v252 - v249 - 32;
      v246 = v249;
      if (v253 < 0x10)
        goto LABEL_710;
      v254 = (v253 >> 4) + 1;
      v255 = 16 * (v254 & 0x1FFFFFFFFFFFFFFELL);
      v246 = v249 + v255;
      v251 += v255;
      v256 = (((unint64_t)(v252 + v248) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v257 = v245 + 16 * ((v249 - v245) >> 4) + 24;
      do
      {
        v258 = *(_DWORD *)(v257 + 8);
        *(_DWORD *)(v257 - 24) = *(_DWORD *)(v257 - 8);
        *(_DWORD *)(v257 - 8) = v258;
        v259 = *(_QWORD *)(v257 + 16);
        *(_QWORD *)(v257 - 16) = *(_QWORD *)v257;
        *(_QWORD *)v257 = v259;
        v257 += 32;
        v256 -= 2;
      }
      while (v256);
      if (v254 != (v254 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_710:
        do
        {
          *(_DWORD *)v246 = *(_DWORD *)v251;
          *(_QWORD *)(v246 + 8) = *(_QWORD *)(v251 + 8);
          v246 += 16;
          v251 += 16;
        }
        while (v251 != v252);
      }
      *(_QWORD *)(a1 + 56) = v246;
      v248 += 16;
    }
    while (v249 != v245);
  }
LABEL_280:
  v260 = a1;
  v262 = *(_QWORD *)(a1 + 144);
  v261 = *(_QWORD *)(a1 + 152);
  if (v261 == v262)
  {
    v264 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v263 = -16 - v261;
    v264 = *(_QWORD *)(a1 + 152);
    do
    {
      while (1)
      {
        while (1)
        {
          v265 = *(_QWORD *)(v264 - 8);
          v264 -= 16;
          if ((*(_BYTE *)(v265 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v265 + 4) = 0;
          v263 += 16;
          if (v264 == v262)
            goto LABEL_293;
        }
        sub_20F3D7028(a1 + 168, v265);
        v266 = v264 + 16;
        v262 = *(_QWORD *)(a1 + 144);
        v267 = *(_QWORD *)(a1 + 152);
        if (v264 + 16 != v267)
          break;
        v261 = v264;
        *(_QWORD *)(a1 + 152) = v264;
        v263 += 16;
        if (v264 == v262)
          goto LABEL_293;
      }
      v268 = v267 - v264 - 32;
      v261 = v264;
      if (v268 < 0x10)
        goto LABEL_711;
      v269 = (v268 >> 4) + 1;
      v270 = 16 * (v269 & 0x1FFFFFFFFFFFFFFELL);
      v261 = v264 + v270;
      v266 += v270;
      v271 = (((unint64_t)(v267 + v263) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v272 = v262 + 16 * ((v264 - v262) >> 4) + 24;
      do
      {
        v273 = *(_DWORD *)(v272 + 8);
        *(_DWORD *)(v272 - 24) = *(_DWORD *)(v272 - 8);
        *(_DWORD *)(v272 - 8) = v273;
        v274 = *(_QWORD *)(v272 + 16);
        *(_QWORD *)(v272 - 16) = *(_QWORD *)v272;
        *(_QWORD *)v272 = v274;
        v272 += 32;
        v271 -= 2;
      }
      while (v271);
      if (v269 != (v269 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_711:
        do
        {
          *(_DWORD *)v261 = *(_DWORD *)v266;
          *(_QWORD *)(v261 + 8) = *(_QWORD *)(v266 + 8);
          v261 += 16;
          v266 += 16;
        }
        while (v266 != v267);
      }
      *(_QWORD *)(a1 + 152) = v261;
      v263 += 16;
    }
    while (v264 != v262);
LABEL_293:
    v260 = a1;
    v249 = *(_QWORD *)(a1 + 48);
    v246 = *(_QWORD *)(a1 + 56);
  }
  *(_WORD *)(v260 + 312) = 1;
  *(_QWORD *)(v260 + 328) = *(_QWORD *)(v260 + 320);
  *(_QWORD *)(v260 + 376) = *(_QWORD *)(v260 + 368);
  *(_QWORD *)(v260 + 424) = *(_QWORD *)(v260 + 416);
  *(_QWORD *)(v260 + 352) = *(_QWORD *)(v260 + 344);
  *(_QWORD *)(v260 + 400) = *(_QWORD *)(v260 + 392);
  *(_QWORD *)(v260 + 448) = *(_QWORD *)(v260 + 440);
  if (v249 != v246)
  {
    v275 = 0;
    do
    {
      v276 = *(_QWORD *)(v249 + 8);
      if (*(_BYTE *)(v276 + 20))
        v277 = v275;
      else
        v277 = -1;
      v275 += *(unsigned __int8 *)(v276 + 20);
      *(_DWORD *)v276 = v277;
      v249 += 16;
    }
    while (v249 != v246);
  }
  if (v264 != v261)
  {
    v278 = 0;
    do
    {
      v279 = *(_QWORD *)(v264 + 8);
      if (*(_BYTE *)(v279 + 20))
        v280 = v278;
      else
        v280 = -1;
      v278 += *(unsigned __int8 *)(v279 + 20);
      *(_DWORD *)v279 = v280;
      v264 += 16;
    }
    while (v264 != v261);
  }
  v612 = *(_DWORD *)(a1 + 524);
  v281 = *(_QWORD **)(a1 + 1128);
  v282 = (char **)(v281 + 65);
  v283 = *(_QWORD *)(a1 + 1120);
  v284 = v281;
  if (*(_BYTE *)(v283 + 272))
  {
    v281[66] = v281[65];
    v281[69] = v281[68];
    v601 = (void **)(v281 + 65);
    sub_20F3D3988((uint64_t)(v281 + 65));
    if (*(_BYTE *)(v283 + 272))
    {
      v285 = (void *)v281[65];
      v281[66] = v285;
      v286 = ((*(_QWORD *)(v283 + 16) - *(_QWORD *)(v283 + 8)) >> 4);
      if (v286 > (uint64_t)(v281[67] - (_QWORD)v285) >> 2)
      {
        v287 = (char *)operator new(4 * v286);
        v281[65] = v287;
        v281[66] = v287;
        v281[67] = &v287[4 * v286];
        if (v285)
          operator delete(v285);
      }
      v288 = *(int **)(v283 + 8);
      v289 = *(int **)(v283 + 16);
      *(_QWORD *)v607 = v283;
      while (2)
      {
        if (v288 != v289)
        {
          if (!*(_BYTE *)(*((_QWORD *)v288 + 1) + 20))
            goto LABEL_315;
          v291 = *v288;
          v292 = (char *)v281[66];
          v293 = v281[67];
          if ((unint64_t)v292 < v293)
          {
            *(_DWORD *)v292 = v291;
            v290 = (uint64_t)(v292 + 4);
            goto LABEL_314;
          }
          v294 = (char *)*v601;
          v295 = v292 - (_BYTE *)*v601;
          v296 = v295 >> 2;
          v297 = (v295 >> 2) + 1;
          if (v297 >> 62)
            goto LABEL_702;
          v298 = v293 - (_QWORD)v294;
          if (v298 >> 1 > v297)
            v297 = v298 >> 1;
          if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFFCLL)
            v299 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v299 = v297;
          if (v299)
          {
            if (v299 >> 62)
              goto LABEL_700;
            v300 = operator new(4 * v299);
            v301 = &v300[4 * v296];
            *v301 = v291;
            v290 = (uint64_t)(v301 + 1);
            v302 = v292 - v294;
            if (v292 == v294)
            {
LABEL_336:
              v281[65] = v301;
              v281[66] = v290;
              v281[67] = &v300[4 * v299];
              if (v294)
                operator delete(v294);
LABEL_314:
              v281[66] = v290;
LABEL_315:
              v288 += 4;
              continue;
            }
          }
          else
          {
            v300 = 0;
            v301 = (_DWORD *)(4 * v296);
            *(_DWORD *)(4 * v296) = v291;
            v290 = 4 * v296 + 4;
            v302 = v292 - v294;
            if (v292 == v294)
              goto LABEL_336;
          }
          v303 = v302 - 4;
          if (v303 < 0x2C)
            goto LABEL_712;
          if ((unint64_t)(v292 - v300 - v295) < 0x20)
            goto LABEL_712;
          v304 = (v303 >> 2) + 1;
          v305 = 4 * (v304 & 0x7FFFFFFFFFFFFFF8);
          v306 = &v292[-v305];
          v301 = (_DWORD *)((char *)v301 - v305);
          v307 = &v300[4 * v296 - 16];
          v308 = v292 - 16;
          v309 = v304 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v310 = *(_OWORD *)v308;
            *(v307 - 1) = *((_OWORD *)v308 - 1);
            *v307 = v310;
            v307 -= 2;
            v308 -= 32;
            v309 -= 8;
          }
          while (v309);
          v292 = v306;
          if (v304 != (v304 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_712:
            do
            {
              v311 = *((_DWORD *)v292 - 1);
              v292 -= 4;
              *--v301 = v311;
            }
            while (v292 != v294);
          }
          goto LABEL_336;
        }
        break;
      }
      if (*(_BYTE *)(*(_QWORD *)v607 + 272))
      {
        v312 = (void *)v281[68];
        v281[69] = v312;
        v313 = ((*(_QWORD *)(*(_QWORD *)v607 + 112) - *(_QWORD *)(*(_QWORD *)v607 + 104)) >> 4);
        if (v313 > (uint64_t)(v281[70] - (_QWORD)v312) >> 2)
        {
          v314 = (char *)operator new(4 * v313);
          v281[68] = v314;
          v281[69] = v314;
          v281[70] = &v314[4 * v313];
          if (v312)
            operator delete(v312);
        }
        v315 = *(int **)(*(_QWORD *)v607 + 104);
        v316 = *(int **)(*(_QWORD *)v607 + 112);
        if (v315 != v316)
        {
          v608 = (void **)(v281 + 68);
          while (2)
          {
            if (!*(_BYTE *)(*((_QWORD *)v315 + 1) + 20))
              goto LABEL_346;
            v318 = *v315;
            v319 = (char *)v281[69];
            v320 = v281[70];
            if ((unint64_t)v319 >= v320)
            {
              v321 = (char *)*v608;
              v322 = v319 - (_BYTE *)*v608;
              v323 = v322 >> 2;
              v324 = (v322 >> 2) + 1;
              if (v324 >> 62)
                goto LABEL_702;
              v325 = v320 - (_QWORD)v321;
              if (v325 >> 1 > v324)
                v324 = v325 >> 1;
              if ((unint64_t)v325 >= 0x7FFFFFFFFFFFFFFCLL)
                v326 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v326 = v324;
              if (v326)
              {
                if (v326 >> 62)
                  goto LABEL_700;
                v327 = operator new(4 * v326);
                v328 = &v327[4 * v323];
                *v328 = v318;
                v317 = (uint64_t)(v328 + 1);
                v329 = v319 - v321;
                if (v319 == v321)
                {
LABEL_366:
                  v281[68] = v328;
                  v281[69] = v317;
                  v281[70] = &v327[4 * v326];
                  if (v321)
                    operator delete(v321);
LABEL_345:
                  v281[69] = v317;
LABEL_346:
                  v315 += 4;
                  if (v315 == v316)
                    goto LABEL_368;
                  continue;
                }
              }
              else
              {
                v327 = 0;
                v328 = (_DWORD *)(4 * v323);
                *(_DWORD *)(4 * v323) = v318;
                v317 = 4 * v323 + 4;
                v329 = v319 - v321;
                if (v319 == v321)
                  goto LABEL_366;
              }
              v330 = v329 - 4;
              if (v330 < 0x2C)
                goto LABEL_713;
              if ((unint64_t)(v319 - v327 - v322) < 0x20)
                goto LABEL_713;
              v331 = (v330 >> 2) + 1;
              v332 = 4 * (v331 & 0x7FFFFFFFFFFFFFF8);
              v333 = &v319[-v332];
              v328 = (_DWORD *)((char *)v328 - v332);
              v334 = &v327[4 * v323 - 16];
              v335 = v319 - 16;
              v336 = v331 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v337 = *(_OWORD *)v335;
                *(v334 - 1) = *((_OWORD *)v335 - 1);
                *v334 = v337;
                v334 -= 2;
                v335 -= 32;
                v336 -= 8;
              }
              while (v336);
              v319 = v333;
              if (v331 != (v331 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_713:
                do
                {
                  v338 = *((_DWORD *)v319 - 1);
                  v319 -= 4;
                  *--v328 = v338;
                }
                while (v319 != v321);
              }
              goto LABEL_366;
            }
            break;
          }
          *(_DWORD *)v319 = v318;
          v317 = (uint64_t)(v319 + 4);
          goto LABEL_345;
        }
      }
    }
LABEL_368:
    v284 = *(_QWORD **)(a1 + 1128);
    v282 = (char **)(v281 + 65);
  }
  sub_20F3D2520(v284, v282);
  v339 = *(unsigned int **)(a1 + 1136);
  *(_QWORD *)(a1 + 1144) = v339;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1160) = 0;
  v340 = (unsigned int *)v281[65];
  v341 = (unsigned int *)v281[66];
  if (v340 != v341)
  {
    v342 = a1;
    while (1)
    {
      while (1)
      {
        v344 = *v340;
        v345 = *(_QWORD *)(v342 + 1152);
        if ((unint64_t)v339 >= v345)
          break;
        *v339 = 0;
        v339[1] = v344;
        v343 = v339 + 3;
        v339[2] = 4;
        v342 = a1;
        *(_QWORD *)(a1 + 1144) = v339 + 3;
        ++v340;
        v339 += 3;
        if (v340 == v341)
          goto LABEL_392;
      }
      v346 = *(_DWORD **)(v342 + 1136);
      v347 = 0xAAAAAAAAAAAAAAABLL * (v339 - v346) + 1;
      if (v347 > 0x1555555555555555)
LABEL_701:
        sub_20E867F44();
      v348 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v345 - (_QWORD)v346) >> 2);
      if (2 * v348 > v347)
        v347 = 2 * v348;
      if (v348 >= 0xAAAAAAAAAAAAAAALL)
        v349 = 0x1555555555555555;
      else
        v349 = v347;
      if (v349)
      {
        if (v349 > 0x1555555555555555)
          goto LABEL_700;
        v350 = (char *)operator new(12 * v349);
      }
      else
      {
        v350 = 0;
      }
      v351 = &v350[4 * (v339 - v346)];
      *(_DWORD *)v351 = 0;
      *((_DWORD *)v351 + 1) = v344;
      *((_DWORD *)v351 + 2) = 4;
      v352 = v351;
      if (v339 == v346)
      {
        v356 = &v350[12 * v349];
        *(_QWORD *)(a1 + 1136) = v351;
        v343 = (unsigned int *)(v351 + 12);
        *(_QWORD *)(a1 + 1144) = v351 + 12;
        *(_QWORD *)(a1 + 1152) = v356;
        if (!v339)
          goto LABEL_387;
      }
      else
      {
        do
        {
          v353 = *(_QWORD *)(v339 - 3);
          v339 -= 3;
          v354 = v339[2];
          *(_QWORD *)(v352 - 12) = v353;
          v352 -= 12;
          *((_DWORD *)v352 + 2) = v354;
        }
        while (v339 != v346);
        v339 = *(unsigned int **)(a1 + 1136);
        v355 = &v350[12 * v349];
        *(_QWORD *)(a1 + 1136) = v352;
        v343 = (unsigned int *)(v351 + 12);
        *(_QWORD *)(a1 + 1144) = v351 + 12;
        *(_QWORD *)(a1 + 1152) = v355;
        if (!v339)
          goto LABEL_387;
      }
      operator delete(v339);
LABEL_387:
      v342 = a1;
      *(_QWORD *)(a1 + 1144) = v343;
      ++v340;
      v339 = v343;
      if (v340 == v341)
        goto LABEL_392;
    }
  }
  v343 = v339;
LABEL_392:
  v357 = (unsigned int *)v281[68];
  v358 = (unsigned int *)v281[69];
  if (v357 != v358)
  {
    v359 = a1;
    while (1)
    {
      v361 = *v357;
      v362 = *(_QWORD *)(v359 + 1152);
      if ((unint64_t)v343 < v362)
      {
        *v343 = 1;
        v343[1] = v361;
        v360 = v343 + 3;
        v343[2] = 6;
      }
      else
      {
        v363 = *(_DWORD **)(v359 + 1136);
        v364 = 0xAAAAAAAAAAAAAAABLL * (v343 - v363) + 1;
        if (v364 > 0x1555555555555555)
          goto LABEL_701;
        v365 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v362 - (_QWORD)v363) >> 2);
        if (2 * v365 > v364)
          v364 = 2 * v365;
        if (v365 >= 0xAAAAAAAAAAAAAAALL)
          v366 = 0x1555555555555555;
        else
          v366 = v364;
        if (v366)
        {
          if (v366 > 0x1555555555555555)
            goto LABEL_700;
          v367 = (char *)operator new(12 * v366);
        }
        else
        {
          v367 = 0;
        }
        v368 = &v367[4 * (v343 - v363)];
        *(_DWORD *)v368 = 1;
        *((_DWORD *)v368 + 1) = v361;
        *((_DWORD *)v368 + 2) = 6;
        v369 = v368;
        if (v343 != v363)
        {
          do
          {
            v370 = *(_QWORD *)(v343 - 3);
            v343 -= 3;
            v371 = v343[2];
            *(_QWORD *)(v369 - 12) = v370;
            v369 -= 12;
            *((_DWORD *)v369 + 2) = v371;
          }
          while (v343 != v363);
          v343 = *(unsigned int **)(a1 + 1136);
          v372 = &v367[12 * v366];
          *(_QWORD *)(a1 + 1136) = v369;
          v360 = (unsigned int *)(v368 + 12);
          *(_QWORD *)(a1 + 1144) = v368 + 12;
          *(_QWORD *)(a1 + 1152) = v372;
          if (!v343)
            goto LABEL_395;
LABEL_412:
          operator delete(v343);
          goto LABEL_395;
        }
        v373 = &v367[12 * v366];
        *(_QWORD *)(a1 + 1136) = v368;
        v360 = (unsigned int *)(v368 + 12);
        *(_QWORD *)(a1 + 1144) = v368 + 12;
        *(_QWORD *)(a1 + 1152) = v373;
        if (v343)
          goto LABEL_412;
      }
LABEL_395:
      v359 = a1;
      *(_QWORD *)(a1 + 1144) = v360;
      ++v357;
      v343 = v360;
      if (v357 == v358)
        goto LABEL_414;
    }
  }
  v360 = v343;
LABEL_414:
  if (v612 == 1)
  {
    v379 = *(_QWORD *)(a1 + 1136);
    v380 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v360 - v379) >> 2));
    if (v360 == (unsigned int *)v379)
      v381 = 0;
    else
      v381 = v380;
    sub_20F3D89F0(v379, v360, v381, 1);
    v377 = *(unsigned int **)(a1 + 1136);
    v378 = *(unsigned int **)(a1 + 1144);
    if (v377 == v378)
      goto LABEL_428;
LABEL_426:
    v382 = 0;
    do
    {
      v383 = v377[2];
      v377[2] = v382;
      v384 = *v377;
      v377 += 3;
      v382 += v383;
      ++*(_QWORD *)(a1 + 1160 + 8 * v384);
    }
    while (v377 != v378);
    goto LABEL_428;
  }
  if (!v612)
  {
    v374 = *(_QWORD *)(a1 + 1136);
    v375 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v360 - v374) >> 2));
    if (v360 == (unsigned int *)v374)
      v376 = 0;
    else
      v376 = v375;
    sub_20F3D7328(v374, v360, v376, 1);
  }
  v377 = *(unsigned int **)(a1 + 1136);
  v378 = *(unsigned int **)(a1 + 1144);
  if (v377 != v378)
    goto LABEL_426;
LABEL_428:
  *(_QWORD *)(a1 + 1184) = *(_QWORD *)(a1 + 1176);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a1 + 1224);
  *(_QWORD *)(a1 + 1208) = *(_QWORD *)(a1 + 1200);
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a1 + 1248);
  v385 = *(_QWORD *)(a1 + 1160);
  if (v385)
  {
    sub_20E93DC84(a1 + 1176, v385);
    v386 = *(int32x4_t **)(a1 + 1176);
    v387 = *(int32x4_t **)(a1 + 1184);
    if (v386 != v387)
    {
      v388 = (char *)v387 - (char *)v386 - 4;
      if (v388 < 0x1C)
      {
        LODWORD(v389) = 0;
        v390 = *(int32x4_t **)(a1 + 1176);
        goto LABEL_435;
      }
      v391 = (v388 >> 2) + 1;
      v389 = v391 & 0x7FFFFFFFFFFFFFF8;
      v390 = (int32x4_t *)((char *)v386 + 4 * (v391 & 0x7FFFFFFFFFFFFFF8));
      v392 = (int32x4_t)xmmword_210365350;
      v393 = v386 + 1;
      v394.i64[0] = 0x400000004;
      v394.i64[1] = 0x400000004;
      v395.i64[0] = 0x800000008;
      v395.i64[1] = 0x800000008;
      v396 = v391 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v393[-1] = v392;
        *v393 = vaddq_s32(v392, v394);
        v392 = vaddq_s32(v392, v395);
        v393 += 2;
        v396 -= 8;
      }
      while (v396);
      if (v391 != v389)
      {
        do
        {
LABEL_435:
          v390->i32[0] = v389;
          v390 = (int32x4_t *)((char *)v390 + 4);
          LODWORD(v389) = v389 + 1;
        }
        while (v390 != v387);
      }
    }
  }
  v397 = *(_QWORD *)(a1 + 1160);
  v398 = *(_DWORD **)(a1 + 1224);
  v399 = (uint64_t)(*(_QWORD *)(a1 + 1232) - (_QWORD)v398) >> 2;
  if (v397 <= v399)
  {
    if (v397 < v399)
      *(_QWORD *)(a1 + 1232) = &v398[v397];
  }
  else
  {
    sub_20E93DC84(a1 + 1224, v397 - v399);
    v398 = *(_DWORD **)(a1 + 1224);
  }
  v400 = *(_DWORD **)(a1 + 1136);
  v401 = *(_DWORD **)(a1 + 1144);
  while (v400 != v401)
  {
    if (!*v400)
      *v398++ = v400[2];
    v400 += 3;
  }
  v402 = *(_QWORD *)(a1 + 1168);
  v403 = *(int32x4_t **)(a1 + 1208);
  v404 = *(int32x4_t **)(a1 + 1200);
  v405 = ((char *)v403 - (char *)v404) >> 2;
  if (v402 <= v405)
  {
    if (v402 < v405)
    {
      v403 = (int32x4_t *)((char *)v404 + 4 * v402);
      *(_QWORD *)(a1 + 1208) = v403;
    }
  }
  else
  {
    sub_20E93DC84(a1 + 1200, v402 - v405);
    v404 = *(int32x4_t **)(a1 + 1200);
    v403 = *(int32x4_t **)(a1 + 1208);
  }
  if (v404 != v403)
  {
    v406 = (char *)v403 - (char *)v404 - 4;
    if (v406 < 0x1C)
    {
      LODWORD(v407) = 0;
      v408 = v404;
      goto LABEL_455;
    }
    v409 = (v406 >> 2) + 1;
    v407 = v409 & 0x7FFFFFFFFFFFFFF8;
    v408 = (int32x4_t *)((char *)v404 + 4 * (v409 & 0x7FFFFFFFFFFFFFF8));
    v410 = (int32x4_t)xmmword_210365350;
    v411 = v404 + 1;
    v412.i64[0] = 0x400000004;
    v412.i64[1] = 0x400000004;
    v413.i64[0] = 0x800000008;
    v413.i64[1] = 0x800000008;
    v414 = v409 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v411[-1] = v410;
      *v411 = vaddq_s32(v410, v412);
      v410 = vaddq_s32(v410, v413);
      v411 += 2;
      v414 -= 8;
    }
    while (v414);
    if (v409 != v407)
    {
      do
      {
LABEL_455:
        v408->i32[0] = v407;
        v408 = (int32x4_t *)((char *)v408 + 4);
        LODWORD(v407) = v407 + 1;
      }
      while (v408 != v403);
    }
  }
  v415 = *(_QWORD *)(a1 + 1168);
  v416 = *(_DWORD **)(a1 + 1248);
  v417 = (uint64_t)(*(_QWORD *)(a1 + 1256) - (_QWORD)v416) >> 2;
  if (v415 <= v417)
  {
    v3 = v591;
    v1 = v592;
    v4 = v589;
    v2 = v590;
    if (v415 < v417)
      *(_QWORD *)(a1 + 1256) = &v416[v415];
  }
  else
  {
    sub_20E93DC84(a1 + 1248, v415 - v417);
    v416 = *(_DWORD **)(a1 + 1248);
    v3 = v591;
    v1 = v592;
    v4 = v589;
    v2 = v590;
  }
  v418 = *(_DWORD **)(a1 + 1136);
  v419 = *(_DWORD **)(a1 + 1144);
  while (v418 != v419)
  {
    if (*v418 == 1)
      *v416++ = v418[2];
    v418 += 3;
  }
  kdebug_trace();
LABEL_466:
  if (((unint64_t)(v3 - v4) >> 2) + ((unint64_t)(v1 - v2) >> 2))
    return 0;
  v421 = *(_QWORD *)(a1 + 48);
  v422 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 312))
  {
    for (j = 0; v421 != v422; v421 += 16)
    {
      v426 = *(_QWORD *)(v421 + 8);
      if ((*(_BYTE *)(v426 + 4) & 6) == 0 && *(_BYTE *)(v426 + 20))
        j += 4;
    }
    for (k = *(_QWORD *)(a1 + 144); k != *(_QWORD *)(a1 + 152); k += 16)
    {
      v425 = *(_QWORD *)(k + 8);
      if ((*(_BYTE *)(v425 + 4) & 6) == 0 && *(_BYTE *)(v425 + 20))
        j += 6;
    }
    goto LABEL_532;
  }
  v427 = 0;
  if (v421 == v422)
  {
    v429 = 0;
    v428 = 0;
    v431 = *(_QWORD *)(a1 + 144);
    v432 = *(_QWORD *)(a1 + 152);
    if (v431 != v432)
      goto LABEL_486;
  }
  else
  {
    v428 = 0;
    v429 = 0;
    do
    {
      v430 = *(_QWORD *)(v421 + 8);
      if ((*(_BYTE *)(v430 + 4) & 6) != 0)
      {
        v427 = 1;
        ++v428;
      }
      v429 += *(unsigned __int8 *)(v430 + 20);
      v421 += 16;
    }
    while (v421 != v422);
    v431 = *(_QWORD *)(a1 + 144);
    v432 = *(_QWORD *)(a1 + 152);
    if (v431 != v432)
    {
LABEL_486:
      v433 = 0;
      v434 = 0;
      do
      {
        v435 = *(_QWORD *)(v431 + 8);
        if ((*(_BYTE *)(v435 + 4) & 6) != 0)
        {
          v427 = 1;
          ++v433;
        }
        v434 += *(unsigned __int8 *)(v435 + 20);
        v431 += 16;
      }
      while (v431 != v432);
      if (v427)
        goto LABEL_491;
LABEL_531:
      j = 6 * v434 + 4 * v429;
      goto LABEL_532;
    }
  }
  v434 = 0;
  v433 = 0;
  if (!v427)
    goto LABEL_531;
LABEL_491:
  v436 = (_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a1 + 488);
  v437 = *(_QWORD *)(a1 + 240);
  v438 = *(_QWORD *)(a1 + 248);
  while (v437 != v438)
  {
    v439 = *(_QWORD *)(v437 + 736);
    if (*(_BYTE *)(v437 + 880)
      || (*(_BYTE *)(v439 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v437 + 744) + 4) & 6) != 0)
    {
      sub_20F394A20((uint64_t)v436, v439);
      sub_20F394A20((uint64_t)v436, *(_QWORD *)(v437 + 744));
    }
    v437 += 888;
  }
  v440 = *(_QWORD *)(a1 + 264);
  v441 = *(_QWORD *)(a1 + 272);
  while (v440 != v441)
  {
    v442 = *(_QWORD *)(v440 + 736);
    if (*(_BYTE *)(v440 + 880)
      || (*(_BYTE *)(v442 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v440 + 744) + 4) & 6) != 0)
    {
      sub_20F3D35E0(v436, v442);
      sub_20F3D35E0(v436, *(_QWORD *)(v440 + 744));
    }
    v440 += 888;
  }
  v443 = (*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 2;
  if (v428 > v443)
    LODWORD(v443) = v428;
  v181 = v429 >= v443;
  v444 = v429 - v443;
  if (!v181)
    v444 = 0;
  v445 = (*(_QWORD *)(a1 + 496) - *(_QWORD *)(a1 + 488)) >> 2;
  if (v433 > v445)
    LODWORD(v445) = v433;
  v181 = v434 >= v445;
  v446 = v434 - v445;
  if (!v181)
    v446 = 0;
  j = 6 * v446 + 4 * v444;
  v447 = *(_QWORD *)(a1 + 240);
  v448 = *(_QWORD *)(a1 + 248);
  while (v447 != v448)
  {
    v449 = *(_QWORD *)(v447 + 736);
    if (*(_BYTE *)(v447 + 880)
      || (*(_BYTE *)(v449 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v447 + 744) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v449 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v447 + 744) + 8);
    }
    v447 += 888;
  }
  v450 = *(_QWORD *)(a1 + 264);
  v451 = *(_QWORD *)(a1 + 272);
  while (v450 != v451)
  {
    v452 = *(_QWORD *)(v450 + 736);
    if (*(_BYTE *)(v450 + 880)
      || (*(_BYTE *)(v452 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v450 + 744) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v452 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v450 + 744) + 8);
    }
    v450 += 888;
  }
LABEL_532:
  if (!j)
    return 1;
  if (*(_BYTE *)(a1 + 312))
  {
LABEL_540:
    v457 = *(_QWORD *)(a1 + 304);
    return v457 < j;
  }
  v453 = *(_QWORD *)(a1 + 48);
  v454 = *(_QWORD *)(a1 + 56);
  if (v453 == v454)
  {
LABEL_537:
    v455 = *(_QWORD *)(a1 + 144);
    v456 = *(_QWORD *)(a1 + 152);
    if (v455 != v456)
    {
      while ((*(_BYTE *)(*(_QWORD *)(v455 + 8) + 4) & 6) == 0)
      {
        v455 += 16;
        if (v455 == v456)
          goto LABEL_540;
      }
      goto LABEL_542;
    }
    goto LABEL_540;
  }
  while ((*(_BYTE *)(*(_QWORD *)(v453 + 8) + 4) & 6) == 0)
  {
    v453 += 16;
    if (v453 == v454)
      goto LABEL_537;
  }
LABEL_542:
  v458 = *(_QWORD *)(a1 + 240);
  v459 = *(_QWORD *)(a1 + 248);
  if (v458 == v459)
  {
    v460 = 0;
  }
  else
  {
    v460 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v458 + 736) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v458 + 744) + 4) & 6) == 0)
        ++v460;
      v458 += 888;
    }
    while (v458 != v459);
  }
  v461 = *(_QWORD *)(a1 + 264);
  v462 = *(_QWORD *)(a1 + 272);
  if (v461 == v462)
  {
    v463 = 0;
  }
  else
  {
    v463 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v461 + 736) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v461 + 744) + 4) & 6) == 0)
        ++v463;
      v461 += 888;
    }
    while (v461 != v462);
  }
  v457 = 6 * (v463 + v460);
  return v457 < j;
}

void sub_20F3CD1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  sub_20E9AA8C8(v29 - 144);
  sub_20EDB3070((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3CD27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB3070((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3CD290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB3070((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3CD2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB3070((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3CD2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB3070((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3CD2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB3070((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3CD2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB3070((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3CD2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB3070((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3CD308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  sub_20F3D3778(a18);
  _Unwind_Resume(a1);
}

void sub_20F3CD31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  sub_20F3D3778(a18);
  _Unwind_Resume(a1);
}

void sub_20F3CD330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB3070((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3CD344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB3070((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3CD358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_20EDB3070((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F3CD36C(uint64_t a1)
{
  _QWORD *v1;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float64x2_t v12;
  float64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  float64x2_t *v22;
  _BOOL4 v23;
  uint64_t v24;
  float64x2_t *v25;
  int v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  int v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  double v113;
  float64x2_t v114;
  float64x2_t v115;
  __int128 v116;
  unsigned int v123;
  uint64_t v124;
  char *v125;
  char *v126;
  float64x2_t *v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  float64x2_t *v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  float64x2_t *v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  float64x2_t *v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t *v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t *v287;
  float64x2_t v288;
  float64x2_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int *v293;
  unsigned int *v294;
  int v295;
  int v296;
  int v297;
  unsigned int v298;
  unsigned int v299;
  float64_t v300;
  BOOL v301;
  uint64_t v302;
  float64x2_t *v303;
  uint64_t v304;
  float64x2_t *v305;
  float64x2_t *v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  uint64_t v400;
  int8x16_t v401;
  int8x16_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int8x16_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  int8x16_t v412;
  int8x16_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  int8x16_t v417;
  int8x16_t v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  int8x16_t v422;
  int8x16_t v423;
  unint64_t v424;
  unint64_t v425;
  float64x2_t *v426;
  int8x16_t v427;
  int8x16_t v428;
  unint64_t v429;
  unint64_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64_t v435;
  float64_t v436;
  double v437;
  float64x2_t *v438;
  float64x2_t *v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  uint64_t v533;
  _QWORD *v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  uint64_t v589;
  int8x16_t v590;
  int8x16_t v591;
  int8x16_t v592;
  int8x16_t v593;
  int8x16_t v594;
  int8x16_t v595;
  int8x16_t v596;
  unint64_t v597;
  unint64_t v598;
  unint64_t v599;
  unint64_t v600;
  int8x16_t v601;
  int8x16_t v602;
  unint64_t v603;
  unint64_t v604;
  unint64_t v605;
  int8x16_t v606;
  int8x16_t v607;
  unint64_t v608;
  unint64_t v609;
  unint64_t v610;
  int8x16_t v611;
  int8x16_t v612;
  unint64_t v613;
  unint64_t v614;
  float64x2_t *v615;
  int8x16_t v616;
  int8x16_t v617;
  unint64_t v618;
  unint64_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64_t v624;
  float64_t v625;
  double v626;
  _QWORD *v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  __int128 v682;
  int v685;
  int v686;
  uint64_t v687;
  char *v688;
  char *v689;
  uint64_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  uint64_t v762;
  char *v763;
  char *v764;
  uint64_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  uint64_t v820;
  char *v821;
  char *v822;
  float64x2_t *v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  uint64_t v884;
  char *v885;
  char *v886;
  uint64_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  float64x2_t v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  float64x2_t v904;
  float64x2_t v905;
  float64x2_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t *v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t *v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  uint64_t v978;
  int64x2_t *v979;
  float64x2_t *v980;
  float64x2_t *v981;
  int64x2_t *v982;
  std::mutex *v983;
  int64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  unint64_t *v988;
  uint64_t v989;
  uint64_t v990;
  float64x2_t v991;
  uint64_t v992;
  int v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  unsigned int v1001;
  int64x2_t v1002;
  int64x2_t v1003;
  int64x2_t v1004;
  int64x2_t v1005;
  int64x2_t v1006;
  int64x2_t v1007;
  int64x2_t v1008;
  int64x2_t v1009;
  int64x2_t v1010;
  int64x2_t v1011;
  int64x2_t v1012;
  int64x2_t v1013;
  int64x2_t v1014;
  int64x2_t v1015;
  int64x2_t v1016;
  int64x2_t v1017;
  int64x2_t v1018;
  int64x2_t v1019;
  __int128 v1020;
  __int128 v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  __int128 v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  int64x2_t v1034;
  int64x2_t v1035;
  int64x2_t v1036;
  int64x2_t v1037;
  int64x2_t v1038;
  int64x2_t v1039;
  int64x2_t v1040;
  int64x2_t v1041;
  int64x2_t v1042;
  int64x2_t v1043;
  int64x2_t v1044;
  int64x2_t v1045;
  int64x2_t v1046;
  int64x2_t v1047;
  int64x2_t v1048;
  int64x2_t v1049;
  int64x2_t v1050;
  int64x2_t v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  __int128 v1056;
  __int128 v1057;
  __int128 v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  int64x2_t v1066;
  int64x2_t v1067;
  int64x2_t v1068;
  int64x2_t v1069;
  int64x2_t v1070;
  int64x2_t v1071;
  int64x2_t v1072;
  int64x2_t v1073;
  int64x2_t v1074;
  int64x2_t v1075;
  int64x2_t v1076;
  int64x2_t v1077;
  int64x2_t v1078;
  int64x2_t v1079;
  int64x2_t v1080;
  int64x2_t v1081;
  int64x2_t v1082;
  int64x2_t v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  __int128 v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  int8x16_t v1098;
  int8x16_t v1099;
  int8x16_t v1100;
  int8x16_t v1101;
  int8x16_t v1102;
  int8x16_t v1103;
  int8x16_t v1104;
  int8x16_t v1105;
  int8x16_t v1106;
  int8x16_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  int8x16_t v1111;
  int8x16_t v1112;
  int8x16_t v1113;
  int8x16_t v1114;
  int8x16_t v1115;
  __int128 v1116;
  __int128 v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  int8x16_t v1130;
  int8x16_t v1131;
  int8x16_t v1132;
  int8x16_t v1133;
  int8x16_t v1134;
  int8x16_t v1135;
  int8x16_t v1136;
  int8x16_t v1137;
  int8x16_t v1138;
  int8x16_t v1139;
  float64x2_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  int8x16_t v1143;
  int8x16_t v1144;
  int8x16_t v1145;
  int8x16_t v1146;
  int8x16_t v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  int8x16_t v1162;
  int8x16_t v1163;
  int8x16_t v1164;
  int8x16_t v1165;
  int8x16_t v1166;
  int8x16_t v1167;
  int8x16_t v1168;
  int8x16_t v1169;
  int8x16_t v1170;
  int8x16_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  int8x16_t v1175;
  int8x16_t v1176;
  int8x16_t v1177;
  int8x16_t v1178;
  int8x16_t v1179;
  __int128 v1180;
  __int128 v1181;
  __int128 v1182;
  __int128 v1183;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  __int128 v1189;
  __int128 v1190;
  __int128 v1191;
  __int128 v1192;
  __int128 v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  __int128 v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  __int128 v1225;
  float64x2_t v1226;
  float64x2_t v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  float64x2_t v1230;
  float64x2_t v1231;
  float64x2_t v1232;
  float64x2_t v1233;
  float64x2_t v1234;
  float64x2_t v1235;
  float64x2_t v1236;
  float64x2_t v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  float64x2_t v1240;
  float64x2_t v1241;
  float64x2_t v1242;
  float64x2_t v1243;
  __int128 v1244;
  __int128 v1245;
  __int128 v1246;
  __int128 v1247;
  __int128 v1248;
  __int128 v1249;
  __int128 v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  __int128 v1254;
  __int128 v1255;
  __int128 v1256;
  __int128 v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  float64x2_t v1260;
  float64x2_t v1261;
  float64x2_t v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  float64x2_t v1265;
  float64x2_t v1266;
  float64x2_t v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  float64x2_t v1270;
  float64x2_t v1271;
  float64x2_t v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  float64x2_t v1275;
  __int128 v1276;
  __int128 v1277;
  __int128 v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  __int128 v1283;
  __int128 v1284;
  __int128 v1285;
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  float64x2_t v1290;
  float64x2_t v1291;
  float64x2_t v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  float64x2_t v1295;
  float64x2_t v1296;
  float64x2_t v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  float64x2_t v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  __int128 v1308;
  __int128 v1309;
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  __int128 v1317;
  __int128 v1318;
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  int8x16_t v1322;
  int8x16_t v1323;
  int8x16_t v1324;
  int8x16_t v1325;
  int8x16_t v1326;
  int8x16_t v1327;
  int8x16_t v1328;
  int8x16_t v1329;
  int8x16_t v1330;
  int8x16_t v1331;
  float64x2_t v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  int8x16_t v1335;
  int8x16_t v1336;
  int8x16_t v1337;
  int8x16_t v1338;
  int8x16_t v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  __int128 v1352;
  __int128 v1353;
  int8x16_t v1354;
  int8x16_t v1355;
  int8x16_t v1356;
  int8x16_t v1357;
  int8x16_t v1358;
  int8x16_t v1359;
  int8x16_t v1360;
  int8x16_t v1361;
  int8x16_t v1362;
  int8x16_t v1363;
  float64x2_t v1364;
  float64x2_t v1365;
  float64x2_t v1366;
  int8x16_t v1367;
  int8x16_t v1368;
  int8x16_t v1369;
  int8x16_t v1370;
  int8x16_t v1371;
  __int128 v1372;
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  __int128 v1376;
  __int128 v1377;
  __int128 v1378;
  __int128 v1379;
  __int128 v1380;
  __int128 v1381;
  __int128 v1382;
  __int128 v1383;
  __int128 v1384;
  __int128 v1385;
  float64x2_t v1386[18];
  int64x2_t v1387[18];
  float64x2_t v1388;
  float64x2_t v1389;
  float64x2_t v1390;
  float64x2_t v1391;
  float64x2_t v1392;
  float64x2_t v1393;
  float64x2_t v1394;
  float64x2_t v1395;
  float64x2_t v1396;
  float64x2_t v1397;
  float64x2_t v1398;
  float64x2_t v1399;
  float64x2_t v1400;
  float64x2_t v1401;
  float64x2_t v1402;
  float64x2_t v1403;
  float64x2_t v1404;
  float64x2_t v1405;
  double *v1406;
  _QWORD *v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  int v1411;
  uint64_t v1412;
  __int128 v1413;
  __int128 v1414;
  __int128 v1415;
  uint64_t v1416;
  uint64_t v1417;

  v1 = (_QWORD *)MEMORY[0x24BDAC7A8](a1);
  v1417 = *MEMORY[0x24BDAC8D0];
  v9 = v1[1];
  v1406 = (double *)*v1;
  v1407 = v1 + 7;
  v990 = v10;
  v1408 = v10;
  v1409 = v9;
  v1410 = 0;
  v1411 = v11;
  v983 = (std::mutex *)&v1412;
  v12.f64[0] = 0.0;
  v1413 = 0u;
  v1414 = 0u;
  v1415 = 0u;
  v1412 = 850045863;
  v1416 = 0;
  v14 = *((_QWORD *)v1406 + 25);
  v13 = v1406[26];
  if (v14 != *(_QWORD *)&v13)
  {
    v992 = v9;
    *(_QWORD *)&v999.f64[0] = v9 + 40;
    v1000.f64[0] = v13;
    while (1)
    {
      v15 = *(unsigned int **)(v14 + 736);
      v16 = *(unsigned int **)(v14 + 744);
      if (((*((unsigned __int8 *)v16 + 4) >> 2) & 1) == (char)(32 * *((_BYTE *)v15 + 4)) >> 7)
        v17 = 2;
      else
        v17 = 1;
      if ((v17 & v1411) == 0)
        goto LABEL_4;
      v18 = *((unsigned __int8 *)v15 + 20);
      if (*((_BYTE *)v15 + 20))
      {
        if (*v15 == -1)
          goto LABEL_4;
      }
      v19 = *((unsigned __int8 *)v16 + 20);
      if (*((_BYTE *)v16 + 20))
      {
        if (*v16 == -1)
          goto LABEL_4;
      }
      if (*((_BYTE *)v15 + 20))
      {
        v20 = *(_DWORD *)(*v1407 + 4 * *v15);
        v1001 = *((unsigned __int8 *)v16 + 20);
        if (!v19)
          goto LABEL_17;
      }
      else
      {
        v20 = -1;
        v1001 = *((unsigned __int8 *)v16 + 20);
        if (!v19)
        {
LABEL_17:
          v21 = -1;
          goto LABEL_18;
        }
      }
      v21 = *(_DWORD *)(*v1407 + 4 * *v16);
LABEL_18:
      v22 = (float64x2_t *)(v14 + 800);
      v23 = sub_20F3DA6C4(v14 + 8, (int64x2_t **)(v14 + 736), (float64x2_t *)(v14 + 800), v1386, v12.f64[0], _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], (int64x2_t)_Q4);
      *(_BYTE *)(v14 + 856) = v23;
      if (v23)
      {
        v24 = *(_QWORD *)(v14 + 864);
        if (v24)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 24))(v24, v14 + 800);
          v25 = *(float64x2_t **)(v14 + 864);
          v26 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v25->f64[0] + 16))(v25);
          if (*(_BYTE *)(*(_QWORD *)(v14 + 736) + 20))
          {
            switch(v26)
            {
              case 0:
                v28 = v25[1];
                v27 = v25[2];
                v30 = v25[5];
                v29 = v25[6];
                v31 = v25[3];
                v32 = v25[4];
                v34 = v25[7];
                v33 = v25[8];
                v36 = v25[11];
                v35 = v25[12];
                v37 = v25[9];
                v38 = v25[10];
                v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, v1386[0].f64[0]), v32, v1386[0], 1), v34, v1386[1].f64[0]), v38, v1386[1], 1);
                v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, v1386[0].f64[0]), v30, v1386[0], 1), v33, v1386[1].f64[0]), v36, v1386[1], 1);
                v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v1386[0].f64[0]), v29, v1386[0], 1), v37, v1386[1].f64[0]), v35, v1386[1], 1);
                v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, v1386[3].f64[0]), v32, v1386[3], 1), v34, v1386[4].f64[0]), v38, v1386[4], 1);
                v43 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, v1386[3].f64[0]), v30, v1386[3], 1), v33, v1386[4].f64[0]), v36, v1386[4], 1);
                v44 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v1386[3].f64[0]), v29, v1386[3], 1), v37, v1386[4].f64[0]), v35, v1386[4], 1);
                v45 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, v1386[6].f64[0]), v32, v1386[6], 1), v34, v1386[7].f64[0]), v38, v1386[7], 1);
                v46 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, v1386[6].f64[0]), v30, v1386[6], 1), v33, v1386[7].f64[0]), v36, v1386[7], 1);
                v47 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v1386[6].f64[0]), v29, v1386[6], 1), v37, v1386[7].f64[0]), v35, v1386[7], 1);
                v48 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, v1386[9].f64[0]), v32, v1386[9], 1), v34, v1386[10].f64[0]), v38, v1386[10], 1);
                v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, v1386[9].f64[0]), v30, v1386[9], 1), v33, v1386[10].f64[0]);
                v50 = v1386[2];
                v51 = vmlaq_laneq_f64(vmulq_n_f64(v31, v1386[9].f64[0]), v29, v1386[9], 1);
                v53 = v25[13];
                v52 = v25[14];
                v54 = vmlaq_laneq_f64(v49, v36, v1386[10], 1);
                v55 = vmlaq_n_f64(v51, v37, v1386[10].f64[0]);
                _Q4 = v25[17];
                v56 = v25[18];
                v57 = vmlaq_laneq_f64(v55, v35, v1386[10], 1);
                v58 = v25[15];
                v59 = v25[16];
                goto LABEL_30;
              case 1:
                v60 = vmulq_f64(v1386[2], v25[3]);
                v61 = vmulq_f64(v1386[1], v25[2]);
                v62 = vmulq_f64(v1386[0], v25[1]);
                v1386[0] = v62;
                v1386[1] = v61;
                v1386[2] = v60;
                v63 = vmulq_f64(v25[1], v1386[3]);
                v8 = vmulq_f64(v25[2], v1386[4]);
                v7 = vmulq_f64(v25[3], v1386[5]);
                v1386[0] = v62;
                v1386[1] = v61;
                v1386[4] = v8;
                v1386[5] = v7;
                v1386[2] = v60;
                v1386[3] = v63;
                v64 = vmulq_f64(v25[1], v1386[6]);
                v65 = vmulq_f64(v25[2], v1386[7]);
                v66 = vmulq_f64(v25[3], v1386[8]);
                v1386[4] = v8;
                v1386[5] = v7;
                v1386[2] = v60;
                v1386[3] = v63;
                v1386[0] = v62;
                v1386[1] = v61;
                v1386[8] = v66;
                v1386[6] = v64;
                v1386[7] = v65;
                v67 = vmulq_f64(v25[1], v1386[9]);
                _Q4 = vmulq_f64(v25[2], v1386[10]);
                v6 = vmulq_f64(v25[3], v1386[11]);
                v1386[6] = v64;
                v1386[7] = v65;
                v1386[4] = v8;
                v1386[5] = v7;
                v1386[2] = v60;
                v1386[3] = v63;
                v1386[0] = v62;
                v1386[1] = v61;
                v1386[10] = _Q4;
                v1386[11] = v6;
                v1386[8] = v66;
                v1386[9] = v67;
                if (*(_BYTE *)(*(_QWORD *)(v14 + 744) + 20))
                  goto LABEL_27;
                goto LABEL_36;
              case 2:
                v68 = v25[1].f64[0];
                v8 = vmulq_n_f64(v1386[6], v68);
                v7 = vmulq_n_f64(v1386[5], v68);
                v6 = vmulq_n_f64(v1386[4], v68);
                _Q4 = vmulq_n_f64(v1386[3], v68);
                v1386[0] = vmulq_n_f64(v1386[0], v68);
                v1386[1] = vmulq_n_f64(v1386[1], v68);
                v1386[2] = vmulq_n_f64(v1386[2], v68);
                v1386[3] = _Q4;
                v1386[4] = v6;
                v1386[5] = v7;
                v1386[6] = v8;
                v1386[7] = vmulq_n_f64(v1386[7], v68);
                v1386[8] = vmulq_n_f64(v1386[8], v68);
                v1386[9] = vmulq_n_f64(v1386[9], v68);
                v1386[10] = vmulq_n_f64(v1386[10], v68);
                v1386[11] = vmulq_n_f64(v1386[11], v68);
                break;
              case 4:
                v102 = v26;
                (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v25->f64[0] + 56))(&v1388, v25);
                v26 = v102;
                v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v1386[0].f64[0]), v1391, v1386[0], 1), v1394, v1386[1].f64[0]), v1397, v1386[1], 1);
                v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v1386[0].f64[0]), v1392, v1386[0], 1), v1395, v1386[1].f64[0]), v1398, v1386[1], 1);
                v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, v1386[0].f64[0]), v1393, v1386[0], 1), v1396, v1386[1].f64[0]), v1399, v1386[1], 1);
                v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v1386[3].f64[0]), v1391, v1386[3], 1), v1394, v1386[4].f64[0]), v1397, v1386[4], 1);
                v43 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v1386[3].f64[0]), v1392, v1386[3], 1), v1395, v1386[4].f64[0]), v1398, v1386[4], 1);
                v44 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, v1386[3].f64[0]), v1393, v1386[3], 1), v1396, v1386[4].f64[0]), v1399, v1386[4], 1);
                v45 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v1386[6].f64[0]), v1391, v1386[6], 1), v1394, v1386[7].f64[0]), v1397, v1386[7], 1);
                v46 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v1386[6].f64[0]), v1392, v1386[6], 1), v1395, v1386[7].f64[0]), v1398, v1386[7], 1);
                v47 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, v1386[6].f64[0]), v1393, v1386[6], 1), v1396, v1386[7].f64[0]), v1399, v1386[7], 1);
                v48 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v1386[9].f64[0]), v1391, v1386[9], 1), v1394, v1386[10].f64[0]), v1397, v1386[10], 1);
                v50 = v1386[2];
                v53 = v1400;
                v52 = v1401;
                v54 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v1386[9].f64[0]), v1392, v1386[9], 1), v1395, v1386[10].f64[0]), v1398, v1386[10], 1);
                _Q4 = v1404;
                v56 = v1405;
                v57 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, v1386[9].f64[0]), v1393, v1386[9], 1), v1396, v1386[10].f64[0]), v1399, v1386[10], 1);
                v58 = v1402;
                v59 = v1403;
LABEL_30:
                v6 = vmlaq_laneq_f64(vmlaq_n_f64(v39, v53, v50.f64[0]), v59, v50, 1);
                v103 = vmlaq_laneq_f64(vmlaq_n_f64(v40, v52, v50.f64[0]), _Q4, v50, 1);
                v104 = vmlaq_laneq_f64(vmlaq_n_f64(v41, v58, v50.f64[0]), v56, v50, 1);
                v8 = v1386[11];
                v7 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v52, v1386[11].f64[0]), _Q4, v1386[11], 1);
                v1386[0] = v6;
                v1386[1] = v103;
                v1386[2] = v104;
                v1386[3] = vmlaq_laneq_f64(vmlaq_n_f64(v42, v53, v1386[5].f64[0]), v59, v1386[5], 1);
                v1386[4] = vmlaq_laneq_f64(vmlaq_n_f64(v43, v52, v1386[5].f64[0]), _Q4, v1386[5], 1);
                v1386[5] = vmlaq_laneq_f64(vmlaq_n_f64(v44, v58, v1386[5].f64[0]), v56, v1386[5], 1);
                v1386[6] = vmlaq_laneq_f64(vmlaq_n_f64(v45, v53, v1386[8].f64[0]), v59, v1386[8], 1);
                v1386[7] = vmlaq_laneq_f64(vmlaq_n_f64(v46, v52, v1386[8].f64[0]), _Q4, v1386[8], 1);
                v1386[8] = vmlaq_laneq_f64(vmlaq_n_f64(v47, v58, v1386[8].f64[0]), v56, v1386[8], 1);
                v1386[9] = vmlaq_laneq_f64(vmlaq_n_f64(v48, v53, v1386[11].f64[0]), v59, v1386[11], 1);
                v1386[10] = v7;
                v1386[11] = vmlaq_laneq_f64(vmlaq_n_f64(v57, v58, v1386[11].f64[0]), v56, v1386[11], 1);
                if (!*(_BYTE *)(*(_QWORD *)(v14 + 744) + 20))
                  goto LABEL_36;
                goto LABEL_27;
              default:
                break;
            }
          }
          if (*(_BYTE *)(*(_QWORD *)(v14 + 744) + 20))
          {
LABEL_27:
            switch(v26)
            {
              case 0:
                v70 = v25[1];
                v69 = v25[2];
                v72 = v25[5];
                v71 = v25[6];
                v73 = v25[3];
                v74 = v25[4];
                v76 = v25[7];
                v75 = v25[8];
                v78 = v25[11];
                v77 = v25[12];
                v79 = v25[9];
                v80 = v25[10];
                v81 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v1386[12].f64[0]), v74, v1386[12], 1), v76, v1386[13].f64[0]), v80, v1386[13], 1);
                v82 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, v1386[12].f64[0]), v72, v1386[12], 1), v75, v1386[13].f64[0]), v78, v1386[13], 1);
                v83 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v73, v1386[12].f64[0]), v71, v1386[12], 1), v79, v1386[13].f64[0]), v77, v1386[13], 1);
                v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v1386[15].f64[0]), v74, v1386[15], 1), v76, v1386[16].f64[0]), v80, v1386[16], 1);
                v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, v1386[15].f64[0]), v72, v1386[15], 1), v75, v1386[16].f64[0]), v78, v1386[16], 1);
                v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v73, v1386[15].f64[0]), v71, v1386[15], 1), v79, v1386[16].f64[0]), v77, v1386[16], 1);
                v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, *(double *)v1387[0].i64), v74, (float64x2_t)v1387[0], 1), v76, *(double *)v1387[1].i64), v80, (float64x2_t)v1387[1], 1);
                v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, *(double *)v1387[0].i64), v72, (float64x2_t)v1387[0], 1), v75, *(double *)v1387[1].i64), v78, (float64x2_t)v1387[1], 1);
                v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v73, *(double *)v1387[0].i64), v71, (float64x2_t)v1387[0], 1), v79, *(double *)v1387[1].i64), v77, (float64x2_t)v1387[1], 1);
                v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, *(double *)v1387[3].i64), v74, (float64x2_t)v1387[3], 1), v76, *(double *)v1387[4].i64), v80, (float64x2_t)v1387[4], 1);
                v91 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, *(double *)v1387[3].i64), v72, (float64x2_t)v1387[3], 1), v75, *(double *)v1387[4].i64);
                v92 = v1386[14];
                v93 = vmlaq_laneq_f64(vmulq_n_f64(v73, *(double *)v1387[3].i64), v71, (float64x2_t)v1387[3], 1);
                v95 = v25[13];
                v94 = v25[14];
                v96 = vmlaq_laneq_f64(v91, v78, (float64x2_t)v1387[4], 1);
                v97 = vmlaq_n_f64(v93, v79, *(double *)v1387[4].i64);
                _Q4 = v25[17];
                v98 = v25[18];
                v99 = vmlaq_laneq_f64(v97, v77, (float64x2_t)v1387[4], 1);
                v100 = v25[15];
                v101 = v25[16];
                goto LABEL_35;
              case 1:
                v105 = vmulq_f64(v1386[14], v25[3]);
                v106 = vmulq_f64(v1386[13], v25[2]);
                v107 = vmulq_f64(v1386[12], v25[1]);
                v1386[12] = v107;
                v1386[13] = v106;
                v1386[14] = v105;
                v8 = vmulq_f64(v25[3], v1386[17]);
                v7 = vmulq_f64(v25[2], v1386[16]);
                v108 = vmulq_f64(v25[1], v1386[15]);
                v1386[12] = v107;
                v1386[13] = v106;
                v1386[14] = v105;
                v1386[15] = v108;
                v1386[16] = v7;
                v1386[17] = v8;
                v6 = vmulq_f64(v25[3], (float64x2_t)v1387[2]);
                v109 = vmulq_f64(v25[2], (float64x2_t)v1387[1]);
                v110 = vmulq_f64(v25[1], (float64x2_t)v1387[0]);
                v1386[12] = v107;
                v1386[13] = v106;
                v1386[14] = v105;
                v1386[15] = v108;
                v1386[16] = v7;
                v1386[17] = v8;
                v1387[0] = (int64x2_t)v110;
                v1387[1] = (int64x2_t)v109;
                v1387[2] = (int64x2_t)v6;
                v111 = vmulq_f64(v25[3], (float64x2_t)v1387[5]);
                v112 = vmulq_f64(v25[2], (float64x2_t)v1387[4]);
                _Q4 = vmulq_f64(v25[1], (float64x2_t)v1387[3]);
                v1386[12] = v107;
                v1386[13] = v106;
                v1386[14] = v105;
                v1386[15] = v108;
                v1386[16] = v7;
                v1386[17] = v8;
                v1387[0] = (int64x2_t)v110;
                v1387[1] = (int64x2_t)v109;
                v1387[2] = (int64x2_t)v6;
                v1387[3] = (int64x2_t)_Q4;
                v1387[4] = (int64x2_t)v112;
                v1387[5] = (int64x2_t)v111;
                break;
              case 2:
                v113 = v25[1].f64[0];
                v8 = vmulq_n_f64((float64x2_t)v1387[0], v113);
                v7 = vmulq_n_f64(v1386[17], v113);
                v6 = vmulq_n_f64(v1386[16], v113);
                _Q4 = vmulq_n_f64(v1386[15], v113);
                v1386[12] = vmulq_n_f64(v1386[12], v113);
                v1386[13] = vmulq_n_f64(v1386[13], v113);
                v1386[14] = vmulq_n_f64(v1386[14], v113);
                v1386[15] = _Q4;
                v1386[16] = v6;
                v1386[17] = v7;
                v1387[0] = (int64x2_t)v8;
                v1387[1] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[1], v113);
                v1387[2] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[2], v113);
                v1387[3] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[3], v113);
                v1387[4] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[4], v113);
                v1387[5] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[5], v113);
                break;
              case 4:
                (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v25->f64[0] + 56))(&v1388, v25);
                v81 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v1386[12].f64[0]), v1391, v1386[12], 1), v1394, v1386[13].f64[0]), v1397, v1386[13], 1);
                v82 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v1386[12].f64[0]), v1392, v1386[12], 1), v1395, v1386[13].f64[0]), v1398, v1386[13], 1);
                v83 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, v1386[12].f64[0]), v1393, v1386[12], 1), v1396, v1386[13].f64[0]), v1399, v1386[13], 1);
                v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v1386[15].f64[0]), v1391, v1386[15], 1), v1394, v1386[16].f64[0]), v1397, v1386[16], 1);
                v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v1386[15].f64[0]), v1392, v1386[15], 1), v1395, v1386[16].f64[0]), v1398, v1386[16], 1);
                v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, v1386[15].f64[0]), v1393, v1386[15], 1), v1396, v1386[16].f64[0]), v1399, v1386[16], 1);
                v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, *(double *)v1387[0].i64), v1391, (float64x2_t)v1387[0], 1), v1394, *(double *)v1387[1].i64), v1397, (float64x2_t)v1387[1], 1);
                v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, *(double *)v1387[0].i64), v1392, (float64x2_t)v1387[0], 1), v1395, *(double *)v1387[1].i64), v1398, (float64x2_t)v1387[1], 1);
                v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, *(double *)v1387[0].i64), v1393, (float64x2_t)v1387[0], 1), v1396, *(double *)v1387[1].i64), v1399, (float64x2_t)v1387[1], 1);
                v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, *(double *)v1387[3].i64), v1391, (float64x2_t)v1387[3], 1), v1394, *(double *)v1387[4].i64), v1397, (float64x2_t)v1387[4], 1);
                v92 = v1386[14];
                v95 = v1400;
                v94 = v1401;
                v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, *(double *)v1387[3].i64), v1392, (float64x2_t)v1387[3], 1), v1395, *(double *)v1387[4].i64), v1398, (float64x2_t)v1387[4], 1);
                _Q4 = v1404;
                v98 = v1405;
                v99 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, *(double *)v1387[3].i64), v1393, (float64x2_t)v1387[3], 1), v1396, *(double *)v1387[4].i64), v1399, (float64x2_t)v1387[4], 1);
                v100 = v1402;
                v101 = v1403;
LABEL_35:
                v6 = vmlaq_laneq_f64(vmlaq_n_f64(v81, v95, v92.f64[0]), v101, v92, 1);
                v114 = vmlaq_laneq_f64(vmlaq_n_f64(v82, v94, v92.f64[0]), _Q4, v92, 1);
                v115 = vmlaq_laneq_f64(vmlaq_n_f64(v83, v100, v92.f64[0]), v98, v92, 1);
                v8 = (float64x2_t)v1387[5];
                v7 = vmlaq_laneq_f64(vmlaq_n_f64(v96, v94, *(double *)v1387[5].i64), _Q4, (float64x2_t)v1387[5], 1);
                v1386[12] = v6;
                v1386[13] = v114;
                v1386[14] = v115;
                v1386[15] = vmlaq_laneq_f64(vmlaq_n_f64(v84, v95, v1386[17].f64[0]), v101, v1386[17], 1);
                v1386[16] = vmlaq_laneq_f64(vmlaq_n_f64(v85, v94, v1386[17].f64[0]), _Q4, v1386[17], 1);
                v1386[17] = vmlaq_laneq_f64(vmlaq_n_f64(v86, v100, v1386[17].f64[0]), v98, v1386[17], 1);
                v1387[0] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v87, v95, *(double *)v1387[2].i64), v101, (float64x2_t)v1387[2], 1);
                v1387[1] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v88, v94, *(double *)v1387[2].i64), _Q4, (float64x2_t)v1387[2], 1);
                v1387[2] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v89, v100, *(double *)v1387[2].i64), v98, (float64x2_t)v1387[2], 1);
                v1387[3] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v90, v95, *(double *)v1387[5].i64), v101, (float64x2_t)v1387[5], 1);
                v1387[4] = (int64x2_t)v7;
                v1387[5] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v99, v100, *(double *)v1387[5].i64), v98, (float64x2_t)v1387[5], 1);
                break;
              default:
                break;
            }
          }
        }
LABEL_36:
        v116 = *(_OWORD *)(v14 + 816);
        *(float64x2_t *)(v14 + 752) = *v22;
        *(_OWORD *)(v14 + 768) = v116;
        _Q2 = *v22;
        _Q1 = *(float64x2_t *)(v14 + 816);
        *(_OWORD *)(v14 + 784) = *(_OWORD *)(v14 + 832);
        _Q4.f64[0] = _Q2.f64[1];
        __asm { FMLA            D3, D4, V2.D[1] }
        _Q2.f64[0] = _Q1.f64[1];
        __asm { FMLA            D3, D2, V1.D[1] }
        _Q1.f64[0] = *(float64_t *)(v14 + 840);
        __asm { FMLA            D3, D1, V0.D[1] }
        v12.f64[0] = *(double *)(v990 + 8) * _Q3.f64[0];
        *(float64_t *)(v14 + 848) = v12.f64[0];
        v123 = v1001;
        if (v1001)
        {
          if (v18 && v20 >= v21)
          {
            v124 = *(_QWORD *)(v992 + 128) + 24 * v20;
            v126 = *(char **)v124;
            v125 = *(char **)(v124 + 8);
            if (*(char **)v124 != v125)
            {
              while (*(_DWORD *)v126 < v21)
              {
                v126 += 16;
                if (v126 == v125)
                  goto LABEL_47;
              }
            }
            if (v126 != v125)
            {
              if (*(_DWORD *)v126 == v21)
              {
                v127 = (float64x2_t *)(*(_QWORD *)(v992 + 56) + 8 * *((_QWORD *)v126 + 1));
                goto LABEL_48;
              }
              v125 = v126;
            }
LABEL_47:
            v127 = (float64x2_t *)sub_20F3D46D0(*(unint64_t **)&v999.f64[0], (char **)v124, v21, v125);
            v123 = v1001;
LABEL_48:
            v128 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[12], (int64x2_t)v1386[15]);
            v129 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[12], (int64x2_t)v1386[15]);
            v130 = (float64x2_t)vzip1q_s64(v1387[0], v1387[3]);
            v131 = (float64x2_t)vzip2q_s64(v1387[0], v1387[3]);
            v132 = vmlaq_laneq_f64(vmulq_n_f64(v130, v1386[0].f64[0]), v131, v1386[0], 1);
            v133 = vmlaq_laneq_f64(vmulq_n_f64(v130, v1386[3].f64[0]), v131, v1386[3], 1);
            v134 = vmlaq_laneq_f64(vmulq_n_f64(v130, v1386[6].f64[0]), v131, v1386[6], 1);
            v135 = vmlaq_laneq_f64(vmulq_n_f64(v130, v1386[9].f64[0]), v131, v1386[9], 1);
            v136 = (float64x2_t)vzip1q_s64(v1387[1], v1387[4]);
            v137 = (float64x2_t)vzip2q_s64(v1387[1], v1387[4]);
            v138 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[13], (int64x2_t)v1386[16]);
            v139 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[13], (int64x2_t)v1386[16]);
            v140 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v1386[0].f64[0]), v129, v1386[0], 1), v138, v1386[1].f64[0]), v139, v1386[1], 1);
            v141 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v136, v1386[1].f64[0]), v137, v1386[1], 1);
            v142 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v1386[3].f64[0]), v129, v1386[3], 1), v138, v1386[4].f64[0]), v139, v1386[4], 1);
            v143 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v136, v1386[4].f64[0]), v137, v1386[4], 1);
            v144 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v1386[6].f64[0]), v129, v1386[6], 1), v138, v1386[7].f64[0]), v139, v1386[7], 1);
            v145 = vmlaq_laneq_f64(vmlaq_n_f64(v134, v136, v1386[7].f64[0]), v137, v1386[7], 1);
            v146 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v1386[9].f64[0]), v129, v1386[9], 1), v138, v1386[10].f64[0]), v139, v1386[10], 1);
            v147 = vmlaq_laneq_f64(vmlaq_n_f64(v135, v136, v1386[10].f64[0]), v137, v1386[10], 1);
            v148 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[14], (int64x2_t)v1386[17]);
            v149 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[14], (int64x2_t)v1386[17]);
            v150 = (float64x2_t)vzip1q_s64(v1387[2], v1387[5]);
            v151 = (float64x2_t)vzip2q_s64(v1387[2], v1387[5]);
            v152 = vmlaq_laneq_f64(vmlaq_n_f64(v140, v148, v1386[2].f64[0]), v149, v1386[2], 1);
            v153 = vmlaq_laneq_f64(vmlaq_n_f64(v142, v148, v1386[5].f64[0]), v149, v1386[5], 1);
            v154 = vmlaq_laneq_f64(vmlaq_n_f64(v144, v148, v1386[8].f64[0]), v149, v1386[8], 1);
            v155 = vmlaq_laneq_f64(vmlaq_n_f64(v145, v150, v1386[8].f64[0]), v151, v1386[8], 1);
            v156 = vmlaq_laneq_f64(vmlaq_n_f64(v146, v148, v1386[11].f64[0]), v149, v1386[11], 1);
            v157 = vmlaq_laneq_f64(vmlaq_n_f64(v147, v150, v1386[11].f64[0]), v151, v1386[11], 1);
            v158 = vaddq_f64(v127[1], vmlaq_laneq_f64(vmlaq_n_f64(v141, v150, v1386[2].f64[0]), v151, v1386[2], 1));
            v159 = vaddq_f64(v127[3], vmlaq_laneq_f64(vmlaq_n_f64(v143, v150, v1386[5].f64[0]), v151, v1386[5], 1));
            v160 = vaddq_f64(v127[2], v153);
            v161 = vaddq_f64(v127[5], v155);
            v162 = vaddq_f64(v127[4], v154);
            v163 = vaddq_f64(v127[7], v157);
            *v127 = vaddq_f64(*v127, v152);
            v127[1] = v158;
            v127[2] = v160;
            v127[3] = v159;
            v127[4] = v162;
            v127[5] = v161;
            v127[6] = vaddq_f64(v127[6], v156);
            v127[7] = v163;
          }
          v164 = *(_QWORD *)(v992 + 128) + 24 * v21;
          v166 = *(char **)v164;
          v165 = *(char **)(v164 + 8);
          if (*(char **)v164 != v165)
          {
            while (*(_DWORD *)v166 < v21)
            {
              v166 += 16;
              if (v166 == v165)
                goto LABEL_57;
            }
          }
          if (v166 != v165)
          {
            if (*(_DWORD *)v166 == v21)
            {
              v167 = (float64x2_t *)(*(_QWORD *)(v992 + 56) + 8 * *((_QWORD *)v166 + 1));
              goto LABEL_58;
            }
            v165 = v166;
          }
LABEL_57:
          v167 = (float64x2_t *)sub_20F3D46D0(*(unint64_t **)&v999.f64[0], (char **)v164, v21, v165);
          v123 = v1001;
LABEL_58:
          v168 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[12], (int64x2_t)v1386[15]);
          v169 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[12], (int64x2_t)v1386[15]);
          v170 = vmlaq_laneq_f64(vmulq_n_f64(v168, v1386[12].f64[0]), v169, v1386[12], 1);
          v171 = (float64x2_t)vzip1q_s64(v1387[0], v1387[3]);
          v172 = (float64x2_t)vzip2q_s64(v1387[0], v1387[3]);
          v173 = vmlaq_laneq_f64(vmulq_n_f64(v171, v1386[12].f64[0]), v172, v1386[12], 1);
          v174 = vmlaq_laneq_f64(vmulq_n_f64(v168, v1386[15].f64[0]), v169, v1386[15], 1);
          v175 = vmlaq_laneq_f64(vmulq_n_f64(v171, v1386[15].f64[0]), v172, v1386[15], 1);
          v176 = vmlaq_laneq_f64(vmulq_n_f64(v168, *(double *)v1387[0].i64), v169, (float64x2_t)v1387[0], 1);
          v177 = vmlaq_laneq_f64(vmulq_n_f64(v171, *(double *)v1387[0].i64), v172, (float64x2_t)v1387[0], 1);
          v178 = (float64x2_t)vzip1q_s64(v1387[1], v1387[4]);
          v179 = vmlaq_laneq_f64(vmulq_n_f64(v168, *(double *)v1387[3].i64), v169, (float64x2_t)v1387[3], 1);
          v180 = (float64x2_t)vzip2q_s64(v1387[1], v1387[4]);
          v181 = vmlaq_laneq_f64(vmulq_n_f64(v171, *(double *)v1387[3].i64), v172, (float64x2_t)v1387[3], 1);
          v182 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[13], (int64x2_t)v1386[16]);
          v183 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[13], (int64x2_t)v1386[16]);
          v184 = vmlaq_laneq_f64(vmlaq_n_f64(v170, v182, v1386[13].f64[0]), v183, v1386[13], 1);
          v185 = vmlaq_laneq_f64(vmlaq_n_f64(v173, v178, v1386[13].f64[0]), v180, v1386[13], 1);
          v186 = vmlaq_laneq_f64(vmlaq_n_f64(v174, v182, v1386[16].f64[0]), v183, v1386[16], 1);
          v187 = vmlaq_laneq_f64(vmlaq_n_f64(v175, v178, v1386[16].f64[0]), v180, v1386[16], 1);
          v188 = vmlaq_laneq_f64(vmlaq_n_f64(v176, v182, *(double *)v1387[1].i64), v183, (float64x2_t)v1387[1], 1);
          v189 = vmlaq_laneq_f64(vmlaq_n_f64(v177, v178, *(double *)v1387[1].i64), v180, (float64x2_t)v1387[1], 1);
          v190 = vmlaq_laneq_f64(vmlaq_n_f64(v179, v182, *(double *)v1387[4].i64), v183, (float64x2_t)v1387[4], 1);
          v191 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[14], (int64x2_t)v1386[17]);
          v192 = vmlaq_n_f64(v181, v178, *(double *)v1387[4].i64);
          v193 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[14], (int64x2_t)v1386[17]);
          v194 = vmlaq_laneq_f64(v192, v180, (float64x2_t)v1387[4], 1);
          v195 = (float64x2_t)vzip1q_s64(v1387[2], v1387[5]);
          v196 = (float64x2_t)vzip2q_s64(v1387[2], v1387[5]);
          v8 = vmlaq_laneq_f64(vmlaq_n_f64(v186, v191, v1386[17].f64[0]), v193, v1386[17], 1);
          v197 = vmlaq_laneq_f64(vmlaq_n_f64(v187, v195, v1386[17].f64[0]), v196, v1386[17], 1);
          v198 = vmlaq_laneq_f64(vmlaq_n_f64(v189, v195, *(double *)v1387[2].i64), v196, (float64x2_t)v1387[2], 1);
          v199 = vmlaq_laneq_f64(vmlaq_n_f64(v190, v191, *(double *)v1387[5].i64), v193, (float64x2_t)v1387[5], 1);
          v200 = vmlaq_laneq_f64(vmlaq_n_f64(v194, v195, *(double *)v1387[5].i64), v196, (float64x2_t)v1387[5], 1);
          _Q1 = vaddq_f64(v167[1], vmlaq_laneq_f64(vmlaq_n_f64(v185, v195, v1386[14].f64[0]), v196, v1386[14], 1));
          _Q2 = vaddq_f64(v167[3], v197);
          _Q3 = vaddq_f64(v167[2], v8);
          _Q4 = vaddq_f64(v167[5], v198);
          v6 = vaddq_f64(v167[4], vmlaq_laneq_f64(vmlaq_n_f64(v188, v191, *(double *)v1387[2].i64), v193, (float64x2_t)v1387[2], 1));
          v7 = vaddq_f64(v167[7], v200);
          *v167 = vaddq_f64(*v167, vmlaq_laneq_f64(vmlaq_n_f64(v184, v191, v1386[14].f64[0]), v193, v1386[14], 1));
          v167[1] = _Q1;
          v167[2] = _Q3;
          v167[3] = _Q2;
          v167[4] = v6;
          v167[5] = _Q4;
          v12 = vaddq_f64(v167[6], v199);
          v167[6] = v12;
          v167[7] = v7;
        }
        if (!v18)
          goto LABEL_82;
        v201 = *(_QWORD *)(v992 + 128) + 24 * v20;
        v203 = *(char **)v201;
        v202 = *(char **)(v201 + 8);
        if (*(char **)v201 != v202)
        {
          while (*(_DWORD *)v203 < v20)
          {
            v203 += 16;
            if (v203 == v202)
              goto LABEL_68;
          }
        }
        if (v203 != v202)
        {
          if (*(_DWORD *)v203 == v20)
          {
            v204 = (float64x2_t *)(*(_QWORD *)(v992 + 56) + 8 * *((_QWORD *)v203 + 1));
LABEL_69:
            v205 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[0], (int64x2_t)v1386[3]);
            v206 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[0], (int64x2_t)v1386[3]);
            v207 = vmlaq_laneq_f64(vmulq_n_f64(v205, v1386[0].f64[0]), v206, v1386[0], 1);
            v208 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[6], (int64x2_t)v1386[9]);
            v209 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[6], (int64x2_t)v1386[9]);
            v210 = vmlaq_laneq_f64(vmulq_n_f64(v208, v1386[0].f64[0]), v209, v1386[0], 1);
            v211 = vmlaq_laneq_f64(vmulq_n_f64(v205, v1386[3].f64[0]), v206, v1386[3], 1);
            v212 = vmlaq_laneq_f64(vmulq_n_f64(v208, v1386[3].f64[0]), v209, v1386[3], 1);
            v213 = vmlaq_laneq_f64(vmulq_n_f64(v205, v1386[6].f64[0]), v206, v1386[6], 1);
            v214 = vmlaq_laneq_f64(vmulq_n_f64(v208, v1386[6].f64[0]), v209, v1386[6], 1);
            v215 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[7], (int64x2_t)v1386[10]);
            v216 = vmlaq_laneq_f64(vmulq_n_f64(v205, v1386[9].f64[0]), v206, v1386[9], 1);
            v217 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[7], (int64x2_t)v1386[10]);
            v218 = vmlaq_laneq_f64(vmulq_n_f64(v208, v1386[9].f64[0]), v209, v1386[9], 1);
            v219 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[1], (int64x2_t)v1386[4]);
            v220 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[1], (int64x2_t)v1386[4]);
            v221 = vmlaq_laneq_f64(vmlaq_n_f64(v207, v219, v1386[1].f64[0]), v220, v1386[1], 1);
            v222 = vmlaq_laneq_f64(vmlaq_n_f64(v210, v215, v1386[1].f64[0]), v217, v1386[1], 1);
            v223 = vmlaq_laneq_f64(vmlaq_n_f64(v211, v219, v1386[4].f64[0]), v220, v1386[4], 1);
            v224 = vmlaq_laneq_f64(vmlaq_n_f64(v212, v215, v1386[4].f64[0]), v217, v1386[4], 1);
            v225 = vmlaq_laneq_f64(vmlaq_n_f64(v213, v219, v1386[7].f64[0]), v220, v1386[7], 1);
            v226 = vmlaq_laneq_f64(vmlaq_n_f64(v214, v215, v1386[7].f64[0]), v217, v1386[7], 1);
            v227 = vmlaq_laneq_f64(vmlaq_n_f64(v216, v219, v1386[10].f64[0]), v220, v1386[10], 1);
            v228 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[2], (int64x2_t)v1386[5]);
            v229 = vmlaq_n_f64(v218, v215, v1386[10].f64[0]);
            v230 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[2], (int64x2_t)v1386[5]);
            v231 = vmlaq_laneq_f64(v229, v217, v1386[10], 1);
            v232 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[8], (int64x2_t)v1386[11]);
            v233 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[8], (int64x2_t)v1386[11]);
            v234 = vmlaq_laneq_f64(vmlaq_n_f64(v224, v232, v1386[5].f64[0]), v233, v1386[5], 1);
            v235 = vmlaq_laneq_f64(vmlaq_n_f64(v226, v232, v1386[8].f64[0]), v233, v1386[8], 1);
            v236 = vmlaq_laneq_f64(vmlaq_n_f64(v227, v228, v1386[11].f64[0]), v230, v1386[11], 1);
            v237 = vmlaq_laneq_f64(vmlaq_n_f64(v231, v232, v1386[11].f64[0]), v233, v1386[11], 1);
            v238 = vaddq_f64(v204[1], vmlaq_laneq_f64(vmlaq_n_f64(v222, v232, v1386[2].f64[0]), v233, v1386[2], 1));
            v239 = vaddq_f64(v204[3], v234);
            v240 = vaddq_f64(v204[2], vmlaq_laneq_f64(vmlaq_n_f64(v223, v228, v1386[5].f64[0]), v230, v1386[5], 1));
            v241 = vaddq_f64(v204[5], v235);
            v242 = vaddq_f64(v204[4], vmlaq_laneq_f64(vmlaq_n_f64(v225, v228, v1386[8].f64[0]), v230, v1386[8], 1));
            v243 = vaddq_f64(v204[7], v237);
            *v204 = vaddq_f64(*v204, vmlaq_laneq_f64(vmlaq_n_f64(v221, v228, v1386[2].f64[0]), v230, v1386[2], 1));
            v204[1] = v238;
            v204[2] = v240;
            v204[3] = v239;
            v204[4] = v242;
            v204[5] = v241;
            v204[6] = vaddq_f64(v204[6], v236);
            v204[7] = v243;
            if (v123 && v21 >= v20)
            {
              v244 = *(_QWORD *)(v992 + 128) + 24 * v21;
              v246 = *(char **)v244;
              v245 = *(char **)(v244 + 8);
              if (*(char **)v244 != v245)
              {
                while (*(_DWORD *)v246 < v20)
                {
                  v246 += 16;
                  if (v246 == v245)
                    goto LABEL_79;
                }
              }
              if (v246 != v245)
              {
                if (*(_DWORD *)v246 == v20)
                {
                  v247 = (float64x2_t *)(*(_QWORD *)(v992 + 56) + 8 * *((_QWORD *)v246 + 1));
                  goto LABEL_80;
                }
                v245 = v246;
              }
LABEL_79:
              v247 = (float64x2_t *)sub_20F3D46D0(*(unint64_t **)&v999.f64[0], (char **)v244, v20, v245);
              v123 = v1001;
LABEL_80:
              v248 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[0], (int64x2_t)v1386[3]);
              v249 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[0], (int64x2_t)v1386[3]);
              v250 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[6], (int64x2_t)v1386[9]);
              v251 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[6], (int64x2_t)v1386[9]);
              v252 = vmlaq_laneq_f64(vmulq_n_f64(v250, v1386[12].f64[0]), v251, v1386[12], 1);
              v253 = vmlaq_laneq_f64(vmulq_n_f64(v250, v1386[15].f64[0]), v251, v1386[15], 1);
              v254 = vmlaq_laneq_f64(vmulq_n_f64(v250, *(double *)v1387[0].i64), v251, (float64x2_t)v1387[0], 1);
              v255 = vmlaq_laneq_f64(vmulq_n_f64(v250, *(double *)v1387[3].i64), v251, (float64x2_t)v1387[3], 1);
              v256 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[7], (int64x2_t)v1386[10]);
              v257 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[7], (int64x2_t)v1386[10]);
              v258 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[1], (int64x2_t)v1386[4]);
              v259 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[1], (int64x2_t)v1386[4]);
              v260 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v248, v1386[12].f64[0]), v249, v1386[12], 1), v258, v1386[13].f64[0]), v259, v1386[13], 1);
              v261 = vmlaq_laneq_f64(vmlaq_n_f64(v252, v256, v1386[13].f64[0]), v257, v1386[13], 1);
              v262 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v248, v1386[15].f64[0]), v249, v1386[15], 1), v258, v1386[16].f64[0]), v259, v1386[16], 1);
              v263 = vmlaq_laneq_f64(vmlaq_n_f64(v253, v256, v1386[16].f64[0]), v257, v1386[16], 1);
              v264 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v248, *(double *)v1387[0].i64), v249, (float64x2_t)v1387[0], 1), v258, *(double *)v1387[1].i64), v259, (float64x2_t)v1387[1], 1);
              v265 = vmlaq_laneq_f64(vmlaq_n_f64(v254, v256, *(double *)v1387[1].i64), v257, (float64x2_t)v1387[1], 1);
              v266 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v248, *(double *)v1387[3].i64), v249, (float64x2_t)v1387[3], 1), v258, *(double *)v1387[4].i64), v259, (float64x2_t)v1387[4], 1);
              v267 = vmlaq_laneq_f64(vmlaq_n_f64(v255, v256, *(double *)v1387[4].i64), v257, (float64x2_t)v1387[4], 1);
              v268 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[2], (int64x2_t)v1386[5]);
              v269 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[2], (int64x2_t)v1386[5]);
              v270 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[8], (int64x2_t)v1386[11]);
              v271 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[8], (int64x2_t)v1386[11]);
              v272 = vmlaq_laneq_f64(vmlaq_n_f64(v260, v268, v1386[14].f64[0]), v269, v1386[14], 1);
              v273 = vmlaq_laneq_f64(vmlaq_n_f64(v262, v268, v1386[17].f64[0]), v269, v1386[17], 1);
              v274 = vmlaq_laneq_f64(vmlaq_n_f64(v264, v268, *(double *)v1387[2].i64), v269, (float64x2_t)v1387[2], 1);
              v275 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v270, *(double *)v1387[2].i64), v271, (float64x2_t)v1387[2], 1);
              v276 = vmlaq_laneq_f64(vmlaq_n_f64(v266, v268, *(double *)v1387[5].i64), v269, (float64x2_t)v1387[5], 1);
              v277 = vmlaq_laneq_f64(vmlaq_n_f64(v267, v270, *(double *)v1387[5].i64), v271, (float64x2_t)v1387[5], 1);
              v278 = vaddq_f64(v247[1], vmlaq_laneq_f64(vmlaq_n_f64(v261, v270, v1386[14].f64[0]), v271, v1386[14], 1));
              v279 = vaddq_f64(v247[3], vmlaq_laneq_f64(vmlaq_n_f64(v263, v270, v1386[17].f64[0]), v271, v1386[17], 1));
              v280 = vaddq_f64(v247[2], v273);
              v281 = vaddq_f64(v247[5], v275);
              v282 = vaddq_f64(v247[4], v274);
              v283 = vaddq_f64(v247[7], v277);
              *v247 = vaddq_f64(*v247, v272);
              v247[1] = v278;
              v247[2] = v280;
              v247[3] = v279;
              v247[4] = v282;
              v247[5] = v281;
              v247[6] = vaddq_f64(v247[6], v276);
              v247[7] = v283;
            }
            v284 = (float64x2_t *)(*(_QWORD *)v992 + 8 * (*(_DWORD *)(v992 + 32) + 4 * v20));
            v6.f64[0] = v1386[4].f64[0];
            _Q4 = v1386[5];
            v7.f64[0] = v1386[2].f64[0];
            v8 = v1386[3];
            v286 = *(float64x2_t *)(v14 + 816);
            v285 = *(float64x2_t *)(v14 + 832);
            _Q3 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[8], (int64x2_t)v1386[11]);
            _Q2 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1386[6], (int64x2_t)v1386[9]), v22->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1386[6], (int64x2_t)v1386[9]), *v22, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1386[7], (int64x2_t)v1386[10]), v286.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1386[7], (int64x2_t)v1386[10]), v286, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1386[8], (int64x2_t)v1386[11]), v285.f64[0]), _Q3, v285, 1);
            _Q1 = vsubq_f64(v284[1], _Q2);
            v12 = vsubq_f64(*v284, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1386[0], (int64x2_t)v1386[3]), v22->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1386[0], (int64x2_t)v1386[3]), *v22, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1386[1], (int64x2_t)v1386[4]), v286.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1386[1], (int64x2_t)v1386[4]), v286, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1386[2], (int64x2_t)v1386[5]), v285.f64[0]),
                      (float64x2_t)vzip2q_s64((int64x2_t)v1386[2], (int64x2_t)v1386[5]),
                      v285,
                      1));
            *v284 = v12;
            v284[1] = _Q1;
LABEL_82:
            v13 = v1000.f64[0];
            if (v123)
            {
              v287 = (float64x2_t *)(*(_QWORD *)v992 + 8 * (*(_DWORD *)(v992 + 32) + 4 * v21));
              v6.f64[0] = v1386[16].f64[0];
              _Q4 = v1386[17];
              v7.f64[0] = v1386[14].f64[0];
              v8 = v1386[15];
              v289 = *(float64x2_t *)(v14 + 816);
              v288 = *(float64x2_t *)(v14 + 832);
              _Q3 = (float64x2_t)vzip2q_s64(v1387[2], v1387[5]);
              _Q2 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v1387[0], v1387[3]), v22->f64[0]), (float64x2_t)vzip2q_s64(v1387[0], v1387[3]), *v22, 1), (float64x2_t)vzip1q_s64(v1387[1], v1387[4]), v289.f64[0]), (float64x2_t)vzip2q_s64(v1387[1], v1387[4]), v289, 1), (float64x2_t)vzip1q_s64(v1387[2], v1387[5]), v288.f64[0]), _Q3, v288, 1);
              _Q1 = vsubq_f64(v287[1], _Q2);
              v12 = vsubq_f64(*v287, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1386[12], (int64x2_t)v1386[15]), v22->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1386[12], (int64x2_t)v1386[15]), *v22, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1386[13], (int64x2_t)v1386[16]), v289.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1386[13], (int64x2_t)v1386[16]), v289, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1386[14], (int64x2_t)v1386[17]), v288.f64[0]),
                        (float64x2_t)vzip2q_s64((int64x2_t)v1386[14], (int64x2_t)v1386[17]),
                        v288,
                        1));
              *v287 = v12;
              v287[1] = _Q1;
            }
            goto LABEL_4;
          }
          v202 = v203;
        }
LABEL_68:
        v204 = (float64x2_t *)sub_20F3D46D0(*(unint64_t **)&v999.f64[0], (char **)v201, v20, v202);
        v123 = v1001;
        goto LABEL_69;
      }
      *(_QWORD *)(v14 + 848) = 0;
      v13 = v1000.f64[0];
LABEL_4:
      v14 += 888;
      if (v14 == *(_QWORD *)&v13)
      {
        v290 = v1409;
        v990 = v1408;
        v292 = *((_QWORD *)v1406 + 28);
        v291 = *((_QWORD *)v1406 + 29);
        if (v292 == v291)
          goto LABEL_177;
LABEL_87:
        v988 = (unint64_t *)(v290 + 376);
        v989 = v291;
        v981 = &v1388;
        v982 = v1387;
        v979 = &v1387[2];
        v980 = &v1386[2];
        v992 = v290;
        while (2)
        {
          v293 = *(unsigned int **)(v292 + 736);
          v294 = *(unsigned int **)(v292 + 744);
          if (((*((unsigned __int8 *)v294 + 4) >> 2) & 1) == (char)(32 * *((_BYTE *)v293 + 4)) >> 7)
            v295 = 2;
          else
            v295 = 1;
          if ((v295 & v1411) == 0)
            goto LABEL_89;
          v296 = *((unsigned __int8 *)v293 + 20);
          if (*((_BYTE *)v293 + 20))
          {
            if (*v293 == -1)
              goto LABEL_89;
          }
          v297 = *((unsigned __int8 *)v294 + 20);
          if (*((_BYTE *)v294 + 20))
          {
            if (*v294 == -1)
              goto LABEL_89;
          }
          if (*((_BYTE *)v293 + 20))
          {
            v298 = *(_DWORD *)(v1407[3] + 4 * *v293);
            v993 = *((unsigned __int8 *)v294 + 20);
            LODWORD(v991.f64[0]) = v296;
            if (v297)
              goto LABEL_100;
LABEL_102:
            v299 = -1;
          }
          else
          {
            v298 = -1;
            v993 = *((unsigned __int8 *)v294 + 20);
            LODWORD(v991.f64[0]) = 0;
            if (!v297)
              goto LABEL_102;
LABEL_100:
            v299 = *(_DWORD *)(v1407[3] + 4 * *v294);
          }
          v1001 = v299;
          *(_QWORD *)&v300 = v292 + 800;
          v301 = sub_20F3DB79C(v292 + 8, (_QWORD *)(v292 + 736), (float64x2_t *)(v292 + 800), v1386, v12.f64[0], _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], _Q4.f64[0], v6.f64[0], v7.f64[0], (int64x2_t)v8);
          *(_BYTE *)(v292 + 856) = v301;
          if (!v301)
          {
            *(_QWORD *)(v292 + 848) = 0;
            v291 = v989;
            goto LABEL_89;
          }
          v302 = *(_QWORD *)(v292 + 864);
          if (v302)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v302 + 24))(v302, v292 + 800);
            v303 = *(float64x2_t **)(v292 + 864);
            v304 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v303->f64[0] + 16))(v303);
            if (*(_BYTE *)(*(_QWORD *)(v292 + 736) + 20))
            {
              switch((int)v304)
              {
                case 0:
                  v305 = v303 + 1;
                  LODWORD(v987.f64[0]) = v304;
                  if (v982 > (int64x2_t *)&v303[1] && &v303[19] > v1386)
                  {
                    MEMORY[0x24BDAC7A8](v304);
                    v304 = (uint64_t)memcpy(&v978 - 36, &v303[1], 0x120uLL);
                    v305 = (float64x2_t *)(&v978 - 36);
                  }
                  MEMORY[0x24BDAC7A8](v304);
                  v306 = (float64x2_t *)(&v978 - 36);
                  memcpy(&v978 - 36, v1386, 0x120uLL);
                  v307 = v305[1];
                  v309 = v305[3];
                  v308 = v305[4];
                  v311 = v305[6];
                  v310 = v305[7];
                  v313 = v305[9];
                  v312 = v305[10];
                  v314 = *((float64x2_t *)&v978 - 17);
                  v315 = *((float64x2_t *)&v978 - 18);
                  v316 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v305, v306->f64[0]), v309, *v306, 1), v311, v314.f64[0]), v313, v314, 1);
                  v317 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v307, v306->f64[0]), v308, *v306, 1), v310, v314.f64[0]), v312, v314, 1);
                  v319 = *((float64x2_t *)&v978 - 16);
                  v318 = *((float64x2_t *)&v978 - 15);
                  v321 = v318;
                  v320 = *((float64x2_t *)&v978 - 14);
                  v322 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v305, v318.f64[0]), v309, v318, 1), v311, v320.f64[0]), v313, v320, 1);
                  v323 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v307, v318.f64[0]), v308, v318, 1), v310, v320.f64[0]), v312, v320, 1);
                  v325 = *((float64x2_t *)&v978 - 13);
                  v324 = *((float64x2_t *)&v978 - 12);
                  v327 = v324;
                  v326 = *((float64x2_t *)&v978 - 11);
                  v328 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v305, v324.f64[0]), v309, v324, 1), v311, v326.f64[0]), v313, v326, 1);
                  v329 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v307, v324.f64[0]), v308, v324, 1), v310, v326.f64[0]), v312, v326, 1);
                  v331 = *((float64x2_t *)&v978 - 10);
                  v330 = *((float64x2_t *)&v978 - 9);
                  v332 = vmlaq_laneq_f64(vmulq_n_f64(*v305, v330.f64[0]), v309, v330, 1);
                  v334 = v330;
                  v333 = *((float64x2_t *)&v978 - 8);
                  v335 = vmlaq_laneq_f64(vmlaq_n_f64(v332, v311, v333.f64[0]), v313, v333, 1);
                  v336 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v307, v330.f64[0]), v308, v330, 1), v310, v333.f64[0]), v312, v333, 1);
                  v338 = v305[12];
                  v337 = v305[13];
                  v340 = v305[15];
                  v339 = v305[16];
                  v341 = v319;
                  v342 = vmlaq_laneq_f64(vmlaq_n_f64(v316, v338, v341.f64[0]), v340, v341, 1);
                  v343 = vmlaq_laneq_f64(vmlaq_n_f64(v317, v337, v341.f64[0]), v339, v341, 1);
                  v345 = *((float64x2_t *)&v978 - 14);
                  v344 = v325;
                  v346 = vmlaq_laneq_f64(vmlaq_n_f64(v322, v338, v344.f64[0]), v340, v344, 1);
                  v347 = vmlaq_laneq_f64(vmlaq_n_f64(v323, v337, v344.f64[0]), v339, v344, 1);
                  v349 = *((float64x2_t *)&v978 - 11);
                  v348 = v331;
                  v350 = vmlaq_laneq_f64(vmlaq_n_f64(v328, v338, v348.f64[0]), v340, v348, 1);
                  v351 = vmlaq_laneq_f64(vmlaq_n_f64(v329, v337, v348.f64[0]), v339, v348, 1);
                  v353 = *((float64x2_t *)&v978 - 8);
                  v352 = *((float64x2_t *)&v978 - 7);
                  v1386[0] = v342;
                  v1386[1] = v343;
                  v1386[3] = v346;
                  v1386[4] = v347;
                  v1386[6] = v350;
                  v1386[7] = v351;
                  v1386[9] = vmlaq_laneq_f64(vmlaq_n_f64(v335, v338, v352.f64[0]), v340, v352, 1);
                  v1386[10] = vmlaq_laneq_f64(vmlaq_n_f64(v336, v337, v352.f64[0]), v339, v352, 1);
                  v354 = v305[2];
                  v355 = v305[5];
                  v356 = v305[8];
                  v357 = v305[11];
                  v358 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v354, v315.f64[0]), v355, v315, 1), v356, *((double *)&v978 - 34)), v357, *((float64x2_t *)&v978 - 17), 1);
                  v359 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v354, v321.f64[0]), v355, v321, 1), v356, v345.f64[0]), v357, v345, 1);
                  v360 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v354, v327.f64[0]), v355, v327, 1), v356, v349.f64[0]), v357, v349, 1);
                  v361 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v354, v334.f64[0]), v355, v334, 1), v356, v353.f64[0]), v357, v353, 1);
                  v362 = v305[14];
                  v363 = v305[17];
                  v364 = *((float64x2_t *)&v978 - 6);
                  v365 = vmlaq_laneq_f64(vmlaq_n_f64(v361, v362, *((double *)&v978 - 14)), v363, *((float64x2_t *)&v978 - 7), 1);
                  v1386[2] = vmlaq_laneq_f64(vmlaq_n_f64(v358, v362, v319.f64[0]), v363, v319, 1);
                  v1386[5] = vmlaq_laneq_f64(vmlaq_n_f64(v359, v362, v325.f64[0]), v363, v325, 1);
                  v1386[8] = vmlaq_laneq_f64(vmlaq_n_f64(v360, v362, v331.f64[0]), v363, v331, 1);
                  v1386[11] = v365;
                  v366 = v305[1];
                  v368 = v305[3];
                  v367 = v305[4];
                  v370 = v305[6];
                  v369 = v305[7];
                  v372 = v305[9];
                  v371 = v305[10];
                  v374 = *((float64x2_t *)&v978 - 6);
                  v373 = *((float64x2_t *)&v978 - 5);
                  v375 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v305, v364.f64[0]), v368, v364, 1), v370, v373.f64[0]), v372, v373, 1);
                  v376 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v366, v364.f64[0]), v367, v364, 1), v369, v373.f64[0]), v371, v373, 1);
                  v378 = *((float64x2_t *)&v978 - 4);
                  v377 = *((float64x2_t *)&v978 - 3);
                  v379 = vmlaq_laneq_f64(vmulq_n_f64(*v305, v377.f64[0]), v368, v377, 1);
                  v381 = v377;
                  v380 = *((float64x2_t *)&v978 - 2);
                  v382 = vmlaq_laneq_f64(vmlaq_n_f64(v379, v370, v380.f64[0]), v372, v380, 1);
                  v383 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v366, v377.f64[0]), v367, v377, 1), v369, v380.f64[0]), v371, v380, 1);
                  v385 = v305[12];
                  v384 = v305[13];
                  v6 = v305[15];
                  v386 = v305[16];
                  v8 = *((float64x2_t *)&v978 - 5);
                  v387 = v378;
                  v388 = vmlaq_laneq_f64(vmlaq_n_f64(v375, v385, v387.f64[0]), v6, v387, 1);
                  v389 = vmlaq_laneq_f64(vmlaq_n_f64(v376, v384, v387.f64[0]), v386, v387, 1);
                  v390 = *((float64x2_t *)&v978 - 2);
                  v7 = *((float64x2_t *)&v978 - 1);
                  v1386[12] = v388;
                  v1386[13] = v389;
                  v1386[15] = vmlaq_laneq_f64(vmlaq_n_f64(v382, v385, v7.f64[0]), v6, v7, 1);
                  v1386[16] = vmlaq_laneq_f64(vmlaq_n_f64(v383, v384, v7.f64[0]), v386, v7, 1);
                  v391 = v305[2];
                  v392 = v305[5];
                  v393 = v305[8];
                  v394 = v305[11];
                  v395 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v391, v374.f64[0]), v392, v374, 1), v393, v8.f64[0]), v394, v8, 1);
                  v396 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v391, v381.f64[0]), v392, v381, 1), v393, v390.f64[0]), v394, v390, 1);
                  v397 = v305[14];
                  v398 = v305[17];
                  v399 = vmlaq_laneq_f64(vmlaq_n_f64(v396, v397, *((double *)&v978 - 2)), v398, *((float64x2_t *)&v978 - 1), 1);
                  v1386[14] = vmlaq_laneq_f64(vmlaq_n_f64(v395, v397, v378.f64[0]), v398, v378, 1);
                  v1386[17] = v399;
                  v290 = v992;
                  v304 = LODWORD(v987.f64[0]);
                  if (*(_BYTE *)(*(_QWORD *)(v292 + 744) + 20))
                    goto LABEL_117;
                  break;
                case 1:
                  v400 = 0;
                  v402 = (int8x16_t)v1386[16];
                  v401 = (int8x16_t)v1386[17];
                  v404 = (int8x16_t)v1386[14];
                  v403 = (int8x16_t)v1386[15];
                  v6 = v1386[12];
                  v405 = (int8x16_t)v1386[13];
                  v8 = v1386[10];
                  v7 = v1386[11];
                  v407 = (int8x16_t)v1386[8];
                  v406 = (int8x16_t)v1386[9];
                  v999 = (float64x2_t)vextq_s8(v402, v402, 8uLL);
                  v1000 = (float64x2_t)vextq_s8(v401, v401, 8uLL);
                  v997 = (float64x2_t)vextq_s8(v404, v404, 8uLL);
                  v998 = (float64x2_t)vextq_s8(v403, v403, 8uLL);
                  v408 = vextq_s8(v405, v405, 8uLL).u64[0];
                  v409 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
                  v410 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
                  v411 = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
                  v413 = (int8x16_t)v1386[6];
                  v412 = (int8x16_t)v1386[7];
                  v414 = vextq_s8(v406, v406, 8uLL).u64[0];
                  v415 = vextq_s8(v407, v407, 8uLL).u64[0];
                  v416 = vextq_s8(v412, v412, 8uLL).u64[0];
                  v418 = (int8x16_t)v1386[4];
                  v417 = (int8x16_t)v1386[5];
                  v419 = vextq_s8(v413, v413, 8uLL).u64[0];
                  v420 = vextq_s8(v417, v417, 8uLL).u64[0];
                  v421 = vextq_s8(v418, v418, 8uLL).u64[0];
                  v423 = (int8x16_t)v1386[2];
                  v422 = (int8x16_t)v1386[3];
                  v424 = vextq_s8(v422, v422, 8uLL).u64[0];
                  v425 = vextq_s8(v423, v423, 8uLL).u64[0];
                  v426 = v980;
                  v427 = (int8x16_t)v1386[0];
                  v428 = (int8x16_t)v1386[1];
                  v429 = vextq_s8(v428, v428, 8uLL).u64[0];
                  v430 = vextq_s8(v427, v427, 8uLL).u64[0];
                  do
                  {
                    v427.i64[1] = v430;
                    v428.i64[1] = v429;
                    v423.i64[1] = v425;
                    v422.i64[1] = v424;
                    v431 = v426[-1];
                    v432 = v303[2];
                    v433 = vmulq_f64(v426[-2], v303[1]);
                    v996 = *v426;
                    v434 = v303[3];
                    v994 = v433;
                    v995 = v434;
                    v1354 = v427;
                    v1355 = v428;
                    v1356 = v423;
                    v1357 = v422;
                    v418.i64[1] = v421;
                    v417.i64[1] = v420;
                    v413.i64[1] = v419;
                    v1358 = v418;
                    v1359 = v417;
                    v412.i64[1] = v416;
                    v407.i64[1] = v415;
                    v1360 = v413;
                    v1361 = v412;
                    v406.i64[1] = v414;
                    *(_QWORD *)&v8.f64[1] = v411;
                    v1362 = v407;
                    v1363 = v406;
                    *(_QWORD *)&v7.f64[1] = v410;
                    *(_QWORD *)&v6.f64[1] = v409;
                    v1364 = v8;
                    v1365 = v7;
                    v405.i64[1] = v408;
                    v404.i64[1] = *(_QWORD *)&v997.f64[0];
                    v1366 = v6;
                    v1367 = v405;
                    v403.i64[1] = *(_QWORD *)&v998.f64[0];
                    v402.i64[1] = *(_QWORD *)&v999.f64[0];
                    v1368 = v404;
                    v1369 = v403;
                    v401.i64[1] = *(_QWORD *)&v1000.f64[0];
                    v1370 = v402;
                    v1371 = v401;
                    v1354.i64[v400 & 0x3F] = *(_QWORD *)&v433.f64[0];
                    v1000 = vmulq_f64(v431, v432);
                    v1353 = v1385;
                    v1352 = v1384;
                    v1351 = v1383;
                    v1350 = v1382;
                    v1349 = v1381;
                    v1348 = v1380;
                    v1347 = v1379;
                    v1346 = v1378;
                    v1345 = v1377;
                    v1344 = v1376;
                    v1343 = v1375;
                    v1342 = v1374;
                    v1341 = v1373;
                    v1340 = v1372;
                    v1339 = v1371;
                    v1338 = v1370;
                    v1337 = v1369;
                    v1336 = v1368;
                    v1335 = v1367;
                    v1334 = v1366;
                    v1333 = v1365;
                    v1332 = v1364;
                    v1331 = v1363;
                    v1330 = v1362;
                    v1329 = v1361;
                    v1328 = v1360;
                    v1327 = v1359;
                    v1326 = v1358;
                    v1325 = v1357;
                    v1324 = v1356;
                    v1323 = v1355;
                    v1322 = v1354;
                    v1322.i64[((_BYTE)v400 + 1) & 0x3F] = *(_QWORD *)&v994.f64[1];
                    v1321 = v1353;
                    v1320 = v1352;
                    v1319 = v1351;
                    v1318 = v1350;
                    v1317 = v1349;
                    v1316 = v1348;
                    v1315 = v1347;
                    v1314 = v1346;
                    v1313 = v1345;
                    v1312 = v1344;
                    v1311 = v1343;
                    v1310 = v1342;
                    v1309 = v1341;
                    v1308 = v1340;
                    v1307 = (float64x2_t)v1339;
                    v1306 = (float64x2_t)v1338;
                    v1305 = (float64x2_t)v1337;
                    v1304 = (float64x2_t)v1336;
                    v1303 = (float64x2_t)v1335;
                    v1302 = v1334;
                    v1301 = v1333;
                    v1300 = v1332;
                    v1299 = (float64x2_t)v1331;
                    v1298 = (float64x2_t)v1330;
                    v1297 = (float64x2_t)v1329;
                    v1296 = (float64x2_t)v1328;
                    v1295 = (float64x2_t)v1327;
                    v1294 = (float64x2_t)v1326;
                    v1293 = (float64x2_t)v1325;
                    v1292 = (float64x2_t)v1324;
                    v1291 = (float64x2_t)v1323;
                    v1290 = (float64x2_t)v1322;
                    v435 = v1000.f64[1];
                    v1290.f64[((_BYTE)v400 + 2) & 0x3F] = v1000.f64[0];
                    v999 = vmulq_f64(v996, v995);
                    v1289 = v1321;
                    v1288 = v1320;
                    v1287 = v1319;
                    v1286 = v1318;
                    v1285 = v1317;
                    v1284 = v1316;
                    v1283 = v1315;
                    v1282 = v1314;
                    v1281 = v1313;
                    v1280 = v1312;
                    v1279 = v1311;
                    v1278 = v1310;
                    v1277 = v1309;
                    v1276 = v1308;
                    v1275 = v1307;
                    v1274 = v1306;
                    v1273 = v1305;
                    v1272 = v1304;
                    v1271 = v1303;
                    v1270 = v1302;
                    v1269 = v1301;
                    v1268 = v1300;
                    v1267 = v1299;
                    v1266 = v1298;
                    v1265 = v1297;
                    v1264 = v1296;
                    v1263 = v1295;
                    v1262 = v1294;
                    v1261 = v1293;
                    v1260 = v1292;
                    v1259 = v1291;
                    v1258 = v1290;
                    v1258.f64[((_BYTE)v400 + 3) & 0x3F] = v435;
                    v1257 = v1289;
                    v1256 = v1288;
                    v1255 = v1287;
                    v1254 = v1286;
                    v1253 = v1285;
                    v1252 = v1284;
                    v1251 = v1283;
                    v1250 = v1282;
                    v1249 = v1281;
                    v1248 = v1280;
                    v1247 = v1279;
                    v1246 = v1278;
                    v1245 = v1277;
                    v1244 = v1276;
                    v1243 = v1275;
                    v1242 = v1274;
                    v1241 = v1273;
                    v1240 = v1272;
                    v1239 = v1271;
                    v1238 = v1270;
                    v1237 = v1269;
                    v1236 = v1268;
                    v1235 = v1267;
                    v1234 = v1266;
                    v1233 = v1265;
                    v1232 = v1264;
                    v1231 = v1263;
                    v1230 = v1262;
                    v1229 = v1261;
                    v1228 = v1260;
                    v1227 = v1259;
                    v1226 = v1258;
                    v436 = v999.f64[1];
                    v1226.f64[((_BYTE)v400 + 4) & 0x3F] = v999.f64[0];
                    v1225 = v1257;
                    v1224 = v1256;
                    v1223 = v1255;
                    v1222 = v1254;
                    v1221 = v1253;
                    v1220 = v1252;
                    v1219 = v1251;
                    v1218 = v1250;
                    v1217 = v1249;
                    v1216 = v1248;
                    v1215 = v1247;
                    v1214 = v1246;
                    v1213 = v1245;
                    v1212 = v1244;
                    v1211 = v1243;
                    v1210 = v1242;
                    v1209 = v1241;
                    v1208 = v1240;
                    v1207 = v1239;
                    v1206 = v1238;
                    v1205 = v1237;
                    v1204 = v1236;
                    v1203 = v1235;
                    v1202 = v1234;
                    v1201 = v1233;
                    v1200 = v1232;
                    v1199 = v1231;
                    v1198 = v1230;
                    v1197 = v1229;
                    v1196 = v1228;
                    v1195 = v1227;
                    v1194 = v1226;
                    v1194.f64[((_BYTE)v400 + 5) & 0x3F] = v436;
                    v401 = (int8x16_t)v1211;
                    v402 = (int8x16_t)v1210;
                    v403 = (int8x16_t)v1209;
                    v404 = (int8x16_t)v1208;
                    v405 = (int8x16_t)v1207;
                    v6 = v1206;
                    v7 = v1205;
                    v8 = v1204;
                    v406 = (int8x16_t)v1203;
                    v407 = (int8x16_t)v1202;
                    v412 = (int8x16_t)v1201;
                    v413 = (int8x16_t)v1200;
                    v417 = (int8x16_t)v1199;
                    v418 = (int8x16_t)v1198;
                    v422.i64[0] = *(_QWORD *)&v1197.f64[0];
                    v423.i64[0] = *(_QWORD *)&v1196.f64[0];
                    v428.i64[0] = *(_QWORD *)&v1195.f64[0];
                    v427.i64[0] = *(_QWORD *)&v1194.f64[0];
                    v999 = (float64x2_t)vextq_s8(v402, v402, 8uLL);
                    v1000 = (float64x2_t)vextq_s8(v401, v401, 8uLL);
                    v997 = (float64x2_t)vextq_s8(v404, v404, 8uLL);
                    v998 = (float64x2_t)vextq_s8(v403, v403, 8uLL);
                    v408 = vextq_s8(v405, v405, 8uLL).u64[0];
                    v409 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
                    v410 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
                    v411 = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
                    v414 = vextq_s8(v406, v406, 8uLL).u64[0];
                    v415 = vextq_s8(v407, v407, 8uLL).u64[0];
                    v416 = vextq_s8(v412, v412, 8uLL).u64[0];
                    v419 = vextq_s8(v413, v413, 8uLL).u64[0];
                    v420 = vextq_s8(v417, v417, 8uLL).u64[0];
                    v421 = vextq_s8(v418, v418, 8uLL).u64[0];
                    v1386[0] = v1194;
                    v1386[1] = v1195;
                    v1386[2] = v1196;
                    v1386[3] = v1197;
                    v1386[4] = v1198;
                    v1386[5] = v1199;
                    v1386[6] = v1200;
                    v1386[7] = v1201;
                    v1386[8] = v1202;
                    v1386[9] = v1203;
                    v1386[10] = v1204;
                    v1386[11] = v1205;
                    v1386[12] = v1206;
                    v1386[13] = v1207;
                    v400 += 6;
                    v426 += 3;
                    v1386[14] = v1208;
                    v1386[15] = v1209;
                    v1386[16] = v1210;
                    v1386[17] = v1211;
                    v424 = vextq_s8((int8x16_t)v1386[3], (int8x16_t)v1386[3], 8uLL).u64[0];
                    v425 = vextq_s8((int8x16_t)v1386[2], (int8x16_t)v1386[2], 8uLL).u64[0];
                    v429 = vextq_s8((int8x16_t)v1386[1], (int8x16_t)v1386[1], 8uLL).u64[0];
                    v430 = vextq_s8((int8x16_t)v1386[0], (int8x16_t)v1386[0], 8uLL).u64[0];
                  }
                  while (v400 != 36);
                  goto LABEL_116;
                case 2:
                  v437 = v303[1].f64[0];
                  v8 = vmulq_n_f64(v1386[11], v437);
                  v7 = vmulq_n_f64(v1386[12], v437);
                  v6 = vmulq_n_f64(v1386[13], v437);
                  v1386[16] = vmulq_n_f64(v1386[16], v437);
                  v1386[17] = vmulq_n_f64(v1386[17], v437);
                  v1386[14] = vmulq_n_f64(v1386[14], v437);
                  v1386[15] = vmulq_n_f64(v1386[15], v437);
                  v1386[12] = v7;
                  v1386[13] = v6;
                  v1386[10] = vmulq_n_f64(v1386[10], v437);
                  v1386[11] = v8;
                  v1386[8] = vmulq_n_f64(v1386[8], v437);
                  v1386[9] = vmulq_n_f64(v1386[9], v437);
                  v1386[6] = vmulq_n_f64(v1386[6], v437);
                  v1386[7] = vmulq_n_f64(v1386[7], v437);
                  v1386[4] = vmulq_n_f64(v1386[4], v437);
                  v1386[5] = vmulq_n_f64(v1386[5], v437);
                  v1386[2] = vmulq_n_f64(v1386[2], v437);
                  v1386[3] = vmulq_n_f64(v1386[3], v437);
                  v1386[0] = vmulq_n_f64(v1386[0], v437);
                  v1386[1] = vmulq_n_f64(v1386[1], v437);
                  goto LABEL_116;
                case 4:
                  v533 = v304;
                  v534 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v303->f64[0]
                                                                                             + 56))(&v1388, v303);
                  MEMORY[0x24BDAC7A8](v534);
                  *(_QWORD *)&v1000.f64[0] = v292 + 800;
                  memcpy(&v978 - 36, v1386, 0x120uLL);
                  v304 = v533;
                  v535 = *((float64x2_t *)&v978 - 18);
                  v536 = *((float64x2_t *)&v978 - 17);
                  v300 = v1000.f64[0];
                  v537 = vmlaq_laneq_f64(vmulq_n_f64(v1388, *((double *)&v978 - 36)), v1391, v535, 1);
                  v998 = v1393;
                  v999 = v1390;
                  v538 = vmlaq_laneq_f64(vmlaq_n_f64(v537, v1394, v536.f64[0]), v1397, v536, 1);
                  v996 = v1394;
                  v997 = v1396;
                  v539 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v535.f64[0]), v1392, v535, 1), v1395, v536.f64[0]), v1398, v536, 1);
                  v540 = *((float64x2_t *)&v978 - 15);
                  v541 = *((float64x2_t *)&v978 - 14);
                  v542 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v540.f64[0]), v1391, v540, 1), v1394, v541.f64[0]), v1397, v541, 1);
                  v543 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v540.f64[0]), v1392, v540, 1), v1395, v541.f64[0]), v1398, v541, 1);
                  v544 = *((float64x2_t *)&v978 - 12);
                  v545 = *((float64x2_t *)&v978 - 11);
                  v546 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v544.f64[0]), v1391, v544, 1), v1394, v545.f64[0]), v1397, v545, 1);
                  v547 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v544.f64[0]), v1392, v544, 1), v1395, v545.f64[0]), v1398, v545, 1);
                  v548 = *((float64x2_t *)&v978 - 9);
                  v549 = *((float64x2_t *)&v978 - 8);
                  v550 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v548.f64[0]), v1391, v548, 1), v1394, v549.f64[0]), v1397, v549, 1);
                  v551 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v548.f64[0]), v1392, v548, 1), v1395, v549.f64[0]), v1398, v549, 1);
                  v552 = *((float64x2_t *)&v978 - 16);
                  v7.f64[0] = v1399.f64[0];
                  v6.f64[0] = v1402.f64[0];
                  v553 = vmlaq_laneq_f64(vmlaq_n_f64(v538, v1400, v552.f64[0]), v1403, v552, 1);
                  v554 = vmlaq_laneq_f64(vmlaq_n_f64(v539, v1401, v552.f64[0]), v1404, v552, 1);
                  v555 = *((float64x2_t *)&v978 - 13);
                  v556 = vmlaq_laneq_f64(vmlaq_n_f64(v542, v1400, v555.f64[0]), v1403, v555, 1);
                  v557 = vmlaq_laneq_f64(vmlaq_n_f64(v543, v1401, v555.f64[0]), v1404, v555, 1);
                  v558 = *((float64x2_t *)&v978 - 10);
                  v559 = vmlaq_laneq_f64(vmlaq_n_f64(v546, v1400, v558.f64[0]), v1403, v558, 1);
                  v560 = vmlaq_laneq_f64(vmlaq_n_f64(v547, v1401, v558.f64[0]), v1404, v558, 1);
                  v561 = *((float64x2_t *)&v978 - 7);
                  v562 = vmlaq_laneq_f64(vmlaq_n_f64(v550, v1400, v561.f64[0]), v1403, v561, 1);
                  v563 = vmlaq_laneq_f64(vmlaq_n_f64(v551, v1401, v561.f64[0]), v1404, v561, 1);
                  v564 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, v535.f64[0]), v1393, v535, 1), v1396, *((double *)&v978 - 34)), v1399, *((float64x2_t *)&v978 - 17), 1), v1402, *((double *)&v978 - 32)), v1405, *((float64x2_t *)&v978 - 16), 1);
                  v565 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, *((double *)&v978 - 30)), v1393, *((float64x2_t *)&v978 - 15), 1), v1396, *((double *)&v978 - 28)), v1399, v541, 1), v1402, *((double *)&v978 - 26)), v1405, *((float64x2_t *)&v978 - 13), 1);
                  v566 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, *((double *)&v978 - 24)), v1393, *((float64x2_t *)&v978 - 12), 1), v1396, *((double *)&v978 - 22)), v1399, v545, 1), v1402, *((double *)&v978 - 20)), v1405, *((float64x2_t *)&v978 - 10), 1);
                  v567 = *((float64x2_t *)&v978 - 6);
                  v568 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, *((double *)&v978 - 18)), v1393, *((float64x2_t *)&v978 - 9), 1), v1396, *((double *)&v978 - 16)), v1399, v549, 1), v1402, *((double *)&v978 - 14)), v1405, v561, 1);
                  v1386[0] = v553;
                  v1386[1] = v554;
                  v1386[6] = v559;
                  v1386[7] = v560;
                  v1386[2] = v564;
                  v1386[3] = v556;
                  v1386[4] = v557;
                  v1386[5] = v565;
                  v1386[8] = v566;
                  v1386[9] = v562;
                  v1386[10] = v563;
                  v1386[11] = v568;
                  v570 = *((float64x2_t *)&v978 - 6);
                  v569 = *((float64x2_t *)&v978 - 5);
                  v571 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v567.f64[0]), v1391, v567, 1), v1394, v569.f64[0]), v1397, v569, 1);
                  v572 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v567.f64[0]), v1392, v567, 1), v1395, v569.f64[0]), v1398, v569, 1);
                  v574 = *((float64x2_t *)&v978 - 4);
                  v573 = *((float64x2_t *)&v978 - 3);
                  v575 = vmlaq_laneq_f64(vmulq_n_f64(v1388, v573.f64[0]), v1391, v573, 1);
                  v576 = vmlaq_laneq_f64(vmulq_n_f64(v1389, v573.f64[0]), v1392, v573, 1);
                  v578 = v573;
                  v577 = *((float64x2_t *)&v978 - 2);
                  v579 = vmlaq_laneq_f64(vmlaq_n_f64(v575, v1394, v577.f64[0]), v1397, v577, 1);
                  v580 = vmlaq_laneq_f64(vmlaq_n_f64(v576, v1395, v577.f64[0]), v1398, v577, 1);
                  v582 = *((float64x2_t *)&v978 - 5);
                  v581 = v574;
                  v583 = vmlaq_laneq_f64(vmlaq_n_f64(v571, v1400, v581.f64[0]), v1403, v581, 1);
                  v584 = vmlaq_laneq_f64(vmlaq_n_f64(v572, v1401, v581.f64[0]), v1404, v581, 1);
                  v586 = *((float64x2_t *)&v978 - 2);
                  v585 = *((float64x2_t *)&v978 - 1);
                  v8 = vmlaq_laneq_f64(vmlaq_n_f64(v579, v1400, v585.f64[0]), v1403, v585, 1);
                  v1386[12] = v583;
                  v1386[13] = v584;
                  v587 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, v570.f64[0]), v1393, v570, 1), v1396, v582.f64[0]), v1399, v582, 1);
                  v588 = *((float64x2_t *)&v978 - 1);
                  v290 = v992;
                  v1386[14] = vmlaq_laneq_f64(vmlaq_n_f64(v587, v1402, v574.f64[0]), v1405, v574, 1);
                  v1386[15] = v8;
                  v1386[16] = vmlaq_laneq_f64(vmlaq_n_f64(v580, v1401, v585.f64[0]), v1404, v585, 1);
                  v1386[17] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, v578.f64[0]), v1393, v578, 1), v1396, v586.f64[0]), v1399, v586, 1), v1402, v588.f64[0]), v1405, v588, 1);
                  if (*(_BYTE *)(*(_QWORD *)(v292 + 744) + 20))
                    goto LABEL_117;
                  break;
                default:
                  goto LABEL_116;
              }
            }
            else
            {
LABEL_116:
              if (*(_BYTE *)(*(_QWORD *)(v292 + 744) + 20))
              {
LABEL_117:
                switch((int)v304)
                {
                  case 0:
                    v438 = v303 + 1;
                    if (v981 > &v303[1] && &v303[19] > (float64x2_t *)v1387)
                    {
                      MEMORY[0x24BDAC7A8](v304);
                      v304 = (uint64_t)memcpy(&v978 - 36, &v303[1], 0x120uLL);
                      v438 = (float64x2_t *)(&v978 - 36);
                    }
                    MEMORY[0x24BDAC7A8](v304);
                    v439 = (float64x2_t *)(&v978 - 36);
                    memcpy(&v978 - 36, v1387, 0x120uLL);
                    v440 = v438[1];
                    v442 = v438[3];
                    v441 = v438[4];
                    v444 = v438[6];
                    v443 = v438[7];
                    v446 = v438[9];
                    v445 = v438[10];
                    v447 = *((float64x2_t *)&v978 - 17);
                    v448 = *((float64x2_t *)&v978 - 18);
                    v449 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v438, v439->f64[0]), v442, *v439, 1), v444, v447.f64[0]), v446, v447, 1);
                    v450 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v440, v439->f64[0]), v441, *v439, 1), v443, v447.f64[0]), v445, v447, 1);
                    v452 = *((float64x2_t *)&v978 - 16);
                    v451 = *((float64x2_t *)&v978 - 15);
                    v454 = v451;
                    v453 = *((float64x2_t *)&v978 - 14);
                    v455 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v438, v451.f64[0]), v442, v451, 1), v444, v453.f64[0]), v446, v453, 1);
                    v456 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v440, v451.f64[0]), v441, v451, 1), v443, v453.f64[0]), v445, v453, 1);
                    v458 = *((float64x2_t *)&v978 - 13);
                    v457 = *((float64x2_t *)&v978 - 12);
                    v460 = v457;
                    v459 = *((float64x2_t *)&v978 - 11);
                    v461 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v438, v457.f64[0]), v442, v457, 1), v444, v459.f64[0]), v446, v459, 1);
                    v462 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v440, v457.f64[0]), v441, v457, 1), v443, v459.f64[0]), v445, v459, 1);
                    v464 = *((float64x2_t *)&v978 - 10);
                    v463 = *((float64x2_t *)&v978 - 9);
                    v465 = vmlaq_laneq_f64(vmulq_n_f64(*v438, v463.f64[0]), v442, v463, 1);
                    v467 = v463;
                    v466 = *((float64x2_t *)&v978 - 8);
                    v468 = vmlaq_laneq_f64(vmlaq_n_f64(v465, v444, v466.f64[0]), v446, v466, 1);
                    v469 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v440, v463.f64[0]), v441, v463, 1), v443, v466.f64[0]), v445, v466, 1);
                    v471 = v438[12];
                    v470 = v438[13];
                    v473 = v438[15];
                    v472 = v438[16];
                    v474 = v452;
                    v475 = vmlaq_laneq_f64(vmlaq_n_f64(v449, v471, v474.f64[0]), v473, v474, 1);
                    v476 = vmlaq_laneq_f64(vmlaq_n_f64(v450, v470, v474.f64[0]), v472, v474, 1);
                    v478 = *((float64x2_t *)&v978 - 14);
                    v477 = v458;
                    v479 = vmlaq_laneq_f64(vmlaq_n_f64(v455, v471, v477.f64[0]), v473, v477, 1);
                    v480 = vmlaq_laneq_f64(vmlaq_n_f64(v456, v470, v477.f64[0]), v472, v477, 1);
                    v482 = *((float64x2_t *)&v978 - 11);
                    v481 = v464;
                    v483 = vmlaq_laneq_f64(vmlaq_n_f64(v461, v471, v481.f64[0]), v473, v481, 1);
                    v484 = vmlaq_laneq_f64(vmlaq_n_f64(v462, v470, v481.f64[0]), v472, v481, 1);
                    v486 = *((float64x2_t *)&v978 - 8);
                    v485 = *((float64x2_t *)&v978 - 7);
                    v1387[0] = (int64x2_t)v475;
                    v1387[1] = (int64x2_t)v476;
                    v1387[3] = (int64x2_t)v479;
                    v1387[4] = (int64x2_t)v480;
                    v1387[6] = (int64x2_t)v483;
                    v1387[7] = (int64x2_t)v484;
                    v1387[9] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v468, v471, v485.f64[0]), v473, v485, 1);
                    v1387[10] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v469, v470, v485.f64[0]), v472, v485, 1);
                    v487 = v438[2];
                    v488 = v438[5];
                    v489 = v438[8];
                    v490 = v438[11];
                    v491 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v487, v448.f64[0]), v488, v448, 1), v489, *((double *)&v978 - 34)), v490, *((float64x2_t *)&v978 - 17), 1);
                    v492 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v487, v454.f64[0]), v488, v454, 1), v489, v478.f64[0]), v490, v478, 1);
                    v493 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v487, v460.f64[0]), v488, v460, 1), v489, v482.f64[0]), v490, v482, 1);
                    v494 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v487, v467.f64[0]), v488, v467, 1), v489, v486.f64[0]), v490, v486, 1);
                    v495 = v438[14];
                    v496 = v438[17];
                    v497 = *((float64x2_t *)&v978 - 6);
                    v498 = vmlaq_laneq_f64(vmlaq_n_f64(v494, v495, *((double *)&v978 - 14)), v496, *((float64x2_t *)&v978 - 7), 1);
                    v1387[2] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v491, v495, v452.f64[0]), v496, v452, 1);
                    v1387[5] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v492, v495, v458.f64[0]), v496, v458, 1);
                    v1387[8] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v493, v495, v464.f64[0]), v496, v464, 1);
                    v1387[11] = (int64x2_t)v498;
                    v499 = v438[1];
                    v501 = v438[3];
                    v500 = v438[4];
                    v503 = v438[6];
                    v502 = v438[7];
                    v505 = v438[9];
                    v504 = v438[10];
                    v507 = *((float64x2_t *)&v978 - 6);
                    v506 = *((float64x2_t *)&v978 - 5);
                    v508 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v438, v497.f64[0]), v501, v497, 1), v503, v506.f64[0]), v505, v506, 1);
                    v509 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v499, v497.f64[0]), v500, v497, 1), v502, v506.f64[0]), v504, v506, 1);
                    v511 = *((float64x2_t *)&v978 - 4);
                    v510 = *((float64x2_t *)&v978 - 3);
                    v512 = vmlaq_laneq_f64(vmulq_n_f64(*v438, v510.f64[0]), v501, v510, 1);
                    v514 = v510;
                    v513 = *((float64x2_t *)&v978 - 2);
                    v515 = vmlaq_laneq_f64(vmlaq_n_f64(v512, v503, v513.f64[0]), v505, v513, 1);
                    v516 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v499, v510.f64[0]), v500, v510, 1), v502, v513.f64[0]), v504, v513, 1);
                    v518 = v438[12];
                    v517 = v438[13];
                    v6 = v438[15];
                    v519 = v438[16];
                    v8 = *((float64x2_t *)&v978 - 5);
                    v520 = v511;
                    v521 = vmlaq_laneq_f64(vmlaq_n_f64(v508, v518, v520.f64[0]), v6, v520, 1);
                    v522 = vmlaq_laneq_f64(vmlaq_n_f64(v509, v517, v520.f64[0]), v519, v520, 1);
                    v523 = *((float64x2_t *)&v978 - 2);
                    v7 = *((float64x2_t *)&v978 - 1);
                    v1387[12] = (int64x2_t)v521;
                    v1387[13] = (int64x2_t)v522;
                    v1387[15] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v515, v518, v7.f64[0]), v6, v7, 1);
                    v1387[16] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v516, v517, v7.f64[0]), v519, v7, 1);
                    v524 = v438[2];
                    v525 = v438[5];
                    v526 = v438[8];
                    v527 = v438[11];
                    v528 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v524, v507.f64[0]), v525, v507, 1), v526, v8.f64[0]), v527, v8, 1);
                    v529 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v524, v514.f64[0]), v525, v514, 1), v526, v523.f64[0]), v527, v523, 1);
                    v530 = v438[14];
                    v531 = v438[17];
                    v532 = vmlaq_laneq_f64(vmlaq_n_f64(v529, v530, *((double *)&v978 - 2)), v531, *((float64x2_t *)&v978 - 1), 1);
                    v1387[14] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v528, v530, v511.f64[0]), v531, v511, 1);
                    v1387[17] = (int64x2_t)v532;
                    v290 = v992;
                    break;
                  case 1:
                    v589 = 0;
                    v591 = (int8x16_t)v1387[16];
                    v590 = (int8x16_t)v1387[17];
                    v593 = (int8x16_t)v1387[14];
                    v592 = (int8x16_t)v1387[15];
                    v6 = (float64x2_t)v1387[12];
                    v594 = (int8x16_t)v1387[13];
                    v8 = (float64x2_t)v1387[10];
                    v7 = (float64x2_t)v1387[11];
                    v596 = (int8x16_t)v1387[8];
                    v595 = (int8x16_t)v1387[9];
                    v999 = (float64x2_t)vextq_s8(v591, v591, 8uLL);
                    v1000 = (float64x2_t)vextq_s8(v590, v590, 8uLL);
                    v997 = (float64x2_t)vextq_s8(v593, v593, 8uLL);
                    v998 = (float64x2_t)vextq_s8(v592, v592, 8uLL);
                    v597 = vextq_s8(v594, v594, 8uLL).u64[0];
                    v598 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
                    v599 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
                    v600 = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
                    v602 = (int8x16_t)v1387[6];
                    v601 = (int8x16_t)v1387[7];
                    v603 = vextq_s8(v595, v595, 8uLL).u64[0];
                    v604 = vextq_s8(v596, v596, 8uLL).u64[0];
                    v605 = vextq_s8(v601, v601, 8uLL).u64[0];
                    v607 = (int8x16_t)v1387[4];
                    v606 = (int8x16_t)v1387[5];
                    v608 = vextq_s8(v602, v602, 8uLL).u64[0];
                    v609 = vextq_s8(v606, v606, 8uLL).u64[0];
                    v610 = vextq_s8(v607, v607, 8uLL).u64[0];
                    v612 = (int8x16_t)v1387[2];
                    v611 = (int8x16_t)v1387[3];
                    v613 = vextq_s8(v611, v611, 8uLL).u64[0];
                    v614 = vextq_s8(v612, v612, 8uLL).u64[0];
                    v615 = (float64x2_t *)v979;
                    v616 = (int8x16_t)v1387[0];
                    v617 = (int8x16_t)v1387[1];
                    v618 = vextq_s8(v617, v617, 8uLL).u64[0];
                    v619 = vextq_s8(v616, v616, 8uLL).u64[0];
                    do
                    {
                      v616.i64[1] = v619;
                      v617.i64[1] = v618;
                      v612.i64[1] = v614;
                      v611.i64[1] = v613;
                      v620 = v615[-1];
                      v621 = v303[2];
                      v622 = vmulq_f64(v615[-2], v303[1]);
                      v996 = *v615;
                      v623 = v303[3];
                      v994 = v622;
                      v995 = v623;
                      v1162 = v616;
                      v1163 = v617;
                      v1164 = v612;
                      v1165 = v611;
                      v607.i64[1] = v610;
                      v606.i64[1] = v609;
                      v602.i64[1] = v608;
                      v1166 = v607;
                      v1167 = v606;
                      v601.i64[1] = v605;
                      v596.i64[1] = v604;
                      v1168 = v602;
                      v1169 = v601;
                      v595.i64[1] = v603;
                      *(_QWORD *)&v8.f64[1] = v600;
                      v1170 = v596;
                      v1171 = v595;
                      *(_QWORD *)&v7.f64[1] = v599;
                      *(_QWORD *)&v6.f64[1] = v598;
                      v1172 = v8;
                      v1173 = v7;
                      v594.i64[1] = v597;
                      v593.i64[1] = *(_QWORD *)&v997.f64[0];
                      v1174 = v6;
                      v1175 = v594;
                      v592.i64[1] = *(_QWORD *)&v998.f64[0];
                      v591.i64[1] = *(_QWORD *)&v999.f64[0];
                      v1176 = v593;
                      v1177 = v592;
                      v590.i64[1] = *(_QWORD *)&v1000.f64[0];
                      v1178 = v591;
                      v1179 = v590;
                      v1162.i64[v589 & 0x3F] = *(_QWORD *)&v622.f64[0];
                      v1000 = vmulq_f64(v620, v621);
                      v1161 = v1193;
                      v1160 = v1192;
                      v1159 = v1191;
                      v1158 = v1190;
                      v1157 = v1189;
                      v1156 = v1188;
                      v1155 = v1187;
                      v1154 = v1186;
                      v1153 = v1185;
                      v1152 = v1184;
                      v1151 = v1183;
                      v1150 = v1182;
                      v1149 = v1181;
                      v1148 = v1180;
                      v1147 = v1179;
                      v1146 = v1178;
                      v1145 = v1177;
                      v1144 = v1176;
                      v1143 = v1175;
                      v1142 = v1174;
                      v1141 = v1173;
                      v1140 = v1172;
                      v1139 = v1171;
                      v1138 = v1170;
                      v1137 = v1169;
                      v1136 = v1168;
                      v1135 = v1167;
                      v1134 = v1166;
                      v1133 = v1165;
                      v1132 = v1164;
                      v1131 = v1163;
                      v1130 = v1162;
                      v1130.i64[((_BYTE)v589 + 1) & 0x3F] = *(_QWORD *)&v994.f64[1];
                      v1129 = v1161;
                      v1128 = v1160;
                      v1127 = v1159;
                      v1126 = v1158;
                      v1125 = v1157;
                      v1124 = v1156;
                      v1123 = v1155;
                      v1122 = v1154;
                      v1121 = v1153;
                      v1120 = v1152;
                      v1119 = v1151;
                      v1118 = v1150;
                      v1117 = v1149;
                      v1116 = v1148;
                      v1115 = v1147;
                      v1114 = v1146;
                      v1113 = v1145;
                      v1112 = v1144;
                      v1111 = v1143;
                      v1110 = v1142;
                      v1109 = v1141;
                      v1108 = v1140;
                      v1107 = v1139;
                      v1106 = v1138;
                      v1105 = v1137;
                      v1104 = v1136;
                      v1103 = v1135;
                      v1102 = v1134;
                      v1101 = v1133;
                      v1100 = v1132;
                      v1099 = v1131;
                      v1098 = v1130;
                      v624 = v1000.f64[1];
                      v1098.i64[((_BYTE)v589 + 2) & 0x3F] = *(_QWORD *)&v1000.f64[0];
                      v999 = vmulq_f64(v996, v995);
                      v1097 = v1129;
                      v1096 = v1128;
                      v1095 = v1127;
                      v1094 = v1126;
                      v1093 = v1125;
                      v1092 = v1124;
                      v1091 = v1123;
                      v1090 = v1122;
                      v1089 = v1121;
                      v1088 = v1120;
                      v1087 = v1119;
                      v1086 = v1118;
                      v1085 = v1117;
                      v1084 = v1116;
                      v1083 = (int64x2_t)v1115;
                      v1082 = (int64x2_t)v1114;
                      v1081 = (int64x2_t)v1113;
                      v1080 = (int64x2_t)v1112;
                      v1079 = (int64x2_t)v1111;
                      v1078 = (int64x2_t)v1110;
                      v1077 = (int64x2_t)v1109;
                      v1076 = (int64x2_t)v1108;
                      v1075 = (int64x2_t)v1107;
                      v1074 = (int64x2_t)v1106;
                      v1073 = (int64x2_t)v1105;
                      v1072 = (int64x2_t)v1104;
                      v1071 = (int64x2_t)v1103;
                      v1070 = (int64x2_t)v1102;
                      v1069 = (int64x2_t)v1101;
                      v1068 = (int64x2_t)v1100;
                      v1067 = (int64x2_t)v1099;
                      v1066 = (int64x2_t)v1098;
                      *(float64_t *)&v1066.i64[((_BYTE)v589 + 3) & 0x3F] = v624;
                      v1065 = v1097;
                      v1064 = v1096;
                      v1063 = v1095;
                      v1062 = v1094;
                      v1061 = v1093;
                      v1060 = v1092;
                      v1059 = v1091;
                      v1058 = v1090;
                      v1057 = v1089;
                      v1056 = v1088;
                      v1055 = v1087;
                      v1054 = v1086;
                      v1053 = v1085;
                      v1052 = v1084;
                      v1051 = v1083;
                      v1050 = v1082;
                      v1049 = v1081;
                      v1048 = v1080;
                      v1046 = v1078;
                      v1047 = v1079;
                      v1044 = v1076;
                      v1045 = v1077;
                      v1042 = v1074;
                      v1043 = v1075;
                      v1040 = v1072;
                      v1041 = v1073;
                      v1038 = v1070;
                      v1039 = v1071;
                      v1036 = v1068;
                      v1037 = v1069;
                      v1034 = v1066;
                      v1035 = v1067;
                      v625 = v999.f64[1];
                      v1034.i64[((_BYTE)v589 + 4) & 0x3F] = *(_QWORD *)&v999.f64[0];
                      v1032 = v1064;
                      v1033 = v1065;
                      v1030 = v1062;
                      v1031 = v1063;
                      v1028 = v1060;
                      v1029 = v1061;
                      v1026 = v1058;
                      v1027 = v1059;
                      v1024 = v1056;
                      v1025 = v1057;
                      v1022 = v1054;
                      v1023 = v1055;
                      v1020 = v1052;
                      v1021 = v1053;
                      v1018 = v1050;
                      v1019 = v1051;
                      v1016 = v1048;
                      v1017 = v1049;
                      v1014 = v1046;
                      v1015 = v1047;
                      v1012 = v1044;
                      v1013 = v1045;
                      v1010 = v1042;
                      v1011 = v1043;
                      v1008 = v1040;
                      v1009 = v1041;
                      v1006 = v1038;
                      v1007 = v1039;
                      v1004 = v1036;
                      v1005 = v1037;
                      v1003 = v1035;
                      v1002 = v1034;
                      *(float64_t *)&v1002.i64[((_BYTE)v589 + 5) & 0x3F] = v625;
                      v591 = (int8x16_t)v1018;
                      v590 = (int8x16_t)v1019;
                      v593 = (int8x16_t)v1016;
                      v592 = (int8x16_t)v1017;
                      v6 = (float64x2_t)v1014;
                      v594 = (int8x16_t)v1015;
                      v8 = (float64x2_t)v1012;
                      v7 = (float64x2_t)v1013;
                      v596 = (int8x16_t)v1010;
                      v595 = (int8x16_t)v1011;
                      v602 = (int8x16_t)v1008;
                      v601 = (int8x16_t)v1009;
                      v607 = (int8x16_t)v1006;
                      v606 = (int8x16_t)v1007;
                      v612.i64[0] = v1004.i64[0];
                      v611.i64[0] = v1005.i64[0];
                      v616.i64[0] = v1002.i64[0];
                      v617.i64[0] = v1003.i64[0];
                      v1000 = (float64x2_t)vextq_s8(v590, v590, 8uLL);
                      v999 = (float64x2_t)vextq_s8(v591, v591, 8uLL);
                      v998 = (float64x2_t)vextq_s8(v592, v592, 8uLL);
                      v997 = (float64x2_t)vextq_s8(v593, v593, 8uLL);
                      v597 = vextq_s8(v594, v594, 8uLL).u64[0];
                      v598 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
                      v599 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
                      v600 = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
                      v603 = vextq_s8(v595, v595, 8uLL).u64[0];
                      v604 = vextq_s8(v596, v596, 8uLL).u64[0];
                      v605 = vextq_s8(v601, v601, 8uLL).u64[0];
                      v608 = vextq_s8(v602, v602, 8uLL).u64[0];
                      v609 = vextq_s8(v606, v606, 8uLL).u64[0];
                      v610 = vextq_s8(v607, v607, 8uLL).u64[0];
                      v1387[2] = v1004;
                      v1387[3] = v1005;
                      v1387[4] = v1006;
                      v1387[5] = v1007;
                      v1387[6] = v1008;
                      v1387[7] = v1009;
                      v1387[8] = v1010;
                      v1387[9] = v1011;
                      v1387[10] = v1012;
                      v1387[11] = v1013;
                      v1387[12] = v1014;
                      v1387[13] = v1015;
                      v1387[14] = v1016;
                      v1387[15] = v1017;
                      v589 += 6;
                      v615 += 3;
                      v1387[16] = v1018;
                      v1387[17] = v1019;
                      v1387[0] = v1002;
                      v1387[1] = v1003;
                      v613 = vextq_s8((int8x16_t)v1387[3], (int8x16_t)v1387[3], 8uLL).u64[0];
                      v614 = vextq_s8((int8x16_t)v1387[2], (int8x16_t)v1387[2], 8uLL).u64[0];
                      v618 = vextq_s8((int8x16_t)v1387[1], (int8x16_t)v1387[1], 8uLL).u64[0];
                      v619 = vextq_s8((int8x16_t)v1387[0], (int8x16_t)v1387[0], 8uLL).u64[0];
                    }
                    while (v589 != 36);
                    break;
                  case 2:
                    v626 = v303[1].f64[0];
                    v8 = vmulq_n_f64((float64x2_t)v1387[11], v626);
                    v7 = vmulq_n_f64((float64x2_t)v1387[12], v626);
                    v6 = vmulq_n_f64((float64x2_t)v1387[13], v626);
                    v1387[16] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[16], v626);
                    v1387[17] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[17], v626);
                    v1387[14] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[14], v626);
                    v1387[15] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[15], v626);
                    v1387[12] = (int64x2_t)v7;
                    v1387[13] = (int64x2_t)v6;
                    v1387[10] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[10], v626);
                    v1387[11] = (int64x2_t)v8;
                    v1387[8] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[8], v626);
                    v1387[9] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[9], v626);
                    v1387[6] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[6], v626);
                    v1387[7] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[7], v626);
                    v1387[4] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[4], v626);
                    v1387[5] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[5], v626);
                    v1387[2] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[2], v626);
                    v1387[3] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[3], v626);
                    v1387[0] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[0], v626);
                    v1387[1] = (int64x2_t)vmulq_n_f64((float64x2_t)v1387[1], v626);
                    break;
                  case 4:
                    v627 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v303->f64[0]
                                                                                               + 56))(&v1388, v303);
                    MEMORY[0x24BDAC7A8](v627);
                    memcpy(&v978 - 36, v1387, 0x120uLL);
                    v628 = *((float64x2_t *)&v978 - 18);
                    v629 = *((float64x2_t *)&v978 - 17);
                    v630 = vmlaq_laneq_f64(vmulq_n_f64(v1388, *((double *)&v978 - 36)), v1391, v628, 1);
                    v999 = v1393;
                    v1000 = v1390;
                    v631 = vmlaq_laneq_f64(vmlaq_n_f64(v630, v1394, v629.f64[0]), v1397, v629, 1);
                    v997 = v1394;
                    v998 = v1396;
                    v632 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v628.f64[0]), v1392, v628, 1), v1395, v629.f64[0]), v1398, v629, 1);
                    v633 = *((float64x2_t *)&v978 - 15);
                    v634 = *((float64x2_t *)&v978 - 14);
                    v635 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v633.f64[0]), v1391, v633, 1), v1394, v634.f64[0]), v1397, v634, 1);
                    v636 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v633.f64[0]), v1392, v633, 1), v1395, v634.f64[0]), v1398, v634, 1);
                    v637 = *((float64x2_t *)&v978 - 12);
                    v638 = *((float64x2_t *)&v978 - 11);
                    v639 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v637.f64[0]), v1391, v637, 1), v1394, v638.f64[0]), v1397, v638, 1);
                    v640 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v637.f64[0]), v1392, v637, 1), v1395, v638.f64[0]), v1398, v638, 1);
                    v641 = *((float64x2_t *)&v978 - 9);
                    v642 = *((float64x2_t *)&v978 - 8);
                    v643 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v641.f64[0]), v1391, v641, 1), v1394, v642.f64[0]), v1397, v642, 1);
                    v644 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v641.f64[0]), v1392, v641, 1), v1395, v642.f64[0]), v1398, v642, 1);
                    v645 = *((float64x2_t *)&v978 - 16);
                    v7.f64[0] = v1399.f64[0];
                    v6.f64[0] = v1402.f64[0];
                    v646 = vmlaq_laneq_f64(vmlaq_n_f64(v631, v1400, v645.f64[0]), v1403, v645, 1);
                    v647 = vmlaq_laneq_f64(vmlaq_n_f64(v632, v1401, v645.f64[0]), v1404, v645, 1);
                    v648 = *((float64x2_t *)&v978 - 13);
                    v649 = vmlaq_laneq_f64(vmlaq_n_f64(v635, v1400, v648.f64[0]), v1403, v648, 1);
                    v650 = vmlaq_laneq_f64(vmlaq_n_f64(v636, v1401, v648.f64[0]), v1404, v648, 1);
                    v651 = *((float64x2_t *)&v978 - 10);
                    v652 = vmlaq_laneq_f64(vmlaq_n_f64(v639, v1400, v651.f64[0]), v1403, v651, 1);
                    v653 = vmlaq_laneq_f64(vmlaq_n_f64(v640, v1401, v651.f64[0]), v1404, v651, 1);
                    v654 = *((float64x2_t *)&v978 - 7);
                    v655 = vmlaq_laneq_f64(vmlaq_n_f64(v643, v1400, v654.f64[0]), v1403, v654, 1);
                    v656 = vmlaq_laneq_f64(vmlaq_n_f64(v644, v1401, v654.f64[0]), v1404, v654, 1);
                    v657 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, v628.f64[0]), v1393, v628, 1), v1396, *((double *)&v978 - 34)), v1399, *((float64x2_t *)&v978 - 17), 1), v1402, *((double *)&v978 - 32)), v1405, *((float64x2_t *)&v978 - 16), 1);
                    v658 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, *((double *)&v978 - 30)), v1393, *((float64x2_t *)&v978 - 15), 1), v1396, *((double *)&v978 - 28)), v1399, v634, 1), v1402, *((double *)&v978 - 26)), v1405, *((float64x2_t *)&v978 - 13), 1);
                    v659 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, *((double *)&v978 - 24)), v1393, *((float64x2_t *)&v978 - 12), 1), v1396, *((double *)&v978 - 22)), v1399, v638, 1), v1402, *((double *)&v978 - 20)), v1405, *((float64x2_t *)&v978 - 10), 1);
                    v660 = *((float64x2_t *)&v978 - 6);
                    v661 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, *((double *)&v978 - 18)), v1393, *((float64x2_t *)&v978 - 9), 1), v1396, *((double *)&v978 - 16)), v1399, v642, 1), v1402, *((double *)&v978 - 14)), v1405, v654, 1);
                    v1387[0] = (int64x2_t)v646;
                    v1387[1] = (int64x2_t)v647;
                    v1387[3] = (int64x2_t)v649;
                    v1387[4] = (int64x2_t)v650;
                    v1387[9] = (int64x2_t)v655;
                    v1387[10] = (int64x2_t)v656;
                    v1387[2] = (int64x2_t)v657;
                    v1387[5] = (int64x2_t)v658;
                    v1387[6] = (int64x2_t)v652;
                    v1387[7] = (int64x2_t)v653;
                    v1387[8] = (int64x2_t)v659;
                    v663 = *((float64x2_t *)&v978 - 6);
                    v662 = *((float64x2_t *)&v978 - 5);
                    v664 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1388, v660.f64[0]), v1391, v660, 1), v1394, v662.f64[0]), v1397, v662, 1);
                    v665 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1389, v660.f64[0]), v1392, v660, 1), v1395, v662.f64[0]), v1398, v662, 1);
                    v667 = *((float64x2_t *)&v978 - 4);
                    v666 = *((float64x2_t *)&v978 - 3);
                    v668 = vmlaq_laneq_f64(vmulq_n_f64(v1388, v666.f64[0]), v1391, v666, 1);
                    v669 = vmlaq_laneq_f64(vmulq_n_f64(v1389, v666.f64[0]), v1392, v666, 1);
                    v671 = v666;
                    v670 = *((float64x2_t *)&v978 - 2);
                    v672 = vmlaq_laneq_f64(vmlaq_n_f64(v668, v1394, v670.f64[0]), v1397, v670, 1);
                    v673 = vmlaq_laneq_f64(vmlaq_n_f64(v669, v1395, v670.f64[0]), v1398, v670, 1);
                    v675 = *((float64x2_t *)&v978 - 5);
                    v674 = v667;
                    v676 = vmlaq_laneq_f64(vmlaq_n_f64(v664, v1400, v674.f64[0]), v1403, v674, 1);
                    v677 = vmlaq_laneq_f64(vmlaq_n_f64(v665, v1401, v674.f64[0]), v1404, v674, 1);
                    v679 = *((float64x2_t *)&v978 - 2);
                    v678 = *((float64x2_t *)&v978 - 1);
                    v8 = vmlaq_laneq_f64(vmlaq_n_f64(v672, v1400, v678.f64[0]), v1403, v678, 1);
                    v1387[11] = (int64x2_t)v661;
                    v1387[12] = (int64x2_t)v676;
                    v1387[15] = (int64x2_t)v8;
                    v1387[16] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v673, v1401, v678.f64[0]), v1404, v678, 1);
                    v680 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, v663.f64[0]), v1393, v663, 1), v1396, v675.f64[0]), v1399, v675, 1);
                    v681 = *((float64x2_t *)&v978 - 1);
                    v290 = v992;
                    v1387[13] = (int64x2_t)v677;
                    v1387[14] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v680, v1402, v667.f64[0]), v1405, v667, 1);
                    v1387[17] = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1390, v671.f64[0]), v1393, v671, 1), v1396, v679.f64[0]), v1399, v679, 1), v1402, v681.f64[0]), v1405, v681, 1);
                    break;
                  default:
                    break;
                }
              }
            }
          }
          v682 = *(_OWORD *)(*(_QWORD *)&v300 + 16);
          *(_OWORD *)(v292 + 752) = **(_OWORD **)&v300;
          *(_OWORD *)(v292 + 768) = v682;
          _Q2 = **(float64x2_t **)&v300;
          _Q1 = *(float64x2_t *)(*(_QWORD *)&v300 + 16);
          *(_OWORD *)(v292 + 784) = *(_OWORD *)(*(_QWORD *)&v300 + 32);
          _Q4.f64[0] = _Q2.f64[1];
          __asm { FMLA            D3, D4, V2.D[1] }
          _Q2.f64[0] = _Q1.f64[1];
          __asm { FMLA            D3, D2, V1.D[1] }
          _Q1.f64[0] = *(float64_t *)(*(_QWORD *)&v300 + 40);
          __asm { FMLA            D3, D1, V0.D[1] }
          v12.f64[0] = *(double *)(v990 + 24) * _Q3.f64[0];
          *(float64_t *)(v292 + 848) = v12.f64[0];
          v685 = v993;
          v686 = LODWORD(v991.f64[0]);
          if (v993)
          {
            if (LODWORD(v991.f64[0]) && v298 >= v1001)
            {
              v687 = *(_QWORD *)(v290 + 464) + 24 * v298;
              v689 = *(char **)v687;
              v688 = *(char **)(v687 + 8);
              if (*(char **)v687 != v688)
              {
                while (*(_DWORD *)v689 < v1001)
                {
                  v689 += 16;
                  if (v689 == v688)
                    goto LABEL_140;
                }
              }
              if (v689 != v688)
              {
                if (*(_DWORD *)v689 == v1001)
                {
                  v690 = *(_QWORD *)(v290 + 392) + 8 * *((_QWORD *)v689 + 1);
                  goto LABEL_141;
                }
                v688 = v689;
              }
LABEL_140:
              v690 = sub_20F3D4374(v988, (char **)v687, v1001, v688);
              v685 = v993;
LABEL_141:
              *(_QWORD *)&v691.f64[0] = vdupq_laneq_s64(v1387[6], 1).u64[0];
              *(_QWORD *)&v691.f64[1] = v1387[9].i64[1];
              v692 = (float64x2_t)vzip1q_s64(v1387[6], v1387[9]);
              v693 = (float64x2_t)vzip1q_s64(v1387[0], v1387[3]);
              v694 = (float64x2_t)vzip2q_s64(v1387[0], v1387[3]);
              v695 = vmlaq_laneq_f64(vmulq_n_f64(v693, v1386[0].f64[0]), v694, v1386[0], 1);
              v696 = vmlaq_laneq_f64(vmulq_n_f64(v692, v1386[0].f64[0]), v691, v1386[0], 1);
              v697 = (float64x2_t)vzip1q_s64(v1387[12], v1387[15]);
              *(_QWORD *)&v698.f64[0] = vdupq_laneq_s64(v1387[12], 1).u64[0];
              *(_QWORD *)&v698.f64[1] = v1387[15].i64[1];
              v699 = vmlaq_laneq_f64(vmulq_n_f64(v697, v1386[0].f64[0]), v698, v1386[0], 1);
              v700 = vmlaq_laneq_f64(vmulq_n_f64(v693, v1386[3].f64[0]), v694, v1386[3], 1);
              v701 = vmlaq_laneq_f64(vmulq_n_f64(v692, v1386[3].f64[0]), v691, v1386[3], 1);
              v702 = vmlaq_laneq_f64(vmulq_n_f64(v697, v1386[3].f64[0]), v698, v1386[3], 1);
              v703 = vmlaq_laneq_f64(vmulq_n_f64(v693, v1386[6].f64[0]), v694, v1386[6], 1);
              v704 = vmlaq_laneq_f64(vmulq_n_f64(v692, v1386[6].f64[0]), v691, v1386[6], 1);
              v705 = vmlaq_laneq_f64(vmulq_n_f64(v697, v1386[6].f64[0]), v698, v1386[6], 1);
              v706 = vmlaq_laneq_f64(vmulq_n_f64(v693, v1386[9].f64[0]), v694, v1386[9], 1);
              v707 = vmlaq_laneq_f64(vmulq_n_f64(v692, v1386[9].f64[0]), v691, v1386[9], 1);
              v708 = vmlaq_laneq_f64(vmulq_n_f64(v697, v1386[9].f64[0]), v698, v1386[9], 1);
              v709 = vmlaq_laneq_f64(vmulq_n_f64(v693, v1386[12].f64[0]), v694, v1386[12], 1);
              v710 = vmlaq_laneq_f64(vmulq_n_f64(v692, v1386[12].f64[0]), v691, v1386[12], 1);
              v711 = vmlaq_laneq_f64(vmulq_n_f64(v697, v1386[12].f64[0]), v698, v1386[12], 1);
              v712 = vmlaq_laneq_f64(vmulq_n_f64(v693, v1386[15].f64[0]), v694, v1386[15], 1);
              v713 = vmlaq_laneq_f64(vmulq_n_f64(v692, v1386[15].f64[0]), v691, v1386[15], 1);
              v714 = vmlaq_laneq_f64(vmulq_n_f64(v697, v1386[15].f64[0]), v698, v1386[15], 1);
              v715 = (float64x2_t)vzip1q_s64(v1387[7], v1387[10]);
              *(_QWORD *)&v716.f64[0] = vdupq_laneq_s64(v1387[7], 1).u64[0];
              *(_QWORD *)&v716.f64[1] = v1387[10].i64[1];
              v717 = (float64x2_t)vzip1q_s64(v1387[13], v1387[16]);
              *(_QWORD *)&v718.f64[0] = vdupq_laneq_s64(v1387[13], 1).u64[0];
              *(_QWORD *)&v718.f64[1] = v1387[16].i64[1];
              *(_QWORD *)&v698.f64[0] = vdupq_laneq_s64(v1387[8], 1).u64[0];
              v719 = (float64x2_t)vzip1q_s64(v1387[8], v1387[11]);
              *(_QWORD *)&v698.f64[1] = v1387[11].i64[1];
              v720 = (float64x2_t)vzip1q_s64(v1387[14], v1387[17]);
              *(_QWORD *)&v721.f64[0] = vdupq_laneq_s64(v1387[14], 1).u64[0];
              *(_QWORD *)&v721.f64[1] = v1387[17].i64[1];
              v722 = (float64x2_t)vzip1q_s64(v1387[1], v1387[4]);
              v723 = (float64x2_t)vzip2q_s64(v1387[1], v1387[4]);
              v724 = (float64x2_t)vzip1q_s64(v1387[2], v1387[5]);
              v725 = (float64x2_t)vzip2q_s64(v1387[2], v1387[5]);
              v726 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v700, v722, v1386[4].f64[0]), v723, v1386[4], 1), v724, v1386[5].f64[0]), v725, v1386[5], 1);
              v727 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v701, v715, v1386[4].f64[0]), v716, v1386[4], 1), v719, v1386[5].f64[0]), v698, v1386[5], 1);
              v728 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v703, v722, v1386[7].f64[0]), v723, v1386[7], 1), v724, v1386[8].f64[0]), v725, v1386[8], 1);
              v729 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v704, v715, v1386[7].f64[0]), v716, v1386[7], 1), v719, v1386[8].f64[0]), v698, v1386[8], 1);
              v730 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v706, v722, v1386[10].f64[0]), v723, v1386[10], 1), v724, v1386[11].f64[0]), v725, v1386[11], 1);
              v731 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v707, v715, v1386[10].f64[0]), v716, v1386[10], 1), v719, v1386[11].f64[0]), v698, v1386[11], 1);
              v732 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v708, v717, v1386[10].f64[0]), v718, v1386[10], 1), v720, v1386[11].f64[0]), v721, v1386[11], 1);
              v733 = vmlaq_laneq_f64(vmlaq_n_f64(v709, v722, v1386[13].f64[0]), v723, v1386[13], 1);
              v734 = vmlaq_laneq_f64(vmlaq_n_f64(v710, v715, v1386[13].f64[0]), v716, v1386[13], 1);
              v735 = vmlaq_laneq_f64(vmlaq_n_f64(v711, v717, v1386[13].f64[0]), v718, v1386[13], 1);
              v736 = vmlaq_laneq_f64(vmlaq_n_f64(v712, v722, v1386[16].f64[0]), v723, v1386[16], 1);
              v737 = vmlaq_laneq_f64(vmlaq_n_f64(v713, v715, v1386[16].f64[0]), v716, v1386[16], 1);
              v738 = vmlaq_laneq_f64(vmlaq_n_f64(v714, v717, v1386[16].f64[0]), v718, v1386[16], 1);
              v739 = vaddq_f64(*(float64x2_t *)v690, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v695, v722, v1386[1].f64[0]), v723, v1386[1], 1), v724, v1386[2].f64[0]), v725, v1386[2], 1));
              v740 = vaddq_f64(*(float64x2_t *)(v690 + 16), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v696, v715, v1386[1].f64[0]), v716, v1386[1], 1), v719, v1386[2].f64[0]), v698, v1386[2], 1));
              v741 = vaddq_f64(*(float64x2_t *)(v690 + 32), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v699, v717, v1386[1].f64[0]), v718, v1386[1], 1), v720, v1386[2].f64[0]), v721, v1386[2], 1));
              v742 = vaddq_f64(*(float64x2_t *)(v690 + 48), v726);
              v743 = vaddq_f64(*(float64x2_t *)(v690 + 64), v727);
              v744 = vaddq_f64(*(float64x2_t *)(v690 + 80), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v702, v717, v1386[4].f64[0]), v718, v1386[4], 1), v720, v1386[5].f64[0]), v721, v1386[5], 1));
              v745 = vaddq_f64(*(float64x2_t *)(v690 + 96), v728);
              v746 = vaddq_f64(*(float64x2_t *)(v690 + 112), v729);
              v747 = vaddq_f64(*(float64x2_t *)(v690 + 128), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v705, v717, v1386[7].f64[0]), v718, v1386[7], 1), v720, v1386[8].f64[0]), v721, v1386[8], 1));
              v748 = vmlaq_laneq_f64(vmlaq_n_f64(v733, v724, v1386[14].f64[0]), v725, v1386[14], 1);
              v749 = vmlaq_laneq_f64(vmlaq_n_f64(v735, v720, v1386[14].f64[0]), v721, v1386[14], 1);
              v750 = vaddq_f64(*(float64x2_t *)(v690 + 144), v730);
              v751 = vaddq_f64(*(float64x2_t *)(v690 + 160), v731);
              v752 = vmlaq_laneq_f64(vmlaq_n_f64(v736, v724, v1386[17].f64[0]), v725, v1386[17], 1);
              v753 = vaddq_f64(*(float64x2_t *)(v690 + 176), v732);
              v754 = vaddq_f64(*(float64x2_t *)(v690 + 192), v748);
              v755 = vmlaq_laneq_f64(vmlaq_n_f64(v737, v719, v1386[17].f64[0]), v698, v1386[17], 1);
              v756 = vaddq_f64(*(float64x2_t *)(v690 + 208), vmlaq_laneq_f64(vmlaq_n_f64(v734, v719, v1386[14].f64[0]), v698, v1386[14], 1));
              v757 = vmlaq_laneq_f64(vmlaq_n_f64(v738, v720, v1386[17].f64[0]), v721, v1386[17], 1);
              v758 = *(float64x2_t *)(v690 + 240);
              v759 = vaddq_f64(*(float64x2_t *)(v690 + 224), v749);
              v760 = vaddq_f64(*(float64x2_t *)(v690 + 256), v755);
              *(float64x2_t *)v690 = v739;
              *(float64x2_t *)(v690 + 16) = v740;
              *(float64x2_t *)(v690 + 64) = v743;
              *(float64x2_t *)(v690 + 80) = v744;
              *(float64x2_t *)(v690 + 32) = v741;
              *(float64x2_t *)(v690 + 48) = v742;
              v761 = vaddq_f64(*(float64x2_t *)(v690 + 272), v757);
              *(float64x2_t *)(v690 + 96) = v745;
              *(float64x2_t *)(v690 + 112) = v746;
              *(float64x2_t *)(v690 + 160) = v751;
              *(float64x2_t *)(v690 + 176) = v753;
              *(float64x2_t *)(v690 + 128) = v747;
              *(float64x2_t *)(v690 + 144) = v750;
              *(float64x2_t *)(v690 + 192) = v754;
              *(float64x2_t *)(v690 + 208) = v756;
              *(float64x2_t *)(v690 + 256) = v760;
              *(float64x2_t *)(v690 + 272) = v761;
              *(float64x2_t *)(v690 + 224) = v759;
              *(float64x2_t *)(v690 + 240) = vaddq_f64(v758, v752);
            }
            v762 = *(_QWORD *)(v290 + 464) + 24 * v1001;
            v764 = *(char **)v762;
            v763 = *(char **)(v762 + 8);
            if (*(char **)v762 != v763)
            {
              while (*(_DWORD *)v764 < v1001)
              {
                v764 += 16;
                if (v764 == v763)
                  goto LABEL_150;
              }
            }
            if (v764 != v763)
            {
              if (*(_DWORD *)v764 == v1001)
              {
                v765 = *(_QWORD *)(v290 + 392) + 8 * *((_QWORD *)v764 + 1);
                goto LABEL_151;
              }
              v763 = v764;
            }
LABEL_150:
            v765 = sub_20F3D4374(v988, (char **)v762, v1001, v763);
            v685 = v993;
LABEL_151:
            v766 = (float64x2_t)vzip1q_s64(v1387[6], v1387[9]);
            *(_QWORD *)&v767.f64[0] = vdupq_laneq_s64(v1387[6], 1).u64[0];
            *(_QWORD *)&v767.f64[1] = v1387[9].i64[1];
            v768 = (float64x2_t)vzip1q_s64(v1387[0], v1387[3]);
            v769 = (float64x2_t)vzip2q_s64(v1387[0], v1387[3]);
            v770 = vmlaq_laneq_f64(vmulq_n_f64(v768, *(double *)v1387[0].i64), v769, (float64x2_t)v1387[0], 1);
            v771 = vmlaq_laneq_f64(vmulq_n_f64(v766, *(double *)v1387[0].i64), v767, (float64x2_t)v1387[0], 1);
            v772 = (float64x2_t)vzip1q_s64(v1387[12], v1387[15]);
            *(_QWORD *)&v773.f64[0] = vdupq_laneq_s64(v1387[12], 1).u64[0];
            *(_QWORD *)&v773.f64[1] = v1387[15].i64[1];
            v774 = vmlaq_laneq_f64(vmulq_n_f64(v772, *(double *)v1387[0].i64), v773, (float64x2_t)v1387[0], 1);
            v1000 = vmlaq_laneq_f64(vmulq_n_f64(v768, *(double *)v1387[3].i64), v769, (float64x2_t)v1387[3], 1);
            v999 = vmlaq_laneq_f64(vmulq_n_f64(v766, *(double *)v1387[3].i64), v767, (float64x2_t)v1387[3], 1);
            v998 = vmlaq_laneq_f64(vmulq_n_f64(v772, *(double *)v1387[3].i64), v773, (float64x2_t)v1387[3], 1);
            v997 = vmlaq_laneq_f64(vmulq_n_f64(v768, *(double *)v1387[6].i64), v769, (float64x2_t)v1387[6], 1);
            v985 = (float64x2_t)v1387[7];
            v986 = (float64x2_t)v1387[13];
            v995 = (float64x2_t)v1387[10];
            v996 = vmlaq_laneq_f64(vmulq_n_f64(v766, *(double *)v1387[6].i64), v767, (float64x2_t)v1387[6], 1);
            v775 = vmlaq_laneq_f64(vmulq_n_f64(v772, *(double *)v1387[6].i64), v773, (float64x2_t)v1387[6], 1);
            v776 = vmlaq_laneq_f64(vmulq_n_f64(v768, *(double *)v1387[9].i64), v769, (float64x2_t)v1387[9], 1);
            v777 = vmlaq_laneq_f64(vmulq_n_f64(v766, *(double *)v1387[9].i64), v767, (float64x2_t)v1387[9], 1);
            v778 = vmlaq_laneq_f64(vmulq_n_f64(v772, *(double *)v1387[9].i64), v773, (float64x2_t)v1387[9], 1);
            v779 = vmlaq_laneq_f64(vmulq_n_f64(v768, *(double *)v1387[12].i64), v769, (float64x2_t)v1387[12], 1);
            v780 = vmlaq_laneq_f64(vmulq_n_f64(v766, *(double *)v1387[12].i64), v767, (float64x2_t)v1387[12], 1);
            v781 = vmlaq_laneq_f64(vmulq_n_f64(v772, *(double *)v1387[12].i64), v773, (float64x2_t)v1387[12], 1);
            v994 = (float64x2_t)v1387[16];
            v782 = (float64x2_t)vzip1q_s64(v1387[13], v1387[16]);
            v783 = vmlaq_laneq_f64(vmulq_n_f64(v768, *(double *)v1387[15].i64), v769, (float64x2_t)v1387[15], 1);
            *(_QWORD *)&v769.f64[0] = vdupq_laneq_s64(v1387[7], 1).u64[0];
            *(_QWORD *)&v769.f64[1] = v1387[10].i64[1];
            v784 = vmlaq_laneq_f64(vmulq_n_f64(v766, *(double *)v1387[15].i64), v767, (float64x2_t)v1387[15], 1);
            *(_QWORD *)&v767.f64[0] = vdupq_laneq_s64(v1387[13], 1).u64[0];
            *(_QWORD *)&v767.f64[1] = v1387[16].i64[1];
            v785 = vmlaq_laneq_f64(vmulq_n_f64(v772, *(double *)v1387[15].i64), v773, (float64x2_t)v1387[15], 1);
            v786 = (float64x2_t)vzip1q_s64(v1387[1], v1387[4]);
            v787 = (float64x2_t)vzip2q_s64(v1387[1], v1387[4]);
            v788 = (float64x2_t)vzip1q_s64(v1387[7], v1387[10]);
            *(_QWORD *)&v789.f64[0] = vdupq_laneq_s64(v1387[8], 1).u64[0];
            v984 = v1387[11];
            *(_QWORD *)&v789.f64[1] = v1387[11].i64[1];
            v790 = (float64x2_t)vzip1q_s64(v1387[2], v1387[5]);
            v791 = (float64x2_t)vzip2q_s64(v1387[2], v1387[5]);
            v987 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v770, v786, *(double *)v1387[1].i64), v787, (float64x2_t)v1387[1], 1), v790, *(double *)v1387[2].i64), v791, (float64x2_t)v1387[2], 1);
            v792 = (float64x2_t)vzip1q_s64(v1387[8], v1387[11]);
            v793 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v771, v788, *(double *)v1387[1].i64), v769, (float64x2_t)v1387[1], 1), v792, *(double *)v1387[2].i64), v789, (float64x2_t)v1387[2], 1);
            *(_QWORD *)&v8.f64[0] = vdupq_laneq_s64(v1387[14], 1).u64[0];
            *(_QWORD *)&v8.f64[1] = v1387[17].i64[1];
            v794 = (float64x2_t)vzip1q_s64(v1387[14], v1387[17]);
            v999 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v999, v788, *(double *)v1387[4].i64), v769, (float64x2_t)v1387[4], 1), v792, *(double *)v1387[5].i64), v789, (float64x2_t)v1387[5], 1);
            v1000 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1000, v786, *(double *)v1387[4].i64), v787, (float64x2_t)v1387[4], 1), v790, *(double *)v1387[5].i64), v791, (float64x2_t)v1387[5], 1);
            v795 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v998, v782, *(double *)v1387[4].i64), v767, (float64x2_t)v1387[4], 1), v794, *(double *)v1387[5].i64), v8, (float64x2_t)v1387[5], 1);
            v796 = v788;
            v797 = vmlaq_laneq_f64(vmlaq_n_f64(v996, v788, *(double *)v1387[7].i64), v769, (float64x2_t)v1387[7], 1);
            v798 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v997, v786, *(double *)v1387[7].i64), v787, (float64x2_t)v1387[7], 1), v790, *(double *)v1387[8].i64), v791, (float64x2_t)v1387[8], 1);
            v799 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v775, v782, *(double *)v1387[7].i64), v767, (float64x2_t)v1387[7], 1), v794, *(double *)v1387[8].i64), v8, (float64x2_t)v1387[8], 1);
            v800 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v776, v786, *(double *)v1387[10].i64), v787, (float64x2_t)v1387[10], 1), v790, *(double *)v1387[11].i64), v791, (float64x2_t)v1387[11], 1);
            v801 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v777, v796, *(double *)v1387[10].i64), v769, (float64x2_t)v1387[10], 1), v792, *(double *)v1387[11].i64), v789, (float64x2_t)v1387[11], 1);
            v802 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v778, v782, *(double *)v1387[10].i64), v767, (float64x2_t)v1387[10], 1), v794, *(double *)v1387[11].i64), v8, (float64x2_t)v1387[11], 1);
            v803 = vmlaq_laneq_f64(vmlaq_n_f64(v779, v786, *(double *)v1387[13].i64), v787, (float64x2_t)v1387[13], 1);
            v804 = vmlaq_laneq_f64(vmlaq_n_f64(v780, v796, *(double *)v1387[13].i64), v769, (float64x2_t)v1387[13], 1);
            v805 = vmlaq_laneq_f64(vmlaq_n_f64(v781, v782, *(double *)v1387[13].i64), v767, (float64x2_t)v1387[13], 1);
            v806 = vmlaq_laneq_f64(vmlaq_n_f64(v783, v786, *(double *)v1387[16].i64), v787, (float64x2_t)v1387[16], 1);
            v807 = vmlaq_laneq_f64(vmlaq_n_f64(v784, v796, *(double *)v1387[16].i64), v769, (float64x2_t)v1387[16], 1);
            v808 = vmlaq_laneq_f64(vmlaq_n_f64(v785, v782, *(double *)v1387[16].i64), v767, (float64x2_t)v1387[16], 1);
            v809 = vaddq_f64(*(float64x2_t *)(v765 + 32), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v774, v782, *(double *)v1387[1].i64), v767, (float64x2_t)v1387[1], 1), v794, *(double *)v1387[2].i64), v8, (float64x2_t)v1387[2], 1));
            v810 = vaddq_f64(*(float64x2_t *)(v765 + 16), v793);
            v811 = vaddq_f64(*(float64x2_t *)(v765 + 80), v795);
            v812 = vaddq_f64(*(float64x2_t *)(v765 + 64), v999);
            _Q1 = vaddq_f64(*(float64x2_t *)(v765 + 48), v1000);
            v813 = *(float64x2_t *)(v765 + 144);
            v814 = vaddq_f64(*(float64x2_t *)(v765 + 128), v799);
            v815 = vaddq_f64(*(float64x2_t *)(v765 + 112), vmlaq_laneq_f64(vmlaq_n_f64(v797, v792, *(double *)v1387[8].i64), v789, (float64x2_t)v1387[8], 1));
            _Q2 = vaddq_f64(*(float64x2_t *)(v765 + 96), v798);
            v816 = vaddq_f64(*(float64x2_t *)(v765 + 176), v802);
            v817 = vaddq_f64(*(float64x2_t *)(v765 + 160), v801);
            v818 = vmlaq_laneq_f64(vmlaq_n_f64(v807, v792, *(double *)v1387[17].i64), v789, (float64x2_t)v1387[17], 1);
            _Q3 = vaddq_f64(*(float64x2_t *)(v765 + 224), vmlaq_laneq_f64(vmlaq_n_f64(v805, v794, *(double *)v1387[14].i64), v8, (float64x2_t)v1387[14], 1));
            v6 = vaddq_f64(*(float64x2_t *)(v765 + 208), vmlaq_laneq_f64(vmlaq_n_f64(v804, v792, *(double *)v1387[14].i64), v789, (float64x2_t)v1387[14], 1));
            v7 = vaddq_f64(*(float64x2_t *)(v765 + 192), vmlaq_laneq_f64(vmlaq_n_f64(v803, v790, *(double *)v1387[14].i64), v791, (float64x2_t)v1387[14], 1));
            v819 = vaddq_f64(*(float64x2_t *)(v765 + 272), vmlaq_laneq_f64(vmlaq_n_f64(v808, v794, *(double *)v1387[17].i64), v8, (float64x2_t)v1387[17], 1));
            _Q4 = vaddq_f64(*(float64x2_t *)(v765 + 240), vmlaq_laneq_f64(vmlaq_n_f64(v806, v790, *(double *)v1387[17].i64), v791, (float64x2_t)v1387[17], 1));
            *(float64x2_t *)v765 = vaddq_f64(*(float64x2_t *)v765, v987);
            *(float64x2_t *)(v765 + 16) = v810;
            *(float64x2_t *)(v765 + 32) = v809;
            *(float64x2_t *)(v765 + 48) = _Q1;
            *(float64x2_t *)(v765 + 64) = v812;
            *(float64x2_t *)(v765 + 80) = v811;
            *(float64x2_t *)(v765 + 96) = _Q2;
            *(float64x2_t *)(v765 + 112) = v815;
            *(float64x2_t *)(v765 + 128) = v814;
            *(float64x2_t *)(v765 + 144) = vaddq_f64(v813, v800);
            *(float64x2_t *)(v765 + 160) = v817;
            *(float64x2_t *)(v765 + 176) = v816;
            *(float64x2_t *)(v765 + 192) = v7;
            *(float64x2_t *)(v765 + 208) = v6;
            *(float64x2_t *)(v765 + 224) = _Q3;
            *(float64x2_t *)(v765 + 240) = _Q4;
            v12 = vaddq_f64(*(float64x2_t *)(v765 + 256), v818);
            *(float64x2_t *)(v765 + 256) = v12;
            *(float64x2_t *)(v765 + 272) = v819;
            v686 = LODWORD(v991.f64[0]);
          }
          if (!v686)
            goto LABEL_175;
          v820 = *(_QWORD *)(v290 + 464) + 24 * v298;
          v822 = *(char **)v820;
          v821 = *(char **)(v820 + 8);
          if (*(char **)v820 != v821)
          {
            while (*(_DWORD *)v822 < v298)
            {
              v822 += 16;
              if (v822 == v821)
                goto LABEL_161;
            }
          }
          if (v822 != v821)
          {
            if (*(_DWORD *)v822 == v298)
            {
              v823 = (float64x2_t *)(*(_QWORD *)(v290 + 392) + 8 * *((_QWORD *)v822 + 1));
LABEL_162:
              v824 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[6], (int64x2_t)v1386[9]);
              *(_QWORD *)&v825.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[6], 1).u64[0];
              v825.f64[1] = v1386[9].f64[1];
              v826 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[0], (int64x2_t)v1386[3]);
              v827 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[0], (int64x2_t)v1386[3]);
              v828 = vmlaq_laneq_f64(vmulq_n_f64(v826, v1386[0].f64[0]), v827, v1386[0], 1);
              v829 = vmlaq_laneq_f64(vmulq_n_f64(v824, v1386[0].f64[0]), v825, v1386[0], 1);
              v830 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[12], (int64x2_t)v1386[15]);
              *(_QWORD *)&v831.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[12], 1).u64[0];
              v831.f64[1] = v1386[15].f64[1];
              v832 = vmlaq_laneq_f64(vmulq_n_f64(v830, v1386[0].f64[0]), v831, v1386[0], 1);
              v1000 = vmlaq_laneq_f64(vmulq_n_f64(v826, v1386[3].f64[0]), v827, v1386[3], 1);
              v999 = vmlaq_laneq_f64(vmulq_n_f64(v824, v1386[3].f64[0]), v825, v1386[3], 1);
              v998 = vmlaq_laneq_f64(vmulq_n_f64(v830, v1386[3].f64[0]), v831, v1386[3], 1);
              v997 = vmlaq_laneq_f64(vmulq_n_f64(v826, v1386[6].f64[0]), v827, v1386[6], 1);
              v986 = v1386[7];
              v987 = v1386[13];
              v995 = v1386[10];
              v996 = vmlaq_laneq_f64(vmulq_n_f64(v824, v1386[6].f64[0]), v825, v1386[6], 1);
              v833 = vmlaq_laneq_f64(vmulq_n_f64(v830, v1386[6].f64[0]), v831, v1386[6], 1);
              v834 = vmlaq_laneq_f64(vmulq_n_f64(v826, v1386[9].f64[0]), v827, v1386[9], 1);
              v835 = vmlaq_laneq_f64(vmulq_n_f64(v824, v1386[9].f64[0]), v825, v1386[9], 1);
              v836 = vmlaq_laneq_f64(vmulq_n_f64(v830, v1386[9].f64[0]), v831, v1386[9], 1);
              v837 = vmlaq_laneq_f64(vmulq_n_f64(v826, v1386[12].f64[0]), v827, v1386[12], 1);
              v838 = vmlaq_laneq_f64(vmulq_n_f64(v824, v1386[12].f64[0]), v825, v1386[12], 1);
              v839 = vmlaq_laneq_f64(vmulq_n_f64(v830, v1386[12].f64[0]), v831, v1386[12], 1);
              v994 = v1386[16];
              v840 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[13], (int64x2_t)v1386[16]);
              v841 = vmlaq_laneq_f64(vmulq_n_f64(v826, v1386[15].f64[0]), v827, v1386[15], 1);
              *(_QWORD *)&v827.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[7], 1).u64[0];
              v827.f64[1] = v1386[10].f64[1];
              v842 = vmlaq_laneq_f64(vmulq_n_f64(v824, v1386[15].f64[0]), v825, v1386[15], 1);
              *(_QWORD *)&v825.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[13], 1).u64[0];
              v825.f64[1] = v1386[16].f64[1];
              v843 = vmlaq_laneq_f64(vmulq_n_f64(v830, v1386[15].f64[0]), v831, v1386[15], 1);
              v844 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[1], (int64x2_t)v1386[4]);
              v845 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[1], (int64x2_t)v1386[4]);
              v846 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[7], (int64x2_t)v1386[10]);
              *(_QWORD *)&v847.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[8], 1).u64[0];
              v985 = v1386[11];
              v847.f64[1] = v1386[11].f64[1];
              v848 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[2], (int64x2_t)v1386[5]);
              v849 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[2], (int64x2_t)v1386[5]);
              v991 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v828, v844, v1386[1].f64[0]), v845, v1386[1], 1), v848, v1386[2].f64[0]), v849, v1386[2], 1);
              v850 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[8], (int64x2_t)v1386[11]);
              v851 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v829, v846, v1386[1].f64[0]), v827, v1386[1], 1), v850, v1386[2].f64[0]), v847, v1386[2], 1);
              *(_QWORD *)&v824.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[14], 1).u64[0];
              v824.f64[1] = v1386[17].f64[1];
              v852 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[14], (int64x2_t)v1386[17]);
              v999 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v999, v846, v1386[4].f64[0]), v827, v1386[4], 1), v850, v1386[5].f64[0]), v847, v1386[5], 1);
              v1000 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1000, v844, v1386[4].f64[0]), v845, v1386[4], 1), v848, v1386[5].f64[0]), v849, v1386[5], 1);
              v853 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v998, v840, v1386[4].f64[0]), v825, v1386[4], 1), v852, v1386[5].f64[0]), v824, v1386[5], 1);
              v854 = v846;
              v855 = vmlaq_laneq_f64(vmlaq_n_f64(v996, v846, v1386[7].f64[0]), v827, v1386[7], 1);
              v856 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v997, v844, v1386[7].f64[0]), v845, v1386[7], 1), v848, v1386[8].f64[0]), v849, v1386[8], 1);
              v857 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v833, v840, v1386[7].f64[0]), v825, v1386[7], 1), v852, v1386[8].f64[0]), v824, v1386[8], 1);
              v858 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v834, v844, v1386[10].f64[0]), v845, v1386[10], 1), v848, v1386[11].f64[0]), v849, v1386[11], 1);
              v859 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v835, v854, v1386[10].f64[0]), v827, v1386[10], 1), v850, v1386[11].f64[0]), v847, v1386[11], 1);
              v860 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v836, v840, v1386[10].f64[0]), v825, v1386[10], 1), v852, v1386[11].f64[0]), v824, v1386[11], 1);
              v861 = vmlaq_laneq_f64(vmlaq_n_f64(v837, v844, v1386[13].f64[0]), v845, v1386[13], 1);
              v862 = vmlaq_laneq_f64(vmlaq_n_f64(v838, v854, v1386[13].f64[0]), v827, v1386[13], 1);
              v863 = vmlaq_laneq_f64(vmlaq_n_f64(v839, v840, v1386[13].f64[0]), v825, v1386[13], 1);
              v864 = vmlaq_laneq_f64(vmlaq_n_f64(v841, v844, v1386[16].f64[0]), v845, v1386[16], 1);
              v865 = vmlaq_laneq_f64(vmlaq_n_f64(v842, v854, v1386[16].f64[0]), v827, v1386[16], 1);
              v866 = vmlaq_laneq_f64(vmlaq_n_f64(v843, v840, v1386[16].f64[0]), v825, v1386[16], 1);
              v867 = vaddq_f64(v823[2], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v832, v840, v1386[1].f64[0]), v825, v1386[1], 1), v852, v1386[2].f64[0]), v824, v1386[2], 1));
              v868 = vaddq_f64(v823[1], v851);
              v869 = vaddq_f64(v823[5], v853);
              v870 = vaddq_f64(v823[4], v999);
              v871 = vaddq_f64(v823[3], v1000);
              v872 = vaddq_f64(v823[8], v857);
              v873 = vaddq_f64(v823[7], vmlaq_laneq_f64(vmlaq_n_f64(v855, v850, v1386[8].f64[0]), v847, v1386[8], 1));
              v874 = vaddq_f64(v823[6], v856);
              v875 = vaddq_f64(v823[11], v860);
              v876 = vaddq_f64(v823[10], v859);
              v877 = vaddq_f64(v823[9], v858);
              v878 = vmlaq_laneq_f64(vmlaq_n_f64(v865, v850, v1386[17].f64[0]), v847, v1386[17], 1);
              v879 = vaddq_f64(v823[14], vmlaq_laneq_f64(vmlaq_n_f64(v863, v852, v1386[14].f64[0]), v824, v1386[14], 1));
              v880 = vaddq_f64(v823[13], vmlaq_laneq_f64(vmlaq_n_f64(v862, v850, v1386[14].f64[0]), v847, v1386[14], 1));
              v881 = vaddq_f64(v823[12], vmlaq_laneq_f64(vmlaq_n_f64(v861, v848, v1386[14].f64[0]), v849, v1386[14], 1));
              v882 = vaddq_f64(v823[17], vmlaq_laneq_f64(vmlaq_n_f64(v866, v852, v1386[17].f64[0]), v824, v1386[17], 1));
              v883 = vaddq_f64(v823[15], vmlaq_laneq_f64(vmlaq_n_f64(v864, v848, v1386[17].f64[0]), v849, v1386[17], 1));
              *v823 = vaddq_f64(*v823, v991);
              v823[1] = v868;
              v823[2] = v867;
              v823[3] = v871;
              v823[4] = v870;
              v823[5] = v869;
              v823[6] = v874;
              v823[7] = v873;
              v823[8] = v872;
              v823[9] = v877;
              v823[10] = v876;
              v823[11] = v875;
              v823[12] = v881;
              v823[13] = v880;
              v823[14] = v879;
              v823[15] = v883;
              v823[16] = vaddq_f64(v823[16], v878);
              v823[17] = v882;
              if (v685 && v1001 >= v298)
              {
                v884 = *(_QWORD *)(v290 + 464) + 24 * v1001;
                v886 = *(char **)v884;
                v885 = *(char **)(v884 + 8);
                if (*(char **)v884 != v885)
                {
                  while (*(_DWORD *)v886 < v298)
                  {
                    v886 += 16;
                    if (v886 == v885)
                      goto LABEL_172;
                  }
                }
                if (v886 != v885)
                {
                  if (*(_DWORD *)v886 == v298)
                  {
                    v887 = *(_QWORD *)(v290 + 392) + 8 * *((_QWORD *)v886 + 1);
                    goto LABEL_173;
                  }
                  v885 = v886;
                }
LABEL_172:
                v887 = sub_20F3D4374(v988, (char **)v884, v298, v885);
                v685 = v993;
LABEL_173:
                *(_QWORD *)&v888.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[6], 1).u64[0];
                v888.f64[1] = v1386[9].f64[1];
                v889 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[6], (int64x2_t)v1386[9]);
                v890 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[0], (int64x2_t)v1386[3]);
                v891 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[0], (int64x2_t)v1386[3]);
                v892 = vmlaq_laneq_f64(vmulq_n_f64(v890, *(double *)v1387[0].i64), v891, (float64x2_t)v1387[0], 1);
                v893 = vmlaq_laneq_f64(vmulq_n_f64(v889, *(double *)v1387[0].i64), v888, (float64x2_t)v1387[0], 1);
                v894 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[12], (int64x2_t)v1386[15]);
                *(_QWORD *)&v895.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[12], 1).u64[0];
                v895.f64[1] = v1386[15].f64[1];
                v896 = vmlaq_laneq_f64(vmulq_n_f64(v894, *(double *)v1387[0].i64), v895, (float64x2_t)v1387[0], 1);
                v897 = vmlaq_laneq_f64(vmulq_n_f64(v890, *(double *)v1387[3].i64), v891, (float64x2_t)v1387[3], 1);
                v898 = vmlaq_laneq_f64(vmulq_n_f64(v889, *(double *)v1387[3].i64), v888, (float64x2_t)v1387[3], 1);
                v899 = vmlaq_laneq_f64(vmulq_n_f64(v894, *(double *)v1387[3].i64), v895, (float64x2_t)v1387[3], 1);
                v900 = vmlaq_laneq_f64(vmulq_n_f64(v890, *(double *)v1387[6].i64), v891, (float64x2_t)v1387[6], 1);
                v901 = vmlaq_laneq_f64(vmulq_n_f64(v889, *(double *)v1387[6].i64), v888, (float64x2_t)v1387[6], 1);
                v902 = vmlaq_laneq_f64(vmulq_n_f64(v894, *(double *)v1387[6].i64), v895, (float64x2_t)v1387[6], 1);
                v903 = vmlaq_laneq_f64(vmulq_n_f64(v890, *(double *)v1387[9].i64), v891, (float64x2_t)v1387[9], 1);
                v904 = vmlaq_laneq_f64(vmulq_n_f64(v889, *(double *)v1387[9].i64), v888, (float64x2_t)v1387[9], 1);
                v905 = vmlaq_laneq_f64(vmulq_n_f64(v894, *(double *)v1387[9].i64), v895, (float64x2_t)v1387[9], 1);
                v906 = vmlaq_laneq_f64(vmulq_n_f64(v890, *(double *)v1387[12].i64), v891, (float64x2_t)v1387[12], 1);
                v907 = vmlaq_laneq_f64(vmulq_n_f64(v889, *(double *)v1387[12].i64), v888, (float64x2_t)v1387[12], 1);
                v908 = vmlaq_laneq_f64(vmulq_n_f64(v894, *(double *)v1387[12].i64), v895, (float64x2_t)v1387[12], 1);
                v909 = vmlaq_laneq_f64(vmulq_n_f64(v890, *(double *)v1387[15].i64), v891, (float64x2_t)v1387[15], 1);
                v910 = vmlaq_laneq_f64(vmulq_n_f64(v889, *(double *)v1387[15].i64), v888, (float64x2_t)v1387[15], 1);
                v911 = vmlaq_laneq_f64(vmulq_n_f64(v894, *(double *)v1387[15].i64), v895, (float64x2_t)v1387[15], 1);
                v912 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[7], (int64x2_t)v1386[10]);
                *(_QWORD *)&v913.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[7], 1).u64[0];
                v913.f64[1] = v1386[10].f64[1];
                v914 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[13], (int64x2_t)v1386[16]);
                *(_QWORD *)&v915.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[13], 1).u64[0];
                v915.f64[1] = v1386[16].f64[1];
                *(_QWORD *)&v895.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[8], 1).u64[0];
                v916 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[8], (int64x2_t)v1386[11]);
                v895.f64[1] = v1386[11].f64[1];
                v917 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[14], (int64x2_t)v1386[17]);
                *(_QWORD *)&v918.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[14], 1).u64[0];
                v918.f64[1] = v1386[17].f64[1];
                v919 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[1], (int64x2_t)v1386[4]);
                v920 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[1], (int64x2_t)v1386[4]);
                v921 = (float64x2_t)vzip1q_s64((int64x2_t)v1386[2], (int64x2_t)v1386[5]);
                v922 = (float64x2_t)vzip2q_s64((int64x2_t)v1386[2], (int64x2_t)v1386[5]);
                v923 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v893, v912, *(double *)v1387[1].i64), v913, (float64x2_t)v1387[1], 1), v916, *(double *)v1387[2].i64), v895, (float64x2_t)v1387[2], 1);
                v924 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v897, v919, *(double *)v1387[4].i64), v920, (float64x2_t)v1387[4], 1), v921, *(double *)v1387[5].i64), v922, (float64x2_t)v1387[5], 1);
                v925 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v898, v912, *(double *)v1387[4].i64), v913, (float64x2_t)v1387[4], 1), v916, *(double *)v1387[5].i64), v895, (float64x2_t)v1387[5], 1);
                v926 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v900, v919, *(double *)v1387[7].i64), v920, (float64x2_t)v1387[7], 1), v921, *(double *)v1387[8].i64), v922, (float64x2_t)v1387[8], 1);
                v927 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v901, v912, *(double *)v1387[7].i64), v913, (float64x2_t)v1387[7], 1), v916, *(double *)v1387[8].i64), v895, (float64x2_t)v1387[8], 1);
                v928 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v903, v919, *(double *)v1387[10].i64), v920, (float64x2_t)v1387[10], 1), v921, *(double *)v1387[11].i64), v922, (float64x2_t)v1387[11], 1);
                v929 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v904, v912, *(double *)v1387[10].i64), v913, (float64x2_t)v1387[10], 1), v916, *(double *)v1387[11].i64), v895, (float64x2_t)v1387[11], 1);
                v930 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v905, v914, *(double *)v1387[10].i64), v915, (float64x2_t)v1387[10], 1), v917, *(double *)v1387[11].i64), v918, (float64x2_t)v1387[11], 1);
                v931 = vmlaq_laneq_f64(vmlaq_n_f64(v906, v919, *(double *)v1387[13].i64), v920, (float64x2_t)v1387[13], 1);
                v932 = vmlaq_laneq_f64(vmlaq_n_f64(v907, v912, *(double *)v1387[13].i64), v913, (float64x2_t)v1387[13], 1);
                v933 = vmlaq_laneq_f64(vmlaq_n_f64(v908, v914, *(double *)v1387[13].i64), v915, (float64x2_t)v1387[13], 1);
                v934 = vmlaq_laneq_f64(vmlaq_n_f64(v909, v919, *(double *)v1387[16].i64), v920, (float64x2_t)v1387[16], 1);
                v935 = vmlaq_laneq_f64(vmlaq_n_f64(v910, v912, *(double *)v1387[16].i64), v913, (float64x2_t)v1387[16], 1);
                v936 = vmlaq_laneq_f64(vmlaq_n_f64(v911, v914, *(double *)v1387[16].i64), v915, (float64x2_t)v1387[16], 1);
                v937 = vaddq_f64(*(float64x2_t *)v887, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v892, v919, *(double *)v1387[1].i64), v920, (float64x2_t)v1387[1], 1), v921, *(double *)v1387[2].i64), v922, (float64x2_t)v1387[2], 1));
                v938 = vaddq_f64(*(float64x2_t *)(v887 + 16), v923);
                v939 = vaddq_f64(*(float64x2_t *)(v887 + 32), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v896, v914, *(double *)v1387[1].i64), v915, (float64x2_t)v1387[1], 1), v917, *(double *)v1387[2].i64), v918, (float64x2_t)v1387[2], 1));
                v940 = vaddq_f64(*(float64x2_t *)(v887 + 48), v924);
                v941 = vaddq_f64(*(float64x2_t *)(v887 + 64), v925);
                v942 = vaddq_f64(*(float64x2_t *)(v887 + 80), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v899, v914, *(double *)v1387[4].i64), v915, (float64x2_t)v1387[4], 1), v917, *(double *)v1387[5].i64), v918, (float64x2_t)v1387[5], 1));
                v943 = vaddq_f64(*(float64x2_t *)(v887 + 96), v926);
                v944 = vaddq_f64(*(float64x2_t *)(v887 + 112), v927);
                v945 = vaddq_f64(*(float64x2_t *)(v887 + 128), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v902, v914, *(double *)v1387[7].i64), v915, (float64x2_t)v1387[7], 1), v917, *(double *)v1387[8].i64), v918, (float64x2_t)v1387[8], 1));
                v946 = vmlaq_laneq_f64(vmlaq_n_f64(v931, v921, *(double *)v1387[14].i64), v922, (float64x2_t)v1387[14], 1);
                v947 = vmlaq_laneq_f64(vmlaq_n_f64(v933, v917, *(double *)v1387[14].i64), v918, (float64x2_t)v1387[14], 1);
                v948 = vaddq_f64(*(float64x2_t *)(v887 + 144), v928);
                v949 = vaddq_f64(*(float64x2_t *)(v887 + 160), v929);
                v950 = vmlaq_laneq_f64(vmlaq_n_f64(v934, v921, *(double *)v1387[17].i64), v922, (float64x2_t)v1387[17], 1);
                v951 = vaddq_f64(*(float64x2_t *)(v887 + 176), v930);
                v952 = vaddq_f64(*(float64x2_t *)(v887 + 192), v946);
                v953 = vmlaq_laneq_f64(vmlaq_n_f64(v935, v916, *(double *)v1387[17].i64), v895, (float64x2_t)v1387[17], 1);
                v954 = vaddq_f64(*(float64x2_t *)(v887 + 208), vmlaq_laneq_f64(vmlaq_n_f64(v932, v916, *(double *)v1387[14].i64), v895, (float64x2_t)v1387[14], 1));
                v955 = vmlaq_laneq_f64(vmlaq_n_f64(v936, v917, *(double *)v1387[17].i64), v918, (float64x2_t)v1387[17], 1);
                v956 = *(float64x2_t *)(v887 + 240);
                v957 = vaddq_f64(*(float64x2_t *)(v887 + 224), v947);
                v958 = vaddq_f64(*(float64x2_t *)(v887 + 256), v953);
                *(float64x2_t *)v887 = v937;
                *(float64x2_t *)(v887 + 16) = v938;
                *(float64x2_t *)(v887 + 64) = v941;
                *(float64x2_t *)(v887 + 80) = v942;
                *(float64x2_t *)(v887 + 32) = v939;
                *(float64x2_t *)(v887 + 48) = v940;
                v959 = vaddq_f64(*(float64x2_t *)(v887 + 272), v955);
                *(float64x2_t *)(v887 + 96) = v943;
                *(float64x2_t *)(v887 + 112) = v944;
                *(float64x2_t *)(v887 + 160) = v949;
                *(float64x2_t *)(v887 + 176) = v951;
                *(float64x2_t *)(v887 + 128) = v945;
                *(float64x2_t *)(v887 + 144) = v948;
                *(float64x2_t *)(v887 + 192) = v952;
                *(float64x2_t *)(v887 + 208) = v954;
                *(float64x2_t *)(v887 + 256) = v958;
                *(float64x2_t *)(v887 + 272) = v959;
                *(float64x2_t *)(v887 + 224) = v957;
                *(float64x2_t *)(v887 + 240) = vaddq_f64(v956, v950);
              }
              v960 = (float64x2_t *)(*(_QWORD *)v290 + 8 * (*(_DWORD *)(v290 + 36) + 6 * v298));
              v7.f64[0] = v1386[4].f64[0];
              v6.f64[0] = v1386[5].f64[0];
              v8 = v1386[2];
              *(_QWORD *)&v961.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[6], 1).u64[0];
              v961.f64[1] = v1386[9].f64[1];
              *(_QWORD *)&v962.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[12], 1).u64[0];
              v962.f64[1] = v1386[15].f64[1];
              *(_QWORD *)&v963.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[7], 1).u64[0];
              v963.f64[1] = v1386[10].f64[1];
              *(_QWORD *)&v964.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[13], 1).u64[0];
              v964.f64[1] = v1386[16].f64[1];
              *(_QWORD *)&v965.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[8], 1).u64[0];
              v965.f64[1] = v1386[11].f64[1];
              *(_QWORD *)&v966.f64[0] = vdupq_laneq_s64((int64x2_t)v1386[14], 1).u64[0];
              v966.f64[1] = v1386[17].f64[1];
              v968 = *(float64x2_t *)(*(_QWORD *)&v300 + 16);
              v967 = *(float64x2_t *)(*(_QWORD *)&v300 + 32);
              _Q3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1386[6], (int64x2_t)v1386[9]), **(double **)&v300), v961, **(float64x2_t **)&v300, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1386[7], (int64x2_t)v1386[10]), v968.f64[0]), v963, v968, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1386[8], (int64x2_t)v1386[11]), v967.f64[0]), v965, v967,
                      1);
              _Q4 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1386[12], (int64x2_t)v1386[15]), **(double **)&v300), v962, **(float64x2_t **)&v300, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1386[13], (int64x2_t)v1386[16]), v968.f64[0]), v964, v968, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1386[14], (int64x2_t)v1386[17]), v967.f64[0]), v966, v967,
                      1);
              _Q2 = vsubq_f64(v960[2], _Q4);
              _Q1 = vsubq_f64(v960[1], _Q3);
              v12 = vsubq_f64(*v960, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1386[0], (int64x2_t)v1386[3]), **(double **)&v300), (float64x2_t)vzip2q_s64((int64x2_t)v1386[0], (int64x2_t)v1386[3]), **(float64x2_t **)&v300, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1386[1], (int64x2_t)v1386[4]), v968.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1386[1], (int64x2_t)v1386[4]), v968, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1386[2], (int64x2_t)v1386[5]), v967.f64[0]),
                        (float64x2_t)vzip2q_s64((int64x2_t)v1386[2], (int64x2_t)v1386[5]),
                        v967,
                        1));
              *v960 = v12;
              v960[1] = _Q1;
              v960[2] = _Q2;
LABEL_175:
              v291 = v989;
              if (v685)
              {
                v969 = (float64x2_t *)(*(_QWORD *)v290 + 8 * (*(_DWORD *)(v290 + 36) + 6 * v1001));
                *(_QWORD *)&v7.f64[0] = v1387[4].i64[0];
                *(_QWORD *)&v6.f64[0] = v1387[5].i64[0];
                v8 = (float64x2_t)v1387[2];
                *(_QWORD *)&v970.f64[0] = vdupq_laneq_s64(v1387[6], 1).u64[0];
                *(_QWORD *)&v970.f64[1] = v1387[9].i64[1];
                *(_QWORD *)&v971.f64[0] = vdupq_laneq_s64(v1387[12], 1).u64[0];
                *(_QWORD *)&v971.f64[1] = v1387[15].i64[1];
                *(_QWORD *)&v972.f64[0] = vdupq_laneq_s64(v1387[7], 1).u64[0];
                *(_QWORD *)&v972.f64[1] = v1387[10].i64[1];
                *(_QWORD *)&v973.f64[0] = vdupq_laneq_s64(v1387[13], 1).u64[0];
                *(_QWORD *)&v973.f64[1] = v1387[16].i64[1];
                *(_QWORD *)&v974.f64[0] = vdupq_laneq_s64(v1387[8], 1).u64[0];
                *(_QWORD *)&v974.f64[1] = v1387[11].i64[1];
                *(_QWORD *)&v975.f64[0] = vdupq_laneq_s64(v1387[14], 1).u64[0];
                *(_QWORD *)&v975.f64[1] = v1387[17].i64[1];
                v977 = *(float64x2_t *)(*(_QWORD *)&v300 + 16);
                v976 = *(float64x2_t *)(*(_QWORD *)&v300 + 32);
                _Q3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v1387[6], v1387[9]), **(double **)&v300), v970, **(float64x2_t **)&v300, 1), (float64x2_t)vzip1q_s64(v1387[7], v1387[10]), v977.f64[0]), v972, v977, 1), (float64x2_t)vzip1q_s64(v1387[8], v1387[11]), v976.f64[0]), v974, v976, 1);
                _Q4 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v1387[12], v1387[15]), **(double **)&v300), v971, **(float64x2_t **)&v300, 1), (float64x2_t)vzip1q_s64(v1387[13], v1387[16]), v977.f64[0]), v973, v977, 1), (float64x2_t)vzip1q_s64(v1387[14], v1387[17]), v976.f64[0]), v975, v976, 1);
                _Q2 = vsubq_f64(v969[2], _Q4);
                _Q1 = vsubq_f64(v969[1], _Q3);
                v12 = vsubq_f64(*v969, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v1387[0], v1387[3]), **(double **)&v300), (float64x2_t)vzip2q_s64(v1387[0], v1387[3]), **(float64x2_t **)&v300, 1), (float64x2_t)vzip1q_s64(v1387[1], v1387[4]), v977.f64[0]), (float64x2_t)vzip2q_s64(v1387[1], v1387[4]), v977, 1), (float64x2_t)vzip1q_s64(v1387[2], v1387[5]), v976.f64[0]), (float64x2_t)vzip2q_s64(v1387[2], v1387[5]), v976,
                          1));
                *v969 = v12;
                v969[1] = _Q1;
                v969[2] = _Q2;
              }
LABEL_89:
              v292 += 888;
              if (v292 == v291)
                goto LABEL_177;
              continue;
            }
            v821 = v822;
          }
          break;
        }
LABEL_161:
        v823 = (float64x2_t *)sub_20F3D4374(v988, (char **)v820, v298, v821);
        v685 = v993;
        goto LABEL_162;
      }
    }
  }
  v290 = v9;
  v292 = *((_QWORD *)v1406 + 28);
  v291 = *((_QWORD *)v1406 + 29);
  if (v292 != v291)
    goto LABEL_87;
LABEL_177:
  std::mutex::~mutex(v983);
}

void sub_20F3D15B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 40));
  _Unwind_Resume(a1);
}

void sub_20F3D15CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t sub_20F3D15E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int *v24;
  _BYTE *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int *v45;
  char *v46;
  unsigned int v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  unsigned int *v57;
  int64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _OWORD *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  unsigned int v67;
  __n128 *v68;
  __n128 *v69;
  char *v70;
  uint64_t v71;
  const std::nothrow_t *v72;
  char *v73;
  BOOL v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  unint64_t v80;
  _BYTE *v81;
  unsigned int *v82;
  _BYTE *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  char *v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int *v103;
  char *v104;
  unsigned int v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _BYTE *v114;
  unsigned int *v115;
  int64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _OWORD *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  unsigned int v125;
  __n128 *v126;
  __n128 *v127;
  char *v128;
  uint64_t v129;
  const std::nothrow_t *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int *v147;
  void **v148;
  void **v149;
  char v150;
  char v151;

  if (!*(_BYTE *)(a1 + 274))
  {
    if (!*(_BYTE *)(a1 + 273))
    {
      v2 = *(_QWORD *)(a1 + 328);
      v3 = *(_QWORD *)(a1 + 336);
      *(_BYTE *)(a1 + 273) = v2 != v3;
      if (v2 == v3)
        *(_BYTE *)(a1 + 273) = *(_QWORD *)(a1 + 352) != *(_QWORD *)(a1 + 360);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 273))
    {
LABEL_162:
      *(_BYTE *)(a1 + 274) = 1;
      return a1 + 280;
    }
    v4 = *(void **)(a1 + 424);
    *(_QWORD *)(a1 + 432) = v4;
    v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    v6 = v5 >> 4;
    if (v5 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 440) - (_QWORD)v4) >> 2))
    {
      if (v5 < 0)
        sub_20E867F44();
      v7 = (char *)operator new((unint64_t)v5 >> 2);
      *(_QWORD *)(a1 + 424) = v7;
      *(_QWORD *)(a1 + 432) = v7;
      *(_QWORD *)(a1 + 440) = &v7[4 * v6];
      if (v4)
        operator delete(v4);
    }
    v8 = *(void **)(a1 + 448);
    *(_QWORD *)(a1 + 456) = v8;
    v9 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
    v10 = v9 >> 4;
    if (v9 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 464) - (_QWORD)v8) >> 2))
    {
      if (v9 < 0)
        sub_20E867F44();
      v11 = (char *)operator new((unint64_t)v9 >> 2);
      *(_QWORD *)(a1 + 448) = v11;
      *(_QWORD *)(a1 + 456) = v11;
      *(_QWORD *)(a1 + 464) = &v11[4 * v10];
      if (v8)
        operator delete(v8);
    }
    v12 = *(_QWORD *)(a1 + 200);
    for (i = *(_QWORD *)(a1 + 208); v12 != i; v12 += 888)
    {
      v14 = *(_QWORD *)(v12 + 736);
      if (*(_BYTE *)(v12 + 880)
        || (*(_BYTE *)(v14 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v12 + 744) + 4) & 6) != 0)
      {
        *(_BYTE *)(v12 + 880) = 1;
        sub_20F394A20(a1 + 424, v14);
        sub_20F394A20(a1 + 424, *(_QWORD *)(v12 + 744));
      }
    }
    v15 = *(_QWORD *)(a1 + 224);
    for (j = *(_QWORD *)(a1 + 232); v15 != j; v15 += 888)
    {
      v17 = *(_QWORD *)(v15 + 736);
      if (*(_BYTE *)(v15 + 880)
        || (*(_BYTE *)(v17 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v15 + 744) + 4) & 6) != 0)
      {
        *(_BYTE *)(v15 + 880) = 1;
        sub_20F3D35E0((_QWORD *)(a1 + 424), v17);
        sub_20F3D35E0((_QWORD *)(a1 + 424), *(_QWORD *)(v15 + 744));
      }
    }
    v19 = *(_QWORD *)(a1 + 328);
    v18 = *(_QWORD *)(a1 + 336);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v148 = (void **)(a1 + 328);
    v21 = *(unsigned int **)(a1 + 424);
    v20 = *(unsigned int **)(a1 + 432);
    v22 = ((v18 - v19) >> 2) + v20 - v21;
    v23 = *(_BYTE **)(a1 + 328);
    v140 = (v18 - v19) >> 2;
    v142 = v19;
    v144 = v18;
    if (v22 <= (uint64_t)(*(_QWORD *)(a1 + 344) - (_QWORD)v23) >> 2)
    {
LABEL_38:
      if (v21 != v20)
      {
        v146 = v20;
        while (1)
        {
          v40 = *v21;
          v42 = *(char **)(a1 + 8);
          v41 = *(char **)(a1 + 16);
          if (v41 != v42)
          {
            v43 = (v41 - v42) >> 4;
            do
            {
              v44 = v43 >> 1;
              v45 = (unsigned int *)&v42[16 * (v43 >> 1)];
              v47 = *v45;
              v46 = (char *)(v45 + 4);
              v43 += ~(v43 >> 1);
              if (v47 < v40)
                v42 = v46;
              else
                v43 = v44;
            }
            while (v43);
          }
          if (v42 == v41 || *(_DWORD *)v42 != v40)
          {
            v40 = *(_DWORD *)v41;
            v42 = *(char **)(a1 + 16);
          }
          if ((*(_BYTE *)(*((_QWORD *)v42 + 1) + 4) & 6) != 0)
            goto LABEL_42;
          v49 = *(char **)(a1 + 336);
          v48 = *(_QWORD *)(a1 + 344);
          if ((unint64_t)v49 >= v48)
            break;
          *(_DWORD *)v49 = v40;
          v39 = (uint64_t)(v49 + 4);
LABEL_41:
          *(_QWORD *)(a1 + 336) = v39;
          *(_BYTE *)(*((_QWORD *)v42 + 1) + 4) ^= 2u;
LABEL_42:
          if (++v21 == v20)
            goto LABEL_74;
        }
        v50 = (char *)*v148;
        v51 = v49 - (_BYTE *)*v148;
        v52 = v51 >> 2;
        v53 = (v51 >> 2) + 1;
        if (v53 >> 62)
          goto LABEL_164;
        v54 = v48 - (_QWORD)v50;
        if (v54 >> 1 > v53)
          v53 = v54 >> 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          if (v55 >> 62)
LABEL_165:
            sub_20E877A38();
          v56 = operator new(4 * v55);
          v57 = (unsigned int *)&v56[4 * v52];
          *v57 = v40;
          v39 = (uint64_t)(v57 + 1);
          v58 = v49 - v50;
          if (v49 == v50)
            goto LABEL_71;
        }
        else
        {
          v56 = 0;
          v57 = (unsigned int *)(4 * v52);
          *(_DWORD *)(4 * v52) = v40;
          v39 = 4 * v52 + 4;
          v58 = v49 - v50;
          if (v49 == v50)
          {
LABEL_71:
            *(_QWORD *)(a1 + 328) = v57;
            *(_QWORD *)(a1 + 336) = v39;
            *(_QWORD *)(a1 + 344) = &v56[4 * v55];
            if (v50)
              operator delete(v50);
            v20 = v146;
            goto LABEL_41;
          }
        }
        v59 = v58 - 4;
        if (v59 < 0x2C)
          goto LABEL_170;
        if ((unint64_t)(v49 - v56 - v51) < 0x20)
          goto LABEL_170;
        v60 = (v59 >> 2) + 1;
        v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
        v62 = &v49[-v61];
        v57 = (unsigned int *)((char *)v57 - v61);
        v63 = &v56[4 * v52 - 16];
        v64 = v49 - 16;
        v65 = v60 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v66 = *(_OWORD *)v64;
          *(v63 - 1) = *((_OWORD *)v64 - 1);
          *v63 = v66;
          v63 -= 2;
          v64 -= 32;
          v65 -= 8;
        }
        while (v65);
        v49 = v62;
        if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_170:
          do
          {
            v67 = *((_DWORD *)v49 - 1);
            v49 -= 4;
            *--v57 = v67;
          }
          while (v49 != v50);
        }
        goto LABEL_71;
      }
LABEL_74:
      if (v144 != v142)
      {
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v68 = *(__n128 **)(a1 + 328);
        v69 = *(__n128 **)(a1 + 336);
        v70 = (char *)v68 + 4 * v140;
        if (((char *)v69 - v70) >> 2 >= v140)
          v71 = v140;
        else
          v71 = ((char *)v69 - v70) >> 2;
        if (v71 < 1)
        {
LABEL_82:
          v75 = 0;
          v71 = 0;
        }
        else
        {
          v72 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v73 = (char *)operator new(4 * v71, v72);
            if (v73)
              break;
            v74 = (unint64_t)v71 > 1;
            v71 = (unint64_t)v71 >> 1;
            if (!v74)
              goto LABEL_82;
          }
          v75 = v73;
        }
        sub_20EDB30B0(v68, (__n128 *)((char *)v68 + 4 * v140), v69, (uint64_t)&v150, v140, ((char *)v69 - v70) >> 2, v75, v71);
        if (v75)
          operator delete(v75);
      }
      v77 = *(_QWORD *)(a1 + 352);
      v76 = *(_QWORD *)(a1 + 360);
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v149 = (void **)(a1 + 352);
      v79 = *(unsigned int **)(a1 + 448);
      v78 = *(unsigned int **)(a1 + 456);
      v80 = ((v76 - v77) >> 2) + v78 - v79;
      v81 = *(_BYTE **)(a1 + 352);
      v141 = (v76 - v77) >> 2;
      v143 = v77;
      v145 = v76;
      if (v80 <= (uint64_t)(*(_QWORD *)(a1 + 368) - (_QWORD)v81) >> 2)
        goto LABEL_98;
      if (!(v80 >> 62))
      {
        v82 = *(unsigned int **)(a1 + 456);
        v83 = *(_BYTE **)(a1 + 360);
        v84 = (char *)operator new(4 * v80);
        v85 = v83 - v81;
        v86 = &v84[(v83 - v81) & 0xFFFFFFFFFFFFFFFCLL];
        v87 = v86;
        if (v83 == v81)
          goto LABEL_96;
        if ((unint64_t)(v85 - 4) >= 0x2C)
        {
          v87 = &v84[(v83 - v81) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(&v83[-(v85 & 0xFFFFFFFFFFFFFFFCLL)] - v84) >= 0x20)
          {
            v88 = v85 >> 2;
            v89 = ((unint64_t)(v85 - 4) >> 2) + 1;
            v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
            v91 = &v83[-v90];
            v87 = &v86[-v90];
            v92 = &v84[4 * v88 - 16];
            v93 = (__int128 *)(v83 - 16);
            v94 = v89 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v95 = *v93;
              *((_OWORD *)v92 - 1) = *(v93 - 1);
              *(_OWORD *)v92 = v95;
              v92 -= 32;
              v93 -= 2;
              v94 -= 8;
            }
            while (v94);
            v83 = v91;
            if (v89 == (v89 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_96:
              *(_QWORD *)(a1 + 352) = v87;
              *(_QWORD *)(a1 + 360) = v86;
              *(_QWORD *)(a1 + 368) = &v84[4 * v80];
              v78 = v82;
              if (v81)
              {
                operator delete(v81);
                v79 = *(unsigned int **)(a1 + 448);
                v78 = *(unsigned int **)(a1 + 456);
              }
LABEL_98:
              if (v79 != v78)
              {
                v147 = v78;
                while (1)
                {
                  v98 = *v79;
                  v100 = *(char **)(a1 + 104);
                  v99 = *(char **)(a1 + 112);
                  if (v99 != v100)
                  {
                    v101 = (v99 - v100) >> 4;
                    do
                    {
                      v102 = v101 >> 1;
                      v103 = (unsigned int *)&v100[16 * (v101 >> 1)];
                      v105 = *v103;
                      v104 = (char *)(v103 + 4);
                      v101 += ~(v101 >> 1);
                      if (v105 < v98)
                        v100 = v104;
                      else
                        v101 = v102;
                    }
                    while (v101);
                  }
                  if (v100 == v99 || *(_DWORD *)v100 != v98)
                  {
                    v98 = *(_DWORD *)v99;
                    v100 = *(char **)(a1 + 112);
                  }
                  if ((*(_BYTE *)(*((_QWORD *)v100 + 1) + 4) & 6) != 0)
                    goto LABEL_102;
                  v107 = *(char **)(a1 + 360);
                  v106 = *(_QWORD *)(a1 + 368);
                  if ((unint64_t)v107 >= v106)
                    break;
                  *(_DWORD *)v107 = v98;
                  v97 = (uint64_t)(v107 + 4);
LABEL_101:
                  *(_QWORD *)(a1 + 360) = v97;
                  *(_BYTE *)(*((_QWORD *)v100 + 1) + 4) ^= 2u;
LABEL_102:
                  if (++v79 == v78)
                    goto LABEL_134;
                }
                v108 = (char *)*v149;
                v109 = v107 - (_BYTE *)*v149;
                v110 = v109 >> 2;
                v111 = (v109 >> 2) + 1;
                if (v111 >> 62)
                  goto LABEL_164;
                v112 = v106 - (_QWORD)v108;
                if (v112 >> 1 > v111)
                  v111 = v112 >> 1;
                if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
                  v113 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v113 = v111;
                if (v113)
                {
                  if (v113 >> 62)
                    goto LABEL_165;
                  v114 = operator new(4 * v113);
                  v115 = (unsigned int *)&v114[4 * v110];
                  *v115 = v98;
                  v97 = (uint64_t)(v115 + 1);
                  v116 = v107 - v108;
                  if (v107 == v108)
                    goto LABEL_131;
                }
                else
                {
                  v114 = 0;
                  v115 = (unsigned int *)(4 * v110);
                  *(_DWORD *)(4 * v110) = v98;
                  v97 = 4 * v110 + 4;
                  v116 = v107 - v108;
                  if (v107 == v108)
                  {
LABEL_131:
                    *(_QWORD *)(a1 + 352) = v115;
                    *(_QWORD *)(a1 + 360) = v97;
                    *(_QWORD *)(a1 + 368) = &v114[4 * v113];
                    if (v108)
                      operator delete(v108);
                    v78 = v147;
                    goto LABEL_101;
                  }
                }
                v117 = v116 - 4;
                if (v117 < 0x2C)
                  goto LABEL_171;
                if ((unint64_t)(v107 - v114 - v109) < 0x20)
                  goto LABEL_171;
                v118 = (v117 >> 2) + 1;
                v119 = 4 * (v118 & 0x7FFFFFFFFFFFFFF8);
                v120 = &v107[-v119];
                v115 = (unsigned int *)((char *)v115 - v119);
                v121 = &v114[4 * v110 - 16];
                v122 = v107 - 16;
                v123 = v118 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v124 = *(_OWORD *)v122;
                  *(v121 - 1) = *((_OWORD *)v122 - 1);
                  *v121 = v124;
                  v121 -= 2;
                  v122 -= 32;
                  v123 -= 8;
                }
                while (v123);
                v107 = v120;
                if (v118 != (v118 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_171:
                  do
                  {
                    v125 = *((_DWORD *)v107 - 1);
                    v107 -= 4;
                    *--v115 = v125;
                  }
                  while (v107 != v108);
                }
                goto LABEL_131;
              }
LABEL_134:
              if (v145 != v143)
              {
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v126 = *(__n128 **)(a1 + 352);
                v127 = *(__n128 **)(a1 + 360);
                v128 = (char *)v126 + 4 * v141;
                if (((char *)v127 - v128) >> 2 >= v141)
                  v129 = v141;
                else
                  v129 = ((char *)v127 - v128) >> 2;
                if (v129 < 1)
                {
LABEL_142:
                  v132 = 0;
                  v129 = 0;
                }
                else
                {
                  v130 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                  while (1)
                  {
                    v131 = (char *)operator new(4 * v129, v130);
                    if (v131)
                      break;
                    v74 = (unint64_t)v129 > 1;
                    v129 = (unint64_t)v129 >> 1;
                    if (!v74)
                      goto LABEL_142;
                  }
                  v132 = v131;
                }
                sub_20EDB30B0(v126, (__n128 *)((char *)v126 + 4 * v141), v127, (uint64_t)&v151, v141, ((char *)v127 - v128) >> 2, v132, v129);
                if (v132)
                  operator delete(v132);
              }
              v133 = *(_QWORD *)(a1 + 200);
              v134 = *(_QWORD *)(a1 + 208);
              while (v133 != v134)
              {
                v135 = *(_QWORD *)(v133 + 736);
                if (*(_BYTE *)(v133 + 880)
                  || (*(_BYTE *)(v135 + 4) & 6) != 0
                  || (*(_BYTE *)(*(_QWORD *)(v133 + 744) + 4) & 6) != 0)
                {
                  ++*(_DWORD *)(v135 + 8);
                  ++*(_DWORD *)(*(_QWORD *)(v133 + 744) + 8);
                }
                v133 += 888;
              }
              v136 = *(_QWORD *)(a1 + 224);
              v137 = *(_QWORD *)(a1 + 232);
              while (v136 != v137)
              {
                v138 = *(_QWORD *)(v136 + 736);
                if (*(_BYTE *)(v136 + 880)
                  || (*(_BYTE *)(v138 + 4) & 6) != 0
                  || (*(_BYTE *)(*(_QWORD *)(v136 + 744) + 4) & 6) != 0)
                {
                  ++*(_DWORD *)(v138 + 8);
                  ++*(_DWORD *)(*(_QWORD *)(v136 + 744) + 8);
                }
                v136 += 888;
              }
              goto LABEL_162;
            }
          }
        }
        else
        {
          v87 = &v84[(v83 - v81) & 0xFFFFFFFFFFFFFFFCLL];
        }
        do
        {
          v96 = *((_DWORD *)v83 - 1);
          v83 -= 4;
          *((_DWORD *)v87 - 1) = v96;
          v87 -= 4;
        }
        while (v83 != v81);
        goto LABEL_96;
      }
LABEL_164:
      sub_20E867F44();
    }
    if (v22 >> 62)
      goto LABEL_164;
    v24 = *(unsigned int **)(a1 + 432);
    v25 = *(_BYTE **)(a1 + 336);
    v26 = (char *)operator new(4 * v22);
    v27 = v25 - v23;
    v28 = &v26[(v25 - v23) & 0xFFFFFFFFFFFFFFFCLL];
    v29 = v28;
    if (v25 != v23)
    {
      if ((unint64_t)(v27 - 4) < 0x2C)
      {
        v29 = &v26[(v25 - v23) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_35:
          v38 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v29 - 1) = v38;
          v29 -= 4;
        }
        while (v25 != v23);
        goto LABEL_36;
      }
      v29 = &v26[(v25 - v23) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v25 - &v26[v27 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
        goto LABEL_35;
      v30 = v27 >> 2;
      v31 = ((unint64_t)(v27 - 4) >> 2) + 1;
      v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
      v33 = &v25[-v32];
      v29 = &v28[-v32];
      v34 = &v26[4 * v30 - 16];
      v35 = (__int128 *)(v25 - 16);
      v36 = v31 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v37 = *v35;
        *((_OWORD *)v34 - 1) = *(v35 - 1);
        *(_OWORD *)v34 = v37;
        v34 -= 32;
        v35 -= 2;
        v36 -= 8;
      }
      while (v36);
      v25 = v33;
      if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_35;
    }
LABEL_36:
    *(_QWORD *)(a1 + 328) = v29;
    *(_QWORD *)(a1 + 336) = v28;
    *(_QWORD *)(a1 + 344) = &v26[4 * v22];
    v20 = v24;
    if (v23)
    {
      operator delete(v23);
      v21 = *(unsigned int **)(a1 + 424);
      v20 = *(unsigned int **)(a1 + 432);
    }
    goto LABEL_38;
  }
  return a1 + 280;
}

void sub_20F3D1FDC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  if (v2)
  {
    operator delete(v2);
    sub_20F3D3778(v1);
    _Unwind_Resume(a1);
  }
  sub_20F3D3778(v1);
  _Unwind_Resume(a1);
}

char **sub_20F3D2024(char **a1, unsigned int **a2)
{
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  unsigned int v9;
  int64_t v10;
  char *v11;
  char *v12;
  unsigned int *v13;
  unsigned int *v14;
  char *v15;
  unsigned int v16;
  int64_t v18;

  v5 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v7 = *a2;
    v6 = a2[1];
    v8 = *a1;
    while (v7 != v6)
    {
      v9 = *(_DWORD *)v8;
      if (*(_DWORD *)v8 >= *v7)
      {
        v8 += 4 * (*v7++ >= v9);
        if (v8 == v4)
          goto LABEL_7;
      }
      else
      {
        *(_DWORD *)v5 = v9;
        v5 += 4;
        v8 += 4;
        if (v8 == v4)
        {
LABEL_7:
          if (v5 == v4)
            goto LABEL_12;
          goto LABEL_11;
        }
      }
    }
    if (v8 != v5)
    {
      v10 = v4 - v8;
      memmove(v5, v8, v4 - v8);
      v5 += v10;
      if (v5 != a1[1])
LABEL_11:
        a1[1] = v5;
    }
  }
LABEL_12:
  v12 = a1[3];
  v11 = a1[4];
  if (v12 != v11)
  {
    v14 = a2[3];
    v13 = a2[4];
    v15 = a1[3];
    while (v14 != v13)
    {
      v16 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 < *v14)
      {
        *(_DWORD *)v12 = v16;
        v12 += 4;
        v15 += 4;
        if (v15 == v11)
          goto LABEL_18;
      }
      else
      {
        v15 += 4 * (*v14++ >= v16);
        if (v15 == v11)
        {
LABEL_18:
          if (v12 == v11)
            return a1;
          goto LABEL_22;
        }
      }
    }
    if (v15 != v12)
    {
      v18 = v11 - v15;
      memmove(v12, v15, v11 - v15);
      v12 += v18;
      if (v12 != a1[4])
      {
LABEL_22:
        a1[4] = v12;
        return a1;
      }
    }
  }
  return a1;
}

char **sub_20F3D21C0(char **a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  _BOOL4 v19;
  size_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  size_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  _BOOL4 v42;
  size_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  size_t v49;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (*a1 == v5)
  {
    v7 = a1[1];
    v9 = *a2;
  }
  else
  {
    v7 = *a1;
    v8 = *a1;
    v9 = *a2;
    while (v9 != v6)
    {
      if (*(_DWORD *)v9 < *(_DWORD *)v8)
        goto LABEL_9;
      v9 += 4 * (*(_DWORD *)v8 >= *(_DWORD *)v9);
      v8 += 4;
      v7 += 4;
      if (v8 == v5)
      {
        v7 = a1[1];
        goto LABEL_9;
      }
    }
    v7 = a1[1];
    v9 = a2[1];
  }
LABEL_9:
  v10 = (v7 - v4) >> 2;
  v11 = v5 - v4;
  v12 = v11 >> 2;
  v13 = ((v6 - *a2) >> 2) + (v11 >> 1) - v10;
  if (v13 <= v11 >> 2)
  {
    if (v13 < v11 >> 2)
      a1[1] = &v4[4 * v13];
  }
  else
  {
    sub_20E93DC84((uint64_t)a1, v13 - (v11 >> 2));
    v4 = *a1;
  }
  v14 = &v4[4 * v12];
  v15 = a2[1];
  if (v10 != v12)
  {
    v17 = &v4[4 * v10];
    v16 = &v4[4 * v12];
    while (v9 != v15)
    {
      v18 = *(_DWORD *)v9;
      v19 = *(_DWORD *)v9 >= *(_DWORD *)v17;
      if (*(_DWORD *)v9 >= *(_DWORD *)v17)
        v18 = *(_DWORD *)v17;
      v9 += 4 * (*(_DWORD *)v17 >= *(_DWORD *)v9);
      v17 += 4 * v19;
      *(_DWORD *)v16 = v18;
      v16 += 4;
      if (v17 == v14)
        goto LABEL_20;
    }
    v20 = v14 - v17;
    v21 = v16;
    goto LABEL_23;
  }
  v16 = &v4[4 * v12];
LABEL_20:
  v20 = v15 - v9;
  if (v15 != v9)
  {
    v21 = v16;
    v17 = v9;
LABEL_23:
    memmove(v21, v17, v20);
  }
  v22 = &v16[v20];
  v23 = *a1;
  if (&v16[v20] != a1[1])
    a1[1] = v22;
  if (v10 != v12)
  {
    v24 = &v23[4 * v10];
    v25 = &v23[4 * v12];
    v26 = v22 - v25;
    if (v26)
      memmove(&v23[4 * v10], v25, v26);
    a1[1] = &v24[v26];
  }
  v27 = a1[3];
  v28 = a1[4];
  v29 = a2[4];
  if (v27 == v28)
  {
    v30 = a1[4];
    v32 = a2[3];
  }
  else
  {
    v30 = a1[3];
    v31 = v30;
    v32 = a2[3];
    while (v32 != v29)
    {
      if (*(_DWORD *)v32 < *(_DWORD *)v31)
        goto LABEL_38;
      v32 += 4 * (*(_DWORD *)v31 >= *(_DWORD *)v32);
      v31 += 4;
      v30 += 4;
      if (v31 == v28)
      {
        v30 = a1[4];
        goto LABEL_38;
      }
    }
    v30 = a1[4];
    v32 = a2[4];
  }
LABEL_38:
  v33 = (v30 - v27) >> 2;
  v34 = v28 - v27;
  v35 = v34 >> 2;
  v36 = ((v29 - a2[3]) >> 2) + (v34 >> 1) - v33;
  if (v36 <= v34 >> 2)
  {
    if (v36 < v34 >> 2)
      a1[4] = &v27[4 * v36];
  }
  else
  {
    sub_20E93DC84((uint64_t)(a1 + 3), v36 - (v34 >> 2));
    v27 = a1[3];
  }
  v37 = &v27[4 * v35];
  v38 = a2[4];
  if (v33 != v35)
  {
    v40 = &v27[4 * v33];
    v39 = &v27[4 * v35];
    while (v32 != v38)
    {
      v41 = *(_DWORD *)v32;
      v42 = *(_DWORD *)v32 >= *(_DWORD *)v40;
      if (*(_DWORD *)v32 >= *(_DWORD *)v40)
        v41 = *(_DWORD *)v40;
      v32 += 4 * (*(_DWORD *)v40 >= *(_DWORD *)v32);
      v40 += 4 * v42;
      *(_DWORD *)v39 = v41;
      v39 += 4;
      if (v40 == v37)
        goto LABEL_49;
    }
    v43 = v37 - v40;
    v44 = v39;
    goto LABEL_52;
  }
  v39 = &v27[4 * v35];
LABEL_49:
  v43 = v38 - v32;
  if (v38 != v32)
  {
    v44 = v39;
    v40 = v32;
LABEL_52:
    memmove(v44, v40, v43);
  }
  v45 = &v39[v43];
  v46 = a1[3];
  if (v45 != a1[4])
    a1[4] = v45;
  if (v33 != v35)
  {
    v47 = &v46[4 * v33];
    v48 = &v46[4 * v35];
    v49 = v45 - v48;
    if (v49)
      memmove(&v46[4 * v33], v48, v49);
    a1[4] = &v47[v49];
  }
  return a1;
}

void *sub_20F3D2520(_QWORD *a1, char **a2)
{
  uint64_t v4;
  unint64_t v5;
  void *result;
  unint64_t v7;
  size_t v8;

  sub_20F20CEEC(a1, 0, 1u);
  a1[3] = 0;
  a1[4] = 0;
  (*(void (**)(_QWORD *))(a1[19] + 16))(a1 + 19);
  (*(void (**)(_QWORD *))(a1[47] + 16))(a1 + 47);
  (*(void (**)(_QWORD *))(a1[5] + 16))(a1 + 5);
  (*(void (**)(_QWORD *))(a1[33] + 16))(a1 + 33);
  sub_20F3D3988((uint64_t)(a1 + 65));
  if (a1 + 65 != a2)
  {
    sub_20E867E00(a1 + 65, *a2, a2[1], (a2[1] - *a2) >> 2);
    sub_20E867E00(a1 + 68, a2[3], a2[4], (a2[4] - a2[3]) >> 2);
  }
  v4 = (a1[66] - a1[65]) >> 2;
  v5 = a1[69] - a1[68];
  (*(void (**)(_QWORD *, unint64_t, uint64_t))(a1[19] + 24))(a1 + 19, v5 >> 2, v4);
  (*(void (**)(_QWORD *, unint64_t, unint64_t))(a1[47] + 24))(a1 + 47, v5 >> 2, v5 >> 2);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[5] + 24))(a1 + 5, v4, v4);
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(a1[33] + 24))(a1 + 33, v4, v5 >> 2);
  a1[3] = (v5 << 30) & 0xFFFFFFFF00000000 | v4;
  *((_DWORD *)a1 + 8) = 0;
  *((_DWORD *)a1 + 9) = 4 * v4;
  v7 = 4 * (_DWORD)v4 + 6 * (v5 >> 2);
  *((_DWORD *)a1 + 4) = v7;
  if (a1[1] < v7)
  {
    if (*a1)
      MEMORY[0x212BC6368](*a1, 0x1000C8000313F17);
    v8 = (8 * v7 + 31) & 0xFFFFFFFE0;
    *a1 = 0;
    a1[1] = v8 >> 3;
    result = operator new(v8, (std::align_val_t)0x20uLL);
    *a1 = result;
  }
  return result;
}

__n128 sub_20F3D26E4(char **a1, _QWORD *a2, char **a3, _QWORD *a4)
{
  unsigned int **v8;
  char *v9;
  char *v10;
  unsigned int *v11;
  unsigned int *v12;
  char *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  unsigned int *v18;
  unsigned int *v19;
  char *v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned int v30;
  _DWORD *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  char *v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unsigned int v64;
  _DWORD *v65;
  char *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  char *v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  char *v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _OWORD *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __n128 result;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  char *v95;
  __int128 v96;
  int *v97;
  int *i;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  char **v104;
  _QWORD *v105;
  char **v106;
  char *v107;
  char *v108;
  unsigned int **v109;
  unint64_t v110;
  unint64_t v111;
  char **v112;

  v8 = (unsigned int **)(a1 + 65);
  if (a1 + 65 != a3)
  {
    sub_20E867E00(a3, a1[65], a1[66], (a1[66] - a1[65]) >> 2);
    sub_20E867E00(a3 + 3, a1[68], a1[69], (a1[69] - a1[68]) >> 2);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = (unsigned int *)a2[65];
  v12 = (unsigned int *)a2[66];
  if (*a3 != v9 && v11 != v12)
  {
    v14 = *a3;
    do
    {
      v15 = *(_DWORD *)v14;
      if (*(_DWORD *)v14 < *v11)
      {
        v14 += 4;
        if (v14 == v9)
          break;
      }
      else
      {
        if (*v11 >= v15)
        {
          *(_DWORD *)v10 = v15;
          v10 += 4;
          v14 += 4;
        }
        ++v11;
        if (v14 == v9)
          break;
      }
    }
    while (v11 != v12);
  }
  if (v10 != v9)
  {
    v9 = v10;
    a3[1] = v10;
  }
  v17 = a3[3];
  v16 = a3[4];
  v18 = (unsigned int *)a2[68];
  v19 = (unsigned int *)a2[69];
  if (v17 != v16 && v18 != v19)
  {
    v21 = a3[3];
    do
    {
      v22 = *(_DWORD *)v21;
      if (*(_DWORD *)v21 < *v18)
      {
        v21 += 4;
        if (v21 == v16)
          break;
      }
      else
      {
        if (*v18 >= v22)
        {
          *(_DWORD *)v17 = v22;
          v17 += 4;
          v21 += 4;
        }
        ++v18;
        if (v21 == v16)
          break;
      }
    }
    while (v18 != v19);
  }
  v104 = a1;
  v105 = a2;
  if (v17 != v16)
    a3[4] = v17;
  v23 = (unsigned int *)*a4;
  a4[1] = *a4;
  v106 = a3;
  v112 = (char **)a4;
  if (*a3 != v9)
  {
    v24 = v9 - *a3;
    v25 = v24 >> 2;
    if (v24 >> 2 > (unint64_t)((uint64_t)(a4[2] - (_QWORD)v23) >> 3))
    {
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFDLL)
        goto LABEL_105;
      v26 = (char *)operator new(2 * v24);
      *a4 = v26;
      a4[1] = v26;
      a4[2] = &v26[8 * v25];
      if (v23)
        operator delete(v23);
    }
    v28 = *a3;
    v27 = a3[1];
    if (*a3 != v27)
    {
      v29 = 0;
      v30 = 0;
      v31 = (_DWORD *)v105[65];
      v32 = *v8;
      v108 = v106[1];
      v33 = *(_DWORD *)v28;
      if (*v31 < *(_DWORD *)v28)
        goto LABEL_39;
      while (1)
      {
        if (*v32 < v33)
        {
          do
          {
            v35 = v32[1];
            ++v32;
            v29 = (v29 + 1);
          }
          while (v35 < v33);
        }
        v37 = (char *)a4[1];
        v36 = a4[2];
        if ((unint64_t)v37 < v36)
        {
          *(_QWORD *)v37 = v30 | (unint64_t)(v29 << 32);
          a4[1] = v37 + 8;
          v28 += 4;
          if (v28 == v27)
            break;
          goto LABEL_38;
        }
        v38 = (unsigned int *)*a4;
        v39 = (uint64_t)&v37[-*a4];
        v40 = v39 >> 3;
        v41 = (v39 >> 3) + 1;
        if (v41 >> 61)
          goto LABEL_105;
        v42 = v36 - (_QWORD)v38;
        if (v42 >> 2 > v41)
          v41 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        v110 = v41;
        if (v41)
        {
          if (v41 >> 61)
LABEL_104:
            sub_20E877A38();
          v43 = operator new(8 * v41);
        }
        else
        {
          v43 = 0;
        }
        v44 = &v43[8 * v40];
        *(_QWORD *)v44 = v30 | (unint64_t)(v29 << 32);
        v45 = v44 + 8;
        if (v37 == (char *)v38)
        {
          a4 = v112;
          *v112 = v44;
          v112[1] = v45;
          v112[2] = &v43[8 * v110];
          if (v37)
            goto LABEL_60;
        }
        else
        {
          v46 = v37 - (char *)v38 - 8;
          if (v46 < 0x58)
            goto LABEL_108;
          if ((unint64_t)(v37 - v43 - v39) < 0x20)
            goto LABEL_108;
          v47 = (v46 >> 3) + 1;
          v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          v49 = &v37[-v48];
          v44 -= v48;
          v50 = &v43[8 * v40 - 16];
          v51 = v37 - 16;
          v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v53 = *(_OWORD *)v51;
            *(v50 - 1) = *((_OWORD *)v51 - 1);
            *v50 = v53;
            v50 -= 2;
            v51 -= 32;
            v52 -= 4;
          }
          while (v52);
          v37 = v49;
          if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_108:
            do
            {
              v54 = *((_QWORD *)v37 - 1);
              v37 -= 8;
              *((_QWORD *)v44 - 1) = v54;
              v44 -= 8;
            }
            while (v37 != (char *)v38);
          }
          a4 = v112;
          v37 = *v112;
          *v112 = v44;
          v112[1] = v45;
          v112[2] = &v43[8 * v110];
          if (v37)
LABEL_60:
            operator delete(v37);
        }
        v27 = v108;
        a4[1] = v45;
        v28 += 4;
        if (v28 == v108)
          break;
LABEL_38:
        v33 = *(_DWORD *)v28;
        if (*v31 < *(_DWORD *)v28)
        {
          do
          {
LABEL_39:
            v34 = v31[1];
            ++v31;
            ++v30;
          }
          while (v34 < v33);
        }
      }
    }
  }
  v55 = (void *)a4[3];
  v109 = (unsigned int **)(a4 + 3);
  a4[4] = v55;
  v56 = v106[3];
  v57 = v106[4];
  if (v56 == v57)
    goto LABEL_99;
  v58 = v57 - v56;
  v59 = v58 >> 2;
  if (v58 >> 2 > (unint64_t)((uint64_t)(a4[5] - (_QWORD)v55) >> 3))
  {
    if ((unint64_t)v58 <= 0x7FFFFFFFFFFFFFFCLL)
    {
      v60 = (char *)operator new(2 * v58);
      a4[3] = v60;
      a4[4] = v60;
      a4[5] = &v60[8 * v59];
      if (v55)
        operator delete(v55);
      goto LABEL_70;
    }
LABEL_105:
    sub_20E92CED8();
  }
LABEL_70:
  v62 = v106[3];
  v61 = v106[4];
  if (v62 != v61)
  {
    v63 = 0;
    v64 = 0;
    v65 = (_DWORD *)v105[68];
    v66 = v104[68];
    v107 = v106[4];
    v67 = *(_DWORD *)v62;
    if (*v65 < *(_DWORD *)v62)
      goto LABEL_75;
    while (1)
    {
      if (*(_DWORD *)v66 < v67)
      {
        do
        {
          v69 = *((_DWORD *)v66 + 1);
          v66 += 4;
          v63 = (v63 + 1);
        }
        while (v69 < v67);
      }
      v71 = (char *)a4[4];
      v70 = a4[5];
      if ((unint64_t)v71 < v70)
      {
        *(_QWORD *)v71 = v64 | (unint64_t)(v63 << 32);
        a4[4] = v71 + 8;
        v62 += 4;
        if (v62 == v61)
          break;
      }
      else
      {
        v72 = *v109;
        v73 = v71 - (char *)*v109;
        v74 = v73 >> 3;
        v75 = (v73 >> 3) + 1;
        if (v75 >> 61)
          goto LABEL_105;
        v76 = v70 - (_QWORD)v72;
        if (v76 >> 2 > v75)
          v75 = v76 >> 2;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        v111 = v75;
        if (v75)
        {
          if (v75 >> 61)
            goto LABEL_104;
          v77 = operator new(8 * v75);
        }
        else
        {
          v77 = 0;
        }
        v78 = &v77[8 * v74];
        *(_QWORD *)v78 = v64 | (unint64_t)(v63 << 32);
        v79 = v78 + 8;
        if (v71 != (char *)v72)
        {
          v80 = v71 - (char *)v72 - 8;
          if (v80 < 0x58)
            goto LABEL_109;
          if ((unint64_t)(v71 - v77 - v73) < 0x20)
            goto LABEL_109;
          v81 = (v80 >> 3) + 1;
          v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
          v83 = &v71[-v82];
          v78 -= v82;
          v84 = &v77[8 * v74 - 16];
          v85 = v71 - 16;
          v86 = v81 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v87 = *(_OWORD *)v85;
            *(v84 - 1) = *((_OWORD *)v85 - 1);
            *v84 = v87;
            v84 -= 2;
            v85 -= 32;
            v86 -= 4;
          }
          while (v86);
          v71 = v83;
          if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_109:
            do
            {
              v88 = *((_QWORD *)v71 - 1);
              v71 -= 8;
              *((_QWORD *)v78 - 1) = v88;
              v78 -= 8;
            }
            while (v71 != (char *)v72);
          }
          v71 = (char *)*v109;
        }
        a4 = v112;
        v112[3] = v78;
        v112[4] = v79;
        v112[5] = &v77[8 * v111];
        if (v71)
          operator delete(v71);
        v61 = v107;
        v112[4] = v79;
        v62 += 4;
        if (v62 == v107)
          break;
      }
      v67 = *(_DWORD *)v62;
      if (*v65 < *(_DWORD *)v62)
      {
        do
        {
LABEL_75:
          v68 = v65[1];
          ++v65;
          ++v64;
        }
        while (v68 < v67);
      }
    }
  }
LABEL_99:
  sub_20F3D3E8C(v104 + 19, (uint64_t)(v105 + 19), v109, (unsigned int **)a4);
  sub_20F3D40F4(v104 + 47, (uint64_t)(v105 + 47), v109, v109);
  sub_20F3D4478(v104 + 5, (uint64_t)(v105 + 5), a4, (unsigned int **)a4);
  sub_20F3D3E8C(v104 + 33, (uint64_t)(v105 + 33), a4, v109);
  v90 = (unsigned int *)*a4;
  v91 = (unsigned int *)a4[1];
  if ((unsigned int *)*a4 != v91)
  {
    do
    {
      v92 = *v90;
      v93 = v90[1];
      v90 += 2;
      v94 = *v105 + 8 * (*((_DWORD *)v105 + 8) + 4 * v92);
      v95 = &(*v104)[32 * v93 + 8 * *((_DWORD *)v104 + 8)];
      result = *(__n128 *)v94;
      v96 = *(_OWORD *)(v94 + 16);
      *(_OWORD *)v95 = *(_OWORD *)v94;
      *((_OWORD *)v95 + 1) = v96;
    }
    while (v90 != v91);
  }
  v97 = (int *)a4[3];
  for (i = (int *)a4[4]; v97 != i; *(_OWORD *)v102 = v103)
  {
    v99 = *v97;
    v100 = v97[1];
    v97 += 2;
    v101 = *v105 + 8 * (*((_DWORD *)v105 + 9) + 6 * v99);
    v102 = (uint64_t)&(*v104)[8 * (*((_DWORD *)v104 + 9) + 6 * v100)];
    result = *(__n128 *)(v101 + 32);
    v103 = *(_OWORD *)v101;
    *(_OWORD *)(v102 + 16) = *(_OWORD *)(v101 + 16);
    *(__n128 *)(v102 + 32) = result;
  }
  return result;
}

void sub_20F3D2E0C(char **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  char **v5;
  void *v6;
  _DWORD *v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  void *v17;
  unint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _DWORD **v22;
  BOOL v23;
  unint64_t v24;
  char *v25;
  const void *v26;
  char *v27;
  size_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  char *v49;
  char *v50;
  char *v51;
  size_t v52;
  unint64_t v53;
  char *v54;
  _DWORD *v55;
  char *v56;
  char *v57;
  _DWORD *v58;
  int v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _DWORD *v70;
  int64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  char *v82;
  int64_t v83;
  char v84;
  char *v85;
  unsigned int *v86;
  unsigned int *v87;
  int v88;
  char *v89;
  char *v90;
  char *v91;
  int v92;
  char *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  _DWORD *v99;
  _DWORD *v100;
  int v101;
  char *v102;
  char *v103;
  int64_t v104;
  unint64_t v105;
  char *v106;
  char v107;
  _DWORD *v108;
  _QWORD *v109;
  unint64_t *v110;
  unint64_t *v111;
  uint64_t *v113;
  _DWORD *v114;

  v3 = a3;
  v5 = a1;
  v6 = *(void **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v7 = (_DWORD *)*a2;
  v8 = a2[1];
  if (*a2 == v8)
  {
    v18 = (unint64_t *)(a3 + 24);
    v17 = *(void **)(a3 + 24);
    *(_QWORD *)(a3 + 32) = v17;
    v113 = (uint64_t *)(a3 + 32);
    v20 = a2 + 4;
    v19 = a2[4];
    v22 = (_DWORD **)(a2 + 3);
    v21 = a2[3];
    if (v21 == v19)
      return;
    v23 = 0;
  }
  else
  {
    v9 = v8 - (_QWORD)v7;
    v10 = (v8 - (uint64_t)v7) >> 2;
    if (v10 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v6) >> 2)
    {
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_120;
      v11 = (char *)operator new(v9);
      *(_QWORD *)v3 = v11;
      *(_QWORD *)(v3 + 8) = v11;
      *(_QWORD *)(v3 + 16) = &v11[4 * v10];
      if (v6)
        operator delete(v6);
    }
    v12 = v5[65];
    v13 = v5[66];
    v15 = (_DWORD *)*a2;
    v14 = (_DWORD *)a2[1];
    v109 = a2;
    if (v12 == v13)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      while (*(_DWORD *)v12 < *v15)
      {
        v12 += 4;
        ++v16;
        if (v12 == v13)
          goto LABEL_48;
      }
    }
    if (v15 != v14 && v12 != v13)
    {
      v114 = (_DWORD *)a2[1];
      while (1)
      {
        if (*v15 != *(_DWORD *)v12)
        {
          v12 += 4;
          if (++v15 == v14)
            goto LABEL_48;
          goto LABEL_24;
        }
        v25 = *(char **)(v3 + 8);
        v24 = *(_QWORD *)(v3 + 16);
        if ((unint64_t)v25 < v24)
        {
          *(_DWORD *)v25 = v16;
          *(_QWORD *)(v3 + 8) = v25 + 4;
          v26 = v12 + 4;
          v27 = v5[66];
          v28 = v27 - (v12 + 4);
          if (v27 == v12 + 4)
            goto LABEL_21;
LABEL_20:
          memmove(v12, v26, v28);
          goto LABEL_21;
        }
        v29 = *(char **)v3;
        v30 = (uint64_t)&v25[-*(_QWORD *)v3];
        v31 = v30 >> 2;
        v32 = (v30 >> 2) + 1;
        if (v32 >> 62)
          goto LABEL_120;
        v33 = v24 - (_QWORD)v29;
        if (v33 >> 1 > v32)
          v32 = v33 >> 1;
        v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v32;
        if (v34)
        {
          if (v34 >> 62)
LABEL_118:
            sub_20E877A38();
          v35 = operator new(4 * v34);
          v36 = &v35[4 * v31];
          *v36 = v16;
          v37 = (uint64_t)(v36 + 1);
          v38 = v25 - v29;
          if (v25 == v29)
          {
LABEL_38:
            v3 = a3;
            goto LABEL_44;
          }
        }
        else
        {
          v35 = 0;
          v36 = (_DWORD *)(4 * v31);
          *(_DWORD *)(4 * v31) = v16;
          v37 = 4 * v31 + 4;
          v38 = v25 - v29;
          if (v25 == v29)
            goto LABEL_38;
        }
        v39 = v38 - 4;
        if (v39 < 0x2C)
          break;
        v40 = v25 - &v35[v30];
        v3 = a3;
        if (v40 < 0x20)
          goto LABEL_43;
        v41 = (v39 >> 2) + 1;
        v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
        v43 = &v25[-v42];
        v36 = (_DWORD *)((char *)v36 - v42);
        v44 = &v35[4 * v31 - 16];
        v45 = v25 - 16;
        v46 = v41 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v47 = *(_OWORD *)v45;
          *(v44 - 1) = *((_OWORD *)v45 - 1);
          *v44 = v47;
          v44 -= 2;
          v45 -= 32;
          v46 -= 8;
        }
        while (v46);
        v25 = v43;
        if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_43;
LABEL_44:
        *(_QWORD *)v3 = v36;
        *(_QWORD *)(v3 + 8) = v37;
        *(_QWORD *)(v3 + 16) = &v35[4 * v34];
        if (v29)
          operator delete(v29);
        v14 = v114;
        v5 = a1;
        *(_QWORD *)(v3 + 8) = v37;
        v26 = v12 + 4;
        v49 = a1[66];
        v28 = v49 - (v12 + 4);
        if (v49 != v12 + 4)
          goto LABEL_20;
LABEL_21:
        v5[66] = &v12[v28];
        v13 -= 4;
        if (++v15 == v14)
          goto LABEL_48;
LABEL_24:
        ++v16;
        if (v12 == v13)
          goto LABEL_48;
      }
      v3 = a3;
      do
      {
LABEL_43:
        v48 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *--v36 = v48;
      }
      while (v25 != v29);
      goto LABEL_44;
    }
LABEL_48:
    v50 = *(char **)v3;
    v51 = *(char **)(v3 + 8);
    v23 = *(_QWORD *)v3 != (_QWORD)v51;
    v18 = (unint64_t *)(v3 + 24);
    v17 = *(void **)(v3 + 24);
    *(_QWORD *)(v3 + 32) = v17;
    v113 = (uint64_t *)(v3 + 32);
    v20 = v109 + 4;
    v19 = v109[4];
    v22 = (_DWORD **)(v109 + 3);
    v21 = v109[3];
    if (v21 == v19)
    {
      if (v50 == v51)
        return;
      goto LABEL_97;
    }
  }
  v52 = v19 - v21;
  v53 = (v19 - v21) >> 2;
  if (v53 <= (uint64_t)(*(_QWORD *)(v3 + 40) - (_QWORD)v17) >> 2)
    goto LABEL_53;
  if ((v52 & 0x8000000000000000) != 0)
LABEL_120:
    sub_20E867F44();
  v54 = (char *)operator new(v52);
  *(_QWORD *)(v3 + 24) = v54;
  *(_QWORD *)(v3 + 32) = v54;
  *(_QWORD *)(v3 + 40) = &v54[4 * v53];
  if (v17)
    operator delete(v17);
LABEL_53:
  v107 = v23;
  v55 = *v22;
  v56 = v5[68];
  v57 = v5[69];
  v58 = (_DWORD *)*v20;
  if (v56 == v57)
  {
    v59 = 0;
  }
  else
  {
    v59 = 0;
    while (*(_DWORD *)v56 < *v55)
    {
      v56 += 4;
      ++v59;
      if (v56 == v57)
        goto LABEL_92;
    }
  }
  if (v55 != v58 && v56 != v57)
  {
    v108 = (_DWORD *)*v20;
    v110 = v18;
    do
    {
      if (*v55 != *(_DWORD *)v56)
      {
        v56 += 4;
        if (++v55 == v58)
          break;
        goto LABEL_91;
      }
      v61 = *(char **)(v3 + 32);
      v60 = *(_QWORD *)(v3 + 40);
      if ((unint64_t)v61 < v60)
      {
        *(_DWORD *)v61 = v59;
        v62 = (uint64_t)(v61 + 4);
        goto LABEL_88;
      }
      v63 = (char *)*v18;
      v64 = (uint64_t)&v61[-*v18];
      v65 = v64 >> 2;
      v66 = (v64 >> 2) + 1;
      if (v66 >> 62)
        sub_20E867F44();
      v67 = v60 - (_QWORD)v63;
      if (v67 >> 1 > v66)
        v66 = v67 >> 1;
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
        v68 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v68 = v66;
      if (v68)
      {
        if (v68 >> 62)
          goto LABEL_118;
        v69 = operator new(4 * v68);
        v70 = &v69[4 * v65];
        *v70 = v59;
        v62 = (uint64_t)(v70 + 1);
        v71 = v61 - v63;
        if (v61 == v63)
        {
LABEL_79:
          v3 = a3;
          goto LABEL_85;
        }
      }
      else
      {
        v69 = 0;
        v70 = (_DWORD *)(4 * v65);
        *(_DWORD *)(4 * v65) = v59;
        v62 = 4 * v65 + 4;
        v71 = v61 - v63;
        if (v61 == v63)
          goto LABEL_79;
      }
      v72 = v71 - 4;
      if (v72 >= 0x2C)
      {
        v73 = v61 - &v69[v64];
        v3 = a3;
        if (v73 >= 0x20)
        {
          v74 = (v72 >> 2) + 1;
          v75 = 4 * (v74 & 0x7FFFFFFFFFFFFFF8);
          v76 = &v61[-v75];
          v70 = (_DWORD *)((char *)v70 - v75);
          v77 = &v69[4 * v65 - 16];
          v78 = v61 - 16;
          v79 = v74 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v80 = *(_OWORD *)v78;
            *(v77 - 1) = *((_OWORD *)v78 - 1);
            *v77 = v80;
            v77 -= 2;
            v78 -= 32;
            v79 -= 8;
          }
          while (v79);
          v61 = v76;
          if (v74 == (v74 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_85;
        }
      }
      else
      {
        v3 = a3;
      }
      do
      {
        v81 = *((_DWORD *)v61 - 1);
        v61 -= 4;
        *--v70 = v81;
      }
      while (v61 != v63);
LABEL_85:
      *(_QWORD *)(v3 + 24) = v70;
      *(_QWORD *)(v3 + 32) = v62;
      *(_QWORD *)(v3 + 40) = &v69[4 * v68];
      if (v63)
        operator delete(v63);
      v58 = v108;
      v18 = v110;
LABEL_88:
      *v113 = v62;
      v5 = a1;
      v82 = a1[69];
      v83 = v82 - (v56 + 4);
      if (v82 != v56 + 4)
        memmove(v56, v56 + 4, v82 - (v56 + 4));
      a1[69] = &v56[v83];
      v57 -= 4;
      if (++v55 == v58)
        break;
LABEL_91:
      ++v59;
    }
    while (v56 != v57);
  }
LABEL_92:
  v84 = v107;
  if (*v18 != *v113)
    v84 = 1;
  if ((v84 & 1) != 0)
  {
LABEL_97:
    sub_20F2B9678((uint64_t)(v5 + 19), (unsigned int **)v3);
    sub_20F2B9818((uint64_t)(v5 + 19), v18);
    sub_20F2B9678((uint64_t)(v5 + 47), (unsigned int **)v18);
    sub_20F2B9818((uint64_t)(v5 + 47), v18);
    sub_20F2B9678((uint64_t)(v5 + 5), (unsigned int **)v3);
    sub_20F2B9818((uint64_t)(v5 + 5), (unint64_t *)v3);
    v111 = v18;
    sub_20F2B9678((uint64_t)(v5 + 33), (unsigned int **)v18);
    sub_20F2B9818((uint64_t)(v5 + 33), (unint64_t *)v3);
    v85 = *v5;
    v86 = *(unsigned int **)v3;
    v87 = *(unsigned int **)(v3 + 8);
    if (*(unsigned int **)v3 == v87)
    {
      v97 = 0;
      v91 = *v5;
      v90 = *v5;
      v89 = *v5;
    }
    else
    {
      v88 = *((_DWORD *)v5 + 8);
      v89 = *v5;
      v90 = *v5;
      v91 = *v5;
      do
      {
        while (1)
        {
          v92 = v88 + 4 * *v86;
          v93 = &v85[8 * v92];
          if (v90 != v93)
            break;
          v90 += 32;
          if (++v86 == v87)
            goto LABEL_104;
        }
        v94 = &v85[8 * v92];
        if (v89 != v90)
        {
          v95 = v93 - v90;
          memmove(v91, v90, v93 - v90);
          v94 = &v91[v95];
          v85 = *v5;
        }
        v90 = &v85[8 * (v92 + 4)];
        v91 = v94;
        v89 = v93;
        ++v86;
      }
      while (v86 != v87);
LABEL_104:
      v96 = (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
      *((_DWORD *)v5 + 6) -= v96;
      v97 = 4 * v96;
    }
    v98 = *((_DWORD *)v5 + 9);
    *((_DWORD *)v5 + 9) = v98 - v97;
    v99 = (_DWORD *)*v111;
    v100 = (_DWORD *)*v113;
    if (*v111 != *v113)
    {
      do
      {
        while (1)
        {
          v101 = v98 + 6 * *v99;
          v102 = &v85[8 * v101];
          if (v90 != v102)
            break;
          v90 += 48;
          if (++v99 == v100)
            goto LABEL_113;
        }
        v103 = &v85[8 * v101];
        if (v89 != v90)
        {
          v104 = v102 - v90;
          memmove(v91, v90, v102 - v90);
          v103 = &v91[v104];
          v85 = *v5;
        }
        v90 = &v85[8 * (v101 + 6)];
        v91 = v103;
        v89 = v102;
        ++v99;
      }
      while (v99 != v100);
LABEL_113:
      v105 = (*v113 - *v111) >> 2;
      *((_DWORD *)v5 + 7) -= v105;
      v97 += 6 * v105;
    }
    if (v89 != v90)
    {
      v106 = &v85[8 * *((unsigned int *)v5 + 4)];
      if (v106 != v90)
        memmove(v91, v90, v106 - v90);
    }
    sub_20F20CEEC(v5, *((_DWORD *)v5 + 4) - v97, 1u);
  }
}

void sub_20F3D35E0(_QWORD *a1, uint64_t a2)
{
  int v2;
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v2 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (!v2)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v6 = (char *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 < v5)
    {
      *(_DWORD *)v6 = v4;
      v7 = (uint64_t)(v6 + 4);
LABEL_23:
      a1[4] = v7;
      return;
    }
    v8 = (char *)a1[3];
    v9 = (v6 - v8) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20E867F44();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
      v14 = &v13[4 * v9];
      v15 = &v13[4 * v12];
      *v14 = v4;
      v7 = (uint64_t)(v14 + 1);
      v16 = v6 - v8;
      if (v6 == v8)
        goto LABEL_21;
    }
    else
    {
      v13 = 0;
      v14 = (_DWORD *)(4 * v9);
      v15 = 0;
      *(_DWORD *)(4 * v9) = v4;
      v7 = 4 * v9 + 4;
      v16 = v6 - v8;
      if (v6 == v8)
      {
LABEL_21:
        a1[3] = v14;
        a1[4] = v7;
        a1[5] = v15;
        if (v8)
          operator delete(v8);
        goto LABEL_23;
      }
    }
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v6[-v19];
    v14 = (_DWORD *)((char *)v14 - v19);
    v21 = &v13[4 * v9 - 16];
    v22 = v6 - 16;
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    v6 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v14 = v25;
      }
      while (v6 != v8);
    }
    goto LABEL_21;
  }
}

_QWORD *sub_20F3D3778(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result[25];
  v2 = result[26];
  while (v1 != v2)
  {
    v3 = *(_QWORD *)(v1 + 736);
    if (*(_BYTE *)(v1 + 880) || (*(_BYTE *)(v3 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v1 + 744) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v3 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v1 + 744) + 8);
    }
    v1 += 888;
  }
  v4 = result[28];
  v5 = result[29];
  while (v4 != v5)
  {
    v6 = *(_QWORD *)(v4 + 736);
    if (*(_BYTE *)(v4 + 880) || (*(_BYTE *)(v6 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v4 + 744) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v6 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v4 + 744) + 8);
    }
    v4 += 888;
  }
  return result;
}

void sub_20F3D3834(uint64_t a1, _DWORD *a2, _DWORD *a3, _QWORD *a4, _DWORD *a5)
{
  _DWORD *v8;
  uint64_t v9;
  double v10;
  double *v11;
  long double v12;
  long double v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int64x2_t v17;
  int64x2_t *v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;

  if (a2 != a3)
  {
    v8 = a2;
    v9 = *(_QWORD *)(a1 + 8);
    do
    {
      v9 -= 16;
      do
      {
        v19 = *(_DWORD *)(v9 + 16);
        v9 += 16;
      }
      while (*v8 != v19);
      v20 = *(_QWORD *)(v9 + 8);
      v21 = atomic_load((unsigned __int8 *)&qword_254A541B8);
      if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A541B8))
      {
        qword_254A541B0 = 0x3E50000000000000;
        __cxa_guard_release(&qword_254A541B8);
      }
      v11 = (double *)(v20 + 32);
      v10 = *(double *)(v20 + 40);
      if (fabs(v10) <= *(double *)&qword_254A541B0 && fabs(*v11) <= *(double *)&qword_254A541B0
        || fabs(*(double *)(v20 + 72)) <= *(double *)&qword_254A541B0
        && fabs(*(double *)(v20 + 96)) <= *(double *)&qword_254A541B0)
      {
        v10 = -*(double *)(v20 + 56);
        v11 = (double *)(v20 + 64);
      }
      v12 = atan2(v10, *v11);
      v13 = cos(v12 * 0.5);
      v14.i64[0] = *(_QWORD *)(v20 + 120);
      v15 = *(int8x16_t *)(v20 + 104);
      v16 = vextq_s8(v15, v14, 8uLL);
      v17 = vdupq_lane_s64(v15.i64[0], 0);
      *(long double *)v17.i64 = v13;
      v18 = (int64x2_t *)(*a4 + 8 * *a5);
      *v18 = v17;
      v18[1] = (int64x2_t)v16;
      *a5 += 4;
      ++v8;
    }
    while (v8 != a3);
  }
}

void sub_20F3D3988(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  int v31;

  v2 = *(_BYTE **)a1;
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 >= 0x100uLL)
    goto LABEL_12;
  v3 = *(_BYTE **)(a1 + 8);
  v4 = (char *)operator new(0x100uLL);
  v5 = v3 - v2;
  v6 = &v4[(v3 - v2) & 0xFFFFFFFFFFFFFFFCLL];
  v7 = v6;
  if (v3 != v2)
  {
    if ((unint64_t)(v5 - 4) < 0x2C)
    {
      v7 = &v4[(v3 - v2) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_9:
        v16 = *((_DWORD *)v3 - 1);
        v3 -= 4;
        *((_DWORD *)v7 - 1) = v16;
        v7 -= 4;
      }
      while (v3 != v2);
      goto LABEL_10;
    }
    v7 = &v4[(v3 - v2) & 0xFFFFFFFFFFFFFFFCLL];
    if (v3 - v4 - (v5 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_9;
    v8 = v5 >> 2;
    v9 = ((unint64_t)(v5 - 4) >> 2) + 1;
    v10 = 4 * (v9 & 0x7FFFFFFFFFFFFFF8);
    v11 = &v3[-v10];
    v7 = &v6[-v10];
    v12 = &v4[4 * v8 - 16];
    v13 = (__int128 *)(v3 - 16);
    v14 = v9 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v15 = *v13;
      *((_OWORD *)v12 - 1) = *(v13 - 1);
      *(_OWORD *)v12 = v15;
      v12 -= 32;
      v13 -= 2;
      v14 -= 8;
    }
    while (v14);
    v3 = v11;
    if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_9;
  }
LABEL_10:
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v4 + 256;
  if (v2)
    operator delete(v2);
LABEL_12:
  v17 = *(_BYTE **)(a1 + 24);
  if (*(_QWORD *)(a1 + 40) - (_QWORD)v17 > 0xFFuLL)
    return;
  v18 = *(_BYTE **)(a1 + 32);
  v19 = (char *)operator new(0x100uLL);
  v20 = v18 - v17;
  v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
  v22 = v21;
  if (v18 != v17)
  {
    if ((unint64_t)(v20 - 4) >= 0x2C)
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
      if (v18 - v19 - (v20 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v23 = v20 >> 2;
        v24 = ((unint64_t)(v20 - 4) >> 2) + 1;
        v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        v26 = &v18[-v25];
        v22 = &v21[-v25];
        v27 = &v19[4 * v23 - 16];
        v28 = (__int128 *)(v18 - 16);
        v29 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v30 = *v28;
          *((_OWORD *)v27 - 1) = *(v28 - 1);
          *(_OWORD *)v27 = v30;
          v27 -= 32;
          v28 -= 2;
          v29 -= 8;
        }
        while (v29);
        v18 = v26;
        if (v24 == (v24 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_21;
      }
    }
    else
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v31 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v22 - 1) = v31;
      v22 -= 4;
    }
    while (v18 != v17);
  }
LABEL_21:
  *(_QWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 32) = v21;
  *(_QWORD *)(a1 + 40) = v19 + 256;
  if (v17)
    operator delete(v17);
}

void sub_20F3D3B68(uint64_t a1)
{
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t j;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t k;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t m;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v2 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v5 = (uint64_t *)(*(_QWORD *)(a1 + 200) + 24 * i);
      v4 = *v5;
      v6 = v5[1];
      if (*v5 != v6)
      {
        v7 = *(_QWORD *)(a1 + 160);
        v8 = *(_QWORD *)(a1 + 168);
        v9 = *(_QWORD *)(a1 + 192);
        do
        {
          v10 = ((v8 - v7) << 6) - 1;
          if (v8 == v7)
            v10 = 0;
          v11 = *(_QWORD *)(a1 + 184) + v9;
          if (v10 == v11)
          {
            sub_20EDB36DC(a1 + 152);
            v7 = *(_QWORD *)(a1 + 160);
            v8 = *(_QWORD *)(a1 + 168);
            v11 = *(_QWORD *)(a1 + 192) + *(_QWORD *)(a1 + 184);
          }
          *(_QWORD *)(*(_QWORD *)(v7 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF)) = *(_QWORD *)(v4 + 8);
          v9 = *(_QWORD *)(a1 + 192) + 1;
          *(_QWORD *)(a1 + 192) = v9;
          v4 += 16;
        }
        while (v4 != v6);
        v4 = *v5;
        v2 = *(unsigned int *)(a1 + 124);
      }
      v5[1] = v4;
    }
  }
  v12 = *(unsigned int *)(a1 + 348);
  if ((_DWORD)v12)
  {
    for (j = 0; j < v12; ++j)
    {
      v15 = (uint64_t *)(*(_QWORD *)(a1 + 424) + 24 * j);
      v14 = *v15;
      v16 = v15[1];
      if (*v15 != v16)
      {
        v17 = *(_QWORD *)(a1 + 384);
        v18 = *(_QWORD *)(a1 + 392);
        v19 = *(_QWORD *)(a1 + 416);
        do
        {
          v20 = ((v18 - v17) << 6) - 1;
          if (v18 == v17)
            v20 = 0;
          v21 = *(_QWORD *)(a1 + 408) + v19;
          if (v20 == v21)
          {
            sub_20EDB36DC(a1 + 376);
            v17 = *(_QWORD *)(a1 + 384);
            v18 = *(_QWORD *)(a1 + 392);
            v21 = *(_QWORD *)(a1 + 416) + *(_QWORD *)(a1 + 408);
          }
          *(_QWORD *)(*(_QWORD *)(v17 + ((v21 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v21 & 0x1FF)) = *(_QWORD *)(v14 + 8);
          v19 = *(_QWORD *)(a1 + 416) + 1;
          *(_QWORD *)(a1 + 416) = v19;
          v14 += 16;
        }
        while (v14 != v16);
        v14 = *v15;
        v12 = *(unsigned int *)(a1 + 348);
      }
      v15[1] = v14;
    }
  }
  v22 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v22)
  {
    for (k = 0; k < v22; ++k)
    {
      v25 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 24 * k);
      v24 = *v25;
      v26 = v25[1];
      if (*v25 != v26)
      {
        v27 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v29 = *(_QWORD *)(a1 + 80);
        do
        {
          v30 = ((v28 - v27) << 6) - 1;
          if (v28 == v27)
            v30 = 0;
          v31 = *(_QWORD *)(a1 + 72) + v29;
          if (v30 == v31)
          {
            sub_20EDB36DC(a1 + 40);
            v27 = *(_QWORD *)(a1 + 48);
            v28 = *(_QWORD *)(a1 + 56);
            v31 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v27 + ((v31 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v31 & 0x1FF)) = *(_QWORD *)(v24 + 8);
          v29 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v29;
          v24 += 16;
        }
        while (v24 != v26);
        v24 = *v25;
        v22 = *(unsigned int *)(a1 + 12);
      }
      v25[1] = v24;
    }
  }
  v32 = *(unsigned int *)(a1 + 236);
  if ((_DWORD)v32)
  {
    for (m = 0; m < v32; ++m)
    {
      v35 = (uint64_t *)(*(_QWORD *)(a1 + 312) + 24 * m);
      v34 = *v35;
      v36 = v35[1];
      if (*v35 != v36)
      {
        v37 = *(_QWORD *)(a1 + 272);
        v38 = *(_QWORD *)(a1 + 280);
        v39 = *(_QWORD *)(a1 + 304);
        do
        {
          v40 = ((v38 - v37) << 6) - 1;
          if (v38 == v37)
            v40 = 0;
          v41 = *(_QWORD *)(a1 + 296) + v39;
          if (v40 == v41)
          {
            sub_20EDB36DC(a1 + 264);
            v37 = *(_QWORD *)(a1 + 272);
            v38 = *(_QWORD *)(a1 + 280);
            v41 = *(_QWORD *)(a1 + 304) + *(_QWORD *)(a1 + 296);
          }
          *(_QWORD *)(*(_QWORD *)(v37 + ((v41 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v41 & 0x1FF)) = *(_QWORD *)(v34 + 8);
          v39 = *(_QWORD *)(a1 + 304) + 1;
          *(_QWORD *)(a1 + 304) = v39;
          v34 += 16;
        }
        while (v34 != v36);
        v34 = *v35;
        v32 = *(unsigned int *)(a1 + 236);
      }
      v35[1] = v34;
    }
  }
}

_QWORD *sub_20F3D3E8C(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned int **a4)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  char *v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  unsigned int *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t *v44;
  uint64_t v45;
  unsigned int *v46;
  __int128 v47;

  v5 = *a4;
  v4 = a4[1];
  if (*a4 != v4 && *a3 != a3[1])
  {
    v43 = a3;
    v44 = result + 2;
    v41 = a4[1];
    v42 = a2;
    v40 = result;
    while (1)
    {
      v7 = (unsigned int *)*a3;
      v6 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v6)
        break;
LABEL_4:
      v5 += 2;
      if (v5 == v4)
        return result;
    }
    v8 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 24 * *v5);
    v9 = result[11] + 24 * v5[1];
    v11 = *v8;
    v10 = v8[1];
    while (1)
    {
      if (v11 == v10)
        goto LABEL_4;
      v12 = *v7;
      while (*(_DWORD *)v11 != v12)
      {
        if (*(_DWORD *)v11 > v12)
          goto LABEL_31;
        v11 += 16;
        if (v11 == v10)
          goto LABEL_4;
      }
      v13 = *(_QWORD *)(v11 + 8);
      v14 = v7[1];
      v15 = *(char **)v9;
      v16 = *(char **)(v9 + 8);
      if (*(char **)v9 != v16)
      {
        while (*(_DWORD *)v15 < v14)
        {
          v15 += 16;
          if (v15 == v16)
            goto LABEL_22;
        }
      }
      if (v15 == v16)
        goto LABEL_22;
      if (*(_DWORD *)v15 != v14)
        break;
      v17 = (__int128 *)(*v44 + 8 * *((_QWORD *)v15 + 1));
      v18 = (__int128 *)(*(_QWORD *)(a2 + 16) + 8 * v13);
      if (v18 != v17)
        goto LABEL_30;
LABEL_31:
      if (v11 != v10)
      {
        v7 += 2;
        if (v7 != v6)
          continue;
      }
      goto LABEL_4;
    }
    v16 = v15;
LABEL_22:
    v19 = result[10];
    v45 = *(_QWORD *)(a2 + 16);
    v46 = v6;
    if (v19)
    {
      v21 = result[6];
      v20 = result[7];
      v22 = ((v20 - v21) << 6) - 1;
      v23 = result[9];
      if (v20 == v21)
        v22 = 0;
      v17 = (__int128 *)(result[2]
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v21 + (((unint64_t)(v23 + v19 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v23 + v19 - 1) & 0x1FF)));
      result[10] = v19 - 1;
      if ((unint64_t)(v22 - (v19 + v23) + 1) >= 0x400)
      {
        v24 = result;
        operator delete(*(void **)(v20 - 8));
        v24[7] -= 8;
      }
      v25 = v44;
    }
    else
    {
      v26 = (void *)result[3];
      *(_QWORD *)&v47 = 0;
      v25 = v44;
      v27 = result;
      sub_20F1C5A3C(v44, v26, 0x18uLL, (uint64_t *)&v47);
      v17 = (__int128 *)(v27[3] - 192);
    }
    v28 = (uint64_t)((uint64_t)v17 - *v25) >> 3;
    LODWORD(v47) = v14;
    *((_QWORD *)&v47 + 1) = v28;
    sub_20F2B4654((char **)v9, v16, &v47);
    a2 = v42;
    a3 = v43;
    result = v40;
    v4 = v41;
    v6 = v46;
    v18 = (__int128 *)(v45 + 8 * v13);
    if (v18 == v17)
      goto LABEL_31;
LABEL_30:
    v29 = *v18;
    v30 = v18[1];
    v31 = v18[2];
    v32 = v18[3];
    v33 = v18[4];
    v34 = v18[5];
    v35 = v18[6];
    v36 = v18[7];
    v37 = v18[8];
    v38 = v18[9];
    v39 = v18[11];
    v17[10] = v18[10];
    v17[11] = v39;
    v17[8] = v37;
    v17[9] = v38;
    v17[6] = v35;
    v17[7] = v36;
    v17[4] = v33;
    v17[5] = v34;
    v17[2] = v31;
    v17[3] = v32;
    *v17 = v29;
    v17[1] = v30;
    goto LABEL_31;
  }
  return result;
}

_QWORD *sub_20F3D40F4(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned int **a4)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  char *v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  unsigned int *v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t *v50;
  uint64_t v51;
  unsigned int *v52;
  __int128 v53;

  v5 = *a4;
  v4 = a4[1];
  if (*a4 != v4 && *a3 != a3[1])
  {
    v49 = a3;
    v50 = result + 2;
    v47 = a4[1];
    v48 = a2;
    v46 = result;
    while (1)
    {
      v7 = (unsigned int *)*a3;
      v6 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v6)
        break;
LABEL_4:
      v5 += 2;
      if (v5 == v4)
        return result;
    }
    v8 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 24 * *v5);
    v9 = result[11] + 24 * v5[1];
    v11 = *v8;
    v10 = v8[1];
    while (1)
    {
      if (v11 == v10)
        goto LABEL_4;
      v12 = *v7;
      while (*(_DWORD *)v11 != v12)
      {
        if (*(_DWORD *)v11 > v12)
          goto LABEL_31;
        v11 += 16;
        if (v11 == v10)
          goto LABEL_4;
      }
      v13 = *(_QWORD *)(v11 + 8);
      v14 = v7[1];
      v15 = *(char **)v9;
      v16 = *(char **)(v9 + 8);
      if (*(char **)v9 != v16)
      {
        while (*(_DWORD *)v15 < v14)
        {
          v15 += 16;
          if (v15 == v16)
            goto LABEL_22;
        }
      }
      if (v15 == v16)
        goto LABEL_22;
      if (*(_DWORD *)v15 != v14)
        break;
      v17 = (__int128 *)(*v50 + 8 * *((_QWORD *)v15 + 1));
      v18 = (__int128 *)(*(_QWORD *)(a2 + 16) + 8 * v13);
      if (v18 != v17)
        goto LABEL_30;
LABEL_31:
      if (v11 != v10)
      {
        v7 += 2;
        if (v7 != v6)
          continue;
      }
      goto LABEL_4;
    }
    v16 = v15;
LABEL_22:
    v19 = result[10];
    v51 = *(_QWORD *)(a2 + 16);
    v52 = v6;
    if (v19)
    {
      v21 = result[6];
      v20 = result[7];
      v22 = ((v20 - v21) << 6) - 1;
      v23 = result[9];
      if (v20 == v21)
        v22 = 0;
      v17 = (__int128 *)(result[2]
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v21 + (((unint64_t)(v23 + v19 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v23 + v19 - 1) & 0x1FF)));
      result[10] = v19 - 1;
      if ((unint64_t)(v22 - (v19 + v23) + 1) >= 0x400)
      {
        v24 = result;
        operator delete(*(void **)(v20 - 8));
        v24[7] -= 8;
      }
      v25 = v50;
    }
    else
    {
      v26 = (void *)result[3];
      *(_QWORD *)&v53 = 0;
      v25 = v50;
      v27 = result;
      sub_20F1C5A3C(v50, v26, 0x24uLL, (uint64_t *)&v53);
      v17 = (__int128 *)(v27[3] - 288);
    }
    v28 = (uint64_t)((uint64_t)v17 - *v25) >> 3;
    LODWORD(v53) = v14;
    *((_QWORD *)&v53 + 1) = v28;
    sub_20F2B4654((char **)v9, v16, &v53);
    a2 = v48;
    a3 = v49;
    result = v46;
    v4 = v47;
    v6 = v52;
    v18 = (__int128 *)(v51 + 8 * v13);
    if (v18 == v17)
      goto LABEL_31;
LABEL_30:
    v29 = *v18;
    v30 = v18[1];
    v31 = v18[2];
    v32 = v18[3];
    v33 = v18[4];
    v34 = v18[5];
    v35 = v18[6];
    v36 = v18[7];
    v37 = v18[8];
    v38 = v18[9];
    v39 = v18[10];
    v40 = v18[11];
    v41 = v18[12];
    v42 = v18[13];
    v43 = v18[14];
    v44 = v18[15];
    v45 = v18[17];
    v17[16] = v18[16];
    v17[17] = v45;
    v17[14] = v43;
    v17[15] = v44;
    v17[12] = v41;
    v17[13] = v42;
    v17[10] = v39;
    v17[11] = v40;
    v17[8] = v37;
    v17[9] = v38;
    v17[6] = v35;
    v17[7] = v36;
    v17[4] = v33;
    v17[5] = v34;
    v17[2] = v31;
    v17[3] = v32;
    *v17 = v29;
    v17[1] = v30;
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_20F3D4374(unint64_t *a1, char **a2, int a3, char *a4)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;

  v8 = a1[10];
  v9 = a1 + 2;
  if (v8)
  {
    v11 = a1[6];
    v10 = a1[7];
    v12 = ((v10 - v11) << 6) - 1;
    v13 = a1[9];
    if (v10 == v11)
      v12 = 0;
    v14 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v11 + (((v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v12 - (v8 + v13) + 1 >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      a1[7] -= 8;
    }
  }
  else
  {
    v15 = (void *)a1[3];
    *(_QWORD *)&v18 = 0;
    sub_20F1C5A3C(a1 + 2, v15, 0x24uLL, (uint64_t *)&v18);
    v14 = a1[3] - 288;
  }
  v16 = (v14 - *v9) >> 3;
  LODWORD(v18) = a3;
  *((_QWORD *)&v18 + 1) = v16;
  sub_20F2B4654(a2, a4, &v18);
  return v14;
}

_QWORD *sub_20F3D4478(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned int **a4)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  char *v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  unsigned int *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;

  v5 = *a4;
  v4 = a4[1];
  if (*a4 != v4 && *a3 != a3[1])
  {
    v38 = a3;
    v39 = result + 2;
    v36 = a4[1];
    v37 = a2;
    v35 = result;
    while (1)
    {
      v7 = (unsigned int *)*a3;
      v6 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v6)
        break;
LABEL_4:
      v5 += 2;
      if (v5 == v4)
        return result;
    }
    v8 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 24 * *v5);
    v9 = result[11] + 24 * v5[1];
    v11 = *v8;
    v10 = v8[1];
    while (1)
    {
      if (v11 == v10)
        goto LABEL_4;
      v12 = *v7;
      while (*(_DWORD *)v11 != v12)
      {
        if (*(_DWORD *)v11 > v12)
          goto LABEL_31;
        v11 += 16;
        if (v11 == v10)
          goto LABEL_4;
      }
      v13 = v7[1];
      v14 = *(char **)v9;
      v15 = *(char **)(v9 + 8);
      if (*(char **)v9 != v15)
      {
        while (*(_DWORD *)v14 < v13)
        {
          v14 += 16;
          if (v14 == v15)
            goto LABEL_22;
        }
      }
      if (v14 == v15)
        goto LABEL_22;
      if (*(_DWORD *)v14 != v13)
        break;
      v16 = (__int128 *)(*v39 + 8 * *((_QWORD *)v14 + 1));
      v17 = (__int128 *)(*(_QWORD *)(a2 + 16) + 8 * *(_QWORD *)(v11 + 8));
      if (v17 != v16)
        goto LABEL_30;
LABEL_31:
      if (v11 != v10)
      {
        v7 += 2;
        if (v7 != v6)
          continue;
      }
      goto LABEL_4;
    }
    v15 = v14;
LABEL_22:
    v18 = result[10];
    v40 = *(_QWORD *)(a2 + 16);
    v41 = *(_QWORD *)(v11 + 8);
    if (v18)
    {
      v20 = result[6];
      v19 = result[7];
      v21 = ((v19 - v20) << 6) - 1;
      v22 = result[9];
      if (v19 == v20)
        v21 = 0;
      v16 = (__int128 *)(result[2]
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v20 + (((unint64_t)(v22 + v18 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v22 + v18 - 1) & 0x1FF)));
      result[10] = v18 - 1;
      if ((unint64_t)(v21 - (v18 + v22) + 1) >= 0x400)
      {
        v23 = result;
        operator delete(*(void **)(v19 - 8));
        v23[7] -= 8;
      }
      v24 = v39;
    }
    else
    {
      v25 = (void *)result[3];
      *(_QWORD *)&v42 = 0;
      v24 = v39;
      v26 = result;
      sub_20F1C5A3C(v39, v25, 0x10uLL, (uint64_t *)&v42);
      v16 = (__int128 *)(v26[3] - 128);
    }
    v27 = (uint64_t)((uint64_t)v16 - *v24) >> 3;
    LODWORD(v42) = v13;
    *((_QWORD *)&v42 + 1) = v27;
    sub_20F2B4654((char **)v9, v15, &v42);
    a2 = v37;
    a3 = v38;
    result = v35;
    v4 = v36;
    v17 = (__int128 *)(v40 + 8 * v41);
    if (v17 == v16)
      goto LABEL_31;
LABEL_30:
    v29 = *v17;
    v28 = v17[1];
    v31 = v17[2];
    v30 = v17[3];
    v33 = v17[4];
    v32 = v17[5];
    v34 = v17[7];
    v16[6] = v17[6];
    v16[7] = v34;
    v16[4] = v33;
    v16[5] = v32;
    v16[2] = v31;
    v16[3] = v30;
    *v16 = v29;
    v16[1] = v28;
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_20F3D46D0(unint64_t *a1, char **a2, int a3, char *a4)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;

  v8 = a1[10];
  v9 = a1 + 2;
  if (v8)
  {
    v11 = a1[6];
    v10 = a1[7];
    v12 = ((v10 - v11) << 6) - 1;
    v13 = a1[9];
    if (v10 == v11)
      v12 = 0;
    v14 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v11 + (((v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v12 - (v8 + v13) + 1 >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      a1[7] -= 8;
    }
  }
  else
  {
    v15 = (void *)a1[3];
    *(_QWORD *)&v18 = 0;
    sub_20F1C5A3C(a1 + 2, v15, 0x10uLL, (uint64_t *)&v18);
    v14 = a1[3] - 128;
  }
  v16 = (v14 - *v9) >> 3;
  LODWORD(v18) = a3;
  *((_QWORD *)&v18 + 1) = v16;
  sub_20F2B4654(a2, a4, &v18);
  return v14;
}

void sub_20F3D47D4(_QWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _DWORD *v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  char **v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _DWORD *v44;
  _DWORD *v45;
  unsigned int v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  unint64_t v70;
  int v71;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  unint64_t v78;

  v5 = *(char **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v6 = a1[1];
  if (*a1 != v6)
  {
    v9 = v6 - *a1;
    v10 = v9 >> 2;
    if (v9 >> 2 > (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 16) - (_QWORD)v5) >> 3))
    {
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFDLL)
        goto LABEL_72;
      v11 = (char *)operator new(2 * v9);
      *(_QWORD *)a4 = v11;
      *(_QWORD *)(a4 + 8) = v11;
      *(_QWORD *)(a4 + 16) = &v11[8 * v10];
      if (v5)
        operator delete(v5);
    }
    v13 = *(_DWORD **)a2;
    v12 = *(_DWORD **)(a2 + 8);
    if (*(_DWORD **)a2 != v12)
    {
      v14 = 0;
      v15 = 0;
      v17 = (_DWORD *)*a1;
      v16 = (_DWORD *)a1[1];
      v74 = v16;
      v76 = v12;
      while (1)
      {
        if (*v13 == *v17)
        {
          v20 = *(char **)(a4 + 8);
          v19 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v20 < v19)
          {
            *(_QWORD *)v20 = v14 | (unint64_t)(v15 << 32);
            v18 = v20 + 8;
          }
          else
          {
            v21 = *(char **)a4;
            v22 = (uint64_t)&v20[-*(_QWORD *)a4];
            v23 = v22 >> 3;
            v24 = (v22 >> 3) + 1;
            if (v24 >> 61)
              goto LABEL_72;
            v25 = v19 - (_QWORD)v21;
            if (v25 >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            v78 = v24;
            if (v24)
            {
              if (v24 >> 61)
LABEL_70:
                sub_20E877A38();
              v26 = operator new(8 * v24);
            }
            else
            {
              v26 = 0;
            }
            v27 = (unint64_t *)&v26[8 * v23];
            *v27 = v14 | (unint64_t)(v15 << 32);
            v18 = v27 + 1;
            if (v20 != v21)
            {
              v28 = v20 - v21 - 8;
              if (v28 < 0x58)
                goto LABEL_75;
              if ((unint64_t)(v20 - &v26[v22]) < 0x20)
                goto LABEL_75;
              v29 = (v28 >> 3) + 1;
              v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
              v31 = &v20[-v30];
              v27 = (unint64_t *)((char *)v27 - v30);
              v32 = &v26[8 * v23 - 16];
              v33 = v20 - 16;
              v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v35 = *(_OWORD *)v33;
                *(v32 - 1) = *((_OWORD *)v33 - 1);
                *v32 = v35;
                v32 -= 2;
                v33 -= 32;
                v34 -= 4;
              }
              while (v34);
              v20 = v31;
              if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_75:
                do
                {
                  v36 = *((_QWORD *)v20 - 1);
                  v20 -= 8;
                  *--v27 = v36;
                }
                while (v20 != v21);
              }
              v20 = *(char **)a4;
            }
            *(_QWORD *)a4 = v27;
            *(_QWORD *)(a4 + 8) = v18;
            *(_QWORD *)(a4 + 16) = &v26[8 * v78];
            if (v20)
              operator delete(v20);
            v16 = v74;
            v12 = v76;
          }
          *(_QWORD *)(a4 + 8) = v18;
          v15 = (*a3 + v15);
          if (++v17 == v16)
            goto LABEL_34;
        }
        ++v13;
        ++v14;
        if (v13 == v12)
          goto LABEL_34;
      }
    }
  }
  v15 = 0;
LABEL_34:
  v37 = (char **)(a4 + 24);
  v38 = *(void **)(a4 + 24);
  *(_QWORD *)(a4 + 32) = v38;
  v39 = a1[3];
  v40 = a1[4];
  if (v39 == v40)
    return;
  v41 = v40 - v39;
  v42 = v41 >> 2;
  if (v41 >> 2 > (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 40) - (_QWORD)v38) >> 3))
  {
    if ((unint64_t)v41 <= 0x7FFFFFFFFFFFFFFCLL)
    {
      v43 = (char *)operator new(2 * v41);
      *(_QWORD *)(a4 + 24) = v43;
      *(_QWORD *)(a4 + 32) = v43;
      *(_QWORD *)(a4 + 40) = &v43[8 * v42];
      if (v38)
        operator delete(v38);
      goto LABEL_39;
    }
LABEL_72:
    sub_20E92CED8();
  }
LABEL_39:
  v45 = *(_DWORD **)(a2 + 24);
  v44 = *(_DWORD **)(a2 + 32);
  if (v45 != v44)
  {
    v46 = 0;
    v48 = (_DWORD *)a1[3];
    v47 = (_DWORD *)a1[4];
    v49 = v15;
    v75 = v47;
    v77 = *(_DWORD **)(a2 + 32);
    while (1)
    {
      if (*v45 != *v48)
        goto LABEL_43;
      v51 = *(char **)(a4 + 32);
      v50 = *(_QWORD *)(a4 + 40);
      if ((unint64_t)v51 >= v50)
        break;
      *(_QWORD *)v51 = v46 | (unint64_t)(v49 << 32);
      *(_QWORD *)(a4 + 32) = v51 + 8;
      if (++v48 == v47)
        return;
LABEL_42:
      v49 = (a3[1] + v49);
LABEL_43:
      ++v45;
      ++v46;
      if (v45 == v44)
        return;
    }
    v52 = *v37;
    v53 = v51 - *v37;
    v54 = v53 >> 3;
    v55 = (v53 >> 3) + 1;
    if (v55 >> 61)
      sub_20E92CED8();
    v56 = v50 - (_QWORD)v52;
    if (v56 >> 2 > v55)
      v55 = v56 >> 2;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
      v57 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    if (v57)
    {
      if (v57 >> 61)
        goto LABEL_70;
      v58 = v49;
      v59 = operator new(8 * v57);
      v49 = v58;
    }
    else
    {
      v59 = 0;
    }
    v60 = (unint64_t *)&v59[8 * v54];
    *v60 = v46 | (unint64_t)(v49 << 32);
    v61 = v60 + 1;
    if (v51 == v52)
    {
      v37 = (char **)(a4 + 24);
      *(_QWORD *)(a4 + 24) = v60;
      *(_QWORD *)(a4 + 32) = v61;
      *(_QWORD *)(a4 + 40) = &v59[8 * v57];
      if (v51)
      {
LABEL_64:
        v71 = v49;
        operator delete(v51);
        LODWORD(v49) = v71;
      }
    }
    else
    {
      v62 = v51 - v52 - 8;
      if (v62 < 0x58)
        goto LABEL_76;
      if ((unint64_t)(v51 - &v59[v53]) < 0x20)
        goto LABEL_76;
      v63 = (v62 >> 3) + 1;
      v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
      v65 = &v51[-v64];
      v60 = (unint64_t *)((char *)v60 - v64);
      v66 = &v59[8 * v54 - 16];
      v67 = (__int128 *)(v51 - 16);
      v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v69 = *v67;
        *(v66 - 1) = *(v67 - 1);
        *v66 = v69;
        v66 -= 2;
        v67 -= 2;
        v68 -= 4;
      }
      while (v68);
      v51 = v65;
      if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_76:
        do
        {
          v70 = *((_QWORD *)v51 - 1);
          v51 -= 8;
          *--v60 = v70;
        }
        while (v51 != v52);
      }
      v37 = (char **)(a4 + 24);
      v51 = *(char **)(a4 + 24);
      *(_QWORD *)(a4 + 24) = v60;
      *(_QWORD *)(a4 + 32) = v61;
      *(_QWORD *)(a4 + 40) = &v59[8 * v57];
      if (v51)
        goto LABEL_64;
    }
    v47 = v75;
    v44 = v77;
    *(_QWORD *)(a4 + 32) = v61;
    if (++v48 == v75)
      return;
    goto LABEL_42;
  }
}

void sub_20F3D4C5C(_QWORD *a1, uint64_t a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  unsigned int *v39;
  unsigned int *i;
  unsigned int *v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int8x16_t *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  uint64_t v69;
  int8x16_t *v70;
  int8x16_t *v71;
  int8x16_t *v72;
  int8x16_t *v73;
  int8x16_t *v74;
  int8x16_t *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  __int128 *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  _OWORD *v97;
  _OWORD *v98;
  unsigned int *v99;
  unsigned int *j;
  unsigned int *v101;
  unsigned int *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  int8x16_t *v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  uint64_t v119;
  int8x16_t *v120;
  int8x16_t *v121;
  int8x16_t *v122;
  int8x16_t *v123;
  int8x16_t *v124;
  int8x16_t *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;

  v8 = (((unint64_t)((char *)a4[1] - (char *)*a4) >> 1) & 0xFFFFFFFC)
     + 6 * ((unint64_t)((char *)a4[4] - (char *)a4[3]) >> 3);
  v9 = (((unint64_t)((char *)a3[1] - (char *)*a3) >> 1) & 0xFFFFFFFC)
     + 6 * ((unint64_t)((char *)a3[4] - (char *)a3[3]) >> 3);
  *(_DWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 20) = v8;
  v10 = v8 * (unint64_t)v9;
  if (*(_QWORD *)(a2 + 8) < v10)
  {
    if (*(_QWORD *)a2)
      MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v10 & 0x1FFFFFFFFFFFFFFCLL;
    *(_QWORD *)a2 = operator new(8 * v10, (std::align_val_t)0x20uLL);
    v9 = *(_DWORD *)(a2 + 16);
    v8 = *(_DWORD *)(a2 + 20);
  }
  v11 = v8 * v9;
  if (v11)
    bzero(*(void **)a2, 8 * v11);
  v12 = a3[3];
  v13 = a3[4];
  if (v12 != v13)
  {
    v14 = *a4;
    v15 = a4[1];
    if (*a4 != v15)
    {
      do
      {
        v16 = a3[3];
        v17 = a3[4];
        if (v16 != v17)
        {
          v19 = *(_QWORD *)(a1[25] + 24 * *v14);
          v18 = *(_QWORD *)(a1[25] + 24 * *v14 + 8);
          do
          {
            if (v19 == v18)
              break;
            v20 = *v16;
            while (*(_DWORD *)v19 < v20)
            {
              v19 += 16;
              if (v19 == v18)
                goto LABEL_10;
            }
            if (*(_DWORD *)v19 == v20)
            {
              v21 = (int8x16_t *)(a1[16] + 8 * *(_QWORD *)(v19 + 8));
              if (v21 == *(int8x16_t **)a2)
              {
                v31 = v21[10];
                v30 = v21[11];
                v29 = v21[8];
                v28 = v21[9];
                v27 = v21[6];
                v26 = v21[7];
                v25 = v21[4];
                v24 = v21[5];
                v23 = v21[2];
                v22 = v21[3];
              }
              else
              {
                v23 = v21[2];
                v22 = v21[3];
                v25 = v21[4];
                v24 = v21[5];
                v27 = v21[6];
                v26 = v21[7];
                v29 = v21[8];
                v28 = v21[9];
                v31 = v21[10];
                v30 = v21[11];
              }
              v33 = *v21;
              v32 = v21[1];
              v34 = *(unsigned int *)(a2 + 16);
              v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
              v32.i64[1] = vextq_s8(v32, v32, 8uLL).u64[0];
              v33.i64[1] = vextq_s8(v33, v33, 8uLL).u64[0];
              v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
              v25.i64[1] = vextq_s8(v25, v25, 8uLL).u64[0];
              v22.i64[1] = vextq_s8(v22, v22, 8uLL).u64[0];
              v29.i64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
              v26.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
              v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
              v30.i64[1] = vextq_s8(v30, v30, 8uLL).u64[0];
              v31.i64[1] = vextq_s8(v31, v31, 8uLL).u64[0];
              v35 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v16[1] + (_DWORD)v34 * v14[1]));
              v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
              *v35 = v33;
              v35[1] = v32;
              v35[2] = v23;
              v36 = (int8x16_t *)((char *)v35 + 8 * v34);
              *v36 = v22;
              v36[1] = v25;
              v36[2] = v24;
              v37 = &v35[v34];
              *v37 = v27;
              v37[1] = v26;
              v37[2] = v29;
              v38 = (int8x16_t *)((char *)v35 + 24 * v34);
              *v38 = v28;
              v38[1] = v31;
              v38[2] = v30;
            }
            if (v19 == v18)
              break;
            v16 += 2;
          }
          while (v16 != v17);
        }
LABEL_10:
        v14 += 2;
      }
      while (v14 != v15);
      v12 = a3[3];
      v13 = a3[4];
    }
    if (v12 != v13)
    {
      v39 = a4[3];
      for (i = a4[4]; v39 != i; v39 += 2)
      {
        v41 = a3[3];
        v42 = a3[4];
        if (v41 != v42)
        {
          v44 = *(_QWORD *)(a1[53] + 24 * *v39);
          v43 = *(_QWORD *)(a1[53] + 24 * *v39 + 8);
          do
          {
            if (v44 == v43)
              break;
            v45 = *v41;
            while (*(_DWORD *)v44 < v45)
            {
              v44 += 16;
              if (v44 == v43)
                goto LABEL_30;
            }
            if (*(_DWORD *)v44 == v45)
            {
              v46 = (int8x16_t *)(a1[44] + 8 * *(_QWORD *)(v44 + 8));
              if (v46 == *(int8x16_t **)a2)
              {
                v56 = v46[16];
                v55 = v46[17];
                v54 = v46[14];
                v53 = v46[15];
                v52 = v46[12];
                v51 = v46[13];
                v50 = v46[10];
                v49 = v46[11];
                v62 = v46[8];
                v61 = v46[9];
                v128 = vextq_s8(v56, v56, 8uLL).u64[0];
                v129 = vextq_s8(v55, v55, 8uLL).u64[0];
                v57 = vextq_s8(v54, v54, 8uLL).u64[0];
                v58 = vextq_s8(v51, v51, 8uLL).u64[0];
                v59 = vextq_s8(v52, v52, 8uLL).u64[0];
                v126 = vextq_s8(v49, v49, 8uLL).u64[0];
                v127 = vextq_s8(v53, v53, 8uLL).u64[0];
                v60 = vextq_s8(v50, v50, 8uLL).u64[0];
                v48 = v46[6];
                v47 = v46[7];
              }
              else
              {
                v48 = v46[6];
                v47 = v46[7];
                v50 = v46[10];
                v49 = v46[11];
                v52 = v46[12];
                v51 = v46[13];
                v54 = v46[14];
                v53 = v46[15];
                v56 = v46[16];
                v55 = v46[17];
                v128 = vextq_s8(v56, v56, 8uLL).u64[0];
                v129 = vextq_s8(v55, v55, 8uLL).u64[0];
                v57 = vextq_s8(v54, v54, 8uLL).u64[0];
                v58 = vextq_s8(v51, v51, 8uLL).u64[0];
                v59 = vextq_s8(v52, v52, 8uLL).u64[0];
                v126 = vextq_s8(v49, v49, 8uLL).u64[0];
                v127 = vextq_s8(v53, v53, 8uLL).u64[0];
                v60 = vextq_s8(v50, v50, 8uLL).u64[0];
                v62 = v46[8];
                v61 = v46[9];
              }
              v64 = v46[4];
              v63 = v46[5];
              v66 = v46[2];
              v65 = v46[3];
              v68 = *v46;
              v67 = v46[1];
              v54.i64[1] = v57;
              v51.i64[1] = v58;
              v52.i64[1] = v59;
              v66.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
              v69 = *(unsigned int *)(a2 + 16);
              v67.i64[1] = vextq_s8(v67, v67, 8uLL).u64[0];
              v68.i64[1] = vextq_s8(v68, v68, 8uLL).u64[0];
              v63.i64[1] = vextq_s8(v63, v63, 8uLL).u64[0];
              v64.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
              v65.i64[1] = vextq_s8(v65, v65, 8uLL).u64[0];
              v62.i64[1] = vextq_s8(v62, v62, 8uLL).u64[0];
              v47.i64[1] = vextq_s8(v47, v47, 8uLL).u64[0];
              v48.i64[1] = vextq_s8(v48, v48, 8uLL).u64[0];
              v49.i64[1] = v126;
              v50.i64[1] = v60;
              v61.i64[1] = vextq_s8(v61, v61, 8uLL).u64[0];
              v55.i64[1] = v129;
              v56.i64[1] = v128;
              v53.i64[1] = v127;
              v70 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v41[1] + (_DWORD)v69 * v39[1]));
              *v70 = v68;
              v70[1] = v67;
              v70[2] = v66;
              v71 = (int8x16_t *)((char *)v70 + 8 * v69);
              *v71 = v65;
              v71[1] = v64;
              v71[2] = v63;
              v72 = &v70[v69];
              *v72 = v48;
              v72[1] = v47;
              v72[2] = v62;
              v73 = (int8x16_t *)((char *)v70 + 24 * v69);
              *v73 = v61;
              v73[1] = v50;
              v73[2] = v49;
              v74 = &v70[2 * v69];
              *v74 = v52;
              v74[1] = v51;
              v74[2] = v54;
              v75 = (int8x16_t *)((char *)v70 + 40 * v69);
              *v75 = v53;
              v75[1] = v56;
              v75[2] = v55;
            }
            if (v44 == v43)
              break;
            v41 += 2;
          }
          while (v41 != v42);
        }
LABEL_30:
        ;
      }
    }
  }
  v76 = *a3;
  v77 = a3[1];
  if (*a3 != v77)
  {
    v78 = *a4;
    v79 = a4[1];
    if (*a4 != v79)
    {
      do
      {
        v80 = *a3;
        v81 = a3[1];
        if (*a3 != v81)
        {
          v83 = *(_QWORD *)(a1[11] + 24 * *v78);
          v82 = *(_QWORD *)(a1[11] + 24 * *v78 + 8);
          do
          {
            if (v83 == v82)
              break;
            v84 = *v80;
            while (*(_DWORD *)v83 < v84)
            {
              v83 += 16;
              if (v83 == v82)
                goto LABEL_49;
            }
            if (*(_DWORD *)v83 == v84)
            {
              v85 = (__int128 *)(a1[2] + 8 * *(_QWORD *)(v83 + 8));
              if (v85 == *(__int128 **)a2)
              {
                v93 = v85[6];
                v92 = v85[7];
                v91 = v85[4];
                v90 = v85[5];
                v89 = v85[2];
                v88 = v85[3];
                v87 = *v85;
                v86 = v85[1];
              }
              else
              {
                v87 = *v85;
                v86 = v85[1];
                v89 = v85[2];
                v88 = v85[3];
                v91 = v85[4];
                v90 = v85[5];
                v93 = v85[6];
                v92 = v85[7];
              }
              v94 = *(unsigned int *)(a2 + 16);
              v95 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v80[1] + (_DWORD)v94 * v78[1]));
              *v95 = v87;
              v95[1] = v86;
              v96 = (_OWORD *)((char *)v95 + 8 * v94);
              *v96 = v89;
              v96[1] = v88;
              v97 = &v95[v94];
              *v97 = v91;
              v97[1] = v90;
              v98 = (_OWORD *)((char *)v95 + 24 * v94);
              *v98 = v93;
              v98[1] = v92;
            }
            if (v83 == v82)
              break;
            v80 += 2;
          }
          while (v80 != v81);
        }
LABEL_49:
        v78 += 2;
      }
      while (v78 != v79);
      v76 = *a3;
      v77 = a3[1];
    }
    if (v76 != v77)
    {
      v99 = a4[3];
      for (j = a4[4]; v99 != j; v99 += 2)
      {
        v101 = *a3;
        v102 = a3[1];
        if (*a3 != v102)
        {
          v104 = *(_QWORD *)(a1[39] + 24 * *v99);
          v103 = *(_QWORD *)(a1[39] + 24 * *v99 + 8);
          do
          {
            if (v104 == v103)
              break;
            v105 = *v101;
            while (*(_DWORD *)v104 < v105)
            {
              v104 += 16;
              if (v104 == v103)
                goto LABEL_69;
            }
            if (*(_DWORD *)v104 == v105)
            {
              v106 = (int8x16_t *)(a1[30] + 8 * *(_QWORD *)(v104 + 8));
              if (v106 == *(int8x16_t **)a2)
              {
                v116 = v106[10];
                v115 = v106[11];
                v114 = v106[8];
                v113 = v106[9];
                v112 = v106[6];
                v111 = v106[7];
                v110 = v106[4];
                v109 = v106[5];
                v108 = v106[2];
                v107 = v106[3];
              }
              else
              {
                v108 = v106[2];
                v107 = v106[3];
                v110 = v106[4];
                v109 = v106[5];
                v112 = v106[6];
                v111 = v106[7];
                v114 = v106[8];
                v113 = v106[9];
                v116 = v106[10];
                v115 = v106[11];
              }
              v118 = *v106;
              v117 = v106[1];
              v119 = *(unsigned int *)(a2 + 16);
              v115.i64[1] = vextq_s8(v115, v115, 8uLL).u64[0];
              v116.i64[1] = vextq_s8(v116, v116, 8uLL).u64[0];
              v113.i64[1] = vextq_s8(v113, v113, 8uLL).u64[0];
              v114.i64[1] = vextq_s8(v114, v114, 8uLL).u64[0];
              v111.i64[1] = vextq_s8(v111, v111, 8uLL).u64[0];
              v112.i64[1] = vextq_s8(v112, v112, 8uLL).u64[0];
              v109.i64[1] = vextq_s8(v109, v109, 8uLL).u64[0];
              v110.i64[1] = vextq_s8(v110, v110, 8uLL).u64[0];
              v107.i64[1] = vextq_s8(v107, v107, 8uLL).u64[0];
              v108.i64[1] = vextq_s8(v108, v108, 8uLL).u64[0];
              v117.i64[1] = vextq_s8(v117, v117, 8uLL).u64[0];
              v118.i64[1] = vextq_s8(v118, v118, 8uLL).u64[0];
              v120 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v101[1] + (_DWORD)v119 * v99[1]));
              *v120 = v118;
              v120[1] = v117;
              v121 = (int8x16_t *)((char *)v120 + 8 * v119);
              *v121 = v108;
              v121[1] = v107;
              v122 = &v120[v119];
              *v122 = v110;
              v122[1] = v109;
              v123 = (int8x16_t *)((char *)v120 + 24 * v119);
              *v123 = v112;
              v123[1] = v111;
              v124 = &v120[2 * v119];
              *v124 = v114;
              v124[1] = v113;
              v125 = (int8x16_t *)((char *)v120 + 40 * v119);
              *v125 = v116;
              v125[1] = v115;
            }
            if (v104 == v103)
              break;
            v101 += 2;
          }
          while (v101 != v102);
        }
LABEL_69:
        ;
      }
    }
  }
}

__n128 sub_20F3D5354(uint64_t a1, uint64_t a2, int **a3)
{
  int *v6;
  int *v7;
  unint64_t v8;
  size_t v9;
  __n128 result;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  int *v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v7 = *a3;
  v6 = a3[1];
  v8 = (((unint64_t)((char *)v6 - (char *)*a3) >> 1) & 0xFFFFFFFC)
     + 6 * ((unint64_t)((char *)a3[4] - (char *)a3[3]) >> 3);
  if (*(_DWORD *)(a2 + 16) != (_DWORD)v8)
  {
    *(_DWORD *)(a2 + 16) = v8;
    if (*(_QWORD *)(a2 + 8) < v8)
    {
      if (*(_QWORD *)a2)
      {
        MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
        v7 = *a3;
        v6 = a3[1];
      }
      v9 = (8 * v8 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v9 >> 3;
      *(_QWORD *)a2 = operator new(v9, (std::align_val_t)0x20uLL);
    }
  }
  if (v7 != v6)
  {
    v11 = *(_DWORD *)(a1 + 32);
    do
    {
      v12 = *v7;
      v13 = v7[1];
      v7 += 2;
      v14 = *(_QWORD *)a1 + 8 * (v11 + 4 * v12);
      v15 = (_OWORD *)(*(_QWORD *)a2 + 8 * v13);
      result = *(__n128 *)v14;
      v16 = *(_OWORD *)(v14 + 16);
      *v15 = *(_OWORD *)v14;
      v15[1] = v16;
    }
    while (v7 != v6);
  }
  v17 = a3[3];
  v18 = a3[4];
  if (v17 != v18)
  {
    v19 = *(_DWORD *)(a1 + 36);
    do
    {
      v20 = *v17;
      v21 = v17[1];
      v17 += 2;
      v22 = *(_QWORD *)a1 + 8 * (v19 + 6 * v20);
      v23 = *(_QWORD *)a2 + 8 * v21;
      result = *(__n128 *)(v22 + 32);
      v24 = *(_OWORD *)v22;
      *(_OWORD *)(v23 + 16) = *(_OWORD *)(v22 + 16);
      *(__n128 *)(v23 + 32) = result;
      *(_OWORD *)v23 = v24;
    }
    while (v17 != v18);
  }
  return result;
}

_QWORD *sub_20F3D5480(_QWORD *result, uint64_t a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int *v4;
  unsigned int *i;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int8x16_t *v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _OWORD *v60;
  _OWORD *v61;
  _OWORD *v62;
  _OWORD *v63;
  unsigned int *v64;
  unsigned int *j;
  unsigned int *v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int8x16_t *v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  uint64_t v84;
  int8x16_t *v85;
  int8x16_t *v86;
  int8x16_t *v87;
  int8x16_t *v88;
  int8x16_t *v89;
  int8x16_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;

  if (a3[3] != a3[4])
  {
    v4 = a4[3];
    for (i = a4[4]; v4 != i; v4 += 2)
    {
      v6 = a3[3];
      v7 = a3[4];
      if (v6 != v7)
      {
        v9 = *(_QWORD *)(result[53] + 24 * *v4);
        v8 = *(_QWORD *)(result[53] + 24 * *v4 + 8);
        do
        {
          if (v9 == v8)
            break;
          v10 = *v6;
          while (*(_DWORD *)v9 < v10)
          {
            v9 += 16;
            if (v9 == v8)
              goto LABEL_4;
          }
          if (*(_DWORD *)v9 == v10)
          {
            v11 = (int8x16_t *)(result[44] + 8 * *(_QWORD *)(v9 + 8));
            if (v11 == *(int8x16_t **)a2)
            {
              v21 = v11[16];
              v20 = v11[17];
              v19 = v11[14];
              v18 = v11[15];
              v17 = v11[12];
              v16 = v11[13];
              v15 = v11[10];
              v14 = v11[11];
              v27 = v11[8];
              v26 = v11[9];
              v93 = vextq_s8(v21, v21, 8uLL).u64[0];
              v94 = vextq_s8(v20, v20, 8uLL).u64[0];
              v22 = vextq_s8(v19, v19, 8uLL).u64[0];
              v23 = vextq_s8(v16, v16, 8uLL).u64[0];
              v24 = vextq_s8(v17, v17, 8uLL).u64[0];
              v91 = vextq_s8(v14, v14, 8uLL).u64[0];
              v92 = vextq_s8(v18, v18, 8uLL).u64[0];
              v25 = vextq_s8(v15, v15, 8uLL).u64[0];
              v13 = v11[6];
              v12 = v11[7];
            }
            else
            {
              v13 = v11[6];
              v12 = v11[7];
              v15 = v11[10];
              v14 = v11[11];
              v17 = v11[12];
              v16 = v11[13];
              v19 = v11[14];
              v18 = v11[15];
              v21 = v11[16];
              v20 = v11[17];
              v93 = vextq_s8(v21, v21, 8uLL).u64[0];
              v94 = vextq_s8(v20, v20, 8uLL).u64[0];
              v22 = vextq_s8(v19, v19, 8uLL).u64[0];
              v23 = vextq_s8(v16, v16, 8uLL).u64[0];
              v24 = vextq_s8(v17, v17, 8uLL).u64[0];
              v91 = vextq_s8(v14, v14, 8uLL).u64[0];
              v92 = vextq_s8(v18, v18, 8uLL).u64[0];
              v25 = vextq_s8(v15, v15, 8uLL).u64[0];
              v27 = v11[8];
              v26 = v11[9];
            }
            v29 = v11[4];
            v28 = v11[5];
            v31 = v11[2];
            v30 = v11[3];
            v33 = *v11;
            v32 = v11[1];
            v19.i64[1] = v22;
            v16.i64[1] = v23;
            v17.i64[1] = v24;
            v31.i64[1] = vextq_s8(v31, v31, 8uLL).u64[0];
            v34 = *(unsigned int *)(a2 + 16);
            v32.i64[1] = vextq_s8(v32, v32, 8uLL).u64[0];
            v33.i64[1] = vextq_s8(v33, v33, 8uLL).u64[0];
            v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
            v29.i64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
            v30.i64[1] = vextq_s8(v30, v30, 8uLL).u64[0];
            v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
            v12.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
            v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
            v14.i64[1] = v91;
            v15.i64[1] = v25;
            v26.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
            v20.i64[1] = v94;
            v21.i64[1] = v93;
            v18.i64[1] = v92;
            v35 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v6[1] + (_DWORD)v34 * v4[1]));
            *v35 = v33;
            v35[1] = v32;
            v35[2] = v31;
            v36 = (int8x16_t *)((char *)v35 + 8 * v34);
            *v36 = v30;
            v36[1] = v29;
            v36[2] = v28;
            v37 = &v35[v34];
            *v37 = v13;
            v37[1] = v12;
            v37[2] = v27;
            v38 = (int8x16_t *)((char *)v35 + 24 * v34);
            *v38 = v26;
            v38[1] = v15;
            v38[2] = v14;
            v39 = &v35[2 * v34];
            *v39 = v17;
            v39[1] = v16;
            v39[2] = v19;
            v40 = (int8x16_t *)((char *)v35 + 40 * v34);
            *v40 = v18;
            v40[1] = v21;
            v40[2] = v20;
          }
          if (v9 == v8)
            break;
          v6 += 2;
        }
        while (v6 != v7);
      }
LABEL_4:
      ;
    }
  }
  v41 = *a3;
  v42 = a3[1];
  if (*a3 != v42)
  {
    v43 = *a4;
    v44 = a4[1];
    if (*a4 != v44)
    {
      do
      {
        v45 = *a3;
        v46 = a3[1];
        if (*a3 != v46)
        {
          v48 = *(_QWORD *)(result[11] + 24 * *v43);
          v47 = *(_QWORD *)(result[11] + 24 * *v43 + 8);
          do
          {
            if (v48 == v47)
              break;
            v49 = *v45;
            while (*(_DWORD *)v48 < v49)
            {
              v48 += 16;
              if (v48 == v47)
                goto LABEL_23;
            }
            if (*(_DWORD *)v48 == v49)
            {
              v50 = (__int128 *)(result[2] + 8 * *(_QWORD *)(v48 + 8));
              if (v50 == *(__int128 **)a2)
              {
                v58 = v50[6];
                v57 = v50[7];
                v56 = v50[4];
                v55 = v50[5];
                v54 = v50[2];
                v53 = v50[3];
                v52 = *v50;
                v51 = v50[1];
              }
              else
              {
                v52 = *v50;
                v51 = v50[1];
                v54 = v50[2];
                v53 = v50[3];
                v56 = v50[4];
                v55 = v50[5];
                v58 = v50[6];
                v57 = v50[7];
              }
              v59 = *(unsigned int *)(a2 + 16);
              v60 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v45[1] + (_DWORD)v59 * v43[1]));
              *v60 = v52;
              v60[1] = v51;
              v61 = (_OWORD *)((char *)v60 + 8 * v59);
              *v61 = v54;
              v61[1] = v53;
              v62 = &v60[v59];
              *v62 = v56;
              v62[1] = v55;
              v63 = (_OWORD *)((char *)v60 + 24 * v59);
              *v63 = v58;
              v63[1] = v57;
            }
            if (v48 == v47)
              break;
            v45 += 2;
          }
          while (v45 != v46);
        }
LABEL_23:
        v43 += 2;
      }
      while (v43 != v44);
      v41 = *a3;
      v42 = a3[1];
    }
    if (v41 != v42)
    {
      v64 = a4[3];
      for (j = a4[4]; v64 != j; v64 += 2)
      {
        v66 = *a3;
        v67 = a3[1];
        if (*a3 != v67)
        {
          v69 = *(_QWORD *)(result[39] + 24 * *v64);
          v68 = *(_QWORD *)(result[39] + 24 * *v64 + 8);
          do
          {
            if (v69 == v68)
              break;
            v70 = *v66;
            while (*(_DWORD *)v69 < v70)
            {
              v69 += 16;
              if (v69 == v68)
                goto LABEL_43;
            }
            if (*(_DWORD *)v69 == v70)
            {
              v71 = (int8x16_t *)(result[30] + 8 * *(_QWORD *)(v69 + 8));
              if (v71 == *(int8x16_t **)a2)
              {
                v81 = v71[10];
                v80 = v71[11];
                v79 = v71[8];
                v78 = v71[9];
                v77 = v71[6];
                v76 = v71[7];
                v75 = v71[4];
                v74 = v71[5];
                v73 = v71[2];
                v72 = v71[3];
              }
              else
              {
                v73 = v71[2];
                v72 = v71[3];
                v75 = v71[4];
                v74 = v71[5];
                v77 = v71[6];
                v76 = v71[7];
                v79 = v71[8];
                v78 = v71[9];
                v81 = v71[10];
                v80 = v71[11];
              }
              v83 = *v71;
              v82 = v71[1];
              v84 = *(unsigned int *)(a2 + 16);
              v80.i64[1] = vextq_s8(v80, v80, 8uLL).u64[0];
              v81.i64[1] = vextq_s8(v81, v81, 8uLL).u64[0];
              v78.i64[1] = vextq_s8(v78, v78, 8uLL).u64[0];
              v79.i64[1] = vextq_s8(v79, v79, 8uLL).u64[0];
              v76.i64[1] = vextq_s8(v76, v76, 8uLL).u64[0];
              v77.i64[1] = vextq_s8(v77, v77, 8uLL).u64[0];
              v74.i64[1] = vextq_s8(v74, v74, 8uLL).u64[0];
              v75.i64[1] = vextq_s8(v75, v75, 8uLL).u64[0];
              v72.i64[1] = vextq_s8(v72, v72, 8uLL).u64[0];
              v73.i64[1] = vextq_s8(v73, v73, 8uLL).u64[0];
              v82.i64[1] = vextq_s8(v82, v82, 8uLL).u64[0];
              v83.i64[1] = vextq_s8(v83, v83, 8uLL).u64[0];
              v85 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v66[1] + (_DWORD)v84 * v64[1]));
              *v85 = v83;
              v85[1] = v82;
              v86 = (int8x16_t *)((char *)v85 + 8 * v84);
              *v86 = v73;
              v86[1] = v72;
              v87 = &v85[v84];
              *v87 = v75;
              v87[1] = v74;
              v88 = (int8x16_t *)((char *)v85 + 24 * v84);
              *v88 = v77;
              v88[1] = v76;
              v89 = &v85[2 * v84];
              *v89 = v79;
              v89[1] = v78;
              v90 = (int8x16_t *)((char *)v85 + 40 * v84);
              *v90 = v81;
              v90[1] = v80;
            }
            if (v69 == v68)
              break;
            v66 += 2;
          }
          while (v66 != v67);
        }
LABEL_43:
        ;
      }
    }
  }
  return result;
}

void sub_20F3D592C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char **v21;
  unsigned int v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _OWORD *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  _OWORD *v83;
  size_t v84;
  __int128 *v85;
  _BYTE *v86;
  BOOL v87;
  uint64_t v88;
  int64x2_t v89;
  int64x2_t *v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  uint64_t *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  __int128 *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  const double *v106;
  uint64_t v107;
  unint64_t v108;
  float64x2_t v109;
  float64x2_t *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unsigned int v115;
  unint64_t v116;
  _QWORD *v117;
  int v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  __int128 v123;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v8 = (_QWORD *)(a1 + 16);
    v112 = HIDWORD(a3);
    v115 = 1;
    v119 = a3;
    v117 = (_QWORD *)(a1 + 16);
    v113 = a1 + 40;
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 88);
      v10 = (uint64_t *)(v9 + 24 * v6);
      v11 = *v10;
      v12 = v10[1];
      if (*v10 != v12)
      {
        v13 = *(_QWORD *)(a1 + 48);
        v14 = *(_QWORD *)(a1 + 56);
        v15 = *(_QWORD *)(a1 + 80);
        do
        {
          v16 = ((v14 - v13) << 6) - 1;
          if (v14 == v13)
            v16 = 0;
          v17 = *(_QWORD *)(a1 + 72) + v15;
          if (v16 == v17)
          {
            sub_20EDB36DC(v7);
            v13 = *(_QWORD *)(a1 + 48);
            v14 = *(_QWORD *)(a1 + 56);
            v17 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v13 + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v17 & 0x1FF)) = *(_QWORD *)(v11 + 8);
          v15 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v15;
          v11 += 16;
        }
        while (v11 != v12);
        v11 = *v10;
        v9 = *(_QWORD *)(a1 + 88);
      }
      v10[1] = v11;
      v18 = v6 + 1;
      v19 = *(_DWORD *)(a1 + 8);
      v114 = v6 + 1;
      if (v19 < (int)v6 + 1)
        v18 = *(_DWORD *)(a1 + 8);
      if (v18)
        break;
LABEL_3:
      ++v115;
      v7 = v113;
      v6 = v114;
      if (v114 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v20 = 0;
    v21 = (char **)(v9 + 24 * v6);
    v22 = v115;
    if (v19 < v115)
      v22 = *(_DWORD *)(a1 + 8);
    v120 = v22;
    v121 = v112 + 6 * v6;
    while (1)
    {
      v25 = *v4;
      v50 = *((unsigned int *)v4 + 4);
      v51 = *v21;
      v52 = v21[1];
      if (*v21 != v52)
      {
        while (*(_DWORD *)v51 < v20)
        {
          v51 += 16;
          if (v51 == v52)
            goto LABEL_29;
        }
      }
      if (v51 != v52)
      {
        if (*(_DWORD *)v51 == v20)
        {
          v23 = (_OWORD *)(*v8 + 8 * *((_QWORD *)v51 + 1));
          goto LABEL_20;
        }
        v52 = v51;
      }
LABEL_29:
      v53 = *(_QWORD *)(a1 + 80);
      v122 = *v4;
      if (v53)
      {
        v55 = *(_QWORD *)(a1 + 48);
        v54 = *(_QWORD *)(a1 + 56);
        v56 = ((v54 - v55) << 6) - 1;
        v57 = *(_QWORD *)(a1 + 72);
        if (v54 == v55)
          v56 = 0;
        v23 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v55 + (((unint64_t)(v57 + v53 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v57 + v53 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v53 - 1;
        if ((unint64_t)(v56 - (v53 + v57) + 1) >= 0x400)
        {
          operator delete(*(void **)(v54 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        goto LABEL_19;
      }
      *(_QWORD *)&v123 = 0;
      v59 = *(_QWORD *)(a1 + 16);
      v58 = *(_QWORD *)(a1 + 24);
      v60 = v58 - v59;
      v61 = (uint64_t)(v58 - v59) >> 3;
      v62 = (__int128 *)(v59 + ((v58 - v59) & 0xFFFFFFFFFFFFFFF8));
      v63 = *(_QWORD *)(a1 + 32);
      if (v63 - v58 < 0x120)
      {
        v64 = v61 + 36;
        if ((unint64_t)(v61 + 36) >> 61)
          sub_20E867F44();
        v65 = v63 - v59;
        if (v65 >> 2 > v64)
          v64 = v65 >> 2;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        v116 = v64;
        if (v64)
        {
          if (v64 >> 61)
            sub_20E877A38();
          v66 = operator new(8 * v64);
          v61 = (uint64_t)(v58 - v59) >> 3;
        }
        else
        {
          v66 = 0;
        }
        v73 = &v66[8 * v61];
        v73[16] = 0u;
        v73[17] = 0u;
        v73[14] = 0u;
        v73[15] = 0u;
        v73[12] = 0u;
        v73[13] = 0u;
        v73[10] = 0u;
        v73[11] = 0u;
        v73[8] = 0u;
        v73[9] = 0u;
        v73[6] = 0u;
        v73[7] = 0u;
        v73[4] = 0u;
        v73[5] = 0u;
        v73[2] = 0u;
        v73[3] = 0u;
        *v73 = 0u;
        v73[1] = 0u;
        if (v59 == v58)
        {
          v75 = &v66[8 * v61];
        }
        else
        {
          if (v60 - 8 < 0x68)
          {
            v74 = (char *)(v59 + ((v58 - v59) & 0xFFFFFFFFFFFFFFF8));
            v75 = &v66[8 * v61];
            goto LABEL_56;
          }
          v74 = (char *)(v59 + ((v58 - v59) & 0xFFFFFFFFFFFFFFF8));
          v75 = &v66[8 * v61];
          if (v59 + (v60 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v66[v60 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_98;
          v76 = ((v60 - 8) >> 3) + 1;
          v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = (char *)v62 - v77;
          v75 = (char *)v73 - v77;
          v78 = &v66[8 * v61 - 16];
          v79 = (__int128 *)(v59 + 8 * v61 - 16);
          v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v81 = *v79;
            *(v78 - 1) = *(v79 - 1);
            *v78 = v81;
            v78 -= 2;
            v79 -= 2;
            v80 -= 4;
          }
          while (v80);
          if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            do
            {
LABEL_56:
              v82 = *((_QWORD *)v74 - 1);
              v74 -= 8;
              *((_QWORD *)v75 - 1) = v82;
              v75 -= 8;
            }
            while (v74 != (char *)v59);
          }
        }
        v83 = v73 + 18;
        v84 = v58 - (_QWORD)v62;
        if (v84)
        {
          v85 = v62;
          v86 = v66;
          memmove(v73 + 18, v85, v84);
          v66 = v86;
        }
        *(_QWORD *)(a1 + 16) = v75;
        *(_QWORD *)(a1 + 24) = (char *)v83 + v84;
        *(_QWORD *)(a1 + 32) = &v66[8 * v116];
        if (v59)
          operator delete((void *)v59);
        goto LABEL_18;
      }
      v67 = v58 - (_QWORD)v62;
      if (v58 - (unint64_t)v62 > 0x11F)
      {
        v69 = *(_QWORD *)(a1 + 24);
        v68 = 36;
        goto LABEL_68;
      }
      v68 = v67 >> 3;
      v69 = v58 + 8 * (36 - (v67 >> 3));
      v70 = v67 & 0xFFFFFFFFFFFFFFF8;
      v71 = 280 - v70;
      if (280 - v70 < 0x68)
        break;
      v87 = (unint64_t)&v123 < v58 - v70 + 288;
      if (v58 < (unint64_t)&v123 + 8)
      {
        v72 = *(_QWORD **)(a1 + 24);
        if (v87)
          goto LABEL_66;
      }
      v88 = (v71 >> 3) + 1;
      v72 = (_QWORD *)(v58 + 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL));
      v89 = vdupq_lane_s64(v123, 0);
      v90 = (int64x2_t *)(v58 + 16);
      v91 = v88 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v90[-1] = v89;
        *v90 = v89;
        v90 += 2;
        v91 -= 4;
      }
      while (v91);
      if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_66;
LABEL_67:
      *(_QWORD *)(a1 + 24) = v69;
      if ((__int128 *)v58 == v62)
        goto LABEL_18;
LABEL_68:
      v92 = v69 - (_QWORD)(v62 + 18);
      v93 = v92 >> 3;
      v94 = (uint64_t *)(v69 - 288);
      v95 = (_QWORD *)v69;
      if (v69 - 288 < v58)
      {
        v96 = (v60 & 0xFFFFFFFFFFFFFFF8) + v92;
        v97 = v59 + v96 + 8;
        if (v58 > v97)
          v97 = v58;
        v98 = v97 + ~v59 - v96;
        if (v98 >= 0x58)
        {
          v99 = (v98 >> 3) + 1;
          v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
          v94 = (uint64_t *)((char *)v94 + v100);
          v95 = (_QWORD *)(v69 + v100);
          v101 = (_OWORD *)(v69 + 16);
          v102 = (__int128 *)(v59 + 8 * v93 + 8 * v61 + 16);
          v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v104 = *v102;
            *(v101 - 1) = *(v102 - 1);
            *v101 = v104;
            v101 += 2;
            v102 += 2;
            v103 -= 4;
          }
          while (v103);
          if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_77;
        }
        else
        {
          v95 = (_QWORD *)v69;
        }
        do
        {
          v105 = *v94++;
          *v95++ = v105;
        }
        while ((unint64_t)v94 < v58);
      }
LABEL_77:
      *(_QWORD *)(a1 + 24) = v95;
      if ((__int128 *)v69 != v62 + 18)
      {
        memmove((void *)(v69 - 8 * v93), (const void *)(v59 + ((v58 - v59) & 0xFFFFFFFFFFFFFFF8)), v92);
        v61 = (uint64_t)(v58 - v59) >> 3;
      }
      v106 = (const double *)&v123;
      if (v62 <= &v123)
      {
        v107 = 288;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v123)
          v107 = 0;
        v106 = (const double *)((char *)&v123 + v107);
      }
      if (v68 >= 0xA)
      {
        if (v62 >= (__int128 *)(v106 + 1) || (unint64_t)v106 >= v59 + (v60 & 0xFFFFFFFFFFFFFFF8) + 8 * v68)
        {
          v62 = (__int128 *)((char *)v62 + 8 * (v68 & 0xFFFFFFFFFFFFFFFCLL));
          v108 = v68 & 3;
          v109 = vld1q_dup_f64(v106);
          v110 = (float64x2_t *)(v59 + 8 * v61 + 16);
          v111 = v68 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v110[-1] = v109;
            *v110 = v109;
            v110 += 2;
            v111 -= 4;
          }
          while (v111);
          if (v68 == (v68 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_18;
        }
        else
        {
          v108 = v68;
        }
      }
      else
      {
        v108 = v68;
      }
      do
      {
        *(double *)v62 = *v106;
        v62 = (__int128 *)((char *)v62 + 8);
        --v108;
      }
      while (v108);
LABEL_18:
      v23 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 288);
      v4 = a2;
      v3 = v119;
      v8 = v117;
LABEL_19:
      v24 = ((uint64_t)v23 - *v8) >> 3;
      LODWORD(v123) = v20;
      *((_QWORD *)&v123 + 1) = v24;
      sub_20F2B4654(v21, v52, &v123);
      v25 = v122;
LABEL_20:
      v26 = (__int128 *)(v25 + 8 * (v3 + 6 * v20 + (_DWORD)v50 * v121));
      v28 = v26[1];
      v27 = v26[2];
      v29 = *v26;
      v30 = (__int128 *)((char *)v26 + 8 * v50);
      v32 = v30[1];
      v31 = v30[2];
      v33 = *v30;
      v34 = &v26[v50];
      v36 = v34[1];
      v35 = v34[2];
      v37 = *v34;
      v38 = (__int128 *)((char *)v26 + 24 * v50);
      v40 = v38[1];
      v39 = v38[2];
      v41 = *v38;
      v42 = &v26[2 * v50];
      v44 = v42[1];
      v43 = v42[2];
      v45 = *v42;
      v46 = (__int128 *)((char *)v26 + 40 * v50);
      v48 = v46[1];
      v47 = v46[2];
      v49 = *v46;
      *v23 = v29;
      v23[1] = v28;
      v23[2] = v27;
      v23[3] = v33;
      v23[4] = v32;
      v23[5] = v31;
      v23[6] = v37;
      v23[7] = v36;
      v23[8] = v35;
      v23[9] = v41;
      v23[10] = v40;
      v23[11] = v39;
      v23[12] = v45;
      v23[13] = v44;
      v23[14] = v43;
      v23[15] = v49;
      v23[16] = v48;
      v23[17] = v47;
      if (++v20 == v120)
        goto LABEL_3;
    }
    v72 = *(_QWORD **)(a1 + 24);
    do
LABEL_66:
      *v72++ = v123;
    while (v72 != (_QWORD *)v69);
    goto LABEL_67;
  }
}

void sub_20F3D6048(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char **v21;
  unsigned int v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _OWORD *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  _OWORD *v71;
  size_t v72;
  __int128 *v73;
  _BYTE *v74;
  BOOL v75;
  uint64_t v76;
  int64x2_t v77;
  int64x2_t *v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  const double *v94;
  unint64_t v95;
  float64x2_t v96;
  float64x2_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unint64_t v103;
  _QWORD *v104;
  int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  __int128 v110;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v8 = (_QWORD *)(a1 + 16);
    v99 = HIDWORD(a3);
    v102 = 1;
    v106 = a3;
    v104 = (_QWORD *)(a1 + 16);
    v100 = a1 + 40;
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 88);
      v10 = (uint64_t *)(v9 + 24 * v6);
      v11 = *v10;
      v12 = v10[1];
      if (*v10 != v12)
      {
        v13 = *(_QWORD *)(a1 + 48);
        v14 = *(_QWORD *)(a1 + 56);
        v15 = *(_QWORD *)(a1 + 80);
        do
        {
          v16 = ((v14 - v13) << 6) - 1;
          if (v14 == v13)
            v16 = 0;
          v17 = *(_QWORD *)(a1 + 72) + v15;
          if (v16 == v17)
          {
            sub_20EDB36DC(v7);
            v13 = *(_QWORD *)(a1 + 48);
            v14 = *(_QWORD *)(a1 + 56);
            v17 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v13 + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v17 & 0x1FF)) = *(_QWORD *)(v11 + 8);
          v15 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v15;
          v11 += 16;
        }
        while (v11 != v12);
        v11 = *v10;
        v9 = *(_QWORD *)(a1 + 88);
      }
      v10[1] = v11;
      v18 = v6 + 1;
      v19 = *(_DWORD *)(a1 + 8);
      v101 = v6 + 1;
      if (v19 < (int)v6 + 1)
        v18 = *(_DWORD *)(a1 + 8);
      if (v18)
        break;
LABEL_3:
      ++v102;
      v7 = v100;
      v6 = v101;
      if (v101 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v20 = 0;
    v21 = (char **)(v9 + 24 * v6);
    v22 = v102;
    if (v19 < v102)
      v22 = *(_DWORD *)(a1 + 8);
    v107 = v22;
    v108 = v99 + 4 * v6;
    while (1)
    {
      v25 = *v4;
      v38 = *((unsigned int *)v4 + 4);
      v39 = *v21;
      v40 = v21[1];
      if (*v21 != v40)
      {
        while (*(_DWORD *)v39 < v20)
        {
          v39 += 16;
          if (v39 == v40)
            goto LABEL_29;
        }
      }
      if (v39 != v40)
      {
        if (*(_DWORD *)v39 == v20)
        {
          v23 = (_OWORD *)(*v8 + 8 * *((_QWORD *)v39 + 1));
          goto LABEL_20;
        }
        v40 = v39;
      }
LABEL_29:
      v41 = *(_QWORD *)(a1 + 80);
      v109 = *v4;
      if (v41)
      {
        v43 = *(_QWORD *)(a1 + 48);
        v42 = *(_QWORD *)(a1 + 56);
        v44 = ((v42 - v43) << 6) - 1;
        v45 = *(_QWORD *)(a1 + 72);
        if (v42 == v43)
          v44 = 0;
        v23 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v43 + (((unint64_t)(v45 + v41 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v45 + v41 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v41 - 1;
        if ((unint64_t)(v44 - (v41 + v45) + 1) >= 0x400)
        {
          operator delete(*(void **)(v42 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        goto LABEL_19;
      }
      *(_QWORD *)&v110 = 0;
      v47 = *(_QWORD *)(a1 + 16);
      v46 = *(_QWORD *)(a1 + 24);
      v48 = v46 - v47;
      v49 = (uint64_t)(v46 - v47) >> 3;
      v50 = (__int128 *)(v47 + ((v46 - v47) & 0xFFFFFFFFFFFFFFF8));
      v51 = *(_QWORD *)(a1 + 32);
      if (v51 - v46 < 0x80)
      {
        v52 = v49 + 16;
        if ((unint64_t)(v49 + 16) >> 61)
          sub_20E867F44();
        v53 = v51 - v47;
        if (v53 >> 2 > v52)
          v52 = v53 >> 2;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        v103 = v52;
        if (v52)
        {
          if (v52 >> 61)
            sub_20E877A38();
          v54 = operator new(8 * v52);
          v49 = (uint64_t)(v46 - v47) >> 3;
        }
        else
        {
          v54 = 0;
        }
        v61 = &v54[8 * v49];
        v61[6] = 0u;
        v61[7] = 0u;
        v61[4] = 0u;
        v61[5] = 0u;
        v61[2] = 0u;
        v61[3] = 0u;
        *v61 = 0u;
        v61[1] = 0u;
        if (v47 == v46)
        {
          v63 = &v54[8 * v49];
        }
        else
        {
          if (v48 - 8 < 0x68)
          {
            v62 = (char *)(v47 + ((v46 - v47) & 0xFFFFFFFFFFFFFFF8));
            v63 = &v54[8 * v49];
            goto LABEL_56;
          }
          v62 = (char *)(v47 + ((v46 - v47) & 0xFFFFFFFFFFFFFFF8));
          v63 = &v54[8 * v49];
          if (v47 + (v48 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v54[v48 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_96;
          v64 = ((v48 - 8) >> 3) + 1;
          v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
          v62 = (char *)v50 - v65;
          v63 = (char *)v61 - v65;
          v66 = &v54[8 * v49 - 16];
          v67 = (__int128 *)(v47 + 8 * v49 - 16);
          v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v69 = *v67;
            *(v66 - 1) = *(v67 - 1);
            *v66 = v69;
            v66 -= 2;
            v67 -= 2;
            v68 -= 4;
          }
          while (v68);
          if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_96:
            do
            {
LABEL_56:
              v70 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *((_QWORD *)v63 - 1) = v70;
              v63 -= 8;
            }
            while (v62 != (char *)v47);
          }
        }
        v71 = v61 + 8;
        v72 = v46 - (_QWORD)v50;
        if (v72)
        {
          v73 = v50;
          v74 = v54;
          memmove(v61 + 8, v73, v72);
          v54 = v74;
        }
        *(_QWORD *)(a1 + 16) = v63;
        *(_QWORD *)(a1 + 24) = (char *)v71 + v72;
        *(_QWORD *)(a1 + 32) = &v54[8 * v103];
        if (v47)
          operator delete((void *)v47);
        goto LABEL_18;
      }
      v55 = v46 - (_QWORD)v50;
      if (v46 - (unint64_t)v50 > 0x7F)
      {
        v57 = *(_QWORD *)(a1 + 24);
        v56 = 16;
        goto LABEL_68;
      }
      v56 = v55 >> 3;
      v57 = v46 + 8 * (16 - (v55 >> 3));
      v58 = v55 & 0xFFFFFFFFFFFFFFF8;
      v59 = 120 - v58;
      if (120 - v58 < 0x68)
        break;
      v75 = (unint64_t)&v110 < v46 - v58 + 128;
      if (v46 < (unint64_t)&v110 + 8)
      {
        v60 = *(_QWORD **)(a1 + 24);
        if (v75)
          goto LABEL_66;
      }
      v76 = (v59 >> 3) + 1;
      v60 = (_QWORD *)(v46 + 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL));
      v77 = vdupq_lane_s64(v110, 0);
      v78 = (int64x2_t *)(v46 + 16);
      v79 = v76 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v78[-1] = v77;
        *v78 = v77;
        v78 += 2;
        v79 -= 4;
      }
      while (v79);
      if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_66;
LABEL_67:
      *(_QWORD *)(a1 + 24) = v57;
      if ((__int128 *)v46 == v50)
        goto LABEL_18;
LABEL_68:
      v80 = v57 - (_QWORD)(v50 + 8);
      v81 = v80 >> 3;
      v82 = (uint64_t *)(v57 - 128);
      v83 = (_QWORD *)v57;
      if (v57 - 128 < v46)
      {
        v84 = (v48 & 0xFFFFFFFFFFFFFFF8) + v80;
        v85 = v47 + v84 + 8;
        if (v46 > v85)
          v85 = v46;
        v86 = v85 + ~v47 - v84;
        if (v86 >= 0x58)
        {
          v87 = (v86 >> 3) + 1;
          v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
          v82 = (uint64_t *)((char *)v82 + v88);
          v83 = (_QWORD *)(v57 + v88);
          v89 = (_OWORD *)(v57 + 16);
          v90 = (__int128 *)(v47 + 8 * v81 + 8 * v49 + 16);
          v91 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v92 = *v90;
            *(v89 - 1) = *(v90 - 1);
            *v89 = v92;
            v89 += 2;
            v90 += 2;
            v91 -= 4;
          }
          while (v91);
          if (v87 == (v87 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_77;
        }
        else
        {
          v83 = (_QWORD *)v57;
        }
        do
        {
          v93 = *v82++;
          *v83++ = v93;
        }
        while ((unint64_t)v82 < v46);
      }
LABEL_77:
      *(_QWORD *)(a1 + 24) = v83;
      if ((__int128 *)v57 != v50 + 8)
      {
        memmove((void *)(v57 - 8 * v81), (const void *)(v47 + ((v46 - v47) & 0xFFFFFFFFFFFFFFF8)), v80);
        v49 = (uint64_t)(v46 - v47) >> 3;
      }
      v94 = (const double *)&v110;
      if (v50 <= &v110)
        v94 = (const double *)(&v110 + 8 * (unint64_t)(*(_QWORD *)(a1 + 24) > (unint64_t)&v110));
      if (v56 >= 0xA)
      {
        if (v50 >= (__int128 *)(v94 + 1) || (unint64_t)v94 >= v47 + (v48 & 0xFFFFFFFFFFFFFFF8) + 8 * v56)
        {
          v50 = (__int128 *)((char *)v50 + 8 * (v56 & 0xFFFFFFFFFFFFFFFCLL));
          v95 = v56 & 3;
          v96 = vld1q_dup_f64(v94);
          v97 = (float64x2_t *)(v47 + 8 * v49 + 16);
          v98 = v56 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v97[-1] = v96;
            *v97 = v96;
            v97 += 2;
            v98 -= 4;
          }
          while (v98);
          if (v56 == (v56 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_18;
        }
        else
        {
          v95 = v56;
        }
      }
      else
      {
        v95 = v56;
      }
      do
      {
        *(double *)v50 = *v94;
        v50 = (__int128 *)((char *)v50 + 8);
        --v95;
      }
      while (v95);
LABEL_18:
      v23 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 128);
      v4 = a2;
      v3 = v106;
      v8 = v104;
LABEL_19:
      v24 = ((uint64_t)v23 - *v8) >> 3;
      LODWORD(v110) = v20;
      *((_QWORD *)&v110 + 1) = v24;
      sub_20F2B4654(v21, v40, &v110);
      v25 = v109;
LABEL_20:
      v26 = (__int128 *)(v25 + 8 * (v3 + 4 * v20 + (_DWORD)v38 * v108));
      v28 = *v26;
      v27 = v26[1];
      v29 = (__int128 *)((char *)v26 + 8 * v38);
      v31 = *v29;
      v30 = v29[1];
      v32 = &v26[v38];
      v34 = *v32;
      v33 = v32[1];
      v35 = (__int128 *)((char *)v26 + 24 * v38);
      v37 = *v35;
      v36 = v35[1];
      *v23 = v28;
      v23[1] = v27;
      v23[2] = v31;
      v23[3] = v30;
      v23[4] = v34;
      v23[5] = v33;
      v23[6] = v37;
      v23[7] = v36;
      if (++v20 == v107)
        goto LABEL_3;
    }
    v60 = *(_QWORD **)(a1 + 24);
    do
LABEL_66:
      *v60++ = v110;
    while (v60 != (_QWORD *)v57);
    goto LABEL_67;
  }
}

char *sub_20F3D6704(char *result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _OWORD *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  _OWORD *v66;
  size_t v67;
  __int128 *v68;
  _BYTE *v69;
  BOOL v70;
  uint64_t v71;
  int64x2_t v72;
  int64x2_t *v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  const double *v89;
  uint64_t v90;
  unint64_t v91;
  float64x2_t v92;
  float64x2_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  int v100;
  int v101;
  uint64_t v102;
  __int128 v103;

  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3)
  {
    v4 = result;
    if (*((_DWORD *)result + 2))
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = result + 16;
      v95 = HIDWORD(a3);
      v9 = 1;
      v100 = a3;
      v98 = result + 16;
      while (!v9)
      {
LABEL_5:
        if (++v7 >= v3)
          return result;
      }
      v10 = 0;
      v11 = *((_QWORD *)v4 + 11) + 24 * v7;
      v96 = v7;
      v101 = v95 + 6 * v7;
      while (1)
      {
        v14 = *v6;
        v33 = *((unsigned int *)v6 + 4);
        v34 = *(char **)v11;
        v35 = *(char **)(v11 + 8);
        if (*(char **)v11 != v35)
        {
          while (*(_DWORD *)v34 < v10)
          {
            v34 += 16;
            if (v34 == v35)
              goto LABEL_19;
          }
        }
        if (v34 != v35)
        {
          if (*(_DWORD *)v34 == v10)
          {
            v12 = (_OWORD *)(*(_QWORD *)v8 + 8 * *((_QWORD *)v34 + 1));
            goto LABEL_10;
          }
          v35 = v34;
        }
LABEL_19:
        v102 = *v6;
        v36 = *((_QWORD *)v4 + 10);
        if (v36)
        {
          v38 = *((_QWORD *)v4 + 6);
          v37 = *((_QWORD *)v4 + 7);
          v39 = ((v37 - v38) << 6) - 1;
          v40 = *((_QWORD *)v4 + 9);
          if (v37 == v38)
            v39 = 0;
          v12 = (_OWORD *)(*((_QWORD *)v4 + 2)
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v38 + (((unint64_t)(v40 + v36 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v40 + v36 - 1) & 0x1FF)));
          *((_QWORD *)v4 + 10) = v36 - 1;
          if ((unint64_t)(v39 - (v36 + v40) + 1) >= 0x400)
          {
            operator delete(*(void **)(v37 - 8));
            *((_QWORD *)v4 + 7) -= 8;
          }
          goto LABEL_9;
        }
        *(_QWORD *)&v103 = 0;
        v42 = *((_QWORD *)v4 + 2);
        v41 = *((_QWORD *)v4 + 3);
        v43 = v41 - v42;
        v44 = (uint64_t)(v41 - v42) >> 3;
        v45 = (__int128 *)(v42 + ((v41 - v42) & 0xFFFFFFFFFFFFFFF8));
        v46 = *((_QWORD *)v4 + 4);
        if (v46 - v41 < 0xC0)
        {
          v47 = v44 + 24;
          if ((unint64_t)(v44 + 24) >> 61)
            sub_20E867F44();
          v48 = v46 - v42;
          if (v48 >> 2 > v47)
            v47 = v48 >> 2;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
            v47 = 0x1FFFFFFFFFFFFFFFLL;
          v97 = v47;
          if (v47)
          {
            if (v47 >> 61)
              sub_20E877A38();
            v49 = operator new(8 * v47);
            v44 = (uint64_t)(v41 - v42) >> 3;
          }
          else
          {
            v49 = 0;
          }
          v56 = &v49[8 * v44];
          v56[10] = 0u;
          v56[11] = 0u;
          v56[8] = 0u;
          v56[9] = 0u;
          v56[6] = 0u;
          v56[7] = 0u;
          v56[4] = 0u;
          v56[5] = 0u;
          v56[2] = 0u;
          v56[3] = 0u;
          *v56 = 0u;
          v56[1] = 0u;
          if (v42 == v41)
          {
            v58 = &v49[8 * v44];
          }
          else
          {
            if (v43 - 8 < 0x68)
            {
              v57 = (char *)(v42 + ((v41 - v42) & 0xFFFFFFFFFFFFFFF8));
              v58 = &v49[8 * v44];
              goto LABEL_46;
            }
            v57 = (char *)(v42 + ((v41 - v42) & 0xFFFFFFFFFFFFFFF8));
            v58 = &v49[8 * v44];
            if (v42 + (v43 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v49[v43 & 0xFFFFFFFFFFFFFFF8] < 0x20)
              goto LABEL_88;
            v59 = ((v43 - 8) >> 3) + 1;
            v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
            v57 = (char *)v45 - v60;
            v58 = (char *)v56 - v60;
            v61 = &v49[8 * v44 - 16];
            v62 = (__int128 *)(v42 + 8 * v44 - 16);
            v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v64 = *v62;
              *(v61 - 1) = *(v62 - 1);
              *v61 = v64;
              v61 -= 2;
              v62 -= 2;
              v63 -= 4;
            }
            while (v63);
            if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_88:
              do
              {
LABEL_46:
                v65 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v58 - 1) = v65;
                v58 -= 8;
              }
              while (v57 != (char *)v42);
            }
          }
          v66 = v56 + 12;
          v67 = v41 - (_QWORD)v45;
          if (v67)
          {
            v68 = v45;
            v69 = v49;
            memmove(v56 + 12, v68, v67);
            v49 = v69;
          }
          *((_QWORD *)v4 + 2) = v58;
          *((_QWORD *)v4 + 3) = (char *)v66 + v67;
          *((_QWORD *)v4 + 4) = &v49[8 * v97];
          if (v42)
            operator delete((void *)v42);
          goto LABEL_8;
        }
        v50 = v41 - (_QWORD)v45;
        if (v41 - (unint64_t)v45 > 0xBF)
        {
          v52 = *((_QWORD *)v4 + 3);
          v51 = 24;
          goto LABEL_58;
        }
        v51 = v50 >> 3;
        v52 = v41 + 8 * (24 - (v50 >> 3));
        v53 = v50 & 0xFFFFFFFFFFFFFFF8;
        v54 = 184 - v53;
        if (184 - v53 < 0x68)
          break;
        v70 = (unint64_t)&v103 < v41 - v53 + 192;
        if (v41 < (unint64_t)&v103 + 8)
        {
          v55 = (_QWORD *)*((_QWORD *)v4 + 3);
          if (v70)
            goto LABEL_56;
        }
        v71 = (v54 >> 3) + 1;
        v55 = (_QWORD *)(v41 + 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL));
        v72 = vdupq_lane_s64(v103, 0);
        v73 = (int64x2_t *)(v41 + 16);
        v74 = v71 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v73[-1] = v72;
          *v73 = v72;
          v73 += 2;
          v74 -= 4;
        }
        while (v74);
        if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_56;
LABEL_57:
        *((_QWORD *)v4 + 3) = v52;
        if ((__int128 *)v41 == v45)
          goto LABEL_8;
LABEL_58:
        v75 = v52 - (_QWORD)(v45 + 12);
        v76 = v75 >> 3;
        v77 = (uint64_t *)(v52 - 192);
        v78 = (_QWORD *)v52;
        if (v52 - 192 < v41)
        {
          v79 = (v43 & 0xFFFFFFFFFFFFFFF8) + v75;
          v80 = v42 + v79 + 8;
          if (v41 > v80)
            v80 = v41;
          v81 = v80 + ~v42 - v79;
          if (v81 >= 0x58)
          {
            v82 = (v81 >> 3) + 1;
            v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
            v77 = (uint64_t *)((char *)v77 + v83);
            v78 = (_QWORD *)(v52 + v83);
            v84 = (_OWORD *)(v52 + 16);
            v85 = (__int128 *)(v42 + 8 * v76 + 8 * v44 + 16);
            v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v87 = *v85;
              *(v84 - 1) = *(v85 - 1);
              *v84 = v87;
              v84 += 2;
              v85 += 2;
              v86 -= 4;
            }
            while (v86);
            if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_67;
          }
          else
          {
            v78 = (_QWORD *)v52;
          }
          do
          {
            v88 = *v77++;
            *v78++ = v88;
          }
          while ((unint64_t)v77 < v41);
        }
LABEL_67:
        *((_QWORD *)v4 + 3) = v78;
        if ((__int128 *)v52 != v45 + 12)
        {
          memmove((void *)(v52 - 8 * v76), (const void *)(v42 + ((v41 - v42) & 0xFFFFFFFFFFFFFFF8)), v75);
          v44 = (uint64_t)(v41 - v42) >> 3;
        }
        v89 = (const double *)&v103;
        if (v45 <= &v103)
        {
          v90 = 192;
          if (*((_QWORD *)v4 + 3) <= (unint64_t)&v103)
            v90 = 0;
          v89 = (const double *)((char *)&v103 + v90);
        }
        if (v51 >= 0xA)
        {
          if (v45 >= (__int128 *)(v89 + 1) || (unint64_t)v89 >= v42 + (v43 & 0xFFFFFFFFFFFFFFF8) + 8 * v51)
          {
            v45 = (__int128 *)((char *)v45 + 8 * (v51 & 0xFFFFFFFFFFFFFFFCLL));
            v91 = v51 & 3;
            v92 = vld1q_dup_f64(v89);
            v93 = (float64x2_t *)(v42 + 8 * v44 + 16);
            v94 = v51 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v93[-1] = v92;
              *v93 = v92;
              v93 += 2;
              v94 -= 4;
            }
            while (v94);
            if (v51 == (v51 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_8;
          }
          else
          {
            v91 = v51;
          }
        }
        else
        {
          v91 = v51;
        }
        do
        {
          *(double *)v45 = *v89;
          v45 = (__int128 *)((char *)v45 + 8);
          --v91;
        }
        while (v91);
LABEL_8:
        v12 = (_OWORD *)(*((_QWORD *)v4 + 3) - 192);
        v6 = a2;
        v5 = v100;
        v8 = v98;
LABEL_9:
        v13 = ((uint64_t)v12 - *(_QWORD *)v8) >> 3;
        LODWORD(v103) = v10;
        *((_QWORD *)&v103 + 1) = v13;
        result = sub_20F2B4654((char **)v11, v35, &v103);
        v14 = v102;
LABEL_10:
        v15 = (__int128 *)(v14 + 8 * (v5 + 4 * v10 + (_DWORD)v33 * v101));
        v17 = *v15;
        v16 = v15[1];
        v18 = (__int128 *)((char *)v15 + 8 * v33);
        v20 = *v18;
        v19 = v18[1];
        v21 = &v15[v33];
        v23 = *v21;
        v22 = v21[1];
        v24 = (__int128 *)((char *)v15 + 24 * v33);
        v26 = *v24;
        v25 = v24[1];
        v27 = &v15[2 * v33];
        v29 = *v27;
        v28 = v27[1];
        v30 = (__int128 *)((char *)v15 + 40 * v33);
        v32 = *v30;
        v31 = v30[1];
        *v12 = v17;
        v12[1] = v16;
        v12[2] = v20;
        v12[3] = v19;
        v12[4] = v23;
        v12[5] = v22;
        v12[6] = v26;
        v12[7] = v25;
        v12[8] = v29;
        v12[9] = v28;
        v12[10] = v32;
        v12[11] = v31;
        ++v10;
        v9 = *((_DWORD *)v4 + 2);
        if (v10 >= v9)
        {
          v3 = *((unsigned int *)v4 + 3);
          v7 = v96;
          goto LABEL_5;
        }
      }
      v55 = (_QWORD *)*((_QWORD *)v4 + 3);
      do
LABEL_56:
        *v55++ = v103;
      while (v55 != (_QWORD *)v52);
      goto LABEL_57;
    }
  }
  return result;
}

void sub_20F3D6D28(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v6 - 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1)) + 232 * (v6 - 1) != a2)
  {
    if (v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v12 = 8;
      do
      {
        v8 += v12;
        v12 *= 2;
        --v5;
      }
      while (v5);
    }
    v9 = v8 + v6;
LABEL_12:
    v15 = *(char **)(a1 + 48);
    v14 = *(char **)(a1 + 56);
    v13 = (char **)(a1 + 48);
    v16 = (v14 - v15) >> 3;
    if (v9 - v16 == 1)
    {
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
    v17 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v14 < v17)
    {
      *(_QWORD *)v14 = a2;
      v18 = (uint64_t)(v14 + 8);
LABEL_45:
      *(_QWORD *)(a1 + 56) = v18;
      return;
    }
    v19 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_20E867F44();
    v20 = v17 - (_QWORD)v15;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_20E877A38();
      v22 = (char *)operator new(8 * v21);
      v23 = &v22[8 * v16];
      v24 = &v22[8 * v21];
      *(_QWORD *)v23 = a2;
      v18 = (uint64_t)(v23 + 8);
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
        goto LABEL_43;
    }
    else
    {
      v22 = 0;
      v23 = (char *)(8 * v16);
      v24 = 0;
      *(_QWORD *)(8 * v16) = a2;
      v18 = 8 * v16 + 8;
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
      {
LABEL_43:
        *(_QWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v24;
        if (v14)
          operator delete(v14);
        goto LABEL_45;
      }
    }
    v33 = (unint64_t)(v25 - 8);
    if (v33 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v15 - v22) < 0x20)
      goto LABEL_53;
    v34 = (v33 >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v14[-v35];
    v23 -= v35;
    v37 = &v22[8 * v16 - 16];
    v38 = v14 - 16;
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
      *(_OWORD *)v37 = v40;
      v37 -= 32;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v14 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v41 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v23 - 1) = v41;
        v23 -= 8;
      }
      while (v14 != v15);
    }
    v14 = *v13;
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 40) = v7;
  if (v6 != 1)
  {
    v10 = 0;
    v11 = v4 - 1;
    if (v4 == 1)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 32) = v5;
  if (v4 == 1)
  {
    v28 = 0;
    v29 = *(_QWORD *)(a1 + 48);
    v30 = *(char **)(a1 + 56);
    v31 = (unint64_t)&v30[-v29];
    if ((uint64_t)&v30[-v29] >> 3)
      return;
    goto LABEL_31;
  }
  v7 = 8 << (v4 - 2);
  *(_QWORD *)(a1 + 40) = v7;
  v26 = v4 - 1;
  v10 = 0;
  v11 = v26 - 1;
  if (v26 != 1)
  {
LABEL_28:
    v27 = 8;
    do
    {
      v10 += v27;
      v27 *= 2;
      --v11;
    }
    while (v11);
  }
LABEL_30:
  v28 = v10 + v7;
  v29 = *(_QWORD *)(a1 + 48);
  v30 = *(char **)(a1 + 56);
  v31 = (unint64_t)&v30[-v29];
  if (v28 != (uint64_t)&v30[-v29] >> 3)
    return;
LABEL_31:
  v42 = a1;
  v48 = &v42;
  v47 = a1;
  if ((char *)v29 != v30 && v31 >= 0xF0)
  {
    sub_20F3C913C(v29, v30, (uint64_t)v44, 126 - 2 * __clz(v28), 1);
    v32 = *(_QWORD *)(a1 + 48);
    v45 = *(_QWORD *)(a1 + 56);
    v46 = v32;
    v44[0] = v32;
    v44[1] = v45;
    v44[2] = &v48;
    v43[0] = a1;
    v43[1] = (uint64_t)&v46;
    v43[2] = (uint64_t)&v45;
    sub_20F3C8FCC(&v47, (uint64_t)v44, v43);
    v29 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v29;
}

void sub_20F3D7028(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v6 - 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1)) + 280 * (v6 - 1) != a2)
  {
    if (v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v12 = 8;
      do
      {
        v8 += v12;
        v12 *= 2;
        --v5;
      }
      while (v5);
    }
    v9 = v8 + v6;
LABEL_12:
    v15 = *(char **)(a1 + 48);
    v14 = *(char **)(a1 + 56);
    v13 = (char **)(a1 + 48);
    v16 = (v14 - v15) >> 3;
    if (v9 - v16 == 1)
    {
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
    v17 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v14 < v17)
    {
      *(_QWORD *)v14 = a2;
      v18 = (uint64_t)(v14 + 8);
LABEL_45:
      *(_QWORD *)(a1 + 56) = v18;
      return;
    }
    v19 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_20E867F44();
    v20 = v17 - (_QWORD)v15;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_20E877A38();
      v22 = (char *)operator new(8 * v21);
      v23 = &v22[8 * v16];
      v24 = &v22[8 * v21];
      *(_QWORD *)v23 = a2;
      v18 = (uint64_t)(v23 + 8);
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
        goto LABEL_43;
    }
    else
    {
      v22 = 0;
      v23 = (char *)(8 * v16);
      v24 = 0;
      *(_QWORD *)(8 * v16) = a2;
      v18 = 8 * v16 + 8;
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
      {
LABEL_43:
        *(_QWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v24;
        if (v14)
          operator delete(v14);
        goto LABEL_45;
      }
    }
    v33 = (unint64_t)(v25 - 8);
    if (v33 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v15 - v22) < 0x20)
      goto LABEL_53;
    v34 = (v33 >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v14[-v35];
    v23 -= v35;
    v37 = &v22[8 * v16 - 16];
    v38 = v14 - 16;
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
      *(_OWORD *)v37 = v40;
      v37 -= 32;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v14 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v41 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v23 - 1) = v41;
        v23 -= 8;
      }
      while (v14 != v15);
    }
    v14 = *v13;
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 40) = v7;
  if (v6 != 1)
  {
    v10 = 0;
    v11 = v4 - 1;
    if (v4 == 1)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 32) = v5;
  if (v4 == 1)
  {
    v28 = 0;
    v29 = *(_QWORD *)(a1 + 48);
    v30 = *(char **)(a1 + 56);
    v31 = (unint64_t)&v30[-v29];
    if ((uint64_t)&v30[-v29] >> 3)
      return;
    goto LABEL_31;
  }
  v7 = 8 << (v4 - 2);
  *(_QWORD *)(a1 + 40) = v7;
  v26 = v4 - 1;
  v10 = 0;
  v11 = v26 - 1;
  if (v26 != 1)
  {
LABEL_28:
    v27 = 8;
    do
    {
      v10 += v27;
      v27 *= 2;
      --v11;
    }
    while (v11);
  }
LABEL_30:
  v28 = v10 + v7;
  v29 = *(_QWORD *)(a1 + 48);
  v30 = *(char **)(a1 + 56);
  v31 = (unint64_t)&v30[-v29];
  if (v28 != (uint64_t)&v30[-v29] >> 3)
    return;
LABEL_31:
  v42 = a1;
  v48 = &v42;
  v47 = a1;
  if ((char *)v29 != v30 && v31 >= 0xF0)
  {
    sub_20F3C8408(v29, v30, (uint64_t)v44, 126 - 2 * __clz(v28), 1);
    v32 = *(_QWORD *)(a1 + 48);
    v45 = *(_QWORD *)(a1 + 56);
    v46 = v32;
    v44[0] = v32;
    v44[1] = v45;
    v44[2] = &v48;
    v43[0] = a1;
    v43[1] = (uint64_t)&v46;
    v43[2] = (uint64_t)&v45;
    sub_20F3C8298(&v47, (uint64_t)v44, v43);
    v29 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v29;
}

unint64_t sub_20F3D7328(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  BOOL v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  _BOOL4 v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  BOOL v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  _BOOL4 v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  _BOOL4 v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  BOOL v138;
  unsigned int v139;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unsigned int *v143;
  unsigned int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  BOOL v150;
  BOOL v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  _BOOL4 v156;
  _BOOL4 v157;
  unsigned int v158;
  unsigned int v159;
  BOOL v160;
  BOOL v161;
  uint64_t v162;
  _QWORD *v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  unsigned int *v167;
  unsigned int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int *v174;
  _BOOL4 v175;
  _BOOL4 v176;
  uint64_t v177;
  unsigned int *v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  _BOOL4 v187;
  unsigned int v188;
  uint64_t v189;
  char *v190;
  unsigned int v191;
  BOOL v192;
  BOOL v193;
  int64_t v194;
  int64_t v195;
  int64_t v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  _BOOL4 v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  _BOOL4 v206;
  _BOOL4 v207;
  _BOOL4 v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  int64_t v212;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  _BOOL4 v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  _BOOL4 v229;
  int v230;
  char *v231;
  uint64_t v232;
  BOOL v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  _BOOL4 v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  _BOOL4 v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int *v245;
  uint64_t v246;
  unsigned int v247;
  BOOL v248;
  BOOL v249;
  unsigned int v250;
  unsigned int v251;
  _BOOL4 v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v256 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v172 = *(a2 - 3);
        v173 = *(a2 - 2);
        v174 = a2 - 3;
        v175 = v173 < v10[1];
        v179 = v172 == *v10;
        v176 = v172 < *v10;
        if (v179)
          v176 = v175;
        if (v176)
        {
          v301 = v10[2];
          v277 = *(_QWORD *)v10;
          v177 = *(_QWORD *)v174;
          v10[2] = v174[2];
          *(_QWORD *)v10 = v177;
          v174[2] = v301;
          *(_QWORD *)v174 = v277;
        }
        return result;
      case 3:
        v163 = v10 + 3;
        v164 = v10[3];
        v165 = v10[4];
        v166 = v164 < *v10;
        if (v164 == *v10)
          v166 = v165 < v10[1];
        v168 = *(a2 - 3);
        v167 = a2 - 3;
        v169 = *(a2 - 2) < v165;
        v179 = v168 == v164;
        v170 = v168 < v164;
        if (v179)
          v170 = v169;
        if (v166)
        {
          if (v170)
          {
            v300 = v10[2];
            v276 = *(_QWORD *)v10;
            v171 = *(_QWORD *)v167;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v171;
            *(a2 - 1) = v300;
            *(_QWORD *)v167 = v276;
          }
          else
          {
            v304 = v10[2];
            v280 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v280;
            v10[5] = v304;
            v250 = *(a2 - 3);
            v251 = v10[3];
            v179 = v250 == v251;
            v252 = v250 < v251;
            if (v179)
              v252 = *(a2 - 2) < v10[4];
            if (v252)
            {
              v253 = *v163;
              v254 = v10[5];
              v255 = *(a2 - 1);
              *v163 = *(_QWORD *)v167;
              v10[5] = v255;
              *(a2 - 1) = v254;
              *(_QWORD *)v167 = v253;
            }
          }
        }
        else if (v170)
        {
          v234 = *v163;
          v235 = v10[5];
          v236 = *(a2 - 1);
          *v163 = *(_QWORD *)v167;
          v10[5] = v236;
          *(a2 - 1) = v235;
          *(_QWORD *)v167 = v234;
          v237 = v10[3];
          v179 = v237 == *v10;
          v238 = v237 < *v10;
          if (v179)
            v238 = v10[4] < v10[1];
          if (v238)
          {
            v303 = v10[2];
            v279 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v279;
            v10[5] = v303;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_20F2BCB74(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_20F396580(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v194 = (unint64_t)(v12 - 2) >> 1;
              v195 = v194;
              do
              {
                v196 = v195;
                if (v194 >= v195)
                {
                  v197 = (2 * v195) | 1;
                  v198 = &v10[3 * v197];
                  if (2 * v196 + 2 >= v12)
                  {
                    v199 = *v198;
                  }
                  else
                  {
                    v199 = v198[3];
                    v200 = v10[3 * v197 + 1] < v198[4];
                    if (*v198 != v199)
                      v200 = *v198 < v199;
                    if (v200)
                    {
                      v198 += 3;
                      v197 = 2 * v196 + 2;
                    }
                    else
                    {
                      v199 = *v198;
                    }
                  }
                  v201 = &v10[3 * v196];
                  v202 = *v201;
                  v203 = v201[1];
                  v179 = v199 == *v201;
                  LODWORD(result) = v199 < *v201;
                  if (v179)
                    result = v198[1] < v203;
                  else
                    result = result;
                  if ((result & 1) == 0)
                  {
                    result = v201[2];
                    do
                    {
                      v209 = v201;
                      v201 = v198;
                      v210 = *(_QWORD *)v198;
                      v209[2] = v201[2];
                      *(_QWORD *)v209 = v210;
                      if (v194 < v197)
                        break;
                      v211 = (2 * v197) | 1;
                      v198 = &v10[3 * v211];
                      v197 = 2 * v197 + 2;
                      if (v197 < v12)
                      {
                        v204 = *v198;
                        v205 = v198[3];
                        v206 = v10[3 * v211 + 1] < v198[4];
                        if (*v198 != v205)
                          v206 = *v198 < v205;
                        if (v206)
                        {
                          v204 = v198[3];
                          v198 += 3;
                        }
                        else
                        {
                          v197 = v211;
                        }
                      }
                      else
                      {
                        v204 = *v198;
                        v197 = v211;
                      }
                      v207 = v198[1] < v203;
                      v179 = v204 == v202;
                      v208 = v204 < v202;
                      if (!v179)
                        v207 = v208;
                    }
                    while (!v207);
                    *v201 = v202;
                    v201[1] = v203;
                    v201[2] = result;
                  }
                }
                v195 = v196 - 1;
              }
              while (v196);
              v212 = v11 / 0xCuLL;
              do
              {
                v214 = 0;
                v302 = v10[2];
                v278 = *(_QWORD *)v10;
                v215 = v10;
                do
                {
                  v217 = v214 + 1;
                  v218 = (char *)&v215[3 * v214 + 3];
                  v219 = (2 * v214) | 1;
                  v220 = 2 * v214 + 2;
                  if (v220 < v212)
                  {
                    v221 = *((_DWORD *)v218 + 3);
                    v222 = v215[3 * v217 + 1] < *((_DWORD *)v218 + 4);
                    v179 = *(_DWORD *)v218 == v221;
                    result = *(_DWORD *)v218 < v221;
                    if (!v179)
                      v222 = result;
                    if (v222)
                    {
                      v218 += 12;
                      v219 = v220;
                    }
                  }
                  v216 = *(_QWORD *)v218;
                  v215[2] = *((_DWORD *)v218 + 2);
                  *(_QWORD *)v215 = v216;
                  v215 = (unsigned int *)v218;
                  v214 = v219;
                }
                while (v219 <= (uint64_t)((unint64_t)(v212 - 2) >> 1));
                a2 -= 3;
                if (v218 == (char *)a2)
                {
                  *((_DWORD *)v218 + 2) = v302;
                  *(_QWORD *)v218 = v278;
                }
                else
                {
                  v223 = *(_QWORD *)a2;
                  *((_DWORD *)v218 + 2) = a2[2];
                  *(_QWORD *)v218 = v223;
                  a2[2] = v302;
                  *(_QWORD *)a2 = v278;
                  v224 = v218 - (char *)v10 + 12;
                  if (v224 >= 13)
                  {
                    v225 = (v224 / 0xCuLL - 2) >> 1;
                    v226 = &v10[3 * v225];
                    v228 = *(_DWORD *)v218;
                    v227 = *((_DWORD *)v218 + 1);
                    v229 = *v226 < *(_DWORD *)v218;
                    if (*v226 == *(_DWORD *)v218)
                      v229 = v226[1] < v227;
                    if (v229)
                    {
                      v230 = *((_DWORD *)v218 + 2);
                      do
                      {
                        v231 = v218;
                        v218 = (char *)v226;
                        v232 = *(_QWORD *)v226;
                        result = *((unsigned int *)v218 + 2);
                        *((_DWORD *)v231 + 2) = result;
                        *(_QWORD *)v231 = v232;
                        if (!v225)
                          break;
                        v225 = (v225 - 1) >> 1;
                        v226 = &v10[3 * v225];
                        result = v226[1] < v227;
                        v233 = *v226 < v228;
                        if (*v226 == v228)
                          v233 = v226[1] < v227;
                      }
                      while (v233);
                      *(_DWORD *)v218 = v228;
                      *((_DWORD *)v218 + 1) = v227;
                      *((_DWORD *)v218 + 2) = v230;
                    }
                  }
                }
              }
              while (v212-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *(a2 - 3);
          v16 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v23 = *v10;
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (*v10 != *v14)
              v26 = *v10 < *v14;
            v27 = v16 < v24;
            v179 = v15 == v23;
            v28 = v15 < v23;
            if (v179)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v282 = v14[2];
                v258 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v282;
                *(_QWORD *)v8 = v258;
                goto LABEL_54;
              }
              v289 = v14[2];
              v265 = *(_QWORD *)v14;
              v63 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v63;
              v10[2] = v289;
              *(_QWORD *)v10 = v265;
              v64 = *(a2 - 3);
              v179 = v64 == *v10;
              v65 = v64 < *v10;
              if (v179)
                v65 = *(a2 - 2) < v10[1];
              if (v65)
              {
                v282 = v10[2];
                v258 = *(_QWORD *)v10;
                v66 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v66;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v285 = v10[2];
              v261 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v33;
              *(a2 - 1) = v285;
              *(_QWORD *)v8 = v261;
              v34 = v10[1] < *v25;
              if (*v10 != *v14)
                v34 = *v10 < *v14;
              if (v34)
              {
                v286 = v14[2];
                v262 = *(_QWORD *)v14;
                v35 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v35;
                v10[2] = v286;
                *(_QWORD *)v10 = v262;
                --a3;
                v36 = v262;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v36 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v108 = *(v10 - 3);
            v67 = v10[1];
            v179 = v108 == v36;
            v109 = v108 < v36;
            if (v179)
              v109 = *(v10 - 2) < v67;
            if (v109)
              goto LABEL_97;
            v137 = *(a2 - 3);
            v179 = v36 == v137;
            v138 = v36 < v137;
            if (v179)
              v138 = v67 < *(a2 - 2);
            if (v138)
            {
              do
              {
                v139 = v10[3];
                v140 = v10[4];
                v10 += 3;
                v141 = v67 < v140;
                v179 = v36 == v139;
                v142 = v36 < v139;
                if (v179)
                  v142 = v141;
              }
              while (!v142);
            }
            else
            {
              v143 = v10 + 3;
              do
              {
                v10 = v143;
                if (v143 >= a2)
                  break;
                v144 = *v143;
                v145 = v67 < v10[1];
                v179 = v36 == v144;
                v146 = v36 < v144;
                if (!v179)
                  v145 = v146;
                v143 = v10 + 3;
              }
              while (!v145);
            }
            v147 = a2;
            if (v10 < a2)
            {
              v147 = a2;
              do
              {
                v148 = *(v147 - 3);
                v149 = *(v147 - 2);
                v147 -= 3;
                v150 = v67 < v149;
                v179 = v36 == v148;
                v151 = v36 < v148;
                if (v179)
                  v151 = v150;
              }
              while (v151);
            }
            v152 = v7[2];
            while (v10 < v147)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v153 = *(_QWORD *)v147;
              v10[2] = v147[2];
              *(_QWORD *)v10 = v153;
              v147[2] = v299;
              *(_QWORD *)v147 = v275;
              do
              {
                v154 = v10[3];
                v155 = v10[4];
                v10 += 3;
                v156 = v67 < v155;
                v179 = v36 == v154;
                v157 = v36 < v154;
                if (v179)
                  v157 = v156;
              }
              while (!v157);
              do
              {
                v158 = *(v147 - 3);
                v159 = *(v147 - 2);
                v147 -= 3;
                v160 = v67 < v159;
                v179 = v36 == v158;
                v161 = v36 < v158;
                if (v179)
                  v161 = v160;
              }
              while (v161);
            }
            if (v10 - 3 != v7)
            {
              v162 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v162;
            }
            a4 = 0;
            *(v10 - 3) = v36;
            *(v10 - 2) = v67;
            *(v10 - 1) = v152;
            continue;
          }
          v17 = *v14;
          v18 = &v10[3 * v13 + 1];
          v19 = *v14 < *v10;
          if (*v14 == *v10)
            v19 = *v18 < v10[1];
          v20 = v16 < *v18;
          v179 = v15 == v17;
          v21 = v15 < v17;
          if (v179)
            v21 = v20;
          if (v19)
          {
            if (v21)
            {
              v281 = v10[2];
              v257 = *(_QWORD *)v10;
              v22 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v22;
LABEL_36:
              *(a2 - 1) = v281;
              *(_QWORD *)v8 = v257;
              goto LABEL_37;
            }
            v287 = v10[2];
            v263 = *(_QWORD *)v10;
            v37 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v37;
            v14[2] = v287;
            *(_QWORD *)v14 = v263;
            v38 = *(a2 - 3);
            v39 = v38 < v263;
            if (v38 == (_DWORD)v263)
              v39 = *(a2 - 2) < *v18;
            if (v39)
            {
              v281 = v14[2];
              v257 = *(_QWORD *)v14;
              v40 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v40;
              goto LABEL_36;
            }
          }
          else if (v21)
          {
            v283 = v14[2];
            v259 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v283;
            *(_QWORD *)v8 = v259;
            v31 = *v14 < *v10;
            if (*v14 == *v10)
              v31 = *v18 < v10[1];
            if (v31)
            {
              v284 = v10[2];
              v260 = *(_QWORD *)v10;
              v32 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v32;
              v14[2] = v284;
              *(_QWORD *)v14 = v260;
            }
          }
LABEL_37:
          v41 = (uint64_t *)(v10 + 3);
          v42 = v10[3];
          v43 = &v10[3 * v13];
          v46 = *(v43 - 3);
          v44 = v43 - 3;
          v45 = v46;
          v47 = v44 + 1;
          v48 = v44[1];
          v49 = v48 < v10[4];
          v179 = v46 == v42;
          v50 = v46 < v42;
          if (!v179)
            v49 = v50;
          v51 = *(a2 - 6);
          v52 = *(a2 - 5) < v48;
          v179 = v51 == v45;
          v53 = v51 < v45;
          if (v179)
            v53 = v52;
          if (v49)
          {
            if (v53)
            {
              v54 = *v41;
              v55 = v10[5];
              v56 = *(a2 - 4);
              *v41 = *(_QWORD *)v256;
              v10[5] = v56;
              *(a2 - 4) = v55;
              *(_QWORD *)v256 = v54;
            }
            else
            {
              v68 = *v41;
              v69 = v10[5];
              v70 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v70;
              v44[2] = v69;
              *(_QWORD *)v44 = v68;
              v71 = v68;
              LODWORD(v68) = *(a2 - 6);
              v179 = (_DWORD)v68 == v71;
              v72 = v68 < v71;
              if (v179)
                v72 = *(a2 - 5) < *v47;
              if (v72)
              {
                v290 = v44[2];
                v266 = *(_QWORD *)v44;
                v73 = *(_QWORD *)v256;
                v44[2] = *(a2 - 4);
                *(_QWORD *)v44 = v73;
                *(a2 - 4) = v290;
                *(_QWORD *)v256 = v266;
              }
            }
          }
          else if (v53)
          {
            v288 = v44[2];
            v264 = *(_QWORD *)v44;
            v57 = *(_QWORD *)v256;
            v44[2] = *(a2 - 4);
            *(_QWORD *)v44 = v57;
            *(a2 - 4) = v288;
            *(_QWORD *)v256 = v264;
            v58 = v10[3];
            v59 = *v44 < v58;
            if (*v44 == v58)
              v59 = *v47 < v10[4];
            if (v59)
            {
              v60 = *v41;
              v61 = v10[5];
              v62 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v62;
              v44[2] = v61;
              *(_QWORD *)v44 = v60;
            }
          }
          v74 = (uint64_t *)(v10 + 6);
          v75 = v10[6];
          v76 = &v10[3 * v13];
          v79 = v76[3];
          v77 = v76 + 3;
          v78 = v79;
          v80 = v77 + 1;
          v81 = v77[1];
          v82 = v81 < v10[7];
          v179 = v79 == v75;
          v83 = v79 < v75;
          if (!v179)
            v82 = v83;
          v84 = *(a2 - 9);
          v85 = *(a2 - 8) < v81;
          v179 = v84 == v78;
          v86 = v84 < v78;
          if (v179)
            v86 = v85;
          if (v82)
          {
            if (v86)
            {
              v87 = *v74;
              v88 = v10[8];
              v89 = *(a2 - 7);
              *v74 = *(_QWORD *)v9;
              v10[8] = v89;
              *(a2 - 7) = v88;
              *(_QWORD *)v9 = v87;
            }
            else
            {
              v96 = *v74;
              v97 = v10[8];
              v98 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v98;
              v77[2] = v97;
              *(_QWORD *)v77 = v96;
              v99 = v96;
              LODWORD(v96) = *(a2 - 9);
              v179 = (_DWORD)v96 == v99;
              v100 = v96 < v99;
              if (v179)
                v100 = *(a2 - 8) < *v80;
              if (v100)
              {
                v292 = v77[2];
                v268 = *(_QWORD *)v77;
                v101 = *(_QWORD *)v9;
                v77[2] = *(a2 - 7);
                *(_QWORD *)v77 = v101;
                *(a2 - 7) = v292;
                *(_QWORD *)v9 = v268;
              }
            }
          }
          else if (v86)
          {
            v291 = v77[2];
            v267 = *(_QWORD *)v77;
            v90 = *(_QWORD *)v9;
            v77[2] = *(a2 - 7);
            *(_QWORD *)v77 = v90;
            *(a2 - 7) = v291;
            *(_QWORD *)v9 = v267;
            v91 = v10[6];
            v92 = *v77 < v91;
            if (*v77 == v91)
              v92 = *v80 < v10[7];
            if (v92)
            {
              v93 = *v74;
              v94 = v10[8];
              v95 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v95;
              v77[2] = v94;
              *(_QWORD *)v77 = v93;
            }
          }
          v102 = *v14;
          v103 = *v14 < *v44;
          if (*v14 == *v44)
            v103 = *v18 < *v47;
          result = *v80;
          v179 = *v77 == v102;
          v104 = *v77 < v102;
          if (v179)
            v104 = result < *v18;
          if (v103)
          {
            if (v104)
            {
              v293 = v44[2];
              v269 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v77;
              v44[2] = v77[2];
LABEL_92:
              v77[2] = v293;
              *(_QWORD *)v77 = v269;
              goto LABEL_93;
            }
            v296 = v44[2];
            v272 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v14;
            v44[2] = v14[2];
            v14[2] = v296;
            *(_QWORD *)v14 = v272;
            v106 = *v80 < *v18;
            if (*v77 != *v14)
              v106 = *v77 < *v14;
            if (v106)
            {
              v293 = v14[2];
              v269 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v77;
              v14[2] = v77[2];
              goto LABEL_92;
            }
          }
          else if (v104)
          {
            v294 = v14[2];
            v270 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v77;
            v14[2] = v77[2];
            v77[2] = v294;
            *(_QWORD *)v77 = v270;
            v105 = *v18 < *v47;
            if (*v14 != *v44)
              v105 = *v14 < *v44;
            if (v105)
            {
              v295 = v44[2];
              v271 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v14;
              v44[2] = v14[2];
              v14[2] = v295;
              *(_QWORD *)v14 = v271;
            }
          }
LABEL_93:
          v297 = v10[2];
          v273 = *(_QWORD *)v10;
          v107 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v107;
          v14[2] = v297;
          *(_QWORD *)v14 = v273;
          --a3;
          v36 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v67 = v10[1];
LABEL_97:
          v110 = 0;
          v111 = v10[2];
          do
          {
            v112 = v10[v110 + 3];
            v113 = v10[v110 + 4] < v67;
            v179 = v112 == v36;
            v114 = v112 < v36;
            if (!v179)
              v113 = v114;
            v110 += 3;
          }
          while (v113);
          v115 = &v10[v110];
          v116 = a2;
          if (v110 == 3)
          {
            v116 = a2;
            do
            {
              if (v115 >= v116)
                break;
              v121 = *(v116 - 3);
              v122 = *(v116 - 2);
              v116 -= 3;
              v123 = v122 < v67;
              v179 = v121 == v36;
              v124 = v121 < v36;
              if (v179)
                v124 = v123;
            }
            while (!v124);
          }
          else
          {
            do
            {
              v117 = *(v116 - 3);
              v118 = *(v116 - 2);
              v116 -= 3;
              v119 = v118 < v67;
              v179 = v117 == v36;
              v120 = v117 < v36;
              if (v179)
                v120 = v119;
            }
            while (!v120);
          }
          v10 = v115;
          if (v115 < v116)
          {
            v125 = (unint64_t)v116;
            do
            {
              v298 = v10[2];
              v274 = *(_QWORD *)v10;
              v126 = *(_QWORD *)v125;
              v10[2] = *(_DWORD *)(v125 + 8);
              *(_QWORD *)v10 = v126;
              *(_DWORD *)(v125 + 8) = v298;
              *(_QWORD *)v125 = v274;
              do
              {
                v127 = v10[3];
                v128 = v10[4];
                v10 += 3;
                v129 = v128 < v67;
                v179 = v127 == v36;
                v130 = v127 < v36;
                if (v179)
                  v130 = v129;
              }
              while (v130);
              do
              {
                v131 = *(_DWORD *)(v125 - 12);
                v132 = *(_DWORD *)(v125 - 8);
                v125 -= 12;
                v133 = v132 < v67;
                v179 = v131 == v36;
                v134 = v131 < v36;
                if (v179)
                  v134 = v133;
              }
              while (!v134);
            }
            while ((unint64_t)v10 < v125);
          }
          if (v10 - 3 != v7)
          {
            v135 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v135;
          }
          *(v10 - 3) = v36;
          *(v10 - 2) = v67;
          *(v10 - 1) = v111;
          if (v115 < v116)
            goto LABEL_126;
          v136 = sub_20F3D855C(v7, v10 - 3);
          result = sub_20F3D855C(v10, a2);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_126:
            result = sub_20F3D7328(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v136)
            return result;
          goto LABEL_2;
        }
        v178 = v10 + 3;
        v179 = v10 == a2 || v178 == a2;
        v180 = v179;
        if ((a4 & 1) != 0)
        {
          if ((v180 & 1) == 0)
          {
            v181 = 0;
            v182 = v10;
            do
            {
              v184 = v178;
              v185 = v182[3];
              v186 = v182[4];
              v187 = v185 < *v182;
              if (v185 == *v182)
                v187 = v186 < v182[1];
              if (v187)
              {
                v188 = v182[5];
                v189 = v181;
                do
                {
                  v190 = (char *)v10 + v189;
                  *(_QWORD *)(v190 + 12) = *(_QWORD *)((char *)v10 + v189);
                  *((_DWORD *)v190 + 5) = *(unsigned int *)((char *)v10 + v189 + 8);
                  if (!v189)
                  {
                    v183 = v10;
                    goto LABEL_184;
                  }
                  v191 = *((_DWORD *)v190 - 3);
                  v192 = v186 < *((_DWORD *)v190 - 2);
                  v179 = v185 == v191;
                  v193 = v185 < v191;
                  if (!v179)
                    v192 = v193;
                  v189 -= 12;
                }
                while (v192);
                v183 = (unsigned int *)((char *)v10 + v189 + 12);
LABEL_184:
                *v183 = v185;
                v183[1] = v186;
                v183[2] = v188;
              }
              v178 = v184 + 3;
              v181 += 12;
              v182 = v184;
            }
            while (v184 + 3 != a2);
          }
        }
        else if ((v180 & 1) == 0)
        {
          do
          {
            v239 = v178;
            v240 = v7[3];
            v241 = v7[4];
            v242 = v240 < *v7;
            if (v240 == *v7)
              v242 = v241 < v7[1];
            if (v242)
            {
              v243 = v7[5];
              v244 = v239;
              do
              {
                v245 = v244;
                v246 = *(_QWORD *)(v244 - 3);
                v244 -= 3;
                *(_QWORD *)v245 = v246;
                v245[2] = *(v245 - 1);
                v247 = *(v245 - 6);
                v248 = v241 < *(v245 - 5);
                v179 = v240 == v247;
                v249 = v240 < v247;
                if (!v179)
                  v248 = v249;
              }
              while (v248);
              *v244 = v240;
              v244[1] = v241;
              v244[2] = v243;
            }
            v178 = v239 + 3;
            v7 = v239;
          }
          while (v239 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F3D855C(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  BOOL v76;
  BOOL v77;
  _DWORD *v78;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
          return 1;
        }
        v50 = a1[2];
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v12;
        a1[2] = a1[5];
        *v12 = v51;
        a1[5] = v50;
        v52 = *(a2 - 3);
        v53 = a1[3];
        v7 = v52 == v53;
        v54 = v52 < v53;
        if (v7)
          v54 = *(a2 - 2) < a1[4];
        if (v54)
        {
          v55 = a1[5];
          v56 = *v12;
          v57 = *(a2 - 1);
          *v12 = *(_QWORD *)v16;
          a1[5] = v57;
          *(_QWORD *)v16 = v56;
          *(a2 - 1) = v55;
          return 1;
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BCB74(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F396580(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v67 = *v64;
    v68 = v64[1];
    v69 = *v23;
    v70 = v68 < v23[1];
    v7 = *v64 == v69;
    v71 = *v64 < v69;
    if (!v7)
      v70 = v71;
    if (v70)
      break;
LABEL_55:
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
  v72 = v64[2];
  v73 = v65;
  do
  {
    v74 = (char *)a1 + v73;
    *(_QWORD *)(v74 + 36) = *(_QWORD *)((char *)a1 + v73 + 24);
    *((_DWORD *)v74 + 11) = *(unsigned int *)((char *)a1 + v73 + 32);
    if (v73 == -24)
    {
      *a1 = v67;
      a1[1] = v68;
      a1[2] = v72;
      if (++v66 != 8)
        goto LABEL_55;
      return v64 + 3 == a2;
    }
    v75 = *((_DWORD *)v74 + 3);
    v76 = v68 < *((_DWORD *)v74 + 4);
    v7 = v67 == v75;
    v77 = v67 < v75;
    if (!v7)
      v76 = v77;
    v73 -= 12;
  }
  while (v76);
  v78 = (unsigned int *)((char *)a1 + v73);
  v78[9] = v67;
  v78[10] = v68;
  v78[11] = v72;
  if (++v66 != 8)
    goto LABEL_55;
  return v64 + 3 == a2;
}

uint64_t sub_20F3D89F0(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unsigned int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  BOOL v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  _BOOL4 v123;
  _BOOL4 v124;
  unsigned int v125;
  unsigned int v126;
  BOOL v127;
  BOOL v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  _BOOL4 v137;
  _BOOL4 v138;
  uint64_t v139;
  BOOL v140;
  unsigned int v141;
  BOOL v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  BOOL v146;
  unsigned int *v147;
  unsigned int v148;
  _BOOL4 v149;
  _BOOL4 v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  BOOL v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  _BOOL4 v161;
  unsigned int v162;
  unsigned int v163;
  BOOL v164;
  BOOL v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  BOOL v171;
  unsigned int *v172;
  unsigned int v173;
  _BOOL4 v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  _BOOL4 v180;
  _BOOL4 v181;
  uint64_t v182;
  unsigned int *v183;
  BOOL v184;
  char v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  _BOOL4 v193;
  unsigned int v194;
  uint64_t v195;
  char *v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  int64_t v200;
  int64_t v201;
  int64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  _BOOL4 v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  unsigned int v214;
  unsigned int v215;
  _BOOL4 v216;
  BOOL v217;
  unsigned int v218;
  unsigned int v219;
  _BOOL4 v220;
  _BOOL4 v221;
  unsigned int *v222;
  uint64_t v223;
  uint64_t v224;
  int64_t v225;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  _BOOL4 v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  _BOOL4 v244;
  int v245;
  char *v246;
  uint64_t v247;
  unsigned int v248;
  BOOL v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  _BOOL4 v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _BOOL4 v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int *v263;
  uint64_t v264;
  unsigned int v265;
  BOOL v266;
  BOOL v267;
  unsigned int v268;
  unsigned int v269;
  _BOOL4 v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v274 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v176 = *(a2 - 3);
        v177 = *(a2 - 2);
        v178 = a2 - 3;
        v179 = v10[1];
        v180 = v176 < *v10;
        v184 = v177 == v179;
        v181 = v177 < v179;
        if (!v184)
          v180 = v181;
        if (v180)
        {
          v319 = v10[2];
          v295 = *(_QWORD *)v10;
          v182 = *(_QWORD *)v178;
          v10[2] = v178[2];
          *(_QWORD *)v10 = v182;
          v178[2] = v319;
          *(_QWORD *)v178 = v295;
        }
        return result;
      case 3:
        v167 = v10 + 3;
        v168 = v10[3];
        v169 = v10[4];
        v170 = v10[1];
        v184 = v169 == v170;
        v171 = v169 < v170;
        if (v184)
          v171 = v168 < *v10;
        v173 = *(a2 - 2);
        v172 = a2 - 3;
        v174 = *(a2 - 3) < v168;
        if (v173 != v169)
          v174 = v173 < v169;
        if (v171)
        {
          if (v174)
          {
            v318 = v10[2];
            v294 = *(_QWORD *)v10;
            v175 = *(_QWORD *)v172;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v175;
            *(a2 - 1) = v318;
            *(_QWORD *)v172 = v294;
          }
          else
          {
            v322 = v10[2];
            v298 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v298;
            v10[5] = v322;
            v268 = *(a2 - 2);
            v269 = v10[4];
            v184 = v268 == v269;
            v270 = v268 < v269;
            if (v184)
              v270 = *(a2 - 3) < v10[3];
            if (v270)
            {
              v271 = *v167;
              v272 = v10[5];
              v273 = *(a2 - 1);
              *v167 = *(_QWORD *)v172;
              v10[5] = v273;
              *(a2 - 1) = v272;
              *(_QWORD *)v172 = v271;
            }
          }
        }
        else if (v174)
        {
          v250 = *v167;
          v251 = v10[5];
          v252 = *(a2 - 1);
          *v167 = *(_QWORD *)v172;
          v10[5] = v252;
          *(a2 - 1) = v251;
          *(_QWORD *)v172 = v250;
          v253 = v10[4];
          v254 = v10[1];
          v184 = v253 == v254;
          v255 = v253 < v254;
          if (v184)
            v255 = v10[3] < *v10;
          if (v255)
          {
            v321 = v10[2];
            v297 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v297;
            v10[5] = v321;
          }
        }
        return result;
      case 4:
        return (uint64_t)sub_20F2BE75C(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (uint64_t)sub_20F397DA0(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v200 = (unint64_t)(v12 - 2) >> 1;
              v201 = v200;
              do
              {
                v202 = v201;
                if (v200 >= v201)
                {
                  v203 = (2 * v201) | 1;
                  v204 = &v10[3 * v203];
                  if (2 * v202 + 2 >= v12)
                  {
                    v207 = *v204;
                  }
                  else
                  {
                    v205 = v10[3 * v203 + 1];
                    v206 = v204[4];
                    v207 = *v204;
                    v184 = v205 == v206;
                    v208 = v205 < v206;
                    if (v184)
                      v208 = *v204 < v204[3];
                    if (v208)
                    {
                      v207 = v204[3];
                      v204 += 3;
                      v203 = 2 * v202 + 2;
                    }
                  }
                  v209 = &v10[3 * v202];
                  v210 = v204[1];
                  v211 = v209[1];
                  v212 = *v209;
                  LODWORD(result) = v207 < *v209;
                  v184 = v210 == v211;
                  v213 = v210 < v211;
                  if (v184)
                    result = result;
                  else
                    result = v213;
                  if ((result & 1) == 0)
                  {
                    result = v209[2];
                    do
                    {
                      v222 = v209;
                      v209 = v204;
                      v223 = *(_QWORD *)v204;
                      v222[2] = v209[2];
                      *(_QWORD *)v222 = v223;
                      if (v200 < v203)
                        break;
                      v224 = (2 * v203) | 1;
                      v204 = &v10[3 * v224];
                      v203 = 2 * v203 + 2;
                      if (v203 < v12)
                      {
                        v214 = v10[3 * v224 + 1];
                        v215 = v204[4];
                        v184 = v214 == v215;
                        v216 = v214 < v215;
                        if (v184)
                          v216 = *v204 < v204[3];
                        v217 = !v216;
                        v218 = v216 ? v204[3] : *v204;
                        if (v217)
                          v203 = v224;
                        else
                          v204 += 3;
                      }
                      else
                      {
                        v218 = *v204;
                        v203 = v224;
                      }
                      v219 = v204[1];
                      v220 = v218 < v212;
                      v184 = v219 == v211;
                      v221 = v219 < v211;
                      if (v184)
                        v221 = v220;
                    }
                    while (!v221);
                    *v209 = v212;
                    v209[1] = v211;
                    v209[2] = result;
                  }
                }
                v201 = v202 - 1;
              }
              while (v202);
              v225 = v11 / 0xCuLL;
              do
              {
                v227 = 0;
                v320 = v10[2];
                v296 = *(_QWORD *)v10;
                v228 = (char *)v10;
                do
                {
                  v230 = v227 + 1;
                  v231 = &v228[12 * v227 + 12];
                  v232 = (2 * v227) | 1;
                  v233 = 2 * v227 + 2;
                  if (v233 < v225)
                  {
                    v234 = *(_DWORD *)&v228[12 * v230 + 4];
                    v235 = *((_DWORD *)v231 + 4);
                    result = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    v184 = v234 == v235;
                    v236 = v234 < v235;
                    if (v184)
                      v236 = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    if (v236)
                    {
                      v231 += 12;
                      v232 = v233;
                    }
                  }
                  v229 = *(_QWORD *)v231;
                  *((_DWORD *)v228 + 2) = *((_DWORD *)v231 + 2);
                  *(_QWORD *)v228 = v229;
                  v228 = v231;
                  v227 = v232;
                }
                while (v232 <= (uint64_t)((unint64_t)(v225 - 2) >> 1));
                a2 -= 3;
                if (v231 == (char *)a2)
                {
                  *((_DWORD *)v231 + 2) = v320;
                  *(_QWORD *)v231 = v296;
                }
                else
                {
                  v237 = *(_QWORD *)a2;
                  *((_DWORD *)v231 + 2) = a2[2];
                  *(_QWORD *)v231 = v237;
                  a2[2] = v320;
                  *(_QWORD *)a2 = v296;
                  v238 = v231 - (char *)v10 + 12;
                  if (v238 >= 13)
                  {
                    v239 = (v238 / 0xCuLL - 2) >> 1;
                    v240 = (char *)&v10[3 * v239];
                    v241 = *((_DWORD *)v240 + 1);
                    v243 = *(_DWORD *)v231;
                    v242 = *((_DWORD *)v231 + 1);
                    v184 = v241 == v242;
                    v244 = v241 < v242;
                    if (v184)
                      v244 = *(_DWORD *)v240 < *(_DWORD *)v231;
                    if (v244)
                    {
                      v245 = *((_DWORD *)v231 + 2);
                      do
                      {
                        v246 = v231;
                        v231 = v240;
                        v247 = *(_QWORD *)v240;
                        result = *((unsigned int *)v231 + 2);
                        *((_DWORD *)v246 + 2) = result;
                        *(_QWORD *)v246 = v247;
                        if (!v239)
                          break;
                        v239 = (v239 - 1) >> 1;
                        v240 = (char *)&v10[3 * v239];
                        v248 = *((_DWORD *)v240 + 1);
                        result = *(_DWORD *)v240 < v243;
                        v184 = v248 == v242;
                        v249 = v248 < v242;
                        if (v184)
                          v249 = *(_DWORD *)v240 < v243;
                      }
                      while (v249);
                      *(_DWORD *)v231 = v243;
                      *((_DWORD *)v231 + 1) = v242;
                      *((_DWORD *)v231 + 2) = v245;
                    }
                  }
                }
              }
              while (v225-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v16 = *(a2 - 3);
          v15 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (v24 == *v25)
              v26 = *v10 < *v14;
            v27 = v16 < *v10;
            v184 = v15 == v24;
            v28 = v15 < v24;
            if (v184)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v300 = v14[2];
                v276 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v300;
                *(_QWORD *)v8 = v276;
                goto LABEL_54;
              }
              v307 = v14[2];
              v283 = *(_QWORD *)v14;
              v65 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v65;
              v10[2] = v307;
              *(_QWORD *)v10 = v283;
              v66 = *(a2 - 2);
              v67 = v10[1];
              v184 = v66 == v67;
              v68 = v66 < v67;
              if (v184)
                v68 = *(a2 - 3) < *v10;
              if (v68)
              {
                v300 = v10[2];
                v276 = *(_QWORD *)v10;
                v69 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v69;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v303 = v10[2];
              v279 = *(_QWORD *)v10;
              v34 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v34;
              *(a2 - 1) = v303;
              *(_QWORD *)v8 = v279;
              v35 = *v25;
              LODWORD(v34) = v10[1];
              v184 = (_DWORD)v34 == v35;
              v36 = v34 < v35;
              if (v184)
                v36 = *v10 < *v14;
              if (v36)
              {
                v304 = v14[2];
                v280 = *(_QWORD *)v14;
                v37 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v37;
                v10[2] = v304;
                *(_QWORD *)v10 = v280;
                --a3;
                v38 = v280;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v38 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v70 = v10[1];
            v112 = *(v10 - 2);
            v184 = v112 == v70;
            v113 = v112 < v70;
            if (v184)
              v113 = *(v10 - 3) < v38;
            if (v113)
              goto LABEL_97;
            v141 = *(a2 - 2);
            v184 = v70 == v141;
            v142 = v70 < v141;
            if (v184)
              v142 = v38 < *(a2 - 3);
            if (v142)
            {
              do
              {
                v143 = v10[3];
                v144 = v10[4];
                v10 += 3;
                v145 = v38 < v143;
                v184 = v70 == v144;
                v146 = v70 < v144;
                if (!v184)
                  v145 = v146;
              }
              while (!v145);
            }
            else
            {
              v147 = v10 + 3;
              do
              {
                v10 = v147;
                if (v147 >= a2)
                  break;
                v148 = v147[1];
                v149 = v38 < *v10;
                v184 = v70 == v148;
                v150 = v70 < v148;
                if (!v184)
                  v149 = v150;
                v147 = v10 + 3;
              }
              while (!v149);
            }
            v151 = a2;
            if (v10 < a2)
            {
              v151 = a2;
              do
              {
                v152 = *(v151 - 3);
                v153 = *(v151 - 2);
                v151 -= 3;
                v154 = v38 < v152;
                v184 = v70 == v153;
                v155 = v70 < v153;
                if (!v184)
                  v154 = v155;
              }
              while (v154);
            }
            v156 = v7[2];
            while (v10 < v151)
            {
              v317 = v10[2];
              v293 = *(_QWORD *)v10;
              v157 = *(_QWORD *)v151;
              v10[2] = v151[2];
              *(_QWORD *)v10 = v157;
              v151[2] = v317;
              *(_QWORD *)v151 = v293;
              do
              {
                v158 = v10[3];
                v159 = v10[4];
                v10 += 3;
                v160 = v38 < v158;
                v184 = v70 == v159;
                v161 = v70 < v159;
                if (!v184)
                  v160 = v161;
              }
              while (!v160);
              do
              {
                v162 = *(v151 - 3);
                v163 = *(v151 - 2);
                v151 -= 3;
                v164 = v38 < v162;
                v184 = v70 == v163;
                v165 = v70 < v163;
                if (!v184)
                  v164 = v165;
              }
              while (v164);
            }
            if (v10 - 3 != v7)
            {
              v166 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v166;
            }
            a4 = 0;
            *(v10 - 3) = v38;
            *(v10 - 2) = v70;
            *(v10 - 1) = v156;
            continue;
          }
          v17 = v10[1];
          v18 = &v10[3 * v13 + 1];
          v19 = *v18;
          v184 = *v18 == v17;
          v20 = *v18 < v17;
          if (v184)
            v20 = *v14 < *v10;
          v21 = v16 < *v14;
          v184 = v15 == v19;
          v22 = v15 < v19;
          if (v184)
            v22 = v21;
          if (v20)
          {
            if (v22)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v23 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v23;
LABEL_36:
              *(a2 - 1) = v299;
              *(_QWORD *)v8 = v275;
              goto LABEL_37;
            }
            v305 = v10[2];
            v281 = *(_QWORD *)v10;
            v39 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v39;
            v14[2] = v305;
            *(_QWORD *)v14 = v281;
            v40 = *(a2 - 2);
            v41 = v40 < *v18;
            if (v40 == *v18)
              v41 = *(a2 - 3) < *v14;
            if (v41)
            {
              v299 = v14[2];
              v275 = *(_QWORD *)v14;
              v42 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v42;
              goto LABEL_36;
            }
          }
          else if (v22)
          {
            v301 = v14[2];
            v277 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v301;
            *(_QWORD *)v8 = v277;
            v31 = v10[1];
            v32 = *v18 < v31;
            if (*v18 == v31)
              v32 = *v14 < *v10;
            if (v32)
            {
              v302 = v10[2];
              v278 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v33;
              v14[2] = v302;
              *(_QWORD *)v14 = v278;
            }
          }
LABEL_37:
          v43 = (uint64_t *)(v10 + 3);
          v44 = &v10[3 * v13];
          v47 = *(v44 - 3);
          v45 = v44 - 3;
          v46 = v47;
          v48 = v45 + 1;
          v49 = v45[1];
          v50 = v10[4];
          v51 = v47 < v10[3];
          v184 = v49 == v50;
          v52 = v49 < v50;
          if (v184)
            v52 = v51;
          v53 = *(a2 - 5);
          v54 = *(a2 - 6) < v46;
          v184 = v53 == v49;
          v55 = v53 < v49;
          if (v184)
            v55 = v54;
          if (v52)
          {
            if (v55)
            {
              v56 = *v43;
              v57 = v10[5];
              v58 = *(a2 - 4);
              *v43 = *(_QWORD *)v274;
              v10[5] = v58;
              *(a2 - 4) = v57;
              *(_QWORD *)v274 = v56;
            }
            else
            {
              v71 = *v43;
              v72 = v10[5];
              v73 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v73;
              v45[2] = v72;
              *(_QWORD *)v45 = v71;
              LODWORD(v71) = *(a2 - 5);
              v74 = v71 < *v48;
              if ((_DWORD)v71 == *v48)
                v74 = *(a2 - 6) < *v45;
              if (v74)
              {
                v308 = v45[2];
                v284 = *(_QWORD *)v45;
                v75 = *(_QWORD *)v274;
                v45[2] = *(a2 - 4);
                *(_QWORD *)v45 = v75;
                *(a2 - 4) = v308;
                *(_QWORD *)v274 = v284;
              }
            }
          }
          else if (v55)
          {
            v306 = v45[2];
            v282 = *(_QWORD *)v45;
            v59 = *(_QWORD *)v274;
            v45[2] = *(a2 - 4);
            *(_QWORD *)v45 = v59;
            *(a2 - 4) = v306;
            *(_QWORD *)v274 = v282;
            v60 = v10[4];
            v61 = *v48 < v60;
            if (*v48 == v60)
              v61 = *v45 < v10[3];
            if (v61)
            {
              v62 = *v43;
              v63 = v10[5];
              v64 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v64;
              v45[2] = v63;
              *(_QWORD *)v45 = v62;
            }
          }
          v76 = (uint64_t *)(v10 + 6);
          v77 = &v10[3 * v13];
          v80 = v77[3];
          v78 = v77 + 3;
          v79 = v80;
          v81 = v78 + 1;
          v82 = v78[1];
          v83 = v10[7];
          v84 = v80 < v10[6];
          v184 = v82 == v83;
          v85 = v82 < v83;
          if (v184)
            v85 = v84;
          v86 = *(a2 - 8);
          v87 = *(a2 - 9) < v79;
          v184 = v86 == v82;
          v88 = v86 < v82;
          if (v184)
            v88 = v87;
          if (v85)
          {
            if (v88)
            {
              v89 = *v76;
              v90 = v10[8];
              v91 = *(a2 - 7);
              *v76 = *(_QWORD *)v9;
              v10[8] = v91;
              *(a2 - 7) = v90;
              *(_QWORD *)v9 = v89;
            }
            else
            {
              v98 = *v76;
              v99 = v10[8];
              v100 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v100;
              v78[2] = v99;
              *(_QWORD *)v78 = v98;
              LODWORD(v98) = *(a2 - 8);
              v101 = v98 < *v81;
              if ((_DWORD)v98 == *v81)
                v101 = *(a2 - 9) < *v78;
              if (v101)
              {
                v310 = v78[2];
                v286 = *(_QWORD *)v78;
                v102 = *(_QWORD *)v9;
                v78[2] = *(a2 - 7);
                *(_QWORD *)v78 = v102;
                *(a2 - 7) = v310;
                *(_QWORD *)v9 = v286;
              }
            }
          }
          else if (v88)
          {
            v309 = v78[2];
            v285 = *(_QWORD *)v78;
            v92 = *(_QWORD *)v9;
            v78[2] = *(a2 - 7);
            *(_QWORD *)v78 = v92;
            *(a2 - 7) = v309;
            *(_QWORD *)v9 = v285;
            v93 = v10[7];
            v94 = *v81 < v93;
            if (*v81 == v93)
              v94 = *v78 < v10[6];
            if (v94)
            {
              v95 = *v76;
              v96 = v10[8];
              v97 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v97;
              v78[2] = v96;
              *(_QWORD *)v78 = v95;
            }
          }
          v103 = *v18;
          v104 = *v18 < *v48;
          if (*v18 == *v48)
            v104 = *v14 < *v45;
          result = *v78;
          v184 = *v81 == v103;
          v105 = *v81 < v103;
          if (v184)
            v105 = result < *v14;
          if (v104)
          {
            if (v105)
            {
              v311 = v45[2];
              v287 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v78;
              v45[2] = v78[2];
LABEL_92:
              v78[2] = v311;
              *(_QWORD *)v78 = v287;
              goto LABEL_93;
            }
            v314 = v45[2];
            v290 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *(_QWORD *)v14;
            v45[2] = v14[2];
            v14[2] = v314;
            *(_QWORD *)v14 = v290;
            v109 = *v18;
            v184 = *v81 == v109;
            v110 = *v81 < v109;
            if (v184)
              v110 = *v78 < *v14;
            if (v110)
            {
              v311 = v14[2];
              v287 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v78;
              v14[2] = v78[2];
              goto LABEL_92;
            }
          }
          else if (v105)
          {
            v312 = v14[2];
            v288 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v78;
            v14[2] = v78[2];
            v78[2] = v312;
            *(_QWORD *)v78 = v288;
            v106 = *v18;
            v107 = *v48;
            v184 = v106 == v107;
            v108 = v106 < v107;
            if (v184)
              v108 = *v14 < *v45;
            if (v108)
            {
              v313 = v45[2];
              v289 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v14;
              v45[2] = v14[2];
              v14[2] = v313;
              *(_QWORD *)v14 = v289;
            }
          }
LABEL_93:
          v315 = v10[2];
          v291 = *(_QWORD *)v10;
          v111 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v111;
          v14[2] = v315;
          *(_QWORD *)v14 = v291;
          --a3;
          v38 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v70 = v10[1];
LABEL_97:
          v114 = 0;
          v115 = v10[2];
          do
          {
            v116 = v10[v114 + 4];
            v117 = v10[v114 + 3] < v38;
            v184 = v116 == v70;
            v118 = v116 < v70;
            if (!v184)
              v117 = v118;
            v114 += 3;
          }
          while (v117);
          v119 = &v10[v114];
          v120 = a2;
          if (v114 == 3)
          {
            v120 = a2;
            do
            {
              if (v119 >= v120)
                break;
              v125 = *(v120 - 3);
              v126 = *(v120 - 2);
              v120 -= 3;
              v127 = v125 < v38;
              v184 = v126 == v70;
              v128 = v126 < v70;
              if (!v184)
                v127 = v128;
            }
            while (!v127);
          }
          else
          {
            do
            {
              v121 = *(v120 - 3);
              v122 = *(v120 - 2);
              v120 -= 3;
              v123 = v121 < v38;
              v184 = v122 == v70;
              v124 = v122 < v70;
              if (!v184)
                v123 = v124;
            }
            while (!v123);
          }
          v10 = v119;
          if (v119 < v120)
          {
            v129 = (unint64_t)v120;
            do
            {
              v316 = v10[2];
              v292 = *(_QWORD *)v10;
              v130 = *(_QWORD *)v129;
              v10[2] = *(_DWORD *)(v129 + 8);
              *(_QWORD *)v10 = v130;
              *(_DWORD *)(v129 + 8) = v316;
              *(_QWORD *)v129 = v292;
              do
              {
                v131 = v10[3];
                v132 = v10[4];
                v10 += 3;
                v133 = v131 < v38;
                v184 = v132 == v70;
                v134 = v132 < v70;
                if (!v184)
                  v133 = v134;
              }
              while (v133);
              do
              {
                v135 = *(_DWORD *)(v129 - 12);
                v136 = *(_DWORD *)(v129 - 8);
                v129 -= 12;
                v137 = v135 < v38;
                v184 = v136 == v70;
                v138 = v136 < v70;
                if (!v184)
                  v137 = v138;
              }
              while (!v137);
            }
            while ((unint64_t)v10 < v129);
          }
          if (v10 - 3 != v7)
          {
            v139 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v139;
          }
          *(v10 - 3) = v38;
          *(v10 - 2) = v70;
          *(v10 - 1) = v115;
          if (v119 < v120)
            goto LABEL_126;
          v140 = sub_20F3D9C24(v7, v10 - 3);
          result = sub_20F3D9C24(v10, a2);
          if (!(_DWORD)result)
          {
            if (v140)
              continue;
LABEL_126:
            result = sub_20F3D89F0(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v140)
            return result;
          goto LABEL_2;
        }
        v183 = v10 + 3;
        v184 = v10 == a2 || v183 == a2;
        v185 = v184;
        if ((a4 & 1) != 0)
        {
          if ((v185 & 1) == 0)
          {
            v186 = 0;
            v187 = v10;
            do
            {
              v189 = v183;
              v191 = v187[3];
              v190 = v187[4];
              v192 = v187[1];
              v184 = v190 == v192;
              v193 = v190 < v192;
              if (v184)
                v193 = v191 < *v187;
              if (v193)
              {
                v194 = v187[5];
                v195 = v186;
                do
                {
                  v196 = (char *)v10 + v195;
                  *(_QWORD *)(v196 + 12) = *(_QWORD *)((char *)v10 + v195);
                  *((_DWORD *)v196 + 5) = *(unsigned int *)((char *)v10 + v195 + 8);
                  if (!v195)
                  {
                    v188 = v10;
                    goto LABEL_184;
                  }
                  v197 = *((_DWORD *)v196 - 2);
                  v198 = v191 < *((_DWORD *)v196 - 3);
                  v184 = v190 == v197;
                  v199 = v190 < v197;
                  if (!v184)
                    v198 = v199;
                  v195 -= 12;
                }
                while (v198);
                v188 = (unsigned int *)((char *)v10 + v195 + 12);
LABEL_184:
                *v188 = v191;
                v188[1] = v190;
                v188[2] = v194;
              }
              v183 = v189 + 3;
              v186 += 12;
              v187 = v189;
            }
            while (v189 + 3 != a2);
          }
        }
        else if ((v185 & 1) == 0)
        {
          do
          {
            v256 = v183;
            v258 = v7[3];
            v257 = v7[4];
            v259 = v7[1];
            v184 = v257 == v259;
            v260 = v257 < v259;
            if (v184)
              v260 = v258 < *v7;
            if (v260)
            {
              v261 = v7[5];
              v262 = v256;
              do
              {
                v263 = v262;
                v264 = *(_QWORD *)(v262 - 3);
                v262 -= 3;
                *(_QWORD *)v263 = v264;
                v263[2] = *(v263 - 1);
                v265 = *(v263 - 5);
                v266 = v258 < *(v263 - 6);
                v184 = v257 == v265;
                v267 = v257 < v265;
                if (!v184)
                  v266 = v267;
              }
              while (v266);
              *v262 = v258;
              v262[1] = v257;
              v262[2] = v261;
            }
            v183 = v256 + 3;
            v7 = v256;
          }
          while (v256 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F3D9C24(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BE75C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F397DA0(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

uint64_t sub_20F3DA0B8(_QWORD *a1, void **a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;

  v4 = a1[56];
  v5 = *(_DWORD *)(v4 + 12);
  v6 = (4 * *(_DWORD *)(v4 + 8));
  v7 = v6 + 6 * *(_DWORD *)(a1[58] + 8);
  v8 = (4 * v5);
  v9 = v8 + 6 * *(_DWORD *)(a1[57] + 12);
  *((_DWORD *)a2 + 4) = v7;
  *((_DWORD *)a2 + 5) = v9;
  v10 = v9 * (unint64_t)v7;
  if ((unint64_t)a2[1] < v10)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    *a2 = 0;
    a2[1] = (void *)(v10 & 0x1FFFFFFFFFFFFFFCLL);
    *a2 = operator new(8 * v10, (std::align_val_t)0x20uLL);
    v7 = *((_DWORD *)a2 + 4);
    v9 = *((_DWORD *)a2 + 5);
  }
  v11 = v9 * v7;
  if (v11)
    bzero(*a2, 8 * v11);
  (*(void (**)(_QWORD *, void **, uint64_t))(a1[14] + 64))(a1 + 14, a2, v6);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[42] + 64))(a1 + 42, a2, v6 | ((unint64_t)v8 << 32));
  (*(void (**)(_QWORD *, void **, _QWORD))(*a1 + 64))(a1, a2, 0);
  return (*(uint64_t (**)(_QWORD *, void **, uint64_t))(a1[28] + 64))(a1 + 28, a2, v8 << 32);
}

void sub_20F3DA1D4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v8;
  unsigned int v9;
  void *v10;
  size_t v11;
  _DWORD *v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double cosval;
  __double2 v19;
  double v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v36;
  double v37;
  double v39;
  double v41;
  float64x2_t v43;
  double v49;
  float64x2_t v50;
  float64x2_t v52;
  int64x2_t v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  int8x16_t v57;
  uint64_t v58;
  int v59;
  double *v60;
  uint64_t v61;
  double v62;
  double v65;
  __int128 v66;
  float64x2_t v67;
  double v68;
  float64x2_t v69;
  double v70;
  float64x2_t v71;
  double v72;
  __int128 v73;
  uint64_t v74;

  v8 = *((unsigned int *)a4 + 4);
  v9 = v8;
  if ((_DWORD)v8 == *(_DWORD *)(a2 + 16))
  {
    v10 = *(void **)a2;
  }
  else
  {
    *(_DWORD *)(a2 + 16) = v8;
    v10 = *(void **)a2;
    if (*(_QWORD *)(a2 + 8) < v8)
    {
      if (v10)
      {
        MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
        v9 = *(_DWORD *)(a2 + 16);
      }
      v11 = (8 * v8 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v11 >> 3;
      v10 = operator new(v11, (std::align_val_t)0x20uLL);
      *(_QWORD *)a2 = v10;
    }
  }
  if (v9)
    bzero(v10, 8 * v9);
  if (*a3 != a3[1])
  {
    abort();
  }
  v13 = (_DWORD *)a3[3];
  v12 = (_DWORD *)a3[4];
  if (v13 != v12)
  {
    v14 = 0;
    v15 = *a4;
    v16 = *(_QWORD *)(a1 + 104);
    do
    {
      v16 -= 16;
      do
      {
        v59 = *(_DWORD *)(v16 + 16);
        v16 += 16;
      }
      while (*v13 != v59);
      v60 = (double *)(v15 + 8 * v14);
      v61 = *(_QWORD *)(v16 + 8);
      v62 = v60[2];
      _Q7 = *(_OWORD *)v60;
      _D13 = v60[1];
      __asm { FMLA            D0, D13, V7.D[1] }
      v65 = _D0 + v62 * v62;
      if (v65 >= 0.0000002635)
      {
        v17 = sqrt(v65);
        v66 = *(_OWORD *)v60;
        v19 = __sincos_stret(v17);
        cosval = v19.__cosval;
        *(_QWORD *)&_Q7 = v66;
        v21 = v19.__sinval / v17;
        v22 = 1.0 / v65 * (1.0 - v19.__cosval);
      }
      else
      {
        v22 = 0.5 - v65 * (v65 / -720.0 + 0.0416666667);
        v21 = 1.0 - v65 * (0.166666667 - v65 * (v65 / -5040.0 + 0.00833333333));
        cosval = 1.0 - v65 * v22;
      }
      v23 = *(double *)&_Q7 * v22;
      v24 = _D13 * v22;
      v25.f64[0] = cosval + *(double *)&_Q7 * (*(double *)&_Q7 * v22);
      v26 = cosval + _D13 * (_D13 * v22);
      v27 = cosval + v62 * (v62 * v22);
      v28 = _D13 * (*(double *)&_Q7 * v22);
      v29 = v62 * v24;
      v30 = *(double *)&_Q7 * v21;
      v31 = _D13 * v21;
      v32 = v62 * v21;
      v33 = v28 - v32;
      _Q0.f64[0] = v28 + v32;
      _D2 = v29 - v30;
      v36.f64[0] = v62 * v23 - v31;
      v25.f64[1] = v33;
      _Q0.f64[1] = v26;
      v36.f64[1] = v30 + v29;
      v37 = *(double *)(v61 + 48);
      _Q6 = *(float64x2_t *)(v61 + 32);
      v39 = *(double *)(v61 + 72);
      _Q16 = *(float64x2_t *)(v61 + 56);
      v41 = *(double *)(v61 + 96);
      _Q19 = *(float64x2_t *)(v61 + 80);
      v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, _Q6.f64[0]), _Q0, _Q6, 1), v36, v37);
      __asm { FMLA            D21, D2, V6.D[1] }
      v49 = _D21 + v27 * v37;
      v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, _Q16.f64[0]), _Q0, _Q16, 1), v36, v39);
      __asm { FMLA            D21, D2, V16.D[1] }
      v52 = vmlaq_laneq_f64(vmulq_n_f64(v25, _Q19.f64[0]), _Q0, _Q19, 1);
      __asm { FMLA            D0, D2, V19.D[1] }
      v68 = v49;
      v67 = v43;
      v70 = _D21 + v27 * v39;
      v69 = v50;
      v72 = _Q0.f64[0] + v27 * v41;
      v71 = vmlaq_n_f64(v52, v36, v41);
      v74 = 0;
      v73 = 0uLL;
      sub_20E9733B8(&v67, (double *)&v73);
      v53.i64[0] = v74;
      v54 = (float64x2_t *)(v15 + 8 * (v14 + 3));
      v55.f64[0] = *(float64_t *)(v61 + 120);
      v56.f64[0] = v54[1].f64[0];
      v57 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v61 + 104), *v54);
      v58 = *(_QWORD *)a2 + 8 * v14;
      *(_OWORD *)v58 = v73;
      *(int64x2_t *)(v58 + 16) = vzip1q_s64(v53, (int64x2_t)v57);
      *(int8x16_t *)(v58 + 32) = vextq_s8(v57, (int8x16_t)vsubq_f64(v55, v56), 8uLL);
      v14 += 6;
      ++v13;
    }
    while (v13 != v12);
  }
}

double sub_20F3DA534(_OWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;
  _OWORD v7[2];

  v3 = *(_QWORD *)(a2 + 8);
  if ((_OWORD *)(*(_QWORD *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 16)) == a1
    || (v4 = *(_QWORD *)(a2 + 16), *(_OWORD **)v4 == a1))
  {
    sub_20F3DA534(v7);
    result = *(double *)v7;
    v6 = v7[1];
    *a1 = v7[0];
    a1[1] = v6;
  }
  else if ((*(_DWORD *)v3 & 0x3FFFFFFF) != 0 && *(_DWORD *)(v4 + 16))
  {
    sub_20E8BE6CC();
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double sub_20F3DA5F4(_OWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;

  v3 = *(_QWORD *)(a2 + 8);
  if ((_OWORD *)(*(_QWORD *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 16)) == a1
    || (v4 = *(_QWORD *)(a2 + 16), *(_OWORD **)v4 == a1))
  {
    sub_20F3DA5F4(v7);
    v6 = v7[1];
    *a1 = v7[0];
    a1[1] = v6;
    result = *(double *)&v8;
    a1[2] = v8;
  }
  else if (6 * *(_DWORD *)v3 && *(_DWORD *)(v4 + 16))
  {
    sub_20E8BE6CC();
  }
  else
  {
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

BOOL sub_20F3DA6C4(uint64_t a1, int64x2_t **a2, float64x2_t *a3, float64x2_t *a4, double a5, double a6, double a7, double a8, int64x2_t a9)
{
  int v10;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t v16;
  int64x2_t v17;
  double v18;
  float64x2_t v20;
  int8x16_t v22;
  int8x16_t v23;
  double v24;
  double v31;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v36;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  int8x16_t v41;
  int64x2_t v42;
  float64x2_t v43;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  float64x2_t v52;
  float64x2_t v56;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  float64x2_t *v83;
  uint64_t v84;
  int v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  __int128 v93;
  __int128 v94;
  BOOL v95;
  float64x2_t v96;
  float64x2_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  double v133;
  double v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  double v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  double v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64_t v243;
  float64x2_t v244;
  float64x2_t v245;
  double v246;
  float64x2_t v247;
  double v248;
  int8x16_t v249;
  double v250;
  int8x16_t v251;
  double v252;
  double v253;
  double v254;
  float64x2_t v255;
  double v256;
  int64x2_t v257;
  double v258;
  int64x2_t v259;
  double v260;
  _BYTE v261[32];
  float64x2_t v262;
  _BYTE v263[32];
  float64x2_t v264;
  _BYTE v265[32];
  float64x2_t v266;
  _BYTE v267[32];
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289[8];

  v10 = *(unsigned __int8 *)(a1 + 720);
  if (*(_BYTE *)(a1 + 720))
  {
    v15 = *a2;
    v14 = a2[1];
    a9.i64[0] = (*a2)[3].i64[0];
    v16 = (*a2)[2];
    _Q16.i64[0] = (*a2)[4].i64[1];
    v17 = *(int64x2_t *)((char *)*a2 + 56);
    v18 = *(double *)(*a2)[6].i64;
    _Q3 = (float64x2_t)(*a2)[5];
    v20 = (float64x2_t)vzip1q_s64(v16, v17);
    _Q0 = (float64x2_t)vzip2q_s64(v16, v17);
    v22 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q0, 1);
    v23 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0);
    v24 = *(double *)&(*a2)[7].i64[1];
    _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, *(double *)&(*a2)[6].i64[1]), _Q0, *(float64x2_t *)((char *)&(*a2)[6] + 8), 1), (float64x2_t)vzip1q_s64(a9, (int64x2_t)_Q16), v24);
    _D1 = (*a2)[7].i64[0];
    __asm { FMLA            D0, D1, V3.D[1] }
    v31 = _Q0.f64[0] + v18 * v24;
    v257 = *(int64x2_t *)((char *)v14 + 56);
    v259 = v14[2];
    _Q31 = (float64x2_t)v14[5];
    v33 = (float64x2_t)vzip1q_s64(v259, v257);
    v34 = (float64x2_t)vzip2q_s64(v259, v257);
    _Q22 = *(float64x2_t *)((char *)&v14[6] + 8);
    v36 = vmlaq_laneq_f64(vmulq_n_f64(v33, _Q22.f64[0]), v34, _Q22, 1);
    _Q2 = vmulq_f64(_Q31, _Q22);
    *(_QWORD *)&_Q22.f64[0] = v14[7].i64[0];
    __asm { FMLA            D2, D22, V31.D[1] }
    v38 = (int64x2_t)vextq_s8(v23, v22, 8uLL);
    v39 = (float64x2_t)vzip1q_s64(v16, v38);
    *(_QWORD *)&_Q3.f64[1] = vdupq_laneq_s64((int64x2_t)_Q3, 1).u64[0];
    v40 = (float64x2_t)vzip2q_s64((int64x2_t)v20, v38);
    v41 = vextq_s8((int8x16_t)v40, _Q16, 8uLL);
    v42 = vzip1q_s64(a9, (int64x2_t)v40);
    v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, _Q17.f64[0]), v40, _Q17, 1), _Q3, v31);
    __asm { FMLA            D4, D16, V17.D[1] }
    *(_QWORD *)&v45.f64[0] = vdupq_laneq_s64(v42, 1).u64[0];
    *(_QWORD *)&_Q17.f64[0] = v41.i64[1];
    *(_QWORD *)&v45.f64[1] = v41.i64[0];
    *(_QWORD *)&v40.f64[0] = v42.i64[0];
    v46.f64[0] = _D4 + v18 * v31;
    v47 = v18;
    v41.i64[0] = *(_QWORD *)(a1 + 608);
    v48 = *(float64x2_t *)(a1 + 592);
    v49 = *(double *)(a1 + 640);
    v50 = *(float64x2_t *)(a1 + 624);
    _D24 = *(double *)(a1 + 672);
    v52 = *(float64x2_t *)(a1 + 656);
    _D5 = *(double *)(a1 + 704);
    _Q25 = *(float64x2_t *)(a1 + 688);
    *(_QWORD *)&_Q29.f64[0] = v41.i64[0];
    _Q29.f64[1] = v49;
    v56 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v48, (int64x2_t)v50), vnegq_f64(_Q25).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v48, (int64x2_t)v50), _Q25, 1), _Q29, _D5, 0);
    _D26 = *(_QWORD *)(a1 + 664);
    __asm
    {
      FMLS            D29, D26, V25.D[1]
      FMLS            D29, D24, V5.D[0]
    }
    v58 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, v48.f64[0]), v45, v50.f64[0]), _Q3, v52.f64[0]);
    v59 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v40.f64[0], v48.f64[0]), (float64x2_t)v41.u64[1], v50.f64[0]), (float64x2_t)*(unint64_t *)&v47, v52.f64[0]);
    v60 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v39, v48, 1), v45, v50, 1), _Q3, v52, 1);
    v61 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v40.f64[0], v48, 1), (float64x2_t)v41.u64[1], v50, 1), (float64x2_t)*(unint64_t *)&v47, v52, 1);
    v62 = vmlaq_n_f64(vmulq_n_f64(v39, *(double *)v41.i64), v45, v49);
    v247 = _Q31;
    v63 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v40.f64[0], *(double *)v41.i64), (float64x2_t)v41.u64[1], v49), (float64x2_t)*(unint64_t *)&v47, _D24);
    v251 = vextq_s8((int8x16_t)v34, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q31, 1), 8uLL);
    *(_QWORD *)&v34.f64[1] = v251.i64[0];
    v64 = vmlaq_f64(v58, (float64x2_t)0, v43);
    v65 = vmlaq_f64(v60, (float64x2_t)0, v43);
    v66 = vmlaq_f64(vmlaq_n_f64(v62, _Q3, _D24), (float64x2_t)0, v43);
    v67 = vaddq_f64(v43, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, v56.f64[0]), v45, v56, 1), _Q3, _Q29.f64[0]));
    v68 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v40.f64[0], v56.f64[0]), (float64x2_t)*(unint64_t *)&_Q17.f64[0], v56, 1), (float64x2_t)*(unint64_t *)&v47, _Q29.f64[0]);
    v69 = vmlaq_laneq_f64(vmulq_n_f64(v33, v64.f64[0]), v34, v64, 1);
    v70 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q31.f64[0], v64.f64[0]), (float64x2_t)v251.u64[1], v64, 1);
    v71 = vmlaq_laneq_f64(vmulq_n_f64(v33, v65.f64[0]), v34, v65, 1);
    v72 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q31.f64[0], v65.f64[0]), (float64x2_t)v251.u64[1], v65, 1);
    v73 = vmlaq_laneq_f64(vmulq_n_f64(v33, v66.f64[0]), v34, v66, 1);
    v74 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q31.f64[0], v66.f64[0]), (float64x2_t)v251.u64[1], v66, 1);
    v243 = v33.f64[0];
    v75 = vmlaq_laneq_f64(vmulq_n_f64(v33, v67.f64[0]), v34, v67, 1);
    *(_QWORD *)&v34.f64[0] = v14[7].i64[1];
    *(_QWORD *)&v66.f64[0] = v14[6].i64[0];
    v246 = v66.f64[0];
    _Q2.f64[0] = _Q2.f64[0] + v66.f64[0] * v34.f64[0];
    *(_QWORD *)&v52.f64[0] = *(_OWORD *)&vnegq_f64(_Q2);
    v76 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q31.f64[0], v67.f64[0]), (float64x2_t)v251.u64[1], v67, 1);
    v52.f64[1] = 1.0;
    *(_QWORD *)&v45.f64[0] = v14[3].i64[0];
    v46.f64[1] = 1.0;
    *(_QWORD *)&v67.f64[0] = v14[4].i64[1];
    v255 = v67;
    v45.f64[1] = v67.f64[0];
    v77 = vmlaq_n_f64(v36, v45, v34.f64[0]);
    v78 = vmlaq_f64(v59, (float64x2_t)0, v46);
    v79 = vmlaq_f64(v61, (float64x2_t)0, v46);
    v80 = vmlaq_f64(v63, (float64x2_t)0, v46);
    v81 = vaddq_f64(v46, v68);
    v245 = v45;
    v289[0] = vmlsq_laneq_f64(vmlaq_n_f64(v69, v45, v78.f64[0]), v77, v78, 1);
    v289[1] = vmlaq_laneq_f64(vmlaq_n_f64(v70, (float64x2_t)*(unint64_t *)&v66.f64[0], v78.f64[0]), v52, v78, 1);
    v289[2] = vmlsq_laneq_f64(vmlaq_n_f64(v71, v45, v79.f64[0]), v77, v79, 1);
    v289[3] = vmlaq_laneq_f64(vmlaq_n_f64(v72, (float64x2_t)*(unint64_t *)&v66.f64[0], v79.f64[0]), v52, v79, 1);
    v249 = (int8x16_t)v52;
    v289[4] = vmlsq_laneq_f64(vmlaq_n_f64(v73, v45, v80.f64[0]), v77, v80, 1);
    v289[5] = vmlaq_laneq_f64(vmlaq_n_f64(v74, (float64x2_t)*(unint64_t *)&v66.f64[0], v80.f64[0]), v52, v80, 1);
    v289[6] = vmlsq_laneq_f64(vmlaq_n_f64(v75, v45, v81.f64[0]), v77, v81, 1);
    v289[7] = vmlaq_laneq_f64(vmlaq_n_f64(v76, (float64x2_t)*(unint64_t *)&v66.f64[0], v81.f64[0]), v52, v81, 1);
    v82 = a4 + 18;
    v83 = (float64x2_t *)(a1 + 256);
    v269 = 0u;
    v270 = 0u;
    v268 = 0u;
    *(_QWORD *)&v253 = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
    v244 = vnegq_f64(v77);
    sub_20F3DB154(v289, (uint64_t)&v268, (uint64_t)&v271);
    v84 = 0;
    v85 = 0;
    v86 = v269;
    *a3 = v268;
    a3[1] = v86;
    a3[2] = v270;
    v91 = a3[1];
    v87 = a3[2];
    v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 16), a3->f64[0]), *(float64x2_t *)(a1 + 64), *a3, 1), *(float64x2_t *)(a1 + 112), v91.f64[0]), *(float64x2_t *)(a1 + 160), v91, 1), *(float64x2_t *)(a1 + 208), v87.f64[0]), *v83, v87, 1);
    v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), a3->f64[0]), *(float64x2_t *)(a1 + 80), *a3, 1), *(float64x2_t *)(a1 + 128), v91.f64[0]), *(float64x2_t *)(a1 + 176), v91, 1), *(float64x2_t *)(a1 + 224), v87.f64[0]), v83[1], v87, 1);
    v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 48), a3->f64[0]), *(float64x2_t *)(a1 + 96), *a3, 1), *(float64x2_t *)(a1 + 144), v91.f64[0]), *(float64x2_t *)(a1 + 192), v91, 1);
    v91.f64[0] = v245.f64[0];
    v92 = vmlaq_laneq_f64(vmlaq_n_f64(v90, *(float64x2_t *)(a1 + 240), v87.f64[0]), v83[2], v87, 1);
    *(float64_t *)&v93 = v243;
    *a3 = v88;
    a3[1] = v89;
    a3[2] = v92;
    *(_QWORD *)&v94 = v259.i64[1];
    *(double *)v261 = v246;
    do
    {
      v262.f64[v84] = 0.0;
      v95 = v85 < 2;
      if (v85 < 2)
        ++v85;
      else
        v85 = 0;
      if (v95)
        ++v84;
      else
        v84 += 4;
    }
    while (v84 != 18);
    v96.f64[0] = v255.f64[0];
    v96.f64[1] = v246;
    v97.f64[0] = v246;
    v97.f64[1] = v245.f64[0];
    *(float64x2_t *)&v261[8] = vmlsq_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v244, v249, 8uLL), v97), (float64x2_t)vzip1q_s64((int64x2_t)v249, (int64x2_t)v244), v96);
    *(_QWORD *)&v261[24] = *(_OWORD *)&vmlsq_f64(vmulq_f64(v244, v255), (float64x2_t)vdupq_n_s64(*(unint64_t *)&v244.f64[1]), v245);
    *(float64_t *)&v263[24] = v247.f64[0];
    *((double *)&v93 + 1) = v253;
    *((_QWORD *)&v94 + 1) = v257.i64[1];
    *(_OWORD *)&v263[8] = v93;
    *(_OWORD *)&v265[8] = v94;
    v91.f64[1] = v255.f64[0];
    *(float64x2_t *)&v267[8] = v91;
    *(float64_t *)&v265[24] = v247.f64[1];
    *(double *)&v267[24] = v246;
    v98 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v271, v245.f64[0]), v274, v245, 1), v277, v246), v280, *(float64x2_t *)v261, 1), v283, *(double *)&v261[16]), v286, *(float64x2_t *)&v261[16], 1);
    v99 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v245.f64[0]), v275, v245, 1), v278, v246), v281, *(float64x2_t *)v261, 1), v284, *(double *)&v261[16]), v287, *(float64x2_t *)&v261[16], 1);
    v100 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v273, v245.f64[0]), v276, v245, 1), v279, v246), v282, *(float64x2_t *)v261, 1), v285, *(double *)&v261[16]), v288, *(float64x2_t *)&v261[16], 1);
    v101 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v271, v262.f64[0]), v274, v262, 1), v277, *(double *)v263), v280, *(float64x2_t *)v263, 1), v283, v253), v286, *(float64x2_t *)&v263[16], 1);
    v102 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v262.f64[0]), v275, v262, 1), v278, *(double *)v263), v281, *(float64x2_t *)v263, 1), v284, v253), v287, *(float64x2_t *)&v263[16], 1);
    v103 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v273, v262.f64[0]), v276, v262, 1), v279, *(double *)v263), v282, *(float64x2_t *)v263, 1), v285, v253), v288, *(float64x2_t *)&v263[16], 1);
    v104 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v271, v264.f64[0]), v274, v264, 1), v277, *(double *)v265), v280, *(float64x2_t *)v265, 1), v283, *(double *)&v257.i64[1]), v286, *(float64x2_t *)&v265[16], 1);
    v105 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v264.f64[0]), v275, v264, 1), v278, *(double *)v265), v281, *(float64x2_t *)v265, 1), v284, *(double *)&v257.i64[1]), v287, *(float64x2_t *)&v265[16], 1);
    v106 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v273, v264.f64[0]), v276, v264, 1), v279, *(double *)v265), v282, *(float64x2_t *)v265, 1), v285, *(double *)&v257.i64[1]), v288, *(float64x2_t *)&v265[16], 1);
    v107 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v271, v266.f64[0]), v274, v266, 1), v277, *(double *)v267), v280, *(float64x2_t *)v267, 1), v283, v255.f64[0]), v286, *(float64x2_t *)&v267[16], 1);
    v108 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v266.f64[0]), v275, v266, 1), v278, *(double *)v267), v281, *(float64x2_t *)v267, 1), v284, v255.f64[0]), v287, *(float64x2_t *)&v267[16], 1);
    v109 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v273, v266.f64[0]), v276, v266, 1), v279, *(double *)v267), v282, *(float64x2_t *)v267, 1), v285, v255.f64[0]), v288, *(float64x2_t *)&v267[16], 1);
    *(_QWORD *)&v110 = vextq_s8(v98, v98, 8uLL).u64[0];
    *(_QWORD *)&v260 = vextq_s8(v109, v109, 8uLL).u64[0];
    *(_QWORD *)&v111 = vextq_s8(v107, v107, 8uLL).u64[0];
    *(_QWORD *)&v112 = vextq_s8(v106, v106, 8uLL).u64[0];
    *(_QWORD *)&v248 = vextq_s8(v105, v105, 8uLL).u64[0];
    *(_QWORD *)&v250 = vextq_s8(v108, v108, 8uLL).u64[0];
    *(_QWORD *)&v113 = vextq_s8(v104, v104, 8uLL).u64[0];
    *(_QWORD *)&v114 = vextq_s8(v103, v103, 8uLL).u64[0];
    *(_QWORD *)&v115 = vextq_s8(v102, v102, 8uLL).u64[0];
    *(_QWORD *)&v116 = vextq_s8(v101, v101, 8uLL).u64[0];
    *(_QWORD *)&v117 = vextq_s8(v100, v100, 8uLL).u64[0];
    *(_QWORD *)&v118 = vextq_s8(v99, v99, 8uLL).u64[0];
    v119 = (float64x2_t)vdupq_n_s64(v98.u64[0]);
    if (v15[1].i8[4])
    {
      v121 = *(float64x2_t *)(a1 + 16);
      v120 = *(float64x2_t *)(a1 + 32);
      v123 = *(float64x2_t *)(a1 + 80);
      v122 = *(float64x2_t *)(a1 + 96);
      v124 = *(float64x2_t *)(a1 + 48);
      v125 = *(float64x2_t *)(a1 + 64);
      v127 = *(float64x2_t *)(a1 + 112);
      v126 = *(float64x2_t *)(a1 + 128);
      v256 = v112;
      v254 = v110;
      v128 = *(float64x2_t *)(a1 + 160);
      v129 = vmlaq_n_f64(vmulq_f64(v121, v119), v125, v110);
      v130 = vmlaq_n_f64(vmulq_n_f64(v121, *(double *)v101.i64), v125, v116);
      v252 = v116;
      v131 = vmlaq_n_f64(vmulq_n_f64(v121, *(double *)v104.i64), v125, v113);
      v132 = vmlaq_n_f64(vmulq_n_f64(v121, *(double *)v107.i64), v125, v111);
      v133 = v113;
      v134 = v111;
      v136 = *(float64x2_t *)(a1 + 208);
      v135 = *(float64x2_t *)(a1 + 224);
      v137 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v129, v127, *(double *)v99.i64), v128, v118), v136, *(double *)v100.i64), *v83, v117);
      v138 = vmlaq_n_f64(vmlaq_n_f64(v130, v127, *(double *)v102.i64), v128, v115);
      v139 = vmlaq_n_f64(vmlaq_n_f64(v131, v127, *(double *)v105.i64), v128, v248);
      v140 = vmlaq_n_f64(vmlaq_n_f64(v132, v127, *(double *)v108.i64), v128, v250);
      v141 = vmlaq_n_f64(vmulq_f64(v120, v119), v123, v254);
      v142 = vmlaq_n_f64(vmlaq_n_f64(v138, v136, *(double *)v103.i64), *v83, v114);
      v143 = vmlaq_n_f64(v139, v136, *(double *)v106.i64);
      v144 = vmlaq_n_f64(v140, v136, *(double *)v109.i64);
      v145 = vmlaq_n_f64(vmulq_n_f64(v120, *(double *)v101.i64), v123, v252);
      v146 = vmlaq_n_f64(v143, *v83, v256);
      v147 = vmlaq_n_f64(v144, *v83, v260);
      v148 = vmlaq_n_f64(vmulq_n_f64(v120, *(double *)v104.i64), v123, v133);
      v149 = vmlaq_n_f64(vmulq_n_f64(v120, *(double *)v107.i64), v123, v134);
      v150 = v83[1];
      v151 = vmlaq_n_f64(v141, v126, *(double *)v99.i64);
      v152 = vmlaq_n_f64(v145, v126, *(double *)v102.i64);
      v153 = vmlaq_n_f64(v148, v126, *(double *)v105.i64);
      v154 = vmlaq_n_f64(v149, v126, *(double *)v108.i64);
      v155 = *(float64x2_t *)(a1 + 176);
      v156 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v151, v155, v118), v135, *(double *)v100.i64), v150, v117);
      v157 = vmlaq_n_f64(v152, v155, v115);
      v158 = vmlaq_n_f64(v153, v155, v248);
      v159 = vmlaq_n_f64(v154, v155, v250);
      v160 = vmlaq_n_f64(vmulq_f64(v124, v119), v122, v254);
      v161 = vmlaq_n_f64(vmlaq_n_f64(v157, v135, *(double *)v103.i64), v150, v114);
      v162 = vmlaq_n_f64(v158, v135, *(double *)v106.i64);
      v163 = vmlaq_n_f64(v159, v135, *(double *)v109.i64);
      v164 = vmlaq_n_f64(vmulq_n_f64(v124, *(double *)v101.i64), v122, v252);
      v165 = vmlaq_n_f64(v162, v150, v256);
      v166 = vmlaq_n_f64(v163, v150, v260);
      v167 = vmlaq_n_f64(vmulq_n_f64(v124, *(double *)v104.i64), v122, v133);
      v168 = vmlaq_n_f64(vmulq_n_f64(v124, *(double *)v107.i64), v122, v134);
      v169 = *(float64x2_t *)(a1 + 144);
      v170 = vmlaq_n_f64(v160, v169, *(double *)v99.i64);
      v171 = vmlaq_n_f64(v164, v169, *(double *)v102.i64);
      v172 = vmlaq_n_f64(v167, v169, *(double *)v105.i64);
      v173 = vmlaq_n_f64(v168, v169, *(double *)v108.i64);
      v174 = *(float64x2_t *)(a1 + 192);
      v175 = vmlaq_n_f64(v170, v174, v118);
      v176 = vmlaq_n_f64(v171, v174, v115);
      v177 = vmlaq_n_f64(v172, v174, v248);
      v178 = vmlaq_n_f64(v173, v174, v250);
      v179 = *(float64x2_t *)(a1 + 240);
      v180 = vmlaq_n_f64(v175, v179, *(double *)v100.i64);
      v181 = vmlaq_n_f64(v176, v179, *(double *)v103.i64);
      v182 = vmlaq_n_f64(v177, v179, *(double *)v106.i64);
      v183 = vmlaq_n_f64(v178, v179, *(double *)v109.i64);
      v184 = v83[2];
      *a4 = vnegq_f64(v137);
      a4[1] = vnegq_f64(v156);
      v112 = v256;
      a4[2] = vnegq_f64(vmlaq_n_f64(v180, v184, v117));
      a4[3] = vnegq_f64(v142);
      v185 = vnegq_f64(v161);
      v111 = v134;
      v113 = v133;
      a4[4] = v185;
      a4[5] = vnegq_f64(vmlaq_n_f64(v181, v184, v114));
      v186 = vnegq_f64(v146);
      v116 = v252;
      a4[6] = v186;
      a4[7] = vnegq_f64(v165);
      v110 = v254;
      a4[8] = vnegq_f64(vmlaq_n_f64(v182, v184, v256));
      a4[9] = vnegq_f64(v147);
      a4[10] = vnegq_f64(v166);
      a4[11] = vnegq_f64(vmlaq_n_f64(v183, v184, v260));
    }
    v258 = v115;
    if (v14[1].i8[4])
    {
      v187 = v118;
      v189 = *(float64x2_t *)(a1 + 16);
      v188 = *(float64x2_t *)(a1 + 32);
      v191 = *(float64x2_t *)(a1 + 80);
      v190 = *(float64x2_t *)(a1 + 96);
      v192 = *(float64x2_t *)(a1 + 48);
      v193 = *(float64x2_t *)(a1 + 64);
      v194 = vmlaq_n_f64(vmulq_f64(v189, v119), v193, v110);
      v195 = vmlaq_n_f64(vmulq_f64(v188, v119), v191, v110);
      v196 = vmlaq_n_f64(vmulq_f64(v192, v119), v190, v110);
      v197 = vmlaq_n_f64(vmulq_n_f64(v189, *(double *)v101.i64), v193, v116);
      v198 = vmlaq_n_f64(vmulq_n_f64(v188, *(double *)v101.i64), v191, v116);
      v199 = vmlaq_n_f64(vmulq_n_f64(v192, *(double *)v101.i64), v190, v116);
      v200 = vmlaq_n_f64(vmulq_n_f64(v189, *(double *)v104.i64), v193, v113);
      v201 = vmlaq_n_f64(vmulq_n_f64(v188, *(double *)v104.i64), v191, v113);
      v202 = vmlaq_n_f64(vmulq_n_f64(v192, *(double *)v104.i64), v190, v113);
      v203 = vmlaq_n_f64(vmulq_n_f64(v189, *(double *)v107.i64), v193, v111);
      v204 = vmlaq_n_f64(vmulq_n_f64(v188, *(double *)v107.i64), v191, v111);
      v205 = v111;
      v207 = *(float64x2_t *)(a1 + 112);
      v206 = *(float64x2_t *)(a1 + 128);
      v208 = vmlaq_n_f64(vmulq_n_f64(v192, *(double *)v107.i64), v190, v205);
      v210 = *(float64x2_t *)(a1 + 144);
      v209 = *(float64x2_t *)(a1 + 160);
      v211 = vmlaq_n_f64(v194, v207, *(double *)v99.i64);
      v212 = vmlaq_n_f64(v195, v206, *(double *)v99.i64);
      v213 = vmlaq_n_f64(v196, v210, *(double *)v99.i64);
      v214 = vmlaq_n_f64(v197, v207, *(double *)v102.i64);
      v215 = vmlaq_n_f64(v198, v206, *(double *)v102.i64);
      v216 = vmlaq_n_f64(v199, v210, *(double *)v102.i64);
      v218 = *(float64x2_t *)(a1 + 176);
      v217 = *(float64x2_t *)(a1 + 192);
      v219 = vmlaq_n_f64(v212, v218, v187);
      v220 = vmlaq_n_f64(v213, v217, v187);
      v221 = vmlaq_n_f64(v215, v218, v258);
      v222 = vmlaq_n_f64(v216, v217, v258);
      v223 = vmlaq_n_f64(vmlaq_n_f64(v200, v207, *(double *)v105.i64), v209, v248);
      v224 = vmlaq_n_f64(vmlaq_n_f64(v201, v206, *(double *)v105.i64), v218, v248);
      v225 = vmlaq_n_f64(vmlaq_n_f64(v202, v210, *(double *)v105.i64), v217, v248);
      v226 = vmlaq_n_f64(vmlaq_n_f64(v204, v206, *(double *)v108.i64), v218, v250);
      v227 = vmlaq_n_f64(vmlaq_n_f64(v208, v210, *(double *)v108.i64), v217, v250);
      v228 = *(float64x2_t *)(a1 + 224);
      v229 = *(float64x2_t *)(a1 + 240);
      v230 = *(float64x2_t *)(a1 + 208);
      v231 = vmlaq_n_f64(vmlaq_n_f64(v211, v209, v187), v230, *(double *)v100.i64);
      v232 = vmlaq_n_f64(v219, v228, *(double *)v100.i64);
      v233 = vmlaq_n_f64(v220, v229, *(double *)v100.i64);
      v234 = vmlaq_n_f64(v221, v228, *(double *)v103.i64);
      v235 = vmlaq_n_f64(v224, v228, *(double *)v106.i64);
      v236 = vmlaq_n_f64(v226, v228, *(double *)v109.i64);
      v238 = v83[1];
      v237 = v83[2];
      v239 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v214, v209, v258), v230, *(double *)v103.i64), *v83, v114);
      v240 = vmlaq_n_f64(vmlaq_n_f64(v223, v230, *(double *)v106.i64), *v83, v112);
      v241 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v203, v207, *(double *)v108.i64), v209, v250), v230, *(double *)v109.i64), *v83, v260);
      a4[12] = vmlaq_n_f64(v231, *v83, v117);
      a4[13] = vmlaq_n_f64(v232, v238, v117);
      a4[14] = vmlaq_n_f64(v233, v237, v117);
      a4[15] = v239;
      a4[16] = vmlaq_n_f64(v234, v238, v114);
      a4[17] = vmlaq_n_f64(vmlaq_n_f64(v222, v229, *(double *)v103.i64), v237, v114);
      *v82 = v240;
      v82[1] = vmlaq_n_f64(v235, v238, v112);
      v82[2] = vmlaq_n_f64(vmlaq_n_f64(v225, v229, *(double *)v106.i64), v237, v112);
      v82[3] = v241;
      v82[4] = vmlaq_n_f64(v236, v238, v260);
      v82[5] = vmlaq_n_f64(vmlaq_n_f64(v227, v229, *(double *)v109.i64), v237, v260);
    }
  }
  return v10 != 0;
}

void sub_20F3DB154(float64x2_t *a1, uint64_t a2, uint64_t a3)
{
  double v7;
  double v8;
  int8x16_t v9;
  double v10;
  int8x16_t v12;
  double v13;
  int8x16_t v15;
  double v16;
  double v17;
  float64x2_t v19;
  double v25;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  __double2 v36;
  uint64_t v37;
  int v38;
  float64x2_t v39;
  double v40;
  double v41;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float64_t v51;
  double v52;
  double v54;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v61;
  float64x2_t v64;
  float64x2_t v67;
  BOOL v68;
  float64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  __int128 v80;
  double v81;
  float64x2_t v82;
  double v83;
  float64x2_t v84;
  double v85;
  float64x2_t v86;
  double v87;
  unsigned int v88;
  float64x2_t *v89;
  int v90;

  v88 = 4;
  v89 = a1;
  v90 = 0;
  v80 = 0uLL;
  v81 = 0.0;
  sub_20F3DB5CC(&v88, (double *)&v80, v82.f64);
  _Q21 = v80;
  v7 = v81;
  *(double *)(a2 + 16) = v81;
  *(_OWORD *)a2 = _Q21;
  v8 = v83;
  v9 = (int8x16_t)v82;
  *(_QWORD *)&v10 = vextq_s8(v9, v9, 8uLL).u64[0];
  _D23 = v85;
  v12 = (int8x16_t)v84;
  *(_QWORD *)&v13 = vextq_s8(v12, v12, 8uLL).u64[0];
  _D24 = v87;
  v15 = (int8x16_t)v86;
  *(_QWORD *)&v16 = vextq_s8(v15, v15, 8uLL).u64[0];
  v17 = a1[7].f64[0];
  _Q1 = a1[6];
  v19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, _Q1.f64[0]), v84, _Q1, 1), v86, v17);
  __asm { FMLA            D2, D23, V1.D[1] }
  v25 = _D2 + v87 * v17;
  *(float64x2_t *)(a2 + 24) = v19;
  *(double *)(a2 + 40) = v25;
  _D11 = *((double *)&_Q21 + 1);
  __asm { FMLA            D0, D11, V21.D[1] }
  v28 = _D0 + v7 * v7;
  v29 = v19.f64[1];
  if (v28 >= 0.0000002635)
  {
    v35 = sqrt(v28);
    v78 = _D23;
    v79 = v8;
    v76 = v9.i64[0];
    v77 = _D24;
    v74 = v12.i64[0];
    v75 = v10;
    v72 = v15.i64[0];
    v73 = v13;
    v70 = _Q21;
    v71 = v16;
    v69 = v19.f64[0];
    v36 = __sincos_stret(v35);
    v19.f64[0] = v69;
    *(_QWORD *)&_Q21 = v70;
    v16 = v71;
    v15.i64[0] = v72;
    v13 = v73;
    v12.i64[0] = v74;
    v10 = v75;
    v9.i64[0] = v76;
    _D24 = v77;
    _D23 = v78;
    v8 = v79;
    v30 = 1.0 / v28 * (1.0 - v36.__cosval);
    v31 = 1.0 / v28 * (1.0 - v36.__sinval / v35);
    v32 = v31 - v30;
    v33 = 1.0 / v28 * (v36.__sinval / v35 - (v30 + v30));
    v34 = 1.0 / v28 * (v30 + v31 * -3.0);
  }
  else
  {
    v30 = 0.5 - v28 * (v28 / -720.0 + 0.0416666667);
    v31 = 0.166666667 - v28 * (v28 / -5040.0 + 0.00833333333);
    v32 = v28 * (v28 * -0.00119047619 + 0.0333333333) + -0.333333333;
    v33 = v28 * (v28 * -0.000148809524 + 0.00555555556) + -0.0833333333;
    v34 = v28 * (v28 * -0.0000165343915 + 0.000793650794) + -0.0166666667;
  }
  v37 = 0;
  v38 = 0;
  *(_QWORD *)&v39.f64[0] = v15.i64[0];
  v39.f64[1] = v16;
  *(float64x2_t *)(a3 + 264) = v39;
  v40 = v7 * v25 + *(double *)&_Q21 * v19.f64[0] + _D11 * v29;
  v41 = *(double *)&_Q21 * v19.f64[0] * (v31 + v31) + v40 * (v32 + *(double *)&_Q21 * *(double *)&_Q21 * v34);
  _D7 = _D11 * v29 * (v31 + v31) + v40 * (v32 + _D11 * _D11 * v34);
  _D2 = v7 * v25 * (v31 + v31) + v40 * (v32 + v7 * v7 * v34);
  v44 = v40 * v34;
  v45 = (_D11 * v19.f64[0] + *(double *)&_Q21 * v29) * v31 + _D11 * (*(double *)&_Q21 * v44);
  v46 = (v7 * v19.f64[0] + *(double *)&_Q21 * v25) * v31 + v7 * (*(double *)&_Q21 * v44);
  v47 = (v7 * v29 + _D11 * v25) * v31 + v7 * (_D11 * v44);
  v48 = v40 * v33;
  v49 = v25 * v30 + v7 * v48;
  v50 = v29 * v30 + _D11 * v48;
  v51 = v19.f64[0] * v30 + *(double *)&_Q21 * v48;
  v52 = v45 - v49;
  _D4 = v49 + v45;
  v54 = v50 + v46;
  _D17 = v46 - v50;
  _D18 = v47 - v51;
  _D0 = v51 + v47;
  *(double *)(a3 + 16) = v8;
  *(_QWORD *)&v58.f64[0] = v9.i64[0];
  v58.f64[1] = v10;
  *(float64x2_t *)a3 = v58;
  *(_QWORD *)&v59.f64[0] = v12.i64[0];
  v59.f64[1] = v13;
  *(double *)(a3 + 64) = _D23;
  *(float64x2_t *)(a3 + 48) = v59;
  *(double *)(a3 + 112) = _D24;
  *(float64x2_t *)(a3 + 96) = v39;
  *(double *)(a3 + 184) = v8;
  *(float64x2_t *)(a3 + 168) = v58;
  *(double *)(a3 + 232) = _D23;
  *(float64x2_t *)(a3 + 216) = v59;
  *(double *)(a3 + 280) = _D24;
  _Q1 = vnegq_f64(v58);
  v61 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(_Q1, v41), v59, _D4, 0), v39, _D17, 0);
  __asm
  {
    FMLS            D6, D4, V23.D[0]
    FMLS            D6, D17, V24.D[0]
  }
  v64 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(_Q1, v52), v59, _D7, 0), v39, _D0, 0);
  __asm
  {
    FMLS            D3, D7, V23.D[0]
    FMLS            D3, D0, V24.D[0]
  }
  v67 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(_Q1, v54), v59, _D18, 0), v39, _D2, 0);
  __asm
  {
    FMLS            D1, D18, V23.D[0]
    FMLS            D1, D2, V24.D[0]
  }
  *(double *)(a3 + 40) = _D6 * *(double *)v9.i64 + _D3 * v10 + _Q1.f64[0] * v8;
  *(float64x2_t *)(a3 + 24) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v61, *(double *)v9.i64), v64, v10), v67, v8);
  *(double *)(a3 + 88) = _D6 * *(double *)v12.i64 + _D3 * v13 + _Q1.f64[0] * _D23;
  *(float64x2_t *)(a3 + 72) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v61, *(double *)v12.i64), v64, v13), v67, _D23);
  *(double *)(a3 + 136) = _D6 * *(double *)v15.i64 + _D3 * v16 + _Q1.f64[0] * _D24;
  *(float64x2_t *)(a3 + 120) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v61, *(double *)v15.i64), v64, v16), v67, _D24);
  do
  {
    *(_QWORD *)(a3 + 144 + 8 * v37) = 0;
    v68 = v38 < 2;
    if (v38 < 2)
      ++v38;
    else
      v38 = 0;
    if (v68)
      ++v37;
    else
      v37 += 4;
  }
  while (v37 != 18);
}

double sub_20F3DB5CC(unsigned int *a1, double *a2, double *a3)
{
  double v5;
  double v7;
  double v14;
  double v15;
  double v16;
  double v17;
  double cosval;
  double v19;
  __double2 v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double result;
  double v34;
  int8x16_t v35;
  double v36;

  sub_20F053450(a1, a2);
  v5 = a2[2];
  _Q6 = *(int8x16_t *)a2;
  *(_QWORD *)&v7 = vextq_s8(_Q6, _Q6, 8uLL).u64[0];
  _D1 = *((_QWORD *)a2 + 1);
  __asm { FMLA            D0, D1, V6.D[1] }
  v14 = _D0 + v5 * v5;
  if (v14 >= 0.0000002635)
  {
    v19 = sqrt(v14);
    v35 = *(int8x16_t *)a2;
    v36 = a2[2];
    v34 = v7;
    v20 = __sincos_stret(v19);
    cosval = v20.__cosval;
    v7 = v34;
    _Q6.i64[0] = v35.i64[0];
    v5 = v36;
    v17 = v20.__sinval / v19;
    v15 = 1.0 / v14 * (1.0 - v20.__cosval);
    v16 = 1.0 / v14 * (1.0 - v20.__sinval / v19);
  }
  else
  {
    v15 = 0.5 - v14 * (v14 / -720.0 + 0.0416666667);
    v16 = 0.166666667 - v14 * (v14 / -5040.0 + 0.00833333333);
    v17 = 1.0 - v14 * v16;
    cosval = 1.0 - v14 * v15;
  }
  v21 = (v15 * 0.5 - v16) / v17;
  v22 = (v15 + v17 * -0.5) / (1.0 - cosval);
  if (cosval >= 0.9)
    v22 = v21;
  v23 = 1.0 - v14 * v22;
  v24 = *(double *)_Q6.i64 * v22;
  v25 = v7 * v22;
  *a3 = v23 + *(double *)_Q6.i64 * (*(double *)_Q6.i64 * v22);
  a3[4] = v23 + v7 * v22 * a2[1];
  a3[8] = v23 + v5 * v22 * a2[2];
  v26 = a2[1];
  v27 = v24 * v26;
  v28 = a2[2];
  v29 = v24 * v28;
  v30 = v25 * v28;
  v31 = *a2 * -0.5;
  v32 = v26 * -0.5;
  a3[3] = v27 - v28 * -0.5;
  a3[6] = v32 + v29;
  a3[7] = v30 - v31;
  a3[1] = v27 + v28 * -0.5;
  a3[2] = v29 - v32;
  result = v30 + v31;
  a3[5] = v30 + v31;
  return result;
}

BOOL sub_20F3DB79C(uint64_t a1, _QWORD *a2, float64x2_t *a3, float64x2_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int64x2_t a12)
{
  int64x2_t v12;
  int v13;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int64x2_t v31;
  double v33;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  int8x16_t v39;
  float64x2_t v46;
  double v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  float64x2_t v58;
  float64x2_t v60;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64_t v103;
  float64_t v104;
  float64_t v105;
  float64x2_t v106;
  float64_t v107;
  float64_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  double v138;
  double v139;
  double v140;
  float64_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  double v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  int8x16_t v153;
  double v154;
  float64x2_t v155;
  int8x16_t v156;
  int8x16_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64_t v160;
  int8x16_t v161;
  float64x2_t v162;
  float64x2_t v163;
  int8x16_t v164;
  float64_t v165;
  int8x16_t v166;
  float64_t v167;
  double v168;
  double v169;
  double v170;
  double v171;
  float64x2_t v172;
  double v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  int8x16_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204[8];

  v13 = *(unsigned __int8 *)(a1 + 720);
  if (*(_BYTE *)(a1 + 720))
  {
    v18 = *a2;
    v17 = a2[1];
    v20 = *(double *)(*a2 + 32);
    v19 = *(double *)(*a2 + 40);
    v22 = *(double *)(*a2 + 48);
    v21 = *(double *)(*a2 + 56);
    v24 = *(double *)(*a2 + 64);
    v23 = *(double *)(*a2 + 72);
    v26 = *(double *)(*a2 + 80);
    v25 = *(double *)(*a2 + 88);
    v28 = *(double *)(*a2 + 96);
    v27 = *(double *)(*a2 + 104);
    v30 = *(double *)(*a2 + 112);
    v29 = *(double *)(*a2 + 120);
    a12.i64[0] = *(_QWORD *)(v17 + 48);
    v31 = *(int64x2_t *)(v17 + 32);
    v12.i64[0] = *(_QWORD *)(v17 + 72);
    _Q20 = *(int64x2_t *)(v17 + 56);
    v33 = *(double *)(v17 + 96);
    _Q27 = *(int64x2_t *)(v17 + 80);
    v35 = (float64x2_t)vzip1q_s64(v31, _Q20);
    v164 = (int8x16_t)_Q20;
    v166 = (int8x16_t)v31;
    v36 = (float64x2_t)vzip2q_s64(v31, _Q20);
    v37 = (float64x2_t)vdupq_laneq_s64(_Q27, 1);
    v168 = *(double *)v12.i64;
    v169 = *(double *)a12.i64;
    v38 = (float64x2_t)vzip1q_s64(a12, v12);
    v39 = vextq_s8((int8x16_t)v36, (int8x16_t)v37, 8uLL);
    v37.f64[0] = *(float64_t *)(v17 + 120);
    _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, *(double *)(v17 + 104)), v36, *(float64x2_t *)(v17 + 104), 1), v38, v37.f64[0]);
    _D19 = *(_QWORD *)(v17 + 112);
    __asm { FMLA            D20, D19, V27.D[1] }
    v37.f64[0] = *(double *)_Q20.i64 + v33 * v37.f64[0];
    *(_QWORD *)&v46.f64[0] = *(_OWORD *)&vnegq_f64(v37);
    v182 = (int8x16_t)_Q27;
    _Q20.i64[0] = *(_QWORD *)(v17 + 80);
    v47 = *(double *)&v39.i64[1];
    *(_QWORD *)&v36.f64[1] = v39.i64[0];
    v170 = v33;
    *(double *)_Q27.i64 = v33;
    v46.f64[1] = 1.0;
    v48 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v35, v20), v36, v19), v38, v22), (float64x2_t)0, _Q7);
    v49 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q20.u64[0], v20), (float64x2_t)*(unint64_t *)&v47, v19), (float64x2_t)*(unint64_t *)&v33, v22), (float64x2_t)0, v46);
    v50 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v35, v21), v36, v24), v38, v23), (float64x2_t)0, _Q7);
    v51 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q20.u64[0], v21), (float64x2_t)*(unint64_t *)&v47, v24), (float64x2_t)*(unint64_t *)&v33, v23), (float64x2_t)0, v46);
    v52 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v35, v26), v36, v25), v38, v28), (float64x2_t)0, _Q7);
    v53 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q20.u64[0], v26), (float64x2_t)*(unint64_t *)&v47, v25), (float64x2_t)_Q27.u64[0], v28), (float64x2_t)0, v46);
    v171 = v47;
    v172 = v35;
    v174 = v36;
    v175 = v38;
    v54 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v35, v27), v36, v30), v38, v29), _Q7);
    v173 = *(double *)(v17 + 96);
    v55 = vaddq_f64(v46, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q20.u64[0], v27), (float64x2_t)*(unint64_t *)&v47, v30), (float64x2_t)_Q27.u64[0], v29));
    _Q7.f64[0] = *(float64_t *)(a1 + 608);
    v56 = *(float64x2_t *)(a1 + 592);
    v57 = *(double *)(a1 + 640);
    v58 = *(float64x2_t *)(a1 + 624);
    _D2 = *(double *)(a1 + 672);
    v60 = *(float64x2_t *)(a1 + 656);
    _D16 = *(double *)(a1 + 704);
    _Q17 = *(float64x2_t *)(a1 + 688);
    v63 = vmulq_n_f64(v48, _Q7.f64[0]);
    v64 = vmulq_n_f64(v49, _Q7.f64[0]);
    _Q7.f64[1] = v57;
    v65 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v56, (int64x2_t)v58), vnegq_f64(_Q17).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v56, (int64x2_t)v58), _Q17, 1), _Q7, _D16, 0);
    _D18 = *(_QWORD *)(a1 + 664);
    __asm
    {
      FMLS            D7, D18, V17.D[1]
      FMLS            D7, D2, V16.D[0]
    }
    v67 = (float64x2_t *)(a1 + 256);
    v161 = (int8x16_t)v49;
    v163 = v48;
    v158 = v52;
    v159 = v50;
    v155 = v54;
    v156 = (int8x16_t)v53;
    v157 = (int8x16_t)v51;
    v204[0] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v48, v56.f64[0]), v50, v58.f64[0]), v52, v60.f64[0]), (float64x2_t)0, v54);
    v204[1] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v49, v56.f64[0]), v51, v58.f64[0]), v53, v60.f64[0]), (float64x2_t)0, v55);
    v204[2] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v48, v56, 1), v50, v58, 1), v52, v60, 1), (float64x2_t)0, v54);
    v204[3] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v49, v56, 1), v51, v58, 1), v53, v60, 1), (float64x2_t)0, v55);
    v204[4] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v63, v50, v57), v52, _D2), (float64x2_t)0, v54);
    v204[5] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v64, v51, v57), v53, _D2), (float64x2_t)0, v55);
    v153 = (int8x16_t)v55;
    v204[6] = vaddq_f64(v54, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, v65.f64[0]), v50, v65, 1), v52, _Q7.f64[0]));
    v204[7] = vaddq_f64(v55, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, v65.f64[0]), v51, v65, 1), v53, _Q7.f64[0]));
    v184 = 0u;
    v185 = 0u;
    v183 = 0u;
    sub_20F3DB154(v204, (uint64_t)&v183, (uint64_t)&v186);
    v68 = v186;
    v69 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 16), v183.f64[0]), *(float64x2_t *)(a1 + 64), v183, 1), *(float64x2_t *)(a1 + 112), v184.f64[0]), *(float64x2_t *)(a1 + 160), v184, 1), *(float64x2_t *)(a1 + 208), v185.f64[0]), *v67, v185, 1);
    v70 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 48), v183.f64[0]), *(float64x2_t *)(a1 + 96), v183, 1), *(float64x2_t *)(a1 + 144), v184.f64[0]), *(float64x2_t *)(a1 + 192), v184, 1), *(float64x2_t *)(a1 + 240), v185.f64[0]), v67[2], v185, 1);
    a3[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), v183.f64[0]), *(float64x2_t *)(a1 + 80), v183, 1), *(float64x2_t *)(a1 + 128), v184.f64[0]), *(float64x2_t *)(a1 + 176), v184, 1), *(float64x2_t *)(a1 + 224), v185.f64[0]), v67[1], v185, 1);
    a3[2] = v70;
    *a3 = v69;
    v71 = *(float64x2_t *)(a1 + 16);
    v72 = *(float64x2_t *)(a1 + 32);
    v100 = *(float64x2_t *)(a1 + 48);
    v73 = *(float64x2_t *)(a1 + 64);
    v74 = *(float64x2_t *)(a1 + 112);
    v75 = *(float64x2_t *)(a1 + 128);
    v77 = *(float64x2_t *)(a1 + 144);
    v76 = *(float64x2_t *)(a1 + 160);
    v95 = *(float64x2_t *)(a1 + 208);
    v78 = *(float64x2_t *)(a1 + 224);
    v101 = v67[1];
    v79 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, v68.f64[0]), v73, v68, 1), v74, v187.f64[0]), v76, v187, 1), v95, v188.f64[0]), *v67, v188, 1);
    v80 = *(float64x2_t *)(a1 + 80);
    v81 = *(float64x2_t *)(a1 + 96);
    v82 = *(float64x2_t *)(a1 + 176);
    v83 = *(float64x2_t *)(a1 + 192);
    v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, v68.f64[0]), v80, v68, 1), v75, v187.f64[0]), v82, v187, 1), v78, v188.f64[0]), v101, v188, 1);
    v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v100, v68.f64[0]), v81, v68, 1), v77, v187.f64[0]), v83, v187, 1);
    v86 = *(float64x2_t *)(a1 + 240);
    v106 = v67[2];
    v176 = vmlaq_laneq_f64(vmlaq_n_f64(v85, v86, v188.f64[0]), v106, v188, 1);
    v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, v189.f64[0]), v73, v189, 1), v74, v190.f64[0]), v76, v190, 1), v95, v191.f64[0]), *v67, v191, 1);
    v181 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, v189.f64[0]), v80, v189, 1), v75, v190.f64[0]), v82, v190, 1), v78, v191.f64[0]), v101, v191, 1);
    v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v100, v189.f64[0]), v81, v189, 1), v77, v190.f64[0]), v83, v190, 1), v86, v191.f64[0]), v106, v191, 1);
    v180 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, v192.f64[0]), v73, v192, 1), v74, v193.f64[0]), v76, v193, 1), v95, v194.f64[0]), *v67, v194, 1);
    v179 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, v192.f64[0]), v80, v192, 1), v75, v193.f64[0]), v82, v193, 1), v78, v194.f64[0]), v101, v194, 1);
    v178 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v100, v192.f64[0]), v81, v192, 1), v77, v193.f64[0]), v83, v193, 1), v86, v194.f64[0]), v106, v194, 1);
    v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, v195.f64[0]), v73, v195, 1), v74, v196.f64[0]), v76, v196, 1), v95, v197.f64[0]), *v67, v197, 1);
    v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, v195.f64[0]), v80, v195, 1), v75, v196.f64[0]), v82, v196, 1), v78, v197.f64[0]), v101, v197, 1);
    v91 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v100, v195.f64[0]), v81, v195, 1), v77, v196.f64[0]), v83, v196, 1), v86, v197.f64[0]), v106, v197, 1);
    v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, v198.f64[0]), v73, v198, 1), v74, v199.f64[0]), v76, v199, 1), v95, v200.f64[0]), *v67, v200, 1);
    v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, v198.f64[0]), v80, v198, 1), v75, v199.f64[0]), v82, v199, 1), v78, v200.f64[0]), v101, v200, 1);
    v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, v201.f64[0]), v73, v201, 1), v74, v202.f64[0]), v76, v202, 1), v95, v203.f64[0]), *v67, v203, 1);
    v95.f64[0] = v92.f64[0];
    v96 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, v201.f64[0]), v80, v201, 1), v75, v202.f64[0]), v82, v202, 1), v78, v203.f64[0]);
    v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v100, v198.f64[0]), v81, v198, 1), v77, v199.f64[0]), v83, v199, 1), v86, v200.f64[0]), v106, v200, 1);
    v98 = vmlaq_laneq_f64(v96, v101, v203, 1);
    v99 = vmulq_n_f64(v100, v201.f64[0]);
    v100.f64[0] = v90.f64[0];
    v101.f64[0] = v93.f64[0];
    v102 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v99, v81, v201, 1), v77, v202.f64[0]), v83, v202, 1), v86, v203.f64[0]), v106, v203, 1);
    v103 = v93.f64[1];
    v104 = v92.f64[1];
    v105 = v91.f64[1];
    *(_QWORD *)&v177 = *(_OWORD *)&v91 >> 64;
    *(_QWORD *)&v106.f64[0] = v91;
    v107 = v90.f64[1];
    v108 = v89.f64[1];
    if (*(_BYTE *)(v18 + 20))
    {
      *(_QWORD *)&v146 = vextq_s8(v166, v166, 8uLL).u64[0];
      v109.f64[0] = v163.f64[0];
      v151 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, v163.f64[0]), v87, v163, 1), v180, *(double *)v161.i64);
      v150 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v84, v163.f64[0]), v181, v163, 1), v179, *(double *)v161.i64);
      v149 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, v163.f64[0]), v88, v163, 1), v178, *(double *)v161.i64);
      *(_QWORD *)&v110.f64[0] = v156.i64[0];
      v147 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v84, v159.f64[0]), v181, v159, 1), v179, *(double *)v157.i64);
      v148 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, v159.f64[0]), v87, v159, 1), v180, *(double *)v157.i64);
      v145 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, v159.f64[0]), v88, v159, 1), v178, *(double *)v157.i64);
      v144 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v84, v158.f64[0]), v181, v158, 1), v179, *(double *)v156.i64);
      v143 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, v158.f64[0]), v88, v158, 1), v178, *(double *)v156.i64);
      v111 = (float64x2_t)vzip1q_s64((int64x2_t)v153, (int64x2_t)v155);
      v152 = v88;
      v112 = (float64x2_t)vextq_s8((int8x16_t)v155, v153, 8uLL);
      v110.f64[1] = v158.f64[0];
      v109.f64[1] = v159.f64[1];
      v113 = vmlsq_f64(vmulq_f64(v112, v110), v111, (float64x2_t)vextq_s8((int8x16_t)v158, v156, 8uLL));
      v114 = vmlsq_f64(vmulq_f64(v112, (float64x2_t)vzip1q_s64((int64x2_t)v161, (int64x2_t)v163)), v111, (float64x2_t)vextq_s8((int8x16_t)v163, v161, 8uLL));
      *(_QWORD *)&v154 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(v155, v158, 1), v158, v155, 1);
      v115 = vmlsq_f64(vmulq_f64(v111, v159), v155, (float64x2_t)vzip1q_s64((int64x2_t)v157, (int64x2_t)v159));
      v116 = (float64x2_t)__PAIR128__(*(unint64_t *)&v105, *(unint64_t *)&v106.f64[0]);
      v142 = v106.f64[0];
      v117 = v92;
      v118 = vmlsq_f64(vmulq_f64(v155, (float64x2_t)vextq_s8((int8x16_t)v163, v157, 8uLL)), v112, v109);
      v160 = v92.f64[0];
      v119 = v89;
      v106 = vmlaq_laneq_f64(vmulq_n_f64(v89, v114.f64[0]), v92, v114, 1);
      v120 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)__PAIR128__(*(unint64_t *)&v107, *(unint64_t *)&v100.f64[0]), v114.f64[0]), (float64x2_t)__PAIR128__(*(unint64_t *)&v103, *(unint64_t *)&v101.f64[0]), v114, 1);
      v121 = vmlaq_laneq_f64(vmulq_n_f64(v116, v114.f64[0]), v97, v114, 1);
      v122 = vmlaq_laneq_f64(vmulq_n_f64(v89, v113.f64[0]), v92, v113, 1);
      v123 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)__PAIR128__(*(unint64_t *)&v107, *(unint64_t *)&v100.f64[0]), v113.f64[0]), (float64x2_t)__PAIR128__(*(unint64_t *)&v103, *(unint64_t *)&v101.f64[0]), v113, 1);
      v124 = vmlaq_laneq_f64(vmulq_n_f64(v116, v113.f64[0]), v97, v113, 1);
      v125 = vmlaq_n_f64(vmulq_n_f64(v89, *(double *)v166.i64), v92, *(double *)v164.i64);
      v162 = v84;
      v126 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)__PAIR128__(*(unint64_t *)&v107, *(unint64_t *)&v100.f64[0]), *(double *)v166.i64), (float64x2_t)__PAIR128__(*(unint64_t *)&v103, *(unint64_t *)&v101.f64[0]), *(double *)v164.i64);
      v127 = vmlaq_n_f64(vmulq_n_f64(v116, *(double *)v166.i64), v97, *(double *)v164.i64);
      *(_QWORD *)&v92.f64[0] = vextq_s8(v164, v164, 8uLL).u64[0];
      v165 = v89.f64[1];
      v167 = v89.f64[0];
      v89 = vmlaq_n_f64(vmulq_n_f64(v89, v146), v117, v92.f64[0]);
      v128 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)__PAIR128__(*(unint64_t *)&v107, *(unint64_t *)&v100.f64[0]), v146), (float64x2_t)__PAIR128__(*(unint64_t *)&v103, *(unint64_t *)&v101.f64[0]), v92.f64[0]);
      v129 = vmlaq_n_f64(vmulq_n_f64(v116, v146), v97, v92.f64[0]);
      *a4 = vaddq_f64(v151, vmlaq_n_f64(v106, v94, v118.f64[0]));
      a4[1] = vaddq_f64(v150, vmlaq_n_f64(v120, v98, v118.f64[0]));
      a4[2] = vaddq_f64(v149, vmlaq_n_f64(v121, v102, v118.f64[0]));
      a4[3] = vaddq_f64(v148, vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v119, v118, 1), v117, v115.f64[0]), v94, v115, 1));
      a4[4] = vaddq_f64(v147, vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)__PAIR128__(*(unint64_t *)&v107, *(unint64_t *)&v100.f64[0]), v118, 1), (float64x2_t)__PAIR128__(*(unint64_t *)&v103, *(unint64_t *)&v101.f64[0]), v115.f64[0]), v98, v115, 1));
      a4[5] = vaddq_f64(v145, vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v116, v118, 1), v97, v115.f64[0]), v102, v115, 1));
      a4[6] = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, v158.f64[0]), v87, v158, 1), v180, *(double *)v156.i64), vmlaq_n_f64(v122, v94, v154));
      a4[7] = vaddq_f64(v144, vmlaq_n_f64(v123, v98, v154));
      *(_QWORD *)&v92.f64[0] = vextq_s8(v182, v182, 8uLL).u64[0];
      v108 = v165;
      v106.f64[0] = v142;
      a4[8] = vaddq_f64(v143, vmlaq_n_f64(v124, v102, v154));
      a4[9] = vmlaq_n_f64(v125, v94, *(double *)v182.i64);
      v88 = v152;
      a4[10] = vmlaq_n_f64(v126, v98, *(double *)v182.i64);
      a4[11] = vmlaq_n_f64(v127, v102, *(double *)v182.i64);
      v95.f64[0] = v160;
      v84 = v162;
      a4[12] = vmlaq_n_f64(v89, v94, v92.f64[0]);
      a4[13] = vmlaq_n_f64(v128, v98, v92.f64[0]);
      v89.f64[0] = v167;
      a4[14] = vmlaq_n_f64(v129, v102, v92.f64[0]);
      a4[15] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v119, v169), v117, v168), v94, v170);
      v104 = v92.f64[1];
      a4[16] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)__PAIR128__(*(unint64_t *)&v107, *(unint64_t *)&v100.f64[0]), v169), (float64x2_t)__PAIR128__(*(unint64_t *)&v103, *(unint64_t *)&v101.f64[0]), v168), v98, v170);
      a4[17] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v116, v169), v97, v168), v102, v170);
    }
    v130.f64[0] = v179.f64[0];
    if (*(_BYTE *)(v17 + 20))
    {
      v131.f64[0] = v178.f64[0];
      *(_QWORD *)&v131.f64[1] = vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL).u64[0];
      *(_QWORD *)&v130.f64[1] = vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u64[0];
      v132.f64[0] = v180.f64[0];
      *(_QWORD *)&v132.f64[1] = vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL).u64[0];
      *(_QWORD *)&v88.f64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
      v133.f64[0] = v181.f64[0];
      *(_QWORD *)&v133.f64[1] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u64[0];
      *(_QWORD *)&v87.f64[1] = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
      v134 = v176;
      *(_QWORD *)&v134.f64[1] = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
      *(_QWORD *)&v84.f64[1] = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
      *(_QWORD *)&v79.f64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
      a4[18] = vnegq_f64(v79);
      a4[19] = vnegq_f64(v84);
      v135 = v88;
      v136 = v87;
      v137 = v172;
      a4[20] = vnegq_f64(v134);
      a4[21] = vnegq_f64(v136);
      a4[22] = vnegq_f64(v133);
      a4[23] = vnegq_f64(v135);
      a4[24] = vnegq_f64(v132);
      a4[25] = vnegq_f64(v130);
      *(_QWORD *)&v137.f64[1] = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
      *(_QWORD *)&v138 = *(_OWORD *)&vnegq_f64(v137);
      *(_QWORD *)&v139 = *(_OWORD *)&vnegq_f64(v174);
      v106.f64[1] = v177;
      v101.f64[1] = v103;
      v100.f64[1] = v107;
      v95.f64[1] = v104;
      v89.f64[1] = v108;
      *(_QWORD *)&v140 = *(_OWORD *)&vnegq_f64(v175);
      a4[26] = vnegq_f64(v131);
      a4[27] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v89, v138), v95, v137, 1), v94, *(double *)v182.i64, 0);
      a4[28] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v100, v138), v101, v137, 1), v98, *(double *)v182.i64, 0);
      a4[29] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v106, v138), v97, v137, 1), v102, *(double *)v182.i64, 0);
      a4[30] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v89, v139), v95, v174, 1), v94, v171, 0);
      a4[31] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v100, v139), v101, v174, 1), v98, v171, 0);
      a4[32] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v106, v139), v97, v174, 1), v102, v171, 0);
      a4[33] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v89, v140), v95, v175, 1), v94, v173, 0);
      a4[34] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v100, v140), v101, v175, 1), v98, v173, 0);
      a4[35] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v106, v140), v97, v175, 1), v102, v173, 0);
    }
  }
  return v13 != 0;
}

void sub_20F3DC200(unsigned int *a1, double a2)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  unsigned int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char *v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  double *v52;
  double v53;
  int64x2_t *v54;
  uint64_t v55;
  int v56;
  uint64_t i;
  char *v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  int64x2_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v78;
  unsigned int *v79;
  uint64_t v80;
  char *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;

  v3 = a1[1];
  if (*a1 >= v3)
    v4 = v3;
  else
    v4 = *a1;
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (uint64_t *)*((_QWORD *)a1 + 1);
    v7 = *v6;
    while (1)
    {
      v8 = v5 + 1;
      v9 = v6[v5 + 1];
      if (v7 == v9)
        break;
      v10 = 8 * v7;
      while (1)
      {
        v11 = *(unsigned int *)(*((_QWORD *)a1 + 2) + 4 * v7);
        if (v5 <= v11)
          break;
        ++v7;
        v10 += 8;
        if (v9 == v7)
          goto LABEL_18;
      }
      if (v5 != v11)
        break;
      v12 = *((unsigned __int8 *)a1 + 28);
      if (*((_BYTE *)a1 + 28))
      {
        v13 = (double *)(*((_QWORD *)a1 + 4) + (v12 * v12) * v10);
        v14 = 8 * v12 + 8;
        do
        {
          *v13 = *v13 + a2;
          v13 = (double *)((char *)v13 + v14);
          --v12;
        }
        while (v12);
      }
      v7 = v9;
      ++v5;
      if (v8 == v4)
        return;
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
LABEL_18:
  if ((_DWORD)v5 == (_DWORD)v4)
    return;
  if (v3 != (_DWORD)v5)
  {
    v15 = operator new(4 * (v3 - v5));
    bzero(v15, 4 * (v3 - v5));
    ++*v15;
    v16 = (v5 + 1);
    if (v16 >= v3)
      goto LABEL_21;
LABEL_66:
    v64 = *((_QWORD *)a1 + 1);
    v17 = 1;
    v65 = v5;
    do
    {
      v66 = *(_QWORD *)(v64 + 8 * v16);
      v67 = *(_QWORD *)(v64 + 8 * (v65 + 2));
      if (v66 != v67)
      {
        while (v16 > *(unsigned int *)(*((_QWORD *)a1 + 2) + 4 * v66))
        {
          if (v67 == ++v66)
            goto LABEL_77;
        }
      }
      if (v66 == v67 || v16 != *(_DWORD *)(*((_QWORD *)a1 + 2) + 4 * v66))
      {
LABEL_77:
        if (v16 < v4)
        {
          ++v15[(v16 - v5)];
          ++v17;
        }
      }
      else
      {
        v68 = *((unsigned __int8 *)a1 + 28);
        if (*((_BYTE *)a1 + 28))
        {
          v69 = (double *)(*((_QWORD *)a1 + 4) + 8 * v66 * (v68 * v68));
          v70 = 8 * v68 + 8;
          do
          {
            *v69 = *v69 + a2;
            v69 = (double *)((char *)v69 + v70);
            --v68;
          }
          while (v68);
        }
      }
      v65 = v16++;
    }
    while (v3 != (_DWORD)v16);
    goto LABEL_22;
  }
  v15 = 0;
  ++MEMORY[0];
  v16 = (v5 + 1);
  if (v16 < v3)
    goto LABEL_66;
LABEL_21:
  v17 = 1;
  v3 = v16;
LABEL_22:
  v78 = *((unsigned __int8 *)a1 + 28);
  v18 = (char *)(v78 * v78);
  *((_QWORD *)a1 + 4) = malloc_type_realloc(*((void **)a1 + 4), 8 * (_QWORD)v18 * (*((_QWORD *)a1 + 5) + v17), 0x100004000313F17uLL);
  v19 = (char *)malloc_type_realloc(*((void **)a1 + 2), 4 * (*((_QWORD *)a1 + 5) + v17), 0x100004052888210uLL);
  *((_QWORD *)a1 + 2) = v19;
  v20 = *((_QWORD *)a1 + 4);
  v21 = *((_QWORD *)a1 + 5);
  v22 = v21 + v17;
  v79 = a1;
  *((_QWORD *)a1 + 5) = v22;
  if (v3 > v5)
  {
    v23 = &v19[4 * v21];
    v24 = &v19[4 * v22];
    v86 = v20 + 8 * v21 * (_QWORD)v18;
    v25 = (char *)(v20 + 8 * v22 * (_QWORD)v18);
    v75 = -(uint64_t)v18;
    v26 = v3;
    v73 = (v78 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v72 = (v73 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v71 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v27 = v78 * (unint64_t)v78;
    v28 = -8 * v27;
    v88 = v78 * v78;
    v74 = v5;
    v76 = v15;
    v87 = 8 * (v78 * v78);
    v90 = -16 * v27;
    while (1)
    {
      v30 = 8 * v26;
      v31 = v26 - 1;
      v32 = *((_QWORD *)v79 + 1);
      v33 = *(_QWORD *)(v32 + v30);
      v34 = *(_QWORD *)(v32 + 8 * v31);
      v35 = v33 - v34;
      *(_QWORD *)(v32 + v30) = v33 + v17;
      v89 = v31;
      if (!v15[(v31 - v5)])
      {
        v24 -= 4 * v35;
        if ((_DWORD)v33 != (_DWORD)v34)
          memmove(v24, &v23[-4 * (v33 - v34)], 4 * (v33 - v34));
        v85 = -(uint64_t)v35;
        v47 = v18 * v35;
        v29 = -v47;
        v18 = &v25[-8 * v47];
        if ((_DWORD)v47)
          memmove(v18, (const void *)(v86 - 8 * v47), 8 * v47);
        goto LABEL_26;
      }
      v82 = v17;
      v36 = v23;
      v84 = v18 * v35;
      v37 = v86 - 8 * v84;
      v38 = (v33 - v34);
      v81 = v36;
      v39 = &v36[-4 * v35];
      if (!v35)
        goto LABEL_44;
      v40 = v78;
      if ((_DWORD)v78)
        break;
      v48 = v31;
      while (1)
      {
        v49 = v35 - 1;
        v50 = *(_DWORD *)&v39[4 * v49];
        if (v50 < v31)
          break;
        *((_DWORD *)v24 - 1) = v50;
        v24 -= 4;
        v25 += v28;
        --v35;
        if (!v49)
        {
          v35 = 0;
          break;
        }
      }
LABEL_45:
      *((_DWORD *)v24 - 1) = v48;
      v24 -= 4;
      v18 = &v25[8 * v75];
      if ((_DWORD)v40)
        bzero(&v25[8 * v75], (8 * v78) * (unint64_t)v78);
      v51 = (char *)operator new((8 * (_WORD)v78 + 31) & 0xFE0, (std::align_val_t)0x20uLL);
      v80 = -v84;
      v85 = -v38;
      if ((_DWORD)v40)
      {
        v52 = (double *)v51;
        v53 = a2;
        if (v73 < 3)
          goto LABEL_81;
        v52 = (double *)&v51[8 * v72];
        v54 = (int64x2_t *)(v51 + 16);
        v55 = (v73 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v54[-1] = v71;
          *v54 = v71;
          v54 += 2;
          v55 -= 4;
        }
        while (v55);
        v53 = a2;
        if (v73 + 1 != v72)
        {
LABEL_81:
          do
            *v52++ = v53;
          while (v52 != (double *)&v51[8 * v40]);
        }
        v56 = 0;
        for (i = 0; i != v40; ++i)
        {
          *(_QWORD *)&v18[8 * v56] = *(_QWORD *)&v51[8 * i];
          v56 += v78 + 1;
        }
        MEMORY[0x212BC6368]();
        v17 = v82 - 1;
        if (v35)
        {
          v58 = &v81[4 * v35 - 4 + -4 * v38];
          v59 = v88 * (v35 - 1);
          v60 = v90;
          do
          {
            v61 = *(_DWORD *)v58;
            v58 -= 4;
            *((_DWORD *)v24 - 1) = v61;
            v24 -= 4;
            memmove(&v25[v60], (const void *)(v37 + 8 * v59), v87);
            v60 = v90;
            v59 -= v88;
            v25 += v28;
            --v35;
          }
          while (v35);
          v18 = &v25[v28];
        }
        LODWORD(v5) = v74;
        v15 = v76;
      }
      else
      {
        MEMORY[0x212BC6368](v51, 0x1000C8000313F17);
        v83 = v82 - 1;
        if (v35)
        {
          v62 = v35 - 1;
          LODWORD(v5) = v74;
          v15 = v76;
          v23 = v81;
          do
          {
            *((_DWORD *)v24 - 1) = *(_DWORD *)&v39[4 * v62];
            v24 -= 4;
            v18 += v28;
          }
          while ((unint64_t)v62--);
          v17 = v83;
          v29 = v80;
          goto LABEL_26;
        }
        LODWORD(v5) = v74;
        v15 = v76;
        v17 = v83;
      }
      v29 = v80;
      v23 = v81;
LABEL_26:
      v23 += 4 * v85;
      v25 = v18;
      v86 += 8 * v29;
      LODWORD(v18) = v78 * v78;
      v26 = v89;
      if (v89 <= v5)
        goto LABEL_64;
    }
    v41 = (int)v18;
    v42 = 0;
    v43 = 0;
    v44 = v41 * (~(_DWORD)v34 + v33);
    v45 = v24;
    while (1)
    {
      v46 = *(_DWORD *)&v39[4 * (v38 + v43 - 1)];
      if (v46 < v89)
        break;
      v45 -= 4;
      *(_DWORD *)&v24[4 * v43 - 4] = v46;
      v25 += v28;
      memmove(v25, (const void *)(v37 + 8 * v44), v87);
      --v43;
      ++v42;
      v44 -= v88;
      if ((_DWORD)v38 == (_DWORD)v42)
      {
        v35 = 0;
        goto LABEL_43;
      }
    }
    v35 = v38 + v43;
LABEL_43:
    v24 = v45;
LABEL_44:
    v40 = v78;
    v48 = v89;
    goto LABEL_45;
  }
LABEL_64:
  operator delete(v15);
}

void sub_20F3DC898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;

  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_20F3DC8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F3DC8C4(uint64_t a1, int a2, unsigned int **a3)
{
  void *v6;
  void *v7;
  void *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  _QWORD *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;

  if (*(__int16 *)(a1 + 24) < 0)
  {
    free(*(void **)(a1 + 8));
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    v6 = *(void **)(a1 + 8);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v7 = *(void **)(a1 + 16);
    if (v7)
    {
      free(v7);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v8 = *(void **)(a1 + 32);
    if (v8)
    {
      free(v8);
      *(_QWORD *)(a1 + 32) = 0;
    }
    *(_QWORD *)(a1 + 40) = 0;
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = (char *)v9 - (char *)*a3;
  v12 = v11 >> 2;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = v11 >> 2;
  result = malloc_type_malloc(2 * v11 + 8, 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 8) = result;
  *result = 0;
  if (v9 == v10)
  {
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    v14 = result;
    result = 0;
    v15 = *a3;
    v16 = 2;
    if ((unint64_t)(v12 + 1) > 2)
      v16 = v12 + 1;
    v17 = v16 - 1;
    v18 = v14 + 1;
    do
    {
      v19 = *v15++;
      result = (_QWORD *)((char *)result + v19);
      *v18++ = result;
      --v17;
    }
    while (v17);
    *(_QWORD *)(a1 + 40) = result;
    if (result)
    {
      *(_QWORD *)(a1 + 16) = malloc_type_calloc((size_t)result, 4uLL, 0x100004052888210uLL);
      result = malloc_type_malloc(8 * *(_QWORD *)(a1 + 40) * *(unsigned __int8 *)(a1 + 28) * *(unsigned __int8 *)(a1 + 28), 0x226795A9uLL);
      *(_QWORD *)(a1 + 32) = result;
    }
  }
  return result;
}

__n128 sub_20F3DCA20(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  unint64_t v30;
  __n128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 *v46;
  unint64_t v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  unint64_t v61;
  unint64_t v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  unint64_t v74;
  __n128 *v75;
  __n128 v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  BOOL v80;
  __n128 v81;
  unint64_t v82;
  unint64_t v83;
  __n128 *v84;
  unint64_t v85;
  __n128 v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  __n128 *v90;
  unint64_t v91;
  __n128 *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __n128 v96;
  __n128 v97;
  unint64_t v98;
  __n128 *v99;
  unint64_t v100;
  __int128 v101;
  __n128 *v102;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __n128 *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  int64_t v113;
  int64_t v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _OWORD *v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _OWORD *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __n128 v134;
  uint64_t v135;
  unint64_t v136;
  _OWORD *v137;
  unint64_t v138;
  _OWORD *v139;
  __int128 v140;
  __n128 v141;
  __n128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  __n128 v147;
  unint64_t v148;
  __int128 v149;
  __n128 v150;
  __int128 v151;
  __n128 v152;
  __int128 v153;
  __n128 v154;
  __n128 v155;
  __int128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __int128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  __n128 v214;
  __n128 v215;
  __int128 v216;
  unint64_t v217;
  __int128 v218;
  __int128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  __n128 v223;
  __n128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;

BOOL sub_20F3DD624(uint64_t a1, uint64_t a2, __n128 a3)
{
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 v10;
  __int128 v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  __n128 *v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __n128 v57;
  __int128 v58;
  __n128 v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __n128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __int128 v73;
  uint64_t v74;

  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v13 = *(_QWORD *)(a2 - 32);
      v12 = (__n128 *)(a2 - 32);
      if (v13 < *(_QWORD *)a1)
        goto LABEL_10;
      return 1;
    case 3:
      v14 = (__n128 *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a2 - 32);
      v12 = (__n128 *)(a2 - 32);
      v16 = v17;
      if (v15 < *(_QWORD *)a1)
      {
        if (v16 < v15)
        {
LABEL_10:
          v19 = *(__n128 *)a1;
          v18 = *(__n128 *)(a1 + 16);
          v20 = v12[1];
          *(__n128 *)a1 = *v12;
          *(__n128 *)(a1 + 16) = v20;
LABEL_11:
          *v12 = v19;
          v12[1] = v18;
          return 1;
        }
        v57 = *(__n128 *)a1;
        v56 = *(_OWORD *)(a1 + 16);
        v58 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v58;
        *v14 = v57;
        *(_OWORD *)(a1 + 48) = v56;
        if (v12->n128_u64[0] < *(_QWORD *)(a1 + 32))
        {
          v19 = *v14;
          v18 = *(__n128 *)(a1 + 48);
          v59 = v12[1];
          *v14 = *v12;
          *(__n128 *)(a1 + 48) = v59;
          goto LABEL_11;
        }
        return 1;
      }
      if (v16 >= v15)
        return 1;
      v36 = *v14;
      v35 = *(__n128 *)(a1 + 48);
      v37 = v12[1];
      *v14 = *v12;
      *(__n128 *)(a1 + 48) = v37;
      *v12 = v36;
      v12[1] = v35;
      if (*(_QWORD *)(a1 + 32) >= *(_QWORD *)a1)
        return 1;
LABEL_46:
      v71 = *(__n128 *)a1;
      v70 = *(__n128 *)(a1 + 16);
      v72 = v14[1];
      *(__n128 *)a1 = *v14;
      *(__n128 *)(a1 + 16) = v72;
      *v14 = v71;
      v14[1] = v70;
      return 1;
    case 4:
      v14 = (__n128 *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 32);
      v22 = (__n128 *)(a1 + 64);
      v23 = *(_QWORD *)(a1 + 64);
      v24 = (__n128 *)(a2 - 32);
      v25 = *(_QWORD *)a1;
      if (v21 >= *(_QWORD *)a1)
      {
        if (v23 < v21)
        {
          v39 = *v14;
          v38 = *(_OWORD *)(a1 + 48);
          v40 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v40;
          *v22 = v39;
          *(_OWORD *)(a1 + 80) = v38;
          if (v14->n128_u64[0] < v25)
          {
            v42 = *(__n128 *)a1;
            v41 = *(_OWORD *)(a1 + 16);
            v43 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v43;
            *v14 = v42;
            *(_OWORD *)(a1 + 48) = v41;
          }
        }
      }
      else
      {
        if (v23 >= v21)
        {
          v61 = *(__n128 *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v62 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v62;
          *v14 = v61;
          *(_OWORD *)(a1 + 48) = v60;
          if (v23 >= *(_QWORD *)(a1 + 32))
            goto LABEL_43;
          v27 = *v14;
          v26 = *(_OWORD *)(a1 + 48);
          v63 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v63;
        }
        else
        {
          v27 = *(__n128 *)a1;
          v26 = *(_OWORD *)(a1 + 16);
          v28 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v22;
          *(_OWORD *)(a1 + 16) = v28;
        }
        *v22 = v27;
        *(_OWORD *)(a1 + 80) = v26;
      }
LABEL_43:
      if (v24->n128_u64[0] < v22->n128_u64[0])
      {
        v65 = *v22;
        v64 = *(_OWORD *)(a1 + 80);
        v66 = *(_OWORD *)(a2 - 16);
        *v22 = *v24;
        *(_OWORD *)(a1 + 80) = v66;
        *v24 = v65;
        *(_OWORD *)(a2 - 16) = v64;
        if (v22->n128_u64[0] < v14->n128_u64[0])
        {
          v68 = *v14;
          v67 = *(_OWORD *)(a1 + 48);
          v69 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v69;
          *v22 = v68;
          *(_OWORD *)(a1 + 80) = v67;
          if (*(_QWORD *)(a1 + 32) < *(_QWORD *)a1)
            goto LABEL_46;
        }
      }
      return 1;
    case 5:
      sub_20F3DD9E4((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), (__n128 *)(a2 - 32), a3);
      return 1;
    default:
      v4 = (__n128 *)(a1 + 64);
      v5 = *(_QWORD *)(a1 + 64);
      v6 = (__n128 *)(a1 + 32);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_QWORD *)a1;
      if (v7 >= *(_QWORD *)a1)
      {
        if (v5 < v7)
        {
          v30 = *v6;
          v29 = *(_OWORD *)(a1 + 48);
          v31 = *(_OWORD *)(a1 + 80);
          *v6 = *v4;
          *(_OWORD *)(a1 + 48) = v31;
          *v4 = v30;
          *(_OWORD *)(a1 + 80) = v29;
          if (v6->n128_u64[0] < v8)
          {
            v33 = *(__n128 *)a1;
            v32 = *(_OWORD *)(a1 + 16);
            v34 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v6;
            *(_OWORD *)(a1 + 16) = v34;
            *v6 = v33;
            *(_OWORD *)(a1 + 48) = v32;
          }
        }
      }
      else
      {
        if (v5 >= v7)
        {
          v45 = *(__n128 *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v46 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v6;
          *(_OWORD *)(a1 + 16) = v46;
          *v6 = v45;
          *(_OWORD *)(a1 + 48) = v44;
          if (v5 >= *(_QWORD *)(a1 + 32))
            goto LABEL_28;
          v10 = *v6;
          v9 = *(_OWORD *)(a1 + 48);
          v47 = *(_OWORD *)(a1 + 80);
          *v6 = *v4;
          *(_OWORD *)(a1 + 48) = v47;
        }
        else
        {
          v10 = *(__n128 *)a1;
          v9 = *(_OWORD *)(a1 + 16);
          v11 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v4;
          *(_OWORD *)(a1 + 16) = v11;
        }
        *v4 = v10;
        *(_OWORD *)(a1 + 80) = v9;
      }
LABEL_28:
      v48 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      while (1)
      {
        v52 = *(_QWORD *)v48;
        if (*(_QWORD *)v48 < v4->n128_u64[0])
        {
          v73 = *(_OWORD *)(v48 + 8);
          v74 = *(_QWORD *)(v48 + 24);
          v53 = v49;
          do
          {
            v54 = a1 + v53;
            v55 = *(_OWORD *)(a1 + v53 + 80);
            *(_OWORD *)(v54 + 96) = *(_OWORD *)(a1 + v53 + 64);
            *(_OWORD *)(v54 + 112) = v55;
            if (v53 == -64)
            {
              v51 = a1;
              goto LABEL_31;
            }
            v53 -= 32;
          }
          while (v52 < *(_QWORD *)(v54 + 32));
          v51 = a1 + v53 + 96;
LABEL_31:
          *(_QWORD *)v51 = v52;
          *(_OWORD *)(v51 + 8) = v73;
          *(_QWORD *)(v51 + 24) = v74;
          if (++v50 == 8)
            return v48 + 32 == a2;
        }
        v4 = (__n128 *)v48;
        v49 += 32;
        v48 += 32;
        if (v48 == a2)
          return 1;
      }
  }
}

__n128 sub_20F3DD9E4(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;

  v6 = a2->n128_u64[0];
  v7 = a3->n128_u64[0];
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      v10 = *a2;
      result = a2[1];
      v11 = a3[1];
      *a2 = *a3;
      a2[1] = v11;
      *a3 = v10;
      a3[1] = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        v12 = *a1;
        result = a1[1];
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        *a2 = v12;
        a2[1] = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      v8 = *a1;
      result = a1[1];
      v9 = a3[1];
      *a1 = *a3;
      a1[1] = v9;
LABEL_9:
      *a3 = v8;
      a3[1] = result;
      goto LABEL_10;
    }
    v14 = *a1;
    result = a1[1];
    v15 = a2[1];
    *a1 = *a2;
    a1[1] = v15;
    *a2 = v14;
    a2[1] = result;
    if (a3->n128_u64[0] < a2->n128_u64[0])
    {
      v8 = *a2;
      result = a2[1];
      v16 = a3[1];
      *a2 = *a3;
      a2[1] = v16;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4->n128_u64[0] < a3->n128_u64[0])
  {
    v17 = *a3;
    result = a3[1];
    v18 = a4[1];
    *a3 = *a4;
    a3[1] = v18;
    *a4 = v17;
    a4[1] = result;
    if (a3->n128_u64[0] < a2->n128_u64[0])
    {
      v19 = *a2;
      result = a2[1];
      v20 = a3[1];
      *a2 = *a3;
      a2[1] = v20;
      *a3 = v19;
      a3[1] = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        v21 = *a1;
        result = a1[1];
        v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        *a2 = v21;
        a2[1] = result;
      }
    }
  }
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    v23 = *a4;
    result = a4[1];
    v24 = a5[1];
    *a4 = *a5;
    a4[1] = v24;
    *a5 = v23;
    a5[1] = result;
    if (a4->n128_u64[0] < a3->n128_u64[0])
    {
      v25 = *a3;
      result = a3[1];
      v26 = a4[1];
      *a3 = *a4;
      a3[1] = v26;
      *a4 = v25;
      a4[1] = result;
      if (a3->n128_u64[0] < a2->n128_u64[0])
      {
        v27 = *a2;
        result = a2[1];
        v28 = a3[1];
        *a2 = *a3;
        a2[1] = v28;
        *a3 = v27;
        a3[1] = result;
        if (a2->n128_u64[0] < a1->n128_u64[0])
        {
          v29 = *a1;
          result = a1[1];
          v30 = a2[1];
          *a1 = *a2;
          a1[1] = v30;
          *a2 = v29;
          a2[1] = result;
        }
      }
    }
  }
  return result;
}

__n128 sub_20F3DDB70(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  unint64_t v30;
  __n128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 *v46;
  unint64_t v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  unint64_t v61;
  unint64_t v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  unint64_t v74;
  __n128 *v75;
  __n128 v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  BOOL v80;
  __n128 v81;
  unint64_t v82;
  unint64_t v83;
  __n128 *v84;
  unint64_t v85;
  __n128 v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  __n128 *v90;
  unint64_t v91;
  __n128 *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __n128 v96;
  __n128 v97;
  unint64_t v98;
  __n128 *v99;
  unint64_t v100;
  __int128 v101;
  __n128 *v102;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __n128 *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  int64_t v113;
  int64_t v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _OWORD *v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _OWORD *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __n128 v134;
  uint64_t v135;
  unint64_t v136;
  _OWORD *v137;
  unint64_t v138;
  _OWORD *v139;
  __int128 v140;
  __n128 v141;
  __n128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  __n128 v147;
  unint64_t v148;
  __int128 v149;
  __n128 v150;
  __int128 v151;
  __n128 v152;
  __int128 v153;
  __n128 v154;
  __n128 v155;
  __int128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __int128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  __n128 v214;
  __n128 v215;
  __int128 v216;
  unint64_t v217;
  __int128 v218;
  __int128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  __n128 v223;
  __n128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;

BOOL sub_20F3DE774(uint64_t a1, uint64_t a2, __n128 a3)
{
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 v10;
  __int128 v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  __n128 *v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __n128 v57;
  __int128 v58;
  __n128 v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __n128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __int128 v73;
  uint64_t v74;

  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v13 = *(_QWORD *)(a2 - 32);
      v12 = (__n128 *)(a2 - 32);
      if (v13 < *(_QWORD *)a1)
        goto LABEL_10;
      return 1;
    case 3:
      v14 = (__n128 *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a2 - 32);
      v12 = (__n128 *)(a2 - 32);
      v16 = v17;
      if (v15 < *(_QWORD *)a1)
      {
        if (v16 < v15)
        {
LABEL_10:
          v19 = *(__n128 *)a1;
          v18 = *(__n128 *)(a1 + 16);
          v20 = v12[1];
          *(__n128 *)a1 = *v12;
          *(__n128 *)(a1 + 16) = v20;
LABEL_11:
          *v12 = v19;
          v12[1] = v18;
          return 1;
        }
        v57 = *(__n128 *)a1;
        v56 = *(_OWORD *)(a1 + 16);
        v58 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v58;
        *v14 = v57;
        *(_OWORD *)(a1 + 48) = v56;
        if (v12->n128_u64[0] < *(_QWORD *)(a1 + 32))
        {
          v19 = *v14;
          v18 = *(__n128 *)(a1 + 48);
          v59 = v12[1];
          *v14 = *v12;
          *(__n128 *)(a1 + 48) = v59;
          goto LABEL_11;
        }
        return 1;
      }
      if (v16 >= v15)
        return 1;
      v36 = *v14;
      v35 = *(__n128 *)(a1 + 48);
      v37 = v12[1];
      *v14 = *v12;
      *(__n128 *)(a1 + 48) = v37;
      *v12 = v36;
      v12[1] = v35;
      if (*(_QWORD *)(a1 + 32) >= *(_QWORD *)a1)
        return 1;
LABEL_46:
      v71 = *(__n128 *)a1;
      v70 = *(__n128 *)(a1 + 16);
      v72 = v14[1];
      *(__n128 *)a1 = *v14;
      *(__n128 *)(a1 + 16) = v72;
      *v14 = v71;
      v14[1] = v70;
      return 1;
    case 4:
      v14 = (__n128 *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 32);
      v22 = (__n128 *)(a1 + 64);
      v23 = *(_QWORD *)(a1 + 64);
      v24 = (__n128 *)(a2 - 32);
      v25 = *(_QWORD *)a1;
      if (v21 >= *(_QWORD *)a1)
      {
        if (v23 < v21)
        {
          v39 = *v14;
          v38 = *(_OWORD *)(a1 + 48);
          v40 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v40;
          *v22 = v39;
          *(_OWORD *)(a1 + 80) = v38;
          if (v14->n128_u64[0] < v25)
          {
            v42 = *(__n128 *)a1;
            v41 = *(_OWORD *)(a1 + 16);
            v43 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v43;
            *v14 = v42;
            *(_OWORD *)(a1 + 48) = v41;
          }
        }
      }
      else
      {
        if (v23 >= v21)
        {
          v61 = *(__n128 *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v62 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v62;
          *v14 = v61;
          *(_OWORD *)(a1 + 48) = v60;
          if (v23 >= *(_QWORD *)(a1 + 32))
            goto LABEL_43;
          v27 = *v14;
          v26 = *(_OWORD *)(a1 + 48);
          v63 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v63;
        }
        else
        {
          v27 = *(__n128 *)a1;
          v26 = *(_OWORD *)(a1 + 16);
          v28 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v22;
          *(_OWORD *)(a1 + 16) = v28;
        }
        *v22 = v27;
        *(_OWORD *)(a1 + 80) = v26;
      }
LABEL_43:
      if (v24->n128_u64[0] < v22->n128_u64[0])
      {
        v65 = *v22;
        v64 = *(_OWORD *)(a1 + 80);
        v66 = *(_OWORD *)(a2 - 16);
        *v22 = *v24;
        *(_OWORD *)(a1 + 80) = v66;
        *v24 = v65;
        *(_OWORD *)(a2 - 16) = v64;
        if (v22->n128_u64[0] < v14->n128_u64[0])
        {
          v68 = *v14;
          v67 = *(_OWORD *)(a1 + 48);
          v69 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v69;
          *v22 = v68;
          *(_OWORD *)(a1 + 80) = v67;
          if (*(_QWORD *)(a1 + 32) < *(_QWORD *)a1)
            goto LABEL_46;
        }
      }
      return 1;
    case 5:
      sub_20F3DD9E4((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), (__n128 *)(a2 - 32), a3);
      return 1;
    default:
      v4 = (__n128 *)(a1 + 64);
      v5 = *(_QWORD *)(a1 + 64);
      v6 = (__n128 *)(a1 + 32);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_QWORD *)a1;
      if (v7 >= *(_QWORD *)a1)
      {
        if (v5 < v7)
        {
          v30 = *v6;
          v29 = *(_OWORD *)(a1 + 48);
          v31 = *(_OWORD *)(a1 + 80);
          *v6 = *v4;
          *(_OWORD *)(a1 + 48) = v31;
          *v4 = v30;
          *(_OWORD *)(a1 + 80) = v29;
          if (v6->n128_u64[0] < v8)
          {
            v33 = *(__n128 *)a1;
            v32 = *(_OWORD *)(a1 + 16);
            v34 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v6;
            *(_OWORD *)(a1 + 16) = v34;
            *v6 = v33;
            *(_OWORD *)(a1 + 48) = v32;
          }
        }
      }
      else
      {
        if (v5 >= v7)
        {
          v45 = *(__n128 *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v46 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v6;
          *(_OWORD *)(a1 + 16) = v46;
          *v6 = v45;
          *(_OWORD *)(a1 + 48) = v44;
          if (v5 >= *(_QWORD *)(a1 + 32))
            goto LABEL_28;
          v10 = *v6;
          v9 = *(_OWORD *)(a1 + 48);
          v47 = *(_OWORD *)(a1 + 80);
          *v6 = *v4;
          *(_OWORD *)(a1 + 48) = v47;
        }
        else
        {
          v10 = *(__n128 *)a1;
          v9 = *(_OWORD *)(a1 + 16);
          v11 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v4;
          *(_OWORD *)(a1 + 16) = v11;
        }
        *v4 = v10;
        *(_OWORD *)(a1 + 80) = v9;
      }
LABEL_28:
      v48 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      while (1)
      {
        v52 = *(_QWORD *)v48;
        if (*(_QWORD *)v48 < v4->n128_u64[0])
        {
          v73 = *(_OWORD *)(v48 + 8);
          v74 = *(_QWORD *)(v48 + 24);
          v53 = v49;
          do
          {
            v54 = a1 + v53;
            v55 = *(_OWORD *)(a1 + v53 + 80);
            *(_OWORD *)(v54 + 96) = *(_OWORD *)(a1 + v53 + 64);
            *(_OWORD *)(v54 + 112) = v55;
            if (v53 == -64)
            {
              v51 = a1;
              goto LABEL_31;
            }
            v53 -= 32;
          }
          while (v52 < *(_QWORD *)(v54 + 32));
          v51 = a1 + v53 + 96;
LABEL_31:
          *(_QWORD *)v51 = v52;
          *(_OWORD *)(v51 + 8) = v73;
          *(_QWORD *)(v51 + 24) = v74;
          if (++v50 == 8)
            return v48 + 32 == a2;
        }
        v4 = (__n128 *)v48;
        v49 += 32;
        v48 += 32;
        if (v48 == a2)
          return 1;
      }
  }
}

_QWORD *sub_20F3DEB34(unsigned int *a1, _QWORD *a2)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char *v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  double *v63;
  uint64_t v64;
  char *v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;

  v2 = a2;
  v3 = a1;
  v4 = a1[1];
  if (*a1 >= v4)
    v5 = v4;
  else
    v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 28);
  if (!(_DWORD)v5)
  {
    LODWORD(v8) = 0;
    goto LABEL_18;
  }
  v7 = (uint64_t *)*((_QWORD *)a1 + 1);
  if (*((_BYTE *)a1 + 28))
  {
    v8 = 0;
    v9 = *v7;
    v10 = 8 * (v6 * v6);
    while (1)
    {
      v11 = v8 + 1;
      v12 = v7[v8 + 1];
      if (v9 == v12)
        break;
      v13 = v10 * v9;
      while (1)
      {
        v14 = *(unsigned int *)(*((_QWORD *)a1 + 2) + 4 * v9);
        if (v8 <= v14)
          break;
        ++v9;
        v13 += v10;
        if (v9 == v12)
          goto LABEL_18;
      }
      if (v8 != v14)
        break;
      v15 = v8 * v6;
      v16 = *a2;
      v17 = (double *)(*((_QWORD *)a1 + 4) + v13);
      v18 = v6;
      do
      {
        *v17 = *(double *)(v16 + 8 * v15++) + *v17;
        v17 += v6 + 1;
        --v18;
      }
      while (v18);
      v9 = v12;
      ++v8;
      if (v11 == v5)
        return v2;
    }
LABEL_18:
    if ((_DWORD)v8 == (_DWORD)v5)
      return v2;
    goto LABEL_19;
  }
  v79 = 0;
  v80 = *v7;
  while (1)
  {
    v81 = v79 + 1;
    v82 = v7[v79 + 1];
    if (v80 == v82)
      break;
    while (1)
    {
      v83 = *(unsigned int *)(*((_QWORD *)a1 + 2) + 4 * v80);
      if (v79 <= v83)
        break;
      if (v82 == ++v80)
        goto LABEL_85;
    }
    if (v79 != v83)
      break;
    v80 = v7[++v79];
    if (v81 == v5)
      return v2;
  }
LABEL_85:
  LODWORD(v8) = v79;
  if ((_DWORD)v79 == (_DWORD)v5)
    return v2;
LABEL_19:
  v19 = v6;
  if (v4 != (_DWORD)v8)
  {
    v20 = operator new(4 * (v4 - v8));
    bzero(v20, 4 * (v4 - v8));
    v6 = v19;
    ++*v20;
    v21 = (v8 + 1);
    if (v21 >= v4)
      goto LABEL_21;
LABEL_64:
    v71 = *((_QWORD *)v3 + 1);
    v22 = (v6 * v6);
    v23 = 1;
    v72 = v8;
    do
    {
      v73 = *(_QWORD *)(v71 + 8 * v21);
      v74 = *(_QWORD *)(v71 + 8 * (v72 + 2));
      if (v73 != v74)
      {
        while (v21 > *(unsigned int *)(*((_QWORD *)v3 + 2) + 4 * v73))
        {
          if (v74 == ++v73)
            goto LABEL_75;
        }
      }
      if (v73 == v74 || v21 != *(_DWORD *)(*((_QWORD *)v3 + 2) + 4 * v73))
      {
LABEL_75:
        if (v21 < v5)
        {
          ++v20[(v21 - v8)];
          ++v23;
        }
      }
      else if ((_DWORD)v6)
      {
        v75 = (double *)(*((_QWORD *)v3 + 4) + 8 * v73 * v22);
        v76 = v21 * v6;
        v77 = *v2;
        v78 = v6;
        do
        {
          *v75 = *(double *)(v77 + 8 * v76++) + *v75;
          v75 += v6 + 1;
          --v78;
        }
        while (v78);
      }
      v72 = v21++;
    }
    while (v4 != (_DWORD)v21);
    goto LABEL_22;
  }
  v20 = 0;
  ++MEMORY[0];
  v21 = (v8 + 1);
  if (v21 < v4)
    goto LABEL_64;
LABEL_21:
  v22 = (v6 * v6);
  v23 = 1;
  v4 = v21;
LABEL_22:
  v24 = v23;
  v25 = v23;
  v99 = 8 * v22;
  v100 = v22;
  *((_QWORD *)v3 + 4) = malloc_type_realloc(*((void **)v3 + 4), (*((_QWORD *)v3 + 5) + v23) * 8 * v22, 0x100004000313F17uLL);
  v26 = (char *)malloc_type_realloc(*((void **)v3 + 2), 4 * (*((_QWORD *)v3 + 5) + v25), 0x100004052888210uLL);
  *((_QWORD *)v3 + 2) = v26;
  v27 = *((_QWORD *)v3 + 4);
  v28 = *((_QWORD *)v3 + 5);
  v29 = v28 + v25;
  *((_QWORD *)v3 + 5) = v28 + v25;
  if (v4 > v8)
  {
    v30 = v24;
    v31 = &v26[4 * v28];
    v32 = &v26[4 * v29];
    v33 = v27 + 8 * v28 * v100;
    v34 = (char *)(v27 + 8 * v29 * v100);
    v87 = v3;
    v35 = v4;
    v84 = 8 * v19 + 8;
    v85 = (8 * v19) * (unint64_t)v19;
    v86 = v8;
    v91 = v2;
    v92 = v20;
    v94 = v19;
    do
    {
      v38 = 8 * v35--;
      v39 = *((_QWORD *)v3 + 1);
      v40 = *(_QWORD *)(v39 + v38);
      v41 = *(_QWORD *)(v39 + 8 * v35);
      v42 = v40 - v41;
      v96 = v30;
      *(_QWORD *)(v39 + v38) = v40 + v30;
      v101 = v35;
      if (!v20[(v35 - v8)])
      {
        v53 = v31;
        v32 -= 4 * v42;
        v36 = -(uint64_t)(v40 - v41);
        if ((_DWORD)v40 != (_DWORD)v41)
        {
          memmove(v32, &v31[-4 * (v40 - v41)], 4 * (v40 - v41));
          v36 = -(uint64_t)v42;
          v35 = v101;
        }
        v54 = v100 * v42;
        v37 = -v54;
        v55 = &v34[-8 * v54];
        if ((_DWORD)v54)
        {
          v56 = v36;
          v57 = -v54;
          memmove(&v34[-8 * v54], (const void *)(v33 - 8 * v54), 8 * v54);
          v37 = v57;
          v36 = v56;
          v35 = v101;
        }
        v30 = v96;
        v58 = v53;
        v2 = v91;
        v20 = v92;
        goto LABEL_26;
      }
      v43 = v100 * v42;
      v93 = v33;
      v44 = v33 - 8 * v43;
      v45 = (v40 - v41);
      v95 = v31;
      v46 = &v31[-4 * v42];
      if (v42)
      {
        if (!(_DWORD)v94)
        {
          v52 = v40 - v41;
          while (1)
          {
            v59 = v52 - 1;
            v60 = *(_DWORD *)&v46[4 * v59];
            if (v60 < v35)
              break;
            *((_DWORD *)v32 - 1) = v60;
            v32 -= 4;
            v34 -= 8 * v100;
            --v52;
            if (!v59)
            {
              v52 = 0;
              break;
            }
          }
          v37 = -v43;
          v36 = -v45;
          *((_DWORD *)v32 - 1) = v35;
          v32 -= 4;
          v55 = &v34[-8 * v100];
LABEL_55:
          v98 = v96 - 1;
          if (v52)
          {
            v68 = v52 - 1;
            v20 = v92;
            do
            {
              *((_DWORD *)v32 - 1) = *(_DWORD *)&v46[4 * v68];
              v32 -= 4;
              v55 -= 8 * v100;
            }
            while ((unint64_t)v68--);
            LODWORD(v8) = v86;
            v3 = v87;
          }
          else
          {
            LODWORD(v8) = v86;
            v3 = v87;
            v20 = v92;
          }
          v30 = v98;
          v58 = v95;
          v33 = v93;
          goto LABEL_26;
        }
        v89 = v100 * v42;
        v47 = 0;
        v48 = 0;
        v49 = v100 * (~(_DWORD)v41 + v40);
        v50 = v32;
        while (1)
        {
          v51 = *(_DWORD *)&v46[4 * (v45 + v48 - 1)];
          if (v51 < v35)
            break;
          v50 -= 4;
          *(_DWORD *)&v32[4 * v48 - 4] = v51;
          v34 -= 8 * v100;
          memmove(v34, (const void *)(v44 + 8 * v49), v99);
          v35 = v101;
          --v48;
          ++v47;
          v49 -= v100;
          if ((_DWORD)v45 == (_DWORD)v47)
          {
            v52 = 0;
            goto LABEL_53;
          }
        }
        v52 = v45 + v48;
LABEL_53:
        v32 = v50;
        v43 = v89;
        v2 = v91;
      }
      else
      {
        v52 = 0;
      }
      v37 = -v43;
      v36 = -v45;
      *((_DWORD *)v32 - 1) = v35;
      v32 -= 4;
      v55 = &v34[-8 * v100];
      if (!(_DWORD)v94)
        goto LABEL_55;
      v88 = v37;
      v90 = -v45;
      bzero(v55, v85);
      v35 = v101;
      v58 = v95;
      v61 = v101 * v94;
      v62 = *v2;
      v63 = (double *)&v34[-8 * v100];
      v64 = v94;
      do
      {
        *v63 = *(double *)(v62 + 8 * v61++) + *v63;
        v63 = (double *)((char *)v63 + v84);
        --v64;
      }
      while (v64);
      v30 = v96 - 1;
      if (v52)
      {
        v97 = v96 - 1;
        v65 = &v95[4 * v52 - 4 + -4 * v45];
        v66 = v100 * (v52 - 1);
        do
        {
          v67 = *(_DWORD *)v65;
          v65 -= 4;
          *((_DWORD *)v32 - 1) = v67;
          v32 -= 4;
          memmove(&v34[-16 * v100], (const void *)(v44 + 8 * v66), v99);
          v66 -= v100;
          v34 -= 8 * v100;
          --v52;
        }
        while (v52);
        v55 = &v34[-8 * v100];
        LODWORD(v8) = v86;
        v3 = v87;
        v2 = v91;
        v20 = v92;
        v30 = v97;
        v58 = v95;
        v33 = v93;
        v35 = v101;
      }
      else
      {
        LODWORD(v8) = v86;
        v3 = v87;
        v20 = v92;
        v33 = v93;
      }
      v37 = v88;
      v36 = v90;
LABEL_26:
      v31 = &v58[4 * v36];
      v34 = v55;
      v33 += 8 * v37;
    }
    while (v35 > v8);
  }
  operator delete(v20);
  return v2;
}

void sub_20F3DF1C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3DF1D8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (*a3 != a3[1])
  {
    v3 = *(unsigned int *)(result + 12);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = *(uint64_t **)(result + 88);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
        goto LABEL_8;
LABEL_6:
      while (++v4 < v3)
      {
        v8 = (uint64_t *)(*(_QWORD *)(result + 88) + 24 * v4);
        v6 = *v8;
        v7 = v8[1];
        if (v6 != v7)
        {
LABEL_8:
          while (v4 != *(_DWORD *)v6)
          {
            v6 += 16;
            if (v6 == v7)
              goto LABEL_6;
          }
          if (v4 >= (uint64_t)(a3[1] - *a3) >> 2)
            sub_20EDB40C4();
          v9 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v6 + 8));
          v10 = *a2 + 8 * *(unsigned int *)(*a3 + 4 * v4);
          *(_QWORD *)&v11 = *v9;
          if (v9 == (_QWORD *)*a2)
          {
            *(_QWORD *)&v12 = v9[14];
            *(_QWORD *)&v13 = v9[28];
            *((_QWORD *)&v11 + 1) = v9[7];
            *((_QWORD *)&v12 + 1) = v9[21];
            *((_QWORD *)&v13 + 1) = v9[35];
            *(_OWORD *)(v10 + 16) = v12;
            *(_OWORD *)(v10 + 32) = v13;
            *(_OWORD *)v10 = v11;
            v3 = *(unsigned int *)(result + 12);
          }
          else
          {
            *(_QWORD *)v10 = v11;
            *(_QWORD *)(v10 + 8) = v9[7];
            *(_QWORD *)(v10 + 16) = v9[14];
            *(_QWORD *)(v10 + 24) = v9[21];
            *(_QWORD *)(v10 + 32) = v9[28];
            *(_QWORD *)(v10 + 40) = v9[35];
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F3DF2F0(_QWORD *a1)
{
  _QWORD *v2;

  v2 = sub_20F3DF3AC(a1, 0, 0, 0);
  sub_20F3DF54C(v2 + 14, 0, 0, 0);
  sub_20F3DF6F0(a1 + 28, 0, 0, 0);
  sub_20F3DF894(a1 + 42, 0, 0, 0);
  return a1;
}

void sub_20F3DF36C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_20F3C6C40(v3);
  sub_20F3C6C40(v2);
  sub_20F3C6C40(v1);
  _Unwind_Resume(a1);
}

void sub_20F3DF398(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F3C6C40(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F3DF3AC(_QWORD *a1, unsigned int a2, unsigned int a3, int a4)
{
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v6 = (_QWORD *)sub_20F2B3854((uint64_t)a1, a2, a3);
  *v6 = &off_24C9FFA20;
  v7 = (_BYTE *)v6[2];
  v8 = (16 * a4);
  if (v8 <= (uint64_t)(v6[4] - (_QWORD)v7) >> 3)
    return a1;
  v9 = (_BYTE *)a1[3];
  v10 = (char *)operator new(8 * v8);
  v11 = v9 - v7;
  v12 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
  v13 = v12;
  if (v9 != v7)
  {
    if ((unint64_t)(v11 - 8) < 0x58)
    {
      v13 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_9:
        v22 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v13 - 1) = v22;
        v13 -= 8;
      }
      while (v9 != v7);
      goto LABEL_10;
    }
    v13 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
    if (v9 - v10 - (v11 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_9;
    v14 = v11 >> 3;
    v15 = ((unint64_t)(v11 - 8) >> 3) + 1;
    v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = &v9[-v16];
    v13 = &v12[-v16];
    v18 = &v10[8 * v14 - 16];
    v19 = (__int128 *)(v9 - 16);
    v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v19;
      *((_OWORD *)v18 - 1) = *(v19 - 1);
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v9 = v17;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_9;
  }
LABEL_10:
  a1[2] = v13;
  a1[3] = v12;
  a1[4] = &v10[8 * v8];
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_20F3DF4C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  *v1 = off_24C9FCCA8;
  v3 = v1[11];
  if (v3)
  {
    v4 = v1[12];
    v5 = (void *)v1[11];
    if (v4 != v3)
    {
      v6 = v1[12];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)v1[11];
    }
    v1[12] = v3;
    operator delete(v5);
  }
  *v1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(v1 + 5));
  v9 = (void *)v1[2];
  if (v9)
  {
    v1[3] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20F3DF54C(_QWORD *a1, unsigned int a2, unsigned int a3, int a4)
{
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v6 = (_QWORD *)sub_20F2B3854((uint64_t)a1, a2, a3);
  *v6 = &off_24C9FF9A8;
  v7 = (_BYTE *)v6[2];
  v8 = (24 * a4);
  if (v8 <= (uint64_t)(v6[4] - (_QWORD)v7) >> 3)
    return a1;
  v9 = (_BYTE *)a1[3];
  v10 = (char *)operator new(8 * v8);
  v11 = v9 - v7;
  v12 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
  v13 = v12;
  if (v9 != v7)
  {
    if ((unint64_t)(v11 - 8) < 0x58)
    {
      v13 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_9:
        v22 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v13 - 1) = v22;
        v13 -= 8;
      }
      while (v9 != v7);
      goto LABEL_10;
    }
    v13 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v9 - &v10[v11 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_9;
    v14 = v11 >> 3;
    v15 = ((unint64_t)(v11 - 8) >> 3) + 1;
    v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = &v9[-v16];
    v13 = &v12[-v16];
    v18 = &v10[8 * v14 - 16];
    v19 = (__int128 *)(v9 - 16);
    v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v19;
      *((_OWORD *)v18 - 1) = *(v19 - 1);
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v9 = v17;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_9;
  }
LABEL_10:
  a1[2] = v13;
  a1[3] = v12;
  a1[4] = &v10[8 * v8];
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_20F3DF668(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  *v1 = off_24C9FCCA8;
  v3 = v1[11];
  if (v3)
  {
    v4 = v1[12];
    v5 = (void *)v1[11];
    if (v4 != v3)
    {
      v6 = v1[12];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)v1[11];
    }
    v1[12] = v3;
    operator delete(v5);
  }
  *v1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(v1 + 5));
  v9 = (void *)v1[2];
  if (v9)
  {
    v1[3] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20F3DF6F0(_QWORD *a1, unsigned int a2, unsigned int a3, int a4)
{
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v6 = (_QWORD *)sub_20F2B3854((uint64_t)a1, a2, a3);
  *v6 = &off_24C9FF930;
  v7 = (_BYTE *)v6[2];
  v8 = (24 * a4);
  if (v8 <= (uint64_t)(v6[4] - (_QWORD)v7) >> 3)
    return a1;
  v9 = (_BYTE *)a1[3];
  v10 = (char *)operator new(8 * v8);
  v11 = v9 - v7;
  v12 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
  v13 = v12;
  if (v9 != v7)
  {
    if ((unint64_t)(v11 - 8) < 0x58)
    {
      v13 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_9:
        v22 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v13 - 1) = v22;
        v13 -= 8;
      }
      while (v9 != v7);
      goto LABEL_10;
    }
    v13 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v9 - &v10[v11 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_9;
    v14 = v11 >> 3;
    v15 = ((unint64_t)(v11 - 8) >> 3) + 1;
    v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = &v9[-v16];
    v13 = &v12[-v16];
    v18 = &v10[8 * v14 - 16];
    v19 = (__int128 *)(v9 - 16);
    v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v19;
      *((_OWORD *)v18 - 1) = *(v19 - 1);
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v9 = v17;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_9;
  }
LABEL_10:
  a1[2] = v13;
  a1[3] = v12;
  a1[4] = &v10[8 * v8];
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_20F3DF80C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  *v1 = off_24C9FCCA8;
  v3 = v1[11];
  if (v3)
  {
    v4 = v1[12];
    v5 = (void *)v1[11];
    if (v4 != v3)
    {
      v6 = v1[12];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)v1[11];
    }
    v1[12] = v3;
    operator delete(v5);
  }
  *v1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(v1 + 5));
  v9 = (void *)v1[2];
  if (v9)
  {
    v1[3] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20F3DF894(_QWORD *a1, unsigned int a2, unsigned int a3, int a4)
{
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v6 = (_QWORD *)sub_20F2B3854((uint64_t)a1, a2, a3);
  *v6 = &off_24C9FF8B8;
  v7 = (_BYTE *)v6[2];
  v8 = (36 * a4);
  if (v8 <= (uint64_t)(v6[4] - (_QWORD)v7) >> 3)
    return a1;
  v9 = (_BYTE *)a1[3];
  v10 = (char *)operator new(8 * v8);
  v11 = v9 - v7;
  v12 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
  v13 = v12;
  if (v9 != v7)
  {
    if ((unint64_t)(v11 - 8) < 0x58)
    {
      v13 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_9:
        v22 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v13 - 1) = v22;
        v13 -= 8;
      }
      while (v9 != v7);
      goto LABEL_10;
    }
    v13 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v9 - &v10[v11 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_9;
    v14 = v11 >> 3;
    v15 = ((unint64_t)(v11 - 8) >> 3) + 1;
    v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = &v9[-v16];
    v13 = &v12[-v16];
    v18 = &v10[8 * v14 - 16];
    v19 = (__int128 *)(v9 - 16);
    v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v19;
      *((_OWORD *)v18 - 1) = *(v19 - 1);
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v9 = v17;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_9;
  }
LABEL_10:
  a1[2] = v13;
  a1[3] = v12;
  a1[4] = &v10[8 * v8];
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_20F3DF9B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  *v1 = off_24C9FCCA8;
  v3 = v1[11];
  if (v3)
  {
    v4 = v1[12];
    v5 = (void *)v1[11];
    if (v4 != v3)
    {
      v6 = v1[12];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)v1[11];
    }
    v1[12] = v3;
    operator delete(v5);
  }
  *v1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(v1 + 5));
  v9 = (void *)v1[2];
  if (v9)
  {
    v1[3] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_20F3DFA38(_QWORD *a1)
{
  sub_20F3C6804(a1);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F3DFA5C(uint64_t a1)
{
  __n128 result;

  __asm { FMOV            V0.2D, #1.0 }
  sub_20F3CD36C(*(_QWORD *)(a1 + 1120));
  return result;
}

uint64_t sub_20F3DFA8C(uint64_t a1)
{
  return **(_QWORD **)(a1 + 1120);
}

uint64_t sub_20F3DFA98(uint64_t a1)
{
  return **(_QWORD **)(a1 + 1120);
}

uint64_t sub_20F3DFAA4(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 1120) + 8);
}

double *sub_20F3DFAB0(uint64_t a1, double *a2, char a3)
{
  double *result;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;

  result = sub_20F3E1644(a1, &v15, a2);
  if ((a3 & 1) != 0)
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a1 + 8) = _Q0;
    v11 = 1.0;
    v12 = 1.0;
  }
  else
  {
    v12 = 1.0e20;
    v11 = 1.0e-10;
    v13 = 0x3DDB7CDFD9D7BDBBLL;
    v14 = 1.0e20;
    if (v15 > 0.0)
    {
      v13 = *(_QWORD *)&v15;
      v14 = 1.0 / (v15 * v15);
    }
    *(_QWORD *)(a1 + 8) = v13;
    *(double *)(a1 + 16) = v14;
    if (v16 > 0.0)
    {
      v11 = v16;
      v12 = 1.0 / (v16 * v16);
    }
  }
  *(double *)(a1 + 24) = v11;
  *(double *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 517) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  return result;
}

double *sub_20F3DFB5C(uint64_t a1, uint64_t a2, char a3)
{
  double *result;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;

  result = sub_20F3E1910(a1, &v15, a2);
  if ((a3 & 1) != 0)
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a1 + 8) = _Q0;
    v11 = 1.0;
    v12 = 1.0;
  }
  else
  {
    v12 = 1.0e20;
    v11 = 1.0e-10;
    v13 = 0x3DDB7CDFD9D7BDBBLL;
    v14 = 1.0e20;
    if (v15 > 0.0)
    {
      v13 = *(_QWORD *)&v15;
      v14 = 1.0 / (v15 * v15);
    }
    *(_QWORD *)(a1 + 8) = v13;
    *(double *)(a1 + 16) = v14;
    if (v16 > 0.0)
    {
      v11 = v16;
      v12 = 1.0 / (v16 * v16);
    }
  }
  *(double *)(a1 + 24) = v11;
  *(double *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 517) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  return result;
}

double sub_20F3DFC08(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v25;
  uint64_t v26;
  double i;
  _OWORD *v28;
  _BOOL4 v29;
  uint64_t v30;
  __int128 v31;
  double v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  _BOOL4 v43;
  uint64_t v44;
  __int128 v45;
  double v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v65;
  uint64_t v66;
  double v67;
  double *v68;
  double v69;
  double v70;

  kdebug_trace();
  v4 = a2[66];
  if (v4 > 1)
    goto LABEL_9;
  if (a2[65] >= 2uLL)
  {
    v7 = (_QWORD *)a2[64];
  }
  else
  {
    a2[65] = 2;
    v5 = (_QWORD *)a2[64];
    v6 = (_QWORD *)operator new[]();
    v7 = v6;
    if (v4)
      *v6 = *v5;
    v8 = (_QWORD *)a2[64];
    if (v8 != a2 && v8)
      MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
    a2[64] = v7;
    v4 = a2[66];
    if (v4 > 1)
    {
LABEL_9:
      a2[66] = 2;
      if (*(_BYTE *)(a1 + 516))
        goto LABEL_10;
LABEL_19:
      v25 = *(_QWORD *)(a1 + 240);
      v26 = *(_QWORD *)(a1 + 248);
      v11 = 0.0;
      for (i = 0.0; v25 != v26; v25 += 888)
      {
        while (1)
        {
          v28 = (_OWORD *)(v25 + 800);
          v29 = sub_20F3E07E4(v25 + 8, (float64x2_t **)(v25 + 736), (float64x2_t *)(v25 + 800));
          *(_BYTE *)(v25 + 856) = v29;
          if (v29)
            break;
          *(_QWORD *)(v25 + 848) = 0;
          v25 += 888;
          if (v25 == v26)
            goto LABEL_26;
        }
        v30 = *(_QWORD *)(v25 + 864);
        if (v30)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 24))(v30, v25 + 800);
        v31 = *(_OWORD *)(v25 + 816);
        *(_OWORD *)(v25 + 752) = *v28;
        *(_OWORD *)(v25 + 768) = v31;
        _Q2 = *v28;
        _Q1 = *(_OWORD *)(v25 + 816);
        *(_OWORD *)(v25 + 784) = *(_OWORD *)(v25 + 832);
        _D4 = *((_QWORD *)&_Q2 + 1);
        __asm { FMLA            D3, D4, V2.D[1] }
        *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
        __asm { FMLA            D3, D2, V1.D[1] }
        *(_QWORD *)&_Q1 = *(_QWORD *)(v25 + 840);
        __asm { FMLA            D3, D1, V0.D[1] }
        v38 = *(double *)(a1 + 16) * _D3;
        *(double *)(v25 + 848) = v38;
        i = i + v38;
      }
LABEL_26:
      v39 = (double *)a2[64];
      *v39 = i * 0.5;
      v40 = *(_QWORD *)(a1 + 264);
      v41 = *(_QWORD *)(a1 + 272);
      if (v40 == v41)
        goto LABEL_50;
      v11 = 0.0;
      do
      {
        while (1)
        {
          v42 = (_OWORD *)(v40 + 800);
          v43 = sub_20F3E115C(v40 + 8, (_QWORD *)(v40 + 736), (float64x2_t *)(v40 + 800));
          *(_BYTE *)(v40 + 856) = v43;
          if (v43)
            break;
          *(_QWORD *)(v40 + 848) = 0;
          v40 += 888;
          if (v40 == v41)
            goto LABEL_33;
        }
        v44 = *(_QWORD *)(v40 + 864);
        if (v44)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 24))(v44, v40 + 800);
        v45 = *(_OWORD *)(v40 + 816);
        *(_OWORD *)(v40 + 752) = *v42;
        *(_OWORD *)(v40 + 768) = v45;
        _Q2 = *v42;
        _Q1 = *(_OWORD *)(v40 + 816);
        *(_OWORD *)(v40 + 784) = *(_OWORD *)(v40 + 832);
        _D4 = *((_QWORD *)&_Q2 + 1);
        __asm { FMLA            D3, D4, V2.D[1] }
        *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
        __asm { FMLA            D3, D2, V1.D[1] }
        *(_QWORD *)&_Q1 = *(_QWORD *)(v40 + 840);
        __asm { FMLA            D3, D1, V0.D[1] }
        v52 = *(double *)(a1 + 32) * _D3;
        *(double *)(v40 + 848) = v52;
        v11 = v11 + v52;
        v40 += 888;
      }
      while (v40 != v41);
LABEL_33:
      v39 = (double *)a2[64];
      goto LABEL_50;
    }
  }
  bzero(&v7[v4], 16 - 8 * v4);
  a2[66] = 2;
  if (!*(_BYTE *)(a1 + 516))
    goto LABEL_19;
LABEL_10:
  v10 = *(_QWORD *)(a1 + 240);
  v9 = *(_QWORD *)(a1 + 248);
  v11 = 0.0;
  v12 = 0.0;
  if (v10 == v9)
    goto LABEL_38;
  if (*(_BYTE *)(a1 + 515))
  {
    v13 = v9 - v10 - 888;
    if (v13 < 0x378)
    {
      v14 = *(_QWORD *)(a1 + 240);
      do
      {
LABEL_37:
        v12 = v12 + *(double *)(v14 + 848);
        v14 += 888;
      }
      while (v14 != v9);
      goto LABEL_38;
    }
    v53 = v13 / 0x378 + 1;
    v14 = v10 + 888 * (v53 & 0xFFFFFFFFFFFFFELL);
    v54 = v53 & 0xFFFFFFFFFFFFFELL;
    do
    {
      v12 = v12 + *(double *)(v10 + 848) + *(double *)(v10 + 1736);
      v10 += 1776;
      v54 -= 2;
    }
    while (v54);
    if (v53 != (v53 & 0xFFFFFFFFFFFFFELL))
      goto LABEL_37;
  }
  else
  {
    do
    {
      if (*(_BYTE *)(v10 + 856))
      {
        v15 = *(_OWORD *)(v10 + 768);
        *(_OWORD *)(v10 + 800) = *(_OWORD *)(v10 + 752);
        *(_OWORD *)(v10 + 816) = v15;
        _Q2 = *(_OWORD *)(v10 + 800);
        *(_OWORD *)(v10 + 832) = *(_OWORD *)(v10 + 784);
        _D5 = *((_QWORD *)&_Q2 + 1);
        __asm { FMLA            D4, D5, V2.D[1] }
        *(_QWORD *)&_Q2 = *(_QWORD *)(v10 + 824);
        __asm { FMLA            D4, D2, V3.D[1] }
        *(_QWORD *)&_Q2 = *(_QWORD *)(v10 + 840);
        __asm { FMLA            D4, D2, V1.D[1] }
        *(double *)&v15 = *(double *)(a1 + 16) * _D4;
        *(_QWORD *)(v10 + 848) = v15;
        v12 = v12 + *(double *)&v15;
      }
      v10 += 888;
    }
    while (v10 != v9);
  }
LABEL_38:
  v39 = (double *)a2[64];
  *v39 = v12 * 0.5;
  v56 = *(_QWORD *)(a1 + 264);
  v55 = *(_QWORD *)(a1 + 272);
  if (v56 == v55)
    goto LABEL_50;
  if (!*(_BYTE *)(a1 + 515))
  {
    v11 = 0.0;
    do
    {
      if (*(_BYTE *)(v56 + 856))
      {
        v59 = *(_OWORD *)(v56 + 768);
        *(_OWORD *)(v56 + 800) = *(_OWORD *)(v56 + 752);
        *(_OWORD *)(v56 + 816) = v59;
        _Q1 = *(_OWORD *)(v56 + 800);
        *(_OWORD *)(v56 + 832) = *(_OWORD *)(v56 + 784);
        _D4 = *((_QWORD *)&_Q1 + 1);
        __asm { FMLA            D3, D4, V1.D[1] }
        *(_QWORD *)&_Q1 = *(_QWORD *)(v56 + 824);
        __asm { FMLA            D3, D1, V2.D[1] }
        *(_QWORD *)&_Q1 = *(_QWORD *)(v56 + 840);
        __asm { FMLA            D3, D1, V0.D[1] }
        *(double *)&v59 = *(double *)(a1 + 32) * _D3;
        *(_QWORD *)(v56 + 848) = v59;
        v11 = v11 + *(double *)&v59;
      }
      v56 += 888;
    }
    while (v56 != v55);
    goto LABEL_33;
  }
  v57 = v55 - v56 - 888;
  v11 = 0.0;
  if (v57 < 0x378)
  {
    v58 = *(_QWORD *)(a1 + 264);
    do
    {
LABEL_49:
      v11 = v11 + *(double *)(v58 + 848);
      v58 += 888;
    }
    while (v58 != v55);
    goto LABEL_50;
  }
  v65 = v57 / 0x378 + 1;
  v58 = v56 + 888 * (v65 & 0xFFFFFFFFFFFFFELL);
  v66 = v65 & 0xFFFFFFFFFFFFFELL;
  do
  {
    v11 = v11 + *(double *)(v56 + 848) + *(double *)(v56 + 1736);
    v56 += 1776;
    v66 -= 2;
  }
  while (v66);
  if (v65 != (v65 & 0xFFFFFFFFFFFFFELL))
    goto LABEL_49;
LABEL_50:
  v39[1] = v11 * 0.5;
  *(_WORD *)(a1 + 515) = 257;
  v67 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v68 = (double *)a2[64];
  v69 = *v68;
  v70 = v68[1];
  kdebug_trace();
  return v67 + v69 + v70;
}

void sub_20F3E010C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB42B8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F3E0124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB42B8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F3E0138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB42B8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F3E014C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB42B8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

double *sub_20F3E0160(uint64_t a1, double *a2, double *a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  uint64_t v9;
  double *result;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _QWORD v14[64];
  double *v15;
  __int128 v16;
  uint64_t v17;

  v15 = (double *)v14;
  v16 = xmmword_210378040;
  v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3)
     - 0x4E6A171024E6A171 * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v16 = v6;
    v7 = (double *)operator new[]();
    if (v15 != (double *)v14 && v15)
      MEMORY[0x212BC6368]();
    v15 = v7;
  }
  v8 = *a3;
  *((_QWORD *)&v16 + 1) = 0;
  if (*(_BYTE *)(a1 + 516))
  {
    v17 = a1 + 40;
    sub_20F3E03A4((uint64_t)&v17, v14);
  }
  else
  {
    v17 = a1 + 40;
    sub_20F3E05A0((uint64_t)&v17, v14);
  }
  if (*(_BYTE *)(a1 + 516))
  {
    v17 = a1 + 40;
    sub_20F3E0D1C((uint64_t)&v17, v14);
  }
  else
  {
    v17 = a1 + 40;
    sub_20F3E0F18((uint64_t)&v17, v14);
  }
  v9 = *((_QWORD *)&v16 + 1);
  result = v15;
  if (!*((_QWORD *)&v16 + 1))
  {
    *a2 = 1.0;
    *((_QWORD *)&v16 + 1) = 0;
    if (result == (double *)v14)
      return result;
    goto LABEL_22;
  }
  v11 = *((_QWORD *)&v16 + 1) >> 1;
  sub_20E8FB210(v15, &v15[*((_QWORD *)&v16 + 1) >> 1], &v15[*((_QWORD *)&v16 + 1)]);
  result = v15;
  v12 = v15[v11];
  if ((v9 & 1) == 0)
  {
    v13 = v11 - 1;
    if (v13 != v9)
    {
      sub_20E8FB210(v15, &v15[v13], &v15[v9]);
      result = v15;
    }
    v12 = (v12 + result[v13]) * 0.5;
  }
  *a2 = v8 * sqrt(v12);
  *((_QWORD *)&v16 + 1) = 0;
  if (result != (double *)v14)
  {
LABEL_22:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F3E0368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

void sub_20F3E03A4(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  char *v40;

  v4 = a2[66];
  v5 = v4
     - 0x4E6A171024E6A171 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 208) - *(_QWORD *)(*(_QWORD *)a1 + 200)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xB195E8EFDB195E8FLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 208) - *(_QWORD *)(*(_QWORD *)a1 + 200)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x4E6A171024E6A171
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 208) - *(_QWORD *)(*(_QWORD *)a1 + 200)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 200);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 208);
  if (v28 != v27)
  {
    v29 = (__int128 *)(v28 + 752);
    do
    {
      if (*((_BYTE *)v29 + 104))
      {
        _Q2 = *v29;
        _D4 = *((_QWORD *)v29 + 1);
        __asm { FMLA            D3, D4, V2.D[1] }
        *(_QWORD *)&_Q2 = *((_QWORD *)v29 + 3);
        __asm { FMLA            D3, D2, V1.D[1] }
        _D1 = *((_QWORD *)v29 + 5);
        __asm { FMLA            D3, D1, V0.D[1] }
        *(_QWORD *)v26 = _D3;
        v26 += 8;
      }
      v30 = (uint64_t)v29 + 136;
      v29 = (__int128 *)((char *)v29 + 888);
    }
    while (v30 != v27);
  }
  v40 = (char *)(v25 + 8 * v5);
  if (v26 != v40)
    a2[66] = v5 + ~((unint64_t)(v40 - v26 - 8) >> 3);
}

void sub_20F3E05A0(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  char *v43;
  float64x2_t v44;
  __int128 v45;
  __int128 v46;
  BOOL v47;

  v4 = a2[66];
  v5 = v4
     - 0x4E6A171024E6A171 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 208) - *(_QWORD *)(*(_QWORD *)a1 + 200)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xB195E8EFDB195E8FLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 208) - *(_QWORD *)(*(_QWORD *)a1 + 200)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x4E6A171024E6A171
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 208) - *(_QWORD *)(*(_QWORD *)a1 + 200)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 200);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 208);
  if (v27 != v28)
  {
    v29 = v27 + 736;
    do
    {
      v41 = sub_20F3E07E4(v29 - 728, (float64x2_t **)v29, &v44);
      v47 = v41;
      if (v41)
      {
        v42 = *(_QWORD *)(v29 + 128);
        if (!v42 || ((*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v42 + 24))(v42, &v44), v47))
        {
          _V3.D[1] = v44.f64[1];
          _D4 = v44.f64[1];
          __asm { FMLA            D0, D4, V3.D[1] }
          _D3 = *((_QWORD *)&v45 + 1);
          __asm { FMLA            D0, D3, V2.D[1] }
          _D2 = *((_QWORD *)&v46 + 1);
          __asm { FMLA            D0, D2, V1.D[1] }
          *(_QWORD *)v26 = _D0;
          v26 += 8;
        }
      }
      v40 = v29 + 152;
      v29 += 888;
    }
    while (v40 != v28);
    v25 = a2[64];
    v5 = a2[66];
  }
  v43 = (char *)(v25 + 8 * v5);
  if (v26 != v43)
    a2[66] = v5 + ~((unint64_t)(v43 - v26 - 8) >> 3);
}

BOOL sub_20F3E07E4(uint64_t a1, float64x2_t **a2, float64x2_t *a3)
{
  float64x2_t v3;
  int v4;
  float64x2_t *v7;
  double v8;
  float64x2_t v9;
  float64x2_t v11;
  double v12;
  int8x16_t v15;
  int8x16_t v16;
  double v17;
  float64x2_t v19;
  double v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  float64x2_t v34;
  float64_t v37;
  unint64_t v38;
  unint64_t v39;
  float64x2_t v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v49;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v66;
  double v69;
  double v70;
  float64x2_t *v71;
  double v72;
  __double2 v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v87;
  float64x2_t v88;
  float64_t v89;
  _OWORD v90[3];
  _OWORD v91[6];
  float64x2_t v92;
  float64x2_t v93;
  double *v94[2];
  float64x2_t *v95[2];

  v4 = *(unsigned __int8 *)(a1 + 720);
  if (*(_BYTE *)(a1 + 720))
  {
    v7 = a2[1];
    v8 = (*a2)[3].f64[0];
    v9 = (*a2)[2];
    _D2 = (*a2)[4].f64[1];
    v11 = *(float64x2_t *)((char *)*a2 + 56);
    v12 = (*a2)[6].f64[0];
    _Q1 = (*a2)[5];
    _Q4 = (float64x2_t)vzip2q_s64((int64x2_t)v9, (int64x2_t)v11);
    v15 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q4, 1);
    v16 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q4.f64[0], 0);
    v17 = (*a2)[7].f64[1];
    _Q23 = (float64x2_t)vzip1q_s64((int64x2_t)v9, (int64x2_t)v11);
    v19 = vmlaq_laneq_f64(vmulq_n_f64(_Q23, (*a2)[6].f64[1]), _Q4, *(float64x2_t *)((char *)*a2 + 104), 1);
    _Q4.f64[0] = v8;
    _Q4.f64[1] = _D2;
    _Q22 = vmlaq_n_f64(v19, _Q4, v17);
    _D16 = (*a2)[7].f64[0];
    __asm { FMLA            D4, D16, V1.D[1] }
    v26 = _Q4.f64[0] + v12 * v17;
    v27 = (int64x2_t)vextq_s8(v16, v15, 8uLL);
    _Q4.f64[0] = v7[3].f64[0];
    v28 = (int64x2_t)v7[2];
    v29 = *(int64x2_t *)((char *)&v7[3] + 8);
    _Q18 = (int64x2_t)v7[5];
    v31 = (float64x2_t)vzip1q_s64(v28, v29);
    v32 = (float64x2_t)vzip2q_s64(v28, v29);
    _Q4.f64[1] = v7[4].f64[1];
    v33 = vextq_s8((int8x16_t)v32, (int8x16_t)vdupq_laneq_s64(_Q18, 1), 8uLL);
    v3.f64[0] = v7[7].f64[1];
    v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v7[6].f64[1]), v32, *(float64x2_t *)((char *)v7 + 104), 1), _Q4, v3.f64[0]);
    _D19 = v7[7].f64[0];
    __asm { FMLA            D21, D19, V18.D[1] }
    v3.f64[0] = _D21 + v7[6].f64[0] * v3.f64[0];
    *(_QWORD *)&v37 = *(_OWORD *)&vnegq_f64(v3);
    v38 = *(_QWORD *)&v7[5].f64[0];
    *(_QWORD *)&v32.f64[1] = v33.i64[0];
    v39 = *(_QWORD *)&v7[6].f64[0];
    __asm { FMOV            V20.2D, #1.0 }
    _Q20.f64[0] = v37;
    v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q23, v27), _Q22.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q23, v27), _Q22, 1), _Q1, v26);
    __asm { FMLA            D23, D2, V22.D[1] }
    v42 = _Q23.f64[0] + v12 * v26;
    v43.f64[0] = *(float64_t *)(a1 + 608);
    v44 = *(float64x2_t *)(a1 + 592);
    _Q22.f64[0] = *(float64_t *)(a1 + 640);
    v45 = *(float64x2_t *)(a1 + 624);
    _Q23.f64[0] = *(float64_t *)(a1 + 672);
    v46 = *(float64x2_t *)(a1 + 656);
    _D10 = *(double *)(a1 + 704);
    _Q8 = *(float64x2_t *)(a1 + 688);
    v49 = vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v44, (int64x2_t)v45), vnegq_f64(_Q8).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v44, (int64x2_t)v45), _Q8, 1);
    _D11 = *(_QWORD *)(a1 + 664);
    __asm { FMLS            D29, D11, V8.D[1] }
    v52 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v9.f64[0]), v32, v9, 1), _Q4, v8), (float64x2_t)0, v34);
    v53 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v38, v9.f64[0]), (float64x2_t)v33.u64[1], v9, 1), (float64x2_t)v39, v8), (float64x2_t)0, _Q20);
    v54 = vmulq_n_f64(v52, v43.f64[0]);
    v55 = vmulq_n_f64(v53, v43.f64[0]);
    v43.f64[1] = _Q22.f64[0];
    v56 = vmlsq_lane_f64(v49, v43, _D10, 0);
    __asm { FMLS            D29, D23, V10.D[0] }
    v58 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v11.f64[0]), v32, v11, 1), _Q4, _D2), (float64x2_t)0, v34);
    v59 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v38, v11.f64[0]), (float64x2_t)v33.u64[1], v11, 1), (float64x2_t)v39, _D2), (float64x2_t)0, _Q20);
    v60 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, _Q1.f64[0]), v32, _Q1, 1), _Q4, v12), (float64x2_t)0, v34);
    v61 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v38, _Q1.f64[0]), (float64x2_t)v33.u64[1], _Q1, 1), (float64x2_t)v39, v12), (float64x2_t)0, _Q20);
    v62 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v41.f64[0]), v32, v41, 1), _Q4, v42), v34);
    v63 = vaddq_f64(_Q20, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v38, v41.f64[0]), (float64x2_t)v33.u64[1], v41, 1), (float64x2_t)v39, v42));
    v91[0] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v52, v44.f64[0]), v58, v45.f64[0]), v60, v46.f64[0]), (float64x2_t)0, v62);
    v91[1] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v53, v44.f64[0]), v59, v45.f64[0]), v61, v46.f64[0]), (float64x2_t)0, v63);
    v91[2] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v52, v44, 1), v58, v45, 1), v60, v46, 1), (float64x2_t)0, v62);
    v91[3] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v53, v44, 1), v59, v45, 1), v61, v46, 1), (float64x2_t)0, v63);
    v91[4] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v54, v58, _Q22.f64[0]), v60, _Q23.f64[0]), (float64x2_t)0, v62);
    v91[5] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v55, v59, _Q22.f64[0]), v61, _Q23.f64[0]), (float64x2_t)0, v63);
    v92 = vaddq_f64(v62, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v56.f64[0]), v58, v56, 1), v60, _D29));
    v93 = vaddq_f64(v63, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v53, v56.f64[0]), v59, v56, 1), v61, _D29));
    memset(v90, 0, sizeof(v90));
    v95[0] = (float64x2_t *)v91;
    v95[1] = 0;
    v94[0] = (double *)v90;
    v94[1] = 0;
    sub_20E95B988(v95, v94);
    v64.f64[0] = *(float64_t *)&v90[1];
    _Q18 = (float64x2_t)v90[0];
    v66 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
    _Q0 = vmulq_f64(_Q18, _Q18);
    _Q1.f64[0] = *((float64_t *)v90 + 1);
    __asm { FMLA            D0, D1, V18.D[1] }
    v69 = _Q0.f64[0] + v64.f64[0] * v64.f64[0];
    if (v69 >= 0.0000002635)
    {
      v72 = sqrt(v69);
      v88 = v66;
      v89 = *(double *)&v90[1];
      v87 = (float64x2_t)v90[0];
      v73 = __sincos_stret(v72);
      _Q18 = v87;
      v66 = v88;
      v64.f64[0] = v89;
      v70 = v73.__sinval / v72;
      _Q0.f64[0] = 1.0 / v69 * (1.0 - v73.__cosval);
      _Q1.f64[0] = 1.0 / v69 * (1.0 - v73.__sinval / v72);
      v71 = (float64x2_t *)(a1 + 256);
      if (v69 >= 2.775e-15)
      {
LABEL_4:
        if (v69 <= 9.0)
          _Q0.f64[0] = (_Q0.f64[0] * 0.5 - _Q1.f64[0]) / v70;
        else
          _Q0.f64[0] = (_Q0.f64[0] + v70 * -0.5) / (v69 * _Q0.f64[0]);
        goto LABEL_9;
      }
    }
    else
    {
      _Q0.f64[0] = 0.5 - v69 * (v69 / -720.0 + 0.0416666667);
      _Q1.f64[0] = 0.166666667 - v69 * (v69 / -5040.0 + 0.00833333333);
      v70 = 1.0 - v69 * _Q1.f64[0];
      v71 = (float64x2_t *)(a1 + 256);
      if (v69 >= 2.775e-15)
        goto LABEL_4;
    }
    _Q0.f64[0] = v69 * 0.0000330687831 + v69 * 0.00138888889 + 0.0833333333;
LABEL_9:
    _Q1.f64[0] = v93.f64[0];
    v74.f64[0] = v66.f64[0];
    v74.f64[1] = v64.f64[0];
    v75 = (float64x2_t)vextq_s8((int8x16_t)v92, (int8x16_t)_Q1, 8uLL);
    v76 = vsubq_f64(vmulq_laneq_f64(_Q18, v92, 1), vmulq_f64(v66, v92));
    __asm { FMOV            V6.2D, #-0.5 }
    v78 = vaddq_f64(_Q1, vmulq_f64(v76, _Q6));
    _Q1.f64[1] = v92.f64[0];
    v64.f64[1] = _Q18.f64[0];
    v79 = vsubq_f64(vmulq_f64(v74, _Q1), vmulq_f64(v64, v75));
    v80 = (float64x2_t)vextq_s8((int8x16_t)v79, (int8x16_t)v76, 8uLL);
    v76.f64[1] = v79.f64[0];
    *(float64x2_t *)((char *)&v90[1] + 8) = vaddq_f64(vaddq_f64(v92, vmulq_f64(v79, _Q6)), vmulq_n_f64(vsubq_f64(vmulq_f64(v74, v76), vmulq_f64(v64, v80)), _Q0.f64[0]));
    *((_QWORD *)&v90[2] + 1) = *(_OWORD *)&vaddq_f64(v78, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q18, v79, 1), vmulq_f64(v66, v79))));
    v81 = (float64x2_t)v90[1];
    *a3 = (float64x2_t)v90[0];
    a3[1] = v81;
    a3[2] = (float64x2_t)v90[2];
    v83 = a3[1];
    v82 = a3[2];
    v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), a3->f64[0]), *(float64x2_t *)(a1 + 80), *a3, 1), *(float64x2_t *)(a1 + 128), v83.f64[0]), *(float64x2_t *)(a1 + 176), v83, 1), *(float64x2_t *)(a1 + 224), v82.f64[0]), v71[1], v82, 1);
    v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 48), a3->f64[0]), *(float64x2_t *)(a1 + 96), *a3, 1), *(float64x2_t *)(a1 + 144), v83.f64[0]), *(float64x2_t *)(a1 + 192), v83, 1), *(float64x2_t *)(a1 + 240), v82.f64[0]), v71[2], v82, 1);
    *a3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 16), a3->f64[0]), *(float64x2_t *)(a1 + 64), *a3, 1), *(float64x2_t *)(a1 + 112), v83.f64[0]), *(float64x2_t *)(a1 + 160), v83, 1), *(float64x2_t *)(a1 + 208), v82.f64[0]), *v71, v82, 1);
    a3[1] = v84;
    a3[2] = v85;
  }
  return v4 != 0;
}

void sub_20F3E0D1C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  char *v40;

  v4 = a2[66];
  v5 = v4
     - 0x4E6A171024E6A171 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 232) - *(_QWORD *)(*(_QWORD *)a1 + 224)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xB195E8EFDB195E8FLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 232) - *(_QWORD *)(*(_QWORD *)a1 + 224)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x4E6A171024E6A171
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 232) - *(_QWORD *)(*(_QWORD *)a1 + 224)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 224);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 232);
  if (v28 != v27)
  {
    v29 = (__int128 *)(v28 + 752);
    do
    {
      if (*((_BYTE *)v29 + 104))
      {
        _Q2 = *v29;
        _D4 = *((_QWORD *)v29 + 1);
        __asm { FMLA            D3, D4, V2.D[1] }
        *(_QWORD *)&_Q2 = *((_QWORD *)v29 + 3);
        __asm { FMLA            D3, D2, V1.D[1] }
        _D1 = *((_QWORD *)v29 + 5);
        __asm { FMLA            D3, D1, V0.D[1] }
        *(_QWORD *)v26 = _D3;
        v26 += 8;
      }
      v30 = (uint64_t)v29 + 136;
      v29 = (__int128 *)((char *)v29 + 888);
    }
    while (v30 != v27);
  }
  v40 = (char *)(v25 + 8 * v5);
  if (v26 != v40)
    a2[66] = v5 + ~((unint64_t)(v40 - v26 - 8) >> 3);
}

void sub_20F3E0F18(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v40;
  _BOOL4 v41;
  uint64_t v42;
  char *v43;
  float64x2_t v44;
  __int128 v45;
  __int128 v46;
  BOOL v47;

  v4 = a2[66];
  v5 = v4
     - 0x4E6A171024E6A171 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 232) - *(_QWORD *)(*(_QWORD *)a1 + 224)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xB195E8EFDB195E8FLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 232) - *(_QWORD *)(*(_QWORD *)a1 + 224)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x4E6A171024E6A171
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 232) - *(_QWORD *)(*(_QWORD *)a1 + 224)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 224);
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 232);
  if (v27 != v28)
  {
    v29 = v27 + 92;
    do
    {
      v41 = sub_20F3E115C((uint64_t)(v29 - 91), v29, &v44);
      v47 = v41;
      if (v41)
      {
        v42 = v29[16];
        if (!v42 || ((*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v42 + 24))(v42, &v44), v47))
        {
          _V3.D[1] = v44.f64[1];
          _D4 = v44.f64[1];
          __asm { FMLA            D0, D4, V3.D[1] }
          _D3 = *((_QWORD *)&v45 + 1);
          __asm { FMLA            D0, D3, V2.D[1] }
          _D2 = *((_QWORD *)&v46 + 1);
          __asm { FMLA            D0, D2, V1.D[1] }
          *(_QWORD *)v26 = _D0;
          v26 += 8;
        }
      }
      v40 = v29 + 19;
      v29 += 111;
    }
    while (v40 != v28);
    v25 = a2[64];
    v5 = a2[66];
  }
  v43 = (char *)(v25 + 8 * v5);
  if (v26 != v43)
    a2[66] = v5 + ~((unint64_t)(v43 - v26 - 8) >> 3);
}

BOOL sub_20F3E115C(uint64_t a1, _QWORD *a2, float64x2_t *a3)
{
  int v3;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int8x16_t v26;
  float64x2_t v27;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float64x2_t v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v59;
  double v62;
  double v63;
  float64x2_t *v64;
  double v65;
  __double2 v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v80;
  float64x2_t v81;
  float64_t v82;
  _OWORD v83[3];
  _OWORD v84[6];
  float64x2_t v85;
  float64x2_t v86;
  double *v87[2];
  float64x2_t *v88[2];

  v3 = *(unsigned __int8 *)(a1 + 720);
  if (*(_BYTE *)(a1 + 720))
  {
    v6 = a2[1];
    v7 = *(double *)(*a2 + 32);
    v8 = *(double *)(*a2 + 40);
    v10 = *(double *)(*a2 + 48);
    v9 = *(double *)(*a2 + 56);
    v11 = *(double *)(*a2 + 64);
    v12 = *(double *)(*a2 + 72);
    v13 = *(double *)(*a2 + 80);
    v14 = *(double *)(*a2 + 88);
    v16 = *(double *)(*a2 + 96);
    v15 = *(double *)(*a2 + 104);
    v17 = *(double *)(*a2 + 112);
    v18 = *(double *)(*a2 + 120);
    v19.f64[0] = *(float64_t *)(v6 + 48);
    v20 = *(int64x2_t *)(v6 + 32);
    v21 = *(int64x2_t *)(v6 + 56);
    _Q24 = *(int64x2_t *)(v6 + 80);
    v23 = (float64x2_t)vzip1q_s64(v20, v21);
    v24 = (float64x2_t)vzip2q_s64(v20, v21);
    v25 = (float64x2_t)vdupq_laneq_s64(_Q24, 1);
    v19.f64[1] = *(float64_t *)(v6 + 72);
    v26 = vextq_s8((int8x16_t)v24, (int8x16_t)v25, 8uLL);
    v25.f64[0] = *(float64_t *)(v6 + 120);
    v27 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, *(double *)(v6 + 104)), v24, *(float64x2_t *)(v6 + 104), 1), v19, v25.f64[0]);
    _D22 = *(_QWORD *)(v6 + 112);
    __asm { FMLA            D25, D22, V24.D[1] }
    v25.f64[0] = _D25 + *(double *)(v6 + 96) * v25.f64[0];
    v34 = *(_QWORD *)(v6 + 80);
    v35 = v26.i64[1];
    *(_QWORD *)&v24.f64[1] = v26.i64[0];
    v36 = *(_QWORD *)(v6 + 96);
    __asm { FMOV            V30.2D, #1.0 }
    *(_QWORD *)&_Q30.f64[0] = *(_OWORD *)&vnegq_f64(v25);
    _Q8.f64[0] = *(float64_t *)(a1 + 608);
    v39 = *(float64x2_t *)(a1 + 592);
    v40 = *(double *)(a1 + 640);
    v41 = *(float64x2_t *)(a1 + 624);
    _Q24.i64[0] = *(_QWORD *)(a1 + 672);
    v42 = *(float64x2_t *)(a1 + 656);
    _D10 = *(double *)(a1 + 704);
    _Q11 = *(float64x2_t *)(a1 + 688);
    v45 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v23, v7), v24, v8), v19, v10), (float64x2_t)0, v27);
    v46 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v34, v7), (float64x2_t)v26.u64[1], v8), (float64x2_t)v36, v10), (float64x2_t)0, _Q30);
    v47 = vmulq_n_f64(v45, _Q8.f64[0]);
    v48 = vmulq_n_f64(v46, _Q8.f64[0]);
    _Q8.f64[1] = v40;
    v49 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v39, (int64x2_t)v41), vnegq_f64(_Q11).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v39, (int64x2_t)v41), _Q11, 1), _Q8, _D10, 0);
    _D13 = *(_QWORD *)(a1 + 664);
    __asm
    {
      FMLS            D8, D13, V11.D[1]
      FMLS            D8, D24, V10.D[0]
    }
    v51 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v23, v9), v24, v11), v19, v12), (float64x2_t)0, v27);
    v52 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v34, v9), (float64x2_t)(unint64_t)v35, v11), (float64x2_t)v36, v12), (float64x2_t)0, _Q30);
    v53 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v23, v13), v24, v14), v19, v16), (float64x2_t)0, v27);
    v54 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v34, v13), (float64x2_t)(unint64_t)v35, v14), (float64x2_t)v36, v16), (float64x2_t)0, _Q30);
    v55 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v23, v15), v24, v17), v19, v18), v27);
    v56 = vaddq_f64(_Q30, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v34, v15), (float64x2_t)(unint64_t)v35, v17), (float64x2_t)v36, v18));
    v84[0] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v45, v39.f64[0]), v51, v41.f64[0]), v53, v42.f64[0]), (float64x2_t)0, v55);
    v84[1] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v46, v39.f64[0]), v52, v41.f64[0]), v54, v42.f64[0]), (float64x2_t)0, v56);
    v84[2] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v45, v39, 1), v51, v41, 1), v53, v42, 1), (float64x2_t)0, v55);
    v84[3] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v46, v39, 1), v52, v41, 1), v54, v42, 1), (float64x2_t)0, v56);
    v84[4] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v47, v51, v40), v53, *(double *)_Q24.i64), (float64x2_t)0, v55);
    v84[5] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v48, v52, v40), v54, *(double *)_Q24.i64), (float64x2_t)0, v56);
    v85 = vaddq_f64(v55, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v49.f64[0]), v51, v49, 1), v53, _Q8.f64[0]));
    v86 = vaddq_f64(v56, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v49.f64[0]), v52, v49, 1), v54, _Q8.f64[0]));
    memset(v83, 0, sizeof(v83));
    v88[0] = (float64x2_t *)v84;
    v88[1] = 0;
    v87[0] = (double *)v83;
    v87[1] = 0;
    sub_20E95B988(v88, v87);
    v57.f64[0] = *(float64_t *)&v83[1];
    _Q18 = (float64x2_t)v83[0];
    v59 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
    _Q0 = vmulq_f64(_Q18, _Q18);
    _Q1.f64[0] = *((float64_t *)v83 + 1);
    __asm { FMLA            D0, D1, V18.D[1] }
    v62 = _Q0.f64[0] + v57.f64[0] * v57.f64[0];
    if (v62 >= 0.0000002635)
    {
      v65 = sqrt(v62);
      v81 = v59;
      v82 = *(double *)&v83[1];
      v80 = (float64x2_t)v83[0];
      v66 = __sincos_stret(v65);
      _Q18 = v80;
      v59 = v81;
      v57.f64[0] = v82;
      v63 = v66.__sinval / v65;
      _Q0.f64[0] = 1.0 / v62 * (1.0 - v66.__cosval);
      _Q1.f64[0] = 1.0 / v62 * (1.0 - v66.__sinval / v65);
      v64 = (float64x2_t *)(a1 + 256);
      if (v62 >= 2.775e-15)
      {
LABEL_4:
        if (v62 <= 9.0)
          _Q0.f64[0] = (_Q0.f64[0] * 0.5 - _Q1.f64[0]) / v63;
        else
          _Q0.f64[0] = (_Q0.f64[0] + v63 * -0.5) / (v62 * _Q0.f64[0]);
        goto LABEL_9;
      }
    }
    else
    {
      _Q0.f64[0] = 0.5 - v62 * (v62 / -720.0 + 0.0416666667);
      _Q1.f64[0] = 0.166666667 - v62 * (v62 / -5040.0 + 0.00833333333);
      v63 = 1.0 - v62 * _Q1.f64[0];
      v64 = (float64x2_t *)(a1 + 256);
      if (v62 >= 2.775e-15)
        goto LABEL_4;
    }
    _Q0.f64[0] = v62 * 0.0000330687831 + v62 * 0.00138888889 + 0.0833333333;
LABEL_9:
    _Q1.f64[0] = v86.f64[0];
    v67.f64[0] = v59.f64[0];
    v67.f64[1] = v57.f64[0];
    v68 = (float64x2_t)vextq_s8((int8x16_t)v85, (int8x16_t)_Q1, 8uLL);
    v69 = vsubq_f64(vmulq_laneq_f64(_Q18, v85, 1), vmulq_f64(v59, v85));
    __asm { FMOV            V6.2D, #-0.5 }
    v71 = vaddq_f64(_Q1, vmulq_f64(v69, _Q6));
    _Q1.f64[1] = v85.f64[0];
    v57.f64[1] = _Q18.f64[0];
    v72 = vsubq_f64(vmulq_f64(v67, _Q1), vmulq_f64(v57, v68));
    v73 = (float64x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v69, 8uLL);
    v69.f64[1] = v72.f64[0];
    *(float64x2_t *)((char *)&v83[1] + 8) = vaddq_f64(vaddq_f64(v85, vmulq_f64(v72, _Q6)), vmulq_n_f64(vsubq_f64(vmulq_f64(v67, v69), vmulq_f64(v57, v73)), _Q0.f64[0]));
    *((_QWORD *)&v83[2] + 1) = *(_OWORD *)&vaddq_f64(v71, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q18, v72, 1), vmulq_f64(v59, v72))));
    v74 = (float64x2_t)v83[1];
    *a3 = (float64x2_t)v83[0];
    a3[1] = v74;
    a3[2] = (float64x2_t)v83[2];
    v76 = a3[1];
    v75 = a3[2];
    v77 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), a3->f64[0]), *(float64x2_t *)(a1 + 80), *a3, 1), *(float64x2_t *)(a1 + 128), v76.f64[0]), *(float64x2_t *)(a1 + 176), v76, 1), *(float64x2_t *)(a1 + 224), v75.f64[0]), v64[1], v75, 1);
    v78 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 48), a3->f64[0]), *(float64x2_t *)(a1 + 96), *a3, 1), *(float64x2_t *)(a1 + 144), v76.f64[0]), *(float64x2_t *)(a1 + 192), v76, 1), *(float64x2_t *)(a1 + 240), v75.f64[0]), v64[2], v75, 1);
    *a3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 16), a3->f64[0]), *(float64x2_t *)(a1 + 64), *a3, 1), *(float64x2_t *)(a1 + 112), v76.f64[0]), *(float64x2_t *)(a1 + 160), v76, 1), *(float64x2_t *)(a1 + 208), v75.f64[0]), *v64, v75, 1);
    a3[1] = v77;
    a3[2] = v78;
  }
  return v3 != 0;
}

double *sub_20F3E1644(uint64_t a1, double *a2, double *a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double *result;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD v19[64];
  double *v20;
  __int128 v21;
  uint64_t v22;

  v20 = (double *)v19;
  v21 = xmmword_210378040;
  v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3);
  if (v6 <= 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3))
    v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v21 = v6;
    v7 = (double *)operator new[]();
    if (v20 != (double *)v19 && v20)
      MEMORY[0x212BC6368]();
    v20 = v7;
  }
  v8 = *a3;
  *((_QWORD *)&v21 + 1) = 0;
  if (*(_BYTE *)(a1 + 516))
  {
    v22 = a1 + 40;
    sub_20F3E03A4((uint64_t)&v22, v19);
  }
  else
  {
    v22 = a1 + 40;
    sub_20F3E05A0((uint64_t)&v22, v19);
  }
  v9 = *((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v10 = *((_QWORD *)&v21 + 1) >> 1;
    sub_20E8FB210(v20, &v20[*((_QWORD *)&v21 + 1) >> 1], &v20[*((_QWORD *)&v21 + 1)]);
    v11 = v20;
    v12 = v20[v10];
    if ((v9 & 1) == 0)
    {
      v13 = v10 - 1;
      if (v13 != v9)
      {
        sub_20E8FB210(v20, &v20[v13], &v20[v9]);
        v11 = v20;
      }
      v12 = (v12 + v11[v13]) * 0.5;
    }
    *a2 = v8 * sqrt(v12);
    *((_QWORD *)&v21 + 1) = 0;
    if (*(_BYTE *)(a1 + 516))
      goto LABEL_19;
  }
  else
  {
    *a2 = 1.0;
    *((_QWORD *)&v21 + 1) = 0;
    if (*(_BYTE *)(a1 + 516))
    {
LABEL_19:
      v22 = a1 + 40;
      sub_20F3E0D1C((uint64_t)&v22, v19);
      goto LABEL_22;
    }
  }
  v22 = a1 + 40;
  sub_20F3E0F18((uint64_t)&v22, v19);
LABEL_22:
  v14 = *((_QWORD *)&v21 + 1);
  result = v20;
  if (!*((_QWORD *)&v21 + 1))
  {
    a2[1] = 1.0;
    *((_QWORD *)&v21 + 1) = 0;
    if (result == (double *)v19)
      return result;
    goto LABEL_30;
  }
  v16 = *((_QWORD *)&v21 + 1) >> 1;
  sub_20E8FB210(v20, &v20[*((_QWORD *)&v21 + 1) >> 1], &v20[*((_QWORD *)&v21 + 1)]);
  result = v20;
  v17 = v20[v16];
  if ((v14 & 1) == 0)
  {
    v18 = v16 - 1;
    if (v18 != v14)
    {
      sub_20E8FB210(v20, &v20[v18], &v20[v14]);
      result = v20;
    }
    v17 = (v17 + result[v18]) * 0.5;
  }
  a2[1] = v8 * sqrt(v17);
  *((_QWORD *)&v21 + 1) = 0;
  if (result != (double *)v19)
  {
LABEL_30:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F3E18D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

double *sub_20F3E1910(uint64_t a1, double *a2, uint64_t a3)
{
  unint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double *result;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD v18[64];
  double *v19;
  __int128 v20;
  uint64_t v21;

  v19 = (double *)v18;
  v20 = xmmword_210378040;
  v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3);
  if (v6 <= 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3))
    v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v20 = v6;
    v7 = (double *)operator new[]();
    if (v19 != (double *)v18 && v19)
      MEMORY[0x212BC6368]();
    v19 = v7;
  }
  *((_QWORD *)&v20 + 1) = 0;
  if (*(_BYTE *)(a1 + 516))
  {
    v21 = a1 + 40;
    sub_20F3E03A4((uint64_t)&v21, v18);
  }
  else
  {
    v21 = a1 + 40;
    sub_20F3E05A0((uint64_t)&v21, v18);
  }
  v8 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v9 = *((_QWORD *)&v20 + 1) >> 1;
    sub_20E8FB210(v19, &v19[*((_QWORD *)&v20 + 1) >> 1], &v19[*((_QWORD *)&v20 + 1)]);
    v10 = v19;
    v11 = v19[v9];
    if ((v8 & 1) == 0)
    {
      v12 = v9 - 1;
      if (v12 != v8)
      {
        sub_20E8FB210(v19, &v19[v12], &v19[v8]);
        v10 = v19;
      }
      v11 = (v11 + v10[v12]) * 0.5;
    }
    *a2 = sqrt(v11) * **(double **)a3;
    *((_QWORD *)&v20 + 1) = 0;
    if (*(_BYTE *)(a1 + 516))
      goto LABEL_19;
  }
  else
  {
    *a2 = 1.0;
    *((_QWORD *)&v20 + 1) = 0;
    if (*(_BYTE *)(a1 + 516))
    {
LABEL_19:
      v21 = a1 + 40;
      sub_20F3E0D1C((uint64_t)&v21, v18);
      goto LABEL_22;
    }
  }
  v21 = a1 + 40;
  sub_20F3E0F18((uint64_t)&v21, v18);
LABEL_22:
  v13 = *((_QWORD *)&v20 + 1);
  result = v19;
  if (!*((_QWORD *)&v20 + 1))
  {
    a2[1] = 1.0;
    *((_QWORD *)&v20 + 1) = 0;
    if (result == (double *)v18)
      return result;
    goto LABEL_30;
  }
  v15 = *((_QWORD *)&v20 + 1) >> 1;
  sub_20E8FB210(v19, &v19[*((_QWORD *)&v20 + 1) >> 1], &v19[*((_QWORD *)&v20 + 1)]);
  result = v19;
  v16 = v19[v15];
  if ((v13 & 1) == 0)
  {
    v17 = v15 - 1;
    if (v17 != v13)
    {
      sub_20E8FB210(v19, &v19[v17], &v19[v13]);
      result = v19;
    }
    v16 = (v16 + result[v17]) * 0.5;
  }
  a2[1] = sqrt(v16) * *(double *)(*(_QWORD *)a3 + 8);
  *((_QWORD *)&v20 + 1) = 0;
  if (result != (double *)v18)
  {
LABEL_30:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F3E1BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F3E1BF0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (*(_BYTE *)(result + 312))
    goto LABEL_2;
  v23 = *(_QWORD *)(result + 48);
  v24 = *(_QWORD *)(result + 56);
  if (v23 == v24)
  {
LABEL_25:
    v25 = *(_QWORD *)(result + 144);
    v26 = *(_QWORD *)(result + 152);
    if (v25 == v26)
    {
LABEL_2:
      v4 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(result + 272) - *(_QWORD *)(result + 264)) >> 3);
      goto LABEL_3;
    }
    while ((*(_BYTE *)(*(_QWORD *)(v25 + 8) + 4) & 6) == 0)
    {
      v25 += 16;
      if (v25 == v26)
        goto LABEL_2;
    }
  }
  else
  {
    while ((*(_BYTE *)(*(_QWORD *)(v23 + 8) + 4) & 6) == 0)
    {
      v23 += 16;
      if (v23 == v24)
        goto LABEL_25;
    }
  }
  v27 = *(_QWORD *)(result + 264);
  v28 = *(_QWORD *)(result + 272);
  if (v27 == v28)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v29 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v27 + 736) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v27 + 744) + 4) & 6) == 0)
        v4 = ++v29;
      v27 += 888;
    }
    while (v27 != v28);
  }
LABEL_3:
  *a3 += v4;
  v5 = a2[66];
  v6 = v5 + 1;
  v7 = a2[65];
  if (v5 + 1 <= v7)
  {
    v11 = a2[64];
  }
  else
  {
    v8 = 2 * v7;
    if (v8 > v6)
      v6 = v8;
    a2[65] = v6;
    v9 = a2[64];
    v10 = operator new[]();
    v11 = v10;
    if (v5)
    {
      v12 = 0;
      if (v5 < 4)
        goto LABEL_12;
      if ((unint64_t)(v10 - v9) < 0x20)
        goto LABEL_12;
      v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = (_OWORD *)(v10 + 16);
      v14 = (__int128 *)(v9 + 16);
      v15 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v5 != v12)
      {
LABEL_12:
        v17 = v5 - v12;
        v18 = 8 * v12;
        v19 = (uint64_t *)(v9 + 8 * v12);
        v20 = (_QWORD *)(v10 + v18);
        do
        {
          v21 = *v19++;
          *v20++ = v21;
          --v17;
        }
        while (v17);
      }
    }
    result = a2[64];
    if ((_QWORD *)result != a2 && result != 0)
      result = MEMORY[0x212BC6368]();
    a2[64] = v11;
    v5 = a2[66];
  }
  *(_QWORD *)(v11 + 8 * v5) = v4;
  ++a2[66];
  return result;
}

uint64_t sub_20F3E1DF8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (*(_BYTE *)(result + 312))
    goto LABEL_2;
  v23 = *(_QWORD *)(result + 48);
  v24 = *(_QWORD *)(result + 56);
  if (v23 == v24)
  {
LABEL_25:
    v25 = *(_QWORD *)(result + 144);
    v26 = *(_QWORD *)(result + 152);
    if (v25 == v26)
    {
LABEL_2:
      v4 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(result + 248) - *(_QWORD *)(result + 240)) >> 3);
      goto LABEL_3;
    }
    while ((*(_BYTE *)(*(_QWORD *)(v25 + 8) + 4) & 6) == 0)
    {
      v25 += 16;
      if (v25 == v26)
        goto LABEL_2;
    }
  }
  else
  {
    while ((*(_BYTE *)(*(_QWORD *)(v23 + 8) + 4) & 6) == 0)
    {
      v23 += 16;
      if (v23 == v24)
        goto LABEL_25;
    }
  }
  v27 = *(_QWORD *)(result + 240);
  v28 = *(_QWORD *)(result + 248);
  if (v27 == v28)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v29 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v27 + 736) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v27 + 744) + 4) & 6) == 0)
        v4 = ++v29;
      v27 += 888;
    }
    while (v27 != v28);
  }
LABEL_3:
  *a3 += v4;
  v5 = a2[66];
  v6 = v5 + 1;
  v7 = a2[65];
  if (v5 + 1 <= v7)
  {
    v11 = a2[64];
  }
  else
  {
    v8 = 2 * v7;
    if (v8 > v6)
      v6 = v8;
    a2[65] = v6;
    v9 = a2[64];
    v10 = operator new[]();
    v11 = v10;
    if (v5)
    {
      v12 = 0;
      if (v5 < 4)
        goto LABEL_12;
      if ((unint64_t)(v10 - v9) < 0x20)
        goto LABEL_12;
      v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = (_OWORD *)(v10 + 16);
      v14 = (__int128 *)(v9 + 16);
      v15 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v5 != v12)
      {
LABEL_12:
        v17 = v5 - v12;
        v18 = 8 * v12;
        v19 = (uint64_t *)(v9 + 8 * v12);
        v20 = (_QWORD *)(v10 + v18);
        do
        {
          v21 = *v19++;
          *v20++ = v21;
          --v17;
        }
        while (v17);
      }
    }
    result = a2[64];
    if ((_QWORD *)result != a2 && result != 0)
      result = MEMORY[0x212BC6368]();
    a2[64] = v11;
    v5 = a2[66];
  }
  *(_QWORD *)(v11 + 8 * v5) = v4;
  ++a2[66];
  return result;
}

void sub_20F3E2000(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (*(_BYTE *)(a1 + 312))
  {
    v8 = *(_QWORD *)(a1 + 144);
    v9 = *(_QWORD *)(a1 + 152);
    if (v8 == v9)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      do
      {
        v11 = *(_QWORD *)(v8 + 8);
        if ((*(_BYTE *)(v11 + 4) & 6) == 0)
          v10 += *(unsigned __int8 *)(v11 + 20);
        v8 += 16;
      }
      while (v8 != v9);
    }
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (v12 == v13)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 144);
    v16 = *(_QWORD *)(a1 + 152);
    if (v15 != v16)
      goto LABEL_13;
LABEL_40:
    v10 = 0;
    if (!v14)
      goto LABEL_20;
    goto LABEL_41;
  }
  v14 = 0;
  do
  {
    if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 4) & 6) != 0)
      v14 = 1;
    v12 += 16;
  }
  while (v12 != v13);
  v15 = *(_QWORD *)(a1 + 144);
  v16 = *(_QWORD *)(a1 + 152);
  if (v15 == v16)
    goto LABEL_40;
LABEL_13:
  v10 = 0;
  do
  {
    v17 = *(_QWORD *)(v15 + 8);
    if ((*(_BYTE *)(v17 + 4) & 6) != 0)
      v14 = 1;
    v10 += *(unsigned __int8 *)(v17 + 20);
    v15 += 16;
  }
  while (v15 != v16);
  if (v14)
  {
LABEL_41:
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a1 + 464);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a1 + 488);
    v37 = *(_QWORD *)(a1 + 240);
    v38 = *(_QWORD *)(a1 + 248);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 736);
      if (*(_BYTE *)(v37 + 880)
        || (*(_BYTE *)(v39 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v37 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 464, v39);
        sub_20F394A20(a1 + 464, *(_QWORD *)(v37 + 744));
      }
      v37 += 888;
    }
    v40 = *(_QWORD *)(a1 + 264);
    v41 = *(_QWORD *)(a1 + 272);
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(v40 + 736);
      if (*(_BYTE *)(v40 + 880)
        || (*(_BYTE *)(v42 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v40 + 744) + 4) & 6) != 0)
      {
        sub_20F3D35E0((_QWORD *)(a1 + 464), v42);
        sub_20F3D35E0((_QWORD *)(a1 + 464), *(_QWORD *)(v40 + 744));
      }
      v40 += 888;
    }
    v43 = (uint64_t)(*(_QWORD *)(a1 + 496) - *(_QWORD *)(a1 + 488)) >> 2;
    if (v43 <= v10)
      v10 -= v43;
    else
      v10 = 0;
    v44 = *(_QWORD *)(a1 + 240);
    v45 = *(_QWORD *)(a1 + 248);
    while (v44 != v45)
    {
      v46 = *(_QWORD *)(v44 + 736);
      if (*(_BYTE *)(v44 + 880)
        || (*(_BYTE *)(v46 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v44 + 744) + 4) & 6) != 0)
      {
        ++*(_DWORD *)(v46 + 8);
        ++*(_DWORD *)(*(_QWORD *)(v44 + 744) + 8);
      }
      v44 += 888;
    }
    v47 = *(_QWORD *)(a1 + 264);
    v48 = *(_QWORD *)(a1 + 272);
    while (v47 != v48)
    {
      v49 = *(_QWORD *)(v47 + 736);
      if (*(_BYTE *)(v47 + 880)
        || (*(_BYTE *)(v49 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v47 + 744) + 4) & 6) != 0)
      {
        ++*(_DWORD *)(v49 + 8);
        ++*(_DWORD *)(*(_QWORD *)(v47 + 744) + 8);
      }
      v47 += 888;
    }
  }
LABEL_20:
  *a3 += v10;
  *a4 += 6 * v10;
  v18 = a2[66];
  v19 = v18 + 1;
  v20 = a2[65];
  if (v18 + 1 <= v20)
  {
    v24 = a2[64];
  }
  else
  {
    v21 = 2 * v20;
    if (v21 > v19)
      v19 = v21;
    a2[65] = v19;
    v22 = a2[64];
    v23 = operator new[]();
    v24 = v23;
    if (v18)
    {
      v25 = 0;
      if (v18 < 4)
        goto LABEL_29;
      if ((unint64_t)(v23 - v22) < 0x20)
        goto LABEL_29;
      v25 = v18 & 0xFFFFFFFFFFFFFFFCLL;
      v26 = (_OWORD *)(v23 + 16);
      v27 = (__int128 *)(v22 + 16);
      v28 = v18 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 4;
      }
      while (v28);
      if (v18 != v25)
      {
LABEL_29:
        v30 = v18 - v25;
        v31 = 8 * v25;
        v32 = (uint64_t *)(v22 + 8 * v25);
        v33 = (_QWORD *)(v23 + v31);
        do
        {
          v34 = *v32++;
          *v33++ = v34;
          --v30;
        }
        while (v30);
      }
    }
    v35 = (_QWORD *)a2[64];
    if (v35 != a2 && v35 != 0)
      MEMORY[0x212BC6368]();
    a2[64] = v24;
    v18 = a2[66];
  }
  *(_QWORD *)(v24 + 8 * v18) = v10;
  ++a2[66];
}

void sub_20F3E23BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[30];
  v3 = v1[31];
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 736);
    if (*(_BYTE *)(v2 + 880) || (*(_BYTE *)(v4 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v2 + 744) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v4 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v2 + 744) + 8);
    }
    v2 += 888;
  }
  v5 = v1[33];
  v6 = v1[34];
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 736);
    if (*(_BYTE *)(v5 + 880) || (*(_BYTE *)(v7 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v5 + 744) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v7 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v5 + 744) + 8);
    }
    v5 += 888;
  }
  _Unwind_Resume(a1);
}

void sub_20F3E247C(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  __int128 *v38;
  unint64_t v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 312))
  {
    if (v7 == v8)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)(v7 + 8);
        if ((*(_BYTE *)(v10 + 4) & 6) == 0)
          v9 += *(unsigned __int8 *)(v10 + 20);
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
  else
  {
    if (v7 == v8)
    {
      v12 = 0;
      v9 = 0;
    }
    else
    {
      v12 = 0;
      v9 = 0;
      do
      {
        v13 = *(_QWORD *)(v7 + 8);
        if ((*(_BYTE *)(v13 + 4) & 6) != 0)
          v12 = 1;
        v9 += *(unsigned __int8 *)(v13 + 20);
        v7 += 16;
      }
      while (v7 != v8);
    }
    v14 = *(_QWORD *)(a1 + 144);
    for (i = *(_QWORD *)(a1 + 152); v14 != i; v14 += 16)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v14 + 8) + 4) & 6) != 0)
        v12 = 1;
    }
    if (v12)
    {
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a1 + 464);
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a1 + 488);
      v16 = *(_QWORD *)(a1 + 240);
      v17 = *(_QWORD *)(a1 + 248);
      while (v16 != v17)
      {
        v18 = *(_QWORD *)(v16 + 736);
        if (*(_BYTE *)(v16 + 880)
          || (*(_BYTE *)(v18 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v16 + 744) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 464, v18);
          sub_20F394A20(a1 + 464, *(_QWORD *)(v16 + 744));
        }
        v16 += 888;
      }
      v19 = *(_QWORD *)(a1 + 264);
      v20 = *(_QWORD *)(a1 + 272);
      while (v19 != v20)
      {
        v21 = *(_QWORD *)(v19 + 736);
        if (*(_BYTE *)(v19 + 880)
          || (*(_BYTE *)(v21 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v19 + 744) + 4) & 6) != 0)
        {
          sub_20F3D35E0((_QWORD *)(a1 + 464), v21);
          sub_20F3D35E0((_QWORD *)(a1 + 464), *(_QWORD *)(v19 + 744));
        }
        v19 += 888;
      }
      v22 = (uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 2;
      if (v22 <= v9)
        v9 -= v22;
      else
        v9 = 0;
      v23 = *(_QWORD *)(a1 + 240);
      v24 = *(_QWORD *)(a1 + 248);
      while (v23 != v24)
      {
        v25 = *(_QWORD *)(v23 + 736);
        if (*(_BYTE *)(v23 + 880)
          || (*(_BYTE *)(v25 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v23 + 744) + 4) & 6) != 0)
        {
          ++*(_DWORD *)(v25 + 8);
          ++*(_DWORD *)(*(_QWORD *)(v23 + 744) + 8);
        }
        v23 += 888;
      }
      v26 = *(_QWORD *)(a1 + 264);
      v27 = *(_QWORD *)(a1 + 272);
      while (v26 != v27)
      {
        v28 = *(_QWORD *)(v26 + 736);
        if (*(_BYTE *)(v26 + 880)
          || (*(_BYTE *)(v28 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v26 + 744) + 4) & 6) != 0)
        {
          ++*(_DWORD *)(v28 + 8);
          ++*(_DWORD *)(*(_QWORD *)(v26 + 744) + 8);
        }
        v26 += 888;
      }
    }
  }
  *a3 += v9;
  *a4 += 4 * v9;
  v29 = a2[66];
  v30 = v29 + 1;
  v31 = a2[65];
  if (v29 + 1 <= v31)
  {
    v35 = a2[64];
  }
  else
  {
    v32 = 2 * v31;
    if (v32 > v30)
      v30 = v32;
    a2[65] = v30;
    v33 = a2[64];
    v34 = operator new[]();
    v35 = v34;
    if (v29)
    {
      v36 = 0;
      if (v29 < 4)
        goto LABEL_62;
      if ((unint64_t)(v34 - v33) < 0x20)
        goto LABEL_62;
      v36 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      v37 = (_OWORD *)(v34 + 16);
      v38 = (__int128 *)(v33 + 16);
      v39 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v40 = *v38;
        *(v37 - 1) = *(v38 - 1);
        *v37 = v40;
        v37 += 2;
        v38 += 2;
        v39 -= 4;
      }
      while (v39);
      if (v29 != v36)
      {
LABEL_62:
        v41 = v29 - v36;
        v42 = 8 * v36;
        v43 = (uint64_t *)(v33 + 8 * v36);
        v44 = (_QWORD *)(v34 + v42);
        do
        {
          v45 = *v43++;
          *v44++ = v45;
          --v41;
        }
        while (v41);
      }
    }
    v46 = (_QWORD *)a2[64];
    if (v46 != a2 && v46 != 0)
      MEMORY[0x212BC6368]();
    a2[64] = v35;
    v29 = a2[66];
  }
  *(_QWORD *)(v35 + 8 * v29) = v9;
  ++a2[66];
}

void sub_20F3E2820(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[30];
  v3 = v1[31];
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 736);
    if (*(_BYTE *)(v2 + 880) || (*(_BYTE *)(v4 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v2 + 744) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v4 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v2 + 744) + 8);
    }
    v2 += 888;
  }
  v5 = v1[33];
  v6 = v1[34];
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 736);
    if (*(_BYTE *)(v5 + 880) || (*(_BYTE *)(v7 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v5 + 744) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v7 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v5 + 744) + 8);
    }
    v5 += 888;
  }
  _Unwind_Resume(a1);
}

void sub_20F3E28E0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(v2 + 1160);
  v5 = (_QWORD *)(v2 + 1152);
  sub_20F3E1DF8(*a1, (_QWORD *)(v2 + 1160), (_QWORD *)(v2 + 1152));
  sub_20F3E1BF0(v3, v4, v5);
  v7 = *a1;
  v6 = (_QWORD *)a1[1];
  v8 = v6 + 214;
  v9 = v6 + 212;
  v10 = v6 + 213;
  sub_20F3E247C(v7, v6 + 214, v6 + 212, v6 + 213);
  sub_20F3E2000(v7, v8, v9, v10);
}

char *sub_20F3E2964(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  char *v30;
  __int128 *i;
  __int128 v32;
  char *v33;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 60)
      sub_20E877A38();
    v22 = (char *)operator new(16 * v21);
    v23 = &v22[16 * v8];
    v24 = &v22[16 * v21];
    if (v8 != v21)
      goto LABEL_31;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = (char *)(16 * v8);
  v24 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  v28 = v23;
  if (v6 != v9)
  {
    v29 = v9;
    v30 = v23;
    do
    {
      v28 = v30 - 16;
      *((_OWORD *)v30 - 1) = *--v29;
      v30 -= 16;
    }
    while (v29 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
    v32 = *v9++;
    *(_OWORD *)v27 = v32;
  }
  v33 = *a1;
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

void sub_20F3E2BB4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F3E2BCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char **v9;
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 232 * v5;
    }
    v7 = 232 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 1856;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v10 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v14 = v10;
      v11 = *(_QWORD **)(a1 + 16);
      if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
      {
        v13 = sub_20F3E2D0C(v9, &v14);
      }
      else
      {
        v12 = MEMORY[0x24BDAE450];
        *v11 = v10;
        v11[1] = v12;
        v13 = (char *)(v11 + 2);
      }
      *(_QWORD *)(a1 + 16) = v13;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

char *sub_20F3E2D0C(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  double *v20;
  const double *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  float64x2x2_t v28;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    sub_20E867F44();
  v8 = a1[2] - v4;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_20E877A38();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * (v5 >> 4)];
  v12 = MEMORY[0x24BDAE450];
  v13 = &v10[16 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v3 - v4 - 16;
    if (v15 < 0x90
      || &v3[-(v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v11 && &v10[v5 - (v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v3)
    {
      goto LABEL_18;
    }
    v16 = (v15 >> 4) + 1;
    v17 = 16 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    v18 = &v11[-v17];
    v19 = &v3[-v17];
    v20 = (double *)(v11 - 32);
    v21 = (const double *)(v3 - 32);
    v22 = v16 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v28 = vld2q_f64(v21);
      v21[2] = 0.0;
      *v21 = 0.0;
      v21 -= 4;
      vst2q_f64(v20, v28);
      v20 -= 4;
      v22 -= 2;
    }
    while (v22);
    v11 = v18;
    v3 = v19;
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v18 = v11;
      do
      {
        v23 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v18 - 2) = v23;
        v18 -= 16;
        *((_QWORD *)v18 + 1) = *((_QWORD *)v3 + 1);
      }
      while (v3 != v4);
    }
    v3 = *a1;
    v24 = a1[1];
    *a1 = v18;
    a1[1] = v14;
    a1[2] = v13;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v26 = *((_QWORD *)v25 - 2);
        v25 -= 16;
        *(_QWORD *)v25 = 0;
        if (v26)
          (*((void (**)(void))v24 - 1))();
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

uint64_t sub_20F3E2ECC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 888;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_20F3E2F58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *__p;
  __int128 v8;

  __p = operator new(0x30uLL);
  v8 = xmmword_2102E3F90;
  strcpy((char *)__p, "SubmapsAlignmentOptimizerConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DCF0((unsigned int *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "SubmapsAlignmentOptimizerConfig.num_iterations_per_optimization", v4, "Number of iterations in one optimization cycle.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA71FC((int *)(a1 + 4));
  return sub_20E8B2F9C((uint64_t *)&__p, "SubmapsAlignmentOptimizerConfig.verbose", v5, "Verbosity.");
}

void sub_20F3E3040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3E307C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20F3E30C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char **v13;

  v3 = *a2;
  v4 = a2[1];
  v9 = 0uLL;
  v10 = 0;
  v5 = v4 - v3;
  if (v4 == v3)
  {
    v7 = 0uLL;
  }
  else
  {
    if (v5 < 0)
      sub_20EABADD4();
    v6 = v5 >> 5;
    *(_QWORD *)&v9 = operator new(24 * (v5 >> 5));
    *((_QWORD *)&v9 + 1) = v9;
    v10 = v9 + 24 * v6;
    v13 = (char **)&v9;
    do
    {
      v11 = *(_OWORD *)v3;
      v12 = *(_QWORD *)(v3 + 16);
      sub_20F3E3444(&v13, &v11);
      v3 += 32;
    }
    while (v3 != v4);
    v7 = v9;
    v5 = v10;
  }
  *(_OWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = v5;
  return a1;
}

void sub_20F3E3180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char ***sub_20F3E31A0@<X0>(char ***result@<X0>, _QWORD *a2@<X8>)
{
  char **v3;
  char **v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  char **v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *result;
  v4 = result[1];
  v8 = 0uLL;
  v9 = 0;
  v5 = (char *)v4 - (char *)v3;
  if (v4 == v3)
  {
    v7 = 0uLL;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >> 59)
      sub_20EABADD4();
    *(_QWORD *)&v8 = operator new(0x5555555555555560 * (v5 >> 3));
    *((_QWORD *)&v8 + 1) = v8;
    v9 = v8 + 32 * v6;
    v13 = (char **)&v8;
    do
    {
      v10 = *(_OWORD *)v3;
      v11 = v3[2];
      v12 = 0;
      result = sub_20F3E3590(&v13, &v10);
      v3 += 3;
    }
    while (v3 != v4);
    v7 = v8;
    v5 = v9;
  }
  *(_OWORD *)a2 = v7;
  a2[2] = v5;
  return result;
}

void sub_20F3E326C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F3E328C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  char **v13;

  v3 = *a2;
  v4 = a2[1];
  v10 = 0uLL;
  v11 = 0;
  v5 = v4 - v3;
  if (v4 == v3)
  {
    v8 = 0;
    v7 = 0uLL;
  }
  else
  {
    if (v5 < 0)
      sub_20EABADD4();
    *(_QWORD *)&v10 = operator new((unint64_t)v5 >> 1);
    *((_QWORD *)&v10 + 1) = v10;
    v11 = v10 + 16 * (v5 >> 5);
    v13 = (char **)&v10;
    do
    {
      v6 = *(_QWORD *)(v3 + 24);
      *(_QWORD *)&v12 = 0;
      *((_QWORD *)&v12 + 1) = v6;
      sub_20F3E369C(&v13, &v12);
      v3 += 32;
    }
    while (v3 != v4);
    v7 = v10;
    v8 = v11;
  }
  *(_OWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = v8;
  return a1;
}

void sub_20F3E333C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char ***sub_20F3E335C@<X0>(char ***result@<X0>, _QWORD *a2@<X8>)
{
  char **v3;
  char **v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char **v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *result;
  v4 = result[1];
  v9 = 0uLL;
  v10 = 0;
  v5 = (char *)v4 - (char *)v3;
  if (v4 == v3)
  {
    v8 = 0;
    v7 = 0uLL;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF1)
      sub_20EABADD4();
    *(_QWORD *)&v9 = operator new(2 * v5);
    *((_QWORD *)&v9 + 1) = v9;
    v10 = v9 + 32 * (v5 >> 4);
    v14 = (char **)&v9;
    do
    {
      v6 = v3[1];
      v11 = 0uLL;
      v12 = 0;
      v13 = v6;
      result = sub_20F3E3590(&v14, &v11);
      v3 += 2;
    }
    while (v3 != v4);
    v7 = v9;
    v8 = v10;
  }
  *(_OWORD *)a2 = v7;
  a2[2] = v8;
  return result;
}

void sub_20F3E3424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char ***sub_20F3E3444(char ***a1, __int128 *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v9 = *v4;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20EABADD4();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v9) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v14 = (char *)operator new(24 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[24 * v10];
    *(_OWORD *)v15 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    v8 = v15 + 24;
    if (v6 != v9)
    {
      do
      {
        v16 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v15 - 24) = v16;
        v15 -= 24;
        v6 -= 24;
      }
      while (v6 != v9);
      v6 = *v4;
    }
    *v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[24 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    *((_QWORD *)v6 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v6 = v7;
    v8 = v6 + 24;
  }
  v4[1] = v8;
  return a1;
}

char ***sub_20F3E3590(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v9 = *v4;
    v10 = (v6 - *v4) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_20EABADD4();
    v12 = v5 - (_QWORD)v9;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 59)
        sub_20E877A38();
      v14 = (char *)operator new(32 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[32 * v10];
    v16 = a2[1];
    *(_OWORD *)v15 = *a2;
    *((_OWORD *)v15 + 1) = v16;
    v8 = v15 + 32;
    if (v6 != v9)
    {
      do
      {
        v17 = *((_OWORD *)v6 - 1);
        *((_OWORD *)v15 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v15 - 1) = v17;
        v15 -= 32;
        v6 -= 32;
      }
      while (v6 != v9);
      v6 = *v4;
    }
    *v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[32 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = a2[1];
    *(_OWORD *)v6 = *a2;
    *((_OWORD *)v6 + 1) = v7;
    v8 = v6 + 32;
  }
  v4[1] = v8;
  return a1;
}

char ***sub_20F3E369C(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = (v6 - *v4) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_20EABADD4();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_20E877A38();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v8);
      v6 = *v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[16 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_OWORD *)v6 = *a2;
    v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

uint64_t sub_20F3E37AC(uint64_t a1, __int128 ***a2)
{
  uint64_t v4;
  __int128 **v5;
  __int128 **i;
  uint64_t v7;
  __int128 v9;
  unint64_t v10;
  void *__p[2];
  uint64_t v12;

  v4 = a2[1] - *a2;
  v10 = 0;
  v9 = 0uLL;
  sub_20EB067C0((uint64_t)&v9, 0xAAAAAAAAAAAAAAABLL * v4);
  v5 = *a2;
  for (i = a2[1]; v5 != i; v5 += 3)
  {
    while (1)
    {
      sub_20F3E3D88((uint64_t)__p, v5);
      v7 = *((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1) >= v10)
        break;
      **((_QWORD **)&v9 + 1) = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_OWORD *)v7 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v12;
      *((_QWORD *)&v9 + 1) = v7 + 24;
      v5 += 3;
      if (v5 == i)
        goto LABEL_8;
    }
    *((_QWORD *)&v9 + 1) = sub_20F3E3C2C((char **)&v9, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
LABEL_8:
  *(_OWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v10;
  return a1;
}

void sub_20F3E389C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  _QWORD *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;

  if (__p)
  {
    v15 = a10;
    v16 = __p;
    if (a10 != __p)
    {
      v17 = a10;
      do
      {
        v19 = (void *)*((_QWORD *)v17 - 3);
        v17 -= 24;
        v18 = v19;
        if (v19)
        {
          *(v15 - 2) = v18;
          operator delete(v18);
        }
        v15 = v17;
      }
      while (v17 != __p);
      v16 = __p;
    }
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3E3950(char ****a1@<X0>, _QWORD *a2@<X8>)
{
  char ***v3;
  char ***v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;

  v3 = *a1;
  v4 = a1[1];
  v5 = (char *)v4 - (char *)*a1;
  if (v4 == v3)
  {
    v8 = 0;
    v7 = 0;
    v9 = 0;
    goto LABEL_29;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    sub_20E91EF00();
  v7 = (char *)operator new(v5);
  v8 = &v7[24 * v6];
  v23 = v7;
  v24 = v7;
  v25 = v8;
  v9 = v7;
  if (v4 != v3)
  {
    v22 = a2;
    while (1)
    {
      sub_20F3E3F3C(v3, (uint64_t)&v26);
      v10 = v24;
      if (v24 < v25)
      {
        *(_OWORD *)v24 = v26;
        *((_QWORD *)v24 + 2) = v27;
        v7 = v24 + 24;
      }
      else
      {
        v11 = v23;
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3) + 1;
        if (v12 > 0xAAAAAAAAAAAAAAALL)
          sub_20E91EF00();
        if (0x5555555555555556 * ((v25 - v23) >> 3) > v12)
          v12 = 0x5555555555555556 * ((v25 - v23) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v25 - v23) >> 3) >= 0x555555555555555)
          v13 = 0xAAAAAAAAAAAAAAALL;
        else
          v13 = v12;
        if (v13 > 0xAAAAAAAAAAAAAAALL)
          sub_20E877A38();
        v14 = (char *)operator new(24 * v13);
        v15 = &v14[8 * ((v24 - v23) >> 3)];
        v16 = &v14[24 * v13];
        *(_OWORD *)v15 = v26;
        *((_QWORD *)v15 + 2) = v27;
        v7 = v15 + 24;
        if (v24 != v23)
        {
          v17 = v24;
          do
          {
            v18 = *(_OWORD *)(v17 - 24);
            v17 -= 24;
            *(_OWORD *)(v15 - 24) = v18;
            v15 -= 24;
            *((_QWORD *)v15 + 2) = *((_QWORD *)v17 + 2);
            *(_QWORD *)v17 = 0;
            *((_QWORD *)v17 + 1) = 0;
            *((_QWORD *)v17 + 2) = 0;
          }
          while (v17 != v23);
          v23 = v15;
          v19 = v24;
          v25 = v16;
          do
          {
            v21 = (void *)*((_QWORD *)v19 - 3);
            v19 -= 24;
            v20 = v21;
            if (v21)
            {
              *((_QWORD *)v10 - 2) = v20;
              operator delete(v20);
            }
            v10 = v19;
          }
          while (v19 != v11);
          v10 = v11;
          if (!v11)
            goto LABEL_8;
LABEL_27:
          operator delete(v10);
          goto LABEL_8;
        }
        v23 = &v14[8 * ((v24 - v23) >> 3)];
        v25 = &v14[24 * v13];
        if (v24)
          goto LABEL_27;
      }
LABEL_8:
      v24 = v7;
      v3 += 3;
      if (v3 == v4)
      {
        a2 = v22;
        v9 = v23;
        v8 = v25;
        break;
      }
    }
  }
LABEL_29:
  *a2 = v9;
  a2[1] = v7;
  a2[2] = v8;
}

void sub_20F3E3B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, void *a13)
{
  _QWORD *v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  if (__p)
  {
    v14 = a11;
    v15 = __p;
    if (a11 != __p)
    {
      v16 = a11;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *(v14 - 2) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != __p);
      v15 = __p;
    }
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20F3E3C2C(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20EABADD4();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v10 = v8 + 24;
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = v8;
      *((_QWORD *)v8 - 2) = 0;
      *((_QWORD *)v8 - 1) = 0;
      v14 = *(_OWORD *)(v12 - 24);
      v12 -= 24;
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 24;
      *((_QWORD *)v13 - 1) = *((_QWORD *)v12 + 2);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
    while (v12 != v11);
    v12 = *a1;
    v15 = a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v15 != v12)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v12);
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

uint64_t sub_20F3E3D88(uint64_t a1, __int128 **a2)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  uint64_t v17;
  char **v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v16 = 0uLL;
  v17 = 0;
  v5 = (char *)v4 - (char *)v3;
  if (v4 == v3)
  {
    v14 = 0uLL;
  }
  else
  {
    v6 = 0x84BDA12F684BDA13 * (v5 >> 3);
    if (v6 >= 0x124924924924925)
      sub_20EABADD4();
    *(_QWORD *)&v16 = operator new(0x25ED097B425ED0A0 * (v5 >> 3));
    *((_QWORD *)&v16 + 1) = v16;
    v17 = v16 + 224 * v6;
    v18 = (char **)&v16;
    do
    {
      v20 = *v3;
      v7 = v3[1];
      v8 = v3[2];
      v9 = v3[3];
      v24 = *((_QWORD *)v3 + 8);
      v22 = v8;
      v23 = v9;
      v21 = v7;
      v10 = *(__int128 *)((char *)v3 + 72);
      v26 = *((_QWORD *)v3 + 11);
      v25 = v10;
      v27 = v3[6];
      v28 = v3[7];
      v11 = v3[8];
      v12 = v3[9];
      v13 = v3[10];
      v32 = *((_QWORD *)v3 + 22);
      v30 = v12;
      v31 = v13;
      v29 = v11;
      v33 = *((_QWORD *)v3 + 23);
      v34 = v3[12];
      v35 = *((_BYTE *)v3 + 208);
      sub_20F3E40CC(&v18, (__int128 *)&v19);
      v3 = (__int128 *)((char *)v3 + 216);
    }
    while (v3 != v4);
    v14 = v16;
    v5 = v17;
  }
  *(_OWORD *)a1 = v14;
  *(_QWORD *)(a1 + 16) = v5;
  return a1;
}

void sub_20F3E3F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char ***sub_20F3E3F3C@<X0>(char ***result@<X0>, uint64_t a2@<X8>)
{
  char **v3;
  char **v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18[4];
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  char v30;
  char v31;
  char **v32;

  v3 = *result;
  v4 = result[1];
  v16 = 0uLL;
  v17 = 0;
  v5 = (char *)v4 - (char *)v3;
  if (v4 == v3)
  {
    v15 = 0uLL;
  }
  else
  {
    v6 = 0x6DB6DB6DB6DB6DB7 * (v5 >> 5);
    if (v6 >= 0x12F684BDA12F685)
      sub_20E91EF00();
    *(_QWORD *)&v16 = operator new(0x9249249249249268 * (v5 >> 5));
    *((_QWORD *)&v16 + 1) = v16;
    v17 = v16 + 216 * v6;
    v32 = (char **)&v16;
    do
    {
      v18[0] = *(_OWORD *)(v3 + 1);
      v7 = *(_OWORD *)(v3 + 3);
      v8 = *(_OWORD *)(v3 + 5);
      v9 = *(_OWORD *)(v3 + 7);
      v19 = v3[9];
      v18[2] = v8;
      v18[3] = v9;
      v18[1] = v7;
      v10 = *((_OWORD *)v3 + 5);
      v21 = v3[12];
      v20 = v10;
      v22 = *(_OWORD *)(v3 + 13);
      v23 = *(_OWORD *)(v3 + 15);
      v11 = *(_OWORD *)(v3 + 17);
      v12 = *(_OWORD *)(v3 + 19);
      v13 = *(_OWORD *)(v3 + 21);
      v27 = v3[23];
      v25 = v12;
      v26 = v13;
      v24 = v11;
      v28 = v3[24];
      v14 = v3[25];
      v30 = *((_BYTE *)v3 + 208);
      v29 = v14;
      v31 = *((_BYTE *)v3 + 216);
      result = sub_20F3E42B0(&v32, v18);
      v3 += 28;
    }
    while (v3 != v4);
    v15 = v16;
    v5 = v17;
  }
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20F3E40AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char ***sub_20F3E40CC(char ***a1, __int128 *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v18 = *v4;
    v19 = 0x6DB6DB6DB6DB6DB7 * ((v6 - *v4) >> 5);
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) > 0x124924924924924)
      sub_20EABADD4();
    v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - (_QWORD)v18) >> 5);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x92492492492492)
      v22 = 0x124924924924924;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 > 0x124924924924924)
        sub_20E877A38();
      v23 = (char *)operator new(224 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = a2[11];
    v25 = &v23[224 * v19];
    *((_OWORD *)v25 + 10) = a2[10];
    *((_OWORD *)v25 + 11) = v24;
    v26 = a2[13];
    *((_OWORD *)v25 + 12) = a2[12];
    *((_OWORD *)v25 + 13) = v26;
    v27 = a2[7];
    *((_OWORD *)v25 + 6) = a2[6];
    *((_OWORD *)v25 + 7) = v27;
    v28 = a2[9];
    *((_OWORD *)v25 + 8) = a2[8];
    *((_OWORD *)v25 + 9) = v28;
    v29 = a2[3];
    *((_OWORD *)v25 + 2) = a2[2];
    *((_OWORD *)v25 + 3) = v29;
    v30 = a2[5];
    *((_OWORD *)v25 + 4) = a2[4];
    *((_OWORD *)v25 + 5) = v30;
    v31 = *a2;
    v32 = a2[1];
    v17 = v25 + 224;
    *(_OWORD *)v25 = v31;
    *((_OWORD *)v25 + 1) = v32;
    if (v6 != v18)
    {
      do
      {
        v33 = *((_OWORD *)v6 - 13);
        *((_OWORD *)v25 - 14) = *((_OWORD *)v6 - 14);
        *((_OWORD *)v25 - 13) = v33;
        v34 = *((_OWORD *)v6 - 12);
        v35 = *((_OWORD *)v6 - 11);
        v36 = *((_OWORD *)v6 - 9);
        *((_OWORD *)v25 - 10) = *((_OWORD *)v6 - 10);
        *((_OWORD *)v25 - 9) = v36;
        *((_OWORD *)v25 - 12) = v34;
        *((_OWORD *)v25 - 11) = v35;
        v37 = *((_OWORD *)v6 - 8);
        v38 = *((_OWORD *)v6 - 7);
        v39 = *((_OWORD *)v6 - 5);
        *((_OWORD *)v25 - 6) = *((_OWORD *)v6 - 6);
        *((_OWORD *)v25 - 5) = v39;
        *((_OWORD *)v25 - 8) = v37;
        *((_OWORD *)v25 - 7) = v38;
        v40 = *((_OWORD *)v6 - 4);
        v41 = *((_OWORD *)v6 - 3);
        v42 = *((_OWORD *)v6 - 2);
        *(_OWORD *)(v25 - 23) = *(_OWORD *)(v6 - 23);
        *((_OWORD *)v25 - 3) = v41;
        *((_OWORD *)v25 - 2) = v42;
        *((_OWORD *)v25 - 4) = v40;
        v25 -= 224;
        v6 -= 224;
      }
      while (v6 != v18);
      v6 = *v4;
    }
    *v4 = v25;
    v4[1] = v17;
    v4[2] = &v23[224 * v22];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = a2[1];
    *(_OWORD *)v6 = *a2;
    *((_OWORD *)v6 + 1) = v7;
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[5];
    *((_OWORD *)v6 + 4) = a2[4];
    *((_OWORD *)v6 + 5) = v10;
    *((_OWORD *)v6 + 2) = v8;
    *((_OWORD *)v6 + 3) = v9;
    v11 = a2[6];
    v12 = a2[7];
    v13 = a2[9];
    *((_OWORD *)v6 + 8) = a2[8];
    *((_OWORD *)v6 + 9) = v13;
    *((_OWORD *)v6 + 6) = v11;
    *((_OWORD *)v6 + 7) = v12;
    v14 = a2[10];
    v15 = a2[11];
    v16 = a2[13];
    *((_OWORD *)v6 + 12) = a2[12];
    *((_OWORD *)v6 + 13) = v16;
    *((_OWORD *)v6 + 10) = v14;
    *((_OWORD *)v6 + 11) = v15;
    v17 = v6 + 224;
  }
  v4[1] = v17;
  return a1;
}

char ***sub_20F3E42B0(char ***a1, __int128 *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v18 = *v4;
    v19 = 0x84BDA12F684BDA13 * ((v6 - *v4) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0x12F684BDA12F684)
      sub_20E91EF00();
    v21 = 0x84BDA12F684BDA13 * ((uint64_t)(v5 - (_QWORD)v18) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x97B425ED097B42)
      v22 = 0x12F684BDA12F684;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 > 0x12F684BDA12F684)
        sub_20E877A38();
      v23 = (char *)operator new(216 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = a2[11];
    v25 = &v23[216 * v19];
    *((_OWORD *)v25 + 10) = a2[10];
    *((_OWORD *)v25 + 11) = v24;
    *((_OWORD *)v25 + 12) = a2[12];
    *((_QWORD *)v25 + 26) = *((_QWORD *)a2 + 26);
    v26 = a2[7];
    *((_OWORD *)v25 + 6) = a2[6];
    *((_OWORD *)v25 + 7) = v26;
    v27 = a2[9];
    *((_OWORD *)v25 + 8) = a2[8];
    *((_OWORD *)v25 + 9) = v27;
    v28 = a2[3];
    *((_OWORD *)v25 + 2) = a2[2];
    *((_OWORD *)v25 + 3) = v28;
    v29 = a2[5];
    *((_OWORD *)v25 + 4) = a2[4];
    *((_OWORD *)v25 + 5) = v29;
    v30 = *a2;
    v31 = a2[1];
    v17 = v25 + 216;
    *(_OWORD *)v25 = v30;
    *((_OWORD *)v25 + 1) = v31;
    if (v6 != v18)
    {
      do
      {
        v32 = *(_OWORD *)(v6 - 216);
        *(_OWORD *)(v25 - 200) = *(_OWORD *)(v6 - 200);
        *(_OWORD *)(v25 - 216) = v32;
        v33 = *(_OWORD *)(v6 - 184);
        v34 = *(_OWORD *)(v6 - 168);
        v35 = *(_OWORD *)(v6 - 152);
        *(_OWORD *)(v25 - 136) = *(_OWORD *)(v6 - 136);
        *(_OWORD *)(v25 - 152) = v35;
        *(_OWORD *)(v25 - 168) = v34;
        *(_OWORD *)(v25 - 184) = v33;
        v36 = *(_OWORD *)(v6 - 120);
        v37 = *(_OWORD *)(v6 - 104);
        v38 = *(_OWORD *)(v6 - 88);
        *(_OWORD *)(v25 - 72) = *(_OWORD *)(v6 - 72);
        *(_OWORD *)(v25 - 88) = v38;
        *(_OWORD *)(v25 - 104) = v37;
        *(_OWORD *)(v25 - 120) = v36;
        v39 = *(_OWORD *)(v6 - 56);
        v40 = *(_OWORD *)(v6 - 40);
        v41 = *(_OWORD *)(v6 - 24);
        *(v25 - 8) = *(v6 - 8);
        *(_OWORD *)(v25 - 24) = v41;
        *(_OWORD *)(v25 - 40) = v40;
        *(_OWORD *)(v25 - 56) = v39;
        v25 -= 216;
        v6 -= 216;
      }
      while (v6 != v18);
      v6 = *v4;
    }
    *v4 = v25;
    v4[1] = v17;
    v4[2] = &v23[216 * v22];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = a2[1];
    *(_OWORD *)v6 = *a2;
    *((_OWORD *)v6 + 1) = v7;
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[5];
    *((_OWORD *)v6 + 4) = a2[4];
    *((_OWORD *)v6 + 5) = v10;
    *((_OWORD *)v6 + 2) = v8;
    *((_OWORD *)v6 + 3) = v9;
    v11 = a2[6];
    v12 = a2[7];
    v13 = a2[9];
    *((_OWORD *)v6 + 8) = a2[8];
    *((_OWORD *)v6 + 9) = v13;
    *((_OWORD *)v6 + 6) = v11;
    *((_OWORD *)v6 + 7) = v12;
    v14 = a2[10];
    v15 = a2[11];
    v16 = a2[12];
    *((_QWORD *)v6 + 26) = *((_QWORD *)a2 + 26);
    *((_OWORD *)v6 + 11) = v15;
    *((_OWORD *)v6 + 12) = v16;
    *((_OWORD *)v6 + 10) = v14;
    v17 = v6 + 216;
  }
  v4[1] = v17;
  return a1;
}

uint64_t sub_20F3E44D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void *v19;
  int v21;
  char v22;
  void *__p;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 32);
  v4 = *(uint64_t **)(a2 + 56);
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = a1 + 32;
  *(_OWORD *)(a1 + 48) = 0u;
  for (*(_DWORD *)(a1 + 64) = 1065353216; v4; v4 = (uint64_t *)*v4)
  {
    v21 = *((_DWORD *)v4 + 6);
    v22 = *((_BYTE *)v4 + 28);
    sub_20E96A108((uint64_t)&__p, (uint64_t)(v4 + 4));
    v6 = sub_20F3E4D6C(v5, *((_DWORD *)v4 + 4), (_DWORD *)v4 + 4);
    v7 = v6;
    *((_DWORD *)v6 + 6) = v21;
    v6[28] = v22;
    if (*((_QWORD *)v6 + 7))
    {
      v8 = (_QWORD *)*((_QWORD *)v6 + 6);
      if (v8)
      {
        do
        {
          v9 = (_QWORD *)*v8;
          operator delete(v8);
          v8 = v9;
        }
        while (v9);
      }
      *((_QWORD *)v7 + 6) = 0;
      v10 = *((_QWORD *)v7 + 5);
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_QWORD *)(*((_QWORD *)v7 + 4) + 8 * i) = 0;
      }
      *((_QWORD *)v7 + 7) = 0;
    }
    v12 = __p;
    __p = 0;
    v13 = (void *)*((_QWORD *)v7 + 4);
    *((_QWORD *)v7 + 4) = v12;
    if (v13)
      operator delete(v13);
    v15 = v24;
    v14 = v25;
    *((_QWORD *)v7 + 6) = v25;
    *((_QWORD *)v7 + 5) = v15;
    v24 = 0;
    v16 = v26;
    *((_QWORD *)v7 + 7) = v26;
    *((_DWORD *)v7 + 16) = v27;
    if (v16)
    {
      v17 = v14[1];
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v17 >= v15)
          v17 %= v15;
      }
      else
      {
        v17 &= v15 - 1;
      }
      *(_QWORD *)(*((_QWORD *)v7 + 4) + 8 * v17) = v7 + 48;
      v25 = 0;
      v26 = 0;
    }
    else if (v14)
    {
      do
      {
        v18 = (_QWORD *)*v14;
        operator delete(v14);
        v14 = v18;
      }
      while (v18);
    }
    v19 = __p;
    __p = 0;
    if (v19)
      operator delete(v19);
  }
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 80);
  sub_20E96A108(a1 + 80, a2 + 88);
  sub_20E96A108(a1 + 120, a2 + 128);
  return a1;
}

void sub_20F3E46BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20E8C25A8(v2);
  sub_20E969C90(v1);
  _Unwind_Resume(a1);
}

void sub_20F3E46D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E969C90(v1);
  _Unwind_Resume(a1);
}

void sub_20F3E46EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20F3E307C((uint64_t)&a9);
  sub_20E969C90(v9);
  _Unwind_Resume(a1);
}

void sub_20F3E4708(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E969C90(v1);
  _Unwind_Resume(a1);
}

void sub_20F3E471C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29[2];
  void *v30[2];
  int i;
  int v32;
  char v33;
  __int128 __p;
  __int128 v35;
  int v36;
  _DWORD *v37;

  *(_WORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 40) = 0u;
  v26 = a2 + 40;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_DWORD *)(a2 + 72) = 1065353216;
  *(_OWORD *)(a2 + 88) = 0u;
  v27 = (_QWORD *)(a2 + 88);
  *(_BYTE *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_DWORD *)(a2 + 120) = 1065353216;
  *(_OWORD *)(a2 + 128) = 0u;
  v28 = (_QWORD *)(a2 + 128);
  *(_OWORD *)(a2 + 144) = 0u;
  *(_DWORD *)(a2 + 160) = 1065353216;
  *(_BYTE *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 25) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 24);
  v5 = *(uint64_t **)(a1 + 48);
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)v30 = 0u;
  for (i = 1065353216; v5; v5 = (uint64_t *)*v5)
  {
    __p = 0u;
    v35 = 0u;
    v36 = 1065353216;
    v32 = *((_DWORD *)v5 + 6);
    v33 = *((_BYTE *)v5 + 28);
    if (&v32 != (int *)(v5 + 3))
    {
      v36 = *((_DWORD *)v5 + 16);
      sub_20EC1D1DC(&__p, (uint64_t *)v5[6], 0);
    }
    v37 = v5 + 2;
    v6 = sub_20F3E4A48((uint64_t)v29, (unsigned int *)v5 + 4, (uint64_t)&unk_2102DB95C, &v37);
    v7 = v6;
    *((_DWORD *)v6 + 6) = v32;
    v6[28] = v33;
    if (*((_QWORD *)v6 + 7))
    {
      v8 = (_QWORD *)*((_QWORD *)v6 + 6);
      if (v8)
      {
        do
        {
          v9 = (_QWORD *)*v8;
          operator delete(v8);
          v8 = v9;
        }
        while (v9);
      }
      *((_QWORD *)v7 + 6) = 0;
      v10 = *((_QWORD *)v7 + 5);
      if (v10)
      {
        for (j = 0; j != v10; ++j)
          *(_QWORD *)(*((_QWORD *)v7 + 4) + 8 * j) = 0;
      }
      *((_QWORD *)v7 + 7) = 0;
    }
    v12 = __p;
    *(_QWORD *)&__p = 0;
    v13 = (void *)*((_QWORD *)v7 + 4);
    *((_QWORD *)v7 + 4) = v12;
    if (v13)
      operator delete(v13);
    v15 = *((_QWORD *)&__p + 1);
    v14 = (_QWORD *)v35;
    *((_QWORD *)v7 + 6) = v35;
    *((_QWORD *)v7 + 5) = v15;
    *((_QWORD *)&__p + 1) = 0;
    v16 = *((_QWORD *)&v35 + 1);
    *((_QWORD *)v7 + 7) = *((_QWORD *)&v35 + 1);
    *((_DWORD *)v7 + 16) = v36;
    if (v16)
    {
      v17 = v14[1];
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v17 >= v15)
          v17 %= v15;
      }
      else
      {
        v17 &= v15 - 1;
      }
      *(_QWORD *)(*((_QWORD *)v7 + 4) + 8 * v17) = v7 + 48;
      v35 = 0uLL;
    }
    else if (v14)
    {
      do
      {
        v18 = (_QWORD *)*v14;
        operator delete(v14);
        v14 = v18;
      }
      while (v18);
    }
    v19 = (void *)__p;
    *(_QWORD *)&__p = 0;
    if (v19)
      operator delete(v19);
  }
  sub_20EB0F138(v26, (uint64_t *)v29);
  v20 = v30[0];
  if (v30[0])
  {
    do
    {
      v22 = (_QWORD *)*v20;
      v23 = (_QWORD *)v20[6];
      if (v23)
      {
        do
        {
          v24 = (_QWORD *)*v23;
          operator delete(v23);
          v23 = v24;
        }
        while (v24);
      }
      v25 = (void *)v20[4];
      v20[4] = 0;
      if (v25)
        operator delete(v25);
      operator delete(v20);
      v20 = v22;
    }
    while (v22);
  }
  v21 = v29[0];
  v29[0] = 0;
  if (v21)
    operator delete(v21);
  *(_BYTE *)(a2 + 80) = *(_BYTE *)(a1 + 72);
  if (v27 != (_QWORD *)(a1 + 80))
  {
    *(_DWORD *)(a2 + 120) = *(_DWORD *)(a1 + 112);
    sub_20EC1D1DC(v27, *(uint64_t **)(a1 + 96), 0);
  }
  if (v28 != (_QWORD *)(a1 + 120))
  {
    *(_DWORD *)(a2 + 160) = *(_DWORD *)(a1 + 152);
    sub_20EC1D1DC(v28, *(uint64_t **)(a1 + 136), 0);
  }
}

void sub_20F3E4A0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E91E748(v1);
  _Unwind_Resume(a1);
}

void sub_20F3E4A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20F3E307C((uint64_t)va1);
  sub_20E969C90((uint64_t)va);
  sub_20E91E748(v5);
  _Unwind_Resume(a1);
}

char *sub_20F3E4A48(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x48uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 16) = 1065353216;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v7 = v4;
  }
  else
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_36:
        sub_20E8D2B3C(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v25)
  {
    *(_QWORD *)v11 = *v25;
LABEL_59:
    *v25 = v11;
    goto LABEL_60;
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v24 + 8 * v7) = v14;
  if (*(_QWORD *)v11)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_20F3E4D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E96A09C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20F3E4D6C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x48uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 16) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v24)
  {
    *(_QWORD *)v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v6) = v13;
  if (*(_QWORD *)v10)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20F3E5068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E96A09C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3E507C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v2 = a2;
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 336);
  sub_20F3E37AC(a1 + 16, (__int128 ***)(a2 + 744));
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v2 + 168);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v2 + 176);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(v2 + 152);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(v2 + 96);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(v2 + 104);
  v4 = *(_DWORD *)(v2 + 3696);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(v2 + 3688);
  *(_DWORD *)(a1 + 216) = v4;
  v5 = *(_BYTE *)(v2 + 184);
  v2 += 184;
  *(_BYTE *)(a1 + 224) = v5;
  v6 = *(_OWORD *)(v2 + 8);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(v2 + 24);
  *(_OWORD *)(a1 + 232) = v6;
  v8 = *(_OWORD *)(v2 + 64);
  v7 = *(_OWORD *)(v2 + 80);
  v9 = *(_OWORD *)(v2 + 48);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 288) = v8;
  *(_OWORD *)(a1 + 304) = v7;
  *(_OWORD *)(a1 + 272) = v9;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(v2 + 32);
  v10 = *(_OWORD *)(v2 + 104);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(v2 + 120);
  *(_OWORD *)(a1 + 328) = v10;
  return a1;
}

double sub_20F3E51F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  double result;
  _BYTE v25[31];

  *(_QWORD *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 169) = 0u;
  *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 264) = unk_2103B3050;
  *(_OWORD *)(a2 + 248) = xmmword_2103B3040;
  *(_OWORD *)(a2 + 232) = *(_OWORD *)algn_2103B3030;
  *(_OWORD *)(a2 + 216) = xmmword_2103B3020;
  *(_BYTE *)(a2 + 320) = 0;
  *(_WORD *)(a2 + 328) = 0;
  *(_BYTE *)(a2 + 330) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_BYTE *)(a2 + 312) = 0;
  v4 = (_OWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 360) = 0;
  *v4 = 0u;
  *(_WORD *)(a2 + 368) = 0;
  v4[2] = 0u;
  v4[3] = 0u;
  *(_QWORD *)(a2 + 408) = 0;
  *(_DWORD *)(a2 + 416) = 1065353216;
  *(_BYTE *)(a2 + 424) = 0;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_DWORD *)(a2 + 464) = 1065353216;
  v4[8] = 0u;
  v4[9] = 0u;
  *(_DWORD *)(a2 + 504) = 1065353216;
  *(_BYTE *)(a2 + 512) = 0;
  *(_BYTE *)(a2 + 520) = 0;
  *(_BYTE *)(a2 + 592) = 0;
  *(_BYTE *)(a2 + 600) = 0;
  *(_BYTE *)(a2 + 672) = 0;
  *(_BYTE *)(a2 + 680) = 0;
  *(_BYTE *)(a2 + 728) = 0;
  *(_DWORD *)(a2 + 736) = 0;
  *(_WORD *)(a2 + 740) = 0;
  v5 = (void **)(a2 + 744);
  *(_BYTE *)(a2 + 2744) = 0;
  *(_BYTE *)(a2 + 2752) = 0;
  *(_BYTE *)(a2 + 3648) = 0;
  *(_BYTE *)(a2 + 3656) = 0;
  *(_BYTE *)(a2 + 3672) = 0;
  *(_WORD *)(a2 + 3680) = 0;
  *(_BYTE *)(a2 + 768) = 0;
  *(_QWORD *)(a2 + 760) = 0;
  *(_OWORD *)(a2 + 744) = 0u;
  *(_QWORD *)(a2 + 3696) = -1;
  *(_QWORD *)(a2 + 3688) = -1;
  *(_OWORD *)(a2 + 3704) = 0u;
  *(_OWORD *)(a2 + 3720) = 0u;
  *(_DWORD *)(a2 + 3736) = 1065353216;
  *(_DWORD *)(a2 + 3744) = 0;
  *(_BYTE *)(a2 + 3748) = 1;
  *(_QWORD *)(a2 + 3752) = 0xBFF0000000000000;
  *(_BYTE *)(a2 + 3760) = 0;
  *(_BYTE *)(a2 + 3764) = 0;
  *(_BYTE *)(a2 + 3768) = 0;
  *(_BYTE *)(a2 + 3772) = 0;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 336) = *(_BYTE *)(a1 + 8);
  sub_20F3E3950((char ****)(a1 + 16), v25);
  v6 = *(_QWORD *)(a2 + 744);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 752);
    v8 = *v5;
    if (v7 != v6)
    {
      v9 = *(_QWORD *)(a2 + 752);
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v7 - 16) = v10;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = *v5;
    }
    *(_QWORD *)(a2 + 752) = v6;
    operator delete(v8);
    *v5 = 0;
    *(_QWORD *)(a2 + 752) = 0;
    *(_QWORD *)(a2 + 760) = 0;
  }
  *(_OWORD *)v5 = *(_OWORD *)v25;
  *(_QWORD *)(a2 + 760) = *(_QWORD *)&v25[16];
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 152);
  v15 = *(_QWORD *)(a1 + 176);
  v16 = *(_QWORD *)(a1 + 200);
  v17 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 32) = v17;
  v18 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 64) = v18;
  *(_QWORD *)(a2 + 80) = v14;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 104) = v16;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 128) = v13;
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(a2 + 152) = v15;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 176) = v12;
  v19 = *(_DWORD *)(a1 + 216);
  *(_QWORD *)(a2 + 3688) = *(_QWORD *)(a1 + 208);
  *(_DWORD *)(a2 + 3696) = v19;
  v21 = *(_BYTE *)(a1 + 224);
  v20 = a1 + 224;
  *(_OWORD *)&v25[7] = *(_OWORD *)(v20 + 8);
  *(_QWORD *)&v25[23] = *(_QWORD *)(v20 + 24);
  v22 = *(_OWORD *)(v20 + 80);
  *(_OWORD *)(a2 + 248) = *(_OWORD *)(v20 + 64);
  *(_OWORD *)(a2 + 264) = v22;
  *(_QWORD *)(a2 + 280) = *(_QWORD *)(v20 + 96);
  v23 = *(_OWORD *)(v20 + 48);
  *(_OWORD *)(a2 + 216) = *(_OWORD *)(v20 + 32);
  *(_OWORD *)(a2 + 232) = v23;
  *(_QWORD *)(a2 + 304) = *(_QWORD *)(v20 + 120);
  *(_OWORD *)(a2 + 288) = *(_OWORD *)(v20 + 104);
  *(_BYTE *)(a2 + 184) = v21;
  *(_OWORD *)(a2 + 185) = *(_OWORD *)v25;
  result = *(double *)&v25[15];
  *(_OWORD *)(a2 + 200) = *(_OWORD *)&v25[15];
  *(_BYTE *)(a2 + 312) = 0;
  *(_BYTE *)(a2 + 320) = 0;
  *(_WORD *)(a2 + 328) = 0;
  *(_BYTE *)(a2 + 330) = 0;
  return result;
}

void sub_20F3E54B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E91EA40(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20F3E54C4(_DWORD *a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t *v37;
  int64_t v38;
  unint64_t v39;
  _DWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _DWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _DWORD *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  int64_t v74;
  char *v75;
  char *v76;
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _DWORD *v95;
  _OWORD __dst[18];
  _BYTE v97[132];
  uint64_t v98;

  v2 = a1;
  v98 = *MEMORY[0x24BDAC8D0];
  *a1 = *(_DWORD *)a2;
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(uint64_t **)(a2 + 16);
  memset(v97, 0, 24);
  v5 = (char *)v4 - (char *)v3;
  v95 = v2;
  if (v4 != v3)
  {
    v6 = 0xF0F0F0F0F0F0F0F1 * (v5 >> 3);
    if (v6 > 0x1E1E1E1E1E1E1E1)
      sub_20EABADD4();
    v7 = (char *)operator new(v5);
    v8 = &v7[136 * v6];
    *(_QWORD *)&v97[8] = v7;
    v9 = v7;
    while (1)
    {
      while (1)
      {
        v16 = *v3;
        __dst[4] = *(_OWORD *)(v3 + 9);
        __dst[5] = *(_OWORD *)(v3 + 11);
        __dst[6] = *(_OWORD *)(v3 + 13);
        __dst[7] = *(_OWORD *)(v3 + 15);
        __dst[0] = *(_OWORD *)(v3 + 1);
        __dst[1] = *(_OWORD *)(v3 + 3);
        __dst[2] = *(_OWORD *)(v3 + 5);
        __dst[3] = *(_OWORD *)(v3 + 7);
        if (v7 >= v8)
          break;
        *(_QWORD *)v7 = v16;
        v10 = __dst[0];
        v11 = __dst[1];
        v12 = __dst[2];
        *(_OWORD *)(v7 + 56) = __dst[3];
        *(_OWORD *)(v7 + 40) = v12;
        *(_OWORD *)(v7 + 24) = v11;
        *(_OWORD *)(v7 + 8) = v10;
        v13 = __dst[4];
        v14 = __dst[5];
        v15 = __dst[6];
        *(_OWORD *)(v7 + 120) = __dst[7];
        *(_OWORD *)(v7 + 104) = v15;
        *(_OWORD *)(v7 + 88) = v14;
        *(_OWORD *)(v7 + 72) = v13;
        v7 += 136;
        v3 += 17;
        if (v3 == v4)
          goto LABEL_25;
      }
      v17 = 0xF0F0F0F0F0F0F0F1 * ((v7 - v9) >> 3) + 1;
      if (v17 > 0x1E1E1E1E1E1E1E1)
      {
        *(_QWORD *)&v97[8] = v7;
        *(_QWORD *)&v97[16] = v8;
        *(_QWORD *)v97 = v9;
        sub_20EABADD4();
      }
      if (0xE1E1E1E1E1E1E1E2 * ((v8 - v9) >> 3) > v17)
        v17 = 0xE1E1E1E1E1E1E1E2 * ((v8 - v9) >> 3);
      if (0xF0F0F0F0F0F0F0F1 * ((v8 - v9) >> 3) >= 0xF0F0F0F0F0F0F0)
        v18 = 0x1E1E1E1E1E1E1E1;
      else
        v18 = v17;
      if (v18)
      {
        if (v18 > 0x1E1E1E1E1E1E1E1)
        {
          *(_QWORD *)&v97[8] = v7;
          *(_QWORD *)&v97[16] = v8;
          *(_QWORD *)v97 = v9;
          sub_20E877A38();
        }
        v19 = (char *)operator new(136 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = __dst[5];
      v21 = &v19[8 * ((v7 - v9) >> 3)];
      *(_OWORD *)(v21 + 72) = __dst[4];
      *(_OWORD *)(v21 + 88) = v20;
      v22 = __dst[7];
      *(_OWORD *)(v21 + 104) = __dst[6];
      *(_OWORD *)(v21 + 120) = v22;
      v23 = __dst[1];
      *(_OWORD *)(v21 + 8) = __dst[0];
      *(_OWORD *)(v21 + 24) = v23;
      v24 = __dst[3];
      *(_OWORD *)(v21 + 40) = __dst[2];
      *(_QWORD *)v21 = v16;
      *(_OWORD *)(v21 + 56) = v24;
      if (v7 == v9)
      {
        v26 = &v19[8 * ((v7 - v9) >> 3)];
        v8 = &v19[136 * v18];
        v7 = v21 + 136;
        if (!v9)
          goto LABEL_21;
      }
      else
      {
        v25 = &v19[8 * ((v7 - v9) >> 3)];
        do
        {
          v26 = v25 - 136;
          *(_OWORD *)(v25 - 136) = *(_OWORD *)(v7 - 136);
          v27 = *(_OWORD *)(v7 - 120);
          v28 = *(_OWORD *)(v7 - 104);
          v29 = *(_OWORD *)(v7 - 88);
          *(_OWORD *)(v25 - 72) = *(_OWORD *)(v7 - 72);
          *(_OWORD *)(v25 - 88) = v29;
          *(_OWORD *)(v25 - 104) = v28;
          *(_OWORD *)(v25 - 120) = v27;
          v30 = *(_OWORD *)(v7 - 56);
          v31 = *(_OWORD *)(v7 - 40);
          v32 = *(_OWORD *)(v7 - 24);
          *((_QWORD *)v25 - 1) = *((_QWORD *)v7 - 1);
          *(_OWORD *)(v25 - 24) = v32;
          *(_OWORD *)(v25 - 40) = v31;
          *(_OWORD *)(v25 - 56) = v30;
          v7 -= 136;
          v25 -= 136;
        }
        while (v7 != v9);
        v8 = &v19[136 * v18];
        v7 = v21 + 136;
        if (!v9)
          goto LABEL_21;
      }
      operator delete(v9);
LABEL_21:
      v9 = v26;
      v3 += 17;
      if (v3 == v4)
      {
LABEL_25:
        *(_QWORD *)&v97[8] = v7;
        v33 = a2;
        v2 = v95;
        *((_QWORD *)v95 + 1) = v9;
        *((_QWORD *)v95 + 2) = v7;
        *((_QWORD *)v95 + 3) = v8;
        if (*(_BYTE *)(a2 + 144))
          goto LABEL_26;
LABEL_50:
        *((_BYTE *)v2 + 32) = 0;
        *((_BYTE *)v2 + 120) = 0;
        v36 = *(uint64_t **)(v33 + 296);
        v37 = *(uint64_t **)(v33 + 304);
        memset(v97, 0, 24);
        v38 = (char *)v37 - (char *)v36;
        if (v37 == v36)
          goto LABEL_51;
LABEL_27:
        v39 = 0x8E38E38E38E38E39 * (v38 >> 4);
        if (v39 > 0x1C71C71C71C71C7)
          sub_20EABADD4();
        v40 = operator new(v38);
        *(_QWORD *)v97 = v40;
        *(_QWORD *)&v97[8] = v40;
        *(_QWORD *)&v97[16] = &v40[36 * v39];
        while (2)
        {
          while (1)
          {
            v47 = *v36;
            v48 = *((_DWORD *)v36 + 2);
            v49 = *((_OWORD *)v36 + 6);
            __dst[4] = *((_OWORD *)v36 + 5);
            __dst[5] = v49;
            v50 = *((_OWORD *)v36 + 8);
            __dst[6] = *((_OWORD *)v36 + 7);
            __dst[7] = v50;
            v51 = *((_OWORD *)v36 + 2);
            __dst[0] = *((_OWORD *)v36 + 1);
            __dst[1] = v51;
            v52 = *((_OWORD *)v36 + 4);
            __dst[2] = *((_OWORD *)v36 + 3);
            __dst[3] = v52;
            if ((unint64_t)v40 >= *(_QWORD *)&v97[16])
              break;
            *(_QWORD *)v40 = v47;
            v40[2] = v48;
            v42 = __dst[6];
            v41 = __dst[7];
            v43 = __dst[5];
            *((_OWORD *)v40 + 5) = __dst[4];
            *((_OWORD *)v40 + 6) = v43;
            *((_OWORD *)v40 + 7) = v42;
            *((_OWORD *)v40 + 8) = v41;
            v45 = __dst[2];
            v44 = __dst[3];
            v46 = __dst[1];
            *((_OWORD *)v40 + 1) = __dst[0];
            *((_OWORD *)v40 + 2) = v46;
            *((_OWORD *)v40 + 3) = v45;
            *((_OWORD *)v40 + 4) = v44;
            v40 += 36;
            *(_QWORD *)&v97[8] = v40;
            v36 += 18;
            if (v36 == v37)
              goto LABEL_48;
          }
          v53 = *(_DWORD **)v97;
          v54 = 0x8E38E38E38E38E39 * (((uint64_t)v40 - *(_QWORD *)v97) >> 4);
          v55 = v54 + 1;
          if (v54 + 1 > 0x1C71C71C71C71C7)
            sub_20EABADD4();
          if (0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v97[16] - *(_QWORD *)v97) >> 4) > v55)
            v55 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v97[16] - *(_QWORD *)v97) >> 4);
          if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v97[16] - *(_QWORD *)v97) >> 4) >= 0xE38E38E38E38E3)
            v56 = 0x1C71C71C71C71C7;
          else
            v56 = v55;
          if (v56)
          {
            if (v56 > 0x1C71C71C71C71C7)
              sub_20E877A38();
            v57 = (char *)operator new(144 * v56);
          }
          else
          {
            v57 = 0;
          }
          v58 = &v57[144 * v54];
          *(_QWORD *)v58 = v47;
          *((_DWORD *)v58 + 2) = v48;
          v59 = __dst[5];
          *((_OWORD *)v58 + 5) = __dst[4];
          *((_OWORD *)v58 + 6) = v59;
          v60 = __dst[7];
          *((_OWORD *)v58 + 7) = __dst[6];
          *((_OWORD *)v58 + 8) = v60;
          v61 = __dst[1];
          *((_OWORD *)v58 + 1) = __dst[0];
          *((_OWORD *)v58 + 2) = v61;
          v62 = __dst[3];
          v63 = v58 + 144;
          *((_OWORD *)v58 + 3) = __dst[2];
          *((_OWORD *)v58 + 4) = v62;
          if (v40 == v53)
          {
            *(_QWORD *)v97 = &v57[144 * v54];
            *(_QWORD *)&v97[8] = v58 + 144;
            v53 = v40;
            *(_QWORD *)&v97[16] = &v57[144 * v56];
          }
          else
          {
            do
            {
              *((_OWORD *)v58 - 9) = *((_OWORD *)v40 - 9);
              v64 = *((_OWORD *)v40 - 8);
              v65 = *((_OWORD *)v40 - 7);
              v66 = *((_OWORD *)v40 - 5);
              *((_OWORD *)v58 - 6) = *((_OWORD *)v40 - 6);
              *((_OWORD *)v58 - 5) = v66;
              *((_OWORD *)v58 - 8) = v64;
              *((_OWORD *)v58 - 7) = v65;
              v67 = *((_OWORD *)v40 - 4);
              v68 = *((_OWORD *)v40 - 3);
              v69 = *((_OWORD *)v40 - 1);
              *((_OWORD *)v58 - 2) = *((_OWORD *)v40 - 2);
              *((_OWORD *)v58 - 1) = v69;
              *((_OWORD *)v58 - 4) = v67;
              *((_OWORD *)v58 - 3) = v68;
              v58 -= 144;
              v40 -= 36;
            }
            while (v40 != v53);
            *(_QWORD *)v97 = v58;
            *(_QWORD *)&v97[8] = v63;
            *(_QWORD *)&v97[16] = &v57[144 * v56];
            if (!v53)
            {
LABEL_47:
              v40 = v63;
              *(_QWORD *)&v97[8] = v63;
              v36 += 18;
              if (v36 == v37)
              {
LABEL_48:
                v70 = *(_QWORD *)v97;
                v71 = *(_QWORD *)&v97[16];
                v33 = a2;
                v2 = v95;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        operator delete(v53);
        goto LABEL_47;
      }
    }
  }
  v33 = a2;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  if (!*(_BYTE *)(a2 + 144))
    goto LABEL_50;
LABEL_26:
  sub_20F3E7624((uint64_t)__dst, v33 + 56);
  v34 = __dst[1];
  *((_OWORD *)v2 + 2) = __dst[0];
  *((_OWORD *)v2 + 3) = v34;
  v35 = __dst[3];
  *((_OWORD *)v2 + 4) = __dst[2];
  *((_OWORD *)v2 + 5) = v35;
  *((_OWORD *)v2 + 6) = __dst[4];
  *((_QWORD *)v2 + 14) = *(_QWORD *)&__dst[5];
  *((_BYTE *)v2 + 120) = 1;
  v36 = *(uint64_t **)(v33 + 296);
  v37 = *(uint64_t **)(v33 + 304);
  memset(v97, 0, 24);
  v38 = (char *)v37 - (char *)v36;
  if (v37 != v36)
    goto LABEL_27;
LABEL_51:
  v71 = 0;
  v40 = 0;
  v70 = 0;
LABEL_52:
  *((_QWORD *)v2 + 16) = v70;
  *((_QWORD *)v2 + 17) = v40;
  *((_QWORD *)v2 + 19) = 0;
  *((_QWORD *)v2 + 20) = 0;
  *((_QWORD *)v2 + 18) = v71;
  *((_QWORD *)v2 + 21) = 0;
  v73 = *(_BYTE **)(v33 + 320);
  v72 = *(_BYTE **)(v33 + 328);
  v74 = v72 - v73;
  if (v72 != v73)
  {
    if (v74 < 0)
      sub_20E92CED8();
    v75 = (char *)operator new(v72 - v73);
    *((_QWORD *)v2 + 19) = v75;
    *((_QWORD *)v2 + 20) = v75;
    v76 = &v75[8 * (v74 >> 3)];
    *((_QWORD *)v2 + 21) = v76;
    memcpy(v75, v73, v74);
    *((_QWORD *)v2 + 20) = v76;
  }
  *((_BYTE *)v2 + 176) = 0;
  v77 = *(_BYTE *)(v33 + 904);
  if (v77)
  {
    v78 = *(_OWORD *)(v33 + 560);
    *(_OWORD *)&v97[68] = *(_OWORD *)(v33 + 544);
    *(_OWORD *)&v97[84] = v78;
    v79 = *(_OWORD *)(v33 + 592);
    *(_OWORD *)&v97[100] = *(_OWORD *)(v33 + 576);
    *(_OWORD *)&v97[116] = v79;
    v80 = *(_OWORD *)(v33 + 496);
    *(_OWORD *)&v97[4] = *(_OWORD *)(v33 + 480);
    *(_OWORD *)&v97[20] = v80;
    v81 = *(_OWORD *)(v33 + 528);
    *(_OWORD *)&v97[36] = *(_OWORD *)(v33 + 512);
    v82 = *(_QWORD *)(v33 + 432);
    v83 = *(_DWORD *)(v33 + 440);
    v84 = *(_DWORD *)(v33 + 448);
    v85 = *(_QWORD *)(v33 + 456);
    v86 = *(_DWORD *)(v33 + 464);
    *(_OWORD *)&v97[52] = v81;
    v87 = *(_DWORD *)(v33 + 472);
    memcpy(__dst, (const void *)(v33 + 608), sizeof(__dst));
    v88 = *(_DWORD *)(v33 + 896);
    *((_QWORD *)v95 + 23) = v82;
    v89 = *(_OWORD *)&v97[16];
    *(_OWORD *)(v95 + 57) = *(_OWORD *)v97;
    v90 = *(_OWORD *)&v97[80];
    *(_OWORD *)(v95 + 73) = *(_OWORD *)&v97[64];
    v91 = *(_OWORD *)&v97[32];
    *(_OWORD *)(v95 + 69) = *(_OWORD *)&v97[48];
    *(_OWORD *)(v95 + 65) = v91;
    *(_OWORD *)(v95 + 61) = v89;
    v92 = *(_OWORD *)&v97[96];
    *(_OWORD *)(v95 + 85) = *(_OWORD *)&v97[112];
    *(_OWORD *)(v95 + 81) = v92;
    v95[48] = v83;
    v95[50] = v84;
    *((_QWORD *)v95 + 26) = v85;
    v95[54] = v86;
    v95[56] = v87;
    v95[89] = *(_DWORD *)&v97[128];
    *(_OWORD *)(v95 + 77) = v90;
    memcpy(v95 + 90, __dst, 0x120uLL);
    v95[162] = v88;
    v2 = v95;
    v77 = 1;
  }
  else
  {
    *((_BYTE *)v2 + 184) = 0;
  }
  *((_BYTE *)v2 + 656) = v77;
  return v2;
}

void sub_20F3E5BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)(a10 + 8);
  if (v11)
  {
    *(_QWORD *)(a10 + 16) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F3E5CA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _OWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *i;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  int v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  uint64_t *v38;
  uint64_t *v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  _QWORD *result;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int v102;
  int v103;
  _QWORD *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;

  v3 = (_QWORD *)a2;
  *(_BYTE *)(a2 + 144) = 0;
  *(_BYTE *)(a2 + 360) = 0;
  *(_WORD *)(a2 + 368) = 0;
  *(_BYTE *)(a2 + 904) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 41) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_BYTE *)(a2 + 344) = 0;
  *(_OWORD *)(a2 + 152) = 0u;
  v4 = (_OWORD *)(a2 + 152);
  v4[7] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v3[47] = 0;
  v3[48] = 0;
  *((_DWORD *)v3 + 100) = 0;
  v3[49] = 0;
  v3[52] = 0;
  v3[53] = 0;
  v3[51] = 0;
  *((_BYTE *)v3 + 432) = 0;
  *(_DWORD *)v3 = *(_DWORD *)a1;
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  v121 = 0uLL;
  *(_QWORD *)&v122 = 0;
  v7 = (char *)v6 - (char *)v5;
  v104 = v3;
  if (v6 == v5)
  {
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = 0;
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_27;
  }
  else
  {
    v8 = 0xF0F0F0F0F0F0F0F1 * (v7 >> 3);
    if (v8 > 0x1E1E1E1E1E1E1E1)
      sub_20EABADD4();
    v9 = (char *)operator new(v7);
    v10 = &v9[136 * v8];
    *((_QWORD *)&v121 + 1) = v9;
    v11 = v9;
    do
    {
      while (1)
      {
        v12 = *v5;
        v13 = *(_OWORD *)(v5 + 15);
        v14 = *(_OWORD *)(v5 + 13);
        v15 = *(_OWORD *)(v5 + 11);
        v16 = *(_OWORD *)(v5 + 9);
        v17 = *(_OWORD *)(v5 + 7);
        v18 = *(_OWORD *)(v5 + 5);
        v19 = *(_OWORD *)(v5 + 3);
        v20 = *(_OWORD *)(v5 + 1);
        if (v9 >= v10)
          break;
        *(_QWORD *)v9 = v12;
        *(_OWORD *)(v9 + 8) = v20;
        *(_OWORD *)(v9 + 24) = v19;
        *(_OWORD *)(v9 + 40) = v18;
        *(_OWORD *)(v9 + 56) = v17;
        *(_OWORD *)(v9 + 72) = v16;
        *(_OWORD *)(v9 + 88) = v15;
        *(_OWORD *)(v9 + 104) = v14;
        *(_OWORD *)(v9 + 120) = v13;
        v9 += 136;
        v5 += 17;
        if (v5 == v6)
          goto LABEL_18;
      }
      v21 = 0xF0F0F0F0F0F0F0F1 * ((v9 - v11) >> 3) + 1;
      if (v21 > 0x1E1E1E1E1E1E1E1)
      {
        *((_QWORD *)&v121 + 1) = v9;
        *(_QWORD *)&v122 = v10;
        *(_QWORD *)&v121 = v11;
        sub_20EABADD4();
      }
      v105 = *(_OWORD *)(v5 + 1);
      v107 = *(_OWORD *)(v5 + 3);
      v109 = *(_OWORD *)(v5 + 5);
      v111 = *(_OWORD *)(v5 + 7);
      v113 = *(_OWORD *)(v5 + 9);
      v115 = *(_OWORD *)(v5 + 11);
      v117 = *(_OWORD *)(v5 + 13);
      v119 = *(_OWORD *)(v5 + 15);
      if (0xE1E1E1E1E1E1E1E2 * ((v10 - v11) >> 3) > v21)
        v21 = 0xE1E1E1E1E1E1E1E2 * ((v10 - v11) >> 3);
      if (0xF0F0F0F0F0F0F0F1 * ((v10 - v11) >> 3) >= 0xF0F0F0F0F0F0F0)
        v22 = 0x1E1E1E1E1E1E1E1;
      else
        v22 = v21;
      if (v22 > 0x1E1E1E1E1E1E1E1)
      {
        *((_QWORD *)&v121 + 1) = v9;
        *(_QWORD *)&v122 = v10;
        *(_QWORD *)&v121 = v11;
        sub_20E877A38();
      }
      v23 = (char *)operator new(136 * v22);
      v24 = &v23[8 * ((v9 - v11) >> 3)];
      *(_QWORD *)v24 = v12;
      *(_OWORD *)(v24 + 56) = v111;
      *(_OWORD *)(v24 + 40) = v109;
      *(_OWORD *)(v24 + 24) = v107;
      *(_OWORD *)(v24 + 8) = v105;
      *(_OWORD *)(v24 + 72) = v113;
      *(_OWORD *)(v24 + 88) = v115;
      *(_OWORD *)(v24 + 104) = v117;
      *(_OWORD *)(v24 + 120) = v119;
      for (i = v24; v9 != v11; *(_OWORD *)(i + 72) = v30)
      {
        v26 = *((_QWORD *)v9 - 17);
        v9 -= 136;
        *((_QWORD *)i - 17) = v26;
        i -= 136;
        v27 = *(_OWORD *)(v9 + 8);
        v28 = *(_OWORD *)(v9 + 24);
        v29 = *(_OWORD *)(v9 + 40);
        *(_OWORD *)(i + 56) = *(_OWORD *)(v9 + 56);
        *(_OWORD *)(i + 40) = v29;
        *(_OWORD *)(i + 24) = v28;
        *(_OWORD *)(i + 8) = v27;
        v30 = *(_OWORD *)(v9 + 72);
        v31 = *(_OWORD *)(v9 + 88);
        v32 = *(_OWORD *)(v9 + 104);
        *(_OWORD *)(i + 120) = *(_OWORD *)(v9 + 120);
        *(_OWORD *)(i + 104) = v32;
        *(_OWORD *)(i + 88) = v31;
      }
      v10 = &v23[136 * v22];
      v9 = v24 + 136;
      if (v11)
        operator delete(v11);
      v11 = i;
      v5 += 17;
    }
    while (v5 != v6);
LABEL_18:
    v3 = v104;
    v33 = (void *)v104[1];
    if (v33)
    {
      v104[2] = v33;
      operator delete(v33);
      v104[1] = 0;
      v104[2] = 0;
      v104[3] = 0;
    }
    v104[1] = v11;
    v104[2] = v9;
    v104[3] = v10;
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_27;
  }
  sub_20F3E78E8(a1 + 32, (uint64_t)&v121);
  v34 = *((unsigned __int8 *)v3 + 144);
  v35 = v122;
  *(_OWORD *)(v3 + 7) = v121;
  *(_OWORD *)(v3 + 9) = v35;
  v36 = v124;
  *(_OWORD *)(v3 + 11) = v123;
  *(_OWORD *)(v3 + 13) = v36;
  if (!v34)
  {
    *(_OWORD *)(v3 + 15) = v125;
    v3[17] = v126;
    *((_BYTE *)v3 + 144) = 1;
    v38 = *(uint64_t **)(a1 + 128);
    v39 = *(uint64_t **)(a1 + 136);
    v121 = 0uLL;
    *(_QWORD *)&v122 = 0;
    v40 = (char *)v39 - (char *)v38;
    if (v39 != v38)
      goto LABEL_28;
    goto LABEL_57;
  }
  v37 = (void *)v3[15];
  if (v37)
  {
    v3[16] = v37;
    operator delete(v37);
    v3[15] = 0;
    v3[16] = 0;
    v3[17] = 0;
  }
  *(_OWORD *)(v3 + 15) = v125;
  v3[17] = v126;
LABEL_27:
  v38 = *(uint64_t **)(a1 + 128);
  v39 = *(uint64_t **)(a1 + 136);
  v121 = 0uLL;
  *(_QWORD *)&v122 = 0;
  v40 = (char *)v39 - (char *)v38;
  if (v39 != v38)
  {
LABEL_28:
    v41 = 0x8E38E38E38E38E39 * (v40 >> 4);
    if (v41 > 0x1C71C71C71C71C7)
      sub_20EABADD4();
    v42 = (char *)operator new(v40);
    v43 = &v42[144 * v41];
    *((_QWORD *)&v121 + 1) = v42;
    v44 = v42;
    while (1)
    {
      while (1)
      {
        v45 = *v38;
        v46 = *((_DWORD *)v38 + 2);
        v48 = *((_OWORD *)v38 + 7);
        v47 = *((_OWORD *)v38 + 8);
        v50 = *((_OWORD *)v38 + 5);
        v49 = *((_OWORD *)v38 + 6);
        v52 = *((_OWORD *)v38 + 3);
        v51 = *((_OWORD *)v38 + 4);
        v54 = *((_OWORD *)v38 + 1);
        v53 = *((_OWORD *)v38 + 2);
        if (v42 >= v43)
          break;
        *(_QWORD *)v42 = v45;
        *((_DWORD *)v42 + 2) = v46;
        *((_OWORD *)v42 + 1) = v54;
        *((_OWORD *)v42 + 2) = v53;
        *((_OWORD *)v42 + 3) = v52;
        *((_OWORD *)v42 + 4) = v51;
        *((_OWORD *)v42 + 5) = v50;
        *((_OWORD *)v42 + 6) = v49;
        *((_OWORD *)v42 + 7) = v48;
        *((_OWORD *)v42 + 8) = v47;
        v42 += 144;
        v38 += 18;
        if (v38 == v39)
          goto LABEL_48;
      }
      v55 = 0x8E38E38E38E38E39 * ((v42 - v44) >> 4) + 1;
      if (v55 > 0x1C71C71C71C71C7)
      {
        *((_QWORD *)&v121 + 1) = v42;
        *(_QWORD *)&v122 = v43;
        *(_QWORD *)&v121 = v44;
        sub_20EABADD4();
      }
      v106 = *((_OWORD *)v38 + 1);
      v108 = *((_OWORD *)v38 + 2);
      v110 = *((_OWORD *)v38 + 3);
      v112 = *((_OWORD *)v38 + 4);
      v114 = *((_OWORD *)v38 + 5);
      v116 = *((_OWORD *)v38 + 6);
      v118 = *((_OWORD *)v38 + 7);
      v120 = *((_OWORD *)v38 + 8);
      if (0x1C71C71C71C71C72 * ((v43 - v44) >> 4) > v55)
        v55 = 0x1C71C71C71C71C72 * ((v43 - v44) >> 4);
      if (0x8E38E38E38E38E39 * ((v43 - v44) >> 4) >= 0xE38E38E38E38E3)
        v56 = 0x1C71C71C71C71C7;
      else
        v56 = v55;
      if (v56 > 0x1C71C71C71C71C7)
      {
        *((_QWORD *)&v121 + 1) = v42;
        *(_QWORD *)&v122 = v43;
        *(_QWORD *)&v121 = v44;
        sub_20E877A38();
      }
      v57 = (char *)operator new(144 * v56);
      v58 = &v57[16 * ((v42 - v44) >> 4)];
      *(_QWORD *)v58 = v45;
      *((_DWORD *)v58 + 2) = v46;
      *((_OWORD *)v58 + 3) = v110;
      *((_OWORD *)v58 + 4) = v112;
      *((_OWORD *)v58 + 1) = v106;
      *((_OWORD *)v58 + 2) = v108;
      *((_OWORD *)v58 + 5) = v114;
      *((_OWORD *)v58 + 6) = v116;
      *((_OWORD *)v58 + 7) = v118;
      *((_OWORD *)v58 + 8) = v120;
      if (v42 == v44)
      {
        v60 = &v57[16 * ((v42 - v44) >> 4)];
        v43 = &v57[144 * v56];
        v42 = v58 + 144;
        if (!v44)
          goto LABEL_44;
      }
      else
      {
        v59 = &v57[16 * ((v42 - v44) >> 4)];
        do
        {
          v60 = v59 - 144;
          *((_OWORD *)v59 - 9) = *((_OWORD *)v42 - 9);
          v61 = *((_OWORD *)v42 - 1);
          v63 = *((_OWORD *)v42 - 4);
          v62 = *((_OWORD *)v42 - 3);
          *((_OWORD *)v59 - 2) = *((_OWORD *)v42 - 2);
          *((_OWORD *)v59 - 1) = v61;
          *((_OWORD *)v59 - 4) = v63;
          *((_OWORD *)v59 - 3) = v62;
          v64 = *((_OWORD *)v42 - 8);
          v65 = *((_OWORD *)v42 - 7);
          v66 = *((_OWORD *)v42 - 5);
          *((_OWORD *)v59 - 6) = *((_OWORD *)v42 - 6);
          *((_OWORD *)v59 - 5) = v66;
          *((_OWORD *)v59 - 8) = v64;
          *((_OWORD *)v59 - 7) = v65;
          v42 -= 144;
          v59 -= 144;
        }
        while (v42 != v44);
        v43 = &v57[144 * v56];
        v42 = v58 + 144;
        if (!v44)
          goto LABEL_44;
      }
      operator delete(v44);
LABEL_44:
      v44 = v60;
      v38 += 18;
      if (v38 == v39)
      {
LABEL_48:
        *((_QWORD *)&v121 + 1) = v42;
        v3 = v104;
        v67 = (void *)v104[37];
        if (v67)
          goto LABEL_49;
        goto LABEL_50;
      }
    }
  }
LABEL_57:
  v43 = 0;
  v42 = 0;
  v44 = 0;
  v67 = (void *)v3[37];
  if (v67)
  {
LABEL_49:
    v3[38] = v67;
    operator delete(v67);
    v3[37] = 0;
    v3[38] = 0;
    v3[39] = 0;
  }
LABEL_50:
  v3[37] = v44;
  v3[38] = v42;
  v3[39] = v43;
  result = v3 + 40;
  if (v3 + 40 != (_QWORD *)(a1 + 152))
    result = sub_20E92CD94(result, *(char **)(a1 + 152), *(char **)(a1 + 160), (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3);
  if (*(_BYTE *)(a1 + 656))
  {
    v70 = *(_OWORD *)(a1 + 232);
    v69 = a1 + 232;
    v71 = v70;
    *(_QWORD *)&v70 = *(_QWORD *)(v69 - 48);
    v69 -= 48;
    v72 = *(unsigned int *)(v69 + 8);
    v73 = *(_DWORD *)(v69 + 16);
    v74 = *(_QWORD *)(v69 + 24);
    v75 = *(unsigned int *)(v69 + 32);
    v76 = *(_DWORD *)(v69 + 40);
    v77 = *(_OWORD *)(v69 + 64);
    v78 = *(_OWORD *)(v69 + 80);
    v79 = *(_OWORD *)(v69 + 96);
    v80 = *(_OWORD *)(v69 + 112);
    v81 = *(_OWORD *)(v69 + 128);
    v82 = *(_OWORD *)(v69 + 144);
    v83 = *(_OWORD *)(v69 + 160);
    v84 = *(_OWORD *)(v69 + 176);
    v85 = *(_OWORD *)(v69 + 192);
    v86 = *(_OWORD *)(v69 + 208);
    v87 = *(_OWORD *)(v69 + 224);
    v88 = *(_OWORD *)(v69 + 240);
    v89 = *(_OWORD *)(v69 + 256);
    v90 = *(_OWORD *)(v69 + 272);
    v91 = *(_OWORD *)(v69 + 288);
    v92 = *(_OWORD *)(v69 + 304);
    v93 = *(_OWORD *)(v69 + 320);
    v94 = *(_OWORD *)(v69 + 336);
    v95 = *(_OWORD *)(v69 + 352);
    v96 = *(_OWORD *)(v69 + 368);
    v97 = *(_OWORD *)(v69 + 384);
    v98 = *(_OWORD *)(v69 + 400);
    v100 = *(_OWORD *)(v69 + 416);
    v99 = *(_OWORD *)(v69 + 432);
    v101 = *(_OWORD *)(v69 + 448);
    v102 = *(_DWORD *)(v69 + 464);
    v103 = *((unsigned __int8 *)v3 + 904);
    v3[54] = v70;
    v3[55] = v72;
    *((_DWORD *)v3 + 112) = v73;
    v3[57] = v74;
    v3[58] = v75;
    *((_DWORD *)v3 + 118) = v76;
    *((_OWORD *)v3 + 36) = v82;
    *((_OWORD *)v3 + 37) = v83;
    *((_OWORD *)v3 + 34) = v80;
    *((_OWORD *)v3 + 35) = v81;
    *((_OWORD *)v3 + 32) = v78;
    *((_OWORD *)v3 + 33) = v79;
    *((_OWORD *)v3 + 30) = v71;
    *((_OWORD *)v3 + 31) = v77;
    *((_OWORD *)v3 + 54) = v99;
    *((_OWORD *)v3 + 55) = v101;
    *((_OWORD *)v3 + 52) = v98;
    *((_OWORD *)v3 + 53) = v100;
    *((_OWORD *)v3 + 50) = v96;
    *((_OWORD *)v3 + 51) = v97;
    *((_OWORD *)v3 + 48) = v94;
    *((_OWORD *)v3 + 49) = v95;
    *((_OWORD *)v3 + 46) = v92;
    *((_OWORD *)v3 + 47) = v93;
    *((_OWORD *)v3 + 44) = v90;
    *((_OWORD *)v3 + 45) = v91;
    *((_OWORD *)v3 + 42) = v88;
    *((_OWORD *)v3 + 43) = v89;
    *((_OWORD *)v3 + 40) = v86;
    *((_OWORD *)v3 + 41) = v87;
    *((_OWORD *)v3 + 38) = v84;
    *((_OWORD *)v3 + 39) = v85;
    *((_DWORD *)v3 + 224) = v102;
    *((_BYTE *)v3 + 900) = 0;
    if (!v103)
      *((_BYTE *)v3 + 904) = 1;
  }
  return result;
}

void sub_20F3E639C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_20E91E818(a10);
  _Unwind_Resume(a1);
}

void sub_20F3E63B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29)
{
  if (__p)
  {
    operator delete(__p);
    sub_20E91E818(a10);
    _Unwind_Resume(a1);
  }
  sub_20E91E818(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3E6438(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v14[2];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  sub_2102323F4((unsigned __int8 *)a2, v14);
  v4 = operator new(0x28uLL);
  *(_QWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = xmmword_2102E0950;
  v5 = v14[1];
  *v4 = v14[0];
  v4[1] = v5;
  *((_DWORD *)v4 + 8) = v15;
  *((_BYTE *)v4 + 36) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  v9 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 96) = v9;
  if (*(_BYTE *)(a2 + 128))
  {
    v10 = *(unsigned int *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = v10;
    *(_BYTE *)(a1 + 144) = 0;
    v11 = a1 + 144;
    *(_BYTE *)(a1 + 136) = 1;
    *(_BYTE *)(a1 + 168) = 0;
    if (!*(_BYTE *)(a2 + 408))
      return a1;
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    v11 = a1 + 144;
    *(_BYTE *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    if (!*(_BYTE *)(a2 + 408))
      return a1;
  }
  if (*(char *)(a2 + 407) < 0)
  {
    sub_20E860C04((_BYTE *)v11, *(void **)(a2 + 384), *(_QWORD *)(a2 + 392));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 384);
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + 400);
    *(_OWORD *)v11 = v12;
  }
  *(_BYTE *)(a1 + 168) = 1;
  return a1;
}

void sub_20F3E658C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 168) && *(char *)(v1 + 167) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double sub_20F3E65C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  *(_BYTE *)(a2 + 376) = 0;
  *(_BYTE *)(a2 + 384) = 0;
  *(_BYTE *)(a2 + 408) = 0;
  sub_210232668((unsigned __int8 *)a1, (uint64_t)&v9);
  if ((_BYTE)v10)
    *(_OWORD *)a2 = v9;
  v4 = *(_OWORD *)(a1 + 40);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 32) = v4;
  v6 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 88) = v6;
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a1 + 136))
  {
    v7 = *(unsigned int *)(a1 + 128);
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a2 + 120) = v7;
    *(_BYTE *)(a2 + 128) = 1;
  }
  if (*(_BYTE *)(a1 + 168))
  {
    if (*(char *)(a1 + 167) < 0)
    {
      sub_20E860C04(&v9, *(void **)(a1 + 144), *(_QWORD *)(a1 + 152));
    }
    else
    {
      v9 = *(_OWORD *)(a1 + 144);
      v10 = *(_QWORD *)(a1 + 160);
    }
    *(_QWORD *)&v6 = v9;
    *(_OWORD *)(a2 + 384) = v9;
    *(_QWORD *)(a2 + 400) = v10;
    *(_BYTE *)(a2 + 408) = 1;
  }
  return *(double *)&v6;
}

uint64_t sub_20F3E66E8(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *i;
  __int128 v7;
  _OWORD *v8;
  __int128 v9;
  _OWORD *v10;
  unint64_t v11;
  unsigned __int8 *j;
  unsigned __int8 *v13;
  __int128 v14;
  _OWORD *v15;
  __int128 v16;
  _OWORD *v17;
  __int128 v19;
  unint64_t v20;
  _BYTE __p[24];
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20F3E69A4((int64x2_t *)a1, a2);
  sub_20F3E69A4((int64x2_t *)(a1 + 24), a2 + 3);
  v4 = 0x4EC4EC4EC4EC4EC5 * ((a2[7] - a2[6]) >> 5);
  v20 = 0;
  v19 = 0uLL;
  sub_20E9099B8((uint64_t)&v19, v4);
  v5 = (unsigned __int8 *)a2[6];
  for (i = (unsigned __int8 *)a2[7]; v5 != i; v5 += 416)
  {
    sub_2102323F4(v5, &v22);
    v8 = operator new(0x28uLL);
    *(_QWORD *)__p = v8;
    *(_OWORD *)&__p[8] = xmmword_2102E0950;
    v9 = v23;
    *v8 = v22;
    v8[1] = v9;
    *((_DWORD *)v8 + 8) = v24;
    *((_BYTE *)v8 + 36) = 0;
    v10 = (_OWORD *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1) < v20)
    {
      v7 = *(_OWORD *)__p;
      *(_QWORD *)(*((_QWORD *)&v19 + 1) + 16) = *(_QWORD *)&__p[16];
      *v10 = v7;
      *((_QWORD *)&v19 + 1) = (char *)v10 + 24;
    }
    else
    {
      *((_QWORD *)&v19 + 1) = sub_20E8780F0((void **)&v19, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
  }
  *(_OWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 64) = v20;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[10] - a2[9]) >> 4);
  v20 = 0;
  v19 = 0uLL;
  sub_20E9099B8((uint64_t)&v19, v11);
  v13 = (unsigned __int8 *)a2[9];
  for (j = (unsigned __int8 *)a2[10]; v13 != j; v13 += 48)
  {
    sub_2102323F4(v13, &v22);
    v15 = operator new(0x28uLL);
    *(_QWORD *)__p = v15;
    *(_OWORD *)&__p[8] = xmmword_2102E0950;
    v16 = v23;
    *v15 = v22;
    v15[1] = v16;
    *((_DWORD *)v15 + 8) = v24;
    *((_BYTE *)v15 + 36) = 0;
    v17 = (_OWORD *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1) < v20)
    {
      v14 = *(_OWORD *)__p;
      *(_QWORD *)(*((_QWORD *)&v19 + 1) + 16) = *(_QWORD *)&__p[16];
      *v17 = v14;
      *((_QWORD *)&v19 + 1) = (char *)v17 + 24;
    }
    else
    {
      *((_QWORD *)&v19 + 1) = sub_20E8780F0((void **)&v19, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
  }
  *(_OWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 88) = v20;
  return a1;
}

void sub_20F3E6920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void **v19;
  void **v20;

  sub_20E89FB98(&a11);
  sub_20E89FB98(v19 + 6);
  sub_20EAB9FE4(v20);
  sub_20EAB9FE4(v19);
  _Unwind_Resume(a1);
}

void sub_20F3E69A4(int64x2_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void **v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void **v36;
  int64x2_t v37;
  int64x2_t v39;
  unint64_t v40;
  void *v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 __p;
  uint64_t v52;
  char v53;

  v2 = *a2;
  v3 = a2[1];
  v4 = v3 - *a2;
  if (v3 == *a2)
  {
    v6 = 0;
LABEL_45:
    v37 = vdupq_n_s64((unint64_t)v6);
    goto LABEL_46;
  }
  v5 = 0x4EC4EC4EC4EC4EC5 * (v4 >> 5);
  if (v5 > 0x1745D1745D1745DLL)
    sub_20EABADD4();
  v6 = operator new(0x2762762762762770 * (v4 >> 5));
  v4 = (uint64_t)v6 + 176 * v5;
  v39.i64[0] = (uint64_t)v6;
  v39.i64[1] = (uint64_t)v6;
  v40 = v4;
  if (v3 == v2)
    goto LABEL_45;
  do
  {
    sub_20F3E6438((uint64_t)v41, v2);
    v7 = (void **)v39.i64[1];
    if (v39.i64[1] >= v40)
    {
      v17 = 0x2E8BA2E8BA2E8BA3 * ((v39.i64[1] - v39.i64[0]) >> 4) + 1;
      if (v17 > 0x1745D1745D1745DLL)
        sub_20EABADD4();
      if (0x5D1745D1745D1746 * ((uint64_t)(v40 - v39.i64[0]) >> 4) > v17)
        v17 = 0x5D1745D1745D1746 * ((uint64_t)(v40 - v39.i64[0]) >> 4);
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v40 - v39.i64[0]) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
        v18 = 0x1745D1745D1745DLL;
      else
        v18 = v17;
      if (v18)
      {
        if (v18 > 0x1745D1745D1745DLL)
          sub_20E877A38();
        v19 = (char *)operator new(176 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[16 * ((v39.i64[1] - v39.i64[0]) >> 4)];
      *(_OWORD *)v20 = *(_OWORD *)v41;
      v21 = v48;
      *(_OWORD *)(v20 + 88) = v47;
      *(_OWORD *)(v20 + 104) = v21;
      *(_OWORD *)(v20 + 120) = v49;
      v22 = v44;
      *(_OWORD *)(v20 + 24) = v43;
      *(_OWORD *)(v20 + 40) = v22;
      v23 = v46;
      *(_OWORD *)(v20 + 56) = v45;
      *((_QWORD *)v20 + 2) = v42;
      v41[1] = 0;
      v42 = 0;
      v41[0] = 0;
      v20[136] = v50;
      *(_OWORD *)(v20 + 72) = v23;
      v20[144] = 0;
      v20[168] = 0;
      if (v53)
      {
        *((_OWORD *)v20 + 9) = __p;
        *((_QWORD *)v20 + 20) = v52;
        v52 = 0;
        __p = 0uLL;
        v20[168] = 1;
      }
      v24 = &v19[176 * v18];
      v16 = (uint64_t)(v20 + 176);
      if (v39.i64[1] == v39.i64[0])
      {
        v39.i64[0] = (uint64_t)&v19[16 * ((v39.i64[1] - v39.i64[0]) >> 4)];
        v40 = (unint64_t)v24;
      }
      else
      {
        v25 = 0;
        do
        {
          v26 = &v20[v25];
          v27 = v39.i64[1] + v25;
          v28 = *(_OWORD *)(v39.i64[1] + v25 - 176);
          *((_QWORD *)v26 - 20) = *(_QWORD *)(v39.i64[1] + v25 - 160);
          *((_OWORD *)v26 - 11) = v28;
          *(_QWORD *)(v27 - 168) = 0;
          *(_QWORD *)(v27 - 160) = 0;
          *(_QWORD *)(v27 - 176) = 0;
          v29 = *(_OWORD *)(v39.i64[1] + v25 - 152);
          v30 = *(_OWORD *)(v39.i64[1] + v25 - 136);
          v31 = *(_OWORD *)(v39.i64[1] + v25 - 120);
          *(_OWORD *)(v26 - 104) = *(_OWORD *)(v39.i64[1] + v25 - 104);
          *(_OWORD *)(v26 - 120) = v31;
          *(_OWORD *)(v26 - 136) = v30;
          *(_OWORD *)(v26 - 152) = v29;
          v32 = *(_OWORD *)(v39.i64[1] + v25 - 88);
          v33 = *(_OWORD *)(v39.i64[1] + v25 - 72);
          v34 = *(_OWORD *)(v39.i64[1] + v25 - 56);
          *(v26 - 40) = *(_BYTE *)(v39.i64[1] + v25 - 40);
          *(_OWORD *)(v26 - 56) = v34;
          *(_OWORD *)(v26 - 72) = v33;
          *(_OWORD *)(v26 - 88) = v32;
          v20[v25 - 32] = 0;
          *(v26 - 8) = 0;
          if (*(_BYTE *)(v39.i64[1] + v25 - 8))
          {
            v35 = *(_OWORD *)(v27 - 32);
            *(_QWORD *)&v20[v25 - 16] = *(_QWORD *)(v27 - 16);
            *(_OWORD *)&v20[v25 - 32] = v35;
            *(_QWORD *)(v27 - 24) = 0;
            *(_QWORD *)(v27 - 16) = 0;
            *(_QWORD *)(v27 - 32) = 0;
            *(v26 - 8) = 1;
          }
          v25 -= 176;
        }
        while (v39.i64[1] + v25 != v39.i64[0]);
        v36 = (void **)v39.i64[1];
        v7 = (void **)v39.i64[0];
        v39.i64[0] = (uint64_t)&v20[v25];
        v40 = (unint64_t)v24;
        while (v36 != v7)
        {
          if (*((_BYTE *)v36 - 8) && *((char *)v36 - 9) < 0)
            operator delete(*(v36 - 4));
          if (*((char *)v36 - 153) < 0)
            operator delete(*(v36 - 22));
          v36 -= 22;
        }
      }
      if (v7)
        operator delete(v7);
    }
    else
    {
      v8 = *(_OWORD *)v41;
      *(_QWORD *)(v39.i64[1] + 16) = v42;
      *(_OWORD *)v39.i64[1] = v8;
      v41[1] = 0;
      v42 = 0;
      v41[0] = 0;
      v9 = v45;
      v10 = v46;
      v11 = v44;
      *(_OWORD *)(v39.i64[1] + 24) = v43;
      *(_OWORD *)(v39.i64[1] + 72) = v10;
      *(_OWORD *)(v39.i64[1] + 56) = v9;
      *(_OWORD *)(v39.i64[1] + 40) = v11;
      v13 = v48;
      v12 = v49;
      v14 = v50;
      *(_OWORD *)(v39.i64[1] + 88) = v47;
      *(_BYTE *)(v39.i64[1] + 136) = v14;
      *(_OWORD *)(v39.i64[1] + 120) = v12;
      *(_OWORD *)(v39.i64[1] + 104) = v13;
      *(_BYTE *)(v39.i64[1] + 144) = 0;
      *(_BYTE *)(v39.i64[1] + 168) = 0;
      if (v53)
      {
        v15 = __p;
        *(_QWORD *)(v39.i64[1] + 160) = v52;
        *(_OWORD *)(v39.i64[1] + 144) = v15;
        v52 = 0;
        __p = 0uLL;
        *(_BYTE *)(v39.i64[1] + 168) = 1;
      }
      v16 = v39.i64[1] + 176;
    }
    v39.i64[1] = v16;
    if (v53 && SHIBYTE(v52) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v42) < 0)
      operator delete(v41[0]);
    v2 += 416;
  }
  while (v2 != v3);
  v37 = v39;
  v4 = v40;
LABEL_46:
  *a1 = v37;
  a1[1].i64[0] = v4;
}

void sub_20F3E6DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **__p, void **a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  void **v42;
  void **v43;

  if (__p)
  {
    v42 = a12;
    v43 = __p;
    if (a12 != __p)
    {
      do
      {
        while (1)
        {
          if (*((_BYTE *)v42 - 8))
          {
            if (*((char *)v42 - 9) < 0)
              operator delete(*(v42 - 4));
          }
          if (*((char *)v42 - 153) < 0)
            break;
          v42 -= 22;
          if (v42 == __p)
            goto LABEL_10;
        }
        operator delete(*(v42 - 22));
        v42 -= 22;
      }
      while (v42 != __p);
LABEL_10:
      v43 = __p;
    }
    operator delete(v43);
  }
  _Unwind_Resume(exception_object);
}

double sub_20F3E6ED4@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *j;
  uint64_t v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *k;
  unsigned __int8 *v29;
  uint64_t v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  double result;
  __int128 v36;
  unint64_t v37;
  _OWORD __src[24];
  __int128 __p;
  uint64_t v40;
  char v41;
  __int128 v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)&v36 = 0;
  *(_OWORD *)a2 = 0u;
  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  *((_QWORD *)&v36 + 1) = 0;
  v37 = 0;
  sub_20EE1D52C((uint64_t)&v36, v3);
  v5 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      sub_20F3E65C0(v5, (uint64_t)__src);
      v6 = *((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1) >= v37)
      {
        v8 = sub_20EE1E1C8((char **)&v36, (uint64_t)__src);
      }
      else
      {
        memcpy(*((void **)&v36 + 1), __src, 0x179uLL);
        *(_BYTE *)(v6 + 384) = 0;
        *(_BYTE *)(v6 + 408) = 0;
        if (v41)
        {
          v7 = __p;
          *(_QWORD *)(v6 + 400) = v40;
          *(_OWORD *)(v6 + 384) = v7;
          v40 = 0;
          __p = 0uLL;
          *(_BYTE *)(v6 + 408) = 1;
        }
        v8 = (char *)(v6 + 416);
      }
      *((_QWORD *)&v36 + 1) = v8;
      if (v41 && SHIBYTE(v40) < 0)
        operator delete((void *)__p);
      v5 += 176;
    }
    while (v5 != v4);
  }
  v9 = v37;
  v10 = a1[3];
  v11 = a1[4];
  *(_OWORD *)a2 = v36;
  *(_QWORD *)(a2 + 16) = v9;
  v36 = 0uLL;
  v37 = 0;
  sub_20EE1D52C((uint64_t)&v36, 0x2E8BA2E8BA2E8BA3 * ((v11 - v10) >> 4));
  v13 = a1[3];
  for (i = a1[4]; v13 != i; v13 += 176)
  {
    sub_20F3E65C0(v13, (uint64_t)__src);
    v14 = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1) >= v37)
    {
      v16 = sub_20EE1E1C8((char **)&v36, (uint64_t)__src);
    }
    else
    {
      memcpy(*((void **)&v36 + 1), __src, 0x179uLL);
      *(_BYTE *)(v14 + 384) = 0;
      *(_BYTE *)(v14 + 408) = 0;
      if (v41)
      {
        v15 = __p;
        *(_QWORD *)(v14 + 400) = v40;
        *(_OWORD *)(v14 + 384) = v15;
        v40 = 0;
        __p = 0uLL;
        *(_BYTE *)(v14 + 408) = 1;
      }
      v16 = (char *)(v14 + 416);
    }
    *((_QWORD *)&v36 + 1) = v16;
    if (v41 && SHIBYTE(v40) < 0)
      operator delete((void *)__p);
  }
  v17 = v37;
  v18 = a1[6];
  v19 = a1[7];
  *(_OWORD *)(a2 + 24) = v36;
  *(_QWORD *)(a2 + 40) = v17;
  v36 = 0uLL;
  v37 = 0;
  sub_20EE1D52C((uint64_t)&v36, 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 3));
  v20 = (unsigned __int8 *)a1[6];
  for (j = (unsigned __int8 *)a1[7]; v20 != j; v20 += 24)
  {
    sub_210232668(v20, (uint64_t)&v42);
    if (!v43
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Metadata/src/IO/VIOPoseMetadataAnchorSetSample.cpp", 50, (uint64_t)"maybe_uuid", 10, (uint64_t)"Invalid UUID when loading AnchorSetSample from disk", 51, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    __src[2] = 0uLL;
    __src[4] = 0uLL;
    __src[6] = 0uLL;
    __src[0] = v42;
    __src[1] = 0x3FF0000000000000uLL;
    __src[3] = 0x3FF0000000000000uLL;
    __src[5] = 0x3FF0000000000000uLL;
    *(_QWORD *)&__src[7] = -1;
    DWORD2(__src[7]) = 0;
    LOBYTE(__src[8]) = 1;
    BYTE8(__src[8]) = 0;
    BYTE8(__src[23]) = 0;
    LOBYTE(__p) = 0;
    v41 = 0;
    v22 = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1) >= v37)
    {
      v24 = sub_20EE1E1C8((char **)&v36, (uint64_t)__src);
    }
    else
    {
      memcpy(*((void **)&v36 + 1), __src, 0x179uLL);
      *(_BYTE *)(v22 + 384) = 0;
      *(_BYTE *)(v22 + 408) = 0;
      if (v41)
      {
        v23 = __p;
        *(_QWORD *)(v22 + 400) = v40;
        *(_OWORD *)(v22 + 384) = v23;
        v40 = 0;
        __p = 0uLL;
        *(_BYTE *)(v22 + 408) = 1;
      }
      v24 = (char *)(v22 + 416);
    }
    *((_QWORD *)&v36 + 1) = v24;
    if (v41 && SHIBYTE(v40) < 0)
      operator delete((void *)__p);
  }
  v25 = v37;
  v26 = a1[9];
  v27 = a1[10];
  *(_OWORD *)(a2 + 48) = v36;
  *(_QWORD *)(a2 + 64) = v25;
  v36 = 0uLL;
  v37 = 0;
  sub_20F3E74E0((uint64_t)&v36, 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3));
  v29 = (unsigned __int8 *)a1[9];
  for (k = (unsigned __int8 *)a1[10]; v29 != k; v29 += 24)
  {
    sub_210232668(v29, (uint64_t)&v42);
    if (!v43
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Metadata/src/IO/VIOPoseMetadataAnchorSetSample.cpp", 56, (uint64_t)"maybe_uuid", 10, (uint64_t)"Invalid UUID when loading AnchorSetSample from disk", 51, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    __src[0] = v42;
    LOBYTE(__src[1]) = 0;
    BYTE8(__src[2]) = 0;
    v30 = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1) >= v37)
    {
      v32 = sub_20EE1D140((char **)&v36, (uint64_t)__src);
    }
    else
    {
      **((_OWORD **)&v36 + 1) = __src[0];
      *(_BYTE *)(v30 + 16) = 0;
      *(_BYTE *)(v30 + 40) = 0;
      if (BYTE8(__src[2]))
      {
        v31 = __src[1];
        *(_QWORD *)(v30 + 32) = *(_QWORD *)&__src[2];
        *(_OWORD *)(v30 + 16) = v31;
        memset(&__src[1], 0, 24);
        *(_BYTE *)(v30 + 40) = 1;
      }
      v32 = (char *)(v30 + 48);
    }
    *((_QWORD *)&v36 + 1) = v32;
    if (BYTE8(__src[2]) && SBYTE7(__src[2]) < 0)
      operator delete(*(void **)&__src[1]);
  }
  v33 = v37;
  result = *(double *)&v36;
  *(_OWORD *)(a2 + 72) = v36;
  *(_QWORD *)(a2 + 88) = v33;
  return result;
}

void sub_20F3E742C(_Unwind_Exception *a1, uint64_t a2, void **a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20EAA9C38((void **)va);
  sub_20E91E8B8(a3);
  _Unwind_Resume(a1);
}

void sub_20F3E74E0(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void **v11;
  __int128 v12;
  void **v13;

  v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      sub_20EAA9DC0();
    v4 = *(void ***)(a1 + 8);
    v5 = 48 * a2;
    v6 = (char *)operator new(48 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9 * 8];
        v11 = &v4[v9];
        *((_OWORD *)v10 - 3) = *(_OWORD *)&v4[v9 - 6];
        v8[v9 * 8 - 32] = 0;
        *(v10 - 8) = 0;
        if (LOBYTE(v4[v9 - 1]))
        {
          v12 = *((_OWORD *)v11 - 2);
          *(_QWORD *)&v8[v9 * 8 - 16] = *(v11 - 2);
          *(_OWORD *)&v8[v9 * 8 - 32] = v12;
          *(v11 - 3) = 0;
          *(v11 - 2) = 0;
          *(v11 - 4) = 0;
          *(v10 - 8) = 1;
        }
        v9 -= 6;
      }
      while (&v4[v9] != v2);
      v2 = *(void ***)a1;
      v13 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9 * 8];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v13 != v2)
      {
        if (*((_BYTE *)v13 - 8))
        {
          if (*((char *)v13 - 9) < 0)
            operator delete(*(v13 - 4));
        }
        v13 -= 6;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_20F3E7624(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  uint64_t result;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  int v31;
  char *v32;
  char *v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v2 = *(uint64_t **)(a2 + 64);
  v3 = *(uint64_t **)(a2 + 72);
  v4 = (char *)v3 - (char *)v2;
  if (v3 == v2)
  {
    v25 = 0;
    v6 = 0;
    v24 = 0;
    goto LABEL_26;
  }
  v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
  if (v5 > 0x666666666666666)
    sub_20EABADD4();
  v6 = (char *)operator new(v4);
  v32 = v6;
  v33 = &v6[40 * v5];
  v28 = v3;
  do
  {
    while (1)
    {
      v7 = *v2;
      v8 = *((_DWORD *)v2 + 2);
      v9 = *((_DWORD *)v2 + 3);
      v11 = *((_DWORD *)v2 + 4);
      v10 = *((_DWORD *)v2 + 5);
      v12 = *((_DWORD *)v2 + 6);
      v13 = *((_DWORD *)v2 + 7);
      v14 = *((_BYTE *)v2 + 32);
      if (v6 >= v33)
        break;
      *(_QWORD *)v6 = v7;
      *((_DWORD *)v6 + 2) = v8;
      *((_DWORD *)v6 + 3) = v9;
      *((_DWORD *)v6 + 4) = v11;
      *((_DWORD *)v6 + 5) = v10;
      *((_DWORD *)v6 + 6) = v12;
      *((_DWORD *)v6 + 7) = v13;
      v6[32] = v14;
      v6 += 40;
      v2 += 5;
      if (v2 == v3)
        goto LABEL_24;
    }
    v15 = v32;
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v32) >> 3) + 1;
    if (v16 > 0x666666666666666)
      sub_20EABADD4();
    if (0x999999999999999ALL * ((v33 - v32) >> 3) > v16)
      v16 = 0x999999999999999ALL * ((v33 - v32) >> 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((v33 - v32) >> 3) >= 0x333333333333333)
      v17 = 0x666666666666666;
    else
      v17 = v16;
    if (v17)
    {
      v29 = *((_DWORD *)v2 + 2);
      v30 = *v2;
      v31 = *((_DWORD *)v2 + 3);
      if (v17 > 0x666666666666666)
        sub_20E877A38();
      v18 = (char *)operator new(40 * v17);
      v9 = v31;
      v7 = v30;
      v8 = v29;
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[8 * ((v6 - v32) >> 3)];
    *(_QWORD *)v19 = v7;
    *((_DWORD *)v19 + 2) = v8;
    *((_DWORD *)v19 + 3) = v9;
    v20 = &v18[40 * v17];
    *((_DWORD *)v19 + 4) = v11;
    *((_DWORD *)v19 + 5) = v10;
    *((_DWORD *)v19 + 6) = v12;
    *((_DWORD *)v19 + 7) = v13;
    v19[32] = v14;
    v21 = v19 + 40;
    if (v6 == v32)
    {
      v32 = &v18[8 * ((v6 - v32) >> 3)];
      v15 = v6;
      v33 = v20;
      v3 = v28;
LABEL_22:
      operator delete(v15);
      goto LABEL_23;
    }
    v3 = v28;
    do
    {
      v22 = *(_OWORD *)(v6 - 40);
      v23 = *(_OWORD *)(v6 - 24);
      *(v19 - 8) = *(v6 - 8);
      *(_OWORD *)(v19 - 24) = v23;
      *(_OWORD *)(v19 - 40) = v22;
      v19 -= 40;
      v6 -= 40;
    }
    while (v6 != v32);
    v32 = v19;
    v33 = v20;
    if (v15)
      goto LABEL_22;
LABEL_23:
    v6 = v21;
    v2 += 5;
  }
  while (v2 != v3);
LABEL_24:
  v24 = v32;
  v25 = v33;
LABEL_26:
  result = a1;
  *(_QWORD *)(a1 + 64) = v24;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v25;
  return result;
}

void sub_20F3E78AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int64_t sub_20F3E78E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  int64_t result;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char **v15;

  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  v3 = *(uint64_t **)(a1 + 64);
  v4 = *(uint64_t **)(a1 + 72);
  v9 = 0uLL;
  v10 = 0;
  result = (char *)v4 - (char *)v3;
  if (v4 == v3)
  {
    v8 = 0;
    v7 = 0uLL;
  }
  else
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * (result >> 3);
    if (v6 >= 0x666666666666667)
      sub_20EAA7068();
    *(_QWORD *)&v9 = operator new(result);
    *((_QWORD *)&v9 + 1) = v9;
    v10 = v9 + 40 * v6;
    v15 = (char **)&v9;
    do
    {
      v11 = *v3;
      v12 = *(_OWORD *)(v3 + 1);
      v13 = v3[3];
      v14 = *((_BYTE *)v3 + 32);
      result = (int64_t)sub_20F3E7A18(&v15, (__int128 *)&v11);
      v3 += 5;
    }
    while (v3 != v4);
    v7 = v9;
    v8 = v10;
  }
  *(_OWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

void sub_20F3E79F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char ***sub_20F3E7A18(char ***a1, __int128 *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v10 = *v4;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *v4) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666)
      sub_20EAA7068();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v10) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x333333333333333)
      v14 = 0x666666666666666;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 > 0x666666666666666)
        sub_20E877A38();
      v15 = (char *)operator new(40 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[40 * v11];
    v17 = a2[1];
    *(_OWORD *)v16 = *a2;
    *((_OWORD *)v16 + 1) = v17;
    *((_QWORD *)v16 + 4) = *((_QWORD *)a2 + 4);
    v9 = v16 + 40;
    if (v6 != v10)
    {
      do
      {
        v18 = *(_OWORD *)(v6 - 40);
        v19 = *(_OWORD *)(v6 - 24);
        *(v16 - 8) = *(v6 - 8);
        *(_OWORD *)(v16 - 24) = v19;
        *(_OWORD *)(v16 - 40) = v18;
        v16 -= 40;
        v6 -= 40;
      }
      while (v6 != v10);
      v6 = *v4;
    }
    *v4 = v16;
    v4[1] = v9;
    v4[2] = &v15[40 * v14];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *((_QWORD *)v6 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    v9 = v6 + 40;
  }
  v4[1] = v9;
  return a1;
}

double sub_20F3E7B6C@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, float64x2_t *a4@<X8>)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  double v34;
  float64_t v35;
  double v36;
  double v37;
  double v38;
  double result;

  v4 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 744) + 24 * a2) + 216 * a3);
  v5 = v4[1];
  v6 = v4[2];
  v7 = v4[3];
  v9 = v4[4];
  v8 = v4[5];
  v11 = v4[6];
  v10 = v4[7];
  v12 = v4[8];
  v13 = v4[9];
  v14 = v4[10];
  v15 = v4[11];
  v16 = -(*v4 * v13 + v7 * v14 + v11 * v15);
  v17 = -(v5 * v13 + v9 * v14 + v10 * v15);
  v18 = -(v6 * v13 + v8 * v14 + v12 * v15);
  v19 = *(double *)(a1 + 176);
  _Q25.f64[0] = *(float64_t *)(a1 + 32);
  v21 = *(float64x2_t *)(a1 + 16);
  v22 = *(double *)(a1 + 56);
  v23 = *(float64x2_t *)(a1 + 40);
  _Q19 = *(float64x2_t *)(a1 + 64);
  v25 = *v4 * _Q25.f64[0];
  v26 = v5 * _Q25.f64[0];
  v27 = v6 * _Q25.f64[0];
  _Q25.f64[1] = v22;
  v28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v21, (int64x2_t)v23), *(double *)(a1 + 160)), (float64x2_t)vzip2q_s64((int64x2_t)v21, (int64x2_t)v23), *(float64x2_t *)(a1 + 160), 1), _Q25, v19);
  _D24 = *(_QWORD *)(a1 + 168);
  __asm { FMLA            D25, D24, V19.D[1] }
  v34 = *(double *)(a1 + 80);
  v35 = _Q25.f64[0] + v34 * v19;
  _Q25.f64[0] = v7 * v22 + v25 + v11 * v34;
  v36 = v16 - *v4 * v28.f64[0] - v11 * v35 - vmuld_lane_f64(v7, v28, 1);
  v37 = v9 * v22 + v26 + v10 * v34;
  v38 = v8 * v22 + v27 + v12 * v34;
  *a4 = vaddq_f64(vmulq_n_f64(_Q19, v11), vaddq_f64(vmulq_n_f64(v21, *v4), vmulq_n_f64(v23, v7)));
  a4[2] = vaddq_f64(vmulq_n_f64(_Q19, v10), vaddq_f64(vmulq_n_f64(v21, v5), vmulq_n_f64(v23, v9)));
  a4[4] = vaddq_f64(vmulq_n_f64(v23, v8), vaddq_f64(vmulq_n_f64(v21, v6), vmulq_n_f64(_Q19, v12)));
  a4[1].f64[0] = _Q25.f64[0];
  a4[1].f64[1] = v36;
  a4[3].f64[0] = v37;
  a4[3].f64[1] = v17 - v5 * v28.f64[0] - v10 * v35 - vmuld_lane_f64(v9, v28, 1);
  result = v18 - v12 * v35 - v6 * v28.f64[0] - vmuld_lane_f64(v8, v28, 1);
  a4[5].f64[0] = v38;
  a4[5].f64[1] = result;
  return result;
}

uint64_t sub_20F3E7CE4@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t result;

  kdebug_trace();
  v10 = *(_QWORD *)(a1 + 80);
  *(double *)a4 = a5;
  *(_QWORD *)(a4 + 8) = v10;
  v11 = *(_DWORD *)(a1 + 196);
  *(_DWORD *)(a4 + 16) = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(a4 + 20) = v11;
  *(_BYTE *)(a4 + 24) = v11 > a2;
  *(_BYTE *)(a4 + 25) = *(_BYTE *)(a1 + 170);
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 56);
  sub_20E969B50(a4 + 40, a1 + 232);
  *(_BYTE *)(a4 + 80) = a3;
  sub_20E96A108(a4 + 88, a1 + 336);
  result = sub_20E96A108(a4 + 128, a1 + 376);
  *(_BYTE *)(a4 + 168) = 0;
  return result;
}

void sub_20F3E7D98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20E8C25A8(v2);
  sub_20E969C90(v1);
  _Unwind_Resume(a1);
}

void sub_20F3E7DB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E969C90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3E7DCC(uint64_t result, int **a2, float64x2_t a3)
{
  _QWORD *v3;
  int *v4;
  int *v5;
  const char *v7;
  unsigned __int8 *v8;
  float64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  float64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  float64x2_t *v27;
  const char *v28;
  unsigned __int8 v29;
  unsigned __int8 *v30;
  unsigned __int8 v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  int8x16_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int8x16_t v40;
  float64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  int *v46;
  float64x2_t v47;
  _QWORD *v48;
  unsigned int v49;
  unint64_t v50;
  int *v51;

  v3 = (_QWORD *)result;
  v5 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3) != ((char *)v4 - (char *)*a2) >> 5)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Metadata/src/OdometryMetadataUtil.cpp", 79, (uint64_t)"camera_set_models.size() == camera_models_metadata.camera_set_models.size()", 75, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((result & 1) != 0)
LABEL_35:
      abort();
    v5 = *a2;
    v4 = a2[1];
  }
  if (v5 != v4)
  {
    v7 = "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)";
    v8 = (unsigned __int8 *)&qword_254A6DE78;
    v9 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
    v46 = v4;
    v47 = v9;
    v48 = v3;
    while (1)
    {
      v10 = *((_QWORD *)v5 + 2) - *((_QWORD *)v5 + 1);
      if (v10)
        break;
LABEL_6:
      v5 += 8;
      if (v5 == v46)
        return result;
    }
    v11 = 0;
    v12 = 0;
    v13 = 0x4EC4EC4EC4EC4EC5 * (v10 >> 7);
    v14 = *v5;
    v50 = v13;
    v51 = v5;
    v49 = *v5;
    while (1)
    {
      v16 = (_QWORD *)(*(_QWORD *)(*v3 + 24 * v14) + 216 * v11);
      v17 = *((_QWORD *)v5 + 1) + 1664 * v11;
      *(_QWORD *)v17 = *v16;
      v18 = v16[1];
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v16[2];
      *(_QWORD *)(v17 + 16) = v19;
      v20 = v16[3];
      *(_QWORD *)(v17 + 24) = v20;
      *(_QWORD *)(v17 + 32) = v16[4];
      v21 = v16[5];
      *(_QWORD *)(v17 + 40) = v21;
      v22 = v16[6];
      *(_QWORD *)(v17 + 48) = v22;
      v23 = v16[7];
      *(_QWORD *)(v17 + 56) = v23;
      v24 = v16[8];
      *(_QWORD *)(v17 + 16) = v22;
      *(_QWORD *)(v17 + 24) = v18;
      *(_QWORD *)(v17 + 8) = v20;
      *(_QWORD *)(v17 + 40) = v23;
      *(_QWORD *)(v17 + 48) = v19;
      *(_QWORD *)(v17 + 56) = v21;
      *(_QWORD *)(v17 + 64) = v24;
      *(_QWORD *)(v17 + 72) = v16[9];
      *(_QWORD *)(v17 + 80) = v16[10];
      *(_QWORD *)(v17 + 88) = v16[11];
      *(_QWORD *)(v17 + 1560) = v16[12];
      if (*(_BYTE *)(v17 + 1536))
        v25 = v17 + 96;
      else
        v25 = 0;
      v26 = *(_DWORD *)(v25 + 992);
      if (v26 == -1)
      {
        v28 = v7;
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)v7, 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v29 = atomic_load(v8);
        if ((v29 & 1) == 0 && __cxa_guard_acquire((__guard *)v8))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release((__guard *)v8);
        }
        v30 = v8;
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v43 = qword_254A6DE40;
          v42 = qword_254A6DE48;
          while (v43 != v42)
          {
            v45 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v43;
            v44 = *(_QWORD *)(v43 + 8);
            v43 += 16;
            v45(v44, v28, 37, "", 0);
          }
        }
        v8 = v30;
        v31 = atomic_load(v30);
        if ((v31 & 1) == 0 && __cxa_guard_acquire((__guard *)v30))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release((__guard *)v30);
        }
        v3 = v48;
        if (!byte_254A6DE68)
          goto LABEL_35;
        v7 = v28;
        result = qword_254A6DE58(unk_254A6DE60, v28, 37, "", 0);
        v26 = *(_DWORD *)(v25 + 992);
        v9 = v47;
        v13 = v50;
        v5 = v51;
        v14 = v49;
        v27 = (float64x2_t *)(v16 + 14);
        if (v26 <= 7)
        {
LABEL_23:
          if (!v26)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
        }
      }
      else
      {
        v27 = (float64x2_t *)(v16 + 14);
        if (v26 <= 7)
          goto LABEL_23;
      }
      a3.f64[0] = v27[4].f64[0];
      v33 = v27[2];
      v32 = v27[3];
      v35 = *(int8x16_t *)v27;
      v34 = v27[1];
      v36 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
      v37 = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
      v38 = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
      v39 = vextq_s8(v35, v35, 8uLL).u64[0];
      v40 = (int8x16_t)vabdq_f64(*v27, *(float64x2_t *)v25);
      v41 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v9, (float64x2_t)vextq_s8(v40, v40, 8uLL)), (int32x4_t)vcgeq_f64(v9, vabdq_f64(v34, *(float64x2_t *)(v25 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v9, vabdq_f64(v33, *(float64x2_t *)(v25 + 32))), (int32x4_t)vcgeq_f64(v9, vabdq_f64(v32, *(float64x2_t *)(v25 + 48))))));
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v41)) & 1) != 0
        || (v41.f64[0] = *(float64_t *)(v25 + 64), vabdq_f64(a3, v41).f64[0] > 1.0e-10))
      {
        v35.i64[1] = v39;
        *(_QWORD *)&v34.f64[1] = v38;
        *(int8x16_t *)v25 = v35;
        *(float64x2_t *)(v25 + 16) = v34;
        *(_QWORD *)&v33.f64[1] = v37;
        *(float64_t *)(v25 + 64) = a3.f64[0];
        *(_QWORD *)&v32.f64[1] = v36;
        *(float64x2_t *)(v25 + 32) = v33;
        *(float64x2_t *)(v25 + 48) = v32;
        v15 = v27->f64[0] * v27[2].f64[0];
        *(double *)(v25 + 72) = 1.0 / v27->f64[0];
        *(double *)(v25 + 80) = -v27->f64[1] / v15;
        *(double *)(v25 + 88) = -(v27[2].f64[0] * v27[1].f64[0] - v27->f64[1] * v27[2].f64[1]) / v15;
        *(_QWORD *)(v25 + 96) = 0;
        *(double *)(v25 + 104) = 1.0 / v27[2].f64[0];
        *(double *)(v25 + 112) = -v27[2].f64[1] / v27[2].f64[0];
        *(_QWORD *)(v25 + 120) = 0;
        *(_QWORD *)(v25 + 128) = 0;
        a3.f64[1] = NAN;
        *(_OWORD *)(v25 + 136) = xmmword_2102E3C70;
        *(_QWORD *)(v25 + 152) = 0x7FF8000000000000;
        *(_BYTE *)(v25 + 160) = 0;
      }
      v11 = ++v12;
      if (v13 <= v12)
        goto LABEL_6;
    }
  }
  return result;
}

uint64_t sub_20F3E82C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  double *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  unint64_t v51;
  unint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int8x16_t v59;
  unint64_t v60;
  uint64_t v61;
  int8x16_t v62;
  unint64_t v63;
  int8x16_t v64;
  unint64_t v65;
  int8x16_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  double *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;

  v6 = *(double **)a3;
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = a2 + 5144;
  if (v6)
  {
    if (*v6 >= *(double *)(a2 + 40))
      v11 = *v6;
    else
      v11 = -1.0;
    v12 = a1 + 640;
    if (!v7)
      goto LABEL_15;
  }
  else
  {
    v11 = *(double *)(a2 + 32);
    v12 = a1 + 640;
    if (!v7)
      goto LABEL_15;
  }
  v13 = (unint64_t *)&v7->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v15 = *(_QWORD *)(a2 + 32);
  *(double *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v15;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 169) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v16 = *(_OWORD *)(a2 + 5032);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 5048);
  *(_OWORD *)(a1 + 408) = v16;
  v17 = *(_OWORD *)(a2 + 5056);
  v18 = *(_OWORD *)(a2 + 5088);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 5072);
  *(_OWORD *)(a1 + 464) = v18;
  *(_OWORD *)(a1 + 432) = v17;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 600) = *(_BYTE *)(a2 + 368);
  *(_WORD *)(a1 + 601) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 603) = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 604) = *(_BYTE *)(a2 + 3);
  v19 = *(_OWORD *)(v10 + 16);
  *(_QWORD *)&v18 = *(_QWORD *)(a2 + 5200);
  v20 = *(_QWORD *)(v10 + 48);
  v21 = *(_OWORD *)(v10 + 32);
  v22 = *(_OWORD *)(v10 + 64);
  v23 = *(_QWORD *)(v10 + 80);
  v24 = *(_OWORD *)(v10 + 88);
  v25 = *(_QWORD *)(v10 + 104);
  v26 = *(_OWORD *)(v10 + 112);
  v27 = *(_QWORD *)(v10 + 128);
  v28 = *(_OWORD *)(v10 + 136);
  v29 = *(_QWORD *)(v10 + 152);
  v30 = *(_OWORD *)(v10 + 160);
  v31 = *(_OWORD *)(v10 + 176);
  v32 = *(_OWORD *)(v10 + 192);
  v33 = *(_OWORD *)(v10 + 208);
  v34 = *(_QWORD *)(v10 + 224);
  v35 = *(_OWORD *)(v10 + 232);
  v36 = *(_OWORD *)(v10 + 248);
  v37 = *(_OWORD *)(v10 + 264);
  v38 = *(_OWORD *)(v10 + 280);
  v39 = *(_QWORD *)(v10 + 296);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 624) = v19;
  *(_OWORD *)v12 = v21;
  *(_QWORD *)(v12 + 16) = v20;
  *(_QWORD *)(a1 + 664) = v18;
  *(_QWORD *)(v12 + 48) = v23;
  *(_OWORD *)(v12 + 32) = v22;
  *(_QWORD *)(v12 + 72) = v25;
  *(_OWORD *)(v12 + 56) = v24;
  *(_QWORD *)(v12 + 96) = v27;
  *(_OWORD *)(v12 + 80) = v26;
  *(_QWORD *)(v12 + 120) = v29;
  *(_OWORD *)(v12 + 104) = v28;
  *(_QWORD *)(v12 + 192) = v34;
  *(_OWORD *)(v12 + 160) = v32;
  *(_OWORD *)(v12 + 176) = v33;
  *(_OWORD *)(v12 + 128) = v30;
  *(_OWORD *)(v12 + 144) = v31;
  *(_QWORD *)(v12 + 264) = v39;
  *(_OWORD *)(v12 + 248) = v38;
  *(_OWORD *)(v12 + 232) = v37;
  *(_OWORD *)(v12 + 216) = v36;
  *(_OWORD *)(v12 + 200) = v35;
  *(_BYTE *)(a1 + 912) = 1;
  v40 = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 5448);
  *(_BYTE *)(a1 + 928) = v40;
  v41 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 952) = *(_QWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 936) = v41;
  v42 = *(_OWORD *)(a2 + 280);
  v43 = *(_OWORD *)(a2 + 296);
  v44 = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 992) = v42;
  *(_OWORD *)(a1 + 1008) = v43;
  *(_OWORD *)(a1 + 976) = v44;
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 248);
  v45 = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 1032) = v45;
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 1072) = *(_BYTE *)(a2 + 2);
  v46 = *(double **)a3;
  if (*(_QWORD *)a3)
  {
    v47 = *(int8x16_t *)(v46 + 1);
    v48 = *(int8x16_t *)(v46 + 3);
    v49 = *(int8x16_t *)(v46 + 7);
    v50 = *(int8x16_t *)(v46 + 10);
    v51 = vextq_s8(v50, v50, 8uLL).u64[0];
    v52 = vextq_s8(v49, v49, 8uLL).u64[0];
    v53 = *(int8x16_t *)(v46 + 5);
    v54.i64[0] = (uint64_t)v46[9];
    v55 = vextq_s8(v53, v53, 8uLL).u64[0];
    v56 = vextq_s8(v48, v48, 8uLL).u64[0];
    v57 = vextq_s8(v47, v47, 8uLL).u64[0];
    v58 = 0;
    v59.i64[0] = 0;
    v60 = 0;
    v61 = *((_QWORD *)v46 + 12);
    v62.i64[0] = 0;
    v63 = 0;
    v64.i64[0] = 0;
    v65 = 0;
    v66.i64[0] = 0;
    v67 = 0;
  }
  else
  {
    v66 = *(int8x16_t *)(a2 + 176);
    v50 = *(int8x16_t *)(a2 + 192);
    v62 = *(int8x16_t *)(a2 + 144);
    v64 = *(int8x16_t *)(a2 + 160);
    v54 = *(int8x16_t *)(a2 + 112);
    v59 = *(int8x16_t *)(a2 + 128);
    v53 = *(int8x16_t *)(a2 + 80);
    v49 = *(int8x16_t *)(a2 + 96);
    v47 = *(int8x16_t *)(a2 + 48);
    v48 = *(int8x16_t *)(a2 + 64);
    v51 = vextq_s8(v50, v50, 8uLL).u64[0];
    v67 = vextq_s8(v66, v66, 8uLL).u64[0];
    v65 = vextq_s8(v64, v64, 8uLL).u64[0];
    v63 = vextq_s8(v62, v62, 8uLL).u64[0];
    v60 = vextq_s8(v59, v59, 8uLL).u64[0];
    v58 = vextq_s8(v54, v54, 8uLL).u64[0];
    v52 = vextq_s8(v49, v49, 8uLL).u64[0];
    v55 = vextq_s8(v53, v53, 8uLL).u64[0];
    v56 = vextq_s8(v48, v48, 8uLL).u64[0];
    v57 = vextq_s8(v47, v47, 8uLL).u64[0];
    v61 = *(_QWORD *)(a2 + 208);
  }
  v47.i64[1] = v57;
  v48.i64[1] = v56;
  *(int8x16_t *)(a1 + 16) = v47;
  *(int8x16_t *)(a1 + 32) = v48;
  v53.i64[1] = v55;
  v49.i64[1] = v52;
  *(int8x16_t *)(a1 + 48) = v53;
  *(int8x16_t *)(a1 + 64) = v49;
  v54.i64[1] = v58;
  v59.i64[1] = v60;
  *(int8x16_t *)(a1 + 80) = v54;
  *(int8x16_t *)(a1 + 96) = v59;
  v62.i64[1] = v63;
  v64.i64[1] = v65;
  *(int8x16_t *)(a1 + 112) = v62;
  *(int8x16_t *)(a1 + 128) = v64;
  v66.i64[1] = v67;
  v50.i64[1] = v51;
  *(_QWORD *)(a1 + 176) = v61;
  *(int8x16_t *)(a1 + 144) = v66;
  *(int8x16_t *)(a1 + 160) = v50;
  v68 = *(uint64_t **)(a2 + 776);
  if (v68 != *(uint64_t **)(a2 + 784))
  {
    v69 = *v68;
    if (*v68 != v68[1])
    {
      v70 = *(_OWORD *)(v69 + 16);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)v69;
      *(_OWORD *)(a1 + 200) = v70;
      v71 = *(_OWORD *)(v69 + 32);
      v72 = *(_OWORD *)(v69 + 48);
      v73 = *(_OWORD *)(v69 + 80);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(v69 + 64);
      *(_OWORD *)(a1 + 264) = v73;
      *(_OWORD *)(a1 + 216) = v71;
      *(_OWORD *)(a1 + 232) = v72;
      v74 = *(_OWORD *)(v69 + 96);
      v75 = *(_OWORD *)(v69 + 112);
      v76 = *(_OWORD *)(v69 + 144);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(v69 + 128);
      *(_OWORD *)(a1 + 328) = v76;
      *(_OWORD *)(a1 + 280) = v74;
      *(_OWORD *)(a1 + 296) = v75;
      v77 = *(_OWORD *)(v69 + 160);
      v78 = *(_OWORD *)(v69 + 176);
      v79 = *(_OWORD *)(v69 + 192);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(v69 + 208);
      *(_OWORD *)(a1 + 360) = v78;
      *(_OWORD *)(a1 + 376) = v79;
      *(_OWORD *)(a1 + 344) = v77;
      *(_BYTE *)(a1 + 400) = 1;
    }
  }
  v80 = *(double **)a3;
  if (*(_QWORD *)a3)
  {
    v81 = *(_OWORD *)v80;
    v82 = *((_OWORD *)v80 + 2);
    *(_OWORD *)(a1 + 496) = *((_OWORD *)v80 + 1);
    *(_OWORD *)(a1 + 512) = v82;
    *(_OWORD *)(a1 + 480) = v81;
    v83 = *((_OWORD *)v80 + 3);
    v84 = *((_OWORD *)v80 + 4);
    v85 = *((_OWORD *)v80 + 5);
    *(double *)(a1 + 576) = v80[12];
    *(_OWORD *)(a1 + 544) = v84;
    *(_OWORD *)(a1 + 560) = v85;
    *(_OWORD *)(a1 + 528) = v83;
    *(_BYTE *)(a1 + 584) = 1;
  }
  return a1;
}

uint64_t sub_20F3E86B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  __int128 v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v79;
  __int128 v80;
  __int16 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _QWORD v93[7];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  __int16 v103;
  char v104;
  char v105;
  __int128 v106;
  uint64_t v107;
  __int16 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  int v112;
  char v113;
  __int128 v114;
  __int128 v115;
  int v116;
  __int128 v117;
  __int128 v118;
  int v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;
  char v126;
  int v127;
  __int16 v128;
  __int128 v129;
  char *v130;
  char v131;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  __int16 v137;
  uint64_t v138;
  int v139;
  __int128 v140;
  __int128 v141;
  int v142;
  int v143;
  char v144;
  unint64_t v145;
  char v146;
  char v147;
  char v148;
  char v149;
  char v150;
  char v151;
  void *v152[2];
  __int128 v153;
  char v154;
  __int128 v155;
  __int128 v156;
  int v157;
  uint64_t v158;
  char v159;
  int v160;
  uint64_t v161;
  char v162;
  int v163;
  uint64_t v164;
  char v165;
  int v166;
  uint64_t v167;
  char v168;
  int v169;
  uint64_t v170;
  char v171;
  int v172;
  uint64_t v173;
  char v174;
  int v175;
  uint64_t v176;
  char v177;
  int v178;
  uint64_t v179;
  char v180;
  __int16 v181;
  __int16 v182;
  char v183;
  _BYTE v184[152];
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  char v197;
  char v198;
  __int16 v199;
  __int128 v200;
  uint64_t v201;
  int v202;
  __int128 v203;
  uint64_t v204;
  char v205;
  char v206;
  __int128 v207;
  __int16 v208;
  __int128 v209;
  _OWORD v210[2];
  __int16 v211;
  char v212;
  char v213;
  char v214;
  char v215;
  _BYTE v216[56];
  _BYTE v217[32];
  __int128 v218;
  uint64_t v219;
  _BYTE v220[24];
  __int128 v221;
  uint64_t v222;
  _BYTE v223[32];
  _BYTE v224[32];
  _BYTE v225[40];
  _BYTE v226[32];
  uint64_t v227;
  uint64_t v228;
  void *__p[2];
  uint64_t v230;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v95 = unk_2103B3098;
  v96 = xmmword_2103B30A8;
  *((_QWORD *)&v80 + 1) = 0;
  v81 = 0;
  v82 = 0;
  LODWORD(v80) = 0;
  v97 = unk_2103B30B8;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  memset(v93, 0, 25);
  memset(&v93[4], 0, 24);
  v98 = 0x3FF0000000000000;
  v94 = xmmword_2103B3088;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v100 = 0;
  v99 = 0u;
  LOBYTE(v101) = 0;
  v105 = 2;
  v106 = 0u;
  v107 = 0;
  v108 = 0;
  v109 = 0u;
  v110 = 0u;
  v111 = 0;
  v112 = 1065353216;
  v113 = 0;
  v114 = 0u;
  v115 = 0u;
  v116 = 1065353216;
  v117 = 0u;
  v118 = 0u;
  v119 = 1065353216;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v129 = 0u;
  v131 = 0;
  v130 = 0;
  v139 = -1;
  v138 = -1;
  v140 = 0u;
  v141 = 0u;
  v142 = 1065353216;
  v143 = 0;
  v144 = 1;
  v145 = 0xBFF0000000000000;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v181 = 0;
  v154 = 0;
  v153 = 0u;
  *(_OWORD *)v152 = 0u;
  v156 = 0u;
  v155 = 0u;
  v157 = -1;
  v158 = 0;
  v159 = 0;
  v160 = -1;
  v161 = 0;
  v162 = 0;
  v163 = -1;
  v164 = 0;
  v165 = 0;
  v166 = -1;
  v167 = 0;
  v168 = 0;
  v169 = -1;
  v170 = 0;
  v171 = 0;
  v172 = -1;
  v173 = 0;
  v174 = 0;
  v175 = -1;
  v176 = 0;
  v177 = 0;
  v178 = -1;
  v179 = 0;
  v180 = 0;
  v182 = 0;
  v183 = 0;
  v184[144] = 0;
  v198 = 0;
  v199 = 0;
  v206 = 0;
  LOBYTE(v207) = 0;
  memset(v184, 0, 57);
  v197 = 0;
  v196 = 0u;
  v195 = 0u;
  v194 = 0u;
  v193 = 0u;
  v192 = 0u;
  v191 = 0u;
  v190 = 0u;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v186 = 0u;
  v185 = 0u;
  v202 = 0;
  v201 = 0;
  v200 = 0u;
  v205 = 0;
  v204 = 0;
  v203 = 0u;
  *(_DWORD *)((char *)&v207 + 1) = 16777473;
  *((_QWORD *)&v207 + 1) = 0xBFF0000000000000;
  v208 = 1;
  LOBYTE(v209) = 0;
  BYTE8(v210[1]) = 0;
  v211 = 0;
  v212 = 0;
  v213 = 0;
  v214 = 0;
  v215 = 0;
  *(_QWORD *)v216 = 0x7FF8000000000000;
  *(int64x2_t *)&v216[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v216[24] = *(_OWORD *)&v216[8];
  *(_OWORD *)&v216[40] = *(_OWORD *)&v216[8];
  *(_OWORD *)v217 = xmmword_2102DD520;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)&v217[16] = _Q1;
  v219 = 0;
  v218 = 0u;
  *(_QWORD *)v220 = 0x3FF0000000000000;
  *(_OWORD *)&v220[8] = _Q1;
  v222 = 0;
  v221 = 0u;
  memset(&v223[8], 0, 24);
  memset(&v224[8], 0, 24);
  *(_QWORD *)v223 = 0x3FF0000000000000;
  *(_QWORD *)v224 = 0x3FF0000000000000;
  memset(&v225[16], 0, 24);
  memset(&v226[8], 0, 24);
  *(_OWORD *)v225 = _Q1;
  *(_QWORD *)v226 = 0x3FF0000000000000;
  v227 = 0x3FF0000000000000;
  v228 = -1;
  v230 = 0;
  *(_OWORD *)__p = 0u;
  *(_QWORD *)&v83 = *(_QWORD *)(v0 + 8);
  if (*(_BYTE *)(v0 + 400))
  {
    v8 = operator new(0xD8uLL);
    v9 = v8;
    v10 = *(_OWORD *)(v0 + 232);
    v8[2] = *(_OWORD *)(v0 + 216);
    v8[3] = v10;
    v11 = *(_OWORD *)(v0 + 200);
    *v8 = *(_OWORD *)(v0 + 184);
    v8[1] = v11;
    v12 = *(_OWORD *)(v0 + 360);
    v13 = *(_OWORD *)(v0 + 376);
    v14 = *(_OWORD *)(v0 + 328);
    v8[10] = *(_OWORD *)(v0 + 344);
    v8[11] = v12;
    v8[12] = v13;
    v15 = *(_OWORD *)(v0 + 296);
    v16 = *(_OWORD *)(v0 + 312);
    v17 = *(_OWORD *)(v0 + 264);
    v8[6] = *(_OWORD *)(v0 + 280);
    v8[7] = v15;
    v18 = (unint64_t)v8 + 216;
    *((_BYTE *)v8 + 208) = *(_BYTE *)(v0 + 392);
    v8[8] = v16;
    v8[9] = v14;
    v8[4] = *(_OWORD *)(v0 + 248);
    v8[5] = v17;
    v19 = (_QWORD *)*((_QWORD *)&v129 + 1);
    if (*((_QWORD *)&v129 + 1) >= (unint64_t)v130)
    {
      v79 = v2;
      v21 = (_QWORD *)v129;
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v129 + 1) - v129) >> 3);
      v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20E91EF00();
      if (0x5555555555555556 * ((uint64_t)&v130[-v129] >> 3) > v23)
        v23 = 0x5555555555555556 * ((uint64_t)&v130[-v129] >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v130[-v129] >> 3) >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v23;
      if (v24 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v25 = (char *)operator new(24 * v24);
      v26 = &v25[8 * ((uint64_t)(*((_QWORD *)&v129 + 1) - v129) >> 3)];
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = 0;
      *(_QWORD *)v26 = v9;
      *(int64x2_t *)(v26 + 8) = vdupq_n_s64(v18);
      v20 = v26 + 24;
      if (v19 == v21)
      {
        *(_QWORD *)&v129 = &v25[24 * v22];
        v130 = &v25[24 * v24];
        v2 = v79;
        if (!v19)
          goto LABEL_20;
      }
      else
      {
        v27 = v19;
        do
        {
          v28 = *(_OWORD *)(v27 - 3);
          v27 -= 3;
          *(_OWORD *)(v26 - 24) = v28;
          v26 -= 24;
          *((_QWORD *)v26 + 2) = v27[2];
          *v27 = 0;
          v27[1] = 0;
          v27[2] = 0;
        }
        while (v27 != v21);
        *(_QWORD *)&v129 = v26;
        *((_QWORD *)&v129 + 1) = v20;
        v29 = v19;
        v130 = &v25[24 * v24];
        do
        {
          v31 = (void *)*(v29 - 3);
          v29 -= 3;
          v30 = v31;
          if (v31)
          {
            *(v19 - 2) = v30;
            operator delete(v30);
          }
          v19 = v29;
        }
        while (v29 != v21);
        v19 = v21;
        v2 = v79;
        if (!v21)
          goto LABEL_20;
      }
      operator delete(v19);
    }
    else
    {
      **((_QWORD **)&v129 + 1) = v8;
      v19[1] = v18;
      v20 = v19 + 3;
      v19[2] = v18;
    }
LABEL_20:
    *((_QWORD *)&v129 + 1) = v20;
  }
  v82 = *(_QWORD *)(v0 + 592);
  v32 = *(_OWORD *)(v0 + 16);
  v33 = *(_OWORD *)(v0 + 32);
  v34 = *(_OWORD *)(v0 + 48);
  v35 = *(_OWORD *)(v0 + 64);
  v36 = *(_OWORD *)(v0 + 80);
  v37 = *(_OWORD *)(v0 + 96);
  v38 = *(_OWORD *)(v0 + 112);
  v39 = *(_OWORD *)(v0 + 128);
  v40 = *(_OWORD *)(v0 + 144);
  v41 = *(_OWORD *)(v0 + 160);
  v93[2] = *(_QWORD *)(v0 + 176);
  v92 = v40;
  *(_OWORD *)v93 = v41;
  v90 = v38;
  v91 = v39;
  v88 = v36;
  v89 = v37;
  v86 = v34;
  v87 = v35;
  v84 = v32;
  v85 = v33;
  v42 = *(_OWORD *)(v0 + 448);
  v209 = *(_OWORD *)(v0 + 432);
  v210[0] = v42;
  *(_OWORD *)((char *)v210 + 9) = *(_OWORD *)(v0 + 457);
  v208 = *(_WORD *)(v0 + 424);
  v207 = *(_OWORD *)(v0 + 408);
  v105 = *(_BYTE *)(v0 + 600);
  v81 = *(_WORD *)(v0 + 601);
  LOBYTE(v80) = *(_BYTE *)(v0 + 603);
  BYTE3(v80) = *(_BYTE *)(v0 + 604);
  BYTE2(v80) = *(_BYTE *)(v0 + 1072);
  LOBYTE(v93[3]) = *(_BYTE *)(v0 + 928);
  v101 = *(_QWORD *)(v0 + 1056);
  v102 = *(_BYTE *)(v0 + 1064);
  *(_OWORD *)&v93[4] = *(_OWORD *)(v0 + 936);
  v93[6] = *(_QWORD *)(v0 + 952);
  v98 = *(_QWORD *)(v0 + 1024);
  v43 = *(_OWORD *)(v0 + 1008);
  v96 = *(_OWORD *)(v0 + 992);
  v97 = v43;
  v44 = *(_OWORD *)(v0 + 976);
  v94 = *(_OWORD *)(v0 + 960);
  v95 = v44;
  v100 = *(_QWORD *)(v0 + 1048);
  v99 = *(_OWORD *)(v0 + 1032);
  if (*(_BYTE *)(v0 + 912))
  {
    v45 = *(_QWORD *)(v0 + 664);
    v46 = *(_OWORD *)(v0 + 624);
    v47 = *(_OWORD *)(v0 + 640);
    v48 = *(_QWORD *)(v0 + 656);
    v49 = *(_OWORD *)(v0 + 672);
    v50 = *(_QWORD *)(v0 + 688);
    v51 = *(_OWORD *)(v0 + 696);
    v52 = *(_QWORD *)(v0 + 712);
    v53 = *(_OWORD *)(v0 + 720);
    v54 = *(_QWORD *)(v0 + 736);
    v55 = *(_OWORD *)(v0 + 744);
    v56 = *(_QWORD *)(v0 + 760);
    v57 = *(_OWORD *)(v0 + 768);
    v58 = *(_OWORD *)(v0 + 784);
    v59 = *(_OWORD *)(v0 + 800);
    v60 = *(_OWORD *)(v0 + 816);
    v61 = *(_QWORD *)(v0 + 832);
    v62 = *(_OWORD *)(v0 + 840);
    v63 = *(_OWORD *)(v0 + 856);
    v64 = *(_OWORD *)(v0 + 872);
    v65 = *(_OWORD *)(v0 + 888);
    v66 = *(_QWORD *)(v0 + 904);
    *(_OWORD *)v216 = *(_OWORD *)(v0 + 608);
    *(_OWORD *)&v216[16] = v46;
    *(_QWORD *)&v216[48] = v48;
    *(_OWORD *)&v216[32] = v47;
    *(_QWORD *)v217 = v45;
    *(_QWORD *)&v217[24] = v50;
    *(_OWORD *)&v217[8] = v49;
    v219 = v52;
    v218 = v51;
    *(_QWORD *)&v220[16] = v54;
    *(_OWORD *)v220 = v53;
    v222 = v56;
    v221 = v55;
    *(_QWORD *)v225 = v61;
    *(_OWORD *)v224 = v59;
    *(_OWORD *)&v224[16] = v60;
    *(_OWORD *)v223 = v57;
    *(_OWORD *)&v223[16] = v58;
    v227 = v66;
    *(_OWORD *)&v226[16] = v65;
    *(_OWORD *)v226 = v64;
    *(_OWORD *)&v225[24] = v63;
    *(_OWORD *)&v225[8] = v62;
  }
  v228 = *(_QWORD *)(v0 + 920);
  if (!*(_BYTE *)(v0 + 584))
  {
    sub_20EABA448(v2, &v80);
    *(_OWORD *)(v2 + 5480) = 0u;
    v71 = __p[0];
    if (!__p[0])
      goto LABEL_26;
    goto LABEL_25;
  }
  v67 = (char *)operator new(0x80uLL);
  v68 = *(_OWORD *)(v0 + 512);
  *(_OWORD *)(v67 + 72) = *(_OWORD *)(v0 + 528);
  v69 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v67 + 88) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v67 + 104) = v69;
  v70 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v67 + 24) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v67 + 40) = v70;
  *((_QWORD *)v67 + 1) = 0;
  *((_QWORD *)v67 + 2) = 0;
  *(_QWORD *)v67 = &off_24C9F7788;
  *((_QWORD *)v67 + 15) = *(_QWORD *)(v0 + 576);
  *(_OWORD *)(v67 + 56) = v68;
  sub_20EABA448(v2, &v80);
  *(_QWORD *)(v2 + 5480) = v67 + 24;
  *(_QWORD *)(v2 + 5488) = v67;
  v71 = __p[0];
  if (__p[0])
  {
LABEL_25:
    __p[1] = v71;
    operator delete(v71);
  }
LABEL_26:
  sub_20E91E818((uint64_t)v184);
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v152[0])
  {
    v152[1] = v152[0];
    operator delete(v152[0]);
  }
  return sub_20E91EA40((uint64_t)&v83);
}

void sub_20F3E8EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20EE581EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20F3E8F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;

  operator delete(v17);
  sub_20EE581EC(&a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F3E8F30(_QWORD *a1, _BYTE *a2)
{
  const char *v2;
  uint64_t v3;

  switch(*a2)
  {
    case 0:
      v2 = "NominalLowHealth";
      v3 = 16;
      break;
    case 1:
      v2 = "NominalMedHealth";
      v3 = 16;
      break;
    case 2:
      v2 = "NominalHighHealth";
      v3 = 17;
      break;
    case 3:
      v2 = "Unacceptable";
      v3 = 12;
      break;
    case 4:
      v2 = "FastMotion";
      v3 = 10;
      break;
    case 5:
      v2 = "LowSceneTexture";
      v3 = 15;
      break;
    case 6:
      v2 = "LowLight";
      v3 = 8;
      break;
    case 7:
      v2 = "LowTextureHeuristic";
      v3 = 19;
      break;
    case 8:
      v2 = "OutOfSpaceBoundaries";
      v3 = 20;
      break;
    case 9:
      v2 = "IMUCameraDiscrepancyWithStationaryIMU";
      v3 = 37;
      break;
    case 0xA:
      v2 = "IMUCameraDiscrepancyWithStationaryVision";
      v3 = 40;
      break;
    case 0xB:
      v2 = "VisualSLAMMovingObjectDrift";
      v3 = 27;
      break;
    case 0xC:
      v2 = "VisualSLAMFrameToFramePnPFailure";
      v3 = 32;
      break;
    case 0xD:
      v2 = "LargeCameraExtrinsicOffsetWrtDefault";
      v3 = 36;
      break;
    case 0xE:
      v2 = "TrackingFailedDueToSmudge";
      v3 = 25;
      break;
    case 0xF:
      v2 = "SimulatedMovingPlatformHint";
      v3 = 27;
      break;
    case 0x10:
      v2 = "MovingPlatformHint";
      v3 = 18;
      break;
    case 0x11:
      v2 = "IMUCameraDiscrepancyWithStationaryIMUOccludedCamera";
      v3 = 51;
      break;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Metadata/src/TrackingStatusMetadata.cpp", 135, (uint64_t)"", 0, (uint64_t)"Unknown State", 13, (void (*)(void **))sub_21023DDB0);
      abort();
  }
  return sub_20E86A980(a1, (uint64_t)v2, v3);
}

unint64_t sub_20F3E90F8(unsigned __int8 *a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned int v6;
  uint64_t v7;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[7];
  if (a1[16])
  {
    v5 = 0;
    v1 = 1;
LABEL_3:
    v6 = 2;
LABEL_4:
    v7 = 1;
  }
  else
  {
    v6 = *a1;
    v5 = v6 - 3;
    switch(*a1)
    {
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        v5 = 0;
        v1 = 0;
        v7 = 1;
        v6 = 8;
        return ((unint64_t)v1 << 40) | (v7 << 48) | ((unint64_t)v5 << 32) | (v4 << 24) | (v3 << 16) | (v2 << 8) | v6;
      case 7u:
      case 0x11u:
        v5 = 0;
        v1 = 0;
        goto LABEL_4;
      case 8u:
        v5 = 0;
        v1 = 0;
        v7 = 1;
        v6 = 5;
        return ((unint64_t)v1 << 40) | (v7 << 48) | ((unint64_t)v5 << 32) | (v4 << 24) | (v3 << 16) | (v2 << 8) | v6;
      case 9u:
        v5 = 0;
        v1 = 0;
        v7 = 1;
        v6 = 10;
        return ((unint64_t)v1 << 40) | (v7 << 48) | ((unint64_t)v5 << 32) | (v4 << 24) | (v3 << 16) | (v2 << 8) | v6;
      case 0xAu:
        v5 = 0;
        v1 = 0;
        v7 = 1;
        v6 = 3;
        return ((unint64_t)v1 << 40) | (v7 << 48) | ((unint64_t)v5 << 32) | (v4 << 24) | (v3 << 16) | (v2 << 8) | v6;
      case 0xBu:
        v5 = 0;
        v1 = 0;
        v7 = 1;
        v6 = 14;
        return ((unint64_t)v1 << 40) | (v7 << 48) | ((unint64_t)v5 << 32) | (v4 << 24) | (v3 << 16) | (v2 << 8) | v6;
      case 0xCu:
        v5 = 0;
        v1 = 0;
        v7 = 1;
        v6 = 13;
        return ((unint64_t)v1 << 40) | (v7 << 48) | ((unint64_t)v5 << 32) | (v4 << 24) | (v3 << 16) | (v2 << 8) | v6;
      case 0xDu:
        v5 = 0;
        v1 = 0;
        v7 = 1;
        v6 = 15;
        return ((unint64_t)v1 << 40) | (v7 << 48) | ((unint64_t)v5 << 32) | (v4 << 24) | (v3 << 16) | (v2 << 8) | v6;
      case 0xEu:
        v5 = 0;
        v1 = 0;
        v7 = 1;
        v6 = 16;
        return ((unint64_t)v1 << 40) | (v7 << 48) | ((unint64_t)v5 << 32) | (v4 << 24) | (v3 << 16) | (v2 << 8) | v6;
      case 0xFu:
        v5 = 0;
        v1 = 0;
        v7 = 1;
        v6 = 9;
        return ((unint64_t)v1 << 40) | (v7 << 48) | ((unint64_t)v5 << 32) | (v4 << 24) | (v3 << 16) | (v2 << 8) | v6;
      case 0x10u:
        if (a1[13])
        {
          v1 = 0;
          v5 = 1;
          goto LABEL_3;
        }
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Metadata/src/TrackingStatusMetadata.cpp", 219, (uint64_t)"is_moving_platform_imu_camera_discrepancy", 41, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v5 = 0;
        v1 = 0;
        v7 = 1;
        v6 = 2;
        break;
      default:
        v6 = 0;
        v7 = 0;
        return ((unint64_t)v1 << 40) | (v7 << 48) | ((unint64_t)v5 << 32) | (v4 << 24) | (v3 << 16) | (v2 << 8) | v6;
    }
  }
  return ((unint64_t)v1 << 40) | (v7 << 48) | ((unint64_t)v5 << 32) | (v4 << 24) | (v3 << 16) | (v2 << 8) | v6;
}

BOOL sub_20F3E92B8(double **a1)
{
  double *v1;
  double *v2;

  v1 = *a1;
  v2 = a1[1];
  return **a1 == *v2
      && v1[1] == v2[1]
      && v1[2] == v2[2]
      && v1[3] == v2[3]
      && v1[4] == v2[4]
      && v1[5] == v2[5]
      && v1[6] == v2[6]
      && v1[7] == v2[7]
      && v1[8] == v2[8]
      && v1[9] == v2[9]
      && v1[10] == v2[10]
      && v1[11] == v2[11]
      && v1[12] == v2[12]
      && v1[13] == v2[13]
      && v1[14] == v2[14]
      && v1[15] == v2[15];
}

void sub_20F3E93CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v8;
  CFMutableArrayRef v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  void *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  void *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  void *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  void *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  void *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  CFMutableArrayRef *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  __CFArray *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  __int128 v134;
  CFMutableArrayRef theArray[2];
  void *value;
  std::__shared_weak_count *v137;
  void *v138[2];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v138 = *(_OWORD *)a1;
  v139 = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v140 = *(_OWORD *)(a1 + 32);
  v141 = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v142 = *(_OWORD *)(a1 + 64);
  v143 = v6;
  v144 = *(_OWORD *)(a1 + 96);
  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_20E8EACA0((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v9 = theArray[0];
  v8 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_6;
  v10 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9)
      goto LABEL_197;
  }
  else
  {
LABEL_6:
    if (!v9)
      goto LABEL_197;
  }
  Default = CFAllocatorGetDefault();
  v14 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *(CFUUIDBytes *)v138);
  sub_20EA68D1C((std::__shared_weak_count_vtbl **)&value, v14, 0);
  v16 = value;
  v15 = v137;
  if (v137)
  {
    p_shared_owners = (unint64_t *)&v137->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (!v16)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  if (v16)
LABEL_13:
    CFArrayAppendValue(theArray[0], v16);
  if (!v15)
    goto LABEL_18;
LABEL_14:
  v20 = (unint64_t *)&v15->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v16)
      goto LABEL_197;
  }
  else
  {
LABEL_18:
    if (!v16)
      goto LABEL_197;
  }
  sub_20EA5E260(&v139, (CFNumberRef *)&value);
  v23 = value;
  v22 = v137;
  if (v137)
  {
    v24 = (unint64_t *)&v137->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (!v23)
        goto LABEL_26;
      goto LABEL_25;
    }
  }
  if (v23)
LABEL_25:
    CFArrayAppendValue(theArray[0], value);
LABEL_26:
  v27 = v137;
  if (!v137)
    goto LABEL_30;
  v28 = (unint64_t *)&v137->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v23)
      goto LABEL_197;
  }
  else
  {
LABEL_30:
    if (!v23)
      goto LABEL_197;
  }
  sub_20EA5E260((char *)&v139 + 8, (CFNumberRef *)&value);
  v31 = value;
  v30 = v137;
  if (v137)
  {
    v32 = (unint64_t *)&v137->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 - 1, v32));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      if (!v31)
        goto LABEL_38;
      goto LABEL_37;
    }
  }
  if (v31)
LABEL_37:
    CFArrayAppendValue(theArray[0], value);
LABEL_38:
  v35 = v137;
  if (v137)
  {
    v36 = (unint64_t *)&v137->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      if (v31)
        goto LABEL_43;
LABEL_197:
      v118 = (CFMutableArrayRef *)&v134;
      goto LABEL_198;
    }
  }
  if (!v31)
    goto LABEL_197;
LABEL_43:
  sub_20EA5E260(&v140, (CFNumberRef *)&value);
  v39 = value;
  v38 = v137;
  if (v137)
  {
    v40 = (unint64_t *)&v137->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 - 1, v40));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v39)
    CFArrayAppendValue(theArray[0], value);
  v43 = v137;
  if (v137)
  {
    v44 = (unint64_t *)&v137->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (!v39)
    goto LABEL_197;
  sub_20EA5E260((char *)&v140 + 8, (CFNumberRef *)&value);
  v47 = value;
  v46 = v137;
  if (v137)
  {
    v48 = (unint64_t *)&v137->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 - 1, v48));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v47)
    CFArrayAppendValue(theArray[0], value);
  v51 = v137;
  if (v137)
  {
    v52 = (unint64_t *)&v137->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (!v47)
    goto LABEL_197;
  sub_20EA5E260(&v141, (CFNumberRef *)&value);
  v55 = value;
  v54 = v137;
  if (v137)
  {
    v56 = (unint64_t *)&v137->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    do
      v58 = __ldaxr(v56);
    while (__stlxr(v58 - 1, v56));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v55)
    CFArrayAppendValue(theArray[0], value);
  v59 = v137;
  if (v137)
  {
    v60 = (unint64_t *)&v137->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (!v55)
    goto LABEL_197;
  sub_20EA5E260((char *)&v141 + 8, (CFNumberRef *)&value);
  v63 = value;
  v62 = v137;
  if (v137)
  {
    v64 = (unint64_t *)&v137->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    do
      v66 = __ldaxr(v64);
    while (__stlxr(v66 - 1, v64));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v63)
    CFArrayAppendValue(theArray[0], value);
  v67 = v137;
  if (v137)
  {
    v68 = (unint64_t *)&v137->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (!v63)
    goto LABEL_197;
  sub_20EA5E260(&v142, (CFNumberRef *)&value);
  v71 = value;
  v70 = v137;
  if (v137)
  {
    v72 = (unint64_t *)&v137->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    do
      v74 = __ldaxr(v72);
    while (__stlxr(v74 - 1, v72));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v71)
    CFArrayAppendValue(theArray[0], value);
  v75 = v137;
  if (v137)
  {
    v76 = (unint64_t *)&v137->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (!v71)
    goto LABEL_197;
  sub_20EA5E260((char *)&v142 + 8, (CFNumberRef *)&value);
  v79 = value;
  v78 = v137;
  if (v137)
  {
    v80 = (unint64_t *)&v137->__shared_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
    do
      v82 = __ldaxr(v80);
    while (__stlxr(v82 - 1, v80));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (v79)
    CFArrayAppendValue(theArray[0], value);
  v83 = v137;
  if (v137)
  {
    v84 = (unint64_t *)&v137->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (!v79)
    goto LABEL_197;
  sub_20EA5E260(&v143, (CFNumberRef *)&value);
  v87 = value;
  v86 = v137;
  if (v137)
  {
    v88 = (unint64_t *)&v137->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
    do
      v90 = __ldaxr(v88);
    while (__stlxr(v90 - 1, v88));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v87)
    CFArrayAppendValue(theArray[0], value);
  v91 = v137;
  if (v137)
  {
    v92 = (unint64_t *)&v137->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (!v87)
    goto LABEL_197;
  sub_20EA5E260((char *)&v143 + 8, (CFNumberRef *)&value);
  v95 = value;
  v94 = v137;
  if (v137)
  {
    v96 = (unint64_t *)&v137->__shared_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
    do
      v98 = __ldaxr(v96);
    while (__stlxr(v98 - 1, v96));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v95)
    CFArrayAppendValue(theArray[0], value);
  v99 = v137;
  if (v137)
  {
    v100 = (unint64_t *)&v137->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (!v95)
    goto LABEL_197;
  sub_20EA5E260(&v144, (CFNumberRef *)&value);
  v103 = value;
  v102 = v137;
  if (v137)
  {
    v104 = (unint64_t *)&v137->__shared_owners_;
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
    do
      v106 = __ldaxr(v104);
    while (__stlxr(v106 - 1, v104));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (v103)
    CFArrayAppendValue(theArray[0], value);
  v107 = v137;
  if (v137)
  {
    v108 = (unint64_t *)&v137->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  if (!v103)
    goto LABEL_197;
  sub_20EA5E260((char *)&v144 + 8, (CFNumberRef *)&value);
  v111 = value;
  v110 = v137;
  if (v137)
  {
    v112 = (unint64_t *)&v137->__shared_owners_;
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 1, v112));
    do
      v114 = __ldaxr(v112);
    while (__stlxr(v114 - 1, v112));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  if (v111)
    CFArrayAppendValue(theArray[0], value);
  v115 = v137;
  if (v137)
  {
    v116 = (unint64_t *)&v137->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  if (!v111)
    goto LABEL_197;
  v134 = *(_OWORD *)theArray;
  v118 = theArray;
LABEL_198:
  *v118 = 0;
  v118[1] = 0;
  v119 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_202;
  v120 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v121 = __ldaxr(v120);
  while (__stlxr(v121 - 1, v120));
  if (!v121)
  {
    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
    std::__shared_weak_count::__release_weak(v119);
    v122 = (__CFArray *)v134;
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_209;
  }
  else
  {
LABEL_202:
    v122 = (__CFArray *)v134;
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_209;
  }
  sub_20EA5E070((uint64_t *)(a1 + 112), (CFNumberRef *)v138);
  CFArrayAppendValue(v122, v138[0]);
  v123 = (std::__shared_weak_count *)v138[1];
  if (v138[1])
  {
    v124 = (unint64_t *)((char *)v138[1] + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v122 = (__CFArray *)v134;
LABEL_209:
  v138[0] = v122;
  v138[1] = *((void **)&v134 + 1);
  if (*((_QWORD *)&v134 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 1, v126));
  }
  sub_20F3E9F7C(a2, (CFTypeRef *)v138);
  v128 = (std::__shared_weak_count *)v138[1];
  if (v138[1])
  {
    v129 = (unint64_t *)((char *)v138[1] + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  if (*((_QWORD *)&v134 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
}

void sub_20F3E9E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3E9ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a3);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      sub_20E86665C((uint64_t)va);
      _Unwind_Resume(a1);
    }
  }
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F3E9F7C(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  _QWORD *v4;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9AFE68;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = v3;
  a1[1] = v4;
  return a1;
}

void sub_20F3E9FDC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20F3E9FF4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20F3EA008(CFUUIDBytes *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFUUIDBytes v11;
  CFMutableArrayRef v12;
  std::__shared_weak_count *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;

  v11 = *a1;
  sub_20F3EA45C(&v11, &v12);
  v14 = v12;
  v15 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20F3E9F7C(a2, &v14);
  v5 = v15;
  if (v15)
  {
    v6 = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20F3EA0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3EA108(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFIndex v4;
  __CFData *Mutable;
  std::__shared_weak_count *v6;
  UInt8 *MutableBytePtr;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFMutableDataRef theData;
  std::__shared_weak_count *v13;

  v4 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) & 0xFFFFFFFFFFFFFFE0;
  Mutable = CFDataCreateMutable(0, v4);
  theData = Mutable;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFB50;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  v13 = v6;
  CFDataIncreaseLength(Mutable, v4);
  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 != *(_QWORD *)a1)
    memmove(MutableBytePtr, *(const void **)a1, v8 - *(_QWORD *)a1);
  sub_20E8E1AA4(a2, (CFTypeRef *)&theData);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20F3EA208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F3EA21C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20F3EA234(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20F3EA248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F3EA25C(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  CFMutableArrayRef Mutable;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t i;
  __CFArray *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *value;
  std::__shared_weak_count *v20;
  __CFArray *v21;
  std::__shared_weak_count *v22;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 17, MEMORY[0x24BDBD690]);
  v21 = Mutable;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFE18;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  v22 = v7;
  sub_20EA5DC60(a1, (CFNumberRef *)&value);
  CFArrayAppendValue(Mutable, value);
  v8 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  for (i = 0; i != 16; ++i)
  {
    v12 = v21;
    sub_20EA5E260((void *)(a2 + 8 * i), (CFNumberRef *)&value);
    CFArrayAppendValue(v12, value);
    v13 = v20;
    if (v20)
    {
      v14 = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  sub_20F3E9F7C(a3, (CFTypeRef *)&v21);
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20F3EA3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3EA45C(CFUUIDBytes *a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableArrayRef v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count_vtbl *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  CFMutableArrayRef theArray;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;

  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_20E8EACA0((std::__shared_weak_count_vtbl **)&theArray, Mutable, 0);
  v6 = theArray;
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_7;
LABEL_16:
      *a2 = 0;
      a2[1] = 0;
      v17 = v23;
      goto LABEL_26;
    }
  }
  if (!v6)
    goto LABEL_16;
LABEL_7:
  Default = CFAllocatorGetDefault();
  v11 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *a1);
  sub_20EA68D1C(&v24, v11, 0);
  v13 = v24;
  v12 = v25;
  if (!v25)
    goto LABEL_12;
  v14 = (unint64_t *)&v25->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v13)
    {
LABEL_13:
      CFArrayAppendValue(theArray, v13);
      if (!v12)
        goto LABEL_22;
      goto LABEL_19;
    }
  }
  else
  {
LABEL_12:
    if (v13)
      goto LABEL_13;
  }
  *a2 = 0;
  a2[1] = 0;
  if (!v12)
    goto LABEL_22;
LABEL_19:
  v18 = (unint64_t *)&v12->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v17 = v23;
    if (v13)
      goto LABEL_23;
    goto LABEL_26;
  }
LABEL_22:
  v17 = v23;
  if (v13)
  {
LABEL_23:
    *a2 = theArray;
    a2[1] = (CFMutableArrayRef)v17;
    return;
  }
LABEL_26:
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20F3EA62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (a10)
  {
    v14 = (unint64_t *)&a10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

double sub_20F3EA6AC@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, float64x2_t *a5@<X8>)
{
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  double v26;
  double v27;
  double v28;
  float64x2_t v29;
  double v35;
  float64_t v36;
  double v37;
  double v38;
  double v39;
  double result;

  v5 = (double *)(*(_QWORD *)(*a2 + 24 * a3) + 216 * a4);
  v6 = v5[1];
  v7 = v5[2];
  v8 = v5[3];
  v10 = v5[4];
  v9 = v5[5];
  v12 = v5[6];
  v11 = v5[7];
  v13 = v5[8];
  v14 = v5[9];
  v15 = v5[10];
  v16 = v5[11];
  v17 = -(*v5 * v14 + v8 * v15 + v12 * v16);
  v18 = -(v6 * v14 + v10 * v15 + v11 * v16);
  v19 = -(v7 * v14 + v9 * v15 + v13 * v16);
  v20 = *(double *)(a1 + 96);
  _Q25.f64[0] = *(float64_t *)(a1 + 24);
  v22 = *(float64x2_t *)(a1 + 8);
  v23 = *(double *)(a1 + 48);
  v24 = *(float64x2_t *)(a1 + 32);
  _Q19 = *(float64x2_t *)(a1 + 56);
  v26 = *v5 * _Q25.f64[0];
  v27 = v6 * _Q25.f64[0];
  v28 = v7 * _Q25.f64[0];
  _Q25.f64[1] = v23;
  v29 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v22, (int64x2_t)v24), *(double *)(a1 + 80)), (float64x2_t)vzip2q_s64((int64x2_t)v22, (int64x2_t)v24), *(float64x2_t *)(a1 + 80), 1), _Q25, v20);
  _D24 = *(_QWORD *)(a1 + 88);
  __asm { FMLA            D25, D24, V19.D[1] }
  v35 = *(double *)(a1 + 72);
  v36 = _Q25.f64[0] + v35 * v20;
  _Q25.f64[0] = v8 * v23 + v26 + v12 * v35;
  v37 = v17 - *v5 * v29.f64[0] - v12 * v36 - vmuld_lane_f64(v8, v29, 1);
  v38 = v10 * v23 + v27 + v11 * v35;
  v39 = v9 * v23 + v28 + v13 * v35;
  *a5 = vaddq_f64(vmulq_n_f64(_Q19, v12), vaddq_f64(vmulq_n_f64(v22, *v5), vmulq_n_f64(v24, v8)));
  a5[2] = vaddq_f64(vmulq_n_f64(_Q19, v11), vaddq_f64(vmulq_n_f64(v22, v6), vmulq_n_f64(v24, v10)));
  a5[4] = vaddq_f64(vmulq_n_f64(v24, v9), vaddq_f64(vmulq_n_f64(v22, v7), vmulq_n_f64(_Q19, v13)));
  a5[1].f64[0] = _Q25.f64[0];
  a5[1].f64[1] = v37;
  a5[3].f64[0] = v38;
  a5[3].f64[1] = v18 - v6 * v29.f64[0] - v11 * v36 - vmuld_lane_f64(v10, v29, 1);
  result = v19 - v13 * v36 - v7 * v29.f64[0] - vmuld_lane_f64(v9, v29, 1);
  a5[5].f64[0] = v39;
  a5[5].f64[1] = result;
  return result;
}

uint64_t sub_20F3EA824(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5, double a6)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  _BYTE *v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int128 v98;
  uint64_t v99;

  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 176) = xmmword_2103B3100;
  v9 = a1 + 176;
  *(_BYTE *)(a1 + 168) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(int64x2_t *)(a1 + 192) = vdupq_n_s64(0x3FB999999999999AuLL);
  *(_QWORD *)(a1 + 208) = 0x3F9EB851EB851EB8;
  *(_QWORD *)(a1 + 216) = 1000;
  *(_DWORD *)(a1 + 224) = 0;
  __asm { FMOV            V2.2D, #-1.0 }
  v85 = _Q2;
  *(_OWORD *)(a1 + 232) = _Q2;
  *(_QWORD *)(a1 + 248) = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_BYTE *)(a1 + 352) = 1;
  sub_20F4021A0((uint64_t)&v86, a3, a4, a6);
  v15 = v86;
  if (*(_BYTE *)(a1 + 168))
  {
    v16 = *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 56);
    v18 = v87;
    *(_QWORD *)(a1 + 48) = v86;
    *(_QWORD *)(a1 + 56) = v18;
    v86 = v16;
    v87 = v17;
    *(_DWORD *)(a1 + 64) = v88;
    v88 = 0;
    v19 = *(_QWORD *)(a1 + 72);
    v20 = *(_QWORD *)(a1 + 80);
    v21 = v90;
    *(_QWORD *)(a1 + 72) = v89;
    *(_QWORD *)(a1 + 80) = v21;
    v89 = v19;
    v90 = v20;
    *(_DWORD *)(a1 + 88) = v91;
    v91 = 0;
    v22 = *(_QWORD *)(a1 + 96);
    v23 = *(_QWORD *)(a1 + 104);
    v24 = v93;
    *(_QWORD *)(a1 + 96) = v92;
    *(_QWORD *)(a1 + 104) = v24;
    v92 = v22;
    v93 = v23;
    *(_DWORD *)(a1 + 112) = v94;
    v94 = 0;
    v25 = *(_QWORD *)(a1 + 120);
    v26 = *(_QWORD *)(a1 + 128);
    v27 = v96;
    *(_QWORD *)(a1 + 120) = v95;
    *(_QWORD *)(a1 + 128) = v27;
    v95 = v25;
    v96 = v26;
    *(_DWORD *)(a1 + 136) = v97;
    v97 = 0;
    v28 = v98;
    *(_QWORD *)(a1 + 160) = v99;
    *(_OWORD *)(a1 + 144) = v28;
    if (v25)
    {
      MEMORY[0x212BC6368](v25, 0x1000C8000313F17);
      v22 = v92;
    }
    if (v22)
      MEMORY[0x212BC6368](v22, 0x1000C8000313F17);
    v29 = v89;
    if (v89)
      goto LABEL_7;
  }
  else
  {
    v51 = v87;
    v86 = 0;
    v87 = 0;
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v51;
    *(_DWORD *)(a1 + 64) = v88;
    v88 = 0;
    v52 = v89;
    v53 = v90;
    v89 = 0;
    v90 = 0;
    *(_QWORD *)(a1 + 72) = v52;
    *(_QWORD *)(a1 + 80) = v53;
    *(_DWORD *)(a1 + 88) = v91;
    v91 = 0;
    v54 = v93;
    *(_QWORD *)(a1 + 96) = v92;
    *(_QWORD *)(a1 + 104) = v54;
    v92 = 0;
    v93 = 0;
    *(_DWORD *)(a1 + 112) = v94;
    v94 = 0;
    v55 = v96;
    *(_QWORD *)(a1 + 120) = v95;
    *(_QWORD *)(a1 + 128) = v55;
    v95 = 0;
    v96 = 0;
    *(_DWORD *)(a1 + 136) = v97;
    v97 = 0;
    v56 = v98;
    *(_QWORD *)(a1 + 160) = v99;
    *(_OWORD *)(a1 + 144) = v56;
    *(_BYTE *)(a1 + 168) = 1;
    v29 = v89;
    if (v89)
LABEL_7:
      MEMORY[0x212BC6368](v29, 0x1000C8000313F17);
  }
  if (v86)
    MEMORY[0x212BC6368](v86, 0x1000C8000313F17);
  sub_20EAE8D8C((char **)a1, *((_QWORD *)a2 + 5));
  v30 = *((_QWORD *)a2 + 5);
  v31 = *(void **)(a1 + 256);
  if (v30 > (uint64_t)(*(_QWORD *)(a1 + 272) - (_QWORD)v31) >> 5)
  {
    if (v30 >> 59)
      goto LABEL_51;
    v32 = *(_QWORD *)(a1 + 264);
    v33 = (char *)operator new(32 * v30);
    v34 = &v33[v32 - (_QWORD)v31];
    v35 = v34;
    if ((void *)v32 != v31)
    {
      v35 = &v33[v32 - (_QWORD)v31];
      do
      {
        v36 = *(_QWORD *)(v32 - 32);
        v32 -= 32;
        *((_QWORD *)v35 - 4) = v36;
        v35 -= 32;
        v37 = *(_OWORD *)(v32 + 8);
        *((_QWORD *)v35 + 3) = *(_QWORD *)(v32 + 24);
        *(_OWORD *)(v35 + 8) = v37;
      }
      while ((void *)v32 != v31);
    }
    *(_QWORD *)(a1 + 256) = v35;
    *(_QWORD *)(a1 + 264) = v34;
    *(_QWORD *)(a1 + 272) = &v33[32 * v30];
    if (v31)
    {
      operator delete(v31);
      v30 = *((_QWORD *)a2 + 5);
    }
  }
  v38 = *(void **)(a1 + 280);
  if (v30 <= (uint64_t)(*(_QWORD *)(a1 + 296) - (_QWORD)v38) >> 5)
    goto LABEL_24;
  if (v30 >> 59)
LABEL_51:
    sub_20E867F44();
  v39 = *(_QWORD *)(a1 + 288);
  v40 = (char *)operator new(32 * v30);
  v41 = &v40[v39 - (_QWORD)v38];
  v42 = v41;
  if ((void *)v39 != v38)
  {
    v42 = &v40[v39 - (_QWORD)v38];
    do
    {
      v43 = *(_QWORD *)(v39 - 32);
      v39 -= 32;
      *((_QWORD *)v42 - 4) = v43;
      v42 -= 32;
      v44 = *(_OWORD *)(v39 + 8);
      *((_QWORD *)v42 + 3) = *(_QWORD *)(v39 + 24);
      *(_OWORD *)(v42 + 8) = v44;
    }
    while ((void *)v39 != v38);
  }
  *(_QWORD *)(a1 + 280) = v42;
  *(_QWORD *)(a1 + 288) = v41;
  *(_QWORD *)(a1 + 296) = &v40[32 * v30];
  if (v38)
  {
    operator delete(v38);
    v30 = *((_QWORD *)a2 + 5);
  }
LABEL_24:
  v45 = *(_BYTE **)(a1 + 304);
  if (v30 <= (uint64_t)(*(_QWORD *)(a1 + 320) - (_QWORD)v45) >> 3)
    goto LABEL_38;
  if (v30 >> 61)
    goto LABEL_52;
  v46 = *(_BYTE **)(a1 + 312);
  v47 = (char *)operator new(8 * v30);
  v48 = v46 - v45;
  v49 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
  v50 = v49;
  if (v46 != v45)
  {
    if ((unint64_t)(v48 - 8) < 0x58)
    {
      v50 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_35:
        v65 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *((_QWORD *)v50 - 1) = v65;
        v50 -= 8;
      }
      while (v46 != v45);
      goto LABEL_36;
    }
    v50 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
    if (v46 - v47 - (v48 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_35;
    v57 = v48 >> 3;
    v58 = ((unint64_t)(v48 - 8) >> 3) + 1;
    v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    v60 = &v46[-v59];
    v50 = &v49[-v59];
    v61 = &v47[8 * v57 - 16];
    v62 = (__int128 *)(v46 - 16);
    v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v64 = *v62;
      *((_OWORD *)v61 - 1) = *(v62 - 1);
      *(_OWORD *)v61 = v64;
      v61 -= 32;
      v62 -= 2;
      v63 -= 4;
    }
    while (v63);
    v46 = v60;
    if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_35;
  }
LABEL_36:
  *(_QWORD *)(a1 + 304) = v50;
  *(_QWORD *)(a1 + 312) = v49;
  *(_QWORD *)(a1 + 320) = &v47[8 * v30];
  if (v45)
  {
    operator delete(v45);
    v30 = *((_QWORD *)a2 + 5);
  }
LABEL_38:
  v66 = *(_BYTE **)(a1 + 328);
  if (v30 <= (uint64_t)(*(_QWORD *)(a1 + 344) - (_QWORD)v66) >> 3)
    goto LABEL_50;
  if (v30 >> 61)
LABEL_52:
    sub_20E867F44();
  v67 = *(_BYTE **)(a1 + 336);
  v68 = (char *)operator new(8 * v30);
  v69 = v67 - v66;
  v70 = &v68[(v67 - v66) & 0xFFFFFFFFFFFFFFF8];
  v71 = v70;
  if (v67 == v66)
    goto LABEL_48;
  if ((unint64_t)(v69 - 8) < 0x58)
  {
    v71 = &v68[(v67 - v66) & 0xFFFFFFFFFFFFFFF8];
    do
    {
LABEL_47:
      v80 = *((_QWORD *)v67 - 1);
      v67 -= 8;
      *((_QWORD *)v71 - 1) = v80;
      v71 -= 8;
    }
    while (v67 != v66);
    goto LABEL_48;
  }
  v71 = &v68[(v67 - v66) & 0xFFFFFFFFFFFFFFF8];
  if (v67 - v68 - (v69 & 0xFFFFFFFFFFFFFFF8) < 0x20)
    goto LABEL_47;
  v72 = v69 >> 3;
  v73 = ((unint64_t)(v69 - 8) >> 3) + 1;
  v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
  v75 = &v67[-v74];
  v71 = &v70[-v74];
  v76 = &v68[8 * v72 - 16];
  v77 = (__int128 *)(v67 - 16);
  v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v79 = *v77;
    *((_OWORD *)v76 - 1) = *(v77 - 1);
    *(_OWORD *)v76 = v79;
    v76 -= 32;
    v77 -= 2;
    v78 -= 4;
  }
  while (v78);
  v67 = v75;
  if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_47;
LABEL_48:
  *(_QWORD *)(a1 + 328) = v71;
  *(_QWORD *)(a1 + 336) = v70;
  *(_QWORD *)(a1 + 344) = &v68[8 * v30];
  if (v66)
    operator delete(v66);
LABEL_50:
  v81 = *a2;
  v82 = a2[1];
  v83 = a2[2];
  *(_DWORD *)(v9 + 48) = *((_DWORD *)a2 + 12);
  *(_OWORD *)(v9 + 16) = v82;
  *(_OWORD *)(v9 + 32) = v83;
  *(_OWORD *)v9 = v81;
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 1);
  *(_OWORD *)(a1 + 232) = v85;
  *(_BYTE *)(a1 + 352) = a5;
  return a1;
}

void sub_20F3EADB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v15 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v10 + 336) = v15;
    operator delete(v15);
    v16 = *v12;
    if (!*v12)
    {
LABEL_3:
      v17 = *a9;
      if (!*a9)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v16 = *v12;
    if (!*v12)
      goto LABEL_3;
  }
  *(_QWORD *)(v10 + 312) = v16;
  operator delete(v16);
  v17 = *a9;
  if (!*a9)
  {
LABEL_4:
    v18 = *a10;
    if (!*a10)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  *(_QWORD *)(v10 + 288) = v17;
  operator delete(v17);
  v18 = *a10;
  if (!*a10)
  {
LABEL_5:
    sub_20F3EAE5C(v11);
    v19 = *(void **)v10;
    if (!*(_QWORD *)v10)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v10 + 264) = v18;
  operator delete(v18);
  sub_20F3EAE5C(v11);
  v19 = *(void **)v10;
  if (!*(_QWORD *)v10)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  *(_QWORD *)(v10 + 8) = v19;
  operator delete(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3EAE5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(_QWORD *)(a1 + 72);
    if (v2)
      MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
    v3 = *(_QWORD *)(a1 + 48);
    if (v3)
      MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
      MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
    if (*(_QWORD *)a1)
      MEMORY[0x212BC6368](*(_QWORD *)a1, 0x1000C8000313F17);
  }
  return a1;
}

void sub_20F3EAEF4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68918);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68918))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry_unsanitized");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68910);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68918);
  }
  *a1 = qword_254A68910;
}

void sub_20F3EAF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68918);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68918);
  _Unwind_Resume(a1);
}

double sub_20F3EAFE8(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  double *v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  double *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  _OWORD *v29;
  double *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v35;
  void **v36;

  if (a2[5] >= 2uLL)
  {
    v36 = (void **)(a1 + 41);
    v4 = a1 + 42;
    a1[42] = a1[41];
LABEL_6:
    v8 = 0;
    v35 = v4;
    while (1)
    {
      v11 = (uint64_t)(a2[1] - *a2) >> 5;
      v12 = *(double *)(*a2 + 32 * ((a2[3] + v8 + 1) % v11)) - *(double *)(*a2 + 32 * ((a2[3] + v8) % v11));
      v14 = (double *)a1[42];
      v13 = a1[43];
      if ((unint64_t)v14 < v13)
      {
        *v14 = v12;
        *v4 = (uint64_t)(v14 + 1);
        if (*v14 < 0.0)
          goto LABEL_34;
        goto LABEL_7;
      }
      v15 = (double *)*v36;
      v16 = (char *)v14 - (_BYTE *)*v36;
      v17 = v16 >> 3;
      v18 = (v16 >> 3) + 1;
      if (v18 >> 61)
        sub_20E867F44();
      v19 = v13 - (_QWORD)v15;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      v20 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v18;
      if (!v20)
        break;
      if (v20 >> 61)
        sub_20E877A38();
      v21 = operator new(8 * v20);
      v22 = (double *)&v21[8 * v17];
      *v22 = v12;
      v23 = (uint64_t)(v22 + 1);
      v24 = (char *)v14 - (char *)v15;
      if (v14 != v15)
        goto LABEL_25;
LABEL_31:
      a1[41] = v22;
      a1[42] = v23;
      a1[43] = &v21[8 * v20];
      if (v15)
        operator delete(v15);
      v4 = v35;
      *v35 = v23;
      if (*(double *)(v23 - 8) < 0.0)
      {
LABEL_34:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 83, (uint64_t)"time_diffs.back() >= 0.", 23, (uint64_t)"IMU timestamps not non-decreasing", 33, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_35;
        }
      }
LABEL_7:
      v9 = a2[5];
      v10 = v8 + 1 != v9 && v8 == v9 - 2;
      ++v8;
      if (v10)
      {
        v7 = (double *)*v36;
        v6 = (double *)*v4;
        return sub_20F1CE188(v7, v6);
      }
    }
    v21 = 0;
    v22 = (double *)(8 * v17);
    *(double *)(8 * v17) = v12;
    v23 = 8 * v17 + 8;
    v24 = (char *)v14 - (char *)v15;
    if (v14 == v15)
      goto LABEL_31;
LABEL_25:
    v25 = v24 - 8;
    if (v25 < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v14 - v21 - v16) < 0x20)
      goto LABEL_42;
    v26 = (v25 >> 3) + 1;
    v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    v28 = &v14[v27 / 0xFFFFFFFFFFFFFFF8];
    v22 = (double *)((char *)v22 - v27);
    v29 = &v21[8 * v17 - 16];
    v30 = v14 - 2;
    v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 4;
      v31 -= 4;
    }
    while (v31);
    v14 = v28;
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v33 = *((_QWORD *)v14-- - 1);
        *((_QWORD *)v22-- - 1) = v33;
      }
      while (v14 != v15);
    }
    goto LABEL_31;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 76, (uint64_t)"measurements.size() > 1", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_35:
    abort();
  }
  v5 = a2[5];
  v6 = (double *)a1[41];
  a1[42] = v6;
  v7 = v6;
  if (v5 != 1)
  {
    v36 = (void **)(a1 + 41);
    v4 = a1 + 42;
    goto LABEL_6;
  }
  return sub_20F1CE188(v7, v6);
}

uint64_t sub_20F3EB2B4(uint64_t *a1, __int128 *a2, _BOOL4 *a3, double a4, double a5)
{
  uint64_t v10;
  double v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t *v32;
  size_t v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  int v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  size_t v74;
  const char *v75;
  unsigned __int8 v76;
  const char *v77;
  size_t v78;
  _BYTE *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t *v88;
  size_t v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  uint64_t v136;
  _BOOL4 v137;
  int v138;
  double v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  double v148;
  double v149;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v163;
  int v164;
  const char *v165;
  int v166;
  const char *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170[5];
  uint64_t v171;
  uint64_t v172;
  _BYTE object[24];
  _BYTE v174[24];
  size_t v175;
  unint64_t v176;
  char v177;
  uint64_t v178;

  v178 = *MEMORY[0x24BDAC8D0];
  if (a4 < 0.0
    && !*((_DWORD *)a1 + 56)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 94, (uint64_t)"timestamp >= 0.0 || imu_filter_params_.imu_rate_mode != IMUFilterFixedRateHandling::EnforcedFixedRate", 101, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[5])
  {
LABEL_198:
    v128 = *((double *)a1 + 23);
    if (v128 <= 0.0 || (v129 = *((double *)a1 + 26), v129 < 0.0) || (v130 = *((double *)a1 + 25), v130 < 0.0))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 147, (uint64_t)"imu_filter_params_.imu_default_sample_time > 0.0 && imu_filter_params_.current_period_rel_tol >= 0.0 && imu_filter_params_.est_period_rel_tol >= 0.0", 148, (uint64_t)"Expected positive values", 24, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v128 = *((double *)a1 + 23);
      v130 = *((double *)a1 + 25);
      v129 = *((double *)a1 + 26);
    }
    v131 = *((double *)a1 + 31);
    v132 = vabdd_f64(a4 - *((double *)a1 + 29), v131);
    v133 = vabdd_f64(v128, v131);
    v134 = v129 * v128;
    v135 = v130 * v128;
    v136 = a1[5];
    if (!v136)
    {
      v132 = 0.0;
      v133 = 0.0;
    }
    v137 = v132 > v134;
    if (v133 >= v135)
      v137 = 1;
    if (v136)
      v138 = v137;
    else
      v138 = 1;
    if (v138)
      v139 = 0.0;
    else
      v139 = a4 - *((double *)a1 + 29);
    *a3 = v137;
    v140 = *((_QWORD *)a2 + 2);
    v141 = *a2;
    v142 = *a1 + 32 * a1[4];
    *(double *)v142 = a4;
    *(_OWORD *)(v142 + 8) = v141;
    *(_QWORD *)(v142 + 24) = v140;
    v143 = (a1[1] - *a1) >> 5;
    v144 = a1[5];
    v145 = a1[4] + 1;
    if (v145 >= v143)
      v146 = (a1[1] - *a1) >> 5;
    else
      v146 = 0;
    a1[4] = v145 - v146;
    if (v144 == v143)
    {
      v147 = a1[3] + 1;
      if (v147 < v143)
        v143 = 0;
      a1[3] = v147 - v143;
      v148 = *((double *)a1 + 31);
      v149 = *((double *)a1 + 22);
      if (v149 < 0.0)
        goto LABEL_223;
    }
    else
    {
      a1[5] = v144 + 1;
      v148 = *((double *)a1 + 31);
      v149 = *((double *)a1 + 22);
      if (v149 < 0.0)
        goto LABEL_223;
    }
    if (v149 <= 1.0)
    {
LABEL_224:
      *((double *)a1 + 31) = v148 * v149 + v139 * (1.0 - v149);
      return 1;
    }
LABEL_223:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 403, (uint64_t)"gain_imu_median_est >= 0.0 && gain_imu_median_est <= 1.0", 56, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    goto LABEL_224;
  }
  v10 = a1[4];
  if (v10)
  {
    v11 = *(double *)(*a1 + 32 * v10 - 32);
    if (v11 < a4)
      goto LABEL_7;
LABEL_15:
    if (!*((_BYTE *)a1 + 352))
      return 0;
    sub_20F3EAEF4(v170);
    if (**(int **)(v170[0] + 56) > 5)
      return 0;
    v16 = *(unsigned __int8 *)(v170[0] + 72);
    v17 = sub_20E8C31DC(v170[0], "OSLogSurrogateAppender", 1, 0);
    v18 = v17;
    if (!v16 && !v17)
      return 0;
    v161 = v170;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v163 = std::chrono::system_clock::now().__d_.__rep_;
    v164 = 5;
    v165 = "unknown file";
    v166 = 101;
    v168 = 0;
    v169 = 0;
    v167 = "unknown function";
    if (a1[4])
    {
      v159 = a1[4];
      v157 = *a1;
    }
    else
    {
      v157 = *a1;
      v159 = (a1[1] - *a1) >> 5;
    }
    v156 = v16;
    v19 = *v161;
    v20 = (const char *)(*v161 + 16);
    v153 = v20;
    if (*(char *)(*v161 + 39) < 0)
    {
      v20 = *(const char **)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 24);
    }
    else
    {
      v21 = *(unsigned __int8 *)(*v161 + 39);
    }
    v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (v174[0] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v23 = byte_254A4A4F8;
    else
      v23 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v24 = byte_254A4A4F8[23];
    else
      v24 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v23, v20);
    v25 = &object[8];
    if (v24 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v24 >= 0x17)
    {
      v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v26 = v24 | 7;
      v27 = v26 + 1;
      v25 = operator new(v26 + 1);
      *(_QWORD *)&object[16] = v24;
      *(_QWORD *)v174 = v27 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v25;
    }
    else
    {
      v174[7] = v24;
      if (!v24)
      {
LABEL_40:
        v25[v24] = 0;
        v174[8] = 1;
        v28 = &v174[16];
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v21 >= 0x17)
        {
          v29 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v29 = v21 | 7;
          v30 = v29 + 1;
          v28 = operator new(v29 + 1);
          v175 = v21;
          v176 = v30 | 0x8000000000000000;
          *(_QWORD *)&v174[16] = v28;
        }
        else
        {
          HIBYTE(v176) = v21;
          if (!v21)
            goto LABEL_48;
        }
        memmove(v28, v20, v21);
LABEL_48:
        v28[v21] = 0;
        v177 = 1;
        v31 = *(NSObject **)object;
        if (SHIBYTE(v176) < 0)
          operator delete(*(void **)&v174[16]);
        if (v174[8] && (v174[7] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        v32 = (uint64_t *)(v157 + 32 * v159 - 32);
        if (v18 && *(_QWORD *)(v18 + 24))
        {
          v33 = _os_log_pack_size();
          v34 = (std::__shared_weak_count_vtbl *)operator new(v33, (std::align_val_t)8uLL);
          v35 = (std::__shared_weak_count *)operator new();
          v36 = v35;
          v35->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v35->__shared_weak_owners_ = 0;
          v35[1].__vftable = v34;
          *(_QWORD *)object = v34;
          *(_QWORD *)&object[8] = v34;
          *(_QWORD *)&object[16] = v35;
          do
            v38 = __ldxr(p_shared_owners);
          while (__stxr(v38 + 1, p_shared_owners));
          memset(v174, 0, sizeof(v174));
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v36);
          }
          v40 = *(_QWORD *)object;
          v41 = _os_log_pack_fill();
          v42 = *v32;
          *(_DWORD *)v41 = 134218240;
          *(_QWORD *)(v41 + 4) = v42;
          *(_WORD *)(v41 + 12) = 2048;
          *(double *)(v41 + 14) = a4;
          v43 = operator new();
          v44 = *(unsigned __int8 *)(v19 + 39);
          v45 = v153;
          if ((v44 & 0x80u) != 0)
          {
            v45 = *(const char **)(v19 + 16);
            v44 = *(_QWORD *)(v19 + 24);
          }
          *(_QWORD *)v43 = v40;
          *(_OWORD *)(v43 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v43 + 24) = *(_OWORD *)v174;
          *(_QWORD *)v174 = 0;
          *(_QWORD *)&v174[8] = 0;
          *(_QWORD *)(v43 + 40) = v45;
          *(_QWORD *)(v43 + 48) = v44;
          *(_BYTE *)(v43 + 56) = 16;
          v171 = 0;
          v172 = v43;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), &v172);
          v46 = v172;
          v172 = 0;
          if (v46)
          {
            v47 = *(std::__shared_weak_count **)(v46 + 32);
            if (v47)
            {
              v48 = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = *(std::__shared_weak_count **)(v46 + 16);
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            MEMORY[0x212BC6398](v46, 0x10F0C40B62ED6C6);
            v53 = v171;
            v171 = 0;
            if (v53)
            {
              v54 = *(std::__shared_weak_count **)(v53 + 32);
              if (v54)
              {
                v55 = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              v57 = *(std::__shared_weak_count **)(v53 + 16);
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              MEMORY[0x212BC6398](v53, 0x10F0C40B62ED6C6);
            }
          }
          v60 = *(std::__shared_weak_count **)&v174[8];
          v61 = v156;
          if (*(_QWORD *)&v174[8])
          {
            v62 = (unint64_t *)(*(_QWORD *)&v174[8] + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v64 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v65 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
        }
        else
        {
          os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
          v67 = *v32;
          *(_DWORD *)object = 134218240;
          *(_QWORD *)&object[4] = v67;
          *(_WORD *)&object[12] = 2048;
          *(double *)&object[14] = a4;
          v68 = (void *)_os_log_send_and_compose_impl();
          v61 = v156;
          if (v68)
            free(v68);
        }
        if (v61)
        {
          v69 = a1[4];
          if (!v69)
            v69 = (a1[1] - *a1) >> 5;
          sub_20E8C003C((uint64_t)&v161, "Non-monotonic IMU sensor timestamps: prev=%lf, cur=%lf. Dropping this sample.", *(double *)(*a1 + 32 * v69 - 32), a4);
          sub_20E863570((uint64_t)&v161);
        }
        sub_20E863570((uint64_t)&v161);
        v70 = v169;
        if (v169)
        {
          v71 = (unint64_t *)&v169->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        return 0;
      }
    }
    memmove(v25, v23, v24);
    goto LABEL_40;
  }
  v11 = *(double *)(a1[1] - 32);
  if (v11 >= a4)
    goto LABEL_15;
LABEL_7:
  if (a4 - v11 <= a5)
    goto LABEL_198;
  if (*((_BYTE *)a1 + 352))
  {
    sub_20F3EAEF4(v170);
    if (**(int **)(v170[0] + 56) <= 3)
    {
      v12 = *(unsigned __int8 *)(v170[0] + 72);
      v13 = sub_20E8C31DC(v170[0], "OSLogSurrogateAppender", 1, 0);
      v14 = v13;
      if (v12 || v13)
      {
        v161 = v170;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v163 = std::chrono::system_clock::now().__d_.__rep_;
        v164 = 3;
        v165 = "unknown file";
        v166 = 114;
        v168 = 0;
        v169 = 0;
        v167 = "unknown function";
        v15 = a1[4];
        v155 = *a1;
        if (!v15)
          v15 = (a1[1] - *a1) >> 5;
        v73 = *v161;
        v152 = *v161;
        if (*(char *)(*v161 + 39) < 0)
        {
          v75 = *(const char **)(v73 + 16);
          v74 = *(_QWORD *)(v73 + 24);
        }
        else
        {
          v74 = *(unsigned __int8 *)(*v161 + 39);
          v75 = (const char *)(*v161 + 16);
        }
        v151 = *v161 + 16;
        v160 = v14;
        v154 = a1[5];
        v76 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (v174[0] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v77 = byte_254A4A4F8;
        else
          v77 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v78 = byte_254A4A4F8[23];
        else
          v78 = *(_QWORD *)&byte_254A4A4F8[8];
        v158 = v75;
        *(_QWORD *)object = os_log_create(v77, v75);
        v79 = &object[8];
        if (v78 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v78 >= 0x17)
        {
          v80 = v15;
          v81 = v12;
          v82 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v78 | 7) != 0x17)
            v82 = v78 | 7;
          v83 = v82 + 1;
          v79 = operator new(v82 + 1);
          *(_QWORD *)&object[16] = v78;
          *(_QWORD *)v174 = v83 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v79;
          v12 = v81;
          v15 = v80;
        }
        else
        {
          v174[7] = v78;
          if (!v78)
          {
LABEL_128:
            v79[v78] = 0;
            v174[8] = 1;
            v84 = &v174[16];
            if (v74 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v74 >= 0x17)
            {
              v85 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v74 | 7) != 0x17)
                v85 = v74 | 7;
              v86 = v85 + 1;
              v84 = operator new(v85 + 1);
              v175 = v74;
              v176 = v86 | 0x8000000000000000;
              *(_QWORD *)&v174[16] = v84;
            }
            else
            {
              HIBYTE(v176) = v74;
              if (!v74)
                goto LABEL_136;
            }
            memmove(v84, v158, v74);
LABEL_136:
            v84[v74] = 0;
            v177 = 1;
            v87 = *(NSObject **)object;
            if (SHIBYTE(v176) < 0)
              operator delete(*(void **)&v174[16]);
            if (v174[8] && (v174[7] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            v88 = (uint64_t *)(v155 + 32 * v15 - 32);
            if (v160 && *(_QWORD *)(v160 + 24))
            {
              v89 = _os_log_pack_size();
              v90 = (std::__shared_weak_count_vtbl *)operator new(v89, (std::align_val_t)8uLL);
              v91 = (std::__shared_weak_count *)operator new();
              v92 = v91;
              v91->__shared_owners_ = 0;
              v93 = (unint64_t *)&v91->__shared_owners_;
              v91->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v91->__shared_weak_owners_ = 0;
              v91[1].__vftable = v90;
              *(_QWORD *)object = v90;
              *(_QWORD *)&object[8] = v90;
              *(_QWORD *)&object[16] = v91;
              do
                v94 = __ldxr(v93);
              while (__stxr(v94 + 1, v93));
              memset(v174, 0, sizeof(v174));
              do
                v95 = __ldaxr(v93);
              while (__stlxr(v95 - 1, v93));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v92);
              }
              v96 = *(_QWORD *)object;
              v97 = _os_log_pack_fill();
              v98 = *v88;
              *(_DWORD *)v97 = 134218752;
              *(double *)(v97 + 4) = a5;
              *(_WORD *)(v97 + 12) = 2048;
              *(_QWORD *)(v97 + 14) = v154;
              *(_WORD *)(v97 + 22) = 2048;
              *(_QWORD *)(v97 + 24) = v98;
              *(_WORD *)(v97 + 32) = 2048;
              *(double *)(v97 + 34) = a4;
              v99 = operator new();
              v100 = *(unsigned __int8 *)(v152 + 39);
              v101 = v151;
              if ((v100 & 0x80u) != 0)
              {
                v101 = *(_QWORD *)(v152 + 16);
                v100 = *(_QWORD *)(v152 + 24);
              }
              *(_QWORD *)v99 = v96;
              *(_OWORD *)(v99 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v99 + 24) = *(_OWORD *)v174;
              *(_QWORD *)v174 = 0;
              *(_QWORD *)&v174[8] = 0;
              *(_QWORD *)(v99 + 40) = v101;
              *(_QWORD *)(v99 + 48) = v100;
              *(_BYTE *)(v99 + 56) = 1;
              v171 = 0;
              v172 = v99;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v160 + 24) + 40))(*(_QWORD *)(v160 + 24), &v172);
              v102 = v172;
              v172 = 0;
              if (v102)
              {
                v103 = *(std::__shared_weak_count **)(v102 + 32);
                if (v103)
                {
                  v104 = (unint64_t *)&v103->__shared_owners_;
                  do
                    v105 = __ldaxr(v104);
                  while (__stlxr(v105 - 1, v104));
                  if (!v105)
                  {
                    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                    std::__shared_weak_count::__release_weak(v103);
                  }
                }
                v106 = *(std::__shared_weak_count **)(v102 + 16);
                if (v106)
                {
                  v107 = (unint64_t *)&v106->__shared_owners_;
                  do
                    v108 = __ldaxr(v107);
                  while (__stlxr(v108 - 1, v107));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }
                MEMORY[0x212BC6398](v102, 0x10F0C40B62ED6C6);
                v109 = v171;
                v171 = 0;
                if (v109)
                {
                  v110 = *(std::__shared_weak_count **)(v109 + 32);
                  if (v110)
                  {
                    v111 = (unint64_t *)&v110->__shared_owners_;
                    do
                      v112 = __ldaxr(v111);
                    while (__stlxr(v112 - 1, v111));
                    if (!v112)
                    {
                      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                      std::__shared_weak_count::__release_weak(v110);
                    }
                  }
                  v113 = *(std::__shared_weak_count **)(v109 + 16);
                  if (v113)
                  {
                    v114 = (unint64_t *)&v113->__shared_owners_;
                    do
                      v115 = __ldaxr(v114);
                    while (__stlxr(v115 - 1, v114));
                    if (!v115)
                    {
                      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                      std::__shared_weak_count::__release_weak(v113);
                    }
                  }
                  MEMORY[0x212BC6398](v109, 0x10F0C40B62ED6C6);
                }
              }
              v116 = *(std::__shared_weak_count **)&v174[8];
              if (*(_QWORD *)&v174[8])
              {
                v117 = (unint64_t *)(*(_QWORD *)&v174[8] + 8);
                do
                  v118 = __ldaxr(v117);
                while (__stlxr(v118 - 1, v117));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
              v119 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v120 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
            }
            else
            {
              os_log_type_enabled(v87, OS_LOG_TYPE_INFO);
              v122 = *v88;
              *(_DWORD *)object = 134218752;
              *(double *)&object[4] = a5;
              *(_WORD *)&object[12] = 2048;
              *(_QWORD *)&object[14] = v154;
              *(_WORD *)&object[22] = 2048;
              *(_QWORD *)v174 = v122;
              *(_WORD *)&v174[8] = 2048;
              *(double *)&v174[10] = a4;
              v123 = (void *)_os_log_send_and_compose_impl();
              if (v123)
                free(v123);
            }
            if (v12)
            {
              v124 = a1[4];
              if (!v124)
                v124 = (a1[1] - *a1) >> 5;
              sub_20E8C003C((uint64_t)&v161, "Received IMU measurement exceeds maximum gap of %lf. IMU buffer size = %zu, last buffer sample timestamp = %lf, received imu sample timestamp = %lf", a5, a1[5], *(double *)(*a1 + 32 * v124 - 32), a4);
              sub_20E863570((uint64_t)&v161);
            }
            sub_20E863570((uint64_t)&v161);
            v125 = v169;
            if (v169)
            {
              v126 = (unint64_t *)&v169->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            goto LABEL_197;
          }
        }
        memmove(v79, v77, v78);
        goto LABEL_128;
      }
    }
  }
LABEL_197:
  if (*((_DWORD *)a1 + 56))
    goto LABEL_198;
  if (*((_BYTE *)a1 + 352))
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 118, (uint64_t)"", 0, (uint64_t)"Received IMU measurement exceeds maximum gap", 44, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return 0;
}

void sub_20F3EC428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a41)
  {
    if (a40 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F3EC470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E86E8C4(&a34);
  sub_20E86E8C4(&a33);
  sub_20E86E658((uint64_t)&a35);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F3EC4E4()
{
  JUMPOUT(0x20F3EC4ECLL);
}

void sub_20F3EC510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3EC528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3EC540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *object,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a42 && a41 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F3EC5D4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F3EC5E4()
{
  JUMPOUT(0x20F3EC5ECLL);
}

uint64_t sub_20F3EC5F4(uint64_t *a1, uint64_t a2, double *a3, uint64_t *a4)
{
  unint64_t v5;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  const char *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  const char *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  size_t v30;
  const char *v31;
  double v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  double v40;
  double v41;
  unint64_t v42;
  double *v43;
  unint64_t v44;
  uint64_t v45;
  double v46;
  unint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  double *v55;
  int64_t v56;
  unint64_t v57;
  double *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  double *v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  double *v73;
  double *v74;
  unint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  double *v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v92;
  uint64_t v93;
  char *v94;
  unsigned __int8 v95;
  const char *v96;
  size_t v97;
  _BYTE *v98;
  unint64_t v99;
  const char *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void **v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  size_t v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unsigned __int8 v138;
  const char *v139;
  size_t v140;
  _BYTE *v141;
  unint64_t v142;
  const char *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  void **v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  size_t v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  unint64_t *p_shared_owners;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  char *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  void *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  unsigned __int8 v187;
  const char *v188;
  size_t v189;
  _BYTE *v190;
  unint64_t v191;
  const char *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  void **v197;
  uint64_t v198;
  uint64_t v199;
  NSObject *v200;
  size_t v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  char *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  void *v232;
  unint64_t *v233;
  unsigned __int8 v234;
  uint64_t v235;
  const char *v236;
  NSObject *v237;
  unsigned __int8 v238;
  uint64_t v239;
  const char *v240;
  NSObject *v241;
  unsigned __int8 v242;
  uint64_t v243;
  const char *v244;
  NSObject *v245;
  float64x2_t v246;
  float64x2_t v247;
  double v248;
  double v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  unint64_t v258;
  double v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  __int128 v265;
  float64_t v266;
  uint64_t v267;
  unint64_t v268;
  double v269;
  double v270;
  uint64_t v271;
  double *v272;
  double *v273;
  unint64_t v274;
  unint64_t v275;
  double *v276;
  double *v277;
  double v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __int128 v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  int v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  char *v298;
  _QWORD *v299;
  unint64_t v300;
  uint64_t v301;
  BOOL v302;
  unint64_t v303;
  __int128 v304;
  unint64_t v305;
  __int128 v306;
  int v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  char *v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  __int128 v317;
  unint64_t v318;
  __int128 v319;
  unsigned __int8 v320;
  uint64_t v321;
  const char *v322;
  NSObject *v323;
  unsigned __int8 v324;
  uint64_t v325;
  const char *v326;
  NSObject *v327;
  int v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  size_t v333;
  const char *v334;
  unsigned __int8 v335;
  unsigned __int8 v336;
  const char *v337;
  size_t v338;
  _BYTE *v339;
  unint64_t v340;
  const char *v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void **v347;
  uint64_t v348;
  uint64_t v349;
  NSObject *v350;
  size_t v351;
  std::__shared_weak_count_vtbl *v352;
  std::__shared_weak_count *v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  char *v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  void *v383;
  unint64_t *v384;
  int v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t *v388;
  uint64_t v389;
  char *v390;
  unsigned __int8 v391;
  uint64_t v392;
  uint64_t *v393;
  NSObject *v394;
  double **v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  _BYTE v406[7];
  _BYTE v407[7];
  uint64_t *v408;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v410;
  int v411;
  const char *v412;
  int v413;
  const char *v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  uint64_t v417;
  char *category;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  _BYTE v422[24];
  __int128 v423;
  void **v424;
  size_t v425;
  unint64_t v426;
  char v427;
  uint64_t v428;

  v428 = *MEMORY[0x24BDAC8D0];
  v5 = a1[5];
  if (v5)
  {
    v7 = *((double *)a1 + 29);
    if (v7 == -1.0)
    {
      v8 = a1[4];
      if (v8)
      {
        v9 = *(double *)(*a1 + 32 * v8 - 32) - *((double *)a1 + 24);
        goto LABEL_5;
      }
      v9 = *(double *)(*a1 + 32 * ((a1[1] - *a1) >> 5) - 32) - *((double *)a1 + 24);
    }
    else
    {
      v9 = v7 - *((double *)a1 + 24);
      v8 = a1[4];
      if (v8)
      {
LABEL_5:
        v10 = *(double *)a1;
        v11 = *(double *)(*a1 + 32 * v8 - 32);
        a1[33] = a1[32];
        if (v5 <= 1)
        {
LABEL_6:
          if (!*((_BYTE *)a1 + 352))
            goto LABEL_475;
          sub_20F3EAEF4(&v417);
          if (**(int **)(v417 + 56) > 2)
            goto LABEL_475;
          v12 = *(unsigned __int8 *)(v417 + 72);
          v13 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
          v14 = v13;
          if (!v12 && !v13)
            goto LABEL_475;
          v408 = &v417;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v410 = std::chrono::system_clock::now().__d_.__rep_;
          v411 = 2;
          v412 = "unknown file";
          v413 = 300;
          v415 = 0;
          v416 = 0;
          v414 = "unknown function";
          v15 = v417;
          if (*(char *)(v417 + 39) < 0)
          {
            v17 = *(const char **)(v417 + 16);
            v16 = *(_QWORD *)(v417 + 24);
          }
          else
          {
            v16 = *(unsigned __int8 *)(v417 + 39);
            v17 = (const char *)(*v408 + 16);
          }
          v398 = *v408 + 16;
          v138 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v138 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v422);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
            if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
              operator delete(*(void **)v422);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v139 = byte_254A4A4F8;
          else
            v139 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v140 = byte_254A4A4F8[23];
          else
            v140 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v422 = os_log_create(v139, v17);
          v141 = &v422[8];
          if (v140 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v140 >= 0x17)
          {
            v142 = v14;
            v143 = v17;
            v144 = v15;
            v145 = v12;
            v146 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v140 | 7) != 0x17)
              v146 = v140 | 7;
            v147 = v146 + 1;
            v141 = operator new(v146 + 1);
            *(_QWORD *)&v422[16] = v140;
            *(_QWORD *)&v423 = v147 | 0x8000000000000000;
            *(_QWORD *)&v422[8] = v141;
            v12 = v145;
            v15 = v144;
            v17 = v143;
            v14 = v142;
          }
          else
          {
            BYTE7(v423) = v140;
            if (!v140)
            {
LABEL_209:
              v141[v140] = 0;
              BYTE8(v423) = 1;
              v148 = (void **)&v424;
              if (v16 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v16 >= 0x17)
              {
                v149 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v16 | 7) != 0x17)
                  v149 = v16 | 7;
                v150 = v149 + 1;
                v148 = (void **)operator new(v149 + 1);
                v425 = v16;
                v426 = v150 | 0x8000000000000000;
                v424 = v148;
              }
              else
              {
                HIBYTE(v426) = v16;
                if (!v16)
                  goto LABEL_217;
              }
              memmove(v148, v17, v16);
LABEL_217:
              *((_BYTE *)v148 + v16) = 0;
              v427 = 1;
              v151 = *(NSObject **)v422;
              if (SHIBYTE(v426) < 0)
                operator delete(v424);
              if (BYTE8(v423) && SBYTE7(v423) < 0)
                operator delete(*(void **)&v422[8]);
              if (*(_QWORD *)v422)
                os_release(*(void **)v422);
              if (v14 && *(_QWORD *)(v14 + 24))
              {
                v152 = _os_log_pack_size();
                v153 = (std::__shared_weak_count_vtbl *)operator new(v152, (std::align_val_t)8uLL);
                v154 = (std::__shared_weak_count *)operator new();
                v155 = v154;
                v154->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v154->__shared_owners_;
                v154->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v154->__shared_weak_owners_ = 0;
                v154[1].__vftable = v153;
                *(_QWORD *)v422 = v153;
                *(_QWORD *)&v422[8] = v153;
                *(_QWORD *)&v422[16] = v154;
                do
                  v157 = __ldxr(p_shared_owners);
                while (__stxr(v157 + 1, p_shared_owners));
                v423 = 0uLL;
                v424 = 0;
                do
                  v158 = __ldaxr(p_shared_owners);
                while (__stlxr(v158 - 1, p_shared_owners));
                if (!v158)
                {
                  ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                  std::__shared_weak_count::__release_weak(v155);
                }
                v159 = *(_QWORD *)v422;
                *(_WORD *)_os_log_pack_fill() = 0;
                v160 = operator new();
                v161 = *(unsigned __int8 *)(v15 + 39);
                v162 = v398;
                if ((v161 & 0x80u) != 0)
                {
                  v162 = *(_QWORD *)(v15 + 16);
                  v161 = *(_QWORD *)(v15 + 24);
                }
                *(_QWORD *)v160 = v159;
                *(_OWORD *)(v160 + 8) = *(_OWORD *)&v422[8];
                *(_QWORD *)&v422[8] = 0;
                *(_QWORD *)&v422[16] = 0;
                *(_OWORD *)(v160 + 24) = v423;
                v423 = 0uLL;
                *(_QWORD *)(v160 + 40) = v162;
                *(_QWORD *)(v160 + 48) = v161;
                *(_BYTE *)(v160 + 56) = 2;
                category = 0;
                v420 = v160;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), &v420);
                v163 = v420;
                v420 = 0;
                if (v163)
                {
                  v164 = *(std::__shared_weak_count **)(v163 + 32);
                  if (v164)
                  {
                    v165 = (unint64_t *)&v164->__shared_owners_;
                    do
                      v166 = __ldaxr(v165);
                    while (__stlxr(v166 - 1, v165));
                    if (!v166)
                    {
                      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                      std::__shared_weak_count::__release_weak(v164);
                    }
                  }
                  v167 = *(std::__shared_weak_count **)(v163 + 16);
                  if (v167)
                  {
                    v168 = (unint64_t *)&v167->__shared_owners_;
                    do
                      v169 = __ldaxr(v168);
                    while (__stlxr(v169 - 1, v168));
                    if (!v169)
                    {
                      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                      std::__shared_weak_count::__release_weak(v167);
                    }
                  }
                  MEMORY[0x212BC6398](v163, 0x10F0C40B62ED6C6);
                  v170 = category;
                  category = 0;
                  if (v170)
                  {
                    v171 = (std::__shared_weak_count *)*((_QWORD *)v170 + 4);
                    if (v171)
                    {
                      v172 = (unint64_t *)&v171->__shared_owners_;
                      do
                        v173 = __ldaxr(v172);
                      while (__stlxr(v173 - 1, v172));
                      if (!v173)
                      {
                        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                        std::__shared_weak_count::__release_weak(v171);
                      }
                    }
                    v174 = (std::__shared_weak_count *)*((_QWORD *)v170 + 2);
                    if (v174)
                    {
                      v175 = (unint64_t *)&v174->__shared_owners_;
                      do
                        v176 = __ldaxr(v175);
                      while (__stlxr(v176 - 1, v175));
                      if (!v176)
                      {
                        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                        std::__shared_weak_count::__release_weak(v174);
                      }
                    }
                    MEMORY[0x212BC6398](v170, 0x10F0C40B62ED6C6);
                  }
                }
                v177 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
                if (*((_QWORD *)&v423 + 1))
                {
                  v178 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
                  do
                    v179 = __ldaxr(v178);
                  while (__stlxr(v179 - 1, v178));
                  if (!v179)
                  {
                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                    std::__shared_weak_count::__release_weak(v177);
                  }
                }
                v180 = *(std::__shared_weak_count **)&v422[16];
                if (*(_QWORD *)&v422[16])
                {
                  v181 = (unint64_t *)(*(_QWORD *)&v422[16] + 8);
                  do
                    v182 = __ldaxr(v181);
                  while (__stlxr(v182 - 1, v181));
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                    std::__shared_weak_count::__release_weak(v180);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG);
                *(_WORD *)v422 = 0;
                v183 = (void *)_os_log_send_and_compose_impl();
                if (v183)
                  free(v183);
              }
              if (v12)
              {
                sub_20E8C003C((uint64_t)&v408, "ResampleIMUMeasurement Called with < 2 IMU measurements.  Skipping Resampling");
                sub_20E863570((uint64_t)&v408);
              }
              sub_20E863570((uint64_t)&v408);
              v184 = v416;
              if (!v416)
                goto LABEL_475;
              v185 = (unint64_t *)&v416->__shared_owners_;
              do
                v186 = __ldaxr(v185);
              while (__stlxr(v186 - 1, v185));
              goto LABEL_356;
            }
          }
          memmove(v141, v139, v140);
          goto LABEL_209;
        }
        goto LABEL_22;
      }
    }
    v10 = *(double *)a1;
    v11 = *(double *)(*a1 + 32 * ((a1[1] - *a1) >> 5) - 32);
    a1[33] = a1[32];
    if (v5 <= 1)
      goto LABEL_6;
LABEL_22:
    if (v8)
    {
      if (*(double *)(*(_QWORD *)&v10 + 32 * v8 - 32) < v11)
      {
LABEL_24:
        if (!*((_BYTE *)a1 + 352))
          goto LABEL_475;
        sub_20F3EAEF4(&v417);
        if (**(int **)(v417 + 56) > 5)
          goto LABEL_475;
        v26 = *(unsigned __int8 *)(v417 + 72);
        v27 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
        v28 = v27;
        if (!v26 && !v27)
          goto LABEL_475;
        v408 = &v417;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v410 = std::chrono::system_clock::now().__d_.__rep_;
        v411 = 5;
        v412 = "unknown file";
        v413 = 308;
        v415 = 0;
        v416 = 0;
        v414 = "unknown function";
        v29 = v417;
        if (*(char *)(v417 + 39) < 0)
        {
          v31 = *(const char **)(v417 + 16);
          v30 = *(_QWORD *)(v417 + 24);
        }
        else
        {
          v30 = *(unsigned __int8 *)(v417 + 39);
          v31 = (const char *)(*v408 + 16);
        }
        v399 = *v408 + 16;
        v187 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v187 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v422);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
          if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
            operator delete(*(void **)v422);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v188 = byte_254A4A4F8;
        else
          v188 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v189 = byte_254A4A4F8[23];
        else
          v189 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v422 = os_log_create(v188, v31);
        v190 = &v422[8];
        if (v189 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v189 >= 0x17)
        {
          v191 = v28;
          v192 = v31;
          v193 = v29;
          v194 = v26;
          v195 = (v189 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v189 | 7) != 0x17)
            v195 = v189 | 7;
          v196 = v195 + 1;
          v190 = operator new(v195 + 1);
          *(_QWORD *)&v422[16] = v189;
          *(_QWORD *)&v423 = v196 | 0x8000000000000000;
          *(_QWORD *)&v422[8] = v190;
          v26 = v194;
          v29 = v193;
          v31 = v192;
          v28 = v191;
        }
        else
        {
          BYTE7(v423) = v189;
          if (!v189)
          {
LABEL_291:
            v190[v189] = 0;
            BYTE8(v423) = 1;
            v197 = (void **)&v424;
            if (v30 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v30 >= 0x17)
            {
              v198 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17)
                v198 = v30 | 7;
              v199 = v198 + 1;
              v197 = (void **)operator new(v198 + 1);
              v425 = v30;
              v426 = v199 | 0x8000000000000000;
              v424 = v197;
            }
            else
            {
              HIBYTE(v426) = v30;
              if (!v30)
                goto LABEL_299;
            }
            memmove(v197, v31, v30);
LABEL_299:
            *((_BYTE *)v197 + v30) = 0;
            v427 = 1;
            v200 = *(NSObject **)v422;
            if (SHIBYTE(v426) < 0)
              operator delete(v424);
            if (BYTE8(v423) && SBYTE7(v423) < 0)
              operator delete(*(void **)&v422[8]);
            if (*(_QWORD *)v422)
              os_release(*(void **)v422);
            if (v28 && *(_QWORD *)(v28 + 24))
            {
              v201 = _os_log_pack_size();
              v202 = (std::__shared_weak_count_vtbl *)operator new(v201, (std::align_val_t)8uLL);
              v203 = (std::__shared_weak_count *)operator new();
              v204 = v203;
              v203->__shared_owners_ = 0;
              v205 = (unint64_t *)&v203->__shared_owners_;
              v203->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v203->__shared_weak_owners_ = 0;
              v203[1].__vftable = v202;
              *(_QWORD *)v422 = v202;
              *(_QWORD *)&v422[8] = v202;
              *(_QWORD *)&v422[16] = v203;
              do
                v206 = __ldxr(v205);
              while (__stxr(v206 + 1, v205));
              v423 = 0uLL;
              v424 = 0;
              do
                v207 = __ldaxr(v205);
              while (__stlxr(v207 - 1, v205));
              if (!v207)
              {
                ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                std::__shared_weak_count::__release_weak(v204);
              }
              v208 = *(_QWORD *)v422;
              *(_WORD *)_os_log_pack_fill() = 0;
              v209 = operator new();
              v210 = *(unsigned __int8 *)(v29 + 39);
              v211 = v399;
              if ((v210 & 0x80u) != 0)
              {
                v211 = *(_QWORD *)(v29 + 16);
                v210 = *(_QWORD *)(v29 + 24);
              }
              *(_QWORD *)v209 = v208;
              *(_OWORD *)(v209 + 8) = *(_OWORD *)&v422[8];
              *(_QWORD *)&v422[8] = 0;
              *(_QWORD *)&v422[16] = 0;
              *(_OWORD *)(v209 + 24) = v423;
              v423 = 0uLL;
              *(_QWORD *)(v209 + 40) = v211;
              *(_QWORD *)(v209 + 48) = v210;
              *(_BYTE *)(v209 + 56) = 16;
              category = 0;
              v420 = v209;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v28 + 24) + 40))(*(_QWORD *)(v28 + 24), &v420);
              v212 = v420;
              v420 = 0;
              if (v212)
              {
                v213 = *(std::__shared_weak_count **)(v212 + 32);
                if (v213)
                {
                  v214 = (unint64_t *)&v213->__shared_owners_;
                  do
                    v215 = __ldaxr(v214);
                  while (__stlxr(v215 - 1, v214));
                  if (!v215)
                  {
                    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                    std::__shared_weak_count::__release_weak(v213);
                  }
                }
                v216 = *(std::__shared_weak_count **)(v212 + 16);
                if (v216)
                {
                  v217 = (unint64_t *)&v216->__shared_owners_;
                  do
                    v218 = __ldaxr(v217);
                  while (__stlxr(v218 - 1, v217));
                  if (!v218)
                  {
                    ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                    std::__shared_weak_count::__release_weak(v216);
                  }
                }
                MEMORY[0x212BC6398](v212, 0x10F0C40B62ED6C6);
                v219 = category;
                category = 0;
                if (v219)
                {
                  v220 = (std::__shared_weak_count *)*((_QWORD *)v219 + 4);
                  if (v220)
                  {
                    v221 = (unint64_t *)&v220->__shared_owners_;
                    do
                      v222 = __ldaxr(v221);
                    while (__stlxr(v222 - 1, v221));
                    if (!v222)
                    {
                      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                      std::__shared_weak_count::__release_weak(v220);
                    }
                  }
                  v223 = (std::__shared_weak_count *)*((_QWORD *)v219 + 2);
                  if (v223)
                  {
                    v224 = (unint64_t *)&v223->__shared_owners_;
                    do
                      v225 = __ldaxr(v224);
                    while (__stlxr(v225 - 1, v224));
                    if (!v225)
                    {
                      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                      std::__shared_weak_count::__release_weak(v223);
                    }
                  }
                  MEMORY[0x212BC6398](v219, 0x10F0C40B62ED6C6);
                }
              }
              v226 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
              if (*((_QWORD *)&v423 + 1))
              {
                v227 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
                do
                  v228 = __ldaxr(v227);
                while (__stlxr(v228 - 1, v227));
                if (!v228)
                {
                  ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                  std::__shared_weak_count::__release_weak(v226);
                }
              }
              v229 = *(std::__shared_weak_count **)&v422[16];
              if (*(_QWORD *)&v422[16])
              {
                v230 = (unint64_t *)(*(_QWORD *)&v422[16] + 8);
                do
                  v231 = __ldaxr(v230);
                while (__stlxr(v231 - 1, v230));
                if (!v231)
                {
                  ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                  std::__shared_weak_count::__release_weak(v229);
                }
              }
            }
            else
            {
              os_log_type_enabled(v200, OS_LOG_TYPE_ERROR);
              *(_WORD *)v422 = 0;
              v232 = (void *)_os_log_send_and_compose_impl();
              if (v232)
                free(v232);
            }
            if (v26)
            {
              sub_20E8C003C((uint64_t)&v408, "end_sample_timestamp larger than last sample in measurement buffer");
              sub_20E863570((uint64_t)&v408);
            }
            sub_20E863570((uint64_t)&v408);
            v184 = v416;
            if (!v416)
              goto LABEL_475;
            v233 = (unint64_t *)&v416->__shared_owners_;
            do
              v186 = __ldaxr(v233);
            while (__stlxr(v186 - 1, v233));
LABEL_356:
            if (!v186)
            {
              ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
              std::__shared_weak_count::__release_weak(v184);
            }
            goto LABEL_475;
          }
        }
        memmove(v190, v188, v189);
        goto LABEL_291;
      }
    }
    else if (*(double *)(*(_QWORD *)&v10 + 32 * ((a1[1] - *(_QWORD *)&v10) >> 5) - 32) < v11)
    {
      goto LABEL_24;
    }
    v32 = *((double *)a1 + 23);
    if (v32 < 0.0001)
    {
      if (*((_BYTE *)a1 + 352))
      {
        sub_20F3EAEF4(&v417);
        if (**(int **)(v417 + 56) <= 5)
        {
          v33 = *(unsigned __int8 *)(v417 + 72);
          v34 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
          v35 = v34 ? v34 + 16 : 0;
          if (v33 || v34)
          {
            v408 = &v417;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v410 = std::chrono::system_clock::now().__d_.__rep_;
            v411 = 5;
            v412 = "unknown file";
            v413 = 315;
            v415 = 0;
            v416 = 0;
            v414 = "unknown function";
            v36 = (uint64_t *)(v417 + 16);
            if (*(char *)(v417 + 39) < 0)
            {
              v38 = *(char **)(v417 + 16);
              v37 = *(_QWORD *)(v417 + 24);
            }
            else
            {
              v37 = *(unsigned __int8 *)(v417 + 39);
              v38 = (char *)(v417 + 16);
            }
            category = v38;
            v419 = v37;
            v234 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v234 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v422);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
              if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
                operator delete(*(void **)v422);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v235 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v236 = byte_254A4A4F8;
            }
            else
            {
              v235 = *(_QWORD *)&byte_254A4A4F8[8];
              v236 = *(const char **)byte_254A4A4F8;
            }
            v420 = (uint64_t)v236;
            v421 = v235;
            *(_QWORD *)v422 = os_log_create(v236, category);
            sub_20E86E5A8(&v422[8], (uint64_t)&v420);
            sub_20E86E5A8(&v424, (uint64_t)&category);
            v237 = *(NSObject **)v422;
            sub_20E86E44C((uint64_t)v422);
            sub_20F3FE260(v35, v36, v237, OS_LOG_TYPE_ERROR);
            if (v33)
            {
              sub_20E8C003C((uint64_t)&v408, "IMU interpolation time delta less than 1e-4");
              sub_20E863570((uint64_t)&v408);
            }
            goto LABEL_474;
          }
        }
      }
      goto LABEL_475;
    }
    v39 = 32 * a1[3];
    if (*(double *)(*(_QWORD *)&v10 + v39) <= v9)
      v40 = v9;
    else
      v40 = *(double *)(*(_QWORD *)&v10 + v39);
    if (v11 - v40 <= 0.0)
    {
      if (!*((_BYTE *)a1 + 352))
        goto LABEL_475;
      sub_20F3EAEF4(&v417);
      if (**(int **)(v417 + 56) > 5)
        goto LABEL_475;
      v67 = *(unsigned __int8 *)(v417 + 72);
      v68 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
      v69 = v68 ? v68 + 16 : 0;
      if (!v67 && !v68)
        goto LABEL_475;
      v408 = &v417;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v410 = std::chrono::system_clock::now().__d_.__rep_;
      v411 = 5;
      v412 = "unknown file";
      v413 = 330;
      v415 = 0;
      v416 = 0;
      v414 = "unknown function";
      v70 = (uint64_t *)(v417 + 16);
      if (*(char *)(v417 + 39) < 0)
      {
        v72 = *(char **)(v417 + 16);
        v71 = *(_QWORD *)(v417 + 24);
      }
      else
      {
        v71 = *(unsigned __int8 *)(v417 + 39);
        v72 = (char *)(v417 + 16);
      }
      category = v72;
      v419 = v71;
      v238 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v238 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v422);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
        if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
          operator delete(*(void **)v422);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v239 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v240 = byte_254A4A4F8;
      }
      else
      {
        v239 = *(_QWORD *)&byte_254A4A4F8[8];
        v240 = *(const char **)byte_254A4A4F8;
      }
      v420 = (uint64_t)v240;
      v421 = v239;
      *(_QWORD *)v422 = os_log_create(v240, category);
      sub_20E86E5A8(&v422[8], (uint64_t)&v420);
      sub_20E86E5A8(&v424, (uint64_t)&category);
      v241 = *(NSObject **)v422;
      sub_20E86E44C((uint64_t)v422);
      sub_20F3FE64C(v69, v70, v241, OS_LOG_TYPE_ERROR);
      if (v67)
      {
        sub_20E8C003C((uint64_t)&v408, "Sampling interval must be > 0.0");
        sub_20E863570((uint64_t)&v408);
      }
      goto LABEL_474;
    }
    if (v32 == 0.0)
      v41 = 1.0;
    else
      v41 = *((double *)a1 + 23);
    v42 = (unint64_t)(ceil((v11 - v40) / v41) + 1.0);
    v397 = (double **)(a1 + 38);
    v43 = (double *)a1[38];
    a1[39] = (uint64_t)v43;
    if (!v42)
      goto LABEL_100;
    v44 = 0;
    while (1)
    {
      v46 = v11 - v32 * (double)v44;
      if (v46 < v40)
        goto LABEL_53;
      v47 = a1[40];
      if ((unint64_t)v43 >= v47)
        break;
      *v43 = v46;
      v45 = (uint64_t)(v43 + 1);
LABEL_52:
      a1[39] = v45;
      v43 = (double *)v45;
LABEL_53:
      if (++v44 == v42)
      {
        v73 = *v397;
        v74 = v43 - 1;
        if (*v397 != v43 && v74 > v73)
        {
          v76 = (unint64_t)(v73 + 1);
          do
          {
            v77 = *(_QWORD *)(v76 - 8);
            *(double *)(v76 - 8) = *v74;
            *(_QWORD *)v74-- = v77;
            v78 = v76 >= (unint64_t)v74;
            v76 += 8;
          }
          while (!v78);
        }
        v43 = v73;
LABEL_100:
        v79 = a1[5];
        if (v79)
        {
          v80 = 0;
          v81 = 0;
          v82 = a1[5];
          do
          {
            v83 = v82 >> 1;
            v84 = (v82 >> 1) + v81;
            if (*(double *)(*a1 + 32 * ((v84 + a1[3]) % (unint64_t)((a1[1] - *a1) >> 5))) <= *v43)
            {
              v81 = v84 + 1;
              v80 = v84 + 1 == v79;
              v83 = v82 + ~v83;
            }
            v82 = v83;
          }
          while (v83);
          if (!v80 && v81)
          {
            v85 = v81 - 1;
            v86 = v79 - (v81 - 1);
            v87 = a3;
            goto LABEL_383;
          }
        }
        v87 = a3;
        if (*((_BYTE *)a1 + 352))
        {
          sub_20F3EAEF4(&v417);
          if (**(int **)(v417 + 56) <= 2)
          {
            v88 = *(unsigned __int8 *)(v417 + 72);
            v89 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
            v90 = v89 ? v89 + 16 : 0;
            if (v88 || v89 != 0)
            {
              v408 = &v417;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v410 = std::chrono::system_clock::now().__d_.__rep_;
              v411 = 2;
              v412 = "unknown file";
              v413 = 353;
              v415 = 0;
              v416 = 0;
              v414 = "unknown function";
              v92 = (uint64_t *)(v417 + 16);
              if (*(char *)(v417 + 39) < 0)
              {
                v94 = *(char **)(v417 + 16);
                v93 = *(_QWORD *)(v417 + 24);
              }
              else
              {
                v93 = *(unsigned __int8 *)(v417 + 39);
                v94 = (char *)(*v408 + 16);
              }
              category = v94;
              v419 = v93;
              v242 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v242 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v422);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
                if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
                  operator delete(*(void **)v422);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v87 = a3;
              }
              v243 = byte_254A4A4F8[23];
              if (byte_254A4A4F8[23] >= 0)
              {
                v244 = byte_254A4A4F8;
              }
              else
              {
                v243 = *(_QWORD *)&byte_254A4A4F8[8];
                v244 = *(const char **)byte_254A4A4F8;
              }
              v420 = (uint64_t)v244;
              v421 = v243;
              *(_QWORD *)v422 = os_log_create(v244, category);
              sub_20E86E5A8(&v422[8], (uint64_t)&v420);
              sub_20E86E5A8(&v424, (uint64_t)&category);
              v245 = *(NSObject **)v422;
              sub_20E86E44C((uint64_t)v422);
              sub_20F3FEA38(v90, v92, v245, OS_LOG_TYPE_DEBUG);
              if (v88)
              {
                sub_20E8C003C((uint64_t)&v408, "No new samples beyond first sample time. Use 1st sample in buffer");
                sub_20E863570((uint64_t)&v408);
              }
              sub_20E863714((uint64_t)&v408);
            }
          }
          v79 = a1[5];
        }
        if (!v79)
        {
          sub_20F3EAFE8(a1, a1);
          v299 = (_QWORD *)a1[32];
          v263 = v299;
          v256 = v299;
          goto LABEL_443;
        }
        v85 = 0;
        v86 = v79;
LABEL_383:
        v246.f64[0] = sub_20F3EAFE8(a1, a1);
        if (v86 < 2)
        {
          v253 = a1[5];
          if (v85)
            v254 = v79 - v85;
          else
            v254 = a1[5];
          v255 = a1[34];
          v256 = (_QWORD *)a1[32];
          if (v254 > (v255 - (uint64_t)v256) >> 5)
          {
            if (v256)
            {
              a1[33] = (uint64_t)v256;
              operator delete(v256);
              v255 = 0;
              a1[32] = 0;
              a1[33] = 0;
              a1[34] = 0;
            }
            if (v254 >> 59)
              sub_20E867F44();
            v257 = v255 >> 4;
            if (v255 >> 4 <= v254)
              v257 = v254;
            if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFE0)
              v258 = 0x7FFFFFFFFFFFFFFLL;
            else
              v258 = v257;
            if (v258 >> 59)
              sub_20E867F44();
            v256 = operator new(32 * v258);
            a1[32] = (uint64_t)v256;
            a1[33] = (uint64_t)v256;
            a1[34] = (uint64_t)&v256[4 * v258];
            v259 = *(double *)a1;
            v260 = (a1[1] - *a1) >> 5;
            v261 = a1[5] - v85;
            v262 = v85 + a1[3];
            v263 = v256;
            do
            {
              v264 = *(_QWORD *)&v259 + 32 * (v262 % v260);
              *v263 = *(_QWORD *)v264;
              v265 = *(_OWORD *)(v264 + 8);
              v263[3] = *(_QWORD *)(v264 + 24);
              *(_OWORD *)(v263 + 1) = v265;
              v263 += 4;
              ++v262;
              --v261;
            }
            while (v261);
LABEL_442:
            v299 = v256;
LABEL_443:
            a1[33] = (uint64_t)v256 + (char *)v263 - (char *)v299;
            if (*((_BYTE *)a1 + 352))
            {
              sub_20F3EAEF4(&v417);
              if (**(int **)(v417 + 56) <= 2)
              {
                v307 = *(unsigned __int8 *)(v417 + 72);
                v308 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
                v309 = v308 ? v308 + 16 : 0;
                if (v307 || v308)
                {
                  v408 = &v417;
                  rep = std::chrono::steady_clock::now().__d_.__rep_;
                  v410 = std::chrono::system_clock::now().__d_.__rep_;
                  v411 = 2;
                  v412 = "unknown file";
                  v413 = 374;
                  v415 = 0;
                  v416 = 0;
                  v414 = "unknown function";
                  v310 = *v408;
                  v311 = (uint64_t *)(*v408 + 16);
                  if (*(char *)(*v408 + 39) < 0)
                  {
                    v313 = *(char **)(v310 + 16);
                    v312 = *(_QWORD *)(v310 + 24);
                  }
                  else
                  {
                    v312 = *(unsigned __int8 *)(*v408 + 39);
                    v313 = (char *)(*v408 + 16);
                  }
                  category = v313;
                  v419 = v312;
                  v320 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v320 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)v422);
                    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
                    if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
                      operator delete(*(void **)v422);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                  }
                  v321 = byte_254A4A4F8[23];
                  if (byte_254A4A4F8[23] >= 0)
                  {
                    v322 = byte_254A4A4F8;
                  }
                  else
                  {
                    v321 = *(_QWORD *)&byte_254A4A4F8[8];
                    v322 = *(const char **)byte_254A4A4F8;
                  }
                  v420 = (uint64_t)v322;
                  v421 = v321;
                  *(_QWORD *)v422 = os_log_create(v322, category);
                  sub_20E86E5A8(&v422[8], (uint64_t)&v420);
                  sub_20E86E5A8(&v424, (uint64_t)&category);
                  v323 = *(NSObject **)v422;
                  sub_20E86E44C((uint64_t)v422);
                  sub_20F3FEE24(v309, v311, v323, OS_LOG_TYPE_DEBUG);
                  if (v307)
                  {
                    sub_20E8C003C((uint64_t)&v408, "< 2 samples in resampled_imu buffer.  Not adding any samples to high speed sensor buffer");
                    sub_20E863570((uint64_t)&v408);
                  }
                  goto LABEL_474;
                }
              }
            }
LABEL_475:
            if (!*((_BYTE *)a1 + 352))
              return 0;
            sub_20F3EAEF4(&v420);
            if (**(int **)(v420 + 56) > 2)
              return 0;
            v328 = *(unsigned __int8 *)(v420 + 72);
            v329 = sub_20E8C31DC(v420, "OSLogSurrogateAppender", 1, 0);
            v330 = v329;
            if (!v328 && !v329)
              return 0;
            v408 = &v420;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v410 = std::chrono::system_clock::now().__d_.__rep_;
            v411 = 2;
            v412 = "unknown file";
            v413 = 248;
            v415 = 0;
            v416 = 0;
            v414 = "unknown function";
            v331 = *v408;
            v332 = *v408 + 16;
            if (*(char *)(*v408 + 39) < 0)
            {
              v334 = *(const char **)(v331 + 16);
              v333 = *(_QWORD *)(v331 + 24);
              v336 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v336 & 1) == 0)
              {
LABEL_587:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)v422);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
                  if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
                    operator delete(*(void **)v422);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v333 = *(unsigned __int8 *)(*v408 + 39);
              v334 = (const char *)(*v408 + 16);
              v335 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v335 & 1) == 0)
                goto LABEL_587;
            }
            if (byte_254A4A4F8[23] >= 0)
              v337 = byte_254A4A4F8;
            else
              v337 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v338 = byte_254A4A4F8[23];
            else
              v338 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v422 = os_log_create(v337, v334);
            v339 = &v422[8];
            if (v338 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v338 >= 0x17)
            {
              v340 = v330;
              v341 = v334;
              v342 = v331;
              v343 = v328;
              v344 = v332;
              v345 = (v338 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v338 | 7) != 0x17)
                v345 = v338 | 7;
              v346 = v345 + 1;
              v339 = operator new(v345 + 1);
              *(_QWORD *)&v422[16] = v338;
              *(_QWORD *)&v423 = v346 | 0x8000000000000000;
              *(_QWORD *)&v422[8] = v339;
              v332 = v344;
              v328 = v343;
              v331 = v342;
              v334 = v341;
              v330 = v340;
            }
            else
            {
              BYTE7(v423) = v338;
              if (!v338)
              {
LABEL_497:
                v339[v338] = 0;
                BYTE8(v423) = 1;
                v347 = (void **)&v424;
                if (v333 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v333 >= 0x17)
                {
                  v348 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v333 | 7) != 0x17)
                    v348 = v333 | 7;
                  v349 = v348 + 1;
                  v347 = (void **)operator new(v348 + 1);
                  v425 = v333;
                  v426 = v349 | 0x8000000000000000;
                  v424 = v347;
                }
                else
                {
                  HIBYTE(v426) = v333;
                  if (!v333)
                  {
LABEL_505:
                    *((_BYTE *)v347 + v333) = 0;
                    v427 = 1;
                    v350 = *(NSObject **)v422;
                    if (SHIBYTE(v426) < 0)
                      operator delete(v424);
                    if (BYTE8(v423) && SBYTE7(v423) < 0)
                      operator delete(*(void **)&v422[8]);
                    if (*(_QWORD *)v422)
                      os_release(*(void **)v422);
                    if (v330 && *(_QWORD *)(v330 + 24))
                    {
                      v351 = _os_log_pack_size();
                      v352 = (std::__shared_weak_count_vtbl *)operator new(v351, (std::align_val_t)8uLL);
                      v353 = (std::__shared_weak_count *)operator new();
                      v354 = v353;
                      v353->__shared_owners_ = 0;
                      v355 = (unint64_t *)&v353->__shared_owners_;
                      v353->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v353->__shared_weak_owners_ = 0;
                      v353[1].__vftable = v352;
                      *(_QWORD *)v422 = v352;
                      *(_QWORD *)&v422[8] = v352;
                      *(_QWORD *)&v422[16] = v353;
                      do
                        v356 = __ldxr(v355);
                      while (__stxr(v356 + 1, v355));
                      v423 = 0uLL;
                      v424 = 0;
                      do
                        v357 = __ldaxr(v355);
                      while (__stlxr(v357 - 1, v355));
                      if (!v357)
                      {
                        ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                        std::__shared_weak_count::__release_weak(v354);
                      }
                      v358 = *(_QWORD *)v422;
                      v359 = _os_log_pack_fill();
                      *(_DWORD *)v359 = 134217984;
                      *(double *)(v359 + 4) = v11;
                      v360 = operator new();
                      v361 = *(unsigned __int8 *)(v331 + 39);
                      if ((v361 & 0x80u) == 0)
                        v362 = v332;
                      else
                        v362 = *(_QWORD *)(v331 + 16);
                      if ((v361 & 0x80u) != 0)
                        v361 = *(_QWORD *)(v331 + 24);
                      *(_QWORD *)v360 = v358;
                      *(_OWORD *)(v360 + 8) = *(_OWORD *)&v422[8];
                      *(_QWORD *)&v422[8] = 0;
                      *(_QWORD *)&v422[16] = 0;
                      *(_OWORD *)(v360 + 24) = v423;
                      v423 = 0uLL;
                      *(_QWORD *)(v360 + 40) = v362;
                      *(_QWORD *)(v360 + 48) = v361;
                      *(_BYTE *)(v360 + 56) = 2;
                      v400 = 0;
                      v403 = (uint64_t *)v360;
                      (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v330 + 24) + 40))(*(_QWORD *)(v330 + 24), &v403);
                      v363 = v403;
                      v403 = 0;
                      if (v363)
                      {
                        v364 = (std::__shared_weak_count *)v363[4];
                        if (v364)
                        {
                          v365 = (unint64_t *)&v364->__shared_owners_;
                          do
                            v366 = __ldaxr(v365);
                          while (__stlxr(v366 - 1, v365));
                          if (!v366)
                          {
                            ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                            std::__shared_weak_count::__release_weak(v364);
                          }
                        }
                        v367 = (std::__shared_weak_count *)v363[2];
                        if (v367)
                        {
                          v368 = (unint64_t *)&v367->__shared_owners_;
                          do
                            v369 = __ldaxr(v368);
                          while (__stlxr(v369 - 1, v368));
                          if (!v369)
                          {
                            ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                            std::__shared_weak_count::__release_weak(v367);
                          }
                        }
                        MEMORY[0x212BC6398](v363, 0x10F0C40B62ED6C6);
                        v370 = v400;
                        v400 = 0;
                        if (v370)
                        {
                          v371 = (std::__shared_weak_count *)*((_QWORD *)v370 + 4);
                          if (v371)
                          {
                            v372 = (unint64_t *)&v371->__shared_owners_;
                            do
                              v373 = __ldaxr(v372);
                            while (__stlxr(v373 - 1, v372));
                            if (!v373)
                            {
                              ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                              std::__shared_weak_count::__release_weak(v371);
                            }
                          }
                          v374 = (std::__shared_weak_count *)*((_QWORD *)v370 + 2);
                          if (v374)
                          {
                            v375 = (unint64_t *)&v374->__shared_owners_;
                            do
                              v376 = __ldaxr(v375);
                            while (__stlxr(v376 - 1, v375));
                            if (!v376)
                            {
                              ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                              std::__shared_weak_count::__release_weak(v374);
                            }
                          }
                          MEMORY[0x212BC6398](v370, 0x10F0C40B62ED6C6);
                        }
                      }
                      v377 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
                      if (*((_QWORD *)&v423 + 1))
                      {
                        v378 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
                        do
                          v379 = __ldaxr(v378);
                        while (__stlxr(v379 - 1, v378));
                        if (!v379)
                        {
                          ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                          std::__shared_weak_count::__release_weak(v377);
                        }
                      }
                      v380 = *(std::__shared_weak_count **)&v422[16];
                      if (*(_QWORD *)&v422[16])
                      {
                        v381 = (unint64_t *)(*(_QWORD *)&v422[16] + 8);
                        do
                          v382 = __ldaxr(v381);
                        while (__stlxr(v382 - 1, v381));
                        if (!v382)
                        {
                          ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                          std::__shared_weak_count::__release_weak(v380);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v350, OS_LOG_TYPE_DEBUG);
                      *(_DWORD *)v422 = 134217984;
                      *(double *)&v422[4] = v11;
                      v383 = (void *)_os_log_send_and_compose_impl();
                      if (v383)
                        free(v383);
                    }
                    if (v328)
                    {
                      sub_20E8C003C((uint64_t)&v408, "High Speed Interpolation Failed for new sample at end timestamp = %f", v11);
                      sub_20E863570((uint64_t)&v408);
                    }
                    sub_20E863570((uint64_t)&v408);
                    v135 = v416;
                    if (v416)
                    {
                      v384 = (unint64_t *)&v416->__shared_owners_;
                      do
                        v137 = __ldaxr(v384);
                      while (__stlxr(v137 - 1, v384));
                      goto LABEL_565;
                    }
                    return 0;
                  }
                }
                memmove(v347, v334, v333);
                goto LABEL_505;
              }
            }
            memmove(v339, v337, v338);
            goto LABEL_497;
          }
          v299 = (_QWORD *)a1[33];
          v300 = ((char *)v299 - (char *)v256) >> 5;
          if (v300 >= v254)
          {
            v263 = (_QWORD *)a1[32];
            do
            {
              v305 = *a1 + 32 * ((v85 + a1[3]) % (unint64_t)((a1[1] - *a1) >> 5));
              *v263 = *(_QWORD *)v305;
              v306 = *(_OWORD *)(v305 + 8);
              v263[3] = *(_QWORD *)(v305 + 24);
              *(_OWORD *)(v263 + 1) = v306;
              ++v85;
              v263 += 4;
            }
            while (v85 != a1[5]);
            goto LABEL_442;
          }
          v301 = v300 + v85;
          v302 = v300 + v85 == v253;
          if (v300 + v85 == v253)
          {
            do
            {
              v303 = *a1 + 32 * ((v85 + a1[3]) % (unint64_t)((a1[1] - *a1) >> 5));
              *v256 = *(_QWORD *)v303;
              v304 = *(_OWORD *)(v303 + 8);
              v256[3] = *(_QWORD *)(v303 + 24);
              *(_OWORD *)(v256 + 1) = v304;
              ++v85;
              v256 += 4;
            }
            while (v85 != a1[5]);
LABEL_456:
            v256 = (_QWORD *)a1[33];
            v299 = v256;
            v263 = v256;
            if (v302)
              goto LABEL_443;
          }
          else if (v299 != v256)
          {
            v314 = v300 - 1;
            do
            {
              do
              {
                v315 = v314;
                v316 = *a1 + 32 * ((v85 + a1[3]) % (unint64_t)((a1[1] - *a1) >> 5));
                *v256 = *(_QWORD *)v316;
                v317 = *(_OWORD *)(v316 + 8);
                v256[3] = *(_QWORD *)(v316 + 24);
                *(_OWORD *)(v256 + 1) = v317;
                ++v85;
                v314 = v315 - 1;
                v256 += 4;
              }
              while (v85 == a1[5]);
            }
            while (v315);
            goto LABEL_456;
          }
          v263 = v256;
          do
          {
            v318 = *a1 + 32 * ((v301 + a1[3]) % (unint64_t)((a1[1] - *a1) >> 5));
            *v263 = *(_QWORD *)v318;
            v319 = *(_OWORD *)(v318 + 8);
            v263[3] = *(_QWORD *)(v318 + 24);
            *(_OWORD *)(v263 + 1) = v319;
            ++v301;
            v263 += 4;
          }
          while (v301 != a1[5]);
          goto LABEL_443;
        }
        v266 = v246.f64[0];
        v267 = a1[3];
        v268 = (a1[1] - *a1) >> 5;
        if (*(double *)a1[38] >= *(double *)(*a1 + 32 * ((v267 + v85) % v268)))
        {
          v246.f64[0] = *(float64_t *)(a1[39] - 8);
          v269 = *(double *)(*a1 + 32 * ((v79 + v267 - 1) % v268));
          if (v246.f64[0] <= v269)
          {
            v402 = v79;
            v403 = a1;
            LOBYTE(v404) = 0;
            *(_DWORD *)((char *)&v404 + 1) = *(_DWORD *)v407;
            HIDWORD(v404) = *(_DWORD *)&v407[3];
            v405 = v85;
            v400 = (char *)a1;
            LOBYTE(v401) = 1;
            *(_DWORD *)((char *)&v401 + 1) = *(_DWORD *)v406;
            HIDWORD(v401) = *(_DWORD *)&v406[3];
            if ((sub_20FDB4284(a2, (uint64_t)(a1 + 32), &v403, &v400, (uint64_t)v397, v246, v269, v247, v248, v249, v250, v251, v252) & 1) != 0)
            {
              a1[36] = a1[35];
              v271 = a1[33] - a1[32];
              if (v271)
                sub_20EAF5F94((char **)a1 + 35, v271 >> 5);
              sub_20F4024A4((uint64_t)(a1 + 6), a1 + 32, (uint64_t)(a1 + 35), v270);
              *(_OWORD *)(a1 + 29) = *(_OWORD *)(a1 + 19);
              *((float64_t *)a1 + 31) = v266;
              v272 = (double *)a1[35];
              v273 = (double *)a1[36];
              if (v273 != v272)
              {
                v274 = ((char *)v273 - (char *)v272) >> 5;
                do
                {
                  v275 = v274 >> 1;
                  v276 = &v272[4 * (v274 >> 1)];
                  v278 = *v276;
                  v277 = v276 + 4;
                  v274 += ~(v274 >> 1);
                  if (v278 > *v87 + 0.0001)
                    v274 = v275;
                  else
                    v272 = v277;
                }
                while (v274);
              }
              if (v272 == v273)
              {
                if (*((_BYTE *)a1 + 352))
                {
                  sub_20F3EAEF4(&v420);
                  if (**(int **)(v420 + 56) <= 2)
                  {
                    v385 = *(unsigned __int8 *)(v420 + 72);
                    v386 = sub_20E8C31DC(v420, "OSLogSurrogateAppender", 1, 0);
                    v387 = v386 ? v386 + 16 : 0;
                    if (v385 || v386)
                    {
                      v408 = &v420;
                      rep = std::chrono::steady_clock::now().__d_.__rep_;
                      v410 = std::chrono::system_clock::now().__d_.__rep_;
                      v411 = 2;
                      v412 = "unknown file";
                      v413 = 273;
                      v415 = 0;
                      v416 = 0;
                      v414 = "unknown function";
                      v388 = (uint64_t *)(v420 + 16);
                      if (*(char *)(v420 + 39) < 0)
                      {
                        v390 = *(char **)(v420 + 16);
                        v389 = *(_QWORD *)(v420 + 24);
                      }
                      else
                      {
                        v389 = *(unsigned __int8 *)(v420 + 39);
                        v390 = (char *)(v420 + 16);
                      }
                      v400 = v390;
                      v401 = v389;
                      v391 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                      if ((v391 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                      {
                        sub_20E9E46F8((uint64_t)v422);
                        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
                        if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
                          operator delete(*(void **)v422);
                        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A4A510);
                      }
                      v392 = byte_254A4A4F8[23];
                      if (byte_254A4A4F8[23] >= 0)
                      {
                        v393 = (uint64_t *)byte_254A4A4F8;
                      }
                      else
                      {
                        v392 = *(_QWORD *)&byte_254A4A4F8[8];
                        v393 = *(uint64_t **)byte_254A4A4F8;
                      }
                      v403 = v393;
                      v404 = v392;
                      *(_QWORD *)v422 = os_log_create((const char *)v393, v400);
                      sub_20E86E5A8(&v422[8], (uint64_t)&v403);
                      sub_20E86E5A8(&v424, (uint64_t)&v400);
                      v394 = *(NSObject **)v422;
                      sub_20E86E44C((uint64_t)v422);
                      sub_20F3FF5FC(v387, v388, v394, OS_LOG_TYPE_DEBUG);
                      if (v385)
                      {
                        sub_20E8C003C((uint64_t)&v408, "No new samples beyond last sample time.");
                        sub_20E863570((uint64_t)&v408);
                      }
                      sub_20E863714((uint64_t)&v408);
                    }
                  }
                }
                return 0;
              }
              v279 = a4[4];
              v280 = *a4;
              do
              {
                while (1)
                {
                  v281 = v280 + 32 * v279;
                  v282 = *((_QWORD *)v272 + 3);
                  v283 = *(_OWORD *)(v272 + 1);
                  *(double *)v281 = *v272;
                  *(_OWORD *)(v281 + 8) = v283;
                  *(_QWORD *)(v281 + 24) = v282;
                  v280 = *a4;
                  v284 = (a4[1] - *a4) >> 5;
                  v285 = a4[5];
                  v286 = a4[4] + 1;
                  v287 = v286 >= v284 ? (a4[1] - *a4) >> 5 : 0;
                  v279 = v286 - v287;
                  a4[4] = v279;
                  if (v285 == v284)
                    break;
                  a4[5] = v285 + 1;
                  v272 += 4;
                  if (v272 == (double *)a1[36])
                    goto LABEL_422;
                }
                v288 = a4[3] + 1;
                if (v288 >= v284)
                  v289 = v284;
                else
                  v289 = 0;
                a4[3] = v288 - v289;
                v272 += 4;
              }
              while (v272 != (double *)a1[36]);
LABEL_422:
              if (v279)
                v290 = v279;
              else
                v290 = v284;
              *v87 = *(double *)(v280 + 32 * v290 - 32);
              return 1;
            }
          }
        }
        if (!*((_BYTE *)a1 + 352))
          goto LABEL_475;
        sub_20F3EAEF4(&v417);
        if (**(int **)(v417 + 56) > 5)
          goto LABEL_475;
        v292 = *(unsigned __int8 *)(v417 + 72);
        v293 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
        v294 = v293 ? v293 + 16 : 0;
        if (!v292 && !v293)
          goto LABEL_475;
        v408 = &v417;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v410 = std::chrono::system_clock::now().__d_.__rep_;
        v411 = 5;
        v412 = "unknown file";
        v413 = 387;
        v415 = 0;
        v416 = 0;
        v414 = "unknown function";
        v295 = *v408;
        v296 = (uint64_t *)(*v408 + 16);
        if (*(char *)(*v408 + 39) < 0)
        {
          v298 = *(char **)(v295 + 16);
          v297 = *(_QWORD *)(v295 + 24);
        }
        else
        {
          v297 = *(unsigned __int8 *)(*v408 + 39);
          v298 = (char *)(*v408 + 16);
        }
        category = v298;
        v419 = v297;
        v324 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v324 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v422);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
          if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
            operator delete(*(void **)v422);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v325 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v326 = byte_254A4A4F8;
        }
        else
        {
          v325 = *(_QWORD *)&byte_254A4A4F8[8];
          v326 = *(const char **)byte_254A4A4F8;
        }
        v420 = (uint64_t)v326;
        v421 = v325;
        *(_QWORD *)v422 = os_log_create(v326, category);
        sub_20E86E5A8(&v422[8], (uint64_t)&v420);
        sub_20E86E5A8(&v424, (uint64_t)&category);
        v327 = *(NSObject **)v422;
        sub_20E86E44C((uint64_t)v422);
        sub_20F3FF210(v294, v296, v327, OS_LOG_TYPE_ERROR);
        if (v292)
        {
          sub_20E8C003C((uint64_t)&v408, "IMU sampler failed - unable to interpolate imu sensor. Not updating High Speed Filtered Buffer.");
          sub_20E863570((uint64_t)&v408);
        }
LABEL_474:
        sub_20E863714((uint64_t)&v408);
        goto LABEL_475;
      }
    }
    v48 = *v397;
    v49 = (char *)v43 - (char *)*v397;
    v50 = v49 >> 3;
    v51 = (v49 >> 3) + 1;
    if (v51 >> 61)
      sub_20E867F44();
    v52 = v47 - (_QWORD)v48;
    if (v52 >> 2 > v51)
      v51 = v52 >> 2;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    if (v53)
    {
      if (v53 >> 61)
        sub_20E877A38();
      v54 = operator new(8 * v53);
      v55 = (double *)&v54[8 * v50];
      *v55 = v46;
      v45 = (uint64_t)(v55 + 1);
      v56 = (char *)v43 - (char *)v48;
      if (v43 == v48)
        goto LABEL_70;
    }
    else
    {
      v54 = 0;
      v55 = (double *)(8 * v50);
      *(double *)(8 * v50) = v46;
      v45 = 8 * v50 + 8;
      v56 = (char *)v43 - (char *)v48;
      if (v43 == v48)
        goto LABEL_70;
    }
    v57 = v56 - 8;
    if (v57 >= 0x168)
    {
      v60 = ((char *)(v43 - 1) - (char *)v48) & 0xFFFFFFFFFFFFFFF8;
      if (&v54[v49 - 8 - v60] > &v54[v49 - 8])
      {
        v58 = v43;
      }
      else if ((double *)((char *)v43 - v60 - 8) > v43 - 1)
      {
        v58 = v43;
      }
      else if ((unint64_t)((char *)v43 - &v54[v49]) >= 0x20)
      {
        v61 = (v57 >> 3) + 1;
        v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
        v58 = &v43[v62 / 0xFFFFFFFFFFFFFFF8];
        v55 = (double *)((char *)v55 - v62);
        v63 = &v54[8 * v50 - 16];
        v64 = v43 - 2;
        v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v66 = *(_OWORD *)v64;
          *(v63 - 1) = *((_OWORD *)v64 - 1);
          *v63 = v66;
          v63 -= 2;
          v64 -= 4;
          v65 -= 4;
        }
        while (v65);
        if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_70:
          a1[38] = (uint64_t)v55;
          a1[39] = v45;
          a1[40] = (uint64_t)&v54[8 * v53];
          if (v48)
            operator delete(v48);
          goto LABEL_52;
        }
      }
      else
      {
        v58 = v43;
      }
    }
    else
    {
      v58 = v43;
    }
    do
    {
      v59 = *((_QWORD *)v58-- - 1);
      *((_QWORD *)v55-- - 1) = v59;
    }
    while (v58 != v48);
    goto LABEL_70;
  }
  if (!*((_BYTE *)a1 + 352))
    return 0;
  sub_20F3EAEF4(&v420);
  if (**(int **)(v420 + 56) > 5)
    return 0;
  v18 = *(unsigned __int8 *)(v420 + 72);
  v19 = sub_20E8C31DC(v420, "OSLogSurrogateAppender", 1, 0);
  v20 = v19;
  if (!v18 && v19 == 0)
    return 0;
  v408 = &v420;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v410 = std::chrono::system_clock::now().__d_.__rep_;
  v411 = 5;
  v412 = "unknown file";
  v413 = 224;
  v415 = 0;
  v416 = 0;
  v414 = "unknown function";
  v22 = v420;
  v23 = v420 + 16;
  if (*(char *)(v420 + 39) < 0)
  {
    v25 = *(const char **)(v420 + 16);
    v24 = *(_QWORD *)(v420 + 24);
  }
  else
  {
    v24 = *(unsigned __int8 *)(v420 + 39);
    v25 = (const char *)(*v408 + 16);
  }
  v95 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v422);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
    if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
      operator delete(*(void **)v422);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v96 = byte_254A4A4F8;
  else
    v96 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v97 = byte_254A4A4F8[23];
  else
    v97 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v422 = os_log_create(v96, v25);
  v98 = &v422[8];
  if (v97 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v97 >= 0x17)
  {
    v99 = v20;
    v100 = v25;
    v101 = v22;
    v102 = v18;
    v103 = v23;
    v104 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17)
      v104 = v97 | 7;
    v105 = v104 + 1;
    v98 = operator new(v104 + 1);
    *(_QWORD *)&v422[16] = v97;
    *(_QWORD *)&v423 = v105 | 0x8000000000000000;
    *(_QWORD *)&v422[8] = v98;
    v23 = v103;
    v18 = v102;
    v22 = v101;
    v25 = v100;
    v20 = v99;
    goto LABEL_134;
  }
  BYTE7(v423) = v97;
  if (v97)
LABEL_134:
    memmove(v98, v96, v97);
  v98[v97] = 0;
  BYTE8(v423) = 1;
  v106 = (void **)&v424;
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v24 >= 0x17)
  {
    v107 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v107 = v24 | 7;
    v108 = v107 + 1;
    v106 = (void **)operator new(v107 + 1);
    v425 = v24;
    v426 = v108 | 0x8000000000000000;
    v424 = v106;
  }
  else
  {
    HIBYTE(v426) = v24;
    if (!v24)
      goto LABEL_143;
  }
  memmove(v106, v25, v24);
LABEL_143:
  *((_BYTE *)v106 + v24) = 0;
  v427 = 1;
  v109 = *(NSObject **)v422;
  if (SHIBYTE(v426) < 0)
    operator delete(v424);
  if (BYTE8(v423) && SBYTE7(v423) < 0)
    operator delete(*(void **)&v422[8]);
  if (*(_QWORD *)v422)
    os_release(*(void **)v422);
  if (v20 && *(_QWORD *)(v20 + 24))
  {
    v110 = _os_log_pack_size();
    v111 = (std::__shared_weak_count_vtbl *)operator new(v110, (std::align_val_t)8uLL);
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v112;
    v112->__shared_owners_ = 0;
    v114 = (unint64_t *)&v112->__shared_owners_;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v111;
    *(_QWORD *)v422 = v111;
    *(_QWORD *)&v422[8] = v111;
    *(_QWORD *)&v422[16] = v112;
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
    v423 = 0uLL;
    v424 = 0;
    do
      v116 = __ldaxr(v114);
    while (__stlxr(v116 - 1, v114));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v113);
    }
    v117 = *(_QWORD *)v422;
    *(_WORD *)_os_log_pack_fill() = 0;
    v118 = operator new();
    v119 = *(unsigned __int8 *)(v22 + 39);
    if ((v119 & 0x80u) == 0)
      v120 = v23;
    else
      v120 = *(_QWORD *)(v22 + 16);
    if ((v119 & 0x80u) != 0)
      v119 = *(_QWORD *)(v22 + 24);
    *(_QWORD *)v118 = v117;
    *(_OWORD *)(v118 + 8) = *(_OWORD *)&v422[8];
    *(_QWORD *)&v422[8] = 0;
    *(_QWORD *)&v422[16] = 0;
    *(_OWORD *)(v118 + 24) = v423;
    v423 = 0uLL;
    *(_QWORD *)(v118 + 40) = v120;
    *(_QWORD *)(v118 + 48) = v119;
    *(_BYTE *)(v118 + 56) = 16;
    v400 = 0;
    v403 = (uint64_t *)v118;
    (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v20 + 24) + 40))(*(_QWORD *)(v20 + 24), &v403);
    v121 = v403;
    v403 = 0;
    if (v121)
    {
      v122 = (std::__shared_weak_count *)v121[4];
      if (v122)
      {
        v123 = (unint64_t *)&v122->__shared_owners_;
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      v125 = (std::__shared_weak_count *)v121[2];
      if (v125)
      {
        v126 = (unint64_t *)&v125->__shared_owners_;
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
        }
      }
      MEMORY[0x212BC6398](v121, 0x10F0C40B62ED6C6);
      v400 = 0;
    }
    v128 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
    if (*((_QWORD *)&v423 + 1))
    {
      v129 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v131 = *(std::__shared_weak_count **)&v422[16];
    if (*(_QWORD *)&v422[16])
    {
      v132 = (unint64_t *)(*(_QWORD *)&v422[16] + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
  }
  else
  {
    os_log_type_enabled(v109, OS_LOG_TYPE_ERROR);
    *(_WORD *)v422 = 0;
    v134 = (void *)_os_log_send_and_compose_impl();
    if (v134)
      free(v134);
  }
  if (v18)
  {
    sub_20E8C003C((uint64_t)&v408, "ERROR: Calling AddIMUMeasurementFilter with an empty imu_input_buffer.");
    sub_20E863570((uint64_t)&v408);
  }
  sub_20E863570((uint64_t)&v408);
  v135 = v416;
  if (v416)
  {
    v136 = (unint64_t *)&v416->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
LABEL_565:
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  return 0;
}

void sub_20F3EF3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (*(_BYTE *)(v27 - 200))
  {
    if (*(char *)(v27 - 201) < 0)
      operator delete(*(void **)(v27 - 224));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F3EF454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F3EF468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;

  if (*(_BYTE *)(v27 - 192) && *(char *)(v27 - 193) < 0)
    operator delete(*(void **)(v27 - 216));
  v29 = *(void **)(v27 - 224);
  if (v29)
    os_release(v29);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F3EF938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_20F3EF948(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  double **v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  const char *v29;
  unsigned __int8 v30;
  const char *v31;
  size_t v32;
  void *v33;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned __int8 v80;
  const char *v81;
  size_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *p_p;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  size_t v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v134;
  uint64_t v135;
  const char *__src;
  int v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v142;
  int v143;
  const char *v144;
  int v145;
  const char *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  void *object;
  void *v151[2];
  __int128 v152;
  void *__p;
  size_t v154;
  unint64_t v155;
  char v156;
  uint64_t v157;
  _QWORD v158[2];

  v4 = a1[5];
  if (v4)
  {
    v7 = a1[32];
    v8 = a1[33] - v7;
    if (v8)
    {
      if (v8 >= 0x21)
        a1[33] = v7 + 32;
      v9 = a1[4];
      if (v9)
        goto LABEL_6;
    }
    else
    {
      sub_20EAF5F94((char **)a1 + 32, 1uLL);
      v9 = a1[4];
      if (v9)
      {
LABEL_6:
        v10 = (char *)*a1;
        goto LABEL_17;
      }
    }
    v10 = (char *)*a1;
    v9 = (a1[1] - *a1) >> 5;
LABEL_17:
    v19 = &v10[32 * v9];
    v20 = a1[33];
    *(_QWORD *)(v20 - 32) = *((_QWORD *)v19 - 4);
    v21 = *(_OWORD *)(v19 - 24);
    *(_QWORD *)(v20 - 8) = *((_QWORD *)v19 - 1);
    *(_OWORD *)(v20 - 24) = v21;
    v22 = (double **)(a1 + 35);
    v23 = a1[35];
    v24 = a1[36] - v23;
    if (v24)
    {
      if (v24 >= 0x21)
        a1[36] = v23 + 32;
    }
    else
    {
      sub_20EAF5F94((char **)a1 + 35, 1uLL);
    }
    sub_20F4024A4((uint64_t)(a1 + 6), a1 + 32, (uint64_t)(a1 + 35), *(double *)&v21);
    if (a2[5] < (unint64_t)((uint64_t)(a2[1] - *a2) >> 5))
      goto LABEL_197;
    if (!*((_BYTE *)a1 + 352))
      goto LABEL_197;
    sub_20F3EAEF4(&v149);
    if (**(int **)(v149 + 56) > 4)
      goto LABEL_197;
    v25 = *(unsigned __int8 *)(v149 + 72);
    v26 = sub_20E8C31DC(v149, "OSLogSurrogateAppender", 1, 0);
    v27 = v26;
    if (!v25 && !v26)
      goto LABEL_197;
    v139 = v4;
    v140 = &v149;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v142 = std::chrono::system_clock::now().__d_.__rep_;
    v143 = 4;
    v144 = "unknown file";
    v145 = 199;
    v147 = 0;
    v148 = 0;
    v146 = "unknown function";
    v135 = v149;
    if (*(char *)(v149 + 39) < 0)
    {
      v29 = *(const char **)(v149 + 16);
      v28 = *(_QWORD *)(v149 + 24);
    }
    else
    {
      v28 = *(unsigned __int8 *)(v149 + 39);
      v29 = (const char *)(v149 + 16);
    }
    v134 = v149 + 16;
    v138 = v27;
    v137 = v25;
    v80 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v152 && SHIBYTE(v151[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v81 = byte_254A4A4F8;
    else
      v81 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v82 = byte_254A4A4F8[23];
    else
      v82 = *(_QWORD *)&byte_254A4A4F8[8];
    __src = v29;
    object = os_log_create(v81, v29);
    v83 = v151;
    if (v82 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v82 >= 0x17)
    {
      v84 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v82 | 7) != 0x17)
        v84 = v82 | 7;
      v85 = v84 + 1;
      v83 = operator new(v84 + 1);
      v151[1] = (void *)v82;
      *(_QWORD *)&v152 = v85 | 0x8000000000000000;
      v151[0] = v83;
    }
    else
    {
      BYTE7(v152) = v82;
      if (!v82)
      {
LABEL_130:
        *((_BYTE *)v83 + v82) = 0;
        BYTE8(v152) = 1;
        p_p = &__p;
        if (v28 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v28 >= 0x17)
        {
          v87 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17)
            v87 = v28 | 7;
          v88 = v87 + 1;
          p_p = operator new(v87 + 1);
          v154 = v28;
          v155 = v88 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v155) = v28;
          if (!v28)
            goto LABEL_138;
        }
        memmove(p_p, __src, v28);
LABEL_138:
        *((_BYTE *)p_p + v28) = 0;
        v156 = 1;
        v89 = object;
        if (SHIBYTE(v155) < 0)
          operator delete(__p);
        if (BYTE8(v152) && SBYTE7(v152) < 0)
          operator delete(v151[0]);
        if (object)
          os_release(object);
        if (v138 && *(_QWORD *)(v138 + 24))
        {
          v90 = _os_log_pack_size();
          v91 = (std::__shared_weak_count_vtbl *)operator new(v90, (std::align_val_t)8uLL);
          v92 = (std::__shared_weak_count *)operator new();
          v93 = v92;
          v92->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v92->__shared_owners_;
          v92->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v92->__shared_weak_owners_ = 0;
          v92[1].__vftable = v91;
          object = v91;
          v151[0] = v91;
          v151[1] = v92;
          do
            v95 = __ldxr(p_shared_owners);
          while (__stxr(v95 + 1, p_shared_owners));
          v152 = 0uLL;
          __p = 0;
          do
            v96 = __ldaxr(p_shared_owners);
          while (__stlxr(v96 - 1, p_shared_owners));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v93);
          }
          v97 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v98 = operator new();
          v99 = *(unsigned __int8 *)(v135 + 39);
          v100 = v134;
          if ((v99 & 0x80u) != 0)
          {
            v100 = *(_QWORD *)(v135 + 16);
            v99 = *(_QWORD *)(v135 + 24);
          }
          *(_QWORD *)v98 = v97;
          *(_OWORD *)(v98 + 8) = *(_OWORD *)v151;
          v151[0] = 0;
          v151[1] = 0;
          *(_OWORD *)(v98 + 24) = v152;
          v152 = 0uLL;
          *(_QWORD *)(v98 + 40) = v100;
          *(_QWORD *)(v98 + 48) = v99;
          *(_BYTE *)(v98 + 56) = 16;
          v157 = 0;
          v158[0] = v98;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v138 + 24) + 40))(*(_QWORD *)(v138 + 24), v158);
          v101 = v158[0];
          v158[0] = 0;
          if (v101)
          {
            v102 = *(std::__shared_weak_count **)(v101 + 32);
            if (v102)
            {
              v103 = (unint64_t *)&v102->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            v105 = *(std::__shared_weak_count **)(v101 + 16);
            if (v105)
            {
              v106 = (unint64_t *)&v105->__shared_owners_;
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
            MEMORY[0x212BC6398](v101, 0x10F0C40B62ED6C6);
            v108 = v157;
            v157 = 0;
            if (v108)
            {
              v109 = *(std::__shared_weak_count **)(v108 + 32);
              if (v109)
              {
                v110 = (unint64_t *)&v109->__shared_owners_;
                do
                  v111 = __ldaxr(v110);
                while (__stlxr(v111 - 1, v110));
                if (!v111)
                {
                  ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                  std::__shared_weak_count::__release_weak(v109);
                }
              }
              v112 = *(std::__shared_weak_count **)(v108 + 16);
              if (v112)
              {
                v113 = (unint64_t *)&v112->__shared_owners_;
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                }
              }
              MEMORY[0x212BC6398](v108, 0x10F0C40B62ED6C6);
            }
          }
          v115 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
          v4 = v139;
          if (*((_QWORD *)&v152 + 1))
          {
            v116 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          v118 = (std::__shared_weak_count *)v151[1];
          if (v151[1])
          {
            v119 = (unint64_t *)((char *)v151[1] + 8);
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
          }
        }
        else
        {
          os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v121 = (void *)_os_log_send_and_compose_impl();
          v4 = v139;
          if (v121)
            free(v121);
        }
        if (v137)
        {
          sub_20E8C003C((uint64_t)&v140, "IMU buffer is too full - popping oldest");
          sub_20E863570((uint64_t)&v140);
        }
        sub_20E863570((uint64_t)&v140);
        v122 = v148;
        if (v148)
        {
          v123 = (unint64_t *)&v148->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
LABEL_197:
        if (*((double *)a1 + 30) == -1.0 || *(double *)(a1[36] - 32) - *a3 > 0.0001)
        {
          v125 = *a2 + 32 * a2[4];
          v126 = *((_QWORD *)*v22 + 3);
          v127 = *(_OWORD *)(*v22 + 1);
          *(double *)v125 = **v22;
          *(_OWORD *)(v125 + 8) = v127;
          *(_QWORD *)(v125 + 24) = v126;
          v128 = (uint64_t)(a2[1] - *a2) >> 5;
          v129 = a2[5];
          v130 = a2[4] + 1;
          if (v130 >= v128)
            v131 = (uint64_t)(a2[1] - *a2) >> 5;
          else
            v131 = 0;
          a2[4] = v130 - v131;
          if (v129 == v128)
          {
            v132 = a2[3] + 1;
            if (v132 < v128)
              v128 = 0;
            a2[3] = v132 - v128;
          }
          else
          {
            a2[5] = v129 + 1;
          }
          *a3 = **v22;
        }
        *(_OWORD *)(a1 + 29) = *(_OWORD *)(a1 + 19);
        return v4 != 0;
      }
    }
    memmove(v83, v81, v82);
    goto LABEL_130;
  }
  if (!*((_BYTE *)a1 + 352))
    return v4 != 0;
  sub_20F3EAEF4(&v149);
  if (**(int **)(v149 + 56) > 5)
    return v4 != 0;
  v11 = *(unsigned __int8 *)(v149 + 72);
  v12 = sub_20E8C31DC(v149, "OSLogSurrogateAppender", 1, 0);
  v13 = v12;
  if (!v11 && v12 == 0)
    return v4 != 0;
  v140 = &v149;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v142 = std::chrono::system_clock::now().__d_.__rep_;
  v143 = 5;
  v144 = "unknown file";
  v145 = 186;
  v147 = 0;
  v148 = 0;
  v146 = "unknown function";
  v15 = v149;
  v16 = v149 + 16;
  if (*(char *)(v149 + 39) < 0)
  {
    v18 = *(const char **)(v149 + 16);
    v17 = *(_QWORD *)(v149 + 24);
  }
  else
  {
    v17 = *(unsigned __int8 *)(v149 + 39);
    v18 = (const char *)(*v140 + 16);
  }
  v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if ((_BYTE)v152 && SHIBYTE(v151[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v31 = byte_254A4A4F8;
  else
    v31 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v32 = byte_254A4A4F8[23];
  else
    v32 = *(_QWORD *)&byte_254A4A4F8[8];
  object = os_log_create(v31, v18);
  v33 = v151;
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v32 >= 0x17)
  {
    v34 = v13;
    v35 = v18;
    v36 = v15;
    v37 = v16;
    v38 = v11;
    v39 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v39 = v32 | 7;
    v40 = v39 + 1;
    v33 = operator new(v39 + 1);
    v151[1] = (void *)v32;
    *(_QWORD *)&v152 = v40 | 0x8000000000000000;
    v151[0] = v33;
    v11 = v38;
    v16 = v37;
    v15 = v36;
    v18 = v35;
    v13 = v34;
    goto LABEL_43;
  }
  BYTE7(v152) = v32;
  if (v32)
LABEL_43:
    memmove(v33, v31, v32);
  *((_BYTE *)v33 + v32) = 0;
  BYTE8(v152) = 1;
  v41 = &__p;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v4 = 0;
  if (v17 >= 0x17)
  {
    v42 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v42 = v17 | 7;
    v43 = v42 + 1;
    v41 = operator new(v42 + 1);
    v154 = v17;
    v155 = v43 | 0x8000000000000000;
    __p = v41;
  }
  else
  {
    HIBYTE(v155) = v17;
    if (!v17)
      goto LABEL_52;
  }
  memmove(v41, v18, v17);
LABEL_52:
  *((_BYTE *)v41 + v17) = 0;
  v156 = 1;
  v44 = object;
  if (SHIBYTE(v155) < 0)
    operator delete(__p);
  if (BYTE8(v152) && SBYTE7(v152) < 0)
    operator delete(v151[0]);
  if (object)
    os_release(object);
  if (v13 && *(_QWORD *)(v13 + 24))
  {
    v45 = _os_log_pack_size();
    v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
    v47 = (std::__shared_weak_count *)operator new();
    v48 = v47;
    v47->__shared_owners_ = 0;
    v49 = (unint64_t *)&v47->__shared_owners_;
    v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v47->__shared_weak_owners_ = 0;
    v47[1].__vftable = v46;
    object = v46;
    v151[0] = v46;
    v151[1] = v47;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    v152 = 0uLL;
    __p = 0;
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v48);
    }
    v52 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v53 = operator new();
    v54 = *(unsigned __int8 *)(v15 + 39);
    if ((v54 & 0x80u) == 0)
      v55 = v16;
    else
      v55 = *(_QWORD *)(v15 + 16);
    if ((v54 & 0x80u) != 0)
      v54 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)v53 = v52;
    *(_OWORD *)(v53 + 8) = *(_OWORD *)v151;
    v151[0] = 0;
    v151[1] = 0;
    *(_OWORD *)(v53 + 24) = v152;
    v152 = 0uLL;
    *(_QWORD *)(v53 + 40) = v55;
    *(_QWORD *)(v53 + 48) = v54;
    *(_BYTE *)(v53 + 56) = 16;
    v157 = 0;
    v158[0] = v53;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24), v158);
    v56 = v158[0];
    v158[0] = 0;
    if (v56)
    {
      v57 = *(std::__shared_weak_count **)(v56 + 32);
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = *(std::__shared_weak_count **)(v56 + 16);
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      MEMORY[0x212BC6398](v56, 0x10F0C40B62ED6C6);
      v63 = v157;
      v157 = 0;
      if (v63)
      {
        v64 = *(std::__shared_weak_count **)(v63 + 32);
        if (v64)
        {
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v67 = *(std::__shared_weak_count **)(v63 + 16);
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        MEMORY[0x212BC6398](v63, 0x10F0C40B62ED6C6);
      }
    }
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
    if (*((_QWORD *)&v152 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v73 = (std::__shared_weak_count *)v151[1];
    if (v151[1])
    {
      v74 = (unint64_t *)((char *)v151[1] + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }
  else
  {
    os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
    LOWORD(object) = 0;
    v76 = (void *)_os_log_send_and_compose_impl();
    if (v76)
      free(v76);
  }
  if (v11)
  {
    sub_20E8C003C((uint64_t)&v140, "ERROR: Calling AddIMUMeasurementFilter with an empty imu_input_buffer.");
    sub_20E863570((uint64_t)&v140);
  }
  sub_20E863570((uint64_t)&v140);
  v77 = v148;
  if (v148)
  {
    v78 = (unint64_t *)&v148->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  return v4 != 0;
}

void sub_20F3F0820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F3F0868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E86E8C4((uint64_t *)(v27 - 96));
  sub_20E86E8C4((uint64_t *)(v27 - 104));
  sub_20E86E658((uint64_t)&a27);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F3F08D8()
{
  JUMPOUT(0x20F3F08E0);
}

void sub_20F3F0904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3F0928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3F093C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3F0950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a34 && a33 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3F09D4(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;

  v7 = result;
  v8 = *(_DWORD *)(a2 + 16);
  if (v8 != *(_DWORD *)(result + 64) || *(_DWORD *)(a3 + 16) != *(_DWORD *)(result + 88))
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUIIRFilter.cpp", 137, (uint64_t)"feedforward_cfs.size() == feedforward_cfs_.size() && feedback_cfs.size() == feedback_cfs_.size()", 96, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((result & 1) != 0)
      abort();
    v8 = *(_DWORD *)(v7 + 64);
  }
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 48);
    v10 = *(uint64_t **)a2;
    v11 = (v8 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v11 < 3)
    {
      v12 = *(_QWORD **)(v7 + 48);
    }
    else
    {
      v12 = *(_QWORD **)(v7 + 48);
      if ((unint64_t)(v9 - (_QWORD)v10) >= 0x20)
      {
        v13 = v11 + 1;
        v14 = v13 & 0x3FFFFFFFFFFFFFFCLL;
        v15 = &v10[v14];
        v12 = (_QWORD *)(v9 + v14 * 8);
        v16 = (_OWORD *)(v9 + 16);
        v17 = (__int128 *)(v10 + 2);
        v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = *v17;
          *(v16 - 1) = *(v17 - 1);
          *v16 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        v10 = v15;
        if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_15;
      }
    }
    v20 = (_QWORD *)(v9 + 8 * v8);
    do
    {
      v21 = *v10++;
      *v12++ = v21;
    }
    while (v12 != v20);
  }
LABEL_15:
  v22 = *(unsigned int *)(v7 + 88);
  if (!(_DWORD)v22)
    goto LABEL_25;
  v23 = *(_QWORD *)(v7 + 72);
  v24 = *(uint64_t **)a3;
  v25 = (v22 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v25 < 3)
  {
    v26 = *(_QWORD **)(v7 + 72);
LABEL_23:
    v34 = (_QWORD *)(v23 + 8 * v22);
    do
    {
      v35 = *v24++;
      *v26++ = v35;
    }
    while (v26 != v34);
    goto LABEL_25;
  }
  v26 = *(_QWORD **)(v7 + 72);
  if ((unint64_t)(v23 - (_QWORD)v24) < 0x20)
    goto LABEL_23;
  v27 = v25 + 1;
  v28 = v27 & 0x3FFFFFFFFFFFFFFCLL;
  v29 = &v24[v28];
  v26 = (_QWORD *)(v23 + v28 * 8);
  v30 = (_OWORD *)(v23 + 16);
  v31 = (__int128 *)(v24 + 2);
  v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v33 = *v31;
    *(v30 - 1) = *(v31 - 1);
    *v30 = v33;
    v30 += 2;
    v31 += 2;
    v32 -= 4;
  }
  while (v32);
  v24 = v29;
  if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_23;
LABEL_25:
  *(double *)(v7 + 144) = a4;
  return result;
}

uint64_t sub_20F3F0B8C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5, double a6)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  _BYTE *v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int128 v98;
  uint64_t v99;

  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 176) = xmmword_2103B3100;
  v9 = a1 + 176;
  *(_BYTE *)(a1 + 168) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(int64x2_t *)(a1 + 192) = vdupq_n_s64(0x3FB999999999999AuLL);
  *(_QWORD *)(a1 + 208) = 0x3F9EB851EB851EB8;
  *(_QWORD *)(a1 + 216) = 1000;
  *(_DWORD *)(a1 + 224) = 0;
  __asm { FMOV            V2.2D, #-1.0 }
  v85 = _Q2;
  *(_OWORD *)(a1 + 232) = _Q2;
  *(_QWORD *)(a1 + 248) = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_BYTE *)(a1 + 352) = 1;
  sub_20F402DA8((uint64_t)&v86, a3, a4, a6);
  v15 = v86;
  if (*(_BYTE *)(a1 + 168))
  {
    v16 = *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 56);
    v18 = v87;
    *(_QWORD *)(a1 + 48) = v86;
    *(_QWORD *)(a1 + 56) = v18;
    v86 = v16;
    v87 = v17;
    *(_DWORD *)(a1 + 64) = v88;
    v88 = 0;
    v19 = *(_QWORD *)(a1 + 72);
    v20 = *(_QWORD *)(a1 + 80);
    v21 = v90;
    *(_QWORD *)(a1 + 72) = v89;
    *(_QWORD *)(a1 + 80) = v21;
    v89 = v19;
    v90 = v20;
    *(_DWORD *)(a1 + 88) = v91;
    v91 = 0;
    v22 = *(_QWORD *)(a1 + 96);
    v23 = *(_QWORD *)(a1 + 104);
    v24 = v93;
    *(_QWORD *)(a1 + 96) = v92;
    *(_QWORD *)(a1 + 104) = v24;
    v92 = v22;
    v93 = v23;
    *(_DWORD *)(a1 + 112) = v94;
    v94 = 0;
    v25 = *(_QWORD *)(a1 + 120);
    v26 = *(_QWORD *)(a1 + 128);
    v27 = v96;
    *(_QWORD *)(a1 + 120) = v95;
    *(_QWORD *)(a1 + 128) = v27;
    v95 = v25;
    v96 = v26;
    *(_DWORD *)(a1 + 136) = v97;
    v97 = 0;
    v28 = v98;
    *(_QWORD *)(a1 + 160) = v99;
    *(_OWORD *)(a1 + 144) = v28;
    if (v25)
    {
      MEMORY[0x212BC6368](v25, 0x1000C8000313F17);
      v22 = v92;
    }
    if (v22)
      MEMORY[0x212BC6368](v22, 0x1000C8000313F17);
    v29 = v89;
    if (v89)
      goto LABEL_7;
  }
  else
  {
    v51 = v87;
    v86 = 0;
    v87 = 0;
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v51;
    *(_DWORD *)(a1 + 64) = v88;
    v88 = 0;
    v52 = v89;
    v53 = v90;
    v89 = 0;
    v90 = 0;
    *(_QWORD *)(a1 + 72) = v52;
    *(_QWORD *)(a1 + 80) = v53;
    *(_DWORD *)(a1 + 88) = v91;
    v91 = 0;
    v54 = v93;
    *(_QWORD *)(a1 + 96) = v92;
    *(_QWORD *)(a1 + 104) = v54;
    v92 = 0;
    v93 = 0;
    *(_DWORD *)(a1 + 112) = v94;
    v94 = 0;
    v55 = v96;
    *(_QWORD *)(a1 + 120) = v95;
    *(_QWORD *)(a1 + 128) = v55;
    v95 = 0;
    v96 = 0;
    *(_DWORD *)(a1 + 136) = v97;
    v97 = 0;
    v56 = v98;
    *(_QWORD *)(a1 + 160) = v99;
    *(_OWORD *)(a1 + 144) = v56;
    *(_BYTE *)(a1 + 168) = 1;
    v29 = v89;
    if (v89)
LABEL_7:
      MEMORY[0x212BC6368](v29, 0x1000C8000313F17);
  }
  if (v86)
    MEMORY[0x212BC6368](v86, 0x1000C8000313F17);
  sub_20EAE8F2C((char **)a1, *((_QWORD *)a2 + 5));
  v30 = *((_QWORD *)a2 + 5);
  v31 = *(void **)(a1 + 256);
  if (v30 > (uint64_t)(*(_QWORD *)(a1 + 272) - (_QWORD)v31) >> 5)
  {
    if (v30 >> 59)
      goto LABEL_51;
    v32 = *(_QWORD *)(a1 + 264);
    v33 = (char *)operator new(32 * v30);
    v34 = &v33[v32 - (_QWORD)v31];
    v35 = v34;
    if ((void *)v32 != v31)
    {
      v35 = &v33[v32 - (_QWORD)v31];
      do
      {
        v36 = *(_QWORD *)(v32 - 32);
        v32 -= 32;
        *((_QWORD *)v35 - 4) = v36;
        v35 -= 32;
        v37 = *(_OWORD *)(v32 + 8);
        *((_QWORD *)v35 + 3) = *(_QWORD *)(v32 + 24);
        *(_OWORD *)(v35 + 8) = v37;
      }
      while ((void *)v32 != v31);
    }
    *(_QWORD *)(a1 + 256) = v35;
    *(_QWORD *)(a1 + 264) = v34;
    *(_QWORD *)(a1 + 272) = &v33[32 * v30];
    if (v31)
    {
      operator delete(v31);
      v30 = *((_QWORD *)a2 + 5);
    }
  }
  v38 = *(void **)(a1 + 280);
  if (v30 <= (uint64_t)(*(_QWORD *)(a1 + 296) - (_QWORD)v38) >> 5)
    goto LABEL_24;
  if (v30 >> 59)
LABEL_51:
    sub_20E867F44();
  v39 = *(_QWORD *)(a1 + 288);
  v40 = (char *)operator new(32 * v30);
  v41 = &v40[v39 - (_QWORD)v38];
  v42 = v41;
  if ((void *)v39 != v38)
  {
    v42 = &v40[v39 - (_QWORD)v38];
    do
    {
      v43 = *(_QWORD *)(v39 - 32);
      v39 -= 32;
      *((_QWORD *)v42 - 4) = v43;
      v42 -= 32;
      v44 = *(_OWORD *)(v39 + 8);
      *((_QWORD *)v42 + 3) = *(_QWORD *)(v39 + 24);
      *(_OWORD *)(v42 + 8) = v44;
    }
    while ((void *)v39 != v38);
  }
  *(_QWORD *)(a1 + 280) = v42;
  *(_QWORD *)(a1 + 288) = v41;
  *(_QWORD *)(a1 + 296) = &v40[32 * v30];
  if (v38)
  {
    operator delete(v38);
    v30 = *((_QWORD *)a2 + 5);
  }
LABEL_24:
  v45 = *(_BYTE **)(a1 + 304);
  if (v30 <= (uint64_t)(*(_QWORD *)(a1 + 320) - (_QWORD)v45) >> 3)
    goto LABEL_38;
  if (v30 >> 61)
    goto LABEL_52;
  v46 = *(_BYTE **)(a1 + 312);
  v47 = (char *)operator new(8 * v30);
  v48 = v46 - v45;
  v49 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
  v50 = v49;
  if (v46 != v45)
  {
    if ((unint64_t)(v48 - 8) < 0x58)
    {
      v50 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_35:
        v65 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *((_QWORD *)v50 - 1) = v65;
        v50 -= 8;
      }
      while (v46 != v45);
      goto LABEL_36;
    }
    v50 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
    if (v46 - v47 - (v48 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_35;
    v57 = v48 >> 3;
    v58 = ((unint64_t)(v48 - 8) >> 3) + 1;
    v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    v60 = &v46[-v59];
    v50 = &v49[-v59];
    v61 = &v47[8 * v57 - 16];
    v62 = (__int128 *)(v46 - 16);
    v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v64 = *v62;
      *((_OWORD *)v61 - 1) = *(v62 - 1);
      *(_OWORD *)v61 = v64;
      v61 -= 32;
      v62 -= 2;
      v63 -= 4;
    }
    while (v63);
    v46 = v60;
    if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_35;
  }
LABEL_36:
  *(_QWORD *)(a1 + 304) = v50;
  *(_QWORD *)(a1 + 312) = v49;
  *(_QWORD *)(a1 + 320) = &v47[8 * v30];
  if (v45)
  {
    operator delete(v45);
    v30 = *((_QWORD *)a2 + 5);
  }
LABEL_38:
  v66 = *(_BYTE **)(a1 + 328);
  if (v30 <= (uint64_t)(*(_QWORD *)(a1 + 344) - (_QWORD)v66) >> 3)
    goto LABEL_50;
  if (v30 >> 61)
LABEL_52:
    sub_20E867F44();
  v67 = *(_BYTE **)(a1 + 336);
  v68 = (char *)operator new(8 * v30);
  v69 = v67 - v66;
  v70 = &v68[(v67 - v66) & 0xFFFFFFFFFFFFFFF8];
  v71 = v70;
  if (v67 == v66)
    goto LABEL_48;
  if ((unint64_t)(v69 - 8) < 0x58)
  {
    v71 = &v68[(v67 - v66) & 0xFFFFFFFFFFFFFFF8];
    do
    {
LABEL_47:
      v80 = *((_QWORD *)v67 - 1);
      v67 -= 8;
      *((_QWORD *)v71 - 1) = v80;
      v71 -= 8;
    }
    while (v67 != v66);
    goto LABEL_48;
  }
  v71 = &v68[(v67 - v66) & 0xFFFFFFFFFFFFFFF8];
  if (v67 - v68 - (v69 & 0xFFFFFFFFFFFFFFF8) < 0x20)
    goto LABEL_47;
  v72 = v69 >> 3;
  v73 = ((unint64_t)(v69 - 8) >> 3) + 1;
  v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
  v75 = &v67[-v74];
  v71 = &v70[-v74];
  v76 = &v68[8 * v72 - 16];
  v77 = (__int128 *)(v67 - 16);
  v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v79 = *v77;
    *((_OWORD *)v76 - 1) = *(v77 - 1);
    *(_OWORD *)v76 = v79;
    v76 -= 32;
    v77 -= 2;
    v78 -= 4;
  }
  while (v78);
  v67 = v75;
  if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_47;
LABEL_48:
  *(_QWORD *)(a1 + 328) = v71;
  *(_QWORD *)(a1 + 336) = v70;
  *(_QWORD *)(a1 + 344) = &v68[8 * v30];
  if (v66)
    operator delete(v66);
LABEL_50:
  v81 = *a2;
  v82 = a2[1];
  v83 = a2[2];
  *(_DWORD *)(v9 + 48) = *((_DWORD *)a2 + 12);
  *(_OWORD *)(v9 + 16) = v82;
  *(_OWORD *)(v9 + 32) = v83;
  *(_OWORD *)v9 = v81;
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 1);
  *(_OWORD *)(a1 + 232) = v85;
  *(_BYTE *)(a1 + 352) = a5;
  return a1;
}

void sub_20F3F111C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v15 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v10 + 336) = v15;
    operator delete(v15);
    v16 = *v12;
    if (!*v12)
    {
LABEL_3:
      v17 = *a9;
      if (!*a9)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v16 = *v12;
    if (!*v12)
      goto LABEL_3;
  }
  *(_QWORD *)(v10 + 312) = v16;
  operator delete(v16);
  v17 = *a9;
  if (!*a9)
  {
LABEL_4:
    v18 = *a10;
    if (!*a10)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  *(_QWORD *)(v10 + 288) = v17;
  operator delete(v17);
  v18 = *a10;
  if (!*a10)
  {
LABEL_5:
    sub_20F3EAE5C(v11);
    v19 = *(void **)v10;
    if (!*(_QWORD *)v10)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v10 + 264) = v18;
  operator delete(v18);
  sub_20F3EAE5C(v11);
  v19 = *(void **)v10;
  if (!*(_QWORD *)v10)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  *(_QWORD *)(v10 + 8) = v19;
  operator delete(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3F11C4(uint64_t *a1, __int128 *a2, _BOOL4 *a3, double a4, double a5)
{
  uint64_t v10;
  double v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t *v32;
  size_t v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  int v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  size_t v74;
  const char *v75;
  unsigned __int8 v76;
  const char *v77;
  size_t v78;
  _BYTE *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t *v88;
  size_t v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  uint64_t v136;
  _BOOL4 v137;
  int v138;
  double v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  double v148;
  double v149;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v163;
  int v164;
  const char *v165;
  int v166;
  const char *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170[5];
  uint64_t v171;
  uint64_t v172;
  _BYTE object[24];
  _BYTE v174[24];
  size_t v175;
  unint64_t v176;
  char v177;
  uint64_t v178;

  v178 = *MEMORY[0x24BDAC8D0];
  if (a4 < 0.0
    && !*((_DWORD *)a1 + 56)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 94, (uint64_t)"timestamp >= 0.0 || imu_filter_params_.imu_rate_mode != IMUFilterFixedRateHandling::EnforcedFixedRate", 101, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[5])
  {
LABEL_198:
    v128 = *((double *)a1 + 23);
    if (v128 <= 0.0 || (v129 = *((double *)a1 + 26), v129 < 0.0) || (v130 = *((double *)a1 + 25), v130 < 0.0))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 147, (uint64_t)"imu_filter_params_.imu_default_sample_time > 0.0 && imu_filter_params_.current_period_rel_tol >= 0.0 && imu_filter_params_.est_period_rel_tol >= 0.0", 148, (uint64_t)"Expected positive values", 24, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v128 = *((double *)a1 + 23);
      v130 = *((double *)a1 + 25);
      v129 = *((double *)a1 + 26);
    }
    v131 = *((double *)a1 + 31);
    v132 = vabdd_f64(a4 - *((double *)a1 + 29), v131);
    v133 = vabdd_f64(v128, v131);
    v134 = v129 * v128;
    v135 = v130 * v128;
    v136 = a1[5];
    if (!v136)
    {
      v132 = 0.0;
      v133 = 0.0;
    }
    v137 = v132 > v134;
    if (v133 >= v135)
      v137 = 1;
    if (v136)
      v138 = v137;
    else
      v138 = 1;
    if (v138)
      v139 = 0.0;
    else
      v139 = a4 - *((double *)a1 + 29);
    *a3 = v137;
    v140 = *((_QWORD *)a2 + 2);
    v141 = *a2;
    v142 = *a1 + 32 * a1[4];
    *(double *)v142 = a4;
    *(_OWORD *)(v142 + 8) = v141;
    *(_QWORD *)(v142 + 24) = v140;
    v143 = (a1[1] - *a1) >> 5;
    v144 = a1[5];
    v145 = a1[4] + 1;
    if (v145 >= v143)
      v146 = (a1[1] - *a1) >> 5;
    else
      v146 = 0;
    a1[4] = v145 - v146;
    if (v144 == v143)
    {
      v147 = a1[3] + 1;
      if (v147 < v143)
        v143 = 0;
      a1[3] = v147 - v143;
      v148 = *((double *)a1 + 31);
      v149 = *((double *)a1 + 22);
      if (v149 < 0.0)
        goto LABEL_223;
    }
    else
    {
      a1[5] = v144 + 1;
      v148 = *((double *)a1 + 31);
      v149 = *((double *)a1 + 22);
      if (v149 < 0.0)
        goto LABEL_223;
    }
    if (v149 <= 1.0)
    {
LABEL_224:
      *((double *)a1 + 31) = v148 * v149 + v139 * (1.0 - v149);
      return 1;
    }
LABEL_223:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 403, (uint64_t)"gain_imu_median_est >= 0.0 && gain_imu_median_est <= 1.0", 56, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    goto LABEL_224;
  }
  v10 = a1[4];
  if (v10)
  {
    v11 = *(double *)(*a1 + 32 * v10 - 32);
    if (v11 < a4)
      goto LABEL_7;
LABEL_15:
    if (!*((_BYTE *)a1 + 352))
      return 0;
    sub_20F3EAEF4(v170);
    if (**(int **)(v170[0] + 56) > 5)
      return 0;
    v16 = *(unsigned __int8 *)(v170[0] + 72);
    v17 = sub_20E8C31DC(v170[0], "OSLogSurrogateAppender", 1, 0);
    v18 = v17;
    if (!v16 && !v17)
      return 0;
    v161 = v170;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v163 = std::chrono::system_clock::now().__d_.__rep_;
    v164 = 5;
    v165 = "unknown file";
    v166 = 101;
    v168 = 0;
    v169 = 0;
    v167 = "unknown function";
    if (a1[4])
    {
      v159 = a1[4];
      v157 = *a1;
    }
    else
    {
      v157 = *a1;
      v159 = (a1[1] - *a1) >> 5;
    }
    v156 = v16;
    v19 = *v161;
    v20 = (const char *)(*v161 + 16);
    v153 = v20;
    if (*(char *)(*v161 + 39) < 0)
    {
      v20 = *(const char **)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 24);
    }
    else
    {
      v21 = *(unsigned __int8 *)(*v161 + 39);
    }
    v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (v174[0] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v23 = byte_254A4A4F8;
    else
      v23 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v24 = byte_254A4A4F8[23];
    else
      v24 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v23, v20);
    v25 = &object[8];
    if (v24 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v24 >= 0x17)
    {
      v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v26 = v24 | 7;
      v27 = v26 + 1;
      v25 = operator new(v26 + 1);
      *(_QWORD *)&object[16] = v24;
      *(_QWORD *)v174 = v27 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v25;
    }
    else
    {
      v174[7] = v24;
      if (!v24)
      {
LABEL_40:
        v25[v24] = 0;
        v174[8] = 1;
        v28 = &v174[16];
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v21 >= 0x17)
        {
          v29 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v29 = v21 | 7;
          v30 = v29 + 1;
          v28 = operator new(v29 + 1);
          v175 = v21;
          v176 = v30 | 0x8000000000000000;
          *(_QWORD *)&v174[16] = v28;
        }
        else
        {
          HIBYTE(v176) = v21;
          if (!v21)
            goto LABEL_48;
        }
        memmove(v28, v20, v21);
LABEL_48:
        v28[v21] = 0;
        v177 = 1;
        v31 = *(NSObject **)object;
        if (SHIBYTE(v176) < 0)
          operator delete(*(void **)&v174[16]);
        if (v174[8] && (v174[7] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        v32 = (uint64_t *)(v157 + 32 * v159 - 32);
        if (v18 && *(_QWORD *)(v18 + 24))
        {
          v33 = _os_log_pack_size();
          v34 = (std::__shared_weak_count_vtbl *)operator new(v33, (std::align_val_t)8uLL);
          v35 = (std::__shared_weak_count *)operator new();
          v36 = v35;
          v35->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v35->__shared_weak_owners_ = 0;
          v35[1].__vftable = v34;
          *(_QWORD *)object = v34;
          *(_QWORD *)&object[8] = v34;
          *(_QWORD *)&object[16] = v35;
          do
            v38 = __ldxr(p_shared_owners);
          while (__stxr(v38 + 1, p_shared_owners));
          memset(v174, 0, sizeof(v174));
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v36);
          }
          v40 = *(_QWORD *)object;
          v41 = _os_log_pack_fill();
          v42 = *v32;
          *(_DWORD *)v41 = 134218240;
          *(_QWORD *)(v41 + 4) = v42;
          *(_WORD *)(v41 + 12) = 2048;
          *(double *)(v41 + 14) = a4;
          v43 = operator new();
          v44 = *(unsigned __int8 *)(v19 + 39);
          v45 = v153;
          if ((v44 & 0x80u) != 0)
          {
            v45 = *(const char **)(v19 + 16);
            v44 = *(_QWORD *)(v19 + 24);
          }
          *(_QWORD *)v43 = v40;
          *(_OWORD *)(v43 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v43 + 24) = *(_OWORD *)v174;
          *(_QWORD *)v174 = 0;
          *(_QWORD *)&v174[8] = 0;
          *(_QWORD *)(v43 + 40) = v45;
          *(_QWORD *)(v43 + 48) = v44;
          *(_BYTE *)(v43 + 56) = 16;
          v171 = 0;
          v172 = v43;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), &v172);
          v46 = v172;
          v172 = 0;
          if (v46)
          {
            v47 = *(std::__shared_weak_count **)(v46 + 32);
            if (v47)
            {
              v48 = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = *(std::__shared_weak_count **)(v46 + 16);
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            MEMORY[0x212BC6398](v46, 0x10F0C40B62ED6C6);
            v53 = v171;
            v171 = 0;
            if (v53)
            {
              v54 = *(std::__shared_weak_count **)(v53 + 32);
              if (v54)
              {
                v55 = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              v57 = *(std::__shared_weak_count **)(v53 + 16);
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              MEMORY[0x212BC6398](v53, 0x10F0C40B62ED6C6);
            }
          }
          v60 = *(std::__shared_weak_count **)&v174[8];
          v61 = v156;
          if (*(_QWORD *)&v174[8])
          {
            v62 = (unint64_t *)(*(_QWORD *)&v174[8] + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v64 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v65 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
        }
        else
        {
          os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
          v67 = *v32;
          *(_DWORD *)object = 134218240;
          *(_QWORD *)&object[4] = v67;
          *(_WORD *)&object[12] = 2048;
          *(double *)&object[14] = a4;
          v68 = (void *)_os_log_send_and_compose_impl();
          v61 = v156;
          if (v68)
            free(v68);
        }
        if (v61)
        {
          v69 = a1[4];
          if (!v69)
            v69 = (a1[1] - *a1) >> 5;
          sub_20E8C003C((uint64_t)&v161, "Non-monotonic IMU sensor timestamps: prev=%lf, cur=%lf. Dropping this sample.", *(double *)(*a1 + 32 * v69 - 32), a4);
          sub_20E863570((uint64_t)&v161);
        }
        sub_20E863570((uint64_t)&v161);
        v70 = v169;
        if (v169)
        {
          v71 = (unint64_t *)&v169->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        return 0;
      }
    }
    memmove(v25, v23, v24);
    goto LABEL_40;
  }
  v11 = *(double *)(a1[1] - 32);
  if (v11 >= a4)
    goto LABEL_15;
LABEL_7:
  if (a4 - v11 <= a5)
    goto LABEL_198;
  if (*((_BYTE *)a1 + 352))
  {
    sub_20F3EAEF4(v170);
    if (**(int **)(v170[0] + 56) <= 3)
    {
      v12 = *(unsigned __int8 *)(v170[0] + 72);
      v13 = sub_20E8C31DC(v170[0], "OSLogSurrogateAppender", 1, 0);
      v14 = v13;
      if (v12 || v13)
      {
        v161 = v170;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v163 = std::chrono::system_clock::now().__d_.__rep_;
        v164 = 3;
        v165 = "unknown file";
        v166 = 114;
        v168 = 0;
        v169 = 0;
        v167 = "unknown function";
        v15 = a1[4];
        v155 = *a1;
        if (!v15)
          v15 = (a1[1] - *a1) >> 5;
        v73 = *v161;
        v152 = *v161;
        if (*(char *)(*v161 + 39) < 0)
        {
          v75 = *(const char **)(v73 + 16);
          v74 = *(_QWORD *)(v73 + 24);
        }
        else
        {
          v74 = *(unsigned __int8 *)(*v161 + 39);
          v75 = (const char *)(*v161 + 16);
        }
        v151 = *v161 + 16;
        v160 = v14;
        v154 = a1[5];
        v76 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (v174[0] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v77 = byte_254A4A4F8;
        else
          v77 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v78 = byte_254A4A4F8[23];
        else
          v78 = *(_QWORD *)&byte_254A4A4F8[8];
        v158 = v75;
        *(_QWORD *)object = os_log_create(v77, v75);
        v79 = &object[8];
        if (v78 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v78 >= 0x17)
        {
          v80 = v15;
          v81 = v12;
          v82 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v78 | 7) != 0x17)
            v82 = v78 | 7;
          v83 = v82 + 1;
          v79 = operator new(v82 + 1);
          *(_QWORD *)&object[16] = v78;
          *(_QWORD *)v174 = v83 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v79;
          v12 = v81;
          v15 = v80;
        }
        else
        {
          v174[7] = v78;
          if (!v78)
          {
LABEL_128:
            v79[v78] = 0;
            v174[8] = 1;
            v84 = &v174[16];
            if (v74 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v74 >= 0x17)
            {
              v85 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v74 | 7) != 0x17)
                v85 = v74 | 7;
              v86 = v85 + 1;
              v84 = operator new(v85 + 1);
              v175 = v74;
              v176 = v86 | 0x8000000000000000;
              *(_QWORD *)&v174[16] = v84;
            }
            else
            {
              HIBYTE(v176) = v74;
              if (!v74)
                goto LABEL_136;
            }
            memmove(v84, v158, v74);
LABEL_136:
            v84[v74] = 0;
            v177 = 1;
            v87 = *(NSObject **)object;
            if (SHIBYTE(v176) < 0)
              operator delete(*(void **)&v174[16]);
            if (v174[8] && (v174[7] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            v88 = (uint64_t *)(v155 + 32 * v15 - 32);
            if (v160 && *(_QWORD *)(v160 + 24))
            {
              v89 = _os_log_pack_size();
              v90 = (std::__shared_weak_count_vtbl *)operator new(v89, (std::align_val_t)8uLL);
              v91 = (std::__shared_weak_count *)operator new();
              v92 = v91;
              v91->__shared_owners_ = 0;
              v93 = (unint64_t *)&v91->__shared_owners_;
              v91->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v91->__shared_weak_owners_ = 0;
              v91[1].__vftable = v90;
              *(_QWORD *)object = v90;
              *(_QWORD *)&object[8] = v90;
              *(_QWORD *)&object[16] = v91;
              do
                v94 = __ldxr(v93);
              while (__stxr(v94 + 1, v93));
              memset(v174, 0, sizeof(v174));
              do
                v95 = __ldaxr(v93);
              while (__stlxr(v95 - 1, v93));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v92);
              }
              v96 = *(_QWORD *)object;
              v97 = _os_log_pack_fill();
              v98 = *v88;
              *(_DWORD *)v97 = 134218752;
              *(double *)(v97 + 4) = a5;
              *(_WORD *)(v97 + 12) = 2048;
              *(_QWORD *)(v97 + 14) = v154;
              *(_WORD *)(v97 + 22) = 2048;
              *(_QWORD *)(v97 + 24) = v98;
              *(_WORD *)(v97 + 32) = 2048;
              *(double *)(v97 + 34) = a4;
              v99 = operator new();
              v100 = *(unsigned __int8 *)(v152 + 39);
              v101 = v151;
              if ((v100 & 0x80u) != 0)
              {
                v101 = *(_QWORD *)(v152 + 16);
                v100 = *(_QWORD *)(v152 + 24);
              }
              *(_QWORD *)v99 = v96;
              *(_OWORD *)(v99 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v99 + 24) = *(_OWORD *)v174;
              *(_QWORD *)v174 = 0;
              *(_QWORD *)&v174[8] = 0;
              *(_QWORD *)(v99 + 40) = v101;
              *(_QWORD *)(v99 + 48) = v100;
              *(_BYTE *)(v99 + 56) = 1;
              v171 = 0;
              v172 = v99;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v160 + 24) + 40))(*(_QWORD *)(v160 + 24), &v172);
              v102 = v172;
              v172 = 0;
              if (v102)
              {
                v103 = *(std::__shared_weak_count **)(v102 + 32);
                if (v103)
                {
                  v104 = (unint64_t *)&v103->__shared_owners_;
                  do
                    v105 = __ldaxr(v104);
                  while (__stlxr(v105 - 1, v104));
                  if (!v105)
                  {
                    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                    std::__shared_weak_count::__release_weak(v103);
                  }
                }
                v106 = *(std::__shared_weak_count **)(v102 + 16);
                if (v106)
                {
                  v107 = (unint64_t *)&v106->__shared_owners_;
                  do
                    v108 = __ldaxr(v107);
                  while (__stlxr(v108 - 1, v107));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }
                MEMORY[0x212BC6398](v102, 0x10F0C40B62ED6C6);
                v109 = v171;
                v171 = 0;
                if (v109)
                {
                  v110 = *(std::__shared_weak_count **)(v109 + 32);
                  if (v110)
                  {
                    v111 = (unint64_t *)&v110->__shared_owners_;
                    do
                      v112 = __ldaxr(v111);
                    while (__stlxr(v112 - 1, v111));
                    if (!v112)
                    {
                      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                      std::__shared_weak_count::__release_weak(v110);
                    }
                  }
                  v113 = *(std::__shared_weak_count **)(v109 + 16);
                  if (v113)
                  {
                    v114 = (unint64_t *)&v113->__shared_owners_;
                    do
                      v115 = __ldaxr(v114);
                    while (__stlxr(v115 - 1, v114));
                    if (!v115)
                    {
                      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                      std::__shared_weak_count::__release_weak(v113);
                    }
                  }
                  MEMORY[0x212BC6398](v109, 0x10F0C40B62ED6C6);
                }
              }
              v116 = *(std::__shared_weak_count **)&v174[8];
              if (*(_QWORD *)&v174[8])
              {
                v117 = (unint64_t *)(*(_QWORD *)&v174[8] + 8);
                do
                  v118 = __ldaxr(v117);
                while (__stlxr(v118 - 1, v117));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
              v119 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v120 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
            }
            else
            {
              os_log_type_enabled(v87, OS_LOG_TYPE_INFO);
              v122 = *v88;
              *(_DWORD *)object = 134218752;
              *(double *)&object[4] = a5;
              *(_WORD *)&object[12] = 2048;
              *(_QWORD *)&object[14] = v154;
              *(_WORD *)&object[22] = 2048;
              *(_QWORD *)v174 = v122;
              *(_WORD *)&v174[8] = 2048;
              *(double *)&v174[10] = a4;
              v123 = (void *)_os_log_send_and_compose_impl();
              if (v123)
                free(v123);
            }
            if (v12)
            {
              v124 = a1[4];
              if (!v124)
                v124 = (a1[1] - *a1) >> 5;
              sub_20E8C003C((uint64_t)&v161, "Received IMU measurement exceeds maximum gap of %lf. IMU buffer size = %zu, last buffer sample timestamp = %lf, received imu sample timestamp = %lf", a5, a1[5], *(double *)(*a1 + 32 * v124 - 32), a4);
              sub_20E863570((uint64_t)&v161);
            }
            sub_20E863570((uint64_t)&v161);
            v125 = v169;
            if (v169)
            {
              v126 = (unint64_t *)&v169->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            goto LABEL_197;
          }
        }
        memmove(v79, v77, v78);
        goto LABEL_128;
      }
    }
  }
LABEL_197:
  if (*((_DWORD *)a1 + 56))
    goto LABEL_198;
  if (*((_BYTE *)a1 + 352))
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 118, (uint64_t)"", 0, (uint64_t)"Received IMU measurement exceeds maximum gap", 44, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return 0;
}

void sub_20F3F2338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a41)
  {
    if (a40 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F3F2380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E86E8C4(&a34);
  sub_20E86E8C4(&a33);
  sub_20E86E658((uint64_t)&a35);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F3F23F4()
{
  JUMPOUT(0x20F3F23FCLL);
}

void sub_20F3F2420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3F2438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3F2450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *object,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a42 && a41 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F3F24E4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F3F24F4()
{
  JUMPOUT(0x20F3F24FCLL);
}

uint64_t sub_20F3F2504(uint64_t *a1, uint64_t a2, double *a3, uint64_t *a4)
{
  unint64_t v5;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  const char *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  const char *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  size_t v30;
  const char *v31;
  double v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  double v40;
  double v41;
  unint64_t v42;
  double *v43;
  unint64_t v44;
  uint64_t v45;
  double v46;
  unint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  double *v55;
  int64_t v56;
  unint64_t v57;
  double *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  double *v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  double *v73;
  double *v74;
  unint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  double *v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v92;
  uint64_t v93;
  char *v94;
  unsigned __int8 v95;
  const char *v96;
  size_t v97;
  _BYTE *v98;
  unint64_t v99;
  const char *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void **v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  size_t v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unsigned __int8 v138;
  const char *v139;
  size_t v140;
  _BYTE *v141;
  unint64_t v142;
  const char *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  void **v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  size_t v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  unint64_t *p_shared_owners;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  char *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  void *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  unsigned __int8 v187;
  const char *v188;
  size_t v189;
  _BYTE *v190;
  unint64_t v191;
  const char *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  void **v197;
  uint64_t v198;
  uint64_t v199;
  NSObject *v200;
  size_t v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  char *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  void *v232;
  unint64_t *v233;
  unsigned __int8 v234;
  uint64_t v235;
  const char *v236;
  NSObject *v237;
  unsigned __int8 v238;
  uint64_t v239;
  const char *v240;
  NSObject *v241;
  unsigned __int8 v242;
  uint64_t v243;
  const char *v244;
  NSObject *v245;
  float64x2_t v246;
  float64x2_t v247;
  double v248;
  double v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  unint64_t v258;
  double v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  __int128 v265;
  float64_t v266;
  uint64_t v267;
  unint64_t v268;
  double v269;
  double v270;
  uint64_t v271;
  double *v272;
  double *v273;
  unint64_t v274;
  unint64_t v275;
  double *v276;
  double *v277;
  double v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __int128 v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  int v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  char *v298;
  _QWORD *v299;
  unint64_t v300;
  uint64_t v301;
  BOOL v302;
  unint64_t v303;
  __int128 v304;
  unint64_t v305;
  __int128 v306;
  int v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  char *v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  __int128 v317;
  unint64_t v318;
  __int128 v319;
  unsigned __int8 v320;
  uint64_t v321;
  const char *v322;
  NSObject *v323;
  unsigned __int8 v324;
  uint64_t v325;
  const char *v326;
  NSObject *v327;
  int v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  size_t v333;
  const char *v334;
  unsigned __int8 v335;
  unsigned __int8 v336;
  const char *v337;
  size_t v338;
  _BYTE *v339;
  unint64_t v340;
  const char *v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void **v347;
  uint64_t v348;
  uint64_t v349;
  NSObject *v350;
  size_t v351;
  std::__shared_weak_count_vtbl *v352;
  std::__shared_weak_count *v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  char *v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  void *v383;
  unint64_t *v384;
  int v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t *v388;
  uint64_t v389;
  char *v390;
  unsigned __int8 v391;
  uint64_t v392;
  uint64_t *v393;
  NSObject *v394;
  double **v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  _BYTE v406[7];
  _BYTE v407[7];
  uint64_t *v408;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v410;
  int v411;
  const char *v412;
  int v413;
  const char *v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  uint64_t v417;
  char *category;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  _BYTE v422[24];
  __int128 v423;
  void **v424;
  size_t v425;
  unint64_t v426;
  char v427;
  uint64_t v428;

  v428 = *MEMORY[0x24BDAC8D0];
  v5 = a1[5];
  if (v5)
  {
    v7 = *((double *)a1 + 29);
    if (v7 == -1.0)
    {
      v8 = a1[4];
      if (v8)
      {
        v9 = *(double *)(*a1 + 32 * v8 - 32) - *((double *)a1 + 24);
        goto LABEL_5;
      }
      v9 = *(double *)(*a1 + 32 * ((a1[1] - *a1) >> 5) - 32) - *((double *)a1 + 24);
    }
    else
    {
      v9 = v7 - *((double *)a1 + 24);
      v8 = a1[4];
      if (v8)
      {
LABEL_5:
        v10 = *(double *)a1;
        v11 = *(double *)(*a1 + 32 * v8 - 32);
        a1[33] = a1[32];
        if (v5 <= 1)
        {
LABEL_6:
          if (!*((_BYTE *)a1 + 352))
            goto LABEL_475;
          sub_20F3EAEF4(&v417);
          if (**(int **)(v417 + 56) > 2)
            goto LABEL_475;
          v12 = *(unsigned __int8 *)(v417 + 72);
          v13 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
          v14 = v13;
          if (!v12 && !v13)
            goto LABEL_475;
          v408 = &v417;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v410 = std::chrono::system_clock::now().__d_.__rep_;
          v411 = 2;
          v412 = "unknown file";
          v413 = 300;
          v415 = 0;
          v416 = 0;
          v414 = "unknown function";
          v15 = v417;
          if (*(char *)(v417 + 39) < 0)
          {
            v17 = *(const char **)(v417 + 16);
            v16 = *(_QWORD *)(v417 + 24);
          }
          else
          {
            v16 = *(unsigned __int8 *)(v417 + 39);
            v17 = (const char *)(*v408 + 16);
          }
          v398 = *v408 + 16;
          v138 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v138 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v422);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
            if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
              operator delete(*(void **)v422);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v139 = byte_254A4A4F8;
          else
            v139 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v140 = byte_254A4A4F8[23];
          else
            v140 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v422 = os_log_create(v139, v17);
          v141 = &v422[8];
          if (v140 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v140 >= 0x17)
          {
            v142 = v14;
            v143 = v17;
            v144 = v15;
            v145 = v12;
            v146 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v140 | 7) != 0x17)
              v146 = v140 | 7;
            v147 = v146 + 1;
            v141 = operator new(v146 + 1);
            *(_QWORD *)&v422[16] = v140;
            *(_QWORD *)&v423 = v147 | 0x8000000000000000;
            *(_QWORD *)&v422[8] = v141;
            v12 = v145;
            v15 = v144;
            v17 = v143;
            v14 = v142;
          }
          else
          {
            BYTE7(v423) = v140;
            if (!v140)
            {
LABEL_209:
              v141[v140] = 0;
              BYTE8(v423) = 1;
              v148 = (void **)&v424;
              if (v16 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v16 >= 0x17)
              {
                v149 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v16 | 7) != 0x17)
                  v149 = v16 | 7;
                v150 = v149 + 1;
                v148 = (void **)operator new(v149 + 1);
                v425 = v16;
                v426 = v150 | 0x8000000000000000;
                v424 = v148;
              }
              else
              {
                HIBYTE(v426) = v16;
                if (!v16)
                  goto LABEL_217;
              }
              memmove(v148, v17, v16);
LABEL_217:
              *((_BYTE *)v148 + v16) = 0;
              v427 = 1;
              v151 = *(NSObject **)v422;
              if (SHIBYTE(v426) < 0)
                operator delete(v424);
              if (BYTE8(v423) && SBYTE7(v423) < 0)
                operator delete(*(void **)&v422[8]);
              if (*(_QWORD *)v422)
                os_release(*(void **)v422);
              if (v14 && *(_QWORD *)(v14 + 24))
              {
                v152 = _os_log_pack_size();
                v153 = (std::__shared_weak_count_vtbl *)operator new(v152, (std::align_val_t)8uLL);
                v154 = (std::__shared_weak_count *)operator new();
                v155 = v154;
                v154->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v154->__shared_owners_;
                v154->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v154->__shared_weak_owners_ = 0;
                v154[1].__vftable = v153;
                *(_QWORD *)v422 = v153;
                *(_QWORD *)&v422[8] = v153;
                *(_QWORD *)&v422[16] = v154;
                do
                  v157 = __ldxr(p_shared_owners);
                while (__stxr(v157 + 1, p_shared_owners));
                v423 = 0uLL;
                v424 = 0;
                do
                  v158 = __ldaxr(p_shared_owners);
                while (__stlxr(v158 - 1, p_shared_owners));
                if (!v158)
                {
                  ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                  std::__shared_weak_count::__release_weak(v155);
                }
                v159 = *(_QWORD *)v422;
                *(_WORD *)_os_log_pack_fill() = 0;
                v160 = operator new();
                v161 = *(unsigned __int8 *)(v15 + 39);
                v162 = v398;
                if ((v161 & 0x80u) != 0)
                {
                  v162 = *(_QWORD *)(v15 + 16);
                  v161 = *(_QWORD *)(v15 + 24);
                }
                *(_QWORD *)v160 = v159;
                *(_OWORD *)(v160 + 8) = *(_OWORD *)&v422[8];
                *(_QWORD *)&v422[8] = 0;
                *(_QWORD *)&v422[16] = 0;
                *(_OWORD *)(v160 + 24) = v423;
                v423 = 0uLL;
                *(_QWORD *)(v160 + 40) = v162;
                *(_QWORD *)(v160 + 48) = v161;
                *(_BYTE *)(v160 + 56) = 2;
                category = 0;
                v420 = v160;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), &v420);
                v163 = v420;
                v420 = 0;
                if (v163)
                {
                  v164 = *(std::__shared_weak_count **)(v163 + 32);
                  if (v164)
                  {
                    v165 = (unint64_t *)&v164->__shared_owners_;
                    do
                      v166 = __ldaxr(v165);
                    while (__stlxr(v166 - 1, v165));
                    if (!v166)
                    {
                      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                      std::__shared_weak_count::__release_weak(v164);
                    }
                  }
                  v167 = *(std::__shared_weak_count **)(v163 + 16);
                  if (v167)
                  {
                    v168 = (unint64_t *)&v167->__shared_owners_;
                    do
                      v169 = __ldaxr(v168);
                    while (__stlxr(v169 - 1, v168));
                    if (!v169)
                    {
                      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                      std::__shared_weak_count::__release_weak(v167);
                    }
                  }
                  MEMORY[0x212BC6398](v163, 0x10F0C40B62ED6C6);
                  v170 = category;
                  category = 0;
                  if (v170)
                  {
                    v171 = (std::__shared_weak_count *)*((_QWORD *)v170 + 4);
                    if (v171)
                    {
                      v172 = (unint64_t *)&v171->__shared_owners_;
                      do
                        v173 = __ldaxr(v172);
                      while (__stlxr(v173 - 1, v172));
                      if (!v173)
                      {
                        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                        std::__shared_weak_count::__release_weak(v171);
                      }
                    }
                    v174 = (std::__shared_weak_count *)*((_QWORD *)v170 + 2);
                    if (v174)
                    {
                      v175 = (unint64_t *)&v174->__shared_owners_;
                      do
                        v176 = __ldaxr(v175);
                      while (__stlxr(v176 - 1, v175));
                      if (!v176)
                      {
                        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                        std::__shared_weak_count::__release_weak(v174);
                      }
                    }
                    MEMORY[0x212BC6398](v170, 0x10F0C40B62ED6C6);
                  }
                }
                v177 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
                if (*((_QWORD *)&v423 + 1))
                {
                  v178 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
                  do
                    v179 = __ldaxr(v178);
                  while (__stlxr(v179 - 1, v178));
                  if (!v179)
                  {
                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                    std::__shared_weak_count::__release_weak(v177);
                  }
                }
                v180 = *(std::__shared_weak_count **)&v422[16];
                if (*(_QWORD *)&v422[16])
                {
                  v181 = (unint64_t *)(*(_QWORD *)&v422[16] + 8);
                  do
                    v182 = __ldaxr(v181);
                  while (__stlxr(v182 - 1, v181));
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                    std::__shared_weak_count::__release_weak(v180);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG);
                *(_WORD *)v422 = 0;
                v183 = (void *)_os_log_send_and_compose_impl();
                if (v183)
                  free(v183);
              }
              if (v12)
              {
                sub_20E8C003C((uint64_t)&v408, "ResampleIMUMeasurement Called with < 2 IMU measurements.  Skipping Resampling");
                sub_20E863570((uint64_t)&v408);
              }
              sub_20E863570((uint64_t)&v408);
              v184 = v416;
              if (!v416)
                goto LABEL_475;
              v185 = (unint64_t *)&v416->__shared_owners_;
              do
                v186 = __ldaxr(v185);
              while (__stlxr(v186 - 1, v185));
              goto LABEL_356;
            }
          }
          memmove(v141, v139, v140);
          goto LABEL_209;
        }
        goto LABEL_22;
      }
    }
    v10 = *(double *)a1;
    v11 = *(double *)(*a1 + 32 * ((a1[1] - *a1) >> 5) - 32);
    a1[33] = a1[32];
    if (v5 <= 1)
      goto LABEL_6;
LABEL_22:
    if (v8)
    {
      if (*(double *)(*(_QWORD *)&v10 + 32 * v8 - 32) < v11)
      {
LABEL_24:
        if (!*((_BYTE *)a1 + 352))
          goto LABEL_475;
        sub_20F3EAEF4(&v417);
        if (**(int **)(v417 + 56) > 5)
          goto LABEL_475;
        v26 = *(unsigned __int8 *)(v417 + 72);
        v27 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
        v28 = v27;
        if (!v26 && !v27)
          goto LABEL_475;
        v408 = &v417;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v410 = std::chrono::system_clock::now().__d_.__rep_;
        v411 = 5;
        v412 = "unknown file";
        v413 = 308;
        v415 = 0;
        v416 = 0;
        v414 = "unknown function";
        v29 = v417;
        if (*(char *)(v417 + 39) < 0)
        {
          v31 = *(const char **)(v417 + 16);
          v30 = *(_QWORD *)(v417 + 24);
        }
        else
        {
          v30 = *(unsigned __int8 *)(v417 + 39);
          v31 = (const char *)(*v408 + 16);
        }
        v399 = *v408 + 16;
        v187 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v187 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v422);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
          if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
            operator delete(*(void **)v422);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v188 = byte_254A4A4F8;
        else
          v188 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v189 = byte_254A4A4F8[23];
        else
          v189 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v422 = os_log_create(v188, v31);
        v190 = &v422[8];
        if (v189 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v189 >= 0x17)
        {
          v191 = v28;
          v192 = v31;
          v193 = v29;
          v194 = v26;
          v195 = (v189 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v189 | 7) != 0x17)
            v195 = v189 | 7;
          v196 = v195 + 1;
          v190 = operator new(v195 + 1);
          *(_QWORD *)&v422[16] = v189;
          *(_QWORD *)&v423 = v196 | 0x8000000000000000;
          *(_QWORD *)&v422[8] = v190;
          v26 = v194;
          v29 = v193;
          v31 = v192;
          v28 = v191;
        }
        else
        {
          BYTE7(v423) = v189;
          if (!v189)
          {
LABEL_291:
            v190[v189] = 0;
            BYTE8(v423) = 1;
            v197 = (void **)&v424;
            if (v30 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v30 >= 0x17)
            {
              v198 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17)
                v198 = v30 | 7;
              v199 = v198 + 1;
              v197 = (void **)operator new(v198 + 1);
              v425 = v30;
              v426 = v199 | 0x8000000000000000;
              v424 = v197;
            }
            else
            {
              HIBYTE(v426) = v30;
              if (!v30)
                goto LABEL_299;
            }
            memmove(v197, v31, v30);
LABEL_299:
            *((_BYTE *)v197 + v30) = 0;
            v427 = 1;
            v200 = *(NSObject **)v422;
            if (SHIBYTE(v426) < 0)
              operator delete(v424);
            if (BYTE8(v423) && SBYTE7(v423) < 0)
              operator delete(*(void **)&v422[8]);
            if (*(_QWORD *)v422)
              os_release(*(void **)v422);
            if (v28 && *(_QWORD *)(v28 + 24))
            {
              v201 = _os_log_pack_size();
              v202 = (std::__shared_weak_count_vtbl *)operator new(v201, (std::align_val_t)8uLL);
              v203 = (std::__shared_weak_count *)operator new();
              v204 = v203;
              v203->__shared_owners_ = 0;
              v205 = (unint64_t *)&v203->__shared_owners_;
              v203->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v203->__shared_weak_owners_ = 0;
              v203[1].__vftable = v202;
              *(_QWORD *)v422 = v202;
              *(_QWORD *)&v422[8] = v202;
              *(_QWORD *)&v422[16] = v203;
              do
                v206 = __ldxr(v205);
              while (__stxr(v206 + 1, v205));
              v423 = 0uLL;
              v424 = 0;
              do
                v207 = __ldaxr(v205);
              while (__stlxr(v207 - 1, v205));
              if (!v207)
              {
                ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                std::__shared_weak_count::__release_weak(v204);
              }
              v208 = *(_QWORD *)v422;
              *(_WORD *)_os_log_pack_fill() = 0;
              v209 = operator new();
              v210 = *(unsigned __int8 *)(v29 + 39);
              v211 = v399;
              if ((v210 & 0x80u) != 0)
              {
                v211 = *(_QWORD *)(v29 + 16);
                v210 = *(_QWORD *)(v29 + 24);
              }
              *(_QWORD *)v209 = v208;
              *(_OWORD *)(v209 + 8) = *(_OWORD *)&v422[8];
              *(_QWORD *)&v422[8] = 0;
              *(_QWORD *)&v422[16] = 0;
              *(_OWORD *)(v209 + 24) = v423;
              v423 = 0uLL;
              *(_QWORD *)(v209 + 40) = v211;
              *(_QWORD *)(v209 + 48) = v210;
              *(_BYTE *)(v209 + 56) = 16;
              category = 0;
              v420 = v209;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v28 + 24) + 40))(*(_QWORD *)(v28 + 24), &v420);
              v212 = v420;
              v420 = 0;
              if (v212)
              {
                v213 = *(std::__shared_weak_count **)(v212 + 32);
                if (v213)
                {
                  v214 = (unint64_t *)&v213->__shared_owners_;
                  do
                    v215 = __ldaxr(v214);
                  while (__stlxr(v215 - 1, v214));
                  if (!v215)
                  {
                    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                    std::__shared_weak_count::__release_weak(v213);
                  }
                }
                v216 = *(std::__shared_weak_count **)(v212 + 16);
                if (v216)
                {
                  v217 = (unint64_t *)&v216->__shared_owners_;
                  do
                    v218 = __ldaxr(v217);
                  while (__stlxr(v218 - 1, v217));
                  if (!v218)
                  {
                    ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                    std::__shared_weak_count::__release_weak(v216);
                  }
                }
                MEMORY[0x212BC6398](v212, 0x10F0C40B62ED6C6);
                v219 = category;
                category = 0;
                if (v219)
                {
                  v220 = (std::__shared_weak_count *)*((_QWORD *)v219 + 4);
                  if (v220)
                  {
                    v221 = (unint64_t *)&v220->__shared_owners_;
                    do
                      v222 = __ldaxr(v221);
                    while (__stlxr(v222 - 1, v221));
                    if (!v222)
                    {
                      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                      std::__shared_weak_count::__release_weak(v220);
                    }
                  }
                  v223 = (std::__shared_weak_count *)*((_QWORD *)v219 + 2);
                  if (v223)
                  {
                    v224 = (unint64_t *)&v223->__shared_owners_;
                    do
                      v225 = __ldaxr(v224);
                    while (__stlxr(v225 - 1, v224));
                    if (!v225)
                    {
                      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                      std::__shared_weak_count::__release_weak(v223);
                    }
                  }
                  MEMORY[0x212BC6398](v219, 0x10F0C40B62ED6C6);
                }
              }
              v226 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
              if (*((_QWORD *)&v423 + 1))
              {
                v227 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
                do
                  v228 = __ldaxr(v227);
                while (__stlxr(v228 - 1, v227));
                if (!v228)
                {
                  ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                  std::__shared_weak_count::__release_weak(v226);
                }
              }
              v229 = *(std::__shared_weak_count **)&v422[16];
              if (*(_QWORD *)&v422[16])
              {
                v230 = (unint64_t *)(*(_QWORD *)&v422[16] + 8);
                do
                  v231 = __ldaxr(v230);
                while (__stlxr(v231 - 1, v230));
                if (!v231)
                {
                  ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                  std::__shared_weak_count::__release_weak(v229);
                }
              }
            }
            else
            {
              os_log_type_enabled(v200, OS_LOG_TYPE_ERROR);
              *(_WORD *)v422 = 0;
              v232 = (void *)_os_log_send_and_compose_impl();
              if (v232)
                free(v232);
            }
            if (v26)
            {
              sub_20E8C003C((uint64_t)&v408, "end_sample_timestamp larger than last sample in measurement buffer");
              sub_20E863570((uint64_t)&v408);
            }
            sub_20E863570((uint64_t)&v408);
            v184 = v416;
            if (!v416)
              goto LABEL_475;
            v233 = (unint64_t *)&v416->__shared_owners_;
            do
              v186 = __ldaxr(v233);
            while (__stlxr(v186 - 1, v233));
LABEL_356:
            if (!v186)
            {
              ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
              std::__shared_weak_count::__release_weak(v184);
            }
            goto LABEL_475;
          }
        }
        memmove(v190, v188, v189);
        goto LABEL_291;
      }
    }
    else if (*(double *)(*(_QWORD *)&v10 + 32 * ((a1[1] - *(_QWORD *)&v10) >> 5) - 32) < v11)
    {
      goto LABEL_24;
    }
    v32 = *((double *)a1 + 23);
    if (v32 < 0.0001)
    {
      if (*((_BYTE *)a1 + 352))
      {
        sub_20F3EAEF4(&v417);
        if (**(int **)(v417 + 56) <= 5)
        {
          v33 = *(unsigned __int8 *)(v417 + 72);
          v34 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
          v35 = v34 ? v34 + 16 : 0;
          if (v33 || v34)
          {
            v408 = &v417;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v410 = std::chrono::system_clock::now().__d_.__rep_;
            v411 = 5;
            v412 = "unknown file";
            v413 = 315;
            v415 = 0;
            v416 = 0;
            v414 = "unknown function";
            v36 = (uint64_t *)(v417 + 16);
            if (*(char *)(v417 + 39) < 0)
            {
              v38 = *(char **)(v417 + 16);
              v37 = *(_QWORD *)(v417 + 24);
            }
            else
            {
              v37 = *(unsigned __int8 *)(v417 + 39);
              v38 = (char *)(v417 + 16);
            }
            category = v38;
            v419 = v37;
            v234 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v234 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v422);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
              if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
                operator delete(*(void **)v422);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v235 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v236 = byte_254A4A4F8;
            }
            else
            {
              v235 = *(_QWORD *)&byte_254A4A4F8[8];
              v236 = *(const char **)byte_254A4A4F8;
            }
            v420 = (uint64_t)v236;
            v421 = v235;
            *(_QWORD *)v422 = os_log_create(v236, category);
            sub_20E86E5A8(&v422[8], (uint64_t)&v420);
            sub_20E86E5A8(&v424, (uint64_t)&category);
            v237 = *(NSObject **)v422;
            sub_20E86E44C((uint64_t)v422);
            sub_20F3FF9E8(v35, v36, v237, OS_LOG_TYPE_ERROR);
            if (v33)
            {
              sub_20E8C003C((uint64_t)&v408, "IMU interpolation time delta less than 1e-4");
              sub_20E863570((uint64_t)&v408);
            }
            goto LABEL_474;
          }
        }
      }
      goto LABEL_475;
    }
    v39 = 32 * a1[3];
    if (*(double *)(*(_QWORD *)&v10 + v39) <= v9)
      v40 = v9;
    else
      v40 = *(double *)(*(_QWORD *)&v10 + v39);
    if (v11 - v40 <= 0.0)
    {
      if (!*((_BYTE *)a1 + 352))
        goto LABEL_475;
      sub_20F3EAEF4(&v417);
      if (**(int **)(v417 + 56) > 5)
        goto LABEL_475;
      v67 = *(unsigned __int8 *)(v417 + 72);
      v68 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
      v69 = v68 ? v68 + 16 : 0;
      if (!v67 && !v68)
        goto LABEL_475;
      v408 = &v417;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v410 = std::chrono::system_clock::now().__d_.__rep_;
      v411 = 5;
      v412 = "unknown file";
      v413 = 330;
      v415 = 0;
      v416 = 0;
      v414 = "unknown function";
      v70 = (uint64_t *)(v417 + 16);
      if (*(char *)(v417 + 39) < 0)
      {
        v72 = *(char **)(v417 + 16);
        v71 = *(_QWORD *)(v417 + 24);
      }
      else
      {
        v71 = *(unsigned __int8 *)(v417 + 39);
        v72 = (char *)(v417 + 16);
      }
      category = v72;
      v419 = v71;
      v238 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v238 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v422);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
        if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
          operator delete(*(void **)v422);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v239 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v240 = byte_254A4A4F8;
      }
      else
      {
        v239 = *(_QWORD *)&byte_254A4A4F8[8];
        v240 = *(const char **)byte_254A4A4F8;
      }
      v420 = (uint64_t)v240;
      v421 = v239;
      *(_QWORD *)v422 = os_log_create(v240, category);
      sub_20E86E5A8(&v422[8], (uint64_t)&v420);
      sub_20E86E5A8(&v424, (uint64_t)&category);
      v241 = *(NSObject **)v422;
      sub_20E86E44C((uint64_t)v422);
      sub_20F3FFDD4(v69, v70, v241, OS_LOG_TYPE_ERROR);
      if (v67)
      {
        sub_20E8C003C((uint64_t)&v408, "Sampling interval must be > 0.0");
        sub_20E863570((uint64_t)&v408);
      }
      goto LABEL_474;
    }
    if (v32 == 0.0)
      v41 = 1.0;
    else
      v41 = *((double *)a1 + 23);
    v42 = (unint64_t)(ceil((v11 - v40) / v41) + 1.0);
    v397 = (double **)(a1 + 38);
    v43 = (double *)a1[38];
    a1[39] = (uint64_t)v43;
    if (!v42)
      goto LABEL_100;
    v44 = 0;
    while (1)
    {
      v46 = v11 - v32 * (double)v44;
      if (v46 < v40)
        goto LABEL_53;
      v47 = a1[40];
      if ((unint64_t)v43 >= v47)
        break;
      *v43 = v46;
      v45 = (uint64_t)(v43 + 1);
LABEL_52:
      a1[39] = v45;
      v43 = (double *)v45;
LABEL_53:
      if (++v44 == v42)
      {
        v73 = *v397;
        v74 = v43 - 1;
        if (*v397 != v43 && v74 > v73)
        {
          v76 = (unint64_t)(v73 + 1);
          do
          {
            v77 = *(_QWORD *)(v76 - 8);
            *(double *)(v76 - 8) = *v74;
            *(_QWORD *)v74-- = v77;
            v78 = v76 >= (unint64_t)v74;
            v76 += 8;
          }
          while (!v78);
        }
        v43 = v73;
LABEL_100:
        v79 = a1[5];
        if (v79)
        {
          v80 = 0;
          v81 = 0;
          v82 = a1[5];
          do
          {
            v83 = v82 >> 1;
            v84 = (v82 >> 1) + v81;
            if (*(double *)(*a1 + 32 * ((v84 + a1[3]) % (unint64_t)((a1[1] - *a1) >> 5))) <= *v43)
            {
              v81 = v84 + 1;
              v80 = v84 + 1 == v79;
              v83 = v82 + ~v83;
            }
            v82 = v83;
          }
          while (v83);
          if (!v80 && v81)
          {
            v85 = v81 - 1;
            v86 = v79 - (v81 - 1);
            v87 = a3;
            goto LABEL_383;
          }
        }
        v87 = a3;
        if (*((_BYTE *)a1 + 352))
        {
          sub_20F3EAEF4(&v417);
          if (**(int **)(v417 + 56) <= 2)
          {
            v88 = *(unsigned __int8 *)(v417 + 72);
            v89 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
            v90 = v89 ? v89 + 16 : 0;
            if (v88 || v89 != 0)
            {
              v408 = &v417;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v410 = std::chrono::system_clock::now().__d_.__rep_;
              v411 = 2;
              v412 = "unknown file";
              v413 = 353;
              v415 = 0;
              v416 = 0;
              v414 = "unknown function";
              v92 = (uint64_t *)(v417 + 16);
              if (*(char *)(v417 + 39) < 0)
              {
                v94 = *(char **)(v417 + 16);
                v93 = *(_QWORD *)(v417 + 24);
              }
              else
              {
                v93 = *(unsigned __int8 *)(v417 + 39);
                v94 = (char *)(*v408 + 16);
              }
              category = v94;
              v419 = v93;
              v242 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v242 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v422);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
                if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
                  operator delete(*(void **)v422);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v87 = a3;
              }
              v243 = byte_254A4A4F8[23];
              if (byte_254A4A4F8[23] >= 0)
              {
                v244 = byte_254A4A4F8;
              }
              else
              {
                v243 = *(_QWORD *)&byte_254A4A4F8[8];
                v244 = *(const char **)byte_254A4A4F8;
              }
              v420 = (uint64_t)v244;
              v421 = v243;
              *(_QWORD *)v422 = os_log_create(v244, category);
              sub_20E86E5A8(&v422[8], (uint64_t)&v420);
              sub_20E86E5A8(&v424, (uint64_t)&category);
              v245 = *(NSObject **)v422;
              sub_20E86E44C((uint64_t)v422);
              sub_20F4001C0(v90, v92, v245, OS_LOG_TYPE_DEBUG);
              if (v88)
              {
                sub_20E8C003C((uint64_t)&v408, "No new samples beyond first sample time. Use 1st sample in buffer");
                sub_20E863570((uint64_t)&v408);
              }
              sub_20E863714((uint64_t)&v408);
            }
          }
          v79 = a1[5];
        }
        if (!v79)
        {
          sub_20F3EAFE8(a1, a1);
          v299 = (_QWORD *)a1[32];
          v263 = v299;
          v256 = v299;
          goto LABEL_443;
        }
        v85 = 0;
        v86 = v79;
LABEL_383:
        v246.f64[0] = sub_20F3EAFE8(a1, a1);
        if (v86 < 2)
        {
          v253 = a1[5];
          if (v85)
            v254 = v79 - v85;
          else
            v254 = a1[5];
          v255 = a1[34];
          v256 = (_QWORD *)a1[32];
          if (v254 > (v255 - (uint64_t)v256) >> 5)
          {
            if (v256)
            {
              a1[33] = (uint64_t)v256;
              operator delete(v256);
              v255 = 0;
              a1[32] = 0;
              a1[33] = 0;
              a1[34] = 0;
            }
            if (v254 >> 59)
              sub_20E867F44();
            v257 = v255 >> 4;
            if (v255 >> 4 <= v254)
              v257 = v254;
            if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFE0)
              v258 = 0x7FFFFFFFFFFFFFFLL;
            else
              v258 = v257;
            if (v258 >> 59)
              sub_20E867F44();
            v256 = operator new(32 * v258);
            a1[32] = (uint64_t)v256;
            a1[33] = (uint64_t)v256;
            a1[34] = (uint64_t)&v256[4 * v258];
            v259 = *(double *)a1;
            v260 = (a1[1] - *a1) >> 5;
            v261 = a1[5] - v85;
            v262 = v85 + a1[3];
            v263 = v256;
            do
            {
              v264 = *(_QWORD *)&v259 + 32 * (v262 % v260);
              *v263 = *(_QWORD *)v264;
              v265 = *(_OWORD *)(v264 + 8);
              v263[3] = *(_QWORD *)(v264 + 24);
              *(_OWORD *)(v263 + 1) = v265;
              v263 += 4;
              ++v262;
              --v261;
            }
            while (v261);
LABEL_442:
            v299 = v256;
LABEL_443:
            a1[33] = (uint64_t)v256 + (char *)v263 - (char *)v299;
            if (*((_BYTE *)a1 + 352))
            {
              sub_20F3EAEF4(&v417);
              if (**(int **)(v417 + 56) <= 2)
              {
                v307 = *(unsigned __int8 *)(v417 + 72);
                v308 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
                v309 = v308 ? v308 + 16 : 0;
                if (v307 || v308)
                {
                  v408 = &v417;
                  rep = std::chrono::steady_clock::now().__d_.__rep_;
                  v410 = std::chrono::system_clock::now().__d_.__rep_;
                  v411 = 2;
                  v412 = "unknown file";
                  v413 = 374;
                  v415 = 0;
                  v416 = 0;
                  v414 = "unknown function";
                  v310 = *v408;
                  v311 = (uint64_t *)(*v408 + 16);
                  if (*(char *)(*v408 + 39) < 0)
                  {
                    v313 = *(char **)(v310 + 16);
                    v312 = *(_QWORD *)(v310 + 24);
                  }
                  else
                  {
                    v312 = *(unsigned __int8 *)(*v408 + 39);
                    v313 = (char *)(*v408 + 16);
                  }
                  category = v313;
                  v419 = v312;
                  v320 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v320 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)v422);
                    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
                    if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
                      operator delete(*(void **)v422);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                  }
                  v321 = byte_254A4A4F8[23];
                  if (byte_254A4A4F8[23] >= 0)
                  {
                    v322 = byte_254A4A4F8;
                  }
                  else
                  {
                    v321 = *(_QWORD *)&byte_254A4A4F8[8];
                    v322 = *(const char **)byte_254A4A4F8;
                  }
                  v420 = (uint64_t)v322;
                  v421 = v321;
                  *(_QWORD *)v422 = os_log_create(v322, category);
                  sub_20E86E5A8(&v422[8], (uint64_t)&v420);
                  sub_20E86E5A8(&v424, (uint64_t)&category);
                  v323 = *(NSObject **)v422;
                  sub_20E86E44C((uint64_t)v422);
                  sub_20F4005AC(v309, v311, v323, OS_LOG_TYPE_DEBUG);
                  if (v307)
                  {
                    sub_20E8C003C((uint64_t)&v408, "< 2 samples in resampled_imu buffer.  Not adding any samples to high speed sensor buffer");
                    sub_20E863570((uint64_t)&v408);
                  }
                  goto LABEL_474;
                }
              }
            }
LABEL_475:
            if (!*((_BYTE *)a1 + 352))
              return 0;
            sub_20F3EAEF4(&v420);
            if (**(int **)(v420 + 56) > 2)
              return 0;
            v328 = *(unsigned __int8 *)(v420 + 72);
            v329 = sub_20E8C31DC(v420, "OSLogSurrogateAppender", 1, 0);
            v330 = v329;
            if (!v328 && !v329)
              return 0;
            v408 = &v420;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v410 = std::chrono::system_clock::now().__d_.__rep_;
            v411 = 2;
            v412 = "unknown file";
            v413 = 248;
            v415 = 0;
            v416 = 0;
            v414 = "unknown function";
            v331 = *v408;
            v332 = *v408 + 16;
            if (*(char *)(*v408 + 39) < 0)
            {
              v334 = *(const char **)(v331 + 16);
              v333 = *(_QWORD *)(v331 + 24);
              v336 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v336 & 1) == 0)
              {
LABEL_587:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)v422);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
                  if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
                    operator delete(*(void **)v422);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v333 = *(unsigned __int8 *)(*v408 + 39);
              v334 = (const char *)(*v408 + 16);
              v335 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v335 & 1) == 0)
                goto LABEL_587;
            }
            if (byte_254A4A4F8[23] >= 0)
              v337 = byte_254A4A4F8;
            else
              v337 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v338 = byte_254A4A4F8[23];
            else
              v338 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v422 = os_log_create(v337, v334);
            v339 = &v422[8];
            if (v338 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v338 >= 0x17)
            {
              v340 = v330;
              v341 = v334;
              v342 = v331;
              v343 = v328;
              v344 = v332;
              v345 = (v338 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v338 | 7) != 0x17)
                v345 = v338 | 7;
              v346 = v345 + 1;
              v339 = operator new(v345 + 1);
              *(_QWORD *)&v422[16] = v338;
              *(_QWORD *)&v423 = v346 | 0x8000000000000000;
              *(_QWORD *)&v422[8] = v339;
              v332 = v344;
              v328 = v343;
              v331 = v342;
              v334 = v341;
              v330 = v340;
            }
            else
            {
              BYTE7(v423) = v338;
              if (!v338)
              {
LABEL_497:
                v339[v338] = 0;
                BYTE8(v423) = 1;
                v347 = (void **)&v424;
                if (v333 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v333 >= 0x17)
                {
                  v348 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v333 | 7) != 0x17)
                    v348 = v333 | 7;
                  v349 = v348 + 1;
                  v347 = (void **)operator new(v348 + 1);
                  v425 = v333;
                  v426 = v349 | 0x8000000000000000;
                  v424 = v347;
                }
                else
                {
                  HIBYTE(v426) = v333;
                  if (!v333)
                  {
LABEL_505:
                    *((_BYTE *)v347 + v333) = 0;
                    v427 = 1;
                    v350 = *(NSObject **)v422;
                    if (SHIBYTE(v426) < 0)
                      operator delete(v424);
                    if (BYTE8(v423) && SBYTE7(v423) < 0)
                      operator delete(*(void **)&v422[8]);
                    if (*(_QWORD *)v422)
                      os_release(*(void **)v422);
                    if (v330 && *(_QWORD *)(v330 + 24))
                    {
                      v351 = _os_log_pack_size();
                      v352 = (std::__shared_weak_count_vtbl *)operator new(v351, (std::align_val_t)8uLL);
                      v353 = (std::__shared_weak_count *)operator new();
                      v354 = v353;
                      v353->__shared_owners_ = 0;
                      v355 = (unint64_t *)&v353->__shared_owners_;
                      v353->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v353->__shared_weak_owners_ = 0;
                      v353[1].__vftable = v352;
                      *(_QWORD *)v422 = v352;
                      *(_QWORD *)&v422[8] = v352;
                      *(_QWORD *)&v422[16] = v353;
                      do
                        v356 = __ldxr(v355);
                      while (__stxr(v356 + 1, v355));
                      v423 = 0uLL;
                      v424 = 0;
                      do
                        v357 = __ldaxr(v355);
                      while (__stlxr(v357 - 1, v355));
                      if (!v357)
                      {
                        ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                        std::__shared_weak_count::__release_weak(v354);
                      }
                      v358 = *(_QWORD *)v422;
                      v359 = _os_log_pack_fill();
                      *(_DWORD *)v359 = 134217984;
                      *(double *)(v359 + 4) = v11;
                      v360 = operator new();
                      v361 = *(unsigned __int8 *)(v331 + 39);
                      if ((v361 & 0x80u) == 0)
                        v362 = v332;
                      else
                        v362 = *(_QWORD *)(v331 + 16);
                      if ((v361 & 0x80u) != 0)
                        v361 = *(_QWORD *)(v331 + 24);
                      *(_QWORD *)v360 = v358;
                      *(_OWORD *)(v360 + 8) = *(_OWORD *)&v422[8];
                      *(_QWORD *)&v422[8] = 0;
                      *(_QWORD *)&v422[16] = 0;
                      *(_OWORD *)(v360 + 24) = v423;
                      v423 = 0uLL;
                      *(_QWORD *)(v360 + 40) = v362;
                      *(_QWORD *)(v360 + 48) = v361;
                      *(_BYTE *)(v360 + 56) = 2;
                      v400 = 0;
                      v403 = (uint64_t *)v360;
                      (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v330 + 24) + 40))(*(_QWORD *)(v330 + 24), &v403);
                      v363 = v403;
                      v403 = 0;
                      if (v363)
                      {
                        v364 = (std::__shared_weak_count *)v363[4];
                        if (v364)
                        {
                          v365 = (unint64_t *)&v364->__shared_owners_;
                          do
                            v366 = __ldaxr(v365);
                          while (__stlxr(v366 - 1, v365));
                          if (!v366)
                          {
                            ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                            std::__shared_weak_count::__release_weak(v364);
                          }
                        }
                        v367 = (std::__shared_weak_count *)v363[2];
                        if (v367)
                        {
                          v368 = (unint64_t *)&v367->__shared_owners_;
                          do
                            v369 = __ldaxr(v368);
                          while (__stlxr(v369 - 1, v368));
                          if (!v369)
                          {
                            ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                            std::__shared_weak_count::__release_weak(v367);
                          }
                        }
                        MEMORY[0x212BC6398](v363, 0x10F0C40B62ED6C6);
                        v370 = v400;
                        v400 = 0;
                        if (v370)
                        {
                          v371 = (std::__shared_weak_count *)*((_QWORD *)v370 + 4);
                          if (v371)
                          {
                            v372 = (unint64_t *)&v371->__shared_owners_;
                            do
                              v373 = __ldaxr(v372);
                            while (__stlxr(v373 - 1, v372));
                            if (!v373)
                            {
                              ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                              std::__shared_weak_count::__release_weak(v371);
                            }
                          }
                          v374 = (std::__shared_weak_count *)*((_QWORD *)v370 + 2);
                          if (v374)
                          {
                            v375 = (unint64_t *)&v374->__shared_owners_;
                            do
                              v376 = __ldaxr(v375);
                            while (__stlxr(v376 - 1, v375));
                            if (!v376)
                            {
                              ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                              std::__shared_weak_count::__release_weak(v374);
                            }
                          }
                          MEMORY[0x212BC6398](v370, 0x10F0C40B62ED6C6);
                        }
                      }
                      v377 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
                      if (*((_QWORD *)&v423 + 1))
                      {
                        v378 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
                        do
                          v379 = __ldaxr(v378);
                        while (__stlxr(v379 - 1, v378));
                        if (!v379)
                        {
                          ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                          std::__shared_weak_count::__release_weak(v377);
                        }
                      }
                      v380 = *(std::__shared_weak_count **)&v422[16];
                      if (*(_QWORD *)&v422[16])
                      {
                        v381 = (unint64_t *)(*(_QWORD *)&v422[16] + 8);
                        do
                          v382 = __ldaxr(v381);
                        while (__stlxr(v382 - 1, v381));
                        if (!v382)
                        {
                          ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                          std::__shared_weak_count::__release_weak(v380);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v350, OS_LOG_TYPE_DEBUG);
                      *(_DWORD *)v422 = 134217984;
                      *(double *)&v422[4] = v11;
                      v383 = (void *)_os_log_send_and_compose_impl();
                      if (v383)
                        free(v383);
                    }
                    if (v328)
                    {
                      sub_20E8C003C((uint64_t)&v408, "High Speed Interpolation Failed for new sample at end timestamp = %f", v11);
                      sub_20E863570((uint64_t)&v408);
                    }
                    sub_20E863570((uint64_t)&v408);
                    v135 = v416;
                    if (v416)
                    {
                      v384 = (unint64_t *)&v416->__shared_owners_;
                      do
                        v137 = __ldaxr(v384);
                      while (__stlxr(v137 - 1, v384));
                      goto LABEL_565;
                    }
                    return 0;
                  }
                }
                memmove(v347, v334, v333);
                goto LABEL_505;
              }
            }
            memmove(v339, v337, v338);
            goto LABEL_497;
          }
          v299 = (_QWORD *)a1[33];
          v300 = ((char *)v299 - (char *)v256) >> 5;
          if (v300 >= v254)
          {
            v263 = (_QWORD *)a1[32];
            do
            {
              v305 = *a1 + 32 * ((v85 + a1[3]) % (unint64_t)((a1[1] - *a1) >> 5));
              *v263 = *(_QWORD *)v305;
              v306 = *(_OWORD *)(v305 + 8);
              v263[3] = *(_QWORD *)(v305 + 24);
              *(_OWORD *)(v263 + 1) = v306;
              ++v85;
              v263 += 4;
            }
            while (v85 != a1[5]);
            goto LABEL_442;
          }
          v301 = v300 + v85;
          v302 = v300 + v85 == v253;
          if (v300 + v85 == v253)
          {
            do
            {
              v303 = *a1 + 32 * ((v85 + a1[3]) % (unint64_t)((a1[1] - *a1) >> 5));
              *v256 = *(_QWORD *)v303;
              v304 = *(_OWORD *)(v303 + 8);
              v256[3] = *(_QWORD *)(v303 + 24);
              *(_OWORD *)(v256 + 1) = v304;
              ++v85;
              v256 += 4;
            }
            while (v85 != a1[5]);
LABEL_456:
            v256 = (_QWORD *)a1[33];
            v299 = v256;
            v263 = v256;
            if (v302)
              goto LABEL_443;
          }
          else if (v299 != v256)
          {
            v314 = v300 - 1;
            do
            {
              do
              {
                v315 = v314;
                v316 = *a1 + 32 * ((v85 + a1[3]) % (unint64_t)((a1[1] - *a1) >> 5));
                *v256 = *(_QWORD *)v316;
                v317 = *(_OWORD *)(v316 + 8);
                v256[3] = *(_QWORD *)(v316 + 24);
                *(_OWORD *)(v256 + 1) = v317;
                ++v85;
                v314 = v315 - 1;
                v256 += 4;
              }
              while (v85 == a1[5]);
            }
            while (v315);
            goto LABEL_456;
          }
          v263 = v256;
          do
          {
            v318 = *a1 + 32 * ((v301 + a1[3]) % (unint64_t)((a1[1] - *a1) >> 5));
            *v263 = *(_QWORD *)v318;
            v319 = *(_OWORD *)(v318 + 8);
            v263[3] = *(_QWORD *)(v318 + 24);
            *(_OWORD *)(v263 + 1) = v319;
            ++v301;
            v263 += 4;
          }
          while (v301 != a1[5]);
          goto LABEL_443;
        }
        v266 = v246.f64[0];
        v267 = a1[3];
        v268 = (a1[1] - *a1) >> 5;
        if (*(double *)a1[38] >= *(double *)(*a1 + 32 * ((v267 + v85) % v268)))
        {
          v246.f64[0] = *(float64_t *)(a1[39] - 8);
          v269 = *(double *)(*a1 + 32 * ((v79 + v267 - 1) % v268));
          if (v246.f64[0] <= v269)
          {
            v402 = v79;
            v403 = a1;
            LOBYTE(v404) = 0;
            *(_DWORD *)((char *)&v404 + 1) = *(_DWORD *)v407;
            HIDWORD(v404) = *(_DWORD *)&v407[3];
            v405 = v85;
            v400 = (char *)a1;
            LOBYTE(v401) = 1;
            *(_DWORD *)((char *)&v401 + 1) = *(_DWORD *)v406;
            HIDWORD(v401) = *(_DWORD *)&v406[3];
            if ((sub_20FDB4284(a2, (uint64_t)(a1 + 32), &v403, &v400, (uint64_t)v397, v246, v269, v247, v248, v249, v250, v251, v252) & 1) != 0)
            {
              a1[36] = a1[35];
              v271 = a1[33] - a1[32];
              if (v271)
                sub_20EAF5F94((char **)a1 + 35, v271 >> 5);
              sub_20F4030AC((uint64_t)(a1 + 6), a1 + 32, (uint64_t)(a1 + 35), v270);
              *(_OWORD *)(a1 + 29) = *(_OWORD *)(a1 + 19);
              *((float64_t *)a1 + 31) = v266;
              v272 = (double *)a1[35];
              v273 = (double *)a1[36];
              if (v273 != v272)
              {
                v274 = ((char *)v273 - (char *)v272) >> 5;
                do
                {
                  v275 = v274 >> 1;
                  v276 = &v272[4 * (v274 >> 1)];
                  v278 = *v276;
                  v277 = v276 + 4;
                  v274 += ~(v274 >> 1);
                  if (v278 > *v87 + 0.0001)
                    v274 = v275;
                  else
                    v272 = v277;
                }
                while (v274);
              }
              if (v272 == v273)
              {
                if (*((_BYTE *)a1 + 352))
                {
                  sub_20F3EAEF4(&v420);
                  if (**(int **)(v420 + 56) <= 2)
                  {
                    v385 = *(unsigned __int8 *)(v420 + 72);
                    v386 = sub_20E8C31DC(v420, "OSLogSurrogateAppender", 1, 0);
                    v387 = v386 ? v386 + 16 : 0;
                    if (v385 || v386)
                    {
                      v408 = &v420;
                      rep = std::chrono::steady_clock::now().__d_.__rep_;
                      v410 = std::chrono::system_clock::now().__d_.__rep_;
                      v411 = 2;
                      v412 = "unknown file";
                      v413 = 273;
                      v415 = 0;
                      v416 = 0;
                      v414 = "unknown function";
                      v388 = (uint64_t *)(v420 + 16);
                      if (*(char *)(v420 + 39) < 0)
                      {
                        v390 = *(char **)(v420 + 16);
                        v389 = *(_QWORD *)(v420 + 24);
                      }
                      else
                      {
                        v389 = *(unsigned __int8 *)(v420 + 39);
                        v390 = (char *)(v420 + 16);
                      }
                      v400 = v390;
                      v401 = v389;
                      v391 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                      if ((v391 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                      {
                        sub_20E9E46F8((uint64_t)v422);
                        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
                        if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
                          operator delete(*(void **)v422);
                        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A4A510);
                      }
                      v392 = byte_254A4A4F8[23];
                      if (byte_254A4A4F8[23] >= 0)
                      {
                        v393 = (uint64_t *)byte_254A4A4F8;
                      }
                      else
                      {
                        v392 = *(_QWORD *)&byte_254A4A4F8[8];
                        v393 = *(uint64_t **)byte_254A4A4F8;
                      }
                      v403 = v393;
                      v404 = v392;
                      *(_QWORD *)v422 = os_log_create((const char *)v393, v400);
                      sub_20E86E5A8(&v422[8], (uint64_t)&v403);
                      sub_20E86E5A8(&v424, (uint64_t)&v400);
                      v394 = *(NSObject **)v422;
                      sub_20E86E44C((uint64_t)v422);
                      sub_20F400D84(v387, v388, v394, OS_LOG_TYPE_DEBUG);
                      if (v385)
                      {
                        sub_20E8C003C((uint64_t)&v408, "No new samples beyond last sample time.");
                        sub_20E863570((uint64_t)&v408);
                      }
                      sub_20E863714((uint64_t)&v408);
                    }
                  }
                }
                return 0;
              }
              v279 = a4[4];
              v280 = *a4;
              do
              {
                while (1)
                {
                  v281 = v280 + 32 * v279;
                  v282 = *((_QWORD *)v272 + 3);
                  v283 = *(_OWORD *)(v272 + 1);
                  *(double *)v281 = *v272;
                  *(_OWORD *)(v281 + 8) = v283;
                  *(_QWORD *)(v281 + 24) = v282;
                  v280 = *a4;
                  v284 = (a4[1] - *a4) >> 5;
                  v285 = a4[5];
                  v286 = a4[4] + 1;
                  v287 = v286 >= v284 ? (a4[1] - *a4) >> 5 : 0;
                  v279 = v286 - v287;
                  a4[4] = v279;
                  if (v285 == v284)
                    break;
                  a4[5] = v285 + 1;
                  v272 += 4;
                  if (v272 == (double *)a1[36])
                    goto LABEL_422;
                }
                v288 = a4[3] + 1;
                if (v288 >= v284)
                  v289 = v284;
                else
                  v289 = 0;
                a4[3] = v288 - v289;
                v272 += 4;
              }
              while (v272 != (double *)a1[36]);
LABEL_422:
              if (v279)
                v290 = v279;
              else
                v290 = v284;
              *v87 = *(double *)(v280 + 32 * v290 - 32);
              return 1;
            }
          }
        }
        if (!*((_BYTE *)a1 + 352))
          goto LABEL_475;
        sub_20F3EAEF4(&v417);
        if (**(int **)(v417 + 56) > 5)
          goto LABEL_475;
        v292 = *(unsigned __int8 *)(v417 + 72);
        v293 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
        v294 = v293 ? v293 + 16 : 0;
        if (!v292 && !v293)
          goto LABEL_475;
        v408 = &v417;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v410 = std::chrono::system_clock::now().__d_.__rep_;
        v411 = 5;
        v412 = "unknown file";
        v413 = 387;
        v415 = 0;
        v416 = 0;
        v414 = "unknown function";
        v295 = *v408;
        v296 = (uint64_t *)(*v408 + 16);
        if (*(char *)(*v408 + 39) < 0)
        {
          v298 = *(char **)(v295 + 16);
          v297 = *(_QWORD *)(v295 + 24);
        }
        else
        {
          v297 = *(unsigned __int8 *)(*v408 + 39);
          v298 = (char *)(*v408 + 16);
        }
        category = v298;
        v419 = v297;
        v324 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v324 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v422);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
          if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
            operator delete(*(void **)v422);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v325 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v326 = byte_254A4A4F8;
        }
        else
        {
          v325 = *(_QWORD *)&byte_254A4A4F8[8];
          v326 = *(const char **)byte_254A4A4F8;
        }
        v420 = (uint64_t)v326;
        v421 = v325;
        *(_QWORD *)v422 = os_log_create(v326, category);
        sub_20E86E5A8(&v422[8], (uint64_t)&v420);
        sub_20E86E5A8(&v424, (uint64_t)&category);
        v327 = *(NSObject **)v422;
        sub_20E86E44C((uint64_t)v422);
        sub_20F400998(v294, v296, v327, OS_LOG_TYPE_ERROR);
        if (v292)
        {
          sub_20E8C003C((uint64_t)&v408, "IMU sampler failed - unable to interpolate imu sensor. Not updating High Speed Filtered Buffer.");
          sub_20E863570((uint64_t)&v408);
        }
LABEL_474:
        sub_20E863714((uint64_t)&v408);
        goto LABEL_475;
      }
    }
    v48 = *v397;
    v49 = (char *)v43 - (char *)*v397;
    v50 = v49 >> 3;
    v51 = (v49 >> 3) + 1;
    if (v51 >> 61)
      sub_20E867F44();
    v52 = v47 - (_QWORD)v48;
    if (v52 >> 2 > v51)
      v51 = v52 >> 2;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    if (v53)
    {
      if (v53 >> 61)
        sub_20E877A38();
      v54 = operator new(8 * v53);
      v55 = (double *)&v54[8 * v50];
      *v55 = v46;
      v45 = (uint64_t)(v55 + 1);
      v56 = (char *)v43 - (char *)v48;
      if (v43 == v48)
        goto LABEL_70;
    }
    else
    {
      v54 = 0;
      v55 = (double *)(8 * v50);
      *(double *)(8 * v50) = v46;
      v45 = 8 * v50 + 8;
      v56 = (char *)v43 - (char *)v48;
      if (v43 == v48)
        goto LABEL_70;
    }
    v57 = v56 - 8;
    if (v57 >= 0x168)
    {
      v60 = ((char *)(v43 - 1) - (char *)v48) & 0xFFFFFFFFFFFFFFF8;
      if (&v54[v49 - 8 - v60] > &v54[v49 - 8])
      {
        v58 = v43;
      }
      else if ((double *)((char *)v43 - v60 - 8) > v43 - 1)
      {
        v58 = v43;
      }
      else if ((unint64_t)((char *)v43 - &v54[v49]) >= 0x20)
      {
        v61 = (v57 >> 3) + 1;
        v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
        v58 = &v43[v62 / 0xFFFFFFFFFFFFFFF8];
        v55 = (double *)((char *)v55 - v62);
        v63 = &v54[8 * v50 - 16];
        v64 = v43 - 2;
        v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v66 = *(_OWORD *)v64;
          *(v63 - 1) = *((_OWORD *)v64 - 1);
          *v63 = v66;
          v63 -= 2;
          v64 -= 4;
          v65 -= 4;
        }
        while (v65);
        if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_70:
          a1[38] = (uint64_t)v55;
          a1[39] = v45;
          a1[40] = (uint64_t)&v54[8 * v53];
          if (v48)
            operator delete(v48);
          goto LABEL_52;
        }
      }
      else
      {
        v58 = v43;
      }
    }
    else
    {
      v58 = v43;
    }
    do
    {
      v59 = *((_QWORD *)v58-- - 1);
      *((_QWORD *)v55-- - 1) = v59;
    }
    while (v58 != v48);
    goto LABEL_70;
  }
  if (!*((_BYTE *)a1 + 352))
    return 0;
  sub_20F3EAEF4(&v420);
  if (**(int **)(v420 + 56) > 5)
    return 0;
  v18 = *(unsigned __int8 *)(v420 + 72);
  v19 = sub_20E8C31DC(v420, "OSLogSurrogateAppender", 1, 0);
  v20 = v19;
  if (!v18 && v19 == 0)
    return 0;
  v408 = &v420;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v410 = std::chrono::system_clock::now().__d_.__rep_;
  v411 = 5;
  v412 = "unknown file";
  v413 = 224;
  v415 = 0;
  v416 = 0;
  v414 = "unknown function";
  v22 = v420;
  v23 = v420 + 16;
  if (*(char *)(v420 + 39) < 0)
  {
    v25 = *(const char **)(v420 + 16);
    v24 = *(_QWORD *)(v420 + 24);
  }
  else
  {
    v24 = *(unsigned __int8 *)(v420 + 39);
    v25 = (const char *)(*v408 + 16);
  }
  v95 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v422);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v422);
    if ((_BYTE)v423 && (v422[23] & 0x80000000) != 0)
      operator delete(*(void **)v422);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v96 = byte_254A4A4F8;
  else
    v96 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v97 = byte_254A4A4F8[23];
  else
    v97 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v422 = os_log_create(v96, v25);
  v98 = &v422[8];
  if (v97 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v97 >= 0x17)
  {
    v99 = v20;
    v100 = v25;
    v101 = v22;
    v102 = v18;
    v103 = v23;
    v104 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17)
      v104 = v97 | 7;
    v105 = v104 + 1;
    v98 = operator new(v104 + 1);
    *(_QWORD *)&v422[16] = v97;
    *(_QWORD *)&v423 = v105 | 0x8000000000000000;
    *(_QWORD *)&v422[8] = v98;
    v23 = v103;
    v18 = v102;
    v22 = v101;
    v25 = v100;
    v20 = v99;
    goto LABEL_134;
  }
  BYTE7(v423) = v97;
  if (v97)
LABEL_134:
    memmove(v98, v96, v97);
  v98[v97] = 0;
  BYTE8(v423) = 1;
  v106 = (void **)&v424;
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v24 >= 0x17)
  {
    v107 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v107 = v24 | 7;
    v108 = v107 + 1;
    v106 = (void **)operator new(v107 + 1);
    v425 = v24;
    v426 = v108 | 0x8000000000000000;
    v424 = v106;
  }
  else
  {
    HIBYTE(v426) = v24;
    if (!v24)
      goto LABEL_143;
  }
  memmove(v106, v25, v24);
LABEL_143:
  *((_BYTE *)v106 + v24) = 0;
  v427 = 1;
  v109 = *(NSObject **)v422;
  if (SHIBYTE(v426) < 0)
    operator delete(v424);
  if (BYTE8(v423) && SBYTE7(v423) < 0)
    operator delete(*(void **)&v422[8]);
  if (*(_QWORD *)v422)
    os_release(*(void **)v422);
  if (v20 && *(_QWORD *)(v20 + 24))
  {
    v110 = _os_log_pack_size();
    v111 = (std::__shared_weak_count_vtbl *)operator new(v110, (std::align_val_t)8uLL);
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v112;
    v112->__shared_owners_ = 0;
    v114 = (unint64_t *)&v112->__shared_owners_;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v111;
    *(_QWORD *)v422 = v111;
    *(_QWORD *)&v422[8] = v111;
    *(_QWORD *)&v422[16] = v112;
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
    v423 = 0uLL;
    v424 = 0;
    do
      v116 = __ldaxr(v114);
    while (__stlxr(v116 - 1, v114));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v113);
    }
    v117 = *(_QWORD *)v422;
    *(_WORD *)_os_log_pack_fill() = 0;
    v118 = operator new();
    v119 = *(unsigned __int8 *)(v22 + 39);
    if ((v119 & 0x80u) == 0)
      v120 = v23;
    else
      v120 = *(_QWORD *)(v22 + 16);
    if ((v119 & 0x80u) != 0)
      v119 = *(_QWORD *)(v22 + 24);
    *(_QWORD *)v118 = v117;
    *(_OWORD *)(v118 + 8) = *(_OWORD *)&v422[8];
    *(_QWORD *)&v422[8] = 0;
    *(_QWORD *)&v422[16] = 0;
    *(_OWORD *)(v118 + 24) = v423;
    v423 = 0uLL;
    *(_QWORD *)(v118 + 40) = v120;
    *(_QWORD *)(v118 + 48) = v119;
    *(_BYTE *)(v118 + 56) = 16;
    v400 = 0;
    v403 = (uint64_t *)v118;
    (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v20 + 24) + 40))(*(_QWORD *)(v20 + 24), &v403);
    v121 = v403;
    v403 = 0;
    if (v121)
    {
      v122 = (std::__shared_weak_count *)v121[4];
      if (v122)
      {
        v123 = (unint64_t *)&v122->__shared_owners_;
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      v125 = (std::__shared_weak_count *)v121[2];
      if (v125)
      {
        v126 = (unint64_t *)&v125->__shared_owners_;
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
        }
      }
      MEMORY[0x212BC6398](v121, 0x10F0C40B62ED6C6);
      v400 = 0;
    }
    v128 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
    if (*((_QWORD *)&v423 + 1))
    {
      v129 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v131 = *(std::__shared_weak_count **)&v422[16];
    if (*(_QWORD *)&v422[16])
    {
      v132 = (unint64_t *)(*(_QWORD *)&v422[16] + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
  }
  else
  {
    os_log_type_enabled(v109, OS_LOG_TYPE_ERROR);
    *(_WORD *)v422 = 0;
    v134 = (void *)_os_log_send_and_compose_impl();
    if (v134)
      free(v134);
  }
  if (v18)
  {
    sub_20E8C003C((uint64_t)&v408, "ERROR: Calling AddIMUMeasurementFilter with an empty imu_input_buffer.");
    sub_20E863570((uint64_t)&v408);
  }
  sub_20E863570((uint64_t)&v408);
  v135 = v416;
  if (v416)
  {
    v136 = (unint64_t *)&v416->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
LABEL_565:
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  return 0;
}

void sub_20F3F52DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (*(_BYTE *)(v27 - 200))
  {
    if (*(char *)(v27 - 201) < 0)
      operator delete(*(void **)(v27 - 224));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F3F5364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F3F5378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;

  if (*(_BYTE *)(v27 - 192) && *(char *)(v27 - 193) < 0)
    operator delete(*(void **)(v27 - 216));
  v29 = *(void **)(v27 - 224);
  if (v29)
    os_release(v29);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F3F5848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_20F3F5858(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  double **v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  const char *v29;
  unsigned __int8 v30;
  const char *v31;
  size_t v32;
  void *v33;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned __int8 v80;
  const char *v81;
  size_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *p_p;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  size_t v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v134;
  uint64_t v135;
  const char *__src;
  int v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v142;
  int v143;
  const char *v144;
  int v145;
  const char *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  void *object;
  void *v151[2];
  __int128 v152;
  void *__p;
  size_t v154;
  unint64_t v155;
  char v156;
  uint64_t v157;
  _QWORD v158[2];

  v4 = a1[5];
  if (v4)
  {
    v7 = a1[32];
    v8 = a1[33] - v7;
    if (v8)
    {
      if (v8 >= 0x21)
        a1[33] = v7 + 32;
      v9 = a1[4];
      if (v9)
        goto LABEL_6;
    }
    else
    {
      sub_20EAF5F94((char **)a1 + 32, 1uLL);
      v9 = a1[4];
      if (v9)
      {
LABEL_6:
        v10 = (char *)*a1;
        goto LABEL_17;
      }
    }
    v10 = (char *)*a1;
    v9 = (a1[1] - *a1) >> 5;
LABEL_17:
    v19 = &v10[32 * v9];
    v20 = a1[33];
    *(_QWORD *)(v20 - 32) = *((_QWORD *)v19 - 4);
    v21 = *(_OWORD *)(v19 - 24);
    *(_QWORD *)(v20 - 8) = *((_QWORD *)v19 - 1);
    *(_OWORD *)(v20 - 24) = v21;
    v22 = (double **)(a1 + 35);
    v23 = a1[35];
    v24 = a1[36] - v23;
    if (v24)
    {
      if (v24 >= 0x21)
        a1[36] = v23 + 32;
    }
    else
    {
      sub_20EAF5F94((char **)a1 + 35, 1uLL);
    }
    sub_20F4030AC((uint64_t)(a1 + 6), a1 + 32, (uint64_t)(a1 + 35), *(double *)&v21);
    if (a2[5] < (unint64_t)((uint64_t)(a2[1] - *a2) >> 5))
      goto LABEL_197;
    if (!*((_BYTE *)a1 + 352))
      goto LABEL_197;
    sub_20F3EAEF4(&v149);
    if (**(int **)(v149 + 56) > 4)
      goto LABEL_197;
    v25 = *(unsigned __int8 *)(v149 + 72);
    v26 = sub_20E8C31DC(v149, "OSLogSurrogateAppender", 1, 0);
    v27 = v26;
    if (!v25 && !v26)
      goto LABEL_197;
    v139 = v4;
    v140 = &v149;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v142 = std::chrono::system_clock::now().__d_.__rep_;
    v143 = 4;
    v144 = "unknown file";
    v145 = 199;
    v147 = 0;
    v148 = 0;
    v146 = "unknown function";
    v135 = v149;
    if (*(char *)(v149 + 39) < 0)
    {
      v29 = *(const char **)(v149 + 16);
      v28 = *(_QWORD *)(v149 + 24);
    }
    else
    {
      v28 = *(unsigned __int8 *)(v149 + 39);
      v29 = (const char *)(v149 + 16);
    }
    v134 = v149 + 16;
    v138 = v27;
    v137 = v25;
    v80 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v152 && SHIBYTE(v151[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v81 = byte_254A4A4F8;
    else
      v81 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v82 = byte_254A4A4F8[23];
    else
      v82 = *(_QWORD *)&byte_254A4A4F8[8];
    __src = v29;
    object = os_log_create(v81, v29);
    v83 = v151;
    if (v82 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v82 >= 0x17)
    {
      v84 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v82 | 7) != 0x17)
        v84 = v82 | 7;
      v85 = v84 + 1;
      v83 = operator new(v84 + 1);
      v151[1] = (void *)v82;
      *(_QWORD *)&v152 = v85 | 0x8000000000000000;
      v151[0] = v83;
    }
    else
    {
      BYTE7(v152) = v82;
      if (!v82)
      {
LABEL_130:
        *((_BYTE *)v83 + v82) = 0;
        BYTE8(v152) = 1;
        p_p = &__p;
        if (v28 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v28 >= 0x17)
        {
          v87 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17)
            v87 = v28 | 7;
          v88 = v87 + 1;
          p_p = operator new(v87 + 1);
          v154 = v28;
          v155 = v88 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v155) = v28;
          if (!v28)
            goto LABEL_138;
        }
        memmove(p_p, __src, v28);
LABEL_138:
        *((_BYTE *)p_p + v28) = 0;
        v156 = 1;
        v89 = object;
        if (SHIBYTE(v155) < 0)
          operator delete(__p);
        if (BYTE8(v152) && SBYTE7(v152) < 0)
          operator delete(v151[0]);
        if (object)
          os_release(object);
        if (v138 && *(_QWORD *)(v138 + 24))
        {
          v90 = _os_log_pack_size();
          v91 = (std::__shared_weak_count_vtbl *)operator new(v90, (std::align_val_t)8uLL);
          v92 = (std::__shared_weak_count *)operator new();
          v93 = v92;
          v92->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v92->__shared_owners_;
          v92->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v92->__shared_weak_owners_ = 0;
          v92[1].__vftable = v91;
          object = v91;
          v151[0] = v91;
          v151[1] = v92;
          do
            v95 = __ldxr(p_shared_owners);
          while (__stxr(v95 + 1, p_shared_owners));
          v152 = 0uLL;
          __p = 0;
          do
            v96 = __ldaxr(p_shared_owners);
          while (__stlxr(v96 - 1, p_shared_owners));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v93);
          }
          v97 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v98 = operator new();
          v99 = *(unsigned __int8 *)(v135 + 39);
          v100 = v134;
          if ((v99 & 0x80u) != 0)
          {
            v100 = *(_QWORD *)(v135 + 16);
            v99 = *(_QWORD *)(v135 + 24);
          }
          *(_QWORD *)v98 = v97;
          *(_OWORD *)(v98 + 8) = *(_OWORD *)v151;
          v151[0] = 0;
          v151[1] = 0;
          *(_OWORD *)(v98 + 24) = v152;
          v152 = 0uLL;
          *(_QWORD *)(v98 + 40) = v100;
          *(_QWORD *)(v98 + 48) = v99;
          *(_BYTE *)(v98 + 56) = 16;
          v157 = 0;
          v158[0] = v98;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v138 + 24) + 40))(*(_QWORD *)(v138 + 24), v158);
          v101 = v158[0];
          v158[0] = 0;
          if (v101)
          {
            v102 = *(std::__shared_weak_count **)(v101 + 32);
            if (v102)
            {
              v103 = (unint64_t *)&v102->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            v105 = *(std::__shared_weak_count **)(v101 + 16);
            if (v105)
            {
              v106 = (unint64_t *)&v105->__shared_owners_;
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
            MEMORY[0x212BC6398](v101, 0x10F0C40B62ED6C6);
            v108 = v157;
            v157 = 0;
            if (v108)
            {
              v109 = *(std::__shared_weak_count **)(v108 + 32);
              if (v109)
              {
                v110 = (unint64_t *)&v109->__shared_owners_;
                do
                  v111 = __ldaxr(v110);
                while (__stlxr(v111 - 1, v110));
                if (!v111)
                {
                  ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                  std::__shared_weak_count::__release_weak(v109);
                }
              }
              v112 = *(std::__shared_weak_count **)(v108 + 16);
              if (v112)
              {
                v113 = (unint64_t *)&v112->__shared_owners_;
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                }
              }
              MEMORY[0x212BC6398](v108, 0x10F0C40B62ED6C6);
            }
          }
          v115 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
          v4 = v139;
          if (*((_QWORD *)&v152 + 1))
          {
            v116 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          v118 = (std::__shared_weak_count *)v151[1];
          if (v151[1])
          {
            v119 = (unint64_t *)((char *)v151[1] + 8);
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
          }
        }
        else
        {
          os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v121 = (void *)_os_log_send_and_compose_impl();
          v4 = v139;
          if (v121)
            free(v121);
        }
        if (v137)
        {
          sub_20E8C003C((uint64_t)&v140, "IMU buffer is too full - popping oldest");
          sub_20E863570((uint64_t)&v140);
        }
        sub_20E863570((uint64_t)&v140);
        v122 = v148;
        if (v148)
        {
          v123 = (unint64_t *)&v148->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
LABEL_197:
        if (*((double *)a1 + 30) == -1.0 || *(double *)(a1[36] - 32) - *a3 > 0.0001)
        {
          v125 = *a2 + 32 * a2[4];
          v126 = *((_QWORD *)*v22 + 3);
          v127 = *(_OWORD *)(*v22 + 1);
          *(double *)v125 = **v22;
          *(_OWORD *)(v125 + 8) = v127;
          *(_QWORD *)(v125 + 24) = v126;
          v128 = (uint64_t)(a2[1] - *a2) >> 5;
          v129 = a2[5];
          v130 = a2[4] + 1;
          if (v130 >= v128)
            v131 = (uint64_t)(a2[1] - *a2) >> 5;
          else
            v131 = 0;
          a2[4] = v130 - v131;
          if (v129 == v128)
          {
            v132 = a2[3] + 1;
            if (v132 < v128)
              v128 = 0;
            a2[3] = v132 - v128;
          }
          else
          {
            a2[5] = v129 + 1;
          }
          *a3 = **v22;
        }
        *(_OWORD *)(a1 + 29) = *(_OWORD *)(a1 + 19);
        return v4 != 0;
      }
    }
    memmove(v83, v81, v82);
    goto LABEL_130;
  }
  if (!*((_BYTE *)a1 + 352))
    return v4 != 0;
  sub_20F3EAEF4(&v149);
  if (**(int **)(v149 + 56) > 5)
    return v4 != 0;
  v11 = *(unsigned __int8 *)(v149 + 72);
  v12 = sub_20E8C31DC(v149, "OSLogSurrogateAppender", 1, 0);
  v13 = v12;
  if (!v11 && v12 == 0)
    return v4 != 0;
  v140 = &v149;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v142 = std::chrono::system_clock::now().__d_.__rep_;
  v143 = 5;
  v144 = "unknown file";
  v145 = 186;
  v147 = 0;
  v148 = 0;
  v146 = "unknown function";
  v15 = v149;
  v16 = v149 + 16;
  if (*(char *)(v149 + 39) < 0)
  {
    v18 = *(const char **)(v149 + 16);
    v17 = *(_QWORD *)(v149 + 24);
  }
  else
  {
    v17 = *(unsigned __int8 *)(v149 + 39);
    v18 = (const char *)(*v140 + 16);
  }
  v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if ((_BYTE)v152 && SHIBYTE(v151[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v31 = byte_254A4A4F8;
  else
    v31 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v32 = byte_254A4A4F8[23];
  else
    v32 = *(_QWORD *)&byte_254A4A4F8[8];
  object = os_log_create(v31, v18);
  v33 = v151;
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v32 >= 0x17)
  {
    v34 = v13;
    v35 = v18;
    v36 = v15;
    v37 = v16;
    v38 = v11;
    v39 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v39 = v32 | 7;
    v40 = v39 + 1;
    v33 = operator new(v39 + 1);
    v151[1] = (void *)v32;
    *(_QWORD *)&v152 = v40 | 0x8000000000000000;
    v151[0] = v33;
    v11 = v38;
    v16 = v37;
    v15 = v36;
    v18 = v35;
    v13 = v34;
    goto LABEL_43;
  }
  BYTE7(v152) = v32;
  if (v32)
LABEL_43:
    memmove(v33, v31, v32);
  *((_BYTE *)v33 + v32) = 0;
  BYTE8(v152) = 1;
  v41 = &__p;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v4 = 0;
  if (v17 >= 0x17)
  {
    v42 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v42 = v17 | 7;
    v43 = v42 + 1;
    v41 = operator new(v42 + 1);
    v154 = v17;
    v155 = v43 | 0x8000000000000000;
    __p = v41;
  }
  else
  {
    HIBYTE(v155) = v17;
    if (!v17)
      goto LABEL_52;
  }
  memmove(v41, v18, v17);
LABEL_52:
  *((_BYTE *)v41 + v17) = 0;
  v156 = 1;
  v44 = object;
  if (SHIBYTE(v155) < 0)
    operator delete(__p);
  if (BYTE8(v152) && SBYTE7(v152) < 0)
    operator delete(v151[0]);
  if (object)
    os_release(object);
  if (v13 && *(_QWORD *)(v13 + 24))
  {
    v45 = _os_log_pack_size();
    v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
    v47 = (std::__shared_weak_count *)operator new();
    v48 = v47;
    v47->__shared_owners_ = 0;
    v49 = (unint64_t *)&v47->__shared_owners_;
    v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v47->__shared_weak_owners_ = 0;
    v47[1].__vftable = v46;
    object = v46;
    v151[0] = v46;
    v151[1] = v47;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    v152 = 0uLL;
    __p = 0;
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v48);
    }
    v52 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v53 = operator new();
    v54 = *(unsigned __int8 *)(v15 + 39);
    if ((v54 & 0x80u) == 0)
      v55 = v16;
    else
      v55 = *(_QWORD *)(v15 + 16);
    if ((v54 & 0x80u) != 0)
      v54 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)v53 = v52;
    *(_OWORD *)(v53 + 8) = *(_OWORD *)v151;
    v151[0] = 0;
    v151[1] = 0;
    *(_OWORD *)(v53 + 24) = v152;
    v152 = 0uLL;
    *(_QWORD *)(v53 + 40) = v55;
    *(_QWORD *)(v53 + 48) = v54;
    *(_BYTE *)(v53 + 56) = 16;
    v157 = 0;
    v158[0] = v53;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24), v158);
    v56 = v158[0];
    v158[0] = 0;
    if (v56)
    {
      v57 = *(std::__shared_weak_count **)(v56 + 32);
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = *(std::__shared_weak_count **)(v56 + 16);
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      MEMORY[0x212BC6398](v56, 0x10F0C40B62ED6C6);
      v63 = v157;
      v157 = 0;
      if (v63)
      {
        v64 = *(std::__shared_weak_count **)(v63 + 32);
        if (v64)
        {
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v67 = *(std::__shared_weak_count **)(v63 + 16);
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        MEMORY[0x212BC6398](v63, 0x10F0C40B62ED6C6);
      }
    }
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
    if (*((_QWORD *)&v152 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v73 = (std::__shared_weak_count *)v151[1];
    if (v151[1])
    {
      v74 = (unint64_t *)((char *)v151[1] + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }
  else
  {
    os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
    LOWORD(object) = 0;
    v76 = (void *)_os_log_send_and_compose_impl();
    if (v76)
      free(v76);
  }
  if (v11)
  {
    sub_20E8C003C((uint64_t)&v140, "ERROR: Calling AddIMUMeasurementFilter with an empty imu_input_buffer.");
    sub_20E863570((uint64_t)&v140);
  }
  sub_20E863570((uint64_t)&v140);
  v77 = v148;
  if (v148)
  {
    v78 = (unint64_t *)&v148->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  return v4 != 0;
}

void sub_20F3F6730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F3F6778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E86E8C4((uint64_t *)(v27 - 96));
  sub_20E86E8C4((uint64_t *)(v27 - 104));
  sub_20E86E658((uint64_t)&a27);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F3F67E8()
{
  JUMPOUT(0x20F3F67F0);
}

void sub_20F3F6814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3F6838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3F684C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3F6860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a34 && a33 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

double sub_20F3F68E4(uint64_t a1, char a2, double a3, double a4)
{
  BOOL v8;
  int v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  const char *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  const char *v19;
  size_t v20;
  _BYTE *v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  size_t v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD v70[3];
  int v71;
  const char *v72;
  int v73;
  const char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE object[24];
  __int128 v81;
  void *__p[2];
  unint64_t v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v8 = a4 < 0.0 || a4 > 1.0;
  if (v8
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 409, (uint64_t)"gain_imu_median_est >= 0.0 && gain_imu_median_est <= 1.0", 56, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a3 < 0.0)
  {
    sub_20F3EAEF4(&v77);
    if (**(int **)(v77 + 56) > 5)
      return 0.0;
    v9 = *(unsigned __int8 *)(v77 + 72);
    v10 = sub_20E8C31DC(v77, "OSLogSurrogateAppender", 1, 0);
    if (!v9 && v10 == 0)
      return 0.0;
    v12 = v10;
    v70[0] = &v77;
    v70[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v70[2] = std::chrono::system_clock::now().__d_.__rep_;
    v71 = 5;
    v72 = "unknown file";
    v73 = 412;
    v75 = 0;
    v76 = 0;
    v74 = "unknown function";
    v13 = v77;
    v14 = v77 + 16;
    if (*(char *)(v77 + 39) < 0)
    {
      v16 = *(const char **)(v77 + 16);
      v15 = *(_QWORD *)(v77 + 24);
      v18 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v18 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      v15 = *(unsigned __int8 *)(v77 + 39);
      v16 = (const char *)(*(_QWORD *)v70[0] + 16);
      v17 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v17 & 1) != 0)
        goto LABEL_19;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v81 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_19:
    if (byte_254A4A4F8[23] >= 0)
      v19 = byte_254A4A4F8;
    else
      v19 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v20 = byte_254A4A4F8[23];
    else
      v20 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v19, v16);
    v21 = &object[8];
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v20 >= 0x17)
    {
      v22 = v12;
      v23 = v16;
      v24 = v13;
      v25 = v9;
      v26 = v14;
      v27 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v27 = v20 | 7;
      v28 = v27 + 1;
      v21 = operator new(v27 + 1);
      *(_QWORD *)&object[16] = v20;
      *(_QWORD *)&v81 = v28 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v21;
      v14 = v26;
      v9 = v25;
      v13 = v24;
      v16 = v23;
      v12 = v22;
    }
    else
    {
      BYTE7(v81) = v20;
      if (!v20)
      {
LABEL_33:
        v21[v20] = 0;
        BYTE8(v81) = 1;
        v29 = __p;
        if (v15 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v15 >= 0x17)
        {
          v30 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17)
            v30 = v15 | 7;
          v31 = v30 + 1;
          v29 = operator new(v30 + 1);
          __p[1] = (void *)v15;
          v83 = v31 | 0x8000000000000000;
          __p[0] = v29;
        }
        else
        {
          HIBYTE(v83) = v15;
          if (!v15)
            goto LABEL_41;
        }
        memmove(v29, v16, v15);
LABEL_41:
        *((_BYTE *)v29 + v15) = 0;
        v84 = 1;
        v32 = *(NSObject **)object;
        if (SHIBYTE(v83) < 0)
          operator delete(__p[0]);
        if (BYTE8(v81) && SBYTE7(v81) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v12 && *(_QWORD *)(v12 + 24))
        {
          v33 = _os_log_pack_size();
          v34 = (std::__shared_weak_count_vtbl *)operator new(v33, (std::align_val_t)8uLL);
          v35 = (std::__shared_weak_count *)operator new();
          v36 = v35;
          v35->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v35->__shared_weak_owners_ = 0;
          v35[1].__vftable = v34;
          *(_QWORD *)object = v34;
          *(_QWORD *)&object[8] = v34;
          *(_QWORD *)&object[16] = v35;
          do
            v38 = __ldxr(p_shared_owners);
          while (__stxr(v38 + 1, p_shared_owners));
          v81 = 0uLL;
          __p[0] = 0;
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v36);
          }
          v40 = *(_QWORD *)object;
          v41 = _os_log_pack_fill();
          *(_DWORD *)v41 = 134217984;
          *(double *)(v41 + 4) = a3;
          v42 = operator new();
          v43 = *(unsigned __int8 *)(v13 + 39);
          if ((v43 & 0x80u) == 0)
            v44 = v14;
          else
            v44 = *(_QWORD *)(v13 + 16);
          if ((v43 & 0x80u) != 0)
            v43 = *(_QWORD *)(v13 + 24);
          *(_QWORD *)v42 = v40;
          *(_OWORD *)(v42 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v42 + 24) = v81;
          v81 = 0uLL;
          *(_QWORD *)(v42 + 40) = v44;
          *(_QWORD *)(v42 + 48) = v43;
          *(_BYTE *)(v42 + 56) = 16;
          v78 = 0;
          v79 = v42;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v79);
          v45 = v79;
          v79 = 0;
          if (v45)
          {
            v46 = *(std::__shared_weak_count **)(v45 + 32);
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            v49 = *(std::__shared_weak_count **)(v45 + 16);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            MEMORY[0x212BC6398](v45, 0x10F0C40B62ED6C6);
            v52 = v78;
            v78 = 0;
            if (v52)
            {
              v53 = *(std::__shared_weak_count **)(v52 + 32);
              if (v53)
              {
                v54 = (unint64_t *)&v53->__shared_owners_;
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
              v56 = *(std::__shared_weak_count **)(v52 + 16);
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
            }
          }
          v59 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
          if (*((_QWORD *)&v81 + 1))
          {
            v60 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v62 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v63 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
        }
        else
        {
          os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 134217984;
          *(double *)&object[4] = a3;
          v65 = (void *)_os_log_send_and_compose_impl();
          if (v65)
            free(v65);
        }
        if (v9)
        {
          sub_20E8C003C((uint64_t)v70, "ComputeSamplePeriodEst error.  sample_time_diff = %lf is less than 0.", a3);
          sub_20E863570((uint64_t)v70);
        }
        sub_20E863570((uint64_t)v70);
        v66 = v76;
        if (v76)
        {
          v67 = (unint64_t *)&v76->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        return 0.0;
      }
    }
    memmove(v21, v19, v20);
    goto LABEL_33;
  }
  if (a2)
    return *(double *)&a1 * a4 + (1.0 - a4) * a3;
  return a3;
}

void sub_20F3F7084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F3F70C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  va_list va2;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3F70F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x212BC6398](v3, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3F7124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3F7138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F3F71B0(unint64_t *a1, unint64_t *a2, double **a3, _DWORD *a4, uint64_t a5, _QWORD *a6, float64x2_t a7, double a8, float64x2_t _Q2, float64x2_t _Q3, __n128 a11, float64x2_t a12, double a13, float64x2_t a14)
{
  double v16;
  uint64_t v18;
  unint64_t v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  BOOL v24;
  double *v25;
  double v27;
  char *v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  unint64_t *v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 *v48;
  float64x2_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  unint64_t *v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __n128 *v66;
  float64x2_t *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  int64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  double *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  unint64_t v83;
  double *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  double v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  double v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *i;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double *v130;
  uint64_t *v131;
  const double *v132;
  __n128 *v133;
  const double *v134;
  uint64_t v135;
  double v136;
  float64x2_t v137;
  float64x2_t v138;
  double v139;
  float64x2_t v141;
  double v142;
  float64x2_t v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  double **v148;
  size_t v149;
  const char *v150;
  unsigned __int8 v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  double ***v155;
  double ***v156;
  unint64_t v157;
  char *v158;
  char *v159;
  unint64_t v160;
  uint64_t v161;
  float64x2_t *v162;
  float64x2_t *v163;
  double v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  double v184;
  uint64_t v185;
  float64x2_t *v186;
  float64x2_t *v187;
  double v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t *v197;
  int64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  double *v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  unint64_t v209;
  double *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  BOOL v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  double *v224;
  uint64_t *v225;
  const double *v226;
  float64x2_t *v227;
  const double *v228;
  uint64_t v229;
  double v230;
  int v231;
  unint64_t v232;
  unint64_t v233;
  double **v235;
  size_t v236;
  const char *v237;
  unsigned __int8 v238;
  unint64_t v239;
  unint64_t v240;
  float64x2_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  char *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  float64x2_t *v255;
  float64x2_t *v256;
  double v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  int64_t v268;
  uint64_t v269;
  char *v270;
  unint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  double v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  double v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  char *v293;
  char *j;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  double ***v298;
  double ***v299;
  unint64_t v300;
  char *v301;
  char *v302;
  unint64_t v303;
  uint64_t v304;
  float64x2_t *v305;
  float64x2_t *v306;
  double v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  unint64_t v313;
  unsigned __int8 v314;
  const char *v315;
  size_t v316;
  __int128 *v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  NSObject *v321;
  uint64_t v322;
  uint64_t v323;
  size_t v324;
  std::__shared_weak_count_vtbl *v325;
  std::__shared_weak_count *v326;
  std::__shared_weak_count *v327;
  unint64_t *p_shared_owners;
  unint64_t v329;
  unint64_t v330;
  void *v331;
  uint64_t v332;
  double *v333;
  uint64_t v334;
  double **v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  void *v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  unsigned __int8 v359;
  const char *v360;
  size_t v361;
  __int128 *v362;
  uint64_t v363;
  uint64_t v364;
  void *v365;
  NSObject *v366;
  uint64_t v367;
  uint64_t v368;
  size_t v369;
  std::__shared_weak_count_vtbl *v370;
  std::__shared_weak_count *v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t v375;
  void *v376;
  uint64_t v377;
  double *v378;
  uint64_t v379;
  double **v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  uint64_t *v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  void *v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  char *v405;
  char *v406;
  char *v407;
  __n128 v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  __n128 v412;
  double *v413;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  double *v420;
  double ***p_p_p;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v425;
  int v426;
  const char *v427;
  int v428;
  const char *v429;
  uint64_t v430;
  std::__shared_weak_count *v431;
  double *v432;
  double *v433;
  char *v434;
  void *__p;
  _BYTE *v436;
  double *v437;
  void *v438;
  char *v439;
  char *v440;
  void *object;
  __int128 v442;
  __int128 v443;
  void *v444;
  size_t v445;
  unint64_t v446;
  char v447;
  double **v448[2];
  char v449;
  char v450;
  double **p_p;
  uint64_t *v452[3];

  v16 = a7.f64[0];
  v416 = *a1;
  v417 = a1[1];
  v18 = v417 - *a1;
  if ((unint64_t)v18 <= 0x20
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 434, (uint64_t)"gyro_buffer_size > 1", 20, (uint64_t)"Gyro buffer must have more than one element.", 44, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_599;
  }
  v19 = v18 >> 5;
  if (v18 >> 5 != (uint64_t)(a2[1] - *a2) >> 5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 436, (uint64_t)"accel_buffer.size() == gyro_buffer_size", 39, (uint64_t)"Gyro buffer must have the same size as the accel buffer.", 56, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_599;
  }
  v20 = a3[1];
  if (*a3 == v20)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 439, (uint64_t)"!ds_rates.empty()", 17, (uint64_t)"Must pass at least one downsampling rate.", 41, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_599;
    }
    v20 = a3[1];
    if (*(v20 - 1) == 1.0)
    {
LABEL_7:
      v420 = *a3;
      v415 = (char *)v20 - (char *)*a3;
      if (v20 == *a3)
        return;
      goto LABEL_13;
    }
  }
  else if (*(v20 - 1) == 1.0)
  {
    goto LABEL_7;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 440, (uint64_t)"ExactlyEqual(ds_rates.back(), 1)", 32, (uint64_t)"Last possible downsampling rate must be 1.", 42, (void (*)(void **))sub_21023DDB0))
  {
LABEL_599:
    abort();
  }
  v20 = a3[1];
  v420 = *a3;
  v415 = (char *)v20 - (char *)*a3;
  if (v20 != *a3)
  {
LABEL_13:
    v418 = v18 >> 5;
    v419 = v19 - 1;
    v21 = (double)v19;
    v413 = v20;
    while (1)
    {
      v27 = *v420;
      v28 = (char *)*a6;
      a6[1] = *a6;
      if (v417 != v416)
      {
        v29 = 0.0;
        while (2)
        {
          v31 = vcvtad_u64_f64(v29);
          if (v19 <= v31)
            goto LABEL_26;
          v32 = a6[2];
          if ((unint64_t)v28 < v32)
          {
            *(_QWORD *)v28 = v31;
            v30 = (uint64_t)(v28 + 8);
          }
          else
          {
            v33 = (char *)*a6;
            v34 = (uint64_t)&v28[-*a6];
            v35 = v34 >> 3;
            v36 = (v34 >> 3) + 1;
            if (v36 >> 61)
              goto LABEL_595;
            v37 = v32 - (_QWORD)v33;
            if (v37 >> 2 > v36)
              v36 = v37 >> 2;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              if (v38 >> 61)
                goto LABEL_598;
              v39 = operator new(8 * v38);
              v40 = (unint64_t *)&v39[8 * v35];
              *v40 = v31;
              v30 = (uint64_t)(v40 + 1);
              v41 = v28 - v33;
              if (v28 == v33)
                goto LABEL_43;
            }
            else
            {
              v39 = 0;
              v40 = (unint64_t *)(8 * v35);
              *(_QWORD *)(8 * v35) = v31;
              v30 = 8 * v35 + 8;
              v41 = v28 - v33;
              if (v28 == v33)
                goto LABEL_43;
            }
            v42 = v41 - 8;
            if (v42 >= 0x168)
            {
              v45 = (v28 - 8 - v33) & 0xFFFFFFFFFFFFFFF8;
              if (&v39[v34 - 8 - v45] > &v39[v34 - 8])
              {
                v43 = v28;
              }
              else if (&v28[-v45 - 8] > v28 - 8)
              {
                v43 = v28;
              }
              else if ((unint64_t)(v28 - v39 - v34) >= 0x20)
              {
                v46 = (v42 >> 3) + 1;
                v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
                v43 = &v28[-v47];
                v40 = (unint64_t *)((char *)v40 - v47);
                v48 = (__n128 *)&v39[8 * v35 - 16];
                v49 = (float64x2_t *)(v28 - 16);
                v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  a7 = *v49;
                  v48[-1] = (__n128)v49[-1];
                  *v48 = (__n128)a7;
                  v48 -= 2;
                  v49 -= 2;
                  v50 -= 4;
                }
                while (v50);
                if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_43;
              }
              else
              {
                v43 = v28;
              }
            }
            else
            {
              v43 = v28;
            }
            do
            {
              v44 = *((_QWORD *)v43 - 1);
              v43 -= 8;
              *--v40 = v44;
            }
            while (v43 != v33);
LABEL_43:
            *a6 = v40;
            a6[1] = v30;
            a6[2] = &v39[8 * v38];
            if (v33)
              operator delete(v33);
          }
          a6[1] = v30;
          v28 = (char *)v30;
LABEL_26:
          v29 = v27 + v29;
          if (v29 >= v21)
            break;
          continue;
        }
      }
      if (*((_QWORD *)v28 - 1) != v419)
        break;
LABEL_80:
      if (v415 < 9)
        return;
      if (!*a4)
      {
        if (a1[1] - *a1 <= 0x20)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 494, (uint64_t)"imu_buffer_orig.size() > 1", 26, (uint64_t)"IMU buffer > 1", 14, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_599;
          }
          v28 = (char *)a6[1];
        }
        if ((unint64_t)&v28[-*a6] < 9
          || *(_QWORD *)*a6
          || (v93 = *((_QWORD *)v28 - 1), v94 = *a1, v95 = a1[1], v96 = v95 - *a1, v97 = v96 >> 5, v93 != (v96 >> 5) - 1))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 497, (uint64_t)"interp_set.size() > 1 && interp_set.front() == 0 && interp_set.back() == imu_buffer_orig.size() - 1", 99, (uint64_t)"interp set must start with sample 0 and end with last sample in buffer", 70, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_599;
          }
          v94 = *a1;
          v95 = a1[1];
          v96 = v95 - *a1;
          v97 = v96 >> 5;
        }
        object = 0;
        v442 = 0uLL;
        if (v97)
        {
          if (v96 < 0)
            sub_20E867F44();
          v98 = (char *)operator new(v96);
          *(_QWORD *)&v442 = v98;
          *((_QWORD *)&v442 + 1) = &v98[32 * v97];
          if (v96)
          {
LABEL_127:
            if (a6[1] == *a6)
            {
              v156 = 0;
              object = v98;
              v101 = v95 - v94;
              rep = 0;
              v425 = 0;
              p_p_p = 0;
              if (v95 == v94)
                goto LABEL_207;
            }
            else
            {
              v99 = 0;
              v100 = v98;
              do
              {
                v102 = a6[1] - *a6;
                if (v102)
                {
                  v103 = v102 >> 3;
                  if (v103 <= 1)
                    v103 = 1;
                  v104 = (unint64_t *)(*a6 + 8);
                  while (1)
                  {
                    v105 = *(v104 - 1);
                    if (v99 == v105)
                      break;
                    if (v99 > v105)
                    {
                      v106 = *v104;
                      if (v99 < *v104)
                      {
                        v107 = (double)(v99 - v105) / (double)(v106 - v105);
                        v108 = *(_QWORD *)(v94 + 32 * v99);
                        v109 = v94 + 32 * v105;
                        v110 = v94 + 32 * v106;
                        _Q2 = vmulq_n_f64(*(float64x2_t *)(v109 + 8), 1.0 - v107);
                        a11 = (__n128)vaddq_f64(_Q2, vmulq_n_f64(*(float64x2_t *)(v110 + 8), v107));
                        _Q2.f64[0] = *(float64_t *)(v109 + 24);
                        _Q3.f64[0] = *(float64_t *)(v110 + 24);
                        v111 = (1.0 - v107) * _Q2.f64[0] + v107 * _Q3.f64[0];
                        if ((unint64_t)v98 < *((_QWORD *)&v442 + 1))
                        {
                          *(_QWORD *)v98 = v108;
                          *(__n128 *)(v98 + 8) = a11;
                          *((double *)v98 + 3) = v111;
LABEL_144:
                          v98 += 32;
                          goto LABEL_130;
                        }
                        v118 = (v98 - v100) >> 5;
                        v119 = v118 + 1;
                        if ((unint64_t)(v118 + 1) >> 59)
                        {
                          object = v100;
                          sub_20E867F44();
                        }
                        v120 = *((_QWORD *)&v442 + 1) - (_QWORD)v100;
                        if ((uint64_t)(*((_QWORD *)&v442 + 1) - (_QWORD)v100) >> 4 > v119)
                          v119 = v120 >> 4;
                        if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFE0)
                          v116 = 0x7FFFFFFFFFFFFFFLL;
                        else
                          v116 = v119;
                        if (v116)
                        {
                          v408 = a11;
                          if (v116 >> 59)
                          {
                            object = v100;
                            sub_20E877A38();
                          }
                          v117 = (char *)operator new(32 * v116);
                          a11 = v408;
                        }
                        else
                        {
                          v117 = 0;
                        }
                        v121 = &v117[32 * v118];
                        *(_QWORD *)v121 = v108;
                        *(__n128 *)(v121 + 8) = a11;
                        *((double *)v121 + 3) = v111;
                        for (i = v121; v98 != v100; *(float64x2_t *)(i + 8) = a7)
                        {
                          v124 = *((_QWORD *)v98 - 4);
                          v98 -= 32;
                          *((_QWORD *)i - 4) = v124;
                          i -= 32;
                          a7 = *(float64x2_t *)(v98 + 8);
                          *((_QWORD *)i + 3) = *((_QWORD *)v98 + 3);
                        }
                        goto LABEL_170;
                      }
                    }
                    ++v104;
                    if (!--v103)
                      goto LABEL_131;
                  }
                  v112 = v94 + 32 * v99;
                  if ((unint64_t)v98 < *((_QWORD *)&v442 + 1))
                  {
                    *(_QWORD *)v98 = *(_QWORD *)v112;
                    a7 = *(float64x2_t *)(v112 + 8);
                    *((_QWORD *)v98 + 3) = *(_QWORD *)(v112 + 24);
                    *(float64x2_t *)(v98 + 8) = a7;
                    goto LABEL_144;
                  }
                  v113 = (v98 - v100) >> 5;
                  v114 = v113 + 1;
                  if ((unint64_t)(v113 + 1) >> 59)
                  {
                    object = v100;
                    sub_20E867F44();
                  }
                  v115 = *((_QWORD *)&v442 + 1) - (_QWORD)v100;
                  if ((uint64_t)(*((_QWORD *)&v442 + 1) - (_QWORD)v100) >> 4 > v114)
                    v114 = v115 >> 4;
                  if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFE0)
                    v116 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v116 = v114;
                  if (v116)
                  {
                    if (v116 >> 59)
                    {
                      object = v100;
                      sub_20E877A38();
                    }
                    v117 = (char *)operator new(32 * v116);
                  }
                  else
                  {
                    v117 = 0;
                  }
                  v121 = &v117[32 * v113];
                  *(_QWORD *)v121 = *(_QWORD *)v112;
                  a7 = *(float64x2_t *)(v112 + 8);
                  *((_QWORD *)v121 + 3) = *(_QWORD *)(v112 + 24);
                  *(float64x2_t *)(v121 + 8) = a7;
                  for (i = v121; v98 != v100; *(float64x2_t *)(i + 8) = a7)
                  {
                    v123 = *((_QWORD *)v98 - 4);
                    v98 -= 32;
                    *((_QWORD *)i - 4) = v123;
                    i -= 32;
                    a7 = *(float64x2_t *)(v98 + 8);
                    *((_QWORD *)i + 3) = *((_QWORD *)v98 + 3);
                  }
LABEL_170:
                  v98 = v121 + 32;
                  *((_QWORD *)&v442 + 1) = &v117[32 * v116];
                  if (v100)
                    operator delete(v100);
                  v100 = i;
LABEL_130:
                  *(_QWORD *)&v442 = v98;
                  v94 = *a1;
                  v95 = a1[1];
                }
LABEL_131:
                ++v99;
                v101 = v95 - v94;
              }
              while (v99 < (uint64_t)(v95 - v94) >> 5);
              object = v100;
              rep = 0;
              v425 = 0;
              p_p_p = 0;
              v154 = v98 - v100;
              if (v98 == v100)
              {
                v156 = 0;
                if (!v101)
                  goto LABEL_207;
              }
              else
              {
                if (v154 < 0)
                  sub_20E867F44();
                v155 = (double ***)operator new(v98 - v100);
                v156 = v155;
                v157 = 0;
                p_p_p = v155;
                v425 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)&v155[4 * (v154 >> 5)];
                do
                {
                  v158 = &v100[v157];
                  v159 = (char *)&v155[v157 / 8];
                  *(_QWORD *)v159 = *(_QWORD *)&v100[v157];
                  a7 = *(float64x2_t *)&v100[v157 + 8];
                  *((_QWORD *)v159 + 3) = *(_QWORD *)&v100[v157 + 24];
                  *(float64x2_t *)(v159 + 8) = a7;
                  v157 += 32;
                }
                while (v158 + 32 != v98);
                rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)&v155[v157 / 8];
                if (v101 == v157)
                {
LABEL_207:
                  v160 = v101 >> 5;
                  if (v95 != v94)
                    goto LABEL_208;
LABEL_329:
                  v164 = 0.0;
                  if (v156)
                    goto LABEL_330;
                  goto LABEL_331;
                }
              }
            }
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 590, (uint64_t)"imu_buffer_orig.size() == imu_buffer_interp.size()", 50, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v94 = *a1;
            v264 = a1[1];
            v160 = (uint64_t)(v264 - *a1) >> 5;
            if (v264 == *a1)
              goto LABEL_329;
LABEL_208:
            if (v160 <= 1)
              v161 = 1;
            else
              v161 = v160;
            v162 = (float64x2_t *)(v156 + 1);
            v163 = (float64x2_t *)(v94 + 8);
            v164 = 0.0;
            do
            {
              a7.f64[0] = v163[1].f64[0];
              v165 = *v163;
              v163 += 2;
              v166 = v165;
              _Q2.f64[0] = v162[1].f64[0];
              v167 = *v162;
              v162 += 2;
              a7 = vsubq_f64(a7, _Q2);
              _Q1 = vsubq_f64(v166, v167);
              _Q2 = vmulq_f64(_Q1, _Q1);
              _D3 = _Q1.f64[1];
              __asm { FMLA            D2, D3, V1.D[1] }
              v164 = v164 + vmlad_n_f64(_Q2.f64[0], a7.f64[0], a7.f64[0]);
              --v161;
            }
            while (v161);
LABEL_330:
            operator delete(v156);
LABEL_331:
            if (object)
              operator delete(object);
            if (a2[1] - *a2 <= 0x20
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 494, (uint64_t)"imu_buffer_orig.size() > 1", 26, (uint64_t)"IMU buffer > 1", 14, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_599;
            }
            v265 = a6[1];
            if ((unint64_t)(v265 - *a6) < 9
              || *(_QWORD *)*a6
              || (v266 = *a2, v267 = a2[1],
                              v268 = v267 - *a2,
                              v269 = v268 >> 5,
                              *(_QWORD *)(v265 - 8) != (v268 >> 5) - 1))
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 497, (uint64_t)"interp_set.size() > 1 && interp_set.front() == 0 && interp_set.back() == imu_buffer_orig.size() - 1", 99, (uint64_t)"interp set must start with sample 0 and end with last sample in buffer", 70, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_599;
              }
              v266 = *a2;
              v267 = a2[1];
              v268 = v267 - *a2;
              v269 = v268 >> 5;
            }
            object = 0;
            v442 = 0uLL;
            if (v269)
            {
              if (v268 < 0)
                sub_20E867F44();
              v270 = (char *)operator new(v268);
              *(_QWORD *)&v442 = v270;
              *((_QWORD *)&v442 + 1) = &v270[32 * v269];
              if (v268)
              {
LABEL_343:
                if (a6[1] == *a6)
                {
                  v299 = 0;
                  object = v270;
                  v273 = v267 - v266;
                  rep = 0;
                  v425 = 0;
                  p_p_p = 0;
                  if (v267 == v266)
                    goto LABEL_396;
                }
                else
                {
                  v271 = 0;
                  v272 = v270;
                  do
                  {
                    v274 = a6[1] - *a6;
                    if (v274)
                    {
                      v275 = v274 >> 3;
                      if (v275 <= 1)
                        v275 = 1;
                      v276 = (unint64_t *)(*a6 + 8);
                      while (1)
                      {
                        v277 = *(v276 - 1);
                        if (v271 == v277)
                          break;
                        if (v271 > v277)
                        {
                          v278 = *v276;
                          if (v271 < *v276)
                          {
                            v279 = (double)(v271 - v277) / (double)(v278 - v277);
                            v280 = *(_QWORD *)(v266 + 32 * v271);
                            v281 = v266 + 32 * v277;
                            v282 = v266 + 32 * v278;
                            _Q2 = vmulq_n_f64(*(float64x2_t *)(v281 + 8), 1.0 - v279);
                            a11 = (__n128)vaddq_f64(_Q2, vmulq_n_f64(*(float64x2_t *)(v282 + 8), v279));
                            _Q2.f64[0] = *(float64_t *)(v281 + 24);
                            _Q3.f64[0] = *(float64_t *)(v282 + 24);
                            v283 = (1.0 - v279) * _Q2.f64[0] + v279 * _Q3.f64[0];
                            if ((unint64_t)v270 < *((_QWORD *)&v442 + 1))
                            {
                              *(_QWORD *)v270 = v280;
                              *(__n128 *)(v270 + 8) = a11;
                              *((double *)v270 + 3) = v283;
LABEL_360:
                              v270 += 32;
                              goto LABEL_346;
                            }
                            v290 = (v270 - v272) >> 5;
                            v291 = v290 + 1;
                            if ((unint64_t)(v290 + 1) >> 59)
                            {
                              object = v272;
                              sub_20E867F44();
                            }
                            v292 = *((_QWORD *)&v442 + 1) - (_QWORD)v272;
                            if ((uint64_t)(*((_QWORD *)&v442 + 1) - (_QWORD)v272) >> 4 > v291)
                              v291 = v292 >> 4;
                            if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFE0)
                              v288 = 0x7FFFFFFFFFFFFFFLL;
                            else
                              v288 = v291;
                            if (v288)
                            {
                              v412 = a11;
                              if (v288 >> 59)
                              {
                                object = v272;
                                sub_20E877A38();
                              }
                              v289 = (char *)operator new(32 * v288);
                              a11 = v412;
                            }
                            else
                            {
                              v289 = 0;
                            }
                            v293 = &v289[32 * v290];
                            *(_QWORD *)v293 = v280;
                            *(__n128 *)(v293 + 8) = a11;
                            *((double *)v293 + 3) = v283;
                            for (j = v293; v270 != v272; *(float64x2_t *)(j + 8) = a7)
                            {
                              v296 = *((_QWORD *)v270 - 4);
                              v270 -= 32;
                              *((_QWORD *)j - 4) = v296;
                              j -= 32;
                              a7 = *(float64x2_t *)(v270 + 8);
                              *((_QWORD *)j + 3) = *((_QWORD *)v270 + 3);
                            }
                            goto LABEL_386;
                          }
                        }
                        ++v276;
                        if (!--v275)
                          goto LABEL_347;
                      }
                      v284 = v266 + 32 * v271;
                      if ((unint64_t)v270 < *((_QWORD *)&v442 + 1))
                      {
                        *(_QWORD *)v270 = *(_QWORD *)v284;
                        a7 = *(float64x2_t *)(v284 + 8);
                        *((_QWORD *)v270 + 3) = *(_QWORD *)(v284 + 24);
                        *(float64x2_t *)(v270 + 8) = a7;
                        goto LABEL_360;
                      }
                      v285 = (v270 - v272) >> 5;
                      v286 = v285 + 1;
                      if ((unint64_t)(v285 + 1) >> 59)
                      {
                        object = v272;
                        sub_20E867F44();
                      }
                      v287 = *((_QWORD *)&v442 + 1) - (_QWORD)v272;
                      if ((uint64_t)(*((_QWORD *)&v442 + 1) - (_QWORD)v272) >> 4 > v286)
                        v286 = v287 >> 4;
                      if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFE0)
                        v288 = 0x7FFFFFFFFFFFFFFLL;
                      else
                        v288 = v286;
                      if (v288)
                      {
                        if (v288 >> 59)
                        {
                          object = v272;
                          sub_20E877A38();
                        }
                        v289 = (char *)operator new(32 * v288);
                      }
                      else
                      {
                        v289 = 0;
                      }
                      v293 = &v289[32 * v285];
                      *(_QWORD *)v293 = *(_QWORD *)v284;
                      a7 = *(float64x2_t *)(v284 + 8);
                      *((_QWORD *)v293 + 3) = *(_QWORD *)(v284 + 24);
                      *(float64x2_t *)(v293 + 8) = a7;
                      for (j = v293; v270 != v272; *(float64x2_t *)(j + 8) = a7)
                      {
                        v295 = *((_QWORD *)v270 - 4);
                        v270 -= 32;
                        *((_QWORD *)j - 4) = v295;
                        j -= 32;
                        a7 = *(float64x2_t *)(v270 + 8);
                        *((_QWORD *)j + 3) = *((_QWORD *)v270 + 3);
                      }
LABEL_386:
                      v270 = v293 + 32;
                      *((_QWORD *)&v442 + 1) = &v289[32 * v288];
                      if (v272)
                        operator delete(v272);
                      v272 = j;
LABEL_346:
                      *(_QWORD *)&v442 = v270;
                      v266 = *a2;
                      v267 = a2[1];
                    }
LABEL_347:
                    ++v271;
                    v273 = v267 - v266;
                  }
                  while (v271 < (uint64_t)(v267 - v266) >> 5);
                  object = v272;
                  rep = 0;
                  v425 = 0;
                  p_p_p = 0;
                  v297 = v270 - v272;
                  if (v270 == v272)
                  {
                    v299 = 0;
                    if (!v273)
                      goto LABEL_396;
                  }
                  else
                  {
                    if (v297 < 0)
                      sub_20E867F44();
                    v298 = (double ***)operator new(v270 - v272);
                    v299 = v298;
                    v300 = 0;
                    p_p_p = v298;
                    v425 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)&v298[4 * (v297 >> 5)];
                    do
                    {
                      v301 = &v272[v300];
                      v302 = (char *)&v298[v300 / 8];
                      *(_QWORD *)v302 = *(_QWORD *)&v272[v300];
                      a7 = *(float64x2_t *)&v272[v300 + 8];
                      *((_QWORD *)v302 + 3) = *(_QWORD *)&v272[v300 + 24];
                      *(float64x2_t *)(v302 + 8) = a7;
                      v300 += 32;
                    }
                    while (v301 + 32 != v270);
                    rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)&v298[v300 / 8];
                    if (v273 == v300)
                    {
LABEL_396:
                      v303 = v273 >> 5;
                      if (v267 != v266)
                        goto LABEL_397;
LABEL_408:
                      v307 = 0.0;
                      v19 = v418;
                      if (v299)
                        goto LABEL_409;
                      goto LABEL_410;
                    }
                  }
                }
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 590, (uint64_t)"imu_buffer_orig.size() == imu_buffer_interp.size()", 50, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                v266 = *a2;
                v313 = a2[1];
                v303 = (uint64_t)(v313 - *a2) >> 5;
                if (v313 == *a2)
                  goto LABEL_408;
LABEL_397:
                if (v303 <= 1)
                  v304 = 1;
                else
                  v304 = v303;
                v305 = (float64x2_t *)(v299 + 1);
                v306 = (float64x2_t *)(v266 + 8);
                v307 = 0.0;
                v19 = v418;
                do
                {
                  a7.f64[0] = v306[1].f64[0];
                  v308 = *v306;
                  v306 += 2;
                  v309 = v308;
                  _Q2.f64[0] = v305[1].f64[0];
                  v310 = *v305;
                  v305 += 2;
                  a7 = vsubq_f64(a7, _Q2);
                  _Q1 = vsubq_f64(v309, v310);
                  _Q2 = vmulq_f64(_Q1, _Q1);
                  _D3 = _Q1.f64[1];
                  __asm { FMLA            D2, D3, V1.D[1] }
                  v307 = v307 + vmlad_n_f64(_Q2.f64[0], a7.f64[0], a7.f64[0]);
                  --v304;
                }
                while (v304);
LABEL_409:
                operator delete(v299);
LABEL_410:
                if (object)
                  operator delete(object);
                v22 = v164 / (double)v160;
                v23 = v307 / (double)v303;
                goto LABEL_15;
              }
            }
            else
            {
              v270 = 0;
              if (v268)
                goto LABEL_343;
            }
            v273 = 0;
            v299 = 0;
            object = v270;
            rep = 0;
            v425 = 0;
            p_p_p = 0;
            goto LABEL_396;
          }
        }
        else
        {
          v98 = 0;
          if (v96)
            goto LABEL_127;
        }
        v101 = 0;
        v156 = 0;
        object = v98;
        rep = 0;
        v425 = 0;
        p_p_p = 0;
        goto LABEL_207;
      }
      if (a1[1] - *a1 <= 0x20)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 545, (uint64_t)"imu_buffer_orig.size() > 1", 26, (uint64_t)"IMU buffer > 1", 14, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_599;
        }
        v28 = (char *)a6[1];
      }
      if ((unint64_t)&v28[-*a6] < 9
        || *(_QWORD *)*a6
        || (v70 = *a1,
            v71 = (uint64_t *)a1[1],
            v72 = (int64_t)v71 - *a1,
            v73 = v72 >> 5,
            *((_QWORD *)v28 - 1) != (v72 >> 5) - 1))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 548, (uint64_t)"interp_set.size() > 1 && interp_set.front() == 0 && interp_set.back() == imu_buffer_orig.size() - 1", 99, (uint64_t)"interp set must start with sample 0 and end with last sample in buffer", 70, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_599;
        }
        v70 = *a1;
        v71 = (uint64_t *)a1[1];
        v72 = (int64_t)v71 - *a1;
        v73 = v72 >> 5;
      }
      v438 = 0;
      v439 = 0;
      v440 = 0;
      if (v71 == (uint64_t *)v70)
      {
        v75 = 0;
        v76 = 0;
        v79 = 0;
        v78 = 0;
        __p = 0;
        v436 = 0;
        v437 = 0;
        v432 = 0;
        v433 = 0;
        v434 = 0;
        v80 = (char *)*a6;
        if (a6[1] == *a6)
          goto LABEL_173;
      }
      else
      {
        if (v72 < 0)
          sub_20E867F44();
        v74 = (char *)operator new(v72);
        v75 = v74;
        v76 = &v74[32 * v73];
        v438 = v74;
        v440 = v76;
        v77 = v74;
        do
        {
          *(_QWORD *)v77 = 0xBFF0000000000000;
          *((_QWORD *)v77 + 1) = 0;
          *((_QWORD *)v77 + 2) = 0;
          *((_QWORD *)v77 + 3) = 0;
          v77 += 32;
        }
        while (v77 != v76);
        v439 = &v74[32 * v73];
        v78 = (double *)operator new((unint64_t)v72 >> 2);
        __p = v78;
        v437 = &v78[v73];
        bzero(v78, (unint64_t)v72 >> 2);
        v79 = (char *)v78 + ((unint64_t)v72 >> 2);
        v436 = v79;
        v432 = 0;
        v433 = 0;
        v434 = 0;
        v80 = (char *)*a6;
        if (a6[1] == *a6)
        {
LABEL_173:
          v81 = 0;
          v84 = 0;
          v432 = 0;
          if ((uint64_t *)v70 == v71)
            goto LABEL_187;
LABEL_174:
          v125 = (unint64_t)v71 - v70 - 32;
          if (v125 >= 0x200
            && ((unint64_t)v78 < v70 + (v125 & 0xFFFFFFFFFFFFFFE0) + 8
              ? (_CF = v70 >= (unint64_t)&v78[(v125 >> 5) + 1])
              : (_CF = 1),
                _CF))
          {
            v127 = (v125 >> 5) + 1;
            v128 = v127 & 3;
            if ((v127 & 3) == 0)
              v128 = 4;
            v129 = v127 - v128;
            v130 = &v78[v127 - v128];
            v131 = (uint64_t *)(v70 + 32 * v129);
            v132 = (const double *)(v70 + 64);
            v133 = (__n128 *)(v78 + 2);
            do
            {
              v134 = v132 - 8;
              *(float64x2x4_t *)a7.f64 = vld4q_f64(v134);
              *(float64x2x4_t *)a11.n128_u64 = vld4q_f64(v132);
              v133[-1] = (__n128)a7;
              *v133 = a11;
              v132 += 16;
              v133 += 2;
              v129 -= 4;
            }
            while (v129);
          }
          else
          {
            v130 = v78;
            v131 = (uint64_t *)v70;
          }
          do
          {
            v135 = *v131;
            v131 += 4;
            *(_QWORD *)v130++ = v135;
          }
          while (v131 != v71);
          goto LABEL_187;
        }
      }
      v405 = v79;
      v407 = v75;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      do
      {
        while (1)
        {
          v85 = *a1 + 32 * *(_QWORD *)&v80[8 * v83];
          if (v81 >= v82)
            break;
          *(_QWORD *)v81 = *(_QWORD *)v85;
          a7 = *(float64x2_t *)(v85 + 8);
          *((_QWORD *)v81 + 3) = *(_QWORD *)(v85 + 24);
          *(float64x2_t *)(v81 + 8) = a7;
          v81 += 32;
          ++v83;
          v80 = (char *)*a6;
          if (v83 >= (uint64_t)(a6[1] - *a6) >> 3)
            goto LABEL_114;
        }
        v86 = (v81 - (char *)v84) >> 5;
        v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 59)
        {
          v433 = (double *)v81;
          v434 = v82;
          v432 = v84;
          sub_20E867F44();
        }
        if ((v82 - (char *)v84) >> 4 > v87)
          v87 = (v82 - (char *)v84) >> 4;
        if ((unint64_t)(v82 - (char *)v84) >= 0x7FFFFFFFFFFFFFE0)
          v88 = 0x7FFFFFFFFFFFFFFLL;
        else
          v88 = v87;
        if (v88)
        {
          if (v88 >> 59)
          {
            v433 = (double *)v81;
            v434 = v82;
            v432 = v84;
            sub_20E877A38();
          }
          v89 = (char *)operator new(32 * v88);
        }
        else
        {
          v89 = 0;
        }
        v90 = &v89[32 * v86];
        *(_QWORD *)v90 = *(_QWORD *)v85;
        a7 = *(float64x2_t *)(v85 + 8);
        *((_QWORD *)v90 + 3) = *(_QWORD *)(v85 + 24);
        *(float64x2_t *)(v90 + 8) = a7;
        v91 = v90;
        while (v81 != (char *)v84)
        {
          v92 = *((_QWORD *)v81 - 4);
          v81 -= 32;
          *((_QWORD *)v91 - 4) = v92;
          v91 -= 32;
          a7 = *(float64x2_t *)(v81 + 8);
          *((_QWORD *)v91 + 3) = *((_QWORD *)v81 + 3);
          *(float64x2_t *)(v91 + 8) = a7;
        }
        v82 = &v89[32 * v88];
        v81 = v90 + 32;
        if (v84)
          operator delete(v84);
        v84 = (double *)v91;
        ++v83;
        v80 = (char *)*a6;
      }
      while (v83 < (uint64_t)(a6[1] - *a6) >> 3);
LABEL_114:
      v433 = (double *)v81;
      v434 = v82;
      v70 = *a1;
      v71 = (uint64_t *)a1[1];
      v79 = v405;
      v75 = v407;
      v432 = v84;
      if ((uint64_t *)v70 != v71)
        goto LABEL_174;
LABEL_187:
      p_p_p = (double ***)v84;
      if (*v78 >= *v84)
      {
        a7.f64[0] = *((float64_t *)v79 - 1);
        v136 = *((double *)v81 - 4);
        if (a7.f64[0] <= v136)
        {
          v448[0] = (double **)&p_p_p;
          v452[0] = (uint64_t *)&p_p_p;
          p_p = (double **)&__p;
          v152 = (v79 - (char *)v78) >> 3;
          v153 = (v76 - v75) >> 5;
          if (v152 <= v153)
          {
            if (v152 < v153)
              v439 = &v75[32 * v152];
          }
          else
          {
            sub_20EAF5F94((char **)&v438, v152 - v153);
            v152 = (v436 - (_BYTE *)__p) >> 3;
          }
          object = &v438;
          *(_QWORD *)&v442 = &__p;
          sub_20FDB48EC(a5, v448, v452, (v81 - (char *)v84) >> 5, &p_p, (_QWORD **)&object, v152, a7, v136, _Q2, _Q3.f64[0], a11.n128_f64[0], a12, a13, a14);
          v442 = 0uLL;
          object = 0;
          v172 = (char *)v438;
          v173 = v439;
          v174 = v439 - (_BYTE *)v438;
          if (v439 == v438)
          {
            v176 = 0;
            v181 = *a1;
            v180 = a1[1];
            v182 = v180 - *a1;
            if (v180 == *a1)
              goto LABEL_223;
          }
          else
          {
            if (v174 < 0)
              sub_20E867F44();
            v175 = (char *)operator new(v439 - (_BYTE *)v438);
            v176 = v175;
            v177 = 0;
            object = v175;
            *((_QWORD *)&v442 + 1) = &v175[32 * (v174 >> 5)];
            do
            {
              v178 = &v172[v177];
              v179 = &v175[v177];
              *(_QWORD *)v179 = *(_QWORD *)&v172[v177];
              v137 = *(float64x2_t *)&v172[v177 + 8];
              *((_QWORD *)v179 + 3) = *(_QWORD *)&v172[v177 + 24];
              *(float64x2_t *)(v179 + 8) = v137;
              v177 += 32;
            }
            while (v178 + 32 != v173);
            *(_QWORD *)&v442 = &v175[v177];
            v181 = *a1;
            v180 = a1[1];
            v182 = v180 - *a1;
            if (v182 == (_QWORD)v442 - (_QWORD)v175)
            {
LABEL_223:
              v183 = v182 >> 5;
              v184 = (double)v183;
              if (v180 != v181)
                goto LABEL_224;
LABEL_233:
              v22 = 0.0 / v184;
              if (v176)
                goto LABEL_234;
              goto LABEL_235;
            }
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 590, (uint64_t)"imu_buffer_orig.size() == imu_buffer_interp.size()", 50, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v181 = *a1;
          v194 = a1[1];
          v183 = (uint64_t)(v194 - *a1) >> 5;
          v184 = (double)v183;
          if (v194 == *a1)
            goto LABEL_233;
LABEL_224:
          if (v183 <= 1)
            v185 = 1;
          else
            v185 = v183;
          v186 = (float64x2_t *)(v176 + 8);
          v187 = (float64x2_t *)(v181 + 8);
          v188 = 0.0;
          do
          {
            v138.f64[0] = v187[1].f64[0];
            v189 = *v187;
            v187 += 2;
            v190 = v189;
            _Q4.f64[0] = v186[1].f64[0];
            v191 = *v186;
            v186 += 2;
            v138 = vsubq_f64(v138, _Q4);
            _Q3 = vsubq_f64(v190, v191);
            _Q4 = vmulq_f64(_Q3, _Q3);
            _D5 = _Q3.f64[1];
            __asm { FMLA            D4, D5, V3.D[1] }
            v188 = v188 + vmlad_n_f64(_Q4.f64[0], v138.f64[0], v138.f64[0]);
            --v185;
          }
          while (v185);
          v22 = v188 / v184;
LABEL_234:
          *(_QWORD *)&v442 = v176;
          operator delete(v176);
LABEL_235:
          if (!v84)
            goto LABEL_237;
LABEL_236:
          v433 = v84;
          operator delete(v84);
          goto LABEL_237;
        }
      }
      sub_20F3EAEF4(&p_p);
      if (*(int *)p_p[7] <= 5)
      {
        v144 = *((unsigned __int8 *)p_p + 72);
        v145 = sub_20E8C31DC((uint64_t)p_p, "OSLogSurrogateAppender", 1, 0);
        v146 = v145;
        if (v144 || v145 != 0)
        {
          p_p_p = &p_p;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v425 = std::chrono::system_clock::now().__d_.__rep_;
          v426 = 5;
          v427 = "unknown file";
          v428 = 568;
          v429 = "unknown function";
          v430 = 0;
          v431 = 0;
          v148 = *p_p_p;
          if (*((char *)*p_p_p + 39) < 0)
          {
            v150 = (const char *)v148[2];
            v149 = (size_t)v148[3];
            v409 = (uint64_t)(*p_p_p + 2);
            v314 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v314 & 1) == 0)
            {
LABEL_582:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v448);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v448);
                if (v450 && v449 < 0)
                  operator delete(v448[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
            }
          }
          else
          {
            v149 = *((unsigned __int8 *)*p_p_p + 39);
            v150 = (const char *)(*p_p_p + 2);
            v409 = (uint64_t)v150;
            v151 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v151 & 1) == 0)
              goto LABEL_582;
          }
          if (byte_254A4A4F8[23] >= 0)
            v315 = byte_254A4A4F8;
          else
            v315 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v316 = byte_254A4A4F8[23];
          else
            v316 = *(_QWORD *)&byte_254A4A4F8[8];
          object = os_log_create(v315, v150);
          if (v316 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v316 >= 0x17)
          {
            v318 = (v316 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v316 | 7) != 0x17)
              v318 = v316 | 7;
            v319 = v318 + 1;
            v317 = (__int128 *)operator new(v318 + 1);
            *((_QWORD *)&v442 + 1) = v316;
            *(_QWORD *)&v443 = v319 | 0x8000000000000000;
            *(_QWORD *)&v442 = v317;
          }
          else
          {
            BYTE7(v443) = v316;
            v317 = &v442;
            if (!v316)
            {
LABEL_427:
              *((_BYTE *)v317 + v316) = 0;
              BYTE8(v443) = 1;
              if (v149 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v149 >= 0x17)
              {
                v322 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v149 | 7) != 0x17)
                  v322 = v149 | 7;
                v323 = v322 + 1;
                v320 = operator new(v322 + 1);
                v445 = v149;
                v446 = v323 | 0x8000000000000000;
                v444 = v320;
              }
              else
              {
                HIBYTE(v446) = v149;
                v320 = &v444;
                if (!v149)
                {
                  LOBYTE(v444) = 0;
                  v447 = 1;
                  v321 = object;
                  if ((SHIBYTE(v446) & 0x80000000) == 0)
                    goto LABEL_431;
LABEL_437:
                  operator delete(v444);
                  if (BYTE8(v443))
                    goto LABEL_438;
                  goto LABEL_440;
                }
              }
              memmove(v320, v150, v149);
              *((_BYTE *)v320 + v149) = 0;
              v447 = 1;
              v321 = object;
              if (SHIBYTE(v446) < 0)
                goto LABEL_437;
LABEL_431:
              if (BYTE8(v443))
              {
LABEL_438:
                if (SBYTE7(v443) < 0)
                  operator delete((void *)v442);
              }
LABEL_440:
              if (object)
                os_release(object);
              if (v146 && *(_QWORD *)(v146 + 24))
              {
                v324 = _os_log_pack_size();
                v325 = (std::__shared_weak_count_vtbl *)operator new(v324, (std::align_val_t)8uLL);
                v326 = (std::__shared_weak_count *)operator new();
                v327 = v326;
                v326->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v326->__shared_owners_;
                v326->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v326->__shared_weak_owners_ = 0;
                v326[1].__vftable = v325;
                object = v325;
                *(_QWORD *)&v442 = v325;
                *((_QWORD *)&v442 + 1) = v326;
                do
                  v329 = __ldxr(p_shared_owners);
                while (__stxr(v329 + 1, p_shared_owners));
                v443 = 0uLL;
                v444 = 0;
                do
                  v330 = __ldaxr(p_shared_owners);
                while (__stlxr(v330 - 1, p_shared_owners));
                if (!v330)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v327);
                }
                v331 = object;
                *(_WORD *)_os_log_pack_fill() = 0;
                v332 = operator new();
                v333 = (double *)*((unsigned __int8 *)v148 + 39);
                v334 = v409;
                if ((char)v333 < 0)
                {
                  v334 = (uint64_t)v148[2];
                  v333 = v148[3];
                }
                *(_QWORD *)v332 = v331;
                *(_OWORD *)(v332 + 8) = v442;
                v442 = 0uLL;
                *(_OWORD *)(v332 + 24) = v443;
                v443 = 0uLL;
                *(_QWORD *)(v332 + 40) = v334;
                *(_QWORD *)(v332 + 48) = v333;
                *(_BYTE *)(v332 + 56) = 16;
                v452[0] = 0;
                v448[0] = (double **)v332;
                (*(void (**)(_QWORD, double ***))(**(_QWORD **)(v146 + 24) + 40))(*(_QWORD *)(v146 + 24), v448);
                v335 = v448[0];
                v448[0] = 0;
                if (v335)
                {
                  v336 = (std::__shared_weak_count *)v335[4];
                  if (v336)
                  {
                    v337 = (unint64_t *)&v336->__shared_owners_;
                    do
                      v338 = __ldaxr(v337);
                    while (__stlxr(v338 - 1, v337));
                    if (!v338)
                    {
                      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                      std::__shared_weak_count::__release_weak(v336);
                    }
                  }
                  v339 = (std::__shared_weak_count *)v335[2];
                  if (v339)
                  {
                    v340 = (unint64_t *)&v339->__shared_owners_;
                    do
                      v341 = __ldaxr(v340);
                    while (__stlxr(v341 - 1, v340));
                    if (!v341)
                    {
                      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                      std::__shared_weak_count::__release_weak(v339);
                    }
                  }
                  MEMORY[0x212BC6398](v335, 0x10F0C40B62ED6C6);
                  v342 = v452[0];
                  v452[0] = 0;
                  if (v342)
                  {
                    v343 = (std::__shared_weak_count *)v342[4];
                    if (v343)
                    {
                      v344 = (unint64_t *)&v343->__shared_owners_;
                      do
                        v345 = __ldaxr(v344);
                      while (__stlxr(v345 - 1, v344));
                      if (!v345)
                      {
                        ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                        std::__shared_weak_count::__release_weak(v343);
                      }
                    }
                    v346 = (std::__shared_weak_count *)v342[2];
                    if (v346)
                    {
                      v347 = (unint64_t *)&v346->__shared_owners_;
                      do
                        v348 = __ldaxr(v347);
                      while (__stlxr(v348 - 1, v347));
                      if (!v348)
                      {
                        ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                        std::__shared_weak_count::__release_weak(v346);
                      }
                    }
                    MEMORY[0x212BC6398](v342, 0x10F0C40B62ED6C6);
                  }
                }
                v349 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
                if (*((_QWORD *)&v443 + 1))
                {
                  v350 = (unint64_t *)(*((_QWORD *)&v443 + 1) + 8);
                  do
                    v351 = __ldaxr(v350);
                  while (__stlxr(v351 - 1, v350));
                  if (!v351)
                  {
                    ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                    std::__shared_weak_count::__release_weak(v349);
                  }
                }
                v352 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
                if (*((_QWORD *)&v442 + 1))
                {
                  v353 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
                  do
                    v354 = __ldaxr(v353);
                  while (__stlxr(v354 - 1, v353));
                  if (!v354)
                  {
                    ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
                    std::__shared_weak_count::__release_weak(v352);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v321, OS_LOG_TYPE_ERROR);
                LOWORD(object) = 0;
                v355 = (void *)_os_log_send_and_compose_impl();
                if (v355)
                  free(v355);
              }
              if (v144)
              {
                sub_20E8C003C((uint64_t)&p_p_p, "IMU sampler failed in spline interpolation - unable to interpolate imu sample.");
                sub_20E863570((uint64_t)&p_p_p);
              }
              sub_20E863570((uint64_t)&p_p_p);
              v356 = v431;
              if (v431)
              {
                v357 = (unint64_t *)&v431->__shared_owners_;
                do
                  v358 = __ldaxr(v357);
                while (__stlxr(v358 - 1, v357));
                if (!v358)
                {
                  ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
                  std::__shared_weak_count::__release_weak(v356);
                }
              }
              v84 = v432;
              goto LABEL_495;
            }
          }
          memmove(v317, v315, v316);
          goto LABEL_427;
        }
      }
LABEL_495:
      v22 = 1.79769313e308;
      if (v84)
        goto LABEL_236;
LABEL_237:
      if (__p)
      {
        v436 = __p;
        operator delete(__p);
      }
      if (v438)
      {
        v439 = (char *)v438;
        operator delete(v438);
      }
      if (a2[1] - *a2 <= 0x20
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 545, (uint64_t)"imu_buffer_orig.size() > 1", 26, (uint64_t)"IMU buffer > 1", 14, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_599;
      }
      v195 = a6[1];
      if ((unint64_t)(v195 - *a6) < 9
        || *(_QWORD *)*a6
        || (v196 = *a2,
            v197 = (uint64_t *)a2[1],
            v198 = (int64_t)v197 - *a2,
            v199 = v198 >> 5,
            *(_QWORD *)(v195 - 8) != (v198 >> 5) - 1))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 548, (uint64_t)"interp_set.size() > 1 && interp_set.front() == 0 && interp_set.back() == imu_buffer_orig.size() - 1", 99, (uint64_t)"interp set must start with sample 0 and end with last sample in buffer", 70, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_599;
        }
        v196 = *a2;
        v197 = (uint64_t *)a2[1];
        v198 = (int64_t)v197 - *a2;
        v199 = v198 >> 5;
      }
      v438 = 0;
      v439 = 0;
      v440 = 0;
      if (v197 == (uint64_t *)v196)
      {
        v201 = 0;
        v202 = 0;
        v205 = 0;
        v204 = 0;
        __p = 0;
        v436 = 0;
        v437 = 0;
        v432 = 0;
        v433 = 0;
        v434 = 0;
        v206 = (char *)*a6;
        if (a6[1] == *a6)
          goto LABEL_275;
      }
      else
      {
        if (v198 < 0)
          sub_20E867F44();
        v200 = (char *)operator new(v198);
        v201 = v200;
        v202 = &v200[32 * v199];
        v438 = v200;
        v440 = v202;
        v203 = v200;
        do
        {
          *(_QWORD *)v203 = 0xBFF0000000000000;
          *((_QWORD *)v203 + 1) = 0;
          *((_QWORD *)v203 + 2) = 0;
          *((_QWORD *)v203 + 3) = 0;
          v203 += 32;
        }
        while (v203 != v202);
        v439 = &v200[32 * v199];
        v204 = (double *)operator new((unint64_t)v198 >> 2);
        __p = v204;
        v437 = &v204[v199];
        bzero(v204, (unint64_t)v198 >> 2);
        v205 = (char *)v204 + ((unint64_t)v198 >> 2);
        v436 = v205;
        v432 = 0;
        v433 = 0;
        v434 = 0;
        v206 = (char *)*a6;
        if (a6[1] == *a6)
        {
LABEL_275:
          v207 = 0;
          v210 = 0;
          v432 = 0;
          if ((uint64_t *)v196 == v197)
            goto LABEL_289;
LABEL_276:
          v219 = (unint64_t)v197 - v196 - 32;
          if (v219 >= 0x200
            && ((unint64_t)v204 < v196 + (v219 & 0xFFFFFFFFFFFFFFE0) + 8
              ? (v220 = v196 >= (unint64_t)&v204[(v219 >> 5) + 1])
              : (v220 = 1),
                v220))
          {
            v221 = (v219 >> 5) + 1;
            v222 = v221 & 3;
            if ((v221 & 3) == 0)
              v222 = 4;
            v223 = v221 - v222;
            v224 = &v204[v221 - v222];
            v225 = (uint64_t *)(v196 + 32 * v223);
            v226 = (const double *)(v196 + 64);
            v227 = (float64x2_t *)(v204 + 2);
            do
            {
              v228 = v226 - 8;
              *(float64x2x4_t *)v137.f64 = vld4q_f64(v228);
              *(float64x2x4_t *)_Q4.f64 = vld4q_f64(v226);
              v227[-1] = v137;
              *v227 = _Q4;
              v226 += 16;
              v227 += 2;
              v223 -= 4;
            }
            while (v223);
          }
          else
          {
            v224 = v204;
            v225 = (uint64_t *)v196;
          }
          do
          {
            v229 = *v225;
            v225 += 4;
            *(_QWORD *)v224++ = v229;
          }
          while (v225 != v197);
          goto LABEL_289;
        }
      }
      v406 = v205;
      v410 = v201;
      v207 = 0;
      v208 = 0;
      v209 = 0;
      v210 = 0;
      do
      {
        while (1)
        {
          v211 = *a2 + 32 * *(_QWORD *)&v206[8 * v209];
          if (v207 >= v208)
            break;
          *(_QWORD *)v207 = *(_QWORD *)v211;
          v137 = *(float64x2_t *)(v211 + 8);
          *((_QWORD *)v207 + 3) = *(_QWORD *)(v211 + 24);
          *(float64x2_t *)(v207 + 8) = v137;
          v207 += 32;
          ++v209;
          v206 = (char *)*a6;
          if (v209 >= (uint64_t)(a6[1] - *a6) >> 3)
            goto LABEL_272;
        }
        v212 = (v207 - (char *)v210) >> 5;
        v213 = v212 + 1;
        if ((unint64_t)(v212 + 1) >> 59)
        {
          v433 = (double *)v207;
          v434 = v208;
          v432 = v210;
          sub_20E867F44();
        }
        if ((v208 - (char *)v210) >> 4 > v213)
          v213 = (v208 - (char *)v210) >> 4;
        if ((unint64_t)(v208 - (char *)v210) >= 0x7FFFFFFFFFFFFFE0)
          v214 = 0x7FFFFFFFFFFFFFFLL;
        else
          v214 = v213;
        if (v214)
        {
          if (v214 >> 59)
          {
            v433 = (double *)v207;
            v434 = v208;
            v432 = v210;
            sub_20E877A38();
          }
          v215 = (char *)operator new(32 * v214);
        }
        else
        {
          v215 = 0;
        }
        v216 = &v215[32 * v212];
        *(_QWORD *)v216 = *(_QWORD *)v211;
        v137 = *(float64x2_t *)(v211 + 8);
        *((_QWORD *)v216 + 3) = *(_QWORD *)(v211 + 24);
        *(float64x2_t *)(v216 + 8) = v137;
        v217 = v216;
        while (v207 != (char *)v210)
        {
          v218 = *((_QWORD *)v207 - 4);
          v207 -= 32;
          *((_QWORD *)v217 - 4) = v218;
          v217 -= 32;
          v137 = *(float64x2_t *)(v207 + 8);
          *((_QWORD *)v217 + 3) = *((_QWORD *)v207 + 3);
          *(float64x2_t *)(v217 + 8) = v137;
        }
        v208 = &v215[32 * v214];
        v207 = v216 + 32;
        if (v210)
          operator delete(v210);
        v210 = (double *)v217;
        ++v209;
        v206 = (char *)*a6;
      }
      while (v209 < (uint64_t)(a6[1] - *a6) >> 3);
LABEL_272:
      v433 = (double *)v207;
      v434 = v208;
      v196 = *a2;
      v197 = (uint64_t *)a2[1];
      v205 = v406;
      v201 = v410;
      v432 = v210;
      if ((uint64_t *)v196 != v197)
        goto LABEL_276;
LABEL_289:
      p_p_p = (double ***)v210;
      if (*v204 < *v210 || (v137.f64[0] = *((float64_t *)v205 - 1), v230 = *((double *)v207 - 4), v137.f64[0] > v230))
      {
        sub_20F3EAEF4(&p_p);
        v19 = v418;
        if (*(int *)p_p[7] > 5)
          goto LABEL_580;
        v231 = *((unsigned __int8 *)p_p + 72);
        v232 = sub_20E8C31DC((uint64_t)p_p, "OSLogSurrogateAppender", 1, 0);
        v233 = v232;
        if (!v231 && v232 == 0)
          goto LABEL_580;
        p_p_p = &p_p;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v425 = std::chrono::system_clock::now().__d_.__rep_;
        v426 = 5;
        v427 = "unknown file";
        v428 = 568;
        v429 = "unknown function";
        v430 = 0;
        v431 = 0;
        v235 = *p_p_p;
        if (*((char *)*p_p_p + 39) < 0)
        {
          v237 = (const char *)v235[2];
          v236 = (size_t)v235[3];
          v411 = (uint64_t)(*p_p_p + 2);
          v359 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v359 & 1) == 0)
          {
LABEL_587:
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v448);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v448);
              if (v450 && v449 < 0)
                operator delete(v448[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
          }
        }
        else
        {
          v236 = *((unsigned __int8 *)*p_p_p + 39);
          v237 = (const char *)(*p_p_p + 2);
          v411 = (uint64_t)v237;
          v238 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v238 & 1) == 0)
            goto LABEL_587;
        }
        if (byte_254A4A4F8[23] >= 0)
          v360 = byte_254A4A4F8;
        else
          v360 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v361 = byte_254A4A4F8[23];
        else
          v361 = *(_QWORD *)&byte_254A4A4F8[8];
        object = os_log_create(v360, v237);
        if (v361 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v361 >= 0x17)
        {
          v363 = (v361 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v361 | 7) != 0x17)
            v363 = v361 | 7;
          v364 = v363 + 1;
          v362 = (__int128 *)operator new(v363 + 1);
          *((_QWORD *)&v442 + 1) = v361;
          *(_QWORD *)&v443 = v364 | 0x8000000000000000;
          *(_QWORD *)&v442 = v362;
        }
        else
        {
          BYTE7(v443) = v361;
          v362 = &v442;
          if (!v361)
          {
LABEL_512:
            *((_BYTE *)v362 + v361) = 0;
            BYTE8(v443) = 1;
            if (v236 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v19 = v418;
            if (v236 >= 0x17)
            {
              v367 = (v236 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v236 | 7) != 0x17)
                v367 = v236 | 7;
              v368 = v367 + 1;
              v365 = operator new(v367 + 1);
              v445 = v236;
              v446 = v368 | 0x8000000000000000;
              v444 = v365;
            }
            else
            {
              HIBYTE(v446) = v236;
              v365 = &v444;
              if (!v236)
              {
                LOBYTE(v444) = 0;
                v447 = 1;
                v366 = object;
                if ((SHIBYTE(v446) & 0x80000000) == 0)
                  goto LABEL_516;
LABEL_522:
                operator delete(v444);
                if (BYTE8(v443))
                  goto LABEL_523;
                goto LABEL_525;
              }
            }
            memmove(v365, v237, v236);
            *((_BYTE *)v365 + v236) = 0;
            v447 = 1;
            v366 = object;
            if (SHIBYTE(v446) < 0)
              goto LABEL_522;
LABEL_516:
            if (BYTE8(v443))
            {
LABEL_523:
              if (SBYTE7(v443) < 0)
                operator delete((void *)v442);
            }
LABEL_525:
            if (object)
              os_release(object);
            if (v233 && *(_QWORD *)(v233 + 24))
            {
              v369 = _os_log_pack_size();
              v370 = (std::__shared_weak_count_vtbl *)operator new(v369, (std::align_val_t)8uLL);
              v371 = (std::__shared_weak_count *)operator new();
              v372 = v371;
              v371->__shared_owners_ = 0;
              v373 = (unint64_t *)&v371->__shared_owners_;
              v371->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v371->__shared_weak_owners_ = 0;
              v371[1].__vftable = v370;
              object = v370;
              *(_QWORD *)&v442 = v370;
              *((_QWORD *)&v442 + 1) = v371;
              do
                v374 = __ldxr(v373);
              while (__stxr(v374 + 1, v373));
              v443 = 0uLL;
              v444 = 0;
              do
                v375 = __ldaxr(v373);
              while (__stlxr(v375 - 1, v373));
              if (!v375)
              {
                ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                std::__shared_weak_count::__release_weak(v372);
              }
              v376 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v377 = operator new();
              v378 = (double *)*((unsigned __int8 *)v235 + 39);
              v379 = v411;
              if ((char)v378 < 0)
              {
                v379 = (uint64_t)v235[2];
                v378 = v235[3];
              }
              *(_QWORD *)v377 = v376;
              *(_OWORD *)(v377 + 8) = v442;
              v442 = 0uLL;
              *(_OWORD *)(v377 + 24) = v443;
              v443 = 0uLL;
              *(_QWORD *)(v377 + 40) = v379;
              *(_QWORD *)(v377 + 48) = v378;
              *(_BYTE *)(v377 + 56) = 16;
              v452[0] = 0;
              v448[0] = (double **)v377;
              (*(void (**)(_QWORD, double ***))(**(_QWORD **)(v233 + 24) + 40))(*(_QWORD *)(v233 + 24), v448);
              v380 = v448[0];
              v448[0] = 0;
              if (v380)
              {
                v381 = (std::__shared_weak_count *)v380[4];
                if (v381)
                {
                  v382 = (unint64_t *)&v381->__shared_owners_;
                  do
                    v383 = __ldaxr(v382);
                  while (__stlxr(v383 - 1, v382));
                  if (!v383)
                  {
                    ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                    std::__shared_weak_count::__release_weak(v381);
                  }
                }
                v384 = (std::__shared_weak_count *)v380[2];
                if (v384)
                {
                  v385 = (unint64_t *)&v384->__shared_owners_;
                  do
                    v386 = __ldaxr(v385);
                  while (__stlxr(v386 - 1, v385));
                  if (!v386)
                  {
                    ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
                    std::__shared_weak_count::__release_weak(v384);
                  }
                }
                MEMORY[0x212BC6398](v380, 0x10F0C40B62ED6C6);
                v387 = v452[0];
                v452[0] = 0;
                if (v387)
                {
                  v388 = (std::__shared_weak_count *)v387[4];
                  if (v388)
                  {
                    v389 = (unint64_t *)&v388->__shared_owners_;
                    do
                      v390 = __ldaxr(v389);
                    while (__stlxr(v390 - 1, v389));
                    if (!v390)
                    {
                      ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
                      std::__shared_weak_count::__release_weak(v388);
                    }
                  }
                  v391 = (std::__shared_weak_count *)v387[2];
                  if (v391)
                  {
                    v392 = (unint64_t *)&v391->__shared_owners_;
                    do
                      v393 = __ldaxr(v392);
                    while (__stlxr(v393 - 1, v392));
                    if (!v393)
                    {
                      ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
                      std::__shared_weak_count::__release_weak(v391);
                    }
                  }
                  MEMORY[0x212BC6398](v387, 0x10F0C40B62ED6C6);
                }
              }
              v394 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
              if (*((_QWORD *)&v443 + 1))
              {
                v395 = (unint64_t *)(*((_QWORD *)&v443 + 1) + 8);
                do
                  v396 = __ldaxr(v395);
                while (__stlxr(v396 - 1, v395));
                if (!v396)
                {
                  ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
                  std::__shared_weak_count::__release_weak(v394);
                }
              }
              v397 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
              if (*((_QWORD *)&v442 + 1))
              {
                v398 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
                do
                  v399 = __ldaxr(v398);
                while (__stlxr(v399 - 1, v398));
                if (!v399)
                {
                  ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                  std::__shared_weak_count::__release_weak(v397);
                }
              }
            }
            else
            {
              os_log_type_enabled(v366, OS_LOG_TYPE_ERROR);
              LOWORD(object) = 0;
              v400 = (void *)_os_log_send_and_compose_impl();
              if (v400)
                free(v400);
            }
            if (v231)
            {
              sub_20E8C003C((uint64_t)&p_p_p, "IMU sampler failed in spline interpolation - unable to interpolate imu sample.");
              sub_20E863570((uint64_t)&p_p_p);
            }
            sub_20E863570((uint64_t)&p_p_p);
            v401 = v431;
            if (v431)
            {
              v402 = (unint64_t *)&v431->__shared_owners_;
              do
                v403 = __ldaxr(v402);
              while (__stlxr(v403 - 1, v402));
              if (!v403)
              {
                ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
                std::__shared_weak_count::__release_weak(v401);
              }
            }
            v210 = v432;
LABEL_580:
            v23 = 1.79769313e308;
            if (!v210)
              goto LABEL_322;
LABEL_321:
            v433 = v210;
            operator delete(v210);
            goto LABEL_322;
          }
        }
        memmove(v362, v360, v361);
        goto LABEL_512;
      }
      v448[0] = (double **)&p_p_p;
      v452[0] = (uint64_t *)&p_p_p;
      p_p = (double **)&__p;
      v239 = (v205 - (char *)v204) >> 3;
      v240 = (v202 - v201) >> 5;
      v19 = v418;
      if (v239 <= v240)
      {
        if (v239 < v240)
          v439 = &v201[32 * v239];
      }
      else
      {
        sub_20EAF5F94((char **)&v438, v239 - v240);
        v239 = (v436 - (_BYTE *)__p) >> 3;
      }
      object = &v438;
      *(_QWORD *)&v442 = &__p;
      sub_20FDB48EC(a5, v448, v452, (v207 - (char *)v210) >> 5, &p_p, (_QWORD **)&object, v239, v137, v230, v138, v139, _Q4.f64[0], v141, v142, v143);
      v442 = 0uLL;
      object = 0;
      v242 = (char *)v438;
      v243 = v439;
      v244 = v439 - (_BYTE *)v438;
      if (v439 == v438)
      {
        v246 = 0;
        v251 = *a2;
        v250 = a2[1];
        v252 = v250 - *a2;
        if (v250 == *a2)
          goto LABEL_308;
      }
      else
      {
        if (v244 < 0)
          sub_20E867F44();
        v245 = (char *)operator new(v439 - (_BYTE *)v438);
        v246 = v245;
        v247 = 0;
        object = v245;
        *((_QWORD *)&v442 + 1) = &v245[32 * (v244 >> 5)];
        do
        {
          v248 = &v242[v247];
          v249 = &v245[v247];
          *(_QWORD *)v249 = *(_QWORD *)&v242[v247];
          a7 = *(float64x2_t *)&v242[v247 + 8];
          *((_QWORD *)v249 + 3) = *(_QWORD *)&v242[v247 + 24];
          *(float64x2_t *)(v249 + 8) = a7;
          v247 += 32;
        }
        while (v248 + 32 != v243);
        *(_QWORD *)&v442 = &v245[v247];
        v251 = *a2;
        v250 = a2[1];
        v252 = v250 - *a2;
        if (v252 == (_QWORD)v442 - (_QWORD)v245)
        {
LABEL_308:
          v253 = v252 >> 5;
          if (v250 == v251)
            goto LABEL_318;
          goto LABEL_309;
        }
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUFilter.cpp", 590, (uint64_t)"imu_buffer_orig.size() == imu_buffer_interp.size()", 50, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v251 = *a2;
      v263 = a2[1];
      v253 = (uint64_t)(v263 - *a2) >> 5;
      if (v263 == *a2)
      {
LABEL_318:
        v23 = 0.0 / (double)v253;
        if (!v246)
          goto LABEL_320;
        goto LABEL_319;
      }
LABEL_309:
      if (v253 <= 1)
        v254 = 1;
      else
        v254 = v253;
      v255 = (float64x2_t *)(v246 + 8);
      v256 = (float64x2_t *)(v251 + 8);
      v257 = 0.0;
      do
      {
        v241.f64[0] = v256[1].f64[0];
        v258 = *v256;
        v256 += 2;
        v259 = v258;
        _Q3.f64[0] = v255[1].f64[0];
        v260 = *v255;
        v255 += 2;
        v241 = vsubq_f64(v241, _Q3);
        _Q2 = vsubq_f64(v259, v260);
        _Q3 = vmulq_f64(_Q2, _Q2);
        _D4 = _Q2.f64[1];
        __asm { FMLA            D3, D4, V2.D[1] }
        v257 = v257 + vmlad_n_f64(_Q3.f64[0], v241.f64[0], v241.f64[0]);
        --v254;
      }
      while (v254);
      v23 = v257 / (double)v253;
LABEL_319:
      *(_QWORD *)&v442 = v246;
      operator delete(v246);
LABEL_320:
      if (v210)
        goto LABEL_321;
LABEL_322:
      if (__p)
      {
        v436 = __p;
        operator delete(__p);
      }
      if (v438)
      {
        v439 = (char *)v438;
        operator delete(v438);
      }
LABEL_15:
      v24 = v23 > a8 || v22 > v16;
      v25 = ++v420;
      if (!v24 || v25 == v413)
        return;
    }
    v51 = a6[2];
    if ((unint64_t)v28 < v51)
    {
      *(_QWORD *)v28 = v419;
      v52 = (uint64_t)(v28 + 8);
LABEL_79:
      a6[1] = v52;
      v28 = (char *)v52;
      goto LABEL_80;
    }
    v53 = (char *)*a6;
    v54 = (uint64_t)&v28[-*a6];
    v55 = v54 >> 3;
    v56 = (v54 >> 3) + 1;
    if (v56 >> 61)
LABEL_595:
      sub_20E867F44();
    v57 = v51 - (_QWORD)v53;
    if (v57 >> 2 > v56)
      v56 = v57 >> 2;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
      v58 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    if (v58)
    {
      if (v58 >> 61)
LABEL_598:
        sub_20E877A38();
      v59 = operator new(8 * v58);
      v60 = (unint64_t *)&v59[8 * v55];
      *v60 = v419;
      v52 = (uint64_t)(v60 + 1);
      v61 = v28 - v53;
      if (v28 == v53)
        goto LABEL_77;
    }
    else
    {
      v59 = 0;
      v60 = (unint64_t *)(8 * v55);
      *(_QWORD *)(8 * v55) = v419;
      v52 = 8 * v55 + 8;
      v61 = v28 - v53;
      if (v28 == v53)
        goto LABEL_77;
    }
    v62 = v61 - 8;
    if (v62 >= 0x58)
    {
      if ((unint64_t)(v28 - v59 - v54) >= 0x20)
      {
        v64 = (v62 >> 3) + 1;
        v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
        v63 = &v28[-v65];
        v60 = (unint64_t *)((char *)v60 - v65);
        v66 = (__n128 *)&v59[8 * v55 - 16];
        v67 = (float64x2_t *)(v28 - 16);
        v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          a7 = *v67;
          v66[-1] = (__n128)v67[-1];
          *v66 = (__n128)a7;
          v66 -= 2;
          v67 -= 2;
          v68 -= 4;
        }
        while (v68);
        if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_77:
          *a6 = v60;
          a6[1] = v52;
          a6[2] = &v59[8 * v58];
          if (v53)
            operator delete(v53);
          goto LABEL_79;
        }
      }
      else
      {
        v63 = v28;
      }
    }
    else
    {
      v63 = v28;
    }
    do
    {
      v69 = *((_QWORD *)v63 - 1);
      v63 -= 8;
      *--v60 = v69;
    }
    while (v63 != v53);
    goto LABEL_77;
  }
}

void sub_20F3F9AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *object,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54)
{
  uint64_t v54;

  if (*(_BYTE *)(v54 - 184) && *(char *)(v54 - 185) < 0)
    operator delete(*(void **)(v54 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a29);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a41)
  {
    a42 = (uint64_t)a41;
    operator delete(a41);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F3F9E98(int a1, char a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  int64x2_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  _OWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int64_t v74;
  char *v75;
  size_t v76;
  uint64_t v77;
  char *v78;
  int64_t v79;
  char *v80;
  size_t v81;
  uint64_t v82;
  char *v83;
  int64_t v84;
  char *v85;
  size_t v86;
  uint64_t v87;
  char *v88;
  int64_t v89;
  char *v90;
  size_t v91;
  _OWORD *v92;
  _OWORD *v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  _OWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _OWORD *v102;
  int64x2_t *v103;
  _QWORD *v104;
  _OWORD *v105;
  _QWORD *v106;
  _OWORD *v107;
  _OWORD *v108;
  int64x2_t *v109;
  _QWORD *v110;
  _OWORD *v111;
  _OWORD *v112;
  uint64_t v113;
  _OWORD *v114;
  _QWORD *v115;
  _OWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  _OWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t result;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  int64x2_t v136;
  __int128 v137;
  int64x2_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  _BYTE __dst[1288];
  _OWORD *v143;
  uint64_t v144;
  int v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  _QWORD *v151;
  uint64_t v152;
  int v153;
  __int128 v154[2];
  uint64_t v155;
  uint64_t v156;
  int v157;
  _QWORD v158[2];
  int v159;

  *(_WORD *)a4 = 257;
  *(int64x2_t *)(a4 + 8) = vdupq_n_s64(0x4059000000000000uLL);
  *(_BYTE *)(a4 + 784) = 0;
  *(_BYTE *)(a4 + 856) = a3;
  v158[1] = 0;
  v158[0] = operator new(0, (std::align_val_t)0x20uLL);
  v159 = 0;
  v154[0] = xmmword_2103B3100;
  v154[1] = (__int128)vdupq_n_s64(0x3FB999999999999AuLL);
  v155 = 0x3F9EB851EB851EB8;
  v156 = 1000;
  v157 = 0;
  switch(a1)
  {
    case 0:
      *(_WORD *)a4 = 0;
      *((_QWORD *)&v137 + 1) = 4;
      *(_QWORD *)&v137 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v138.i32[0] = 1;
      *(_QWORD *)v137 = 0x3FF0000000000000;
      sub_20F3EA824((uint64_t)__dst, v154, (uint64_t)&v137, (uint64_t)v158, a2, 0.0);
      v7 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v7, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v7, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if ((_QWORD)v137)
        MEMORY[0x212BC6368](v137, 0x1000C8000313F17);
      goto LABEL_167;
    case 1:
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 24) = 0x3FB999999999999ALL;
      *((_QWORD *)&v137 + 1) = 4;
      *(_QWORD *)&v137 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v138.i32[0] = 1;
      *(_QWORD *)v137 = 0x3FF0000000000000;
      sub_20F3EA824((uint64_t)__dst, v154, (uint64_t)&v137, (uint64_t)v158, a2, 0.0);
      v37 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v37, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v37, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if ((_QWORD)v137)
        MEMORY[0x212BC6368](v137, 0x1000C8000313F17);
      goto LABEL_167;
    case 2:
      *(_OWORD *)(a4 + 16) = xmmword_2103B3120;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3260;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(int64x2_t *)v146 = vdupq_n_s64(0x3FD2BEC33301885EuLL);
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0x3FDA827999FCEF31;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.0015);
      v29 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v29, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v29, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      goto LABEL_292;
    case 3:
      v141 = 0;
      *(_BYTE *)(a4 + 1) = 0;
      v137 = xmmword_2103B3100;
      v138 = (int64x2_t)xmmword_2103B32B0;
      v140 = 1000;
      v139 = 0x3F9EB851EB851EB8;
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(int64x2_t *)v146 = vdupq_n_s64(0x3FE288BE1F7639F1uLL);
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0xBFC445F0FBB1CF87;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.00434);
      v32 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v32, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v32, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      v150 = 0;
      v146 = xmmword_2103B3100;
      v147 = xmmword_2103B32B0;
      v148 = 0x3F9EB851EB851EB8;
      v149 = 1000;
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 2;
      v136 = vdupq_n_s64(0x3FE288BE1F7639F1uLL);
      *(int64x2_t *)v151 = v136;
      v144 = 4;
      v143 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v145 = 2;
      *v143 = v136;
      sub_20F3F0B8C((uint64_t)__dst, &v146, (uint64_t)&v151, (uint64_t)&v143, a2, 0.00434);
      goto LABEL_222;
    case 4:
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3260;
      v140 = 1000;
      v139 = 0x3F9EB851EB851EB8;
      *(_BYTE *)(a4 + 1) = 0;
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(int64x2_t *)v146 = vdupq_n_s64(0x3FD2BEC33301885EuLL);
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0x3FDA827999FCEF31;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.00146);
      v17 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v17, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v17, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      v150 = 0;
      v146 = xmmword_2103B3130;
      v147 = xmmword_2103B32A0;
      v148 = 0x3F9EB851EB851EB8;
      v149 = 1000;
      v152 = 4;
      v107 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v151 = v107;
      v153 = 4;
      *v107 = xmmword_2103B3270;
      v107[1] = xmmword_2103B3280;
      v144 = 4;
      v108 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v143 = v108;
      v145 = 3;
      *v108 = xmmword_2103B3290;
      *((_QWORD *)v108 + 2) = 0x3FDD06E585C27AD3;
      sub_20F3F0B8C((uint64_t)__dst, &v146, (uint64_t)&v151, (uint64_t)&v143, a2, 0.00695);
      goto LABEL_222;
    case 5:
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3260;
      v140 = 1000;
      v139 = 0x3F9EB851EB851EB8;
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(int64x2_t *)v146 = vdupq_n_s64(0x3FD2BEC33301885EuLL);
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0x3FDA827999FCEF31;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.00146);
      v46 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v46, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v46, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      v150 = 0;
      v146 = xmmword_2103B3130;
      v147 = xmmword_2103B3150;
      v148 = 0x3F9EB851EB851EB8;
      v149 = 1000;
      v152 = 4;
      v111 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v151 = v111;
      v153 = 4;
      *v111 = xmmword_2103B3270;
      v111[1] = xmmword_2103B3280;
      v144 = 4;
      v112 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v143 = v112;
      v145 = 3;
      *v112 = xmmword_2103B3290;
      *((_QWORD *)v112 + 2) = 0x3FDD06E585C27AD3;
      sub_20F3F0B8C((uint64_t)__dst, &v146, (uint64_t)&v151, (uint64_t)&v143, a2, 0.00695);
LABEL_222:
      v113 = a4 + 416;
      if (*(_BYTE *)(a4 + 776))
      {
        sub_20F3FDDD0(v113, (uint64_t)__dst);
        sub_20EAF58EC((uint64_t)__dst);
        v102 = v143;
        if (!v143)
          goto LABEL_225;
        goto LABEL_224;
      }
      sub_20F3FE0E4(v113, (uint64_t)__dst);
      *(_BYTE *)(a4 + 776) = 1;
      sub_20EAF58EC((uint64_t)__dst);
      v102 = v143;
      if (v143)
        goto LABEL_224;
      goto LABEL_225;
    case 6:
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 24) = 0x3FB999999999999ALL;
      *(_BYTE *)(a4 + 784) = 1;
      *(_QWORD *)(a4 + 824) = 1;
      *(_DWORD *)(a4 + 816) = 1;
      v51 = *(_QWORD *)(a4 + 808);
      v52 = *(char **)(a4 + 792);
      if ((unint64_t)(v51 - (_QWORD)v52) < 0xB8)
      {
        if (v52)
        {
          *(_QWORD *)(a4 + 800) = v52;
          operator delete(v52);
          v51 = 0;
          *(_QWORD *)(a4 + 792) = 0;
          *(_QWORD *)(a4 + 800) = 0;
          *(_QWORD *)(a4 + 808) = 0;
        }
        v53 = v51 >> 2;
        if ((unint64_t)(v51 >> 2) <= 0x17)
          v53 = 23;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v54 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v54 = v53;
        if (v54 >> 61)
          sub_20E867F44();
        v52 = (char *)operator new(8 * v54);
        *(_QWORD *)(a4 + 792) = v52;
        *(_QWORD *)(a4 + 808) = &v52[8 * v54];
        *((_QWORD *)v52 + 22) = 0x3FF0000000000000;
        *(_QWORD *)(a4 + 800) = v52;
        *((_OWORD *)v52 + 8) = xmmword_2103B3BD0;
        *((_OWORD *)v52 + 9) = unk_2103B3BE0;
        *((_OWORD *)v52 + 10) = xmmword_2103B3BF0;
        *((_OWORD *)v52 + 4) = xmmword_2103B3B90;
        *((_OWORD *)v52 + 5) = unk_2103B3BA0;
        *((_OWORD *)v52 + 6) = xmmword_2103B3BB0;
        *((_OWORD *)v52 + 7) = unk_2103B3BC0;
        *(_OWORD *)v52 = xmmword_2103B3B50;
        *((_OWORD *)v52 + 1) = unk_2103B3B60;
        v56 = xmmword_2103B3B70;
        v55 = unk_2103B3B80;
        goto LABEL_282;
      }
      v83 = *(char **)(a4 + 800);
      v84 = v83 - v52;
      if ((unint64_t)(v83 - v52) > 0xB7)
      {
        *((_QWORD *)v52 + 22) = 0x3FF0000000000000;
        *((_OWORD *)v52 + 8) = xmmword_2103B3BD0;
        *((_OWORD *)v52 + 9) = unk_2103B3BE0;
        *((_OWORD *)v52 + 10) = xmmword_2103B3BF0;
        *((_OWORD *)v52 + 4) = xmmword_2103B3B90;
        *((_OWORD *)v52 + 5) = unk_2103B3BA0;
        *((_OWORD *)v52 + 6) = xmmword_2103B3BB0;
        *((_OWORD *)v52 + 7) = unk_2103B3BC0;
        *(_OWORD *)v52 = xmmword_2103B3B50;
        *((_OWORD *)v52 + 1) = unk_2103B3B60;
        v56 = xmmword_2103B3B70;
        v55 = unk_2103B3B80;
LABEL_282:
        v87 = 23;
        *((_OWORD *)v52 + 2) = v56;
        *((_OWORD *)v52 + 3) = v55;
        goto LABEL_283;
      }
      v85 = (char *)&xmmword_2103B3B50 + v84;
      if (v83 != v52)
      {
        memcpy(*(void **)(a4 + 792), &xmmword_2103B3B50, v83 - v52);
        v52 = *(char **)(a4 + 800);
      }
      v86 = 184 - v84;
      memcpy(v52, v85, v86);
      v87 = v86 >> 3;
LABEL_283:
      *(_QWORD *)(a4 + 800) = &v52[8 * v87];
      *(_OWORD *)(a4 + 832) = xmmword_2103149A0;
      goto LABEL_300;
    case 7:
      *(_WORD *)a4 = 0;
      *(_QWORD *)(a4 + 16) = 0x4089000000000000;
      *(_BYTE *)(a4 + 784) = 1;
      *(_DWORD *)(a4 + 816) = 0;
      *(_QWORD *)(a4 + 824) = 1;
      *(_QWORD *)(a4 + 848) = 0x3F50624DD2F1A9FCLL;
      v33 = *(_QWORD *)(a4 + 808);
      v34 = *(char **)(a4 + 792);
      if ((unint64_t)(v33 - (_QWORD)v34) < 0x98)
      {
        if (v34)
        {
          *(_QWORD *)(a4 + 800) = v34;
          operator delete(v34);
          v33 = 0;
          *(_QWORD *)(a4 + 792) = 0;
          *(_QWORD *)(a4 + 800) = 0;
          *(_QWORD *)(a4 + 808) = 0;
        }
        v35 = v33 >> 2;
        if ((unint64_t)(v33 >> 2) <= 0x13)
          v35 = 19;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36 >> 61)
          sub_20E867F44();
        v34 = (char *)operator new(8 * v36);
        *(_QWORD *)(a4 + 792) = v34;
        *(_QWORD *)(a4 + 800) = v34;
        *(_QWORD *)(a4 + 808) = &v34[8 * v36];
        goto LABEL_103;
      }
      v78 = *(char **)(a4 + 800);
      v79 = v78 - v34;
      if ((unint64_t)(v78 - v34) > 0x97)
      {
LABEL_103:
        *((_QWORD *)v34 + 18) = 0x3FF0000000000000;
        *((_OWORD *)v34 + 6) = xmmword_2103B3CB8;
        *((_OWORD *)v34 + 7) = unk_2103B3CC8;
        *((_OWORD *)v34 + 8) = xmmword_2103B3CD8;
        *((_OWORD *)v34 + 2) = xmmword_2103B3C78;
        *((_OWORD *)v34 + 3) = unk_2103B3C88;
        *((_OWORD *)v34 + 4) = xmmword_2103B3C98;
        *((_OWORD *)v34 + 5) = unk_2103B3CA8;
        v81 = 152;
        *(_OWORD *)v34 = xmmword_2103B3C58;
        *((_OWORD *)v34 + 1) = unk_2103B3C68;
        goto LABEL_104;
      }
      v80 = (char *)&xmmword_2103B3C58 + v79;
      if (v78 != v34)
      {
        memcpy(*(void **)(a4 + 792), &xmmword_2103B3C58, v78 - v34);
        v34 = *(char **)(a4 + 800);
      }
      v81 = 152 - v79;
      memcpy(v34, v80, v81);
LABEL_104:
      *(_QWORD *)(a4 + 800) = &v34[v81];
      *(_OWORD *)(a4 + 832) = xmmword_2103149A0;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3260;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(int64x2_t *)v146 = vdupq_n_s64(0x3FD2BEC33301885EuLL);
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0x3FDA827999FCEF31;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.0015);
      v82 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v82, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v82, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      goto LABEL_292;
    case 8:
      *(_BYTE *)(a4 + 1) = 0;
      *(_OWORD *)(a4 + 16) = xmmword_2103B3120;
      *(_BYTE *)(a4 + 784) = 1;
      *(_QWORD *)(a4 + 824) = 8;
      *(_DWORD *)(a4 + 816) = 0;
      *(_QWORD *)(a4 + 848) = 0x3F847AE147AE147BLL;
      v60 = *(_QWORD *)(a4 + 808);
      v61 = *(char **)(a4 + 792);
      if ((unint64_t)(v60 - (_QWORD)v61) < 0x50)
      {
        if (v61)
        {
          *(_QWORD *)(a4 + 800) = v61;
          operator delete(v61);
          v60 = 0;
          *(_QWORD *)(a4 + 792) = 0;
          *(_QWORD *)(a4 + 800) = 0;
          *(_QWORD *)(a4 + 808) = 0;
        }
        v62 = v60 >> 2;
        if ((unint64_t)(v60 >> 2) <= 0xA)
          v62 = 10;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v63 = v62;
        if (v63 >> 61)
          sub_20E867F44();
        v61 = (char *)operator new(8 * v63);
        *(_QWORD *)(a4 + 792) = v61;
        *(_QWORD *)(a4 + 808) = &v61[8 * v63];
        *(_QWORD *)(a4 + 800) = v61;
        goto LABEL_284;
      }
      v88 = *(char **)(a4 + 800);
      v89 = v88 - v61;
      if ((unint64_t)(v88 - v61) > 0x4F)
      {
LABEL_284:
        *((_OWORD *)v61 + 2) = xmmword_2103B3C28;
        *((_OWORD *)v61 + 3) = unk_2103B3C38;
        *((_OWORD *)v61 + 4) = xmmword_2103B3C48;
        *(_OWORD *)v61 = xmmword_2103B3C08;
        *((_OWORD *)v61 + 1) = unk_2103B3C18;
        v91 = 80;
        goto LABEL_285;
      }
      v90 = (char *)&xmmword_2103B3C08 + v89;
      if (v88 != v61)
      {
        memcpy(*(void **)(a4 + 792), &xmmword_2103B3C08, v88 - v61);
        v61 = *(char **)(a4 + 800);
      }
      v91 = 80 - v89;
      memcpy(v61, v90, v91);
LABEL_285:
      *(_QWORD *)(a4 + 800) = &v61[v91];
      *(_OWORD *)(a4 + 832) = xmmword_2103149A0;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3260;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(int64x2_t *)v146 = vdupq_n_s64(0x3FD2BEC33301885EuLL);
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0x3FDA827999FCEF31;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.0015);
      v121 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v121, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v121, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      goto LABEL_292;
    case 9:
      *(_OWORD *)(a4 + 16) = xmmword_2103B3120;
      *(_BYTE *)(a4 + 784) = 1;
      *(_QWORD *)(a4 + 824) = 1;
      *(_DWORD *)(a4 + 816) = 1;
      *(_QWORD *)(a4 + 848) = 0x3F847AE147AE147BLL;
      v21 = *(_QWORD *)(a4 + 808);
      v22 = *(char **)(a4 + 792);
      if ((unint64_t)(v21 - (_QWORD)v22) < 0x50)
      {
        if (v22)
        {
          *(_QWORD *)(a4 + 800) = v22;
          operator delete(v22);
          v21 = 0;
          *(_QWORD *)(a4 + 792) = 0;
          *(_QWORD *)(a4 + 800) = 0;
          *(_QWORD *)(a4 + 808) = 0;
        }
        v23 = v21 >> 2;
        if ((unint64_t)(v21 >> 2) <= 0xA)
          v23 = 10;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24 >> 61)
          sub_20E867F44();
        v22 = (char *)operator new(8 * v24);
        *(_QWORD *)(a4 + 792) = v22;
        *(_QWORD *)(a4 + 808) = &v22[8 * v24];
        *(_QWORD *)(a4 + 800) = v22;
        goto LABEL_96;
      }
      v73 = *(char **)(a4 + 800);
      v74 = v73 - v22;
      if ((unint64_t)(v73 - v22) > 0x4F)
      {
LABEL_96:
        *((_OWORD *)v22 + 2) = xmmword_2103B3C28;
        *((_OWORD *)v22 + 3) = unk_2103B3C38;
        *((_OWORD *)v22 + 4) = xmmword_2103B3C48;
        *(_OWORD *)v22 = xmmword_2103B3C08;
        *((_OWORD *)v22 + 1) = unk_2103B3C18;
        v76 = 80;
        goto LABEL_97;
      }
      v75 = (char *)&xmmword_2103B3C08 + v74;
      if (v73 != v22)
      {
        memcpy(*(void **)(a4 + 792), &xmmword_2103B3C08, v73 - v22);
        v22 = *(char **)(a4 + 800);
      }
      v76 = 80 - v74;
      memcpy(v22, v75, v76);
LABEL_97:
      *(_QWORD *)(a4 + 800) = &v22[v76];
      *(_OWORD *)(a4 + 832) = xmmword_2103149A0;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3260;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(int64x2_t *)v146 = vdupq_n_s64(0x3FD2BEC33301885EuLL);
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0x3FDA827999FCEF31;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.0015);
      v77 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v77, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v77, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
LABEL_292:
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(int64x2_t *)v146 = vdupq_n_s64(0x3FD2BEC33301885EuLL);
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0x3FDA827999FCEF31;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.0015);
LABEL_293:
      v118 = a4 + 416;
      if (*(_BYTE *)(a4 + 776))
      {
LABEL_294:
        sub_20F3FDDD0(v118, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v118, (uint64_t)__dst);
        *(_BYTE *)(a4 + 776) = 1;
      }
LABEL_296:
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
LABEL_298:
      v100 = (_QWORD *)v146;
      if ((_QWORD)v146)
        goto LABEL_299;
      goto LABEL_300;
    case 10:
      *(_OWORD *)(a4 + 16) = xmmword_2103B3120;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3260;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(int64x2_t *)v146 = vdupq_n_s64(0x3FC53C8FAA900CF0uLL);
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0x3FE561B82AB7F991;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.003125);
      v59 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v59, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v59, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      goto LABEL_234;
    case 11:
      *(_OWORD *)(a4 + 16) = xmmword_2103B3120;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B34C0;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 4;
      v14 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v14;
      LODWORD(v147) = 4;
      *v14 = xmmword_2103B3270;
      v14[1] = xmmword_2103B3280;
      v152 = 4;
      v15 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v151 = v15;
      v153 = 3;
      *(_OWORD *)v15 = xmmword_2103B3290;
      v15[2] = 0x3FDD06E585C27AD3;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.00625);
      v16 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v16, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v16, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      *((_QWORD *)&v146 + 1) = 4;
      v105 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v105;
      LODWORD(v147) = 4;
      *v105 = xmmword_2103B3270;
      v105[1] = xmmword_2103B3280;
      v152 = 4;
      v106 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v151 = v106;
      v153 = 3;
      *(_OWORD *)v106 = xmmword_2103B3290;
      v106[2] = 0x3FDD06E585C27AD3;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.00625);
      goto LABEL_293;
    case 12:
      *(_OWORD *)(a4 + 16) = xmmword_2103B3120;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3A50;
      v140 = 1000;
      v139 = 0x3F9EB851EB851EB8;
      *((_QWORD *)&v146 + 1) = 8;
      v18 = (int64x2_t *)operator new(0x40uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v18;
      LODWORD(v147) = 6;
      *v18 = (int64x2_t)xmmword_2103B3A60;
      v18[1] = vdupq_n_s64(0x3F5AE3530871BEDEuLL);
      v18[2] = (int64x2_t)xmmword_2103B3A70;
      v152 = 8;
      v19 = operator new(0x40uLL, (std::align_val_t)0x20uLL);
      v151 = v19;
      v153 = 5;
      *(_OWORD *)v19 = xmmword_2103B3A80;
      *((_OWORD *)v19 + 1) = xmmword_2103B3A90;
      v19[4] = 0x3FD1C6B482805EC5;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.010168);
      v20 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v20, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v20, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      *((_QWORD *)&v146 + 1) = 8;
      v109 = (int64x2_t *)operator new(0x40uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v109;
      LODWORD(v147) = 6;
      *v109 = (int64x2_t)xmmword_2103B3A60;
      v109[1] = vdupq_n_s64(0x3F5AE3530871BEDEuLL);
      v109[2] = (int64x2_t)xmmword_2103B3A70;
      v152 = 8;
      v110 = operator new(0x40uLL, (std::align_val_t)0x20uLL);
      v151 = v110;
      v153 = 5;
      *(_OWORD *)v110 = xmmword_2103B3A80;
      *((_OWORD *)v110 + 1) = xmmword_2103B3A90;
      v110[4] = 0x3FD1C6B482805EC5;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.010168);
      goto LABEL_293;
    case 13:
      *(_OWORD *)(a4 + 16) = xmmword_2103B3120;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B39D0;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 8;
      v48 = operator new(0x40uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v48;
      LODWORD(v147) = 8;
      *v48 = xmmword_2103B39E0;
      v48[1] = xmmword_2103B39F0;
      v48[2] = xmmword_2103B3A00;
      v48[3] = xmmword_2103B3A10;
      v152 = 8;
      v49 = operator new(0x40uLL, (std::align_val_t)0x20uLL);
      v151 = v49;
      v153 = 7;
      *(_OWORD *)v49 = xmmword_2103B3A20;
      *((_OWORD *)v49 + 1) = xmmword_2103B3A30;
      *((_OWORD *)v49 + 2) = xmmword_2103B3A40;
      v49[6] = 0x3FC5988B822F4DC5;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.01434);
      v50 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v50, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v50, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      *((_QWORD *)&v146 + 1) = 8;
      v114 = operator new(0x40uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v114;
      LODWORD(v147) = 8;
      *v114 = xmmword_2103B39E0;
      v114[1] = xmmword_2103B39F0;
      v114[2] = xmmword_2103B3A00;
      v114[3] = xmmword_2103B3A10;
      v152 = 8;
      v115 = operator new(0x40uLL, (std::align_val_t)0x20uLL);
      v151 = v115;
      v153 = 7;
      *(_OWORD *)v115 = xmmword_2103B3A20;
      *((_OWORD *)v115 + 1) = xmmword_2103B3A30;
      *((_OWORD *)v115 + 2) = xmmword_2103B3A40;
      v115[6] = 0x3FC5988B822F4DC5;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.01434);
      goto LABEL_293;
    case 14:
      *(_QWORD *)(a4 + 24) = 0x3FB999999999999ALL;
      *(_OWORD *)(a4 + 8) = xmmword_2103B3500;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3980;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 8;
      v11 = (int64x2_t *)operator new(0x40uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v11;
      LODWORD(v147) = 6;
      *v11 = (int64x2_t)xmmword_2103B3990;
      v11[1] = vdupq_n_s64(0x3FA0CA2267D8B6D0uLL);
      v11[2] = (int64x2_t)xmmword_2103B39A0;
      v152 = 8;
      v12 = operator new(0x40uLL, (std::align_val_t)0x20uLL);
      v151 = v12;
      v153 = 5;
      *(_OWORD *)v12 = xmmword_2103B39B0;
      *((_OWORD *)v12 + 1) = xmmword_2103B39C0;
      v12[4] = 0x3FB2834799C91AE4;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.0049);
      v13 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v13, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v13, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      *((_QWORD *)&v146 + 1) = 8;
      v103 = (int64x2_t *)operator new(0x40uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v103;
      LODWORD(v147) = 6;
      *v103 = (int64x2_t)xmmword_2103B3990;
      v103[1] = vdupq_n_s64(0x3FA0CA2267D8B6D0uLL);
      v103[2] = (int64x2_t)xmmword_2103B39A0;
      v152 = 8;
      v104 = operator new(0x40uLL, (std::align_val_t)0x20uLL);
      v151 = v104;
      v153 = 5;
      *(_OWORD *)v104 = xmmword_2103B39B0;
      *((_OWORD *)v104 + 1) = xmmword_2103B39C0;
      v104[4] = 0x3FB2834799C91AE4;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.0049);
      goto LABEL_293;
    case 15:
      *(_OWORD *)(a4 + 16) = xmmword_2103B3120;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B37E0;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 52;
      v30 = operator new(0x1A0uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v30;
      LODWORD(v147) = 50;
      *v30 = xmmword_2103B37F0;
      v30[1] = xmmword_2103B3800;
      v30[2] = xmmword_2103B3810;
      v30[3] = xmmword_2103B3820;
      v30[4] = xmmword_2103B3830;
      v30[5] = xmmword_2103B3840;
      v30[6] = xmmword_2103B3850;
      v30[7] = xmmword_2103B3860;
      v30[8] = xmmword_2103B3870;
      v30[9] = xmmword_2103B3880;
      v30[10] = xmmword_2103B3890;
      v30[11] = xmmword_2103B38A0;
      v30[12] = xmmword_2103B38B0;
      v30[13] = xmmword_2103B38C0;
      v30[14] = xmmword_2103B38D0;
      v30[15] = xmmword_2103B38E0;
      v30[16] = xmmword_2103B38F0;
      v30[17] = xmmword_2103B3900;
      v30[18] = xmmword_2103B3910;
      v30[19] = xmmword_2103B3920;
      v30[20] = xmmword_2103B3930;
      v30[21] = xmmword_2103B3940;
      v30[22] = xmmword_2103B3950;
      v30[23] = xmmword_2103B3960;
      v30[24] = xmmword_2103B3970;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)v158, a2, 0.03);
      v31 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v31, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v31, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      *((_QWORD *)&v146 + 1) = 52;
      v95 = operator new(0x1A0uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v95;
      LODWORD(v147) = 50;
      *v95 = xmmword_2103B37F0;
      v95[1] = xmmword_2103B3800;
      v95[2] = xmmword_2103B3810;
      v95[3] = xmmword_2103B3820;
      v95[4] = xmmword_2103B3830;
      v95[5] = xmmword_2103B3840;
      v95[6] = xmmword_2103B3850;
      v95[7] = xmmword_2103B3860;
      v95[8] = xmmword_2103B3870;
      v95[9] = xmmword_2103B3880;
      v95[10] = xmmword_2103B3890;
      v95[11] = xmmword_2103B38A0;
      v95[12] = xmmword_2103B38B0;
      v95[13] = xmmword_2103B38C0;
      v95[14] = xmmword_2103B38D0;
      v95[15] = xmmword_2103B38E0;
      v95[16] = xmmword_2103B38F0;
      v95[17] = xmmword_2103B3900;
      v95[18] = xmmword_2103B3910;
      v95[19] = xmmword_2103B3920;
      v95[20] = xmmword_2103B3930;
      v95[21] = xmmword_2103B3940;
      v95[22] = xmmword_2103B3950;
      v95[23] = xmmword_2103B3960;
      v95[24] = xmmword_2103B3970;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)v158, a2, 0.03);
      goto LABEL_160;
    case 16:
      *(_OWORD *)(a4 + 16) = xmmword_2103B3120;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3510;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 24;
      v9 = operator new(0xC0uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v9;
      LODWORD(v147) = 24;
      v133 = xmmword_2103B3530;
      v134 = xmmword_2103B3520;
      *v9 = xmmword_2103B3520;
      v9[1] = xmmword_2103B3530;
      v131 = xmmword_2103B3550;
      v132 = xmmword_2103B3540;
      v9[2] = xmmword_2103B3540;
      v9[3] = xmmword_2103B3550;
      v129 = xmmword_2103B3570;
      v130 = xmmword_2103B3560;
      v9[4] = xmmword_2103B3560;
      v9[5] = xmmword_2103B3570;
      v127 = xmmword_2103B3590;
      v128 = xmmword_2103B3580;
      v9[6] = xmmword_2103B3580;
      v9[7] = xmmword_2103B3590;
      v125 = xmmword_2103B35B0;
      v126 = xmmword_2103B35A0;
      v9[8] = xmmword_2103B35A0;
      v9[9] = xmmword_2103B35B0;
      v123 = xmmword_2103B35D0;
      v124 = xmmword_2103B35C0;
      v9[10] = xmmword_2103B35C0;
      v9[11] = xmmword_2103B35D0;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)v158, a2, 13.75);
      v10 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v10, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v10, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      goto LABEL_159;
    case 17:
      *(_OWORD *)(a4 + 16) = xmmword_2103B3120;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = vdupq_n_s64(0x3FB999999999999AuLL);
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 64;
      v38 = operator new(0x200uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v38;
      LODWORD(v147) = 64;
      *v38 = xmmword_2103B35E0;
      v38[1] = xmmword_2103B35F0;
      v38[2] = xmmword_2103B3600;
      v38[3] = xmmword_2103B3610;
      v38[4] = xmmword_2103B3620;
      v38[5] = xmmword_2103B3630;
      v38[6] = xmmword_2103B3640;
      v38[7] = xmmword_2103B3650;
      v38[8] = xmmword_2103B3660;
      v38[9] = xmmword_2103B3670;
      v38[10] = xmmword_2103B3680;
      v38[11] = xmmword_2103B3690;
      v38[12] = xmmword_2103B36A0;
      v38[13] = xmmword_2103B36B0;
      v38[14] = xmmword_2103B36C0;
      v38[15] = xmmword_2103B36D0;
      v38[16] = xmmword_2103B36E0;
      v38[17] = xmmword_2103B36F0;
      v38[18] = xmmword_2103B3700;
      v38[19] = xmmword_2103B3710;
      v38[20] = xmmword_2103B3720;
      v38[21] = xmmword_2103B3730;
      v38[22] = xmmword_2103B3740;
      v38[23] = xmmword_2103B3750;
      v38[24] = xmmword_2103B3760;
      v38[25] = xmmword_2103B3770;
      v38[26] = xmmword_2103B3780;
      v38[27] = xmmword_2103B3790;
      v38[28] = xmmword_2103B37A0;
      v38[29] = xmmword_2103B37B0;
      v38[30] = xmmword_2103B37C0;
      v38[31] = xmmword_2103B37D0;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)v158, a2, 47.75);
      v39 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v39, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v39, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      *((_QWORD *)&v146 + 1) = 64;
      v96 = operator new(0x200uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v96;
      LODWORD(v147) = 64;
      *v96 = xmmword_2103B35E0;
      v96[1] = xmmword_2103B35F0;
      v96[2] = xmmword_2103B3600;
      v96[3] = xmmword_2103B3610;
      v96[4] = xmmword_2103B3620;
      v96[5] = xmmword_2103B3630;
      v96[6] = xmmword_2103B3640;
      v96[7] = xmmword_2103B3650;
      v96[8] = xmmword_2103B3660;
      v96[9] = xmmword_2103B3670;
      v96[10] = xmmword_2103B3680;
      v96[11] = xmmword_2103B3690;
      v96[12] = xmmword_2103B36A0;
      v96[13] = xmmword_2103B36B0;
      v96[14] = xmmword_2103B36C0;
      v96[15] = xmmword_2103B36D0;
      v96[16] = xmmword_2103B36E0;
      v96[17] = xmmword_2103B36F0;
      v96[18] = xmmword_2103B3700;
      v96[19] = xmmword_2103B3710;
      v96[20] = xmmword_2103B3720;
      v96[21] = xmmword_2103B3730;
      v96[22] = xmmword_2103B3740;
      v96[23] = xmmword_2103B3750;
      v96[24] = xmmword_2103B3760;
      v96[25] = xmmword_2103B3770;
      v96[26] = xmmword_2103B3780;
      v96[27] = xmmword_2103B3790;
      v96[28] = xmmword_2103B37A0;
      v96[29] = xmmword_2103B37B0;
      v96[30] = xmmword_2103B37C0;
      v96[31] = xmmword_2103B37D0;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)v158, a2, 47.75);
      goto LABEL_160;
    case 18:
      *(_QWORD *)(a4 + 24) = 0x3FB999999999999ALL;
      *(_OWORD *)(a4 + 8) = xmmword_2103B3500;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3510;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 24;
      v57 = operator new(0xC0uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v57;
      LODWORD(v147) = 24;
      v133 = xmmword_2103B3530;
      v134 = xmmword_2103B3520;
      *v57 = xmmword_2103B3520;
      v57[1] = xmmword_2103B3530;
      v131 = xmmword_2103B3550;
      v132 = xmmword_2103B3540;
      v57[2] = xmmword_2103B3540;
      v57[3] = xmmword_2103B3550;
      v129 = xmmword_2103B3570;
      v130 = xmmword_2103B3560;
      v57[4] = xmmword_2103B3560;
      v57[5] = xmmword_2103B3570;
      v127 = xmmword_2103B3590;
      v128 = xmmword_2103B3580;
      v57[6] = xmmword_2103B3580;
      v57[7] = xmmword_2103B3590;
      v125 = xmmword_2103B35B0;
      v126 = xmmword_2103B35A0;
      v57[8] = xmmword_2103B35A0;
      v57[9] = xmmword_2103B35B0;
      v123 = xmmword_2103B35D0;
      v124 = xmmword_2103B35C0;
      v57[10] = xmmword_2103B35C0;
      v57[11] = xmmword_2103B35D0;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)v158, a2, 13.75);
      v58 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v58, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v58, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
LABEL_159:
      *((_QWORD *)&v146 + 1) = 24;
      v97 = operator new(0xC0uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v97;
      LODWORD(v147) = 24;
      *v97 = v134;
      v97[1] = v133;
      v97[2] = v132;
      v97[3] = v131;
      v97[4] = v130;
      v97[5] = v129;
      v97[6] = v128;
      v97[7] = v127;
      v97[8] = v126;
      v97[9] = v125;
      v97[10] = v124;
      v97[11] = v123;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)v158, a2, 13.75);
      goto LABEL_160;
    case 19:
      *(_QWORD *)(a4 + 24) = 0x3FB999999999999ALL;
      *(int64x2_t *)(a4 + 8) = vdupq_n_s64(0x4089000000000000uLL);
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3260;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(int64x2_t *)v146 = vdupq_n_s64(0x3FD2BEC33301885EuLL);
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0x3FDA827999FCEF31;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.0015);
      v67 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v67, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v67, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      goto LABEL_292;
    case 20:
      *(_QWORD *)(a4 + 24) = 0x3FB999999999999ALL;
      *(int64x2_t *)(a4 + 8) = vdupq_n_s64(0x4089000000000000uLL);
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3260;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      __asm { FMOV            V0.2D, #0.5 }
      v135 = _Q0;
      *(_OWORD *)v146 = _Q0;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)v158, a2, 0.000625);
      v45 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v45, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v45, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(_OWORD *)v146 = v135;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)v158, a2, 0.000625);
LABEL_160:
      v98 = a4 + 416;
      if (*(_BYTE *)(a4 + 776))
      {
        sub_20F3FDDD0(v98, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v98, (uint64_t)__dst);
        *(_BYTE *)(a4 + 776) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      goto LABEL_298;
    case 21:
      *(_QWORD *)(a4 + 24) = 0x3FB999999999999ALL;
      *(int64x2_t *)(a4 + 8) = vdupq_n_s64(0x4089000000000000uLL);
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3260;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(int64x2_t *)v146 = vdupq_n_s64(0x3FC53C8FAA900CF0uLL);
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0x3FE561B82AB7F991;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.003125);
      v47 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v47, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v47, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
LABEL_234:
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 2;
      *(int64x2_t *)v146 = vdupq_n_s64(0x3FC53C8FAA900CF0uLL);
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0x3FE561B82AB7F991;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.003125);
      goto LABEL_293;
    case 22:
      *(_QWORD *)(a4 + 24) = 0x3FB999999999999ALL;
      *(int64x2_t *)(a4 + 8) = vdupq_n_s64(0x4089000000000000uLL);
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B34C0;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      v141 = 1;
      *((_QWORD *)&v146 + 1) = 4;
      v64 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v64;
      LODWORD(v147) = 4;
      *v64 = xmmword_2103B3270;
      v64[1] = xmmword_2103B3280;
      v152 = 4;
      v65 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v151 = v65;
      v153 = 3;
      *(_OWORD *)v65 = xmmword_2103B3290;
      v65[2] = 0x3FDD06E585C27AD3;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.00625);
      v66 = a4 + 416;
      if (*(_BYTE *)(a4 + 776))
      {
        sub_20F3FDDD0(v66, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v66, (uint64_t)__dst);
        *(_BYTE *)(a4 + 776) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      *((_QWORD *)&v146 + 1) = 4;
      v116 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v116;
      LODWORD(v147) = 4;
      *v116 = xmmword_2103B3270;
      v116[1] = xmmword_2103B3280;
      v152 = 4;
      v117 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v151 = v117;
      v153 = 3;
      *(_OWORD *)v117 = xmmword_2103B3290;
      v117[2] = 0x3FDD06E585C27AD3;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.00625);
      v118 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
        goto LABEL_294;
      sub_20F3FE0E4(v118, (uint64_t)__dst);
      *(_BYTE *)(a4 + 408) = 1;
      goto LABEL_296;
    case 23:
      *(_QWORD *)(a4 + 24) = 0x3FB999999999999ALL;
      *(int64x2_t *)(a4 + 8) = vdupq_n_s64(0x4089000000000000uLL);
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B34C0;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 4;
      v68 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v68;
      LODWORD(v147) = 4;
      *v68 = xmmword_2103B34D0;
      v68[1] = xmmword_2103B34E0;
      v152 = 4;
      v69 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v151 = v69;
      v153 = 3;
      *(_OWORD *)v69 = xmmword_2103B34F0;
      v69[2] = 0x3FE75D83B6D8570FLL;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.0156);
      v70 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v70, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v70, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      *((_QWORD *)&v146 + 1) = 4;
      v119 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v119;
      LODWORD(v147) = 4;
      *v119 = xmmword_2103B34D0;
      v119[1] = xmmword_2103B34E0;
      v152 = 4;
      v120 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v151 = v120;
      v153 = 3;
      *(_OWORD *)v120 = xmmword_2103B34F0;
      v120[2] = 0x3FE75D83B6D8570FLL;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.0156);
      goto LABEL_293;
    case 24:
      *(_QWORD *)(a4 + 24) = 0x3FB999999999999ALL;
      *(int64x2_t *)(a4 + 8) = vdupq_n_s64(0x4089000000000000uLL);
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3150;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      v141 = 1;
      *((_QWORD *)&v146 + 1) = 32;
      v27 = operator new(0x100uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v27;
      LODWORD(v147) = 32;
      *v27 = xmmword_2103B32C0;
      v27[1] = xmmword_2103B32D0;
      v27[2] = xmmword_2103B32E0;
      v27[3] = xmmword_2103B32F0;
      v27[4] = xmmword_2103B3300;
      v27[5] = xmmword_2103B3310;
      v27[6] = xmmword_2103B3320;
      v27[7] = xmmword_2103B3330;
      v27[8] = xmmword_2103B3340;
      v27[9] = xmmword_2103B3350;
      v27[10] = xmmword_2103B3360;
      v27[11] = xmmword_2103B3370;
      v27[12] = xmmword_2103B3380;
      v27[13] = xmmword_2103B3390;
      v27[14] = xmmword_2103B33A0;
      v27[15] = xmmword_2103B33B0;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)v158, a2, 0.0029);
      v28 = a4 + 416;
      if (*(_BYTE *)(a4 + 776))
      {
        sub_20F3FDDD0(v28, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v28, (uint64_t)__dst);
        *(_BYTE *)(a4 + 776) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      v146 = xmmword_2103B3130;
      v147 = xmmword_2103B3150;
      v148 = 0x3FB999999999999ALL;
      v149 = 1000;
      v150 = 1;
      v152 = 32;
      v93 = operator new(0x100uLL, (std::align_val_t)0x20uLL);
      v151 = v93;
      v153 = 32;
      *v93 = xmmword_2103B33C0;
      v93[1] = xmmword_2103B33D0;
      v93[2] = xmmword_2103B33E0;
      v93[3] = xmmword_2103B33F0;
      v93[4] = xmmword_2103B3400;
      v93[5] = xmmword_2103B3410;
      v93[6] = xmmword_2103B3420;
      v93[7] = xmmword_2103B3430;
      v93[8] = xmmword_2103B3440;
      v93[9] = xmmword_2103B3450;
      v93[10] = xmmword_2103B3460;
      v93[11] = xmmword_2103B3470;
      v93[12] = xmmword_2103B3480;
      v93[13] = xmmword_2103B3490;
      v93[14] = xmmword_2103B34A0;
      v93[15] = xmmword_2103B34B0;
      sub_20F3EA824((uint64_t)__dst, &v146, (uint64_t)&v151, (uint64_t)v158, a2, 0.00166);
      goto LABEL_132;
    case 25:
      *(_OWORD *)(a4 + 16) = xmmword_2103B3120;
      v141 = 0;
      v137 = xmmword_2103B3130;
      v138 = (int64x2_t)xmmword_2103B3150;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      *((_QWORD *)&v146 + 1) = 32;
      v25 = operator new(0x100uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v25;
      LODWORD(v147) = 32;
      *v25 = xmmword_2103B3160;
      v25[1] = xmmword_2103B3170;
      v25[2] = xmmword_2103B3180;
      v25[3] = xmmword_2103B3190;
      v25[4] = xmmword_2103B31A0;
      v25[5] = xmmword_2103B31B0;
      v25[6] = xmmword_2103B31C0;
      v25[7] = xmmword_2103B31D0;
      v25[8] = xmmword_2103B31E0;
      v25[9] = xmmword_2103B31F0;
      v25[10] = xmmword_2103B3200;
      v25[11] = xmmword_2103B3210;
      v25[12] = xmmword_2103B3220;
      v25[13] = xmmword_2103B3230;
      v25[14] = xmmword_2103B3240;
      v25[15] = xmmword_2103B3250;
      v151 = 0;
      v152 = 0;
      v153 = 0;
      sub_20F3EA824((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.019375);
      v26 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v26, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v26, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      *((_QWORD *)&v146 + 1) = 32;
      v92 = operator new(0x100uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v146 = v92;
      LODWORD(v147) = 32;
      *v92 = xmmword_2103B3160;
      v92[1] = xmmword_2103B3170;
      v92[2] = xmmword_2103B3180;
      v92[3] = xmmword_2103B3190;
      v92[4] = xmmword_2103B31A0;
      v92[5] = xmmword_2103B31B0;
      v92[6] = xmmword_2103B31C0;
      v92[7] = xmmword_2103B31D0;
      v92[8] = xmmword_2103B31E0;
      v92[9] = xmmword_2103B31F0;
      v92[10] = xmmword_2103B3200;
      v92[11] = xmmword_2103B3210;
      v92[12] = xmmword_2103B3220;
      v92[13] = xmmword_2103B3230;
      v92[14] = xmmword_2103B3240;
      v92[15] = xmmword_2103B3250;
      v151 = 0;
      v152 = 0;
      v153 = 0;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)&v151, a2, 0.019375);
      goto LABEL_293;
    case 26:
      *(_OWORD *)(a4 + 16) = xmmword_2103B3120;
      memcpy(__dst, &unk_2103B3CF0, sizeof(__dst));
      v150 = 0;
      v146 = xmmword_2103B3130;
      v147 = xmmword_2103B3140;
      v148 = 0x3FB999999999999ALL;
      v149 = 1000;
      v152 = 164;
      v151 = operator new(0x520uLL, (std::align_val_t)0x20uLL);
      v153 = 161;
      sub_20F401170((uint64_t)v151, (uint64_t)__dst);
      v143 = 0;
      v144 = 0;
      v145 = 0;
      sub_20F3EA824((uint64_t)&v137, &v146, (uint64_t)&v151, (uint64_t)&v143, a2, 0.1);
      v72 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v72, (uint64_t)&v137);
      }
      else
      {
        sub_20F3FE0E4(v72, (uint64_t)&v137);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)&v137);
      if (v143)
        MEMORY[0x212BC6368](v143, 0x1000C8000313F17);
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      v152 = 164;
      v151 = operator new(0x520uLL, (std::align_val_t)0x20uLL);
      v153 = 161;
      sub_20F401170((uint64_t)v151, (uint64_t)__dst);
      v143 = 0;
      v144 = 0;
      v145 = 0;
      sub_20F3F0B8C((uint64_t)&v137, &v146, (uint64_t)&v151, (uint64_t)&v143, a2, 0.1);
      v101 = a4 + 416;
      if (*(_BYTE *)(a4 + 776))
      {
        sub_20F3FDDD0(v101, (uint64_t)&v137);
        sub_20EAF58EC((uint64_t)&v137);
        v102 = v143;
        if (!v143)
          goto LABEL_225;
        goto LABEL_224;
      }
      sub_20F3FE0E4(v101, (uint64_t)&v137);
      *(_BYTE *)(a4 + 776) = 1;
      sub_20EAF58EC((uint64_t)&v137);
      v102 = v143;
      if (v143)
LABEL_224:
        MEMORY[0x212BC6368](v102, 0x1000C8000313F17);
LABEL_225:
      v100 = v151;
      if (v151)
LABEL_299:
        MEMORY[0x212BC6368](v100, 0x1000C8000313F17);
LABEL_300:
      result = v158[0];
      if (v158[0])
        return MEMORY[0x212BC6368](v158[0], 0x1000C8000313F17);
      return result;
    case 27:
      *(_WORD *)a4 = 257;
      *(_QWORD *)(a4 + 24) = 0x3FB999999999999ALL;
      *(int64x2_t *)(a4 + 8) = vdupq_n_s64(0x4060A00000000000uLL);
      v137 = xmmword_2103B3110;
      v138 = (int64x2_t)xmmword_2103853B0;
      v140 = 1000;
      v139 = 0x3FB999999999999ALL;
      v141 = 1;
      *((_QWORD *)&v146 + 1) = 4;
      *(_QWORD *)&v146 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v147) = 1;
      *(_QWORD *)v146 = 0x3FF0000000000000;
      sub_20F3F0B8C((uint64_t)__dst, &v137, (uint64_t)&v146, (uint64_t)v158, a2, 0.0);
      v8 = a4 + 416;
      if (*(_BYTE *)(a4 + 776))
      {
        sub_20F3FDDD0(v8, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v8, (uint64_t)__dst);
        *(_BYTE *)(a4 + 776) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if ((_QWORD)v146)
        MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
      v146 = xmmword_2103B3110;
      v147 = xmmword_2103853B0;
      v148 = 0x3FB999999999999ALL;
      v149 = 1000;
      v150 = 1;
      v152 = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v153 = 1;
      *v151 = 0x3FF0000000000000;
      sub_20F3EA824((uint64_t)__dst, &v146, (uint64_t)&v151, (uint64_t)v158, a2, 0.0);
LABEL_132:
      v94 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v94, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v94, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      goto LABEL_225;
    case 28:
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 24) = 0x3FB999999999999ALL;
      *(int64x2_t *)(a4 + 8) = vdupq_n_s64(0x4060A00000000000uLL);
      *((_QWORD *)&v137 + 1) = 4;
      *(_QWORD *)&v137 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v138.i32[0] = 1;
      *(_QWORD *)v137 = 0x3FF0000000000000;
      sub_20F3EA824((uint64_t)__dst, v154, (uint64_t)&v137, (uint64_t)v158, a2, 0.0);
      v71 = a4 + 48;
      if (*(_BYTE *)(a4 + 408))
      {
        sub_20F3FDDD0(v71, (uint64_t)__dst);
      }
      else
      {
        sub_20F3FE0E4(v71, (uint64_t)__dst);
        *(_BYTE *)(a4 + 408) = 1;
      }
      sub_20EAF58EC((uint64_t)__dst);
      if ((_QWORD)v137)
        MEMORY[0x212BC6368](v137, 0x1000C8000313F17);
LABEL_167:
      *((_QWORD *)&v137 + 1) = 4;
      *(_QWORD *)&v137 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v138.i32[0] = 1;
      *(_QWORD *)v137 = 0x3FF0000000000000;
      sub_20F3F0B8C((uint64_t)__dst, v154, (uint64_t)&v137, (uint64_t)v158, a2, 0.0);
      v99 = a4 + 416;
      if (*(_BYTE *)(a4 + 776))
      {
        sub_20F3FDDD0(v99, (uint64_t)__dst);
        sub_20EAF58EC((uint64_t)__dst);
        v100 = (_QWORD *)v137;
        if ((_QWORD)v137)
          goto LABEL_299;
      }
      else
      {
        sub_20F3FE0E4(v99, (uint64_t)__dst);
        *(_BYTE *)(a4 + 776) = 1;
        sub_20EAF58EC((uint64_t)__dst);
        v100 = (_QWORD *)v137;
        if ((_QWORD)v137)
          goto LABEL_299;
      }
      goto LABEL_300;
    default:
      goto LABEL_300;
  }
}

void sub_20F3FD898(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 - 168);
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = *(_QWORD *)(v1 - 224);
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = *(_QWORD *)(v1 - 88);
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3FDDD0(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 40) = v7;
  if (*(unsigned __int8 *)(a1 + 168) == *(unsigned __int8 *)(a2 + 168))
  {
    if (*(_BYTE *)(a1 + 168))
    {
      v8 = *(_QWORD *)(a1 + 48);
      v9 = *(_QWORD *)(a1 + 56);
      v10 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a2 + 48) = v8;
      *(_QWORD *)(a2 + 56) = v9;
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      *(_DWORD *)(a2 + 64) = 0;
      v11 = *(_QWORD *)(a1 + 72);
      v12 = *(_QWORD *)(a1 + 80);
      v13 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v13;
      *(_QWORD *)(a2 + 72) = v11;
      *(_QWORD *)(a2 + 80) = v12;
      *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
      *(_DWORD *)(a2 + 88) = 0;
      v14 = *(_QWORD *)(a1 + 96);
      v15 = *(_QWORD *)(a1 + 104);
      v16 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v16;
      *(_QWORD *)(a2 + 96) = v14;
      *(_QWORD *)(a2 + 104) = v15;
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
      *(_DWORD *)(a2 + 112) = 0;
      v17 = *(_QWORD *)(a1 + 120);
      v18 = *(_QWORD *)(a1 + 128);
      v19 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = v19;
      *(_QWORD *)(a2 + 120) = v17;
      *(_QWORD *)(a2 + 128) = v18;
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      *(_DWORD *)(a2 + 136) = 0;
      v20 = *(_OWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = v20;
    }
  }
  else
  {
    v21 = (_QWORD *)(a1 + 48);
    if (*(_BYTE *)(a1 + 168))
    {
      v22 = *(_QWORD *)(a1 + 120);
      if (v22)
        MEMORY[0x212BC6368](v22, 0x1000C8000313F17);
      v23 = *(_QWORD *)(a1 + 96);
      if (v23)
        MEMORY[0x212BC6368](v23, 0x1000C8000313F17);
      v24 = *(_QWORD *)(a1 + 72);
      if (v24)
        MEMORY[0x212BC6368](v24, 0x1000C8000313F17);
      if (*v21)
        MEMORY[0x212BC6368](*v21, 0x1000C8000313F17);
      *(_BYTE *)(a1 + 168) = 0;
    }
    else
    {
      *v21 = 0;
      *(_QWORD *)(a1 + 56) = 0;
      v25 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v25;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      *(_DWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      v26 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v26;
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
      *(_DWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = 0;
      v27 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v27;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 104) = 0;
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
      *(_DWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = 0;
      v28 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = v28;
      *(_QWORD *)(a2 + 120) = 0;
      *(_QWORD *)(a2 + 128) = 0;
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      *(_DWORD *)(a2 + 136) = 0;
      v29 = *(_OWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = v29;
      *(_BYTE *)(a1 + 168) = 1;
    }
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v30 = *(_OWORD *)(a2 + 192);
  v31 = *(_OWORD *)(a2 + 208);
  v32 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v32;
  *(_OWORD *)(a1 + 192) = v30;
  *(_OWORD *)(a1 + 208) = v31;
  v33 = *(void **)(a1 + 256);
  if (v33)
  {
    *(_QWORD *)(a1 + 264) = v33;
    operator delete(v33);
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a1 + 272) = 0;
  }
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  v34 = *(void **)(a1 + 280);
  if (v34)
  {
    *(_QWORD *)(a1 + 288) = v34;
    operator delete(v34);
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
  }
  v35 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v35;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  v36 = *(void **)(a1 + 304);
  if (v36)
  {
    *(_QWORD *)(a1 + 312) = v36;
    operator delete(v36);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
  }
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  v37 = *(void **)(a1 + 328);
  if (v37)
  {
    *(_QWORD *)(a1 + 336) = v37;
    operator delete(v37);
    *(_QWORD *)(a1 + 328) = 0;
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
  }
  v38 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v38;
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 344) = 0;
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  return a1;
}

__n128 sub_20F3FE0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __n128 result;
  uint64_t v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v2;
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v5 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v5;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    v6 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    v7 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v7;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    v8 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v8;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a2 + 136) = 0;
    v9 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v9;
    *(_BYTE *)(a1 + 168) = 1;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v10 = *(_OWORD *)(a2 + 192);
  v11 = *(_OWORD *)(a2 + 208);
  v12 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v12;
  *(_OWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 208) = v11;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  v13 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v13;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  result = *(__n128 *)(a2 + 304);
  *(__n128 *)(a1 + 304) = result;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  v15 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v15;
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 344) = 0;
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  return result;
}

void sub_20F3FE260(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F3FE5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FE614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FE628(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F3FE64C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F3FE9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FEA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FEA14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F3FEA38(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F3FEDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FEDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FEE00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F3FEE24(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F3FF1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FF1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FF1EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F3FF210(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F3FF5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FF5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FF5D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F3FF5FC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F3FF98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FF9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FF9C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F3FF9E8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F3FFD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FFD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3FFDB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F3FFDD4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F400164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F400188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F40019C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F4001C0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F400550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F400574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F400588(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F4005AC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F40093C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F400960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F400974(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F400998(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F400D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F400D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F400D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F400D84(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F401114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F401138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F40114C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

double sub_20F401170(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(a1 + 816) = *(_QWORD *)(a2 + 816);
  *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
  *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
  *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 856);
  *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
  *(_QWORD *)(a1 + 888) = *(_QWORD *)(a2 + 888);
  *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
  *(_QWORD *)(a1 + 904) = *(_QWORD *)(a2 + 904);
  *(_QWORD *)(a1 + 912) = *(_QWORD *)(a2 + 912);
  *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
  *(_QWORD *)(a1 + 928) = *(_QWORD *)(a2 + 928);
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
  *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 944);
  *(_QWORD *)(a1 + 952) = *(_QWORD *)(a2 + 952);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
  *(_QWORD *)(a1 + 976) = *(_QWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
  *(_QWORD *)(a1 + 992) = *(_QWORD *)(a2 + 992);
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
  *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a2 + 1024);
  *(_QWORD *)(a1 + 1032) = *(_QWORD *)(a2 + 1032);
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(a2 + 1040);
  *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 1048);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
  *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a2 + 1088);
  *(_QWORD *)(a1 + 1096) = *(_QWORD *)(a2 + 1096);
  *(_QWORD *)(a1 + 1104) = *(_QWORD *)(a2 + 1104);
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_QWORD *)(a1 + 1120) = *(_QWORD *)(a2 + 1120);
  *(_QWORD *)(a1 + 1128) = *(_QWORD *)(a2 + 1128);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1136);
  *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 1144);
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
  *(_QWORD *)(a1 + 1160) = *(_QWORD *)(a2 + 1160);
  *(_QWORD *)(a1 + 1168) = *(_QWORD *)(a2 + 1168);
  *(_QWORD *)(a1 + 1176) = *(_QWORD *)(a2 + 1176);
  *(_QWORD *)(a1 + 1184) = *(_QWORD *)(a2 + 1184);
  *(_QWORD *)(a1 + 1192) = *(_QWORD *)(a2 + 1192);
  *(_QWORD *)(a1 + 1200) = *(_QWORD *)(a2 + 1200);
  *(_QWORD *)(a1 + 1208) = *(_QWORD *)(a2 + 1208);
  *(_QWORD *)(a1 + 1216) = *(_QWORD *)(a2 + 1216);
  *(_QWORD *)(a1 + 1224) = *(_QWORD *)(a2 + 1224);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a2 + 1232);
  *(_QWORD *)(a1 + 1240) = *(_QWORD *)(a2 + 1240);
  *(_QWORD *)(a1 + 1248) = *(_QWORD *)(a2 + 1248);
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1264) = *(_QWORD *)(a2 + 1264);
  *(_QWORD *)(a1 + 1272) = *(_QWORD *)(a2 + 1272);
  result = *(double *)(a2 + 1280);
  *(double *)(a1 + 1280) = result;
  return result;
}

_QWORD *sub_20F40167C(_QWORD *a1, _BYTE *a2)
{
  std::string *p_str;
  uint64_t v5;
  size_t size;
  int v7;
  uint64_t v8;
  const char *v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  int v15;
  unsigned __int8 v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  const char *v23;
  unsigned __int8 v24;
  const char *v25;
  size_t v26;
  std::string::size_type *p_size;
  unint64_t v28;
  const char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  std::string::size_type v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::runtime_error *exception;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75[3];
  int v76;
  const char *v77;
  int v78;
  const char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::string __str;
  std::string object;
  __int128 v85;
  void *__p[2];
  unint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;

  p_str = &__str;
  sub_20EA9DA18(&__str, *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0);
  v5 = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  do
  {
    v7 = byte_2103B41F8[v5];
    if ((v7 - 1) > 0x1B)
    {
      v9 = "NoFilteringNoResampling";
      if (size != 23)
        goto LABEL_8;
    }
    else
    {
      v8 = (char)(v7 - 1);
      v9 = off_24C9FFC38[v8];
      if (*(_QWORD *)((char *)&unk_2103B4218 + v8 * 8) != size)
        goto LABEL_8;
    }
    if (!memcmp(v9, p_str, size))
      goto LABEL_32;
LABEL_8:
    ++v5;
  }
  while (v5 != 29);
  if (size != 42
    || (p_str->__r_.__value_.__r.__words[0] == 0x3030387475706E49
      ? (v10 = p_str->__r_.__value_.__l.__size_ == 0x7265746C69467A48)
      : (v10 = 0),
        v10 ? (v11 = p_str->__r_.__value_.__r.__words[2] == 0x357A483035426433) : (v11 = 0),
        v11 ? (v12 = p_str[1].__r_.__value_.__r.__words[0] == 0x4F726564724F6472) : (v12 = 0),
        v12 ? (v13 = p_str[1].__r_.__value_.__l.__size_ == 0x3030317475707475) : (v13 = 0),
        v13 ? (v14 = LOWORD(p_str[1].__r_.__value_.__r.__words[2]) == 31304) : (v14 = 0),
        !v14))
  {
    v15 = std::stoi(&__str, 0, 10);
    LOBYTE(v7) = v15;
    if (v15 > 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &object);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
LABEL_32:
    *a2 = v7;
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return a1;
LABEL_33:
    operator delete(__str.__r_.__value_.__l.__data_);
    return a1;
  }
  v17 = atomic_load((unsigned __int8 *)&qword_254A68928);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A68928))
  {
    sub_21021D3D8(v75);
    sub_20E8610C0(&object, "cv3d.vio.odometry_unsanitized");
    sub_20E8C4068(v75, (uint64_t)&object, &qword_254A68920);
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
    __cxa_guard_release(&qword_254A68928);
  }
  v82 = qword_254A68920;
  if (**(int **)(qword_254A68920 + 56) <= 4)
  {
    v18 = *(unsigned __int8 *)(qword_254A68920 + 72);
    v19 = sub_20E8C31DC(qword_254A68920, "OSLogSurrogateAppender", 1, 0);
    v20 = v19;
    if (v18 || v19)
    {
      v75[0] = &v82;
      v75[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v75[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v76 = 4;
      v77 = "unknown file";
      v78 = 147;
      v80 = 0;
      v81 = 0;
      v79 = "unknown function";
      v21 = *v75[0];
      v74 = *v75[0];
      if (*(char *)(*v75[0] + 39) < 0)
      {
        v23 = *(const char **)(v21 + 16);
        v22 = *(_QWORD *)(v21 + 24);
      }
      else
      {
        v22 = *(unsigned __int8 *)(*v75[0] + 39);
        v23 = (const char *)(*v75[0] + 16);
      }
      v73 = *v75[0] + 16;
      v24 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v85 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(object.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v25 = byte_254A4A4F8;
      else
        v25 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v26 = byte_254A4A4F8[23];
      else
        v26 = *(_QWORD *)&byte_254A4A4F8[8];
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v25, v23);
      p_size = &object.__r_.__value_.__l.__size_;
      if (v26 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v26 >= 0x17)
      {
        v28 = v20;
        v29 = v23;
        v30 = v18;
        v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v31 = v26 | 7;
        v32 = v31 + 1;
        p_size = (std::string::size_type *)operator new(v31 + 1);
        object.__r_.__value_.__r.__words[2] = v26;
        *(_QWORD *)&v85 = v32 | 0x8000000000000000;
        object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
        v18 = v30;
        v23 = v29;
        v20 = v28;
      }
      else
      {
        BYTE7(v85) = v26;
        if (!v26)
        {
LABEL_57:
          *((_BYTE *)p_size + v26) = 0;
          BYTE8(v85) = 1;
          v33 = __p;
          if (v22 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v22 >= 0x17)
          {
            v34 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v34 = v22 | 7;
            v35 = v34 + 1;
            v33 = operator new(v34 + 1);
            __p[1] = (void *)v22;
            v87 = v35 | 0x8000000000000000;
            __p[0] = v33;
          }
          else
          {
            HIBYTE(v87) = v22;
            if (!v22)
            {
LABEL_65:
              *((_BYTE *)v33 + v22) = 0;
              v88 = 1;
              v36 = object.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v87) < 0)
                operator delete(__p[0]);
              if (BYTE8(v85) && SBYTE7(v85) < 0)
                operator delete((void *)object.__r_.__value_.__l.__size_);
              if (object.__r_.__value_.__r.__words[0])
                os_release(object.__r_.__value_.__l.__data_);
              if (v20 && *(_QWORD *)(v20 + 24))
              {
                v37 = _os_log_pack_size();
                v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
                v39 = (std::__shared_weak_count *)operator new();
                v40 = v39;
                v39->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v39->__shared_owners_;
                v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v39->__shared_weak_owners_ = 0;
                v39[1].__vftable = v38;
                object.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
                object.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
                object.__r_.__value_.__r.__words[2] = (std::string::size_type)v39;
                do
                  v42 = __ldxr(p_shared_owners);
                while (__stxr(v42 + 1, p_shared_owners));
                v85 = 0uLL;
                __p[0] = 0;
                do
                  v43 = __ldaxr(p_shared_owners);
                while (__stlxr(v43 - 1, p_shared_owners));
                if (!v43)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v40);
                }
                v44 = object.__r_.__value_.__r.__words[0];
                *(_WORD *)_os_log_pack_fill() = 0;
                v45 = operator new();
                v46 = *(unsigned __int8 *)(v74 + 39);
                v47 = v73;
                if ((v46 & 0x80u) != 0)
                {
                  v47 = *(_QWORD *)(v74 + 16);
                  v46 = *(_QWORD *)(v74 + 24);
                }
                *(_QWORD *)v45 = v44;
                *(_OWORD *)(v45 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v45 + 24) = v85;
                v85 = 0uLL;
                *(_QWORD *)(v45 + 40) = v47;
                *(_QWORD *)(v45 + 48) = v46;
                *(_BYTE *)(v45 + 56) = 16;
                v89 = 0;
                v90 = v45;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v20 + 24) + 40))(*(_QWORD *)(v20 + 24), &v90);
                v48 = v90;
                v90 = 0;
                if (v48)
                {
                  v49 = *(std::__shared_weak_count **)(v48 + 32);
                  if (v49)
                  {
                    v50 = (unint64_t *)&v49->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  v52 = *(std::__shared_weak_count **)(v48 + 16);
                  if (v52)
                  {
                    v53 = (unint64_t *)&v52->__shared_owners_;
                    do
                      v54 = __ldaxr(v53);
                    while (__stlxr(v54 - 1, v53));
                    if (!v54)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
                  MEMORY[0x212BC6398](v48, 0x10F0C40B62ED6C6);
                  v55 = v89;
                  v89 = 0;
                  if (v55)
                  {
                    v56 = *(std::__shared_weak_count **)(v55 + 32);
                    if (v56)
                    {
                      v57 = (unint64_t *)&v56->__shared_owners_;
                      do
                        v58 = __ldaxr(v57);
                      while (__stlxr(v58 - 1, v57));
                      if (!v58)
                      {
                        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                        std::__shared_weak_count::__release_weak(v56);
                      }
                    }
                    v59 = *(std::__shared_weak_count **)(v55 + 16);
                    if (v59)
                    {
                      v60 = (unint64_t *)&v59->__shared_owners_;
                      do
                        v61 = __ldaxr(v60);
                      while (__stlxr(v61 - 1, v60));
                      if (!v61)
                      {
                        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                        std::__shared_weak_count::__release_weak(v59);
                      }
                    }
                    MEMORY[0x212BC6398](v55, 0x10F0C40B62ED6C6);
                  }
                }
                v62 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
                if (*((_QWORD *)&v85 + 1))
                {
                  v63 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
                  do
                    v64 = __ldaxr(v63);
                  while (__stlxr(v64 - 1, v63));
                  if (!v64)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                }
                v65 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                if (object.__r_.__value_.__r.__words[2])
                {
                  v66 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
                LOWORD(object.__r_.__value_.__l.__data_) = 0;
                v68 = (void *)_os_log_send_and_compose_impl();
                if (v68)
                  free(v68);
              }
              if (v18)
              {
                sub_20E8C003C((uint64_t)v75, "Use Input800HzFilter3dB50Hz5thOrderOutput100Hz instead of Input800HzFilter3dB50Hz5rdOrderOutput100Hz.");
                sub_20E863570((uint64_t)v75);
              }
              sub_20E863570((uint64_t)v75);
              v69 = v81;
              if (v81)
              {
                v70 = (unint64_t *)&v81->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              goto LABEL_124;
            }
          }
          memmove(v33, v23, v22);
          goto LABEL_65;
        }
      }
      memmove(p_size, v25, v26);
      goto LABEL_57;
    }
  }
LABEL_124:
  *a2 = 12;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_33;
  return a1;
}

void sub_20F401F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,void *a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  if (a36 && a35 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

void sub_20F402078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

void sub_20F402080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::logic_error a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  int v32;
  const std::logic_error *exception_ptr;
  std::runtime_error *exception;

  if (a31 < 0)
  {
    operator delete(__p);
    if ((v32 & 1) == 0)
    {
LABEL_6:
      if (a2 == 1)
      {
        exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
        std::logic_error::logic_error(&a14, exception_ptr);
        a14.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_begin_catch(a1);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(exception, (const std::string *)&__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (SHIBYTE(a25) < 0)
        operator delete(a23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

void sub_20F402148(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::logic_error a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  int v32;

  if (a31 < 0)
  {
    operator delete(__p);
    if ((v32 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v32)
  {
LABEL_6:
    std::logic_error::~logic_error(&a14);
    __cxa_end_catch();
    JUMPOUT(0x20F402184);
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

uint64_t sub_20F4021A0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void **v14;
  void **v15;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  size_t v26;
  __int128 v28;

  v8 = *(unsigned int *)(a2 + 16);
  v9 = (8 * v8 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v9 >> 3;
  v10 = operator new(v9, (std::align_val_t)0x20uLL);
  *(_QWORD *)a1 = v10;
  if ((_DWORD)v8)
    memcpy(v10, *(const void **)a2, 8 * v8);
  *(_DWORD *)(a1 + 16) = v8;
  v11 = *(unsigned int *)(a3 + 16);
  v12 = (8 * v11 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v12 >> 3;
  v13 = operator new(v12, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 24) = v13;
  if ((_DWORD)v11)
    memcpy(v13, *(const void **)a3, 8 * v11);
  *(_QWORD *)(a1 + 48) = 0;
  v14 = (void **)(a1 + 48);
  *(_DWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 72) = 0;
  v15 = (void **)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  __asm { FMOV            V0.2D, #-1.0 }
  v28 = _Q0;
  *(_OWORD *)(a1 + 104) = _Q0;
  v21 = *(_DWORD *)(a2 + 16);
  if (v21)
  {
    *(_DWORD *)(a1 + 64) = v21;
    v22 = v21;
    if (!(3 * v21))
      goto LABEL_14;
    goto LABEL_11;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUIIRFilter.cpp", 41, (uint64_t)"feedforward_cfs.rows() > 0", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v21 = *(_DWORD *)(a2 + 16);
  if (v21 != *(_DWORD *)(a1 + 64))
  {
    v23 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 64) = v21;
    v22 = v21;
    if (v23 < 3 * (unint64_t)v21)
    {
LABEL_11:
      if (*v14)
        MEMORY[0x212BC6368](*v14, 0x1000C8000313F17);
      v24 = (24 * v22 + 31) & 0x3FFFFFFFE0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = v24 >> 3;
      *(_QWORD *)(a1 + 48) = operator new(v24, (std::align_val_t)0x20uLL);
      v21 = *(_DWORD *)(a1 + 64);
    }
  }
LABEL_14:
  if (v21)
    bzero(*v14, 24 * v21);
  v25 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v25 != *(_DWORD *)(a1 + 88))
  {
    *(_DWORD *)(a1 + 88) = v25;
    if (*(_QWORD *)(a1 + 80) < (unint64_t)(3 * v25))
    {
      if (*v15)
        MEMORY[0x212BC6368](*v15, 0x1000C8000313F17);
      v26 = (24 * v25 + 31) & 0x3FFFFFFFE0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = v26 >> 3;
      *(_QWORD *)(a1 + 72) = operator new(v26, (std::align_val_t)0x20uLL);
      LODWORD(v25) = *(_DWORD *)(a1 + 88);
    }
  }
  if ((_DWORD)v25)
    bzero(*v15, 8 * (3 * v25));
  *(_OWORD *)(a1 + 104) = v28;
  return a1;
}

void sub_20F4023F0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  if (*v2)
  {
    MEMORY[0x212BC6368](*v2, 0x1000C8000313F17);
    v5 = *v3;
    if (!*v3)
    {
LABEL_3:
      v6 = v1[3];
      if (!v6)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v5 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = v1[3];
  if (!v6)
  {
LABEL_4:
    if (!*v1)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  if (!*v1)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  MEMORY[0x212BC6368]();
  _Unwind_Resume(exception_object);
}

double sub_20F4024A4(uint64_t a1, _QWORD *a2, uint64_t a3, double result)
{
  float64x2_t **v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v13;
  uint64_t v14;
  float64x2_t **v15;
  float64x2_t **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  _BOOL8 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t *v28;
  int64x2_t *v29;
  float64x2_t v36;
  float64x2_t v53;
  float64x2_t v68;
  double v71;
  uint64_t v72;
  int64x2_t *v73;
  int v74;
  int v75;
  int64x2_t *v76;
  uint64_t *v77;
  uint64_t v78;
  __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int64x2_t *v85;
  int v86;
  int v87;
  int64x2_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  int64x2_t *v98;
  float64x2_t *v99;
  uint64_t v100;
  float64x2_t *v101;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  float64x2_t *v106;
  double v110;
  float64x2_t v112;
  _OWORD *v113;
  float64_t *v114;
  int64x2_t v115;
  int64x2_t v116;
  float64x2_t *v117;
  float64x2_t v120;
  float64x2_t v124;
  int8x16_t v128;
  double v129;
  double v130;
  _BOOL8 v131;
  uint64_t v132;
  float64x2_t **v133;
  _BOOL4 v134;
  __int128 v135;
  int v136;
  float64x2_t *v137;
  int v138;
  int v139;
  float64x2_t *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  float64x2_t **v152;
  float64x2_t **v153;
  float64x2_t **v154;
  float64x2_t **v155;
  float64x2_t **v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  char v163[8];
  float64x2_t ***v164;
  float64x2_t **v165;
  uint64_t v166;
  uint64_t v167;

  v5 = (float64x2_t **)a1;
  v167 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(unsigned int *)(a1 + 40);
  v8 = a2[1] - *a2;
  v9 = *(char **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v10 = (v8 >> 5);
  if (!(v8 >> 5))
    return result;
  if (!v6)
  {
    v16 = v5;
    v17 = v7;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUIIRFilter.cpp", 62, (uint64_t)"M > 0", 5, (uint64_t)"Invalid IMUIIRFilter Filter call!", 33, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = *(char **)a3;
    v7 = v17;
    v5 = v16;
    v18 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 5;
    _CF = v10 >= v18;
    v13 = v10 - v18;
    if (v10 > v18)
      goto LABEL_4;
LABEL_7:
    if (!_CF)
      *(_QWORD *)(a3 + 8) = &v9[32 * v10];
    goto LABEL_9;
  }
  _CF = 1;
  v13 = (v8 >> 5);
  if (!(v8 >> 5))
    goto LABEL_7;
LABEL_4:
  v14 = v7;
  v15 = v5;
  sub_20EAF5F94((char **)a3, v13);
  v5 = v15;
  v7 = v14;
LABEL_9:
  v20 = *a2;
  v19 = a2[1];
  if (*a2 != v19)
  {
    v149 = a2;
    v150 = a3;
    v21 = *(char **)a3;
    v153 = v5 + 6;
    v154 = v5 + 3;
    v22 = v6 - 1;
    v24 = v6 == 6 && (_DWORD)v7 == 5;
    v152 = v5 + 9;
    v151 = a2[1];
    v25 = v7 - 1;
    if (v6 != 32 || (_DWORD)v7)
    {
      while (1)
      {
        v84 = *((unsigned int *)v5 + 16);
        v85 = (int64x2_t *)v5[6];
        if (v6 >= 2 && (_DWORD)v84)
        {
          v86 = 0;
          v87 = 0;
          v88 = (int64x2_t *)((char *)v85 + 8 * (3 * v84));
          v89 = &v88->i64[1];
          do
          {
            if (v87 >= 1)
              v90 = 0;
            else
              v90 = -(uint64_t)(v84 - v22);
            v91 = &v88->i64[v90];
            if (v87 < 1)
              v87 = v6 - 1;
            --v87;
            v92 = *(v91 - 1);
            v88 = (int64x2_t *)(v91 - 1);
            v93 = v92;
            if (v86 >= 1)
              v94 = 0;
            else
              v94 = -(uint64_t)(v84 - v22);
            v95 = &v89[v94];
            *(v95 - 1) = v93;
            v89 = v95 - 1;
            if (v86 < 1)
              v86 = v6 - 1;
            --v86;
          }
          while (v85 != v88);
        }
        v96 = *(_QWORD *)(v20 + 16);
        v97 = *(_QWORD *)(v20 + 24);
        v85->i64[0] = *(_QWORD *)(v20 + 8);
        v98 = (int64x2_t *)((char *)v85 + 8 * v84);
        v98->i64[0] = v96;
        v85->i64[(2 * v84)] = v97;
        if (v24)
        {
          v99 = v5[3];
          v100 = *((unsigned int *)v5 + 22);
          v101 = v5[9];
          _Q6 = **v5;
          v104 = v85[1];
          v103 = v85[2];
          v105 = *v85;
          v106 = (float64x2_t *)&v85[v84];
          _Q22 = v106[1];
          _Q21 = v106[2];
          _Q23 = *v106;
          v110 = v99[2].f64[0];
          _Q1 = v99[1];
          v112.f64[0] = v101[2].f64[0];
          v113 = (_OWORD *)&v101->f64[v100];
          v114 = (float64_t *)(v113 + 2);
          v116 = *(int64x2_t *)v113;
          v115 = *((int64x2_t *)v113 + 1);
          v117 = &v101[v100];
          _Q30 = *v117;
          _Q29 = v117[1];
          v120 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v105, *v98), _Q6.f64[0]), (float64x2_t)vzip2q_s64(v105, *v98), _Q6, 1), (float64x2_t)vzip1q_s64(v104, v98[1]), (*v5)[1].f64[0]), (float64x2_t)vzip2q_s64(v104, v98[1]), (*v5)[1], 1), (float64x2_t)vzip1q_s64(v103, v98[2]), (*v5)[2].f64[0]), (float64x2_t)vzip2q_s64(v103, v98[2]), (*v5)[2], 1);
          _Q7 = vmulq_f64(_Q23, _Q6);
          _Q6.f64[0] = (*v5)->f64[1];
          __asm { FMLA            D7, D6, V23.D[1] }
          _D5 = (*v5)[1].f64[1];
          __asm { FMLA            D7, D5, V22.D[1] }
          _D4 = (*v5)[2].f64[1];
          __asm { FMLA            D7, D4, V21.D[1] }
          v112.f64[1] = *v114;
          v124 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v101, v116), v99->f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v101, v116), *v99, 1), (float64x2_t)vzip1q_s64((int64x2_t)v101[1], v115), _Q1.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v101[1], v115), _Q1, 1), v112, v110);
          _D2 = v99->f64[1];
          __asm { FMLA            D5, D2, V30.D[1] }
          _Q1.f64[0] = v99[1].f64[1];
          __asm { FMLA            D5, D1, V29.D[1] }
          _Q1.f64[0] = _D5 + v117[2].f64[0] * v110;
          v128 = (int8x16_t)vaddq_f64(v120, v124);
          *(_QWORD *)&v129 = *(_OWORD *)&vaddq_f64(_Q7, _Q1);
          *(_QWORD *)&v130 = vextq_s8(v128, v128, 8uLL).u64[0];
          *(int8x16_t *)(v21 + 8) = v128;
          *((double *)v21 + 3) = v129;
          *(double *)v21 = *(double *)v20 - *((double *)v5 + 12);
        }
        else
        {
          v131 = v24;
          v132 = v7;
          v133 = v5;
          v134 = v7 > 1;
          v155 = v154;
          v156 = v5;
          v164 = &v156;
          v165 = v153;
          v166 = 0x3FF0000000000000;
          sub_20F403894((uint64_t)&v157, (uint64_t)v163);
          v164 = &v155;
          v165 = v152;
          v166 = 0x3FF0000000000000;
          sub_20F403894((uint64_t)&v160, (uint64_t)v163);
          *(double *)v128.i64 = v157 + v160;
          v130 = v158 + v161;
          *(double *)&v135 = v157 + v160;
          *((double *)&v135 + 1) = v158 + v161;
          v129 = v159 + v162;
          *((double *)v21 + 3) = v159 + v162;
          *(_OWORD *)(v21 + 8) = v135;
          v5 = v133;
          *(double *)v21 = *(double *)v20 - *((double *)v133 + 12);
          v24 = v131;
          v19 = v151;
          v7 = v132;
          if (!v134)
            goto LABEL_66;
        }
        v136 = *((_DWORD *)v5 + 22);
        v137 = v5[9];
        v138 = 0;
        if (!v136)
          goto LABEL_34;
        v139 = 0;
        v140 = (float64x2_t *)((char *)v137 + 8 * (3 * v136));
        v141 = (_QWORD *)&v140->f64[1];
        v142 = -(uint64_t)(v136 - v25);
        do
        {
          if (v139 >= 1)
            v143 = 0;
          else
            v143 = v142;
          v144 = (_QWORD *)&v140->f64[v143];
          if (v139 < 1)
            v139 = v25;
          --v139;
          v145 = *(v144 - 1);
          v140 = (float64x2_t *)(v144 - 1);
          v146 = v145;
          if (v138 >= 1)
            v147 = 0;
          else
            v147 = v142;
          v148 = &v141[v147];
          *(v148 - 1) = v146;
          v141 = v148 - 1;
          if (v138 < 1)
            v138 = v25;
          --v138;
        }
        while (v137 != v140);
LABEL_66:
        if (!(_DWORD)v7)
          goto LABEL_35;
        v128.i64[0] = *((_QWORD *)v21 + 1);
        v130 = *((double *)v21 + 2);
        v129 = *((double *)v21 + 3);
        v138 = *((_DWORD *)v5 + 22);
        v137 = v5[9];
LABEL_34:
        *(_QWORD *)&v137->f64[0] = v128.i64[0];
        v137->f64[v138] = v130;
        v137->f64[2 * v138] = v129;
LABEL_35:
        v20 += 32;
        v21 += 32;
        if (v20 == v19)
          goto LABEL_68;
      }
    }
    do
    {
      v72 = *((unsigned int *)v5 + 16);
      v73 = (int64x2_t *)v5[6];
      if ((_DWORD)v72)
      {
        v74 = 0;
        v75 = 0;
        v76 = (int64x2_t *)((char *)v73 + 8 * (3 * v72));
        v77 = &v76->i64[1];
        do
        {
          if (v75 >= 1)
            v78 = 0;
          else
            v78 = -(uint64_t)(v72 - v22);
          v79 = &v76->i8[8 * v78];
          if (v75 < 1)
            v75 = v6 - 1;
          --v75;
          v80 = *((_QWORD *)v79 - 1);
          v76 = (int64x2_t *)(v79 - 8);
          v81 = v80;
          if (v74 >= 1)
            v82 = 0;
          else
            v82 = -(uint64_t)(v72 - v22);
          v83 = &v77[v82];
          *(v83 - 1) = v81;
          v77 = v83 - 1;
          if (v74 < 1)
            v74 = v6 - 1;
          --v74;
        }
        while (v73 != v76);
      }
      v26 = *(_QWORD *)(v20 + 16);
      v27 = *(_QWORD *)(v20 + 24);
      v73->i64[0] = *(_QWORD *)(v20 + 8);
      v28 = (int64x2_t *)((char *)v73 + 8 * v72);
      v28->i64[0] = v26;
      v73->i64[(2 * v72)] = v27;
      v29 = &v73[v72];
      _Q5 = *v29;
      _D2 = (*v5)->f64[1];
      __asm { FMLA            D4, D2, V5.D[1] }
      _Q5 = v29[1];
      v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v73, *v28), (*v5)->f64[0]), (float64x2_t)vzip2q_s64(*v73, *v28), **v5, 1), (float64x2_t)vzip1q_s64(v73[1], v28[1]), (*v5)[1].f64[0]), (float64x2_t)vzip2q_s64(v73[1], v28[1]), (*v5)[1], 1);
      _D1 = (*v5)[1].f64[1];
      __asm { FMLA            D4, D1, V5.D[1] }
      _Q1 = v29[2];
      _D3 = (*v5)[2].f64[1];
      __asm { FMLA            D4, D3, V1.D[1] }
      _Q3 = v29[3];
      _Q5.i64[0] = *(_QWORD *)&(*v5)[3].f64[1];
      __asm { FMLA            D4, D5, V3.D[1] }
      _Q1 = v29[4];
      _D2 = (*v5)[4].f64[1];
      __asm { FMLA            D4, D2, V1.D[1] }
      _Q2 = v29[5];
      _Q5.i64[0] = *(_QWORD *)&(*v5)[5].f64[1];
      __asm { FMLA            D4, D5, V2.D[1] }
      _Q1 = v29[6];
      _Q3.i64[0] = *(_QWORD *)&(*v5)[6].f64[1];
      __asm { FMLA            D4, D3, V1.D[1] }
      _Q3 = v29[7];
      _Q5.i64[0] = *(_QWORD *)&(*v5)[7].f64[1];
      __asm { FMLA            D4, D5, V3.D[1] }
      v53 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v36, (float64x2_t)vzip1q_s64(v73[2], v28[2]), (*v5)[2].f64[0]), (float64x2_t)vzip2q_s64(v73[2], v28[2]), (*v5)[2], 1), (float64x2_t)vzip1q_s64(v73[3], v28[3]), (*v5)[3].f64[0]), (float64x2_t)vzip2q_s64(v73[3], v28[3]),
                                  (*v5)[3],
                                  1),
                                (float64x2_t)vzip1q_s64(v73[4], v28[4]),
                                (*v5)[4].f64[0]),
                              (float64x2_t)vzip2q_s64(v73[4], v28[4]),
                              (*v5)[4],
                              1),
                            (float64x2_t)vzip1q_s64(v73[5], v28[5]),
                            (*v5)[5].f64[0]),
                          (float64x2_t)vzip2q_s64(v73[5], v28[5]),
                          (*v5)[5],
                          1),
                        (float64x2_t)vzip1q_s64(v73[6], v28[6]),
                        (*v5)[6].f64[0]),
                      (float64x2_t)vzip2q_s64(v73[6], v28[6]),
                      (*v5)[6],
                      1),
                    (float64x2_t)vzip1q_s64(v73[7], v28[7]),
                    (*v5)[7].f64[0]),
                  (float64x2_t)vzip2q_s64(v73[7], v28[7]),
                  (*v5)[7],
                  1),
                (float64x2_t)vzip1q_s64(v73[8], v28[8]),
                (*v5)[8].f64[0]),
              (float64x2_t)vzip2q_s64(v73[8], v28[8]),
              (*v5)[8],
              1);
      _Q1 = v29[8];
      _Q2.i64[0] = *(_QWORD *)&(*v5)[8].f64[1];
      __asm { FMLA            D4, D2, V1.D[1] }
      _Q2 = v29[9];
      _Q5.i64[0] = *(_QWORD *)&(*v5)[9].f64[1];
      __asm { FMLA            D4, D5, V2.D[1] }
      _Q1 = v29[10];
      _Q3.i64[0] = *(_QWORD *)&(*v5)[10].f64[1];
      __asm { FMLA            D4, D3, V1.D[1] }
      _Q3 = v29[11];
      _Q5.i64[0] = *(_QWORD *)&(*v5)[11].f64[1];
      __asm { FMLA            D4, D5, V3.D[1] }
      _Q1 = v29[12];
      _Q2.i64[0] = *(_QWORD *)&(*v5)[12].f64[1];
      __asm { FMLA            D4, D2, V1.D[1] }
      _Q2 = v29[13];
      _Q5.i64[0] = *(_QWORD *)&(*v5)[13].f64[1];
      __asm { FMLA            D4, D5, V2.D[1] }
      _Q1 = v29[14];
      _Q3.i64[0] = *(_QWORD *)&(*v5)[14].f64[1];
      __asm { FMLA            D4, D3, V1.D[1] }
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v53, (float64x2_t)vzip1q_s64(v73[9], v28[9]), (*v5)[9].f64[0]), (float64x2_t)vzip2q_s64(v73[9], v28[9]), (*v5)[9], 1), (float64x2_t)vzip1q_s64(v73[10], v28[10]), (*v5)[10].f64[0]), (float64x2_t)vzip2q_s64(v73[10], v28[10]),
                                  (*v5)[10],
                                  1),
                                (float64x2_t)vzip1q_s64(v73[11], v28[11]),
                                (*v5)[11].f64[0]),
                              (float64x2_t)vzip2q_s64(v73[11], v28[11]),
                              (*v5)[11],
                              1),
                            (float64x2_t)vzip1q_s64(v73[12], v28[12]),
                            (*v5)[12].f64[0]),
                          (float64x2_t)vzip2q_s64(v73[12], v28[12]),
                          (*v5)[12],
                          1),
                        (float64x2_t)vzip1q_s64(v73[13], v28[13]),
                        (*v5)[13].f64[0]),
                      (float64x2_t)vzip2q_s64(v73[13], v28[13]),
                      (*v5)[13],
                      1),
                    (float64x2_t)vzip1q_s64(v73[14], v28[14]),
                    (*v5)[14].f64[0]),
                  (float64x2_t)vzip2q_s64(v73[14], v28[14]),
                  (*v5)[14],
                  1),
                (float64x2_t)vzip1q_s64(v73[15], v28[15]),
                (*v5)[15].f64[0]),
              (float64x2_t)vzip2q_s64(v73[15], v28[15]),
              (*v5)[15],
              1);
      _Q1 = v29[15];
      _Q2.i64[0] = *(_QWORD *)&(*v5)[15].f64[1];
      __asm { FMLA            D4, D2, V1.D[1] }
      *((_QWORD *)v21 + 3) = _D4;
      *(float64x2_t *)(v21 + 8) = v68;
      v71 = *(double *)v20;
      v20 += 32;
      *(double *)v21 = v71 - *((double *)v5 + 12);
      v21 += 32;
    }
    while (v20 != v19);
LABEL_68:
    a3 = v150;
    v19 = v149[1];
  }
  v5[13] = *(float64x2_t **)(v19 - 32);
  result = *(double *)(*(_QWORD *)(a3 + 8) - 32);
  *((double *)v5 + 14) = result;
  return result;
}

__n128 sub_20F402C8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  __n128 result;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != *(_DWORD *)(a1 + 64))
  {
    *(_DWORD *)(a1 + 64) = v2;
    if (*(_QWORD *)(a1 + 56) < (unint64_t)(3 * v2))
    {
      v3 = *(_QWORD *)(a1 + 48);
      if (v3)
        MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
      v4 = (24 * v2 + 31) & 0x3FFFFFFFE0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = v4 >> 3;
      *(_QWORD *)(a1 + 48) = operator new(v4, (std::align_val_t)0x20uLL);
      LODWORD(v2) = *(_DWORD *)(a1 + 64);
    }
  }
  if ((_DWORD)v2)
    bzero(*(void **)(a1 + 48), 8 * (3 * v2));
  v5 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v5 != *(_DWORD *)(a1 + 88))
  {
    *(_DWORD *)(a1 + 88) = v5;
    if (*(_QWORD *)(a1 + 80) < (unint64_t)(3 * v5))
    {
      v6 = *(_QWORD *)(a1 + 72);
      if (v6)
        MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
      v7 = (24 * v5 + 31) & 0x3FFFFFFFE0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = v7 >> 3;
      *(_QWORD *)(a1 + 72) = operator new(v7, (std::align_val_t)0x20uLL);
      LODWORD(v5) = *(_DWORD *)(a1 + 88);
    }
  }
  if ((_DWORD)v5)
    bzero(*(void **)(a1 + 72), 8 * (3 * v5));
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 104) = result;
  return result;
}

uint64_t sub_20F402DA8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void **v14;
  void **v15;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  size_t v26;
  __int128 v28;

  v8 = *(unsigned int *)(a2 + 16);
  v9 = (8 * v8 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v9 >> 3;
  v10 = operator new(v9, (std::align_val_t)0x20uLL);
  *(_QWORD *)a1 = v10;
  if ((_DWORD)v8)
    memcpy(v10, *(const void **)a2, 8 * v8);
  *(_DWORD *)(a1 + 16) = v8;
  v11 = *(unsigned int *)(a3 + 16);
  v12 = (8 * v11 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v12 >> 3;
  v13 = operator new(v12, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 24) = v13;
  if ((_DWORD)v11)
    memcpy(v13, *(const void **)a3, 8 * v11);
  *(_QWORD *)(a1 + 48) = 0;
  v14 = (void **)(a1 + 48);
  *(_DWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 72) = 0;
  v15 = (void **)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  __asm { FMOV            V0.2D, #-1.0 }
  v28 = _Q0;
  *(_OWORD *)(a1 + 104) = _Q0;
  v21 = *(_DWORD *)(a2 + 16);
  if (v21)
  {
    *(_DWORD *)(a1 + 64) = v21;
    v22 = v21;
    if (!(3 * v21))
      goto LABEL_14;
    goto LABEL_11;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUIIRFilter.cpp", 41, (uint64_t)"feedforward_cfs.rows() > 0", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v21 = *(_DWORD *)(a2 + 16);
  if (v21 != *(_DWORD *)(a1 + 64))
  {
    v23 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 64) = v21;
    v22 = v21;
    if (v23 < 3 * (unint64_t)v21)
    {
LABEL_11:
      if (*v14)
        MEMORY[0x212BC6368](*v14, 0x1000C8000313F17);
      v24 = (24 * v22 + 31) & 0x3FFFFFFFE0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = v24 >> 3;
      *(_QWORD *)(a1 + 48) = operator new(v24, (std::align_val_t)0x20uLL);
      v21 = *(_DWORD *)(a1 + 64);
    }
  }
LABEL_14:
  if (v21)
    bzero(*v14, 24 * v21);
  v25 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v25 != *(_DWORD *)(a1 + 88))
  {
    *(_DWORD *)(a1 + 88) = v25;
    if (*(_QWORD *)(a1 + 80) < (unint64_t)(3 * v25))
    {
      if (*v15)
        MEMORY[0x212BC6368](*v15, 0x1000C8000313F17);
      v26 = (24 * v25 + 31) & 0x3FFFFFFFE0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = v26 >> 3;
      *(_QWORD *)(a1 + 72) = operator new(v26, (std::align_val_t)0x20uLL);
      LODWORD(v25) = *(_DWORD *)(a1 + 88);
    }
  }
  if ((_DWORD)v25)
    bzero(*v15, 8 * (3 * v25));
  *(_OWORD *)(a1 + 104) = v28;
  return a1;
}

void sub_20F402FF8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  if (*v2)
  {
    MEMORY[0x212BC6368](*v2, 0x1000C8000313F17);
    v5 = *v3;
    if (!*v3)
    {
LABEL_3:
      v6 = v1[3];
      if (!v6)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v5 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = v1[3];
  if (!v6)
  {
LABEL_4:
    if (!*v1)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  if (!*v1)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  MEMORY[0x212BC6368]();
  _Unwind_Resume(exception_object);
}

double sub_20F4030AC(uint64_t a1, _QWORD *a2, uint64_t a3, double result)
{
  float64x2_t **v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v13;
  uint64_t v14;
  float64x2_t **v15;
  float64x2_t **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  _BOOL8 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t *v28;
  int64x2_t *v29;
  float64x2_t v36;
  float64x2_t v53;
  float64x2_t v68;
  double v71;
  uint64_t v72;
  int64x2_t *v73;
  int v74;
  int v75;
  int64x2_t *v76;
  uint64_t *v77;
  uint64_t v78;
  __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int64x2_t *v85;
  int v86;
  int v87;
  int64x2_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  int64x2_t *v98;
  float64x2_t *v99;
  uint64_t v100;
  float64x2_t *v101;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  float64x2_t *v106;
  double v110;
  float64x2_t v112;
  _OWORD *v113;
  float64_t *v114;
  int64x2_t v115;
  int64x2_t v116;
  float64x2_t *v117;
  float64x2_t v120;
  float64x2_t v124;
  int8x16_t v128;
  double v129;
  double v130;
  _BOOL8 v131;
  uint64_t v132;
  float64x2_t **v133;
  _BOOL4 v134;
  __int128 v135;
  int v136;
  float64x2_t *v137;
  int v138;
  int v139;
  float64x2_t *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  float64x2_t **v152;
  float64x2_t **v153;
  float64x2_t **v154;
  float64x2_t **v155;
  float64x2_t **v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  char v163[8];
  float64x2_t ***v164;
  float64x2_t **v165;
  uint64_t v166;
  uint64_t v167;

  v5 = (float64x2_t **)a1;
  v167 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(unsigned int *)(a1 + 40);
  v8 = a2[1] - *a2;
  v9 = *(char **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v10 = (v8 >> 5);
  if (!(v8 >> 5))
    return result;
  if (!v6)
  {
    v16 = v5;
    v17 = v7;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUIIRFilter.cpp", 62, (uint64_t)"M > 0", 5, (uint64_t)"Invalid IMUIIRFilter Filter call!", 33, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = *(char **)a3;
    v7 = v17;
    v5 = v16;
    v18 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 5;
    _CF = v10 >= v18;
    v13 = v10 - v18;
    if (v10 > v18)
      goto LABEL_4;
LABEL_7:
    if (!_CF)
      *(_QWORD *)(a3 + 8) = &v9[32 * v10];
    goto LABEL_9;
  }
  _CF = 1;
  v13 = (v8 >> 5);
  if (!(v8 >> 5))
    goto LABEL_7;
LABEL_4:
  v14 = v7;
  v15 = v5;
  sub_20EAF5F94((char **)a3, v13);
  v5 = v15;
  v7 = v14;
LABEL_9:
  v20 = *a2;
  v19 = a2[1];
  if (*a2 != v19)
  {
    v149 = a2;
    v150 = a3;
    v21 = *(char **)a3;
    v153 = v5 + 6;
    v154 = v5 + 3;
    v22 = v6 - 1;
    v24 = v6 == 6 && (_DWORD)v7 == 5;
    v152 = v5 + 9;
    v151 = a2[1];
    v25 = v7 - 1;
    if (v6 != 32 || (_DWORD)v7)
    {
      while (1)
      {
        v84 = *((unsigned int *)v5 + 16);
        v85 = (int64x2_t *)v5[6];
        if (v6 >= 2 && (_DWORD)v84)
        {
          v86 = 0;
          v87 = 0;
          v88 = (int64x2_t *)((char *)v85 + 8 * (3 * v84));
          v89 = &v88->i64[1];
          do
          {
            if (v87 >= 1)
              v90 = 0;
            else
              v90 = -(uint64_t)(v84 - v22);
            v91 = &v88->i64[v90];
            if (v87 < 1)
              v87 = v6 - 1;
            --v87;
            v92 = *(v91 - 1);
            v88 = (int64x2_t *)(v91 - 1);
            v93 = v92;
            if (v86 >= 1)
              v94 = 0;
            else
              v94 = -(uint64_t)(v84 - v22);
            v95 = &v89[v94];
            *(v95 - 1) = v93;
            v89 = v95 - 1;
            if (v86 < 1)
              v86 = v6 - 1;
            --v86;
          }
          while (v85 != v88);
        }
        v96 = *(_QWORD *)(v20 + 16);
        v97 = *(_QWORD *)(v20 + 24);
        v85->i64[0] = *(_QWORD *)(v20 + 8);
        v98 = (int64x2_t *)((char *)v85 + 8 * v84);
        v98->i64[0] = v96;
        v85->i64[(2 * v84)] = v97;
        if (v24)
        {
          v99 = v5[3];
          v100 = *((unsigned int *)v5 + 22);
          v101 = v5[9];
          _Q6 = **v5;
          v104 = v85[1];
          v103 = v85[2];
          v105 = *v85;
          v106 = (float64x2_t *)&v85[v84];
          _Q22 = v106[1];
          _Q21 = v106[2];
          _Q23 = *v106;
          v110 = v99[2].f64[0];
          _Q1 = v99[1];
          v112.f64[0] = v101[2].f64[0];
          v113 = (_OWORD *)&v101->f64[v100];
          v114 = (float64_t *)(v113 + 2);
          v116 = *(int64x2_t *)v113;
          v115 = *((int64x2_t *)v113 + 1);
          v117 = &v101[v100];
          _Q30 = *v117;
          _Q29 = v117[1];
          v120 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v105, *v98), _Q6.f64[0]), (float64x2_t)vzip2q_s64(v105, *v98), _Q6, 1), (float64x2_t)vzip1q_s64(v104, v98[1]), (*v5)[1].f64[0]), (float64x2_t)vzip2q_s64(v104, v98[1]), (*v5)[1], 1), (float64x2_t)vzip1q_s64(v103, v98[2]), (*v5)[2].f64[0]), (float64x2_t)vzip2q_s64(v103, v98[2]), (*v5)[2], 1);
          _Q7 = vmulq_f64(_Q23, _Q6);
          _Q6.f64[0] = (*v5)->f64[1];
          __asm { FMLA            D7, D6, V23.D[1] }
          _D5 = (*v5)[1].f64[1];
          __asm { FMLA            D7, D5, V22.D[1] }
          _D4 = (*v5)[2].f64[1];
          __asm { FMLA            D7, D4, V21.D[1] }
          v112.f64[1] = *v114;
          v124 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v101, v116), v99->f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v101, v116), *v99, 1), (float64x2_t)vzip1q_s64((int64x2_t)v101[1], v115), _Q1.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v101[1], v115), _Q1, 1), v112, v110);
          _D2 = v99->f64[1];
          __asm { FMLA            D5, D2, V30.D[1] }
          _Q1.f64[0] = v99[1].f64[1];
          __asm { FMLA            D5, D1, V29.D[1] }
          _Q1.f64[0] = _D5 + v117[2].f64[0] * v110;
          v128 = (int8x16_t)vaddq_f64(v120, v124);
          *(_QWORD *)&v129 = *(_OWORD *)&vaddq_f64(_Q7, _Q1);
          *(_QWORD *)&v130 = vextq_s8(v128, v128, 8uLL).u64[0];
          *(int8x16_t *)(v21 + 8) = v128;
          *((double *)v21 + 3) = v129;
          *(double *)v21 = *(double *)v20 - *((double *)v5 + 12);
        }
        else
        {
          v131 = v24;
          v132 = v7;
          v133 = v5;
          v134 = v7 > 1;
          v155 = v154;
          v156 = v5;
          v164 = &v156;
          v165 = v153;
          v166 = 0x3FF0000000000000;
          sub_20F403894((uint64_t)&v157, (uint64_t)v163);
          v164 = &v155;
          v165 = v152;
          v166 = 0x3FF0000000000000;
          sub_20F403894((uint64_t)&v160, (uint64_t)v163);
          *(double *)v128.i64 = v157 + v160;
          v130 = v158 + v161;
          *(double *)&v135 = v157 + v160;
          *((double *)&v135 + 1) = v158 + v161;
          v129 = v159 + v162;
          *((double *)v21 + 3) = v159 + v162;
          *(_OWORD *)(v21 + 8) = v135;
          v5 = v133;
          *(double *)v21 = *(double *)v20 - *((double *)v133 + 12);
          v24 = v131;
          v19 = v151;
          v7 = v132;
          if (!v134)
            goto LABEL_66;
        }
        v136 = *((_DWORD *)v5 + 22);
        v137 = v5[9];
        v138 = 0;
        if (!v136)
          goto LABEL_34;
        v139 = 0;
        v140 = (float64x2_t *)((char *)v137 + 8 * (3 * v136));
        v141 = (_QWORD *)&v140->f64[1];
        v142 = -(uint64_t)(v136 - v25);
        do
        {
          if (v139 >= 1)
            v143 = 0;
          else
            v143 = v142;
          v144 = (_QWORD *)&v140->f64[v143];
          if (v139 < 1)
            v139 = v25;
          --v139;
          v145 = *(v144 - 1);
          v140 = (float64x2_t *)(v144 - 1);
          v146 = v145;
          if (v138 >= 1)
            v147 = 0;
          else
            v147 = v142;
          v148 = &v141[v147];
          *(v148 - 1) = v146;
          v141 = v148 - 1;
          if (v138 < 1)
            v138 = v25;
          --v138;
        }
        while (v137 != v140);
LABEL_66:
        if (!(_DWORD)v7)
          goto LABEL_35;
        v128.i64[0] = *((_QWORD *)v21 + 1);
        v130 = *((double *)v21 + 2);
        v129 = *((double *)v21 + 3);
        v138 = *((_DWORD *)v5 + 22);
        v137 = v5[9];
LABEL_34:
        *(_QWORD *)&v137->f64[0] = v128.i64[0];
        v137->f64[v138] = v130;
        v137->f64[2 * v138] = v129;
LABEL_35:
        v20 += 32;
        v21 += 32;
        if (v20 == v19)
          goto LABEL_68;
      }
    }
    do
    {
      v72 = *((unsigned int *)v5 + 16);
      v73 = (int64x2_t *)v5[6];
      if ((_DWORD)v72)
      {
        v74 = 0;
        v75 = 0;
        v76 = (int64x2_t *)((char *)v73 + 8 * (3 * v72));
        v77 = &v76->i64[1];
        do
        {
          if (v75 >= 1)
            v78 = 0;
          else
            v78 = -(uint64_t)(v72 - v22);
          v79 = &v76->i8[8 * v78];
          if (v75 < 1)
            v75 = v6 - 1;
          --v75;
          v80 = *((_QWORD *)v79 - 1);
          v76 = (int64x2_t *)(v79 - 8);
          v81 = v80;
          if (v74 >= 1)
            v82 = 0;
          else
            v82 = -(uint64_t)(v72 - v22);
          v83 = &v77[v82];
          *(v83 - 1) = v81;
          v77 = v83 - 1;
          if (v74 < 1)
            v74 = v6 - 1;
          --v74;
        }
        while (v73 != v76);
      }
      v26 = *(_QWORD *)(v20 + 16);
      v27 = *(_QWORD *)(v20 + 24);
      v73->i64[0] = *(_QWORD *)(v20 + 8);
      v28 = (int64x2_t *)((char *)v73 + 8 * v72);
      v28->i64[0] = v26;
      v73->i64[(2 * v72)] = v27;
      v29 = &v73[v72];
      _Q5 = *v29;
      _D2 = (*v5)->f64[1];
      __asm { FMLA            D4, D2, V5.D[1] }
      _Q5 = v29[1];
      v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v73, *v28), (*v5)->f64[0]), (float64x2_t)vzip2q_s64(*v73, *v28), **v5, 1), (float64x2_t)vzip1q_s64(v73[1], v28[1]), (*v5)[1].f64[0]), (float64x2_t)vzip2q_s64(v73[1], v28[1]), (*v5)[1], 1);
      _D1 = (*v5)[1].f64[1];
      __asm { FMLA            D4, D1, V5.D[1] }
      _Q1 = v29[2];
      _D3 = (*v5)[2].f64[1];
      __asm { FMLA            D4, D3, V1.D[1] }
      _Q3 = v29[3];
      _Q5.i64[0] = *(_QWORD *)&(*v5)[3].f64[1];
      __asm { FMLA            D4, D5, V3.D[1] }
      _Q1 = v29[4];
      _D2 = (*v5)[4].f64[1];
      __asm { FMLA            D4, D2, V1.D[1] }
      _Q2 = v29[5];
      _Q5.i64[0] = *(_QWORD *)&(*v5)[5].f64[1];
      __asm { FMLA            D4, D5, V2.D[1] }
      _Q1 = v29[6];
      _Q3.i64[0] = *(_QWORD *)&(*v5)[6].f64[1];
      __asm { FMLA            D4, D3, V1.D[1] }
      _Q3 = v29[7];
      _Q5.i64[0] = *(_QWORD *)&(*v5)[7].f64[1];
      __asm { FMLA            D4, D5, V3.D[1] }
      v53 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v36, (float64x2_t)vzip1q_s64(v73[2], v28[2]), (*v5)[2].f64[0]), (float64x2_t)vzip2q_s64(v73[2], v28[2]), (*v5)[2], 1), (float64x2_t)vzip1q_s64(v73[3], v28[3]), (*v5)[3].f64[0]), (float64x2_t)vzip2q_s64(v73[3], v28[3]),
                                  (*v5)[3],
                                  1),
                                (float64x2_t)vzip1q_s64(v73[4], v28[4]),
                                (*v5)[4].f64[0]),
                              (float64x2_t)vzip2q_s64(v73[4], v28[4]),
                              (*v5)[4],
                              1),
                            (float64x2_t)vzip1q_s64(v73[5], v28[5]),
                            (*v5)[5].f64[0]),
                          (float64x2_t)vzip2q_s64(v73[5], v28[5]),
                          (*v5)[5],
                          1),
                        (float64x2_t)vzip1q_s64(v73[6], v28[6]),
                        (*v5)[6].f64[0]),
                      (float64x2_t)vzip2q_s64(v73[6], v28[6]),
                      (*v5)[6],
                      1),
                    (float64x2_t)vzip1q_s64(v73[7], v28[7]),
                    (*v5)[7].f64[0]),
                  (float64x2_t)vzip2q_s64(v73[7], v28[7]),
                  (*v5)[7],
                  1),
                (float64x2_t)vzip1q_s64(v73[8], v28[8]),
                (*v5)[8].f64[0]),
              (float64x2_t)vzip2q_s64(v73[8], v28[8]),
              (*v5)[8],
              1);
      _Q1 = v29[8];
      _Q2.i64[0] = *(_QWORD *)&(*v5)[8].f64[1];
      __asm { FMLA            D4, D2, V1.D[1] }
      _Q2 = v29[9];
      _Q5.i64[0] = *(_QWORD *)&(*v5)[9].f64[1];
      __asm { FMLA            D4, D5, V2.D[1] }
      _Q1 = v29[10];
      _Q3.i64[0] = *(_QWORD *)&(*v5)[10].f64[1];
      __asm { FMLA            D4, D3, V1.D[1] }
      _Q3 = v29[11];
      _Q5.i64[0] = *(_QWORD *)&(*v5)[11].f64[1];
      __asm { FMLA            D4, D5, V3.D[1] }
      _Q1 = v29[12];
      _Q2.i64[0] = *(_QWORD *)&(*v5)[12].f64[1];
      __asm { FMLA            D4, D2, V1.D[1] }
      _Q2 = v29[13];
      _Q5.i64[0] = *(_QWORD *)&(*v5)[13].f64[1];
      __asm { FMLA            D4, D5, V2.D[1] }
      _Q1 = v29[14];
      _Q3.i64[0] = *(_QWORD *)&(*v5)[14].f64[1];
      __asm { FMLA            D4, D3, V1.D[1] }
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v53, (float64x2_t)vzip1q_s64(v73[9], v28[9]), (*v5)[9].f64[0]), (float64x2_t)vzip2q_s64(v73[9], v28[9]), (*v5)[9], 1), (float64x2_t)vzip1q_s64(v73[10], v28[10]), (*v5)[10].f64[0]), (float64x2_t)vzip2q_s64(v73[10], v28[10]),
                                  (*v5)[10],
                                  1),
                                (float64x2_t)vzip1q_s64(v73[11], v28[11]),
                                (*v5)[11].f64[0]),
                              (float64x2_t)vzip2q_s64(v73[11], v28[11]),
                              (*v5)[11],
                              1),
                            (float64x2_t)vzip1q_s64(v73[12], v28[12]),
                            (*v5)[12].f64[0]),
                          (float64x2_t)vzip2q_s64(v73[12], v28[12]),
                          (*v5)[12],
                          1),
                        (float64x2_t)vzip1q_s64(v73[13], v28[13]),
                        (*v5)[13].f64[0]),
                      (float64x2_t)vzip2q_s64(v73[13], v28[13]),
                      (*v5)[13],
                      1),
                    (float64x2_t)vzip1q_s64(v73[14], v28[14]),
                    (*v5)[14].f64[0]),
                  (float64x2_t)vzip2q_s64(v73[14], v28[14]),
                  (*v5)[14],
                  1),
                (float64x2_t)vzip1q_s64(v73[15], v28[15]),
                (*v5)[15].f64[0]),
              (float64x2_t)vzip2q_s64(v73[15], v28[15]),
              (*v5)[15],
              1);
      _Q1 = v29[15];
      _Q2.i64[0] = *(_QWORD *)&(*v5)[15].f64[1];
      __asm { FMLA            D4, D2, V1.D[1] }
      *((_QWORD *)v21 + 3) = _D4;
      *(float64x2_t *)(v21 + 8) = v68;
      v71 = *(double *)v20;
      v20 += 32;
      *(double *)v21 = v71 - *((double *)v5 + 12);
      v21 += 32;
    }
    while (v20 != v19);
LABEL_68:
    a3 = v150;
    v19 = v149[1];
  }
  v5[13] = *(float64x2_t **)(v19 - 32);
  result = *(double *)(*(_QWORD *)(a3 + 8) - 32);
  *((double *)v5 + 14) = result;
  return result;
}

void sub_20F403894(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const double *v4;
  uint64_t v5;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(const double **)v3;
  if (*(_QWORD *)v3 == a1 || (v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)v5 == a1))
  {
    sub_20F403894(&v8);
    *(_OWORD *)a1 = v8;
    *(_QWORD *)(a1 + 16) = v9;
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 16);
    if (v6 && (v7 = *(_DWORD *)(v5 + 16)) != 0)
    {
      sub_20E8BE654(1, 0, 1, 3, v6, v4, v6, *(double **)v5, *(double *)(a2 + 24), 0.0, v7, (double *)a1, 1);
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
}

void sub_20F403960(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F403984(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  void *v10;

  v3 = (_QWORD *)sub_20E868FE0(a1, a2);
  v3[23] = 0;
  v4 = v3 + 23;
  v5 = (uint64_t)(v3 + 6);
  v6 = (uint64_t)(v3 + 9);
  if (v3[7] - v3[6] != v3[10] - v3[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/P2PStateCorrection.cpp", 35, (uint64_t)"config_.min_num_pnp_inlier_map_matches.size() == config_.min_pnp_inlier_ratio.size()", 84, (uint64_t)"mis-match the inlier ratio and minimum inlier number size.", 58, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v7 = operator new();
  sub_20F40441C(v7, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v5, *(_BYTE *)(a1 + 145), v6, *(double *)(a1 + 8));
  v8 = (_QWORD *)*v4;
  *v4 = v7;
  if (v8)
  {
    v9 = (void *)v8[7];
    if (v9)
    {
      v8[8] = v9;
      operator delete(v9);
    }
    v10 = (void *)v8[4];
    if (v10)
    {
      v8[5] = v10;
      operator delete(v10);
    }
    MEMORY[0x212BC6398](v8, 0x1090C4075DDBE9BLL);
  }
  return a1;
}

void sub_20F403AA0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  MEMORY[0x212BC6398](v3, 0x1090C4075DDBE9BLL);
  sub_20F403AF4(v2);
  sub_20EE81A24(v1);
  _Unwind_Resume(a1);
}

void sub_20F403AD4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  sub_20F403AF4(v2);
  sub_20EE81A24(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F403AF4(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[7];
    if (v3)
    {
      v2[8] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[4];
    if (v4)
    {
      v2[5] = v4;
      operator delete(v4);
    }
    MEMORY[0x212BC6398](v2, 0x1090C4075DDBE9BLL);
  }
  return a1;
}

uint64_t sub_20F403B58(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4, long double *a5, _QWORD *a6, char **a7)
{
  char *v14;
  char *v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  double v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  int v66;
  double v67[13];

  v67[12] = *(double *)MEMORY[0x24BDAC8D0];
  v64 = 0u;
  v65 = 0u;
  v66 = 733221132;
  kdebug_trace();
  if (((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3) / 3uLL != (unint64_t)((a2[1] - *a2) >> 3) >> 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/P2PStateCorrection.cpp", 54, (uint64_t)"Xs.size() / 3 == xs.size() / 2", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v58 = *a4;
  v59 = *((_QWORD *)a4 + 2);
  v60 = a4[2];
  v61 = *((_QWORD *)a4 + 6);
  v62 = a4[4];
  v63 = *((_QWORD *)a4 + 10);
  if ((sub_20EB552C0(*(_QWORD *)(a1 + 184), a2, (void **)a3, (uint64_t)&v58, (uint64_t)&v46, a7) & 1) == 0)
    goto LABEL_19;
  v15 = *a7;
  v14 = a7[1];
  if (*a7 != v14)
  {
    v16 = *(double *)(a1 + 8) * *(double *)(a1 + 8);
    v17 = *a2;
    v18 = v14 - v15;
    v19 = v14 - v15 - 4;
    if (v19 >= 4)
    {
      v22 = 0;
      v23 = 0;
      v24 = (v19 >> 2) + 1;
      v21 = &v15[4 * (v24 & 0x7FFFFFFFFFFFFFFELL)];
      v25 = v15 + 4;
      v26 = v24 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v27 = *(v25 - 1);
        v28 = *(double *)(v17 + 8 * (2 * v27));
        if (v28 * v28 + *(double *)(v17 + 8 * ((2 * v27) | 1u)) * *(double *)(v17 + 8 * ((2 * v27) | 1u)) < v16)
          ++v22;
        if (*(double *)(v17 + 8 * (2 * *v25)) * *(double *)(v17 + 8 * (2 * *v25))
           + *(double *)(v17 + 8 * ((2 * *v25) | 1u)) * *(double *)(v17 + 8 * ((2 * *v25) | 1u)) < v16)
          ++v23;
        v25 += 2;
        v26 -= 2;
      }
      while (v26);
      v20 = v23 + v22;
      if (v24 == (v24 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_17:
        if ((double)v20 / (double)(v18 >> 2) < *(double *)(a1 + 96))
          goto LABEL_18;
LABEL_19:
        v44 = 0;
        goto LABEL_20;
      }
    }
    else
    {
      v20 = 0;
      v21 = *a7;
    }
    do
    {
      v29 = *(_DWORD *)v21;
      v21 += 4;
      v30 = *(double *)(v17 + 8 * (2 * v29));
      if (v30 * v30 + *(double *)(v17 + 8 * ((2 * v29) | 1u)) * *(double *)(v17 + 8 * ((2 * v29) | 1u)) < v16)
        ++v20;
    }
    while (v21 != v14);
    goto LABEL_17;
  }
LABEL_18:
  v31 = *((double *)a4 + 1);
  v32 = *((double *)a4 + 4);
  v33 = *((double *)a4 + 5);
  v34 = *((double *)a4 + 8);
  v35 = *((double *)a4 + 9);
  v36 = *((double *)a4 + 2);
  v37 = *((double *)a4 + 3);
  v39 = *((double *)a4 + 10);
  v38 = *((double *)a4 + 11);
  v40 = *((double *)a4 + 6);
  v41 = *((double *)a4 + 7);
  v42 = v47 * *(double *)a4 + v51 * v32 + v55 * v34;
  v43 = v52 * v32 + v48 * *(double *)a4 + v56 * v34;
  v67[0] = v46 * *(double *)a4 + v50 * v32 + v54 * v34;
  v67[1] = v46 * v31 + v50 * v33 + v54 * v35;
  v67[2] = v46 * v36 + v54 * v39 + v50 * v40;
  v67[3] = v46 * v37 - (v46 * v49 + v50 * v53 + v54 * v57) + v54 * v38 + v50 * v41;
  v67[4] = v42;
  v67[5] = v47 * v31 + v51 * v33 + v55 * v35;
  v67[6] = v51 * v40 + v47 * v36 + v55 * v39;
  v67[7] = v51 * v41 + v55 * v38 + v47 * v37 - (v47 * v49 + v51 * v53 + v55 * v57);
  v67[8] = v43;
  v67[9] = v52 * v33 + v48 * v31 + v56 * v35;
  v67[10] = v48 * v36 + v56 * v39 + v52 * v40;
  v67[11] = v52 * v41 + v48 * v37 + v56 * v38 - (v48 * v49 + v52 * v53 + v56 * v57);
  v44 = sub_20F04C560((uint64_t)v67, a5, a6);
LABEL_20:
  kdebug_trace();
  return v44;
}

void sub_20F403F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E8E69C4((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_20F403FD0(uint64_t a1, uint64_t *a2, uint64_t *a3, char **a4, _OWORD *a5, double *a6, long double *a7, _QWORD *a8)
{
  char *v16;
  char *v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  double v30;
  int v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  __int128 v60;
  __int128 v61;
  int v62;
  double v63[13];

  v63[12] = *(double *)MEMORY[0x24BDAC8D0];
  v60 = 0u;
  v61 = 0u;
  v62 = 733221140;
  kdebug_trace();
  if (((a3[1] - *a3) >> 3) / 3uLL != (unint64_t)((a2[1] - *a2) >> 3) >> 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/P2PStateCorrection.cpp", 90, (uint64_t)"Xs.size() / 3 == xs.size() / 2", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if ((sub_20EB5BFBC(*(_QWORD *)(a1 + 184), a2, a3, a4, a5, (uint64_t)&v48) & 1) == 0)
    goto LABEL_19;
  v17 = *a4;
  v16 = a4[1];
  if (*a4 != v16)
  {
    v18 = *(double *)(a1 + 8) * *(double *)(a1 + 8);
    v19 = *a2;
    v20 = v16 - v17;
    v21 = v16 - v17 - 4;
    if (v21 >= 4)
    {
      v24 = 0;
      v25 = 0;
      v26 = (v21 >> 2) + 1;
      v23 = &v17[4 * (v26 & 0x7FFFFFFFFFFFFFFELL)];
      v27 = v17 + 4;
      v28 = v26 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v29 = *(v27 - 1);
        v30 = *(double *)(v19 + 8 * (2 * v29));
        if (v30 * v30 + *(double *)(v19 + 8 * ((2 * v29) | 1u)) * *(double *)(v19 + 8 * ((2 * v29) | 1u)) < v18)
          ++v24;
        if (*(double *)(v19 + 8 * (2 * *v27)) * *(double *)(v19 + 8 * (2 * *v27))
           + *(double *)(v19 + 8 * ((2 * *v27) | 1u)) * *(double *)(v19 + 8 * ((2 * *v27) | 1u)) < v18)
          ++v25;
        v27 += 2;
        v28 -= 2;
      }
      while (v28);
      v22 = v25 + v24;
      if (v26 == (v26 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_17:
        if ((double)v22 / (double)(v20 >> 2) < *(double *)(a1 + 96))
          goto LABEL_18;
LABEL_19:
        v46 = 0;
        goto LABEL_20;
      }
    }
    else
    {
      v22 = 0;
      v23 = *a4;
    }
    do
    {
      v31 = *(_DWORD *)v23;
      v23 += 4;
      v32 = *(double *)(v19 + 8 * (2 * v31));
      if (v32 * v32 + *(double *)(v19 + 8 * ((2 * v31) | 1u)) * *(double *)(v19 + 8 * ((2 * v31) | 1u)) < v18)
        ++v22;
    }
    while (v23 != v16);
    goto LABEL_17;
  }
LABEL_18:
  v33 = a6[1];
  v34 = a6[4];
  v35 = a6[5];
  v36 = a6[8];
  v37 = a6[9];
  v38 = a6[2];
  v39 = a6[3];
  v41 = a6[10];
  v40 = a6[11];
  v42 = a6[6];
  v43 = a6[7];
  v44 = v49 * *a6 + v53 * v34 + v57 * v36;
  v45 = v54 * v34 + v50 * *a6 + v58 * v36;
  v63[0] = v48 * *a6 + v52 * v34 + v56 * v36;
  v63[1] = v48 * v33 + v52 * v35 + v56 * v37;
  v63[2] = v48 * v38 + v56 * v41 + v52 * v42;
  v63[3] = v48 * v39 - (v48 * v51 + v52 * v55 + v56 * v59) + v56 * v40 + v52 * v43;
  v63[4] = v44;
  v63[5] = v49 * v33 + v53 * v35 + v57 * v37;
  v63[6] = v53 * v42 + v49 * v38 + v57 * v41;
  v63[7] = v53 * v43 + v57 * v40 + v49 * v39 - (v49 * v51 + v53 * v55 + v57 * v59);
  v63[8] = v45;
  v63[9] = v54 * v35 + v50 * v33 + v58 * v37;
  v63[10] = v50 * v38 + v58 * v41 + v54 * v42;
  v63[11] = v54 * v43 + v50 * v39 + v58 * v40 - (v50 * v51 + v54 * v55 + v58 * v59);
  v46 = sub_20F04C560((uint64_t)v63, a7, a8);
LABEL_20:
  kdebug_trace();
  return v46;
}

void sub_20F4043E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F40441C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, double a8)
{
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  const void *v16;
  int64_t v17;
  char *v18;
  char *v19;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 24) = a8 * 0.5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v12 = *(const void **)a5;
  v11 = *(_QWORD *)(a5 + 8);
  v13 = v11 - *(_QWORD *)a5;
  if (v11 != *(_QWORD *)a5)
  {
    if (v13 < 0)
      sub_20E867F44();
    v14 = (char *)operator new(v11 - *(_QWORD *)a5);
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(a1 + 48) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 40) = v15;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v16 = *(const void **)a7;
  v17 = *(_QWORD *)(a7 + 8) - *(_QWORD *)a7;
  if (v17)
  {
    if (v17 < 0)
      sub_20E867F44();
    v18 = (char *)operator new(v17);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = v18;
    v19 = &v18[8 * (v17 >> 3)];
    *(_QWORD *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 64) = v19;
  }
  *(_BYTE *)(a1 + 80) = a6;
  *(_OWORD *)(a1 + 88) = xmmword_2103B4340;
  *(_OWORD *)(a1 + 104) = xmmword_2103B4350;
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  *(_QWORD *)(a1 + 136) = 0x3F1A36E2EB1C432DLL;
  return a1;
}

void sub_20F404558(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F40458C(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  double v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void *v14;

  v3 = sub_20E868FE0(a1, a2);
  *(_QWORD *)(v3 + 184) = 0;
  v4 = (uint64_t *)(v3 + 184);
  v5 = operator new();
  v6 = *(double *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 145);
  *(_OWORD *)v5 = *(_OWORD *)(a1 + 24);
  v8 = *(_BYTE **)(a1 + 48);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a1 + 40);
  *(double *)(v5 + 24) = v6 * 0.5;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  v9 = *(_BYTE **)(a1 + 56);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    if (v10 < 0)
      sub_20E867F44();
    v11 = (char *)operator new(v9 - v8);
    *(_QWORD *)(v5 + 32) = v11;
    v12 = &v11[8 * (v10 >> 3)];
    *(_QWORD *)(v5 + 48) = v12;
    memcpy(v11, v8, v10);
    *(_QWORD *)(v5 + 40) = v12;
  }
  *(_BYTE *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 64) = xmmword_210378560;
  *(_OWORD *)(v5 + 80) = xmmword_210378570;
  *(int64x2_t *)(v5 + 96) = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  *(_QWORD *)(v5 + 112) = 0x3F1A36E2EB1C432DLL;
  v13 = *v4;
  *v4 = v5;
  if (v13)
  {
    v14 = *(void **)(v13 + 32);
    if (v14)
    {
      *(_QWORD *)(v13 + 40) = v14;
      operator delete(v14);
    }
    MEMORY[0x212BC6398](v13, 0x1010C409BE32CFALL);
  }
  return a1;
}

void sub_20F4046D8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  sub_20F404738(v2);
  sub_20EE81A24(v1);
  _Unwind_Resume(a1);
}

void sub_20F4046F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 40) = v6;
    operator delete(v6);
  }
  MEMORY[0x212BC6398](v3, 0x1010C409BE32CFALL);
  sub_20F404738(v2);
  sub_20EE81A24(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F404738(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 32);
    if (v3)
    {
      *(_QWORD *)(v2 + 40) = v3;
      operator delete(v3);
    }
    MEMORY[0x212BC6398](v2, 0x1010C409BE32CFALL);
  }
  return a1;
}

uint64_t sub_20F40478C(uint64_t a1, uint64_t *a2, uint64_t *a3, double *a4, double *a5, char **a6)
{
  char *v12;
  char *v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  __int128 v66;
  __int128 v67;
  int v68;

  v66 = 0u;
  v67 = 0u;
  v68 = 733221132;
  kdebug_trace();
  if (((a3[1] - *a3) >> 3) / 3uLL != (unint64_t)((a2[1] - *a2) >> 3) >> 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/P3PStateCorrection.cpp", 48, (uint64_t)"Xs.size() / 3 == xs.size() / 2", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if ((sub_20EB63308(*(_QWORD *)(a1 + 184), a2, a3, (uint64_t)&v54, a6, 0, 0) & 1) == 0)
    goto LABEL_19;
  v13 = *a6;
  v12 = a6[1];
  if (*a6 != v12)
  {
    v14 = *(double *)(a1 + 8) * *(double *)(a1 + 8);
    v15 = *a2;
    v16 = v12 - v13;
    v17 = v12 - v13 - 4;
    if (v17 >= 4)
    {
      v20 = 0;
      v21 = 0;
      v22 = (v17 >> 2) + 1;
      v19 = &v13[4 * (v22 & 0x7FFFFFFFFFFFFFFELL)];
      v23 = v13 + 4;
      v24 = v22 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v25 = *(v23 - 1);
        v26 = *(double *)(v15 + 8 * (2 * v25));
        if (v26 * v26 + *(double *)(v15 + 8 * ((2 * v25) | 1u)) * *(double *)(v15 + 8 * ((2 * v25) | 1u)) < v14)
          ++v20;
        if (*(double *)(v15 + 8 * (2 * *v23)) * *(double *)(v15 + 8 * (2 * *v23))
           + *(double *)(v15 + 8 * ((2 * *v23) | 1u)) * *(double *)(v15 + 8 * ((2 * *v23) | 1u)) < v14)
          ++v21;
        v23 += 2;
        v24 -= 2;
      }
      while (v24);
      v18 = v21 + v20;
      if (v22 == (v22 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_17:
        if ((double)v18 / (double)(v16 >> 2) < *(double *)(a1 + 96))
          goto LABEL_18;
LABEL_19:
        v52 = 0;
        goto LABEL_20;
      }
    }
    else
    {
      v18 = 0;
      v19 = *a6;
    }
    do
    {
      v27 = *(_DWORD *)v19;
      v19 += 4;
      v28 = *(double *)(v15 + 8 * (2 * v27));
      if (v28 * v28 + *(double *)(v15 + 8 * ((2 * v27) | 1u)) * *(double *)(v15 + 8 * ((2 * v27) | 1u)) < v14)
        ++v18;
    }
    while (v19 != v12);
    goto LABEL_17;
  }
LABEL_18:
  v29 = v60;
  v30 = a4[1];
  v31 = a4[4];
  v32 = a4[5];
  v33 = a4[8];
  v34 = a4[9];
  v35 = v54 * v30 + v58 * v32 + v62 * v34;
  v36 = a4[2];
  v37 = a4[3];
  v39 = a4[10];
  v38 = a4[11];
  v40 = a4[6];
  v41 = a4[7];
  v42 = v54 * v36 + v62 * v39 + v58 * v40;
  v43 = v54 * v37 - (v54 * v57 + v58 * v61 + v62 * v65) + v62 * v38 + v58 * v41;
  v44 = v55 * *a4 + v59 * v31 + v63 * v33;
  v45 = v55 * v30 + v59 * v32 + v63 * v34;
  v46 = v59 * v40 + v55 * v36 + v63 * v39;
  v47 = v59 * v41 + v63 * v38 + v55 * v37 - (v55 * v57 + v59 * v61 + v63 * v65);
  v48 = v60 * v31 + v56 * *a4 + v64 * v33;
  v49 = v60 * v32 + v56 * v30 + v64 * v34;
  v50 = v56 * v36 + v64 * v39 + v60 * v40;
  v51 = v56 * v37 + v64 * v38 - (v56 * v57 + v60 * v61 + v64 * v65);
  *a5 = v54 * *a4 + v58 * v31 + v62 * v33;
  a5[1] = v35;
  a5[2] = v42;
  a5[3] = v43;
  a5[4] = v44;
  a5[5] = v45;
  a5[6] = v46;
  a5[7] = v47;
  a5[8] = v48;
  a5[9] = v49;
  a5[10] = v50;
  a5[11] = v29 * v41 + v51;
  v52 = 1;
LABEL_20:
  kdebug_trace();
  return v52;
}

void sub_20F404B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F404B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F404B88(uint64_t a1, uint64_t *a2, uint64_t *a3, char **a4, _OWORD *a5, double *a6, double *a7)
{
  char *v14;
  char *v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  double v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  __int128 v68;
  __int128 v69;
  int v70;

  v68 = 0u;
  v69 = 0u;
  v70 = 733221140;
  kdebug_trace();
  if (((a3[1] - *a3) >> 3) / 3uLL != (unint64_t)((a2[1] - *a2) >> 3) >> 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/P3PStateCorrection.cpp", 79, (uint64_t)"Xs.size() / 3 == xs.size() / 2", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if ((sub_20EB6A180(*(_QWORD *)(a1 + 184), a2, a3, a4, a5, (uint64_t)&v56) & 1) == 0)
    goto LABEL_19;
  v15 = *a4;
  v14 = a4[1];
  if (*a4 != v14)
  {
    v16 = *(double *)(a1 + 8) * *(double *)(a1 + 8);
    v17 = *a2;
    v18 = v14 - v15;
    v19 = v14 - v15 - 4;
    if (v19 >= 4)
    {
      v22 = 0;
      v23 = 0;
      v24 = (v19 >> 2) + 1;
      v21 = &v15[4 * (v24 & 0x7FFFFFFFFFFFFFFELL)];
      v25 = v15 + 4;
      v26 = v24 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v27 = *(v25 - 1);
        v28 = *(double *)(v17 + 8 * (2 * v27));
        if (v28 * v28 + *(double *)(v17 + 8 * ((2 * v27) | 1u)) * *(double *)(v17 + 8 * ((2 * v27) | 1u)) < v16)
          ++v22;
        if (*(double *)(v17 + 8 * (2 * *v25)) * *(double *)(v17 + 8 * (2 * *v25))
           + *(double *)(v17 + 8 * ((2 * *v25) | 1u)) * *(double *)(v17 + 8 * ((2 * *v25) | 1u)) < v16)
          ++v23;
        v25 += 2;
        v26 -= 2;
      }
      while (v26);
      v20 = v23 + v22;
      if (v24 == (v24 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_17:
        if ((double)v20 / (double)(v18 >> 2) < *(double *)(a1 + 96))
          goto LABEL_18;
LABEL_19:
        v54 = 0;
        goto LABEL_20;
      }
    }
    else
    {
      v20 = 0;
      v21 = *a4;
    }
    do
    {
      v29 = *(_DWORD *)v21;
      v21 += 4;
      v30 = *(double *)(v17 + 8 * (2 * v29));
      if (v30 * v30 + *(double *)(v17 + 8 * ((2 * v29) | 1u)) * *(double *)(v17 + 8 * ((2 * v29) | 1u)) < v16)
        ++v20;
    }
    while (v21 != v14);
    goto LABEL_17;
  }
LABEL_18:
  v31 = v62;
  v32 = a6[1];
  v33 = a6[4];
  v34 = a6[5];
  v35 = a6[8];
  v36 = a6[9];
  v37 = v56 * v32 + v60 * v34 + v64 * v36;
  v38 = a6[2];
  v39 = a6[3];
  v41 = a6[10];
  v40 = a6[11];
  v42 = a6[6];
  v43 = a6[7];
  v44 = v56 * v38 + v64 * v41 + v60 * v42;
  v45 = v56 * v39 - (v56 * v59 + v60 * v63 + v64 * v67) + v64 * v40 + v60 * v43;
  v46 = v57 * *a6 + v61 * v33 + v65 * v35;
  v47 = v57 * v32 + v61 * v34 + v65 * v36;
  v48 = v61 * v42 + v57 * v38 + v65 * v41;
  v49 = v61 * v43 + v65 * v40 + v57 * v39 - (v57 * v59 + v61 * v63 + v65 * v67);
  v50 = v62 * v33 + v58 * *a6 + v66 * v35;
  v51 = v62 * v34 + v58 * v32 + v66 * v36;
  v52 = v58 * v38 + v66 * v41 + v62 * v42;
  v53 = v58 * v39 + v66 * v40 - (v58 * v59 + v62 * v63 + v66 * v67);
  *a7 = v56 * *a6 + v60 * v33 + v64 * v35;
  a7[1] = v37;
  a7[2] = v44;
  a7[3] = v45;
  a7[4] = v46;
  a7[5] = v47;
  a7[6] = v48;
  a7[7] = v49;
  a7[8] = v50;
  a7[9] = v51;
  a7[10] = v52;
  a7[11] = v31 * v43 + v53;
  v54 = 1;
LABEL_20:
  kdebug_trace();
  return v54;
}

void sub_20F404F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F404F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F404F8C(uint64_t a1, __int128 *a2, double *a3, int a4, double a5)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  __int128 v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  _QWORD *v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v87;
  double v88;
  int v89;
  char __dst[1800];
  char v91[1800];
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v89 = a4;
  v88 = a5;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 2;
  *(_OWORD *)(a1 + 200) = 0u;
  v8 = a1 + 200;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 360) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 368) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 376) = -1;
  *(_QWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 414) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 445) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 464) = 1;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 1065353216;
  *(_DWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_DWORD *)(a1 + 616) = 1065353216;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_DWORD *)(a1 + 656) = 1065353216;
  v9 = (_QWORD *)(a1 + 672);
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  sub_20FD30C88(a1, 0, 0, 1uLL);
  v10 = *(_QWORD *)a1;
  v11 = *a2;
  v12 = a2[2];
  *(_OWORD *)(v10 + 16) = a2[1];
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)v10 = v11;
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[6];
  *(_OWORD *)(v10 + 80) = a2[5];
  *(_OWORD *)(v10 + 96) = v15;
  *(_OWORD *)(v10 + 48) = v13;
  *(_OWORD *)(v10 + 64) = v14;
  v16 = a2[7];
  v17 = a2[8];
  v18 = a2[9];
  *(_QWORD *)(v10 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(v10 + 128) = v17;
  *(_OWORD *)(v10 + 144) = v18;
  *(_OWORD *)(v10 + 112) = v16;
  v19 = *(char **)(a1 + 704);
  v20 = *(char **)(a1 + 696);
  v21 = v19 - v20;
  if ((unint64_t)(v19 - v20) <= 0xE)
  {
    v22 = *(_QWORD *)(a1 + 712);
    if (v22 - (uint64_t)v19 >= 15 - v21)
    {
      bzero(*(void **)(a1 + 704), 15 - v21);
      *(_QWORD *)(a1 + 704) = v20 + 15;
      goto LABEL_30;
    }
    v23 = v22 - (_QWORD)v20;
    v24 = 2 * v23;
    if (2 * v23 <= 0xF)
      v24 = 15;
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
      v25 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    v26 = (char *)operator new(v25);
    v87 = v9;
    v27 = &v26[v21];
    bzero(&v26[v21], 15 - v21);
    if (v19 == v20)
      goto LABEL_28;
    if (v21 >= 8 && (unint64_t)(v20 - v26) >= 0x20)
    {
      if (v21 < 0x20)
      {
        v28 = 0;
        goto LABEL_20;
      }
      v28 = v21 & 0xFFFFFFFFFFFFFFE0;
      v29 = v19 - 16;
      v30 = &v26[v19 - 16 - v20];
      v31 = v21 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v32 = *(_OWORD *)v29;
        *((_OWORD *)v30 - 1) = *((_OWORD *)v29 - 1);
        *(_OWORD *)v30 = v32;
        v30 -= 32;
        v29 -= 32;
        v31 -= 32;
      }
      while (v31);
      if (v21 == v28)
        goto LABEL_27;
      if ((v21 & 0x18) != 0)
      {
LABEL_20:
        v27 -= v21 & 0xFFFFFFFFFFFFFFF8;
        v33 = &v19[-v28 - 8];
        v34 = (char *)(v33 - v20);
        v35 = v28 - (v21 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v36 = *(_QWORD *)v33;
          v33 -= 8;
          *(_QWORD *)&v34[(_QWORD)v26] = v36;
          v34 -= 8;
          v35 += 8;
        }
        while (v35);
        v19 -= v21 & 0xFFFFFFFFFFFFFFF8;
        if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_27;
        goto LABEL_25;
      }
      v27 -= v28;
      v19 -= v28;
    }
LABEL_25:
    v37 = v27 - 1;
    do
    {
      v38 = *--v19;
      *v37-- = v38;
    }
    while (v19 != v20);
LABEL_27:
    v19 = v20;
    v27 = v26;
LABEL_28:
    *(_QWORD *)(a1 + 696) = v27;
    *(_QWORD *)(a1 + 704) = v26 + 15;
    v9 = v87;
    *(_QWORD *)(a1 + 712) = &v26[v25];
    if (v19)
      operator delete(v19);
    goto LABEL_30;
  }
  if (v21 != 15)
    *(_QWORD *)(a1 + 704) = v20 + 15;
LABEL_30:
  **(_BYTE **)(a1 + 696) = fabs(*a3) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 1) = fabs(a3[16]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 2) = fabs(a3[32]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 3) = fabs(a3[48]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 4) = fabs(a3[64]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 5) = fabs(a3[80]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 6) = fabs(a3[96]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 7) = fabs(a3[112]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 8) = fabs(a3[128]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 9) = fabs(a3[144]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 10) = fabs(a3[160]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 11) = fabs(a3[176]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 12) = fabs(a3[192]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 13) = fabs(a3[208]) > 1.0e-10;
  *(_BYTE *)(*(_QWORD *)(a1 + 696) + 14) = fabs(a3[224]) > 1.0e-10;
  v39 = *(_QWORD *)(a1 + 672);
  v40 = *(_QWORD *)(a1 + 680) - v39;
  if (v40 > 0x707)
  {
    if (v40 != 1800)
      *(_QWORD *)(a1 + 680) = v39 + 1800;
  }
  else
  {
    sub_20E93D8FC((uint64_t)v9, 225 - (v40 >> 3));
    v39 = *v9;
  }
  v41 = 0;
  v42 = *(unsigned __int8 **)(a1 + 696);
  v43 = *v42;
  v44 = v42[1];
  v45 = v42[2];
  v46 = v42[3];
  v47 = v42[4];
  v48 = v42[5];
  v49 = v42[6];
  v50 = v42[7];
  v51 = v42[8];
  v52 = v42[9];
  v53 = v42[10];
  v54 = v42[11];
  v55 = v42[12];
  v56 = v42[13];
  v57 = a3 + 7;
  v58 = v91;
  v59 = v42[14];
  do
  {
    if (v42[v41])
    {
      if (*v42)
      {
        *(_QWORD *)v58 = *(v57 - 7);
        v58 += 8;
      }
      if (v42[1])
      {
        *(_QWORD *)v58 = *(v57 - 6);
        v58 += 8;
      }
      if (v42[2])
      {
        *(_QWORD *)v58 = *(v57 - 5);
        v58 += 8;
      }
      if (v42[3])
      {
        *(_QWORD *)v58 = *(v57 - 4);
        v58 += 8;
      }
      if (v42[4])
      {
        *(_QWORD *)v58 = *(v57 - 3);
        v58 += 8;
      }
      if (v42[5])
      {
        *(_QWORD *)v58 = *(v57 - 2);
        v58 += 8;
      }
      if (v42[6])
      {
        *(_QWORD *)v58 = *(v57 - 1);
        v58 += 8;
      }
      if (v42[7])
      {
        *(_QWORD *)v58 = *v57;
        v58 += 8;
      }
      if (v42[8])
      {
        *(_QWORD *)v58 = v57[1];
        v58 += 8;
      }
      if (v42[9])
      {
        *(_QWORD *)v58 = v57[2];
        v58 += 8;
      }
      if (v42[10])
      {
        *(_QWORD *)v58 = v57[3];
        v58 += 8;
      }
      if (v42[11])
      {
        *(_QWORD *)v58 = v57[4];
        v58 += 8;
      }
      if (v42[12])
      {
        *(_QWORD *)v58 = v57[5];
        v58 += 8;
      }
      if (v42[13])
      {
        *(_QWORD *)v58 = v57[6];
        v58 += 8;
      }
      if (v42[14])
      {
        *(_QWORD *)v58 = v57[7];
        v58 += 8;
      }
    }
    ++v41;
    v57 += 15;
  }
  while (v41 != 15);
  if (sub_21020B160(__dst, v91, v44 + v43 + v45 + v46 + v47 + v48 + v49 + v50 + v51 + v52 + v53 + v54 + v55 + v56 + v59))
  {
    v60 = 0;
    v61 = v39 + 56;
    v62 = __dst;
    while (1)
    {
      while (!v42[v60])
      {
        v63 = (_OWORD *)(v61 - 56);
        *(_QWORD *)(v61 + 56) = 0;
        *(_OWORD *)(v61 + 24) = 0uLL;
        *(_OWORD *)(v61 + 40) = 0uLL;
        v63[3] = 0uLL;
        *(_OWORD *)(v61 + 8) = 0uLL;
        v63[1] = 0uLL;
        v63[2] = 0uLL;
        *v63 = 0uLL;
        ++v60;
        v61 += 120;
        if (v60 == 15)
          goto LABEL_112;
      }
      v64 = 0;
      if (*v42)
        break;
      *(_QWORD *)(v61 - 56) = 0;
      if (v42[1])
        goto LABEL_73;
LABEL_74:
      *(_QWORD *)(v61 - 48) = v64;
      v67 = 0;
      if (v42[2])
      {
        v68 = *(_QWORD *)v62;
        v62 += 8;
        *(_QWORD *)(v61 - 40) = v68;
        if (!v42[3])
          goto LABEL_77;
LABEL_76:
        v69 = *(_QWORD *)v62;
        v62 += 8;
        v67 = v69;
        goto LABEL_77;
      }
      *(_QWORD *)(v61 - 40) = 0;
      if (v42[3])
        goto LABEL_76;
LABEL_77:
      *(_QWORD *)(v61 - 32) = v67;
      v70 = 0;
      if (v42[4])
      {
        v71 = *(_QWORD *)v62;
        v62 += 8;
        *(_QWORD *)(v61 - 24) = v71;
        if (!v42[5])
          goto LABEL_80;
LABEL_79:
        v72 = *(_QWORD *)v62;
        v62 += 8;
        v70 = v72;
        goto LABEL_80;
      }
      *(_QWORD *)(v61 - 24) = 0;
      if (v42[5])
        goto LABEL_79;
LABEL_80:
      *(_QWORD *)(v61 - 16) = v70;
      v73 = 0;
      if (v42[6])
      {
        v74 = *(_QWORD *)v62;
        v62 += 8;
        *(_QWORD *)(v61 - 8) = v74;
        if (!v42[7])
          goto LABEL_83;
LABEL_82:
        v75 = *(_QWORD *)v62;
        v62 += 8;
        v73 = v75;
        goto LABEL_83;
      }
      *(_QWORD *)(v61 - 8) = 0;
      if (v42[7])
        goto LABEL_82;
LABEL_83:
      *(_QWORD *)v61 = v73;
      v76 = 0;
      if (v42[8])
      {
        v77 = *(_QWORD *)v62;
        v62 += 8;
        *(_QWORD *)(v61 + 8) = v77;
        if (!v42[9])
          goto LABEL_86;
LABEL_85:
        v78 = *(_QWORD *)v62;
        v62 += 8;
        v76 = v78;
        goto LABEL_86;
      }
      *(_QWORD *)(v61 + 8) = 0;
      if (v42[9])
        goto LABEL_85;
LABEL_86:
      *(_QWORD *)(v61 + 16) = v76;
      v79 = 0;
      if (v42[10])
      {
        v80 = *(_QWORD *)v62;
        v62 += 8;
        *(_QWORD *)(v61 + 24) = v80;
        if (!v42[11])
          goto LABEL_89;
LABEL_88:
        v81 = *(_QWORD *)v62;
        v62 += 8;
        v79 = v81;
        goto LABEL_89;
      }
      *(_QWORD *)(v61 + 24) = 0;
      if (v42[11])
        goto LABEL_88;
LABEL_89:
      *(_QWORD *)(v61 + 32) = v79;
      v82 = 0;
      if (!v42[12])
      {
        *(_QWORD *)(v61 + 40) = 0;
        if (!v42[13])
          goto LABEL_92;
LABEL_91:
        v84 = *(_QWORD *)v62;
        v62 += 8;
        v82 = v84;
        goto LABEL_92;
      }
      v83 = *(_QWORD *)v62;
      v62 += 8;
      *(_QWORD *)(v61 + 40) = v83;
      if (v42[13])
        goto LABEL_91;
LABEL_92:
      *(_QWORD *)(v61 + 48) = v82;
      if (v42[14])
      {
        v85 = *(_QWORD *)v62;
        v62 += 8;
        *(_QWORD *)(v61 + 56) = v85;
        ++v60;
        v61 += 120;
        if (v60 == 15)
          goto LABEL_112;
      }
      else
      {
        *(_QWORD *)(v61 + 56) = 0;
        ++v60;
        v61 += 120;
        if (v60 == 15)
          goto LABEL_112;
      }
    }
    v65 = *(_QWORD *)v62;
    v62 += 8;
    *(_QWORD *)(v61 - 56) = v65;
    if (!v42[1])
      goto LABEL_74;
LABEL_73:
    v66 = *(_QWORD *)v62;
    v62 += 8;
    v64 = v66;
    goto LABEL_74;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/SlidingWindowEstimate.cpp", 56, (uint64_t)"v", 1, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_112:
  sub_20F172AE4(v8, 1uLL, (const float *)&v89);
  sub_20F4058C4(a1 + 224, 1uLL, (uint64_t *)&v88);
  return a1;
}

void sub_20F405870(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[87];
  if (v4)
  {
    v1[88] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      sub_20F132AF8(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[85] = v5;
  operator delete(v5);
  sub_20F132AF8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F4058C4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64x2_t *v25;
  unint64_t v26;
  int64x2_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64x2_t *v35;
  uint64_t v36;
  int64x2_t v37;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(uint64_t **)a1;
  result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 3)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 61)
      goto LABEL_38;
    v9 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v9 = a2;
    v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
    v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 61)
LABEL_38:
      sub_20E867F44();
    v12 = v11;
    result = (uint64_t *)operator new(8 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v13 = &result[a2];
    v14 = *a3;
    v15 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v16 = result;
    if (v15 < 3)
      goto LABEL_41;
    v17 = v15 + 1;
    v16 = &result[v17 & 0x3FFFFFFFFFFFFFFCLL];
    v18 = vdupq_lane_s64(v14, 0);
    v19 = (int64x2_t *)(result + 2);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != v13);
    }
    goto LABEL_37;
  }
  v21 = *(uint64_t **)(a1 + 8);
  v22 = (char *)v21 - (char *)v7;
  v23 = v21 - v7;
  if (v23 >= a2)
    v24 = a2;
  else
    v24 = v21 - v7;
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3)
      goto LABEL_42;
    result = &v7[v24 & 0xFFFFFFFFFFFFFFFCLL];
    v25 = (int64x2_t *)(v7 + 2);
    v26 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v27 = vdupq_lane_s64(*a3, 0);
      v25[-1] = v27;
      *v25 = v27;
      v25 += 2;
      v26 -= 4;
    }
    while (v26);
    v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFFCLL);
    v24 &= 3u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  v10 = a2 >= v23;
  v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    v13 = &v7[a2];
LABEL_37:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v30 = &v21[v29];
  v31 = v22 & 0xFFFFFFFFFFFFFFF8;
  v32 = 8 * a2 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8;
  if (v32 < 0x98 || v21 < a3 + 1 && (uint64_t *)((char *)&v21[a2] - v31) > a3)
    goto LABEL_43;
  v33 = (v32 >> 3) + 1;
  v34 = &v21[v33 & 0x3FFFFFFFFFFFFFFCLL];
  v35 = (int64x2_t *)(v21 + 2);
  v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v37 = vdupq_lane_s64(*a3, 0);
    v35[-1] = v37;
    *v35 = v37;
    v35 += 2;
    v36 -= 4;
  }
  while (v36);
  v21 = v34;
  if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_43:
    do
      *v21++ = *a3;
    while (v21 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

